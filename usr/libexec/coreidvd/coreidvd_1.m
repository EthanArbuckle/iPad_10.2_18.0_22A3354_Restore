uint64_t getEnumTagSinglePayload for IQModel(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 5913))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 5913);
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 5896) = 0u;
    *(_BYTE *)(result + 5912) = 0;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    if (a3 >= 0x7FFFFFFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQModel()
{
  return &type metadata for IQModel;
}

uint64_t type metadata accessor for ServerEndPoint()
{
  return objc_opt_self(_TtC8coreidvd14ServerEndPoint);
}

uint64_t sub_1000889E0()
{
  return type metadata accessor for UserInputValidationURL(0);
}

uint64_t type metadata accessor for UserInputValidationURL(uint64_t a1)
{
  return sub_100038B7C(a1, qword_100631940, (uint64_t)&nominal type descriptor for UserInputValidationURL);
}

uint64_t sub_1000889FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100520D08;
  v4[1] = &unk_100520D08;
  v4[2] = &unk_100520D20;
  result = type metadata accessor for EncryptionParamsAlgorithmIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100520D38;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for VerifiedClaimField()
{
  return objc_opt_self(_TtC8coreidvd18VerifiedClaimField);
}

uint64_t destroy for UserInputField(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t initializeWithCopy for UserInputField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 120) = v10;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for UserInputField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 initializeWithTake for UserInputField(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for UserInputField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  v14 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 144);
  v17 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserInputField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputField()
{
  return &type metadata for UserInputField;
}

uint64_t destroy for Page(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for Page(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v12 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v11;
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *assignWithCopy for Page(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[11] = a2[11];
  v16 = a2[12];
  v17 = a1[12];
  a1[12] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a1[13];
  v19 = a2[13];
  a1[13] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for Page(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for Page(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  v11 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Page(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Page(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Page()
{
  return &type metadata for Page;
}

uint64_t sub_1000892A0()
{
  return type metadata accessor for LegacyWorkflow(0);
}

uint64_t type metadata accessor for LegacyWorkflow(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100631AD0, (uint64_t)&nominal type descriptor for LegacyWorkflow);
}

void sub_1000892BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[19];

  v4[0] = &unk_100520D08;
  v4[1] = &unk_100520D08;
  v4[2] = &unk_100520D08;
  v4[3] = &unk_100520D08;
  v4[4] = &unk_100520D08;
  v4[5] = &unk_100520D08;
  v4[6] = &unk_100520D20;
  v4[7] = &unk_100520D38;
  v4[8] = &unk_100520D08;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = &unk_100520D08;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = &unk_100520D08;
  v4[13] = &unk_100520E18;
  sub_10003B6E4(319, (unint64_t *)&qword_100631AE0, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(v2 - 8) + 64;
    v4[15] = &unk_100520E30;
    v4[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[17] = &unk_100520D38;
    v4[18] = &unk_100520E48;
    swift_updateClassMetadata2(a1, 256, 19, v4, a1 + 80);
  }
}

uint64_t sub_10008939C()
{
  return type metadata accessor for LegacyINOWorkflow(0);
}

uint64_t type metadata accessor for LegacyINOWorkflow(uint64_t a1)
{
  return sub_100038B7C(a1, qword_100631C30, (uint64_t)&nominal type descriptor for LegacyINOWorkflow);
}

uint64_t sub_1000893B8(uint64_t a1)
{
  _QWORD v2[15];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = &unk_100520E30;
  v2[2] = &unk_100520E30;
  v2[3] = &unk_100520E48;
  v2[4] = "\t";
  v2[5] = &unk_100520E30;
  v2[6] = &unk_100520E30;
  v2[7] = &unk_100520E30;
  v2[8] = "\t";
  v2[9] = "\t";
  v2[10] = "\t";
  v2[11] = "\t";
  v2[12] = "\t";
  v2[13] = &unk_100520D20;
  v2[14] = &unk_100520E48;
  return swift_updateClassMetadata2(a1, 256, 15, v2, a1 + 264);
}

uint64_t sub_100089438()
{
  return type metadata accessor for LegacySPWorkflow(0);
}

uint64_t type metadata accessor for LegacySPWorkflow(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100631E08, (uint64_t)&nominal type descriptor for LegacySPWorkflow);
}

void sub_100089454(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[22];

  v4[0] = &unk_100520E30;
  v4[1] = &unk_100520E30;
  v4[2] = &unk_100520E48;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = &unk_100520E30;
  sub_10003B6E4(319, (unint64_t *)&unk_100631E18, (uint64_t (*)(uint64_t))&type metadata accessor for RecipientEncryptionCertificate);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    v4[9] = &unk_100520E30;
    v4[10] = &unk_100520D20;
    v4[11] = &unk_100520D20;
    v4[12] = &unk_100520E30;
    v4[13] = &unk_100520E48;
    v4[14] = &unk_100520E48;
    v4[15] = &unk_100520E48;
    v4[16] = "!";
    v4[17] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[18] = &unk_100520D38;
    v4[19] = "\t";
    v4[20] = &unk_100520E48;
    v4[21] = &unk_100520E48;
    swift_updateClassMetadata2(a1, 256, 22, v4, a1 + 264);
  }
}

__n128 initializeWithTake for AcceptedVerifiedClaim(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Connectivity(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Connectivity(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Connectivity()
{
  return &type metadata for Connectivity;
}

uint64_t initializeWithCopy for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentSessionManager.RequestedElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableAttribute()
{
  return &type metadata for ShareableAttribute;
}

ValueMetadata *type metadata accessor for AcceptedVerifiedClaim()
{
  return &type metadata for AcceptedVerifiedClaim;
}

ValueMetadata *type metadata accessor for UserConsentType()
{
  return &type metadata for UserConsentType;
}

_BYTE *sub_1000897A8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowType()
{
  return &type metadata for WorkflowType;
}

uint64_t destroy for IQRangeProperties(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t initializeWithCopy for IQRangeProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for IQRangeProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v6;
  return a1;
}

__n128 initializeWithTake for IQRangeProperties(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for IQRangeProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQRangeProperties(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQRangeProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQRangeProperties()
{
  return &type metadata for IQRangeProperties;
}

ValueMetadata *type metadata accessor for NonceType()
{
  return &type metadata for NonceType;
}

uint64_t destroy for Label(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v2 = a1[7];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
  }
  v3 = a1[13];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
  }
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (!v7)
  {
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 104);
    if (v10)
      goto LABEL_3;
LABEL_5:
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v10 = *(_QWORD *)(a2 + 104);
  if (!v10)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
LABEL_6:
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 48);
  v11 = (_OWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v15 = *(_QWORD *)(a2 + 72);
      v16 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      v17 = *(_QWORD *)(a2 + 88);
      v18 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      sub_100089DC0(a1 + 48);
      v23 = *(_OWORD *)(a2 + 64);
      v22 = *(_OWORD *)(a2 + 80);
      *v10 = *v11;
      *(_OWORD *)(a1 + 64) = v23;
      *(_OWORD *)(a1 + 80) = v22;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v20 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v21 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v24 = *v11;
    v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v25;
    *v10 = v24;
  }
  v26 = (_OWORD *)(a1 + 96);
  v27 = (_OWORD *)(a2 + 96);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a2 + 104);
  if (v28)
  {
    if (v29)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v30 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 104) = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v28);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v31 = *(_QWORD *)(a2 + 120);
      v32 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v33 = *(_QWORD *)(a2 + 136);
      v34 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v34);
    }
    else
    {
      sub_100089DEC(a1 + 96);
      v39 = *(_OWORD *)(a2 + 112);
      v38 = *(_OWORD *)(a2 + 128);
      *v26 = *v27;
      *(_OWORD *)(a1 + 112) = v39;
      *(_OWORD *)(a1 + 128) = v38;
    }
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v35 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v35;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v36 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v36;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v37 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v37;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
  }
  else
  {
    v40 = *v27;
    v41 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v41;
    *v26 = v40;
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v42 = *(_QWORD *)(a1 + 152);
  v43 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_100089DC0(uint64_t a1)
{
  destroy for LabelDetail(a1, &type metadata for LabelDetail);
  return a1;
}

uint64_t sub_100089DEC(uint64_t a1)
{
  destroy for LabelDetail(a1, &type metadata for BusinessChatDetail);
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 56);
    if (v11)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRelease(v10);
      v12 = *(_QWORD *)(a2 + 72);
      v13 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRelease(v13);
      v14 = *(_QWORD *)(a2 + 88);
      v15 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v14;
      swift_bridgeObjectRelease(v15);
      goto LABEL_6;
    }
    sub_100089DC0(a1 + 48);
  }
  v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_6:
  v17 = *(_QWORD *)(a1 + 104);
  if (!v17)
  {
LABEL_10:
    v23 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a2 + 104);
  if (!v18)
  {
    sub_100089DEC(a1 + 96);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v18;
  swift_bridgeObjectRelease(v17);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v21;
  swift_bridgeObjectRelease(v22);
LABEL_11:
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v24 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Label(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Label(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Label()
{
  return &type metadata for Label;
}

__n128 initializeWithTake for LabelDetail(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for BusinessChatDetail()
{
  return &type metadata for BusinessChatDetail;
}

uint64_t _s8coreidvd11LabelDetailVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *_s8coreidvd11LabelDetailVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s8coreidvd11LabelDetailVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *_s8coreidvd11LabelDetailVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t _s8coreidvd11LabelDetailVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10008A220(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelDetail()
{
  return &type metadata for LabelDetail;
}

uint64_t getEnumTagSinglePayload for Page.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Page.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10008A358 + 4 * byte_100520A40[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10008A38C + 4 * byte_100520A3B[v4]))();
}

uint64_t sub_10008A38C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A39CLL);
  return result;
}

uint64_t sub_10008A3A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A3B0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10008A3B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A3BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Page.CodingKeys()
{
  return &type metadata for Page.CodingKeys;
}

uint64_t sub_10008A3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

__n128 initializeWithTake for DigitalPresentmentEntitlements(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DataNodeProofInfo()
{
  return &type metadata for DataNodeProofInfo;
}

uint64_t destroy for CameraImage(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for CameraImage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for CameraImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  return a1;
}

__n128 initializeWithTake for CameraImage(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for CameraImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraImage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraImage()
{
  return &type metadata for CameraImage;
}

uint64_t destroy for DocumentConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for DocumentConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for DocumentConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  a1[10] = a2[10];
  v14 = a1[11];
  v15 = a2[11];
  a1[11] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  return a1;
}

__n128 initializeWithTake for DocumentConfig(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for DocumentConfig(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  v10 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  a1[9] = *(_QWORD *)(a2 + 72);
  v11 = a1[11];
  v12 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v12;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentConfig()
{
  return &type metadata for DocumentConfig;
}

uint64_t getEnumTagSinglePayload for UserInputField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10008AB7C + 4 * byte_100520A4A[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10008ABB0 + 4 * byte_100520A45[v4]))();
}

uint64_t sub_10008ABB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008ABB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008ABC0);
  return result;
}

uint64_t sub_10008ABCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008ABD4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10008ABD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008ABE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserInputField.CodingKeys()
{
  return &type metadata for UserInputField.CodingKeys;
}

uint64_t destroy for IQCriteria(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *a1;
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  v3 = a1[4];
  if (v3 != 1)
    swift_bridgeObjectRelease(v3);
  v4 = a1[8];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = a1[12];
  if (v5 != 1)
    swift_bridgeObjectRelease(v5);
  v6 = a1[16];
  if (v6 != 1)
    swift_bridgeObjectRelease(v6);
  v7 = a1[20];
  if (v7 != 1)
    swift_bridgeObjectRelease(v7);
  v8 = a1[24];
  if (v8 != 1)
    swift_bridgeObjectRelease(v8);
  v9 = a1[28];
  if (v9 != 1)
    swift_bridgeObjectRelease(v9);
  v10 = a1[32];
  if (v10 != 1)
    swift_bridgeObjectRelease(v10);
  v11 = a1[36];
  if (v11 != 1)
    swift_bridgeObjectRelease(v11);
  v12 = a1[40];
  if (v12 != 1)
    swift_bridgeObjectRelease(v12);
  v13 = a1[44];
  if (v13 != 1)
    swift_bridgeObjectRelease(v13);
  v14 = a1[48];
  if (v14 != 1)
    swift_bridgeObjectRelease(v14);
  v15 = a1[52];
  if (v15 != 1)
    swift_bridgeObjectRelease(v15);
  v16 = a1[56];
  if (v16 != 1)
    swift_bridgeObjectRelease(v16);
  v17 = a1[60];
  if (v17 != 1)
    swift_bridgeObjectRelease(v17);
  v18 = a1[64];
  if (v18 != 1)
    swift_bridgeObjectRelease(v18);
  v19 = a1[68];
  if (v19 != 1)
    swift_bridgeObjectRelease(v19);
  v20 = a1[72];
  if (v20 != 1)
    swift_bridgeObjectRelease(v20);
  v21 = a1[76];
  if (v21 != 1)
    swift_bridgeObjectRelease(v21);
  v22 = a1[80];
  if (v22 != 1)
    swift_bridgeObjectRelease(v22);
  v23 = a1[84];
  if (v23 != 1)
    swift_bridgeObjectRelease(v23);
  v24 = a1[88];
  if (v24 != 1)
    swift_bridgeObjectRelease(v24);
  v25 = a1[92];
  if (v25 != 1)
    swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(a1[102]);
  return swift_bridgeObjectRelease(a1[103]);
}

uint64_t initializeWithCopy for IQCriteria(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a2;
  if (*a2 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    swift_bridgeObjectRetain(v4);
  }
  v5 = a2[4];
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_bridgeObjectRetain(v5);
  }
  v6 = a2[8];
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    swift_bridgeObjectRetain(v6);
  }
  v7 = a2[12];
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)a2 + 105);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v7;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    swift_bridgeObjectRetain(v7);
  }
  v8 = a2[16];
  if (v8 == 1)
  {
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)((char *)a2 + 137);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = v8;
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    swift_bridgeObjectRetain(v8);
  }
  v9 = a2[20];
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v9;
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
    swift_bridgeObjectRetain(v9);
  }
  v10 = a2[24];
  if (v10 == 1)
  {
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v10;
    *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    swift_bridgeObjectRetain(v10);
  }
  v11 = a2[28];
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)((char *)a2 + 233);
  }
  else
  {
    *(_QWORD *)(a1 + 224) = v11;
    *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
    *(_QWORD *)(a1 + 240) = a2[30];
    *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
    swift_bridgeObjectRetain(v11);
  }
  v12 = a2[32];
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(a1 + 265) = *(_OWORD *)((char *)a2 + 265);
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v12;
    *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
    *(_QWORD *)(a1 + 272) = a2[34];
    *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
    swift_bridgeObjectRetain(v12);
  }
  v13 = a2[36];
  if (v13 == 1)
  {
    *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 297) = *(_OWORD *)((char *)a2 + 297);
  }
  else
  {
    *(_QWORD *)(a1 + 288) = v13;
    *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
    *(_QWORD *)(a1 + 304) = a2[38];
    *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
    swift_bridgeObjectRetain(v13);
  }
  v14 = a2[40];
  if (v14 == 1)
  {
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 329) = *(_OWORD *)((char *)a2 + 329);
  }
  else
  {
    *(_QWORD *)(a1 + 320) = v14;
    *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
    swift_bridgeObjectRetain(v14);
  }
  v15 = a2[44];
  if (v15 == 1)
  {
    *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
    *(_OWORD *)(a1 + 361) = *(_OWORD *)((char *)a2 + 361);
  }
  else
  {
    *(_QWORD *)(a1 + 352) = v15;
    *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
    *(_QWORD *)(a1 + 368) = a2[46];
    *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
    swift_bridgeObjectRetain(v15);
  }
  v16 = a2[48];
  if (v16 == 1)
  {
    *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
    *(_OWORD *)(a1 + 393) = *(_OWORD *)((char *)a2 + 393);
  }
  else
  {
    *(_QWORD *)(a1 + 384) = v16;
    *(_BYTE *)(a1 + 392) = *((_BYTE *)a2 + 392);
    *(_QWORD *)(a1 + 400) = a2[50];
    *(_BYTE *)(a1 + 408) = *((_BYTE *)a2 + 408);
    swift_bridgeObjectRetain(v16);
  }
  v17 = a2[52];
  if (v17 == 1)
  {
    *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
    *(_OWORD *)(a1 + 425) = *(_OWORD *)((char *)a2 + 425);
  }
  else
  {
    *(_QWORD *)(a1 + 416) = v17;
    *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
    *(_QWORD *)(a1 + 432) = a2[54];
    *(_BYTE *)(a1 + 440) = *((_BYTE *)a2 + 440);
    swift_bridgeObjectRetain(v17);
  }
  v18 = a2[56];
  if (v18 == 1)
  {
    *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)((char *)a2 + 457);
  }
  else
  {
    *(_QWORD *)(a1 + 448) = v18;
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
    *(_QWORD *)(a1 + 464) = a2[58];
    *(_BYTE *)(a1 + 472) = *((_BYTE *)a2 + 472);
    swift_bridgeObjectRetain(v18);
  }
  v19 = a2[60];
  if (v19 == 1)
  {
    *(_OWORD *)(a1 + 480) = *((_OWORD *)a2 + 30);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)((char *)a2 + 489);
  }
  else
  {
    *(_QWORD *)(a1 + 480) = v19;
    *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
    *(_QWORD *)(a1 + 496) = a2[62];
    *(_BYTE *)(a1 + 504) = *((_BYTE *)a2 + 504);
    swift_bridgeObjectRetain(v19);
  }
  v20 = a2[64];
  if (v20 == 1)
  {
    *(_OWORD *)(a1 + 512) = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 521) = *(_OWORD *)((char *)a2 + 521);
  }
  else
  {
    *(_QWORD *)(a1 + 512) = v20;
    *(_BYTE *)(a1 + 520) = *((_BYTE *)a2 + 520);
    *(_QWORD *)(a1 + 528) = a2[66];
    *(_BYTE *)(a1 + 536) = *((_BYTE *)a2 + 536);
    swift_bridgeObjectRetain(v20);
  }
  v21 = a2[68];
  if (v21 == 1)
  {
    *(_OWORD *)(a1 + 544) = *((_OWORD *)a2 + 34);
    *(_OWORD *)(a1 + 553) = *(_OWORD *)((char *)a2 + 553);
  }
  else
  {
    *(_QWORD *)(a1 + 544) = v21;
    *(_BYTE *)(a1 + 552) = *((_BYTE *)a2 + 552);
    *(_QWORD *)(a1 + 560) = a2[70];
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    swift_bridgeObjectRetain(v21);
  }
  v22 = a2[72];
  if (v22 == 1)
  {
    *(_OWORD *)(a1 + 576) = *((_OWORD *)a2 + 36);
    *(_OWORD *)(a1 + 585) = *(_OWORD *)((char *)a2 + 585);
  }
  else
  {
    *(_QWORD *)(a1 + 576) = v22;
    *(_BYTE *)(a1 + 584) = *((_BYTE *)a2 + 584);
    *(_QWORD *)(a1 + 592) = a2[74];
    *(_BYTE *)(a1 + 600) = *((_BYTE *)a2 + 600);
    swift_bridgeObjectRetain(v22);
  }
  v23 = a2[76];
  if (v23 == 1)
  {
    *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
    *(_OWORD *)(a1 + 617) = *(_OWORD *)((char *)a2 + 617);
  }
  else
  {
    *(_QWORD *)(a1 + 608) = v23;
    *(_BYTE *)(a1 + 616) = *((_BYTE *)a2 + 616);
    *(_QWORD *)(a1 + 624) = a2[78];
    *(_BYTE *)(a1 + 632) = *((_BYTE *)a2 + 632);
    swift_bridgeObjectRetain(v23);
  }
  v24 = a2[80];
  if (v24 == 1)
  {
    *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
    *(_OWORD *)(a1 + 649) = *(_OWORD *)((char *)a2 + 649);
  }
  else
  {
    *(_QWORD *)(a1 + 640) = v24;
    *(_BYTE *)(a1 + 648) = *((_BYTE *)a2 + 648);
    *(_QWORD *)(a1 + 656) = a2[82];
    *(_BYTE *)(a1 + 664) = *((_BYTE *)a2 + 664);
    swift_bridgeObjectRetain(v24);
  }
  v25 = a2[84];
  if (v25 == 1)
  {
    *(_OWORD *)(a1 + 672) = *((_OWORD *)a2 + 42);
    *(_OWORD *)(a1 + 681) = *(_OWORD *)((char *)a2 + 681);
  }
  else
  {
    *(_QWORD *)(a1 + 672) = v25;
    *(_BYTE *)(a1 + 680) = *((_BYTE *)a2 + 680);
    *(_QWORD *)(a1 + 688) = a2[86];
    *(_BYTE *)(a1 + 696) = *((_BYTE *)a2 + 696);
    swift_bridgeObjectRetain(v25);
  }
  v26 = a2[88];
  if (v26 == 1)
  {
    *(_OWORD *)(a1 + 704) = *((_OWORD *)a2 + 44);
    *(_OWORD *)(a1 + 713) = *(_OWORD *)((char *)a2 + 713);
  }
  else
  {
    *(_QWORD *)(a1 + 704) = v26;
    *(_BYTE *)(a1 + 712) = *((_BYTE *)a2 + 712);
    *(_QWORD *)(a1 + 720) = a2[90];
    *(_BYTE *)(a1 + 728) = *((_BYTE *)a2 + 728);
    swift_bridgeObjectRetain(v26);
  }
  v27 = a2[92];
  if (v27 == 1)
  {
    *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 46);
    *(_OWORD *)(a1 + 745) = *(_OWORD *)((char *)a2 + 745);
  }
  else
  {
    *(_QWORD *)(a1 + 736) = v27;
    *(_BYTE *)(a1 + 744) = *((_BYTE *)a2 + 744);
    *(_QWORD *)(a1 + 752) = a2[94];
    *(_BYTE *)(a1 + 760) = *((_BYTE *)a2 + 760);
    swift_bridgeObjectRetain(v27);
  }
  *(_OWORD *)(a1 + 768) = *((_OWORD *)a2 + 48);
  *(_BYTE *)(a1 + 784) = *((_BYTE *)a2 + 784);
  *(_BYTE *)(a1 + 808) = *((_BYTE *)a2 + 808);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 809) = *(_DWORD *)((char *)a2 + 809);
  *(_WORD *)(a1 + 813) = *(_WORD *)((char *)a2 + 813);
  *(_BYTE *)(a1 + 815) = *((_BYTE *)a2 + 815);
  v28 = a2[102];
  *(_QWORD *)(a1 + 816) = v28;
  v29 = a2[103];
  *(_QWORD *)(a1 + 824) = v29;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t *assignWithCopy for IQCriteria(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 *v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  __int128 *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  __int128 *v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  __int128 *v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 *v178;
  __int128 *v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  __int128 *v186;
  __int128 *v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v4 = *a1;
  v5 = *a2;
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      *a1 = v5;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      v8 = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      a1[2] = v8;
      swift_bridgeObjectRetain(v5);
    }
  }
  else if (v5 == 1)
  {
    sub_100083F00(a1);
    v7 = *(_OWORD *)((char *)a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 9) = v7;
  }
  else
  {
    *a1 = v5;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v4);
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    v9 = a2[2];
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    a1[2] = v9;
  }
  v10 = (__int128 *)(a1 + 4);
  v11 = a1[4];
  v13 = (__int128 *)(a2 + 4);
  v12 = a2[4];
  if (v11 == 1)
  {
    if (v12 == 1)
    {
      v14 = *v13;
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      *v10 = v14;
    }
    else
    {
      a1[4] = v12;
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      v16 = a2[6];
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      a1[6] = v16;
      swift_bridgeObjectRetain(v12);
    }
  }
  else if (v12 == 1)
  {
    sub_100083F00(a1 + 4);
    v15 = *(_OWORD *)((char *)a2 + 41);
    *v10 = *v13;
    *(_OWORD *)((char *)a1 + 41) = v15;
  }
  else
  {
    a1[4] = v12;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v11);
    *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
    v17 = a2[6];
    *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
    a1[6] = v17;
  }
  v18 = (__int128 *)(a1 + 8);
  v19 = a1[8];
  v21 = (__int128 *)(a2 + 8);
  v20 = a2[8];
  if (v19 == 1)
  {
    if (v20 == 1)
    {
      v22 = *v21;
      *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)a2 + 73);
      *v18 = v22;
    }
    else
    {
      a1[8] = v20;
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      v24 = a2[10];
      *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
      a1[10] = v24;
      swift_bridgeObjectRetain(v20);
    }
  }
  else if (v20 == 1)
  {
    sub_100083F00(a1 + 8);
    v23 = *(_OWORD *)((char *)a2 + 73);
    *v18 = *v21;
    *(_OWORD *)((char *)a1 + 73) = v23;
  }
  else
  {
    a1[8] = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v19);
    *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
    v25 = a2[10];
    *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
    a1[10] = v25;
  }
  v26 = (__int128 *)(a1 + 12);
  v27 = a1[12];
  v29 = (__int128 *)(a2 + 12);
  v28 = a2[12];
  if (v27 == 1)
  {
    if (v28 == 1)
    {
      v30 = *v29;
      *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)a2 + 105);
      *v26 = v30;
    }
    else
    {
      a1[12] = v28;
      *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
      v32 = a2[14];
      *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
      a1[14] = v32;
      swift_bridgeObjectRetain(v28);
    }
  }
  else if (v28 == 1)
  {
    sub_100083F00(a1 + 12);
    v31 = *(_OWORD *)((char *)a2 + 105);
    *v26 = *v29;
    *(_OWORD *)((char *)a1 + 105) = v31;
  }
  else
  {
    a1[12] = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v27);
    *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
    v33 = a2[14];
    *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
    a1[14] = v33;
  }
  v34 = (__int128 *)(a1 + 16);
  v35 = a1[16];
  v37 = (__int128 *)(a2 + 16);
  v36 = a2[16];
  if (v35 == 1)
  {
    if (v36 == 1)
    {
      v38 = *v37;
      *(_OWORD *)((char *)a1 + 137) = *(_OWORD *)((char *)a2 + 137);
      *v34 = v38;
    }
    else
    {
      a1[16] = v36;
      *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
      v40 = a2[18];
      *((_BYTE *)a1 + 152) = *((_BYTE *)a2 + 152);
      a1[18] = v40;
      swift_bridgeObjectRetain(v36);
    }
  }
  else if (v36 == 1)
  {
    sub_100083F00(a1 + 16);
    v39 = *(_OWORD *)((char *)a2 + 137);
    *v34 = *v37;
    *(_OWORD *)((char *)a1 + 137) = v39;
  }
  else
  {
    a1[16] = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v35);
    *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
    v41 = a2[18];
    *((_BYTE *)a1 + 152) = *((_BYTE *)a2 + 152);
    a1[18] = v41;
  }
  v42 = (__int128 *)(a1 + 20);
  v43 = a1[20];
  v45 = (__int128 *)(a2 + 20);
  v44 = a2[20];
  if (v43 == 1)
  {
    if (v44 == 1)
    {
      v46 = *v45;
      *(_OWORD *)((char *)a1 + 169) = *(_OWORD *)((char *)a2 + 169);
      *v42 = v46;
    }
    else
    {
      a1[20] = v44;
      *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
      v48 = a2[22];
      *((_BYTE *)a1 + 184) = *((_BYTE *)a2 + 184);
      a1[22] = v48;
      swift_bridgeObjectRetain(v44);
    }
  }
  else if (v44 == 1)
  {
    sub_100083F00(a1 + 20);
    v47 = *(_OWORD *)((char *)a2 + 169);
    *v42 = *v45;
    *(_OWORD *)((char *)a1 + 169) = v47;
  }
  else
  {
    a1[20] = v44;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRelease(v43);
    *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
    v49 = a2[22];
    *((_BYTE *)a1 + 184) = *((_BYTE *)a2 + 184);
    a1[22] = v49;
  }
  v50 = (__int128 *)(a1 + 24);
  v51 = a1[24];
  v53 = (__int128 *)(a2 + 24);
  v52 = a2[24];
  if (v51 == 1)
  {
    if (v52 == 1)
    {
      v54 = *v53;
      *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)((char *)a2 + 201);
      *v50 = v54;
    }
    else
    {
      a1[24] = v52;
      *((_BYTE *)a1 + 200) = *((_BYTE *)a2 + 200);
      v56 = a2[26];
      *((_BYTE *)a1 + 216) = *((_BYTE *)a2 + 216);
      a1[26] = v56;
      swift_bridgeObjectRetain(v52);
    }
  }
  else if (v52 == 1)
  {
    sub_100083F00(a1 + 24);
    v55 = *(_OWORD *)((char *)a2 + 201);
    *v50 = *v53;
    *(_OWORD *)((char *)a1 + 201) = v55;
  }
  else
  {
    a1[24] = v52;
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRelease(v51);
    *((_BYTE *)a1 + 200) = *((_BYTE *)a2 + 200);
    v57 = a2[26];
    *((_BYTE *)a1 + 216) = *((_BYTE *)a2 + 216);
    a1[26] = v57;
  }
  v58 = (__int128 *)(a1 + 28);
  v59 = a1[28];
  v61 = (__int128 *)(a2 + 28);
  v60 = a2[28];
  if (v59 == 1)
  {
    if (v60 == 1)
    {
      v62 = *v61;
      *(_OWORD *)((char *)a1 + 233) = *(_OWORD *)((char *)a2 + 233);
      *v58 = v62;
    }
    else
    {
      a1[28] = v60;
      *((_BYTE *)a1 + 232) = *((_BYTE *)a2 + 232);
      v64 = a2[30];
      *((_BYTE *)a1 + 248) = *((_BYTE *)a2 + 248);
      a1[30] = v64;
      swift_bridgeObjectRetain(v60);
    }
  }
  else if (v60 == 1)
  {
    sub_100083F00(a1 + 28);
    v63 = *(_OWORD *)((char *)a2 + 233);
    *v58 = *v61;
    *(_OWORD *)((char *)a1 + 233) = v63;
  }
  else
  {
    a1[28] = v60;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRelease(v59);
    *((_BYTE *)a1 + 232) = *((_BYTE *)a2 + 232);
    v65 = a2[30];
    *((_BYTE *)a1 + 248) = *((_BYTE *)a2 + 248);
    a1[30] = v65;
  }
  v66 = (__int128 *)(a1 + 32);
  v67 = (__int128 *)(a2 + 32);
  v68 = a1[32];
  v69 = a2[32];
  if (v68 == 1)
  {
    if (v69 == 1)
    {
      v70 = *v67;
      *(_OWORD *)((char *)a1 + 265) = *(_OWORD *)((char *)a2 + 265);
      *v66 = v70;
    }
    else
    {
      a1[32] = v69;
      *((_BYTE *)a1 + 264) = *((_BYTE *)a2 + 264);
      v72 = a2[34];
      *((_BYTE *)a1 + 280) = *((_BYTE *)a2 + 280);
      a1[34] = v72;
      swift_bridgeObjectRetain(v69);
    }
  }
  else if (v69 == 1)
  {
    sub_100083F00(a1 + 32);
    v71 = *(_OWORD *)((char *)a2 + 265);
    *v66 = *v67;
    *(_OWORD *)((char *)a1 + 265) = v71;
  }
  else
  {
    a1[32] = v69;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRelease(v68);
    *((_BYTE *)a1 + 264) = *((_BYTE *)a2 + 264);
    v73 = a2[34];
    *((_BYTE *)a1 + 280) = *((_BYTE *)a2 + 280);
    a1[34] = v73;
  }
  v74 = (__int128 *)(a1 + 36);
  v75 = (__int128 *)(a2 + 36);
  v76 = a1[36];
  v77 = a2[36];
  if (v76 == 1)
  {
    if (v77 == 1)
    {
      v78 = *v75;
      *(_OWORD *)((char *)a1 + 297) = *(_OWORD *)((char *)a2 + 297);
      *v74 = v78;
    }
    else
    {
      a1[36] = v77;
      *((_BYTE *)a1 + 296) = *((_BYTE *)a2 + 296);
      v80 = a2[38];
      *((_BYTE *)a1 + 312) = *((_BYTE *)a2 + 312);
      a1[38] = v80;
      swift_bridgeObjectRetain(v77);
    }
  }
  else if (v77 == 1)
  {
    sub_100083F00(a1 + 36);
    v79 = *(_OWORD *)((char *)a2 + 297);
    *v74 = *v75;
    *(_OWORD *)((char *)a1 + 297) = v79;
  }
  else
  {
    a1[36] = v77;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRelease(v76);
    *((_BYTE *)a1 + 296) = *((_BYTE *)a2 + 296);
    v81 = a2[38];
    *((_BYTE *)a1 + 312) = *((_BYTE *)a2 + 312);
    a1[38] = v81;
  }
  v82 = (__int128 *)(a1 + 40);
  v83 = (__int128 *)(a2 + 40);
  v84 = a1[40];
  v85 = a2[40];
  if (v84 == 1)
  {
    if (v85 == 1)
    {
      v86 = *v83;
      *(_OWORD *)((char *)a1 + 329) = *(_OWORD *)((char *)a2 + 329);
      *v82 = v86;
    }
    else
    {
      a1[40] = v85;
      *((_BYTE *)a1 + 328) = *((_BYTE *)a2 + 328);
      v88 = a2[42];
      *((_BYTE *)a1 + 344) = *((_BYTE *)a2 + 344);
      a1[42] = v88;
      swift_bridgeObjectRetain(v85);
    }
  }
  else if (v85 == 1)
  {
    sub_100083F00(a1 + 40);
    v87 = *(_OWORD *)((char *)a2 + 329);
    *v82 = *v83;
    *(_OWORD *)((char *)a1 + 329) = v87;
  }
  else
  {
    a1[40] = v85;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease(v84);
    *((_BYTE *)a1 + 328) = *((_BYTE *)a2 + 328);
    v89 = a2[42];
    *((_BYTE *)a1 + 344) = *((_BYTE *)a2 + 344);
    a1[42] = v89;
  }
  v90 = (__int128 *)(a1 + 44);
  v91 = (__int128 *)(a2 + 44);
  v92 = a1[44];
  v93 = a2[44];
  if (v92 == 1)
  {
    if (v93 == 1)
    {
      v94 = *v91;
      *(_OWORD *)((char *)a1 + 361) = *(_OWORD *)((char *)a2 + 361);
      *v90 = v94;
    }
    else
    {
      a1[44] = v93;
      *((_BYTE *)a1 + 360) = *((_BYTE *)a2 + 360);
      v96 = a2[46];
      *((_BYTE *)a1 + 376) = *((_BYTE *)a2 + 376);
      a1[46] = v96;
      swift_bridgeObjectRetain(v93);
    }
  }
  else if (v93 == 1)
  {
    sub_100083F00(a1 + 44);
    v95 = *(_OWORD *)((char *)a2 + 361);
    *v90 = *v91;
    *(_OWORD *)((char *)a1 + 361) = v95;
  }
  else
  {
    a1[44] = v93;
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRelease(v92);
    *((_BYTE *)a1 + 360) = *((_BYTE *)a2 + 360);
    v97 = a2[46];
    *((_BYTE *)a1 + 376) = *((_BYTE *)a2 + 376);
    a1[46] = v97;
  }
  v98 = (__int128 *)(a1 + 48);
  v99 = (__int128 *)(a2 + 48);
  v100 = a1[48];
  v101 = a2[48];
  if (v100 == 1)
  {
    if (v101 == 1)
    {
      v102 = *v99;
      *(_OWORD *)((char *)a1 + 393) = *(_OWORD *)((char *)a2 + 393);
      *v98 = v102;
    }
    else
    {
      a1[48] = v101;
      *((_BYTE *)a1 + 392) = *((_BYTE *)a2 + 392);
      v104 = a2[50];
      *((_BYTE *)a1 + 408) = *((_BYTE *)a2 + 408);
      a1[50] = v104;
      swift_bridgeObjectRetain(v101);
    }
  }
  else if (v101 == 1)
  {
    sub_100083F00(a1 + 48);
    v103 = *(_OWORD *)((char *)a2 + 393);
    *v98 = *v99;
    *(_OWORD *)((char *)a1 + 393) = v103;
  }
  else
  {
    a1[48] = v101;
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRelease(v100);
    *((_BYTE *)a1 + 392) = *((_BYTE *)a2 + 392);
    v105 = a2[50];
    *((_BYTE *)a1 + 408) = *((_BYTE *)a2 + 408);
    a1[50] = v105;
  }
  v106 = (__int128 *)(a1 + 52);
  v107 = (__int128 *)(a2 + 52);
  v108 = a1[52];
  v109 = a2[52];
  if (v108 == 1)
  {
    if (v109 == 1)
    {
      v110 = *v107;
      *(_OWORD *)((char *)a1 + 425) = *(_OWORD *)((char *)a2 + 425);
      *v106 = v110;
    }
    else
    {
      a1[52] = v109;
      *((_BYTE *)a1 + 424) = *((_BYTE *)a2 + 424);
      v112 = a2[54];
      *((_BYTE *)a1 + 440) = *((_BYTE *)a2 + 440);
      a1[54] = v112;
      swift_bridgeObjectRetain(v109);
    }
  }
  else if (v109 == 1)
  {
    sub_100083F00(a1 + 52);
    v111 = *(_OWORD *)((char *)a2 + 425);
    *v106 = *v107;
    *(_OWORD *)((char *)a1 + 425) = v111;
  }
  else
  {
    a1[52] = v109;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRelease(v108);
    *((_BYTE *)a1 + 424) = *((_BYTE *)a2 + 424);
    v113 = a2[54];
    *((_BYTE *)a1 + 440) = *((_BYTE *)a2 + 440);
    a1[54] = v113;
  }
  v114 = (__int128 *)(a1 + 56);
  v115 = (__int128 *)(a2 + 56);
  v116 = a1[56];
  v117 = a2[56];
  if (v116 == 1)
  {
    if (v117 == 1)
    {
      v118 = *v115;
      *(_OWORD *)((char *)a1 + 457) = *(_OWORD *)((char *)a2 + 457);
      *v114 = v118;
    }
    else
    {
      a1[56] = v117;
      *((_BYTE *)a1 + 456) = *((_BYTE *)a2 + 456);
      v120 = a2[58];
      *((_BYTE *)a1 + 472) = *((_BYTE *)a2 + 472);
      a1[58] = v120;
      swift_bridgeObjectRetain(v117);
    }
  }
  else if (v117 == 1)
  {
    sub_100083F00(a1 + 56);
    v119 = *(_OWORD *)((char *)a2 + 457);
    *v114 = *v115;
    *(_OWORD *)((char *)a1 + 457) = v119;
  }
  else
  {
    a1[56] = v117;
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRelease(v116);
    *((_BYTE *)a1 + 456) = *((_BYTE *)a2 + 456);
    v121 = a2[58];
    *((_BYTE *)a1 + 472) = *((_BYTE *)a2 + 472);
    a1[58] = v121;
  }
  v122 = (__int128 *)(a1 + 60);
  v123 = (__int128 *)(a2 + 60);
  v124 = a1[60];
  v125 = a2[60];
  if (v124 == 1)
  {
    if (v125 == 1)
    {
      v126 = *v123;
      *(_OWORD *)((char *)a1 + 489) = *(_OWORD *)((char *)a2 + 489);
      *v122 = v126;
    }
    else
    {
      a1[60] = v125;
      *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
      v128 = a2[62];
      *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
      a1[62] = v128;
      swift_bridgeObjectRetain(v125);
    }
  }
  else if (v125 == 1)
  {
    sub_100083F00(a1 + 60);
    v127 = *(_OWORD *)((char *)a2 + 489);
    *v122 = *v123;
    *(_OWORD *)((char *)a1 + 489) = v127;
  }
  else
  {
    a1[60] = v125;
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRelease(v124);
    *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
    v129 = a2[62];
    *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
    a1[62] = v129;
  }
  v130 = (__int128 *)(a1 + 64);
  v131 = (__int128 *)(a2 + 64);
  v132 = a1[64];
  v133 = a2[64];
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      v134 = *v131;
      *(_OWORD *)((char *)a1 + 521) = *(_OWORD *)((char *)a2 + 521);
      *v130 = v134;
    }
    else
    {
      a1[64] = v133;
      *((_BYTE *)a1 + 520) = *((_BYTE *)a2 + 520);
      v136 = a2[66];
      *((_BYTE *)a1 + 536) = *((_BYTE *)a2 + 536);
      a1[66] = v136;
      swift_bridgeObjectRetain(v133);
    }
  }
  else if (v133 == 1)
  {
    sub_100083F00(a1 + 64);
    v135 = *(_OWORD *)((char *)a2 + 521);
    *v130 = *v131;
    *(_OWORD *)((char *)a1 + 521) = v135;
  }
  else
  {
    a1[64] = v133;
    swift_bridgeObjectRetain(v133);
    swift_bridgeObjectRelease(v132);
    *((_BYTE *)a1 + 520) = *((_BYTE *)a2 + 520);
    v137 = a2[66];
    *((_BYTE *)a1 + 536) = *((_BYTE *)a2 + 536);
    a1[66] = v137;
  }
  v138 = (__int128 *)(a1 + 68);
  v139 = (__int128 *)(a2 + 68);
  v140 = a1[68];
  v141 = a2[68];
  if (v140 == 1)
  {
    if (v141 == 1)
    {
      v142 = *v139;
      *(_OWORD *)((char *)a1 + 553) = *(_OWORD *)((char *)a2 + 553);
      *v138 = v142;
    }
    else
    {
      a1[68] = v141;
      *((_BYTE *)a1 + 552) = *((_BYTE *)a2 + 552);
      v144 = a2[70];
      *((_BYTE *)a1 + 568) = *((_BYTE *)a2 + 568);
      a1[70] = v144;
      swift_bridgeObjectRetain(v141);
    }
  }
  else if (v141 == 1)
  {
    sub_100083F00(a1 + 68);
    v143 = *(_OWORD *)((char *)a2 + 553);
    *v138 = *v139;
    *(_OWORD *)((char *)a1 + 553) = v143;
  }
  else
  {
    a1[68] = v141;
    swift_bridgeObjectRetain(v141);
    swift_bridgeObjectRelease(v140);
    *((_BYTE *)a1 + 552) = *((_BYTE *)a2 + 552);
    v145 = a2[70];
    *((_BYTE *)a1 + 568) = *((_BYTE *)a2 + 568);
    a1[70] = v145;
  }
  v146 = (__int128 *)(a1 + 72);
  v147 = (__int128 *)(a2 + 72);
  v148 = a1[72];
  v149 = a2[72];
  if (v148 == 1)
  {
    if (v149 == 1)
    {
      v150 = *v147;
      *(_OWORD *)((char *)a1 + 585) = *(_OWORD *)((char *)a2 + 585);
      *v146 = v150;
    }
    else
    {
      a1[72] = v149;
      *((_BYTE *)a1 + 584) = *((_BYTE *)a2 + 584);
      v152 = a2[74];
      *((_BYTE *)a1 + 600) = *((_BYTE *)a2 + 600);
      a1[74] = v152;
      swift_bridgeObjectRetain(v149);
    }
  }
  else if (v149 == 1)
  {
    sub_100083F00(a1 + 72);
    v151 = *(_OWORD *)((char *)a2 + 585);
    *v146 = *v147;
    *(_OWORD *)((char *)a1 + 585) = v151;
  }
  else
  {
    a1[72] = v149;
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRelease(v148);
    *((_BYTE *)a1 + 584) = *((_BYTE *)a2 + 584);
    v153 = a2[74];
    *((_BYTE *)a1 + 600) = *((_BYTE *)a2 + 600);
    a1[74] = v153;
  }
  v154 = (__int128 *)(a1 + 76);
  v155 = (__int128 *)(a2 + 76);
  v156 = a1[76];
  v157 = a2[76];
  if (v156 == 1)
  {
    if (v157 == 1)
    {
      v158 = *v155;
      *(_OWORD *)((char *)a1 + 617) = *(_OWORD *)((char *)a2 + 617);
      *v154 = v158;
    }
    else
    {
      a1[76] = v157;
      *((_BYTE *)a1 + 616) = *((_BYTE *)a2 + 616);
      v160 = a2[78];
      *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
      a1[78] = v160;
      swift_bridgeObjectRetain(v157);
    }
  }
  else if (v157 == 1)
  {
    sub_100083F00(a1 + 76);
    v159 = *(_OWORD *)((char *)a2 + 617);
    *v154 = *v155;
    *(_OWORD *)((char *)a1 + 617) = v159;
  }
  else
  {
    a1[76] = v157;
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRelease(v156);
    *((_BYTE *)a1 + 616) = *((_BYTE *)a2 + 616);
    v161 = a2[78];
    *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
    a1[78] = v161;
  }
  v162 = (__int128 *)(a1 + 80);
  v163 = (__int128 *)(a2 + 80);
  v164 = a1[80];
  v165 = a2[80];
  if (v164 == 1)
  {
    if (v165 == 1)
    {
      v166 = *v163;
      *(_OWORD *)((char *)a1 + 649) = *(_OWORD *)((char *)a2 + 649);
      *v162 = v166;
    }
    else
    {
      a1[80] = v165;
      *((_BYTE *)a1 + 648) = *((_BYTE *)a2 + 648);
      v168 = a2[82];
      *((_BYTE *)a1 + 664) = *((_BYTE *)a2 + 664);
      a1[82] = v168;
      swift_bridgeObjectRetain(v165);
    }
  }
  else if (v165 == 1)
  {
    sub_100083F00(a1 + 80);
    v167 = *(_OWORD *)((char *)a2 + 649);
    *v162 = *v163;
    *(_OWORD *)((char *)a1 + 649) = v167;
  }
  else
  {
    a1[80] = v165;
    swift_bridgeObjectRetain(v165);
    swift_bridgeObjectRelease(v164);
    *((_BYTE *)a1 + 648) = *((_BYTE *)a2 + 648);
    v169 = a2[82];
    *((_BYTE *)a1 + 664) = *((_BYTE *)a2 + 664);
    a1[82] = v169;
  }
  v170 = (__int128 *)(a1 + 84);
  v171 = (__int128 *)(a2 + 84);
  v172 = a1[84];
  v173 = a2[84];
  if (v172 == 1)
  {
    if (v173 == 1)
    {
      v174 = *v171;
      *(_OWORD *)((char *)a1 + 681) = *(_OWORD *)((char *)a2 + 681);
      *v170 = v174;
    }
    else
    {
      a1[84] = v173;
      *((_BYTE *)a1 + 680) = *((_BYTE *)a2 + 680);
      v176 = a2[86];
      *((_BYTE *)a1 + 696) = *((_BYTE *)a2 + 696);
      a1[86] = v176;
      swift_bridgeObjectRetain(v173);
    }
  }
  else if (v173 == 1)
  {
    sub_100083F00(a1 + 84);
    v175 = *(_OWORD *)((char *)a2 + 681);
    *v170 = *v171;
    *(_OWORD *)((char *)a1 + 681) = v175;
  }
  else
  {
    a1[84] = v173;
    swift_bridgeObjectRetain(v173);
    swift_bridgeObjectRelease(v172);
    *((_BYTE *)a1 + 680) = *((_BYTE *)a2 + 680);
    v177 = a2[86];
    *((_BYTE *)a1 + 696) = *((_BYTE *)a2 + 696);
    a1[86] = v177;
  }
  v178 = (__int128 *)(a1 + 88);
  v179 = (__int128 *)(a2 + 88);
  v180 = a1[88];
  v181 = a2[88];
  if (v180 == 1)
  {
    if (v181 == 1)
    {
      v182 = *v179;
      *(_OWORD *)((char *)a1 + 713) = *(_OWORD *)((char *)a2 + 713);
      *v178 = v182;
    }
    else
    {
      a1[88] = v181;
      *((_BYTE *)a1 + 712) = *((_BYTE *)a2 + 712);
      v184 = a2[90];
      *((_BYTE *)a1 + 728) = *((_BYTE *)a2 + 728);
      a1[90] = v184;
      swift_bridgeObjectRetain(v181);
    }
  }
  else if (v181 == 1)
  {
    sub_100083F00(a1 + 88);
    v183 = *(_OWORD *)((char *)a2 + 713);
    *v178 = *v179;
    *(_OWORD *)((char *)a1 + 713) = v183;
  }
  else
  {
    a1[88] = v181;
    swift_bridgeObjectRetain(v181);
    swift_bridgeObjectRelease(v180);
    *((_BYTE *)a1 + 712) = *((_BYTE *)a2 + 712);
    v185 = a2[90];
    *((_BYTE *)a1 + 728) = *((_BYTE *)a2 + 728);
    a1[90] = v185;
  }
  v186 = (__int128 *)(a1 + 92);
  v187 = (__int128 *)(a2 + 92);
  v188 = a1[92];
  v189 = a2[92];
  if (v188 == 1)
  {
    if (v189 == 1)
    {
      v190 = *v187;
      *(_OWORD *)((char *)a1 + 745) = *(_OWORD *)((char *)a2 + 745);
      *v186 = v190;
    }
    else
    {
      a1[92] = v189;
      *((_BYTE *)a1 + 744) = *((_BYTE *)a2 + 744);
      v192 = a2[94];
      *((_BYTE *)a1 + 760) = *((_BYTE *)a2 + 760);
      a1[94] = v192;
      swift_bridgeObjectRetain(v189);
    }
  }
  else if (v189 == 1)
  {
    sub_100083F00(a1 + 92);
    v191 = *(_OWORD *)((char *)a2 + 745);
    *v186 = *v187;
    *(_OWORD *)((char *)a1 + 745) = v191;
  }
  else
  {
    a1[92] = v189;
    swift_bridgeObjectRetain(v189);
    swift_bridgeObjectRelease(v188);
    *((_BYTE *)a1 + 744) = *((_BYTE *)a2 + 744);
    v193 = a2[94];
    *((_BYTE *)a1 + 760) = *((_BYTE *)a2 + 760);
    a1[94] = v193;
  }
  v194 = *((_OWORD *)a2 + 48);
  *((_BYTE *)a1 + 784) = *((_BYTE *)a2 + 784);
  *((_OWORD *)a1 + 48) = v194;
  v195 = *(_OWORD *)(a2 + 99);
  *((_BYTE *)a1 + 808) = *((_BYTE *)a2 + 808);
  *(_OWORD *)(a1 + 99) = v195;
  *((_BYTE *)a1 + 809) = *((_BYTE *)a2 + 809);
  *((_BYTE *)a1 + 810) = *((_BYTE *)a2 + 810);
  *((_BYTE *)a1 + 811) = *((_BYTE *)a2 + 811);
  *((_BYTE *)a1 + 812) = *((_BYTE *)a2 + 812);
  *((_BYTE *)a1 + 813) = *((_BYTE *)a2 + 813);
  *((_BYTE *)a1 + 814) = *((_BYTE *)a2 + 814);
  *((_BYTE *)a1 + 815) = *((_BYTE *)a2 + 815);
  v196 = a1[102];
  v197 = a2[102];
  a1[102] = v197;
  swift_bridgeObjectRetain(v197);
  swift_bridgeObjectRelease(v196);
  v198 = a1[103];
  v199 = a2[103];
  a1[103] = v199;
  swift_bridgeObjectRetain(v199);
  swift_bridgeObjectRelease(v198);
  return a1;
}

void *initializeWithTake for IQCriteria(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x340uLL);
}

uint64_t *assignWithTake for IQCriteria(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = *a1;
  if (v4 == 1)
    goto LABEL_4;
  if (*a2 == 1)
  {
    sub_100083F00(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
    goto LABEL_6;
  }
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
LABEL_6:
  v5 = a1[4];
  v6 = a2[4];
  if (v5 == 1)
  {
LABEL_9:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    goto LABEL_11;
  }
  if (v6 == 1)
  {
    sub_100083F00(a1 + 4);
    goto LABEL_9;
  }
  a1[4] = v6;
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
LABEL_11:
  v7 = a1[8];
  v8 = a2[8];
  if (v7 == 1)
  {
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)a2 + 73);
    goto LABEL_16;
  }
  if (v8 == 1)
  {
    sub_100083F00(a1 + 8);
    goto LABEL_14;
  }
  a1[8] = v8;
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
LABEL_16:
  v9 = a1[12];
  v10 = a2[12];
  if (v9 == 1)
  {
LABEL_19:
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)a2 + 105);
    goto LABEL_21;
  }
  if (v10 == 1)
  {
    sub_100083F00(a1 + 12);
    goto LABEL_19;
  }
  a1[12] = v10;
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
LABEL_21:
  v11 = a1[16];
  v12 = a2[16];
  if (v11 == 1)
  {
LABEL_24:
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *(_OWORD *)((char *)a1 + 137) = *(_OWORD *)((char *)a2 + 137);
    goto LABEL_26;
  }
  if (v12 == 1)
  {
    sub_100083F00(a1 + 16);
    goto LABEL_24;
  }
  a1[16] = v12;
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  a1[18] = a2[18];
  *((_BYTE *)a1 + 152) = *((_BYTE *)a2 + 152);
LABEL_26:
  v13 = a1[20];
  v14 = a2[20];
  if (v13 == 1)
  {
LABEL_29:
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *(_OWORD *)((char *)a1 + 169) = *(_OWORD *)((char *)a2 + 169);
    goto LABEL_31;
  }
  if (v14 == 1)
  {
    sub_100083F00(a1 + 20);
    goto LABEL_29;
  }
  a1[20] = v14;
  swift_bridgeObjectRelease(v13);
  *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
  a1[22] = a2[22];
  *((_BYTE *)a1 + 184) = *((_BYTE *)a2 + 184);
LABEL_31:
  v15 = a1[24];
  v16 = a2[24];
  if (v15 == 1)
  {
LABEL_34:
    *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
    *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)((char *)a2 + 201);
    goto LABEL_36;
  }
  if (v16 == 1)
  {
    sub_100083F00(a1 + 24);
    goto LABEL_34;
  }
  a1[24] = v16;
  swift_bridgeObjectRelease(v15);
  *((_BYTE *)a1 + 200) = *((_BYTE *)a2 + 200);
  a1[26] = a2[26];
  *((_BYTE *)a1 + 216) = *((_BYTE *)a2 + 216);
LABEL_36:
  v17 = a1[28];
  v18 = a2[28];
  if (v17 == 1)
  {
LABEL_39:
    *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
    *(_OWORD *)((char *)a1 + 233) = *(_OWORD *)((char *)a2 + 233);
    goto LABEL_41;
  }
  if (v18 == 1)
  {
    sub_100083F00(a1 + 28);
    goto LABEL_39;
  }
  a1[28] = v18;
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + 232) = *((_BYTE *)a2 + 232);
  a1[30] = a2[30];
  *((_BYTE *)a1 + 248) = *((_BYTE *)a2 + 248);
LABEL_41:
  v19 = a1[32];
  if (v19 == 1)
  {
LABEL_44:
    *((_OWORD *)a1 + 16) = *((_OWORD *)a2 + 16);
    *(_OWORD *)((char *)a1 + 265) = *(_OWORD *)((char *)a2 + 265);
    goto LABEL_46;
  }
  v20 = a2[32];
  if (v20 == 1)
  {
    sub_100083F00(a1 + 32);
    goto LABEL_44;
  }
  a1[32] = v20;
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + 264) = *((_BYTE *)a2 + 264);
  a1[34] = a2[34];
  *((_BYTE *)a1 + 280) = *((_BYTE *)a2 + 280);
LABEL_46:
  v21 = a1[36];
  if (v21 == 1)
  {
LABEL_49:
    *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
    *(_OWORD *)((char *)a1 + 297) = *(_OWORD *)((char *)a2 + 297);
    goto LABEL_51;
  }
  v22 = a2[36];
  if (v22 == 1)
  {
    sub_100083F00(a1 + 36);
    goto LABEL_49;
  }
  a1[36] = v22;
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + 296) = *((_BYTE *)a2 + 296);
  a1[38] = a2[38];
  *((_BYTE *)a1 + 312) = *((_BYTE *)a2 + 312);
LABEL_51:
  v23 = a1[40];
  if (v23 == 1)
  {
LABEL_54:
    *((_OWORD *)a1 + 20) = *((_OWORD *)a2 + 20);
    *(_OWORD *)((char *)a1 + 329) = *(_OWORD *)((char *)a2 + 329);
    goto LABEL_56;
  }
  v24 = a2[40];
  if (v24 == 1)
  {
    sub_100083F00(a1 + 40);
    goto LABEL_54;
  }
  a1[40] = v24;
  swift_bridgeObjectRelease(v23);
  *((_BYTE *)a1 + 328) = *((_BYTE *)a2 + 328);
  a1[42] = a2[42];
  *((_BYTE *)a1 + 344) = *((_BYTE *)a2 + 344);
LABEL_56:
  v25 = a1[44];
  if (v25 == 1)
  {
LABEL_59:
    *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
    *(_OWORD *)((char *)a1 + 361) = *(_OWORD *)((char *)a2 + 361);
    goto LABEL_61;
  }
  v26 = a2[44];
  if (v26 == 1)
  {
    sub_100083F00(a1 + 44);
    goto LABEL_59;
  }
  a1[44] = v26;
  swift_bridgeObjectRelease(v25);
  *((_BYTE *)a1 + 360) = *((_BYTE *)a2 + 360);
  a1[46] = a2[46];
  *((_BYTE *)a1 + 376) = *((_BYTE *)a2 + 376);
LABEL_61:
  v27 = a1[48];
  if (v27 == 1)
  {
LABEL_64:
    *((_OWORD *)a1 + 24) = *((_OWORD *)a2 + 24);
    *(_OWORD *)((char *)a1 + 393) = *(_OWORD *)((char *)a2 + 393);
    goto LABEL_66;
  }
  v28 = a2[48];
  if (v28 == 1)
  {
    sub_100083F00(a1 + 48);
    goto LABEL_64;
  }
  a1[48] = v28;
  swift_bridgeObjectRelease(v27);
  *((_BYTE *)a1 + 392) = *((_BYTE *)a2 + 392);
  a1[50] = a2[50];
  *((_BYTE *)a1 + 408) = *((_BYTE *)a2 + 408);
LABEL_66:
  v29 = a1[52];
  if (v29 == 1)
  {
LABEL_69:
    *((_OWORD *)a1 + 26) = *((_OWORD *)a2 + 26);
    *(_OWORD *)((char *)a1 + 425) = *(_OWORD *)((char *)a2 + 425);
    goto LABEL_71;
  }
  v30 = a2[52];
  if (v30 == 1)
  {
    sub_100083F00(a1 + 52);
    goto LABEL_69;
  }
  a1[52] = v30;
  swift_bridgeObjectRelease(v29);
  *((_BYTE *)a1 + 424) = *((_BYTE *)a2 + 424);
  a1[54] = a2[54];
  *((_BYTE *)a1 + 440) = *((_BYTE *)a2 + 440);
LABEL_71:
  v31 = a1[56];
  if (v31 == 1)
  {
LABEL_74:
    *((_OWORD *)a1 + 28) = *((_OWORD *)a2 + 28);
    *(_OWORD *)((char *)a1 + 457) = *(_OWORD *)((char *)a2 + 457);
    goto LABEL_76;
  }
  v32 = a2[56];
  if (v32 == 1)
  {
    sub_100083F00(a1 + 56);
    goto LABEL_74;
  }
  a1[56] = v32;
  swift_bridgeObjectRelease(v31);
  *((_BYTE *)a1 + 456) = *((_BYTE *)a2 + 456);
  a1[58] = a2[58];
  *((_BYTE *)a1 + 472) = *((_BYTE *)a2 + 472);
LABEL_76:
  v33 = a1[60];
  if (v33 == 1)
  {
LABEL_79:
    *((_OWORD *)a1 + 30) = *((_OWORD *)a2 + 30);
    *(_OWORD *)((char *)a1 + 489) = *(_OWORD *)((char *)a2 + 489);
    goto LABEL_81;
  }
  v34 = a2[60];
  if (v34 == 1)
  {
    sub_100083F00(a1 + 60);
    goto LABEL_79;
  }
  a1[60] = v34;
  swift_bridgeObjectRelease(v33);
  *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
  a1[62] = a2[62];
  *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
LABEL_81:
  v35 = a1[64];
  if (v35 == 1)
  {
LABEL_84:
    *((_OWORD *)a1 + 32) = *((_OWORD *)a2 + 32);
    *(_OWORD *)((char *)a1 + 521) = *(_OWORD *)((char *)a2 + 521);
    goto LABEL_86;
  }
  v36 = a2[64];
  if (v36 == 1)
  {
    sub_100083F00(a1 + 64);
    goto LABEL_84;
  }
  a1[64] = v36;
  swift_bridgeObjectRelease(v35);
  *((_BYTE *)a1 + 520) = *((_BYTE *)a2 + 520);
  a1[66] = a2[66];
  *((_BYTE *)a1 + 536) = *((_BYTE *)a2 + 536);
LABEL_86:
  v37 = a1[68];
  if (v37 == 1)
  {
LABEL_89:
    *((_OWORD *)a1 + 34) = *((_OWORD *)a2 + 34);
    *(_OWORD *)((char *)a1 + 553) = *(_OWORD *)((char *)a2 + 553);
    goto LABEL_91;
  }
  v38 = a2[68];
  if (v38 == 1)
  {
    sub_100083F00(a1 + 68);
    goto LABEL_89;
  }
  a1[68] = v38;
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)a1 + 552) = *((_BYTE *)a2 + 552);
  a1[70] = a2[70];
  *((_BYTE *)a1 + 568) = *((_BYTE *)a2 + 568);
LABEL_91:
  v39 = a1[72];
  if (v39 == 1)
  {
LABEL_94:
    *((_OWORD *)a1 + 36) = *((_OWORD *)a2 + 36);
    *(_OWORD *)((char *)a1 + 585) = *(_OWORD *)((char *)a2 + 585);
    goto LABEL_96;
  }
  v40 = a2[72];
  if (v40 == 1)
  {
    sub_100083F00(a1 + 72);
    goto LABEL_94;
  }
  a1[72] = v40;
  swift_bridgeObjectRelease(v39);
  *((_BYTE *)a1 + 584) = *((_BYTE *)a2 + 584);
  a1[74] = a2[74];
  *((_BYTE *)a1 + 600) = *((_BYTE *)a2 + 600);
LABEL_96:
  v41 = a1[76];
  if (v41 == 1)
  {
LABEL_99:
    *((_OWORD *)a1 + 38) = *((_OWORD *)a2 + 38);
    *(_OWORD *)((char *)a1 + 617) = *(_OWORD *)((char *)a2 + 617);
    goto LABEL_101;
  }
  v42 = a2[76];
  if (v42 == 1)
  {
    sub_100083F00(a1 + 76);
    goto LABEL_99;
  }
  a1[76] = v42;
  swift_bridgeObjectRelease(v41);
  *((_BYTE *)a1 + 616) = *((_BYTE *)a2 + 616);
  a1[78] = a2[78];
  *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
LABEL_101:
  v43 = a1[80];
  if (v43 == 1)
  {
LABEL_104:
    *((_OWORD *)a1 + 40) = *((_OWORD *)a2 + 40);
    *(_OWORD *)((char *)a1 + 649) = *(_OWORD *)((char *)a2 + 649);
    goto LABEL_106;
  }
  v44 = a2[80];
  if (v44 == 1)
  {
    sub_100083F00(a1 + 80);
    goto LABEL_104;
  }
  a1[80] = v44;
  swift_bridgeObjectRelease(v43);
  *((_BYTE *)a1 + 648) = *((_BYTE *)a2 + 648);
  a1[82] = a2[82];
  *((_BYTE *)a1 + 664) = *((_BYTE *)a2 + 664);
LABEL_106:
  v45 = a1[84];
  if (v45 == 1)
  {
LABEL_109:
    *((_OWORD *)a1 + 42) = *((_OWORD *)a2 + 42);
    *(_OWORD *)((char *)a1 + 681) = *(_OWORD *)((char *)a2 + 681);
    goto LABEL_111;
  }
  v46 = a2[84];
  if (v46 == 1)
  {
    sub_100083F00(a1 + 84);
    goto LABEL_109;
  }
  a1[84] = v46;
  swift_bridgeObjectRelease(v45);
  *((_BYTE *)a1 + 680) = *((_BYTE *)a2 + 680);
  a1[86] = a2[86];
  *((_BYTE *)a1 + 696) = *((_BYTE *)a2 + 696);
LABEL_111:
  v47 = a1[88];
  if (v47 == 1)
  {
LABEL_114:
    *((_OWORD *)a1 + 44) = *((_OWORD *)a2 + 44);
    *(_OWORD *)((char *)a1 + 713) = *(_OWORD *)((char *)a2 + 713);
    goto LABEL_116;
  }
  v48 = a2[88];
  if (v48 == 1)
  {
    sub_100083F00(a1 + 88);
    goto LABEL_114;
  }
  a1[88] = v48;
  swift_bridgeObjectRelease(v47);
  *((_BYTE *)a1 + 712) = *((_BYTE *)a2 + 712);
  a1[90] = a2[90];
  *((_BYTE *)a1 + 728) = *((_BYTE *)a2 + 728);
LABEL_116:
  v49 = a1[92];
  if (v49 != 1)
  {
    v50 = a2[92];
    if (v50 != 1)
    {
      a1[92] = v50;
      swift_bridgeObjectRelease(v49);
      *((_BYTE *)a1 + 744) = *((_BYTE *)a2 + 744);
      a1[94] = a2[94];
      *((_BYTE *)a1 + 760) = *((_BYTE *)a2 + 760);
      goto LABEL_121;
    }
    sub_100083F00(a1 + 92);
  }
  *((_OWORD *)a1 + 46) = *((_OWORD *)a2 + 46);
  *(_OWORD *)((char *)a1 + 745) = *(_OWORD *)((char *)a2 + 745);
LABEL_121:
  *((_OWORD *)a1 + 48) = *((_OWORD *)a2 + 48);
  *((_BYTE *)a1 + 784) = *((_BYTE *)a2 + 784);
  *((_BYTE *)a1 + 808) = *((_BYTE *)a2 + 808);
  *(_OWORD *)(a1 + 99) = *(_OWORD *)(a2 + 99);
  *(_DWORD *)((char *)a1 + 809) = *(_DWORD *)((char *)a2 + 809);
  *(_WORD *)((char *)a1 + 813) = *(_WORD *)((char *)a2 + 813);
  *((_BYTE *)a1 + 815) = *((_BYTE *)a2 + 815);
  v51 = a1[102];
  a1[102] = a2[102];
  swift_bridgeObjectRelease(v51);
  v52 = a1[103];
  a1[103] = a2[103];
  swift_bridgeObjectRelease(v52);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQCriteria(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 832))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 816);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 824) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 832) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 832) = 0;
    if (a2)
      *(_QWORD *)(result + 816) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQCriteria()
{
  return &type metadata for IQCriteria;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentEntitlements.Element(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IQModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10008D0CC + 4 * byte_100520A54[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10008D100 + 4 * byte_100520A4F[v4]))();
}

uint64_t sub_10008D100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008D108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008D110);
  return result;
}

uint64_t sub_10008D11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008D124);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10008D128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008D130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQModel.CodingKeys()
{
  return &type metadata for IQModel.CodingKeys;
}

unint64_t sub_10008D150()
{
  unint64_t result;

  result = qword_100631FF8;
  if (!qword_100631FF8)
  {
    result = swift_getWitnessTable(&unk_100521058, &type metadata for IQModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100631FF8);
  }
  return result;
}

unint64_t sub_10008D198()
{
  unint64_t result;

  result = qword_100632000;
  if (!qword_100632000)
  {
    result = swift_getWitnessTable(&unk_100521138, &type metadata for UserInputField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632000);
  }
  return result;
}

unint64_t sub_10008D1E0()
{
  unint64_t result;

  result = qword_100632008;
  if (!qword_100632008)
  {
    result = swift_getWitnessTable(&unk_100521268, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632008);
  }
  return result;
}

unint64_t sub_10008D228()
{
  unint64_t result;

  result = qword_100632010;
  if (!qword_100632010)
  {
    result = swift_getWitnessTable(&unk_100521398, &type metadata for NonceType);
    atomic_store(result, (unint64_t *)&qword_100632010);
  }
  return result;
}

unint64_t sub_10008D270()
{
  unint64_t result;

  result = qword_100632018;
  if (!qword_100632018)
  {
    result = swift_getWitnessTable(&unk_1005214D8, &type metadata for WorkflowType);
    atomic_store(result, (unint64_t *)&qword_100632018);
  }
  return result;
}

unint64_t sub_10008D2B8()
{
  unint64_t result;

  result = qword_100632020;
  if (!qword_100632020)
  {
    result = swift_getWitnessTable(&unk_1005215C8, &type metadata for UserConsentType);
    atomic_store(result, (unint64_t *)&qword_100632020);
  }
  return result;
}

unint64_t sub_10008D300()
{
  unint64_t result;

  result = qword_100632028;
  if (!qword_100632028)
  {
    result = swift_getWitnessTable(&unk_1005211D8, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632028);
  }
  return result;
}

unint64_t sub_10008D348()
{
  unint64_t result;

  result = qword_100632030;
  if (!qword_100632030)
  {
    result = swift_getWitnessTable(&unk_100521200, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632030);
  }
  return result;
}

unint64_t sub_10008D390()
{
  unint64_t result;

  result = qword_100632038;
  if (!qword_100632038)
  {
    result = swift_getWitnessTable(&unk_1005210A8, &type metadata for UserInputField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632038);
  }
  return result;
}

unint64_t sub_10008D3D8()
{
  unint64_t result;

  result = qword_100632040;
  if (!qword_100632040)
  {
    result = swift_getWitnessTable(&unk_1005210D0, &type metadata for UserInputField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632040);
  }
  return result;
}

unint64_t sub_10008D420()
{
  unint64_t result;

  result = qword_100632048;
  if (!qword_100632048)
  {
    result = swift_getWitnessTable(&unk_100520FC8, &type metadata for IQModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632048);
  }
  return result;
}

unint64_t sub_10008D468()
{
  unint64_t result;

  result = qword_100632050;
  if (!qword_100632050)
  {
    result = swift_getWitnessTable(&unk_100520FF0, &type metadata for IQModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632050);
  }
  return result;
}

unint64_t sub_10008D4AC()
{
  unint64_t result;

  result = qword_100632060;
  if (!qword_100632060)
  {
    result = swift_getWitnessTable(&unk_100522FAC, &type metadata for IQCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632060);
  }
  return result;
}

unint64_t sub_10008D4F0()
{
  unint64_t result;

  result = qword_100632070;
  if (!qword_100632070)
  {
    result = swift_getWitnessTable(&unk_1005213C0, &type metadata for IQRangeProperties);
    atomic_store(result, (unint64_t *)&qword_100632070);
  }
  return result;
}

unint64_t sub_10008D534()
{
  unint64_t result;

  result = qword_100632080;
  if (!qword_100632080)
  {
    result = swift_getWitnessTable(&unk_100522F84, &type metadata for IQBoolProperties);
    atomic_store(result, (unint64_t *)&qword_100632080);
  }
  return result;
}

unint64_t sub_10008D578()
{
  unint64_t result;

  result = qword_1006320A0;
  if (!qword_1006320A0)
  {
    result = swift_getWitnessTable(&unk_100522F5C, &type metadata for IQComplexProperties);
    atomic_store(result, (unint64_t *)&qword_1006320A0);
  }
  return result;
}

unint64_t sub_10008D5BC()
{
  unint64_t result;

  result = qword_1006320B0;
  if (!qword_1006320B0)
  {
    result = swift_getWitnessTable(&unk_100522F0C, &type metadata for DocumentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006320B0);
  }
  return result;
}

unint64_t sub_10008D600()
{
  unint64_t result;

  result = qword_1006320B8;
  if (!qword_1006320B8)
  {
    result = swift_getWitnessTable(&unk_100522EE4, &type metadata for ImageFormat);
    atomic_store(result, (unint64_t *)&qword_1006320B8);
  }
  return result;
}

unint64_t sub_10008D644()
{
  unint64_t result;

  result = qword_1006320C8;
  if (!qword_1006320C8)
  {
    result = swift_getWitnessTable(&unk_100522E94, &type metadata for CameraImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006320C8);
  }
  return result;
}

unint64_t sub_10008D688()
{
  unint64_t result;

  result = qword_1006320E0;
  if (!qword_1006320E0)
  {
    result = swift_getWitnessTable(&unk_100522E6C, &type metadata for ImageDimension);
    atomic_store(result, (unint64_t *)&qword_1006320E0);
  }
  return result;
}

unint64_t sub_10008D6CC()
{
  unint64_t result;

  result = qword_1006320F0;
  if (!qword_1006320F0)
  {
    result = swift_getWitnessTable(&unk_100522E1C, &type metadata for DataNodeProofInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006320F0);
  }
  return result;
}

unint64_t sub_10008D710()
{
  unint64_t result;

  result = qword_100632100;
  if (!qword_100632100)
  {
    result = swift_getWitnessTable(&unk_100522DCC, &type metadata for Label.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632100);
  }
  return result;
}

unint64_t sub_10008D754()
{
  unint64_t result;

  result = qword_100632110;
  if (!qword_100632110)
  {
    result = swift_getWitnessTable(&unk_100521290, &type metadata for LabelDetail);
    atomic_store(result, (unint64_t *)&qword_100632110);
  }
  return result;
}

unint64_t sub_10008D798()
{
  unint64_t result;

  result = qword_100632120;
  if (!qword_100632120)
  {
    result = swift_getWitnessTable(&unk_1005212E0, &type metadata for BusinessChatDetail);
    atomic_store(result, (unint64_t *)&qword_100632120);
  }
  return result;
}

unint64_t sub_10008D7DC()
{
  unint64_t result;

  result = qword_100632130;
  if (!qword_100632130)
  {
    result = swift_getWitnessTable(&unk_100522DA4, &type metadata for LabelCondition);
    atomic_store(result, (unint64_t *)&qword_100632130);
  }
  return result;
}

unint64_t sub_10008D820()
{
  unint64_t result;

  result = qword_100632150;
  if (!qword_100632150)
  {
    result = swift_getWitnessTable(&unk_100522D7C, &type metadata for AlternativeLabel);
    atomic_store(result, (unint64_t *)&qword_100632150);
  }
  return result;
}

unint64_t sub_10008D864()
{
  unint64_t result;

  result = qword_100632160;
  if (!qword_100632160)
  {
    result = swift_getWitnessTable(&unk_100522D2C, &type metadata for ServerEndPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632160);
  }
  return result;
}

unint64_t sub_10008D8A8()
{
  unint64_t result;

  result = qword_100632170;
  if (!qword_100632170)
  {
    result = swift_getWitnessTable(&unk_100522CDC, &type metadata for UserInputValidationURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632170);
  }
  return result;
}

unint64_t sub_10008D8EC()
{
  unint64_t result;

  result = qword_100632188;
  if (!qword_100632188)
  {
    result = swift_getWitnessTable(&unk_100522C8C, &type metadata for VerifiedClaimField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632188);
  }
  return result;
}

uint64_t sub_10008D930(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746954627573 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746954627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10008DA6C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100543300)
  {
    v4 = 0x8000000100543300;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100543300, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000014)
  {
    v6 = 0x8000000100543320;
    if (a2 == 0x8000000100543320)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100543320, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x664F7265626D756ELL && a2 == 0xEF73656972746552)
  {
    v7 = 0xEF73656972746552;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x664F7265626D756ELL, 0xEF73656972746552, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100543340)
  {
    swift_bridgeObjectRelease(0x8000000100543340);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100543340, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10008DC34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v2 = sub_100004828(&qword_100632190);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10000806C(a1, v6);
  v8 = sub_10008DDE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Connectivity.CodingKeys, &type metadata for Connectivity.CodingKeys, v8, v6, v7);
  v19 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v19, v2, v9);
  v18 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v18, v2, v10);
  v17 = 2;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v2, v11);
  v16 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v2, v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v13;
}

unint64_t sub_10008DDE4()
{
  unint64_t result;

  result = qword_100632198;
  if (!qword_100632198)
  {
    result = swift_getWitnessTable(&unk_100522C14, &type metadata for Connectivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632198);
  }
  return result;
}

unint64_t sub_10008DE28()
{
  unint64_t result;

  result = qword_1006321B0;
  if (!qword_1006321B0)
  {
    result = swift_getWitnessTable(&unk_100522BC4, &type metadata for ShareableAttribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006321B0);
  }
  return result;
}

unint64_t sub_10008DE6C()
{
  unint64_t result;

  result = qword_1006321C8;
  if (!qword_1006321C8)
  {
    result = swift_getWitnessTable(&unk_100522B74, &type metadata for AcceptedVerifiedClaim.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006321C8);
  }
  return result;
}

unint64_t sub_10008DEB0()
{
  unint64_t result;

  result = qword_1006321D8;
  if (!qword_1006321D8)
  {
    result = swift_getWitnessTable(&unk_100521550, &type metadata for UserConsentType);
    atomic_store(result, (unint64_t *)&qword_1006321D8);
  }
  return result;
}

unint64_t sub_10008DEF4()
{
  unint64_t result;

  result = qword_1006321E0;
  if (!qword_1006321E0)
  {
    result = swift_getWitnessTable(&unk_100521460, &type metadata for WorkflowType);
    atomic_store(result, (unint64_t *)&qword_1006321E0);
  }
  return result;
}

unint64_t sub_10008DF38()
{
  unint64_t result;

  result = qword_1006321F0;
  if (!qword_1006321F0)
  {
    result = swift_getWitnessTable(&unk_100522B24, &type metadata for IQRangeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006321F0);
  }
  return result;
}

uint64_t sub_10008DF7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x69546E6F74747562 && a2 == 0xEB00000000656C74)
  {
    v5 = 0xEB00000000656C74;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69546E6F74747562, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656DLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614E746E65746E69, 0xEA0000000000656DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10008E0F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;

  v34 = a5;
  v35 = sub_100004828(a2);
  v9 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v15 = v9;
  v17 = v34;
  v16 = v35;
  v38 = 0;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v35);
  v20 = v19;
  v33 = v18;
  v37 = 1;
  swift_bridgeObjectRetain(v19);
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v16);
  v23 = v22;
  v31 = v21;
  v36 = 2;
  swift_bridgeObjectRetain(v22);
  v32 = v23;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v16);
  v26 = v25;
  v27 = v24;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v16);
  swift_bridgeObjectRetain(v26);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_bridgeObjectRelease(v26);
  v28 = v32;
  swift_bridgeObjectRelease(v32);
  result = swift_bridgeObjectRelease(v20);
  *v17 = v33;
  v17[1] = v20;
  v17[2] = v31;
  v17[3] = v28;
  v17[4] = v27;
  v17[5] = v26;
  return result;
}

uint64_t sub_10008E334(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    v5 = 0xE90000000000006ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10008E430(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v3 = sub_100004828(&qword_100632950);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_1000A1ECC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AlternativeLabel.CodingKeys, &type metadata for AlternativeLabel.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v14 = 0;
    v10 = sub_10008F05C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for LabelCondition, &v14, v3, &type metadata for LabelCondition, v10);
    v7 = v15;
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v7;
}

uint64_t sub_10008E59C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x69546E6F74747562 && a2 == 0xEB00000000656C74)
  {
    v8 = 0xEB00000000656C74;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69546E6F74747562, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C6961746564 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6961746564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x7373656E69737562 && a2 == 0xEC00000074616843)
  {
    v10 = 0xEC00000074616843;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7373656E69737562, 0xEC00000074616843, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F697469646E6F63 && a2 == 0xE90000000000006ELL)
  {
    v11 = 0xE90000000000006ELL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697469646E6F63, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 7629921 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(7629921, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

_QWORD *sub_10008E88C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *result;
  __int128 v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _BYTE v104[7];
  uint64_t v105;
  char v106;
  uint64_t v107;
  _DWORD v108[3];
  uint64_t v109;

  v76 = a2;
  v109 = sub_100004828(&qword_100632218);
  v4 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_10008D710();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Label.CodingKeys, &type metadata for Label.CodingKeys, v9, v7, v8);
  if (v2)
    return (_QWORD *)_s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v74 = v4;
  v75 = a1;
  LOBYTE(v87) = 0;
  v10 = v109;
  v11 = v6;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v87, v109);
  v14 = v13;
  LOBYTE(v87) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v87, v10);
  v17 = v16;
  v72 = v15;
  v73 = v14;
  LOBYTE(v87) = 2;
  swift_bridgeObjectRetain(v16);
  v18 = v17;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v87, v10);
  v21 = v20;
  v71 = v18;
  LOBYTE(v77) = 3;
  v22 = sub_10008EF98();
  v23 = swift_bridgeObjectRetain(v21);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v87, &type metadata for LabelDetail, &v77, v10, &type metadata for LabelDetail, v22, v23);
  v60 = v21;
  v24 = *((_QWORD *)&v87 + 1);
  v25 = v88;
  v26 = v89;
  LOBYTE(v77) = 4;
  v65 = v90;
  v66 = v87;
  v61 = v91;
  sub_10008F020(v87, *((uint64_t *)&v87 + 1), v88, v89, v90, v91);
  v27 = sub_10008EFDC();
  v59 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v87, &type metadata for BusinessChatDetail, &v77, v10, &type metadata for BusinessChatDetail, v27, v28);
  v63 = v26;
  v64 = v25;
  v62 = v24;
  v29 = v90;
  v30 = v91;
  LOBYTE(v77) = 5;
  v69 = v87;
  v70 = v88;
  v31 = v89;
  sub_10008F020(v87, *((uint64_t *)&v87 + 1), v88, v89, v90, v91);
  v32 = sub_10008F05C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v87, &type metadata for LabelCondition, &v77, v10, &type metadata for LabelCondition, v32, v33);
  v67 = v30;
  v68 = v29;
  v58 = v31;
  LODWORD(v31) = v87;
  v34 = sub_100004828(&qword_100632140);
  v106 = 6;
  v35 = sub_1000A1F98(&qword_100632238, &qword_100632140, (void (*)(void))sub_10008F0A0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v107, v34, &v106, v10, v34, v35, v36);
  v37 = v66;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v11, v10);
  v109 = v107;
  *(_QWORD *)&v77 = v12;
  *((_QWORD *)&v77 + 1) = v73;
  *(_QWORD *)&v78 = v72;
  *((_QWORD *)&v78 + 1) = v71;
  v57 = v31;
  v38 = v58;
  *(_QWORD *)&v79 = v19;
  *((_QWORD *)&v79 + 1) = v60;
  *(_QWORD *)&v80 = v37;
  *((_QWORD *)&v80 + 1) = v62;
  *(_QWORD *)&v81 = v64;
  *((_QWORD *)&v81 + 1) = v63;
  v74 = v19;
  *(_QWORD *)&v82 = v65;
  *((_QWORD *)&v82 + 1) = v61;
  v39 = v69;
  v83 = v69;
  v40 = v70;
  *(_QWORD *)&v84 = v70;
  *((_QWORD *)&v84 + 1) = v58;
  v41 = v67;
  v42 = v68;
  *(_QWORD *)&v85 = v68;
  *((_QWORD *)&v85 + 1) = v67;
  LOBYTE(v86) = v31;
  *((_QWORD *)&v86 + 1) = v107;
  sub_10008F0E4(&v77);
  sub_10008EF5C(v39, *((uint64_t *)&v39 + 1), v40, v38, v42, v41);
  v43 = v65;
  v45 = v62;
  v44 = v63;
  sub_10008EF5C(v66, v62, v64, v63, v65, v61);
  v46 = v73;
  swift_bridgeObjectRelease(v73);
  v47 = v71;
  swift_bridgeObjectRelease(v71);
  v48 = v60;
  swift_bridgeObjectRelease(v60);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v75);
  *(_QWORD *)&v87 = v12;
  *((_QWORD *)&v87 + 1) = v46;
  v88 = v72;
  v89 = v47;
  v90 = v74;
  v91 = v48;
  v92 = v66;
  v93 = v45;
  v94 = v64;
  v95 = v44;
  v96 = v43;
  v97 = v61;
  v98 = v69;
  v99 = v70;
  v100 = v58;
  v101 = v68;
  v102 = v67;
  v103 = v57;
  *(_DWORD *)v104 = v108[0];
  *(_DWORD *)&v104[3] = *(_DWORD *)((char *)v108 + 3);
  v105 = v109;
  result = sub_10008F1B8(&v87);
  v50 = v84;
  v51 = v76;
  v76[6] = v83;
  v51[7] = v50;
  v52 = v86;
  v51[8] = v85;
  v51[9] = v52;
  v53 = v80;
  v51[2] = v79;
  v51[3] = v53;
  v54 = v82;
  v51[4] = v81;
  v51[5] = v54;
  v55 = v78;
  *v51 = v77;
  v51[1] = v55;
  return result;
}

uint64_t sub_10008EF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

unint64_t sub_10008EF98()
{
  unint64_t result;

  result = qword_100632220;
  if (!qword_100632220)
  {
    result = swift_getWitnessTable(&unk_1005212B8, &type metadata for LabelDetail);
    atomic_store(result, (unint64_t *)&qword_100632220);
  }
  return result;
}

unint64_t sub_10008EFDC()
{
  unint64_t result;

  result = qword_100632228;
  if (!qword_100632228)
  {
    result = swift_getWitnessTable(&unk_100521308, &type metadata for BusinessChatDetail);
    atomic_store(result, (unint64_t *)&qword_100632228);
  }
  return result;
}

uint64_t sub_10008F020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

unint64_t sub_10008F05C()
{
  unint64_t result;

  result = qword_100632230;
  if (!qword_100632230)
  {
    result = swift_getWitnessTable(&unk_100522AFC, &type metadata for LabelCondition);
    atomic_store(result, (unint64_t *)&qword_100632230);
  }
  return result;
}

unint64_t sub_10008F0A0()
{
  unint64_t result;

  result = qword_100632240;
  if (!qword_100632240)
  {
    result = swift_getWitnessTable(&unk_100522AD4, &type metadata for AlternativeLabel);
    atomic_store(result, (unint64_t *)&qword_100632240);
  }
  return result;
}

_QWORD *sub_10008F0E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v15 = a1[14];
  v16 = a1[13];
  v13 = a1[16];
  v14 = a1[15];
  v12 = a1[17];
  v17 = a1[19];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10008F020(v4, v5, v6, v7, v8, v9);
  sub_10008F020(v10, v16, v15, v14, v13, v12);
  swift_bridgeObjectRetain(v17);
  return a1;
}

_QWORD *sub_10008F1B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v15 = a1[14];
  v16 = a1[13];
  v13 = a1[16];
  v14 = a1[15];
  v12 = a1[17];
  v17 = a1[19];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10008EF5C(v4, v5, v6, v7, v8, v9);
  sub_10008EF5C(v10, v16, v15, v14, v13, v12);
  swift_bridgeObjectRelease(v17);
  return a1;
}

unint64_t sub_10008F28C()
{
  unint64_t result;

  result = qword_100632250;
  if (!qword_100632250)
  {
    result = swift_getWitnessTable(&unk_100522A84, &type metadata for BusinessChatDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632250);
  }
  return result;
}

unint64_t sub_10008F2D0()
{
  unint64_t result;

  result = qword_100632268;
  if (!qword_100632268)
  {
    result = swift_getWitnessTable(&unk_100522A34, &type metadata for LabelDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632268);
  }
  return result;
}

unint64_t sub_10008F314()
{
  unint64_t result;

  result = qword_100632290;
  if (!qword_100632290)
  {
    result = swift_getWitnessTable(&unk_100522A0C, &type metadata for ImageDimension);
    atomic_store(result, (unint64_t *)&qword_100632290);
  }
  return result;
}

uint64_t sub_10008F358(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10008F38C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10008F3BC()
{
  unint64_t result;

  result = qword_1006322A0;
  if (!qword_1006322A0)
  {
    result = swift_getWitnessTable(&unk_1005229E4, &type metadata for ImageFormat);
    atomic_store(result, (unint64_t *)&qword_1006322A0);
  }
  return result;
}

uint64_t sub_10008F400(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100013E24(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008F45C(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_10008F46C()
{
  unint64_t result;

  result = qword_1006322B8;
  if (!qword_1006322B8)
  {
    result = swift_getWitnessTable(&unk_1005213E8, &type metadata for IQRangeProperties);
    atomic_store(result, (unint64_t *)&qword_1006322B8);
  }
  return result;
}

uint64_t sub_10008F4B0(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_10008F4C0()
{
  unint64_t result;

  result = qword_1006322C0;
  if (!qword_1006322C0)
  {
    result = swift_getWitnessTable(&unk_1005229BC, &type metadata for IQBoolProperties);
    atomic_store(result, (unint64_t *)&qword_1006322C0);
  }
  return result;
}

unint64_t sub_10008F504()
{
  unint64_t result;

  result = qword_1006322D0;
  if (!qword_1006322D0)
  {
    result = swift_getWitnessTable(&unk_100522994, &type metadata for IQComplexProperties);
    atomic_store(result, (unint64_t *)&qword_1006322D0);
  }
  return result;
}

uint64_t *sub_10008F548(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1[4];
  v4 = a1[8];
  v5 = a1[12];
  v6 = a1[16];
  v7 = a1[20];
  v8 = a1[24];
  v9 = a1[28];
  v10 = a1[32];
  v11 = a1[36];
  v12 = a1[40];
  v13 = a1[44];
  v14 = a1[48];
  v15 = a1[52];
  v16 = a1[56];
  v17 = a1[60];
  v18 = a1[64];
  v19 = a1[68];
  v20 = a1[72];
  v21 = a1[76];
  v22 = a1[80];
  v23 = a1[84];
  v24 = a1[88];
  v25 = a1[92];
  v26 = a1[103];
  v27 = a1[102];
  sub_10008F4B0(*a1);
  sub_10008F4B0(v3);
  sub_10008F4B0(v4);
  sub_10008F4B0(v5);
  sub_10008F4B0(v6);
  sub_10008F4B0(v7);
  sub_10008F4B0(v8);
  sub_10008F4B0(v9);
  sub_10008F4B0(v10);
  sub_10008F4B0(v11);
  sub_10008F4B0(v12);
  sub_10008F4B0(v13);
  sub_10008F4B0(v14);
  sub_10008F4B0(v15);
  sub_10008F4B0(v16);
  sub_10008F4B0(v17);
  sub_10008F4B0(v18);
  sub_10008F4B0(v19);
  sub_10008F4B0(v20);
  sub_10008F4B0(v21);
  sub_10008F4B0(v22);
  sub_10008F4B0(v23);
  sub_10008F4B0(v24);
  sub_10008F4B0(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t *sub_10008F988(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1[4];
  v4 = a1[8];
  v5 = a1[12];
  v6 = a1[16];
  v7 = a1[20];
  v8 = a1[24];
  v9 = a1[28];
  v10 = a1[32];
  v11 = a1[36];
  v12 = a1[40];
  v13 = a1[44];
  v14 = a1[48];
  v15 = a1[52];
  v16 = a1[56];
  v17 = a1[60];
  v18 = a1[64];
  v19 = a1[68];
  v20 = a1[72];
  v21 = a1[76];
  v22 = a1[80];
  v23 = a1[84];
  v24 = a1[88];
  v25 = a1[92];
  v26 = a1[102];
  v27 = a1[103];
  sub_10008F45C(*a1);
  sub_10008F45C(v3);
  sub_10008F45C(v4);
  sub_10008F45C(v5);
  sub_10008F45C(v6);
  sub_10008F45C(v7);
  sub_10008F45C(v8);
  sub_10008F45C(v9);
  sub_10008F45C(v10);
  sub_10008F45C(v11);
  sub_10008F45C(v12);
  sub_10008F45C(v13);
  sub_10008F45C(v14);
  sub_10008F45C(v15);
  sub_10008F45C(v16);
  sub_10008F45C(v17);
  sub_10008F45C(v18);
  sub_10008F45C(v19);
  sub_10008F45C(v20);
  sub_10008F45C(v21);
  sub_10008F45C(v22);
  sub_10008F45C(v23);
  sub_10008F45C(v24);
  sub_10008F45C(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

void sub_10008FDC8(_OWORD *a1)
{
  *a1 = xmmword_100520950;
  bzero(a1 + 1, 0x1709uLL);
}

uint64_t sub_10008FDDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;

  if (a2 != 1)
  {
    __chkstk_darwin(result);
    v456 = STACK[0x3080];
    v452 = STACK[0x2F30];
    v451 = STACK[0x2F28];
    v450 = STACK[0x2F20];
    v449 = STACK[0x2F18];
    v448 = STACK[0x2F10];
    v447 = STACK[0x2F08];
    v446 = STACK[0x2F00];
    v445 = STACK[0x2EF8];
    v444 = STACK[0x2EF0];
    v443 = STACK[0x2EE8];
    v442 = STACK[0x2EE0];
    v441 = STACK[0x2ED8];
    v440 = STACK[0x2ED0];
    v439 = STACK[0x2EC8];
    v438 = STACK[0x2EC0];
    v437 = STACK[0x2EB8];
    v436 = STACK[0x2EB0];
    v435 = STACK[0x2EA8];
    v434 = STACK[0x2EA0];
    v433 = STACK[0x2E98];
    v432 = STACK[0x2E90];
    v431 = STACK[0x2E88];
    v430 = STACK[0x2E80];
    v429 = STACK[0x2E78];
    v428 = STACK[0x2E70];
    v427 = STACK[0x2E68];
    v426 = STACK[0x2E60];
    v425 = STACK[0x2E58];
    v424 = STACK[0x2E50];
    v423 = STACK[0x2E48];
    v422 = STACK[0x2E40];
    v421 = STACK[0x2E38];
    v420 = STACK[0x2E30];
    v419 = STACK[0x2E28];
    v418 = STACK[0x2E20];
    v417 = STACK[0x2E18];
    v416 = STACK[0x2E10];
    v415 = STACK[0x2E08];
    v414 = STACK[0x2E00];
    v413 = STACK[0x2DF8];
    v412 = STACK[0x2DF0];
    v411 = STACK[0x2DE8];
    v410 = STACK[0x2DE0];
    v409 = STACK[0x2DD8];
    v408 = STACK[0x2DD0];
    v407 = STACK[0x2DC8];
    v406 = STACK[0x2DC0];
    v405 = STACK[0x2DB8];
    v404 = STACK[0x2DB0];
    v403 = STACK[0x2DA8];
    v402 = STACK[0x2DA0];
    v401 = STACK[0x2D98];
    v400 = STACK[0x2D90];
    v399 = STACK[0x2D88];
    v398 = STACK[0x2D80];
    v455 = STACK[0x2D78];
    v454 = STACK[0x2D70];
    v453 = STACK[0x2D68];
    v397 = STACK[0x2D60];
    v396 = STACK[0x2D58];
    v395 = STACK[0x2D50];
    v394 = STACK[0x2D48];
    v393 = STACK[0x2D40];
    v389 = STACK[0x2BF0];
    v388 = STACK[0x2BE8];
    v387 = STACK[0x2BE0];
    v386 = STACK[0x2BD8];
    v385 = STACK[0x2BD0];
    v384 = STACK[0x2BC8];
    v383 = STACK[0x2BC0];
    v382 = STACK[0x2BB8];
    v381 = STACK[0x2BB0];
    v380 = STACK[0x2BA8];
    v379 = STACK[0x2BA0];
    v378 = STACK[0x2B98];
    v377 = STACK[0x2B90];
    v376 = STACK[0x2B88];
    v375 = STACK[0x2B80];
    v374 = STACK[0x2B78];
    v373 = STACK[0x2B70];
    v372 = STACK[0x2B68];
    v371 = STACK[0x2B60];
    v370 = STACK[0x2B58];
    v369 = STACK[0x2B50];
    v368 = STACK[0x2B48];
    v367 = STACK[0x2B40];
    v366 = STACK[0x2B38];
    v365 = STACK[0x2B30];
    v364 = STACK[0x2B28];
    v363 = STACK[0x2B20];
    v362 = STACK[0x2B18];
    v361 = STACK[0x2B10];
    v360 = STACK[0x2B08];
    v359 = STACK[0x2B00];
    v358 = STACK[0x2AF8];
    v357 = STACK[0x2AF0];
    v356 = STACK[0x2AE8];
    v355 = STACK[0x2AE0];
    v354 = STACK[0x2AD8];
    v353 = STACK[0x2AD0];
    v352 = STACK[0x2AC8];
    v351 = STACK[0x2AC0];
    v350 = STACK[0x2AB8];
    v349 = STACK[0x2AB0];
    v348 = STACK[0x2AA8];
    v347 = STACK[0x2AA0];
    v346 = STACK[0x2A98];
    v345 = STACK[0x2A90];
    v344 = STACK[0x2A88];
    v343 = STACK[0x2A80];
    v342 = STACK[0x2A78];
    v341 = STACK[0x2A70];
    v340 = STACK[0x2A68];
    v339 = STACK[0x2A60];
    v338 = STACK[0x2A58];
    v337 = STACK[0x2A50];
    v336 = STACK[0x2A48];
    v335 = STACK[0x2A40];
    v392 = STACK[0x2A38];
    v391 = STACK[0x2A30];
    v390 = STACK[0x2A28];
    v334 = STACK[0x2A20];
    v333 = STACK[0x2A18];
    v332 = STACK[0x2A10];
    v331 = STACK[0x2A08];
    v330 = STACK[0x2A00];
    v203 = STACK[0x2218];
    v202 = STACK[0x2210];
    v201 = STACK[0x2208];
    v200 = STACK[0x2200];
    v199 = STACK[0x21F8];
    v196 = STACK[0x2230];
    v197 = STACK[0x2228];
    v198 = STACK[0x2220];
    v291 = STACK[0x2398];
    v287 = STACK[0x2390];
    v282 = STACK[0x2388];
    v279 = STACK[0x2380];
    v276 = STACK[0x23C8];
    v277 = STACK[0x23C0];
    v290 = STACK[0x23B8];
    v286 = STACK[0x23B0];
    v281 = STACK[0x23A8];
    v278 = STACK[0x23A0];
    v264 = STACK[0x23F8];
    v265 = STACK[0x23F0];
    v266 = STACK[0x23E8];
    v267 = STACK[0x23E0];
    v268 = STACK[0x23D8];
    v269 = STACK[0x23D0];
    v252 = STACK[0x2428];
    v253 = STACK[0x2420];
    v254 = STACK[0x2418];
    v255 = STACK[0x2410];
    v256 = STACK[0x2408];
    v257 = STACK[0x2400];
    v239 = STACK[0x2458];
    v240 = STACK[0x2450];
    v242 = STACK[0x2448];
    v243 = STACK[0x2440];
    v244 = STACK[0x2438];
    v245 = STACK[0x2430];
    v233 = STACK[0x2488];
    v234 = STACK[0x2480];
    v235 = STACK[0x2478];
    v236 = STACK[0x2470];
    v237 = STACK[0x2468];
    v238 = STACK[0x2460];
    v227 = STACK[0x24B8];
    v228 = STACK[0x24B0];
    v229 = STACK[0x24A8];
    v230 = STACK[0x24A0];
    v231 = STACK[0x2498];
    v232 = STACK[0x2490];
    v221 = STACK[0x24E8];
    v222 = STACK[0x24E0];
    v223 = STACK[0x24D8];
    v224 = STACK[0x24D0];
    v225 = STACK[0x24C8];
    v226 = STACK[0x24C0];
    v215 = STACK[0x2518];
    v216 = STACK[0x2510];
    v217 = STACK[0x2508];
    v218 = STACK[0x2500];
    v219 = STACK[0x24F8];
    v220 = STACK[0x24F0];
    v209 = STACK[0x2548];
    v210 = STACK[0x2540];
    v211 = STACK[0x2538];
    v212 = STACK[0x2530];
    v213 = STACK[0x2528];
    v214 = STACK[0x2520];
    v204 = STACK[0x2570];
    v205 = STACK[0x2568];
    v206 = STACK[0x2560];
    v207 = STACK[0x2558];
    v208 = STACK[0x2550];
    v327 = STACK[0x26C8];
    v325 = STACK[0x26C0];
    v329 = STACK[0x26F8];
    v328 = STACK[0x26F0];
    v326 = STACK[0x26E8];
    v324 = STACK[0x26E0];
    v323 = STACK[0x26D8];
    v322 = STACK[0x26D0];
    v316 = STACK[0x2728];
    v317 = STACK[0x2720];
    v318 = STACK[0x2718];
    v319 = STACK[0x2710];
    v320 = STACK[0x2708];
    v321 = STACK[0x2700];
    v310 = STACK[0x2758];
    v311 = STACK[0x2750];
    v312 = STACK[0x2748];
    v313 = STACK[0x2740];
    v314 = STACK[0x2738];
    v315 = STACK[0x2730];
    v304 = STACK[0x2788];
    v305 = STACK[0x2780];
    v306 = STACK[0x2778];
    v307 = STACK[0x2770];
    v308 = STACK[0x2768];
    v309 = STACK[0x2760];
    v298 = STACK[0x27B8];
    v299 = STACK[0x27B0];
    v300 = STACK[0x27A8];
    v301 = STACK[0x27A0];
    v302 = STACK[0x2798];
    v303 = STACK[0x2790];
    v292 = STACK[0x27E8];
    v293 = STACK[0x27E0];
    v294 = STACK[0x27D8];
    v295 = STACK[0x27D0];
    v296 = STACK[0x27C8];
    v297 = STACK[0x27C0];
    v280 = STACK[0x2818];
    v283 = STACK[0x2810];
    v284 = STACK[0x2808];
    v285 = STACK[0x2800];
    v288 = STACK[0x27F8];
    v289 = STACK[0x27F0];
    v270 = STACK[0x2848];
    v271 = STACK[0x2840];
    v272 = STACK[0x2838];
    v273 = STACK[0x2830];
    v274 = STACK[0x2828];
    v275 = STACK[0x2820];
    v258 = STACK[0x2878];
    v259 = STACK[0x2870];
    v260 = STACK[0x2868];
    v261 = STACK[0x2860];
    v262 = STACK[0x2858];
    v263 = STACK[0x2850];
    v246 = STACK[0x28A8];
    v247 = STACK[0x28A0];
    v248 = STACK[0x2898];
    v249 = STACK[0x2890];
    v250 = STACK[0x2888];
    v251 = STACK[0x2880];
    v241 = STACK[0x28B0];
    v141 = STACK[0x21F0];
    v142 = STACK[0x21E8];
    v143 = STACK[0x21E0];
    v144 = STACK[0x21D8];
    v145 = STACK[0x21D0];
    v146 = STACK[0x21C8];
    v147 = STACK[0x21C0];
    v148 = STACK[0x21B8];
    v149 = STACK[0x21B0];
    v150 = STACK[0x21A8];
    v151 = STACK[0x21A0];
    v152 = STACK[0x2198];
    v153 = STACK[0x2190];
    v154 = STACK[0x2188];
    v155 = STACK[0x2180];
    v156 = STACK[0x2178];
    v157 = STACK[0x2170];
    v158 = STACK[0x2168];
    v159 = STACK[0x2160];
    v160 = STACK[0x2158];
    v161 = STACK[0x2150];
    v162 = STACK[0x2148];
    v163 = STACK[0x2140];
    v164 = STACK[0x2138];
    v165 = STACK[0x2130];
    v166 = STACK[0x2128];
    v167 = STACK[0x2120];
    v168 = STACK[0x2118];
    v169 = STACK[0x2110];
    v170 = STACK[0x2108];
    v171 = STACK[0x2100];
    v172 = STACK[0x20F8];
    v173 = STACK[0x20F0];
    v174 = STACK[0x20E8];
    v176 = STACK[0x20E0];
    v177 = STACK[0x20D8];
    v178 = STACK[0x20D0];
    v179 = STACK[0x20C8];
    v181 = STACK[0x20C0];
    v182 = STACK[0x20B8];
    v183 = STACK[0x20B0];
    v184 = STACK[0x20A8];
    v186 = STACK[0x20A0];
    v187 = STACK[0x2098];
    v188 = STACK[0x2090];
    v189 = STACK[0x2088];
    v191 = STACK[0x2080];
    v195 = STACK[0x2078];
    v194 = STACK[0x2070];
    v193 = STACK[0x2068];
    v192 = STACK[0x2060];
    v190 = STACK[0x2058];
    v185 = STACK[0x2050];
    v180 = STACK[0x2048];
    v175 = STACK[0x2040];
    v78 = STACK[0x1EF0];
    v79 = STACK[0x1EE8];
    v80 = STACK[0x1EE0];
    v81 = STACK[0x1ED8];
    v82 = STACK[0x1ED0];
    v83 = STACK[0x1EC8];
    v84 = STACK[0x1EC0];
    v85 = STACK[0x1EB8];
    v86 = STACK[0x1EB0];
    v87 = STACK[0x1EA8];
    v88 = STACK[0x1EA0];
    v89 = STACK[0x1E98];
    v90 = STACK[0x1E90];
    v91 = STACK[0x1E88];
    v92 = STACK[0x1E80];
    v93 = STACK[0x1E78];
    v94 = STACK[0x1E70];
    v95 = STACK[0x1E68];
    v96 = STACK[0x1E60];
    v97 = STACK[0x1E58];
    v98 = STACK[0x1E50];
    v99 = STACK[0x1E48];
    v100 = STACK[0x1E40];
    v101 = STACK[0x1E38];
    v102 = STACK[0x1E30];
    v103 = STACK[0x1E28];
    v104 = STACK[0x1E20];
    v105 = STACK[0x1E18];
    v106 = STACK[0x1E10];
    v107 = STACK[0x1E08];
    v108 = STACK[0x1E00];
    v109 = STACK[0x1DF8];
    v110 = STACK[0x1DF0];
    v111 = STACK[0x1DE8];
    v112 = STACK[0x1DE0];
    v113 = STACK[0x1DD8];
    v114 = STACK[0x1DD0];
    v115 = STACK[0x1DC8];
    v116 = STACK[0x1DC0];
    v117 = STACK[0x1DB8];
    v118 = STACK[0x1DB0];
    v119 = STACK[0x1DA8];
    v121 = STACK[0x1DA0];
    v122 = STACK[0x1D98];
    v123 = STACK[0x1D90];
    v124 = STACK[0x1D88];
    v126 = STACK[0x1D80];
    v127 = STACK[0x1D78];
    v128 = STACK[0x1D70];
    v129 = STACK[0x1D68];
    v131 = STACK[0x1D60];
    v132 = STACK[0x1D58];
    v133 = STACK[0x1D50];
    v134 = STACK[0x1D48];
    v136 = STACK[0x1D40];
    v140 = STACK[0x1D38];
    v139 = STACK[0x1D30];
    v138 = STACK[0x1D28];
    v137 = STACK[0x1D20];
    v135 = STACK[0x1D18];
    v130 = STACK[0x1D10];
    v125 = STACK[0x1D08];
    v120 = STACK[0x1D00];
    v77 = v65;
    v76 = v66;
    v75 = v67;
    v74 = v68;
    v73 = v69;
    v72 = v70;
    swift_bridgeObjectRelease(v71);
    sub_100092AB4(v72, v73, v74, v75, v76, v77, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57,
      a58,
      a59,
      a60,
      a61,
      a62,
      a63,
      a64,
      a65);
    sub_100092AB4(v120, v125, v130, v135, v137, v138, v139, v140, v136, v134, v133, v132, v131, v129, v128, v127, v126, v124, v123,
      v122,
      v121,
      v119,
      v118,
      v117,
      v116,
      v115,
      v114,
      v113,
      v112,
      v111,
      v110,
      v109,
      v108,
      v107,
      v106,
      v105,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83,
      v82,
      v81,
      v80,
      v79,
      v78);
    sub_100092AB4(v175, v180, v185, v190, v192, v193, v194, v195, v191, v189, v188, v187, v186, v184, v183, v182, v181, v179, v178,
      v177,
      v176,
      v174,
      v173,
      v172,
      v171,
      v170,
      v169,
      v168,
      v167,
      v166,
      v165,
      v164,
      v163,
      v162,
      v161,
      v160,
      v159,
      v158,
      v157,
      v156,
      v155,
      v154,
      v153,
      v152,
      v151,
      v150,
      v149,
      v148,
      v147,
      v146,
      v145,
      v144,
      v143,
      v142,
      v141,
      v199,
      v200,
      v201,
      v202,
      v203,
      v198,
      v197,
      v196);
    sub_100092AB4(v279, v282, v287, v291, v278, v281, v286, v290, v277, v276, v269, v268, v267, v266, v265, v264, v257, v256, v255,
      v254,
      v253,
      v252,
      v245,
      v244,
      v243,
      v242,
      v240,
      v239,
      v238,
      v237,
      v236,
      v235,
      v234,
      v233,
      v232,
      v231,
      v230,
      v229,
      v228,
      v227,
      v226,
      v225,
      v224,
      v223,
      v222,
      v221,
      v220,
      v219,
      v218,
      v217,
      v216,
      v215,
      v214,
      v213,
      v212,
      v211,
      v210,
      v209,
      v208,
      v207,
      v206,
      v205,
      v204);
    sub_100092AB4(v325, v327, v322, v323, v324, v326, v328, v329, v321, v320, v319, v318, v317, v316, v315, v314, v313, v312, v311,
      v310,
      v309,
      v308,
      v307,
      v306,
      v305,
      v304,
      v303,
      v302,
      v301,
      v300,
      v299,
      v298,
      v297,
      v296,
      v295,
      v294,
      v293,
      v292,
      v289,
      v288,
      v285,
      v284,
      v283,
      v280,
      v275,
      v274,
      v273,
      v272,
      v271,
      v270,
      v263,
      v262,
      v261,
      v260,
      v259,
      v258,
      v251,
      v250,
      v249,
      v248,
      v247,
      v246,
      v241);
    sub_100092AB4(v330, v331, v332, v333, v334, v390, v391, v392, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345,
      v346,
      v347,
      v348,
      v349,
      v350,
      v351,
      v352,
      v353,
      v354,
      v355,
      v356,
      v357,
      v358,
      v359,
      v360,
      v361,
      v362,
      v363,
      v364,
      v365,
      v366,
      v367,
      v368,
      v369,
      v370,
      v371,
      v372,
      v373,
      v374,
      v375,
      v376,
      v377,
      v378,
      v379,
      v380,
      v381,
      v382,
      v383,
      v384,
      v385,
      v386,
      v387,
      v388,
      v389);
    sub_100092AB4(v393, v394, v395, v396, v397, v453, v454, v455, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408,
      v409,
      v410,
      v411,
      v412,
      v413,
      v414,
      v415,
      v416,
      v417,
      v418,
      v419,
      v420,
      v421,
      v422,
      v423,
      v424,
      v425,
      v426,
      v427,
      v428,
      v429,
      v430,
      v431,
      v432,
      v433,
      v434,
      v435,
      v436,
      v437,
      v438,
      v439,
      v440,
      v441,
      v442,
      v443,
      v444,
      v445,
      v446,
      v447,
      v448,
      v449,
      v450,
      v451,
      v452);
    return swift_bridgeObjectRelease(v456);
  }
  return result;
}

uint64_t sub_100092AB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  if (STACK[0x600] != 1)
  {
    v77 = STACK[0x608];
    v76 = STACK[0x5B0];
    v75 = STACK[0x590];
    v74 = STACK[0x570];
    v73 = STACK[0x550];
    v72 = STACK[0x530];
    v71 = STACK[0x510];
    v70 = STACK[0x600];
    sub_10008F45C(result);
    sub_10008F45C(a5);
    sub_10008F45C(a9);
    sub_10008F45C(a13);
    sub_10008F45C(a17);
    sub_10008F45C(a21);
    sub_10008F45C(a25);
    sub_10008F45C(a29);
    sub_10008F45C(a33);
    sub_10008F45C(a37);
    sub_10008F45C(a41);
    sub_10008F45C(a45);
    sub_10008F45C(a49);
    sub_10008F45C(a53);
    sub_10008F45C(a57);
    sub_10008F45C(a61);
    sub_10008F45C(a65);
    sub_10008F45C(a69);
    sub_10008F45C(v71);
    sub_10008F45C(v72);
    sub_10008F45C(v73);
    sub_10008F45C(v74);
    sub_10008F45C(v75);
    sub_10008F45C(v76);
    swift_bridgeObjectRelease(v70);
    return swift_bridgeObjectRelease(v77);
  }
  return result;
}

uint64_t sub_100092EEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656572674179656BLL && a2 == 0xEC000000746E656DLL)
  {
    v5 = 0xEC000000746E656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656572674179656BLL, 0xEC000000746E656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x676E696E676973 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E696E676973, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E65697069636572 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease(0xE900000000000074);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E65697069636572, 0xE900000000000074, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100093064(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100600168, a1, a2, &unk_10062F650);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x13)
    return 19;
  else
    return v3;
}

uint64_t sub_1000930B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v1 + 24) = v17;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 40) = v16;
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v1 + 56) = v15;
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v1 + 72) = v14;
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v1 + 88) = v3;
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v1 + 104) = v4;
  *(_BYTE *)(v1 + 112) = *(_BYTE *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v1 + 128) = v5;
  v6 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(v1 + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(v1 + 144) = v6;
  v7 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v1 + 152) = v7;
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v1 + 168) = v8;
  v18 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(v1 + 176) = v18;
  v19 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(v1 + 192) = v19;
  *(_BYTE *)(v1 + 200) = *(_BYTE *)(a1 + 200);
  sub_100038B24(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_1006322F0);
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = v9;
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = v10;
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8);
  v12 = (_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  *v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v12[1] = v11;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = *(_BYTE *)(a1
                                                                                  + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return v1;
}

uint64_t sub_10009325C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100600350, a1, a2, &unk_10062F660);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12)
    return 18;
  else
    return v3;
}

uint64_t sub_1000932AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL) = a2;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims) = a3;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields) = a4;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) = a5;
  v23 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
  *(_QWORD *)v23 = a6;
  *(_BYTE *)(v23 + 8) = a7 & 1;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates) = a8;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination) = a9;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI) = a10;
  v24 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_cloudkitRetry;
  *(_QWORD *)v24 = a11;
  *(_BYTE *)(v24 + 8) = a12 & 1;
  v25 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_connectToWifiReminderInDays;
  *(_QWORD *)v25 = a13;
  *(_BYTE *)(v25 + 8) = a14 & 1;
  v26 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_provisioningRetryTimeoutInDays;
  *(_QWORD *)v26 = a15;
  *(_BYTE *)(v26 + 8) = a16 & 1;
  v27 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteIncompleteCredentialAfterDays;
  *(_QWORD *)v27 = a17;
  *(_BYTE *)(v27 + 8) = a18 & 1;
  v28 = v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteInactiveKeysAfterDays;
  *(_QWORD *)v28 = a19;
  *(_BYTE *)(v28 + 8) = a20 & 1;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_base64EncodeImage) = (a21 == 2) | a21 & 1;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_isBiomeFedStatsEnabled) = a22;
  return sub_1000930B4(a1);
}

uint64_t sub_100093408(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24,char a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL) = a2;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL) = a3;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) = a4;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs) = a5;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes) = a6;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination) = a7;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims) = a8;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL) = a9;
  sub_100038B24(a10, v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_1006322E0);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates) = a11;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) = a12;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareINOAssessment) = a13;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD) = a14;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID) = a15;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid) = a16;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) = a17;
  sub_1000A1F54(a18, v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity, &qword_1006322E8);
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) = a19 & 1;
  v26 = (_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName);
  *v26 = a20;
  v26[1] = a21;
  v27 = v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
  *(_QWORD *)v27 = a22;
  *(_BYTE *)(v27 + 8) = a23 & 1;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) = a24;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof) = a25;
  v28 = sub_1000930B4(a1);
  sub_100008030(a10, &qword_1006322E0);
  return v28;
}

uint64_t sub_100093620(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

#error "100096350: call analysis failed (funcsize=2887)"

double sub_10009637C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;

  if (a2 != 1)
  {
    __chkstk_darwin(a1);
    v457 = STACK[0x3080];
    v453 = STACK[0x2F30];
    v452 = STACK[0x2F28];
    v451 = STACK[0x2F20];
    v450 = STACK[0x2F18];
    v449 = STACK[0x2F10];
    v448 = STACK[0x2F08];
    v447 = STACK[0x2F00];
    v446 = STACK[0x2EF8];
    v445 = STACK[0x2EF0];
    v444 = STACK[0x2EE8];
    v443 = STACK[0x2EE0];
    v442 = STACK[0x2ED8];
    v441 = STACK[0x2ED0];
    v440 = STACK[0x2EC8];
    v439 = STACK[0x2EC0];
    v438 = STACK[0x2EB8];
    v437 = STACK[0x2EB0];
    v436 = STACK[0x2EA8];
    v435 = STACK[0x2EA0];
    v434 = STACK[0x2E98];
    v433 = STACK[0x2E90];
    v432 = STACK[0x2E88];
    v431 = STACK[0x2E80];
    v430 = STACK[0x2E78];
    v429 = STACK[0x2E70];
    v428 = STACK[0x2E68];
    v427 = STACK[0x2E60];
    v426 = STACK[0x2E58];
    v425 = STACK[0x2E50];
    v424 = STACK[0x2E48];
    v423 = STACK[0x2E40];
    v422 = STACK[0x2E38];
    v421 = STACK[0x2E30];
    v420 = STACK[0x2E28];
    v419 = STACK[0x2E20];
    v418 = STACK[0x2E18];
    v417 = STACK[0x2E10];
    v416 = STACK[0x2E08];
    v415 = STACK[0x2E00];
    v414 = STACK[0x2DF8];
    v413 = STACK[0x2DF0];
    v412 = STACK[0x2DE8];
    v411 = STACK[0x2DE0];
    v410 = STACK[0x2DD8];
    v409 = STACK[0x2DD0];
    v408 = STACK[0x2DC8];
    v407 = STACK[0x2DC0];
    v406 = STACK[0x2DB8];
    v405 = STACK[0x2DB0];
    v404 = STACK[0x2DA8];
    v403 = STACK[0x2DA0];
    v402 = STACK[0x2D98];
    v401 = STACK[0x2D90];
    v400 = STACK[0x2D88];
    v399 = STACK[0x2D80];
    v456 = STACK[0x2D78];
    v455 = STACK[0x2D70];
    v454 = STACK[0x2D68];
    v398 = STACK[0x2D60];
    v397 = STACK[0x2D58];
    v396 = STACK[0x2D50];
    v395 = STACK[0x2D48];
    v394 = STACK[0x2D40];
    v390 = STACK[0x2BF0];
    v389 = STACK[0x2BE8];
    v388 = STACK[0x2BE0];
    v387 = STACK[0x2BD8];
    v386 = STACK[0x2BD0];
    v385 = STACK[0x2BC8];
    v384 = STACK[0x2BC0];
    v383 = STACK[0x2BB8];
    v382 = STACK[0x2BB0];
    v381 = STACK[0x2BA8];
    v380 = STACK[0x2BA0];
    v379 = STACK[0x2B98];
    v378 = STACK[0x2B90];
    v377 = STACK[0x2B88];
    v376 = STACK[0x2B80];
    v375 = STACK[0x2B78];
    v374 = STACK[0x2B70];
    v373 = STACK[0x2B68];
    v372 = STACK[0x2B60];
    v371 = STACK[0x2B58];
    v370 = STACK[0x2B50];
    v369 = STACK[0x2B48];
    v368 = STACK[0x2B40];
    v367 = STACK[0x2B38];
    v366 = STACK[0x2B30];
    v365 = STACK[0x2B28];
    v364 = STACK[0x2B20];
    v363 = STACK[0x2B18];
    v362 = STACK[0x2B10];
    v361 = STACK[0x2B08];
    v360 = STACK[0x2B00];
    v359 = STACK[0x2AF8];
    v358 = STACK[0x2AF0];
    v357 = STACK[0x2AE8];
    v356 = STACK[0x2AE0];
    v355 = STACK[0x2AD8];
    v354 = STACK[0x2AD0];
    v353 = STACK[0x2AC8];
    v352 = STACK[0x2AC0];
    v351 = STACK[0x2AB8];
    v350 = STACK[0x2AB0];
    v349 = STACK[0x2AA8];
    v348 = STACK[0x2AA0];
    v347 = STACK[0x2A98];
    v346 = STACK[0x2A90];
    v345 = STACK[0x2A88];
    v344 = STACK[0x2A80];
    v343 = STACK[0x2A78];
    v342 = STACK[0x2A70];
    v341 = STACK[0x2A68];
    v340 = STACK[0x2A60];
    v339 = STACK[0x2A58];
    v338 = STACK[0x2A50];
    v337 = STACK[0x2A48];
    v336 = STACK[0x2A40];
    v393 = STACK[0x2A38];
    v392 = STACK[0x2A30];
    v391 = STACK[0x2A28];
    v335 = STACK[0x2A20];
    v334 = STACK[0x2A18];
    v333 = STACK[0x2A10];
    v332 = STACK[0x2A08];
    v331 = STACK[0x2A00];
    v204 = STACK[0x2218];
    v203 = STACK[0x2210];
    v202 = STACK[0x2208];
    v201 = STACK[0x2200];
    v200 = STACK[0x21F8];
    v197 = STACK[0x2230];
    v198 = STACK[0x2228];
    v199 = STACK[0x2220];
    v292 = STACK[0x2398];
    v288 = STACK[0x2390];
    v283 = STACK[0x2388];
    v280 = STACK[0x2380];
    v277 = STACK[0x23C8];
    v278 = STACK[0x23C0];
    v291 = STACK[0x23B8];
    v287 = STACK[0x23B0];
    v282 = STACK[0x23A8];
    v279 = STACK[0x23A0];
    v265 = STACK[0x23F8];
    v266 = STACK[0x23F0];
    v267 = STACK[0x23E8];
    v268 = STACK[0x23E0];
    v269 = STACK[0x23D8];
    v270 = STACK[0x23D0];
    v253 = STACK[0x2428];
    v254 = STACK[0x2420];
    v255 = STACK[0x2418];
    v256 = STACK[0x2410];
    v257 = STACK[0x2408];
    v258 = STACK[0x2400];
    v240 = STACK[0x2458];
    v241 = STACK[0x2450];
    v243 = STACK[0x2448];
    v244 = STACK[0x2440];
    v245 = STACK[0x2438];
    v246 = STACK[0x2430];
    v234 = STACK[0x2488];
    v235 = STACK[0x2480];
    v236 = STACK[0x2478];
    v237 = STACK[0x2470];
    v238 = STACK[0x2468];
    v239 = STACK[0x2460];
    v228 = STACK[0x24B8];
    v229 = STACK[0x24B0];
    v230 = STACK[0x24A8];
    v231 = STACK[0x24A0];
    v232 = STACK[0x2498];
    v233 = STACK[0x2490];
    v222 = STACK[0x24E8];
    v223 = STACK[0x24E0];
    v224 = STACK[0x24D8];
    v225 = STACK[0x24D0];
    v226 = STACK[0x24C8];
    v227 = STACK[0x24C0];
    v216 = STACK[0x2518];
    v217 = STACK[0x2510];
    v218 = STACK[0x2508];
    v219 = STACK[0x2500];
    v220 = STACK[0x24F8];
    v221 = STACK[0x24F0];
    v210 = STACK[0x2548];
    v211 = STACK[0x2540];
    v212 = STACK[0x2538];
    v213 = STACK[0x2530];
    v214 = STACK[0x2528];
    v215 = STACK[0x2520];
    v205 = STACK[0x2570];
    v206 = STACK[0x2568];
    v207 = STACK[0x2560];
    v208 = STACK[0x2558];
    v209 = STACK[0x2550];
    v328 = STACK[0x26C8];
    v326 = STACK[0x26C0];
    v330 = STACK[0x26F8];
    v329 = STACK[0x26F0];
    v327 = STACK[0x26E8];
    v325 = STACK[0x26E0];
    v324 = STACK[0x26D8];
    v323 = STACK[0x26D0];
    v317 = STACK[0x2728];
    v318 = STACK[0x2720];
    v319 = STACK[0x2718];
    v320 = STACK[0x2710];
    v321 = STACK[0x2708];
    v322 = STACK[0x2700];
    v311 = STACK[0x2758];
    v312 = STACK[0x2750];
    v313 = STACK[0x2748];
    v314 = STACK[0x2740];
    v315 = STACK[0x2738];
    v316 = STACK[0x2730];
    v305 = STACK[0x2788];
    v306 = STACK[0x2780];
    v307 = STACK[0x2778];
    v308 = STACK[0x2770];
    v309 = STACK[0x2768];
    v310 = STACK[0x2760];
    v299 = STACK[0x27B8];
    v300 = STACK[0x27B0];
    v301 = STACK[0x27A8];
    v302 = STACK[0x27A0];
    v303 = STACK[0x2798];
    v304 = STACK[0x2790];
    v293 = STACK[0x27E8];
    v294 = STACK[0x27E0];
    v295 = STACK[0x27D8];
    v296 = STACK[0x27D0];
    v297 = STACK[0x27C8];
    v298 = STACK[0x27C0];
    v281 = STACK[0x2818];
    v284 = STACK[0x2810];
    v285 = STACK[0x2808];
    v286 = STACK[0x2800];
    v289 = STACK[0x27F8];
    v290 = STACK[0x27F0];
    v271 = STACK[0x2848];
    v272 = STACK[0x2840];
    v273 = STACK[0x2838];
    v274 = STACK[0x2830];
    v275 = STACK[0x2828];
    v276 = STACK[0x2820];
    v259 = STACK[0x2878];
    v260 = STACK[0x2870];
    v261 = STACK[0x2868];
    v262 = STACK[0x2860];
    v263 = STACK[0x2858];
    v264 = STACK[0x2850];
    v247 = STACK[0x28A8];
    v248 = STACK[0x28A0];
    v249 = STACK[0x2898];
    v250 = STACK[0x2890];
    v251 = STACK[0x2888];
    v252 = STACK[0x2880];
    v242 = STACK[0x28B0];
    v142 = STACK[0x21F0];
    v143 = STACK[0x21E8];
    v144 = STACK[0x21E0];
    v145 = STACK[0x21D8];
    v146 = STACK[0x21D0];
    v147 = STACK[0x21C8];
    v148 = STACK[0x21C0];
    v149 = STACK[0x21B8];
    v150 = STACK[0x21B0];
    v151 = STACK[0x21A8];
    v152 = STACK[0x21A0];
    v153 = STACK[0x2198];
    v154 = STACK[0x2190];
    v155 = STACK[0x2188];
    v156 = STACK[0x2180];
    v157 = STACK[0x2178];
    v158 = STACK[0x2170];
    v159 = STACK[0x2168];
    v160 = STACK[0x2160];
    v161 = STACK[0x2158];
    v162 = STACK[0x2150];
    v163 = STACK[0x2148];
    v164 = STACK[0x2140];
    v165 = STACK[0x2138];
    v166 = STACK[0x2130];
    v167 = STACK[0x2128];
    v168 = STACK[0x2120];
    v169 = STACK[0x2118];
    v170 = STACK[0x2110];
    v171 = STACK[0x2108];
    v172 = STACK[0x2100];
    v173 = STACK[0x20F8];
    v174 = STACK[0x20F0];
    v175 = STACK[0x20E8];
    v177 = STACK[0x20E0];
    v178 = STACK[0x20D8];
    v179 = STACK[0x20D0];
    v180 = STACK[0x20C8];
    v182 = STACK[0x20C0];
    v183 = STACK[0x20B8];
    v184 = STACK[0x20B0];
    v185 = STACK[0x20A8];
    v187 = STACK[0x20A0];
    v188 = STACK[0x2098];
    v189 = STACK[0x2090];
    v190 = STACK[0x2088];
    v192 = STACK[0x2080];
    v196 = STACK[0x2078];
    v195 = STACK[0x2070];
    v194 = STACK[0x2068];
    v193 = STACK[0x2060];
    v191 = STACK[0x2058];
    v186 = STACK[0x2050];
    v181 = STACK[0x2048];
    v176 = STACK[0x2040];
    v79 = STACK[0x1EF0];
    v80 = STACK[0x1EE8];
    v81 = STACK[0x1EE0];
    v82 = STACK[0x1ED8];
    v83 = STACK[0x1ED0];
    v84 = STACK[0x1EC8];
    v85 = STACK[0x1EC0];
    v86 = STACK[0x1EB8];
    v87 = STACK[0x1EB0];
    v88 = STACK[0x1EA8];
    v89 = STACK[0x1EA0];
    v90 = STACK[0x1E98];
    v91 = STACK[0x1E90];
    v92 = STACK[0x1E88];
    v93 = STACK[0x1E80];
    v94 = STACK[0x1E78];
    v95 = STACK[0x1E70];
    v96 = STACK[0x1E68];
    v97 = STACK[0x1E60];
    v98 = STACK[0x1E58];
    v99 = STACK[0x1E50];
    v100 = STACK[0x1E48];
    v101 = STACK[0x1E40];
    v102 = STACK[0x1E38];
    v103 = STACK[0x1E30];
    v104 = STACK[0x1E28];
    v105 = STACK[0x1E20];
    v106 = STACK[0x1E18];
    v107 = STACK[0x1E10];
    v108 = STACK[0x1E08];
    v109 = STACK[0x1E00];
    v110 = STACK[0x1DF8];
    v111 = STACK[0x1DF0];
    v112 = STACK[0x1DE8];
    v113 = STACK[0x1DE0];
    v114 = STACK[0x1DD8];
    v115 = STACK[0x1DD0];
    v116 = STACK[0x1DC8];
    v117 = STACK[0x1DC0];
    v118 = STACK[0x1DB8];
    v119 = STACK[0x1DB0];
    v120 = STACK[0x1DA8];
    v122 = STACK[0x1DA0];
    v123 = STACK[0x1D98];
    v124 = STACK[0x1D90];
    v125 = STACK[0x1D88];
    v127 = STACK[0x1D80];
    v128 = STACK[0x1D78];
    v129 = STACK[0x1D70];
    v130 = STACK[0x1D68];
    v132 = STACK[0x1D60];
    v133 = STACK[0x1D58];
    v134 = STACK[0x1D50];
    v135 = STACK[0x1D48];
    v137 = STACK[0x1D40];
    v141 = STACK[0x1D38];
    v140 = STACK[0x1D30];
    v139 = STACK[0x1D28];
    v138 = STACK[0x1D20];
    v136 = STACK[0x1D18];
    v131 = STACK[0x1D10];
    v126 = STACK[0x1D08];
    v121 = STACK[0x1D00];
    v78 = v65;
    v77 = v66;
    v76 = v67;
    v75 = v68;
    v74 = v69;
    v73 = v70;
    swift_bridgeObjectRetain(v71);
    sub_100099054(v73, v74, v75, v76, v77, v78, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57,
      a58,
      a59,
      a60,
      a61,
      a62,
      a63,
      a64,
      a65);
    sub_100099054(v121, v126, v131, v136, v138, v139, v140, v141, v137, v135, v134, v133, v132, v130, v129, v128, v127, v125, v124,
      v123,
      v122,
      v120,
      v119,
      v118,
      v117,
      v116,
      v115,
      v114,
      v113,
      v112,
      v111,
      v110,
      v109,
      v108,
      v107,
      v106,
      v105,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83,
      v82,
      v81,
      v80,
      v79);
    sub_100099054(v176, v181, v186, v191, v193, v194, v195, v196, v192, v190, v189, v188, v187, v185, v184, v183, v182, v180, v179,
      v178,
      v177,
      v175,
      v174,
      v173,
      v172,
      v171,
      v170,
      v169,
      v168,
      v167,
      v166,
      v165,
      v164,
      v163,
      v162,
      v161,
      v160,
      v159,
      v158,
      v157,
      v156,
      v155,
      v154,
      v153,
      v152,
      v151,
      v150,
      v149,
      v148,
      v147,
      v146,
      v145,
      v144,
      v143,
      v142,
      v200,
      v201,
      v202,
      v203,
      v204,
      v199,
      v198,
      v197);
    sub_100099054(v280, v283, v288, v292, v279, v282, v287, v291, v278, v277, v270, v269, v268, v267, v266, v265, v258, v257, v256,
      v255,
      v254,
      v253,
      v246,
      v245,
      v244,
      v243,
      v241,
      v240,
      v239,
      v238,
      v237,
      v236,
      v235,
      v234,
      v233,
      v232,
      v231,
      v230,
      v229,
      v228,
      v227,
      v226,
      v225,
      v224,
      v223,
      v222,
      v221,
      v220,
      v219,
      v218,
      v217,
      v216,
      v215,
      v214,
      v213,
      v212,
      v211,
      v210,
      v209,
      v208,
      v207,
      v206,
      v205);
    sub_100099054(v326, v328, v323, v324, v325, v327, v329, v330, v322, v321, v320, v319, v318, v317, v316, v315, v314, v313, v312,
      v311,
      v310,
      v309,
      v308,
      v307,
      v306,
      v305,
      v304,
      v303,
      v302,
      v301,
      v300,
      v299,
      v298,
      v297,
      v296,
      v295,
      v294,
      v293,
      v290,
      v289,
      v286,
      v285,
      v284,
      v281,
      v276,
      v275,
      v274,
      v273,
      v272,
      v271,
      v264,
      v263,
      v262,
      v261,
      v260,
      v259,
      v252,
      v251,
      v250,
      v249,
      v248,
      v247,
      v242);
    sub_100099054(v331, v332, v333, v334, v335, v391, v392, v393, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346,
      v347,
      v348,
      v349,
      v350,
      v351,
      v352,
      v353,
      v354,
      v355,
      v356,
      v357,
      v358,
      v359,
      v360,
      v361,
      v362,
      v363,
      v364,
      v365,
      v366,
      v367,
      v368,
      v369,
      v370,
      v371,
      v372,
      v373,
      v374,
      v375,
      v376,
      v377,
      v378,
      v379,
      v380,
      v381,
      v382,
      v383,
      v384,
      v385,
      v386,
      v387,
      v388,
      v389,
      v390);
    sub_100099054(v394, v395, v396, v397, v398, v454, v455, v456, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409,
      v410,
      v411,
      v412,
      v413,
      v414,
      v415,
      v416,
      v417,
      v418,
      v419,
      v420,
      v421,
      v422,
      v423,
      v424,
      v425,
      v426,
      v427,
      v428,
      v429,
      v430,
      v431,
      v432,
      v433,
      v434,
      v435,
      v436,
      v437,
      v438,
      v439,
      v440,
      v441,
      v442,
      v443,
      v444,
      v445,
      v446,
      v447,
      v448,
      v449,
      v450,
      v451,
      v452,
      v453);
    *(_QWORD *)&result = swift_bridgeObjectRetain(v457).n128_u64[0];
  }
  return result;
}

double sub_100099054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a69;
  double result;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  if (STACK[0x600] != 1)
  {
    v78 = STACK[0x608];
    v77 = STACK[0x5B0];
    v76 = STACK[0x590];
    v75 = STACK[0x570];
    v74 = STACK[0x550];
    v73 = STACK[0x530];
    v72 = STACK[0x510];
    v71 = STACK[0x600];
    sub_10008F4B0(a1);
    sub_10008F4B0(a5);
    sub_10008F4B0(a9);
    sub_10008F4B0(a13);
    sub_10008F4B0(a17);
    sub_10008F4B0(a21);
    sub_10008F4B0(a25);
    sub_10008F4B0(a29);
    sub_10008F4B0(a33);
    sub_10008F4B0(a37);
    sub_10008F4B0(a41);
    sub_10008F4B0(a45);
    sub_10008F4B0(a49);
    sub_10008F4B0(a53);
    sub_10008F4B0(a57);
    sub_10008F4B0(a61);
    sub_10008F4B0(a65);
    sub_10008F4B0(a69);
    sub_10008F4B0(v72);
    sub_10008F4B0(v73);
    sub_10008F4B0(v74);
    sub_10008F4B0(v75);
    sub_10008F4B0(v76);
    sub_10008F4B0(v77);
    swift_bridgeObjectRetain(v78);
    *(_QWORD *)&result = swift_bridgeObjectRetain(v71).n128_u64[0];
  }
  return result;
}

uint64_t sub_100099488()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000994AC()
{
  uint64_t v0;

  return sub_10005612C(v0);
}

uint64_t sub_1000994C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000994D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000994DC()
{
  unint64_t result;

  result = qword_100632370;
  if (!qword_100632370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100632370);
  }
  return result;
}

_QWORD *sub_100099520(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  swift_bridgeObjectRetain(a1[18]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *sub_1000995C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[14];
  v8 = a1[15];
  v9 = a1[18];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_100099668()
{
  unint64_t result;

  result = qword_1006323B0;
  if (!qword_1006323B0)
  {
    result = swift_getWitnessTable(&unk_100522944, &type metadata for LegacySPWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006323B0);
  }
  return result;
}

unint64_t sub_1000996AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006323C8;
  if (!qword_1006323C8)
  {
    v1 = sub_100013E24(&qword_1006323C0);
    sub_100093620(&qword_1006323D0, 255, type metadata accessor for UserInputValidationURL, (uint64_t)&unk_1005217A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006323C8);
  }
  return result;
}

unint64_t sub_10009972C()
{
  unint64_t result;

  result = qword_1006323E8;
  if (!qword_1006323E8)
  {
    result = swift_getWitnessTable(&unk_100521668, &type metadata for ShareableAttribute);
    atomic_store(result, (unint64_t *)&qword_1006323E8);
  }
  return result;
}

unint64_t sub_100099770()
{
  unint64_t result;

  result = qword_100632400;
  if (!qword_100632400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page, &type metadata for Page);
    atomic_store(result, (unint64_t *)&qword_100632400);
  }
  return result;
}

unint64_t sub_1000997B4()
{
  unint64_t result;

  result = qword_100632418;
  if (!qword_100632418)
  {
    result = swift_getWitnessTable(&unk_100521618, &type metadata for AcceptedVerifiedClaim);
    atomic_store(result, (unint64_t *)&qword_100632418);
  }
  return result;
}

unint64_t sub_1000997F8()
{
  unint64_t result;

  result = qword_100632430;
  if (!qword_100632430)
  {
    result = swift_getWitnessTable(&unk_10052786C, &type metadata for ArtifactId);
    atomic_store(result, (unint64_t *)&qword_100632430);
  }
  return result;
}

unint64_t sub_10009983C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100632440;
  if (!qword_100632440)
  {
    v1 = sub_100013E24(&qword_100632438);
    sub_100093620(&qword_100632448, 255, type metadata accessor for EncryptionCertificateInStringFormat, (uint64_t)&unk_100522C64);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100632440);
  }
  return result;
}

uint64_t type metadata accessor for EncryptionCertificateInStringFormat(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_1006326E0, (uint64_t)&nominal type descriptor for EncryptionCertificateInStringFormat);
}

unint64_t sub_1000998D8()
{
  unint64_t result;

  result = qword_100632450;
  if (!qword_100632450)
  {
    result = swift_getWitnessTable(&unk_1005216B8, &type metadata for Connectivity);
    atomic_store(result, (unint64_t *)&qword_100632450);
  }
  return result;
}

unint64_t sub_10009991C()
{
  unint64_t result;

  result = qword_100632458;
  if (!qword_100632458)
  {
    result = swift_getWitnessTable(&unk_10052795C, &type metadata for SharingFormat);
    atomic_store(result, (unint64_t *)&qword_100632458);
  }
  return result;
}

uint64_t sub_100099960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000999A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000999E0()
{
  unint64_t result;

  result = qword_100632488;
  if (!qword_100632488)
  {
    result = swift_getWitnessTable(&unk_1005228F4, &type metadata for LegacyWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632488);
  }
  return result;
}

unint64_t sub_100099A24()
{
  unint64_t result;

  result = qword_100632490;
  if (!qword_100632490)
  {
    result = swift_getWitnessTable(&unk_100521438, &type metadata for WorkflowType);
    atomic_store(result, (unint64_t *)&qword_100632490);
  }
  return result;
}

unint64_t sub_100099A68()
{
  unint64_t result;

  result = qword_100632498;
  if (!qword_100632498)
  {
    result = swift_getWitnessTable(&unk_100521528, &type metadata for UserConsentType);
    atomic_store(result, (unint64_t *)&qword_100632498);
  }
  return result;
}

unint64_t sub_100099AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006324B0;
  if (!qword_1006324B0)
  {
    v1 = sub_100013E24(&qword_1006324A8);
    sub_100093620(&qword_1006324A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006324B0);
  }
  return result;
}

unint64_t sub_100099B2C()
{
  unint64_t result;

  result = qword_1006324C8;
  if (!qword_1006324C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInputField, &type metadata for UserInputField);
    atomic_store(result, (unint64_t *)&qword_1006324C8);
  }
  return result;
}

unint64_t sub_100099B70()
{
  unint64_t result;

  result = qword_1006324D8;
  if (!qword_1006324D8)
  {
    result = swift_getWitnessTable(&unk_1005228A4, &type metadata for LegacyINOWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006324D8);
  }
  return result;
}

unint64_t sub_100099BB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1006324E8;
  if (!qword_1006324E8)
  {
    v1 = sub_100013E24(&qword_1006324E0);
    sub_100093620(&qword_1006324F0, v2, (uint64_t (*)(uint64_t))type metadata accessor for VerifiedClaimField, (uint64_t)&unk_100521758);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006324E8);
  }
  return result;
}

unint64_t sub_100099C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100632500;
  if (!qword_100632500)
  {
    v1 = sub_100013E24(&qword_1006324F8);
    sub_100093620(&qword_100632508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityProofingUnorderedUIElement, (uint64_t)&protocol conformance descriptor for IdentityProofingUnorderedUIElement);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100632500);
  }
  return result;
}

unint64_t sub_100099CB8()
{
  unint64_t result;

  result = qword_100632518;
  if (!qword_100632518)
  {
    result = swift_getWitnessTable(&unk_100521410, &type metadata for WorkflowType);
    atomic_store(result, (unint64_t *)&qword_100632518);
  }
  return result;
}

unint64_t sub_100099CFC()
{
  unint64_t result;

  result = qword_100632520;
  if (!qword_100632520)
  {
    result = swift_getWitnessTable(&unk_100521500, &type metadata for UserConsentType);
    atomic_store(result, (unint64_t *)&qword_100632520);
  }
  return result;
}

unint64_t sub_100099D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100632530;
  if (!qword_100632530)
  {
    v1 = sub_100013E24(&qword_1006324A8);
    sub_100093620(&qword_100632528, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100632530);
  }
  return result;
}

unint64_t sub_100099DC0()
{
  unint64_t result;

  result = qword_100632540;
  if (!qword_100632540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInputField, &type metadata for UserInputField);
    atomic_store(result, (unint64_t *)&qword_100632540);
  }
  return result;
}

uint64_t sub_100099E04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_100632584);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_100007EE8;
  return sub_100063DC8(a1, a2, v6, v7, v8, v9, v10, v11);
}

_QWORD *sub_100099EA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[14];
  swift_bridgeObjectRetain(a1[18]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_100099F30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[18];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_100099FB8()
{
  unint64_t result;

  result = qword_1006325F0;
  if (!qword_1006325F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1006325F0);
  }
  return result;
}

uint64_t sub_100099FFC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100013E24(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009A03C()
{
  unint64_t result;

  result = qword_100632600;
  if (!qword_100632600)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100632600);
  }
  return result;
}

unint64_t sub_10009A080()
{
  unint64_t result;

  result = qword_100632640;
  if (!qword_100632640)
  {
    result = swift_getWitnessTable(&unk_100521330, &type metadata for Label);
    atomic_store(result, (unint64_t *)&qword_100632640);
  }
  return result;
}

unint64_t sub_10009A0C4()
{
  unint64_t result;

  result = qword_100632658;
  if (!qword_100632658)
  {
    result = swift_getWitnessTable(&unk_100521160, &type metadata for DocumentConfig);
    atomic_store(result, (unint64_t *)&qword_100632658);
  }
  return result;
}

unint64_t sub_10009A108()
{
  unint64_t result;

  result = qword_100632668;
  if (!qword_100632668)
  {
    result = swift_getWitnessTable(&unk_100521188, &type metadata for CameraImage);
    atomic_store(result, (unint64_t *)&qword_100632668);
  }
  return result;
}

unint64_t sub_10009A14C()
{
  unint64_t result;

  result = qword_100632670;
  if (!qword_100632670)
  {
    result = swift_getWitnessTable(&unk_1005211B0, &type metadata for DataNodeProofInfo);
    atomic_store(result, (unint64_t *)&qword_100632670);
  }
  return result;
}

unint64_t sub_10009A190()
{
  unint64_t result;

  result = qword_100632680;
  if (!qword_100632680)
  {
    result = swift_getWitnessTable(&unk_100521080, &type metadata for IQCriteria);
    atomic_store(result, (unint64_t *)&qword_100632680);
  }
  return result;
}

#error "10009A374: call analysis failed (funcsize=114)"

_QWORD *sub_10009A39C(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;

  v444 = a1[475];
  v426 = a1[3];
  v427 = a1[2];
  v424 = a1[5];
  v425 = a1[4];
  v423 = a1[6];
  v422 = a1[7];
  v421 = a1[8];
  v420 = a1[9];
  v405 = a1[10];
  v402 = a1[11];
  v399 = a1[12];
  v394 = a1[13];
  v390 = a1[14];
  v386 = a1[15];
  v381 = a1[16];
  v377 = a1[17];
  v373 = a1[18];
  v368 = a1[19];
  v364 = a1[20];
  v360 = a1[21];
  v355 = a1[22];
  v351 = a1[23];
  v347 = a1[24];
  v342 = a1[25];
  v338 = a1[26];
  v334 = a1[27];
  v329 = a1[28];
  v325 = a1[29];
  v321 = a1[30];
  v316 = a1[31];
  v312 = a1[32];
  v308 = a1[33];
  v299 = a1[34];
  v294 = a1[35];
  v287 = a1[36];
  v276 = a1[37];
  v263 = a1[38];
  v254 = a1[39];
  v247 = a1[40];
  v237 = a1[41];
  v227 = a1[42];
  v219 = a1[43];
  v211 = a1[44];
  v201 = a1[45];
  v193 = a1[46];
  v185 = a1[47];
  v178 = a1[48];
  v172 = a1[49];
  v166 = a1[50];
  v162 = a1[51];
  v157 = a1[52];
  v152 = a1[53];
  v149 = a1[54];
  v146 = a1[55];
  v142 = a1[56];
  v139 = a1[57];
  v136 = a1[58];
  v132 = a1[59];
  v129 = a1[60];
  v126 = a1[61];
  v122 = a1[62];
  v119 = a1[63];
  v117 = a1[64];
  v434 = a1[107];
  v435 = a1[106];
  v432 = a1[109];
  v433 = a1[108];
  v430 = a1[111];
  v431 = a1[110];
  v428 = a1[113];
  v429 = a1[112];
  v416 = a1[114];
  v410 = a1[115];
  v404 = a1[116];
  v401 = a1[117];
  v398 = a1[118];
  v393 = a1[119];
  v389 = a1[120];
  v385 = a1[121];
  v380 = a1[122];
  v376 = a1[123];
  v372 = a1[124];
  v367 = a1[125];
  v363 = a1[126];
  v359 = a1[127];
  v354 = a1[128];
  v350 = a1[129];
  v346 = a1[130];
  v341 = a1[131];
  v337 = a1[132];
  v333 = a1[133];
  v328 = a1[134];
  v324 = a1[135];
  v320 = a1[136];
  v315 = a1[137];
  v311 = a1[138];
  v307 = a1[139];
  v298 = a1[140];
  v293 = a1[141];
  v286 = a1[142];
  v275 = a1[143];
  v262 = a1[144];
  v253 = a1[145];
  v246 = a1[146];
  v236 = a1[147];
  v226 = a1[148];
  v218 = a1[149];
  v210 = a1[150];
  v200 = a1[151];
  v192 = a1[152];
  v184 = a1[153];
  v177 = a1[154];
  v171 = a1[155];
  v165 = a1[156];
  v161 = a1[157];
  v156 = a1[158];
  v151 = a1[159];
  v148 = a1[160];
  v145 = a1[161];
  v141 = a1[162];
  v138 = a1[163];
  v135 = a1[164];
  v131 = a1[165];
  v128 = a1[166];
  v125 = a1[167];
  v121 = a1[168];
  v442 = a1[211];
  v443 = a1[210];
  v440 = a1[213];
  v441 = a1[212];
  v438 = a1[215];
  v439 = a1[214];
  v436 = a1[217];
  v437 = a1[216];
  v419 = a1[218];
  v418 = a1[219];
  v415 = a1[220];
  v409 = a1[221];
  v403 = a1[222];
  v400 = a1[223];
  v397 = a1[224];
  v392 = a1[225];
  v388 = a1[226];
  v384 = a1[227];
  v379 = a1[228];
  v375 = a1[229];
  v371 = a1[230];
  v366 = a1[231];
  v362 = a1[232];
  v358 = a1[233];
  v353 = a1[234];
  v349 = a1[235];
  v345 = a1[236];
  v340 = a1[237];
  v336 = a1[238];
  v332 = a1[239];
  v327 = a1[240];
  v323 = a1[241];
  v319 = a1[242];
  v314 = a1[243];
  v310 = a1[244];
  v306 = a1[245];
  v297 = a1[246];
  v292 = a1[247];
  v285 = a1[248];
  v274 = a1[249];
  v245 = a1[252];
  v199 = a1[469];
  v191 = a1[470];
  v182 = a1[471];
  v176 = a1[472];
  v170 = a1[473];
  v207 = a1[463];
  v202 = a1[464];
  v195 = a1[465];
  v188 = a1[466];
  v183 = a1[467];
  v179 = a1[468];
  v221 = a1[457];
  v214 = a1[458];
  v208 = a1[459];
  v203 = a1[460];
  v196 = a1[461];
  v189 = a1[462];
  v233 = a1[451];
  v228 = a1[452];
  v222 = a1[453];
  v215 = a1[454];
  v209 = a1[455];
  v204 = a1[456];
  v249 = a1[445];
  v240 = a1[446];
  v234 = a1[447];
  v229 = a1[448];
  v223 = a1[449];
  v216 = a1[450];
  v259 = a1[439];
  v255 = a1[440];
  v250 = a1[441];
  v241 = a1[442];
  v235 = a1[443];
  v230 = a1[444];
  v280 = a1[433];
  v269 = a1[434];
  v260 = a1[435];
  v256 = a1[436];
  v251 = a1[437];
  v242 = a1[438];
  v291 = a1[427];
  v289 = a1[428];
  v281 = a1[429];
  v270 = a1[430];
  v261 = a1[431];
  v257 = a1[432];
  v296 = a1[421];
  v301 = a1[422];
  v302 = a1[423];
  v303 = a1[424];
  v305 = a1[425];
  v271 = a1[426];
  v264 = a1[418];
  v267 = a1[419];
  v272 = a1[420];
  v32 = a1[373];
  v29 = a1[374];
  v27 = a1[375];
  v25 = a1[376];
  v38 = a1[367];
  v35 = a1[368];
  v33 = a1[369];
  v30 = a1[370];
  v28 = a1[371];
  v26 = a1[372];
  v44 = a1[361];
  v41 = a1[362];
  v39 = a1[363];
  v36 = a1[364];
  v34 = a1[365];
  v31 = a1[366];
  v50 = a1[355];
  v47 = a1[356];
  v45 = a1[357];
  v42 = a1[358];
  v40 = a1[359];
  v37 = a1[360];
  v56 = a1[349];
  v53 = a1[350];
  v51 = a1[351];
  v48 = a1[352];
  v46 = a1[353];
  v43 = a1[354];
  v62 = a1[343];
  v59 = a1[344];
  v57 = a1[345];
  v54 = a1[346];
  v52 = a1[347];
  v49 = a1[348];
  v68 = a1[337];
  v65 = a1[338];
  v63 = a1[339];
  v60 = a1[340];
  v58 = a1[341];
  v55 = a1[342];
  v74 = a1[331];
  v71 = a1[332];
  v69 = a1[333];
  v66 = a1[334];
  v64 = a1[335];
  v61 = a1[336];
  v84 = a1[325];
  v79 = a1[326];
  v75 = a1[327];
  v72 = a1[328];
  v70 = a1[329];
  v67 = a1[330];
  v85 = a1[319];
  v86 = a1[320];
  v87 = a1[321];
  v80 = a1[322];
  v76 = a1[323];
  v73 = a1[324];
  v77 = a1[314];
  v78 = a1[315];
  v81 = a1[316];
  v82 = a1[317];
  v83 = a1[318];
  v8 = a1[271];
  v5 = a1[272];
  v14 = a1[265];
  v11 = a1[266];
  v9 = a1[267];
  v6 = a1[268];
  v4 = a1[269];
  v3 = a1[270];
  v19 = a1[259];
  v17 = a1[260];
  v15 = a1[261];
  v12 = a1[262];
  v10 = a1[263];
  v7 = a1[264];
  v23 = a1[253];
  v21 = a1[254];
  v20 = a1[255];
  v18 = a1[256];
  v16 = a1[257];
  v13 = a1[258];
  v24 = a1[250];
  v22 = a1[251];
  v93 = a1[474];
  v92 = a1[476];
  v91 = a1[477];
  v90 = a1[478];
  v89 = a1[479];
  v88 = a1[480];
  v266 = a1[522];
  v268 = a1[523];
  v273 = a1[524];
  v278 = a1[525];
  v279 = a1[526];
  v282 = a1[527];
  v284 = a1[528];
  v288 = a1[529];
  v244 = a1[530];
  v238 = a1[531];
  v231 = a1[532];
  v224 = a1[533];
  v217 = a1[534];
  v212 = a1[535];
  v205 = a1[536];
  v197 = a1[537];
  v190 = a1[538];
  v186 = a1[539];
  v180 = a1[540];
  v174 = a1[541];
  v169 = a1[542];
  v167 = a1[543];
  v163 = a1[544];
  v159 = a1[545];
  v155 = a1[546];
  v153 = a1[547];
  v150 = a1[548];
  v147 = a1[549];
  v144 = a1[550];
  v143 = a1[551];
  v140 = a1[552];
  v137 = a1[553];
  v134 = a1[554];
  v133 = a1[555];
  v130 = a1[556];
  v127 = a1[557];
  v124 = a1[558];
  v123 = a1[559];
  v120 = a1[560];
  v118 = a1[561];
  v116 = a1[562];
  v115 = a1[563];
  v114 = a1[564];
  v113 = a1[565];
  v112 = a1[566];
  v111 = a1[567];
  v110 = a1[568];
  v109 = a1[569];
  v108 = a1[570];
  v107 = a1[571];
  v106 = a1[572];
  v105 = a1[573];
  v104 = a1[574];
  v103 = a1[575];
  v102 = a1[576];
  v101 = a1[577];
  v100 = a1[578];
  v99 = a1[579];
  v98 = a1[580];
  v97 = a1[581];
  v96 = a1[582];
  v95 = a1[583];
  v94 = a1[584];
  v406 = a1[626];
  v407 = a1[627];
  v408 = a1[628];
  v411 = a1[629];
  v412 = a1[630];
  v413 = a1[631];
  v414 = a1[632];
  v417 = a1[633];
  v396 = a1[634];
  v395 = a1[635];
  v391 = a1[636];
  v387 = a1[637];
  v383 = a1[638];
  v382 = a1[639];
  v378 = a1[640];
  v374 = a1[641];
  v370 = a1[642];
  v369 = a1[643];
  v365 = a1[644];
  v361 = a1[645];
  v357 = a1[646];
  v356 = a1[647];
  v352 = a1[648];
  v348 = a1[649];
  v344 = a1[650];
  v343 = a1[651];
  v339 = a1[652];
  v335 = a1[653];
  v331 = a1[654];
  v330 = a1[655];
  v326 = a1[656];
  v322 = a1[657];
  v318 = a1[658];
  v317 = a1[659];
  v313 = a1[660];
  v309 = a1[661];
  v304 = a1[662];
  v300 = a1[663];
  v295 = a1[664];
  v290 = a1[665];
  v283 = a1[666];
  v277 = a1[667];
  v265 = a1[668];
  v258 = a1[669];
  v252 = a1[670];
  v248 = a1[671];
  v239 = a1[672];
  v232 = a1[673];
  v225 = a1[674];
  v220 = a1[675];
  v213 = a1[676];
  v206 = a1[677];
  v198 = a1[678];
  v194 = a1[679];
  v187 = a1[680];
  v181 = a1[681];
  v175 = a1[682];
  v173 = a1[683];
  v168 = a1[684];
  v164 = a1[685];
  v160 = a1[686];
  v158 = a1[687];
  v154 = a1[688];
  v243 = a1[730];
  swift_bridgeObjectRetain(a1[1]);
  sub_100099054(v427, v426, v425, v424, v423, v422, v421, v420, v405, v402, v399, v394, v390, v386, v381, v377, v373, v368, v364,
    v360,
    v355,
    v351,
    v347,
    v342,
    v338,
    v334,
    v329,
    v325,
    v321,
    v316,
    v312,
    v308,
    v299,
    v294,
    v287,
    v276,
    v263,
    v254,
    v247,
    v237,
    v227,
    v219,
    v211,
    v201,
    v193,
    v185,
    v178,
    v172,
    v166,
    v162,
    v157,
    v152,
    v149,
    v146,
    v142,
    v139,
    v136,
    v132,
    v129,
    v126,
    v122,
    v119,
    v117);
  sub_100099054(v435, v434, v433, v432, v431, v430, v429, v428, v416, v410, v404, v401, v398, v393, v389, v385, v380, v376, v372,
    v367,
    v363,
    v359,
    v354,
    v350,
    v346,
    v341,
    v337,
    v333,
    v328,
    v324,
    v320,
    v315,
    v311,
    v307,
    v298,
    v293,
    v286,
    v275,
    v262,
    v253,
    v246,
    v236,
    v226,
    v218,
    v210,
    v200,
    v192,
    v184,
    v177,
    v171,
    v165,
    v161,
    v156,
    v151,
    v148,
    v145,
    v141,
    v138,
    v135,
    v131,
    v128,
    v125,
    v121);
  sub_100099054(v443, v442, v441, v440, v439, v438, v437, v436, v419, v418, v415, v409, v403, v400, v397, v392, v388, v384, v379,
    v375,
    v371,
    v366,
    v362,
    v358,
    v353,
    v349,
    v345,
    v340,
    v336,
    v332,
    v327,
    v323,
    v319,
    v314,
    v310,
    v306,
    v297,
    v292,
    v285,
    v274,
    v24,
    v22,
    v245,
    v23,
    v21,
    v20,
    v18,
    v16,
    v13,
    v19,
    v17,
    v15,
    v12,
    v10,
    v7,
    v14,
    v11,
    v9,
    v6,
    v4,
    v3,
    v8,
    v5);
  sub_100099054(v77, v78, v81, v82, v83, v85, v86, v87, v80, v76, v73, v84, v79, v75, v72, v70, v67, v74, v71,
    v69,
    v66,
    v64,
    v61,
    v68,
    v65,
    v63,
    v60,
    v58,
    v55,
    v62,
    v59,
    v57,
    v54,
    v52,
    v49,
    v56,
    v53,
    v51,
    v48,
    v46,
    v43,
    v50,
    v47,
    v45,
    v42,
    v40,
    v37,
    v44,
    v41,
    v39,
    v36,
    v34,
    v31,
    v38,
    v35,
    v33,
    v30,
    v28,
    v26,
    v32,
    v29,
    v27,
    v25);
  sub_100099054(v264, v267, v272, v296, v301, v302, v303, v305, v271, v291, v289, v281, v270, v261, v257, v280, v269, v260, v256,
    v251,
    v242,
    v259,
    v255,
    v250,
    v241,
    v235,
    v230,
    v249,
    v240,
    v234,
    v229,
    v223,
    v216,
    v233,
    v228,
    v222,
    v215,
    v209,
    v204,
    v221,
    v214,
    v208,
    v203,
    v196,
    v189,
    v207,
    v202,
    v195,
    v188,
    v183,
    v179,
    v199,
    v191,
    v182,
    v176,
    v170,
    v93,
    v444,
    v92,
    v91,
    v90,
    v89,
    v88);
  sub_100099054(v266, v268, v273, v278, v279, v282, v284, v288, v244, v238, v231, v224, v217, v212, v205, v197, v190, v186, v180,
    v174,
    v169,
    v167,
    v163,
    v159,
    v155,
    v153,
    v150,
    v147,
    v144,
    v143,
    v140,
    v137,
    v134,
    v133,
    v130,
    v127,
    v124,
    v123,
    v120,
    v118,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v107,
    v106,
    v105,
    v104,
    v103,
    v102,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94);
  sub_100099054(v406, v407, v408, v411, v412, v413, v414, v417, v396, v395, v391, v387, v383, v382, v378, v374, v370, v369, v365,
    v361,
    v357,
    v356,
    v352,
    v348,
    v344,
    v343,
    v339,
    v335,
    v331,
    v330,
    v326,
    v322,
    v318,
    v317,
    v313,
    v309,
    v304,
    v300,
    v295,
    v290,
    v283,
    v277,
    v265,
    v258,
    v252,
    v248,
    v239,
    v232,
    v225,
    v220,
    v213,
    v206,
    v198,
    v194,
    v187,
    v181,
    v175,
    v173,
    v168,
    v164,
    v160,
    v158,
    v154);
  swift_bridgeObjectRetain(v243);
  return a1;
}

_QWORD *sub_10009CCB8(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;

  v444 = a1[475];
  v426 = a1[3];
  v427 = a1[2];
  v424 = a1[5];
  v425 = a1[4];
  v423 = a1[6];
  v422 = a1[7];
  v421 = a1[8];
  v420 = a1[9];
  v405 = a1[10];
  v402 = a1[11];
  v399 = a1[12];
  v394 = a1[13];
  v390 = a1[14];
  v386 = a1[15];
  v381 = a1[16];
  v377 = a1[17];
  v373 = a1[18];
  v368 = a1[19];
  v364 = a1[20];
  v360 = a1[21];
  v355 = a1[22];
  v351 = a1[23];
  v347 = a1[24];
  v342 = a1[25];
  v338 = a1[26];
  v334 = a1[27];
  v329 = a1[28];
  v325 = a1[29];
  v321 = a1[30];
  v316 = a1[31];
  v312 = a1[32];
  v308 = a1[33];
  v299 = a1[34];
  v294 = a1[35];
  v287 = a1[36];
  v276 = a1[37];
  v263 = a1[38];
  v254 = a1[39];
  v247 = a1[40];
  v237 = a1[41];
  v227 = a1[42];
  v219 = a1[43];
  v211 = a1[44];
  v201 = a1[45];
  v193 = a1[46];
  v185 = a1[47];
  v178 = a1[48];
  v172 = a1[49];
  v166 = a1[50];
  v162 = a1[51];
  v157 = a1[52];
  v152 = a1[53];
  v149 = a1[54];
  v146 = a1[55];
  v142 = a1[56];
  v139 = a1[57];
  v136 = a1[58];
  v132 = a1[59];
  v129 = a1[60];
  v126 = a1[61];
  v122 = a1[62];
  v119 = a1[63];
  v117 = a1[64];
  v434 = a1[107];
  v435 = a1[106];
  v432 = a1[109];
  v433 = a1[108];
  v430 = a1[111];
  v431 = a1[110];
  v428 = a1[113];
  v429 = a1[112];
  v416 = a1[114];
  v410 = a1[115];
  v404 = a1[116];
  v401 = a1[117];
  v398 = a1[118];
  v393 = a1[119];
  v389 = a1[120];
  v385 = a1[121];
  v380 = a1[122];
  v376 = a1[123];
  v372 = a1[124];
  v367 = a1[125];
  v363 = a1[126];
  v359 = a1[127];
  v354 = a1[128];
  v350 = a1[129];
  v346 = a1[130];
  v341 = a1[131];
  v337 = a1[132];
  v333 = a1[133];
  v328 = a1[134];
  v324 = a1[135];
  v320 = a1[136];
  v315 = a1[137];
  v311 = a1[138];
  v307 = a1[139];
  v298 = a1[140];
  v293 = a1[141];
  v286 = a1[142];
  v275 = a1[143];
  v262 = a1[144];
  v253 = a1[145];
  v246 = a1[146];
  v236 = a1[147];
  v226 = a1[148];
  v218 = a1[149];
  v210 = a1[150];
  v200 = a1[151];
  v192 = a1[152];
  v184 = a1[153];
  v177 = a1[154];
  v171 = a1[155];
  v165 = a1[156];
  v161 = a1[157];
  v156 = a1[158];
  v151 = a1[159];
  v148 = a1[160];
  v145 = a1[161];
  v141 = a1[162];
  v138 = a1[163];
  v135 = a1[164];
  v131 = a1[165];
  v128 = a1[166];
  v125 = a1[167];
  v121 = a1[168];
  v442 = a1[211];
  v443 = a1[210];
  v440 = a1[213];
  v441 = a1[212];
  v438 = a1[215];
  v439 = a1[214];
  v436 = a1[217];
  v437 = a1[216];
  v419 = a1[218];
  v418 = a1[219];
  v415 = a1[220];
  v409 = a1[221];
  v403 = a1[222];
  v400 = a1[223];
  v397 = a1[224];
  v392 = a1[225];
  v388 = a1[226];
  v384 = a1[227];
  v379 = a1[228];
  v375 = a1[229];
  v371 = a1[230];
  v366 = a1[231];
  v362 = a1[232];
  v358 = a1[233];
  v353 = a1[234];
  v349 = a1[235];
  v345 = a1[236];
  v340 = a1[237];
  v336 = a1[238];
  v332 = a1[239];
  v327 = a1[240];
  v323 = a1[241];
  v319 = a1[242];
  v314 = a1[243];
  v310 = a1[244];
  v306 = a1[245];
  v297 = a1[246];
  v292 = a1[247];
  v285 = a1[248];
  v274 = a1[249];
  v245 = a1[252];
  v199 = a1[469];
  v191 = a1[470];
  v182 = a1[471];
  v176 = a1[472];
  v170 = a1[473];
  v207 = a1[463];
  v202 = a1[464];
  v195 = a1[465];
  v188 = a1[466];
  v183 = a1[467];
  v179 = a1[468];
  v221 = a1[457];
  v214 = a1[458];
  v208 = a1[459];
  v203 = a1[460];
  v196 = a1[461];
  v189 = a1[462];
  v233 = a1[451];
  v228 = a1[452];
  v222 = a1[453];
  v215 = a1[454];
  v209 = a1[455];
  v204 = a1[456];
  v249 = a1[445];
  v240 = a1[446];
  v234 = a1[447];
  v229 = a1[448];
  v223 = a1[449];
  v216 = a1[450];
  v259 = a1[439];
  v255 = a1[440];
  v250 = a1[441];
  v241 = a1[442];
  v235 = a1[443];
  v230 = a1[444];
  v280 = a1[433];
  v269 = a1[434];
  v260 = a1[435];
  v256 = a1[436];
  v251 = a1[437];
  v242 = a1[438];
  v291 = a1[427];
  v289 = a1[428];
  v281 = a1[429];
  v270 = a1[430];
  v261 = a1[431];
  v257 = a1[432];
  v296 = a1[421];
  v301 = a1[422];
  v302 = a1[423];
  v303 = a1[424];
  v305 = a1[425];
  v271 = a1[426];
  v264 = a1[418];
  v267 = a1[419];
  v272 = a1[420];
  v32 = a1[373];
  v29 = a1[374];
  v27 = a1[375];
  v25 = a1[376];
  v38 = a1[367];
  v35 = a1[368];
  v33 = a1[369];
  v30 = a1[370];
  v28 = a1[371];
  v26 = a1[372];
  v44 = a1[361];
  v41 = a1[362];
  v39 = a1[363];
  v36 = a1[364];
  v34 = a1[365];
  v31 = a1[366];
  v50 = a1[355];
  v47 = a1[356];
  v45 = a1[357];
  v42 = a1[358];
  v40 = a1[359];
  v37 = a1[360];
  v56 = a1[349];
  v53 = a1[350];
  v51 = a1[351];
  v48 = a1[352];
  v46 = a1[353];
  v43 = a1[354];
  v62 = a1[343];
  v59 = a1[344];
  v57 = a1[345];
  v54 = a1[346];
  v52 = a1[347];
  v49 = a1[348];
  v68 = a1[337];
  v65 = a1[338];
  v63 = a1[339];
  v60 = a1[340];
  v58 = a1[341];
  v55 = a1[342];
  v74 = a1[331];
  v71 = a1[332];
  v69 = a1[333];
  v66 = a1[334];
  v64 = a1[335];
  v61 = a1[336];
  v84 = a1[325];
  v79 = a1[326];
  v75 = a1[327];
  v72 = a1[328];
  v70 = a1[329];
  v67 = a1[330];
  v85 = a1[319];
  v86 = a1[320];
  v87 = a1[321];
  v80 = a1[322];
  v76 = a1[323];
  v73 = a1[324];
  v77 = a1[314];
  v78 = a1[315];
  v81 = a1[316];
  v82 = a1[317];
  v83 = a1[318];
  v8 = a1[271];
  v5 = a1[272];
  v14 = a1[265];
  v11 = a1[266];
  v9 = a1[267];
  v6 = a1[268];
  v4 = a1[269];
  v3 = a1[270];
  v19 = a1[259];
  v17 = a1[260];
  v15 = a1[261];
  v12 = a1[262];
  v10 = a1[263];
  v7 = a1[264];
  v23 = a1[253];
  v21 = a1[254];
  v20 = a1[255];
  v18 = a1[256];
  v16 = a1[257];
  v13 = a1[258];
  v24 = a1[250];
  v22 = a1[251];
  v93 = a1[474];
  v92 = a1[476];
  v91 = a1[477];
  v90 = a1[478];
  v89 = a1[479];
  v88 = a1[480];
  v266 = a1[522];
  v268 = a1[523];
  v273 = a1[524];
  v278 = a1[525];
  v279 = a1[526];
  v282 = a1[527];
  v284 = a1[528];
  v288 = a1[529];
  v244 = a1[530];
  v238 = a1[531];
  v231 = a1[532];
  v224 = a1[533];
  v217 = a1[534];
  v212 = a1[535];
  v205 = a1[536];
  v197 = a1[537];
  v190 = a1[538];
  v186 = a1[539];
  v180 = a1[540];
  v174 = a1[541];
  v169 = a1[542];
  v167 = a1[543];
  v163 = a1[544];
  v159 = a1[545];
  v155 = a1[546];
  v153 = a1[547];
  v150 = a1[548];
  v147 = a1[549];
  v144 = a1[550];
  v143 = a1[551];
  v140 = a1[552];
  v137 = a1[553];
  v134 = a1[554];
  v133 = a1[555];
  v130 = a1[556];
  v127 = a1[557];
  v124 = a1[558];
  v123 = a1[559];
  v120 = a1[560];
  v118 = a1[561];
  v116 = a1[562];
  v115 = a1[563];
  v114 = a1[564];
  v113 = a1[565];
  v112 = a1[566];
  v111 = a1[567];
  v110 = a1[568];
  v109 = a1[569];
  v108 = a1[570];
  v107 = a1[571];
  v106 = a1[572];
  v105 = a1[573];
  v104 = a1[574];
  v103 = a1[575];
  v102 = a1[576];
  v101 = a1[577];
  v100 = a1[578];
  v99 = a1[579];
  v98 = a1[580];
  v97 = a1[581];
  v96 = a1[582];
  v95 = a1[583];
  v94 = a1[584];
  v406 = a1[626];
  v407 = a1[627];
  v408 = a1[628];
  v411 = a1[629];
  v412 = a1[630];
  v413 = a1[631];
  v414 = a1[632];
  v417 = a1[633];
  v396 = a1[634];
  v395 = a1[635];
  v391 = a1[636];
  v387 = a1[637];
  v383 = a1[638];
  v382 = a1[639];
  v378 = a1[640];
  v374 = a1[641];
  v370 = a1[642];
  v369 = a1[643];
  v365 = a1[644];
  v361 = a1[645];
  v357 = a1[646];
  v356 = a1[647];
  v352 = a1[648];
  v348 = a1[649];
  v344 = a1[650];
  v343 = a1[651];
  v339 = a1[652];
  v335 = a1[653];
  v331 = a1[654];
  v330 = a1[655];
  v326 = a1[656];
  v322 = a1[657];
  v318 = a1[658];
  v317 = a1[659];
  v313 = a1[660];
  v309 = a1[661];
  v304 = a1[662];
  v300 = a1[663];
  v295 = a1[664];
  v290 = a1[665];
  v283 = a1[666];
  v277 = a1[667];
  v265 = a1[668];
  v258 = a1[669];
  v252 = a1[670];
  v248 = a1[671];
  v239 = a1[672];
  v232 = a1[673];
  v225 = a1[674];
  v220 = a1[675];
  v213 = a1[676];
  v206 = a1[677];
  v198 = a1[678];
  v194 = a1[679];
  v187 = a1[680];
  v181 = a1[681];
  v175 = a1[682];
  v173 = a1[683];
  v168 = a1[684];
  v164 = a1[685];
  v160 = a1[686];
  v158 = a1[687];
  v154 = a1[688];
  v243 = a1[730];
  swift_bridgeObjectRelease(a1[1]);
  sub_100092AB4(v427, v426, v425, v424, v423, v422, v421, v420, v405, v402, v399, v394, v390, v386, v381, v377, v373, v368, v364,
    v360,
    v355,
    v351,
    v347,
    v342,
    v338,
    v334,
    v329,
    v325,
    v321,
    v316,
    v312,
    v308,
    v299,
    v294,
    v287,
    v276,
    v263,
    v254,
    v247,
    v237,
    v227,
    v219,
    v211,
    v201,
    v193,
    v185,
    v178,
    v172,
    v166,
    v162,
    v157,
    v152,
    v149,
    v146,
    v142,
    v139,
    v136,
    v132,
    v129,
    v126,
    v122,
    v119,
    v117);
  sub_100092AB4(v435, v434, v433, v432, v431, v430, v429, v428, v416, v410, v404, v401, v398, v393, v389, v385, v380, v376, v372,
    v367,
    v363,
    v359,
    v354,
    v350,
    v346,
    v341,
    v337,
    v333,
    v328,
    v324,
    v320,
    v315,
    v311,
    v307,
    v298,
    v293,
    v286,
    v275,
    v262,
    v253,
    v246,
    v236,
    v226,
    v218,
    v210,
    v200,
    v192,
    v184,
    v177,
    v171,
    v165,
    v161,
    v156,
    v151,
    v148,
    v145,
    v141,
    v138,
    v135,
    v131,
    v128,
    v125,
    v121);
  sub_100092AB4(v443, v442, v441, v440, v439, v438, v437, v436, v419, v418, v415, v409, v403, v400, v397, v392, v388, v384, v379,
    v375,
    v371,
    v366,
    v362,
    v358,
    v353,
    v349,
    v345,
    v340,
    v336,
    v332,
    v327,
    v323,
    v319,
    v314,
    v310,
    v306,
    v297,
    v292,
    v285,
    v274,
    v24,
    v22,
    v245,
    v23,
    v21,
    v20,
    v18,
    v16,
    v13,
    v19,
    v17,
    v15,
    v12,
    v10,
    v7,
    v14,
    v11,
    v9,
    v6,
    v4,
    v3,
    v8,
    v5);
  sub_100092AB4(v77, v78, v81, v82, v83, v85, v86, v87, v80, v76, v73, v84, v79, v75, v72, v70, v67, v74, v71,
    v69,
    v66,
    v64,
    v61,
    v68,
    v65,
    v63,
    v60,
    v58,
    v55,
    v62,
    v59,
    v57,
    v54,
    v52,
    v49,
    v56,
    v53,
    v51,
    v48,
    v46,
    v43,
    v50,
    v47,
    v45,
    v42,
    v40,
    v37,
    v44,
    v41,
    v39,
    v36,
    v34,
    v31,
    v38,
    v35,
    v33,
    v30,
    v28,
    v26,
    v32,
    v29,
    v27,
    v25);
  sub_100092AB4(v264, v267, v272, v296, v301, v302, v303, v305, v271, v291, v289, v281, v270, v261, v257, v280, v269, v260, v256,
    v251,
    v242,
    v259,
    v255,
    v250,
    v241,
    v235,
    v230,
    v249,
    v240,
    v234,
    v229,
    v223,
    v216,
    v233,
    v228,
    v222,
    v215,
    v209,
    v204,
    v221,
    v214,
    v208,
    v203,
    v196,
    v189,
    v207,
    v202,
    v195,
    v188,
    v183,
    v179,
    v199,
    v191,
    v182,
    v176,
    v170,
    v93,
    v444,
    v92,
    v91,
    v90,
    v89,
    v88);
  sub_100092AB4(v266, v268, v273, v278, v279, v282, v284, v288, v244, v238, v231, v224, v217, v212, v205, v197, v190, v186, v180,
    v174,
    v169,
    v167,
    v163,
    v159,
    v155,
    v153,
    v150,
    v147,
    v144,
    v143,
    v140,
    v137,
    v134,
    v133,
    v130,
    v127,
    v124,
    v123,
    v120,
    v118,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v107,
    v106,
    v105,
    v104,
    v103,
    v102,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94);
  sub_100092AB4(v406, v407, v408, v411, v412, v413, v414, v417, v396, v395, v391, v387, v383, v382, v378, v374, v370, v369, v365,
    v361,
    v357,
    v356,
    v352,
    v348,
    v344,
    v343,
    v339,
    v335,
    v331,
    v330,
    v326,
    v322,
    v318,
    v317,
    v313,
    v309,
    v304,
    v300,
    v295,
    v290,
    v283,
    v277,
    v265,
    v258,
    v252,
    v248,
    v239,
    v232,
    v225,
    v220,
    v213,
    v206,
    v198,
    v194,
    v187,
    v181,
    v175,
    v173,
    v168,
    v164,
    v160,
    v158,
    v154);
  swift_bridgeObjectRelease(v243);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyINOWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyINOWorkflow.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10009F6B0 + 4 * byte_100520A5E[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_10009F6E4 + 4 * byte_100520A59[v4]))();
}

uint64_t sub_10009F6E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F6EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009F6F4);
  return result;
}

uint64_t sub_10009F700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009F708);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_10009F70C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyINOWorkflow.CodingKeys()
{
  return &type metadata for LegacyINOWorkflow.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LegacyWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyWorkflow.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_10009F80C + 4 * byte_100520A68[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_10009F840 + 4 * byte_100520A63[v4]))();
}

uint64_t sub_10009F840(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F848(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009F850);
  return result;
}

uint64_t sub_10009F85C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009F864);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_10009F868(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F870(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyWorkflow.CodingKeys()
{
  return &type metadata for LegacyWorkflow.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LegacySPWorkflow.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacySPWorkflow.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_10009F968 + 4 * byte_100520A72[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_10009F99C + 4 * byte_100520A6D[v4]))();
}

uint64_t sub_10009F99C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F9A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009F9ACLL);
  return result;
}

uint64_t sub_10009F9B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009F9C0);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_10009F9C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009F9CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacySPWorkflow.CodingKeys()
{
  return &type metadata for LegacySPWorkflow.CodingKeys;
}

ValueMetadata *type metadata accessor for LabelDetail.CodingKeys()
{
  return &type metadata for LabelDetail.CodingKeys;
}

ValueMetadata *type metadata accessor for BusinessChatDetail.CodingKeys()
{
  return &type metadata for BusinessChatDetail.CodingKeys;
}

ValueMetadata *type metadata accessor for IQRangeProperties.CodingKeys()
{
  return &type metadata for IQRangeProperties.CodingKeys;
}

ValueMetadata *type metadata accessor for AcceptedVerifiedClaim.CodingKeys()
{
  return &type metadata for AcceptedVerifiedClaim.CodingKeys;
}

ValueMetadata *type metadata accessor for ShareableAttribute.CodingKeys()
{
  return &type metadata for ShareableAttribute.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IdentityPassType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8coreidvd15UserConsentTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10009FB1C + 4 * byte_100520A7C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10009FB50 + 4 * byte_100520A77[v4]))();
}

uint64_t sub_10009FB50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009FB58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009FB60);
  return result;
}

uint64_t sub_10009FB6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009FB74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10009FB78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009FB80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Connectivity.CodingKeys()
{
  return &type metadata for Connectivity.CodingKeys;
}

uint64_t *sub_10009FB9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for EncryptedMessageEntity(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    v13 = swift_bridgeObjectRetain(v6);
    if (v12(v9, 1, v10, v13))
    {
      v14 = sub_100004828(&qword_100630258);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_10009FCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for EncryptedMessageEntity(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_10009FD28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for EncryptedMessageEntity(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1, v9, v12))
  {
    v13 = sub_100004828(&qword_100630258);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_10009FE04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for EncryptedMessageEntity(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100004828(&qword_100630258);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

_OWORD *sub_10009FF4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EncryptedMessageEntity(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100004828(&qword_100630258);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_1000A0008(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for EncryptedMessageEntity(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100004828(&qword_100630258);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_1000A0130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A013C);
}

uint64_t sub_1000A013C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004828(&qword_100630258);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000A01BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A01C8);
}

uint64_t sub_1000A01C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004828(&qword_100630258);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000A0240(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100520D08;
  v4[1] = &unk_100520D38;
  sub_10003B6E4(319, (unint64_t *)&unk_1006326F0, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for VerifiedClaimField.CodingKeys()
{
  return &type metadata for VerifiedClaimField.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UploadAsset.AssetType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputValidationURL.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000A03B8 + 4 * byte_100520A86[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000A03EC + 4 * byte_100520A81[v4]))();
}

uint64_t sub_1000A03EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A03F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A03FCLL);
  return result;
}

uint64_t sub_1000A0408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A0410);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000A0414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A041C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserInputValidationURL.CodingKeys()
{
  return &type metadata for UserInputValidationURL.CodingKeys;
}

ValueMetadata *type metadata accessor for ServerEndPoint.CodingKeys()
{
  return &type metadata for ServerEndPoint.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Label.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Label.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000A0524 + 4 * byte_100520A90[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000A0558 + 4 * byte_100520A8B[v4]))();
}

uint64_t sub_1000A0558(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0560(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A0568);
  return result;
}

uint64_t sub_1000A0574(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A057CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000A0580(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0588(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Label.CodingKeys()
{
  return &type metadata for Label.CodingKeys;
}

ValueMetadata *type metadata accessor for DataNodeProofInfo.CodingKeys()
{
  return &type metadata for DataNodeProofInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CameraImage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraImage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000A0690 + 4 * byte_100520A9A[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000A06C4 + 4 * byte_100520A95[v4]))();
}

uint64_t sub_1000A06C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A06CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A06D4);
  return result;
}

uint64_t sub_1000A06E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A06E8);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000A06EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A06F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraImage.CodingKeys()
{
  return &type metadata for CameraImage.CodingKeys;
}

ValueMetadata *type metadata accessor for DocumentConfig.CodingKeys()
{
  return &type metadata for DocumentConfig.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IQCriteria.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDE)
    goto LABEL_17;
  if (a2 + 34 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 34) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 34;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 34;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 34;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x23;
  v8 = v6 - 35;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IQCriteria.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 34 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 34) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDD)
    return ((uint64_t (*)(void))((char *)&loc_1000A07FC + 4 * byte_100520AA4[v4]))();
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_1000A0830 + 4 * byte_100520A9F[v4]))();
}

uint64_t sub_1000A0830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A0840);
  return result;
}

uint64_t sub_1000A084C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A0854);
  *(_BYTE *)result = a2 + 34;
  return result;
}

uint64_t sub_1000A0858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A0860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQCriteria.CodingKeys()
{
  return &type metadata for IQCriteria.CodingKeys;
}

uint64_t destroy for AlternativeLabel(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t assignWithCopy for DataSharingArtifact(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for DataSharingArtifact(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s8coreidvd17DataNodeProofInfoVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000A094C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlternativeLabel()
{
  return &type metadata for AlternativeLabel;
}

ValueMetadata *type metadata accessor for LabelCondition()
{
  return &type metadata for LabelCondition;
}

ValueMetadata *type metadata accessor for ImageDimension()
{
  return &type metadata for ImageDimension;
}

uint64_t destroy for ImageFormat(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ImageFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for ImageFormat(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for UploadedData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for ImageFormat(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFormat(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFormat()
{
  return &type metadata for ImageFormat;
}

_QWORD *initializeWithCopy for Claim(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for Claim(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for Claim(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Claim(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Claim(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQComplexProperties()
{
  return &type metadata for IQComplexProperties;
}

__n128 initializeBufferWithCopyOfBuffer for IQBoolProperties(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for IQBoolProperties(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IQBoolProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQBoolProperties()
{
  return &type metadata for IQBoolProperties;
}

unint64_t sub_1000A0E98()
{
  unint64_t result;

  result = qword_100632728;
  if (!qword_100632728)
  {
    result = swift_getWitnessTable(&unk_100521B3C, &type metadata for LabelCondition);
    atomic_store(result, (unint64_t *)&qword_100632728);
  }
  return result;
}

unint64_t sub_1000A0EE0()
{
  unint64_t result;

  result = qword_100632730;
  if (!qword_100632730)
  {
    result = swift_getWitnessTable(&unk_100521BF4, &type metadata for IQCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632730);
  }
  return result;
}

unint64_t sub_1000A0F28()
{
  unint64_t result;

  result = qword_100632738;
  if (!qword_100632738)
  {
    result = swift_getWitnessTable(&unk_100521CAC, &type metadata for DocumentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632738);
  }
  return result;
}

unint64_t sub_1000A0F70()
{
  unint64_t result;

  result = qword_100632740;
  if (!qword_100632740)
  {
    result = swift_getWitnessTable(&unk_100521D64, &type metadata for CameraImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632740);
  }
  return result;
}

unint64_t sub_1000A0FB8()
{
  unint64_t result;

  result = qword_100632748;
  if (!qword_100632748)
  {
    result = swift_getWitnessTable(&unk_100521E1C, &type metadata for DataNodeProofInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632748);
  }
  return result;
}

unint64_t sub_1000A1000()
{
  unint64_t result;

  result = qword_100632750;
  if (!qword_100632750)
  {
    result = swift_getWitnessTable(&unk_100521ED4, &type metadata for Label.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632750);
  }
  return result;
}

unint64_t sub_1000A1048()
{
  unint64_t result;

  result = qword_100632758;
  if (!qword_100632758)
  {
    result = swift_getWitnessTable(&unk_100521F8C, &type metadata for ServerEndPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632758);
  }
  return result;
}

unint64_t sub_1000A1090()
{
  unint64_t result;

  result = qword_100632760;
  if (!qword_100632760)
  {
    result = swift_getWitnessTable(&unk_100522044, &type metadata for UserInputValidationURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632760);
  }
  return result;
}

unint64_t sub_1000A10D8()
{
  unint64_t result;

  result = qword_100632768;
  if (!qword_100632768)
  {
    result = swift_getWitnessTable(&unk_100522134, &type metadata for VerifiedClaimField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632768);
  }
  return result;
}

unint64_t sub_1000A1120()
{
  unint64_t result;

  result = qword_100632770;
  if (!qword_100632770)
  {
    result = swift_getWitnessTable(&unk_100522214, &type metadata for Connectivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632770);
  }
  return result;
}

unint64_t sub_1000A1168()
{
  unint64_t result;

  result = qword_100632778;
  if (!qword_100632778)
  {
    result = swift_getWitnessTable(&unk_1005222CC, &type metadata for ShareableAttribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632778);
  }
  return result;
}

unint64_t sub_1000A11B0()
{
  unint64_t result;

  result = qword_100632780;
  if (!qword_100632780)
  {
    result = swift_getWitnessTable(&unk_100522384, &type metadata for AcceptedVerifiedClaim.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632780);
  }
  return result;
}

unint64_t sub_1000A11F8()
{
  unint64_t result;

  result = qword_100632788;
  if (!qword_100632788)
  {
    result = swift_getWitnessTable(&unk_10052243C, &type metadata for IQRangeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632788);
  }
  return result;
}

unint64_t sub_1000A1240()
{
  unint64_t result;

  result = qword_100632790;
  if (!qword_100632790)
  {
    result = swift_getWitnessTable(&unk_1005224F4, &type metadata for BusinessChatDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632790);
  }
  return result;
}

unint64_t sub_1000A1288()
{
  unint64_t result;

  result = qword_100632798;
  if (!qword_100632798)
  {
    result = swift_getWitnessTable(&unk_1005225AC, &type metadata for LabelDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632798);
  }
  return result;
}

unint64_t sub_1000A12D0()
{
  unint64_t result;

  result = qword_1006327A0;
  if (!qword_1006327A0)
  {
    result = swift_getWitnessTable(&unk_10052269C, &type metadata for LegacySPWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327A0);
  }
  return result;
}

unint64_t sub_1000A1318()
{
  unint64_t result;

  result = qword_1006327A8;
  if (!qword_1006327A8)
  {
    result = swift_getWitnessTable(&unk_10052278C, &type metadata for LegacyWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327A8);
  }
  return result;
}

unint64_t sub_1000A1360()
{
  unint64_t result;

  result = qword_1006327B0;
  if (!qword_1006327B0)
  {
    result = swift_getWitnessTable(&unk_10052287C, &type metadata for LegacyINOWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327B0);
  }
  return result;
}

unint64_t sub_1000A13A8()
{
  unint64_t result;

  result = qword_1006327B8;
  if (!qword_1006327B8)
  {
    result = swift_getWitnessTable(&unk_1005227B4, &type metadata for LegacyINOWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327B8);
  }
  return result;
}

unint64_t sub_1000A13F0()
{
  unint64_t result;

  result = qword_1006327C0;
  if (!qword_1006327C0)
  {
    result = swift_getWitnessTable(&unk_1005227DC, &type metadata for LegacyINOWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327C0);
  }
  return result;
}

unint64_t sub_1000A1438()
{
  unint64_t result;

  result = qword_1006327C8;
  if (!qword_1006327C8)
  {
    result = swift_getWitnessTable(&unk_1005226C4, &type metadata for LegacyWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327C8);
  }
  return result;
}

unint64_t sub_1000A1480()
{
  unint64_t result;

  result = qword_1006327D0;
  if (!qword_1006327D0)
  {
    result = swift_getWitnessTable(&unk_1005226EC, &type metadata for LegacyWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327D0);
  }
  return result;
}

unint64_t sub_1000A14C8()
{
  unint64_t result;

  result = qword_1006327D8;
  if (!qword_1006327D8)
  {
    result = swift_getWitnessTable(&unk_1005225D4, &type metadata for LegacySPWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327D8);
  }
  return result;
}

unint64_t sub_1000A1510()
{
  unint64_t result;

  result = qword_1006327E0;
  if (!qword_1006327E0)
  {
    result = swift_getWitnessTable(&unk_1005225FC, &type metadata for LegacySPWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327E0);
  }
  return result;
}

unint64_t sub_1000A1558()
{
  unint64_t result;

  result = qword_1006327E8;
  if (!qword_1006327E8)
  {
    result = swift_getWitnessTable(&unk_10052251C, &type metadata for LabelDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327E8);
  }
  return result;
}

unint64_t sub_1000A15A0()
{
  unint64_t result;

  result = qword_1006327F0;
  if (!qword_1006327F0)
  {
    result = swift_getWitnessTable(&unk_100522544, &type metadata for LabelDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327F0);
  }
  return result;
}

unint64_t sub_1000A15E8()
{
  unint64_t result;

  result = qword_1006327F8;
  if (!qword_1006327F8)
  {
    result = swift_getWitnessTable(&unk_100522464, &type metadata for BusinessChatDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006327F8);
  }
  return result;
}

unint64_t sub_1000A1630()
{
  unint64_t result;

  result = qword_100632800;
  if (!qword_100632800)
  {
    result = swift_getWitnessTable(&unk_10052248C, &type metadata for BusinessChatDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632800);
  }
  return result;
}

unint64_t sub_1000A1678()
{
  unint64_t result;

  result = qword_100632808;
  if (!qword_100632808)
  {
    result = swift_getWitnessTable(&unk_1005223AC, &type metadata for IQRangeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632808);
  }
  return result;
}

unint64_t sub_1000A16C0()
{
  unint64_t result;

  result = qword_100632810;
  if (!qword_100632810)
  {
    result = swift_getWitnessTable(&unk_1005223D4, &type metadata for IQRangeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632810);
  }
  return result;
}

unint64_t sub_1000A1708()
{
  unint64_t result;

  result = qword_100632818;
  if (!qword_100632818)
  {
    result = swift_getWitnessTable(&unk_1005222F4, &type metadata for AcceptedVerifiedClaim.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632818);
  }
  return result;
}

unint64_t sub_1000A1750()
{
  unint64_t result;

  result = qword_100632820;
  if (!qword_100632820)
  {
    result = swift_getWitnessTable(&unk_10052231C, &type metadata for AcceptedVerifiedClaim.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632820);
  }
  return result;
}

unint64_t sub_1000A1798()
{
  unint64_t result;

  result = qword_100632828;
  if (!qword_100632828)
  {
    result = swift_getWitnessTable(&unk_10052223C, &type metadata for ShareableAttribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632828);
  }
  return result;
}

unint64_t sub_1000A17E0()
{
  unint64_t result;

  result = qword_100632830;
  if (!qword_100632830)
  {
    result = swift_getWitnessTable(&unk_100522264, &type metadata for ShareableAttribute.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632830);
  }
  return result;
}

unint64_t sub_1000A1828()
{
  unint64_t result;

  result = qword_100632838;
  if (!qword_100632838)
  {
    result = swift_getWitnessTable(&unk_100522184, &type metadata for Connectivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632838);
  }
  return result;
}

unint64_t sub_1000A1870()
{
  unint64_t result;

  result = qword_100632840;
  if (!qword_100632840)
  {
    result = swift_getWitnessTable(&unk_1005221AC, &type metadata for Connectivity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632840);
  }
  return result;
}

unint64_t sub_1000A18B8()
{
  unint64_t result;

  result = qword_100632848;
  if (!qword_100632848)
  {
    result = swift_getWitnessTable(&unk_10052206C, &type metadata for VerifiedClaimField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632848);
  }
  return result;
}

unint64_t sub_1000A1900()
{
  unint64_t result;

  result = qword_100632850;
  if (!qword_100632850)
  {
    result = swift_getWitnessTable(&unk_100522094, &type metadata for VerifiedClaimField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632850);
  }
  return result;
}

unint64_t sub_1000A1948()
{
  unint64_t result;

  result = qword_100632858;
  if (!qword_100632858)
  {
    result = swift_getWitnessTable(&unk_100521FB4, &type metadata for UserInputValidationURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632858);
  }
  return result;
}

unint64_t sub_1000A1990()
{
  unint64_t result;

  result = qword_100632860;
  if (!qword_100632860)
  {
    result = swift_getWitnessTable(&unk_100521FDC, &type metadata for UserInputValidationURL.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632860);
  }
  return result;
}

unint64_t sub_1000A19D8()
{
  unint64_t result;

  result = qword_100632868;
  if (!qword_100632868)
  {
    result = swift_getWitnessTable(&unk_100521EFC, &type metadata for ServerEndPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632868);
  }
  return result;
}

unint64_t sub_1000A1A20()
{
  unint64_t result;

  result = qword_100632870;
  if (!qword_100632870)
  {
    result = swift_getWitnessTable(&unk_100521F24, &type metadata for ServerEndPoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632870);
  }
  return result;
}

unint64_t sub_1000A1A68()
{
  unint64_t result;

  result = qword_100632878;
  if (!qword_100632878)
  {
    result = swift_getWitnessTable(&unk_100521E44, &type metadata for Label.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632878);
  }
  return result;
}

unint64_t sub_1000A1AB0()
{
  unint64_t result;

  result = qword_100632880;
  if (!qword_100632880)
  {
    result = swift_getWitnessTable(&unk_100521E6C, &type metadata for Label.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632880);
  }
  return result;
}

unint64_t sub_1000A1AF8()
{
  unint64_t result;

  result = qword_100632888;
  if (!qword_100632888)
  {
    result = swift_getWitnessTable(&unk_100521D8C, &type metadata for DataNodeProofInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632888);
  }
  return result;
}

unint64_t sub_1000A1B40()
{
  unint64_t result;

  result = qword_100632890;
  if (!qword_100632890)
  {
    result = swift_getWitnessTable(&unk_100521DB4, &type metadata for DataNodeProofInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632890);
  }
  return result;
}

unint64_t sub_1000A1B88()
{
  unint64_t result;

  result = qword_100632898;
  if (!qword_100632898)
  {
    result = swift_getWitnessTable(&unk_100521CD4, &type metadata for CameraImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632898);
  }
  return result;
}

unint64_t sub_1000A1BD0()
{
  unint64_t result;

  result = qword_1006328A0;
  if (!qword_1006328A0)
  {
    result = swift_getWitnessTable(&unk_100521CFC, &type metadata for CameraImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328A0);
  }
  return result;
}

unint64_t sub_1000A1C18()
{
  unint64_t result;

  result = qword_1006328A8;
  if (!qword_1006328A8)
  {
    result = swift_getWitnessTable(&unk_100521C1C, &type metadata for DocumentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328A8);
  }
  return result;
}

unint64_t sub_1000A1C60()
{
  unint64_t result;

  result = qword_1006328B0;
  if (!qword_1006328B0)
  {
    result = swift_getWitnessTable(&unk_100521C44, &type metadata for DocumentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328B0);
  }
  return result;
}

unint64_t sub_1000A1CA8()
{
  unint64_t result;

  result = qword_1006328B8;
  if (!qword_1006328B8)
  {
    result = swift_getWitnessTable(&unk_100521B64, &type metadata for IQCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328B8);
  }
  return result;
}

unint64_t sub_1000A1CF0()
{
  unint64_t result;

  result = qword_1006328C0;
  if (!qword_1006328C0)
  {
    result = swift_getWitnessTable(&unk_100521B8C, &type metadata for IQCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328C0);
  }
  return result;
}

unint64_t sub_1000A1D34()
{
  unint64_t result;

  result = qword_1006328D0;
  if (!qword_1006328D0)
  {
    result = swift_getWitnessTable(&unk_100523644, &type metadata for IQBoolProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328D0);
  }
  return result;
}

unint64_t sub_1000A1D78()
{
  unint64_t result;

  result = qword_1006328E0;
  if (!qword_1006328E0)
  {
    result = swift_getWitnessTable(&unk_1005235F4, &type metadata for IQComplexProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006328E0);
  }
  return result;
}

unint64_t sub_1000A1DBC()
{
  unint64_t result;

  result = qword_1006328F8;
  if (!qword_1006328F8)
  {
    result = swift_getWitnessTable(&unk_1005235CC, &type metadata for IQSignalProperties);
    atomic_store(result, (unint64_t *)&qword_1006328F8);
  }
  return result;
}

unint64_t sub_1000A1E00()
{
  unint64_t result;

  result = qword_100632908;
  if (!qword_100632908)
  {
    result = swift_getWitnessTable(&unk_10052357C, &type metadata for ImageFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632908);
  }
  return result;
}

unint64_t sub_1000A1E44()
{
  unint64_t result;

  result = qword_100632918;
  if (!qword_100632918)
  {
    result = swift_getWitnessTable(&unk_10052352C, &type metadata for ImageDimension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632918);
  }
  return result;
}

unint64_t sub_1000A1E88()
{
  unint64_t result;

  result = qword_100632920;
  if (!qword_100632920)
  {
    result = swift_getWitnessTable(&unk_100521AC4, &type metadata for LabelCondition);
    atomic_store(result, (unint64_t *)&qword_100632920);
  }
  return result;
}

unint64_t sub_1000A1ECC()
{
  unint64_t result;

  result = qword_100632930;
  if (!qword_100632930)
  {
    result = swift_getWitnessTable(&unk_1005234DC, &type metadata for AlternativeLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632930);
  }
  return result;
}

unint64_t sub_1000A1F10()
{
  unint64_t result;

  result = qword_100632940;
  if (!qword_100632940)
  {
    result = swift_getWitnessTable(&unk_10052348C, &type metadata for EncryptionCertificateInStringFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632940);
  }
  return result;
}

uint64_t sub_1000A1F54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004828(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A1F98(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100013E24(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A1FFC()
{
  unint64_t result;

  result = qword_100632980;
  if (!qword_100632980)
  {
    result = swift_getWitnessTable(&unk_100523464, &type metadata for IQSignalProperties);
    atomic_store(result, (unint64_t *)&qword_100632980);
  }
  return result;
}

uint64_t sub_1000A2040(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100600520, a1, a2, &unk_10062F670);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1A)
    return 26;
  else
    return v3;
}

ValueMetadata *type metadata accessor for EncryptionCertificateInStringFormat.CodingKeys()
{
  return &type metadata for EncryptionCertificateInStringFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for AlternativeLabel.CodingKeys()
{
  return &type metadata for AlternativeLabel.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AssessDuringProofingODNator.ODNatorState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8coreidvd12WorkflowTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A218C + 4 * byte_100520AAE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A21C0 + 4 * byte_100520AA9[v4]))();
}

uint64_t sub_1000A21C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A21C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A21D0);
  return result;
}

uint64_t sub_1000A21DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A21E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A21E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A21F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageDimension.CodingKeys()
{
  return &type metadata for ImageDimension.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ImageFormat.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFormat.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000A22E8 + 4 * byte_100520AB8[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000A231C + 4 * byte_100520AB3[v4]))();
}

uint64_t sub_1000A231C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A232CLL);
  return result;
}

uint64_t sub_1000A2338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A2340);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000A2344(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A234C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageFormat.CodingKeys()
{
  return &type metadata for ImageFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for IQComplexProperties.CodingKeys()
{
  return &type metadata for IQComplexProperties.CodingKeys;
}

ValueMetadata *type metadata accessor for IQBoolProperties.CodingKeys()
{
  return &type metadata for IQBoolProperties.CodingKeys;
}

uint64_t destroy for DigitalPresentmentSessionManager.RequestedElement(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IQSignalProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQSignalProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IQSignalProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQSignalProperties()
{
  return &type metadata for IQSignalProperties;
}

unint64_t sub_1000A2568()
{
  unint64_t result;

  result = qword_100632998;
  if (!qword_100632998)
  {
    result = swift_getWitnessTable(&unk_1005230A4, &type metadata for IQBoolProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632998);
  }
  return result;
}

unint64_t sub_1000A25B0()
{
  unint64_t result;

  result = qword_1006329A0;
  if (!qword_1006329A0)
  {
    result = swift_getWitnessTable(&unk_10052315C, &type metadata for IQComplexProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329A0);
  }
  return result;
}

unint64_t sub_1000A25F8()
{
  unint64_t result;

  result = qword_1006329A8;
  if (!qword_1006329A8)
  {
    result = swift_getWitnessTable(&unk_100523214, &type metadata for ImageFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329A8);
  }
  return result;
}

unint64_t sub_1000A2640()
{
  unint64_t result;

  result = qword_1006329B0;
  if (!qword_1006329B0)
  {
    result = swift_getWitnessTable(&unk_1005232CC, &type metadata for ImageDimension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329B0);
  }
  return result;
}

unint64_t sub_1000A2688()
{
  unint64_t result;

  result = qword_1006329B8;
  if (!qword_1006329B8)
  {
    result = swift_getWitnessTable(&unk_100523384, &type metadata for AlternativeLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329B8);
  }
  return result;
}

unint64_t sub_1000A26D0()
{
  unint64_t result;

  result = qword_1006329C0;
  if (!qword_1006329C0)
  {
    result = swift_getWitnessTable(&unk_10052343C, &type metadata for EncryptionCertificateInStringFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329C0);
  }
  return result;
}

unint64_t sub_1000A2718()
{
  unint64_t result;

  result = qword_1006329C8;
  if (!qword_1006329C8)
  {
    result = swift_getWitnessTable(&unk_1005233AC, &type metadata for EncryptionCertificateInStringFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329C8);
  }
  return result;
}

unint64_t sub_1000A2760()
{
  unint64_t result;

  result = qword_1006329D0;
  if (!qword_1006329D0)
  {
    result = swift_getWitnessTable(&unk_1005233D4, &type metadata for EncryptionCertificateInStringFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329D0);
  }
  return result;
}

unint64_t sub_1000A27A8()
{
  unint64_t result;

  result = qword_1006329D8;
  if (!qword_1006329D8)
  {
    result = swift_getWitnessTable(&unk_1005232F4, &type metadata for AlternativeLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329D8);
  }
  return result;
}

unint64_t sub_1000A27F0()
{
  unint64_t result;

  result = qword_1006329E0;
  if (!qword_1006329E0)
  {
    result = swift_getWitnessTable(&unk_10052331C, &type metadata for AlternativeLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329E0);
  }
  return result;
}

unint64_t sub_1000A2838()
{
  unint64_t result;

  result = qword_1006329E8;
  if (!qword_1006329E8)
  {
    result = swift_getWitnessTable(&unk_10052323C, &type metadata for ImageDimension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329E8);
  }
  return result;
}

unint64_t sub_1000A2880()
{
  unint64_t result;

  result = qword_1006329F0;
  if (!qword_1006329F0)
  {
    result = swift_getWitnessTable(&unk_100523264, &type metadata for ImageDimension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329F0);
  }
  return result;
}

unint64_t sub_1000A28C8()
{
  unint64_t result;

  result = qword_1006329F8;
  if (!qword_1006329F8)
  {
    result = swift_getWitnessTable(&unk_100523184, &type metadata for ImageFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006329F8);
  }
  return result;
}

unint64_t sub_1000A2910()
{
  unint64_t result;

  result = qword_100632A00;
  if (!qword_100632A00)
  {
    result = swift_getWitnessTable(&unk_1005231AC, &type metadata for ImageFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A00);
  }
  return result;
}

unint64_t sub_1000A2958()
{
  unint64_t result;

  result = qword_100632A08;
  if (!qword_100632A08)
  {
    result = swift_getWitnessTable(&unk_1005230CC, &type metadata for IQComplexProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A08);
  }
  return result;
}

unint64_t sub_1000A29A0()
{
  unint64_t result;

  result = qword_100632A10;
  if (!qword_100632A10)
  {
    result = swift_getWitnessTable(&unk_1005230F4, &type metadata for IQComplexProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A10);
  }
  return result;
}

unint64_t sub_1000A29E8()
{
  unint64_t result;

  result = qword_100632A18;
  if (!qword_100632A18)
  {
    result = swift_getWitnessTable(&unk_100523014, &type metadata for IQBoolProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A18);
  }
  return result;
}

unint64_t sub_1000A2A30()
{
  unint64_t result;

  result = qword_100632A20;
  if (!qword_100632A20)
  {
    result = swift_getWitnessTable(&unk_10052303C, &type metadata for IQBoolProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A20);
  }
  return result;
}

unint64_t sub_1000A2A74()
{
  unint64_t result;

  result = qword_100632A30;
  if (!qword_100632A30)
  {
    result = swift_getWitnessTable(&unk_10052374C, &type metadata for IQSignalProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A30);
  }
  return result;
}

uint64_t _s8coreidvd11LabelDetailV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000A2B04 + 4 * byte_100520AC2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A2B38 + 4 * byte_100520ABD[v4]))();
}

uint64_t sub_1000A2B38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2B40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A2B48);
  return result;
}

uint64_t sub_1000A2B54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A2B5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000A2B60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2B68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQSignalProperties.CodingKeys()
{
  return &type metadata for IQSignalProperties.CodingKeys;
}

unint64_t sub_1000A2B88()
{
  unint64_t result;

  result = qword_100632A40;
  if (!qword_100632A40)
  {
    result = swift_getWitnessTable(&unk_100523724, &type metadata for IQSignalProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A40);
  }
  return result;
}

unint64_t sub_1000A2BD0()
{
  unint64_t result;

  result = qword_100632A48;
  if (!qword_100632A48)
  {
    result = swift_getWitnessTable(&unk_100523694, &type metadata for IQSignalProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A48);
  }
  return result;
}

unint64_t sub_1000A2C18()
{
  unint64_t result;

  result = qword_100632A50;
  if (!qword_100632A50)
  {
    result = swift_getWitnessTable(&unk_1005236BC, &type metadata for IQSignalProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100632A50);
  }
  return result;
}

ValueMetadata *_s43RandomizedBackgroundActivityDeletionUtilityOMa()
{
  return &_s43RandomizedBackgroundActivityDeletionUtilityON;
}

void sub_1000A2CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;

  v3 = type metadata accessor for StoredRandomizedBackgroundActivity(0);
  v4 = (void *)static StoredRandomizedBackgroundActivity.fetchRequest()();
  v5 = *(void **)(a1 + 16);
  v6 = NSManagedObjectContext.fetch<A>(_:)(v4, v3);

  if (!v1)
  {
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v11 = v6;
      else
        v11 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v6);
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
          else
            v9 = *(id *)(v6 + 8 * i + 32);
          v10 = v9;
          objc_msgSend(v5, "deleteObject:", v9);

        }
      }
    }
    swift_bridgeObjectRelease_n(v6, 2);
    sub_1000D6288();
  }
}

uint64_t sub_1000A2DDC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_100632A68 + dword_100632A68);
  v1 = (_QWORD *)swift_task_alloc(unk_100632A6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return v3();
}

uint64_t sub_1000A2E34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  return swift_task_switch(sub_1000A2EA0, 0, 0);
}

uint64_t sub_1000A2EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RandomizedBackgroundActivityDeletionUtility attempting to delete data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v9, 24, 7);
  sub_1000D6044();
  v11 = v10;
  swift_retain(v10);
  sub_1000D6570((uint64_t)sub_1000A300C, v11);
  swift_release_n(v11, 2);
  v12 = *(_QWORD *)(v1 + 32);
  swift_task_dealloc(*(_QWORD *)(v1 + 40));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000A300C()
{
  uint64_t v0;

  sub_1000A2CA4(v0);
}

uint64_t sub_1000A3024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[32] = a3;
  v4[33] = a4;
  v4[30] = a1;
  v4[31] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[34] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[35] = v6;
  v4[36] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A3088, 0, 0);
}

uint64_t sub_1000A3088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  Class isa;
  id v5;
  _QWORD *v6;
  Class v7;
  NSString v8;
  uint64_t v9;
  _QWORD *v10;
  Class v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[32];
  v1 = v0[33];
  v3 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  v5 = objc_msgSend(v3, "initWithPartitions:", isa);
  v0[37] = v5;

  if (v2)
  {
    v6 = v0 + 10;
    v7 = Array._bridgeToObjectiveC()().super.isa;
    v0[38] = v7;
    v8 = String._bridgeToObjectiveC()();
    v0[39] = v8;
    v0[15] = v0 + 29;
    v0[10] = v0;
    v0[11] = sub_1000A3240;
    v9 = swift_continuation_init(v0 + 10, 1);
    v0[23] = _NSConcreteStackBlock;
    v10 = v0 + 23;
    v10[1] = 0x40000000;
    v10[2] = sub_1000A35F0;
    v10[3] = &unk_100607088;
    v10[4] = v9;
    objc_msgSend(v5, "credentialIdentifiersInPartitions:docType:completion:", v7, v8, v10);
  }
  else
  {
    v6 = v0 + 2;
    v11 = Array._bridgeToObjectiveC()().super.isa;
    v0[41] = v11;
    v0[7] = v0 + 28;
    v0[2] = v0;
    v0[3] = sub_1000A32F8;
    v12 = swift_continuation_init(v0 + 2, 1);
    v0[18] = _NSConcreteStackBlock;
    v13 = v0 + 18;
    v13[1] = 0x40000000;
    v13[2] = sub_1000A35F0;
    v13[3] = &unk_100607070;
    v13[4] = v12;
    objc_msgSend(v5, "credentialIdentifiersInPartitions:completion:", v11, v13);
  }
  return swift_continuation_await(v6);
}

uint64_t sub_1000A3240()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 320) = v1;
  if (v1)
    v2 = sub_1000A33A4;
  else
    v2 = sub_1000A32A0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A32A0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 304);
  v1 = *(void **)(v0 + 312);

  v3 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000A32F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 336) = v1;
  if (v1)
    v2 = sub_1000A34CC;
  else
    v2 = sub_1000A3358;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A3358()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 328);

  v2 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000A33A4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(void **)(v1 + 312);
  v4 = *(void **)(v1 + 296);
  v3 = *(void **)(v1 + 304);
  swift_willThrow(a1);

  v5 = *(_QWORD *)(v1 + 320);
  v6 = *(_QWORD *)(v1 + 288);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 272));
  swift_errorRetain(v5);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100007F30();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v6, 0, v7, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000022, 0x8000000100543470, 52);
  swift_willThrow(v10);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A34CC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(void **)(v1 + 328);
  v3 = *(void **)(v1 + 296);
  swift_willThrow(a1);

  v4 = *(_QWORD *)(v1 + 336);
  v5 = *(_QWORD *)(v1 + 288);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 272));
  swift_errorRetain(v4);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100007F30();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v5, 0, v6, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000022, 0x8000000100543470, 52);
  swift_willThrow(v9);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A35F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_100004828(&qword_1006368D0);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v11, &protocol witness table for String);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000A369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[20] = a5;
  v6[21] = a6;
  v6[18] = a3;
  v6[19] = a4;
  v6[16] = a1;
  v6[17] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[23] = v8;
  v6[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A3704, 0, 0);
}

uint64_t sub_1000A3704()
{
  NSArray *v0;
  Class v1;
  Class isa;
  id v3;
  Class v4;
  objc_class *v5;
  NSArray v6;
  objc_class *v7;
  objc_class *v8;
  NSArray *v9;
  uint64_t v10;
  NSArray *v11;

  isa = v0[20].super.isa;
  v1 = v0[21].super.isa;
  v3 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v1);
  v4 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  v5 = (objc_class *)objc_msgSend(v3, "initWithPartitions:", v4);
  v0[25].super.isa = v5;

  v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
  v0[26].super.isa = v6.super.isa;
  v7 = (objc_class *)String._bridgeToObjectiveC()();
  v0[27].super.isa = v7;
  if (isa)
    v8 = (objc_class *)String._bridgeToObjectiveC()();
  else
    v8 = 0;
  v9 = v0 + 2;
  v0[28].super.isa = v8;
  v0[7].super.isa = (Class)&v0[15];
  v0[2].super.isa = (Class)v0;
  v0[3].super.isa = (Class)sub_1000A3864;
  v10 = swift_continuation_init(&v0[2], 1);
  v0[10].super.isa = (Class)_NSConcreteStackBlock;
  v11 = v0 + 10;
  v11[1].super.isa = (Class)0x40000000;
  v11[2].super.isa = (Class)sub_1000A35F0;
  v11[3].super.isa = (Class)&unk_1006070B8;
  v11[4].super.isa = (Class)v10;
  -[objc_class credentialIdentifiersInPartitions:docType:region:completion:](v5, "credentialIdentifiersInPartitions:docType:region:completion:", v6.super.isa, v7, v8, v11);
  return swift_continuation_await(v9);
}

uint64_t sub_1000A3864()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 232) = v1;
  if (v1)
    v2 = sub_1000A392C;
  else
    v2 = sub_1000A38C4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A38C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)(v0 + 216);
  v1 = *(void **)(v0 + 224);
  v3 = *(void **)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);

  v5 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1000A392C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *(void **)(v1 + 224);
  v2 = *(_QWORD *)(v1 + 232);
  v5 = *(void **)(v1 + 208);
  v4 = *(void **)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(void **)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 176);
  v9 = *(_QWORD *)(v1 + 184);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v2);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100007F30();
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v6, 0, v10, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000029, 0x80000001005434F0, 62);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A3A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[21] = v6;
  v4[22] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A3AD0, 0, 0);
}

uint64_t sub_1000A3AD0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  Class isa;
  id v5;
  Class v6;
  NSString v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithPartitions:", isa);
  v0[23] = v5;

  v6 = Array._bridgeToObjectiveC()().super.isa;
  v0[24] = v6;
  v7 = String._bridgeToObjectiveC()();
  v0[25] = v7;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000A3C0C;
  v8 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v9 = v0 + 10;
  v9[1] = 0x40000000;
  v9[2] = sub_1000A3E00;
  v9[3] = &unk_1006070A0;
  v9[4] = v8;
  objc_msgSend(v5, "activeRegionsInPartitions:docType:completion:", v6, v7, v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1000A3C0C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_1000A3CC4;
  else
    v2 = sub_1000A3C6C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A3C6C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(v0 + 192);
  v1 = *(void **)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);

  v4 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000A3CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(void **)(v1 + 200);
  v2 = *(_QWORD *)(v1 + 208);
  v5 = *(void **)(v1 + 184);
  v4 = *(void **)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 168);
  v6 = *(_QWORD *)(v1 + 176);
  v8 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v2);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100007F30();
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v6, 0, v9, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000026, 0x80000001005434C0, 72);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A3E00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Set._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, &protocol witness table for String);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000A3E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[22] = v6;
  v4[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A3F00, 0, 0);
}

uint64_t sub_1000A3F00()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Class isa;
  id v6;
  NSString v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = v0[20];
  v4 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithPartitions:", isa);
  v0[24] = v6;

  v7 = String._bridgeToObjectiveC()();
  v0[25] = v7;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000A401C;
  v8 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v9 = v0 + 10;
  v9[1] = 0x40000000;
  v9[2] = sub_1003A4D14;
  v9[3] = &unk_100607058;
  v9[4] = v8;
  objc_msgSend(v6, "createCredentialInPartition:options:completion:", v7, v2, v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1000A401C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_1000A40D4;
  else
    v2 = sub_1000A407C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A407C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 184);

  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_1000A40D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(void **)(v1 + 200);
  v2 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 184);
  v5 = *(void **)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 168);
  v7 = *(_QWORD *)(v1 + 176);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v2);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100007F30();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v4, 0, v8, 0xD000000000000055, 0x8000000100541FC0, 0xD00000000000001DLL, 0x800000010053F990, 81);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A4200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A4264, 0, 0);
}

uint64_t sub_1000A4264()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  Class isa;
  id v5;
  NSString v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0 + 2;
  v2 = v0[18];
  v3 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v2);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithPartitions:", isa);
  v0[22] = v5;

  v6 = String._bridgeToObjectiveC()();
  v0[23] = v6;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000A437C;
  v7 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_1000180F8;
  v8[3] = &unk_100607040;
  v8[4] = v7;
  objc_msgSend(v5, "generatePresentmentKeyForCredential:completion:", v6, v8);
  return swift_continuation_await(v1);
}

uint64_t sub_1000A437C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 192) = v1;
  if (v1)
    v2 = sub_1000A4430;
  else
    v2 = sub_1000A43DC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A43DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);

  v3 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000A4430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(void **)(v1 + 184);
  v2 = *(_QWORD *)(v1 + 192);
  v4 = *(_QWORD *)(v1 + 168);
  v5 = *(void **)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v2);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100007F30();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v4, 0, v8, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000026, 0x8000000100543410, 90);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000A455C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[22] = v8;
  v6[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A45C4, 0, 0);
}

uint64_t sub_1000A45C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Class isa;
  id v6;
  NSString v7;
  Class v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = v0[20];
  v4 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithPartitions:", isa);
  v0[24] = v6;

  v7 = String._bridgeToObjectiveC()();
  v0[25] = v7;
  v8 = Data._bridgeToObjectiveC()().super.isa;
  v0[26] = v8;
  v0[2] = v0;
  v0[3] = sub_1000A46FC;
  v9 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v10 = v0 + 10;
  v10[1] = 0x40000000;
  v10[2] = sub_100454F88;
  v10[3] = &unk_100607028;
  v10[4] = v9;
  objc_msgSend(v6, "replacePayloadOfCredential:withPayload:format:completion:", v7, v8, v2, v10);
  return swift_continuation_await(v1);
}

uint64_t sub_1000A46FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 216) = v1;
  if (v1)
    v2 = sub_1000A47AC;
  else
    v2 = sub_1000A475C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A475C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 200);
  v1 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);

  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A47AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(void **)(v1 + 208);
  v2 = *(_QWORD *)(v1 + 216);
  v5 = *(void **)(v1 + 192);
  v4 = *(void **)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 184);
  v8 = *(_QWORD *)(v1 + 168);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v2);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100007F30();
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v6, 0, v9, 0xD000000000000055, 0x8000000100541FC0, 0xD00000000000001FLL, 0x80000001005433F0, 117);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

ValueMetadata *type metadata accessor for IDCredCredentialStore()
{
  return &type metadata for IDCredCredentialStore;
}

uint64_t sub_1000A48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9[36] = v21;
  v9[37] = v8;
  v9[34] = a7;
  v9[35] = a8;
  v9[32] = a5;
  v9[33] = a6;
  v9[30] = a3;
  v9[31] = a4;
  v9[28] = a1;
  v9[29] = a2;
  v10 = type metadata accessor for IdentityProofingAttributeConfiguration(0);
  v9[38] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[39] = v11;
  v9[40] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  v9[41] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v9[42] = v13;
  v9[43] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v9[44] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[45] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[46] = swift_task_alloc(v16);
  v9[47] = swift_task_alloc(v16);
  v9[48] = swift_task_alloc(v16);
  v9[49] = swift_task_alloc(v16);
  v9[50] = swift_task_alloc(v16);
  v17 = sub_100004828(&qword_100632BF8);
  v9[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WorkflowRecommendationResponse(0);
  v9[52] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v9[53] = v19;
  v9[54] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A4A3C, 0, 0);
}

uint64_t sub_1000A4A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  uint64_t v117[2];

  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v1 + 16);
  swift_retain(v5);
  v6 = sub_1003CF620(v4, v3, v2, 0);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 408);
  swift_release(v5);
  swift_bridgeObjectRelease(v6);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = v10 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  swift_beginAccess(v10 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse, v0 + 176, 0, 0);
  sub_1000A8064(v11, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v12 = *(_QWORD *)(v0 + 408);
    v14 = *(_QWORD *)(v0 + 336);
    v13 = *(_QWORD *)(v0 + 344);
    v15 = *(_QWORD *)(v0 + 328);
    swift_retain(v10);
    sub_1000A80AC(v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v13, enum case for DIPError.Code.topekaInternalServerError(_:), v15);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x80000001005438E0, 0, v13, 0, v16, 0xD000000000000087, 0x8000000100543910, 0x726F576863746566, 0xEF2928776F6C466BLL, 931);
    swift_willThrow(v19);
    swift_release(v10);
    v21 = *(_QWORD *)(v0 + 400);
    v20 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 392);
    v25 = *(_QWORD *)(v0 + 368);
    v24 = *(_QWORD *)(v0 + 376);
    v26 = *(_QWORD *)(v0 + 344);
    v27 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v29 = v0 + 16;
    v110 = v0 + 216;
    v112 = (_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 432);
    v31 = *(_QWORD *)(v0 + 416);
    v32 = *(_QWORD *)(v0 + 296);
    v34 = *(_QWORD *)(v0 + 256);
    v33 = *(_QWORD *)(v0 + 264);
    sub_1000A80EC(*(_QWORD *)(v0 + 408), v30);
    v35 = v30 + *(int *)(v31 + 20);
    *(_QWORD *)(v0 + 40) = type metadata accessor for Workflow(0);
    *(_QWORD *)(v0 + 48) = &off_10061A0B0;
    v36 = sub_100022234((_QWORD *)(v0 + 16));
    sub_1000A8130(v35, (uint64_t)v36);
    sub_1000A8174(v30);
    v37 = *(_QWORD *)(v32 + 48);
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = v33;
    swift_bridgeObjectRetain(v33);
    v38 = swift_bridgeObjectRelease(v37);
    v39 = defaultLogger()(v38);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "-----BEGIN LOGGING SAVED WORKFLOW-----", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }
    v109 = (_QWORD *)(v0 + 56);
    v115 = v0 + 208;
    v43 = *(_QWORD *)(v0 + 400);
    v44 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 360);

    v46 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
    v47 = v46(v43, v44);
    defaultLogger()(v47);
    v48 = sub_10002581C(v0 + 16, v0 + 96);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.debug.getter(v49);
    v51 = os_log_type_enabled(v49, v50);
    v52 = *(_QWORD *)(v0 + 392);
    v53 = *(_QWORD *)(v0 + 352);
    v116 = v46;
    if (v51)
    {
      v106 = *(_QWORD *)(v0 + 392);
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = v53;
      v55 = swift_slowAlloc(32, -1);
      v117[0] = v55;
      *(_DWORD *)v54 = 136446210;
      v57 = *(_QWORD *)(v0 + 120);
      v56 = *(_QWORD *)(v0 + 128);
      sub_10000806C((_QWORD *)(v0 + 96), v57);
      v58 = v57;
      v29 = v0 + 16;
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v56 + 8) + 8))(v58);
      v61 = v60;
      *(_QWORD *)(v0 + 216) = sub_1000E3AC8(v59, v60, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v0 + 224, v54 + 4);
      swift_bridgeObjectRelease(v61);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
      _os_log_impl((void *)&_mh_execute_header, v49, v50, " WORKFLOWID: %{public}s", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      v62 = v54;
      v46 = v116;
      swift_slowDealloc(v62, -1, -1);

      v64 = v105;
      v63 = v106;
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));

      v63 = v52;
      v64 = v53;
    }
    v65 = v46(v63, v64);
    v66 = (_QWORD *)(v0 + 136);
    defaultLogger()(v65);
    v67 = sub_10002581C(v29, (uint64_t)v112);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter(v68);
    v70 = os_log_type_enabled(v68, v69);
    v71 = *(_QWORD *)(v0 + 384);
    v72 = *(_QWORD *)(v0 + 352);
    if (v70)
    {
      v113 = *(_QWORD *)(v0 + 384);
      v107 = *(_QWORD *)(v0 + 352);
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v117[0] = v74;
      *(_DWORD *)v73 = 136446210;
      v76 = *(_QWORD *)(v0 + 160);
      v75 = *(_QWORD *)(v0 + 168);
      sub_10000806C(v66, v76);
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v75 + 8) + 16))(v76);
      v79 = v78;
      *(_QWORD *)(v0 + 208) = sub_1000E3AC8(v77, v78, v117);
      v29 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v115, v110, v73 + 4);
      swift_bridgeObjectRelease(v79);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v66);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, " PROVIDERID: %{public}s", v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      v80 = v116(v113, v107);
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v112);

      v80 = v46(v71, v72);
    }
    defaultLogger()(v80);
    v81 = sub_10002581C(v29, (uint64_t)v109);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.debug.getter(v82);
    v84 = os_log_type_enabled(v82, v83);
    v85 = *(_QWORD *)(v0 + 376);
    v86 = *(_QWORD *)(v0 + 352);
    if (v84)
    {
      v114 = *(_QWORD *)(v0 + 376);
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v108 = swift_slowAlloc(32, -1);
      v117[0] = v108;
      *(_DWORD *)v87 = 136446210;
      v111 = v86;
      v88 = *(_QWORD *)(v0 + 80);
      v89 = *(_QWORD *)(v0 + 88);
      sub_10000806C(v109, v88);
      v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 104))(v88, v89);
      if (v90)
        v91 = (_QWORD *)v90;
      else
        v91 = _swiftEmptyArrayStorage;
      v92 = Array.description.getter(v91, &type metadata for Page);
      v94 = v93;
      swift_bridgeObjectRelease(v91);
      *(_QWORD *)(v0 + 200) = sub_1000E3AC8(v92, v94, v117);
      v29 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v115, v87 + 4);
      swift_bridgeObjectRelease(v94);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v109);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, " PAGINATION: %{public}s", v87, 0xCu);
      swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v87, -1, -1);

      v96 = v111;
      v95 = v114;
    }
    else
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v109);

      v95 = v85;
      v96 = v86;
    }
    v97 = v116(v95, v96);
    v98 = defaultLogger()(v97);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.debug.getter(v99);
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "-----END LOGGING SAVED WORKFLOW-----", v101, 2u);
      swift_slowDealloc(v101, -1, -1);
    }
    v102 = *(_QWORD *)(v0 + 368);
    v103 = *(_QWORD *)(v0 + 352);

    v116(v102, v103);
    v104 = (_QWORD *)swift_task_alloc(dword_100632AD4);
    *(_QWORD *)(v0 + 440) = v104;
    *v104 = v0;
    v104[1] = sub_1000A530C;
    return sub_1000A5C60(v29);
  }
}

uint64_t sub_1000A530C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 440);
  *(_QWORD *)(v3 + 448) = a1;
  *(_QWORD *)(v3 + 456) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A5BB0;
  else
    v5 = sub_1000A5378;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A5378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 448);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v9 = *(_QWORD *)(v0 + 448);
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (v10 >= 1)
      goto LABEL_3;
  }
  else if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
LABEL_3:
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 24);
    *(_QWORD *)(v0 + 464) = v2;
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    sub_10000806C((_QWORD *)(v0 + 16), v3);
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96);
    swift_retain(v2);
    v6 = v5(v3, v4);
    *(_QWORD *)(v0 + 472) = v6;
    v7 = (_QWORD *)swift_task_alloc(dword_100634C0C);
    *(_QWORD *)(v0 + 480) = v7;
    *v7 = v0;
    v7[1] = sub_1000A5600;
    return sub_1000FE8D8(*(_QWORD *)(v0 + 320), v6);
  }
  v12 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 328);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v11, enum case for DIPError.Code.invalidWorkflowPackage(_:), v13);
  v14 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v15 = type metadata accessor for DIPError(0);
  v16 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v15, v16, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x80000001005439A0, 0, v11, 0, v14, 0xD000000000000081, 0x80000001005435E0, 0xD000000000000057, 0x80000001005439E0, 44);
  swift_willThrow(v17);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v19 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 392);
  v23 = *(_QWORD *)(v0 + 368);
  v22 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 344);
  v25 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A5600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000A5998;
  else
    v3 = sub_1000A5664;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A5664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  char v32;
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  v6 = sub_100004790(&qword_100632C00, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityProofingAttributeConfiguration, (uint64_t)&protocol conformance descriptor for IdentityProofingAttributeConfiguration);
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2, v3, v6);
  v9 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 472);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    swift_release(v5);
    swift_bridgeObjectRelease(v10);
    swift_release(v9);
    v12 = *(_QWORD *)(v0 + 272);
    v11 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
    v13 = sub_100004828(&qword_100640C30);
    v14 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100523860;
    v15 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
    v37 = 1;
    v36 = 1;
    v35 = 1;
    v16 = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(0xD000000000000015, 0x8000000100543A40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            v35,
            0,
            v36,
            0,
            0,
            0,
            0,
            0,
            0,
            v37);
    *(_QWORD *)(v14 + 32) = v16;
    specialized Array._endMutation()(v16);
    objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo(0));
    swift_bridgeObjectRetain(v11);
    LOBYTE(v33) = 2;
    LOBYTE(v31) = 1;
    v39 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(v14, 0, 0, 0xF000000000000000, v12, v11, 0, 1, 0, v31, 0, 0, 0, _swiftEmptyArrayStorage, 0, 0, v33);
    swift_errorRelease(v1);
  }
  else
  {
    v17 = v7;
    v18 = v8;
    v19 = *(_QWORD *)(v0 + 448);
    v21 = *(_QWORD *)(v0 + 272);
    v20 = *(_QWORD *)(v0 + 280);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    swift_release(v5);
    swift_bridgeObjectRelease(v10);
    swift_release(v9);
    objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo(0));
    swift_bridgeObjectRetain(v20);
    v34 = 2;
    v32 = 1;
    v39 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(v19, 0, v17, v18, v21, v20, 0, 1, 0, v32, 0, 0, 0, _swiftEmptyArrayStorage, 0, 0, v34);
  }
  v22 = *(_QWORD *)(v0 + 432);
  v24 = *(_QWORD *)(v0 + 400);
  v23 = *(_QWORD *)(v0 + 408);
  v26 = *(_QWORD *)(v0 + 384);
  v25 = *(_QWORD *)(v0 + 392);
  v28 = *(_QWORD *)(v0 + 368);
  v27 = *(_QWORD *)(v0 + 376);
  v29 = *(_QWORD *)(v0 + 344);
  v38 = *(_QWORD *)(v0 + 320);
  sub_10002581C(v0 + 16, *(_QWORD *)(v0 + 224));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v39);
}

uint64_t sub_1000A5998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  v5 = sub_100004828(&qword_100640C30);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100523860;
  v7 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
  v23 = 1;
  v22 = 1;
  v21 = 1;
  v8 = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(0xD000000000000015, 0x8000000100543A40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         v21,
         0,
         v22,
         0,
         0,
         0,
         0,
         0,
         0,
         v23);
  *(_QWORD *)(v6 + 32) = v8;
  specialized Array._endMutation()(v8);
  v9 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingDisplayInfo(0));
  swift_bridgeObjectRetain(v3);
  LOBYTE(v20) = 2;
  LOBYTE(v19) = 1;
  v25 = IdentityProofingDisplayInfo.init(proofingUI:docScan:attributeConfig:learnMoreURL:waitingForWiFiAlertDataThresholdInBytes:lowDataModeAlertDataThresholdInBytes:idType:featureEnablementConfig:supportedRegions:livenessStepUpConfig:livenessStepUpIQSettings:shouldPreFetchLivenessConfig:)(v6, 0, 0, 0xF000000000000000, v4, v3, 0, 1, 0, v19, 0, 0, 0, _swiftEmptyArrayStorage, 0, 0, v20);
  swift_errorRelease(v2);
  v10 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 344);
  v24 = *(_QWORD *)(v0 + 320);
  sub_10002581C(v0 + 16, *(_QWORD *)(v0 + 224));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
}

uint64_t sub_1000A5BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A5C60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[117] = v1;
  v2[116] = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[118] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[119] = v4;
  v2[120] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[121] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[122] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[123] = swift_task_alloc(v7);
  v2[124] = swift_task_alloc(v7);
  v2[125] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000A5D08, 0, 0);
}

uint64_t sub_1000A5D08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::Bool v19;
  id v20;
  Swift::String v21;
  Swift::Bool v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 928);
  v2 = v1[3];
  v3 = v1[4];
  sub_10000806C(v1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v2, v3);
  if (!v4)
    goto LABEL_15;
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRelease(v4);
LABEL_15:
    v41 = *(_QWORD *)(v0 + 960);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 952) + 104))(v41, enum case for DIPError.Code.workflowPaginationUnavailable(_:), *(_QWORD *)(v0 + 944));
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v43 = type metadata accessor for DIPError(0);
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v43, v44, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x80000001005435C0, 0, v41, 0, v42, 0xD000000000000081, 0x80000001005435E0, 0xD000000000000015, 0x8000000100543670, 62);
    swift_willThrow(v45);
    v46 = *(_QWORD *)(v0 + 992);
    v47 = *(_QWORD *)(v0 + 984);
    v48 = *(_QWORD *)(v0 + 960);
    swift_task_dealloc(*(_QWORD *)(v0 + 1000));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 912) = v4;
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = objc_msgSend(v5, "standardUserDefaults");
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  v7._object = (void *)0x8000000100543690;
  v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    v10 = defaultLogger()(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Internal setting to force enable retry auth code scenario has been enabled. Adding an additional page to auth code workflow", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 1000);
    v15 = *(_QWORD *)(v0 + 976);
    v16 = *(_QWORD *)(v0 + 968);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    *(_OWORD *)(v0 + 784) = xmmword_100523870;
    *(_QWORD *)(v0 + 800) = 0x8000000100543820;
    *(_QWORD *)(v0 + 808) = 0xD00000000000009DLL;
    *(_QWORD *)(v0 + 816) = 0x8000000100543840;
    *(_QWORD *)(v0 + 824) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 832) = 0;
    *(_QWORD *)(v0 + 848) = 0;
    *(_QWORD *)(v0 + 840) = 0;
    strcpy((char *)(v0 + 856), "authcodeRetry");
    *(_WORD *)(v0 + 870) = -4864;
    *(_QWORD *)(v0 + 872) = 0;
    *(_QWORD *)(v0 + 888) = 0;
    *(_QWORD *)(v0 + 880) = 0;
    sub_10001292C(0, 0, (_OWORD *)(v0 + 784));
  }
  *(_QWORD *)(v0 + 920) = _swiftEmptyArrayStorage;
  v17 = objc_msgSend(v5, "standardUserDefaults");
  v18._countAndFlagsBits = 0xD000000000000021;
  v18._object = (void *)0x80000001005436B0;
  v19 = NSUserDefaults.internalBool(forKey:)(v18);

  if (v19)
  {
    *(_OWORD *)(v0 + 448) = xmmword_100523880;
    *(_QWORD *)(v0 + 464) = 0x8000000100543790;
    *(_QWORD *)(v0 + 472) = 0xD000000000000031;
    *(_QWORD *)(v0 + 480) = 0x80000001005437C0;
    *(_QWORD *)(v0 + 488) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 504) = 0;
    *(_QWORD *)(v0 + 512) = 0;
    *(_QWORD *)(v0 + 496) = 0;
    *(_QWORD *)(v0 + 520) = 0xD00000000000001ELL;
    *(_QWORD *)(v0 + 528) = 0x8000000100543800;
    *(_QWORD *)(v0 + 536) = 0;
    *(_QWORD *)(v0 + 552) = 0;
    *(_QWORD *)(v0 + 544) = 0;
    sub_10001292C(0, 0, (_OWORD *)(v0 + 448));
  }
  v20 = objc_msgSend(v5, "standardUserDefaults");
  v21._countAndFlagsBits = 0xD000000000000027;
  v21._object = (void *)0x80000001005436E0;
  v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    *(_OWORD *)(v0 + 560) = xmmword_100523890;
    *(_QWORD *)(v0 + 576) = 0x8000000100543710;
    *(_QWORD *)(v0 + 584) = 0xD00000000000002ALL;
    *(_QWORD *)(v0 + 592) = 0x8000000100543740;
    *(_QWORD *)(v0 + 600) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 608) = 0;
    *(_QWORD *)(v0 + 624) = 0;
    *(_QWORD *)(v0 + 616) = 0;
    *(_QWORD *)(v0 + 632) = 0xD000000000000017;
    *(_QWORD *)(v0 + 640) = 0x8000000100543770;
    *(_QWORD *)(v0 + 648) = 0;
    *(_QWORD *)(v0 + 664) = 0;
    *(_QWORD *)(v0 + 656) = 0;
    v23 = sub_10001292C(0, 0, (_OWORD *)(v0 + 560));
  }
  v24 = defaultLogger()(v23);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetch activeConfig from prepareProofingUI", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }
  v28 = *(_QWORD *)(v0 + 992);
  v29 = *(_QWORD *)(v0 + 976);
  v30 = *(_QWORD *)(v0 + 968);
  v31 = *(_QWORD *)(v0 + 936);
  v32 = *(_QWORD **)(v0 + 928);

  v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  *(_QWORD *)(v0 + 1008) = v33;
  v33(v28, v30);
  v34 = *(_QWORD *)(v31 + 24);
  *(_QWORD *)(v0 + 1016) = v34;
  v36 = v1[3];
  v35 = v1[4];
  sub_10000806C(v32, v36);
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 96);
  swift_retain(v34);
  v38 = v37(v36, v35);
  *(_QWORD *)(v0 + 1024) = v38;
  v49 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100634CA0 + dword_100634CA0);
  v39 = (_QWORD *)swift_task_alloc(unk_100634CA4);
  *(_QWORD *)(v0 + 1032) = v39;
  *v39 = v0;
  v39[1] = sub_1000A62FC;
  return v49(v0 + 16, v38);
}

uint64_t sub_1000A62FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1032);
  *(_QWORD *)(*(_QWORD *)v1 + 1040) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[127];
    swift_bridgeObjectRelease(v2[128]);
    swift_release(v4);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v2[114]);
    v5 = sub_1000A6560;
  }
  else
  {
    v6 = v2[127];
    swift_bridgeObjectRelease(v2[128]);
    swift_release(v6);
    v5 = sub_1000A639C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A639C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 912);
  *(_QWORD *)(v0 + 1048) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1056) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 1064) = 0;
    v3 = *(_OWORD *)(v1 + 80);
    v4 = *(_OWORD *)(v1 + 96);
    v5 = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v0 + 752) = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v0 + 768) = v5;
    *(_OWORD *)(v0 + 736) = v4;
    v6 = *(_OWORD *)(v1 + 48);
    v7 = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 672) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v0 + 688) = v6;
    *(_OWORD *)(v0 + 704) = v7;
    *(_OWORD *)(v0 + 720) = v3;
    v8 = *(_QWORD *)(v0 + 744);
    v9 = *(_QWORD *)(v0 + 752);
    if (v9
      && (v8 == 0x6E695F646579656BLL && v9 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752), 0x6E695F646579656BLL, 0xE800000000000000, 0) & 1) != 0))
    {
      sub_1000A7E00((_QWORD *)(v0 + 672));
      v10 = (_QWORD *)swift_task_alloc(dword_100632ADC);
      *(_QWORD *)(v0 + 1072) = v10;
      *v10 = v0;
      v10[1] = sub_1000A65C0;
      return sub_1000A6FB8(v0 + 672, v0 + 16);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 776);
      *(_QWORD *)(v0 + 896) = sub_1000DEF64(v8, v9);
      *(_QWORD *)(v0 + 904) = v16;
      *(_QWORD *)(v0 + 1096) = v16;
      sub_1000A7E00((_QWORD *)(v0 + 672));
      v17 = (_QWORD *)swift_task_alloc(dword_100632AE4);
      *(_QWORD *)(v0 + 1104) = v17;
      *v17 = v0;
      v17[1] = sub_1000A69FC;
      return sub_1000A7794(v15);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    sub_1000A7F60((_QWORD *)(v0 + 16));
    v12 = *(_QWORD *)(v0 + 992);
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 960);
    swift_task_dealloc(*(_QWORD *)(v0 + 1000));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000A6560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 960);
  swift_task_dealloc(*(_QWORD *)(v0 + 1000));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A65C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1072);
  v3[135] = a1;
  v3[136] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[131];
    sub_1000A7F60(v3 + 2);
    sub_1000A7E8C(v3 + 84);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v3[115]);
    v6 = sub_1000A6EF0;
  }
  else
  {
    sub_1000A7E8C(v3 + 84);
    v6 = sub_1000A6668;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000A6668()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 1080);
  if (v2)
  {
    v3 = (_QWORD *)(v0 + 920);
    v4 = v2;
    defaultLogger()(v4);
    v5 = v4;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
    v10 = *(_QWORD *)(v0 + 984);
    v11 = *(_QWORD *)(v0 + 968);
    if (v8)
    {
      v12 = swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v13 = v41;
      *(_DWORD *)v12 = 136446210;
      v40 = v9;
      v14 = IdentityProofingUIConfig.view.getter();
      v16 = v15;
      *(_QWORD *)(v12 + 4) = sub_1000E3AC8(v14, v15, &v41);
      swift_bridgeObjectRelease(v16);

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s to be shown to the user", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      v17 = v13;
      v1 = (_QWORD *)(v0 + 16);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      v40(v10, v11);
    }
    else
    {

      v9(v10, v11);
    }
    v18 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    v20 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
    specialized Array._endMutation()(v21);

  }
  v22 = *(_QWORD *)(v0 + 1064) + 1;
  if (v22 == *(_QWORD *)(v0 + 1056))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1048));
    sub_1000A7F60(v1);
    v23 = *(_QWORD *)(v0 + 920);
    v24 = *(_QWORD *)(v0 + 992);
    v25 = *(_QWORD *)(v0 + 984);
    v26 = *(_QWORD *)(v0 + 960);
    swift_task_dealloc(*(_QWORD *)(v0 + 1000));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v23);
  }
  else
  {
    *(_QWORD *)(v0 + 1064) = v22;
    v28 = (_OWORD *)(*(_QWORD *)(v0 + 1048) + 112 * v22);
    v29 = v28[5];
    v30 = v28[6];
    v31 = v28[8];
    *(_OWORD *)(v0 + 752) = v28[7];
    *(_OWORD *)(v0 + 768) = v31;
    *(_OWORD *)(v0 + 736) = v30;
    v33 = v28[3];
    v32 = v28[4];
    *(_OWORD *)(v0 + 672) = v28[2];
    *(_OWORD *)(v0 + 688) = v33;
    *(_OWORD *)(v0 + 704) = v32;
    *(_OWORD *)(v0 + 720) = v29;
    v34 = *(_QWORD *)(v0 + 744);
    v35 = *(_QWORD *)(v0 + 752);
    if (v35
      && (v34 == 0x6E695F646579656BLL && v35 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752), 0x6E695F646579656BLL, 0xE800000000000000, 0) & 1) != 0))
    {
      sub_1000A7E00((_QWORD *)(v0 + 672));
      v36 = (_QWORD *)swift_task_alloc(dword_100632ADC);
      *(_QWORD *)(v0 + 1072) = v36;
      *v36 = v0;
      v36[1] = sub_1000A65C0;
      return sub_1000A6FB8(v0 + 672, (uint64_t)v1);
    }
    else
    {
      v37 = *(_QWORD *)(v0 + 776);
      *(_QWORD *)(v0 + 896) = sub_1000DEF64(v34, v35);
      *(_QWORD *)(v0 + 904) = v38;
      *(_QWORD *)(v0 + 1096) = v38;
      sub_1000A7E00((_QWORD *)(v0 + 672));
      v39 = (_QWORD *)swift_task_alloc(dword_100632AE4);
      *(_QWORD *)(v0 + 1104) = v39;
      *v39 = v0;
      v39[1] = sub_1000A69FC;
      return sub_1000A7794(v37);
    }
  }
}

uint64_t sub_1000A69FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1104);
  *(_QWORD *)(*v2 + 1112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 1096);
    v7 = *(_QWORD *)(v4 + 1048);
    sub_1000A7F60((_QWORD *)(v4 + 16));
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 920));
    v8 = sub_1000A6F50;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 896);
    *(_QWORD *)(v4 + 1120) = a1;
    *(_QWORD *)(v4 + 1128) = v9;
    *(_QWORD *)(v4 + 1136) = *(_QWORD *)(v4 + 712);
    *(_OWORD *)(v4 + 1144) = *(_OWORD *)(v4 + 696);
    *(_QWORD *)(v4 + 1160) = *(_QWORD *)(v4 + 680);
    *(_QWORD *)(v4 + 1168) = *(_QWORD *)(v4 + 688);
    v8 = sub_1000A6AC8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000A6AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 1168);
  v45 = *(_QWORD *)(v0 + 1160);
  v47 = (_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 1152);
  v3 = *(_QWORD *)(v0 + 1144);
  v4 = *(_QWORD *)(v0 + 1136);
  v5 = *(_QWORD *)(v0 + 1128);
  v6 = *(_QWORD *)(v0 + 1120);
  v7 = *(_QWORD *)(v0 + 1096);
  v8 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  v9 = (void *)IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(v5, v7, v45, v1, v3, v2, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, 0, 0, 0,
                 1,
                 0,
                 1,
                 0,
                 0,
                 0,
                 0,
                 v6,
                 0,
                 1);
  v46 = (_QWORD *)(v0 + 672);
  sub_1000A7E8C((_QWORD *)(v0 + 672));
  v10 = v9;
  defaultLogger()(v10);
  v11 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v16 = *(_QWORD *)(v0 + 984);
  v17 = *(_QWORD *)(v0 + 968);
  if (v14)
  {
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v48 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = IdentityProofingUIConfig.view.getter();
    v22 = v21;
    *(_QWORD *)(v18 + 4) = sub_1000E3AC8(v20, v21, &v48);
    swift_bridgeObjectRelease(v22);

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s to be shown to the user", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

  }
  v15(v16, v17);
  v23 = v11;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v25 = *(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v24 = *(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
  specialized Array._endMutation()(v26);

  v27 = *(_QWORD *)(v0 + 1064) + 1;
  if (v27 == *(_QWORD *)(v0 + 1056))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1048));
    sub_1000A7F60((_QWORD *)(v0 + 16));
    v28 = *(_QWORD *)(v0 + 920);
    v29 = *(_QWORD *)(v0 + 992);
    v30 = *(_QWORD *)(v0 + 984);
    v31 = *(_QWORD *)(v0 + 960);
    swift_task_dealloc(*(_QWORD *)(v0 + 1000));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v28);
  }
  else
  {
    *(_QWORD *)(v0 + 1064) = v27;
    v33 = (_OWORD *)(*(_QWORD *)(v0 + 1048) + 112 * v27);
    v34 = v33[5];
    v35 = v33[6];
    v36 = v33[8];
    *(_OWORD *)(v0 + 752) = v33[7];
    *(_OWORD *)(v0 + 768) = v36;
    *(_OWORD *)(v0 + 736) = v35;
    v38 = v33[3];
    v37 = v33[4];
    *(_OWORD *)v46 = v33[2];
    *(_OWORD *)(v0 + 688) = v38;
    *(_OWORD *)(v0 + 704) = v37;
    *(_OWORD *)(v0 + 720) = v34;
    v39 = *(_QWORD *)(v0 + 744);
    v40 = *(_QWORD *)(v0 + 752);
    if (v40
      && (v39 == 0x6E695F646579656BLL && v40 == 0xE800000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752), 0x6E695F646579656BLL, 0xE800000000000000, 0) & 1) != 0))
    {
      sub_1000A7E00(v46);
      v41 = (_QWORD *)swift_task_alloc(dword_100632ADC);
      *(_QWORD *)(v0 + 1072) = v41;
      *v41 = v0;
      v41[1] = sub_1000A65C0;
      return sub_1000A6FB8((uint64_t)v46, v0 + 16);
    }
    else
    {
      v42 = *(_QWORD *)(v0 + 776);
      *(_QWORD *)(v0 + 896) = sub_1000DEF64(v39, v40);
      *(_QWORD *)(v0 + 904) = v43;
      *(_QWORD *)(v0 + 1096) = v43;
      sub_1000A7E00(v46);
      v44 = (_QWORD *)swift_task_alloc(dword_100632AE4);
      *(_QWORD *)(v0 + 1104) = v44;
      *v44 = v0;
      v44[1] = sub_1000A69FC;
      return sub_1000A7794(v42);
    }
  }
}

uint64_t sub_1000A6EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 960);
  swift_task_dealloc(*(_QWORD *)(v0 + 1000));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000A7E8C((_QWORD *)(v0 + 672));
  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 960);
  swift_task_dealloc(*(_QWORD *)(v0 + 1000));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[28] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[29] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v6);
  v3[31] = swift_task_alloc(v6);
  v3[32] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000A7038, 0, 0);
}

uint64_t sub_1000A7038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  os_log_type_t v7;
  _QWORD *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1 + 200;
  v3 = *(_QWORD **)(v1 + 200);
  v4 = v1 + 192;
  defaultLogger()(a1);
  sub_1000A7E00(v3);
  v5 = sub_1000A7E00(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD **)v2;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v72 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = v8[10];
    v12 = *(_QWORD **)v2;
    if (v11)
    {
      v13 = v12[9];
      v14 = v11;
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    v69 = *(_QWORD *)(v1 + 232);
    v70 = *(_QWORD *)(v1 + 224);
    v71 = *(_QWORD *)(v1 + 256);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 192) = sub_1000E3AC8(v13, v14, &v72);
    v4 = v1 + 192;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v9 + 4);
    swift_bridgeObjectRelease(v14);
    sub_1000A7E8C(v12);
    sub_1000A7E8C(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "fetching the proofing view from the page type: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v21 = v70;
    v19 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v20 = v71;
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 256);
    v16 = *(_QWORD *)(v1 + 224);
    v17 = *(_QWORD *)(v1 + 232);
    v18 = *(_QWORD **)(v1 + 200);
    sub_1000A7E8C(v18);
    sub_1000A7E8C(v18);

    v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v20 = v15;
    v21 = v16;
  }
  v22 = v19;
  v19(v20, v21);
  v23 = *(_QWORD **)(*(_QWORD *)v2 + 40);
  if (!v23[2])
    goto LABEL_20;
  v24 = v1 + 168;
  v25 = v1 + 176;
  v27 = v23[4];
  v26 = v23[5];
  swift_bridgeObjectRetain(v26);
  defaultLogger()(v28);
  v29 = swift_bridgeObjectRetain_n(v26, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v67 = *(_QWORD *)(v1 + 248);
    v68 = *(_QWORD *)(v1 + 224);
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v72 = v33;
    *(_DWORD *)v32 = 136315138;
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)(v1 + 184) = sub_1000E3AC8(v27, v26, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v4, v32 + 4);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "The keyedInType is %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v34 = v33;
    v24 = v1 + 168;
    swift_slowDealloc(v34, -1, -1);
    v35 = v32;
    v25 = v1 + 176;
    swift_slowDealloc(v35, -1, -1);

    v22(v67, v68);
  }
  else
  {
    v36 = *(_QWORD *)(v1 + 224);
    v37 = *(_QWORD *)(v1 + 248);
    swift_bridgeObjectRelease_n(v26, 2);

    v22(v37, v36);
  }
  v38 = *(_QWORD *)(v1 + 208);
  v39 = sub_1000DEF64(v27, v26);
  v41 = v40;
  *(_QWORD *)(v1 + 264) = v39;
  *(_QWORD *)(v1 + 272) = v40;
  sub_1000A7F18(v38 + 400, v25);
  sub_1000A7F18(v25, v24);
  v42 = *(_QWORD *)(v1 + 168);
  if (!v42)
  {
    v64 = v41;
    goto LABEL_19;
  }
  if (!*(_QWORD *)(v42 + 16) || (v43 = sub_1004A8604(v27, v26), (v44 & 1) == 0))
  {
    v64 = v26;
    v26 = v41;
LABEL_19:
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(v26);
LABEL_20:
    v65 = *(_QWORD *)(v1 + 248);
    v66 = *(_QWORD *)(v1 + 240);
    swift_task_dealloc(*(_QWORD *)(v1 + 256));
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
  v45 = *(_QWORD *)(v42 + 56) + 152 * v43;
  v46 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v45;
  *(_OWORD *)(v1 + 32) = v46;
  v47 = *(_OWORD *)(v45 + 80);
  v49 = *(_OWORD *)(v45 + 32);
  v48 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(v45 + 64);
  *(_OWORD *)(v1 + 96) = v47;
  *(_OWORD *)(v1 + 48) = v49;
  *(_OWORD *)(v1 + 64) = v48;
  v51 = *(_OWORD *)(v45 + 112);
  v50 = *(_OWORD *)(v45 + 128);
  v52 = *(_OWORD *)(v45 + 96);
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(v45 + 144);
  *(_OWORD *)(v1 + 128) = v51;
  *(_OWORD *)(v1 + 144) = v50;
  *(_OWORD *)(v1 + 112) = v52;
  sub_100099EA8((_QWORD *)(v1 + 16));
  v53 = swift_bridgeObjectRelease(v26);
  v54 = defaultLogger()(v53);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.debug.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "an active config exists", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }
  v58 = *(_QWORD *)(v1 + 240);
  v59 = *(_QWORD *)(v1 + 224);
  v60 = *(_QWORD *)(v1 + 200);

  v22(v58, v59);
  v61 = *(_QWORD *)(v60 + 104);
  v62 = (_QWORD *)swift_task_alloc(dword_100632AE4);
  *(_QWORD *)(v1 + 280) = v62;
  *v62 = v1;
  v62[1] = sub_1000A7588;
  return sub_1000A7794(v61);
}

uint64_t sub_1000A7588(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 280);
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000A772C;
  }
  else
  {
    *(_QWORD *)(v4 + 296) = a1;
    v6 = sub_1000A75FC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000A75FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD **)(v0 + 200);
  v3 = v2[2];
  v20 = v2[1];
  v21 = *(_QWORD *)(v0 + 264);
  v4 = v2[4];
  v5 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 104);
  v19 = v2[3];
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 32);
  v10 = objc_allocWithZone((Class)type metadata accessor for IdentityProofingUIConfig(0));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v17 = 1;
  v16 = 0;
  v15 = 0;
  v11 = IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(v21, v22, v20, v3, v19, v4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v18,
          v15,
          v5,
          v16,
          v6,
          v7,
          v8,
          v9,
          v1,
          0,
          v17);
  sub_100099F30((_QWORD *)(v0 + 16));
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_1000A772C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  sub_100099F30((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A7794(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000A7804, 0, 0);
}

uint64_t sub_1000A7804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = v2;
  if (*(_QWORD *)(v2 + 48))
  {
    v4 = *(_QWORD *)(v1 + 40);
    v5 = String.lowercased()();
    object = v5._object;
    if (v4)
    {
      v7 = *(_QWORD *)(v1 + 40);
      defaultLogger()(v5._countAndFlagsBits);
      v8 = swift_bridgeObjectRetain_n(v7, 2);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.debug.getter(v9);
      v11 = os_log_type_enabled(v9, v10);
      v12 = *(_QWORD *)(v1 + 80);
      v13 = *(_QWORD *)(v1 + 56);
      if (v11)
      {
        v48 = *(_QWORD *)(v1 + 64);
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = v12;
        v15 = swift_slowAlloc(32, -1);
        v52 = v15;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain(v7);
        v44 = v13;
        v17 = Array.description.getter(v16, &type metadata for String);
        v19 = v18;
        swift_bridgeObjectRelease(v7);
        *(_QWORD *)(v1 + 32) = sub_1000E3AC8(v17, v19, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v14 + 4);
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease_n(v7, 2);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Fetching asset images for: %s", v14, 0xCu);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        v20 = v14;
        object = v5._object;
        swift_slowDealloc(v20, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v44);
      }
      else
      {
        v32 = *(_QWORD *)(v1 + 64);
        swift_bridgeObjectRelease_n(v7, 2);

        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v12, v13);
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 32);
      *(_QWORD *)(v1 + 88) = v33;
      v34 = String.lowercased()();
      *(_QWORD *)(v1 + 96) = v34._object;
      swift_retain(v33);
      swift_bridgeObjectRelease(object);
      v35 = (_QWORD *)swift_task_alloc(dword_10063454C);
      *(_QWORD *)(v1 + 104) = v35;
      *v35 = v1;
      v35[1] = sub_1000A7CF0;
      return sub_1000F1E28(v34._countAndFlagsBits, (uint64_t)v34._object, v7);
    }
    a1 = swift_bridgeObjectRelease(v5._object);
    v3 = *(_QWORD *)(v1 + 48);
  }
  v21 = *(_QWORD **)(v1 + 40);
  defaultLogger()(a1);
  swift_bridgeObjectRetain_n(v21, 2);
  v22 = swift_retain_n(v3, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v45 = v24;
    v25 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v25 = 136315394;
    v26 = *(_QWORD *)(v2 + 48);
    if (v26)
    {
      v27 = *(_QWORD *)(v2 + 40);
      v28 = *(_QWORD *)(v2 + 48);
    }
    else
    {
      v28 = 0xE300000000000000;
      v27 = 7104878;
    }
    v47 = *(_QWORD *)(v1 + 64);
    v37 = *(_QWORD *)(v1 + 48);
    v49 = *(_QWORD *)(v1 + 56);
    v50 = *(_QWORD *)(v1 + 72);
    v38 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v27, v28, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v25 + 4);
    swift_bridgeObjectRelease(v28);
    swift_release_n(v37, 2);
    *(_WORD *)(v25 + 12) = 2080;
    if (v38)
      v39 = v21;
    else
      v39 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v21);
    v40 = Array.description.getter(v39, &type metadata for String);
    v42 = v41;
    swift_bridgeObjectRelease(v39);
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v40, v42, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v25 + 14);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease_n(v21, 2);
    _os_log_impl((void *)&_mh_execute_header, v23, v45, "Not fetching assets because state or image assets is nil. state=%s imageAssets=%s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v50, v49);
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 64);
    v29 = *(_QWORD *)(v1 + 72);
    v31 = *(_QWORD *)(v1 + 56);
    swift_release_n(*(_QWORD *)(v1 + 48), 2);
    swift_bridgeObjectRelease_n(v21, 2);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  }
  v43 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 80));
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_1000A7CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *v2;
  v6 = *(_QWORD *)(*v2 + 96);
  v5 = *(_QWORD *)(*v2 + 104);
  v7 = *(_QWORD *)(*v2 + 88);
  v8 = *v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  swift_release(v7);
  if (v1)
  {
    v9 = *(_QWORD *)(v4 + 72);
    swift_task_dealloc(*(_QWORD *)(v4 + 80));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 72);
    swift_task_dealloc(*(_QWORD *)(v4 + 80));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(uint64_t))(v8 + 8))(a1);
  }
}

uint64_t sub_1000A7DA4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for IdentityProofingAuthCodeUIProvider()
{
  return objc_opt_self(_TtC8coreidvd34IdentityProofingAuthCodeUIProvider);
}

_QWORD *sub_1000A7E00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *sub_1000A7E8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[13];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000A7F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100632338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000A7F60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[15];
  v8 = a1[17];
  v9 = a1[35];
  v10 = a1[37];
  v12 = a1[39];
  v13 = a1[50];
  v14 = a1[51];
  v15 = a1[52];
  v16 = a1[53];
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1000A8064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100632BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A80AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100632BF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A80EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WorkflowRecommendationResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Workflow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8174(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WorkflowRecommendationResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A81B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for DIPError.Code(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SHA256(0);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  v0[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SHA256Digest(0);
  v0[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[9] = v6;
  v0[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_100632DCC);
  v0[11] = v7;
  *v7 = v0;
  v7[1] = sub_1000A8298;
  return sub_1000A895C();
}

uint64_t sub_1000A8298(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A87D8;
  else
    v5 = sub_1000A8348;
  return swift_task_switch(v5, 0, 0);
}

void sub_1000A8348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[13];
  sub_1004AA4A4();
  v3 = v1;
  if (v1)
  {
    swift_release(v0[12]);
    v4 = v0[10];
    v5 = v0[7];
    v6 = v0[4];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[3] + 104))(v6, enum case for DIPError.Code.internalError(_:), v0[2]);
    swift_errorRetain(v1);
    v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v8, v9, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100544640, v3, v6, 0, v7, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001ALL, 0x8000000100544680, 121);
    swift_willThrow(v10);
    swift_errorRelease(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    __asm { BR              X0 }
  }
  v11 = v2;
  v12 = v0[5];
  v13 = sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v12, v13);
  __asm { BR              X10 }
}

uint64_t sub_1000A87D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100544640, v1, v4, 0, v5, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001ALL, 0x8000000100544680, 121);
  swift_willThrow(v8);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A895C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[9] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[10] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[11] = v3;
  v1[12] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[13] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[14] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[15] = swift_task_alloc(v6);
  v1[16] = swift_task_alloc(v6);
  v1[17] = swift_task_alloc(v6);
  v1[18] = swift_task_alloc(v6);
  v1[19] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v1[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[21] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v9);
  v1[23] = swift_task_alloc(v9);
  v10 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration(0);
  v1[24] = v10;
  v1[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v1[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v1[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[28] = v13;
  v1[29] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A8ABC, 0, 0);
}

uint64_t sub_1000A8ABC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];

  sub_100038B24(v0[9] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, (uint64_t)(v0 + 2), &qword_100632DD0);
  v1 = v0[5];
  if (v1)
  {
    sub_10000806C(v0 + 2, v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1006346AC);
    v0[30] = v2;
    *v2 = v0;
    v2[1] = sub_1000A9008;
    return sub_1000F277C();
  }
  else
  {
    v4 = sub_100008030((uint64_t)(v0 + 2), &qword_100632DD0);
    v6 = v0[25];
    v5 = v0[26];
    static DaemonSignposts.MobileDocumentReader.identityKeyStatus.getter(v4);
    DIPSignpost.init(_:)(v5);
    sub_1000ACB04(v6);
    v8 = v0[24];
    v7 = v0[25];
    v9 = v0[22];
    v10 = v0[23];
    v12 = v0[20];
    v11 = v0[21];
    v13 = (uint64_t *)(v7 + *(int *)(v8 + 20));
    v14 = *v13;
    v0[32] = *v13;
    v15 = v13[1];
    v0[33] = v15;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v16(v10, v7 + *(int *)(v8 + 28), v12);
    swift_bridgeObjectRetain(v15);
    defaultLogger()(v17);
    v16(v9, v10, v12);
    v18 = swift_bridgeObjectRetain_n(v15, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    v21 = os_log_type_enabled(v19, v20);
    v22 = v0[22];
    v23 = v0[19];
    v24 = v0[20];
    v25 = v0[13];
    v41 = v0[21];
    v42 = v0[14];
    if (v21)
    {
      v40 = v14;
      type = v20;
      v39 = v0[19];
      v26 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(64, -1);
      v43[0] = v37;
      *(_DWORD *)v26 = 136315394;
      swift_bridgeObjectRetain(v15);
      v0[7] = sub_1000E3AC8(v14, v15, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v26 + 4);
      swift_bridgeObjectRelease_n(v15, 3);
      *(_WORD *)(v26 + 12) = 2080;
      v27 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
      v30 = v29;
      v0[8] = sub_1000E3AC8(v28, v29, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v26 + 14);
      v31 = v30;
      v14 = v40;
      swift_bridgeObjectRelease(v31);
      v32 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v32(v22, v24);
      _os_log_impl((void *)&_mh_execute_header, v19, type, "MobileDocumentReaderAuthenticationManager attempting to look up existing identity key for %s and %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v33 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v33(v39, v25);
    }
    else
    {
      swift_bridgeObjectRelease_n(v15, 2);
      v32 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v32(v22, v24);

      v33 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v33(v23, v25);
    }
    v0[34] = v32;
    v0[35] = v33;
    v34 = v0[9];
    v35 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    v0[36] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000806C((_QWORD *)(v34 + v35), *(_QWORD *)(v34 + v35 + 24));
    v36 = (_QWORD *)swift_task_alloc(dword_100634A34);
    v0[37] = v36;
    *v36 = v0;
    v36[1] = sub_1000A9704;
    return sub_1000F60A0(v14, v15, v0[23]);
  }
}

uint64_t sub_1000A9008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000A9538;
  else
    v3 = sub_1000A906C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A906C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  os_log_type_t type;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  v1 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  static DaemonSignposts.MobileDocumentReader.identityKeyStatus.getter(v1);
  DIPSignpost.init(_:)(v3);
  sub_1000ACB04(v4);
  if (v2)
  {
    v5 = v2;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    v6 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 184);
    v49 = *(_QWORD *)(v0 + 152);
    v50 = *(_QWORD *)(v0 + 144);
    v52 = *(_QWORD *)(v0 + 136);
    v54 = *(_QWORD *)(v0 + 128);
    v56 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
    swift_errorRetain(v2);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100544570, v5, v11, 0, v12, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005445B0, 338);
    swift_willThrow(v15);
    swift_errorRelease(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 184);
    v22 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 168);
    v23 = (uint64_t *)(v17 + *(int *)(v18 + 20));
    v24 = *v23;
    *(_QWORD *)(v0 + 256) = *v23;
    v25 = v23[1];
    *(_QWORD *)(v0 + 264) = v25;
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v26(v20, v17 + *(int *)(v18 + 28), v22);
    swift_bridgeObjectRetain(v25);
    defaultLogger()(v27);
    v26(v19, v20, v22);
    v28 = swift_bridgeObjectRetain_n(v25, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 104);
    v55 = *(_QWORD *)(v0 + 168);
    v57 = *(_QWORD *)(v0 + 112);
    if (v31)
    {
      v53 = v24;
      type = v30;
      v51 = *(_QWORD *)(v0 + 152);
      v36 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      v58[0] = v47;
      *(_DWORD *)v36 = 136315394;
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v0 + 56) = sub_1000E3AC8(v24, v25, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v36 + 4);
      swift_bridgeObjectRelease_n(v25, 3);
      *(_WORD *)(v36 + 12) = 2080;
      v37 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v34, v37);
      v40 = v39;
      *(_QWORD *)(v0 + 64) = sub_1000E3AC8(v38, v39, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v36 + 14);
      v41 = v40;
      v24 = v53;
      swift_bridgeObjectRelease(v41);
      v42 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v42(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, type, "MobileDocumentReaderAuthenticationManager attempting to look up existing identity key for %s and %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      v43 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v43(v51, v35);
    }
    else
    {
      swift_bridgeObjectRelease_n(v25, 2);
      v42 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v42(v32, v34);

      v43 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v43(v33, v35);
    }
    *(_QWORD *)(v0 + 272) = v42;
    *(_QWORD *)(v0 + 280) = v43;
    v44 = *(_QWORD *)(v0 + 72);
    v45 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    *(_QWORD *)(v0 + 288) = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000806C((_QWORD *)(v44 + v45), *(_QWORD *)(v44 + v45 + 24));
    v46 = (_QWORD *)swift_task_alloc(dword_100634A34);
    *(_QWORD *)(v0 + 296) = v46;
    *v46 = v0;
    v46[1] = sub_1000A9704;
    return sub_1000F60A0(v24, v25, *(_QWORD *)(v0 + 184));
  }
}

uint64_t sub_1000A9538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100544570, v1, v7, 0, v8, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005445B0, 338);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9704(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000A9A24;
  else
    v5 = sub_1000A9770;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A9770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = sub_1004AA728();
  if ((v1 & 1) != 0)
  {
    v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v3 = defaultLogger()(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderAuthenticationManager found identity key", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 104);

    v7(v8, v9);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 304);
    (*(void (**)(uint64_t, _QWORD))(v0 + 272))(v15, *(_QWORD *)(v0 + 160));
    sub_100035DAC(v14, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v34);
  }
  else
  {
    v20 = defaultLogger()(v1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "MobileDocumentReaderAuthenticationManager found identity key but it is not valid. Deleting and generating new one...", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    v24 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 72);

    v25(v26, v27);
    sub_10000806C((_QWORD *)(v28 + v24), *(_QWORD *)(v28 + v24 + 24));
    v29 = (_QWORD *)swift_task_alloc(dword_100634A2C);
    *(_QWORD *)(v0 + 320) = v29;
    *v29 = v0;
    v29[1] = sub_1000A9BE4;
    return sub_1000F8228(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 184));
  }
}

uint64_t sub_1000A9A24()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = v0[39];
  v2 = (void (*)(uint64_t, uint64_t))v0[35];
  v4 = v0[32];
  v3 = (void *)v0[33];
  v5 = v0[20];
  v6 = v0[15];
  v7 = v0[13];
  _StringGuts.grow(_:)(100);
  v8._countAndFlagsBits = 0xD000000000000044;
  v8._object = (void *)0x80000001005445D0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v4;
  v9._object = v3;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x20646E6120;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  v11 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._object = (void *)0x8000000100544620;
  v14._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v14);
  defaultLogger()(v15);
  DIPLogError(_:message:log:)(v1, 0, 0xE000000000000000, v6);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_errorRelease(v1);
  v2(v6, v7);
  v16 = (_QWORD *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000806C(v16, v16[3]);
  v17 = (_QWORD *)swift_task_alloc(dword_100634A5C);
  v0[42] = v17;
  *v17 = v0;
  v17[1] = sub_1000A9E98;
  return sub_1000F6C28(v0[32], v0[33], v0[23]);
}

uint64_t sub_1000A9BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000A9CD0;
  else
    v3 = sub_1000A9C48;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A9C48()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  swift_release(v0[38]);
  v1 = (_QWORD *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000806C(v1, v1[3]);
  v2 = (_QWORD *)swift_task_alloc(dword_100634A5C);
  v0[42] = v2;
  *v2 = v0;
  v2[1] = sub_1000A9E98;
  return sub_1000F6C28(v0[32], v0[33], v0[23]);
}

uint64_t sub_1000A9CD0()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  swift_release(v0[38]);
  v1 = v0[41];
  v2 = (void (*)(uint64_t, uint64_t))v0[35];
  v4 = v0[32];
  v3 = (void *)v0[33];
  v5 = v0[20];
  v6 = v0[15];
  v7 = v0[13];
  _StringGuts.grow(_:)(100);
  v8._countAndFlagsBits = 0xD000000000000044;
  v8._object = (void *)0x80000001005445D0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v4;
  v9._object = v3;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x20646E6120;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  v11 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._object = (void *)0x8000000100544620;
  v14._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v14);
  defaultLogger()(v15);
  DIPLogError(_:message:log:)(v1, 0, 0xE000000000000000, v6);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_errorRelease(v1);
  v2(v6, v7);
  v16 = (_QWORD *)(v0[9] + v0[36]);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_10000806C(v16, v16[3]);
  v17 = (_QWORD *)swift_task_alloc(dword_100634A5C);
  v0[42] = v17;
  *v17 = v0;
  v17[1] = sub_1000A9E98;
  return sub_1000F6C28(v0[32], v0[33], v0[23]);
}

uint64_t sub_1000A9E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 336);
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v3[33]);
  if (v1)
    v5 = sub_1000AA0A4;
  else
    v5 = sub_1000A9F0C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A9F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationManager generated new identity key. Returning.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 280);
  v7 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 104);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 224);
  v10 = *(_QWORD *)(v1 + 232);
  v12 = *(_QWORD *)(v1 + 208);
  v11 = *(_QWORD *)(v1 + 216);
  v13 = *(_QWORD *)(v1 + 200);
  v15 = *(_QWORD *)(v1 + 176);
  v14 = *(_QWORD *)(v1 + 184);
  v16 = *(_QWORD *)(v1 + 152);
  v17 = *(_QWORD *)(v1 + 144);
  v19 = *(_QWORD *)(v1 + 136);
  v20 = *(_QWORD *)(v1 + 128);
  v21 = *(_QWORD *)(v1 + 120);
  v22 = *(_QWORD *)(v1 + 96);
  v23 = *(_QWORD *)(v1 + 344);
  (*(void (**)(uint64_t, _QWORD))(v1 + 272))(v14, *(_QWORD *)(v1 + 160));
  sub_100035DAC(v13, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v23);
}

uint64_t sub_1000AA0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  (*(void (**)(_QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  sub_100035DAC(v4, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
  swift_errorRetain(v5);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100544570, v5, v11, 0, v12, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005445B0, 338);
  swift_willThrow(v15);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AA2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_100004828(&qword_100632D70);
  v3[10] = v4;
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v5);
  v3[13] = swift_task_alloc(v5);
  v3[14] = swift_task_alloc(v5);
  v6 = type metadata accessor for DIPSignpost.Config(0);
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost(0);
  v3[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[17] = v8;
  v3[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v3[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[20] = v10;
  v3[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v3[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[23] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[24] = swift_task_alloc(v13);
  v3[25] = swift_task_alloc(v13);
  v3[26] = swift_task_alloc(v13);
  v3[27] = swift_task_alloc(v13);
  v3[28] = swift_task_alloc(v13);
  v3[29] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100632D50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v14);
  v3[31] = swift_task_alloc(v14);
  v15 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v3[32] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[33] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[34] = swift_task_alloc(v17);
  v3[35] = swift_task_alloc(v17);
  v3[36] = swift_task_alloc(v17);
  v18 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration(0);
  v3[37] = v18;
  v3[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AA4BC, 0, 0);
}

uint64_t sub_1000AA4BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  sub_1000ACB04(v0[38]);
  v1 = (uint64_t *)(v0[38] + *(int *)(v0[37] + 20));
  v2 = *v1;
  v3 = (void *)v1[1];
  v4 = swift_bridgeObjectRetain(v3);
  v5 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v4);
  v7 = v6;
  sub_1000B3C7C(v5, v6, v2, v3);
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease(v3);
  v0[39] = v9;
  v0[40] = v11;
  swift_bridgeObjectRelease(v7);
  v12 = (uint64_t **)swift_task_alloc(dword_100632D4C);
  v0[41] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = (uint64_t *)sub_1000AA7A8;
  return sub_1000ADF00(v0[31], v9, v11);
}

uint64_t sub_1000AA7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000AC160;
  else
    v3 = sub_1000AA80C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000AA80C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[32];
  v2 = v0[31];
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[33] + 48);
  v0[43] = v3;
  if (v3(v2, 1, v1) == 1)
  {
    sub_100008030(v2, &qword_100632D50);
    v4 = v0[9];
    v5 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    v0[51] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000806C((_QWORD *)(v4 + v5), *(_QWORD *)(v4 + v5 + 24));
    v6 = (_QWORD *)swift_task_alloc(dword_100634A04);
    v0[52] = v6;
    *v6 = v0;
    v6[1] = sub_1000ABABC;
    return sub_1000FA20C(v0[39], v0[40]);
  }
  else
  {
    v8 = v0[40];
    v9 = sub_1000B3B2C(v2, v0[36]);
    defaultLogger()(v9);
    v10 = swift_bridgeObjectRetain_n(v8, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = v0[40];
    if (v13)
    {
      v15 = v0[39];
      v23 = v0[23];
      v24 = v0[22];
      v25 = v0[29];
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v26 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(v14);
      v0[6] = sub_1000E3AC8(v15, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v16 + 4);
      swift_bridgeObjectRelease_n(v14, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderAuthenticationManager found existing session for sessionIdentifier %s. Returning.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      v18 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v18(v25, v24);
    }
    else
    {
      v19 = v0[29];
      v20 = v0[22];
      v21 = v0[23];
      swift_bridgeObjectRelease_n(v0[40], 2);

      v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v18(v19, v20);
    }
    v0[44] = v18;
    v22 = (_QWORD *)swift_task_alloc(dword_100632D8C);
    v0[45] = v22;
    *v22 = v0;
    v22[1] = sub_1000AAA9C;
    return sub_1000AF54C(v0[30], v0[36]);
  }
}

uint64_t sub_1000AAA9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_1000AAAF0, 0, 0);
}

void sub_1000AAAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v1 = *(_QWORD *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0 + 344))(v1, 1, *(_QWORD *)(v0 + 256)) != 1)
  {
    v24 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
    sub_100035DAC(v25, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    sub_100035DAC(v24, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    v27 = v1;
    v28 = v26;
LABEL_15:
    sub_1000B3B2C(v27, v28);
    v31 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 288);
    v32 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 240);
    v34 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 208);
    v37 = *(_QWORD *)(v0 + 216);
    v120 = *(_QWORD *)(v0 + 200);
    v122 = *(_QWORD *)(v0 + 192);
    v124 = *(_QWORD *)(v0 + 168);
    v127 = *(_QWORD *)(v0 + 144);
    v129 = *(_QWORD *)(v0 + 120);
    v131 = *(_QWORD *)(v0 + 112);
    v133 = *(_QWORD *)(v0 + 104);
    v135 = *(_QWORD *)(v0 + 96);
    v139 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    swift_task_dealloc(v139);
    v39 = *(void (**)(void))(v0 + 8);
LABEL_16:
    v39();
    return;
  }
  v3 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  sub_100008030(v1, &qword_100632D50);
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v5);
  sub_1000B3B70(v2, v3);
  v7 = *(_QWORD *)(v0 + 280);
  if (!v6)
  {
    sub_100035DAC(v7, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(v7 + *(int *)(*(_QWORD *)(v0 + 256) + 40) + 8);
  v9 = sub_100035DAC(v7, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  if (v8 >> 60 != 15)
  {
LABEL_14:
    v29 = *(_QWORD *)(v0 + 320);
    sub_100035DAC(*(_QWORD *)(v0 + 304), type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    swift_bridgeObjectRelease(v29);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 56);
    goto LABEL_15;
  }
  v10 = defaultLogger()(v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderAuthenticationManager existing session with token has missing merchantLogo, refetching", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 176);

  v14(v17, v18);
  v19 = *(_QWORD *)(v15 + *(int *)(v16 + 28));
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v40 = *(_QWORD *)(v15 + *(int *)(v16 + 28));
    else
      v40 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v15 + *(int *)(v16 + 28)));
    if (_CocoaArrayWrapper.endIndex.getter(v40))
      goto LABEL_8;
LABEL_21:
    v41 = *(_QWORD *)(v0 + 288);
    v43 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v42, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v44);
    v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v132 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v134 = v46;
    v47 = swift_allocError(v46, v132, 0, 0);
    v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100543CC0, 0, v42, 0, v45, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 144);
    swift_willThrow(v48);
    sub_100035DAC(v41, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v50 = *(_QWORD *)(v0 + 152);
    v49 = *(_QWORD *)(v0 + 160);
    v51 = *(_QWORD *)(v0 + 104);
    v52 = *(_QWORD *)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 88);
    v136 = *(_QWORD *)(v0 + 80);
    swift_getErrorValue(v47, v0 + 40, v0 + 16);
    v54 = *(_QWORD *)(v0 + 24);
    v55 = *(_QWORD *)(v0 + 32);
    v140 = v47;
    swift_errorRetain(v47);
    Error.dipErrorCode.getter(v54, v55);
    v56 = enum case for DIPError.Code.documentReaderSessionExpired(_:);
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 104);
    v57(v51, enum case for DIPError.Code.documentReaderSessionExpired(_:), v50);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v50);
    v58 = v53 + *(int *)(v136 + 48);
    sub_100038B24(v52, v53, &qword_1006335E0);
    sub_100038B24(v51, v58, &qword_1006335E0);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    v60 = v59(v53, 1, v50);
    v61 = *(_QWORD *)(v0 + 152);
    if (v60 == 1)
    {
      v62 = *(_QWORD *)(v0 + 112);
      sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
      sub_100008030(v62, &qword_1006335E0);
      if (v59(v58, 1, v61) == 1)
      {
        v137 = v57;
        sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
        v63 = v140;
        swift_errorRelease(v140);
LABEL_28:
        MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v64);
        v81 = v80;
        v82 = swift_bridgeObjectRelease(v80);
        if (v81)
        {
          v83 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
          v84 = defaultLogger()(v83);
          v85 = Logger.logObject.getter(v84);
          v86 = static os_log_type_t.error.getter(v85);
          if (os_log_type_enabled(v85, v86))
          {
            v87 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v87 = 0;
            _os_log_impl((void *)&_mh_execute_header, v85, v86, "MobileDocumentReaderAuthenticationManager found stored session for token that is expired. A new token must be created.", v87, 2u);
            swift_slowDealloc(v87, -1, -1);
          }
          v125 = *(_QWORD *)(v0 + 304);
          v88 = *(_QWORD *)(v0 + 208);
          v90 = *(_QWORD *)(v0 + 176);
          v89 = *(_QWORD *)(v0 + 184);
          v91 = *(_QWORD *)(v0 + 168);
          v92 = *(_QWORD *)(v0 + 152);

          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v90);
          v137(v91, v56, v92);
          v93 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v94 = swift_allocError(v134, v132, 0, 0);
          v95 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100544390, 0, v91, 0, v93, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 163);
          swift_willThrow(v95);
          swift_errorRelease(v140);
          sub_100035DAC(v125, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
          v96 = *(_QWORD *)(v0 + 304);
          v110 = *(_QWORD *)(v0 + 288);
          v111 = *(_QWORD *)(v0 + 280);
          v112 = *(_QWORD *)(v0 + 272);
          v113 = *(_QWORD *)(v0 + 248);
          v114 = *(_QWORD *)(v0 + 240);
          v115 = *(_QWORD *)(v0 + 232);
          v116 = *(_QWORD *)(v0 + 224);
          v117 = *(_QWORD *)(v0 + 216);
          v118 = *(_QWORD *)(v0 + 208);
          v119 = *(_QWORD *)(v0 + 200);
          v121 = *(_QWORD *)(v0 + 192);
          v97 = *(_QWORD *)(v0 + 168);
          v123 = *(_QWORD *)(v0 + 144);
          v126 = *(_QWORD *)(v0 + 120);
          v128 = *(_QWORD *)(v0 + 112);
          v130 = *(_QWORD *)(v0 + 104);
          v138 = *(_QWORD *)(v0 + 96);
          v141 = *(_QWORD *)(v0 + 88);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v97, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
          swift_errorRetain(v94);
          v98 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          swift_allocError(v134, v132, 0, 0);
          v99 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x80000001005442B0, v94, v97, 0, v98, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 187);
          swift_willThrow(v99);
          swift_errorRelease(v94);
          swift_task_dealloc(v96);
          swift_task_dealloc(v110);
          swift_task_dealloc(v111);
          swift_task_dealloc(v112);
          swift_task_dealloc(v113);
          swift_task_dealloc(v114);
          swift_task_dealloc(v115);
          swift_task_dealloc(v116);
          swift_task_dealloc(v117);
          swift_task_dealloc(v118);
          swift_task_dealloc(v119);
          swift_task_dealloc(v121);
          swift_task_dealloc(v97);
          swift_task_dealloc(v123);
          swift_task_dealloc(v126);
          swift_task_dealloc(v128);
          swift_task_dealloc(v130);
          swift_task_dealloc(v138);
          swift_task_dealloc(v141);
          v39 = *(void (**)(void))(v0 + 8);
          goto LABEL_16;
        }
        v106 = defaultLogger()(v82);
        v107 = Logger.logObject.getter(v106);
        v108 = static os_log_type_t.error.getter(v107);
        if (os_log_type_enabled(v107, v108))
        {
          v109 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v109 = 0;
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "MobileDocumentReaderAuthenticationManager found stored session for tokenless that is expired. Creating new one.", v109, 2u);
          swift_slowDealloc(v109, -1, -1);

          swift_errorRelease(v63);
        }
        else
        {
          swift_errorRelease(v63);

        }
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
LABEL_33:
        v103 = *(_QWORD *)(v0 + 72);
        v104 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
        *(_QWORD *)(v0 + 408) = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
        sub_10000806C((_QWORD *)(v103 + v104), *(_QWORD *)(v103 + v104 + 24));
        v105 = (_QWORD *)swift_task_alloc(dword_100634A04);
        *(_QWORD *)(v0 + 416) = v105;
        *v105 = v0;
        v105[1] = sub_1000ABABC;
        sub_1000FA20C(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
        return;
      }
    }
    else
    {
      sub_100038B24(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), &qword_1006335E0);
      if (v59(v58, 1, v61) != 1)
      {
        v137 = v57;
        v70 = *(_QWORD *)(v0 + 160);
        v71 = *(_QWORD *)(v0 + 168);
        v72 = *(_QWORD *)(v0 + 152);
        v74 = *(_QWORD *)(v0 + 104);
        v73 = *(_QWORD *)(v0 + 112);
        v75 = *(_QWORD *)(v0 + 88);
        v76 = *(_QWORD *)(v0 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v71, v58, v72);
        v77 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
        v78 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v71, v72, v77);
        v79 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
        v79(v71, v72);
        sub_100008030(v74, &qword_1006335E0);
        sub_100008030(v73, &qword_1006335E0);
        v79(v76, v72);
        sub_100008030(v75, &qword_1006335E0);
        v63 = v140;
        v69 = swift_errorRelease(v140);
        if ((v78 & 1) != 0)
          goto LABEL_28;
LABEL_32:
        v100 = *(_QWORD *)(v0 + 184);
        v101 = *(_QWORD *)(v0 + 192);
        v102 = *(_QWORD *)(v0 + 176);
        defaultLogger()(v69);
        DIPLogError(_:message:log:)(v63, 0xD000000000000070, 0x8000000100544310, v101);
        swift_errorRelease(v63);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v102);
        goto LABEL_33;
      }
      v66 = *(_QWORD *)(v0 + 152);
      v65 = *(_QWORD *)(v0 + 160);
      v67 = *(_QWORD *)(v0 + 112);
      v68 = *(_QWORD *)(v0 + 96);
      sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
      sub_100008030(v67, &qword_1006335E0);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v68, v66);
    }
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_100632D70);
    v63 = v140;
    v69 = swift_errorRelease(v140);
    goto LABEL_32;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v15 + *(int *)(v16 + 28)));
  if (!v20)
    goto LABEL_21;
LABEL_8:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(v19 + 32);
LABEL_11:
    v22 = (uint64_t)v21;
    *(_QWORD *)(v0 + 368) = v21;
    swift_bridgeObjectRelease(v19);
    v23 = (_QWORD *)swift_task_alloc(dword_100632D94);
    *(_QWORD *)(v0 + 376) = v23;
    *v23 = v0;
    v23[1] = sub_1000AB680;
    sub_1000B4050(v22);
    return;
  }
  __break(1u);
}

uint64_t sub_1000AB680(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  *(_QWORD *)(v3 + 384) = a1;
  *(_QWORD *)(v3 + 392) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000AB6DC, 0, 0);
}

uint64_t sub_1000AB6DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)(v0 + 392) >> 60 == 15)
  {
    v1 = *(void **)(v0 + 368);
    v2 = *(_QWORD *)(v0 + 320);
    sub_100035DAC(*(_QWORD *)(v0 + 304), type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);

    swift_bridgeObjectRelease(v2);
    sub_1000B3B2C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 56));
    v4 = *(_QWORD *)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 272);
    v6 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 200);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(_QWORD *)(*(_QWORD *)(v0 + 72)+ OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage+ 24));
    v13 = (_QWORD *)swift_task_alloc(dword_100634A4C);
    *(_QWORD *)(v0 + 400) = v13;
    *v13 = v0;
    v13[1] = sub_1000AB8B4;
    return sub_1000FB478(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  }
}

uint64_t sub_1000AB8B4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_BYTE *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000AB91C, 0, 0);
}

uint64_t sub_1000AB91C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(unsigned __int8 *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 304);

  sub_100035DAC(v2, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  if (v1 == 1)
  {
    v5 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 56);
    sub_1000B3B2C(*(_QWORD *)(v0 + 288), v6);
    v7 = v6 + *(int *)(v5 + 40);
    sub_100007F78(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    *(_QWORD *)v7 = v3;
    *(_QWORD *)(v7 + 8) = v4;
  }
  else
  {
    sub_100007F78(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    sub_1000B3B2C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 56));
  }
  v9 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 96);
  v26 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ABABC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000ABB1C, 0, 0);
}

uint64_t sub_1000ABB1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationManager successfully cleaned up existing certificate.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[27];
  v7 = v1[22];
  v8 = v1[23];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (uint64_t **)swift_task_alloc(dword_100632D7C);
  v1[53] = (uint64_t)v9;
  *v9 = v1;
  v9[1] = (uint64_t *)sub_1000ABC04;
  return sub_1000B0BFC(v1[34], v1[8]);
}

uint64_t sub_1000ABC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000AC8C8;
  else
    v3 = sub_1000ABC68;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000ABC68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[15];
  v2 = (_QWORD *)(v0[9] + v0[51]);
  static DaemonSignposts.MobileDocumentReader.storeSession.getter();
  DIPSignpost.init(_:)(v1);
  sub_10000806C(v2, v2[3]);
  v3 = (_QWORD *)swift_task_alloc(dword_100634A14);
  v0[55] = v3;
  *v3 = v0;
  v3[1] = sub_1000ABCF4;
  return sub_1000F96AC(v0[34]);
}

uint64_t sub_1000ABCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000ABEE4;
  else
    v3 = sub_1000ABD58;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000ABD58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  sub_1000B3B70(v2, *(_QWORD *)(v0 + 56));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100035DAC(v2, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  sub_100035DAC(v1, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v7 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 112);
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ABEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100035DAC(v2, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  sub_100035DAC(v1, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v6 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 168);
  v24 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v12, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v6);
  v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v14 = type metadata accessor for DIPError(0);
  v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v14, v15, 0, 0);
  v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x80000001005442B0, v6, v12, 0, v13, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 187);
  swift_willThrow(v16);
  swift_errorRelease(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v12);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AC160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v84 = *(_QWORD *)(v0 + 80);
  swift_getErrorValue(v1, v0 + 40, v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v81 = v1;
  swift_errorRetain(v1);
  Error.dipErrorCode.getter(v7, v8);
  v9 = enum case for DIPError.Code.documentReaderSessionExpired(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v10(v5, enum case for DIPError.Code.documentReaderSessionExpired(_:), v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v2);
  v11 = v6 + *(int *)(v84 + 48);
  sub_100038B24(v4, v6, &qword_1006335E0);
  sub_100038B24(v5, v11, &qword_1006335E0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v13 = v12(v6, 1, v2);
  v14 = *(_QWORD *)(v0 + 152);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)(v0 + 112);
    sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
    sub_100008030(v15, &qword_1006335E0);
    v16 = v81;
    if (v12(v11, 1, v14) == 1)
    {
      v85 = v10;
      sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
      swift_errorRelease(v81);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_100038B24(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), &qword_1006335E0);
  if (v12(v11, 1, v14) == 1)
  {
    v19 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 96);
    sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
    sub_100008030(v20, &qword_1006335E0);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
    v16 = v81;
LABEL_6:
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_100632D70);
    v22 = swift_errorRelease(v16);
LABEL_12:
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 192);
    v58 = *(_QWORD *)(v0 + 176);
    defaultLogger()(v22);
    DIPLogError(_:message:log:)(v16, 0xD000000000000070, 0x8000000100544310, v57);
    swift_errorRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
LABEL_13:
    v59 = *(_QWORD *)(v0 + 72);
    v60 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    *(_QWORD *)(v0 + 408) = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
    sub_10000806C((_QWORD *)(v59 + v60), *(_QWORD *)(v59 + v60 + 24));
    v61 = (_QWORD *)swift_task_alloc(dword_100634A04);
    *(_QWORD *)(v0 + 416) = v61;
    *v61 = v0;
    v61[1] = sub_1000ABABC;
    return sub_1000FA20C(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  }
  v85 = v10;
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 112);
  v29 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v24, v11, v25);
  v30 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v24, v25, v30);
  v32 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v32(v24, v25);
  sub_100008030(v27, &qword_1006335E0);
  sub_100008030(v26, &qword_1006335E0);
  v32(v28, v25);
  sub_100008030(v29, &qword_1006335E0);
  v16 = v81;
  v22 = swift_errorRelease(v81);
  if ((v31 & 1) == 0)
    goto LABEL_12;
LABEL_8:
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v17);
  v34 = v33;
  v35 = swift_bridgeObjectRelease(v33);
  if (!v34)
  {
    v62 = defaultLogger()(v35);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "MobileDocumentReaderAuthenticationManager found stored session for tokenless that is expired. Creating new one.", v65, 2u);
      swift_slowDealloc(v65, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    goto LABEL_13;
  }
  v36 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
  v37 = defaultLogger()(v36);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "MobileDocumentReaderAuthenticationManager found stored session for token that is expired. A new token must be created.", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }
  v82 = *(_QWORD *)(v0 + 304);
  v41 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 176);
  v42 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  v85(v44, v9, v45);
  v46 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v69 = type metadata accessor for DIPError(0);
  v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v48 = swift_allocError(v69, v47, 0, 0);
  v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100544390, 0, v44, 0, v46, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 163);
  swift_willThrow(v49);
  swift_errorRelease(v16);
  sub_100035DAC(v82, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v50 = *(_QWORD *)(v0 + 304);
  v51 = *(_QWORD *)(v0 + 288);
  v66 = *(_QWORD *)(v0 + 280);
  v67 = *(_QWORD *)(v0 + 272);
  v68 = *(_QWORD *)(v0 + 248);
  v70 = *(_QWORD *)(v0 + 240);
  v71 = *(_QWORD *)(v0 + 232);
  v72 = *(_QWORD *)(v0 + 224);
  v73 = *(_QWORD *)(v0 + 216);
  v74 = *(_QWORD *)(v0 + 208);
  v75 = *(_QWORD *)(v0 + 200);
  v52 = *(_QWORD *)(v0 + 168);
  v76 = *(_QWORD *)(v0 + 192);
  v77 = *(_QWORD *)(v0 + 144);
  v78 = *(_QWORD *)(v0 + 120);
  v79 = *(_QWORD *)(v0 + 112);
  v80 = *(_QWORD *)(v0 + 104);
  v83 = *(_QWORD *)(v0 + 96);
  v86 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v52, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v48);
  v53 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v69, v47, 0, 0);
  v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x80000001005442B0, v48, v52, 0, v53, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 187);
  swift_willThrow(v54);
  swift_errorRelease(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v52);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v83);
  swift_task_dealloc(v86);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AC8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100035DAC(*(_QWORD *)(v0 + 304), type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x80000001005442B0, v1, v7, 0, v8, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001DLL, 0x80000001005442F0, 187);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v7);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ACB04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (*v43)(char *);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t);
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void (*v72)(char *, _QWORD, uint64_t);
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  id v103;
  Swift::String v104;
  Swift::String_optional v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  char *v124;
  id v125;
  Swift::String v126;
  Swift::String_optional v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  _BOOL4 v137;
  uint8_t *v138;
  uint64_t v139;
  id v140;
  Swift::String v141;
  Swift::String_optional v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  BOOL v153;
  uint8_t *v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  void (*v157)(char *, uint64_t);
  unint64_t v158;
  uint64_t v159;
  int *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t *v163;
  char *v164;
  char **v165;
  _QWORD v166[2];
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t (*v179)(char *, uint64_t, uint64_t);
  char *v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  Swift::String_optional v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;

  v173 = a1;
  v2 = type metadata accessor for Logger(0);
  v171 = *(_QWORD *)(v2 - 8);
  v172 = v2;
  v3 = __chkstk_darwin(v2);
  v170 = (char *)v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v169 = (char *)v166 - v6;
  __chkstk_darwin(v5);
  v168 = (char *)v166 - v7;
  v8 = sub_100004828((uint64_t *)&unk_1006364D0);
  __chkstk_darwin(v8);
  v179 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v178 = type metadata accessor for UUID(0);
  v176 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v177 = (char *)v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for DIPError.Code(0);
  v185 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v186 = (char *)v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100630AC0);
  __chkstk_darwin(v12);
  v181 = (char *)v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BundleRecord.RecordType(0);
  v182 = *(_QWORD *)(v14 - 8);
  v183 = v14;
  v15 = __chkstk_darwin(v14);
  v175 = (char *)v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v174 = (char *)v166 - v18;
  __chkstk_darwin(v17);
  v180 = (char *)v166 - v19;
  v184 = type metadata accessor for BundleRecord(0);
  v20 = *(_QWORD *)(v184 - 8);
  v21 = __chkstk_darwin(v184);
  v23 = (char *)v166 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)v166 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)v166 - v27;
  v29 = sub_10000806C((_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher), *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher + 24));
  v30 = v1 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  v31 = AuditToken.wrapped.getter(v29);
  v32 = v187;
  v33 = dispatch thunk of BundleRecordFetching.record(withAuditToken:)(v31);
  if (v32)
  {
    v34 = v186;
    v35 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v185 + 104))(v186, enum case for DIPError.Code.internalError(_:), v191);
LABEL_21:
    swift_errorRetain(v35);
    v85 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = type metadata accessor for DIPError(0);
    v87 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v86, v87, 0, 0);
    v88 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v34, 0, v85, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 296);
    swift_willThrow(v88);
    return swift_errorRelease(v35);
  }
  v36 = (uint64_t)v181;
  v37 = v23;
  v166[0] = v30;
  v166[1] = 0;
  v167 = v26;
  v187 = v20;
  v38 = v180;
  BundleRecord.recordType.getter(v33);
  v40 = v182;
  v39 = v183;
  v41 = (*(uint64_t (**)(char *, uint64_t))(v182 + 88))(v38, v183);
  v42 = enum case for BundleRecord.RecordType.application(_:);
  if (v41 == enum case for BundleRecord.RecordType.application(_:))
  {
    v43 = *(uint64_t (**)(char *))(v187 + 16);
    v44 = v167;
    v180 = v28;
    v45 = v184;
    v46 = v43(v167);
  }
  else
  {
    if (v41 != enum case for BundleRecord.RecordType.applicationExtension(_:))
    {
      v70 = v191;
      v71 = v185;
      if (v41 != enum case for BundleRecord.RecordType.unknown(_:))
        (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
      v72 = *(void (**)(char *, _QWORD, uint64_t))(v71 + 104);
      v34 = v186;
      v72(v186, enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:), v70);
      v73 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v74 = type metadata accessor for DIPError(0);
      v75 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v35 = swift_allocError(v74, v75, 0, 0);
      v76 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100544060, 0, v34, 0, v73, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 254);
      swift_willThrow(v76);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v28, v184);
      v72(v34, enum case for DIPError.Code.internalError(_:), v70);
      goto LABEL_21;
    }
    v62 = v36;
    BundleRecord.containingBundleRecord.getter();
    v63 = v184;
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v36, 1, v184);
    v65 = v191;
    if (v64 == 1)
    {
      sub_100008030(v36, &qword_100630AC0);
      v66 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
      v34 = v186;
      v66(v186, enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:), v65);
      v185 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v67 = type metadata accessor for DIPError(0);
      v68 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v35 = swift_allocError(v67, v68, 0, 0);
      v69 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100544090, 0, v34, 0, v185, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 245);
      swift_willThrow(v69);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v28, v63);
      v66(v34, enum case for DIPError.Code.internalError(_:), v65);
      goto LABEL_21;
    }
    v180 = v28;
    v90 = v63;
    v91 = v62;
    v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v187 + 32);
    v93 = v92(v37, v91, v63);
    v94 = v174;
    v181 = v37;
    BundleRecord.recordType.getter(v93);
    v95 = v175;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 104))(v175, v42, v39);
    v96 = static BundleRecord.RecordType.== infix(_:_:)(v94, v95);
    v97 = *(void (**)(char *, uint64_t))(v40 + 8);
    v97(v95, v39);
    v97(v94, v39);
    if ((v96 & 1) == 0)
    {
      v55 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
      v56 = v90;
      v34 = v186;
      v55(v186, enum case for DIPError.Code.unexpectedDeviceState(_:), v65);
      v115 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v116 = type metadata accessor for DIPError(0);
      v117 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v35 = swift_allocError(v116, v117, 0, 0);
      v118 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x80000001005440C0, 0, v34, 0, v115, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 248);
      swift_willThrow(v118);
      v83 = *(void (**)(char *, uint64_t))(v187 + 8);
      v83(v181, v56);
      goto LABEL_19;
    }
    v44 = v167;
    v46 = v92(v167, (uint64_t)v181, v90);
    v45 = v90;
  }
  v183 = BundleRecord.applicationIdentifier.getter(v46);
  v48 = (uint64_t)v179;
  if (!v47)
  {
    v34 = v186;
    v55 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
    v56 = v45;
    v57 = v191;
    v55(v186, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v191);
    v77 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v78 = type metadata accessor for DIPError(0);
    v79 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v35 = swift_allocError(v78, v79, 0, 0);
    v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100544100, 0, v34, 0, v77, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 258);
    goto LABEL_18;
  }
  v49 = v47;
  v50 = BundleRecord.bundleIdentifier.getter();
  if (!v51)
  {
    swift_bridgeObjectRelease(v49);
    v34 = v186;
    v55 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
    v56 = v45;
    v57 = v191;
    v55(v186, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v191);
    v80 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v81 = type metadata accessor for DIPError(0);
    v82 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v35 = swift_allocError(v81, v82, 0, 0);
    v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100544140, 0, v34, 0, v80, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 262);
    goto LABEL_18;
  }
  v52 = v50;
  v181 = v51;
  v182 = v49;
  BundleRecord.installationIdentifier.getter();
  v53 = v176;
  v54 = v178;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v48, 1, v178) == 1)
  {
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    sub_100008030(v48, (uint64_t *)&unk_1006364D0);
    v34 = v186;
    v55 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
    v56 = v45;
    v57 = v191;
    v55(v186, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v191);
    v58 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v59 = type metadata accessor for DIPError(0);
    v60 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v35 = swift_allocError(v59, v60, 0, 0);
    v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x8000000100544180, 0, v34, 0, v58, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 266);
LABEL_18:
    swift_willThrow(v61);
    v83 = *(void (**)(char *, uint64_t))(v187 + 8);
    v84 = v44;
    v65 = v57;
    v83(v84, v56);
LABEL_19:
    v83(v180, v56);
LABEL_20:
    v55(v34, enum case for DIPError.Code.internalError(_:), v65);
    goto LABEL_21;
  }
  v179 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 32);
  v98 = v179(v177, v48, v54);
  v99 = v53;
  v100 = BundleRecord.teamIdentifier.getter(v98);
  if (!v101)
  {
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    v34 = v186;
    v55 = *(void (**)(char *, _QWORD, uint64_t))(v185 + 104);
    v55(v186, enum case for DIPError.Code.documentReaderIdentifiersMissing(_:), v191);
    v119 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v120 = type metadata accessor for DIPError(0);
    v121 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v35 = swift_allocError(v120, v121, 0, 0);
    v122 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001005441C0, 0, v34, 0, v119, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000026, 0x8000000100544030, 270);
    swift_willThrow(v122);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v177, v178);
    v123 = *(void (**)(char *, uint64_t))(v187 + 8);
    v124 = v44;
    v65 = v191;
    v123(v124, v45);
    v123(v180, v45);
    goto LABEL_20;
  }
  v185 = v101;
  v186 = (char *)v100;
  v191 = v52;
  v102 = (void *)objc_opt_self(NSUserDefaults);
  v103 = objc_msgSend(v102, "standardUserDefaults");
  v104._countAndFlagsBits = 0xD00000000000003CLL;
  v104._object = (void *)0x80000001005441F0;
  v105 = NSUserDefaults.internalString(forKey:)(v104);

  if (v105.value._object)
  {
    v188 = v105;
    v106 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v189, &type metadata for String, v106);
    swift_bridgeObjectRelease(v105.value._object);
    v107 = v190;
    if (v190)
    {
      v183 = v189;
      v108 = swift_bridgeObjectRelease(v182);
      v109 = v168;
      defaultLogger()(v108);
      v110 = swift_bridgeObjectRetain_n(v107, 2);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.debug.getter(v111);
      if (os_log_type_enabled(v111, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc(12, -1);
        v114 = swift_slowAlloc(32, -1);
        v189 = v114;
        *(_DWORD *)v113 = 136315138;
        swift_bridgeObjectRetain(v107);
        v188.value._countAndFlagsBits = sub_1000E3AC8(v183, v107, &v189);
        v45 = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v188.value._object, v113 + 4);
        swift_bridgeObjectRelease_n(v107, 3);
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "MobileDocumentReaderAuthenticationManager using override applicationIdentifier %s for storing and fetching terminal authentication certificates.", v113, 0xCu);
        swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v114, -1, -1);
        swift_slowDealloc(v113, -1, -1);

        (*(void (**)(char *, uint64_t))(v171 + 8))(v168, v172);
      }
      else
      {

        swift_bridgeObjectRelease_n(v107, 2);
        (*(void (**)(char *, uint64_t))(v171 + 8))(v109, v172);
      }
      v182 = v107;
      v44 = v167;
    }
  }
  v125 = objc_msgSend(v102, "standardUserDefaults");
  v126._countAndFlagsBits = 0xD000000000000037;
  v126._object = (void *)0x8000000100544230;
  v127 = NSUserDefaults.internalString(forKey:)(v126);

  if (v127.value._object)
  {
    v188 = v127;
    v128 = sub_1000B3C38();
    Collection.nilIfEmpty.getter(&v189, &type metadata for String, v128);
    swift_bridgeObjectRelease(v127.value._object);
    v129 = v190;
    if (v190)
    {
      v130 = v102;
      v131 = v189;
      v132 = swift_bridgeObjectRelease(v181);
      v133 = v169;
      defaultLogger()(v132);
      v134 = swift_bridgeObjectRetain_n(v129, 2);
      v135 = Logger.logObject.getter(v134);
      v136 = static os_log_type_t.debug.getter(v135);
      v137 = os_log_type_enabled(v135, v136);
      v191 = v131;
      if (v137)
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v139 = swift_slowAlloc(32, -1);
        v189 = v139;
        *(_DWORD *)v138 = 136315138;
        swift_bridgeObjectRetain(v129);
        v188.value._countAndFlagsBits = sub_1000E3AC8(v131, v129, &v189);
        v45 = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v188.value._object, v138 + 4);
        swift_bridgeObjectRelease_n(v129, 3);
        _os_log_impl((void *)&_mh_execute_header, v135, v136, "MobileDocumentReaderAuthenticationManager using override bundleIdentifier %s for fetching terminal authentication certificates.", v138, 0xCu);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v139, -1, -1);
        swift_slowDealloc(v138, -1, -1);

        (*(void (**)(char *, uint64_t))(v171 + 8))(v169, v172);
      }
      else
      {

        swift_bridgeObjectRelease_n(v129, 2);
        (*(void (**)(char *, uint64_t))(v171 + 8))(v133, v172);
      }
      v181 = (char *)v129;
      v44 = v167;
      v102 = v130;
    }
  }
  v140 = objc_msgSend(v102, "standardUserDefaults");
  v141._countAndFlagsBits = 0xD000000000000035;
  v141._object = (void *)0x8000000100544270;
  v142 = NSUserDefaults.internalString(forKey:)(v141);

  v143 = v177;
  v144 = v173;
  if (v142.value._object
    && (v188 = v142,
        v145 = sub_1000B3C38(),
        Collection.nilIfEmpty.getter(&v189, &type metadata for String, v145),
        swift_bridgeObjectRelease(v142.value._object),
        (v146 = v190) != 0))
  {
    v147 = v189;
    v148 = swift_bridgeObjectRelease(v185);
    v149 = v170;
    defaultLogger()(v148);
    v150 = swift_bridgeObjectRetain_n(v146, 2);
    v151 = Logger.logObject.getter(v150);
    v152 = static os_log_type_t.debug.getter(v151);
    v153 = os_log_type_enabled(v151, v152);
    v186 = (char *)v147;
    if (v153)
    {
      v154 = (uint8_t *)swift_slowAlloc(12, -1);
      v155 = swift_slowAlloc(32, -1);
      v189 = v155;
      *(_DWORD *)v154 = 136315138;
      swift_bridgeObjectRetain(v146);
      v188.value._countAndFlagsBits = sub_1000E3AC8(v147, v146, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v188.value._object, v154 + 4);
      swift_bridgeObjectRelease_n(v146, 3);
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "MobileDocumentReaderAuthenticationManager using override teamIdentifier %s for fetching terminal authentication certificates.", v154, 0xCu);
      swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1, -1);
      swift_slowDealloc(v154, -1, -1);

      (*(void (**)(char *, uint64_t))(v171 + 8))(v170, v172);
      v156 = *(void (**)(char *, uint64_t))(v187 + 8);
      v156(v167, v45);
    }
    else
    {
      swift_bridgeObjectRelease_n(v146, 2);

      (*(void (**)(char *, uint64_t))(v171 + 8))(v149, v172);
      v156 = *(void (**)(char *, uint64_t))(v187 + 8);
      v156(v44, v45);
    }
    v156(v180, v45);
    v158 = v146;
    v143 = v177;
    v144 = v173;
  }
  else
  {
    v157 = *(void (**)(char *, uint64_t))(v187 + 8);
    v157(v44, v45);
    v157(v180, v45);
    v158 = v185;
  }
  v159 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v144, v166[0], v159);
  v160 = (int *)type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration(0);
  result = v179((char *)(v144 + v160[7]), (uint64_t)v143, v178);
  v161 = (_QWORD *)(v144 + v160[5]);
  v162 = v182;
  *v161 = v183;
  v161[1] = v162;
  v163 = (uint64_t *)(v144 + v160[6]);
  v164 = v181;
  *v163 = v191;
  v163[1] = (uint64_t)v164;
  v165 = (char **)(v144 + v160[8]);
  *v165 = v186;
  v165[1] = (char *)v158;
  return result;
}

uint64_t sub_1000ADF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v10 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration(0);
  v4[19] = v10;
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Milestone(0);
  v4[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[22] = v12;
  v4[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v4[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[26] = swift_task_alloc(v15);
  v4[27] = swift_task_alloc(v15);
  v16 = sub_100004828(&qword_100632D50);
  v4[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v4[29] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[30] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[31] = swift_task_alloc(v19);
  v4[32] = swift_task_alloc(v19);
  v4[33] = swift_task_alloc(v19);
  v4[34] = swift_task_alloc(v19);
  v20 = type metadata accessor for DIPSignpost.Config(0);
  v4[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DIPSignpost(0);
  v4[36] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[37] = v22;
  v4[38] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AE0DC, 0, 0);
}

uint64_t sub_1000AE0DC()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x8000000100543B40;
  v2._countAndFlagsBits = 0xD000000000000032;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    sub_1000B286C(*(char **)(v0 + 64));
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 56))(*(_QWORD *)(v0 + 64), 0, 1, *(_QWORD *)(v0 + 232));
    v7 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 88);
    static DaemonSignposts.MobileDocumentReader.sessionStatus.getter();
    DIPSignpost.init(_:)(v4);
    sub_10000806C((_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
    v6 = (_QWORD *)swift_task_alloc(dword_100634A0C);
    *(_QWORD *)(v0 + 312) = v6;
    *v6 = v0;
    v6[1] = sub_1000AE484;
    return sub_1000F8B94(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_1000AE484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000AF324;
  else
    v3 = sub_1000AE4E8;
  return swift_task_switch(v3, 0, 0);
}

void sub_1000AE4E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177[2];

  v1 = v0[29];
  v2 = v0[30];
  v3 = v0[28];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = v0[37];
    v4 = v0[38];
    v6 = v0[36];
    v7 = v0[8];
    sub_100008030(v3, &qword_100632D50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
LABEL_3:
    v8 = v0[34];
    v9 = v0[35];
    v11 = v0[32];
    v10 = v0[33];
    v12 = v0[31];
    v14 = v0[27];
    v13 = v0[28];
    v15 = v0[26];
    v16 = v0[23];
    v153 = v0[20];
    v158 = v0[18];
    v165 = v0[17];
    v172 = v0[14];
    swift_task_dealloc(v0[38]);
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v153);
    swift_task_dealloc(v158);
    swift_task_dealloc(v165);
    swift_task_dealloc(v172);
    v17 = (void (*)(void))v0[1];
LABEL_29:
    v17();
    return;
  }
  v19 = v0[33];
  v18 = v0[34];
  v20 = v0[10];
  v21 = sub_1000B3B2C(v3, v18);
  defaultLogger()(v21);
  sub_1000B3B70(v18, v19);
  v22 = swift_bridgeObjectRetain_n(v20, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  v25 = os_log_type_enabled(v23, v24);
  v26 = v0[33];
  if (v25)
  {
    v166 = v0[27];
    v154 = v0[25];
    v159 = v0[24];
    v28 = v0[9];
    v27 = v0[10];
    v29 = swift_slowAlloc(22, -1);
    v150 = swift_slowAlloc(64, -1);
    v177[0] = v150;
    *(_DWORD *)v29 = 136315394;
    swift_bridgeObjectRetain(v27);
    v0[6] = sub_1000E3AC8(v28, v27, v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v29 + 4);
    swift_bridgeObjectRelease_n(v27, 3);
    *(_WORD *)(v29 + 12) = 2080;
    type metadata accessor for SecCertificate(0);
    v31 = Array<A>.base64EncodedStrings()(v30);
    if (v31)
      v32 = (_QWORD *)v31;
    else
      v32 = _swiftEmptyArrayStorage;
    v33 = Array.description.getter(v32, &type metadata for String);
    v35 = v34;
    swift_bridgeObjectRelease(v32);
    v0[7] = sub_1000E3AC8(v33, v35, v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v29 + 14);
    swift_bridgeObjectRelease(v35);
    sub_100035DAC(v26, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "MobileDocumentReaderAuthenticationManager found certificate for sessionIdentifier %s. Certificate Chain: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v150, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v150, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v154 + 8);
    v37 = v36(v166, v159);
  }
  else
  {
    v38 = v0[27];
    v39 = v0[24];
    v40 = v0[25];
    swift_bridgeObjectRelease_n(v0[10], 2);
    sub_100035DAC(v26, type metadata accessor for MobileDocumentReaderAuthenticationSession);

    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    v37 = v36(v38, v39);
  }
  v41 = v0[40];
  v43 = v0[22];
  v42 = v0[23];
  v45 = v0[20];
  v44 = v0[21];
  static MobileDocumentReaderMilestone.prepareCertificateFound.getter(v37);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  sub_1000ACB04(v45);
  if (v41)
  {
    v144 = v41;
    v47 = v0[37];
    v46 = v0[38];
    v48 = v0[36];
    sub_100035DAC(v0[34], type metadata accessor for MobileDocumentReaderAuthenticationSession);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
LABEL_28:
    v112 = v0[38];
    v113 = v0[34];
    v114 = v0[35];
    v115 = v0[32];
    v116 = v0[33];
    v145 = v0[31];
    v147 = v0[28];
    *(_QWORD *)typea = v0[27];
    v152 = v0[26];
    v156 = v0[23];
    v162 = v0[20];
    v169 = v0[18];
    v175 = v0[17];
    v117 = v0[14];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[13] + 104))(v117, enum case for DIPError.Code.internalError(_:), v0[12]);
    swift_errorRetain(v144);
    v118 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v119 = type metadata accessor for DIPError(0);
    v120 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v119, v120, 0, 0);
    v121 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100543B80, v144, v117, 0, v118, 0xD000000000000083, 0x8000000100543BC0, 0x286E6F6973736573, 0xED0000293A726F66, 227);
    swift_willThrow(v121);
    swift_errorRelease(v144);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v113);
    swift_task_dealloc(v116);
    swift_task_dealloc(v115);
    swift_task_dealloc(v145);
    swift_task_dealloc(v147);
    swift_task_dealloc(*(_QWORD *)typea);
    swift_task_dealloc(v152);
    swift_task_dealloc(v156);
    swift_task_dealloc(v162);
    swift_task_dealloc(v169);
    swift_task_dealloc(v175);
    swift_task_dealloc(v117);
    v17 = (void (*)(void))v0[1];
    goto LABEL_29;
  }
  v49 = v0[34];
  v51 = v0[19];
  v50 = v0[20];
  v52 = (uint64_t *)(v50 + *(int *)(v51 + 20));
  v53 = *v52;
  v54 = v52[1];
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
  v55(v0[18], v50 + *(int *)(v51 + 28), v0[15]);
  v56 = *(_QWORD *)(v49 + 16);
  v57 = *(_QWORD *)(v49 + 24);
  if ((v56 != v53 || v57 != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v53, v54, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v54);
    goto LABEL_23;
  }
  v58 = v0[18];
  v59 = v0[34] + *(int *)(v0[29] + 24);
  v60 = swift_bridgeObjectRetain(v54);
  v61 = static UUID.== infix(_:_:)(v59, v58, v60);
  if ((v61 & 1) == 0)
  {
LABEL_23:
    v167 = v53;
    v160 = (void (*)(uint64_t, uint64_t))v36;
    v71 = v0[34];
    v73 = v0[31];
    v72 = v0[32];
    v75 = v0[17];
    v74 = v0[18];
    v76 = v0[15];
    defaultLogger()(v61);
    v55(v75, v74, v76);
    sub_1000B3B70(v71, v72);
    sub_1000B3B70(v71, v73);
    swift_bridgeObjectRetain(v54);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.debug.getter(v78);
    v80 = os_log_type_enabled(v78, v79);
    v82 = v0[31];
    v81 = v0[32];
    if (v80)
    {
      v151 = v0[25];
      v155 = v0[24];
      v161 = v0[26];
      type = v79;
      v83 = v0[17];
      v141 = v0[16];
      v142 = v0[15];
      v143 = v0[31];
      v84 = swift_slowAlloc(42, -1);
      v146 = swift_slowAlloc(128, -1);
      v177[0] = v146;
      *(_DWORD *)v84 = 136315906;
      swift_bridgeObjectRetain(v54);
      v0[2] = sub_1000E3AC8(v167, v54, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v84 + 4);
      v85 = swift_bridgeObjectRelease_n(v54, 3);
      *(_WORD *)(v84 + 12) = 2080;
      v86 = UUID.uuidString.getter(v85);
      v88 = v87;
      v0[3] = sub_1000E3AC8(v86, v87, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v84 + 14);
      swift_bridgeObjectRelease(v88);
      v168 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
      v168(v83, v142);
      *(_WORD *)(v84 + 22) = 2080;
      v89 = *(_QWORD *)(v81 + 16);
      v90 = *(_QWORD *)(v81 + 24);
      swift_bridgeObjectRetain(v90);
      v0[4] = sub_1000E3AC8(v89, v90, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v84 + 24);
      swift_bridgeObjectRelease(v90);
      sub_100035DAC(v81, type metadata accessor for MobileDocumentReaderAuthenticationSession);
      *(_WORD *)(v84 + 32) = 2080;
      v91 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v142, v91);
      v94 = v93;
      v0[5] = sub_1000E3AC8(v92, v93, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v84 + 34);
      swift_bridgeObjectRelease(v94);
      sub_100035DAC(v143, type metadata accessor for MobileDocumentReaderAuthenticationSession);
      _os_log_impl((void *)&_mh_execute_header, v78, type, "MobileDocumentReaderAuthenticationManager found mismatch between calling app identifiers %s, %s and stored session app identifiers %s, %s", (uint8_t *)v84, 0x2Au);
      swift_arrayDestroy(v146, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1, -1);
      swift_slowDealloc(v84, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v161, v155);
    }
    else
    {
      v95 = v0[26];
      v96 = v0[24];
      v98 = v0[16];
      v97 = v0[17];
      v99 = v0[15];
      swift_bridgeObjectRelease_n(v54, 2);
      v168 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
      v168(v97, v99);
      sub_100035DAC(v81, type metadata accessor for MobileDocumentReaderAuthenticationSession);
      sub_100035DAC(v82, type metadata accessor for MobileDocumentReaderAuthenticationSession);

      v160(v95, v96);
    }
    v100 = v0[37];
    v101 = v0[38];
    v174 = v0[36];
    v102 = v0[34];
    v103 = v0[20];
    v104 = v0[18];
    v105 = v0[14];
    v106 = v0[15];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[13] + 104))(v105, enum case for DIPError.Code.documentReaderSessionAppMismatch(_:), v0[12]);
    v107 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v108 = type metadata accessor for DIPError(0);
    v109 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v110 = swift_allocError(v108, v109, 0, 0);
    v111 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000006FLL, 0x8000000100543C50, 0, v105, 0, v107, 0xD000000000000083, 0x8000000100543BC0, 0x286E6F6973736573, 0xED0000293A726F66, 216);
    v144 = v110;
    swift_willThrow(v111);
    v168(v104, v106);
    sub_100035DAC(v103, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    sub_100035DAC(v102, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v174);
    goto LABEL_28;
  }
  v62 = v0[34];
  v63 = v0[29];
  swift_bridgeObjectRelease(v54);
  v64 = *(_QWORD *)(v62 + *(int *)(v63 + 28));
  if (!((unint64_t)v64 >> 62))
  {
    v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v64);
    if (v65)
      goto LABEL_18;
LABEL_34:
    v129 = v0[38];
    v171 = v0[37];
    v176 = v0[36];
    v157 = v0[20];
    v164 = v0[34];
    v130 = v0[18];
    v132 = v0[15];
    v131 = v0[16];
    v133 = v0[13];
    v134 = v0[14];
    v135 = v0[12];
    swift_bridgeObjectRelease(v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v133 + 104))(v134, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v135);
    v136 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v137 = type metadata accessor for DIPError(0);
    v138 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v139 = swift_allocError(v137, v138, 0, 0);
    v140 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100543CC0, 0, v134, 0, v136, 0xD000000000000083, 0x8000000100543BC0, 0x286E6F6973736573, 0xED0000293A726F66, 220);
    v144 = v139;
    swift_willThrow(v140);
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v132);
    sub_100035DAC(v157, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    sub_100035DAC(v164, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v129, v176);
    goto LABEL_28;
  }
  if (v64 < 0)
    v128 = *(_QWORD *)(v62 + *(int *)(v63 + 28));
  else
    v128 = v64 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v64);
  if (!_CocoaArrayWrapper.endIndex.getter(v128))
    goto LABEL_34;
LABEL_18:
  if ((v64 & 0xC000000000000001) != 0)
  {
    v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v64);
    goto LABEL_21;
  }
  if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v66 = *(id *)(v64 + 32);
LABEL_21:
    v67 = v66;
    swift_bridgeObjectRelease(v64);
    v68 = v67;
    sub_1000B3070(v67);
    v69 = v0[38];
    v173 = v0[37];
    v70 = v0[34];
    v163 = v0[30];
    v170 = v0[29];
    v122 = v0[20];
    v123 = v0[18];
    v125 = v0[15];
    v124 = v0[16];
    v126 = v0[36];
    v127 = v0[8];

    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v123, v125);
    sub_100035DAC(v122, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    sub_1000B3B2C(v70, v127);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v163 + 56))(v127, 0, 1, v170);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v69, v126);
    goto LABEL_3;
  }
  __break(1u);
}

uint64_t sub_1000AF324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 288);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 104))(v10, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 96));
  swift_errorRetain(v4);
  v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v12 = type metadata accessor for DIPError(0);
  v13 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v12, v13, 0, 0);
  v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100543B80, v4, v10, 0, v11, 0xD000000000000083, 0x8000000100543BC0, 0x286E6F6973736573, 0xED0000293A726F66, 227);
  swift_willThrow(v14);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v4 = type metadata accessor for MobileDocumentReaderConfiguration(0);
  v3[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[18] = v5;
  v3[19] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[21] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v8);
  v3[23] = swift_task_alloc(v8);
  v3[24] = swift_task_alloc(v8);
  v3[25] = swift_task_alloc(v8);
  v3[26] = swift_task_alloc(v8);
  v3[27] = swift_task_alloc(v8);
  v3[28] = swift_task_alloc(v8);
  v9 = type metadata accessor for Date(0);
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v11);
  v3[32] = swift_task_alloc(v11);
  v3[33] = swift_task_alloc(v11);
  v12 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v3[34] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[35] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v14);
  v3[37] = swift_task_alloc(v14);
  v3[38] = swift_task_alloc(v14);
  v3[39] = swift_task_alloc(v14);
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  v3[42] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000AF6DC, 0, 0);
}

uint64_t sub_1000AF6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t log;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 272) + 44) + 8);
  sub_1000B3B70(v1, *(_QWORD *)(v0 + 336));
  v3 = *(_QWORD *)(v0 + 336);
  if (v2)
  {
    v4 = sub_100035DAC(*(_QWORD *)(v0 + 336), type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_7;
  }
  v5 = (uint64_t *)(v3 + *(int *)(*(_QWORD *)(v0 + 272) + 40));
  v7 = *v5;
  v6 = v5[1];
  sub_100028034(*v5, v6);
  sub_100035DAC(v3, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  if (v6 >> 60 != 15)
  {
    v4 = sub_100007F78(v7, v6);
LABEL_7:
    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 120);
    defaultLogger()(v4);
    v33 = sub_1000B3B70(v32, v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = *(uint64_t **)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 184);
    v39 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 168);
    if (v36)
    {
      v99 = *(_QWORD *)(v0 + 168);
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v104 = v42;
      *(_DWORD *)v41 = 136315138;
      v96 = v39;
      v43 = *v37;
      v44 = v37[1];
      swift_bridgeObjectRetain(v44);
      *(_QWORD *)(v0 + 56) = sub_1000E3AC8(v43, v44, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v41 + 4);
      swift_bridgeObjectRelease(v44);
      sub_100035DAC((uint64_t)v37, type metadata accessor for MobileDocumentReaderAuthenticationSession);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "MobileDocumentReaderAuthenticationManager can only refresh tokenless sessions, returning existing session for sessionIdentifier %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v38, v96);
    }
    else
    {
      sub_100035DAC(*(_QWORD *)(v0 + 296), type metadata accessor for MobileDocumentReaderAuthenticationSession);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    }
    goto LABEL_10;
  }
  v102 = v0 + 88;
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 120);
  dispatch thunk of static DateProvider.now.getter(*(_QWORD *)(*(_QWORD *)(v0 + 128) + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider), *(_QWORD *)(*(_QWORD *)(v0 + 128)+ OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider+ 8));
  v15 = sub_10045B37C();
  defaultLogger()(v16);
  sub_1000B3B70(v14, v8);
  sub_1000B3B70(v14, v9);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v22 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 328);
  if (v20)
  {
    v87 = *(_QWORD *)(v0 + 256);
    v84 = *(_QWORD *)(v0 + 232);
    v91 = *(_QWORD *)(v0 + 240);
    v93 = *(_QWORD *)(v0 + 168);
    v95 = *(_QWORD *)(v0 + 160);
    v98 = *(_QWORD *)(v0 + 224);
    v23 = swift_slowAlloc(32, -1);
    v89 = swift_slowAlloc(32, -1);
    v104 = v89;
    *(_DWORD *)v23 = 134218498;
    *(double *)(v0 + 88) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v0 + 96, v23 + 4);
    *(_WORD *)(v23 + 12) = 2080;
    v24 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v84, v24);
    v27 = v26;
    *(_QWORD *)(v0 + 96) = sub_1000E3AC8(v25, v26, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v23 + 14);
    swift_bridgeObjectRelease(v27);
    sub_100035DAC(v21, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v23 + 22) = 2048;
    *(double *)(v0 + 104) = Date.timeIntervalSince(_:)(v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v23 + 24);
    sub_100035DAC(v22, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v28(v87, v84);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "MobileDocumentReaderAuthenticationManager got certificate refresh threshold = %f; session expiration is %s (%f seconds from now)",
      (uint8_t *)v23,
      0x20u);
    swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v29 = *(uint64_t (**)(uint64_t, uint64_t))(v93 + 8);
    v30 = v29(v98, v95);
  }
  else
  {
    v55 = v18;
    v56 = *(_QWORD *)(v0 + 256);
    v57 = *(_QWORD *)(v0 + 232);
    v58 = *(_QWORD *)(v0 + 240);
    v101 = *(_QWORD *)(v0 + 224);
    v60 = *(_QWORD *)(v0 + 160);
    v59 = *(_QWORD *)(v0 + 168);
    sub_100035DAC(v21, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    sub_100035DAC(v22, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v28 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v28(v56, v57);

    v29 = *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8);
    v30 = v29(v101, v60);
  }
  *(_QWORD *)(v0 + 344) = v28;
  *(_QWORD *)(v0 + 352) = v29;
  if (v15 <= 0.0)
  {
    v73 = defaultLogger()(v30);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "MobileDocumentReaderAuthenticationManager got certificate refresh threshold <= 0, disabling optimistic refresh", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }
    v77 = *(_QWORD *)(v0 + 264);
    v78 = *(_QWORD *)(v0 + 232);
    v79 = *(_QWORD *)(v0 + 192);
    goto LABEL_23;
  }
  v61 = *(_QWORD *)(v0 + 248);
  v62 = *(_QWORD *)(v0 + 232);
  v63 = *(_QWORD *)(v0 + 120) + *(int *)(*(_QWORD *)(v0 + 272) + 48);
  Date.addingTimeInterval(_:)(v30, v15);
  v64 = static Date.< infix(_:_:)(v63, v61);
  v65 = ((uint64_t (*)(uint64_t, uint64_t))v28)(v61, v62);
  if ((v64 & 1) == 0)
  {
    v80 = defaultLogger()(v65);
    v74 = Logger.logObject.getter(v80);
    v81 = static os_log_type_t.debug.getter(v74);
    if (os_log_type_enabled(v74, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v81, "MobileDocumentReaderAuthenticationManager got certificate that is not nearing expiry, will not optimistically refresh", v82, 2u);
      swift_slowDealloc(v82, -1, -1);
    }
    v77 = *(_QWORD *)(v0 + 264);
    v78 = *(_QWORD *)(v0 + 232);
    v79 = *(_QWORD *)(v0 + 200);
LABEL_23:
    v83 = *(_QWORD *)(v0 + 160);

    v29(v79, v83);
    v28(v77, v78);
LABEL_10:
    v45 = *(_QWORD *)(v0 + 328);
    v46 = *(_QWORD *)(v0 + 336);
    v48 = *(_QWORD *)(v0 + 312);
    v47 = *(_QWORD *)(v0 + 320);
    v50 = *(_QWORD *)(v0 + 296);
    v49 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 288);
    v52 = *(_QWORD *)(v0 + 264);
    v53 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 248);
    log = *(os_log_t *)(v0 + 224);
    v88 = *(_QWORD *)(v0 + 216);
    v90 = *(_QWORD *)(v0 + 208);
    v92 = *(_QWORD *)(v0 + 200);
    v94 = *(_QWORD *)(v0 + 192);
    v97 = *(_QWORD *)(v0 + 184);
    v100 = *(_QWORD *)(v0 + 176);
    v103 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 272));
    swift_task_dealloc(v46);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v85);
    swift_task_dealloc(log);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v97);
    swift_task_dealloc(v100);
    swift_task_dealloc(v103);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v66 = defaultLogger()(v65);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.debug.getter(v67);
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v69 = 134217984;
    *(double *)(v0 + 80) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v102, v69 + 4);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "MobileDocumentReaderAuthenticationManager got session that will expire in less than  %f seconds from now; optimist"
      "ically refreshing",
      v69,
      0xCu);
    swift_slowDealloc(v69, -1, -1);
  }
  v70 = *(_QWORD *)(v0 + 216);
  v71 = *(_QWORD *)(v0 + 160);

  v29(v70, v71);
  MobileDocumentReaderConfiguration.init(merchantServerAccessToken:userAcceptedTermsAndConditions:)(0, 0, 0);
  v72 = (_QWORD *)swift_task_alloc(dword_100632D7C);
  *(_QWORD *)(v0 + 360) = v72;
  *v72 = v0;
  v72[1] = sub_1000AFF7C;
  return sub_1000B0BFC(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000AFF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B0858;
  else
    v3 = sub_1000AFFE0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000AFFE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (uint64_t *)v0[15];
  v1 = v0[16];
  v3 = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  v0[47] = OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage;
  sub_10000806C((_QWORD *)(v1 + v3), *(_QWORD *)(v1 + v3 + 24));
  v5 = *v2;
  v4 = v2[1];
  v6 = (_QWORD *)swift_task_alloc(dword_100634A04);
  v0[48] = v6;
  *v6 = v0;
  v6[1] = sub_1000B0058;
  return sub_1000FA20C(v5, v4);
}

uint64_t sub_1000B0058()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  return swift_task_switch(sub_1000B00AC, 0, 0);
}

uint64_t sub_1000B00AC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(v0[16] + v0[47]);
  sub_10000806C(v1, v1[3]);
  v2 = (_QWORD *)swift_task_alloc(dword_100634A14);
  v0[49] = v2;
  *v2 = v0;
  v2[1] = sub_1000B0110;
  return sub_1000F96AC(v0[39]);
}

uint64_t sub_1000B0110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B04A4;
  else
    v3 = sub_1000B0174;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B0174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;

  v2 = *(_QWORD *)(v1 + 304);
  v3 = *(_QWORD *)(v1 + 312);
  defaultLogger()(a1);
  v4 = sub_1000B3B70(v3, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(uint64_t **)(v1 + 304);
    v46 = *(_QWORD *)(v1 + 264);
    v49 = *(void (**)(uint64_t, uint64_t))(v1 + 344);
    v42 = *(void (**)(uint64_t, uint64_t))(v1 + 352);
    v44 = *(_QWORD *)(v1 + 232);
    v32 = *(_QWORD *)(v1 + 160);
    v34 = *(_QWORD *)(v1 + 208);
    v36 = *(_QWORD *)(v1 + 144);
    v38 = *(_QWORD *)(v1 + 136);
    v40 = *(_QWORD *)(v1 + 152);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v51 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *v7;
    v11 = v7[1];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 72) = sub_1000E3AC8(v10, v11, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v8 + 4);
    swift_bridgeObjectRelease(v11);
    sub_100035DAC((uint64_t)v7, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MobileDocumentReaderAuthenticationManager returning refreshed session for sessionIdentifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v42(v34, v32);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v38);
    v13 = v44;
    v12 = v46;
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 352);
    v15 = *(_QWORD *)(v1 + 304);
    v47 = *(_QWORD *)(v1 + 264);
    v49 = *(void (**)(uint64_t, uint64_t))(v1 + 344);
    v16 = *(_QWORD *)(v1 + 232);
    v17 = *(_QWORD *)(v1 + 208);
    v19 = *(_QWORD *)(v1 + 152);
    v18 = *(_QWORD *)(v1 + 160);
    v21 = *(_QWORD *)(v1 + 136);
    v20 = *(_QWORD *)(v1 + 144);

    sub_100035DAC(v15, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v14(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v12 = v47;
    v13 = v16;
  }
  v49(v12, v13);
  sub_1000B3B2C(*(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 112));
  v22 = *(_QWORD *)(v1 + 328);
  v23 = *(_QWORD *)(v1 + 336);
  v25 = *(_QWORD *)(v1 + 312);
  v24 = *(_QWORD *)(v1 + 320);
  v27 = *(_QWORD *)(v1 + 296);
  v26 = *(_QWORD *)(v1 + 304);
  v28 = *(_QWORD *)(v1 + 288);
  v29 = *(_QWORD *)(v1 + 264);
  v30 = *(_QWORD *)(v1 + 256);
  v33 = *(_QWORD *)(v1 + 248);
  v35 = *(_QWORD *)(v1 + 224);
  v37 = *(_QWORD *)(v1 + 216);
  v39 = *(_QWORD *)(v1 + 208);
  v41 = *(_QWORD *)(v1 + 200);
  v43 = *(_QWORD *)(v1 + 192);
  v45 = *(_QWORD *)(v1 + 184);
  v48 = *(_QWORD *)(v1 + 176);
  v50 = *(_QWORD *)(v1 + 152);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 + 280) + 56))(*(_QWORD *)(v1 + 112), 0, 1, *(_QWORD *)(v1 + 272));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000B04A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  sub_100035DAC(*(_QWORD *)(v0 + 312), type metadata accessor for MobileDocumentReaderAuthenticationSession);
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  defaultLogger()(v4);
  sub_1000B3B70(v3, v2);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v8 = *(uint64_t **)(v0 + 288);
    v40 = *(_QWORD *)(v0 + 232);
    v42 = *(_QWORD *)(v0 + 264);
    v36 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 176);
    v9 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v48 = v34;
    *(_DWORD *)v9 = 136315394;
    v10 = *v8;
    v11 = v8[1];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 40) = sub_1000E3AC8(v10, v11, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4);
    swift_bridgeObjectRelease(v11);
    sub_100035DAC((uint64_t)v8, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v14 = v13;
    *(_QWORD *)(v0 + 64) = sub_1000E3AC8(v12, v13, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 14);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderAuthenticationManager optimistic refresh failed for sessionIdentifier %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
    v44(v38, v36);
    v46(v42, v40);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 264);
    v19 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_100035DAC(v17, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_errorRelease(v1);
    v15(v20, v21);
    v16(v18, v19);
  }
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 336);
  v25 = *(_QWORD *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 296);
  v26 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 288);
  v29 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 224);
  v35 = *(_QWORD *)(v0 + 216);
  v37 = *(_QWORD *)(v0 + 208);
  v39 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 192);
  v43 = *(_QWORD *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 272));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  defaultLogger()(v4);
  sub_1000B3B70(v3, v2);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v8 = *(uint64_t **)(v0 + 288);
    v40 = *(_QWORD *)(v0 + 232);
    v42 = *(_QWORD *)(v0 + 264);
    v36 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 176);
    v9 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v48 = v34;
    *(_DWORD *)v9 = 136315394;
    v10 = *v8;
    v11 = v8[1];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 40) = sub_1000E3AC8(v10, v11, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4);
    swift_bridgeObjectRelease(v11);
    sub_100035DAC((uint64_t)v8, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v14 = v13;
    *(_QWORD *)(v0 + 64) = sub_1000E3AC8(v12, v13, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 14);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderAuthenticationManager optimistic refresh failed for sessionIdentifier %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
    v44(v38, v36);
    v46(v42, v40);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 264);
    v19 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_100035DAC(v17, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_errorRelease(v1);
    v15(v20, v21);
    v16(v18, v19);
  }
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 336);
  v25 = *(_QWORD *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 296);
  v26 = *(_QWORD *)(v0 + 304);
  v28 = *(_QWORD *)(v0 + 288);
  v29 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 224);
  v35 = *(_QWORD *)(v0 + 216);
  v37 = *(_QWORD *)(v0 + 208);
  v39 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 192);
  v43 = *(_QWORD *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 272));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v3[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost.Config(0);
  v3[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v3[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v3[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[22] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v13);
  v3[24] = swift_task_alloc(v13);
  v3[25] = swift_task_alloc(v13);
  v3[26] = swift_task_alloc(v13);
  v3[27] = swift_task_alloc(v13);
  v14 = type metadata accessor for UUID(0);
  v3[28] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[29] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v16);
  v3[31] = swift_task_alloc(v16);
  v17 = type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration(0);
  v3[32] = v17;
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B0D88, 0, 0);
}

uint64_t sub_1000B0D88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  _QWORD *v42;

  sub_1000ACB04(v0[33]);
  v1 = v0[33];
  v3 = v0[31];
  v2 = v0[32];
  v4 = v0[28];
  v5 = v0[29];
  v6 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  v7 = *v6;
  v0[34] = *v6;
  v8 = (void *)v6[1];
  v0[35] = v8;
  v9 = v1 + *(int *)(v2 + 28);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[36] = v10;
  v10(v3, v9, v4);
  v11 = swift_bridgeObjectRetain(v8);
  v12 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v11);
  v14 = v13;
  sub_1000B3C7C(v12, v13, v7, v8);
  v0[37] = v15;
  v0[38] = v16;
  swift_bridgeObjectRelease(v14);
  MobileDocumentReaderConfiguration.merchantServerAccessToken.getter(v17);
  v19 = v18;
  v20 = swift_bridgeObjectRelease(v18);
  if (v19)
  {
    v21 = v0[17];
    static DaemonSignposts.MobileDocumentReader.sessionIdentityKeyStatus.getter(v20);
    v22 = DIPSignpost.init(_:)(v21);
    v23 = defaultLogger()(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MobileDocumentReaderAuthenticationManager token exists, so there must be an identity key stored. Looking up now...", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = v0[26];
    v28 = v0[21];
    v29 = v0[22];
    v30 = v0[10];

    v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v0[43] = v31;
    v31(v27, v28);
    sub_10000806C((_QWORD *)(v30 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(_QWORD *)(v30 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
    v32 = (_QWORD *)swift_task_alloc(dword_100634A34);
    v0[44] = v32;
    *v32 = v0;
    v32[1] = sub_1000B11E0;
    return sub_1000F60A0(v7, (uint64_t)v8, v0[31]);
  }
  else
  {
    v34 = defaultLogger()(v20);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "MobileDocumentReaderAuthenticationManager token does not exist, will create a new identity key if needed.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }
    v38 = v0[27];
    v39 = v0[21];
    v40 = v0[22];

    v41 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v0[39] = v41;
    v41(v38, v39);
    v42 = (_QWORD *)swift_task_alloc(dword_100632DCC);
    v0[40] = v42;
    *v42 = v0;
    v42[1] = sub_1000B10DC;
    return sub_1000A895C();
  }
}

uint64_t sub_1000B10DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 320);
  *(_QWORD *)(*(_QWORD *)v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[38];
    swift_bridgeObjectRelease(v4[35]);
    swift_bridgeObjectRelease(v6);
    v7 = sub_1000B2774;
  }
  else
  {
    v4[42] = a1;
    v7 = sub_1000B1164;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000B1164()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[42];
  v0[47] = v0[39];
  v0[48] = v1;
  v2 = v0[10];
  sub_10000806C((_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner), *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner + 24));
  v3 = v2 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  v4 = (_QWORD *)swift_task_alloc(dword_100639414);
  v0[49] = v4;
  *v4 = v0;
  v4[1] = sub_1000B1764;
  return sub_10022C158(v3);
}

uint64_t sub_1000B11E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[38];
    swift_bridgeObjectRelease(v3[35]);
    swift_bridgeObjectRelease(v5);
    v6 = sub_1000B1654;
  }
  else
  {
    v6 = sub_1000B1260;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B1260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_attestationCertificate);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_dateProvider);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_dateProvider + 8);
  swift_retain(v1);
  v8 = dispatch thunk of static DateProvider.now.getter(v6, v7);
  v9 = Date.timeIntervalSinceReferenceDate.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  LOBYTE(v6) = SecCertificateIsValid(v4, v9);
  swift_release(v1);
  if ((v6 & 1) != 0)
  {
    v11 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 144);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v13 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 376) = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 384) = v13;
    v14 = *(_QWORD *)(v0 + 80);
    sub_10000806C((_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner), *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner + 24));
    v15 = v14 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
    v16 = (_QWORD *)swift_task_alloc(dword_100639414);
    *(_QWORD *)(v0 + 392) = v16;
    *v16 = v0;
    v16[1] = sub_1000B1764;
    return sub_10022C158(v15);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    v19 = swift_bridgeObjectRelease(v18);
    v20 = defaultLogger()(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "MobileDocumentReaderAuthenticationManager stored identity key has an expired attestation certificate. There is no way that the provided token will have the valid readerIdentifier.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v49 = *(_QWORD *)(v0 + 248);
    v51 = *(_QWORD *)(v0 + 264);
    v46 = *(_QWORD *)(v0 + 360);
    v47 = *(_QWORD *)(v0 + 232);
    v48 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 160);
    v26 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 152);
    v45 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 88);

    v24(v25, v26);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v29, enum case for DIPError.Code.documentReaderExpiredAttestationCertificate(_:), v31);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x8000000100544510, 0, v29, 0, v32, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001ELL, 0x8000000100544550, 473);
    swift_willThrow(v35);
    swift_release(v46);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v45);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
    sub_100035DAC(v51, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    v37 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 208);
    v38 = *(_QWORD *)(v0 + 216);
    v41 = *(_QWORD *)(v0 + 192);
    v40 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 160);
    v44 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 128);
    v52 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B1654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100035DAC(v1, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 392);
  v5[50] = a1;
  v5[51] = a2;
  v5[52] = a3;
  v5[53] = a4;
  swift_task_dealloc(v6);
  return swift_task_switch(sub_1000B17C4, 0, 0);
}

uint64_t sub_1000B17C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[48];
  sub_10000806C((_QWORD *)(v0[10] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher), *(_QWORD *)(v0[10] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher + 24));
  v2 = MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
  v4 = v3;
  v0[54] = v3;
  v0[5] = type metadata accessor for MobileDocumentReaderIdentityKey(0);
  v0[6] = sub_100004790(&qword_100632DC0, type metadata accessor for MobileDocumentReaderIdentityKey, (uint64_t)&unk_100536118);
  v0[2] = v1;
  v5 = swift_retain(v1);
  MobileDocumentReaderConfiguration.userAcceptedTermsAndConditions.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(dword_1006439F4);
  v0[55] = v6;
  *v6 = v0;
  v6[1] = sub_1000B18B0;
  return sub_1004BC128(v2, v4, v0[33], v0[50], v0[51], v0[52], v0[53], (uint64_t)(v0 + 2));
}

uint64_t sub_1000B18B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 440);
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[54];
    v6 = v3[38];
    swift_bridgeObjectRelease(v3[35]);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    v7 = sub_1000B2160;
  }
  else
  {
    swift_bridgeObjectRelease(v3[54]);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v3 + 2);
    v7 = sub_1000B1958;
  }
  return swift_task_switch(v7, 0, 0);
}

void sub_1000B1958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  void (*v46)(uint64_t, uint64_t);
  unint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, _QWORD, uint64_t);
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v1 = *(_QWORD *)(v0 + 448);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
    if (v2)
      goto LABEL_3;
LABEL_22:
    v69 = *(_QWORD *)(v0 + 416);
    v70 = *(_QWORD *)(v0 + 400);
    v71 = *(_QWORD *)(v0 + 408);
    v112 = *(_QWORD *)(v0 + 384);
    v118 = *(_QWORD *)(v0 + 424);
    v72 = *(_QWORD *)(v0 + 304);
    v73 = *(_QWORD *)(v0 + 280);
    v74 = *(_QWORD *)(v0 + 264);
    v100 = *(_QWORD *)(v0 + 232);
    v102 = *(_QWORD *)(v0 + 224);
    v105 = *(_QWORD *)(v0 + 248);
    v76 = *(_QWORD *)(v0 + 96);
    v75 = *(_QWORD *)(v0 + 104);
    v77 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 448), 2);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v72);
    v78 = *(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104);
    v12 = v74;
    v78(v75, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v77);
    v79 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v80 = type metadata accessor for DIPError(0);
    v81 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v80, v81, 0, 0);
    v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100543CC0, 0, v75, 0, v79, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000001ELL, 0x8000000100544550, 489);
    swift_willThrow(v82);
    sub_1000B52B0(v70, v71, v69, v118);
    swift_release(v112);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v105, v102);
    goto LABEL_23;
  }
  if (v1 < 0)
    v68 = *(_QWORD *)(v0 + 448);
  else
    v68 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 448));
  if (!_CocoaArrayWrapper.endIndex.getter(v68))
    goto LABEL_22;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 448));
    v3 = *(_QWORD *)(v0 + 448);
LABEL_6:
    *(_QWORD *)(v0 + 464) = v4;
    v5 = *(_QWORD *)(v0 + 456);
    swift_bridgeObjectRelease(v3);
    v6 = v4;
    sub_1000B3070(v4);
    *(_QWORD *)(v0 + 472) = v5;
    if (v5)
    {
      v8 = *(_QWORD *)(v0 + 416);
      v7 = *(_QWORD *)(v0 + 424);
      v9 = *(_QWORD *)(v0 + 400);
      v10 = *(_QWORD *)(v0 + 408);
      v108 = *(_QWORD *)(v0 + 384);
      v114 = *(_QWORD *)(v0 + 448);
      v11 = *(_QWORD *)(v0 + 304);
      v12 = *(_QWORD *)(v0 + 264);
      v103 = *(_QWORD *)(v0 + 248);
      v14 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 232);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));

      sub_1000B52B0(v9, v10, v8, v7);
      swift_bridgeObjectRelease(v11);

      swift_bridgeObjectRelease(v114);
      swift_release(v108);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v103, v14);
    }
    else
    {

      MobileDocumentReaderConfiguration.merchantServerAccessToken.getter();
      v16 = v15;
      v17 = swift_bridgeObjectRelease(v15);
      if (v16)
      {
        v18 = (_QWORD *)swift_task_alloc(dword_100632D94);
        *(_QWORD *)(v0 + 480) = v18;
        *v18 = v0;
        v18[1] = sub_1000B2284;
        sub_1000B4050((uint64_t)v6);
        return;
      }
      v19 = defaultLogger()(v17);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "MobileDocumentReaderAuthenticationManager merchantServerAccessToken is nil, return nil merchantLogo", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }
      v23 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v24 = *(_QWORD *)(v0 + 192);
      v25 = *(_QWORD *)(v0 + 168);

      v23(v24, v25);
      v106 = *(char **)(v0 + 64);
      v109 = *(_QWORD *)(v0 + 448);
      v115 = *(_QWORD *)(v0 + 472);
      v26 = *(_QWORD *)(v0 + 384);
      v28 = *(_QWORD *)(v0 + 296);
      v27 = *(_QWORD *)(v0 + 304);
      v29 = *(_QWORD *)(v0 + 280);
      v30 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 240);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 288))(v31, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
      v33 = *(_QWORD *)(v26 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
      v32 = *(_QWORD *)(v26 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob + 8);
      swift_bridgeObjectRetain(v27);
      sub_100022948(v33, v32);
      sub_100028034(0, 0xF000000000000000);
      sub_100398668(v28, v27, v30, v29, v31, v109, v33, v32, v106, 0, 0xF000000000000000);
      if (!v115)
      {
        v41 = *(_QWORD *)(v0 + 304);
        defaultLogger()(v34);
        swift_bridgeObjectRetain(v41);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.debug.getter(v43);
        v45 = os_log_type_enabled(v43, v44);
        v46 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
        v110 = *(void **)(v0 + 464);
        v116 = *(_QWORD *)(v0 + 384);
        v47 = *(_QWORD *)(v0 + 304);
        if (v45)
        {
          v92 = *(_QWORD *)(v0 + 400);
          v48 = *(_QWORD *)(v0 + 296);
          v104 = *(_QWORD *)(v0 + 248);
          v107 = *(_QWORD *)(v0 + 264);
          v99 = *(_QWORD *)(v0 + 232);
          v101 = *(_QWORD *)(v0 + 224);
          v97 = *(_QWORD *)(v0 + 168);
          v98 = *(_QWORD *)(v0 + 184);
          v94 = *(_QWORD *)(v0 + 408);
          v95 = *(_QWORD *)(v0 + 424);
          v93 = *(_QWORD *)(v0 + 416);
          v96 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          v120 = v50;
          *(_DWORD *)v49 = 136315138;
          swift_bridgeObjectRetain(v47);
          *(_QWORD *)(v0 + 56) = sub_1000E3AC8(v48, v47, &v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v49 + 4);
          swift_bridgeObjectRelease_n(v47, 3);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "MobileDocumentReaderAuthenticationManager createSession returning sessionIdentifier %s", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);
          sub_1000B52B0(v92, v94, v93, v95);

          sub_100007F78(0, 0xF000000000000000);
          swift_release(v116);
          v96(v98, v97);
          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v104, v101);
          v51 = v107;
        }
        else
        {
          v52 = *(_QWORD *)(v0 + 264);
          v53 = *(_QWORD *)(v0 + 248);
          v54 = *(_QWORD *)(v0 + 224);
          v55 = *(_QWORD *)(v0 + 232);
          v56 = *(_QWORD *)(v0 + 184);
          v57 = *(_QWORD *)(v0 + 168);
          sub_1000B52B0(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));

          swift_bridgeObjectRelease_n(v47, 2);
          sub_100007F78(0, 0xF000000000000000);
          swift_release(v116);
          v46(v56, v57);
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
          v51 = v52;
        }
        sub_100035DAC(v51, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
        v58 = *(_QWORD *)(v0 + 240);
        v59 = *(_QWORD *)(v0 + 248);
        v61 = *(_QWORD *)(v0 + 208);
        v60 = *(_QWORD *)(v0 + 216);
        v63 = *(_QWORD *)(v0 + 192);
        v62 = *(_QWORD *)(v0 + 200);
        v64 = *(_QWORD *)(v0 + 184);
        v65 = *(_QWORD *)(v0 + 160);
        v66 = *(_QWORD *)(v0 + 136);
        v111 = *(_QWORD *)(v0 + 128);
        v117 = *(_QWORD *)(v0 + 104);
        swift_task_dealloc(*(_QWORD *)(v0 + 264));
        swift_task_dealloc(v59);
        swift_task_dealloc(v58);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v111);
        swift_task_dealloc(v117);
        v67 = *(void (**)(void))(v0 + 8);
        goto LABEL_24;
      }
      v35 = *(void **)(v0 + 464);
      v36 = *(_QWORD *)(v0 + 384);
      v37 = *(_QWORD *)(v0 + 304);
      v12 = *(_QWORD *)(v0 + 264);
      v38 = *(_QWORD *)(v0 + 248);
      v39 = *(_QWORD *)(v0 + 224);
      v40 = *(_QWORD *)(v0 + 232);
      sub_1000B52B0(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
      swift_bridgeObjectRelease(v37);

      sub_100007F78(0, 0xF000000000000000);
      swift_release(v36);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    }
LABEL_23:
    sub_100035DAC(v12, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    v84 = *(_QWORD *)(v0 + 240);
    v83 = *(_QWORD *)(v0 + 248);
    v86 = *(_QWORD *)(v0 + 208);
    v85 = *(_QWORD *)(v0 + 216);
    v88 = *(_QWORD *)(v0 + 192);
    v87 = *(_QWORD *)(v0 + 200);
    v89 = *(_QWORD *)(v0 + 184);
    v90 = *(_QWORD *)(v0 + 160);
    v91 = *(_QWORD *)(v0 + 136);
    v113 = *(_QWORD *)(v0 + 128);
    v119 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v113);
    swift_task_dealloc(v119);
    v67 = *(void (**)(void))(v0 + 8);
LABEL_24:
    v67();
    return;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v0 + 448);
    v4 = *(id *)(v3 + 32);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_1000B2160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  sub_1000B52B0(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_100035DAC(v2, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2284(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 480);
  *(_QWORD *)(v3 + 488) = a1;
  *(_QWORD *)(v3 + 496) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000B22E0, 0, 0);
}

uint64_t sub_1000B22E0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  void (*v34)(uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = *(_QWORD *)(v0 + 488);
  v1 = *(_QWORD *)(v0 + 496);
  v72 = *(char **)(v0 + 64);
  v76 = *(_QWORD *)(v0 + 472);
  v69 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v67 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 288))(v7, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  v8 = v3 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob;
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
  v10 = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain(v4);
  sub_100022948(v9, v10);
  sub_100028034(v2, v1);
  sub_100398668(v5, v4, v6, v67, v7, v69, v9, v10, v72, v2, v1);
  if (v76)
  {
    v12 = *(void **)(v0 + 464);
    v13 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 304);
    v15 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 232);
    sub_1000B52B0(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
    swift_bridgeObjectRelease(v14);

    sub_100007F78(v2, v1);
    swift_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    sub_100035DAC(v15, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    v19 = *(_QWORD *)(v0 + 240);
    v20 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 216);
    v24 = *(_QWORD *)(v0 + 192);
    v23 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 136);
    v70 = *(_QWORD *)(v0 + 128);
    v73 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v70);
    swift_task_dealloc(v73);
    v28 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v74 = v2;
    v77 = v1;
    v29 = *(_QWORD *)(v0 + 304);
    defaultLogger()(v11);
    swift_bridgeObjectRetain(v29);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v68 = *(void **)(v0 + 464);
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v71 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 304);
    if (v33)
    {
      v56 = *(_QWORD *)(v0 + 400);
      v36 = *(_QWORD *)(v0 + 296);
      v65 = *(_QWORD *)(v0 + 248);
      v66 = *(_QWORD *)(v0 + 264);
      v63 = *(_QWORD *)(v0 + 232);
      v64 = *(_QWORD *)(v0 + 224);
      v61 = *(_QWORD *)(v0 + 168);
      v62 = *(_QWORD *)(v0 + 184);
      v58 = *(_QWORD *)(v0 + 408);
      v59 = *(_QWORD *)(v0 + 424);
      v57 = *(_QWORD *)(v0 + 416);
      v60 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v79 = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain(v35);
      *(_QWORD *)(v0 + 56) = sub_1000E3AC8(v36, v35, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v37 + 4);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "MobileDocumentReaderAuthenticationManager createSession returning sessionIdentifier %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
      sub_1000B52B0(v56, v58, v57, v59);

      sub_100007F78(v74, v1);
      swift_release(v71);
      v60(v62, v61);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
      v39 = v66;
    }
    else
    {
      v40 = *(_QWORD *)(v0 + 264);
      v41 = *(_QWORD *)(v0 + 248);
      v42 = *(_QWORD *)(v0 + 224);
      v43 = *(_QWORD *)(v0 + 232);
      v44 = *(_QWORD *)(v0 + 184);
      v45 = *(_QWORD *)(v0 + 168);
      sub_1000B52B0(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));

      swift_bridgeObjectRelease_n(v35, 2);
      sub_100007F78(v74, v77);
      swift_release(v71);
      v34(v44, v45);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
      v39 = v40;
    }
    sub_100035DAC(v39, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
    v46 = *(_QWORD *)(v0 + 240);
    v47 = *(_QWORD *)(v0 + 248);
    v49 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 216);
    v51 = *(_QWORD *)(v0 + 192);
    v50 = *(_QWORD *)(v0 + 200);
    v52 = *(_QWORD *)(v0 + 184);
    v53 = *(_QWORD *)(v0 + 160);
    v54 = *(_QWORD *)(v0 + 136);
    v75 = *(_QWORD *)(v0 + 128);
    v78 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v47);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    v28 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v28();
}

uint64_t sub_1000B2774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  sub_100035DAC(v1, type metadata accessor for MobileDocumentReaderCallingApplicationConfiguration);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B286C(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSString v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  id v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  id v93;
  uint64_t v94;

  v84 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v90 = *(_QWORD *)(v1 - 8);
  v91 = v1;
  __chkstk_darwin(v1);
  v92 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  __chkstk_darwin(v3);
  v87 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630A48);
  v8 = __chkstk_darwin(v7);
  v86 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v88 = (char *)&v78 - v10;
  v89 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SecKeyRef.KeyClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecCertificate(0);
  v18 = sub_1000B3BB4();
  v19 = (void *)((uint64_t (*)(void))static NSBundle.internalSettings.getter)();
  v20 = v93;
  v21 = (void *)static SecCertificateRef.make(with:in:)(0xD000000000000015, 0x8000000100543D10, v19);
  if (v20)
  {

    return;
  }
  v78 = v13;
  v79 = v18;
  v80 = v11;
  v81 = 0;
  v93 = v21;

  v22 = Data.init(base64Encoded:options:)(0xD000000000000084, 0x8000000100543D30, 0);
  if (v23 >> 60 != 15)
  {
    v29 = v23;
    v30 = v22;
    type metadata accessor for SecKey(0);
    v31 = v15;
    v32 = *(void (**)(char *, _QWORD, uint64_t))(v15 + 104);
    v33 = v14;
    v34 = v17;
    v32(v17, enum case for SecKeyRef.KeyClass.private(_:), v33);
    v35 = v81;
    v36 = static SecKeyRef.makeECKey(from:keyClass:)(v30, v29, v17);
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v33);

      v37 = v30;
      v38 = v29;
LABEL_7:
      sub_100007F78(v37, v38);
      return;
    }
    v39 = (void *)v36;
    v81 = v30;
    v40 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v34, v33);
    v41 = static NSBundle.internalSettings.getter(v40);
    if (v41)
    {
      v42 = (void *)v41;
      v43 = v39;
      v79 = v29;
      v44 = String._bridgeToObjectiveC()();
      v45 = String._bridgeToObjectiveC()();
      v46 = objc_msgSend(v42, "URLForResource:withExtension:", v44, v45);

      if (v46)
      {
        v47 = (uint64_t)v86;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v46);

        v48 = 0;
        v50 = v79;
        v49 = v80;
        v51 = v92;
        v53 = v87;
        v52 = (uint64_t)v88;
        v54 = v89;
      }
      else
      {
        v48 = 1;
        v50 = v79;
        v49 = v80;
        v51 = v92;
        v53 = v87;
        v52 = (uint64_t)v88;
        v54 = v89;
        v47 = (uint64_t)v86;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v47, v48, 1, v54);
      sub_1000B3BF0(v47, v52);
      v55 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v52, 1, v54) != 1)
      {
        v60 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v78, v52, v54);
        v61 = Data.init(contentsOf:options:)(v60, 0);
        v63 = v62;
        v64 = v85;
        v65 = defaultLogger()(v61);
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.debug.getter(v66);
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "MobileDocumentReaderAuthenticationManager using hardcoded reader authentication session.", v68, 2u);
          v69 = v68;
          v64 = v85;
          swift_slowDealloc(v69, -1, -1);
        }

        v70 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v64, v83);
        v71 = (uint64_t)v53;
        UUID.init()(v70);
        v72 = sub_100004828(&qword_100640C30);
        v73 = swift_allocObject(v72, 40, 7);
        *(_OWORD *)(v73 + 16) = xmmword_100523860;
        v74 = v93;
        *(_QWORD *)(v73 + 32) = v93;
        v94 = v73;
        specialized Array._endMutation()(v73);
        v75 = v94;
        v76 = v74;
        v77 = v43;
        sub_100022948(v61, v63);
        sub_100398668(0xD00000000000001ALL, 0x8000000100543E80, 0xD00000000000001ELL, 0x8000000100543EA0, v71, v75, (uint64_t)v43, 0x2000000000000000uLL, v84, v61, v63);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v89);

        sub_100007F8C(v61, v63);
        v37 = v81;
        v38 = v79;
        goto LABEL_7;
      }
    }
    else
    {
      v50 = v29;
      v43 = v39;
      v55 = (uint64_t)v88;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v88, 1, 1, v89);
      v51 = v92;
    }
    sub_100008030(v55, &qword_100630A48);
    (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v51, enum case for DIPError.Code.unexpectedDaemonState(_:), v91);
    v56 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v57, v58, 0, 0);
    v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x8000000100543E20, 0, v51, 0, v56, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000012, 0x8000000100543E00, 439);
    swift_willThrow(v59);

    sub_100007F78(v81, v50);
    goto LABEL_15;
  }
  v24 = v92;
  (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v92, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v91);
  v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for DIPError(0);
  v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v26, v27, 0, 0);
  v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100543DC0, 0, v24, 0, v25, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000012, 0x8000000100543E00, 433);
  swift_willThrow(v28);
LABEL_15:

}

uint64_t sub_1000B3070(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  double v21;
  uint64_t IsValid;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Swift::String v47;
  Swift::Bool v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v61 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v60 = (char *)&v56 - v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v9;
  if (a1)
  {
    v56 = v3;
    v57 = v2;
    v17 = *(_QWORD *)(v62 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider);
    v18 = *(_QWORD *)(v62 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider + 8);
    v19 = a1;
    v20 = dispatch thunk of static DateProvider.now.getter(v17, v18);
    v21 = Date.timeIntervalSinceReferenceDate.getter(v20);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    IsValid = SecCertificateIsValid(v19, v21);
    if ((_DWORD)IsValid)
    {
      v23 = v60;
      v24 = defaultLogger()(IsValid);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "MobileDocumentReaderAuthenticationManager successfully validated reader authentication certificate", v27, 2u);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

      }
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v23, v64);
    }
    type metadata accessor for DaemonAnalytics(0);
    v37 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.certificateExpired(_:);
    v38 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v8, v37, v38);
    v40 = v58;
    v39 = v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v8, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v59);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(v8);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v39);
    v28 = *(void (**)(char *, _QWORD, uint64_t))(v56 + 104);
    v35 = v5;
    v41 = v5;
    v36 = v57;
    v28(v41, enum case for DIPError.Code.documentReaderSessionExpired(_:), v57);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v43 = type metadata accessor for DIPError(0);
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v33 = swift_allocError(v43, v44, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100544000, 0, v35, 0, v42, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000002BLL, 0x8000000100543EF0, 397);
    swift_willThrow(v45);

  }
  else
  {
    v28 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v29 = v2;
    v28(v5, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v2);
    v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v31 = type metadata accessor for DIPError(0);
    v32 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v33 = swift_allocError(v31, v32, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100543EC0, 0, v5, 0, v30, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000002BLL, 0x8000000100543EF0, 392);
    swift_willThrow(v34);
    v35 = v5;
    v36 = v29;
  }
  v46 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v47._countAndFlagsBits = 0xD00000000000003BLL;
  v47._object = (void *)0x8000000100543F20;
  v48 = NSUserDefaults.internalBool(forKey:)(v47);

  if (!v48)
  {
    v28(v35, enum case for DIPError.Code.internalError(_:), v36);
    swift_errorRetain(v33);
    v51 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v52 = type metadata accessor for DIPError(0);
    v53 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v52, v53, 0, 0);
    v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x8000000100543F60, v33, v35, 0, v51, 0xD000000000000083, 0x8000000100543BC0, 0xD00000000000002BLL, 0x8000000100543EF0, 405);
    swift_willThrow(v54);
    return swift_errorRelease(v33);
  }
  v50 = v61;
  defaultLogger()(v49);
  DIPLogError(_:message:log:)(v33, 0xD00000000000004BLL, 0x8000000100543FB0, v50);
  swift_errorRelease(v33);
  v23 = v50;
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v23, v64);
}

uint64_t sub_1000B36AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B3710, 0, 0);
}

uint64_t sub_1000B3710()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10000806C((_QWORD *)(v0[5] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage + 24));
  v1 = (uint64_t **)swift_task_alloc(dword_100634A04);
  v0[9] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000B3778;
  return sub_1000FA20C(v0[3], v0[4]);
}

uint64_t sub_1000B3778()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1000B37CC, 0, 0);
}

uint64_t sub_1000B37CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v14 = *(_QWORD *)(v1 + 56);
    v15 = *(_QWORD *)(v1 + 48);
    v16 = *(_QWORD *)(v1 + 64);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v7, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderAuthenticationManager successfully cleaned up session for identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 56);
    v10 = *(_QWORD *)(v1 + 64);
    v12 = *(_QWORD *)(v1 + 48);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000B398C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  v2 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_logoFetcher));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, &qword_100632DD0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_sessionRefreshThresholdProvider));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B3A54()
{
  return type metadata accessor for MobileDocumentReaderAuthenticationManager(0);
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100632C78;
  if (!qword_100632C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MobileDocumentReaderAuthenticationManager);
  return result;
}

uint64_t sub_1000B3A98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for AuditToken(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    v4[3] = "(";
    v4[4] = "(";
    v4[5] = &unk_100523978;
    v4[6] = &unk_100523990;
    v4[7] = "(";
    v4[8] = "(";
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000B3B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B3B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B3BB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100632D58;
  if (!qword_100632D58)
  {
    v1 = objc_opt_self(NSBundle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100632D58);
  }
  return result;
}

uint64_t sub_1000B3BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B3C38()
{
  unint64_t result;

  result = qword_100632D60;
  if (!qword_100632D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_100632D60);
  }
  return result;
}

void sub_1000B3C7C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v8 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v9);
  if (a2)
  {
    v20 = a1;
    v21 = a2;
    swift_bridgeObjectRetain(a2);
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = a3;
    v11._object = a4;
    String.append(_:)(v11);
  }
  else
  {
    v20 = a3;
    v21 = (unint64_t)a4;
    swift_bridgeObjectRetain(a4);
  }
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  sub_10010BE44(v20, v21);
  v18 = v17;
  v19 = sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v8, v19);
  __asm { BR              X10 }
}

uint64_t sub_1000B3E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 - 104) = v4;
  *(_WORD *)(v8 - 96) = v5;
  *(_BYTE *)(v8 - 94) = BYTE2(v5);
  *(_BYTE *)(v8 - 93) = BYTE3(v5);
  *(_BYTE *)(v8 - 92) = BYTE4(v5);
  *(_BYTE *)(v8 - 91) = BYTE5(v5);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 104, v8 - 104 + BYTE6(v5), v2, v6);
  sub_100007F8C(v4, v5);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 120) + 8))(v3, v2);
  v9 = sub_100004790(&qword_100632DE0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v10 = ((uint64_t (*)(uint64_t, uint64_t))Digest.hexStr.getter)(v0, v9);
  sub_100007F8C(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  return v10;
}

uint64_t sub_1000B4050(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1[2] = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100632D98);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100630A48);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100632DA0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100632DA8);
  v1[13] = v9;
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HashDigest(0);
  v1[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[16] = v11;
  v1[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100632DB0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[18] = swift_task_alloc(v12);
  v1[19] = swift_task_alloc(v12);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v1[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[22] = v15;
  v1[23] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v1[24] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[25] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[26] = swift_task_alloc(v18);
  v1[27] = swift_task_alloc(v18);
  v1[28] = swift_task_alloc(v18);
  return swift_task_switch(sub_1000B4258, 0, 0);
}

uint64_t sub_1000B4258()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t LogoError;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._countAndFlagsBits = 0xD00000000000002FLL;
  v2._object = (void *)0x80000001005443B0;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = (uint64_t *)(v0 + 224);
    v6 = defaultLogger()(v4);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.info.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "MobileDocumentReaderAuthenticationManager fetchLogo disabled by UserDefaults. Returning nil image data", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = 192;
    v12 = 200;
    goto LABEL_14;
  }
  v5 = (uint64_t *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 160);
  static DaemonSignposts.MobileDocumentReader.sessionFetchLogo.getter();
  v14 = DIPSignpost.init(_:)(v13);
  SecCertificateRef.logotype.getter(v14);
  v15 = *(_QWORD *)(v0 + 144);
  sub_100038B24(*(_QWORD *)(v0 + 152), v15, &qword_100632DB0);
  v16 = type metadata accessor for Logotype(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  v19 = *(_QWORD *)(v0 + 144);
  if ((_DWORD)v18 == 1)
  {
    v20 = &qword_100632DB0;
    v21 = *(_QWORD *)(v0 + 144);
LABEL_12:
    sub_100008030(v21, v20);
    v29 = *(_QWORD *)(v0 + 48);
    v30 = *(_QWORD *)(v0 + 56);
    v32 = *(_QWORD *)(v0 + 32);
    v31 = *(_QWORD *)(v0 + 40);
    v33 = *(_QWORD *)(v0 + 24);
    type metadata accessor for DaemonAnalytics(0);
    v34 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogotypeMissing(_:);
    LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(LogoError - 8) + 104))(v30, v34, LogoError);
    swift_storeEnumTagMultiPayload(v30, v29, 1);
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(v30, 0, 0);
    sub_100008030(v30, &qword_100632D98);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.documentReaderCertificateLogotypeMissing(_:), v33);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v37, v38, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100544440, 0, v31, 0, v36, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000029, 0x8000000100544460, 358);
    swift_willThrow(v40);
LABEL_13:
    v41 = sub_100008030(*(_QWORD *)(v0 + 152), &qword_100632DB0);
    v43 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 208);
    v44 = *(_QWORD *)(v0 + 192);
    defaultLogger()(v41);
    DIPLogError(_:message:log:)(v39, 0xD00000000000005ALL, 0x80000001005443E0, v42);
    swift_errorRelease(v39);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v11 = 168;
    v12 = 176;
LABEL_14:
    v45 = *v5;
    v47 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 224);
    v48 = *(_QWORD *)(v0 + 208);
    v49 = *(_QWORD *)(v0 + 184);
    v51 = *(_QWORD *)(v0 + 152);
    v50 = *(_QWORD *)(v0 + 160);
    v53 = *(_QWORD *)(v0 + 136);
    v52 = *(_QWORD *)(v0 + 144);
    v54 = *(_QWORD *)(v0 + 112);
    v77 = *(_QWORD *)(v0 + 96);
    v79 = *(_QWORD *)(v0 + 88);
    v82 = *(_QWORD *)(v0 + 64);
    v85 = *(_QWORD *)(v0 + 56);
    v88 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + v12) + 8))(v45, *(_QWORD *)(v0 + v11));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v82);
    swift_task_dealloc(v85);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  }
  v22 = Logotype.logotypeTuples.getter(v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = sub_100004828(&qword_100632DB8);
  v25 = *(_QWORD *)(v24 - 8);
  if (v23)
  {
    sub_100038B24(v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), *(_QWORD *)(v0 + 96), &qword_100632DB8);
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  v27 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v27, v26, 1, v24);
  swift_bridgeObjectRelease(v22);
  v28 = sub_100004828(&qword_100632DB8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28) == 1)
  {
    v21 = *(_QWORD *)(v0 + 96);
    v20 = &qword_100632DA0;
    goto LABEL_12;
  }
  v56 = *(_QWORD *)(v0 + 120);
  v58 = *(_QWORD *)(v0 + 104);
  v57 = *(_QWORD *)(v0 + 112);
  v83 = *(_QWORD *)(v0 + 136);
  v86 = *(_QWORD *)(v0 + 80);
  v89 = *(_QWORD *)(v0 + 72);
  v80 = *(_QWORD *)(v0 + 64);
  v59 = (uint64_t *)(*(_QWORD *)(v0 + 96) + *(int *)(v28 + 48));
  v60 = *v59;
  v61 = v59[1];
  v62 = (_QWORD *)(v57 + *(int *)(v58 + 48));
  v63 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 128) + 32);
  v63(v57);
  *v62 = v60;
  v62[1] = v61;
  v64 = (uint64_t *)(v57 + *(int *)(v58 + 48));
  v65 = *v64;
  *(_QWORD *)(v0 + 232) = *v64;
  v66 = v64[1];
  *(_QWORD *)(v0 + 240) = v66;
  ((void (*)(uint64_t, uint64_t, uint64_t))v63)(v83, v57, v56);
  URL.init(string:encodingInvalidCharacters:)(v65, v66, 0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v80, 1, v89) == 1)
  {
    v87 = *(_QWORD *)(v0 + 120);
    v90 = *(_QWORD *)(v0 + 136);
    v67 = *(_QWORD *)(v0 + 56);
    v68 = *(_QWORD *)(v0 + 48);
    v78 = *(_QWORD *)(v0 + 40);
    v69 = *(_QWORD *)(v0 + 32);
    v81 = *(_QWORD *)(v0 + 24);
    v84 = *(_QWORD *)(v0 + 128);
    sub_100008030(*(_QWORD *)(v0 + 64), &qword_100630A48);
    type metadata accessor for DaemonAnalytics(0);
    v70 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateInvalidLogoURL(_:);
    v71 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 104))(v67, v70, v71);
    swift_storeEnumTagMultiPayload(v67, v68, 1);
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(v67, v65, v66);
    swift_bridgeObjectRelease(v66);
    sub_100008030(v67, &qword_100632D98);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v69 + 104))(v78, enum case for DIPError.Code.documentReaderCertificateInvalidLogoURL(_:), v81);
    v72 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v73 = type metadata accessor for DIPError(0);
    v74 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v73, v74, 0, 0);
    v75 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x8000000100544490, 0, v78, 0, v72, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000029, 0x8000000100544460, 363);
    swift_willThrow(v75);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v90, v87);
    goto LABEL_13;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v91 = (uint64_t (*)(uint64_t))((char *)&dword_1006429F8 + dword_1006429F8);
  v76 = (_QWORD *)swift_task_alloc(unk_1006429FC);
  *(_QWORD *)(v0 + 248) = v76;
  *v76 = v0;
  v76[1] = sub_1000B49E8;
  return v91(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1000B49E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 248);
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000B4F80;
  else
    v6 = sub_1000B4A58;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B4A58()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t LogoError;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  sub_100022948(v3, v2);
  v4 = HashDigest.equalsHash(of:)(v3, v2);
  v5 = v1;
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  if (v5)
  {
    v9 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
    sub_100007F8C(v7, v6);
    sub_100007F8C(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
LABEL_8:
    v41 = sub_100008030(*(_QWORD *)(v0 + 152), &qword_100632DB0);
    v43 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 208);
    v44 = *(_QWORD *)(v0 + 192);
    defaultLogger()(v41);
    DIPLogError(_:message:log:)(v5, 0xD00000000000005ALL, 0x80000001005443E0, v42);
    swift_errorRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v57 = 0;
    v60 = 0xF000000000000000;
    goto LABEL_9;
  }
  v14 = v4;
  v15 = sub_100007F8C(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  if ((v14 & 1) == 0)
  {
    v63 = *(_QWORD *)(v0 + 256);
    v66 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 240);
    v69 = *(_QWORD *)(v0 + 128);
    v72 = *(_QWORD *)(v0 + 120);
    v74 = *(_QWORD *)(v0 + 136);
    v55 = *(_QWORD *)(v0 + 80);
    v58 = *(_QWORD *)(v0 + 72);
    v61 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 48);
    v30 = *(_QWORD *)(v0 + 56);
    v33 = *(_QWORD *)(v0 + 32);
    v32 = *(_QWORD *)(v0 + 40);
    v34 = *(_QWORD *)(v0 + 24);
    type metadata accessor for DaemonAnalytics(0);
    v35 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogoHashMismatch(_:);
    LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(LogoError - 8) + 104))(v30, v35, LogoError);
    swift_storeEnumTagMultiPayload(v30, v31, 1);
    static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(v30, v28, v29);
    swift_bridgeObjectRelease(v29);
    sub_100008030(v30, &qword_100632D98);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v32, enum case for DIPError.Code.documentReaderCertificateLogoHashMismatch(_:), v34);
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v5 = swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x80000001005444F0, 0, v32, 0, v37, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000029, 0x8000000100544460, 376);
    swift_willThrow(v40);
    sub_100007F8C(v63, v66);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v61, v58);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v74, v72);
    goto LABEL_8;
  }
  v16 = defaultLogger()(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "MobileDocumentReaderAuthenticationManager fetchLogo successfully verified logo hashes. fetchLogo was a success.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
  v21 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 200);
  v71 = *(_QWORD *)(v0 + 152);
  v65 = *(_QWORD *)(v0 + 120);
  v68 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 80);
  v59 = *(_QWORD *)(v0 + 88);
  v62 = *(_QWORD *)(v0 + 128);
  v56 = *(_QWORD *)(v0 + 72);
  v27 = *(_QWORD *)(v0 + 48);
  v26 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  type metadata accessor for DaemonAnalytics(0);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(v26, v21, v20);
  swift_bridgeObjectRelease(v20);
  sub_100008030(v26, &qword_100632D98);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v59, v56);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v68, v65);
  sub_100008030(v71, &qword_100632DB0);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v57 = *(_QWORD *)(v0 + 256);
  v60 = *(_QWORD *)(v0 + 264);
LABEL_9:
  v45 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 224);
  v49 = *(_QWORD *)(v0 + 208);
  v50 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 152);
  v52 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 112);
  v64 = *(_QWORD *)(v0 + 96);
  v67 = *(_QWORD *)(v0 + 88);
  v70 = *(_QWORD *)(v0 + 64);
  v73 = *(_QWORD *)(v0 + 56);
  v75 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v45, *(_QWORD *)(v0 + 168));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v51);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  swift_task_dealloc(v70);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v57, v60);
}

uint64_t sub_1000B4F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t LogoError;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v37 = *(_QWORD *)(v0 + 120);
  v39 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 272);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  type metadata accessor for DaemonAnalytics(0);
  v8 = enum case for DaemonAnalytics.MobileDocumentReaderFetchLogoError.documentReaderCertificateLogoFetchFailed(_:);
  LogoError = type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(LogoError - 8) + 104))(v4, v8, LogoError);
  swift_storeEnumTagMultiPayload(v4, v3, 1);
  static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_100008030(v4, &qword_100632D98);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v6, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v29);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v13 = swift_allocError(v11, v12, 0, 0);
  v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x80000001005444B0, v29, v6, 0, v10, 0xD000000000000083, 0x8000000100543BC0, 0xD000000000000029, 0x8000000100544460, 371);
  swift_willThrow(v14);
  swift_errorRelease(v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v31);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v39, v37);
  v15 = sub_100008030(*(_QWORD *)(v0 + 152), &qword_100632DB0);
  v17 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 192);
  defaultLogger()(v15);
  DIPLogError(_:message:log:)(v13, 0xD00000000000005ALL, 0x80000001005443E0, v16);
  swift_errorRelease(v13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 64);
  v38 = *(_QWORD *)(v0 + 56);
  v40 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v19, *(_QWORD *)(v0 + 168));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
}

uint64_t sub_1000B52B0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    sub_100007F8C(result, a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

_QWORD *sub_1000B52DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for AuditToken(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    *v9 = *v10;
    v9[1] = v12;
    v13 = v10[2];
    v9[2] = v13;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_1000B5390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(*v5);
  swift_bridgeObjectRelease(v5[1]);
  return swift_bridgeObjectRelease(v5[2]);
}

uint64_t sub_1000B53E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  *v8 = *v9;
  v8[1] = v11;
  v12 = v9[2];
  v8[2] = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_1000B5470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = v9[1];
  v13 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = v9[2];
  v15 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1000B5520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  return a1;
}

uint64_t sub_1000B5594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v9[1];
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v9[2];
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000B5628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B5634);
}

uint64_t sub_1000B5634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AuditToken(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000B56B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B56BC);
}

uint64_t sub_1000B56BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AuditToken(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DigitalPresentmentCallingClientConfig(uint64_t a1)
{
  uint64_t result;

  result = qword_100632E48;
  if (!qword_100632E48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentCallingClientConfig);
  return result;
}

uint64_t sub_1000B5770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for AuditToken(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100523A18;
    v4[2] = &unk_100523A30;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B57EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003C01F4(*a1, *a2);
}

Swift::Int sub_1000B57F8()
{
  char *v0;

  return sub_1003C24DC(*v0);
}

uint64_t sub_1000B5800(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0x80000001005399C0;
  v3 = 1701736302;
  if (*v1 == 1)
    v3 = 0xD000000000000013;
  else
    v2 = 0xE400000000000000;
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000012;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x80000001005399A0;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000B5874(uint64_t a1)
{
  char *v1;

  return sub_1003C31B4(a1, *v1);
}

unint64_t sub_1000B587C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B5FB0(*a1);
  *a2 = result;
  return result;
}

void sub_1000B58A8(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000012;
  v3 = 0x80000001005399C0;
  v4 = 1701736302;
  if (*v1 == 1)
    v4 = 0xD000000000000013;
  else
    v3 = 0xE400000000000000;
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x80000001005399A0;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t sub_1000B5900()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 1701736302;
  if (*v0 == 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0xD000000000000012;
}

uint64_t sub_1000B5954(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B598C + 4 * byte_1005239C0[a1]))(0x616E2D6E65766967, 0xEA0000000000656DLL);
}

uint64_t sub_1000B598C()
{
  return 0x6E2D796C696D6166;
}

uint64_t sub_1000B59AC()
{
  return 7890291;
}

uint64_t sub_1000B59BC()
{
  return 0x7469617274726F70;
}

uint64_t sub_1000B59D4()
{
  return 0x73736572646461;
}

unint64_t sub_1000B59EC()
{
  return 0xD000000000000011;
}

unint64_t sub_1000B5A08()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000B5AE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B5B18 + 4 * byte_1005239CE[a1]))(0x616E2D6E65766967, 0xEA0000000000656DLL);
}

uint64_t sub_1000B5B18()
{
  return 0x6E2D796C696D6166;
}

uint64_t sub_1000B5B38()
{
  return 7890291;
}

uint64_t sub_1000B5B48()
{
  return 0x7469617274726F70;
}

uint64_t sub_1000B5B60()
{
  return 0x73736572646461;
}

unint64_t sub_1000B5B78()
{
  return 0xD000000000000011;
}

unint64_t sub_1000B5B94()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000B5C6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1000B5AE0(*a1);
  v5 = v4;
  v6 = sub_1000B5AE0(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000B5CF4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1000B5AE0(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000B5D54(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000B5AE0(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000B5D94(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1000B5AE0(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1000B5DF0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000B5FF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B5E1C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000B5AE0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B5E44()
{
  unsigned __int8 *v0;

  return sub_1000B5954(*v0);
}

uint64_t sub_1000B5E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;

  _StringGuts.grow(_:)(61);
  v6._object = (void *)0x80000001005446A0;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  v7 = swift_bridgeObjectRetain(a1);
  v8._countAndFlagsBits = Array.description.getter(v7, &type metadata for DigitalPresentmentEntitlements.DocumentType);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x6E656D656C65202CLL;
  v10._object = (void *)0xED0000203D207374;
  String.append(_:)(v10);
  v11 = swift_bridgeObjectRetain(a2);
  v12._countAndFlagsBits = Array.description.getter(v11, &type metadata for DigitalPresentmentEntitlements.Element);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD000000000000019;
  v14._object = (void *)0x80000001005446C0;
  String.append(_:)(v14);
  v15 = swift_bridgeObjectRetain(a3);
  v16._countAndFlagsBits = Array.description.getter(v15, &type metadata for String);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v17);
  return 0;
}

uint64_t sub_1000B5FA4()
{
  uint64_t *v0;

  return sub_1000B5E4C(*v0, v0[1], v0[2]);
}

unint64_t sub_1000B5FB0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600870, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1000B5FF8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006008D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

_QWORD *sub_1000B6040(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (!*(_QWORD *)(a1 + 16))
  {
    v10 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v4 = sub_1004A8604(0x746E656D75636F64, 0xEE0073657079742DLL);
  if ((v5 & 1) == 0 || (v6 = *(_QWORD *)(a1 + 56), v7 = *(_QWORD *)(v6 + 8 * v4), (v8 = *(_QWORD *)(v7 + 16)) == 0))
  {
    v10 = _swiftEmptyArrayStorage;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_26;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v6 + 8 * v4));
  v9 = (_QWORD *)(v7 + 40);
  v10 = _swiftEmptyArrayStorage;
  do
  {
    v11 = *(v9 - 1);
    v12 = (void *)*v9;
    swift_bridgeObjectRetain(*v9);
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    v14 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600A48, v13);
    swift_bridgeObjectRelease(v12);
    if (v14 < 3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_1000E26C0(0, v10[2] + 1, 1, v10);
      v16 = v10[2];
      v15 = v10[3];
      if (v16 >= v15 >> 1)
        v10 = sub_1000E26C0((_QWORD *)(v15 > 1), v16 + 1, 1, v10);
      v10[2] = v16 + 1;
      *((_BYTE *)v10 + v16 + 32) = v14;
    }
    v9 += 2;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease(v7);
  if (*(_QWORD *)(a1 + 16))
  {
LABEL_16:
    v17 = sub_1004A8604(0x73746E656D656C65, 0xE800000000000000);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8 * v17);
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v19 + 8 * v17));
        v22 = (_QWORD *)(v20 + 40);
        v23 = _swiftEmptyArrayStorage;
        do
        {
          v24 = *(v22 - 1);
          v25 = (void *)*v22;
          swift_bridgeObjectRetain(*v22);
          v26._countAndFlagsBits = v24;
          v26._object = v25;
          v27 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006008D8, v26);
          swift_bridgeObjectRelease(v25);
          if (v27 <= 0xD)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
              v23 = sub_1000E25C0(0, v23[2] + 1, 1, v23);
            v29 = v23[2];
            v28 = v23[3];
            if (v29 >= v28 >> 1)
              v23 = sub_1000E25C0((_QWORD *)(v28 > 1), v29 + 1, 1, v23);
            v23[2] = v29 + 1;
            *((_BYTE *)v23 + v29 + 32) = v27;
          }
          v22 += 2;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease(v20);
      }
    }
  }
LABEL_26:
  swift_bridgeObjectRetain(a2);
  return v10;
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentEntitlements.Element(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1000B631C + 4 * byte_1005239E1[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1000B6350 + 4 * byte_1005239DC[v4]))();
}

uint64_t sub_1000B6350(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6360);
  return result;
}

uint64_t sub_1000B636C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6374);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1000B6378(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6380(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements.Element()
{
  return &type metadata for DigitalPresentmentEntitlements.Element;
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentEntitlements.DocumentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B63E8 + 4 * byte_1005239EB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B641C + 4 * byte_1005239E6[v4]))();
}

uint64_t sub_1000B641C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B642CLL);
  return result;
}

uint64_t sub_1000B6438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6440);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B6444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B644C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements.DocumentType()
{
  return &type metadata for DigitalPresentmentEntitlements.DocumentType;
}

uint64_t destroy for DigitalPresentmentEntitlements(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s8coreidvd30DigitalPresentmentEntitlementsVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for DigitalPresentmentEntitlements(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for DigitalPresentmentEntitlements(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentEntitlements(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentEntitlements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentEntitlements()
{
  return &type metadata for DigitalPresentmentEntitlements;
}

unint64_t sub_1000B6644()
{
  unint64_t result;

  result = qword_100632E88;
  if (!qword_100632E88)
  {
    result = swift_getWitnessTable(&unk_100523B48, &type metadata for DigitalPresentmentEntitlements.DocumentType);
    atomic_store(result, (unint64_t *)&qword_100632E88);
  }
  return result;
}

unint64_t sub_1000B668C()
{
  unint64_t result;

  result = qword_100632E90;
  if (!qword_100632E90)
  {
    result = swift_getWitnessTable(&unk_100523C10, &type metadata for DigitalPresentmentEntitlements.Element);
    atomic_store(result, (unint64_t *)&qword_100632E90);
  }
  return result;
}

uint64_t sub_1000B66D0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for IdentityProofingTermsAndConditionsProvider()
{
  return objc_opt_self(_TtC8coreidvd42IdentityProofingTermsAndConditionsProvider);
}

void sub_1000B6700(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  NSObject *v15;
  Swift::String v16;
  Swift::String v17;
  void **v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  void *v22;
  _QWORD *v23;

  v8 = (_QWORD *)swift_allocObject(&unk_1006073A8, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v22 = sub_1000B695C;
  v23 = v8;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000B6968;
  v21 = &unk_1006073C0;
  v9 = _Block_copy(&v18);
  v10 = v23;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  v11 = a4;
  swift_release(v10);
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v11, v9);
  _Block_release(v9);
  v12 = (_QWORD *)swift_allocObject(&unk_1006073F8, 48, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = v11;
  v22 = sub_1000B6BC0;
  v23 = v12;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000B6968;
  v21 = &unk_100607410;
  v13 = _Block_copy(&v18);
  v14 = v23;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  v15 = v11;
  swift_release(v14);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v15, v13);
  _Block_release(v13);
  sub_1001B0E30(v15, a1, a2, a3);
  v16._object = (void *)0x8000000100544780;
  v17._countAndFlagsBits = 0x6331386362376136;
  v17._object = (void *)0xE800000000000000;
  v16._countAndFlagsBits = 0xD00000000000001BLL;
  logMilestone(tag:description:)(v17, v16);
}

unint64_t sub_1000B68BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = sub_1000B6C10();
  qword_100670230 = result;
  *(_QWORD *)algn_100670238 = v1;
  qword_100670240 = v2;
  unk_100670248 = v3;
  return result;
}

uint64_t sub_1000B68E0(void *a1)
{
  uint64_t result;
  const char *v3;

  result = (uint64_t)xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v3 = (const char *)result;
    if (!strcmp((const char *)result, "Application Installed"))
    {
      return sub_1000B700C(a1);
    }
    else
    {
      result = strcmp(v3, "Application Uninstalled");
      if (!(_DWORD)result)
        return sub_1000B7428(a1);
    }
  }
  return result;
}

uint64_t sub_1000B695C(void *a1)
{
  return sub_1000B68E0(a1);
}

uint64_t sub_1000B6968(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1000B69B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B69C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

const char *sub_1000B69C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *result;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _BYTE v16[24];

  v2 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    result = (const char *)strcmp(result, "Buddy Setup Done");
    if (!(_DWORD)result)
    {
      v10 = defaultLogger()(result);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Buddy Flow setup completed notification received", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (qword_10062F530 != -1)
        swift_once(&qword_10062F530, sub_10037BB30);
      v14 = sub_1000352C0(v2, (uint64_t)qword_100670728);
      swift_beginAccess(v14, v16, 0, 0);
      sub_1000B6BCC(v14, (uint64_t)v4);
      sub_100384EC0();
      return (const char *)sub_1000B7844((uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_1000B6B8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

const char *sub_1000B6BC0(void *a1)
{
  return sub_1000B69C8(a1);
}

uint64_t sub_1000B6BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WarmerUpper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B6C10()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000257E0();
  static DispatchQoS.unspecified.getter(v13);
  v36 = _swiftEmptyArrayStorage;
  v14 = sub_1000B7880();
  v15 = sub_100004828((uint64_t *)&unk_100636400);
  v16 = sub_10001D030();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v15, v16, v7, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000014, 0x8000000100523C50, v12, v9, v6, 0);
  v17 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = 0;
  v20 = v34;
  v19 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v2, enum case for DispatchQoS.QoSClass.default(_:), v35);
  v21 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v19);
  v22 = sub_1004F5D80(0, v18, v21);
  v23 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v23 + 16) = 0;
  v24 = type metadata accessor for IdentityProofingDatabaseProvider();
  v25 = swift_allocObject(v24, 16, 7);
  v26 = type metadata accessor for IdentityWatchProvisioningManagerFactory();
  v27 = swift_allocObject(v26, 16, 7);
  v28 = type metadata accessor for IdentityProofingUserNotificationProviderFactory();
  v29 = swift_allocObject(v28, 16, 7);
  v30 = type metadata accessor for IdentityProvisioningCompletionManager();
  v31 = (_QWORD *)swift_allocObject(v30, 56, 7);
  v31[2] = v22;
  v31[3] = v23;
  v31[4] = v25;
  v31[5] = v27;
  v31[6] = v29;
  return 0xD000000000000018;
}

uint64_t sub_1000B6EE4(void *a1)
{
  xpc_object_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = xpc_dictionary_get_array(a1, "bundleIDs");
  if (!v1)
    return (uint64_t)_swiftEmptyArrayStorage;
  v2 = v1;
  result = xpc_array_get_count(v1);
  v4 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_18:
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      result = (uint64_t)xpc_array_get_string(v2, v5);
      if (result)
      {
        v7 = String.init(cString:)(result);
        v9 = v8;
        result = swift_isUniquelyReferenced_nonNull_native(v6);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000E2358(0, v6[2] + 1, 1, v6);
          v6 = (_QWORD *)result;
        }
        v11 = v6[2];
        v10 = v6[3];
        if (v11 >= v10 >> 1)
        {
          result = (uint64_t)sub_1000E2358((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
          v6 = (_QWORD *)result;
        }
        v6[2] = v11 + 1;
        v12 = &v6[2 * v11];
        v12[4] = v7;
        v12[5] = v9;
      }
      if (v4 == v5)
        break;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    swift_unknownObjectRelease(v2);
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B700C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  xpc_object_t v22;
  void *v23;
  xpc_type_t type;
  xpc_object_t v25;
  xpc_type_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char *v31;
  _BOOL8 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];

  v46 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v46);
  v47 = (uint64_t)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v45 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  v17 = defaultLogger()(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Application install event received", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v16, v3);
  v22 = xpc_dictionary_get_value(a1, "UserInfo");
  if (!v22)
    goto LABEL_6;
  v23 = v22;
  type = xpc_get_type(v22);
  v25 = xpc_dictionary_create(0, 0, 0);
  v26 = xpc_get_type(v25);
  swift_unknownObjectRelease(v25);
  if (type != v26)
  {
    v22 = (xpc_object_t)swift_unknownObjectRelease(v23);
LABEL_6:
    v27 = defaultLogger()(v22);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Application install event: no user info dictionary", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = v7;
    return ((uint64_t (*)(char *, uint64_t))v21)(v31, v3);
  }
  v33 = xpc_dictionary_get_BOOL(v23, "isPlaceholder");
  if (v33)
  {
    v34 = defaultLogger()(v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Skipping application install event because it refers to a placeholder", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    swift_unknownObjectRelease(v23);
    v31 = v13;
    return ((uint64_t (*)(char *, uint64_t))v21)(v31, v3);
  }
  v38 = sub_1000B6EE4(v23);
  v39 = defaultLogger()(v38);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "XPC application install event: received install event", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  v21(v10, v3);
  if (qword_10062F530 != -1)
    swift_once(&qword_10062F530, sub_10037BB30);
  v43 = sub_1000352C0(v46, (uint64_t)qword_100670728);
  swift_beginAccess(v43, v48, 0, 0);
  v44 = v47;
  sub_1000B6BCC(v43, v47);
  sub_100376E08(v38);
  swift_bridgeObjectRelease(v38);
  swift_unknownObjectRelease(v23);
  return sub_1000B7844(v44);
}

uint64_t sub_1000B7428(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  xpc_object_t v22;
  void *v23;
  xpc_type_t type;
  xpc_object_t v25;
  xpc_type_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char *v31;
  _BOOL8 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];

  v46 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v46);
  v47 = (uint64_t)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v45 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  v17 = defaultLogger()(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Application uninstall event received", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v16, v3);
  v22 = xpc_dictionary_get_value(a1, "UserInfo");
  if (!v22)
    goto LABEL_6;
  v23 = v22;
  type = xpc_get_type(v22);
  v25 = xpc_dictionary_create(0, 0, 0);
  v26 = xpc_get_type(v25);
  swift_unknownObjectRelease(v25);
  if (type != v26)
  {
    v22 = (xpc_object_t)swift_unknownObjectRelease(v23);
LABEL_6:
    v27 = defaultLogger()(v22);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Application uninstall event: no user info dictionary", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = v7;
    return ((uint64_t (*)(char *, uint64_t))v21)(v31, v3);
  }
  v33 = xpc_dictionary_get_BOOL(v23, "isPlaceholder");
  if (v33)
  {
    v34 = defaultLogger()(v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Skipping application uninstall event because it refers to a placeholder", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    swift_unknownObjectRelease(v23);
    v31 = v13;
    return ((uint64_t (*)(char *, uint64_t))v21)(v31, v3);
  }
  v38 = (_QWORD *)sub_1000B6EE4(v23);
  v39 = defaultLogger()(v38);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "XPC application uninstall event: received uninstall event", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  v21(v10, v3);
  if (qword_10062F530 != -1)
    swift_once(&qword_10062F530, sub_10037BB30);
  v43 = sub_1000352C0(v46, (uint64_t)qword_100670728);
  swift_beginAccess(v43, v48, 0, 0);
  v44 = v47;
  sub_1000B6BCC(v43, v47);
  sub_100378E0C(v38);
  swift_bridgeObjectRelease(v38);
  swift_unknownObjectRelease(v23);
  return sub_1000B7844(v44);
}

uint64_t sub_1000B7844(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WarmerUpper(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B7880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062FF40;
  if (!qword_10062FF40)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10062FF40);
  }
  return result;
}

uint64_t sub_1000B78D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[18] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[19] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[20] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v4);
  v1[22] = swift_task_alloc(v4);
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v5 = type metadata accessor for Locale.Language(0);
  v1[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[27] = v6;
  v1[28] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v1[29] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[30] = v8;
  v1[31] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_1006308F0);
  v1[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B79D8, 0, 0);
}

uint64_t sub_1000B79D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale, v3);
  Locale.language.getter(v8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  Locale.Language.region.getter(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v10 = type metadata accessor for Locale.Region(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v1, 1, v10);
  v13 = *(_QWORD *)(v0 + 256);
  if ((_DWORD)v12 == 1)
  {
    v14 = sub_100008030(*(_QWORD *)(v0 + 256), &qword_1006308F0);
LABEL_9:
    v23 = defaultLogger()(v14);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalid current region code. Will not refresh static content", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 184);
    v28 = *(_QWORD *)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    goto LABEL_12;
  }
  v15 = Locale.Region.identifier.getter(v12);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  if (!v18)
  {
    v14 = swift_bridgeObjectRelease(v17);
    goto LABEL_9;
  }
  v19 = sub_1001B2720(v15, v17, *(_QWORD **)(*(_QWORD *)(v0 + 144) + 16));
  if ((v19 & 1) != 0)
  {
    v20 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease(v17);
    sub_10002581C(v20 + 80, v0 + 16);
    v21 = *(_QWORD *)(v0 + 40);
    v22 = *(_QWORD *)(v0 + 48);
    sub_10000806C((_QWORD *)(v0 + 16), v21);
    dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(1, v21, v22);
    v46 = *(_QWORD *)(v0 + 144);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    v47 = *(_QWORD *)(v46 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_workflowProvider);
    *(_QWORD *)(v0 + 264) = v47;
    swift_retain(v47);
    *(_QWORD *)(v0 + 272) = sub_1004585BC();
    v48 = sub_1004585BC();
    swift_release(v48);
    v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006421C0 + dword_1006421C0);
    v49 = (_QWORD *)swift_task_alloc(unk_1006421C4);
    *(_QWORD *)(v0 + 280) = v49;
    *v49 = v0;
    v49[1] = sub_1000B7FE4;
    return v52(0xD000000000000024, 0x800000010053AEF0, 0xD000000000000027, 0x800000010053AF20);
  }
  defaultLogger()(v19);
  swift_bridgeObjectRetain(v17);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 160);
  if (v40)
  {
    v51 = *(_QWORD *)(v0 + 200);
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v53 = v45;
    *(_DWORD *)v44 = 136315138;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v15, v17, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v44 + 4);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "current region %s is not in the allow list, will not attempt to refresh static workflow", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v51, v42);
  }
  else
  {
    swift_bridgeObjectRelease_n(v17, 2);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  }
LABEL_12:
  v30 = *(_QWORD *)(v0 + 248);
  v31 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7FE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  *(_QWORD *)(*v1 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B81AC;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 264);
    swift_release(*(_QWORD *)(v2 + 272));
    swift_release(v5);
    v4 = sub_1000B8058;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B8058(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Attempting to fetch Identity Proofing static assets", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[24];
  v7 = v1[19];
  v8 = v1[20];
  v9 = v1[18];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_assetProvider);
  v1[37] = v10;
  swift_retain(v10);
  v1[38] = sub_10040E5F0();
  v11 = sub_10040E5F0();
  swift_release(v11);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006404D0 + dword_1006404D0);
  v12 = (_QWORD *)swift_task_alloc(unk_1006404D4);
  v1[39] = v12;
  *v12 = v1;
  v12[1] = sub_1000B83F8;
  return v14(0xD000000000000024, 0x800000010053AEF0, 0x6A2E737465737361, 0xEB000000006E6F73);
}

uint64_t sub_1000B81AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  swift_release(*(_QWORD *)(v0 + 272));
  v3 = swift_release(v2);
  defaultLogger()(v3);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 168);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v26 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v1, v0 + 120, v0 + 56);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    v11 = v10;
    *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "received an error during refreshing static content %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 152);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B83F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*v1 + 312);
  v3 = *v1;
  *(_QWORD *)(v3 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000B84E8, 0, 0);
  v5 = *(_QWORD *)(v3 + 296);
  swift_release(*(_QWORD *)(v3 + 304));
  swift_release(v5);
  v6 = *(_QWORD *)(v3 + 248);
  v7 = *(_QWORD *)(v3 + 224);
  v9 = *(_QWORD *)(v3 + 192);
  v8 = *(_QWORD *)(v3 + 200);
  v11 = *(_QWORD *)(v3 + 176);
  v10 = *(_QWORD *)(v3 + 184);
  v12 = *(_QWORD *)(v3 + 168);
  swift_task_dealloc(*(_QWORD *)(v3 + 256));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000B84E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 296);
  swift_release(*(_QWORD *)(v0 + 304));
  v3 = swift_release(v2);
  defaultLogger()(v3);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 168);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v26 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v1, v0 + 120, v0 + 56);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    v11 = v10;
    *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "received an error during refreshing static content %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 152);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B8734(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_BYTE *)(v5 + 456) = a4;
  *(_QWORD *)(v5 + 192) = a3;
  *(_QWORD *)(v5 + 200) = v4;
  *(_QWORD *)(v5 + 176) = a1;
  *(_QWORD *)(v5 + 184) = a2;
  v6 = sub_100004828(&qword_100633990);
  *(_QWORD *)(v5 + 208) = v6;
  *(_QWORD *)(v5 + 216) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 224) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 232) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 240) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 248) = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 256) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 264) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 272) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 280) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 288) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 296) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 304) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 312) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 320) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 328) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 336) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 344) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 352) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 360) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 368) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 376) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 384) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 392) = swift_task_alloc(v12);
  return swift_task_switch(sub_1000B88B4, 0, 0);
}

uint64_t sub_1000B88B4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint8_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  _BOOL4 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  void (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212[2];

  v2 = *(_QWORD *)(v1 + 184);
  if (!v2)
  {
    v20 = defaultLogger()(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "Unable to update proofing as proofingSessionID doesn't exist", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v24 = *(_QWORD *)(v1 + 280);
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 456) & 1) != 0)
  {
    v25 = defaultLogger()(a1);
    v21 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.debug.getter(v21);
    if (os_log_type_enabled(v21, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v26, "Unable to update proofing as target doesn't exist", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v24 = *(_QWORD *)(v1 + 288);
LABEL_11:
    v28 = *(_QWORD *)(v1 + 256);
    v29 = *(_QWORD *)(v1 + 264);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v28);
    goto LABEL_26;
  }
  v3 = v1 + 16;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 184));
  defaultLogger()(v4);
  v5 = swift_bridgeObjectRetain_n(v2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 392);
  v10 = *(_QWORD *)(v1 + 256);
  v11 = *(_QWORD *)(v1 + 264);
  v210 = v2;
  v198 = v1 + 160;
  if (v8)
  {
    v181 = *(_QWORD *)(v1 + 192);
    v192 = *(_QWORD *)(v1 + 256);
    v12 = *(_QWORD *)(v1 + 176);
    v187 = *(_QWORD *)(v1 + 264);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v212[0] = v14;
    *(_DWORD *)v13 = 136315394;
    v183 = v9;
    swift_bridgeObjectRetain(v2);
    *(_QWORD *)(v1 + 160) = sub_1000E3AC8(v12, v2, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v13 + 4);
    swift_bridgeObjectRelease_n(v2, 3);
    *(_WORD *)(v13 + 12) = 2080;
    v15 = IdentityTarget.debugDescription.getter(v181);
    v17 = v16;
    *(_QWORD *)(v1 + 168) = sub_1000E3AC8(v15, v16, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v1 + 176, v13 + 14);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "check if an identity pass exists for proofingSessionID: %s and target %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    v18 = v14;
    v3 = v1 + 16;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v19 = *(void (**)(uint64_t, uint64_t))(v187 + 8);
    v19(v183, v192);
  }
  else
  {
    swift_bridgeObjectRelease_n(v2, 2);

    v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v9, v10);
  }
  *(_QWORD *)(v1 + 400) = v19;
  v30 = swift_allocObject(&unk_100607588, 32, 7);
  v31 = type metadata accessor for IdentityProofingDataContext();
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  swift_allocObject(v31, 24, 7);
  sub_1000D6044();
  v33 = v32;
  v193 = *(_QWORD *)(v1 + 192);
  v34 = v19;
  v35 = v31;
  v36 = v3;
  v37 = *(_QWORD *)(v1 + 176);
  v38 = (_QWORD *)swift_allocObject(&unk_1006075D8, 56, 7);
  v38[2] = v33;
  v38[3] = v37;
  v39 = v36;
  v40 = v35;
  v41 = v34;
  v38[4] = v210;
  v38[5] = v193;
  v38[6] = v30;
  swift_bridgeObjectRetain(v210);
  swift_retain(v33);
  swift_retain(v30);
  sub_1000D6570((uint64_t)sub_1000BF254, (uint64_t)v38);
  swift_release(v38);
  swift_release(v33);
  swift_beginAccess(v30 + 16, v39, 0, 0);
  v42 = *(_QWORD *)(v30 + 16);
  v43 = *(_QWORD *)(v30 + 24);
  *(_QWORD *)(v1 + 408) = v42;
  *(_QWORD *)(v1 + 416) = v43;
  swift_bridgeObjectRetain(v43);
  v44 = swift_release(v30);
  if (!v43)
  {
    v58 = v41;
    v59 = defaultLogger()(v44);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.debug.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "The proofing Session does not have a credential identifier, this is an invalid state. Delete locally stored data", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }
    v63 = *(_QWORD *)(v1 + 296);
    v64 = *(_QWORD *)(v1 + 256);
    v65 = *(_QWORD *)(v1 + 192);
    v66 = *(_QWORD *)(v1 + 200);
    v68 = *(_QWORD *)(v1 + 176);
    v67 = *(_QWORD *)(v1 + 184);

    v58(v63, v64);
    v69 = *(_QWORD *)(v66 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider);
    swift_retain(v69);
    sub_100395A68(0, 0, v68, v67, v65, 0);
    v70 = v210;
    goto LABEL_25;
  }
  v45 = (uint64_t *)(v1 + 144);
  v46 = *(_QWORD *)(*(_QWORD *)(v1 + 200)
                  + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_passManager);
  swift_retain(v46);
  v47 = sub_1001A4CC0(v42, v43);
  swift_release(v46);
  v48 = swift_release(v47);
  if (v47)
  {
    defaultLogger()(v48);
    swift_bridgeObjectRetain_n(v43, 2);
    swift_bridgeObjectRetain(v210);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v53 = *(_QWORD *)(v1 + 376);
    v54 = *(_QWORD *)(v1 + 256);
    if (v52)
    {
      v194 = *(_QWORD *)(v1 + 376);
      v55 = (uint64_t *)(v1 + 152);
      v184 = *(_QWORD *)(v1 + 176);
      v203 = v41;
      v206 = v1;
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(64, -1);
      v212[0] = v57;
      *(_DWORD *)v56 = 136315394;
      swift_bridgeObjectRetain(v210);
      *v45 = sub_1000E3AC8(v184, v210, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v55, v56 + 4);
      swift_bridgeObjectRelease_n(v210, 3);
      *(_WORD *)(v56 + 12) = 2080;
      swift_bridgeObjectRetain(v43);
      *v55 = sub_1000E3AC8(v42, v43, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v198, v56 + 14);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pass exists for a given proofingSessionID %s and %s. Delete locally stored data", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      v1 = v206;
      swift_slowDealloc(v56, -1, -1);

      v203(v194, v54);
    }
    else
    {
      swift_bridgeObjectRelease_n(v210, 2);
      swift_bridgeObjectRelease_n(v43, 2);

      v41(v53, v54);
    }
    v69 = *(_QWORD *)(*(_QWORD *)(v1 + 200)
                    + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider);
    swift_retain(v69);
    sub_100395A68(v42, v43, 0, 0, 0, 1);
    v70 = v43;
LABEL_25:
    swift_bridgeObjectRelease(v70);
    swift_release(v69);
LABEL_26:
    v82 = *(_QWORD *)(v1 + 384);
    v84 = *(_QWORD *)(v1 + 368);
    v83 = *(_QWORD *)(v1 + 376);
    v86 = *(_QWORD *)(v1 + 352);
    v85 = *(_QWORD *)(v1 + 360);
    v88 = *(_QWORD *)(v1 + 336);
    v87 = *(_QWORD *)(v1 + 344);
    v90 = *(_QWORD *)(v1 + 320);
    v89 = *(_QWORD *)(v1 + 328);
    v180 = *(_QWORD *)(v1 + 312);
    v182 = *(_QWORD *)(v1 + 304);
    v186 = *(_QWORD *)(v1 + 296);
    v189 = *(_QWORD *)(v1 + 288);
    v196 = *(_QWORD *)(v1 + 280);
    v200 = *(_QWORD *)(v1 + 272);
    v205 = *(_QWORD *)(v1 + 248);
    v208 = *(_QWORD *)(v1 + 240);
    v211 = *(_QWORD *)(v1 + 216);
    swift_task_dealloc(*(_QWORD *)(v1 + 392));
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v180);
    swift_task_dealloc(v182);
    swift_task_dealloc(v186);
    swift_task_dealloc(v189);
    swift_task_dealloc(v196);
    swift_task_dealloc(v200);
    swift_task_dealloc(v205);
    swift_task_dealloc(v208);
    swift_task_dealloc(v211);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  defaultLogger()(v48);
  v71 = swift_bridgeObjectRetain_n(v210, 2);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.debug.getter(v72);
  v74 = os_log_type_enabled(v72, v73);
  v75 = *(_QWORD *)(v1 + 368);
  v204 = v41;
  v207 = *(_QWORD *)(v1 + 256);
  v195 = v1 + 128;
  if (v74)
  {
    v185 = *(_QWORD *)(v1 + 192);
    v179 = *(_QWORD *)(v1 + 176);
    v199 = *(_QWORD *)(v1 + 368);
    v76 = swift_slowAlloc(22, -1);
    v188 = swift_slowAlloc(64, -1);
    v212[0] = v188;
    *(_DWORD *)v76 = 136315394;
    swift_bridgeObjectRetain(v210);
    *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v179, v210, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v76 + 4);
    swift_bridgeObjectRelease_n(v210, 3);
    *(_WORD *)(v76 + 12) = 2080;
    v77 = IdentityTarget.debugDescription.getter(v185);
    v79 = v78;
    *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v77, v78, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v76 + 14);
    v80 = v79;
    v41 = v204;
    swift_bridgeObjectRelease(v80);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Manual check time interval has elapsed for the storedProofingSession with proofingSessionID: %s and target: %s. Will update proofing data...", (uint8_t *)v76, 0x16u);
    swift_arrayDestroy(v188, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v188, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    v81 = v199;
  }
  else
  {
    swift_bridgeObjectRelease_n(v210, 2);

    v81 = v75;
  }
  v92 = ((uint64_t (*)(uint64_t, uint64_t))v41)(v81, v207);
  v93 = defaultLogger()(v92);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.debug.getter(v94);
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Check if there was a provisioning attempt", v96, 2u);
    swift_slowDealloc(v96, -1, -1);
  }
  v97 = *(_QWORD *)(v1 + 360);
  v98 = *(_QWORD *)(v1 + 256);
  v209 = v1;
  v99 = *(_QWORD *)(v1 + 232);
  v100 = *(_QWORD *)(v1 + 224);
  v101 = *(_QWORD *)(v1 + 208);

  v204(v97, v98);
  v102 = swift_allocBox(v101);
  v104 = v103;
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
  v106 = (uint64_t (*)(uint64_t, uint64_t))v204;
  v105(v103, 1, 1, v100);
  swift_allocObject(v40, 24, 7);
  sub_1000D6044();
  v108 = v107;
  v109 = *(_QWORD *)(v1 + 192);
  v110 = *(_QWORD *)(v1 + 176);
  v111 = (_QWORD *)swift_allocObject(&unk_1006075B0, 56, 7);
  v111[2] = v108;
  v111[3] = v110;
  v111[4] = v210;
  v111[5] = v109;
  v111[6] = v102;
  swift_bridgeObjectRetain(v210);
  swift_retain(v108);
  swift_retain(v102);
  sub_1000D6570((uint64_t)sub_1000BF234, (uint64_t)v111);
  swift_release(v111);
  swift_release(v108);
  v112 = *(_QWORD *)(v1 + 224);
  v113 = *(_QWORD *)(v1 + 232);
  v114 = *(_QWORD *)(v1 + 216);
  swift_beginAccess(v104, v1 + 40, 0, 0);
  sub_100027B0C(v104, v114);
  swift_release(v102);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v114, 1, v112) == 1)
  {
    v115 = *(_QWORD *)(v1 + 216);
    swift_bridgeObjectRelease(v43);
    v116 = sub_100008030(v115, &qword_100633990);
    v117 = defaultLogger()(v116);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.debug.getter(v118);
    if (os_log_type_enabled(v118, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Provisioning has never been attempted. Will call pending actions.", v120, 2u);
      swift_slowDealloc(v120, -1, -1);
    }
    v201 = (uint64_t *)(v1 + 104);
    v121 = *(_QWORD *)(v1 + 312);
    v122 = *(_QWORD *)(v1 + 256);
    v124 = *(_QWORD *)(v1 + 192);
    v123 = *(_QWORD *)(v1 + 200);
    v126 = *(_QWORD *)(v1 + 176);
    v125 = *(_QWORD *)(v1 + 184);

    v204(v121, v122);
    v127 = *(_QWORD *)(v123 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingActionsFlow);
    swift_retain(v127);
    v162 = sub_1003CF620(v126, v125, v124, 0);
    swift_bridgeObjectRelease(v210);
    swift_release(v127);
    if (v162)
    {
      if (*(_QWORD *)(v162 + 16) && (v163 = sub_1004A8604(0xD000000000000010, 0x8000000100544B90), (v164 & 1) != 0))
      {
        v165 = *(_QWORD **)(*(_QWORD *)(v162 + 56) + 8 * v163);
        swift_retain(v165);
        v166 = swift_bridgeObjectRelease(v162);
        defaultLogger()(v166);
        v167 = swift_retain_n(v165, 2);
        v168 = Logger.logObject.getter(v167);
        v169 = static os_log_type_t.debug.getter(v168);
        v170 = os_log_type_enabled(v168, v169);
        v171 = *(_QWORD *)(v1 + 304);
        v172 = *(_QWORD *)(v1 + 256);
        if (v170)
        {
          v173 = swift_slowAlloc(22, -1);
          v191 = swift_slowAlloc(64, -1);
          *(_DWORD *)v173 = 136315394;
          v212[0] = v191;
          v197 = v172;
          v175 = v165[2];
          v174 = v165[3];
          swift_bridgeObjectRetain(v174);
          *v201 = sub_1000E3AC8(v175, v174, v212);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v201, v1 + 112, v173 + 4);
          swift_bridgeObjectRelease(v174);
          *(_WORD *)(v173 + 12) = 2080;
          v176 = IdentityTarget.debugDescription.getter(v165[4]);
          v178 = v177;
          *(_QWORD *)(v1 + 112) = sub_1000E3AC8(v176, v177, v212);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v173 + 14);
          swift_bridgeObjectRelease(v178);
          swift_release_n(v165, 2);
          _os_log_impl((void *)&_mh_execute_header, v168, v169, "Get pending actions called for proofingSessionID: %s and target: %s", (uint8_t *)v173, 0x16u);
          swift_arrayDestroy(v191, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v191, -1, -1);
          swift_slowDealloc(v173, -1, -1);

          swift_release(v165);
          v204(v171, v197);
        }
        else
        {
          swift_release_n(v165, 3);

          v204(v171, v172);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v162);
      }
    }
    goto LABEL_26;
  }
  v129 = *(_QWORD *)(v1 + 240);
  v128 = *(_QWORD *)(v1 + 248);
  v130 = *(_QWORD *)(v1 + 224);
  v131 = *(_QWORD *)(v1 + 232);
  v132 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v131 + 32))(v128, *(_QWORD *)(v1 + 216), v130);
  defaultLogger()(v132);
  v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v129, v128, v130);
  v134 = Logger.logObject.getter(v133);
  v135 = static os_log_type_t.debug.getter(v134);
  v136 = os_log_type_enabled(v134, v135);
  v137 = *(_QWORD *)(v1 + 352);
  v202 = *(_QWORD *)(v1 + 256);
  v139 = *(_QWORD *)(v1 + 232);
  v138 = *(_QWORD *)(v1 + 240);
  v140 = *(_QWORD *)(v1 + 224);
  if (v136)
  {
    v190 = *(_QWORD *)(v1 + 352);
    v141 = (uint8_t *)swift_slowAlloc(12, -1);
    v142 = (uint64_t *)(v1 + 120);
    v143 = swift_slowAlloc(32, -1);
    v212[0] = v143;
    *(_DWORD *)v141 = 136315138;
    v144 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v145 = dispatch thunk of CustomStringConvertible.description.getter(v140, v144);
    v147 = v146;
    *v142 = sub_1000E3AC8(v145, v146, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, v195, v141 + 4);
    v148 = v147;
    v106 = (uint64_t (*)(uint64_t, uint64_t))v204;
    v1 = v209;
    swift_bridgeObjectRelease(v148);
    v149 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
    v149(v138, v140);
    _os_log_impl((void *)&_mh_execute_header, v134, v135, "Provisioning has already been attempted. %s", v141, 0xCu);
    swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1, -1);
    swift_slowDealloc(v141, -1, -1);

    v150 = v190;
  }
  else
  {
    v149 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
    v149(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 224));

    v150 = v137;
  }
  v151 = v106(v150, v202);
  *(_QWORD *)(v1 + 424) = v149;
  v152 = defaultLogger()(v151);
  v153 = Logger.logObject.getter(v152);
  v154 = static os_log_type_t.debug.getter(v153);
  if (os_log_type_enabled(v153, v154))
  {
    v155 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v155 = 0;
    _os_log_impl((void *)&_mh_execute_header, v153, v154, "Check if there are any pending provisioning", v155, 2u);
    swift_slowDealloc(v155, -1, -1);
  }
  v156 = *(_QWORD *)(v1 + 344);
  v157 = *(_QWORD *)(v1 + 256);
  v158 = *(_QWORD *)(v1 + 200);

  v106(v156, v157);
  v159 = *(_QWORD *)(v158 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingProvisioning);
  *(_QWORD *)(v1 + 432) = v159;
  v160 = dword_10063DC8C;
  swift_retain(v159);
  v161 = (_QWORD *)swift_task_alloc(v160);
  *(_QWORD *)(v1 + 440) = v161;
  *v161 = v1;
  v161[1] = sub_1000B9BF8;
  return sub_100374B3C(*(_QWORD *)(v1 + 176), v210, *(_QWORD *)(v1 + 192));
}

uint64_t sub_1000B9BF8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 440);
  *(_QWORD *)(*v2 + 448) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 432);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 416);
    v8 = *(_QWORD *)(v4 + 184);
    swift_release(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    v9 = sub_1000BA050;
  }
  else
  {
    swift_release(v6);
    *(_BYTE *)(v4 + 457) = a1 & 1;
    v9 = sub_1000B9C94;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1000B9C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;

  if (*(_BYTE *)(v1 + 457) == 1)
  {
    v2 = *(_QWORD *)(v1 + 184);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 416));
    v3 = swift_bridgeObjectRelease(v2);
    v4 = defaultLogger()(v3);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pending provisioning exists", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v1 + 424);
    v9 = *(void (**)(uint64_t, uint64_t))(v1 + 400);
    v10 = *(_QWORD *)(v1 + 336);
    v12 = *(_QWORD *)(v1 + 248);
    v11 = *(_QWORD *)(v1 + 256);
    v13 = *(_QWORD *)(v1 + 224);

    v9(v10, v11);
    v8(v12, v13);
  }
  else
  {
    v14 = defaultLogger()(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Pending provisioning doesn't exist. Checking for provisioning timeout to delete provisioning data", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 400);
    v19 = *(_QWORD *)(v1 + 328);
    v20 = *(_QWORD *)(v1 + 256);
    v22 = *(_QWORD *)(v1 + 184);
    v21 = *(_QWORD *)(v1 + 192);
    v23 = *(_QWORD *)(v1 + 176);

    v18(v19, v20);
    v24 = sub_1000BE19C(v23, v22, v21, 0);
    v25 = swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
      v26 = defaultLogger()(v25);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.debug.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Provisioning time out has occurred. Deleting the locally stored proofing data.", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }
      v30 = *(_QWORD *)(v1 + 416);
      v58 = *(void (**)(uint64_t, uint64_t))(v1 + 424);
      v32 = *(void (**)(uint64_t, uint64_t))(v1 + 400);
      v31 = *(_QWORD *)(v1 + 408);
      v33 = *(_QWORD *)(v1 + 320);
      v35 = *(_QWORD *)(v1 + 248);
      v34 = *(_QWORD *)(v1 + 256);
      v36 = *(_QWORD *)(v1 + 224);
      v37 = *(_QWORD *)(v1 + 200);

      v32(v33, v34);
      v38 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider);
      swift_retain(v38);
      sub_100395A68(v31, v30, 0, 0, 0, 1);
      swift_bridgeObjectRelease(v30);
      swift_release(v38);
      v58(v35, v36);
    }
    else
    {
      v39 = *(_QWORD *)(v1 + 416);
      (*(void (**)(_QWORD, _QWORD))(v1 + 424))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 224));
      swift_bridgeObjectRelease(v39);
    }
  }
  v40 = *(_QWORD *)(v1 + 384);
  v42 = *(_QWORD *)(v1 + 368);
  v41 = *(_QWORD *)(v1 + 376);
  v43 = *(_QWORD *)(v1 + 352);
  v44 = *(_QWORD *)(v1 + 360);
  v46 = *(_QWORD *)(v1 + 336);
  v45 = *(_QWORD *)(v1 + 344);
  v48 = *(_QWORD *)(v1 + 320);
  v47 = *(_QWORD *)(v1 + 328);
  v50 = *(_QWORD *)(v1 + 312);
  v51 = *(_QWORD *)(v1 + 304);
  v52 = *(_QWORD *)(v1 + 296);
  v53 = *(_QWORD *)(v1 + 288);
  v54 = *(_QWORD *)(v1 + 280);
  v55 = *(_QWORD *)(v1 + 272);
  v56 = *(_QWORD *)(v1 + 248);
  v57 = *(_QWORD *)(v1 + 240);
  v59 = *(_QWORD *)(v1 + 216);
  swift_task_dealloc(*(_QWORD *)(v1 + 392));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000BA050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, _QWORD))(v0 + 424))(v9, *(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v9);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BA18C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char v66;
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  int v83;
  signed int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  Swift::String v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];

  v104 = a4;
  v101 = a5;
  v103 = a1;
  v99 = type metadata accessor for Logger(0);
  v102 = *(_QWORD *)(v99 - 8);
  v7 = __chkstk_darwin(v99);
  v100 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v96 = (char *)&v90 - v10;
  __chkstk_darwin(v9);
  v95 = (char *)&v90 - v11;
  v12 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v12);
  v97 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v98 - 8);
  v15 = __chkstk_darwin(v98);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v90 - v18;
  v20 = type metadata accessor for DIPError.Code(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v105;
  sub_1000D7010(a2, (uint64_t)a3, (uint64_t)v104);
  v105 = v24;
  if (v24)
    return;
  v93._object = a3;
  v94 = v21;
  v103 = v20;
  v104 = v23;
  v92 = v19;
  v93._countAndFlagsBits = a2;
  v90 = v17;
  v91 = v14;
  v26 = v100;
  v27 = v101;
  v28 = v102;
  if (!v25)
  {
    v106 = 0;
    v107[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v107[0]);
    v106 = 0xD000000000000015;
    v107[0] = 0x8000000100544CD0;
    String.append(_:)(v93);
    v48._countAndFlagsBits = 0x74276E73656F6420;
    v48._object = (void *)0xEE00747369786520;
    String.append(_:)(v48);
    v49 = v106;
    v50 = v107[0];
    v51 = v104;
    (*(void (**)(id, _QWORD, uint64_t))(v94 + 104))(v104, enum case for DIPError.Code.internalError(_:), v103);
    v52 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v53 = type metadata accessor for DIPError(0);
    v54 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v55 = swift_allocError(v53, v54, 0, 0);
    v56 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v49, v50, 0, v51, 0, v52, 0xD000000000000089, 0x8000000100544A00, 0xD000000000000030, 0x8000000100544CF0, 207);
    v105 = v55;
    swift_willThrow(v56);
    return;
  }
  v29 = v25;
  v30 = IdentityProofingActionStatus.init(rawValue:)(objc_msgSend(v25, "proofingActionStatus"));
  v31 = v104;
  if ((v32 & 1) != 0)
  {
    (*(void (**)(id, _QWORD, uint64_t))(v94 + 104))(v104, enum case for DIPError.Code.storedProofingActionStatusDoesntExist(_:), v103);
    v57 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v58 = type metadata accessor for DIPError(0);
    v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v60 = swift_allocError(v58, v59, 0, 0);
    v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100544D30, 0, v31, 0, v57, 0xD000000000000089, 0x8000000100544A00, 0xD000000000000030, 0x8000000100544CF0, 211);
    v105 = v60;
    swift_willThrow(v61);

    return;
  }
  v33 = v29;
  v34 = IdentityProofingActionStatus.rawValue.getter(v30);
  v35 = IdentityProofingActionStatus.rawValue.getter(2);
  if (v34 == v35)
  {
    v36 = (uint64_t)objc_msgSend(v29, "provisioningRetryTimeout");
    v37 = 86400 * v36;
    if ((unsigned __int128)(v36 * (__int128)86400) >> 64 != (86400 * v36) >> 63)
    {
      __break(1u);
      goto LABEL_27;
    }
    v104 = v29;
    v38 = objc_msgSend(v29, "provisioningAttemptDate");
    v39 = v98;
    v41 = v91;
    v40 = v92;
    if (v38)
    {
      v42 = v38;
      v43 = v90;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

      v44 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v45 = (uint64_t)v97;
      v44(v97, v43, v39);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v45, 0, 1, v39);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v45, 1, v39);
      if ((_DWORD)v46 != 1)
      {
        v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v40, v45, v39);
        goto LABEL_16;
      }
    }
    else
    {
      v45 = (uint64_t)v97;
      v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v97, 1, 1, v98);
      v43 = v90;
    }
    Date.init()(v46);
    v47 = sub_100008030(v45, &qword_100633990);
LABEL_16:
    Date.init()(v47);
    v66 = Date.isAtLeast(seconds:after:)(v40, (double)v37);
    v67 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
    v68 = v67(v43, v39);
    if ((v66 & 1) != 0)
    {
      v69 = v95;
      v70 = defaultLogger()(v68);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.debug.getter(v71);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Time has elapsed to delete the provisioning timeout", v73, 2u);
        swift_slowDealloc(v73, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v102 + 8))(v69, v99);
      v67(v92, v98);
      swift_beginAccess(v27 + 16, &v106, 1, 0);
      *(_BYTE *)(v27 + 16) = 1;
      return;
    }
    v75 = Date.timeIntervalSinceNow.getter(v68);
    v76 = -v75;
    if ((~COERCE__INT64(-v75) & 0x7FF0000000000000) != 0)
    {
      v77 = v99;
      v78 = v96;
      v79 = v102;
      if (v75 < 9.22337204e18)
      {
        if (v75 > -9.22337204e18)
        {
          v80 = defaultLogger()(v74);
          v81 = Logger.logObject.getter(v80);
          v82 = static os_log_type_t.debug.getter(v81);
          if (os_log_type_enabled(v81, v82))
          {
            v83 = v37 % 3600;
            v84 = ((__int16)((34953 * (__int16)v83) >> 16) >> 5)
                + (((v83 + ((-30583 * (__int16)v83) >> 16)) & 0x8000) >> 15);
            v100 = (__int16)(v83 - 60 * v84);
            v85 = v84;
            v86 = (uint64_t)v76 % 3600;
            v87 = (v86 + ((-30583 * (__int16)v86) >> 16)) & 0x8000;
            v103 = (__int16)(v86 - 60 * (((__int16)((34953 * (__int16)v86) >> 16) >> 5) + (v87 >> 15)));
            v101 = (int)(((__int16)((34953 * (__int16)v86) >> 16) >> 5) + (v87 >> 15));
            v88 = swift_slowAlloc(62, -1);
            *(_DWORD *)v88 = 134219264;
            v106 = v37 / 3600;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 4);
            *(_WORD *)(v88 + 12) = 2048;
            v106 = v85;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 14);
            *(_WORD *)(v88 + 22) = 2048;
            v106 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 24);
            *(_WORD *)(v88 + 32) = 2048;
            v106 = (uint64_t)v76 / 3600;
            v39 = v98;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 34);
            *(_WORD *)(v88 + 42) = 2048;
            v106 = v101;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 44);
            *(_WORD *)(v88 + 52) = 2048;
            v78 = v96;
            v79 = v28;
            v106 = v103;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v88 + 54);
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "%ldhour(s) %ld minutes(s) %ldseconds(s) not elapsed yet. Time elapsed since provisioning failure is %ldhour(s) %ldminute(s) %ldsecond(s)", (uint8_t *)v88, 0x3Eu);
            v89 = v88;
            v77 = v99;
            swift_slowDealloc(v89, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v77);
          v67(v92, v39);
          return;
        }
LABEL_29:
        __break(1u);
        return;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v62 = defaultLogger()(v35);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.debug.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Proofing status is not claim ready", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v99);
}

void sub_1000BAAC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D7010(a2, (uint64_t)a3, a4);
  if (!v5)
  {
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, "credentialIdentifier");
      if (v16)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v20 = v19;

      }
      else
      {

        v18 = 0;
        v20 = 0;
      }
      swift_beginAccess(a5 + 16, &v31, 1, 0);
      v29 = *(_QWORD *)(a5 + 24);
      *(_QWORD *)(a5 + 16) = v18;
      *(_QWORD *)(a5 + 24) = v20;
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v31 = 0;
      v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v21._countAndFlagsBits = 0xD000000000000040;
      v21._object = (void *)0x8000000100544BB0;
      String.append(_:)(v21);
      v22._countAndFlagsBits = a2;
      v22._object = a3;
      String.append(_:)(v22);
      v23 = v31;
      v24 = v32;
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v10);
      v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v26 = type metadata accessor for DIPError(0);
      v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v26, v27, 0, 0);
      v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v23, v24, 0, v13, 0, v25, 0xD000000000000089, 0x8000000100544A00, 0xD000000000000021, 0x8000000100544C00, 246);
      swift_willThrow(v28);
    }
  }
}

void sub_1000BAD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;

  v29 = a4;
  v8 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v8);
  v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = swift_projectBox(a5);
  v16 = v31;
  sub_1000D7010(a2, a3, v29);
  if (!v16)
  {
    v18 = v17;
    if (v17)
    {
      v19 = v10;
      v20 = objc_msgSend(v17, "provisioningAttemptDate");
      if (v20)
      {
        v21 = v20;
        v22 = (uint64_t)v19;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

        v23 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v19, 0, 1, v23);
      }
      else
      {

        v28 = type metadata accessor for Date(0);
        v22 = (uint64_t)v10;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
      }
      swift_beginAccess(v15, v30, 1, 0);
      sub_1000BF270(v22, v15);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v11);
      v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v25 = type metadata accessor for DIPError(0);
      v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v25, v26, 0, 0);
      v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x8000000100544C30, 0, v14, 0, v24, 0xD000000000000089, 0x8000000100544A00, 0xD000000000000032, 0x8000000100544C60, 263);
      swift_willThrow(v27);
    }
  }
}

void sub_1000BAF9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int64_optional v49;

  v45 = a5;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  sub_1000D7010(a2, a3, a4);
  if (!v5)
  {
    v17 = v16;
    v41 = (uint8_t *)a2;
    v42 = v13;
    v43 = v10;
    v44 = v9;
    if (v16)
    {
      v18 = v45;
      v49.value = IdentityProofingActionStatus.rawValue.getter(v45);
      v49.is_nil = 0;
      v19 = v17;
      StoredProofingSession.update(proofingActionStatus:)(v49);
      sub_1000D6288();
      v25 = type metadata accessor for IdentityManagementSessionDelegate();
      v26 = (void *)objc_opt_self(NSNotificationCenter);
      v27 = objc_msgSend(v26, "defaultCenter", v41);
      v28 = String._bridgeToObjectiveC()();
      v48 = v25;
      v29 = sub_100004828((uint64_t *)&unk_10063E570);
      v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v48, v29);
      objc_msgSend(v27, "postNotificationName:object:", v28, v30);

      v31 = swift_unknownObjectRelease(v30);
      v32 = v42;
      v33 = defaultLogger()(v31);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.debug.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v48 = v37;
        *(_DWORD *)v36 = 136315138;
        v41 = v36 + 4;
        v38 = IdentityProofingActionStatus.debugDescription.getter(v18);
        v40 = v39;
        v46 = sub_1000E3AC8(v38, v39, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v41);
        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Updated the proofing action status to %s", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
    }
    else
    {
      defaultLogger()(0);
      v20 = swift_bridgeObjectRetain_n(a3, 2);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.debug.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v48 = v24;
        *(_DWORD *)v23 = 136315138;
        swift_bridgeObjectRetain(a3);
        v46 = sub_1000E3AC8((uint64_t)v41, a3, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v23 + 4);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Proofing session with proofingSessionID %s doesn't exist.", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
    }
  }
}

void sub_1000BB3AC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  void (*v52)(char *, uint64_t);
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  void *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD v96[5];
  uint64_t v97;

  v4 = v3;
  v5 = v2;
  v8 = type metadata accessor for Logger(0);
  v97 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v90 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v88 = (char *)&v87 - v12;
  v13 = __chkstk_darwin(v11);
  v89 = (char *)&v87 - v14;
  v15 = __chkstk_darwin(v13);
  v94 = (char *)&v87 - v16;
  __chkstk_darwin(v15);
  v91 = (char *)&v87 - v17;
  v96[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v18)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(a1);
    v27 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_51;
    goto LABEL_19;
  }
  if (a1 < 0)
    v28 = a1;
  else
    v28 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v18 = _CocoaArrayWrapper.endIndex.getter(v28);
  if (!v18)
    goto LABEL_18;
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  v92 = a2;
  v93 = v8;
  v95 = v2;
  v19 = v4;
  for (i = 0; i != v18; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v21 = *(id *)(a1 + 8 * i + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "assetFileURL");
    if (v23)
    {

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v25 = *(_QWORD *)(v96[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
      specialized ContiguousArray._endMutation()(v26);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(a1);
  v5 = v95;
  v27 = v96[0];
  v4 = v19;
  a2 = v92;
  v8 = v93;
  if ((v96[0] & 0x8000000000000000) != 0)
    goto LABEL_51;
LABEL_19:
  if ((v27 & 0x4000000000000000) == 0)
  {
    v29 = *(_QWORD *)(v27 + 16);
    goto LABEL_21;
  }
LABEL_51:
  swift_bridgeObjectRetain(v27);
  v29 = _CocoaArrayWrapper.endIndex.getter(v86);
  swift_release(v27);
LABEL_21:
  swift_release(v27);
  if (v29 > 0)
  {
    v30 = *(_QWORD *)(v5 + 32);
    swift_retain(v30);
    v31 = sub_100005448();
    swift_release(v30);
    if ((v31 & 1) != 0 && (v32 = objc_msgSend(a2, "canUploadOnExpensiveNetwork"), (_DWORD)v32))
    {
      v33 = v91;
      v34 = defaultLogger()(v32);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.debug.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Device is on expensive network but the user has given consent to upload over cellular network. Start uploads...", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v97 + 8))(v33, v8);
      v38 = objc_msgSend(a2, "proofingSessionID");
      if (v38)
      {
        v39 = v38;
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v42 = v41;

      }
      else
      {
        v40 = 0;
        v42 = 0;
      }
      v72 = IdentityTarget.init(rawValue:)(objc_msgSend(a2, "target"));
      sub_1000BE890(v40, v42, v72, v73 & 1, 1);
      swift_bridgeObjectRelease(v42);
    }
    else
    {
      v43 = swift_allocObject(&unk_100607560, 32, 7);
      *(_QWORD *)(v43 + 16) = v5;
      *(_QWORD *)(v43 + 24) = a2;
      swift_retain(v5);
      v44 = a2;
      runAsyncAndBlock<A>(file:function:line:_:)(v96, 0xD000000000000039, 0x8000000100544960, 0xD00000000000003ALL, 0x8000000100544B50, 342, &unk_100633308, v43, &type metadata for Bool);
      v45 = swift_release(v43);
      if (LOBYTE(v96[0]) == 1)
      {
        v46 = v94;
        v47 = defaultLogger()(v45);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.debug.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Device is on an expensive network and the data size is greater than the threshold. No consent to upload on cellular. Will not upload the files.", v50, 2u);
          v51 = v50;
          v46 = v94;
          swift_slowDealloc(v51, -1, -1);
        }

        v52 = *(void (**)(char *, uint64_t))(v97 + 8);
        v52(v46, v8);
        v53 = objc_msgSend(v44, "proofingSessionID");
        if (v53)
        {
          v54 = v53;
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v57 = v56;

        }
        else
        {
          v55 = 0;
          v57 = 0;
        }
        v58 = IdentityTarget.init(rawValue:)(objc_msgSend(v44, "target"));
        sub_1000BE890(v55, v57, v58, v59 & 1, 9);
        swift_bridgeObjectRelease(v57);
        v60 = sub_1000BC42C();
        if (!v4)
        {
          v95 = v5;
          v61 = v89;
          v62 = defaultLogger()(v60);
          v63 = Logger.logObject.getter(v62);
          v64 = static os_log_type_t.debug.getter(v63);
          if (os_log_type_enabled(v63, v64))
          {
            v65 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v65 = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Checking if connect to wifi reminder should be shown", v65, 2u);
            swift_slowDealloc(v65, -1, -1);
          }

          v52(v61, v8);
          v66 = objc_msgSend(v44, "didShowWifiReminderAlert");
          if ((_DWORD)v66)
          {
            v67 = v88;
            v68 = defaultLogger()(v66);
            v69 = Logger.logObject.getter(v68);
            v70 = static os_log_type_t.debug.getter(v69);
            if (os_log_type_enabled(v69, v70))
            {
              v71 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v71 = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, v70, "Connect to WiFi reminder alert has been shown to the user once already. Will not show it again.", v71, 2u);
              swift_slowDealloc(v71, -1, -1);
            }

            v52(v67, v8);
          }
          else
          {
            v74 = defaultLogger()(v66);
            v75 = Logger.logObject.getter(v74);
            v76 = static os_log_type_t.debug.getter(v75);
            if (os_log_type_enabled(v75, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v77 = 0;
              _os_log_impl((void *)&_mh_execute_header, v75, v76, "Connect to wifi reminder to be shown...", v77, 2u);
              swift_slowDealloc(v77, -1, -1);
            }

            v52(v90, v8);
            sub_10002581C(v95 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider, (uint64_t)v96);
            v78 = sub_10000806C(v96, v96[3]);
            v79 = objc_msgSend(v44, "proofingSessionID");
            if (v79)
            {
              v80 = v79;
              v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
              v83 = v82;

            }
            else
            {
              v81 = 0;
              v83 = 0;
            }
            v84 = IdentityTarget.init(rawValue:)(objc_msgSend(v44, "target"));
            sub_1003B6F5C(v81, v83, v84, v85 & 1, *v78, v78[1], v78[2], *((double *)v78 + 3));
            swift_bridgeObjectRelease(v83);
            _s8coreidvd24DigitalPresentmentHelperVwxx_0(v96);
          }
        }
      }
    }
  }
}

uint64_t sub_1000BBB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000BBB90, 0, 0);
}

uint64_t sub_1000BBB90()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;

  v1 = (void *)v0[4];
  v2 = *(_QWORD *)(v0[3] + 32);
  v0[5] = v2;
  swift_retain(v2);
  v3 = objc_msgSend(v1, "totalUploadAssetsFileSizeInBytes");
  LOBYTE(v1) = objc_msgSend(v1, "canUploadOnExpensiveNetwork");
  v4 = (_QWORD *)swift_task_alloc(dword_10062FAEC);
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_1000BBC24;
  return sub_1000055A4((uint64_t)v3, (char)v1);
}

uint64_t sub_1000BBC24(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_1000BBC88, 0, 0);
}

uint64_t sub_1000BBC88()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BBC9C(void *a1, void (*a2)(__n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char *v28;
  void (*v29)(_QWORD);
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  id v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  dispatch_semaphore_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t);
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  NSObject *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  id v69;
  void *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  NSObject *v80;
  _QWORD v81[2];
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  NSObject *v84;
  unsigned int v85;
  void (*v86)(char *, _QWORD, uint64_t);
  char *v87;
  id v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98[32];
  void (*v99)(__n128);

  v5 = v3;
  v97 = a3;
  v99 = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v11);
  v91 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v93 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v90 = (char *)v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v92 = (char *)v81 - v16;
  v96 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v17 = *(_QWORD *)(v96 - 8);
  v18 = __chkstk_darwin(v96);
  v95 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v94 = (char *)v81 - v20;
  v21 = sub_1000BEF38(a1);
  if (v21)
  {
    v22 = v21;
    v89 = v13;
    v23 = a1;
    sub_1000BB3AC(v21, a1);
    v25 = v24;
    v26 = swift_bridgeObjectRelease(v22);
    if (v4)
      return v27 & 1;
    v88 = v23;
    if ((v25 & 1) == 0)
    {
      v27 = 1;
      return v27 & 1;
    }
    v87 = v10;
    v28 = v94;
    ((void (*)(uint64_t))v99)(v26);
    v29 = *(void (**)(_QWORD))(v17 + 104);
    v30 = v95;
    v31 = v96;
    v85 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    v86 = (void (*)(char *, _QWORD, uint64_t))v29;
    v29(v95);
    v32 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v28, v30);
    v33 = *(void (**)(char *, uint64_t))(v17 + 8);
    v33(v30, v31);
    v33(v28, v31);
    if ((v32 & 1) != 0)
    {
      v27 = 0;
      return v27 & 1;
    }
    v35 = v88;
    v36 = IdentityTarget.init(rawValue:)(objc_msgSend(v88, "target"));
    if ((v37 & 1) != 0)
    {
      v46 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
      v47 = v87;
      v46(v87, enum case for DIPError.Code.targetUnavailable(_:), v7);
      v48 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v49 = type metadata accessor for DIPError(0);
      v50 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v49, v50, 0, 0);
      v51 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x80000001005449E0, 0, v47, 0, v48, 0xD000000000000089, 0x8000000100544A00, 0xD000000000000045, 0x8000000100544A90, 395);
      swift_willThrow(v51);
      return v27 & 1;
    }
    v38 = v36;
    v82 = v33;
    v39 = dispatch_semaphore_create(0);
    v40 = swift_allocObject(&unk_1006074E8, 24, 7);
    v87 = (char *)v40;
    *(_QWORD *)(v40 + 16) = 0;
    v84 = (v40 + 16);
    v41 = objc_msgSend(v35, "proofingSessionID");
    v81[1] = 0;
    if (v41)
    {
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v45 = v44;

    }
    else
    {
      v43 = 0;
      v45 = 0;
    }
    sub_1000BE890(v43, v45, v38, 0, 1);
    swift_bridgeObjectRelease(v45);
    v52 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_proofingUpdateManager);
    swift_retain(v52);
    v53 = objc_msgSend(v88, "proofingSessionID");
    if (v53)
    {
      v54 = v53;
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

    }
    else
    {
      v83 = 0;
      v56 = 0;
    }
    v57 = v87;
    v58 = objc_msgSend(v88, "canUploadOnExpensiveNetwork");
    v59 = swift_allocObject(&unk_100607510, 32, 7);
    *(_QWORD *)(v59 + 16) = v39;
    *(_QWORD *)(v59 + 24) = v57;
    v60 = v39;
    swift_retain(v57);
    sub_100023380(v83, v56, 0, 0, v38, 0, v58, (uint64_t)sub_1000BF124, v59);
    swift_release(v59);
    swift_release(v52);
    swift_bridgeObjectRelease(v56);
    OS_dispatch_semaphore.wait()();
    v61 = swift_beginAccess(v84, v98, 0, 0);
    if (*((_QWORD *)v57 + 2))
    {
      v62 = swift_errorRetain(*((_QWORD *)v57 + 2));
      swift_willThrow(v62);
      swift_release(v57);

      return v27 & 1;
    }
    v84 = v60;
    v63 = v94;
    v99(v61);
    v65 = v95;
    v64 = v96;
    v86(v95, v85, v96);
    v66 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v63, v65);
    v67 = v82;
    v82(v65, v64);
    v67(v63, v64);
    if ((v66 & 1) != 0)
    {

LABEL_28:
      swift_release(v57);
      v27 = v66 ^ 1;
      return v27 & 1;
    }
    v68 = *(_QWORD *)(v5 + 24);
    swift_retain(v68);
    v69 = objc_msgSend(v88, "createdAt");
    if (v69)
    {
      v70 = v69;
      v71 = v90;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v69);

      v72 = v93;
      v73 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
      v74 = v91;
      v75 = v89;
      v73(v91, v71, v89);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v74, 0, 1, v75);
      v76 = v75;
      v77 = (uint64_t)v74;
      v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48))(v74, 1, v76);
      v79 = v92;
      v80 = v84;
      if ((_DWORD)v78 != 1)
      {
        v73(v92, (char *)v77, v89);
LABEL_27:
        v57 = v87;
        sub_1004F2574(v79, (uint64_t)objc_msgSend(v88, "manualCheckInterval"));
        swift_release(v68);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v79, v89);
        goto LABEL_28;
      }
    }
    else
    {
      v72 = v93;
      v77 = (uint64_t)v91;
      v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v91, 1, 1, v89);
      v79 = v92;
      v80 = v84;
    }
    Date.init()(v78);
    sub_100008030(v77, &qword_100633990);
    goto LABEL_27;
  }
  v27 = 0;
  return v27 & 1;
}

Swift::Int sub_1000BC364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  if (a1)
  {
    swift_beginAccess(a3 + 16, v7, 1, 0);
    v5 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v5);
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1000BC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100632FD4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1000BC6B0(a1, a2);
}

uint64_t sub_1000BC42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for Logger(0);
  v21 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v3 = (char *)&v22[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_1006332F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPBackgroundActivitySettings(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  DIPBackgroundActivitySettings.init()(v9);
  DIPBackgroundActivitySettings.requireNetworkActivity.setter(1);
  DIPBackgroundActivitySettings.allowBattery.setter(1);
  DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.setter(1);
  sub_10002581C(v0 + 40, (uint64_t)v22);
  v12 = v23;
  v13 = v24;
  sub_10000806C(v22, v23);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.scheduleActivity(identifier:after:gracePeriod:settings:)(0xD000000000000017, 0x80000001005449C0, v6, v12, v13, 0.0, 0.0);
  if (v1)
  {
    sub_100008030((uint64_t)v6, &qword_1006332F8);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v22);
  }
  else
  {
    v15 = v21;
    sub_100008030((uint64_t)v6, &qword_1006332F8);
    v16 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v22);
    v17 = defaultLogger()(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Scheduling background activity to be triggered when the device connects to wifi.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_1000BC6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v3[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v3[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[18] = swift_task_alloc(v10);
  v3[19] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_100632FC4);
  v3[20] = v11;
  *v11 = v3;
  v11[1] = sub_1000BC784;
  return sub_1000B78D0();
}

uint64_t sub_1000BC784()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_1000BC7D8, 0, 0);
}

uint64_t sub_1000BC7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  (*(void (**)(void))(v0 + 56))();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
  v5 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v1, v2);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if ((v5 & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 144);
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = type metadata accessor for IdentityProofingDataContext();
    swift_allocObject(v7, 24, 7);
    sub_1000D6044();
    *(_QWORD *)(v0 + 168) = v8;
    v9 = v8;
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = (_QWORD *)swift_allocObject(&unk_100607448, 48, 7);
    *(_QWORD *)(v0 + 176) = v16;
    v16[2] = v9;
    v16[3] = v15;
    v16[4] = v14;
    v16[5] = v13;
    v17 = swift_allocObject(&unk_100607470, 32, 7);
    *(_QWORD *)(v0 + 184) = v17;
    *(_QWORD *)(v17 + 16) = sub_1000BE15C;
    *(_QWORD *)(v17 + 24) = v16;
    v18 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104);
    swift_retain(v9);
    swift_retain(v14);
    swift_retain(v13);
    v19(v11, v18, v12);
    v20 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v16);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 192) = v21;
    *v21 = v0;
    v21[1] = sub_1000BCB7C;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v21, *(_QWORD *)(v0 + 120), sub_10001E5CC, v17, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_1000BCB7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  v4 = v2[23];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    swift_release(v4);
    v5 = sub_1000BCC88;
  }
  else
  {
    v6 = v2[22];
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1000BCC28;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BCC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BCC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 176));
  v2 = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 200);
  defaultLogger()(v2);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v19 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 96);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v22 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v3, v0 + 40, v0 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error received when attempting to retrieve proofing sessions to update %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BCEA8(uint64_t a1, void (*a2)(__n128), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  unint64_t v36;
  unint64_t v37;
  void (*v38)(void);
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char v46;
  void (*v47)(_BYTE *, uint64_t);
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  void (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint8_t *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint8_t *v76;
  id v77;
  void *v78;
  uint64_t v79;
  void (*v80)(char *, _BYTE *, uint64_t);
  _BYTE *v81;
  uint64_t v82;
  id v83;
  Swift::String v84;
  Swift::Bool v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint8_t *v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  char v104;
  _BYTE *v105;
  void (*v106)(_BYTE *, uint64_t);
  id v107;
  char *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  _BYTE *v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint8_t *v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  void (*v122)(_BYTE *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint8_t *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  void (*v138)(_BYTE *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[4];
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  unsigned int v149;
  void *v150;
  void (*v151)(_BYTE *, uint64_t);
  void (*v152)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  uint64_t v161;
  char *v162;
  _BYTE *v163;
  char *v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  void (*v168)(_QWORD, _QWORD);
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(void);
  uint64_t v174;
  uint64_t v175;

  v171 = a4;
  v173 = (void (*)(void))a2;
  v174 = a3;
  v4 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v4);
  v164 = &v141[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v172 = type metadata accessor for Date(0);
  v165 = *(_QWORD *)(v172 - 8);
  v6 = __chkstk_darwin(v172);
  v166 = &v141[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v162 = &v141[-v8];
  v161 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v158 = *(_QWORD *)(v161 - 8);
  v9 = __chkstk_darwin(v161);
  v160 = &v141[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v159 = &v141[-v11];
  v175 = type metadata accessor for Logger(0);
  v170 = *(_QWORD *)(v175 - 8);
  v12 = __chkstk_darwin(v175);
  v156 = &v141[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v12);
  v16 = &v141[-v15];
  v17 = __chkstk_darwin(v14);
  v19 = &v141[-v18];
  v20 = __chkstk_darwin(v17);
  v22 = &v141[-v21];
  v23 = __chkstk_darwin(v20);
  v25 = &v141[-v24];
  v26 = __chkstk_darwin(v23);
  v28 = &v141[-v27];
  __chkstk_darwin(v26);
  v30 = &v141[-v29];
  v31 = objc_allocWithZone((Class)NSFetchRequest);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v31, "initWithEntityName:", v32);

  v34 = sub_100004828(&qword_1006332D0);
  v35 = (void (*)(_QWORD, _QWORD))v169;
  v36 = NSManagedObjectContext.fetch<A>(_:)(v33, v34);
  v168 = v35;
  if (v35)
  {

    return;
  }
  v37 = v36;
  v163 = v28;
  v169 = v25;
  v154 = v19;
  v155 = v22;
  v153 = v16;
  v38 = v173;
  v39 = sub_100458ADC(v36);
  swift_bridgeObjectRelease(v37);

  v167 = (uint64_t)v39;
  if (!v39)
  {
    v48 = defaultLogger()(v40);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.debug.getter(v49);
    v51 = os_log_type_enabled(v49, v50);
    v52 = v170;
    if (v51)
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "No proofing sessions exist to be updated", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v30, v175);
    return;
  }
  v41 = v159;
  v38();
  v42 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  v43 = v158;
  v45 = v160;
  v44 = v161;
  v152 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v158 + 104);
  v152(v160, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v161);
  v46 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v41, v45);
  v47 = *(void (**)(_BYTE *, uint64_t))(v43 + 8);
  v47(v45, v44);
  v151 = v47;
  v47(v41, v44);
  if ((v46 & 1) != 0)
  {
    swift_bridgeObjectRelease(v167);
    return;
  }
  v54 = os_transaction_create("IdentityProofingBackgroundActivityProvider");
  v55 = v168;
  if ((unint64_t)v167 >> 62)
  {
    v139 = v167;
    if (v167 >= 0)
      v140 = v167 & 0xFFFFFFFFFFFFFF8;
    else
      v140 = v167;
    swift_bridgeObjectRetain(v167);
    v56 = _CocoaArrayWrapper.endIndex.getter(v140);
    swift_bridgeObjectRelease(v139);
  }
  else
  {
    v56 = *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v57 = v172;
  v58 = v166;
  v59 = v155;
  if (!v56)
  {
    swift_bridgeObjectRelease(v167);
    swift_unknownObjectRelease(v54);
    return;
  }
  v149 = v42;
  v145 = v54;
  v158 = v167 & 0xC000000000000001;
  v60 = 4;
  v150 = (void *)0x8000000100544940;
  v148 = (char *)&type metadata for () + 8;
  v144 = (unint64_t)"debug.clear-manual-check-time";
  v147 = 0x8000000100544960;
  v143 = (unint64_t)"undActivityProvider.swift";
  v146 = 0x80000001005449A0;
  v157 = v56;
  while (1)
  {
    v63 = v158
        ? specialized _ArrayBuffer._getElementSlowPath(_:)(v60 - 4, v167)
        : *(id *)(v167 + 8 * v60);
    v64 = v63;
    v65 = v60 - 3;
    if (__OFADD__(v60 - 4, 1))
      break;
    v66 = sub_1000BBC9C(v63, (void (*)(__n128))v173, v174);
    if (v55)
    {
      swift_bridgeObjectRelease(v167);

      goto LABEL_53;
    }
    if ((v66 & 1) != 0)
    {
      v67 = defaultLogger()(v66);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.debug.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Wait for the schdeuled background task to be triggered to make pending actions request.", v70, 2u);
        swift_slowDealloc(v70, -1, -1);
        v71 = v64;
      }
      else
      {
        v71 = v68;
        v68 = v64;
      }

      (*(void (**)(_BYTE *, uint64_t))(v170 + 8))(v163, v175);
      v57 = v172;
      goto LABEL_15;
    }
    v72 = defaultLogger()(v66);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.debug.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "No upload assets to upload to cloudkit, continuing with the proofing session update from the background task", v75, 2u);
      v76 = v75;
      v57 = v172;
      swift_slowDealloc(v76, -1, -1);
    }

    v168 = *(void (**)(_QWORD, _QWORD))(v170 + 8);
    v168(v169, v175);
    v77 = -[NSObject createdAt](v64, "createdAt");
    if (!v77)
    {
      v82 = (uint64_t)v164;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v164, 1, 1, v57);
LABEL_35:
      v97 = sub_100008030(v82, &qword_100633990);
      v98 = defaultLogger()(v97);
      v99 = Logger.logObject.getter(v98);
      v100 = static os_log_type_t.debug.getter(v99);
      if (os_log_type_enabled(v99, v100))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "createdDate doesn't exist in the storedProofingSession, exiting idp background activity", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
        v62 = v64;
      }
      else
      {
        v62 = v99;
        v99 = v64;
      }
      v58 = v166;

      v168(v59, v175);
      v57 = v172;
      goto LABEL_15;
    }
    v78 = v77;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

    v79 = v165;
    v80 = *(void (**)(char *, _BYTE *, uint64_t))(v165 + 32);
    v81 = v58;
    v82 = (uint64_t)v164;
    v80(v164, v81, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v82, 0, 1, v57);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v82, 1, v57) == 1)
      goto LABEL_35;
    v80(v162, (_BYTE *)v82, v57);
    v83 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v84._countAndFlagsBits = 0xD00000000000001DLL;
    v84._object = v150;
    v85 = NSUserDefaults.internalBool(forKey:)(v84);

    if (v85)
    {
      v87 = v154;
      v88 = defaultLogger()(v86);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.debug.getter(v89);
      v91 = os_log_type_enabled(v89, v90);
      v58 = v166;
      if (v91)
      {
        v92 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Skipping the time elapsed check as the clearManualCheckTime internal setting has been enabled", v92, 2u);
        v93 = v92;
        v87 = v154;
        swift_slowDealloc(v93, -1, -1);
      }

      v168(v87, v175);
      v94 = swift_allocObject(&unk_1006074C0, 32, 7);
      v95 = v171;
      *(_QWORD *)(v94 + 16) = v171;
      *(_QWORD *)(v94 + 24) = v64;
      swift_retain(v95);
      v96 = v64;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000039, v147, 0xD000000000000013, v146, 496, &unk_1006332F0, v94, v148);
      v57 = v172;
      (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v172);
      swift_release(v94);

      goto LABEL_15;
    }
    v101 = v159;
    v173();
    v103 = v160;
    v102 = v161;
    v152(v160, v149, v161);
    v104 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v101, v103);
    v105 = v103;
    v106 = v151;
    v151(v105, v102);
    v106(v101, v102);
    v58 = v166;
    if ((v104 & 1) != 0)
    {
      v57 = v172;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v162, v172);
    }
    else
    {
      v107 = -[NSObject manualCheckInterval](v64, "manualCheckInterval");
      v108 = v162;
      v109 = sub_1000BECE4((uint64_t)v162, (uint64_t)v107);
      v57 = v172;
      if ((v109 & 1) == 0)
      {
        v168 = *(void (**)(_QWORD, _QWORD))(v171 + 24);
        swift_retain(v168);
        sub_1004F2574(v108, (uint64_t)-[NSObject manualCheckInterval](v64, "manualCheckInterval"));
        swift_release(v168);

        (*(void (**)(char *, uint64_t))(v79 + 8))(v108, v57);
LABEL_49:
        v59 = v155;
        goto LABEL_15;
      }
      v110 = v153;
      v111 = defaultLogger()(v109);
      v112 = v110;
      v113 = Logger.logObject.getter(v111);
      v114 = static os_log_type_t.debug.getter(v113);
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Manual check time has elapsed. Will update proofing...", v115, 2u);
        v116 = v115;
        v57 = v172;
        swift_slowDealloc(v116, -1, -1);
      }

      v117 = ((uint64_t (*)(_BYTE *, uint64_t))v168)(v112, v175);
      v118 = v159;
      ((void (*)(uint64_t))v173)(v117);
      v119 = v160;
      v120 = v161;
      v152(v160, v149, v161);
      v142 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v118, v119);
      v121 = v119;
      v122 = v151;
      v151(v121, v120);
      v122(v118, v120);
      if ((v142 & 1) == 0)
      {
        v123 = swift_allocObject(&unk_100607498, 32, 7);
        v124 = v171;
        *(_QWORD *)(v123 + 16) = v171;
        *(_QWORD *)(v123 + 24) = v64;
        swift_retain(v124);
        v125 = v64;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000039, v144 | 0x8000000000000000, 0xD000000000000013, v143 | 0x8000000000000000, 520, &unk_1006332E0, v123, (char *)&type metadata for () + 8);
        v126 = swift_release(v123);
        v127 = v156;
        v128 = defaultLogger()(v126);
        v129 = Logger.logObject.getter(v128);
        v130 = static os_log_type_t.debug.getter(v129);
        if (os_log_type_enabled(v129, v130))
        {
          v131 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v131 = 0;
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "Pending actions request complete from Identity Proofing Background activity", v131, 2u);
          v132 = v131;
          v57 = v172;
          swift_slowDealloc(v132, -1, -1);
        }

        v133 = ((uint64_t (*)(_BYTE *, uint64_t))v168)(v127, v175);
        v134 = v159;
        ((void (*)(uint64_t))v173)(v133);
        v136 = v160;
        v135 = v161;
        v152(v160, v149, v161);
        static DIPBackgroundDeferralStatus.== infix(_:_:)(v134, v136);

        v137 = v136;
        v138 = v151;
        v151(v137, v135);
        v138(v134, v135);
        (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v57);
        goto LABEL_49;
      }
      (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v57);
    }

    v59 = v155;
LABEL_15:
    ++v60;
    if (v65 == v157)
      goto LABEL_52;
  }
  __break(1u);
  swift_release(v63);

  (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v57);
LABEL_52:
  swift_bridgeObjectRelease(v167);
LABEL_53:
  swift_unknownObjectRelease(v145);
}

uint64_t sub_1000BDC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_1000BDC6C, 0, 0);
}

uint64_t sub_1000BDC6C()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;

  v1 = objc_msgSend(*(id *)(v0 + 24), "proofingSessionID");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 32) = v5;
  v6 = IdentityTarget.init(rawValue:)(objc_msgSend(*(id *)(v0 + 24), "target"));
  v8 = v7 & 1;
  v9 = (_QWORD *)swift_task_alloc(dword_100632FCC);
  *(_QWORD *)(v0 + 40) = v9;
  *v9 = v0;
  v9[1] = sub_1000BDD30;
  return sub_1000B8734(v3, v5, v6, v8);
}

uint64_t sub_1000BDD30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000BF340, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000BDDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_1000BDDBC, 0, 0);
}

uint64_t sub_1000BDDBC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;

  v1 = objc_msgSend(*(id *)(v0 + 24), "proofingSessionID");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 32) = v5;
  v6 = IdentityTarget.init(rawValue:)(objc_msgSend(*(id *)(v0 + 24), "target"));
  v8 = v7 & 1;
  v9 = (_QWORD *)swift_task_alloc(dword_100632FCC);
  *(_QWORD *)(v0 + 40) = v9;
  *v9 = v0;
  v9[1] = sub_1000BDE80;
  return sub_1000B8734(v3, v5, v6, v8);
}

uint64_t sub_1000BDE80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000BDEF4, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000BDEF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000BDF28()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 10);
  v1 = (char *)v0 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale;
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_workflowProvider));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_assetProvider));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_proofingUpdateManager));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingActionsFlow));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)((char *)v0
                                                       + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingProvisioning));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_passManager));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider));
  return v0;
}

uint64_t sub_1000BE014()
{
  uint64_t v0;

  sub_1000BDF28();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BE038()
{
  return type metadata accessor for IdentityProofingBackgroundActivityProvider(0);
}

uint64_t type metadata accessor for IdentityProofingBackgroundActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100632FB0;
  if (!qword_100632FB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityProofingBackgroundActivityProvider);
  return result;
}

uint64_t sub_1000BE07C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = "(";
  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = "(";
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1000BE128()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000BE15C()
{
  uint64_t v0;

  sub_1000BCEA8(*(_QWORD *)(v0 + 16), *(void (**)(__n128))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000BE178()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BE19C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  id v34;
  Swift::String v35;
  Swift::Bool v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[4];

  v71 = a4;
  v67 = a3;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v64 - v12;
  v14 = __chkstk_darwin(v11);
  v69 = (char *)&v64 - v15;
  v16 = __chkstk_darwin(v14);
  v72 = (char *)&v64 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v64 - v19;
  defaultLogger()(v18);
  v21 = swift_bridgeObjectRetain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v66 = a1;
  if (v24)
  {
    v65 = v13;
    v25 = swift_slowAlloc(12, -1);
    v64 = v7;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v70 = v6;
    v28 = v27;
    v75[0] = v27;
    v68 = v10;
    *(_DWORD *)v26 = 136315138;
    if (a2)
      v29 = a1;
    else
      v29 = 7104878;
    if (a2)
      v30 = a2;
    else
      v30 = 0xE300000000000000;
    swift_bridgeObjectRetain(a2);
    v73 = sub_1000E3AC8(v29, v30, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v26 + 4);
    swift_bridgeObjectRelease_n(a2, 2);
    v31 = v30;
    v13 = v65;
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Checking if the data has to be cleared for proofingSession with ID %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v32 = v28;
    v6 = v70;
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v33 = *(void (**)(char *, uint64_t))(v64 + 8);
    v33(v20, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v33(v20, v6);
  }
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v35._object = (void *)0x8000000100544CA0;
  v35._countAndFlagsBits = 0xD000000000000026;
  v36 = NSUserDefaults.internalBool(forKey:)(v35);

  if (!v36)
  {
    v44 = swift_allocObject(&unk_100607600, 17, 7);
    v45 = v44;
    *(_BYTE *)(v44 + 16) = 0;
    v46 = v44 + 16;
    if (a2)
    {
      if ((v71 & 1) == 0)
      {
        v47 = type metadata accessor for IdentityProofingDataContext();
        swift_allocObject(v47, 24, 7);
        swift_bridgeObjectRetain(a2);
        sub_1000D6044();
        v59 = v58;
        v60 = (_QWORD *)swift_allocObject(&unk_100607628, 56, 7);
        v61 = v66;
        v60[2] = v59;
        v60[3] = v61;
        v62 = v67;
        v60[4] = a2;
        v60[5] = v62;
        v60[6] = v45;
        swift_retain(v59);
        swift_retain(v45);
        sub_1000D6570((uint64_t)sub_1000BF300, (uint64_t)v60);
        swift_release(v59);
        swift_release(v60);
        swift_beginAccess(v46, v75, 0, 0);
        v43 = *(unsigned __int8 *)(v45 + 16);
        swift_release(v45);
        return v43;
      }
      v53 = v69;
      v54 = defaultLogger()(v44);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.debug.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unable to update proofing as target doesn't exist", v57, 2u);
        swift_slowDealloc(v57, -1, -1);
      }

      v52 = v53;
    }
    else
    {
      v48 = defaultLogger()(v44);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.debug.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to update proofing as proofingSessionID doesn't exist", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = v13;
    }
    v33(v52, v6);
    swift_release(v45);
    return 0;
  }
  v38 = v72;
  v39 = defaultLogger()(v37);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "ClearProvisioningRetryTimeout Interval setting has been enabled.", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  v33(v38, v6);
  return 1;
}

uint64_t sub_1000BE890(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v40 = a5;
  v38 = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for DIPError(0);
  v41 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for Logger(0);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v37 - v12;
  v14 = __chkstk_darwin(v11);
  v17 = (char *)v37 - v16;
  if (a2)
  {
    if ((a4 & 1) != 0)
    {
      v25 = v15;
      v26 = v14;
      v27 = defaultLogger()(v14);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to update proofing as target doesn't exist", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v17, v26);
    }
    else
    {
      v37[1] = v15;
      v37[2] = v14;
      v18 = type metadata accessor for IdentityProofingDataContext();
      swift_allocObject(v18, 24, 7);
      swift_bridgeObjectRetain(a2);
      sub_1000D6044();
      v32 = v31;
      v33 = (_QWORD *)swift_allocObject(&unk_100607538, 56, 7);
      v34 = v38;
      v33[2] = v32;
      v33[3] = v34;
      v35 = v39;
      v33[4] = a2;
      v33[5] = v35;
      v33[6] = v40;
      swift_retain(v32);
      sub_1000D6570((uint64_t)sub_1000BF158, (uint64_t)v33);
      swift_release(v32);
      return swift_release(v33);
    }
  }
  else
  {
    v19 = v15;
    v20 = v14;
    v21 = defaultLogger()(v14);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to clearProofingSession as proofingSessionID doesn't exist", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v20);
  }
}

uint64_t sub_1000BECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v26 = v5;
    v17 = v4;
    v18 = a2;
    v19 = a1;
    v20 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "checking if the manual check interval has elapsed...", v16, 2u);
    v21 = v20;
    a1 = v19;
    a2 = v18;
    v4 = v17;
    v5 = v26;
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  Date.init()(v22);
  v23 = Date.isAtLeast(seconds:after:)(a1, (double)a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v23 & 1;
}

uint64_t sub_1000BEE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1006332DC);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100007EE8;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000BDDBC, 0, 0);
}

uint64_t sub_1000BEED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1006332EC);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10001D0A0;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000BDC6C, 0, 0);
}

uint64_t sub_1000BEF38(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "uploadAssets");
  if (v6)
  {
    v7 = v6;
    sub_10045A180(v7);
    v9 = v8;

    v10 = (uint64_t)sub_1004589E4(v9);
    swift_release(v9);
    if (v10)
    {
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0)
          v17 = v10 & 0xFFFFFFFFFFFFFF8;
        else
          v17 = v10;
        swift_bridgeObjectRetain(v10);
        v18 = _CocoaArrayWrapper.endIndex.getter(v17);

        swift_bridgeObjectRelease(v10);
        if (v18 > 0)
          return v10;
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);

        if (v11 > 0)
          return v10;
      }
      v6 = (id)swift_bridgeObjectRelease(v10);
    }
    else
    {

    }
  }
  v12 = defaultLogger()(v6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Upload assets doesn't exist to be uploaded.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t sub_1000BF0D4()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BF0F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1000BF124(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BC364(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000BF12C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BF158()
{
  return sub_1000BF31C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BAF9C);
}

uint64_t sub_1000BF178()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BF1A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_100633304);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100007EE8;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_1000BBB90, 0, 0);
}

uint64_t sub_1000BF20C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BF234()
{
  return sub_1000BF31C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BAD08);
}

uint64_t sub_1000BF254()
{
  return sub_1000BF31C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BAAC8);
}

uint64_t sub_1000BF270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100633990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BF2B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000BF2CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BF300()
{
  return sub_1000BF31C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000BA18C);
}

uint64_t sub_1000BF31C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_1000BF344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _OWORD v12[3];
  uint64_t v13;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v3);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v4 = qword_1006702A0;
  v5 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 52;
  os_unfair_lock_lock(v5 + 52);
  sub_100139D14(v6, v4, v12);
  os_unfair_lock_unlock(v7);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    v8 = v13;
    swift_retain(v13);
    v9 = sub_10001D410(v12);
    v10 = (void *)AsyncCoreDataStore.container.getter(v9);
    swift_release(v8);
    v11 = objc_msgSend(v10, "newBackgroundContext");

    *(_QWORD *)(v2 + 16) = v11;
  }
}

id sub_1000BF588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[8];
  uint64_t v35;
  id v36;
  unint64_t v37;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + 16);
  v36 = 0;
  v6 = objc_msgSend(v5, "save:", &v36);
  v7 = v36;
  if ((v6 & 1) != 0)
    return v36;
  v9 = v36;
  v10 = _convertNSErrorToError(_:)(v7);

  swift_willThrow(v11);
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  v12._object = (void *)0x8000000100544F20;
  v12._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v12);
  v35 = v10;
  v13 = sub_100004828((uint64_t *)&unk_100633430);
  _print_unlocked<A, B>(_:_:)(&v35, &v36, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v14 = v36;
  v15 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
  v16 = sub_100004828((uint64_t *)&unk_1006325A0);
  v17 = sub_100004828((uint64_t *)&unk_100633440);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10051FFB0;
  v23 = (uint64_t *)(v22 + v21 + *(int *)(v17 + 48));
  v24 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v25 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22 + v21, v24, v25);
  swift_getErrorValue(v10, v34, v33);
  v26 = v33[1];
  v27 = v33[2];
  swift_errorRetain(v10);
  v28 = dispatch thunk of Error._code.getter(v26, v27);
  v23[3] = (uint64_t)&type metadata for Int;
  *v23 = v28;
  v29 = sub_10011D314(v22);
  v30 = type metadata accessor for DIPError(0);
  v31 = sub_100007F30();
  swift_allocError(v30, v31, 0, 0);
  v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v14, v15, v10, v4, 0, v29, 0xD00000000000005DLL, 0x8000000100544E70, 0x292865766173, 0xE600000000000000, 26);
  swift_willThrow(v32);
  return (id)swift_errorRelease(v10);
}

uint64_t sub_1000BF870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v5 = *(void **)(v2 + 16);
  v6 = (_QWORD *)swift_allocObject(&unk_100607650, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v14;
  v7 = swift_allocObject(&unk_100607678, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000C00B0;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000C00CC;
  v13 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026DC8;
  aBlock[3] = &unk_100607690;
  v8 = _Block_copy(aBlock);
  v9 = v13;
  swift_retain(a2);
  swift_retain(v7);
  swift_release(v9);
  objc_msgSend(v5, "performBlockAndWait:", v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 40, 50, 1);
  result = swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v14)
    {
      v11 = swift_errorRetain(v14);
      swift_willThrow(v11);
      swift_errorRelease(v14);
    }
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000BF9E8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = __chkstk_darwin(v2);
  return a1(v3);
}

uint64_t sub_1000BFB40(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  _QWORD v48[3];
  char v49[8];
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v47 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  objc_msgSend(v10, "setFetchLimit:", 1);
  sub_1000C000C();
  v11 = sub_100004828((uint64_t *)&unk_100636410);
  v12 = swift_allocObject(v11, 72, 7);
  v46 = xmmword_10051FFB0;
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000C0048();
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = (void *)NSPredicate.init(format:_:)(0xD000000000000017, 0x8000000100544E10, v12);
  objc_msgSend(v10, "setPredicate:", v13);

  v14 = sub_100004828(&qword_1006332D0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v10, v14);
  if (v2)
  {

    v50 = 0;
    v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v16._countAndFlagsBits = 0xD000000000000035;
    v16._object = (void *)0x8000000100544E30;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x3A726F727265203ALL;
    v18._object = (void *)0xE900000000000020;
    String.append(_:)(v18);
    v52 = v2;
    v19 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v52, &v50, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = v50;
    v21 = v51;
    v22 = v47;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v47, enum case for DIPError.Code.coreDataError(_:), v5);
    v23 = sub_100004828((uint64_t *)&unk_1006325A0);
    v24 = sub_100004828((uint64_t *)&unk_100633440);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(_QWORD *)(v25 + 72);
    v27 = *(unsigned __int8 *)(v25 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
    *(_OWORD *)(v29 + 16) = v46;
    v30 = v29 + v28;
    v31 = (uint64_t *)(v29 + v28 + *(int *)(v24 + 48));
    v32 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v33 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v30, v32, v33);
    swift_getErrorValue(v2, v49, v48);
    v34 = v48[1];
    v35 = v48[2];
    swift_errorRetain(v2);
    v36 = dispatch thunk of Error._code.getter(v34, v35);
    v31[3] = (uint64_t)&type metadata for Int;
    *v31 = v36;
    v37 = sub_10011D314(v29);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100007F30();
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v20, v21, v2, v22, 0, v37, 0xD00000000000005DLL, 0x8000000100544E70, 0xD00000000000002ALL, 0x8000000100544ED0, 66);
    swift_willThrow(v40);
    swift_errorRelease(v2);
    return (uint64_t)v31;
  }
  v41 = v15;
  v42 = (uint64_t)sub_100458AE8(v15);
  result = swift_bridgeObjectRelease(v41);
  if (!v42)
  {

    return 0;
  }
  if ((unint64_t)v42 >> 62)
  {
    if (v42 >= 0)
      v45 = v42 & 0xFFFFFFFFFFFFFF8;
    else
      v45 = v42;
    swift_bridgeObjectRetain(v42);
    v31 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v45);
    result = swift_bridgeObjectRelease(v42);
    if (!v31)
      goto LABEL_10;
  }
  else
  {
    v31 = *(uint64_t **)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v31)
    {
LABEL_10:
      swift_bridgeObjectRelease(v42);

      return (uint64_t)v31;
    }
  }
  if ((v42 & 0xC000000000000001) != 0)
  {
    v44 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v42);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v44 = (uint64_t *)*(id *)(v42 + 32);
LABEL_9:
    v31 = v44;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BFFC8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for IdentityBiomeDataContext()
{
  return objc_opt_self(_TtC8coreidvd24IdentityBiomeDataContext);
}

unint64_t sub_1000C000C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100633410;
  if (!qword_100633410)
  {
    v1 = objc_opt_self(NSPredicate);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100633410);
  }
  return result;
}

unint64_t sub_1000C0048()
{
  unint64_t result;

  result = qword_100633420;
  if (!qword_100633420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100633420);
  }
  return result;
}

uint64_t sub_1000C008C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C00B0()
{
  uint64_t v0;

  return sub_1000BF9E8(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1000C00BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C00CC()
{
  uint64_t v0;

  return sub_100026DA8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000C00D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C00E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *sub_1000C00EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v37);
  }
  else
  {
    v7 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    v13 = type metadata accessor for Locale.Region(0);
    v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v15 = swift_bridgeObjectRetain(v10);
    v14(v11, v12, v13, v15);
    v16 = a3[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_100022948(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = a3[8];
    v22 = a3[9];
    v23 = (uint64_t *)((char *)a1 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (uint64_t *)((char *)a1 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = a3[10];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v33 + 48);
    swift_bridgeObjectRetain(v25);
    v35 = swift_bridgeObjectRetain(v28);
    if (v34(v31, 1, v32, v35))
    {
      v36 = sub_100004828(&qword_100630A48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v38 = a3[11];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    swift_bridgeObjectRetain(v41);
  }
  return a1;
}

uint64_t sub_1000C02B0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v5 = a1 + a2[6];
  v6 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_100007F8C(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  v7 = a1 + a2[10];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t sub_1000C03A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  v6 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  v12 = type metadata accessor for Locale.Region(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
  v14 = swift_bridgeObjectRetain(v9);
  v13(v10, v11, v12, v14);
  v15 = a3[7];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_100022948(*v17, v19);
  *v16 = v18;
  v16[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[10];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v32 + 48);
  swift_bridgeObjectRetain(v24);
  v34 = swift_bridgeObjectRetain(v27);
  if (v33(v30, 1, v31, v34))
  {
    v35 = sub_100004828(&qword_100630A48);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v36 = a3[11];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  return a1;
}

uint64_t sub_1000C0540(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_100022948(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_100007F8C(v19, v20);
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = type metadata accessor for URL(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 24))(v32, v33, v34);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_6;
  }
  if (v38)
  {
LABEL_6:
    v39 = sub_100004828(&qword_100630A48);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_7:
  v40 = a3[11];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  return a1;
}

uint64_t sub_1000C0764(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100004828(&qword_100630A48);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000C08A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[7];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_100007F8C(v14, v15);
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[9];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[10];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v29, v30, v31);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    v36 = sub_100004828(&qword_100630A48);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v29, v30, v31);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_7:
  v37 = a3[11];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_1000C0A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0A8C);
}

uint64_t sub_1000C0A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for ISO18013KnownDocTypes(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for Locale.Region(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = sub_100004828(&qword_100630A48);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[10];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000C0B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0B68);
}

uint64_t sub_1000C0B68(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for ISO18013KnownDocTypes(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for Locale.Region(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = sub_100004828(&qword_100630A48);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ValidatedDigitalPresentmentRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1006334A8;
  if (!qword_1006334A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ValidatedDigitalPresentmentRequest);
  return result;
}

void sub_1000C0C70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v2 = type metadata accessor for ISO18013KnownDocTypes(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for Locale.Region(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100523D78;
      v8[4] = &unk_100523D90;
      v8[5] = &unk_100523DA8;
      sub_1000494A4(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = &unk_100523DA8;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000C0D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::String v71;
  Swift::String v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  Swift::String v80;
  Swift::Bool v81;
  id v82;
  Swift::String v83;
  Swift::Bool v84;
  Swift::String v85;
  Swift::String v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint8_t *v106;
  uint64_t v107;
  char *v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(char *, uint64_t);
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  void *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;

  v4 = v3;
  v190 = a2;
  v222 = a1;
  v188 = a3;
  v189 = type metadata accessor for UsageDescriptionFetcher(0);
  __chkstk_darwin(v189);
  v191 = (char *)&v173 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for IdentityIntentToStore(0);
  v207 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v194 = (char *)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630AD0);
  v8 = __chkstk_darwin(v7);
  v196 = (char *)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v195 = (char *)&v173 - v11;
  v12 = __chkstk_darwin(v10);
  v198 = (char *)&v173 - v13;
  __chkstk_darwin(v12);
  v197 = (char *)&v173 - v14;
  v15 = type metadata accessor for IdentityElement(0);
  v212 = *(_QWORD *)(v15 - 8);
  v213 = v15;
  v16 = __chkstk_darwin(v15);
  v199 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v202 = (char *)&v173 - v19;
  v20 = __chkstk_darwin(v18);
  v204 = (char *)&v173 - v21;
  v22 = __chkstk_darwin(v20);
  v205 = (char *)&v173 - v23;
  __chkstk_darwin(v22);
  v203 = (char *)&v173 - v24;
  v201 = type metadata accessor for Locale.Region(0);
  v200 = *(_QWORD *)(v201 - 8);
  v25 = __chkstk_darwin(v201);
  v193 = (char *)&v173 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v216 = (char *)&v173 - v27;
  v28 = type metadata accessor for ISO18013KnownDocTypes(0);
  v208 = *(_QWORD *)(v28 - 8);
  v209 = v28;
  v29 = __chkstk_darwin(v28);
  v187 = (char *)&v173 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v215 = (uint64_t)&v173 - v31;
  v32 = type metadata accessor for URL(0);
  v219 = *(_QWORD *)(v32 - 8);
  v220 = v32;
  __chkstk_darwin(v32);
  v211 = (char *)&v173 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004828(&qword_100630A48);
  v35 = __chkstk_darwin(v34);
  v192 = (char *)&v173 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v217 = (char *)&v173 - v38;
  __chkstk_darwin(v37);
  v210 = (char *)&v173 - v39;
  v40 = type metadata accessor for DIPError.Code(0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v43 = (char *)&v173 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for Logger(0);
  v228 = *(_QWORD *)(v221 - 8);
  v44 = __chkstk_darwin(v221);
  v185 = (char *)&v173 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v184 = (char *)&v173 - v47;
  v48 = __chkstk_darwin(v46);
  v186 = (char *)&v173 - v49;
  v50 = __chkstk_darwin(v48);
  v223 = (char *)&v173 - v51;
  __chkstk_darwin(v50);
  v218 = (char *)&v173 - v52;
  v53 = sub_100004828(&qword_100630AB0);
  __chkstk_darwin(v53);
  v55 = (char *)&v173 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for IdentityDocumentDescriptor(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = __chkstk_darwin(v56);
  v60 = (char *)&v173 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  DigitalPresentmentRequest.descriptor.getter(v58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) == 1)
  {
    sub_100008030((uint64_t)v55, &qword_100630AB0);
    v61._countAndFlagsBits = 0xD000000000000037;
    v61._object = (void *)0x8000000100545020;
    v62._countAndFlagsBits = 0x3935663735343132;
    v62._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v62, v61);
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v40);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v64, v65, 0, 0);
    v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100545060, 0, v43, 0, v63, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 47);
    return swift_willThrow(v66);
  }
  v182 = v41;
  v181 = v40;
  v183 = v43;
  v68 = (*(uint64_t (**)(char *, char *, uint64_t))(v57 + 32))(v60, v55, v56);
  v69 = DigitalPresentmentRequest.nonce.getter(v68);
  if (v70 >> 60 == 15)
  {
    v71._object = (void *)0x80000001005450C0;
    v72._countAndFlagsBits = 0x6430383738636261;
    v72._object = (void *)0xE800000000000000;
    v71._countAndFlagsBits = 0xD000000000000032;
    logMilestone(tag:description:)(v72, v71);
    v73 = v183;
    (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:), v181);
    v74 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v75, v76, 0, 0);
    v77 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100545100, 0, v73, 0, v74, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 51);
    swift_willThrow(v77);
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v60, v56);
  }
  v180 = v56;
  v179 = v69;
  v177 = v70;
  v178 = v60;
  v78 = (void *)objc_opt_self(NSUserDefaults);
  v79 = objc_msgSend(v78, "standardUserDefaults");
  v80._countAndFlagsBits = 0xD00000000000002CLL;
  v80._object = (void *)0x8000000100545120;
  v81 = NSUserDefaults.internalBool(forKey:)(v80);

  v82 = objc_msgSend(v78, "standardUserDefaults");
  v83._countAndFlagsBits = 0xD00000000000001CLL;
  v83._object = (void *)0x8000000100545150;
  v84 = NSUserDefaults.internalBool(forKey:)(v83);

  v176 = v57;
  if (v84)
  {
    v174 = v78;
    v85._countAndFlagsBits = 0xD00000000000003DLL;
    v85._object = (void *)0x8000000100545820;
    v86._countAndFlagsBits = 0x6232383030653733;
    v86._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v86, v85);
    v87 = v218;
    v89 = defaultLogger()(v88);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.debug.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = swift_slowAlloc(32, -1);
      v226 = v93;
      *(_DWORD *)v92 = 136315138;
      v175 = 0xD000000000000019;
      v224 = sub_1000E3AC8(0xD000000000000019, 0x8000000100545800, &v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225, v92 + 4);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Forcing test merchant ID %s due to user defaults setting", v92, 0xCu);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      v94 = v93;
      v95 = (void *)0x8000000100545800;
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v92, -1, -1);

      v96 = v221;
      v97 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v87, v221);
    }
    else
    {

      v96 = v221;
      v97 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v87, v221);
      v175 = 0xD000000000000019;
      v95 = (void *)0x8000000100545800;
    }
    goto LABEL_12;
  }
  v97 = DigitalPresentmentRequest.merchantID.getter();
  if (v98)
  {
    v99 = v97;
    v95 = v98;
    if (v81)
    {
      v174 = v78;
      v175 = v97;
      v96 = v221;
LABEL_12:
      v101 = v222;
      v100 = v223;
      v102 = defaultLogger()(v97);
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.debug.getter(v103);
      if (os_log_type_enabled(v103, v104))
      {
        v105 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v105 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Skipping merchant ID entitlement check due to user defaults setting", v105, 2u);
        v106 = v105;
        v100 = v223;
        swift_slowDealloc(v106, -1, -1);
      }
      v223 = v4;

      (*(void (**)(char *, uint64_t))(v228 + 8))(v100, v96);
LABEL_15:
      v107 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
      v108 = (char *)*(int *)(v107 + 20);
      v109 = v108[v101];
      v110 = DigitalPresentmentRequest.merchantNameOverride.getter();
      v112 = v111;
      if ((v109 & 1) != 0)
      {
        if (!v111)
          goto LABEL_20;
        v113 = v110;
        v110 = swift_bridgeObjectRelease(v111);
        v114 = HIBYTE(v112) & 0xF;
        if ((v112 & 0x2000000000000000) == 0)
          v114 = v113 & 0xFFFFFFFFFFFFLL;
        if (v114)
        {
LABEL_20:
          v115 = (uint64_t)v217;
          DigitalPresentmentRequest.merchantPrivacyPolicyOverride.getter(v110);
          v116 = v219;
          v117 = v220;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v115, 1, v220) == 1)
          {
            v218 = v108;
            sub_100008030(v115, &qword_100630A48);
LABEL_22:
            v118 = v178;
            goto LABEL_33;
          }
          v133 = v211;
          v134 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32))(v211, v115, v117);
          v135 = URL.scheme.getter(v134);
          if (v136)
          {
            v137 = v136;
            v226 = v135;
            v227 = v136;
            v224 = 0x7370747468;
            v225 = 0xE500000000000000;
            v138 = sub_1000994DC();
            v139 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v224, &type metadata for String, &type metadata for String, v138, v138);
            swift_bridgeObjectRelease(v137);
            if (!v139)
            {
              v218 = v108;
              (*(void (**)(char *, uint64_t))(v219 + 8))(v133, v220);
              goto LABEL_22;
            }
            swift_bridgeObjectRelease(v95);
            v140 = v183;
            (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v181);
            v141 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v142 = type metadata accessor for DIPError(0);
            v143 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v142, v143, 0, 0);
            v144 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100545790, 0, v140, 0, v141, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 103);
            swift_willThrow(v144);
            sub_100007F78(v179, v177);
            (*(void (**)(char *, uint64_t))(v219 + 8))(v133, v220);
          }
          else
          {
            swift_bridgeObjectRelease(v95);
            v167 = v183;
            (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v181);
            v168 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v169 = type metadata accessor for DIPError(0);
            v170 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v169, v170, 0, 0);
            v171 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100545790, 0, v167, 0, v168, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 99);
            swift_willThrow(v171);
            sub_100007F78(v179, v177);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v133, v117);
          }
          goto LABEL_42;
        }
        swift_bridgeObjectRelease(v95);
        v148 = v183;
        (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:), v181);
        v149 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v150 = type metadata accessor for DIPError(0);
        v151 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v150, v151, 0, 0);
        v124 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x80000001005457D0, 0, v148, 0, v149, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 93);
      }
      else
      {
        v119 = swift_bridgeObjectRelease(v111);
        if (!v112)
        {
          v145 = (uint64_t)v210;
          DigitalPresentmentRequest.merchantPrivacyPolicyOverride.getter(v119);
          v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v145, 1, v220);
          v118 = v178;
          if (v146 != 1)
          {
            swift_bridgeObjectRelease(v95);
            sub_100008030(v145, &qword_100630A48);
            v162 = v183;
            (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.missingEntitlement(_:), v181);
            v163 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v164 = type metadata accessor for DIPError(0);
            v165 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v164, v165, 0, 0);
            v166 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x8000000100545740, 0, v162, 0, v163, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 89);
            swift_willThrow(v166);
            sub_100007F78(v179, v177);
LABEL_45:
            v161 = *(uint64_t (**)(char *, uint64_t))(v176 + 8);
            v172 = v118;
            return v161(v172, v180);
          }
          v218 = v108;
          sub_100008030(v145, &qword_100630A48);
LABEL_33:
          v147 = v214;
          sub_1000C40B0(v215);
          if (!v147)
          {
            sub_1000C4628(v216);
            sub_1000C5EDC(*(_QWORD *)(v222 + *(int *)(v107 + 24)), *(_QWORD *)(v222 + *(int *)(v107 + 24) + 8));
            __asm { BR              X10 }
          }
          sub_100007F78(v179, v177);
          swift_bridgeObjectRelease(v95);
          goto LABEL_45;
        }
        swift_bridgeObjectRelease(v95);
        v120 = v183;
        (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.missingEntitlement(_:), v181);
        v121 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v122 = type metadata accessor for DIPError(0);
        v123 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v122, v123, 0, 0);
        v124 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100545260, 0, v120, 0, v121, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 84);
      }
      swift_willThrow(v124);
      sub_100007F78(v179, v177);
LABEL_42:
      v161 = *(uint64_t (**)(char *, uint64_t))(v176 + 8);
      goto LABEL_43;
    }
    v132 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
    v101 = v222;
    if ((sub_1001B2720(v99, (uint64_t)v95, *(_QWORD **)(v222 + *(int *)(v132 + 24) + 16)) & 1) != 0)
    {
      v174 = v78;
      v175 = v99;
      v223 = v4;
      goto LABEL_15;
    }
    v152._countAndFlagsBits = 0xD000000000000048;
    v152._object = (void *)0x80000001005451E0;
    v153._countAndFlagsBits = 0x3032653632313965;
    v153._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v153, v152);
    v226 = 0;
    v227 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v227);
    v226 = 0xD000000000000027;
    v227 = 0x8000000100545230;
    v154._countAndFlagsBits = v99;
    v154._object = v95;
    String.append(_:)(v154);
    swift_bridgeObjectRelease(v95);
    v155 = v226;
    v156 = v227;
    v157 = v183;
    (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:), v181);
    v158 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v159 = type metadata accessor for DIPError(0);
    v160 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v159, v160, 0, 0);
    v131 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v155, v156, 0, v157, 0, v158, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 74);
  }
  else
  {
    v125._countAndFlagsBits = 0xD000000000000038;
    v125._object = (void *)0x8000000100545170;
    v126._countAndFlagsBits = 0x3730366231386537;
    v126._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v126, v125);
    v127 = v183;
    (*(void (**)(char *, _QWORD, uint64_t))(v182 + 104))(v183, enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:), v181);
    v128 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v129 = type metadata accessor for DIPError(0);
    v130 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v129, v130, 0, 0);
    v131 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x80000001005451B0, 0, v127, 0, v128, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000032, 0x8000000100545080, 66);
  }
  swift_willThrow(v131);
  sub_100007F78(v179, v177);
  v161 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
LABEL_43:
  v172 = v178;
  return v161(v172, v180);
}

uint64_t sub_1000C40B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *object;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;

  v50 = a1;
  v52 = type metadata accessor for DIPError.Code(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v55 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Locale.Region(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - v6;
  v8 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v48 - v14;
  IdentityDocumentDescriptor.documentType.getter(v13);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v15, v8);
  if (v16 == enum case for DigitalPresentmentDocumentType.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v15, v8);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v15, v2);
    v17 = v49;
    Locale.Region.init(stringLiteral:)(20554, 0xE200000000000000);
    v18 = sub_100004790((unint64_t *)&unk_100633500, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region, (uint64_t)&protocol conformance descriptor for Locale.Region);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v7, v2, v18);
    v20 = *(void (**)(char *, uint64_t))(v3 + 8);
    v20(v17, v2);
    v20(v7, v2);
    if ((v19 & 1) != 0)
    {
      v21 = enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:);
      v22 = type metadata accessor for ISO18013KnownDocTypes(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v50, v21, v22);
      return ((uint64_t (*)(char *, uint64_t))v20)(v15, v2);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v17, v15, v2);
      v53 = 0;
      v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      v26 = swift_bridgeObjectRelease(v54);
      v53 = 0xD000000000000025;
      v54 = 0x8000000100544FF0;
      v27._countAndFlagsBits = Locale.Region.identifier.getter(v26);
      object = v27._object;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(object);
      v29 = v53;
      v30 = v54;
      v31 = v55;
      (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v55, enum case for DIPError.Code.digitalPresentmentRegionNotSupported(_:), v52);
      v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v33 = type metadata accessor for DIPError(0);
      v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v33, v34, 0, 0);
      v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v29, v30, 0, v31, 0, v32, 0xD00000000000007ALL, 0x8000000100544F70, 0x6D75636F446F7369, 0xEF65707954746E65, 232);
      swift_willThrow(v35);
      return ((uint64_t (*)(char *, uint64_t))v20)(v17, v2);
    }
  }
  else if (v16 == enum case for DigitalPresentmentDocumentType.driversLicense(_:))
  {
    v24 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
    v25 = type metadata accessor for ISO18013KnownDocTypes(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v50, v24, v25);
  }
  else
  {
    v53 = 0;
    v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v36 = swift_bridgeObjectRelease(v54);
    v53 = 0xD000000000000019;
    v54 = 0x8000000100544F50;
    IdentityDocumentDescriptor.documentType.getter(v36);
    v37 = sub_100004790(&qword_1006334F8, (uint64_t (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType, (uint64_t)&protocol conformance descriptor for DigitalPresentmentDocumentType);
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v37);
    v39 = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v39);
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
    v41 = v53;
    v42 = v54;
    v43 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v55, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v52);
    v44 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v45 = type metadata accessor for DIPError(0);
    v46 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v45, v46, 0, 0);
    v47 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v41, v42, 0, v43, 0, v44, 0xD00000000000007ALL, 0x8000000100544F70, 0x6D75636F446F7369, 0xEF65707954746E65, 238);
    swift_willThrow(v47);
    return ((uint64_t (*)(char *, uint64_t))v40)(v15, v8);
  }
}

uint64_t sub_1000C4628@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;

  v63 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  __chkstk_darwin(v1);
  v58 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Locale.Region(0);
  v59 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v61 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v57 = (char *)&v53 - v13;
  v14 = __chkstk_darwin(v12);
  v54 = (char *)&v53 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  v19 = defaultLogger()(v16);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "DigitalPresentmentRequestExtensions: get region for descriptor", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v24 = v23(v18, v8);
  IdentityDocumentDescriptor.documentType.getter(v24);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)v25 == enum case for DigitalPresentmentDocumentType.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v26 = *(uint64_t (**)(char *, char *, uint64_t))(v59 + 32);
    v27 = v61;
    v28 = v7;
    v29 = v62;
    v30 = v26(v61, v28, v62);
    v31 = v60;
    v32 = defaultLogger()(v30);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "DigitalPresentmentRequestExtensions: In NationalIDCardDescriptor", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v23(v31, v8);
    return v26(v63, v27, v29);
  }
  else if ((_DWORD)v25 == enum case for DigitalPresentmentDocumentType.driversLicense(_:))
  {
    v37 = v54;
    v38 = defaultLogger()(v25);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "DigitalPresentmentRequestExtensions: In DriversLicenseDescriptor", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v42 = v23(v37, v8);
    v43 = v57;
    v44 = defaultLogger()(v42);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "DigitalPresentmentRequestExtensions: region hardcoded to US", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v23(v43, v8);
    return Locale.Region.init(stringLiteral:)(21333, 0xE200000000000000);
  }
  else
  {
    v48 = v58;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v58, enum case for DIPError.Code.missingEntitlement(_:), v56);
    v49 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v50 = type metadata accessor for DIPError(0);
    v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v50, v51, 0, 0);
    v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100545980, 0, v48, 0, v49, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000011, 0x8000000100545A40, 280);
    swift_willThrow(v52);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1000C4B74(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a1;
  v69 = type metadata accessor for DIPError.Code(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v2 = (char *)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v59 - v8;
  v10 = type metadata accessor for ISO18013KnownDocTypes(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v67;
  result = sub_1000C40B0((uint64_t)v13);
  if (v14)
    return result;
  v67 = 0;
  v62 = (unint64_t)v7;
  v63 = (unint64_t)v9;
  v16 = v66;
  v64 = v3;
  v65 = v4;
  v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v17 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      v61 = v2;
      swift_bridgeObjectRetain(v16);
      v19 = 0;
      v62 = (unint64_t)"environment-name";
      v21 = v20;
      while (1)
      {
        v22 = *(unsigned __int8 *)(v21 + v19 + 32);
        if (v22 == 1)
        {
          v23 = 0x80000001005399C0;
          v24 = 0xD000000000000013;
        }
        else
        {
          if (v22 != 2)
          {
            swift_bridgeObjectRelease(v21);
            v21 = v62 | 0x8000000000000000;
LABEL_27:
            v46 = v65;
            v47 = v63;
            v48 = swift_bridgeObjectRelease(v21);
            v49 = defaultLogger()(v48);
            v50 = Logger.logObject.getter(v49);
            v51 = static os_log_type_t.debug.getter(v50);
            if (os_log_type_enabled(v50, v51))
            {
              v52 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v52 = 0;
              v53 = "Caller is entitled for US driver's license";
              goto LABEL_32;
            }
LABEL_33:
            v57 = v64;
            goto LABEL_34;
          }
          v23 = 0xE400000000000000;
          v24 = 1701736302;
        }
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, 0xD000000000000012, 0x80000001005399A0, 0);
        swift_bridgeObjectRelease(v23);
        if ((v25 & 1) != 0)
          goto LABEL_27;
        if (v18 == ++v19)
        {
          swift_bridgeObjectRelease(v21);
          v2 = v61;
          break;
        }
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v2, enum case for DIPError.Code.missingEntitlement(_:), v69);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v27, v28, 0, 0);
    v58 = 359;
    v29 = "caller is not entitled for US driver's license";
    goto LABEL_24;
  }
  if (v17 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v2, enum case for DIPError.Code.missingEntitlement(_:), v69);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v43 = type metadata accessor for DIPError(0);
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v43, v44, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100545980, 0, v2, 0, v42, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000034, 0x80000001005459A0, 375);
    swift_willThrow(v45);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v30 = *(_QWORD *)(v16 + 16);
  v31 = v69;
  v32 = v68;
  if (!v30)
  {
LABEL_23:
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v2, enum case for DIPError.Code.missingEntitlement(_:), v31);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v39, v40, 0, 0);
    v58 = 364;
    v29 = "caller is not entitled for JP national id card";
LABEL_24:
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, (unint64_t)(v29 - 32) | 0x8000000000000000, 0, v2, 0, v26, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000034, 0x80000001005459A0, v58);
    return swift_willThrow(v41);
  }
  v61 = v2;
  swift_bridgeObjectRetain(v16);
  v33 = 0;
  v63 = 0xD000000000000012;
  v60 = (unint64_t)"us-drivers-license";
  v35 = v34;
  v31 = v69;
  while (!*(_BYTE *)(v35 + v33 + 32))
  {
    v36 = 0x80000001005399A0;
    v37 = v63;
LABEL_20:
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v36, 0xD000000000000013, 0x80000001005399C0, 0);
    swift_bridgeObjectRelease(v36);
    if ((v38 & 1) != 0)
      goto LABEL_30;
    ++v33;
    v32 = v68;
    if (v30 == v33)
    {
      swift_bridgeObjectRelease(v35);
      v2 = v61;
      goto LABEL_23;
    }
  }
  if (*(_BYTE *)(v35 + v33 + 32) == 2)
  {
    v36 = 0xE400000000000000;
    v37 = 1701736302;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(v35);
  v35 = v60 | 0x8000000000000000;
LABEL_30:
  v54 = swift_bridgeObjectRelease(v35);
  v47 = v62;
  v55 = defaultLogger()(v54);
  v50 = Logger.logObject.getter(v55);
  v51 = static os_log_type_t.debug.getter(v50);
  v56 = os_log_type_enabled(v50, v51);
  v46 = v65;
  if (!v56)
    goto LABEL_33;
  v52 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v52 = 0;
  v53 = "Caller is entitled for JP national ID Card";
LABEL_32:
  _os_log_impl((void *)&_mh_execute_header, v50, v51, v53, v52, 2u);
  v57 = v64;
  swift_slowDealloc(v52, -1, -1);
LABEL_34:

  return (*(uint64_t (**)(unint64_t, uint64_t))(v46 + 8))(v47, v57);
}

void sub_1000C522C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  Swift::String v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  void *object;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int64_t v126;

  v120 = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v108 = *(_QWORD *)(v3 - 8);
  v109 = v3;
  __chkstk_darwin(v3);
  v110 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for ISO18013KnownDocTypes(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v102 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityElement(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v122 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v88 - v11;
  v13 = sub_100004828(&qword_100630AD0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v88 - v18;
  v100 = v1;
  v20 = IdentityDocumentDescriptor.elementsToIntentToStore.getter(v17);
  v21 = 0;
  v22 = *(_QWORD *)(v20 + 64);
  v114 = v20 + 64;
  v119 = v20;
  v23 = 1 << *(_BYTE *)(v20 + 32);
  v121 = enum case for IdentityElement.ageIsOver(_:);
  v24 = -1;
  v117 = enum case for IdentityElement.givenName(_:);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v115 = enum case for IdentityElement.familyName(_:);
  v113 = enum case for IdentityElement.sex(_:);
  v112 = enum case for IdentityElement.portrait(_:);
  v107 = enum case for IdentityElement.address(_:);
  v106 = enum case for IdentityElement.issuingAuthority(_:);
  v105 = enum case for IdentityElement.documentDHSComplianceStatus(_:);
  v104 = enum case for IdentityElement.documentIssueDate(_:);
  v103 = enum case for IdentityElement.documentExpirationDate(_:);
  v101 = enum case for IdentityElement.documentNumber(_:);
  v99 = enum case for IdentityElement.drivingPrivileges(_:);
  v95 = enum case for IdentityElement.age(_:);
  v92 = enum case for IdentityElement.dateOfBirth(_:);
  v96 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  v116 = (unint64_t)(v23 + 63) >> 6;
  v94 = v116 - 1;
  v93 = enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:);
  v118 = v12;
  v123 = v7;
  if ((v24 & v22) == 0)
    goto LABEL_6;
LABEL_4:
  v26 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  v126 = v21;
  v27 = v26 | (v21 << 6);
LABEL_5:
  v28 = v119;
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v16, *(_QWORD *)(v119 + 48) + *(_QWORD *)(v8 + 72) * v27, v7);
  v29 = *(_QWORD *)(v28 + 56);
  v30 = type metadata accessor for IdentityIntentToStore(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = v29 + *(_QWORD *)(v31 + 72) * v27;
  v33 = sub_100004828(&qword_100630AE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(&v16[*(int *)(v33 + 48)], v32, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v16, 0, 1, v33);
  v12 = v118;
  while (1)
  {
    sub_1000A1F54((uint64_t)v16, (uint64_t)v19, &qword_100630AD0);
    v37 = sub_100004828(&qword_100630AE8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v19, 1, v37) == 1)
    {
      swift_release(v119);
      v46._countAndFlagsBits = 0xD000000000000022;
      v46._object = (void *)0x8000000100545890;
      v47._countAndFlagsBits = 0x3333626532323131;
      v47._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v47, v46);
      return;
    }
    v2 = &v19[*(int *)(v37 + 48)];
    v7 = v123;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v19, v123);
    v38 = v122;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v122, v12, v7);
    v39 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v38, v7);
    if (v39 == v121)
    {
LABEL_14:
      v40 = 11;
      goto LABEL_61;
    }
    if (v39 == v117)
    {
      v40 = 0;
      goto LABEL_61;
    }
    if (v39 == v115)
    {
      v40 = 1;
      goto LABEL_61;
    }
    if (v39 == v113)
    {
      v40 = 2;
      goto LABEL_61;
    }
    if (v39 == v112)
    {
      v40 = 3;
      goto LABEL_61;
    }
    if (v39 == v107)
    {
      v40 = 4;
      goto LABEL_61;
    }
    if (v39 == v106)
    {
      v40 = 5;
      goto LABEL_61;
    }
    if (v39 == v105)
    {
      v40 = 6;
      goto LABEL_61;
    }
    if (v39 == v104)
    {
      v40 = 9;
      goto LABEL_61;
    }
    if (v39 == v103)
    {
      v40 = 7;
      goto LABEL_61;
    }
    v42 = v102;
    if (v39 == v101)
    {
      v43 = v111;
      sub_1000C40B0(v102);
      v111 = v43;
      if (v43)
        goto LABEL_71;
      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 88))(v42, v98);
      if (v44 == v96)
      {
        v40 = 8;
      }
      else
      {
        if (v44 != v93)
        {
          v124 = 0;
          v125 = 0xE000000000000000;
          _StringGuts.grow(_:)(27);
          v61 = swift_bridgeObjectRelease(v125);
          v124 = 0xD000000000000019;
          v125 = 0x8000000100544F50;
          v62 = v89;
          IdentityDocumentDescriptor.documentType.getter(v61);
          v63 = sub_100004790(&qword_1006334F8, (uint64_t (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType, (uint64_t)&protocol conformance descriptor for DigitalPresentmentDocumentType);
          v64 = v91;
          v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v91, v63);
          object = v65._object;
          String.append(_:)(v65);
          swift_bridgeObjectRelease(object);
          (*(void (**)(char *, uint64_t))(v90 + 8))(v62, v64);
          v67 = v124;
          v68 = v125;
          v69 = v110;
          (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v110, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v109);
          v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v71 = type metadata accessor for DIPError(0);
          v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v71, v72, 0, 0);
          v73 = v70;
          v12 = v118;
          v74 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v67, v68, 0, v69, 0, v73, 0xD00000000000007ALL, 0x8000000100544F70, 0xD000000000000037, 0x8000000100545940, 350);
          swift_willThrow(v74);
          (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v102, v98);
          goto LABEL_71;
        }
        v40 = 13;
      }
      goto LABEL_60;
    }
    if (v39 == v99)
    {
      v40 = 10;
LABEL_60:
      v7 = v123;
      goto LABEL_61;
    }
    v7 = v123;
    if (v39 == v95)
      goto LABEL_14;
    if (v39 != v92)
      goto LABEL_73;
    v40 = 12;
LABEL_61:
    if ((sub_1001B27E4(v40, v120) & 1) == 0)
    {
      v124 = 0;
      v125 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v125);
      v124 = 0xD000000000000024;
      v125 = 0x8000000100545910;
      v48 = sub_100004790((unint64_t *)&qword_100631250, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityElement, (uint64_t)&protocol conformance descriptor for IdentityElement);
      v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v48);
      v50 = v49._object;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v50);
      v51 = v124;
      v52 = v125;
      v53 = v7;
      v54 = v110;
      (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v110, enum case for DIPError.Code.missingEntitlement(_:), v109);
      v55 = v12;
      v56 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v57 = type metadata accessor for DIPError(0);
      v58 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v57, v58, 0, 0);
      v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v51, v52, 0, v54, 0, v56, 0xD00000000000007ALL, 0x8000000100544F70, 0xD00000000000002BLL, 0x80000001005458E0, 328);
      swift_willThrow(v59);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v55, v53);
      goto LABEL_66;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    v45 = type metadata accessor for IdentityIntentToStore(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v2, v45);
    v21 = v126;
    if (v25)
      goto LABEL_4;
LABEL_6:
    v34 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v34 >= v116)
    {
      v126 = v21;
    }
    else
    {
      v35 = *(_QWORD *)(v114 + 8 * v34);
      if (v35)
        goto LABEL_9;
      v41 = v21 + 2;
      if (v21 + 2 >= v116)
      {
LABEL_57:
        v126 = v34;
      }
      else
      {
        v35 = *(_QWORD *)(v114 + 8 * v41);
        if (v35)
          goto LABEL_23;
        if (v21 + 3 >= v116)
        {
          v126 = v21 + 2;
        }
        else
        {
          v35 = *(_QWORD *)(v114 + 8 * (v21 + 3));
          if (v35)
          {
            v34 = v21 + 3;
            goto LABEL_9;
          }
          v41 = v21 + 4;
          if (v21 + 4 < v116)
          {
            v35 = *(_QWORD *)(v114 + 8 * v41);
            if (!v35)
            {
              while (1)
              {
                v34 = v41 + 1;
                if (__OFADD__(v41, 1))
                  break;
                if (v34 >= v116)
                {
                  v34 = v94;
                  goto LABEL_57;
                }
                v35 = *(_QWORD *)(v114 + 8 * v34);
                ++v41;
                if (v35)
                  goto LABEL_9;
              }
              __break(1u);
LABEL_73:
              v124 = 0;
              v125 = 0xE000000000000000;
              _StringGuts.grow(_:)(18);
              swift_bridgeObjectRelease(v125);
              v124 = 0xD000000000000010;
              v125 = 0x80000001005458C0;
              v75 = sub_100004790((unint64_t *)&qword_100631250, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityElement, (uint64_t)&protocol conformance descriptor for IdentityElement);
              v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v75);
              v77 = v76._object;
              String.append(_:)(v76);
              swift_bridgeObjectRelease(v77);
              v78 = v124;
              v79 = v125;
              v80 = v7;
              v81 = v110;
              (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v110, enum case for DIPError.Code.badLogic(_:), v109);
              v82 = v12;
              v83 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
              v84 = type metadata accessor for DIPError(0);
              v85 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              swift_allocError(v84, v85, 0, 0);
              v86 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, v79, 0, v81, 0, v83, 0xD00000000000007ALL, 0x8000000100544F70, 0xD00000000000002BLL, 0x80000001005458E0, 324);
              swift_willThrow(v86);
              v87 = *(void (**)(char *, uint64_t))(v8 + 8);
              v87(v82, v80);
              swift_release(v119);
              v87(v122, v80);
              goto LABEL_67;
            }
LABEL_23:
            v34 = v41;
LABEL_9:
            v25 = (v35 - 1) & v35;
            v27 = __clz(__rbit64(v35)) + (v34 << 6);
            v126 = v34;
            goto LABEL_5;
          }
          v126 = v21 + 3;
        }
      }
    }
    v36 = sub_100004828(&qword_100630AE8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v16, 1, 1, v36);
    v25 = 0;
  }
  __break(1u);
LABEL_71:
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v123);
LABEL_66:
  swift_release(v119);
LABEL_67:
  v60 = type metadata accessor for IdentityIntentToStore(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v2, v60);
}

void sub_1000C5EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10._object = (void *)0x8000000100545860;
  v10._countAndFlagsBits = 0xD000000000000029;
  v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    v13 = defaultLogger()(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not checking elements entitlement due to user defaults settings", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    sub_1000C4B74(a1);
    if (!v2)
      sub_1000C522C(a2);
  }
}

uint64_t sub_1000C6068(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UsageDescriptionFetcher(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C60A4(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];

  v3 = v2;
  v34 = a2;
  v5 = type metadata accessor for DIPSignpost(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828((uint64_t *)&unk_1006335F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = defaultLogger()(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate: paymentAuthorizationCoordinator willFinishWithError invoked.", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if (a1)
    objc_msgSend(a1, "dismissWithCompletion:", 0);
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  v23 = (_QWORD *)swift_allocObject(&unk_1006076D0, 48, 7);
  v23[2] = 0;
  v23[3] = 0;
  v24 = v34;
  v23[4] = v3;
  v23[5] = v24;
  v25 = v3;
  swift_errorRetain(v24);
  v26 = sub_1001075D4((uint64_t)v12, (uint64_t)&unk_100633608, (uint64_t)v23);
  swift_release(v26);
  v27 = (uint64_t)&v25[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost];
  swift_beginAccess(&v25[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost], v37, 0, 0);
  sub_100038B24(v27, (uint64_t)v9, (uint64_t *)&unk_1006335F0);
  v29 = v35;
  v28 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v9, 1, v36))
    return sub_100008030((uint64_t)v9, (uint64_t *)&unk_1006335F0);
  v31 = v33;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v33, v9, v28);
  sub_100008030((uint64_t)v9, (uint64_t *)&unk_1006335F0);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
}

uint64_t sub_1000C638C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[13] = a4;
  v5[14] = a5;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[19] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v10);
  v5[21] = swift_task_alloc(v10);
  v5[22] = swift_task_alloc(v10);
  v5[23] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000C643C, 0, 0);
}

uint64_t sub_1000C643C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v2 = *(_QWORD *)(v1 + 104)
     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  v3 = *(void **)v2;
  *(_QWORD *)(v1 + 192) = *(_QWORD *)v2;
  v4 = *(unsigned __int8 *)(v2 + 8);
  *(_BYTE *)(v1 + 248) = v4;
  if (v4 == 255)
  {
    v19 = *(_QWORD *)(v1 + 112);
    if (v19)
    {
      v20 = swift_errorRetain(*(_QWORD *)(v1 + 112));
      defaultLogger()(v20);
      swift_errorRetain(v19);
      v21 = swift_errorRetain(v19);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      v24 = os_log_type_enabled(v22, v23);
      v26 = *(_QWORD *)(v1 + 152);
      v25 = *(_QWORD *)(v1 + 160);
      v27 = *(_QWORD *)(v1 + 144);
      if (v24)
      {
        v85 = *(_QWORD *)(v1 + 152);
        v87 = *(_QWORD *)(v1 + 160);
        v83 = *(_QWORD *)(v1 + 144);
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v89 = v29;
        *(_DWORD *)v28 = 136315138;
        swift_getErrorValue(v19, v1 + 80, v1 + 40);
        v30 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
        v32 = v31;
        *(_QWORD *)(v1 + 64) = sub_1000E3AC8(v30, v31, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v28 + 4);
        swift_bridgeObjectRelease(v32);
        swift_errorRelease(v19);
        swift_errorRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate failing promise with error: %s", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v87, v83);
      }
      else
      {
        swift_errorRelease(v19);
        swift_errorRelease(v19);

        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      }
      v71 = *(_QWORD *)(v1 + 128);
      v70 = *(_QWORD *)(v1 + 136);
      v72 = *(_QWORD *)(v1 + 120);
      v73 = *(_QWORD *)(v1 + 104);
      v74._countAndFlagsBits = 0xD00000000000001CLL;
      v74._object = (void *)0x8000000100545C80;
      v75._countAndFlagsBits = 0x3433633732386334;
      v75._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v75, v74);
      *(_QWORD *)(v1 + 216) = *(_QWORD *)(v73
                                        + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 104))(v70, enum case for DIPError.Code.digitalPresentmentAppCancelled(_:), v72);
      v76 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v77 = type metadata accessor for DIPError(0);
      v78 = sub_100007F30();
      *(_QWORD *)(v1 + 224) = swift_allocError(v77, v78, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100545CA0, 0, v70, 0, v76, 0xD000000000000090, 0x8000000100545BA0, 0xD000000000000037, 0x8000000100545C40, 55);
      v79 = sub_100004828(&qword_1006312D0);
      v80 = sub_100050448();
      v81 = dispatch thunk of Actor.unownedExecutor.getter(v79, v80);
      return swift_task_switch(sub_1000C6D0C, v81, v82);
    }
    else
    {
      v50 = defaultLogger()(a1);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate user cancelled", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }
      v54 = *(_QWORD *)(v1 + 168);
      v55 = *(_QWORD *)(v1 + 144);
      v56 = *(_QWORD *)(v1 + 152);
      v58 = *(_QWORD *)(v1 + 128);
      v57 = *(_QWORD *)(v1 + 136);
      v59 = *(_QWORD *)(v1 + 120);
      v60 = *(_QWORD *)(v1 + 104);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
      v61._countAndFlagsBits = 0xD00000000000001DLL;
      v61._object = (void *)0x8000000100545B60;
      v62._countAndFlagsBits = 0x3665663035323264;
      v62._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v62, v61);
      *(_QWORD *)(v1 + 232) = *(_QWORD *)(v60
                                        + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v58 + 104))(v57, enum case for DIPError.Code.digitalPresentmentUserCancelled(_:), v59);
      v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v64 = type metadata accessor for DIPError(0);
      v65 = sub_100007F30();
      *(_QWORD *)(v1 + 240) = swift_allocError(v64, v65, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100545B80, 0, v57, 0, v63, 0xD000000000000090, 0x8000000100545BA0, 0xD000000000000037, 0x8000000100545C40, 60);
      v66 = sub_100004828(&qword_1006312D0);
      v67 = sub_100050448();
      v68 = dispatch thunk of Actor.unownedExecutor.getter(v66, v67);
      return swift_task_switch(sub_1000C6DBC, v68, v69);
    }
  }
  else if ((v4 & 1) != 0)
  {
    v33 = sub_1000C7950(v3, 1);
    defaultLogger()(v33);
    sub_1000C7950(v3, 1);
    v34 = sub_1000C7950(v3, 1);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    v37 = os_log_type_enabled(v35, v36);
    v38 = *(_QWORD *)(v1 + 176);
    v39 = *(_QWORD *)(v1 + 144);
    v40 = *(_QWORD *)(v1 + 152);
    if (v37)
    {
      v88 = *(_QWORD *)(v1 + 176);
      v86 = *(_QWORD *)(v1 + 152);
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = v39;
      v42 = swift_slowAlloc(32, -1);
      v89 = v42;
      *(_DWORD *)v41 = 136315138;
      swift_getErrorValue(v3, v1 + 72, v1 + 16);
      v43 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
      v45 = v44;
      *(_QWORD *)(v1 + 88) = sub_1000E3AC8(v43, v44, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v41 + 4);
      swift_bridgeObjectRelease(v45);
      sub_1000C7A08(v3, v4);
      sub_1000C7A08(v3, v4);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate failing promise with error: %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v88, v84);
    }
    else
    {
      sub_1000C7A08(v3, v4);
      sub_1000C7A08(v3, v4);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    }
    *(_QWORD *)(v1 + 208) = *(_QWORD *)(*(_QWORD *)(v1 + 104)
                                      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
    v46 = sub_100004828(&qword_1006312D0);
    v47 = sub_100050448();
    v48 = dispatch thunk of Actor.unownedExecutor.getter(v46, v47);
    return swift_task_switch(sub_1000C6CCC, v48, v49);
  }
  else
  {
    v5 = sub_1000C7950(v3, 0);
    v6 = defaultLogger()(v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate fulfilling promise with result", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v1 + 184);
    v11 = *(_QWORD *)(v1 + 144);
    v12 = *(_QWORD *)(v1 + 152);
    v13 = *(_QWORD *)(v1 + 104);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    *(_QWORD *)(v1 + 200) = *(_QWORD *)(v13
                                      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise);
    *(_QWORD *)(v1 + 96) = v3;
    v14 = sub_100004828(&qword_1006312D0);
    v15 = sub_100050448();
    v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, v15);
    return swift_task_switch(sub_1000C6C20, v16, v17);
  }
}

uint64_t sub_1000C6C20()
{
  uint64_t v0;

  dispatch thunk of AsyncPromise.fulfill(value:)(v0 + 96);
  return swift_task_switch(sub_1000C6C60, 0, 0);
}

uint64_t sub_1000C6C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000C7A08(*(void **)(v0 + 192), *(_BYTE *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6CCC()
{
  uint64_t v0;

  dispatch thunk of AsyncPromise.fail(error:)(*(_QWORD *)(v0 + 192));
  return swift_task_switch(sub_1000C8EE0, 0, 0);
}

uint64_t sub_1000C6D0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  dispatch thunk of AsyncPromise.fail(error:)(v1);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1000C6D54, 0, 0);
}

uint64_t sub_1000C6D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_errorRelease(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 240);
  dispatch thunk of AsyncPromise.fail(error:)(v1);
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C6FC8(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t (__cdecl *v10)();

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = unk_10063362C;
  v10 = (uint64_t (__cdecl *)())((char *)&dword_100633628 + dword_100633628);
  a3;
  v7 = a1;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1000C7050;
  return v10();
}

uint64_t sub_1000C7050(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD);

  v3 = *v1;
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v7 = *(void **)(*v1 + 16);
  v6 = *(void **)(*v1 + 24);
  v8 = *v1;
  swift_task_dealloc(v4);

  if (v5)
  {
    v9 = *(void (***)(_QWORD, _QWORD))(v3 + 32);
    ((void (**)(_QWORD, void *))v9)[2](v9, a1);

    _Block_release(v9);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000C70E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  char *v37;
  void *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD v43[3];
  char v44[8];

  v2 = v1;
  v4 = type metadata accessor for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_1006335E0);
  v8 = __chkstk_darwin(v7);
  v40 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v41 = (char *)&v39 - v10;
  v11 = sub_100004828(&qword_1006335E8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (void **)((char *)&v39 - v16);
  __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter(v22);
  v25 = Date.timeIntervalSince(_:)(a1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v26 = (_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result);
  v27 = *(unsigned __int8 *)(v2
                           + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result
                           + 8);
  if (v27 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, 1, 1, v4);
    goto LABEL_15;
  }
  if ((v27 & 1) != 0)
  {
    v28 = (void *)*v26;
    swift_getErrorValue(*v26, v44, v43);
    v29 = v43[1];
    v30 = v43[2];
    v39 = v28;
    sub_1000C7950(v28, 1);
    v31 = (uint64_t)v41;
    Error.dipErrorCode.getter(v29, v30);
    v32 = type metadata accessor for DIPError.Code(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) != 1)
    {
      v34 = v40;
      sub_100038B24(v31, v40, &qword_1006335E0);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v34, v32);
      v36 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.terminalError(_:);
      if (v35 == enum case for DIPError.Code.topekaMerchantNotFound(_:)
        || v35 == enum case for DIPError.Code.unexpectedDaemonState(_:)
        || v35 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
        || v35 == enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
        || v35 == enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
      {
        goto LABEL_14;
      }
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v40, v32);
    }
    v36 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.retryableError(_:);
LABEL_14:
    sub_100008030(v31, &qword_1006335E0);
    *v17 = v39;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v17, *v36, v4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
    sub_1000A1F54((uint64_t)v17, (uint64_t)v19, &qword_1006335E8);
    goto LABEL_15;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v19, enum case for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.success(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
LABEL_15:
  sub_100038B24((uint64_t)v19, (uint64_t)v14, &qword_1006335E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
  {
    sub_100008030((uint64_t)v19, &qword_1006335E8);
  }
  else
  {
    v37 = v42;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v42, v14, v4);
    (*(void (**)(char *, double))(*(_QWORD *)(v2
                                                       + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_analyticsSender
                                                       + 8)
                                           + 8))(v37, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v37, v4);
    v14 = v19;
  }
  return sub_100008030((uint64_t)v14, &qword_1006335E8);
}

id sub_1000C7538()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C75D8()
{
  return type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate(0);
}

uint64_t type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_1006335C0;
  if (!qword_1006335C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate);
  return result;
}

void sub_1000C761C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_100523E00;
  v4[3] = &unk_100523E18;
  sub_1000C76AC(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1000C76AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006335D0)
  {
    v2 = type metadata accessor for DIPSignpost(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006335D0);
  }
}

id sub_1000C7700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  objc_class *v26;
  id v27;
  objc_super v29;
  uint64_t v30[12];
  uint64_t (*v31)(uint64_t);
  uint64_t v32;

  v6 = v5;
  v12 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result];
  *(_QWORD *)v15 = 0;
  v15[8] = -1;
  v16 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost];
  v17 = type metadata accessor for DIPSignpost(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  sub_1000A1F54(a1, (uint64_t)v30, &qword_1006310A8);
  if (sub_10004BB78(v30) == 1 || (v18 = v31) == 0)
  {
    sub_1000C78C8(a2, (uint64_t)v14);
    v23 = type metadata accessor for DigitalPresentmentResponseBuilder(0);
    v22 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    sub_1000C790C((uint64_t)v14, v22 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context);
    v24 = v6;
  }
  else
  {
    v19 = v32;
    v20 = v6;
    v21 = sub_10002EF2C((uint64_t)v18, v19);
    v22 = v18(v21);
    sub_10002F034((uint64_t)v18, v19);
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_responseBuilder] = v22;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_promise] = a3;
  v25 = &v6[OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_analyticsSender];
  *(_QWORD *)v25 = a4;
  *((_QWORD *)v25 + 1) = a5;
  swift_retain(a3);

  v26 = (objc_class *)type metadata accessor for DigitalPresentmentAuthorizationCoordinatorPrivateDelegate(0);
  v29.receiver = v6;
  v29.super_class = v26;
  v27 = objc_msgSendSuper2(&v29, "init");
  sub_100050570(a2);
  return v27;
}

uint64_t sub_1000C78C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C790C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000C7950(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_1000C795C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C7990(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100633604);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  return sub_1000C638C(a1, v4, v5, v7, v6);
}

void sub_1000C7A08(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1000C7A20(a1, a2 & 1);
}

void sub_1000C7A20(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_1000C7A2C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C7A60()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10063361C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001D0A0;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100633618 + dword_100633618))(v2, v3, v4);
}

uint64_t sub_1000C7AD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1[18] = v0;
  v2 = type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID(0);
  v1[19] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[20] = v3;
  v1[21] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_10062FEC0);
  v1[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v5);
  v1[24] = swift_task_alloc(v5);
  v1[25] = swift_task_alloc(v5);
  v6 = type metadata accessor for ContinuousClock(0);
  v1[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[27] = v7;
  v1[28] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v1[29] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[30] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[31] = swift_task_alloc(v10);
  v1[32] = swift_task_alloc(v10);
  v11 = type metadata accessor for Date(0);
  v1[33] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[34] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v13);
  v1[36] = swift_task_alloc(v13);
  v14 = type metadata accessor for DIPSignpost(0);
  v1[37] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[38] = v15;
  v1[39] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost.Config(0);
  v1[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828((uint64_t *)&unk_1006335F0);
  v1[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C7C9C, 0, 0);
}

uint64_t sub_1000C7C9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;

  v2 = v0[40];
  v1 = v0[41];
  v3 = v0[38];
  v4 = v0[37];
  v5 = v0[18];
  static DaemonSignposts.requestDocumentPostAuthorization.getter();
  DIPSignpost.init(_:)(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v4);
  v6 = v5
     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_postAuthorizationSignpost, v0 + 2, 33, 0);
  sub_1000C8D8C(v1, v6);
  v7 = swift_endAccess(v0 + 2);
  static DaemonSignposts.requestDocumentBuildResponse.getter(v7);
  v8 = DIPSignpost.init(_:)(v2);
  v9 = Date.init()(v8);
  v10 = defaultLogger()(v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "DigitalPresentmentAuthorizationCoordinatorPrivateDelegate paymentAuthorizationCoordinator invoked, building response.", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }
  v14 = v0[32];
  v15 = v0[29];
  v16 = v0[30];
  v17 = v0[18];

  v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[42] = v18;
  v18(v14, v15);
  v0[43] = objc_msgSend(objc_allocWithZone((Class)PKPaymentAuthorizationResult), "init");
  v0[44] = *(_QWORD *)(v17
                     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_responseBuilder);
  v19 = (_QWORD *)swift_task_alloc(dword_100642E8C);
  v0[45] = v19;
  *v19 = v0;
  v19[1] = sub_1000C7E54;
  return sub_100484E94();
}

uint64_t sub_1000C7E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 360);
  *(_QWORD *)(*v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000C805C;
  }
  else
  {
    *(_QWORD *)(v4 + 376) = a1;
    v6 = sub_1000C7EC8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000C7EC8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 376);
  v2 = *(void **)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 144)
     + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  v4 = *(void **)v3;
  *(_QWORD *)v3 = v1;
  v5 = *(_BYTE *)(v3 + 8);
  *(_BYTE *)(v3 + 8) = 0;
  v6 = v1;
  sub_1000C7A08(v4, v5);
  objc_msgSend(v2, "setStatus:", 0);

  v25 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 168);
  sub_1000C70E0(v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
}

uint64_t sub_1000C805C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSString v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v92;
  uint64_t v93;

  v2 = *(_QWORD *)(v1 + 368);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 368);
    v88 = *(_QWORD *)(v1 + 248);
    v90 = *(void (**)(uint64_t, uint64_t))(v1 + 336);
    v86 = *(_QWORD *)(v1 + 232);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v93 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v1 + 120, v1 + 40);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
    v11 = v10;
    *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v9, v10, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DigitalPresentmentUIPresenter: paymentAuthorizationCoordinator didAuthorizeContextWithHandler buildResponse failed with error: %s.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v90(v88, v86);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 368);
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 336);
    v14 = *(_QWORD *)(v1 + 248);
    v15 = *(_QWORD *)(v1 + 232);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    v13(v14, v15);
  }
  v16 = *(_QWORD *)(v1 + 368);
  v17 = *(_QWORD *)(v1 + 280);
  v18 = *(_QWORD *)(v1 + 288);
  v19 = *(_QWORD *)(v1 + 264);
  v20 = *(_QWORD *)(v1 + 272);
  v21 = *(_QWORD *)(v1 + 144)
      + OBJC_IVAR____TtC8coreidvd57DigitalPresentmentAuthorizationCoordinatorPrivateDelegate_result;
  v22 = *(void **)v21;
  *(_QWORD *)v21 = v16;
  v23 = *(_BYTE *)(v21 + 8);
  *(_BYTE *)(v21 + 8) = 1;
  swift_errorRetain(v16);
  sub_1000C7A08(v22, v23);
  Date.init()(v24);
  v25 = Date.timeIntervalSince(_:)(v18);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
  if (v25 < 1.0)
  {
    v27 = static Duration.seconds(_:)(v26, 1.0 - v25);
    v29 = v28;
    ContinuousClock.init()();
    v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100635728 + dword_100635728);
    v30 = (_QWORD *)swift_task_alloc(unk_10063572C);
    *(_QWORD *)(v1 + 384) = v30;
    *v30 = v1;
    v30[1] = sub_1000C8804;
    return v91(v27, v29, 0, 0, 1);
  }
  v32 = *(_QWORD *)(v1 + 200);
  swift_getErrorValue(*(_QWORD *)(v1 + 368), v1 + 128, v1 + 64);
  Error.dipErrorCode.getter(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  v33 = type metadata accessor for DIPError.Code(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v35(v32, 1, v33) == 1)
    goto LABEL_13;
  v36 = *(_QWORD *)(v1 + 192);
  sub_100038B24(*(_QWORD *)(v1 + 200), v36, &qword_1006335E0);
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 88);
  v38 = v37(v36, v33);
  v39 = enum case for DIPError.Code.topekaMerchantNotFound(_:);
  if (v38 != enum case for DIPError.Code.topekaMerchantNotFound(_:)
    && v38 != enum case for DIPError.Code.unexpectedDaemonState(_:)
    && v38 != enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
    && v38 != enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
    && v38 != enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
  {
    (*(void (**)(_QWORD, uint64_t))(v34 + 8))(*(_QWORD *)(v1 + 192), v33);
LABEL_13:
    v40 = *(_QWORD *)(v1 + 352);
    sub_100008030(*(_QWORD *)(v1 + 200), &qword_1006335E0);
    v41 = v40 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
    v42 = type metadata accessor for DigitalPresentmentFlow.Context(0);
    v43 = sub_10000806C((_QWORD *)(v41 + *(int *)(v42 + 32)), *(_QWORD *)(v41 + *(int *)(v42 + 32) + 24));
    v44 = *v43;
    v45 = *(_QWORD *)(*v43 + 32);
    if (v45)
    {
      swift_retain(*(_QWORD *)(*v43 + 32));
      sub_100004828((uint64_t *)&unk_100633630);
      sub_100004828((uint64_t *)&unk_100633430);
      Task.cancel()();
      swift_release(v45);
    }
    v46 = *(_QWORD *)(v1 + 368);
    v47 = *(void **)(v1 + 344);
    v48 = *(_QWORD *)(v1 + 352);
    v49 = *(_QWORD *)(v1 + 176);
    v50 = type metadata accessor for TaskPriority(0);
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
    v51(v49, 1, 1, v50);
    v52 = (_QWORD *)swift_allocObject(&unk_100607770, 40, 7);
    v52[2] = 0;
    v52[3] = 0;
    v52[4] = v44;
    swift_retain(v44);
    v53 = sub_10012E054(v49, (uint64_t)&unk_100633640, (uint64_t)v52);
    v54 = *(_QWORD *)(v44 + 32);
    *(_QWORD *)(v44 + 32) = v53;
    swift_release(v54);
    v51(v49, 1, 1, v50);
    v55 = (_QWORD *)swift_allocObject(&unk_100607798, 40, 7);
    v55[2] = 0;
    v55[3] = 0;
    v55[4] = v48;
    swift_retain(v48);
    v56 = sub_100107718(v49, (uint64_t)&unk_100633648, (uint64_t)v55);
    swift_release(v56);
    objc_msgSend(v47, "setStatus:", 1000);
    swift_errorRelease(v46);
    goto LABEL_16;
  }
  v65 = *(_QWORD *)(v1 + 368);
  v66 = *(void **)(v1 + 344);
  v67 = *(_QWORD *)(v1 + 184);
  sub_100008030(*(_QWORD *)(v1 + 200), &qword_1006335E0);
  objc_msgSend(v66, "setStatus:", 1);
  swift_getErrorValue(v65, v1 + 112, v1 + 88);
  Error.dipErrorCode.getter(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
  if (v35(v67, 1, v33) == 1)
  {
    v68 = *(_QWORD *)(v1 + 184);
    swift_errorRelease(*(_QWORD *)(v1 + 368));
    sub_100008030(v68, &qword_1006335E0);
  }
  else
  {
    v69 = v37(*(_QWORD *)(v1 + 184), v33);
    v70 = *(_QWORD *)(v1 + 368);
    if (v69 == v39)
    {
      v71 = *(void **)(v1 + 344);
      v73 = *(_QWORD *)(v1 + 160);
      v72 = *(_QWORD *)(v1 + 168);
      v74 = *(_QWORD *)(v1 + 152);
      (*(void (**)(_QWORD, uint64_t))(v34 + 8))(*(_QWORD *)(v1 + 184), v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v73 + 104))(v72, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentAppNotSupportedText(_:), v74);
      static DigitalPresentmentDisplayConfiguration.getString(_:)(v72);
      v76 = v75;
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v76);
      objc_msgSend(v71, "setLocalizedErrorMessageOverride:", v77);
      swift_errorRelease(v70);

    }
    else
    {
      v78 = *(_QWORD *)(v1 + 184);
      swift_errorRelease(*(_QWORD *)(v1 + 368));
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v78, v33);
    }
  }
LABEL_16:
  v92 = *(_QWORD *)(v1 + 344);
  v58 = *(_QWORD *)(v1 + 320);
  v57 = *(_QWORD *)(v1 + 328);
  v60 = *(_QWORD *)(v1 + 304);
  v59 = *(_QWORD *)(v1 + 312);
  v62 = *(_QWORD *)(v1 + 288);
  v61 = *(_QWORD *)(v1 + 296);
  v63 = *(_QWORD *)(v1 + 272);
  v64 = *(_QWORD *)(v1 + 264);
  v79 = *(_QWORD *)(v1 + 280);
  v80 = *(_QWORD *)(v1 + 256);
  v81 = *(_QWORD *)(v1 + 248);
  v82 = *(_QWORD *)(v1 + 224);
  v83 = *(_QWORD *)(v1 + 200);
  v84 = *(_QWORD *)(v1 + 192);
  v85 = *(_QWORD *)(v1 + 184);
  v87 = *(_QWORD *)(v1 + 176);
  v89 = *(_QWORD *)(v1 + 168);
  sub_1000C70E0(v62);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v62);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v92);
}

uint64_t sub_1000C8804()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 384));
  v4 = v2[27];
  v3 = v2[28];
  v5 = v2[26];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000C8EE4;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000C889C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000C889C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 200);
  swift_getErrorValue(*(_QWORD *)(v0 + 368), v0 + 128, v0 + 64);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v4(v1, 1, v2) != 1)
  {
    v5 = *(_QWORD *)(v0 + 192);
    sub_100038B24(*(_QWORD *)(v0 + 200), v5, &qword_1006335E0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88);
    v7 = v6(v5, v2);
    v8 = enum case for DIPError.Code.topekaMerchantNotFound(_:);
    if (v7 == enum case for DIPError.Code.topekaMerchantNotFound(_:)
      || v7 == enum case for DIPError.Code.unexpectedDaemonState(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantCertificate(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentInvalidCredential(_:)
      || v7 == enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:))
    {
      v13 = *(_QWORD *)(v0 + 368);
      v14 = *(void **)(v0 + 344);
      v15 = *(_QWORD *)(v0 + 184);
      sub_100008030(*(_QWORD *)(v0 + 200), &qword_1006335E0);
      objc_msgSend(v14, "setStatus:", 1);
      swift_getErrorValue(v13, v0 + 112, v0 + 88);
      Error.dipErrorCode.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      if (v4(v15, 1, v2) == 1)
      {
        v16 = *(_QWORD *)(v0 + 184);
        swift_errorRelease(*(_QWORD *)(v0 + 368));
        sub_100008030(v16, &qword_1006335E0);
      }
      else
      {
        v43 = v6(*(_QWORD *)(v0 + 184), v2);
        v44 = *(_QWORD *)(v0 + 368);
        if (v43 == v8)
        {
          v45 = *(void **)(v0 + 344);
          v47 = *(_QWORD *)(v0 + 160);
          v46 = *(_QWORD *)(v0 + 168);
          v48 = *(_QWORD *)(v0 + 152);
          (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v0 + 184), v2);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v46, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentAppNotSupportedText(_:), v48);
          static DigitalPresentmentDisplayConfiguration.getString(_:)(v46);
          v50 = v49;
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
          v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v50);
          objc_msgSend(v45, "setLocalizedErrorMessageOverride:", v51);
          swift_errorRelease(v44);

        }
        else
        {
          v52 = *(_QWORD *)(v0 + 184);
          swift_errorRelease(*(_QWORD *)(v0 + 368));
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v52, v2);
        }
      }
      goto LABEL_21;
    }
    (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v0 + 192), v2);
  }
  v17 = *(_QWORD *)(v0 + 352);
  sub_100008030(*(_QWORD *)(v0 + 200), &qword_1006335E0);
  v18 = v17 + OBJC_IVAR____TtC8coreidvd33DigitalPresentmentResponseBuilder_context;
  v19 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  v20 = sub_10000806C((_QWORD *)(v18 + *(int *)(v19 + 32)), *(_QWORD *)(v18 + *(int *)(v19 + 32) + 24));
  v21 = *v20;
  v22 = *(_QWORD *)(*v20 + 32);
  if (v22)
  {
    swift_retain(*(_QWORD *)(*v20 + 32));
    sub_100004828((uint64_t *)&unk_100633630);
    sub_100004828((uint64_t *)&unk_100633430);
    Task.cancel()();
    swift_release(v22);
  }
  v23 = *(_QWORD *)(v0 + 368);
  v24 = *(void **)(v0 + 344);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 176);
  v27 = type metadata accessor for TaskPriority(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v29 = (_QWORD *)swift_allocObject(&unk_100607770, 40, 7);
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v21;
  swift_retain(v21);
  v30 = sub_10012E054(v26, (uint64_t)&unk_100633640, (uint64_t)v29);
  v31 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 32) = v30;
  swift_release(v31);
  v28(v26, 1, 1, v27);
  v32 = (_QWORD *)swift_allocObject(&unk_100607798, 40, 7);
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = v25;
  swift_retain(v25);
  v33 = sub_100107718(v26, (uint64_t)&unk_100633648, (uint64_t)v32);
  swift_release(v33);
  objc_msgSend(v24, "setStatus:", 1000);
  swift_errorRelease(v23);
LABEL_21:
  v62 = *(_QWORD *)(v0 + 344);
  v35 = *(_QWORD *)(v0 + 320);
  v34 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 312);
  v39 = *(_QWORD *)(v0 + 288);
  v38 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 272);
  v41 = *(_QWORD *)(v0 + 264);
  v53 = *(_QWORD *)(v0 + 280);
  v54 = *(_QWORD *)(v0 + 256);
  v55 = *(_QWORD *)(v0 + 248);
  v56 = *(_QWORD *)(v0 + 224);
  v57 = *(_QWORD *)(v0 + 200);
  v58 = *(_QWORD *)(v0 + 192);
  v59 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 176);
  v61 = *(_QWORD *)(v0 + 168);
  sub_1000C70E0(v39);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v39);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v62);
}

uint64_t sub_1000C8D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006335F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8DD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1006376EC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100007EE8;
  return sub_1001AF238(a1, v4, v5, v6);
}

uint64_t sub_1000C8E48()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C8E74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100642F1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100007EE8;
  return sub_100484C38(a1, v4, v5, v6);
}

uint64_t sub_1000C8EE8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  id v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  id v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  Swift::String v68;
  Swift::String v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  id v77;
  uint64_t v78;
  Swift::String v79;
  void *v80;
  Swift::String v81;
  id v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  Swift::String v87;
  Swift::String v88;
  id v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  id v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  Swift::String v101;
  Swift::String v102;
  id v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  Swift::String v115;
  id v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  Swift::String v121;
  Swift::String v122;
  id v123;
  void *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  Swift::String v128;
  Swift::String v129;
  id v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  Swift::String v135;
  Swift::String v136;
  id v137;
  void *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  Swift::String v142;
  Swift::String v143;
  id v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  Swift::String v149;
  Swift::String v150;
  id v151;
  void *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  Swift::String v156;
  _QWORD v158[2];

  v1 = v0;
  v2 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v2);
  v4 = (char *)v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v158 - v10;
  v158[0] = 0;
  v158[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(524);
  v12._object = (void *)0x8000000100545D40;
  v12._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  v13 = objc_msgSend(v0, "absoluteTimestamp");
  if (v13)
  {
    v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v9, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if ((_DWORD)v16 != 1)
    {
      v15(v11, v4, v5);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  Date.init()(v16);
  sub_10001E5E4((uint64_t)v4);
LABEL_6:
  v17 = sub_1000CA360();
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v17);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v20._countAndFlagsBits = 0x646E65672020200ALL;
  v20._object = (void *)0xEC000000203A7265;
  String.append(_:)(v20);
  v21 = objc_msgSend(v1, "gender");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = (void *)0xE000000000000000;
  }
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27._countAndFlagsBits = 0x6E696B732020200ALL;
  v27._object = (void *)0xEE00203A656E6F54;
  String.append(_:)(v27);
  v28 = objc_msgSend(v1, "skinTone");
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = (void *)0xE000000000000000;
  }
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34._countAndFlagsBits = 0x6E6874652020200ALL;
  v34._object = (void *)0xEF203A7974696369;
  String.append(_:)(v34);
  v35 = objc_msgSend(v1, "ethnicity");
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = (void *)0xE000000000000000;
  }
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v39);
  v41._countAndFlagsBits = 0xD000000000000014;
  v41._object = (void *)0x8000000100545D60;
  String.append(_:)(v41);
  v42 = objc_msgSend(v1, "deviceLanguage");
  if (v42)
  {
    v43 = v42;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = (void *)0xE000000000000000;
  }
  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(v46);
  v48._object = (void *)0x8000000100545D80;
  v48._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v48);
  v49 = objc_msgSend(v1, "proofingDecision");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = (void *)0xE000000000000000;
  }
  v54._countAndFlagsBits = v51;
  v54._object = v53;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v53);
  v55._countAndFlagsBits = 0x757373692020200ALL;
  v55._object = (void *)0xEC000000203A7265;
  String.append(_:)(v55);
  v56 = objc_msgSend(v1, "issuer");
  if (v56)
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

  }
  else
  {
    v58 = 0;
    v60 = (void *)0xE000000000000000;
  }
  v61._countAndFlagsBits = v58;
  v61._object = v60;
  String.append(_:)(v61);
  swift_bridgeObjectRelease(v60);
  v62._countAndFlagsBits = 0xD000000000000018;
  v62._object = (void *)0x8000000100545DA0;
  String.append(_:)(v62);
  v63 = objc_msgSend(v1, "livenessAssessment");
  if (v63)
  {
    v64 = v63;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v67 = v66;

  }
  else
  {
    v65 = 0;
    v67 = (void *)0xE000000000000000;
  }
  v68._countAndFlagsBits = v65;
  v68._object = v67;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v67);
  v69._countAndFlagsBits = 0xD000000000000017;
  v69._object = (void *)0x8000000100545DC0;
  String.append(_:)(v69);
  v70 = objc_msgSend(v1, "gestureAssessment");
  if (v70)
  {
    v71 = v70;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v74 = v73;

  }
  else
  {
    v72 = 0;
    v74 = (void *)0xE000000000000000;
  }
  v75._countAndFlagsBits = v72;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v74);
  v76._object = (void *)0x8000000100545DE0;
  v76._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v76);
  v77 = objc_msgSend(v1, "axSettings");
  v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, &type metadata for String);

  v79._countAndFlagsBits = Array.description.getter(v78, &type metadata for String);
  v80 = v79._object;
  String.append(_:)(v79);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v80);
  v81._object = (void *)0x8000000100545E00;
  v81._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v81);
  v82 = objc_msgSend(v1, "facVersion");
  if (v82)
  {
    v83 = v82;
    v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v86 = v85;

  }
  else
  {
    v84 = 0;
    v86 = (void *)0xE000000000000000;
  }
  v87._countAndFlagsBits = v84;
  v87._object = v86;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v86);
  v88._countAndFlagsBits = 0xD000000000000017;
  v88._object = (void *)0x8000000100545E20;
  String.append(_:)(v88);
  v89 = objc_msgSend(v1, "facePoseVersion");
  if (v89)
  {
    v90 = v89;
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    v93 = v92;

  }
  else
  {
    v91 = 0;
    v93 = (void *)0xE000000000000000;
  }
  v94._countAndFlagsBits = v91;
  v94._object = v93;
  String.append(_:)(v94);
  swift_bridgeObjectRelease(v93);
  v95._object = (void *)0x8000000100545E40;
  v95._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v95);
  v96 = objc_msgSend(v1, "padtoolVersion");
  if (v96)
  {
    v97 = v96;
    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v100 = v99;

  }
  else
  {
    v98 = 0;
    v100 = (void *)0xE000000000000000;
  }
  v101._countAndFlagsBits = v98;
  v101._object = v100;
  String.append(_:)(v101);
  swift_bridgeObjectRelease(v100);
  v102._countAndFlagsBits = 0xD000000000000012;
  v102._object = (void *)0x8000000100545E60;
  String.append(_:)(v102);
  v103 = objc_msgSend(v1, "prdVersion");
  if (v103)
  {
    v104 = v103;
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
    v107 = v106;

  }
  else
  {
    v105 = 0;
    v107 = (void *)0xE000000000000000;
  }
  v108._countAndFlagsBits = v105;
  v108._object = v107;
  String.append(_:)(v108);
  swift_bridgeObjectRelease(v107);
  v109._countAndFlagsBits = 0xD000000000000011;
  v109._object = (void *)0x8000000100545E80;
  String.append(_:)(v109);
  v110 = objc_msgSend(v1, "didStepUp");
  v111 = v110 == 0;
  if (v110)
    v112 = 1702195828;
  else
    v112 = 0x65736C6166;
  if (v111)
    v113 = 0xE500000000000000;
  else
    v113 = 0xE400000000000000;
  v114 = v113;
  String.append(_:)(*(Swift::String *)&v112);
  swift_bridgeObjectRelease(v113);
  v115._countAndFlagsBits = 0xD000000000000020;
  v115._object = (void *)0x8000000100545EA0;
  String.append(_:)(v115);
  v116 = objc_msgSend(v1, "passiveGestureAssessment");
  if (v116)
  {
    v117 = v116;
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
    v120 = v119;

  }
  else
  {
    v118 = 0;
    v120 = (void *)0xE000000000000000;
  }
  v121._countAndFlagsBits = v118;
  v121._object = v120;
  String.append(_:)(v121);
  swift_bridgeObjectRelease(v120);
  v122._object = (void *)0x8000000100545ED0;
  v122._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v122);
  v123 = objc_msgSend(v1, "passiveLivenessAssessment");
  if (v123)
  {
    v124 = v123;
    v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
    v127 = v126;

  }
  else
  {
    v125 = 0;
    v127 = (void *)0xE000000000000000;
  }
  v128._countAndFlagsBits = v125;
  v128._object = v127;
  String.append(_:)(v128);
  swift_bridgeObjectRelease(v127);
  v129._object = (void *)0x8000000100545F00;
  v129._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v129);
  v130 = objc_msgSend(v1, "passiveLivenessFacVersion");
  if (v130)
  {
    v131 = v130;
    v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
    v134 = v133;

  }
  else
  {
    v132 = 0;
    v134 = (void *)0xE000000000000000;
  }
  v135._countAndFlagsBits = v132;
  v135._object = v134;
  String.append(_:)(v135);
  swift_bridgeObjectRelease(v134);
  v136._countAndFlagsBits = 0xD000000000000026;
  v136._object = (void *)0x8000000100545F30;
  String.append(_:)(v136);
  v137 = objc_msgSend(v1, "passiveLivenessFacePoseVersion");
  if (v137)
  {
    v138 = v137;
    v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v141 = v140;

  }
  else
  {
    v139 = 0;
    v141 = (void *)0xE000000000000000;
  }
  v142._countAndFlagsBits = v139;
  v142._object = v141;
  String.append(_:)(v142);
  swift_bridgeObjectRelease(v141);
  v143._countAndFlagsBits = 0xD000000000000025;
  v143._object = (void *)0x8000000100545F60;
  String.append(_:)(v143);
  v144 = objc_msgSend(v1, "passiveLivenessPadtoolVersion");
  if (v144)
  {
    v145 = v144;
    v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    v148 = v147;

  }
  else
  {
    v146 = 0;
    v148 = (void *)0xE000000000000000;
  }
  v149._countAndFlagsBits = v146;
  v149._object = v148;
  String.append(_:)(v149);
  swift_bridgeObjectRelease(v148);
  v150._countAndFlagsBits = 0xD000000000000021;
  v150._object = (void *)0x8000000100545F90;
  String.append(_:)(v150);
  v151 = objc_msgSend(v1, "passiveLivenessPrdVersion");
  if (v151)
  {
    v152 = v151;
    v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
    v155 = v154;

  }
  else
  {
    v153 = 0;
    v155 = (void *)0xE000000000000000;
  }
  v156._countAndFlagsBits = v153;
  v156._object = v155;
  String.append(_:)(v156);
  swift_bridgeObjectRelease(v155);
  return v158[0];
}

uint64_t sub_1000C9980()
{
  return sub_1000C8EE8();
}

unint64_t sub_1000C99A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t result;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v98 = a6;
  v99 = a8;
  v105 = a7;
  v102 = a3;
  v103 = a5;
  v96 = a2;
  v97 = a4;
  v100 = a9;
  v95 = a11;
  v81 = a10;
  v94 = a13;
  v79 = a12;
  v93 = a15;
  v78 = a14;
  v92 = a17;
  v77 = a16;
  v91 = a19;
  v75 = a18;
  v90 = a31;
  v73 = a30;
  v71 = a42;
  v80 = a41;
  v82 = a39;
  v70 = a38;
  v83 = a37;
  v69 = a36;
  v84 = a35;
  v68 = a34;
  v101 = a32;
  v85 = a33;
  v86 = a28;
  v64 = a29;
  v87 = a26;
  v65 = a27;
  v88 = a24;
  v66 = a25;
  v89 = a22;
  v67 = a23;
  v104 = a20;
  v43 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v43);
  v45 = (char *)&v63 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v45;
  v46 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v46 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, a1, v46);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v46);
  v48 = _swiftEmptyArrayStorage;
  if (a21)
    v48 = a21;
  v72 = v48;
  v74 = objc_allocWithZone((Class)BMWalletPaymentsCommerceUserProofingResult);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(a21);
  swift_bridgeObjectRetain(a23);
  swift_bridgeObjectRetain(a25);
  swift_bridgeObjectRetain(a27);
  swift_bridgeObjectRetain(a29);
  swift_bridgeObjectRetain(v101);
  v49 = v68;
  swift_bridgeObjectRetain(v68);
  v50 = v69;
  swift_bridgeObjectRetain(v69);
  v51 = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(a40);
  v52 = v71;
  swift_bridgeObjectRetain(v71);
  v53 = v73;
  v54 = v73;
  swift_bridgeObjectRetain(v104);
  v55 = v75;
  swift_bridgeObjectRetain(v75);
  v56 = v77;
  swift_bridgeObjectRetain(v77);
  v57 = v78;
  swift_bridgeObjectRetain(v78);
  v58 = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v81);
  v60 = sub_1000C9E00((uint64_t)v76, v96, v102, v97, v103, v98, v105, v99, v59, v95, v58, v94, v57, v93, v56, v92, v55, v91, v104,
          (uint64_t)v72,
          v89,
          v67,
          v88,
          v66,
          v87,
          v65,
          v86,
          v64,
          v53,
          v90,
          v101,
          v85,
          v49,
          v84,
          v50,
          v83,
          v51,
          v82,
          a40,
          v80,
          v52);
  result = sub_1000CA324();
  v62 = v100;
  v100[3] = result;
  v62[4] = &off_1006077B8;
  *v62 = v60;
  return result;
}

uint64_t type metadata accessor for BMUserProofingEventFactory()
{
  return objc_opt_self(_TtC8coreidvd26BMUserProofingEventFactory);
}

id sub_1000C9E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  NSString v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  NSString v63;
  uint64_t v64;
  NSString v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  NSString v69;
  void *v70;
  NSString v71;
  NSString v73;
  NSString v74;
  NSString v75;
  NSString v76;
  NSString v77;
  NSString v78;
  NSString v79;
  NSString v80;
  NSString v81;
  void *v82;
  id v83;
  Class isa;
  NSString v85;
  NSArray v86;
  NSString v87;

  v45 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v45 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(a1, 1, v45) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, v45);
  }
  if (a3)
  {
    v81 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    if (a5)
      goto LABEL_5;
  }
  else
  {
    v81 = 0;
    if (a5)
    {
LABEL_5:
      v80 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a5);
      v47 = a9;
      if (a7)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  v80 = 0;
  v47 = a9;
  if (a7)
  {
LABEL_6:
    v79 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
    v48 = a11;
    if (v47)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v79 = 0;
  v48 = a11;
  if (v47)
  {
LABEL_7:
    v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    v49 = a13;
    if (v48)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v78 = 0;
  v49 = a13;
  if (v48)
  {
LABEL_8:
    v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v50 = a15;
    if (v49)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v77 = 0;
  v50 = a15;
  if (v49)
  {
LABEL_9:
    v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v49);
    v51 = a17;
    if (v50)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v76 = 0;
  v51 = a17;
  if (v50)
  {
LABEL_10:
    v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    v53 = a19;
    v52 = a20;
    if (v51)
      goto LABEL_11;
LABEL_20:
    v74 = 0;
    v54 = a22;
    if (v53)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_19:
  v75 = 0;
  v53 = a19;
  v52 = a20;
  if (!v51)
    goto LABEL_20;
LABEL_11:
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  v54 = a22;
  if (v53)
  {
LABEL_12:
    v87 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
    goto LABEL_22;
  }
LABEL_21:
  v87 = 0;
LABEL_22:
  v86.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v52);
  if (v54)
  {
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    v56 = a26;
    if (a24)
      goto LABEL_24;
  }
  else
  {
    v55 = 0;
    v56 = a26;
    if (a24)
    {
LABEL_24:
      v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a24);
      v58 = a28;
      if (v56)
        goto LABEL_25;
      goto LABEL_35;
    }
  }
  v57 = 0;
  v58 = a28;
  if (v56)
  {
LABEL_25:
    v73 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v56);
    v59 = a31;
    if (v58)
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  v73 = 0;
  v59 = a31;
  if (v58)
  {
LABEL_26:
    v85 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    v60 = a33;
    if (v59)
      goto LABEL_27;
    goto LABEL_37;
  }
LABEL_36:
  v85 = 0;
  v60 = a33;
  if (v59)
  {
LABEL_27:
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    v62 = a35;
    if (v60)
      goto LABEL_28;
    goto LABEL_38;
  }
LABEL_37:
  v61 = 0;
  v62 = a35;
  if (v60)
  {
LABEL_28:
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    v64 = a37;
    if (v62)
      goto LABEL_29;
    goto LABEL_39;
  }
LABEL_38:
  v63 = 0;
  v64 = a37;
  if (v62)
  {
LABEL_29:
    v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v62);
    v66 = a39;
    if (v64)
      goto LABEL_30;
    goto LABEL_40;
  }
LABEL_39:
  v65 = 0;
  v66 = a39;
  if (v64)
  {
LABEL_30:
    v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v64);
    v68 = a41;
    if (v66)
      goto LABEL_31;
LABEL_41:
    v69 = 0;
    v70 = a29;
    if (v68)
      goto LABEL_32;
LABEL_42:
    v71 = 0;
    goto LABEL_43;
  }
LABEL_40:
  v67 = 0;
  v68 = a41;
  if (!v66)
    goto LABEL_41;
LABEL_31:
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  v70 = a29;
  if (!v68)
    goto LABEL_42;
LABEL_32:
  v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
LABEL_43:
  v83 = objc_msgSend(v82, "initWithAbsoluteTimestamp:age:gender:skinTone:ethnicity:deviceLanguage:proofingDecision:issuer:livenessAssessment:gestureAssessment:axSettings:facVersion:facePoseVersion:padtoolVersion:prdVersion:didStepUp:passiveGestureAssessment:passiveLivenessAssessment:passiveLivenessFacVersion:passiveLivenessFacePoseVersion:passiveLivenessPadtoolVersion:passiveLivenessPrdVersion:", isa, v81, v80, v79, v78, v77, v76, v75, v74, v87, v86.super.isa, v55, v57, v73,
          v85,
          v70,
          v61,
          v63,
          v65,
          v67,
          v69,
          v71);

  return v83;
}

unint64_t sub_1000CA324()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006336F0;
  if (!qword_1006336F0)
  {
    v1 = objc_opt_self(BMWalletPaymentsCommerceUserProofingResult);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1006336F0);
  }
  return result;
}

unint64_t sub_1000CA360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100633310;
  if (!qword_100633310)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100633310);
  }
  return result;
}

uint64_t sub_1000CA3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v0 = type metadata accessor for DIPCertUsage(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CertUsageMapper(0);
  v4 = static CertUsageMapper.sharedInstance.getter();
  v5 = type metadata accessor for Workflow(0);
  v6 = enum case for DIPCertUsage.topekaServerSigning(_:);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v7(v3, enum case for DIPCertUsage.topekaServerSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)(v5, v3);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v9 = type metadata accessor for LegacyINOWorkflow(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v9, v3);
  v8(v3, v0);
  v10 = type metadata accessor for LegacySPWorkflow(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v10, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for GlobalConfig, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for AttributeConfig, v3);
  v8(v3, v0);
  v11 = type metadata accessor for IdentityProofingResponse(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v11, v3);
  v8(v3, v0);
  v12 = type metadata accessor for SharingRegistrationResponse(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v12, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for VerifiedClaimHeader, v3);
  v8(v3, v0);
  v13 = sub_100004828(&qword_1006336F8);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v13, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentityStatusAttestation, v3);
  v8(v3, v0);
  v14 = sub_100004828(&qword_100633700);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v14, v3);
  v8(v3, v0);
  v15 = sub_100004828(&qword_100633708);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v15, v3);
  v8(v3, v0);
  v16 = sub_100004828((uint64_t *)&unk_100633710);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v16, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentityProofingResponseV2, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentityProofingPendingActionsResponse, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for LegacyWorkflowRecommendationResponse, v3);
  v8(v3, v0);
  v17 = type metadata accessor for WorkflowRecommendationResponse(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v17, v3);
  v8(v3, v0);
  v18 = sub_100004828((uint64_t *)&unk_100636010);
  v7(v3, enum case for DIPCertUsage.inoSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)(v18, v3);
  v8(v3, v0);
  v7(v3, enum case for DIPCertUsage.spSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentitySharingResponse, v3);
  v8(v3, v0);
  v7(v3, enum case for DIPCertUsage.assessmentServerSigning(_:), v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for AssessmentConfig, v3);
  v8(v3, v0);
  v19 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(v19, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for LivenessConfigV2, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentityProofingStaticAsset, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for IdentityProofingStaticTC, v3);
  v8(v3, v0);
  v7(v3, v6, v0);
  CertUsageMapper.registerMapping(forType:usage:)(&type metadata for MobileDocumentReaderTermsAndConditionsFetcher.Response, v3);
  swift_release(v4);
  return ((uint64_t (*)(char *, uint64_t))v8)(v3, v0);
}

ValueMetadata *_s31IdentityProofingDeletionUtilityOMa()
{
  return &_s31IdentityProofingDeletionUtilityON;
}

void sub_1000CA92C(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t j;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t k;
  id v27;
  void *v28;
  uint64_t v29;

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  v6 = *(void **)(a1 + 16);
  v7 = sub_100004828(&qword_1006332D0);
  v8 = NSManagedObjectContext.fetch<A>(_:)(v5, v7);
  if (v1)
  {

    return;
  }
  v9 = v8;
  v10 = (uint64_t)sub_100458ADC(v8);

  swift_bridgeObjectRelease(v9);
  if (v10)
  {
    if ((unint64_t)v10 >> 62)
    {
      if (v10 >= 0)
        v15 = v10 & 0xFFFFFFFFFFFFFF8;
      else
        v15 = v10;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (v11)
        goto LABEL_5;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v11)
      {
LABEL_5:
        if (v11 < 1)
        {
          __break(1u);
LABEL_25:
          if (v10 < 0)
            v22 = v10;
          else
            v22 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v10);
          v18 = _CocoaArrayWrapper.endIndex.getter(v22);
          if (!v18)
            goto LABEL_29;
          goto LABEL_18;
        }
        for (i = 0; i != v11; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0)
            v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
          else
            v13 = *(id *)(v10 + 8 * i + 32);
          v14 = v13;
          objc_msgSend(v6, "deleteObject:", v13);

        }
      }
    }
    swift_bridgeObjectRelease_n(v10, 2);
  }
  v16 = type metadata accessor for StoredUploadAsset(0);
  v17 = (void *)static StoredUploadAsset.fetchRequest()();
  v10 = NSManagedObjectContext.fetch<A>(_:)(v17, v16);

  if ((unint64_t)v10 >> 62)
    goto LABEL_25;
  v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v10);
  if (!v18)
    goto LABEL_29;
LABEL_18:
  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  for (j = 0; j != v18; ++j)
  {
    if ((v10 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v10);
    else
      v20 = *(id *)(v10 + 8 * j + 32);
    v21 = v20;
    objc_msgSend(v6, "deleteObject:", v20);

  }
LABEL_29:
  swift_bridgeObjectRelease_n(v10, 2);
  v23 = type metadata accessor for StoredPrearmTrust(0);
  v24 = (void *)static StoredPrearmTrust.fetchRequest()();
  v10 = NSManagedObjectContext.fetch<A>(_:)(v24, v23);

  if (!((unint64_t)v10 >> 62))
  {
    v25 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v10);
    if (v25)
      goto LABEL_33;
LABEL_44:
    swift_bridgeObjectRelease_n(v10, 2);
    sub_1000D6288();
    return;
  }
LABEL_40:
  if (v10 < 0)
    v29 = v10;
  else
    v29 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v25 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v25)
    goto LABEL_44;
LABEL_33:
  if (v25 >= 1)
  {
    for (k = 0; k != v25; ++k)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v10);
      else
        v27 = *(id *)(v10 + 8 * k + 32);
      v28 = v27;
      objc_msgSend(v6, "deleteObject:", v27);

    }
    goto LABEL_44;
  }
  __break(1u);
}

uint64_t sub_1000CAC8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_100633728 + dword_100633728);
  v1 = (_QWORD *)swift_task_alloc(unk_10063372C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return v3();
}

uint64_t sub_1000CACE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[26] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[27] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[28] = swift_task_alloc(v3);
  v0[29] = swift_task_alloc(v3);
  return swift_task_switch(sub_1000CAD50, 0, 0);
}

uint64_t sub_1000CAD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderDeletionUtility attempting to delete data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 232);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = *(_QWORD *)(v1 + 216);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v9, 24, 7);
  sub_1000D6044();
  v11 = v10;
  swift_retain(v10);
  sub_1000D6570((uint64_t)sub_1000CAFB4, v11);
  swift_release(v11);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v14 = qword_1006702A0;
  v15 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v16 = (uint64_t)&v15[4];
  v17 = v15 + 52;
  os_unfair_lock_lock(v15 + 52);
  sub_100139D14(v16, v14, (_OWORD *)(v1 + 16));
  os_unfair_lock_unlock(v17);
  v18 = *(_QWORD *)(v1 + 88);
  swift_retain(v18);
  sub_10001D410((_QWORD *)(v1 + 16));
  v19 = *(os_unfair_lock_s **)(v18 + 16);
  v20 = v19 + 4;
  v21 = v19 + 6;
  os_unfair_lock_lock(v19 + 6);
  sub_100003C14(v20, &v23);
  os_unfair_lock_unlock(v21);
  v22 = v23;
  swift_release(v18);
  if (v22 <= 0)
    sub_100394798();
  swift_release(v11);
  v12 = *(_QWORD *)(v1 + 224);
  swift_task_dealloc(*(_QWORD *)(v1 + 232));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000CAFB4()
{
  uint64_t v0;

  sub_1000CA92C(v0);
}

uint64_t sub_1000CAFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v10);
  v5[15] = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v5[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[18] = v13;
  v5[19] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CB0B4, 0, 0);
}

uint64_t sub_1000CB0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  static DaemonSignposts.MobileDocumentReader.validateResponse.getter();
  v3 = DIPSignpost.init(_:)(v1);
  defaultLogger()(v3);
  v4 = swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    if (v8 >> 62)
    {
      v26 = *(_QWORD *)(v0 + 48);
      if (v26 < 0)
        v27 = *(_QWORD *)(v0 + 48);
      else
        v27 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
      v10 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ISO18013ResponseValidator validating ISO18013 response, trustedIssuerRoots: %ld.", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
  }

  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  *(_QWORD *)(v0 + 160) = v14;
  v15 = v14(v12, v13);
  v16 = ISO18013Response.documents.getter(v15);
  *(_QWORD *)(v0 + 168) = v16;
  if (v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
    *(_QWORD *)(v0 + 176) = v17;
    return swift_task_switch(sub_1000CB2DC, v17, 0);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 88);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    swift_task_dealloc(v19);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000CB2DC()
{
  uint64_t v0;

  sub_10003BE3C(*(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_1000CB31C, 0, 0);
}

uint64_t sub_1000CB31C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v0[2] = v0[21];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[23] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[24] = v5;
  v6 = sub_100004828(&qword_1006337F0);
  v7 = sub_100004828((uint64_t *)&unk_100633630);
  v8 = sub_1000CC1BC();
  *v5 = v0;
  v5[1] = sub_1000CB3E0;
  return Sequence.asyncMap<A>(_:)(&unk_1006337E8, v4, v6, v7, v8);
}

uint64_t sub_1000CB3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000CB594;
  }
  else
  {
    v6 = v3[23];
    swift_bridgeObjectRelease(v3[21]);
    swift_task_dealloc(v6);
    v5 = sub_1000CB460;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000CB460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ISO18013ResponseValidator successfully validated ISO18013 response.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 160);
  v7 = *(_QWORD *)(v1 + 112);
  v8 = *(_QWORD *)(v1 + 96);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 200);
  v11 = *(_QWORD *)(v1 + 144);
  v10 = *(_QWORD *)(v1 + 152);
  v13 = *(_QWORD *)(v1 + 128);
  v12 = *(_QWORD *)(v1 + 136);
  v15 = *(_QWORD *)(v1 + 112);
  v14 = *(_QWORD *)(v1 + 120);
  v16 = *(_QWORD *)(v1 + 88);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v9);
}

uint64_t sub_1000CB594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v1);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100007F30();
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000042, 0x8000000100546060, v1, v7, 0, v10, 0xD000000000000073, 0x80000001005460B0, 0xD00000000000004ELL, 0x8000000100546130, 100);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CB73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for DIPError.PropertyKey(0);
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100636620);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v5[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[18] = v10;
  v5[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013MobileSecurityObject(0);
  v5[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[21] = v12;
  v5[22] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CB818, 0, 0);
}

uint64_t sub_1000CB818()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_100630CD4);
  v0[23] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000CB874;
  return sub_10003C0F0(v0[22], v0[9], v0[11]);
}

uint64_t sub_1000CB874(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000CBDF4;
  else
    v5 = sub_1000CB8E0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000CB8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)(void);
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 80) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 56));
  sub_1001B325C(v4, v2, v3);
  v5 = v1;
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 176);
  v63 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  if (v5)
  {
    v57 = (_OWORD *)(v0 + 16);
    v58 = *(_QWORD *)(v0 + 176);
    v59 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 144);
    v60 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = sub_100004828((uint64_t *)&unk_1006325A0);
    v13 = sub_100004828((uint64_t *)&unk_100633440);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(_QWORD *)(v14 + 72);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject(v12, v17 + v15, v16 | 7);
    *(_OWORD *)(v18 + 16) = xmmword_10051FFB0;
    v19 = (_QWORD *)(v18 + v17 + *(int *)(v13 + 48));
    v20 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
    (*(void (**)(void))(v11 + 104))();
    v19[3] = sub_100004828((uint64_t *)&unk_100633630);
    *v19 = v6;
    swift_errorRetain(v5);
    v21 = sub_10011D314(v18);
    LODWORD(v18) = enum case for DIPError.Code.internalError(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v8, enum case for DIPError.Code.internalError(_:), v60);
    v22 = type metadata accessor for DIPError(0);
    v61 = sub_100007F30();
    v23 = swift_allocError(v22, v61, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v8, 0, v21, 0xD000000000000073, 0x80000001005460B0, 0xD00000000000004ELL, 0x8000000100546130, 84);
    swift_willThrow(v24);
    swift_errorRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v58, v59);
    v25 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 48) = v23;
    swift_errorRetain(v23);
    v26 = sub_100004828((uint64_t *)&unk_100633430);
    v27 = swift_dynamicCast(v25, v0 + 48, v26, v22, 6);
    v28 = *(_QWORD *)(v22 - 8);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v30 = *(_QWORD *)(v0 + 128);
    v62 = v18;
    if ((v27 & 1) == 0)
    {
      v29(v30, 1, 1, v22);
      sub_100008030(v30, &qword_100636620);
      v37 = (_OWORD *)(v0 + 16);
      *v57 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      goto LABEL_14;
    }
    v32 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 104);
    v34 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v29)(v30, 0, 1, v22);
    v35 = DIPError.properties.getter(v34);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 104))(v31, v20, v33);
    if (*(_QWORD *)(v35 + 16))
    {
      v36 = sub_1004A8668(*(_QWORD *)(v0 + 120));
      v37 = (_OWORD *)(v0 + 16);
      if ((v38 & 1) != 0)
      {
        sub_10002EDBC(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)v57);
        goto LABEL_11;
      }
      v43 = 0uLL;
    }
    else
    {
      v43 = 0uLL;
      v37 = (_OWORD *)(v0 + 16);
    }
    *v37 = v43;
    v37[1] = v43;
LABEL_11:
    v45 = *(_QWORD *)(v0 + 112);
    v44 = *(_QWORD *)(v0 + 120);
    v46 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRelease(v35);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    if (*(_QWORD *)(v0 + 40))
    {
      v47 = sub_100004828((uint64_t *)&unk_100633630);
      if (swift_dynamicCast(v0 + 56, v37, (char *)&type metadata for Any + 8, v47, 6))
      {
        v48 = *(_QWORD **)(v0 + 56);
LABEL_16:
        v49 = *(_QWORD *)(v0 + 176);
        v50 = *(_QWORD *)(v0 + 144);
        v51 = *(_QWORD *)(v0 + 152);
        v52 = *(_QWORD *)(v0 + 128);
        v53 = *(_QWORD *)(v0 + 136);
        v64 = *(_QWORD *)(v0 + 120);
        type metadata accessor for DaemonAnalytics(0);
        swift_errorRetain(v23);
        static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)(v23, 1, v48);
        swift_bridgeObjectRelease(v48);
        swift_errorRelease(v23);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v51, v62, v53);
        swift_errorRetain(v23);
        v54 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        swift_allocError(v22, v61, 0, 0);
        v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v23, v51, 0, v54, 0xD000000000000073, 0x80000001005460B0, 0xD00000000000004ELL, 0x8000000100546130, 92);
        swift_willThrow(v55);
        swift_errorRelease(v23);
        swift_task_dealloc(v49);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v64);
        v42 = *(uint64_t (**)(void))(v0 + 8);
        return v42();
      }
LABEL_15:
      v48 = _swiftEmptyArrayStorage;
      goto LABEL_16;
    }
LABEL_14:
    sub_100008030((uint64_t)v37, (uint64_t *)&unk_1006371E0);
    goto LABEL_15;
  }
  v40 = *(_QWORD *)(v0 + 120);
  v39 = *(_QWORD *)(v0 + 128);
  v41 = *(_QWORD **)(v0 + 64);
  type metadata accessor for DaemonAnalytics(0);
  static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)(0, 0, v6);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v7, v9);
  *v41 = v6;
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_1000CBDF4()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 128);
  swift_errorRetain(v1);
  v4 = sub_100004828((uint64_t *)&unk_100633430);
  v5 = type metadata accessor for DIPError(0);
  v6 = swift_dynamicCast(v3, v0 + 48, v4, v5, 6);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v9 = *(_QWORD *)(v0 + 128);
  if ((v6 & 1) == 0)
  {
    v8(*(_QWORD *)(v0 + 128), 1, 1, v5);
    sub_100008030(v9, &qword_100636620);
    *v2 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
LABEL_10:
    sub_100008030(v0 + 16, (uint64_t *)&unk_1006371E0);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(v0 + 112);
  v30 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v8)(v9, 0, 1, v5);
  v13 = DIPError.properties.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v30, enum case for DIPError.PropertyKey.issuerCertificateChain(_:), v11);
  if (*(_QWORD *)(v13 + 16) && (v14 = sub_1004A8668(*(_QWORD *)(v0 + 120)), (v15 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v13 + 56) + 32 * v14, v0 + 16);
  }
  else
  {
    *v2 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  v17 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease(v13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  if (!*(_QWORD *)(v0 + 40))
    goto LABEL_10;
  v19 = sub_100004828((uint64_t *)&unk_100633630);
  if (!swift_dynamicCast(v0 + 56, v0 + 16, (char *)&type metadata for Any + 8, v19, 6))
  {
LABEL_11:
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  v20 = *(_QWORD **)(v0 + 56);
LABEL_12:
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 120);
  type metadata accessor for DaemonAnalytics(0);
  swift_errorRetain(v1);
  static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)(v1, 1, v20);
  swift_bridgeObjectRelease(v20);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v23, enum case for DIPError.Code.internalError(_:), v25);
  swift_errorRetain(v1);
  v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v27 = sub_100007F30();
  swift_allocError(v5, v27, 0, 0);
  v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v23, 0, v26, 0xD000000000000073, 0x80000001005460B0, 0xD00000000000004ELL, 0x8000000100546130, 92);
  swift_willThrow(v28);
  swift_errorRelease(v1);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC0F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ISO18013ResponseValidator()
{
  return objc_opt_self(_TtC8coreidvd25ISO18013ResponseValidator);
}

uint64_t sub_1000CC140(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1006337E4);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100007EE8;
  return sub_1000CB73C(a1, a2, v6, v7, v8);
}

unint64_t sub_1000CC1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006337F8;
  if (!qword_1006337F8)
  {
    v1 = sub_100013E24(&qword_1006337F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006337F8);
  }
  return result;
}

uint64_t sub_1000CC208(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  void *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[8];
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174[41];
  char v175;

  v139 = a4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v104 - v12;
  result = sub_1000BFB40(a2, a3);
  if (!v4)
  {
    v135 = a2;
    v136 = v7;
    v137 = v8;
    v138 = 0;
    if (result)
    {
      v15 = (void *)result;
      v16 = v11;
      defaultLogger()(result);
      v17 = swift_bridgeObjectRetain_n(a3, 2);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.debug.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v174[0] = v21;
        *(_DWORD *)v20 = 136315138;
        v134 = v20 + 4;
        swift_bridgeObjectRetain(a3);
        v141 = sub_1000E3AC8(v135, (unint64_t)a3, v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v134);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully fetched biome metadata for proofingSessionID: %s", v20, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v137 + 8))(v16, v136);
      v31 = objc_msgSend(v15, "proofingSessionID");
      if (v31)
      {
        v32 = v31;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v122 = v34;
        v123 = v33;

      }
      else
      {
        v122 = 0;
        v123 = 0;
      }
      v35 = objc_msgSend(v15, "dob");
      if (v35)
      {
        v36 = v35;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v120 = v38;
        v121 = v37;

      }
      else
      {
        v120 = 0;
        v121 = 0;
      }
      v39 = objc_msgSend(v15, "ethnicity");
      if (v39)
      {
        v40 = v39;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v118 = v42;
        v119 = v41;

      }
      else
      {
        v118 = 0;
        v119 = 0;
      }
      v43 = objc_msgSend(v15, "gender");
      if (v43)
      {
        v44 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v116 = v46;
        v117 = v45;

      }
      else
      {
        v116 = 0;
        v117 = 0;
      }
      v47 = objc_msgSend(v15, "skinTone");
      v48 = objc_msgSend(v15, "deviceLanguage");
      if (v48)
      {
        v49 = v48;
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v114 = v51;
        v115 = v50;

      }
      else
      {
        v114 = 0;
        v115 = 0;
      }
      v52 = objc_msgSend(v15, "issuer");
      if (v52)
      {
        v53 = v52;
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v112 = v55;
        v113 = v54;

      }
      else
      {
        v112 = 0;
        v113 = 0;
      }
      v174[0] = (uint64_t)objc_msgSend(v15, "livenessAssessment");
      v56 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v132 = v57;
      v174[0] = (uint64_t)objc_msgSend(v15, "gestureAssessment");
      v58 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v130 = v59;
      v131 = v58;
      v60 = objc_msgSend(v15, "axSettings");
      if (v60)
      {
        v61 = v60;
        v174[0] = 0;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v60, v174, &type metadata for String);

        v111 = v174[0];
      }
      else
      {
        v111 = 0;
      }
      v62 = objc_msgSend(v15, "facVersion");
      if (v62)
      {
        v63 = v62;
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        v109 = v65;
        v110 = v64;

      }
      else
      {
        v109 = 0;
        v110 = 0;
      }
      v66 = objc_msgSend(v15, "facePoseVersion");
      if (v66)
      {
        v67 = v66;
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v107 = v69;
        v108 = v68;

      }
      else
      {
        v107 = 0;
        v108 = 0;
      }
      v70 = objc_msgSend(v15, "prdVersion");
      if (v70)
      {
        v71 = v70;
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        v105 = v73;
        v106 = v72;

      }
      else
      {
        v105 = 0;
        v106 = 0;
      }
      v74 = objc_msgSend(v15, "padtoolVersion");
      if (v74)
      {
        v75 = v74;
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v128 = v77;
        v129 = v76;

      }
      else
      {
        v128 = 0;
        v129 = 0;
      }
      v78 = objc_msgSend(v15, "didStepUp");
      v174[0] = (uint64_t)objc_msgSend(v15, "passiveLivenessAssessment");
      v79 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v135 = v80;
      v136 = v79;
      v174[0] = (uint64_t)objc_msgSend(v15, "passiveGestureAssessment");
      v81 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v83 = v82;
      v84 = objc_msgSend(v15, "passiveLivenessFacVersion");
      v134 = (uint8_t *)v81;
      if (v84)
      {
        v85 = v84;
        v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v126 = v87;
        v127 = v86;

      }
      else
      {
        v126 = 0;
        v127 = 0;
      }
      v88 = objc_msgSend(v15, "passiveLivenessFacePoseVersion");
      v133 = v83;
      if (v88)
      {
        v89 = v88;
        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v124 = v91;
        v125 = v90;

      }
      else
      {
        v124 = 0;
        v125 = 0;
      }
      v92 = v139 + 16;
      v93 = objc_msgSend(v15, "passiveLivenessPrdVersion");
      LODWORD(v137) = v78;
      if (v93)
      {
        v94 = v93;
        v95 = v56;
        v96 = v47;
        v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
        v98 = v97;

      }
      else
      {
        v95 = v56;
        v96 = v47;
        v139 = 0;
        v98 = 0;
      }
      v99 = objc_msgSend(v15, "passiveLivenessPadtoolVersion");
      if (v99)
      {
        v100 = v99;
        v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
        v103 = v102;

      }
      else
      {

        v101 = 0;
        v103 = 0;
      }
      v141 = v123;
      v142[0] = v122;
      v142[1] = v121;
      v142[2] = v120;
      v142[3] = v119;
      v142[4] = v118;
      v142[5] = v117;
      v142[6] = v116;
      v175 = 0;
      v142[7] = v96;
      v143 = 0;
      v144 = v115;
      v145 = v114;
      v146 = v113;
      v147 = v112;
      v148 = v95;
      v149 = v132;
      v150 = v131;
      v151 = v130;
      v152 = v111;
      v153 = v110;
      v154 = v109;
      v155 = v108;
      v156 = v107;
      v157 = v106;
      v158 = v105;
      v159 = v129;
      v160 = v128;
      v161 = v137;
      v162 = v136;
      v163 = v135;
      v164 = v134;
      v165 = v133;
      v166 = v127;
      v167 = v126;
      v168 = v125;
      v169 = v124;
      v170 = v139;
      v171 = v98;
      v172 = v101;
      v173 = v103;
      nullsub_7(&v141);
      swift_beginAccess(v92, &v140, 1, 0);
      sub_1000D52E0(v92, (uint64_t)v174);
      sub_1000D52E0((uint64_t)&v141, v92);
      return sub_1000D567C((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D534C);
    }
    else
    {
      v22 = v13;
      defaultLogger()(0);
      v23 = (unint64_t)a3;
      v24 = swift_bridgeObjectRetain_n(a3, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter(v25);
      v27 = os_log_type_enabled(v25, v26);
      v28 = v136;
      if (v27)
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v174[0] = v30;
        *(_DWORD *)v29 = 136315138;
        v139 = (uint64_t)(v29 + 4);
        swift_bridgeObjectRetain(v23);
        v141 = sub_1000E3AC8(v135, v23, v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v139);
        swift_bridgeObjectRelease_n(v23, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Stored biome metadata doesnt exist for proofingSessionID: %s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v22, v28);
    }
  }
  return result;
}

void sub_1000CCAC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint8_t *v19;
  os_log_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  os_log_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000BFB40(a2, a3);
  if (!v3)
  {
    v12 = (void *)v11;
    if (v11)
    {
      objc_msgSend(*(id *)(a1 + 16), "deleteObject:", v11);
      v13 = sub_1000BF588();
      defaultLogger()(v13);
      v14 = swift_bridgeObjectRetain_n(a3, 2);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.debug.getter(v15);
      v17 = v16;
      if (os_log_type_enabled(v15, v16))
      {
        v18 = swift_slowAlloc(12, -1);
        v25 = v17;
        v19 = (uint8_t *)v18;
        v26 = swift_slowAlloc(32, -1);
        v29 = v26;
        v24 = v15;
        *(_DWORD *)v19 = 136315138;
        v23 = v19 + 4;
        swift_bridgeObjectRetain(a3);
        v27 = sub_1000E3AC8(a2, (unint64_t)a3, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23);
        swift_bridgeObjectRelease_n(a3, 3);
        v20 = v24;
        _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "Successfully deleted biome metadata for proofingSessionID: %s", v19, 0xCu);
        v21 = v26;
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
}

void sub_1000CCCF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v70 - v14;
  v16 = sub_1000BFB40(a2, a3);
  if (!v4)
  {
    v17 = v16;
    v87 = v13;
    v88 = a1;
    v86 = a2;
    if (v16)
    {
      v85 = 0;
      v18 = (int *)type metadata accessor for PendingActionContext(0);
      v19 = v18;
      v20 = v18[20];
      v21 = a4 + v18[21];
      v22 = *(_QWORD *)v21;
      if (*(_BYTE *)(v21 + 8))
        v22 = 0;
      v23 = a4 + v20;
      v24 = *(_QWORD *)(a4 + v20);
      if (*(_BYTE *)(v23 + 8))
        v24 = 0;
      v25 = (_QWORD *)(a4 + v18[26]);
      v26 = v25[1];
      v73 = v10;
      v80 = v24;
      v81 = v22;
      if (v26)
      {
        v27 = v25[6];
        v28 = v25[7];
        v29 = v25[5];
        v76 = v25[4];
        v77 = v27;
        v30 = v25[3];
        v75 = v25[2];
        v82 = v26;
        swift_bridgeObjectRetain(v26);
        v79 = v30;
        swift_bridgeObjectRetain(v30);
        v78 = v28;
        swift_bridgeObjectRetain(v28);
        v83 = v29;
        swift_bridgeObjectRetain(v29);
      }
      else
      {
        v76 = 0;
        v77 = 0;
        v82 = 0;
        v83 = 0;
        v78 = 0;
        v79 = 0;
        v75 = 0;
      }
      v37 = v19[23];
      v38 = *(_BYTE *)(a4 + v19[22]);
      v39 = v19[25];
      v40 = a4 + v19[24];
      if (*(_BYTE *)(v40 + 8))
        v41 = 0;
      else
        v41 = *(_QWORD *)v40;
      v42 = a4 + v37;
      v43 = *(_QWORD *)(a4 + v37);
      if (*(_BYTE *)(v42 + 8))
        v44 = 0;
      else
        v44 = v43;
      v45 = (uint64_t *)(a4 + v39);
      v46 = *(_QWORD *)(a4 + v39 + 8);
      v74 = v9;
      v72 = (unint64_t)a3;
      v84 = (void *)v17;
      if (v46)
      {
        v47 = v45[7];
        v71 = v45[6];
        v48 = v45[4];
        v49 = v45[5];
        v51 = v45[2];
        v50 = v45[3];
        v52 = *v45;
        v53 = v38;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v49);
        v54 = v71;
        v38 = v53;
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v54 = 0;
        v47 = 0;
        v51 = 0;
        v50 = 0;
        v52 = 0;
      }
      v55 = v78;
      v69 = v51;
      v68 = v52;
      v67 = v41;
      v56 = v79;
      v58 = v83;
      v57 = v84;
      sub_100233720(v81, v80, v75, v79, v77, v78, v76, v83, v38 & 1, v67, v44, v68, v46, v69, v50, v54, v47, v48, v49);
      swift_bridgeObjectRelease(v46);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v50);
      v59 = v85;
      v60 = sub_1000BF588();
      if (v59)
      {

        return;
      }
      v15 = v87;
      defaultLogger()(v60);
      v61 = v72;
      v62 = swift_bridgeObjectRetain_n(v72, 2);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(12, -1);
        v66 = swift_slowAlloc(32, -1);
        v91 = v66;
        *(_DWORD *)v65 = 136315138;
        swift_bridgeObjectRetain(v61);
        v89 = sub_1000E3AC8(v86, v61, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 4);
        swift_bridgeObjectRelease_n(v61, 3);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Successfully updated liveness data for proofingSessionID: %s", v65, 0xCu);
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);

        (*(void (**)(char *, uint64_t))(v73 + 8))(v87, v74);
        return;
      }

      swift_bridgeObjectRelease_n(v61, 2);
    }
    else
    {
      defaultLogger()(0);
      v31 = swift_bridgeObjectRetain_n(a3, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter(v32);
      if (!os_log_type_enabled(v32, v33))
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
        return;
      }
      v74 = v9;
      v34 = swift_slowAlloc(12, -1);
      v73 = v10;
      v35 = (uint8_t *)v34;
      v36 = swift_slowAlloc(32, -1);
      v91 = v36;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(a3);
      v89 = sub_1000E3AC8(v86, (unint64_t)a3, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v35 + 4);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Stored biome metadata doesnt exist for proofingSessionID: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v74);
  }
}

uint64_t sub_1000CD258(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[6];
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a2;
  v40 = a3;
  v39 = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v43 - 8);
  v14 = __chkstk_darwin(v43);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v38 - v16;
  v18 = __chkstk_darwin(v15);
  v21 = (char *)v38 - v20;
  if ((a4 & 1) != 0)
  {
    v22 = defaultLogger()(v18);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "SEND_TO_BIOME doesn't exist, will not donate to biome.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v21, v43);
  }
  else
  {
    v38[3] = v6;
    v38[4] = v12;
    v38[0] = v19;
    v38[1] = v5;
    v38[5] = v8;
    v38[2] = v10;
    v27 = defaultLogger()(v18);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Checking if biome data needs to be donated.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v43);
    v31 = type metadata accessor for IdentityProofingDataContext();
    swift_allocObject(v31, 24, 7);
    sub_1000D6044();
    v33 = v41;
    v32 = v42;
    v35 = v34;
    v36 = swift_allocObject(&unk_100607A18, 56, 7);
    v37 = v39;
    *(_QWORD *)(v36 + 16) = v35;
    *(_QWORD *)(v36 + 24) = v37;
    *(_QWORD *)(v36 + 32) = v33;
    *(_BYTE *)(v36 + 40) = v40;
    *(_QWORD *)(v36 + 48) = v32;
    swift_retain(v35);
    swift_bridgeObjectRetain(v33);
    swift_retain(v32);
    sub_1000D6570((uint64_t)sub_1000D5898, v36);
    swift_release(v35);
    return swift_release(v36);
  }
}

void sub_1000CD6E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a5;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  v16 = (void *)sub_1000D7D60(a2, a3);
  if (!v5)
  {
    v32 = v13;
    v33 = a2;
    v34 = v10;
    if (v16)
    {
      v31 = v16;
      v17 = objc_msgSend(v16, "proofingDecision");
      if (!v17)
      {
        v29._countAndFlagsBits = 0xD000000000000062;
        v29._object = (void *)0x8000000100546780;
        v30._countAndFlagsBits = 0x3262326262663363;
        v30._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v30, v29);
        __asm { BR              X10 }
      }
      v18 = v9;

      v19 = v32;
      v21 = defaultLogger()(v20);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Proofing decision already exists in biome metadata, will not attempt to update it. Will attempt to donate data to biome.", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v18);
      sub_1000CDA74(v33, (unint64_t)a3, a4);

    }
    else
    {
      v25 = defaultLogger()(0);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.debug.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Biome Proofing meta data doesn't exist. Will not donate data to Biome.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v9);
    }
  }
}

uint64_t sub_1000CDA74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  _QWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  _QWORD v202[6];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205[9];
  unsigned __int8 v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v195 = (uint8_t *)a3;
  v5 = type metadata accessor for Date(0);
  v189 = *(_QWORD *)(v5 - 8);
  v190 = v5;
  __chkstk_darwin(v5);
  v193 = (uint64_t)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v188 = (uint64_t)&v137 - v13;
  v14 = __chkstk_darwin(v12);
  v185 = (char *)&v137 - v15;
  v16 = __chkstk_darwin(v14);
  v186 = (char *)&v137 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v137 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v137 - v22;
  defaultLogger()(v21);
  v24 = swift_bridgeObjectRetain_n(a2, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v196 = a1;
  if (v27)
  {
    v183 = v8;
    v184 = v11;
    v191 = v20;
    v194 = v7;
    v28 = a2;
    v29 = swift_slowAlloc(22, -1);
    v205[0] = swift_slowAlloc(64, -1);
    *(_DWORD *)v29 = 136315394;
    swift_bridgeObjectRetain(v28);
    v203 = sub_1000E3AC8(a1, v28, v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v29 + 4);
    v192 = v28;
    swift_bridgeObjectRelease_n(v28, 3);
    *(_WORD *)(v29 + 12) = 2080;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n(a2, 2);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v23, v7);
  sub_1000D0354(v196, a2, (uint64_t)&v203);
  sub_1000D52E0((uint64_t)&v203, (uint64_t)v205);
  v31 = sub_1000D5328((uint64_t)v205);
  if ((_DWORD)v31 == 1)
  {
    v32 = defaultLogger()(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Biome Meta data doesn't exist. Cannot donate data to biome.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v30)(v11, v7);
  }
  else
  {
    v191 = v20;
    v192 = a2;
    v194 = v7;
    v37 = (void *)v205[2];
    v38 = (void *)v205[3];
    v172 = v205[4];
    v39 = v205[5];
    v40 = v205[6];
    v41 = v205[7];
    LODWORD(v181) = v206;
    v182 = v205[8];
    v183 = v207;
    v42 = v208;
    v184 = (char *)v209;
    v43 = v210;
    v159 = v212;
    v160 = v214;
    v152 = v211;
    v153 = v216;
    v154 = v213;
    v155 = v218;
    v161 = v217;
    v162 = v219;
    v163 = v221;
    v156 = v220;
    v157 = v222;
    v164 = v223;
    v165 = v215;
    v158 = v224;
    v169 = v227;
    v170 = v225;
    v175 = v228;
    v176 = v230;
    v177 = v226;
    v167 = v231;
    v168 = v229;
    v171 = v233;
    v179 = v232;
    v180 = v234;
    v166 = v235;
    v178 = v236;
    Date.init()(v31);
    if (v43)
    {
      v174 = v30;
      v44 = type metadata accessor for IdentityBiomeHelper();
      v45 = swift_allocObject(v44, 32, 7);
      v188 = v39;
      v46 = v45;
      *(_QWORD *)(v45 + 16) = v184;
      *(_QWORD *)(v45 + 24) = v43;
      swift_bridgeObjectRetain_n(v43, 2);
      v151 = sub_10012D348(v37, v38);
      v173 = v47;
      v48 = sub_10012D124(v40, v41);
      v49 = v188;
      v150 = v48;
      v51 = v50;
      if ((v181 & 1) != 0)
        v52 = 0;
      else
        v52 = v182;
      v53 = sub_10012DED0(v52, 0);
      v182 = v54;
      if (v42)
        v55 = v183;
      else
        v55 = 0;
      if (v42)
        v56 = v42;
      else
        v56 = 0xE000000000000000;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v42);
      v57 = sub_1000D085C(v196, v192);
      v147 = v55;
      v148 = v53;
      v181 = v56;
      v183 = v51;
      v146 = v43;
      v64 = v194;
      v149 = v46;
      if ((v57 & 1) != 0)
      {
        v65 = v191;
        v66 = defaultLogger()(v57);
        __chkstk_darwin(v66);
        v67 = (char)v195;
        Logger.sensitive(_:)(sub_1000D5490);
        v174(v65, v64);
        __asm { BR              X10 }
      }
      v195 = (uint8_t *)0xE000000000000000;
      v68 = v159;
      v69 = v160;
      if (v159)
        v70 = v152;
      else
        v70 = 0;
      if (v159)
        v71 = v159;
      else
        v71 = 0xE000000000000000;
      v72 = v154;
      if (!v160)
        v72 = 0;
      v144 = v72;
      v145 = v70;
      if (v160)
        v73 = v160;
      else
        v73 = 0xE000000000000000;
      v75 = v161;
      v74 = v162;
      v76 = v153;
      if (!v161)
        v76 = 0;
      v142 = 0;
      v143 = v76;
      if (v161)
        v77 = v161;
      else
        v77 = 0xE000000000000000;
      v152 = v71;
      v153 = v77;
      v78 = v155;
      if (!v162)
        v78 = 0;
      v141 = v78;
      if (v162)
        v79 = v162;
      else
        v79 = 0xE000000000000000;
      v154 = v73;
      v155 = v79;
      v81 = v163;
      v80 = v164;
      if (v163)
        v82 = v156;
      else
        v82 = 0;
      if (v163)
        v83 = v163;
      else
        v83 = 0xE000000000000000;
      v84 = v157;
      if (!v164)
        v84 = 0;
      v138 = v84;
      v139 = v82;
      if (v164)
        v85 = v164;
      else
        v85 = 0xE000000000000000;
      v156 = v83;
      v157 = v85;
      v86 = _swiftEmptyArrayStorage;
      v87 = v165;
      if (v165)
        v86 = v165;
      v140 = v86;
      v158 &= 1u;
      v88 = v180;
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v87);
      v89 = v175;
      swift_bridgeObjectRetain(v175);
      v90 = v177;
      swift_bridgeObjectRetain(v177);
      v91 = v176;
      swift_bridgeObjectRetain(v176);
      v92 = v179;
      swift_bridgeObjectRetain(v179);
      v93 = v178;
      swift_bridgeObjectRetain(v178);
      sub_1000D567C((uint64_t)&v203, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D534C);
      v94 = v187[7];
      v95 = objc_allocWithZone((Class)NSNumber);
      swift_retain(v94);
      v165 = objc_msgSend(v95, "initWithBool:", v158);
      v136 = v88;
      v135 = v93;
      v134 = v92;
      v133 = v91;
      v132 = v90;
      v131 = v89;
      v96 = v153;
      v97 = v140;
      v98 = v154;
      v99 = v152;
      v100 = v146;
      v101 = v173;
      v102 = v182;
      sub_1000C99A0(v193, v151, v173, v150, v183, v148, v182, v172, v202, v188, v147, v181, v142, (uint64_t)v195, (uint64_t)v184, v146, v145, v152, v144,
        v154,
        v140,
        v143,
        v153,
        v141,
        v155,
        v138,
        v157,
        v139,
        v156,
        v165,
        v169,
        v131,
        v170,
        v132,
        v168,
        v133,
        v167,
        v134,
        v166,
        v135,
        v171,
        v136);
      swift_release(v94);
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v99);
      swift_bridgeObjectRelease(v98);
      swift_bridgeObjectRelease(v97);
      swift_bridgeObjectRelease(v96);
      swift_bridgeObjectRelease(v155);
      swift_bridgeObjectRelease(v157);
      swift_bridgeObjectRelease(v156);

      swift_bridgeObjectRelease(v101);
      swift_bridgeObjectRelease(v183);
      swift_bridgeObjectRelease(v188);
      swift_bridgeObjectRelease(v181);
      swift_bridgeObjectRelease(v195);
      swift_bridgeObjectRelease(v175);
      swift_bridgeObjectRelease(v177);
      swift_bridgeObjectRelease(v176);
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v178);
      v103 = swift_bridgeObjectRelease(v180);
      v104 = v186;
      defaultLogger()(v103);
      v105 = sub_10002581C((uint64_t)v202, (uint64_t)v199);
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.debug.getter(v106);
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(12, -1);
        v109 = swift_slowAlloc(32, -1);
        v198 = (void *)v109;
        *(_DWORD *)v108 = 136315138;
        v195 = v108 + 4;
        v110 = v200;
        v111 = v201;
        sub_10000806C(v199, v200);
        v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 16))(v110, v111);
        v114 = v113;
        v197 = sub_1000E3AC8(v112, v113, (uint64_t *)&v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, &v198, v195);
        swift_bridgeObjectRelease(v114);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v199);
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "Invoking Biome's sendEvent with the event -> %s", v108, 0xCu);
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v108, -1, -1);

        v115 = v186;
      }
      else
      {
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v199);

        v115 = v104;
      }
      v116 = v194;
      v117 = v174;
      v174(v115, v194);
      v118 = v185;
      sub_10002581C((uint64_t)v202, (uint64_t)v199);
      v119 = sub_100004828((uint64_t *)&unk_1006339B0);
      v120 = sub_1000CA324();
      v121 = swift_dynamicCast(&v198, v199, v119, v120, 6);
      v122 = v192;
      if ((v121 & 1) != 0)
      {
        v123 = v198;
        v124 = *sub_10000806C(v187 + 2, v187[5]);
        v125 = v123;
        sub_1000D0290(v125, v124);

      }
      v126 = defaultLogger()(v121);
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.debug.getter(v127);
      if (os_log_type_enabled(v127, v128))
      {
        v129 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v129 = 0;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "Successfully donated user proofing event to Biome.", v129, 2u);
        swift_slowDealloc(v129, -1, -1);
      }

      v117(v118, v116);
      v130 = v196;
      sub_1000D0CF8(v196, v122);
      sub_1000D1148(v130, v122);
      swift_release(v149);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v202);
    }
    else
    {
      v58 = sub_1000D567C((uint64_t)&v203, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D534C);
      v59 = v188;
      v60 = defaultLogger()(v58);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.debug.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unable to donate biome data as the issuer doesn't exist", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }

      v30((char *)v59, v194);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v189 + 8))(v193, v190);
  }
}

void sub_1000CE8DC()
{
  JUMPOUT(0x1000CE2B8);
}

void sub_1000CE8F8()
{
  JUMPOUT(0x1000CE2B8);
}

uint64_t sub_1000CE914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  unint64_t v27;
  _BYTE v28[8];

  v2 = type metadata accessor for DIPError.Code(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v9, 24, 7);
  sub_1000D6044();
  if (v1)
  {
    v26 = 0;
    v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v13._countAndFlagsBits = 0xD00000000000003BLL;
    v13._object = (void *)0x80000001005464E0;
    String.append(_:)(v13);
    swift_getErrorValue(v1, v28, v25);
    v14._countAndFlagsBits = Error.localizedDescription.getter(v25[1], v25[2]);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16 = v26;
    v17 = v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v4, enum case for DIPError.Code.failedToDeleteProofingBiomeData(_:), v2);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v16, v17, 0, v4, 0, v18, 0xD000000000000071, 0x80000001005462F0, 0xD000000000000019, 0x8000000100546520, 324);
    v19 = sub_100007F30();
    swift_allocError(v5, v19, 0, 0);
    v21 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 16))(v20, v8, v5);
    swift_willThrow(v21);
    swift_errorRelease(v1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v11 = v10;
    v23[1] = v2;
    v12 = swift_allocObject(&unk_100607900, 32, 7);
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v0;
    swift_retain(v11);
    swift_retain(v0);
    sub_1000D6570((uint64_t)sub_1000D52C8, v12);
    swift_release(v11);
    return swift_release(v12);
  }
}

void sub_1000CEBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSString v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  id v32;
  void *v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;

  v71 = a2;
  v70 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v70 - 8);
  v5 = __chkstk_darwin(v70);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v65 = (char *)&v61 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v61 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v61 - v13;
  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithEntityName:", v16);

  v18 = *(void **)(a1 + 16);
  v19 = sub_100004828(&qword_1006332D0);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v17, v19);
  if (v2)
  {

    return;
  }
  v21 = v20;
  v75 = v18;
  v69 = v14;
  v22 = v71;
  v64 = v12;
  v23 = (uint64_t)sub_1004589D8(v20);

  v24 = swift_bridgeObjectRelease(v21);
  if (v23)
  {
    if ((unint64_t)v23 >> 62)
    {
      if (v23 >= 0)
        v56 = v23 & 0xFFFFFFFFFFFFFF8;
      else
        v56 = v23;
      swift_bridgeObjectRetain(v23);
      v26 = _CocoaArrayWrapper.endIndex.getter(v56);
      swift_bridgeObjectRelease(v23);
      if (v26)
      {
LABEL_6:
        v63 = a1;
        if (v26 < 1)
        {
          __break(1u);
        }
        else
        {
          v62 = 0;
          v27 = 0;
          v72 = v23 & 0xC000000000000001;
          *(_QWORD *)&v25 = 136315138;
          v67 = v25;
          v66 = (char *)&type metadata for Any + 8;
          v28 = v22;
          v29 = v69;
          v30 = v70;
          v73 = v26;
          v74 = v23;
          v68 = v4;
          do
          {
            if (v72)
              v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v23);
            else
              v32 = *(id *)(v23 + 8 * v27 + 32);
            v33 = v32;
            defaultLogger()(objc_msgSend(v75, "deleteObject:", v32));
            v34 = v33;
            v35 = Logger.logObject.getter(v34);
            v36 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v35, v36))
            {
              v37 = swift_slowAlloc(12, -1);
              v38 = swift_slowAlloc(32, -1);
              v76 = v38;
              *(_DWORD *)v37 = v67;
              v39 = objc_msgSend(v34, "proofingSessionID");
              if (v39)
              {
                v40 = v39;
                v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
                v43 = v42;

              }
              else
              {
                v41 = 0;
                v43 = 0xE000000000000000;
              }
              *(_QWORD *)(v37 + 4) = sub_1000E3AC8(v41, v43, &v76);

              swift_bridgeObjectRelease(v43);
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully deleted proofing biome data for proofingSessionID: %s", (uint8_t *)v37, 0xCu);
              swift_arrayDestroy(v38, 1, v66);
              swift_slowDealloc(v38, -1, -1);
              swift_slowDealloc(v37, -1, -1);

              v4 = v68;
              v29 = v69;
              v31 = *(void (**)(char *, uint64_t))(v68 + 8);
              v30 = v70;
              v31(v69, v70);
              v28 = v71;
            }
            else
            {

              v31 = *(void (**)(char *, uint64_t))(v4 + 8);
              v31(v29, v30);
            }
            ++v27;
            v23 = v74;
          }
          while (v73 != v27);
          swift_bridgeObjectRelease(v74);
          v44 = v62;
          v45 = sub_1000D6288();
          if (!v44)
          {
            v46 = v64;
            v47 = defaultLogger()(v45);
            v48 = Logger.logObject.getter(v47);
            v49 = static os_log_type_t.debug.getter(v48);
            if (os_log_type_enabled(v48, v49))
            {
              v50 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v50 = 0;
              _os_log_impl((void *)&_mh_execute_header, v48, v49, "Successfully deleted proofing biome data", v50, 2u);
              swift_slowDealloc(v50, -1, -1);
            }

            v51 = ((uint64_t (*)(char *, uint64_t))v31)(v46, v30);
            v52 = defaultLogger()(v51);
            v53 = Logger.logObject.getter(v52);
            v54 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v53, v54))
            {
              v55 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v55 = 0;
              _os_log_impl((void *)&_mh_execute_header, v53, v54, "Invoking Biome's pruning API to delete biome data", v55, 2u);
              swift_slowDealloc(v55, -1, -1);
            }

            v31(v65, v30);
            objc_msgSend(*(id *)(v28 + 64), "pruneUserProofingStream");
          }
        }
        return;
      }
    }
    else
    {
      v26 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v26)
        goto LABEL_6;
    }
    v24 = swift_bridgeObjectRelease(v23);
  }
  v57 = defaultLogger()(v24);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "No proofing biome data exists in the database", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v70);
}

void sub_1000CF148(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint8_t *v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  os_log_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000D7D60(a2, a3);
  if (!v3)
  {
    v11 = (void *)v10;
    if (v10)
    {
      StoredProofingBiomeData.update(isDonated:)(1);
      v12 = sub_1000D6288();
      defaultLogger()(v12);
      v13 = swift_bridgeObjectRetain_n(a3, 2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.debug.getter(v14);
      v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        v17 = swift_slowAlloc(12, -1);
        v24 = v16;
        v18 = (uint8_t *)v17;
        v25 = swift_slowAlloc(32, -1);
        v28 = v25;
        v23 = v14;
        *(_DWORD *)v18 = 136315138;
        v22 = v18 + 4;
        swift_bridgeObjectRetain(a3);
        v26 = sub_1000E3AC8(a2, (unint64_t)a3, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22);
        swift_bridgeObjectRelease_n(a3, 3);
        v19 = v23;
        _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Successfully updated proofing biome data called for proofingSessionID: %s", v18, 0xCu);
        v20 = v25;
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

void sub_1000CF378(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE v21[24];

  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = (void *)sub_1000BFB40(a2, a3);
  if (!v4)
  {
    v13 = v12;
    if (v12)
    {
      v14 = (unsigned __int8 *)(a4 + 16);
      v15 = objc_msgSend(v12, "shouldDonateProofingDecision");

      swift_beginAccess(v14, v21, 1, 0);
      *v14 = v15;
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.failedToFetchBiomeMetadata(_:), v8);
      v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v17 = type metadata accessor for DIPError(0);
      v18 = sub_100007F30();
      swift_allocError(v17, v18, 0, 0);
      v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100546690, 0, v11, 0, v16, 0xD000000000000071, 0x80000001005462F0, 0xD000000000000030, 0x8000000100546650, 360);
      swift_willThrow(v19);
    }
  }
}

void sub_1000CF530(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, Swift::Int64 a8, char a9, Swift::String_optional a10, Swift::String_optional a11, uint64_t a12, void *a13)
{
  uint64_t v16;
  void *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  Swift::Bool *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String_optional deviceLanguage;
  Swift::OpaquePointer_optional axSettings;
  char *v41;
  const char *v42;
  Swift::Bool *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  Swift::String_optional v47;
  Swift::String_optional ethnicity;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  Swift::String_optional v52;
  Swift::String_optional v53;
  Swift::Int64 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60[9];
  uint64_t v61;
  uint64_t v62;
  Swift::Int64_optional v63;

  v53.value._object = a7;
  v54 = a8;
  v52.value._object = a5;
  v53.value._countAndFlagsBits = a6;
  v52.value._countAndFlagsBits = a4;
  v51 = a9 & 1;
  v45 = type metadata accessor for Logger(0);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v43 = &axSettings.is_nil - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)objc_opt_self(NSEntityDescription);
  v18 = String._bridgeToObjectiveC()();
  v55 = a1;
  v19 = objc_msgSend(v17, "insertNewObjectForEntityForName:inManagedObjectContext:", v18, *(_QWORD *)(a1 + 16));

  v20 = type metadata accessor for StoredBiomeMetadata(0);
  v58 = v19;
  v50 = swift_dynamicCastClassUnconditional(v19, v20, 0, 0, 0);
  v21 = objc_msgSend((id)objc_opt_self(NSLocale), "_deviceLanguage");
  if (v21)
  {
    v22 = v21;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

  }
  else
  {
    v49 = 0;
    v24 = 0;
  }
  v57 = a2;
  v46 = a13;
  v47 = a11;
  ethnicity = a10;
  v25 = *(_QWORD *)(a12 + 16);
  v59 = a3;
  if (v25)
  {
    Hasher.init(_seed:)(v60, *(_QWORD *)(a12 + 40));
    String.hash(into:)(v60, 0xD000000000000010, 0x800000010053A1B0);
    v26 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a12 + 32));
    if (((*(_QWORD *)(a12 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
    {
      v41 = "tate";
      v42 = "proofingDecision";
      __asm { BR              X9 }
    }
  }
  axSettings.value._rawValue = v46;
  deviceLanguage.value._object = v24;
  deviceLanguage.value._countAndFlagsBits = v49;
  v27 = v57;
  v28._countAndFlagsBits = v57;
  v29 = (unint64_t)v59;
  v28._object = v59;
  v63.value = v54;
  v63.is_nil = v51;
  StoredBiomeMetadata.update(proofingSessionID:dob:gender:skinTone:ethnicity:deviceLanguage:issuer:shouldDonateProofingDecision:axSettings:)(v28, v52, v53, v63, ethnicity, deviceLanguage, v47, 0, axSettings);
  swift_bridgeObjectRelease(v24);
  v30 = v56;
  v31 = sub_1000BF588();
  if (v30)
  {

  }
  else
  {
    v32 = v43;
    defaultLogger()(v31);
    v33 = swift_bridgeObjectRetain_n(v29, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = v27;
      v38 = swift_slowAlloc(32, -1);
      v60[0] = v38;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(v29);
      v61 = sub_1000E3AC8(v37, v29, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v36 + 4);
      swift_bridgeObjectRelease_n(v29, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully persisted biome metadata for proofingSessionID: %s", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v29, 2);
    }
    (*(void (**)(Swift::Bool *, uint64_t))(v44 + 8))(v32, v45);
  }
}

void sub_1000CFA98()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 - 344) | 0x8000000000000000);
  JUMPOUT(0x1000CF870);
}

void sub_1000CFAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a5;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)objc_opt_self(NSEntityDescription);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "insertNewObjectForEntityForName:inManagedObjectContext:", v14, *(_QWORD *)(a1 + 16));

  v16 = type metadata accessor for StoredProofingBiomeData(0);
  v17 = swift_dynamicCastClassUnconditional(v15, v16, 0, 0, 0);
  Date.init()(v17);
  StoredProofingBiomeData.update(proofingSessionID:credentialIdentifier:optInDate:optInStatus:)(a2, a3, a4, v19, (uint64_t)v12, 1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1000D6288();

}

uint64_t sub_1000CFC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v73 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v65 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  v5 = __chkstk_darwin(v4);
  v62 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v64 = (char *)&v61 - v7;
  v8 = type metadata accessor for Calendar(0);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DateComponents(0);
  v67 = *(_QWORD *)(v11 - 8);
  v68 = v11;
  __chkstk_darwin(v11);
  v66 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v61 - v21;
  sub_100038B24(v73, (uint64_t)v15, &qword_100633990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100008030((uint64_t)v15, &qword_100633990);
    v23 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v65, enum case for DIPError.Code.biomeDataSharingUserConsentDateDoesntExist(_:), v1);
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_100007F30();
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000069, 0x8000000100546440, 0, v23, 0, v24, 0xD000000000000071, 0x80000001005462F0, 0xD00000000000002FLL, 0x80000001005464B0, 443);
    swift_willThrow(v27);
  }
  else
  {
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 32);
    v61 = v22;
    v29 = v28(v22, v15, v16);
    static Calendar.current.getter(v29);
    v30 = sub_100004828((uint64_t *)&unk_100633998);
    v31 = type metadata accessor for Calendar.Component(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned __int8 *)(v32 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v30, v34 + *(_QWORD *)(v32 + 72), v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_10051FFB0;
    v36 = v35 + v34;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v36, enum case for Calendar.Component.day(_:), v31);
    v37 = sub_100403E1C(v35);
    swift_setDeallocating(v35);
    swift_arrayDestroy(v36, 1, v31);
    v38 = swift_deallocClassInstance(v35, 32, 7);
    Date.init()(v38);
    v39 = v66;
    v40 = v61;
    Calendar.dateComponents(_:from:to:)(v37, v61, v20);
    swift_bridgeObjectRelease(v37);
    v41 = *(void (**)(char *, uint64_t))(v17 + 8);
    v41(v20, v16);
    v42 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v10, v70);
    v43 = DateComponents.day.getter(v42);
    v45 = v44;
    v46 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v39, v68);
    if ((v45 & 1) != 0)
      v47 = 90;
    else
      v47 = v43;
    LOBYTE(v20) = v47 > 89;
    v48 = v16;
    if (v47 < 90)
    {
      v56 = v62;
      v57 = defaultLogger()(v46);
      v52 = Logger.logObject.getter(v57);
      v58 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v59 = 134217984;
        v74 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v59 + 4);
        _os_log_impl((void *)&_mh_execute_header, v52, v58, "Retention period has not elapsed...The gap between dates is %ld", v59, 0xCu);
        swift_slowDealloc(v59, -1, -1);
      }
      v49 = v56;
    }
    else
    {
      v73 = v16;
      v49 = v64;
      defaultLogger()(v46);
      v50 = v63;
      v51 = swift_retain(v63);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(22, -1);
        *(_DWORD *)v54 = 134218240;
        v74 = 90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v54 + 4);
        swift_release(v50);
        *(_WORD *)(v54 + 12) = 2048;
        v74 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v54 + 14);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "The %ld day retention period has elapsed. The gap between dates is -> %ld", (uint8_t *)v54, 0x16u);
        v55 = v54;
        v49 = v64;
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
        swift_release(v50);
      }
      v48 = v73;
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v72);
    v41(v40, v48);
  }
  return v20 & 1;
}

uint64_t sub_1000D023C()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for IdentityProofingBiomeManager()
{
  return objc_opt_self(_TtC8coreidvd28IdentityProofingBiomeManager);
}

uint64_t sub_1000D0290(void *a1, uint64_t a2)
{
  unint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v10;
  _BYTE v11[40];
  _QWORD v12[5];

  v4 = sub_1000CA324();
  v12[3] = v4;
  v12[4] = &off_1006077B8;
  v12[0] = a1;
  sub_10002581C((uint64_t)v12, (uint64_t)v11);
  v5 = a1;
  v6 = sub_100004828((uint64_t *)&unk_1006339B0);
  if (swift_dynamicCast(&v10, v11, v6, v4, 6))
  {
    v7 = v10;
    v8 = objc_msgSend(*(id *)(a2 + 16), "source");
    objc_msgSend(v8, "sendEvent:", v7);

  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v12);
}

uint64_t sub_1000D0354@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  Swift::String v32;
  Swift::String v33;
  void *object;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61[39];
  _QWORD v62[3];
  _OWORD v63[20];
  char v64[8];

  v6 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v56 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v55 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v11);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v50 = a1;
  v51 = a2;
  if (v17)
  {
    v49 = v8;
    v18 = swift_slowAlloc(12, -1);
    v48 = a3;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v47 = v10;
    v21 = v20;
    *(_QWORD *)&v63[0] = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(a2);
    v60 = sub_1000E3AC8(a1, a2, (uint64_t *)v63);
    v8 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v19 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "fetchBiomeMetadata called for proofingSessionID: %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v19;
    a3 = v48;
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v10);
  }
  v23 = swift_allocObject(&unk_1006079C8, 336, 7);
  v24 = v23 + 16;
  sub_1000D55F0(v63);
  sub_1000D52E0((uint64_t)v63, v23 + 16);
  v25 = type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject(v25, 24, 7);
  v26 = v58;
  sub_1000BF344();
  if (v26)
  {
    v60 = 0;
    v61[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(154);
    v32._countAndFlagsBits = 0xD000000000000035;
    v32._object = (void *)0x8000000100546240;
    String.append(_:)(v32);
    swift_getErrorValue(v26, v64, v62);
    v33._countAndFlagsBits = Error.localizedDescription.getter(v62[1], v62[2]);
    object = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(object);
    v35._countAndFlagsBits = 0xD000000000000063;
    v35._object = (void *)0x8000000100546280;
    String.append(_:)(v35);
    v36 = v60;
    v37 = v61[0];
    v38 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.failedToFetchBiomeMetadata(_:), v53);
    v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v40 = v55;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v36, v37, 0, v38, 0, v39, 0xD000000000000071, 0x80000001005462F0, 0xD000000000000029, 0x80000001005466C0, 96);
    v41 = sub_100007F30();
    swift_allocError(v8, v41, 0, 0);
    v42 = v56;
    v44 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 16))(v43, v40, v8);
    swift_willThrow(v44);
    swift_errorRelease(v26);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v8);
    return swift_release(v23);
  }
  else
  {
    v28 = v27;
    v29 = (_QWORD *)swift_allocObject(&unk_1006079F0, 48, 7);
    v30 = v50;
    v29[2] = v28;
    v29[3] = v30;
    v31 = v51;
    v29[4] = v51;
    v29[5] = v23;
    swift_bridgeObjectRetain(v31);
    swift_retain(v28);
    swift_retain(v23);
    sub_1000BF870((uint64_t)sub_1000D5660, (uint64_t)v29);
    swift_release(v28);
    swift_release(v29);
    swift_beginAccess(v24, &v59, 0, 0);
    sub_1000D52E0(v24, (uint64_t)&v60);
    sub_1000D567C((uint64_t)&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000D5708);
    swift_release(v23);
    return sub_1000D52E0((uint64_t)&v60, a3);
  }
}

uint64_t sub_1000D085C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50[24];
  unint64_t v51;
  unint64_t v52;
  _QWORD v53[3];
  char v54[8];

  v46 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v45 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v48 = (char *)&v41 - v14;
  v15 = swift_allocObject(&unk_100607978, 17, 7);
  *(_BYTE *)(v15 + 16) = 0;
  v47 = v15 + 16;
  v16 = type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject(v16, 24, 7);
  sub_1000BF344();
  if (v2)
  {
    v42 = v10;
    v46 = 0;
    v51 = 0;
    v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(v52);
    v51 = 0xD000000000000028;
    v52 = 0x8000000100546620;
    swift_getErrorValue(v2, v54, v53);
    v22._countAndFlagsBits = Error.localizedDescription.getter(v53[1], v53[2]);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24 = v51;
    v25 = v52;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v6, enum case for DIPError.Code.failedToPersistBiomeMetadata(_:), v44);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v24, v25, 0, v6, 0, v26, 0xD000000000000071, 0x80000001005462F0, 0xD000000000000030, 0x8000000100546650, 365);
    v27 = sub_100007F30();
    v28 = swift_allocError(v7, v27, 0, 0);
    v29 = v45;
    v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 16))(v30, v9, v7);
    defaultLogger()(v31);
    DIPRecordError(_:message:log:)(v28, 0, 0xE000000000000000, v13);
    swift_errorRelease(v2);
    v10 = v42;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v42);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
    v32 = swift_errorRelease(v28);
  }
  else
  {
    v18 = v17;
    v19 = a2;
    v20 = (_QWORD *)swift_allocObject(&unk_1006079A0, 48, 7);
    v21 = v46;
    v20[2] = v18;
    v20[3] = v21;
    v20[4] = v19;
    v20[5] = v15;
    swift_retain(v18);
    swift_bridgeObjectRetain(v19);
    swift_retain(v15);
    sub_1000BF870((uint64_t)sub_1000D5518, (uint64_t)v20);
    v46 = 0;
    swift_release(v18);
    v32 = swift_release(v20);
  }
  v33 = v48;
  defaultLogger()(v32);
  v34 = swift_retain(v15);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v37 = 67109120;
    v38 = v47;
    swift_beginAccess(v47, v50, 0, 0);
    LODWORD(v51) = *(unsigned __int8 *)(v15 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 4, v37 + 4);
    swift_release(v15);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "shouldDonateProofingDecision -> %{BOOL}d", v37, 8u);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_release(v15);
    v38 = v47;
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v10);
  swift_beginAccess(v38, &v51, 0, 0);
  v39 = *(unsigned __int8 *)(v15 + 16);
  swift_release(v15);
  return v39;
}

uint64_t sub_1000D0CF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  void *object;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;
  char v58[8];

  v3 = v2;
  v6 = type metadata accessor for DIPError.Code(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v48 = a1;
  if (v18)
  {
    v45 = v10;
    v19 = swift_slowAlloc(12, -1);
    v46 = v2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v47 = v8;
    v22 = v21;
    v56 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v54 = sub_1000E3AC8(a1, a2, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v20 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "updateProofingBiomeData called for proofingSessionID: %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    v8 = v47;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    v3 = v46;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v45);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v25 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v25, 24, 7);
  sub_1000D6044();
  v27 = v3;
  if (v3)
  {
    v56 = 0;
    v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v31._countAndFlagsBits = 0xD000000000000039;
    v31._object = (void *)0x80000001005465B0;
    String.append(_:)(v31);
    swift_getErrorValue(v3, v58, v55);
    v32._countAndFlagsBits = Error.localizedDescription.getter(v55[1], v55[2]);
    object = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(object);
    v34 = v56;
    v35 = v57;
    v36 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v51, enum case for DIPError.Code.failedToUpdateProofingBiomeData(_:), v50);
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = v52;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v34, v35, 0, v36, 0, v37, 0xD000000000000071, 0x80000001005462F0, 0xD000000000000029, 0x80000001005465F0, 345);
    v39 = sub_100007F30();
    swift_allocError(v8, v39, 0, 0);
    v40 = v53;
    v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 16))(v41, v38, v8);
    swift_willThrow(v42);
    swift_errorRelease(v27);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v8);
  }
  else
  {
    v28 = v26;
    v29 = (_QWORD *)swift_allocObject(&unk_100607950, 40, 7);
    v30 = v48;
    v29[2] = v28;
    v29[3] = v30;
    v29[4] = a2;
    swift_bridgeObjectRetain(a2);
    swift_retain(v28);
    sub_1000D6570((uint64_t)sub_1000D54E8, (uint64_t)v29);
    swift_release(v28);
    return swift_release(v29);
  }
}

uint64_t sub_1000D1148(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  void *object;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;
  char v58[8];

  v3 = v2;
  v6 = type metadata accessor for DIPError.Code(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v48 = a1;
  if (v18)
  {
    v45 = v10;
    v19 = swift_slowAlloc(12, -1);
    v46 = v2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v47 = v8;
    v22 = v21;
    v56 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v54 = sub_1000E3AC8(a1, a2, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v20 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "deleteBiomeMetadata called for proofingSessionID: %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    v8 = v47;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    v3 = v46;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v45);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v25 = type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject(v25, 24, 7);
  sub_1000BF344();
  v27 = v3;
  if (v3)
  {
    v56 = 0;
    v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v31._countAndFlagsBits = 0xD000000000000036;
    v31._object = (void *)0x8000000100546540;
    String.append(_:)(v31);
    swift_getErrorValue(v3, v58, v55);
    v32._countAndFlagsBits = Error.localizedDescription.getter(v55[1], v55[2]);
    object = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(object);
    v34 = v56;
    v35 = v57;
    v36 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v51, enum case for DIPError.Code.failedToDeleteBiomeMetadata(_:), v50);
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = v52;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v34, v35, 0, v36, 0, v37, 0xD000000000000071, 0x80000001005462F0, 0xD00000000000002ALL, 0x8000000100546580, 121);
    v39 = sub_100007F30();
    swift_allocError(v8, v39, 0, 0);
    v40 = v53;
    v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 16))(v41, v38, v8);
    swift_willThrow(v42);
    swift_errorRelease(v27);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v8);
  }
  else
  {
    v28 = v26;
    v29 = (_QWORD *)swift_allocObject(&unk_100607928, 40, 7);
    v30 = v48;
    v29[2] = v28;
    v29[3] = v30;
    v29[4] = a2;
    swift_bridgeObjectRetain(a2);
    swift_retain(v28);
    sub_1000BF870((uint64_t)sub_1000D549C, (uint64_t)v29);
    swift_release(v28);
    return swift_release(v29);
  }
}

uint64_t sub_1000D1598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v45 = (char *)a3;
  v36 = a1;
  v37 = a2;
  v41 = type metadata accessor for DIPError.Code(0);
  v38 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v42 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v5 = type metadata accessor for Logger(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = sub_100004828((uint64_t *)&unk_100633958);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PendingActionContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  __chkstk_darwin(v17);
  v19 = (char *)&v35 - v18;
  sub_100038B24((uint64_t)v45, (uint64_t)v13, (uint64_t *)&unk_100633958);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v20 = sub_100008030((uint64_t)v13, (uint64_t *)&unk_100633958);
    v21 = defaultLogger()(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Pending actions doesn't have a SEND_TO_BIOME Context", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  }
  else
  {
    v45 = v8;
    sub_1000D1A94((uint64_t)v13, (uint64_t)v19);
    v26 = type metadata accessor for IdentityBiomeDataContext();
    swift_allocObject(v26, 24, 7);
    sub_1000BF344();
    v35 = v19;
    v28 = v27;
    v29 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000D1B14((uint64_t)v19, (uint64_t)v29);
    v30 = *(unsigned __int8 *)(v15 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (_QWORD *)swift_allocObject(&unk_100607838, v31 + v16, v30 | 7);
    v33 = v36;
    v34 = v37;
    v32[2] = v28;
    v32[3] = v33;
    v32[4] = v34;
    sub_1000D1A94((uint64_t)v29, (uint64_t)v32 + v31);
    swift_retain(v28);
    swift_bridgeObjectRetain(v34);
    sub_1000BF870((uint64_t)sub_1000D35E0, (uint64_t)v32);
    sub_1000D1AD8((uint64_t)v35);
    swift_release(v28);
    return swift_release(v32);
  }
}

uint64_t sub_1000D1A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D1AD8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D1B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PendingActionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D1B58()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v369;

  v1 = (int *)type metadata accessor for PendingActionContext(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v6 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 104));
  v7 = *(_QWORD *)(v0 + v4 + 120);
  if (v7 != 1)
  {
    if (v7 == 2)
      goto LABEL_6;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6[17]);
  }
  v8 = v6[19];
  if (v8 != 1)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6[21]);
  }
LABEL_6:
  v9 = v6[23];
  if (v9 != 1)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v6[25]);
  }
  swift_bridgeObjectRelease(v6[27]);
  swift_bridgeObjectRelease(v6[29]);
  v10 = v6[31];
  if (v10 != 1)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v6[33]);
  }
  v11 = (_QWORD *)((char *)v6 + v1[17]);
  v12 = type metadata accessor for WorkflowRecommendationResponse(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v369 = v0;
    v13 = v3;
    v14 = (v3 + 40) & ~v3;
    v15 = v5;
    if (v11[3])
    {
      swift_bridgeObjectRelease(v11[1]);
      swift_bridgeObjectRelease(v11[3]);
      swift_bridgeObjectRelease(v11[5]);
      swift_bridgeObjectRelease(v11[7]);
      swift_bridgeObjectRelease(v11[9]);
      swift_bridgeObjectRelease(v11[11]);
    }
    v16 = (_QWORD *)((char *)v11 + *(int *)(v12 + 20));
    swift_bridgeObjectRelease(v16[1]);
    swift_bridgeObjectRelease(v16[3]);
    swift_bridgeObjectRelease(v16[5]);
    swift_bridgeObjectRelease(v16[7]);
    swift_bridgeObjectRelease(v16[9]);
    swift_bridgeObjectRelease(v16[11]);
    swift_bridgeObjectRelease(v16[14]);
    swift_bridgeObjectRelease(v16[16]);
    swift_bridgeObjectRelease(v16[17]);
    swift_bridgeObjectRelease(v16[19]);
    swift_bridgeObjectRelease(v16[20]);
    swift_bridgeObjectRelease(v16[22]);
    v17 = (int *)type metadata accessor for Workflow(0);
    v18 = (char *)v16 + v17[18];
    v19 = type metadata accessor for HardwareAttestationType(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[19]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[20]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[21] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[23]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[24]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[25]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[28]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[29]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[30]));
    v21 = (_QWORD *)((char *)v16 + v17[38]);
    v22 = v21[1];
    v5 = v15;
    v4 = v14;
    v3 = v13;
    v0 = v369;
    if (v22 != 1)
    {
      swift_bridgeObjectRelease(v22);
      if (v21[104] != 1)
      {
        v23 = v21[2];
        if (v23 != 1)
          swift_bridgeObjectRelease(v23);
        v24 = v21[6];
        if (v24 != 1)
          swift_bridgeObjectRelease(v24);
        v25 = v21[10];
        if (v25 != 1)
          swift_bridgeObjectRelease(v25);
        v26 = v21[14];
        if (v26 != 1)
          swift_bridgeObjectRelease(v26);
        v27 = v21[18];
        if (v27 != 1)
          swift_bridgeObjectRelease(v27);
        v28 = v21[22];
        if (v28 != 1)
          swift_bridgeObjectRelease(v28);
        v29 = v21[26];
        if (v29 != 1)
          swift_bridgeObjectRelease(v29);
        v30 = v21[30];
        if (v30 != 1)
          swift_bridgeObjectRelease(v30);
        v31 = v21[34];
        if (v31 != 1)
          swift_bridgeObjectRelease(v31);
        v32 = v21[38];
        if (v32 != 1)
          swift_bridgeObjectRelease(v32);
        v33 = v21[42];
        if (v33 != 1)
          swift_bridgeObjectRelease(v33);
        v34 = v21[46];
        if (v34 != 1)
          swift_bridgeObjectRelease(v34);
        v35 = v21[50];
        if (v35 != 1)
          swift_bridgeObjectRelease(v35);
        v36 = v21[54];
        if (v36 != 1)
          swift_bridgeObjectRelease(v36);
        v37 = v21[58];
        if (v37 != 1)
          swift_bridgeObjectRelease(v37);
        v38 = v21[62];
        if (v38 != 1)
          swift_bridgeObjectRelease(v38);
        v39 = v21[66];
        if (v39 != 1)
          swift_bridgeObjectRelease(v39);
        v40 = v21[70];
        if (v40 != 1)
          swift_bridgeObjectRelease(v40);
        v41 = v21[74];
        if (v41 != 1)
          swift_bridgeObjectRelease(v41);
        v42 = v21[78];
        if (v42 != 1)
          swift_bridgeObjectRelease(v42);
        v43 = v21[82];
        if (v43 != 1)
          swift_bridgeObjectRelease(v43);
        v44 = v21[86];
        if (v44 != 1)
          swift_bridgeObjectRelease(v44);
        v45 = v21[90];
        if (v45 != 1)
          swift_bridgeObjectRelease(v45);
        v46 = v21[94];
        if (v46 != 1)
          swift_bridgeObjectRelease(v46);
        swift_bridgeObjectRelease(v21[104]);
        swift_bridgeObjectRelease(v21[105]);
      }
      if (v21[208] != 1)
      {
        v47 = v21[106];
        if (v47 != 1)
          swift_bridgeObjectRelease(v47);
        v48 = v21[110];
        if (v48 != 1)
          swift_bridgeObjectRelease(v48);
        v49 = v21[114];
        if (v49 != 1)
          swift_bridgeObjectRelease(v49);
        v50 = v21[118];
        if (v50 != 1)
          swift_bridgeObjectRelease(v50);
        v51 = v21[122];
        if (v51 != 1)
          swift_bridgeObjectRelease(v51);
        v52 = v21[126];
        if (v52 != 1)
          swift_bridgeObjectRelease(v52);
        v53 = v21[130];
        if (v53 != 1)
          swift_bridgeObjectRelease(v53);
        v54 = v21[134];
        if (v54 != 1)
          swift_bridgeObjectRelease(v54);
        v55 = v21[138];
        if (v55 != 1)
          swift_bridgeObjectRelease(v55);
        v56 = v21[142];
        if (v56 != 1)
          swift_bridgeObjectRelease(v56);
        v57 = v21[146];
        if (v57 != 1)
          swift_bridgeObjectRelease(v57);
        v58 = v21[150];
        if (v58 != 1)
          swift_bridgeObjectRelease(v58);
        v59 = v21[154];
        if (v59 != 1)
          swift_bridgeObjectRelease(v59);
        v60 = v21[158];
        if (v60 != 1)
          swift_bridgeObjectRelease(v60);
        v61 = v21[162];
        if (v61 != 1)
          swift_bridgeObjectRelease(v61);
        v62 = v21[166];
        if (v62 != 1)
          swift_bridgeObjectRelease(v62);
        v63 = v21[170];
        if (v63 != 1)
          swift_bridgeObjectRelease(v63);
        v64 = v21[174];
        if (v64 != 1)
          swift_bridgeObjectRelease(v64);
        v65 = v21[178];
        if (v65 != 1)
          swift_bridgeObjectRelease(v65);
        v66 = v21[182];
        if (v66 != 1)
          swift_bridgeObjectRelease(v66);
        v67 = v21[186];
        if (v67 != 1)
          swift_bridgeObjectRelease(v67);
        v68 = v21[190];
        if (v68 != 1)
          swift_bridgeObjectRelease(v68);
        v69 = v21[194];
        if (v69 != 1)
          swift_bridgeObjectRelease(v69);
        v70 = v21[198];
        if (v70 != 1)
          swift_bridgeObjectRelease(v70);
        swift_bridgeObjectRelease(v21[208]);
        swift_bridgeObjectRelease(v21[209]);
      }
      if (v21[312] != 1)
      {
        v71 = v21[210];
        if (v71 != 1)
          swift_bridgeObjectRelease(v71);
        v72 = v21[214];
        if (v72 != 1)
          swift_bridgeObjectRelease(v72);
        v73 = v21[218];
        if (v73 != 1)
          swift_bridgeObjectRelease(v73);
        v74 = v21[222];
        if (v74 != 1)
          swift_bridgeObjectRelease(v74);
        v75 = v21[226];
        if (v75 != 1)
          swift_bridgeObjectRelease(v75);
        v76 = v21[230];
        if (v76 != 1)
          swift_bridgeObjectRelease(v76);
        v77 = v21[234];
        if (v77 != 1)
          swift_bridgeObjectRelease(v77);
        v78 = v21[238];
        if (v78 != 1)
          swift_bridgeObjectRelease(v78);
        v79 = v21[242];
        if (v79 != 1)
          swift_bridgeObjectRelease(v79);
        v80 = v21[246];
        if (v80 != 1)
          swift_bridgeObjectRelease(v80);
        v81 = v21[250];
        if (v81 != 1)
          swift_bridgeObjectRelease(v81);
        v82 = v21[254];
        if (v82 != 1)
          swift_bridgeObjectRelease(v82);
        v83 = v21[258];
        if (v83 != 1)
          swift_bridgeObjectRelease(v83);
        v84 = v21[262];
        if (v84 != 1)
          swift_bridgeObjectRelease(v84);
        v85 = v21[266];
        if (v85 != 1)
          swift_bridgeObjectRelease(v85);
        v86 = v21[270];
        if (v86 != 1)
          swift_bridgeObjectRelease(v86);
        v87 = v21[274];
        if (v87 != 1)
          swift_bridgeObjectRelease(v87);
        v88 = v21[278];
        if (v88 != 1)
          swift_bridgeObjectRelease(v88);
        v89 = v21[282];
        if (v89 != 1)
          swift_bridgeObjectRelease(v89);
        v90 = v21[286];
        if (v90 != 1)
          swift_bridgeObjectRelease(v90);
        v91 = v21[290];
        if (v91 != 1)
          swift_bridgeObjectRelease(v91);
        v92 = v21[294];
        if (v92 != 1)
          swift_bridgeObjectRelease(v92);
        v93 = v21[298];
        if (v93 != 1)
          swift_bridgeObjectRelease(v93);
        v94 = v21[302];
        if (v94 != 1)
          swift_bridgeObjectRelease(v94);
        swift_bridgeObjectRelease(v21[312]);
        swift_bridgeObjectRelease(v21[313]);
      }
      if (v21[416] != 1)
      {
        v95 = v21[314];
        if (v95 != 1)
          swift_bridgeObjectRelease(v95);
        v96 = v21[318];
        if (v96 != 1)
          swift_bridgeObjectRelease(v96);
        v97 = v21[322];
        if (v97 != 1)
          swift_bridgeObjectRelease(v97);
        v98 = v21[326];
        if (v98 != 1)
          swift_bridgeObjectRelease(v98);
        v99 = v21[330];
        if (v99 != 1)
          swift_bridgeObjectRelease(v99);
        v100 = v21[334];
        if (v100 != 1)
          swift_bridgeObjectRelease(v100);
        v101 = v21[338];
        if (v101 != 1)
          swift_bridgeObjectRelease(v101);
        v102 = v21[342];
        if (v102 != 1)
          swift_bridgeObjectRelease(v102);
        v103 = v21[346];
        if (v103 != 1)
          swift_bridgeObjectRelease(v103);
        v104 = v21[350];
        if (v104 != 1)
          swift_bridgeObjectRelease(v104);
        v105 = v21[354];
        if (v105 != 1)
          swift_bridgeObjectRelease(v105);
        v106 = v21[358];
        if (v106 != 1)
          swift_bridgeObjectRelease(v106);
        v107 = v21[362];
        if (v107 != 1)
          swift_bridgeObjectRelease(v107);
        v108 = v21[366];
        if (v108 != 1)
          swift_bridgeObjectRelease(v108);
        v109 = v21[370];
        if (v109 != 1)
          swift_bridgeObjectRelease(v109);
        v110 = v21[374];
        if (v110 != 1)
          swift_bridgeObjectRelease(v110);
        v111 = v21[378];
        if (v111 != 1)
          swift_bridgeObjectRelease(v111);
        v112 = v21[382];
        if (v112 != 1)
          swift_bridgeObjectRelease(v112);
        v113 = v21[386];
        if (v113 != 1)
          swift_bridgeObjectRelease(v113);
        v114 = v21[390];
        if (v114 != 1)
          swift_bridgeObjectRelease(v114);
        v115 = v21[394];
        if (v115 != 1)
          swift_bridgeObjectRelease(v115);
        v116 = v21[398];
        if (v116 != 1)
          swift_bridgeObjectRelease(v116);
        v117 = v21[402];
        if (v117 != 1)
          swift_bridgeObjectRelease(v117);
        v118 = v21[406];
        if (v118 != 1)
          swift_bridgeObjectRelease(v118);
        swift_bridgeObjectRelease(v21[416]);
        swift_bridgeObjectRelease(v21[417]);
      }
      if (v21[520] != 1)
      {
        v119 = v21[418];
        if (v119 != 1)
          swift_bridgeObjectRelease(v119);
        v120 = v21[422];
        if (v120 != 1)
          swift_bridgeObjectRelease(v120);
        v121 = v21[426];
        if (v121 != 1)
          swift_bridgeObjectRelease(v121);
        v122 = v21[430];
        if (v122 != 1)
          swift_bridgeObjectRelease(v122);
        v123 = v21[434];
        if (v123 != 1)
          swift_bridgeObjectRelease(v123);
        v124 = v21[438];
        if (v124 != 1)
          swift_bridgeObjectRelease(v124);
        v125 = v21[442];
        if (v125 != 1)
          swift_bridgeObjectRelease(v125);
        v126 = v21[446];
        if (v126 != 1)
          swift_bridgeObjectRelease(v126);
        v127 = v21[450];
        if (v127 != 1)
          swift_bridgeObjectRelease(v127);
        v128 = v21[454];
        if (v128 != 1)
          swift_bridgeObjectRelease(v128);
        v129 = v21[458];
        if (v129 != 1)
          swift_bridgeObjectRelease(v129);
        v130 = v21[462];
        if (v130 != 1)
          swift_bridgeObjectRelease(v130);
        v131 = v21[466];
        if (v131 != 1)
          swift_bridgeObjectRelease(v131);
        v132 = v21[470];
        if (v132 != 1)
          swift_bridgeObjectRelease(v132);
        v133 = v21[474];
        if (v133 != 1)
          swift_bridgeObjectRelease(v133);
        v134 = v21[478];
        if (v134 != 1)
          swift_bridgeObjectRelease(v134);
        v135 = v21[482];
        if (v135 != 1)
          swift_bridgeObjectRelease(v135);
        v136 = v21[486];
        if (v136 != 1)
          swift_bridgeObjectRelease(v136);
        v137 = v21[490];
        if (v137 != 1)
          swift_bridgeObjectRelease(v137);
        v138 = v21[494];
        if (v138 != 1)
          swift_bridgeObjectRelease(v138);
        v139 = v21[498];
        if (v139 != 1)
          swift_bridgeObjectRelease(v139);
        v140 = v21[502];
        if (v140 != 1)
          swift_bridgeObjectRelease(v140);
        v141 = v21[506];
        if (v141 != 1)
          swift_bridgeObjectRelease(v141);
        v142 = v21[510];
        if (v142 != 1)
          swift_bridgeObjectRelease(v142);
        swift_bridgeObjectRelease(v21[520]);
        swift_bridgeObjectRelease(v21[521]);
      }
      if (v21[624] != 1)
      {
        v143 = v21[522];
        if (v143 != 1)
          swift_bridgeObjectRelease(v143);
        v144 = v21[526];
        if (v144 != 1)
          swift_bridgeObjectRelease(v144);
        v145 = v21[530];
        if (v145 != 1)
          swift_bridgeObjectRelease(v145);
        v146 = v21[534];
        if (v146 != 1)
          swift_bridgeObjectRelease(v146);
        v147 = v21[538];
        if (v147 != 1)
          swift_bridgeObjectRelease(v147);
        v148 = v21[542];
        if (v148 != 1)
          swift_bridgeObjectRelease(v148);
        v149 = v21[546];
        if (v149 != 1)
          swift_bridgeObjectRelease(v149);
        v150 = v21[550];
        if (v150 != 1)
          swift_bridgeObjectRelease(v150);
        v151 = v21[554];
        if (v151 != 1)
          swift_bridgeObjectRelease(v151);
        v152 = v21[558];
        if (v152 != 1)
          swift_bridgeObjectRelease(v152);
        v153 = v21[562];
        if (v153 != 1)
          swift_bridgeObjectRelease(v153);
        v154 = v21[566];
        if (v154 != 1)
          swift_bridgeObjectRelease(v154);
        v155 = v21[570];
        if (v155 != 1)
          swift_bridgeObjectRelease(v155);
        v156 = v21[574];
        if (v156 != 1)
          swift_bridgeObjectRelease(v156);
        v157 = v21[578];
        if (v157 != 1)
          swift_bridgeObjectRelease(v157);
        v158 = v21[582];
        if (v158 != 1)
          swift_bridgeObjectRelease(v158);
        v159 = v21[586];
        if (v159 != 1)
          swift_bridgeObjectRelease(v159);
        v160 = v21[590];
        if (v160 != 1)
          swift_bridgeObjectRelease(v160);
        v161 = v21[594];
        if (v161 != 1)
          swift_bridgeObjectRelease(v161);
        v162 = v21[598];
        if (v162 != 1)
          swift_bridgeObjectRelease(v162);
        v163 = v21[602];
        if (v163 != 1)
          swift_bridgeObjectRelease(v163);
        v164 = v21[606];
        if (v164 != 1)
          swift_bridgeObjectRelease(v164);
        v165 = v21[610];
        if (v165 != 1)
          swift_bridgeObjectRelease(v165);
        v166 = v21[614];
        if (v166 != 1)
          swift_bridgeObjectRelease(v166);
        swift_bridgeObjectRelease(v21[624]);
        swift_bridgeObjectRelease(v21[625]);
      }
      if (v21[728] != 1)
      {
        v167 = v21[626];
        if (v167 != 1)
          swift_bridgeObjectRelease(v167);
        v168 = v21[630];
        if (v168 != 1)
          swift_bridgeObjectRelease(v168);
        v169 = v21[634];
        if (v169 != 1)
          swift_bridgeObjectRelease(v169);
        v170 = v21[638];
        if (v170 != 1)
          swift_bridgeObjectRelease(v170);
        v171 = v21[642];
        if (v171 != 1)
          swift_bridgeObjectRelease(v171);
        v172 = v21[646];
        if (v172 != 1)
          swift_bridgeObjectRelease(v172);
        v173 = v21[650];
        if (v173 != 1)
          swift_bridgeObjectRelease(v173);
        v174 = v21[654];
        if (v174 != 1)
          swift_bridgeObjectRelease(v174);
        v175 = v21[658];
        if (v175 != 1)
          swift_bridgeObjectRelease(v175);
        v176 = v21[662];
        if (v176 != 1)
          swift_bridgeObjectRelease(v176);
        v177 = v21[666];
        if (v177 != 1)
          swift_bridgeObjectRelease(v177);
        v178 = v21[670];
        if (v178 != 1)
          swift_bridgeObjectRelease(v178);
        v179 = v21[674];
        if (v179 != 1)
          swift_bridgeObjectRelease(v179);
        v180 = v21[678];
        if (v180 != 1)
          swift_bridgeObjectRelease(v180);
        v181 = v21[682];
        if (v181 != 1)
          swift_bridgeObjectRelease(v181);
        v182 = v21[686];
        if (v182 != 1)
          swift_bridgeObjectRelease(v182);
        v183 = v21[690];
        if (v183 != 1)
          swift_bridgeObjectRelease(v183);
        v184 = v21[694];
        if (v184 != 1)
          swift_bridgeObjectRelease(v184);
        v185 = v21[698];
        if (v185 != 1)
          swift_bridgeObjectRelease(v185);
        v186 = v21[702];
        if (v186 != 1)
          swift_bridgeObjectRelease(v186);
        v187 = v21[706];
        if (v187 != 1)
          swift_bridgeObjectRelease(v187);
        v188 = v21[710];
        if (v188 != 1)
          swift_bridgeObjectRelease(v188);
        v189 = v21[714];
        if (v189 != 1)
          swift_bridgeObjectRelease(v189);
        v190 = v21[718];
        if (v190 != 1)
          swift_bridgeObjectRelease(v190);
        swift_bridgeObjectRelease(v21[728]);
        swift_bridgeObjectRelease(v21[729]);
      }
      swift_bridgeObjectRelease(v21[730]);
    }
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[39]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[40] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v17[41] + 8));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[19]));
  v191 = (_QWORD *)((char *)v6 + v1[25]);
  v192 = v191[1];
  if (v192)
  {
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v191[3]);
    swift_bridgeObjectRelease(v191[5]);
    swift_bridgeObjectRelease(v191[7]);
  }
  v193 = (_QWORD *)((char *)v6 + v1[26]);
  v194 = v193[1];
  if (v194)
  {
    swift_bridgeObjectRelease(v194);
    swift_bridgeObjectRelease(v193[3]);
    swift_bridgeObjectRelease(v193[5]);
    swift_bridgeObjectRelease(v193[7]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[27] + 8));
  v195 = (char *)v6 + v1[28];
  v196 = sub_100004828(&qword_100633968);
  v197 = *(_QWORD *)(v196 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v197 + 48))(v195, 1, v196))
    (*(void (**)(char *, uint64_t))(v197 + 8))(v195, v196);
  v198 = (_QWORD *)((char *)v6 + v1[29]);
  v199 = v198[1];
  if (v199 != 1)
  {
    swift_bridgeObjectRelease(v199);
    if (v198[104] != 1)
    {
      v200 = v198[2];
      if (v200 != 1)
        swift_bridgeObjectRelease(v200);
      v201 = v198[6];
      if (v201 != 1)
        swift_bridgeObjectRelease(v201);
      v202 = v198[10];
      if (v202 != 1)
        swift_bridgeObjectRelease(v202);
      v203 = v198[14];
      if (v203 != 1)
        swift_bridgeObjectRelease(v203);
      v204 = v198[18];
      if (v204 != 1)
        swift_bridgeObjectRelease(v204);
      v205 = v198[22];
      if (v205 != 1)
        swift_bridgeObjectRelease(v205);
      v206 = v198[26];
      if (v206 != 1)
        swift_bridgeObjectRelease(v206);
      v207 = v198[30];
      if (v207 != 1)
        swift_bridgeObjectRelease(v207);
      v208 = v198[34];
      if (v208 != 1)
        swift_bridgeObjectRelease(v208);
      v209 = v198[38];
      if (v209 != 1)
        swift_bridgeObjectRelease(v209);
      v210 = v198[42];
      if (v210 != 1)
        swift_bridgeObjectRelease(v210);
      v211 = v198[46];
      if (v211 != 1)
        swift_bridgeObjectRelease(v211);
      v212 = v198[50];
      if (v212 != 1)
        swift_bridgeObjectRelease(v212);
      v213 = v198[54];
      if (v213 != 1)
        swift_bridgeObjectRelease(v213);
      v214 = v198[58];
      if (v214 != 1)
        swift_bridgeObjectRelease(v214);
      v215 = v198[62];
      if (v215 != 1)
        swift_bridgeObjectRelease(v215);
      v216 = v198[66];
      if (v216 != 1)
        swift_bridgeObjectRelease(v216);
      v217 = v198[70];
      if (v217 != 1)
        swift_bridgeObjectRelease(v217);
      v218 = v198[74];
      if (v218 != 1)
        swift_bridgeObjectRelease(v218);
      v219 = v198[78];
      if (v219 != 1)
        swift_bridgeObjectRelease(v219);
      v220 = v198[82];
      if (v220 != 1)
        swift_bridgeObjectRelease(v220);
      v221 = v198[86];
      if (v221 != 1)
        swift_bridgeObjectRelease(v221);
      v222 = v198[90];
      if (v222 != 1)
        swift_bridgeObjectRelease(v222);
      v223 = v198[94];
      if (v223 != 1)
        swift_bridgeObjectRelease(v223);
      swift_bridgeObjectRelease(v198[104]);
      swift_bridgeObjectRelease(v198[105]);
    }
    if (v198[208] != 1)
    {
      v224 = v198[106];
      if (v224 != 1)
        swift_bridgeObjectRelease(v224);
      v225 = v198[110];
      if (v225 != 1)
        swift_bridgeObjectRelease(v225);
      v226 = v198[114];
      if (v226 != 1)
        swift_bridgeObjectRelease(v226);
      v227 = v198[118];
      if (v227 != 1)
        swift_bridgeObjectRelease(v227);
      v228 = v198[122];
      if (v228 != 1)
        swift_bridgeObjectRelease(v228);
      v229 = v198[126];
      if (v229 != 1)
        swift_bridgeObjectRelease(v229);
      v230 = v198[130];
      if (v230 != 1)
        swift_bridgeObjectRelease(v230);
      v231 = v198[134];
      if (v231 != 1)
        swift_bridgeObjectRelease(v231);
      v232 = v198[138];
      if (v232 != 1)
        swift_bridgeObjectRelease(v232);
      v233 = v198[142];
      if (v233 != 1)
        swift_bridgeObjectRelease(v233);
      v234 = v198[146];
      if (v234 != 1)
        swift_bridgeObjectRelease(v234);
      v235 = v198[150];
      if (v235 != 1)
        swift_bridgeObjectRelease(v235);
      v236 = v198[154];
      if (v236 != 1)
        swift_bridgeObjectRelease(v236);
      v237 = v198[158];
      if (v237 != 1)
        swift_bridgeObjectRelease(v237);
      v238 = v198[162];
      if (v238 != 1)
        swift_bridgeObjectRelease(v238);
      v239 = v198[166];
      if (v239 != 1)
        swift_bridgeObjectRelease(v239);
      v240 = v198[170];
      if (v240 != 1)
        swift_bridgeObjectRelease(v240);
      v241 = v198[174];
      if (v241 != 1)
        swift_bridgeObjectRelease(v241);
      v242 = v198[178];
      if (v242 != 1)
        swift_bridgeObjectRelease(v242);
      v243 = v198[182];
      if (v243 != 1)
        swift_bridgeObjectRelease(v243);
      v244 = v198[186];
      if (v244 != 1)
        swift_bridgeObjectRelease(v244);
      v245 = v198[190];
      if (v245 != 1)
        swift_bridgeObjectRelease(v245);
      v246 = v198[194];
      if (v246 != 1)
        swift_bridgeObjectRelease(v246);
      v247 = v198[198];
      if (v247 != 1)
        swift_bridgeObjectRelease(v247);
      swift_bridgeObjectRelease(v198[208]);
      swift_bridgeObjectRelease(v198[209]);
    }
    if (v198[312] != 1)
    {
      v248 = v198[210];
      if (v248 != 1)
        swift_bridgeObjectRelease(v248);
      v249 = v198[214];
      if (v249 != 1)
        swift_bridgeObjectRelease(v249);
      v250 = v198[218];
      if (v250 != 1)
        swift_bridgeObjectRelease(v250);
      v251 = v198[222];
      if (v251 != 1)
        swift_bridgeObjectRelease(v251);
      v252 = v198[226];
      if (v252 != 1)
        swift_bridgeObjectRelease(v252);
      v253 = v198[230];
      if (v253 != 1)
        swift_bridgeObjectRelease(v253);
      v254 = v198[234];
      if (v254 != 1)
        swift_bridgeObjectRelease(v254);
      v255 = v198[238];
      if (v255 != 1)
        swift_bridgeObjectRelease(v255);
      v256 = v198[242];
      if (v256 != 1)
        swift_bridgeObjectRelease(v256);
      v257 = v198[246];
      if (v257 != 1)
        swift_bridgeObjectRelease(v257);
      v258 = v198[250];
      if (v258 != 1)
        swift_bridgeObjectRelease(v258);
      v259 = v198[254];
      if (v259 != 1)
        swift_bridgeObjectRelease(v259);
      v260 = v198[258];
      if (v260 != 1)
        swift_bridgeObjectRelease(v260);
      v261 = v198[262];
      if (v261 != 1)
        swift_bridgeObjectRelease(v261);
      v262 = v198[266];
      if (v262 != 1)
        swift_bridgeObjectRelease(v262);
      v263 = v198[270];
      if (v263 != 1)
        swift_bridgeObjectRelease(v263);
      v264 = v198[274];
      if (v264 != 1)
        swift_bridgeObjectRelease(v264);
      v265 = v198[278];
      if (v265 != 1)
        swift_bridgeObjectRelease(v265);
      v266 = v198[282];
      if (v266 != 1)
        swift_bridgeObjectRelease(v266);
      v267 = v198[286];
      if (v267 != 1)
        swift_bridgeObjectRelease(v267);
      v268 = v198[290];
      if (v268 != 1)
        swift_bridgeObjectRelease(v268);
      v269 = v198[294];
      if (v269 != 1)
        swift_bridgeObjectRelease(v269);
      v270 = v198[298];
      if (v270 != 1)
        swift_bridgeObjectRelease(v270);
      v271 = v198[302];
      if (v271 != 1)
        swift_bridgeObjectRelease(v271);
      swift_bridgeObjectRelease(v198[312]);
      swift_bridgeObjectRelease(v198[313]);
    }
    if (v198[416] != 1)
    {
      v272 = v198[314];
      if (v272 != 1)
        swift_bridgeObjectRelease(v272);
      v273 = v198[318];
      if (v273 != 1)
        swift_bridgeObjectRelease(v273);
      v274 = v198[322];
      if (v274 != 1)
        swift_bridgeObjectRelease(v274);
      v275 = v198[326];
      if (v275 != 1)
        swift_bridgeObjectRelease(v275);
      v276 = v198[330];
      if (v276 != 1)
        swift_bridgeObjectRelease(v276);
      v277 = v198[334];
      if (v277 != 1)
        swift_bridgeObjectRelease(v277);
      v278 = v198[338];
      if (v278 != 1)
        swift_bridgeObjectRelease(v278);
      v279 = v198[342];
      if (v279 != 1)
        swift_bridgeObjectRelease(v279);
      v280 = v198[346];
      if (v280 != 1)
        swift_bridgeObjectRelease(v280);
      v281 = v198[350];
      if (v281 != 1)
        swift_bridgeObjectRelease(v281);
      v282 = v198[354];
      if (v282 != 1)
        swift_bridgeObjectRelease(v282);
      v283 = v198[358];
      if (v283 != 1)
        swift_bridgeObjectRelease(v283);
      v284 = v198[362];
      if (v284 != 1)
        swift_bridgeObjectRelease(v284);
      v285 = v198[366];
      if (v285 != 1)
        swift_bridgeObjectRelease(v285);
      v286 = v198[370];
      if (v286 != 1)
        swift_bridgeObjectRelease(v286);
      v287 = v198[374];
      if (v287 != 1)
        swift_bridgeObjectRelease(v287);
      v288 = v198[378];
      if (v288 != 1)
        swift_bridgeObjectRelease(v288);
      v289 = v198[382];
      if (v289 != 1)
        swift_bridgeObjectRelease(v289);
      v290 = v198[386];
      if (v290 != 1)
        swift_bridgeObjectRelease(v290);
      v291 = v198[390];
      if (v291 != 1)
        swift_bridgeObjectRelease(v291);
      v292 = v198[394];
      if (v292 != 1)
        swift_bridgeObjectRelease(v292);
      v293 = v198[398];
      if (v293 != 1)
        swift_bridgeObjectRelease(v293);
      v294 = v198[402];
      if (v294 != 1)
        swift_bridgeObjectRelease(v294);
      v295 = v198[406];
      if (v295 != 1)
        swift_bridgeObjectRelease(v295);
      swift_bridgeObjectRelease(v198[416]);
      swift_bridgeObjectRelease(v198[417]);
    }
    if (v198[520] != 1)
    {
      v296 = v198[418];
      if (v296 != 1)
        swift_bridgeObjectRelease(v296);
      v297 = v198[422];
      if (v297 != 1)
        swift_bridgeObjectRelease(v297);
      v298 = v198[426];
      if (v298 != 1)
        swift_bridgeObjectRelease(v298);
      v299 = v198[430];
      if (v299 != 1)
        swift_bridgeObjectRelease(v299);
      v300 = v198[434];
      if (v300 != 1)
        swift_bridgeObjectRelease(v300);
      v301 = v198[438];
      if (v301 != 1)
        swift_bridgeObjectRelease(v301);
      v302 = v198[442];
      if (v302 != 1)
        swift_bridgeObjectRelease(v302);
      v303 = v198[446];
      if (v303 != 1)
        swift_bridgeObjectRelease(v303);
      v304 = v198[450];
      if (v304 != 1)
        swift_bridgeObjectRelease(v304);
      v305 = v198[454];
      if (v305 != 1)
        swift_bridgeObjectRelease(v305);
      v306 = v198[458];
      if (v306 != 1)
        swift_bridgeObjectRelease(v306);
      v307 = v198[462];
      if (v307 != 1)
        swift_bridgeObjectRelease(v307);
      v308 = v198[466];
      if (v308 != 1)
        swift_bridgeObjectRelease(v308);
      v309 = v198[470];
      if (v309 != 1)
        swift_bridgeObjectRelease(v309);
      v310 = v198[474];
      if (v310 != 1)
        swift_bridgeObjectRelease(v310);
      v311 = v198[478];
      if (v311 != 1)
        swift_bridgeObjectRelease(v311);
      v312 = v198[482];
      if (v312 != 1)
        swift_bridgeObjectRelease(v312);
      v313 = v198[486];
      if (v313 != 1)
        swift_bridgeObjectRelease(v313);
      v314 = v198[490];
      if (v314 != 1)
        swift_bridgeObjectRelease(v314);
      v315 = v198[494];
      if (v315 != 1)
        swift_bridgeObjectRelease(v315);
      v316 = v198[498];
      if (v316 != 1)
        swift_bridgeObjectRelease(v316);
      v317 = v198[502];
      if (v317 != 1)
        swift_bridgeObjectRelease(v317);
      v318 = v198[506];
      if (v318 != 1)
        swift_bridgeObjectRelease(v318);
      v319 = v198[510];
      if (v319 != 1)
        swift_bridgeObjectRelease(v319);
      swift_bridgeObjectRelease(v198[520]);
      swift_bridgeObjectRelease(v198[521]);
    }
    if (v198[624] != 1)
    {
      v320 = v198[522];
      if (v320 != 1)
        swift_bridgeObjectRelease(v320);
      v321 = v198[526];
      if (v321 != 1)
        swift_bridgeObjectRelease(v321);
      v322 = v198[530];
      if (v322 != 1)
        swift_bridgeObjectRelease(v322);
      v323 = v198[534];
      if (v323 != 1)
        swift_bridgeObjectRelease(v323);
      v324 = v198[538];
      if (v324 != 1)
        swift_bridgeObjectRelease(v324);
      v325 = v198[542];
      if (v325 != 1)
        swift_bridgeObjectRelease(v325);
      v326 = v198[546];
      if (v326 != 1)
        swift_bridgeObjectRelease(v326);
      v327 = v198[550];
      if (v327 != 1)
        swift_bridgeObjectRelease(v327);
      v328 = v198[554];
      if (v328 != 1)
        swift_bridgeObjectRelease(v328);
      v329 = v198[558];
      if (v329 != 1)
        swift_bridgeObjectRelease(v329);
      v330 = v198[562];
      if (v330 != 1)
        swift_bridgeObjectRelease(v330);
      v331 = v198[566];
      if (v331 != 1)
        swift_bridgeObjectRelease(v331);
      v332 = v198[570];
      if (v332 != 1)
        swift_bridgeObjectRelease(v332);
      v333 = v198[574];
      if (v333 != 1)
        swift_bridgeObjectRelease(v333);
      v334 = v198[578];
      if (v334 != 1)
        swift_bridgeObjectRelease(v334);
      v335 = v198[582];
      if (v335 != 1)
        swift_bridgeObjectRelease(v335);
      v336 = v198[586];
      if (v336 != 1)
        swift_bridgeObjectRelease(v336);
      v337 = v198[590];
      if (v337 != 1)
        swift_bridgeObjectRelease(v337);
      v338 = v198[594];
      if (v338 != 1)
        swift_bridgeObjectRelease(v338);
      v339 = v198[598];
      if (v339 != 1)
        swift_bridgeObjectRelease(v339);
      v340 = v198[602];
      if (v340 != 1)
        swift_bridgeObjectRelease(v340);
      v341 = v198[606];
      if (v341 != 1)
        swift_bridgeObjectRelease(v341);
      v342 = v198[610];
      if (v342 != 1)
        swift_bridgeObjectRelease(v342);
      v343 = v198[614];
      if (v343 != 1)
        swift_bridgeObjectRelease(v343);
      swift_bridgeObjectRelease(v198[624]);
      swift_bridgeObjectRelease(v198[625]);
    }
    if (v198[728] != 1)
    {
      v344 = v198[626];
      if (v344 != 1)
        swift_bridgeObjectRelease(v344);
      v345 = v198[630];
      if (v345 != 1)
        swift_bridgeObjectRelease(v345);
      v346 = v198[634];
      if (v346 != 1)
        swift_bridgeObjectRelease(v346);
      v347 = v198[638];
      if (v347 != 1)
        swift_bridgeObjectRelease(v347);
      v348 = v198[642];
      if (v348 != 1)
        swift_bridgeObjectRelease(v348);
      v349 = v198[646];
      if (v349 != 1)
        swift_bridgeObjectRelease(v349);
      v350 = v198[650];
      if (v350 != 1)
        swift_bridgeObjectRelease(v350);
      v351 = v198[654];
      if (v351 != 1)
        swift_bridgeObjectRelease(v351);
      v352 = v198[658];
      if (v352 != 1)
        swift_bridgeObjectRelease(v352);
      v353 = v198[662];
      if (v353 != 1)
        swift_bridgeObjectRelease(v353);
      v354 = v198[666];
      if (v354 != 1)
        swift_bridgeObjectRelease(v354);
      v355 = v198[670];
      if (v355 != 1)
        swift_bridgeObjectRelease(v355);
      v356 = v198[674];
      if (v356 != 1)
        swift_bridgeObjectRelease(v356);
      v357 = v198[678];
      if (v357 != 1)
        swift_bridgeObjectRelease(v357);
      v358 = v198[682];
      if (v358 != 1)
        swift_bridgeObjectRelease(v358);
      v359 = v198[686];
      if (v359 != 1)
        swift_bridgeObjectRelease(v359);
      v360 = v198[690];
      if (v360 != 1)
        swift_bridgeObjectRelease(v360);
      v361 = v198[694];
      if (v361 != 1)
        swift_bridgeObjectRelease(v361);
      v362 = v198[698];
      if (v362 != 1)
        swift_bridgeObjectRelease(v362);
      v363 = v198[702];
      if (v363 != 1)
        swift_bridgeObjectRelease(v363);
      v364 = v198[706];
      if (v364 != 1)
        swift_bridgeObjectRelease(v364);
      v365 = v198[710];
      if (v365 != 1)
        swift_bridgeObjectRelease(v365);
      v366 = v198[714];
      if (v366 != 1)
        swift_bridgeObjectRelease(v366);
      v367 = v198[718];
      if (v367 != 1)
        swift_bridgeObjectRelease(v367);
      swift_bridgeObjectRelease(v198[728]);
      swift_bridgeObjectRelease(v198[729]);
    }
    swift_bridgeObjectRelease(v198[730]);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1000D35E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PendingActionContext(0) - 8) + 80);
  sub_1000CCCF4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1000D3628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D36B4, 0, 0);
}

uint64_t sub_1000D36B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v1, 24, 7);
  sub_1000D6044();
  v0[12] = v2;
  v3 = v2;
  v5 = v0[10];
  v4 = v0[11];
  v6 = v0[9];
  v8 = v0[4];
  v7 = v0[5];
  v10 = v0[2];
  v9 = v0[3];
  v11 = (_QWORD *)swift_allocObject(&unk_1006078B0, 56, 7);
  v0[13] = v11;
  v11[2] = v3;
  v11[3] = v8;
  v11[4] = v7;
  v11[5] = v10;
  v11[6] = v9;
  v12 = swift_allocObject(&unk_1006078D8, 32, 7);
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = sub_1000D5258;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 104);
  swift_retain(v3);
  swift_bridgeObjectRetain(v7);
  v15 = swift_bridgeObjectRetain(v9);
  v14(v4, v13, v6, v15);
  v16 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v11);
  v17 = (_QWORD *)swift_task_alloc(v16);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_1000D3888;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v17, v0[11], sub_10001E5CC, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_1000D3888()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v5 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 112);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_1000D3970;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 104);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_1000D392C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000D392C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 104));
  v2 = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  defaultLogger()(v2);
  DIPRecordError(_:message:log:)(v3, 0, 0xE000000000000000, v4);
  swift_errorRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 112) = v20;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 96) = a7;
  *(_BYTE *)(v8 + 312) = a5;
  *(_QWORD *)(v8 + 72) = a3;
  *(_QWORD *)(v8 + 80) = a4;
  *(_QWORD *)(v8 + 56) = a1;
  *(_QWORD *)(v8 + 64) = a2;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 120) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 136) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v8 + 144) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 152) = v12;
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v8 + 168) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 176) = v14;
  *(_QWORD *)(v8 + 184) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 192) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 200) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 208) = swift_task_alloc(v17);
  *(_QWORD *)(v8 + 216) = swift_task_alloc(v17);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633978) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 224) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 232) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v18);
  return swift_task_switch(sub_1000D3B4C, 0, 0);
}

uint64_t sub_1000D3B4C(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1[14];
  if (*(_QWORD *)(v2 + 16))
  {
    Hasher.init(_seed:)(&v46, *(_QWORD *)(v2 + 40));
    String.hash(into:)(&v46, 6645601, 0xE300000000000000);
    a1 = Hasher._finalize()();
    v3 = a1 & ~(-1 << *(_BYTE *)(v2 + 32));
    v4 = v2 + 56;
    if (((*(_QWORD *)(v2 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
      __asm { BR              X9 }
    if (*(_QWORD *)(v2 + 16))
    {
      Hasher.init(_seed:)(&v46, *(_QWORD *)(v2 + 40));
      String.hash(into:)(&v46, 7890291, 0xE300000000000000);
      a1 = Hasher._finalize()();
      v7 = a1 & ~(-1 << *(_BYTE *)(v2 + 32));
      if (((*(_QWORD *)(v4 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        __asm { BR              X9 }
      if (*(_QWORD *)(v2 + 16))
      {
        Hasher.init(_seed:)(&v46, *(_QWORD *)(v2 + 40));
        String.hash(into:)(&v46, 0x6574617473, 0xE500000000000000);
        a1 = Hasher._finalize()();
        v9 = a1 & ~(-1 << *(_BYTE *)(v2 + 32));
        if (((*(_QWORD *)(v4 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
          __asm { BR              X9 }
        if (*(_QWORD *)(v2 + 16))
        {
          Hasher.init(_seed:)(&v46, *(_QWORD *)(v2 + 40));
          String.hash(into:)(&v46, 1701011826, 0xE400000000000000);
          a1 = Hasher._finalize()();
          v42 = a1 & ~(-1 << *(_BYTE *)(v2 + 32));
          if (((*(_QWORD *)(v4 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
            __asm { BR              X9 }
        }
      }
    }
  }
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = v1[14];
    Hasher.init(_seed:)(&v46, *(_QWORD *)(v5 + 40));
    String.hash(into:)(&v46, 0x656E6F546E696B73, 0xE800000000000000);
    a1 = Hasher._finalize()();
    v6 = a1 & ~(-1 << *(_BYTE *)(v5 + 32));
    if (((*(_QWORD *)(v5 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
    if (*(_QWORD *)(v2 + 16))
    {
      Hasher.init(_seed:)(&v46, *(_QWORD *)(v5 + 40));
      String.hash(into:)(&v46, 0x6E69747465537861, 0xEA00000000007367);
      a1 = Hasher._finalize()();
      v8 = a1 & ~(-1 << *(_BYTE *)(v5 + 32));
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
        __asm { BR              X9 }
    }
  }
  v10 = v1[14];
  defaultLogger()(a1);
  v11 = swift_bridgeObjectRetain_n(v10, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = v1[27];
  v16 = v1[24];
  v17 = v1[25];
  v18 = v1[14];
  if (v14)
  {
    v44 = v1[25];
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v46 = v20;
    *(_DWORD *)v19 = 136315138;
    sub_1000D5208();
    v43 = v16;
    v21 = swift_bridgeObjectRetain(v18);
    v22 = Set.description.getter(v21);
    v24 = v23;
    swift_bridgeObjectRelease(v18);
    v1[6] = sub_1000E3AC8(v22, v24, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v19 + 4);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v18, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Biome-Fed Stats attempting to collect - %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v25 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v25(v15, v43);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1[14], 2);

    v25 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v25(v15, v16);
  }
  v1[32] = v25;
  v26 = type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject(v26, 24, 7);
  sub_1000BF344();
  v1[33] = v27;
  v28 = v27;
  v29 = v1[22];
  v45 = v1[23];
  v30 = v1[21];
  v31 = v1[14];
  v32 = v1[7];
  v33 = v1[8];
  v34 = swift_allocObject(&unk_100607860, 136, 7);
  v1[34] = v34;
  *(_QWORD *)(v34 + 16) = v28;
  *(_QWORD *)(v34 + 24) = v32;
  *(_QWORD *)(v34 + 32) = v33;
  *(_QWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0xE000000000000000;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 64) = 0xE000000000000000;
  *(_QWORD *)(v34 + 72) = 0;
  *(_BYTE *)(v34 + 80) = 1;
  *(_QWORD *)(v34 + 88) = 0;
  *(_QWORD *)(v34 + 96) = 0xE000000000000000;
  *(_QWORD *)(v34 + 104) = 0;
  *(_QWORD *)(v34 + 112) = 0xE000000000000000;
  *(_QWORD *)(v34 + 120) = v31;
  *(_QWORD *)(v34 + 128) = _swiftEmptyArrayStorage;
  v35 = swift_allocObject(&unk_100607888, 32, 7);
  v1[35] = v35;
  *(_QWORD *)(v35 + 16) = sub_1000D519C;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v29 + 104);
  swift_bridgeObjectRetain(v31);
  swift_retain(v28);
  v38 = swift_bridgeObjectRetain(v33);
  v37(v45, v36, v30, v38);
  v39 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v34);
  v40 = (_QWORD *)swift_task_alloc(v39);
  v1[36] = v40;
  *v40 = v1;
  v40[1] = sub_1000D4CE8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v40, v1[23], sub_1000D51E8, v35, (char *)&type metadata for () + 8);
}

void sub_1000D4C58()
{
  swift_bridgeObjectRelease(0xE400000000000000);
  JUMPOUT(0x1000D4C60);
}

uint64_t sub_1000D4CE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  v4 = v2[35];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
    swift_release(v4);
    v5 = sub_1000D4EF0;
  }
  else
  {
    v6 = v2[34];
    (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1000D4D94;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D4D94()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100633980 + dword_100633980);
  v1 = (_QWORD *)swift_task_alloc(unk_100633984);
  v0[38] = v1;
  *v1 = v0;
  v1[1] = sub_1000D4DF8;
  return v3(v0[12], v0[13], v0[7], v0[8]);
}

uint64_t sub_1000D4DF8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  return swift_task_switch(sub_1000D4E4C, 0, 0);
}

uint64_t sub_1000D4E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 264);
  swift_release(*(_QWORD *)(v0 + 272));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 192);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 152);
  _StringGuts.grow(_:)(55);
  v8._object = (void *)0x8000000100546390;
  v8._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v8);
  swift_getErrorValue(v2, v0 + 40, v0 + 16);
  v9._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.failedToPersistBiomeMetadata(_:), v25);
  v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v6, 0, v11, 0xD000000000000071, 0x80000001005462F0, 0xD00000000000006FLL, 0x80000001005463D0, 415);
  v12 = sub_100007F30();
  v13 = swift_allocError(v5, v12, 0, 0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v14, v4, v5);
  defaultLogger()(v15);
  DIPRecordError(_:message:log:)(v13, 0, 0xE000000000000000, v3);
  swift_errorRelease(v2);
  v28(v3, v27);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v4, v5);
  swift_errorRelease(v13);
  v16 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D5140()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 136, 7);
}

void sub_1000D519C()
{
  uint64_t v0;

  sub_1000CF530(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80), *(Swift::String_optional *)(v0 + 88), *(Swift::String_optional *)(v0 + 104), *(_QWORD *)(v0 + 120), *(void **)(v0 + 128));
}

uint64_t sub_1000D51E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000D5208()
{
  unint64_t result;

  result = qword_100633988;
  if (!qword_100633988)
  {
    result = swift_getWitnessTable(&unk_1005265DC, &type metadata for BiomeFedStatsField);
    atomic_store(result, (unint64_t *)&qword_100633988);
  }
  return result;
}

uint64_t sub_1000D524C()
{
  return sub_1000D5858((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1000D5258()
{
  uint64_t *v0;

  sub_1000CFAD4(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000D5278()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D529C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D52C8()
{
  uint64_t v0;

  sub_1000CEBC0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D52E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_1006339A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5328(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1000D534C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a16);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a19);
    swift_bridgeObjectRelease(a21);
    swift_bridgeObjectRelease(a23);
    swift_bridgeObjectRelease(a25);
    swift_bridgeObjectRelease(a27);
    swift_bridgeObjectRelease(a30);
    swift_bridgeObjectRelease(a32);
    swift_bridgeObjectRelease(a34);
    swift_bridgeObjectRelease(a36);
    swift_bridgeObjectRelease(a38);
    return swift_bridgeObjectRelease(a40);
  }
  return result;
}

void sub_1000D5490()
{
  uint64_t v0;

  sub_10012DD20(*(_BYTE *)(v0 + 16));
}

void sub_1000D549C()
{
  uint64_t v0;

  sub_1000CCAC4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000D54BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D54E8()
{
  uint64_t v0;

  sub_1000CF148(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000D5504()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000D5518()
{
  uint64_t v0;

  sub_1000CF378(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D5534()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[13]);
    swift_bridgeObjectRelease(v0[15]);
    swift_bridgeObjectRelease(v0[17]);
    swift_bridgeObjectRelease(v0[19]);
    swift_bridgeObjectRelease(v0[20]);
    swift_bridgeObjectRelease(v0[22]);
    swift_bridgeObjectRelease(v0[24]);
    swift_bridgeObjectRelease(v0[26]);
    swift_bridgeObjectRelease(v0[28]);
    swift_bridgeObjectRelease(v0[31]);
    swift_bridgeObjectRelease(v0[33]);
    swift_bridgeObjectRelease(v0[35]);
    swift_bridgeObjectRelease(v0[37]);
    swift_bridgeObjectRelease(v0[39]);
    swift_bridgeObjectRelease(v0[41]);
  }
  return swift_deallocObject(v0, 336, 7);
}

double sub_1000D55F0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_100520950;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  return result;
}

uint64_t sub_1000D562C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D5660()
{
  uint64_t v0;

  return sub_1000CC208(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D567C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(a1 + 272);
  v8 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312));
  return a1;
}

uint64_t sub_1000D5708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a40);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a19);
    swift_bridgeObjectRetain(a21);
    swift_bridgeObjectRetain(a23);
    swift_bridgeObjectRetain(a25);
    swift_bridgeObjectRetain(a27);
    swift_bridgeObjectRetain(a30);
    swift_bridgeObjectRetain(a32);
    swift_bridgeObjectRetain(a34);
    swift_bridgeObjectRetain(a36);
    return swift_bridgeObjectRetain(a38);
  }
  return result;
}

uint64_t sub_1000D584C()
{
  return sub_1000D5858((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000D5858(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_bridgeObjectRelease(v1[4]);
  a1(v1[6]);
  return swift_deallocObject(v1, 56, 7);
}

void sub_1000D5898()
{
  uint64_t v0;

  sub_1000CD6E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t destroy for IdentityBiomeMetadata(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[37]);
  return swift_bridgeObjectRelease(a1[39]);
}

uint64_t initializeWithCopy for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v27 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v27;
  v26 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v26;
  v25 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v25;
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v23;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 168);
  v22 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v10;
  v11 = *(_QWORD *)(a2 + 184);
  v21 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 184) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  v20 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v20;
  *(_QWORD *)(a1 + 200) = v12;
  v24 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v24;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v13 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v13;
  v14 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v14;
  v15 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v16;
  v17 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v17;
  v19 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v19;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t assignWithCopy for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a2 + 232);
  v32 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v33 = *(_QWORD *)(a2 + 248);
  v34 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v35 = *(_QWORD *)(a2 + 264);
  v36 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v37 = *(_QWORD *)(a2 + 280);
  v38 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v39 = *(_QWORD *)(a2 + 296);
  v40 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v41 = *(_QWORD *)(a2 + 312);
  v42 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  return a1;
}

void *initializeWithTake for IdentityBiomeMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for IdentityBiomeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
  v18 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 192);
  v24 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 208);
  v26 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v25;
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 232);
  v28 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 248);
  v30 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a2 + 264);
  v32 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(a2 + 280);
  v34 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(a2 + 296);
  v36 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v35;
  swift_bridgeObjectRelease(v36);
  v37 = *(_QWORD *)(a2 + 312);
  v38 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v37;
  swift_bridgeObjectRelease(v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityBiomeMetadata(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 320))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityBiomeMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 320) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 320) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityBiomeMetadata()
{
  return &type metadata for IdentityBiomeMetadata;
}

void sub_1000D6044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _OWORD v12[2];
  uint64_t v13;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v3);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v4 = qword_1006702A0;
  v5 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 52;
  os_unfair_lock_lock(v5 + 52);
  sub_100139D14(v6, v4, v12);
  os_unfair_lock_unlock(v7);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    v8 = v13;
    swift_retain(v13);
    v9 = sub_10001D410(v12);
    v10 = (void *)AsyncCoreDataStore.container.getter(v9);
    swift_release(v8);
    v11 = objc_msgSend(v10, "newBackgroundContext");

    *(_QWORD *)(v2 + 16) = v11;
  }
}

id sub_1000D6288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[8];
  uint64_t v35;
  id v36;
  unint64_t v37;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + 16);
  v36 = 0;
  v6 = objc_msgSend(v5, "save:", &v36);
  v7 = v36;
  if ((v6 & 1) != 0)
    return v36;
  v9 = v36;
  v10 = _convertNSErrorToError(_:)(v7);

  swift_willThrow(v11);
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  v12._object = (void *)0x8000000100544F20;
  v12._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v12);
  v35 = v10;
  v13 = sub_100004828((uint64_t *)&unk_100633430);
  _print_unlocked<A, B>(_:_:)(&v35, &v36, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v14 = v36;
  v15 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
  v16 = sub_100004828((uint64_t *)&unk_1006325A0);
  v17 = sub_100004828((uint64_t *)&unk_100633440);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10051FFB0;
  v23 = (uint64_t *)(v22 + v21 + *(int *)(v17 + 48));
  v24 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v25 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22 + v21, v24, v25);
  swift_getErrorValue(v10, v34, v33);
  v26 = v33[1];
  v27 = v33[2];
  swift_errorRetain(v10);
  v28 = dispatch thunk of Error._code.getter(v26, v27);
  v23[3] = (uint64_t)&type metadata for Int;
  *v23 = v28;
  v29 = sub_10011D314(v22);
  v30 = type metadata accessor for DIPError(0);
  v31 = sub_100007F30();
  swift_allocError(v30, v31, 0, 0);
  v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v14, v15, v10, v4, 0, v29, 0xD000000000000060, 0x80000001005468E0, 0x292865766173, 0xE600000000000000, 26);
  swift_willThrow(v32);
  return (id)swift_errorRelease(v10);
}

uint64_t sub_1000D6570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v5 = *(void **)(v2 + 16);
  v6 = (_QWORD *)swift_allocObject(&unk_100607B18, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = &v14;
  v7 = swift_allocObject(&unk_100607B40, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000D8F2C;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000C00CC;
  v13 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026DC8;
  aBlock[3] = &unk_100607B58;
  v8 = _Block_copy(aBlock);
  v9 = v13;
  swift_retain(a2);
  swift_retain(v7);
  swift_release(v9);
  objc_msgSend(v5, "performBlockAndWait:", v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 96, 54, 50, 1);
  result = swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v14)
    {
      v11 = swift_errorRetain(v14);
      swift_willThrow(v11);
      swift_errorRelease(v14);
    }
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000D66E8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = __chkstk_darwin(v2);
  return a1(v3);
}

void sub_1000D6840(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  sub_1000C000C();
  v6 = sub_100004828((uint64_t *)&unk_100636410);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10051FFB0;
  v8 = IdentityTarget.rawValue.getter(a1);
  *(_QWORD *)(v7 + 56) = &type metadata for Int64;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v7 + 32) = v8;
  v9 = (void *)NSPredicate.init(format:_:)(0x3D20746567726174, 0xEC0000006425203DLL, v7);
  objc_msgSend(v5, "setPredicate:", v9);

  v10 = sub_100004828(&qword_1006332D0);
  v11 = NSManagedObjectContext.fetch<A>(_:)(v5, v10);
  if (v1)
  {

  }
  else
  {
    v12 = v11;
    sub_100458ADC(v11);

    swift_bridgeObjectRelease(v12);
  }
}

void sub_1000D69B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithEntityName:", v6);

  sub_1000C000C();
  v8 = sub_100004828((uint64_t *)&unk_100636410);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000C0048();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v10 = (void *)NSPredicate.init(format:_:)(0xD000000000000017, 0x8000000100544E10, v9);
  objc_msgSend(v7, "setPredicate:", v10);

  v11 = sub_100004828(&qword_1006332D0);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v7, v11);
  if (v2)
  {

  }
  else
  {
    v13 = v12;
    sub_100458ADC(v12);

    swift_bridgeObjectRelease(v13);
  }
}

void sub_1000D6B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000D7068(a1, a2, a3, 0xD000000000000010, 0x8000000100546B80);
}

void sub_1000D6B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v7 = objc_allocWithZone((Class)NSFetchRequest);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithEntityName:", v8);

  sub_1000C000C();
  v10 = sub_100004828((uint64_t *)&unk_100636410);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v12 = sub_1000C0048();
  *(_QWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = (void *)NSPredicate.init(format:_:)(0xD000000000000010, 0x8000000100546B80, v11);
  v14 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = v12;
  v15 = v9;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  v16 = (void *)NSPredicate.init(format:_:)(0xD000000000000012, 0x8000000100546BA0, v14);
  v17 = sub_100004828(&qword_100640C30);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100524030;
  *(_QWORD *)(v18 + 32) = v13;
  *(_QWORD *)(v18 + 40) = v16;
  v32 = v18;
  specialized Array._endMutation()(v18);
  v19 = v13;
  v20 = v16;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  v22 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  objc_msgSend(v15, "setPredicate:", v22);
  v23 = sub_100004828(&qword_1006332D0);
  v24 = NSManagedObjectContext.fetch<A>(_:)(v15, v23);
  if (v31)
  {

    return;
  }
  v25 = v24;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v28 = v24;
    else
      v28 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v25);
    if (v29)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease(v25);

    return;
  }
  if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_5:
  if ((v25 & 0xC000000000000001) != 0)
  {
    v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v26 = *(_QWORD *)(v25 + 32);
    swift_unknownObjectRetain(v26);
  }

  swift_bridgeObjectRelease(v25);
  v27 = type metadata accessor for StoredProofingSession(0);
  if (!swift_dynamicCastClass(v26, v27))
    swift_unknownObjectRelease(v26);
}

void sub_1000D6E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithEntityName:", v6);

  sub_1000C000C();
  v8 = sub_100004828((uint64_t *)&unk_100636410);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000C0048();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v10 = (void *)NSPredicate.init(format:_:)(0xD000000000000010, 0x8000000100546B80, v9);
  objc_msgSend(v7, "setPredicate:", v10);
  v11 = sub_100004828(&qword_1006332D0);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v7, v11);
  if (v2)
  {

  }
  else
  {
    v13 = v12;
    sub_100458ADC(v12);

    swift_bridgeObjectRelease(v13);
  }
}

void sub_1000D7010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000D7068(a1, a2, a3, 0xD000000000000017, 0x8000000100544E10);
}

void sub_1000D703C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000D7068(a1, a2, a3, 0xD00000000000001ALL, 0x8000000100546B60);
}

void sub_1000D7068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithEntityName:", v11);

  sub_1000C000C();
  v13 = sub_100004828((uint64_t *)&unk_100636410);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_1000C0048();
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v15 = (void *)NSPredicate.init(format:_:)(a4, a5, v14);
  v16 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10051FFB0;
  v17 = IdentityTarget.rawValue.getter(a3);
  *(_QWORD *)(v16 + 56) = &type metadata for Int64;
  *(_QWORD *)(v16 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v16 + 32) = v17;
  v18 = (void *)NSPredicate.init(format:_:)(0x3D20746567726174, 0xEC0000006425203DLL, v16);
  v19 = sub_100004828(&qword_100640C30);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100524030;
  *(_QWORD *)(v20 + 32) = v15;
  *(_QWORD *)(v20 + 40) = v18;
  v33 = v20;
  specialized Array._endMutation()(v20);
  v21 = v15;
  v22 = v18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v33);
  v24 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  objc_msgSend(v12, "setPredicate:", v24);
  v25 = sub_100004828(&qword_1006332D0);
  v26 = NSManagedObjectContext.fetch<A>(_:)(v12, v25);
  if (v32)
  {

    return;
  }
  v27 = v26;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v30 = v26;
    else
      v30 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v27);
    if (v31)
      goto LABEL_5;
LABEL_14:
    swift_bridgeObjectRelease(v27);

    return;
  }
  if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_5:
  if ((v27 & 0xC000000000000001) != 0)
  {
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
  }
  else
  {
    if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v28 = *(_QWORD *)(v27 + 32);
    swift_unknownObjectRetain(v28);
  }

  swift_bridgeObjectRelease(v27);
  v29 = type metadata accessor for StoredProofingSession(0);
  if (!swift_dynamicCastClass(v28, v29))
    swift_unknownObjectRelease(v28);
}

uint64_t sub_1000D73A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v4 = v2;
  v7 = type metadata accessor for StoredProofingSession(0);
  v8 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000C000C();
  v9 = sub_100004828((uint64_t *)&unk_100636410);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_1000C0048();
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD00000000000001ALL, 0x8000000100546B60, v10);
  objc_msgSend(v8, "setPredicate:", v11);
  result = NSManagedObjectContext.fetch<A>(_:)(v8, v7);
  if (v3)
  {

    return v4;
  }
  v13 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v15 = result;
    else
      v15 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v4 = _CocoaArrayWrapper.endIndex.getter(v15);
    result = swift_bridgeObjectRelease(v13);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:

      swift_bridgeObjectRelease(v13);
      return v4;
    }
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
LABEL_8:
    v4 = (uint64_t)v14;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D7548(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  _QWORD v56[3];
  char v57[8];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  objc_msgSend(v10, "setFetchLimit:", 1);
  sub_1000C000C();
  v11 = sub_100004828((uint64_t *)&unk_100636410);
  v12 = swift_allocObject(v11, 72, 7);
  v54 = xmmword_10051FFB0;
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000C0048();
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = (void *)NSPredicate.init(format:_:)(0x49676E6972696170, 0xEF4025203D3D2044, v12);
  objc_msgSend(v10, "setPredicate:", v13);

  v14 = sub_100004828(&qword_1006332D0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v10, v14);
  if (v2)
  {

    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v16._countAndFlagsBits = 0xD000000000000037;
    v16._object = (void *)0x8000000100546AF0;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x3A726F727265203ALL;
    v18._object = (void *)0xE900000000000020;
    String.append(_:)(v18);
    v60 = v2;
    v19 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v60, &v58, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = v58;
    v21 = v59;
    v22 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v55, enum case for DIPError.Code.coreDataError(_:), v5);
    v23 = sub_100004828((uint64_t *)&unk_1006325A0);
    v24 = sub_100004828((uint64_t *)&unk_100633440);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(_QWORD *)(v25 + 72);
    v27 = *(unsigned __int8 *)(v25 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
    *(_OWORD *)(v29 + 16) = v54;
    v30 = v29 + v28;
    v31 = (uint64_t *)(v29 + v28 + *(int *)(v24 + 48));
    v32 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v33 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v30, v32, v33);
    swift_getErrorValue(v2, v57, v56);
    v34 = v56[1];
    v35 = v56[2];
    swift_errorRetain(v2);
    v36 = dispatch thunk of Error._code.getter(v34, v35);
    v31[3] = (uint64_t)&type metadata for Int;
    *v31 = v36;
    v37 = sub_10011D314(v29);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100007F30();
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v20, v21, v2, v22, 0, v37, 0xD000000000000060, 0x80000001005468E0, 0xD000000000000020, 0x8000000100546B30, 199);
    swift_willThrow(v40);
    swift_errorRelease(v2);
    return v37;
  }
  v41 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v50 = v15;
    else
      v50 = v15 & 0xFFFFFFFFFFFFFF8;
    v51 = type metadata accessor for StoredPrearmTrust(0);
    swift_bridgeObjectRetain(v41);
    v52 = _bridgeCocoaArray<A>(_:)(v50, v51);
    result = swift_bridgeObjectRelease_n(v41, 2);
    v41 = v52;
  }
  else
  {
    v42 = v15 & 0xFFFFFFFFFFFFFF8;
    v43 = swift_bridgeObjectRetain(v15);
    v44 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v43);
    v45 = type metadata accessor for StoredPrearmTrust(0);
    if (swift_dynamicCastMetatype(v44, v45) || (v48 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_5:
      result = swift_bridgeObjectRelease(v41);
    }
    else
    {
      v49 = (_QWORD *)(v42 + 32);
      while (swift_dynamicCastClass(*v49, v45))
      {
        ++v49;
        if (!--v48)
          goto LABEL_5;
      }
      result = swift_bridgeObjectRelease(v41);
      v41 = v42 | 1;
    }
  }
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v53 = v41;
    else
      v53 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v37 = _CocoaArrayWrapper.endIndex.getter(v53);
    result = swift_bridgeObjectRelease(v41);
    if (!v37)
      goto LABEL_12;
  }
  else
  {
    v37 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v37)
    {
LABEL_12:
      swift_bridgeObjectRelease(v41);

      return v37;
    }
  }
  if ((v41 & 0xC000000000000001) != 0)
  {
    v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v47 = *(id *)(v41 + 32);
LABEL_11:
    v37 = (unint64_t)v47;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_1000D7A7C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000D7548(a1, a2);
  if (v3)
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v11._countAndFlagsBits = 0xD00000000000003FLL;
    v11._object = (void *)0x8000000100546A80;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0x203A726F72726520;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    v39 = v3;
    v14 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v39, &v37, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15 = v37;
    v16 = v38;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.coreDataError(_:), v6);
    v17 = sub_100004828((uint64_t *)&unk_1006325A0);
    v18 = sub_100004828((uint64_t *)&unk_100633440);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v17, v22 + v20, v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_10051FFB0;
    v24 = (uint64_t *)(v23 + v22 + *(int *)(v18 + 48));
    v25 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v26 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v23 + v22, v25, v26);
    swift_getErrorValue(v3, v36, v35);
    v27 = v35[1];
    v28 = v35[2];
    swift_errorRetain(v3);
    v29 = dispatch thunk of Error._code.getter(v27, v28);
    v24[3] = (uint64_t)&type metadata for Int;
    *v24 = v29;
    v30 = sub_10011D314(v23);
    v31 = type metadata accessor for DIPError(0);
    v32 = sub_100007F30();
    swift_allocError(v31, v32, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v15, v16, v3, v9, 0, v30, 0xD000000000000060, 0x80000001005468E0, 0xD000000000000021, 0x8000000100546AC0, 210);
    swift_willThrow(v33);
    swift_errorRelease(v3);
  }
  else
  {
    v34 = (void *)v10;
    if (v10)
    {
      objc_msgSend(*(id *)(v2 + 16), "deleteObject:", v10);

    }
  }
}

uint64_t sub_1000D7D60(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  _QWORD v56[3];
  char v57[8];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  objc_msgSend(v10, "setFetchLimit:", 1);
  sub_1000C000C();
  v11 = sub_100004828((uint64_t *)&unk_100636410);
  v12 = swift_allocObject(v11, 72, 7);
  v54 = xmmword_10051FFB0;
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000C0048();
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = (void *)NSPredicate.init(format:_:)(0xD000000000000017, 0x8000000100544E10, v12);
  objc_msgSend(v10, "setPredicate:", v13);

  v14 = sub_100004828(&qword_1006332D0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v10, v14);
  if (v2)
  {

    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v16._countAndFlagsBits = 0xD000000000000038;
    v16._object = (void *)0x8000000100546A10;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x3A726F727265203ALL;
    v18._object = (void *)0xE900000000000020;
    String.append(_:)(v18);
    v60 = v2;
    v19 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v60, &v58, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = v58;
    v21 = v59;
    v22 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v55, enum case for DIPError.Code.coreDataError(_:), v5);
    v23 = sub_100004828((uint64_t *)&unk_1006325A0);
    v24 = sub_100004828((uint64_t *)&unk_100633440);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(_QWORD *)(v25 + 72);
    v27 = *(unsigned __int8 *)(v25 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
    *(_OWORD *)(v29 + 16) = v54;
    v30 = v29 + v28;
    v31 = (uint64_t *)(v29 + v28 + *(int *)(v24 + 48));
    v32 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v33 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v30, v32, v33);
    swift_getErrorValue(v2, v57, v56);
    v34 = v56[1];
    v35 = v56[2];
    swift_errorRetain(v2);
    v36 = dispatch thunk of Error._code.getter(v34, v35);
    v31[3] = (uint64_t)&type metadata for Int;
    *v31 = v36;
    v37 = sub_10011D314(v29);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100007F30();
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v20, v21, v2, v22, 0, v37, 0xD000000000000060, 0x80000001005468E0, 0xD00000000000002ELL, 0x8000000100546A50, 233);
    swift_willThrow(v40);
    swift_errorRelease(v2);
    return v37;
  }
  v41 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v50 = v15;
    else
      v50 = v15 & 0xFFFFFFFFFFFFFF8;
    v51 = type metadata accessor for StoredProofingBiomeData(0);
    swift_bridgeObjectRetain(v41);
    v52 = _bridgeCocoaArray<A>(_:)(v50, v51);
    result = swift_bridgeObjectRelease_n(v41, 2);
    v41 = v52;
  }
  else
  {
    v42 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v44 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v43);
    v45 = type metadata accessor for StoredProofingBiomeData(0);
    if (swift_dynamicCastMetatype(v44, v45) || (v48 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_5:
      result = swift_bridgeObjectRelease(v41);
    }
    else
    {
      v49 = (_QWORD *)(v42 + 32);
      while (swift_dynamicCastClass(*v49, v45))
      {
        ++v49;
        if (!--v48)
          goto LABEL_5;
      }
      result = swift_bridgeObjectRelease(v41);
      v41 = v42 | 1;
    }
  }
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v53 = v41;
    else
      v53 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v37 = _CocoaArrayWrapper.endIndex.getter(v53);
    result = swift_bridgeObjectRelease(v41);
    if (!v37)
      goto LABEL_12;
  }
  else
  {
    v37 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v37)
    {
LABEL_12:
      swift_bridgeObjectRelease(v41);

      return v37;
    }
  }
  if ((v41 & 0xC000000000000001) != 0)
  {
    v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v47 = *(id *)(v41 + 32);
LABEL_11:
    v37 = (unint64_t)v47;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D828C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  char v38[8];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithEntityName:", v6);

  v8 = sub_100004828(&qword_1006332D0);
  v9 = NSManagedObjectContext.fetch<A>(_:)(v7, v8);
  if (v0)
  {

    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v10._countAndFlagsBits = 0xD000000000000029;
    v10._object = (void *)0x80000001005469C0;
    String.append(_:)(v10);
    v41 = v0;
    v11 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v41, &v39, v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12 = v40;
    v36 = v39;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    v13 = sub_100004828((uint64_t *)&unk_1006325A0);
    v14 = sub_100004828((uint64_t *)&unk_100633440);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(v13, v18 + v16, v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_10051FFB0;
    v20 = (uint64_t *)(v19 + v18 + *(int *)(v14 + 48));
    v21 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v22 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v19 + v18, v21, v22);
    swift_getErrorValue(v0, v38, v37);
    v23 = v37[1];
    v24 = v37[2];
    swift_errorRetain(v0);
    v25 = dispatch thunk of Error._code.getter(v23, v24);
    v20[3] = (uint64_t)&type metadata for Int;
    *v20 = v25;
    v26 = sub_10011D314(v19);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_100007F30();
    swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v36, v12, v0, v4, 0, v26, 0xD000000000000060, 0x80000001005468E0, 0xD000000000000018, 0x80000001005469F0, 260);
    swift_willThrow(v29);
    swift_errorRelease(v0);
    return (uint64_t)v4;
  }
  v30 = v9;
  v31 = (uint64_t)sub_1004589D8(v9);
  result = swift_bridgeObjectRelease(v30);
  if (!v31)
  {

    return 0;
  }
  if ((unint64_t)v31 >> 62)
  {
    if (v31 >= 0)
      v34 = v31 & 0xFFFFFFFFFFFFFF8;
    else
      v34 = v31;
    swift_bridgeObjectRetain(v31);
    v4 = (char *)_CocoaArrayWrapper.endIndex.getter(v34);
    result = swift_bridgeObjectRelease(v31);
    if (!v4)
      goto LABEL_10;
  }
  else
  {
    v4 = *(char **)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_10:
      swift_bridgeObjectRelease(v31);

      return (uint64_t)v4;
    }
  }
  if ((v31 & 0xC000000000000001) != 0)
  {
    v33 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v33 = (char *)*(id *)(v31 + 32);
LABEL_9:
    v4 = v33;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D8630(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSString v47;
  uint64_t v48;
  uint8_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v52 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(char **)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v48 - v12;
  v14 = a1;
  v15 = a1;
  v16 = (unint64_t)a2;
  v17 = a2;
  v18 = v2;
  v19 = v54;
  v20 = sub_1000D8B14(v15, v17);
  if (v19)
  {
    v21 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v53, enum case for DIPError.Code.internalError(_:), v52);
    swift_errorRetain(v19);
    v22 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_100007F30();
    swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v21, 0, v22, 0xD000000000000060, 0x80000001005468E0, 0xD000000000000036, 0x8000000100546980, 283);
    swift_willThrow(v25);
    return swift_errorRelease(v19);
  }
  else
  {
    v52 = v14;
    v53 = v8;
    v54 = v7;
    v51 = 0;
    if (v20)
    {
      v27 = v20;
      v28 = v13;
      defaultLogger()(v20);
      v29 = swift_bridgeObjectRetain_n(v16, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.debug.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v57 = v33;
        *(_DWORD *)v32 = 136315138;
        swift_bridgeObjectRetain(v16);
        v55 = sub_1000E3AC8(v52, v16, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v32 + 4);
        swift_bridgeObjectRelease_n(v16, 3);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Randomized stored background activity exists with identifier %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v16, 2);
      }
      (*((void (**)(char *, uint64_t))v53 + 1))(v28, v54);
      return v27;
    }
    else
    {
      v34 = v11;
      defaultLogger()(0);
      v35 = v16;
      v36 = swift_bridgeObjectRetain_n(v16, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter(v37);
      v39 = os_log_type_enabled(v37, v38);
      v41 = v52;
      v40 = v53;
      if (v39)
      {
        v42 = swift_slowAlloc(12, -1);
        v50 = v34;
        v43 = (uint8_t *)v42;
        v44 = swift_slowAlloc(32, -1);
        v57 = v44;
        *(_DWORD *)v43 = 136315138;
        v49 = v43 + 4;
        swift_bridgeObjectRetain(v35);
        v55 = sub_1000E3AC8(v41, v35, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v49);
        swift_bridgeObjectRelease_n(v35, 3);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Creating new stored randomized background activity for identifier %s", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        (*((void (**)(char *, uint64_t))v40 + 1))(v50, v54);
      }
      else
      {

        swift_bridgeObjectRelease_n(v35, 2);
        (*((void (**)(char *, uint64_t))v40 + 1))(v34, v54);
      }
      v45 = type metadata accessor for StoredRandomizedBackgroundActivity(0);
      v46 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v45)), "initWithContext:", *(_QWORD *)(v18 + 16));
      v47 = String._bridgeToObjectiveC()();
      objc_msgSend(v46, "setIdentifier:", v47);

      return (uint64_t)v46;
    }
  }
}

uint64_t sub_1000D8B14(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[3];
  uint64_t v42;
  unint64_t v43;
  char v44[8];

  v39 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v40 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredRandomizedBackgroundActivity(0);
  v8 = (void *)static StoredRandomizedBackgroundActivity.fetchRequest()();
  objc_msgSend(v8, "setFetchLimit:", 1);
  sub_1000C000C();
  v9 = sub_100004828((uint64_t *)&unk_100636410);
  v10 = swift_allocObject(v9, 72, 7);
  v38 = xmmword_10051FFB0;
  *(_OWORD *)(v10 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_1000C0048();
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD000000000000010, 0x8000000100546880, v10);
  objc_msgSend(v8, "setPredicate:", v11);

  result = NSManagedObjectContext.fetch<A>(_:)(v8, v7);
  if (v2)
  {

    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v13._countAndFlagsBits = 0xD00000000000003DLL;
    v13._object = (void *)0x80000001005468A0;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1;
    v14._object = a2;
    String.append(_:)(v14);
    v15 = v42;
    v16 = v43;
    v17 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v40, enum case for DIPError.Code.coreDataError(_:), v39);
    v18 = sub_100004828((uint64_t *)&unk_1006325A0);
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject(v18, v23 + v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = v38;
    v25 = (uint64_t *)(v24 + v23 + *(int *)(v19 + 48));
    v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v27 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v24 + v23, v26, v27);
    swift_getErrorValue(v2, v44, v41);
    v28 = v41[1];
    v29 = v41[2];
    swift_errorRetain(v2);
    v30 = dispatch thunk of Error._code.getter(v28, v29);
    v25[3] = (uint64_t)&type metadata for Int;
    *v25 = v30;
    v31 = sub_10011D314(v24);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_100007F30();
    swift_allocError(v32, v33, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v15, v16, v2, v17, 0, v31, 0xD000000000000060, 0x80000001005468E0, 0xD00000000000002ELL, 0x8000000100546950, 296);
    swift_willThrow(v34);
    swift_errorRelease(v2);
    return v32;
  }
  v35 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v37 = result;
    else
      v37 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v32 = _CocoaArrayWrapper.endIndex.getter(v37);
    result = swift_bridgeObjectRelease(v35);
    if (!v32)
      goto LABEL_9;
  }
  else
  {
    v32 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v32)
    {
LABEL_9:
      swift_bridgeObjectRelease(v35);

      return v32;
    }
  }
  if ((v35 & 0xC000000000000001) != 0)
  {
    v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v35);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v36 = *(id *)(v35 + 32);
LABEL_8:
    v32 = (uint64_t)v36;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingDataContext()
{
  return objc_opt_self(_TtC8coreidvd27IdentityProofingDataContext);
}

uint64_t sub_1000D8F08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D8F2C()
{
  uint64_t v0;

  return sub_1000D66E8(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1000D8F38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D8F58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D8F60()
{
  __int128 *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v1 = sub_100004828(&qword_100640CA0);
  v2 = (_OWORD *)swift_allocObject(v1, 96, 7);
  v4 = v0[1];
  v16 = *v0;
  v3 = v16;
  v2[1] = xmmword_1005208B0;
  v2[2] = v3;
  v5 = v0[2];
  v6 = v0[3];
  v14 = v4;
  v15 = v5;
  v2[3] = v5;
  v2[4] = v4;
  v13 = v6;
  v2[5] = v6;
  sub_1000DB7AC((uint64_t)&v16);
  sub_1000DB7AC((uint64_t)&v15);
  sub_1000DB7AC((uint64_t)&v14);
  sub_1000DB7AC((uint64_t)&v13);
  v7 = sub_100004828(&qword_1006368D0);
  v8 = sub_1000DB7D4();
  BidirectionalCollection<>.joined(separator:)(47, 0xE100000000000000, v7, v8);
  v10 = v9;
  swift_bridgeObjectRelease(v2);
  countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease(v10);
  return countAndFlagsBits;
}

uint64_t sub_1000D9050()
{
  int *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_1000352D8((uint64_t)v0, qword_100633B68);
  v1 = (_QWORD *)sub_1000352C0((uint64_t)v0, (uint64_t)qword_100633B68);
  v2 = (_QWORD *)((char *)v1 + v0[6]);
  *v2 = 0x3FF0000000000000;
  v3 = enum case for DIPBackoffStrategy.exponential(_:);
  v4 = type metadata accessor for DIPBackoffStrategy(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  *v1 = 0x4024000000000000;
  v1[1] = 3;
  *((_BYTE *)v1 + v0[7]) = 0;
  *((_BYTE *)v1 + v0[8]) = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_1000D910C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Response;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for KeyRevocationList(0);
  v3[7] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v5);
  v3[9] = swift_task_alloc(v5);
  v6 = type metadata accessor for Milestone(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Response = type metadata accessor for KRLWebService.FetchResponse(0);
  v3[13] = Response;
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(Response - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v3[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[16] = v10;
  v3[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v3[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[20] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v14);
  v3[22] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000D9248, 0, 0);
}

uint64_t sub_1000D9248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 48);
  static DaemonSignposts.KRL.fetchRevocationList.getter();
  DIPSignpost.init(_:)(v1);
  v6 = v5 + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider;
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider);
  *(_QWORD *)(v0 + 184) = v7;
  v8 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v0 + 192) = v8;
  v9 = dispatch thunk of static DateProvider.now.getter(v7, v8);
  *(double *)(v0 + 200) = Date.timeIntervalSince1970.getter(v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 208) = v10;
  v10(v2, v3);
  v11 = (_QWORD *)swift_task_alloc(dword_100633BDC);
  *(_QWORD *)(v0 + 216) = v11;
  *v11 = v0;
  v11[1] = sub_1000D9314;
  return sub_1000D9B44(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D9314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000D99D8;
  else
    v3 = sub_1000D9378;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D9378()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v8 = dispatch thunk of static DateProvider.now.getter(v3, v2);
  *(double *)(v0 + 232) = Date.timeIntervalSince1970.getter(v8);
  v1(v4, v5);
  v9 = *(int *)(v7 + 28);
  *(_DWORD *)(v0 + 280) = v9;
  if (*(_BYTE *)(v6 + v9) == 1)
  {
    if (qword_10062F638 != -1)
      swift_once(&qword_10062F638, sub_1004FE13C);
    v10 = qword_100670980;
  }
  else
  {
    if (qword_10062F630 != -1)
      swift_once(&qword_10062F630, sub_1004FE108);
    v10 = qword_100670968;
  }
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = sub_1000352C0(v13, (uint64_t)v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16._countAndFlagsBits = 0xD000000000000020;
  v16._object = (void *)0x8000000100546CF0;
  object = NSUserDefaults.internalString(forKey:)(v16).value._object;

  if (object)
  {
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(int *)(*(_QWORD *)(v0 + 104) + 24);
    v20 = *(id *)(v18 + v19);
    v21 = sub_1004A773C(0xD000000000000019, 0x8000000100546D20);

    swift_bridgeObjectRelease(object);
    if (v21)
    {

      *(_QWORD *)(v18 + v19) = v21;
    }
  }
  v22 = sub_100139588();
  if (v23 >> 60 != 15)
  {
    v24 = v22;
    v25 = v23;
    v26 = *(_QWORD *)(v0 + 112) + *(int *)(*(_QWORD *)(v0 + 104) + 20);
    v22 = sub_100007F8C(*(_QWORD *)v26, *(_QWORD *)(v26 + 8));
    *(_QWORD *)v26 = v24;
    *(_QWORD *)(v26 + 8) = v25;
  }
  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v29 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 144);
  v33 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 120);
  v34 = *(_QWORD *)(v0 + 104);
  static DaemonSignposts.KRL.processResponse.getter(v22);
  DIPSignpost.init(_:)(v30);
  v35 = dispatch thunk of static DateProvider.now.getter(v29, v28);
  *(double *)(v0 + 240) = Date.timeIntervalSince1970.getter(v35);
  v27(v31, v32);
  v36 = *(int *)(v34 + 20);
  *(_DWORD *)(v0 + 284) = v36;
  v37 = (uint64_t *)(v33 + v36);
  v38 = *v37;
  *(_QWORD *)(v0 + 248) = *v37;
  v39 = v37[1];
  *(_QWORD *)(v0 + 256) = v39;
  sub_100022948(v38, v39);
  v40 = (_QWORD *)swift_task_alloc(dword_100633BE4);
  *(_QWORD *)(v0 + 264) = v40;
  *v40 = v0;
  v40[1] = sub_1000D9648;
  return sub_1000DA810(*(_QWORD *)(v0 + 72), v38, v39);
}

uint64_t sub_1000D9648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  sub_100007F8C(v4, v3);
  if (v0)
    v5 = sub_1000D9A7C;
  else
    v5 = sub_1000D96C4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D96C4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  Class isa;
  id v19;
  id v20;
  void *v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(int *)(v0 + 280);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v8 = dispatch thunk of static DateProvider.now.getter(v4, v3);
  v9 = Date.timeIntervalSince1970.getter(v8);
  v2(v5, v6);
  if ((*(_BYTE *)(v7 + v1) & 1) == 0)
  {
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = (uint64_t *)(v10 + *(int *)(v0 + 284));
    v12 = qword_100670810;
    v13 = *(void **)(v10 + *(int *)(*(_QWORD *)(v0 + 104) + 24));
    v14 = *v11;
    v15 = v11[1];
    v16 = objc_allocWithZone((Class)NSCachedURLResponse);
    v17 = v13;
    sub_100022948(v14, v15);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v19 = objc_msgSend(v16, "initWithResponse:data:", v17, isa);

    v20 = sub_10044D3C8(v19, 1);
    if (v20)
    {
      v21 = v20;
      v22 = URLRequest._bridgeToObjectiveC()().super.isa;
      v23 = type metadata accessor for DIPURLCache();
      *(_QWORD *)(v0 + 16) = v12;
      *(_QWORD *)(v0 + 24) = v23;
      objc_msgSendSuper2((objc_super *)(v0 + 16), "storeCachedResponse:forRequest:", v21, v22);

    }
    sub_100007F8C(v14, v15);

    if (qword_10062F640 != -1)
      swift_once(&qword_10062F640, sub_1004FE170);
    sub_1000352C0(*(_QWORD *)(v0 + 80), (uint64_t)qword_100670998);
    Milestone.log()();
  }
  v24 = *(_QWORD *)(v0 + 168);
  v41 = *(_QWORD *)(v0 + 176);
  v42 = *(int *)(v0 + 280);
  v26 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 160);
  v43 = v24;
  v44 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 112);
  v45 = *(_QWORD *)(v0 + 136);
  v46 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 64);
  v28 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 56);
  v31 = v9 - *(double *)(v0 + 240);
  v32 = *(double *)(v0 + 232) - *(double *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 32);
  v34 = *(_QWORD *)(v0 + 40);
  sub_1000DB834(v28, v29);
  v40 = *(_QWORD *)(*(_QWORD *)(v28 + *(int *)(v30 + 20)) + 16);
  sub_100035DAC(v28, type metadata accessor for KeyRevocationList);
  v35 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v35(v24, v26);
  v35(v41, v26);
  LOBYTE(v35) = *(_BYTE *)(v27 + v42);
  v36 = *(_QWORD *)(v34 + 16);
  v37 = *(_QWORD *)(v34 + 24);
  sub_1000DB878(v29, v33);
  v38 = v33 + *(int *)(type metadata accessor for KRLFetchResult(0) + 20);
  *(_QWORD *)v38 = v40;
  *(_BYTE *)(v38 + 8) = (_BYTE)v35;
  *(double *)(v38 + 16) = v32;
  *(double *)(v38 + 24) = v31;
  *(_QWORD *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v37;
  swift_bridgeObjectRetain(v37);
  sub_100035DAC(v27, type metadata accessor for KRLWebService.FetchResponse);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v27);
  swift_task_dealloc(v46);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D99D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D9A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 8);
  v4(*(_QWORD *)(v0 + 168), v2);
  v4(v1, v2);
  sub_100035DAC(v3, type metadata accessor for KRLWebService.FetchResponse);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D9B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v3[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URLRequest(0);
  v3[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[19] = v7;
  v3[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v3[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[22] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v10);
  v3[24] = swift_task_alloc(v10);
  v3[25] = swift_task_alloc(v10);
  v11 = sub_100004828(&qword_100630A48);
  v3[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v3[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[28] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v14);
  v3[30] = swift_task_alloc(v14);
  v3[31] = swift_task_alloc(v14);
  v3[32] = swift_task_alloc(v14);
  v3[33] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000D9C94, 0, 0);
}

uint64_t sub_1000D9C94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::Bool v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  Swift::String_optional v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, __n128);
  void (*v59)(uint64_t, uint64_t);
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, char, char);
  uint64_t v71;

  v1 = v0 + 88;
  sub_1000DB1D8(*(_QWORD *)(v0 + 104), *(char **)(v0 + 264));
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4._countAndFlagsBits = 0xD00000000000001FLL;
  v4._object = (void *)0x8000000100546CD0;
  v5 = NSUserDefaults.internalBool(forKey:)(v4);

  if (!v5)
    goto LABEL_10;
  v7 = objc_msgSend(v2, "standardUserDefaults");
  v8._object = (void *)0x8000000100546BF0;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  v9 = NSUserDefaults.internalString(forKey:)(v8);

  v11 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 208);
  if (v9.value._object)
  {
    URL.init(string:)(v9.value._countAndFlagsBits, v9.value._object);
    swift_bridgeObjectRelease(v9.value._object);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v11) != 1)
    {
      v14 = *(_QWORD *)(v0 + 256);
      v13 = *(_QWORD *)(v0 + 264);
      v15 = *(_QWORD *)(v0 + 248);
      v17 = *(_QWORD *)(v0 + 216);
      v16 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v14, *(_QWORD *)(v0 + 208), v17);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v13, v14, v17);
      defaultLogger()(v18);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter(v20);
      v22 = os_log_type_enabled(v20, v21);
      v23 = *(_QWORD *)(v0 + 248);
      v24 = *(_QWORD *)(v0 + 256);
      v26 = *(_QWORD *)(v0 + 216);
      v25 = *(_QWORD *)(v0 + 224);
      v27 = *(_QWORD *)(v0 + 200);
      v28 = *(_QWORD *)(v0 + 168);
      v68 = *(_QWORD *)(v0 + 176);
      if (v22)
      {
        v62 = *(_QWORD *)(v0 + 216);
        v66 = *(_QWORD *)(v0 + 200);
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = v24;
        v30 = swift_slowAlloc(32, -1);
        v71 = v30;
        v31.n128_u64[0] = 136315138;
        *(_DWORD *)v29 = 136315138;
        v32 = URL.absoluteString.getter(v31);
        v34 = v33;
        *(_QWORD *)(v0 + 88) = sub_1000E3AC8(v32, v33, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 96, v29 + 4);
        swift_bridgeObjectRelease(v34);
        v35 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v35(v23, v62);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "KRLWebService overriding KRL URL with %s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v28);
        v6 = ((uint64_t (*)(uint64_t, uint64_t))v35)(v64, v62);
      }
      else
      {

        v36 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v36(v23, v26);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v27, v28);
        v6 = ((uint64_t (*)(uint64_t, uint64_t))v36)(v24, v26);
      }
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v10 + 56))(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 216));
  }
  v6 = sub_1000DB76C(*(_QWORD *)(v0 + 208));
LABEL_10:
  v37 = defaultLogger()(v6);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = *(_QWORD *)(v0 + 264);
    v63 = *(_QWORD *)(v0 + 216);
    v65 = *(_QWORD *)(v0 + 176);
    v67 = *(_QWORD *)(v0 + 168);
    v69 = *(_QWORD *)(v0 + 192);
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v71 = v42;
    *(_DWORD *)v41 = 136315138;
    swift_beginAccess(v40, v0 + 40, 0, 0);
    v43 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v63, v43);
    v46 = v45;
    *(_QWORD *)(v0 + 80) = sub_1000E3AC8(v44, v45, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v1, v41 + 4);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "KRLWebService fetch KRL at URL %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v47 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v47(v69, v67);
  }
  else
  {
    v48 = *(_QWORD *)(v0 + 192);
    v49 = *(_QWORD *)(v0 + 168);
    v50 = *(_QWORD *)(v0 + 176);

    v47 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v47(v48, v49);
  }
  *(_QWORD *)(v0 + 272) = v47;
  v51 = *(_QWORD *)(v0 + 264);
  v53 = *(_QWORD *)(v0 + 232);
  v52 = *(_QWORD *)(v0 + 240);
  v54 = *(_QWORD *)(v0 + 216);
  v55 = *(_QWORD *)(v0 + 224);
  v56 = *(_QWORD *)(v0 + 160);
  v57 = swift_beginAccess(v51, v0 + 16, 0, 0);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v55 + 16);
  v58(v52, v51, v54, v57);
  ((void (*)(uint64_t, uint64_t, uint64_t))v58)(v53, v52, v54);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v53, 0, 60.0);
  sub_1004EA7BC(v56, 0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v59 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  *(_QWORD *)(v0 + 280) = v59;
  v59(v52, v54);
  v70 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v60 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 288) = v60;
  *v60 = v0;
  v60[1] = sub_1000DA24C;
  return v70(*(_QWORD *)(v0 + 160), (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_1000DA24C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v10 = *v5;
  v11 = *(_QWORD *)(*v5 + 288);
  *(_QWORD *)(*v5 + 296) = v4;
  swift_task_dealloc(v11);
  if (v4)
  {
    v12 = sub_1000DA414;
  }
  else
  {
    *(_BYTE *)(v10 + 328) = a4 & 1;
    *(_QWORD *)(v10 + 304) = a3;
    *(_QWORD *)(v10 + 312) = a2;
    *(_QWORD *)(v10 + 320) = a1;
    v12 = sub_1000DA2E0;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_1000DA2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *Response;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_BYTE *)(v0 + 328);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 32))(v9, v8, *(_QWORD *)(v0 + 144));
  v5(v6, v7);
  Response = (int *)type metadata accessor for KRLWebService.FetchResponse(0);
  v11 = (_QWORD *)(v9 + Response[5]);
  *v11 = v2;
  v11[1] = v1;
  *(_QWORD *)(v9 + Response[6]) = v3;
  *(_BYTE *)(v9 + Response[7]) = v4;
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v8);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DA414(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(v1 + 296);
  defaultLogger()(a1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 296);
    v7 = *(_QWORD *)(v1 + 216);
    v41 = *(_QWORD *)(v1 + 184);
    v43 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
    v39 = *(_QWORD *)(v1 + 168);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v45 = v37;
    *(_DWORD *)v8 = 136315394;
    v10 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
    v13 = v12;
    *(_QWORD *)(v1 + 64) = sub_1000E3AC8(v11, v12, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v8 + 4);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v6);
    v14 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v1 + 72) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v8 + 14);
    *v9 = v14;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "An error occurred while fetching KRL with url '%s': %@", (uint8_t *)v8, 0x16u);
    v15 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v43(v41, v39);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 296);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
    v18 = *(_QWORD *)(v1 + 184);
    v19 = *(_QWORD *)(v1 + 168);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

    v17(v18, v19);
  }
  v20 = *(_QWORD *)(v1 + 296);
  v21 = *(_QWORD *)(v1 + 264);
  v32 = *(void (**)(uint64_t, uint64_t))(v1 + 280);
  v33 = *(_QWORD *)(v1 + 256);
  v34 = *(_QWORD *)(v1 + 248);
  v35 = *(_QWORD *)(v1 + 240);
  v22 = *(_QWORD *)(v1 + 216);
  v36 = *(_QWORD *)(v1 + 232);
  v38 = *(_QWORD *)(v1 + 208);
  v40 = *(_QWORD *)(v1 + 200);
  v42 = *(_QWORD *)(v1 + 192);
  v44 = *(_QWORD *)(v1 + 184);
  v24 = *(_QWORD *)(v1 + 152);
  v23 = *(_QWORD *)(v1 + 160);
  v26 = *(_QWORD *)(v1 + 136);
  v25 = *(_QWORD *)(v1 + 144);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 128) + 104))(v26, enum case for DIPError.Code.krlCouldNotFetch(_:), *(_QWORD *)(v1 + 120));
  swift_errorRetain(v20);
  v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v28 = type metadata accessor for DIPError(0);
  v29 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v28, v29, 0, 0);
  v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v20, v26, 0, v27, 0xD000000000000078, 0x8000000100546C10, 0x3A5F286863746566, 0xE900000000000029, 178);
  swift_willThrow(v30);
  swift_errorRelease(v20);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  v32(v21, v22);
  swift_task_dealloc(v21);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v23);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000DA810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v4[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[13] = v10;
  v4[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for COSE_Sign1(0);
  v4[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[16] = v12;
  v4[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000DA8EC, 0, 0);
}

uint64_t sub_1000DA8EC()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[3];
  v1 = v0[4];
  sub_100022948(v2, v1);
  COSE_Sign1.init(fromHexData:)(v2, v1);
  v3 = (_QWORD *)(v0[5] + OBJC_IVAR____TtC8coreidvd13KRLWebService_validator);
  v5 = v3[3];
  v4 = v3[4];
  sub_10000806C(v3, v5);
  v6 = (uint64_t **)swift_task_alloc(dword_10062FC3C);
  v0[18] = (uint64_t)v6;
  v7 = type metadata accessor for KeyRevocationList(0);
  v0[19] = v7;
  v8 = sub_100004790(&qword_100633BF0, type metadata accessor for KeyRevocationList, (uint64_t)&unk_100532B98);
  sub_100004790(&qword_100633BF8, type metadata accessor for KeyRevocationList, (uint64_t)&unk_100532B70);
  *v6 = v0;
  v6[1] = (uint64_t *)sub_1000DABD4;
  return sub_100006AE4(v0[2], v0[17], v5, v7, v4, v8);
}

uint64_t sub_1000DABD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000DAFDC;
  else
    v3 = sub_1000DAC38;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000DAC38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  v4 = v0[2] + *(int *)(v0[19] + 28);
  dispatch thunk of static DateProvider.now.getter(*(_QWORD *)(v0[5] + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC8coreidvd13KRLWebService_dateProvider + 8));
  v5 = static Date.> infix(_:_:)(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v5 & 1) != 0)
  {
    v6 = v0[17];
    v7 = v0[14];
    v8 = v0[11];
    v9 = v0[8];
    (*(void (**)(uint64_t, _QWORD))(v0[16] + 8))(v6, v0[15]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    v10 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_10062F648 != -1)
      swift_once(&qword_10062F648, sub_1004FE1A4);
    v11 = v0[16];
    v12 = v0[17];
    v13 = v0[15];
    v15 = v0[10];
    v14 = v0[11];
    v16 = v0[9];
    v17 = v0[2];
    v18 = type metadata accessor for Milestone(0);
    sub_1000352C0(v18, (uint64_t)qword_1006709B0);
    Milestone.log()();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.krlExpired(_:), v16);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v40 = v20;
    v21 = swift_allocError(v20, v39, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100546CB0, 0, v14, 0, v19, 0xD000000000000078, 0x8000000100546C10, 0xD000000000000018, 0x8000000100546C90, 189);
    swift_willThrow(v22);
    sub_100035DAC(v17, type metadata accessor for KeyRevocationList);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    v24 = defaultLogger()(v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "An error occurred while parsing and verifying KRL response", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = v0[17];
    v38 = v0[14];
    v29 = v0[10];
    v30 = v0[11];
    v31 = v0[8];
    v32 = v0[9];
    v33 = v0[6];
    v34 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v30, enum case for DIPError.Code.krlFailedToValidate(_:), v32);
    swift_errorRetain(v21);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v40, v39, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v21, v30, 0, v35, 0xD000000000000078, 0x8000000100546C10, 0xD000000000000018, 0x8000000100546C90, 194);
    swift_willThrow(v36);
    swift_errorRelease(v21);
    swift_task_dealloc(v28);
    swift_task_dealloc(v38);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

uint64_t sub_1000DAFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  v2 = *(_QWORD *)(v0 + 160);
  v3 = defaultLogger()(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "An error occurred while parsing and verifying KRL response", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for DIPError.Code.krlFailedToValidate(_:), v11);
  swift_errorRetain(v2);
  v14 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v15 = type metadata accessor for DIPError(0);
  v16 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v15, v16, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v14, 0xD000000000000078, 0x8000000100546C10, 0xD000000000000018, 0x8000000100546C90, 194);
  swift_willThrow(v17);
  swift_errorRelease(v2);
  swift_task_dealloc(v7);
  swift_task_dealloc(v19);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DB1D8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  Swift::String v21;
  Swift::String_optional v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a1;
  v47 = a2;
  v2 = type metadata accessor for Logger(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v48 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21._object = (void *)0x8000000100546BF0;
  v21._countAndFlagsBits = 0xD00000000000001ALL;
  v22 = NSUserDefaults.internalString(forKey:)(v21);

  if (v22.value._object)
  {
    URL.init(string:)(v22.value._countAndFlagsBits, v22.value._object);
    swift_bridgeObjectRelease(v22.value._object);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v43 + OBJC_IVAR____TtC8coreidvd13KRLWebService_baseURL, v8);
  sub_1000DB76C((uint64_t)v7);
LABEL_6:
  v23 = v4;
  URL.appendingPathComponent(_:)(7107179, 0xE300000000000000);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v14, v8);
  URL.appendingPathComponent(_:)(48, 0xE100000000000000);
  v24(v17, v8);
  v25 = sub_1000D8F60();
  v27 = v26;
  v28 = v47;
  URL.appendingPathComponent(_:)(v25, v26);
  swift_bridgeObjectRelease(v27);
  v29 = ((uint64_t (*)(char *, uint64_t))v24)(v19, v8);
  defaultLogger()(v29);
  v30 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
  v31 = v48;
  v32 = v30(v48, v28, v8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(12, -1);
    v47 = v23;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc(32, -1);
    v50 = v37;
    *(_DWORD *)v36 = 136315138;
    v38 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v38);
    v41 = v40;
    v49 = sub_1000E3AC8(v39, v40, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4);
    swift_bridgeObjectRelease(v41);
    v24(v31, v8);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "KRLWebService constructed KRL URL: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v47, v45);
  }
  else
  {
    v24(v31, v8);

    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v23, v45);
  }
}

uint64_t sub_1000DB600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8coreidvd13KRLWebService_baseURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd13KRLWebService_validator));
}

id sub_1000DB64C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KRLWebService(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000DB6D0()
{
  return type metadata accessor for KRLWebService(0);
}

uint64_t type metadata accessor for KRLWebService(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100633BC0, (uint64_t)&nominal type descriptor for KRLWebService);
}

uint64_t sub_1000DB6EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100524090;
    v4[2] = &unk_1005240A8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000DB76C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100630A48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DB7AC(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_1000DB7D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100640C80;
  if (!qword_100640C80)
  {
    v1 = sub_100013E24(&qword_1006368D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100640C80);
  }
  return result;
}

uint64_t type metadata accessor for KRLWebService.FetchResponse(uint64_t a1)
{
  return sub_100038B7C(a1, qword_100633C58, (uint64_t)&nominal type descriptor for KRLWebService.FetchResponse);
}

uint64_t sub_1000DB834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyRevocationList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DB878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyRevocationList(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KRLFetchResult(uint64_t a1)
{
  return sub_100038B7C(a1, qword_100633CF0, (uint64_t)&nominal type descriptor for KRLFetchResult);
}

_QWORD *sub_1000DB8D0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for URLRequest(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_100022948(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v15;
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v16 = v15;
  }
  return a1;
}

void sub_1000DB98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_100007F8C(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t sub_1000DB9E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_100022948(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v15 = v14;
  return a1;
}

uint64_t sub_1000DBA70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v6 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_100022948(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_100007F8C(v12, v13);
  v14 = a3[6];
  v15 = *(void **)(a2 + v14);
  v16 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v17 = v15;

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000DBB14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000DBB84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  v6 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100007F8C(v8, v9);
  v10 = a3[6];
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000DBC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DBC18);
}

uint64_t sub_1000DBC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URLRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000DBC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DBCA0);
}

uint64_t sub_1000DBCA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URLRequest(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_1000DBD18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URLRequest(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1005240E0;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_1005240F8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000DBDA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004828(&qword_100633990);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = (int *)type metadata accessor for KeyRevocationList(0);
    v12 = v11[5];
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    v14 = v11[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(void (**)(char *, char *, uint64_t, __n128))(v8 + 16);
    v18 = swift_bridgeObjectRetain(v13);
    v17(v15, v16, v7, v18);
    ((void (*)(char *, char *, uint64_t))v17)((char *)a1 + v11[7], (char *)a2 + v11[7], v7);
    v19 = v11[8];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = *(int *)(a3 + 20);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
    v26 = *((_QWORD *)v25 + 5);
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    *((_QWORD *)v24 + 5) = v26;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
  }
  return a1;
}

uint64_t sub_1000DBF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void (*v7)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (int *)type metadata accessor for KeyRevocationList(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[5]));
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(a1 + v6[6], v4);
  v7(a1 + v6[7], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v6[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 40));
}

char *sub_1000DBFE0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for KeyRevocationList(0);
  v10 = v9[5];
  v11 = *(_QWORD *)&a2[v10];
  *(_QWORD *)&a1[v10] = v11;
  v12 = v9[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void (**)(char *, char *, uint64_t, __n128))(v7 + 16);
  v16 = swift_bridgeObjectRetain(v11);
  v15(v13, v14, v6, v16);
  ((void (*)(char *, char *, uint64_t))v15)(&a1[v9[7]], &a2[v9[7]], v6);
  v17 = v9[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = *(int *)(a3 + 20);
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
  v24 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  *((_QWORD *)v22 + 5) = v24;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

char *sub_1000DC134(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for KeyRevocationList(0);
  v13 = v12[5];
  v14 = *(_QWORD *)&a2[v13];
  v15 = *(_QWORD *)&a1[v13];
  *(_QWORD *)&a1[v13] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v16(&a1[v12[6]], &a2[v12[6]], v6);
  v16(&a1[v12[7]], &a2[v12[7]], v6);
  v17 = v12[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(int *)(a3 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  *((_QWORD *)v23 + 3) = *((_QWORD *)v24 + 3);
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  v25 = *((_QWORD *)v24 + 5);
  v26 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v23 + 5) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

char *sub_1000DC2FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = (int *)type metadata accessor for KeyRevocationList(0);
  *(_QWORD *)&a1[v9[5]] = *(_QWORD *)&a2[v9[5]];
  v10 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v10(&a1[v9[6]], &a2[v9[6]], v6);
  v10(&a1[v9[7]], &a2[v9[7]], v6);
  *(_OWORD *)&a1[v9[8]] = *(_OWORD *)&a2[v9[8]];
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *((_OWORD *)v13 + 2);
  v15 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  *((_OWORD *)v12 + 2) = v14;
  *(_OWORD *)v12 = v15;
  return a1;
}

char *sub_1000DC418(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = (int *)type metadata accessor for KeyRevocationList(0);
  v13 = v12[5];
  v14 = *(_QWORD *)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  swift_bridgeObjectRelease(v14);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v15(&a1[v12[6]], &a2[v12[6]], v6);
  v15(&a1[v12[7]], &a2[v12[7]], v6);
  v16 = v12[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v21 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease(v21);
  v22 = *(int *)(a3 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  *((_OWORD *)v23 + 1) = *((_OWORD *)v24 + 1);
  v26 = *((_QWORD *)v24 + 4);
  v25 = *((_QWORD *)v24 + 5);
  v27 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v23 + 4) = v26;
  *((_QWORD *)v23 + 5) = v25;
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_1000DC5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DC5BC);
}

uint64_t sub_1000DC5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for KeyRevocationList(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 40);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000DC63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DC648);
}

uint64_t sub_1000DC648(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for KeyRevocationList(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
  return result;
}

uint64_t sub_1000DC6C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for KeyRevocationList(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "0";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000DC734()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[5] = v0;
  v2 = type metadata accessor for COSEKey(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v6);
  v1[12] = swift_task_alloc(v6);
  v1[13] = swift_task_alloc(v6);
  v1[14] = swift_task_alloc(v6);
  v1[15] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000DC7F0, 0, 0);
}

uint64_t sub_1000DC7F0()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v15;
  Swift::String v16;
  Swift::Bool v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v1 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 128) = v1;
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3._countAndFlagsBits = 0xD00000000000002FLL;
  v3._object = (void *)0x8000000100546D90;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    v6 = defaultLogger()(v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting existing developer test mDL due to user defaults setting", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v13 = (_QWORD *)swift_task_alloc(dword_100633E04);
    *(_QWORD *)(v0 + 136) = v13;
    *v13 = v0;
    v13[1] = sub_1000DCB18;
    return sub_1000DDD3C();
  }
  else
  {
    v15 = objc_msgSend(*(id *)(v0 + 128), "standardUserDefaults");
    v16._object = (void *)0x8000000100546DC0;
    v16._countAndFlagsBits = 0xD000000000000026;
    v17 = NSUserDefaults.internalBool(forKey:)(v16);

    if (v17)
    {
      v19 = defaultLogger()(v18);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Skipping creation of developer test mDL due to user defaults setting", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }
      v23 = *(_QWORD *)(v0 + 112);
      v24 = *(_QWORD *)(v0 + 72);
      v25 = *(_QWORD *)(v0 + 80);

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
      v26 = *(_QWORD *)(v0 + 112);
      v28 = *(_QWORD *)(v0 + 96);
      v27 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 88);
      v30 = *(_QWORD *)(v0 + 64);
      swift_task_dealloc(*(_QWORD *)(v0 + 120));
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xE000000000000000);
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 40);
      v32._countAndFlagsBits = 0xD00000000000003DLL;
      v32._object = (void *)0x8000000100546DF0;
      v33._countAndFlagsBits = 0x6335333332343730;
      v33._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v33, v32);
      v34 = sub_10000806C((_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 40));
      *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
      v35 = ISO18013KnownDocTypes.rawValue.getter(v34);
      v37 = v36;
      *(_QWORD *)(v0 + 152) = v36;
      v38 = *v34;
      v39 = (_QWORD *)swift_task_alloc(dword_100632A8C);
      *(_QWORD *)(v0 + 160) = v39;
      *v39 = v0;
      v39[1] = sub_1000DCDE4;
      return sub_1000A3024((uint64_t)&off_100600F90, v35, v37, v38);
    }
  }
}

uint64_t sub_1000DCB18()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 136);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000DCBD4, 0, 0);
  v6 = v2[14];
  v5 = v2[15];
  v8 = v2[12];
  v7 = v2[13];
  v9 = v2[11];
  v10 = v2[8];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000DCBD4()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = objc_msgSend(*(id *)(v0 + 128), "standardUserDefaults");
  v2._object = (void *)0x8000000100546DC0;
  v2._countAndFlagsBits = 0xD000000000000026;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Skipping creation of developer test mDL due to user defaults setting", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xE000000000000000);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 40);
    v19._countAndFlagsBits = 0xD00000000000003DLL;
    v19._object = (void *)0x8000000100546DF0;
    v20._countAndFlagsBits = 0x6335333332343730;
    v20._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v20, v19);
    v21 = sub_10000806C((_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 40));
    *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
    v22 = ISO18013KnownDocTypes.rawValue.getter(v21);
    v24 = v23;
    *(_QWORD *)(v0 + 152) = v23;
    v25 = *v21;
    v26 = (_QWORD *)swift_task_alloc(dword_100632A8C);
    *(_QWORD *)(v0 + 160) = v26;
    *v26 = v0;
    v26[1] = sub_1000DCDE4;
    return sub_1000A3024((uint64_t)&off_100600F90, v22, v24, v25);
  }
}

uint64_t sub_1000DCDE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000DD324;
  }
  else
  {
    swift_bridgeObjectRelease(v3[19]);
    v5 = sub_1000DCE58;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DCE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v48 = *(_QWORD *)(v1 + 80);
    v50 = *(_QWORD *)(v1 + 72);
    v52 = *(_QWORD *)(v1 + 104);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v54 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = ISO18013KnownDocTypes.rawValue.getter(v8);
    v11 = v10;
    *(_QWORD *)(v1 + 32) = sub_1000E3AC8(v9, v10, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Developer Test mDL credential already exists for docType %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v12(v52, v50);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 104);
    v14 = *(_QWORD *)(v1 + 72);
    v15 = *(_QWORD *)(v1 + 80);
    swift_release_n(*(_QWORD *)(v1 + 40), 2);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(_QWORD *)(v1 + 184) = v12;
  v16 = *(_QWORD **)(v1 + 168);
  if (!v16[2])
    goto LABEL_10;
  v17 = sub_1004A8604(0x797469746E656469, 0xED0000747365742DLL);
  v16 = *(_QWORD **)(v1 + 168);
  if ((v18 & 1) == 0)
    goto LABEL_10;
  v19 = *(_QWORD **)(v16[7] + 8 * v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v16);
  if (!v19[2])
  {
    v16 = v19;
LABEL_10:
    v33 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRelease(v16);
    v34 = objc_msgSend(objc_allocWithZone((Class)DCCredentialOptions), "init");
    *(_QWORD *)(v1 + 192) = v34;
    objc_msgSend(v34, "setReaderAuthenticationPolicy:", 1);
    objc_msgSend(v34, "setPayloadProtectionPolicy:", 0);
    objc_msgSend(v34, "setPresentmentAuthPolicy:", 1);
    v35 = *sub_10000806C((_QWORD *)(v33 + 16), *(_QWORD *)(v33 + 40));
    v36 = dword_100632A84;
    v37 = v34;
    v38 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v1 + 200) = v38;
    *v38 = v1;
    v38[1] = sub_1000DD3A4;
    return sub_1000A3E9C(0x797469746E656469, 0xED0000747365742DLL, (uint64_t)v34, v35);
  }
  v20 = *(_QWORD *)(v1 + 40);
  v21 = v19[4];
  v53 = v19[5];
  swift_bridgeObjectRetain(v53);
  v22 = swift_bridgeObjectRelease(v19);
  defaultLogger()(v22);
  v23 = swift_retain_n(v20, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v49 = *(_QWORD *)(v1 + 72);
    v51 = *(_QWORD *)(v1 + 96);
    v47 = *(_QWORD *)(v1 + 40);
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v54 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = ISO18013KnownDocTypes.rawValue.getter(v27);
    v30 = v29;
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v28, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v26 + 4);
    swift_bridgeObjectRelease(v30);
    swift_release_n(v47, 2);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Developer Test mDL credential already exists for docType %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v32 = v49;
    v31 = v51;
  }
  else
  {
    v40 = *(_QWORD *)(v1 + 96);
    v41 = *(_QWORD *)(v1 + 72);
    swift_release_n(*(_QWORD *)(v1 + 40), 2);

    v31 = v40;
    v32 = v41;
  }
  v12(v31, v32);
  v42 = *(_QWORD *)(v1 + 112);
  v44 = *(_QWORD *)(v1 + 96);
  v43 = *(_QWORD *)(v1 + 104);
  v45 = *(_QWORD *)(v1 + 88);
  v46 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 120));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v21, v53);
}

uint64_t sub_1000DD324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DD3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 200);
  *(_QWORD *)(v4 + 208) = a1;
  *(_QWORD *)(v4 + 216) = a2;
  *(_QWORD *)(v4 + 224) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_1000DD520;
  }
  else
  {

    v6 = sub_1000DD41C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DD41C()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v2._object = (void *)0x8000000100546E30;
  v3._countAndFlagsBits = 0x3362373162396663;
  v3._object = (void *)0xE800000000000000;
  v2._countAndFlagsBits = 0xD000000000000044;
  logMilestone(tag:description:)(v3, v2);
  v4 = *sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  v5 = (_QWORD *)swift_task_alloc(dword_100632A7C);
  v0[29] = v5;
  *v5 = v0;
  v5[1] = sub_1000DD4B4;
  return sub_1000A4200(v0[26], v0[27], v4);
}

uint64_t sub_1000DD4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000DD7A0;
  else
    v5 = sub_1000DD5A4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DD520()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 192);

  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DD5A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  int *v27;

  v2 = *(void **)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = type metadata accessor for CBORDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = CBORDecoder.init()();
  v6 = objc_msgSend(v2, "publicKeyCOSEKey");
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = sub_100004790(&qword_100633DF8, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v3, v7, v9, v3, v10);
  if (v1)
  {
    v11 = *(void **)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 216);

    swift_bridgeObjectRelease(v12);
    sub_100007F8C(v7, v9);
    swift_release(v5);
    v13 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD **)(v0 + 40);
    sub_100007F8C(v7, v9);
    swift_release(v5);
    v20._object = (void *)0x8000000100546E80;
    v21._countAndFlagsBits = 0x3031613830353138;
    v21._object = (void *)0xE800000000000000;
    v20._countAndFlagsBits = 0xD000000000000045;
    logMilestone(tag:description:)(v21, v20);
    v22 = v19 + 7;
    v23 = v19[10];
    v24 = v19[11];
    sub_10000806C(v22, v23);
    v25 = *(int **)(v24 + 8);
    v27 = (int *)((char *)v25 + *v25);
    v26 = (_QWORD *)swift_task_alloc(v25[1]);
    *(_QWORD *)(v0 + 256) = v26;
    *v26 = v0;
    v26[1] = sub_1000DD828;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v27)(*(_QWORD *)(v0 + 64), v23, v24);
  }
}

uint64_t sub_1000DD7A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 192);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));

  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DD828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 256);
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_bridgeObjectRelease(v4[27]);
    v6 = sub_1000DDC9C;
  }
  else
  {
    v6 = sub_1000DD8A0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DD8A0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *sub_10000806C((_QWORD *)(v0[5] + 16), *(_QWORD *)(v0[5] + 40));
  v2 = (_QWORD *)swift_task_alloc(dword_100632A74);
  v0[36] = v2;
  *v2 = v0;
  v2[1] = sub_1000DD90C;
  return sub_1000A455C(v0[26], v0[27], v0[33], v0[34], 0, v1);
}

uint64_t sub_1000DD90C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 216));
    v4 = sub_1000DDBF4;
  }
  else
  {
    v4 = sub_1000DD978;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000DD978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 216);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 264);
    v27 = *(_QWORD *)(v1 + 272);
    v28 = *(void **)(v1 + 240);
    v8 = *(_QWORD *)(v1 + 208);
    v7 = *(_QWORD *)(v1 + 216);
    v29 = *(void **)(v1 + 192);
    v30 = *(_QWORD *)(v1 + 72);
    v34 = *(void (**)(uint64_t, uint64_t))(v1 + 184);
    v35 = *(_QWORD *)(v1 + 64);
    v31 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v1 + 56);
    v33 = *(_QWORD *)(v1 + 48);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v37 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v8, v7, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Developer Test MDL creation completed with identifier %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    sub_100007F8C(v6, v27);

    v34(v31, v30);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v33);
  }
  else
  {
    v11 = *(void **)(v1 + 240);
    v12 = *(_QWORD *)(v1 + 216);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 184);
    v13 = *(void **)(v1 + 192);
    v15 = *(_QWORD *)(v1 + 88);
    v16 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 64);
    v18 = *(_QWORD *)(v1 + 48);
    v17 = *(_QWORD *)(v1 + 56);
    sub_100007F8C(*(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272));

    swift_bridgeObjectRelease_n(v12, 2);
    v14(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v36, v18);
  }
  v19 = *(_QWORD *)(v1 + 208);
  v20 = *(_QWORD *)(v1 + 216);
  v21 = *(_QWORD *)(v1 + 112);
  v23 = *(_QWORD *)(v1 + 96);
  v22 = *(_QWORD *)(v1 + 104);
  v24 = *(_QWORD *)(v1 + 88);
  v25 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 120));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v19, v20);
}

uint64_t sub_1000DDBF4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 240);
  v2 = *(void **)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  sub_100007F8C(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DDC9C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DDD3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[15] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[17] = v3;
  v1[18] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[20] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v6);
  v1[22] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000DDDD4, 0, 0);
}

uint64_t sub_1000DDDD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 120) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 120) + 40));
  v2 = (_QWORD *)swift_task_alloc(dword_100632A8C);
  *(_QWORD *)(v0 + 184) = v2;
  *v2 = v0;
  v2[1] = sub_1000DDE44;
  return sub_1000A3024((uint64_t)&off_100600F60, 0, 0, v1);
}

uint64_t sub_1000DDE44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v2 + 184);
  v4 = *v2;
  *(_QWORD *)(v4 + 192) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1000DDEE0, 0, 0);
  v5 = *(_QWORD *)(v4 + 168);
  v6 = *(_QWORD *)(v4 + 144);
  swift_task_dealloc(*(_QWORD *)(v4 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000DDEE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class isa;
  id v13;
  NSString v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 192);
  if (*(_QWORD *)(v1 + 16)
    && (v2 = sub_1004A8604(0x797469746E656469, 0xED0000747365742DLL), v1 = *(_QWORD *)(v0 + 192), (v3 & 1) != 0))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
    *(_QWORD *)(v0 + 200) = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v1);
    v5 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v0 + 208) = v5;
    if (v5)
    {
      v6 = v0 + 16;
      *(_QWORD *)(v0 + 216) = 0;
      v7 = *(_QWORD *)(v0 + 200);
      v8 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v0 + 224) = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v0 + 232) = v9;
      v10 = *sub_10000806C((_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 40));
      swift_bridgeObjectRetain(v9);
      v11 = objc_allocWithZone((Class)DCCredentialStore);
      swift_bridgeObjectRetain(v10);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v10);
      v13 = objc_msgSend(v11, "initWithPartitions:", isa);
      *(_QWORD *)(v0 + 240) = v13;

      v14 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 248) = v14;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1000DE158;
      v15 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v16 = (_QWORD *)(v0 + 80);
      v16[1] = 0x40000000;
      v16[2] = sub_100454F88;
      v16[3] = &unk_100607BB0;
      v16[4] = v15;
      objc_msgSend(v13, "deleteCredential:completion:", v14, v16);
      return swift_continuation_await(v6);
    }
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v18 = swift_bridgeObjectRelease(v1);
    v19 = defaultLogger()(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No test mDL credentials to delete", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DE158()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_1000DE4D4;
  else
    v2 = sub_1000DE1B8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DE1B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class isa;
  id v33;
  NSString v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v1 = *(void **)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);

  defaultLogger()(v3);
  swift_bridgeObjectRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 232);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v37 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v13 + 4) = sub_1000E3AC8(v9, v8, &v37);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully deleted credentialIdentifier: %s", (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 232), 2);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 216) + 1;
  v20._object = (void *)0x8000000100546ED0;
  v21._countAndFlagsBits = 0x6562363239353565;
  v21._object = (void *)0xE800000000000000;
  v20._countAndFlagsBits = 0xD000000000000040;
  logMilestone(tag:description:)(v21, v20);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    v22 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = v0 + 16;
    v26 = *(_QWORD *)(v0 + 216) + 1;
    *(_QWORD *)(v0 + 216) = v26;
    v27 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 200) + 16 * v26;
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v28 + 32);
    v29 = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v0 + 232) = v29;
    v30 = *sub_10000806C((_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 40));
    swift_bridgeObjectRetain(v29);
    v31 = objc_allocWithZone((Class)DCCredentialStore);
    swift_bridgeObjectRetain(v30);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v30);
    v33 = objc_msgSend(v31, "initWithPartitions:", isa);
    *(_QWORD *)(v0 + 240) = v33;

    v34 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 248) = v34;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000DE158;
    v35 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v36 = (_QWORD *)(v0 + 80);
    v36[1] = 0x40000000;
    v36[2] = sub_100454F88;
    v36[3] = &unk_100607BB0;
    v36[4] = v35;
    objc_msgSend(v33, "deleteCredential:completion:", v34, v36);
    return swift_continuation_await(v25);
  }
}

uint64_t sub_1000DE4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(void **)(v1 + 248);
  v2 = *(_QWORD *)(v1 + 256);
  v4 = *(_QWORD *)(v1 + 232);
  v5 = *(void **)(v1 + 240);
  v6 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 144);
  v9 = *(_QWORD *)(v1 + 128);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v2);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v7, 0, v10, 0xD000000000000055, 0x8000000100541FC0, 0xD000000000000014, 0x800000010053F970, 108);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v14 = *(_QWORD *)(v1 + 168);
  v15 = *(_QWORD *)(v1 + 144);
  swift_task_dealloc(*(_QWORD *)(v1 + 176));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000DE650()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v0[7] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[8] = v2;
  v0[9] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPError.Code(0);
  v0[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[11] = v4;
  v0[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ISO18013KnownDocTypes(0);
  v0[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[14] = v6;
  v0[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000DE6FC, 0, 0);
}

uint64_t sub_1000DE6FC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "stringForKey:", v2);

  if (!v3)
    goto LABEL_7;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  if (v4 == 0x797469746E656469 && v6 == 0xEC00000074736554)
  {
    swift_bridgeObjectRelease(0xEC00000074736554);
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 0x797469746E656469, 0xEC00000074736554, 0);
    swift_bridgeObjectRelease(v6);
    if ((v8 & 1) == 0)
    {
LABEL_7:
      v9 = *(_QWORD *)(v0 + 120);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v9, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), *(_QWORD *)(v0 + 104));
      *(_QWORD *)(v0 + 40) = &type metadata for IDCredCredentialStore;
      *(_QWORD *)(v0 + 48) = &off_1006070F8;
      *(_QWORD *)(v0 + 16) = &off_100600FC0;
      v10 = type metadata accessor for DeveloperTestMDLManager(0);
      v11 = (_QWORD *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      v12 = sub_10001E624(v0 + 16, (uint64_t)&type metadata for IDCredCredentialStore);
      v13 = (uint64_t *)swift_task_alloc(((unint64_t)value witness table for Builtin.BridgeObject[8] + 15) & 0xFFFFFFFFFFFFFFF0);
      value witness table for Builtin.BridgeObject[2](v13, v12, &type metadata for IDCredCredentialStore);
      *(_QWORD *)(v0 + 128) = sub_1002220D4(*v13, v9, v11);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
      swift_task_dealloc(v13);
      v14 = (_QWORD *)swift_task_alloc(dword_100633E04);
      *(_QWORD *)(v0 + 136) = v14;
      *v14 = v0;
      v14[1] = sub_1000DE980;
      return sub_1000DDD3C();
    }
  }
  v16._countAndFlagsBits = 0xD00000000000003BLL;
  v16._object = (void *)0x8000000100547030;
  v17._countAndFlagsBits = 0x6238326565363630;
  v17._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v17, v16);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DE980()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 136);
  v3 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000DEA14, 0, 0);
  swift_release(*(_QWORD *)(v3 + 128));
  v5 = *(_QWORD *)(v3 + 96);
  v6 = *(_QWORD *)(v3 + 72);
  swift_task_dealloc(*(_QWORD *)(v3 + 120));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000DEA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v9, v10, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100546F50, v1, v2, 0, v8, 0xD000000000000081, 0x8000000100546F80, 0xD00000000000001CLL, 0x8000000100547010, 122);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v4);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_errorRelease(v11);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DEBA4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 7);
  v1 = (char *)v0 + OBJC_IVAR____TtC8coreidvd23DeveloperTestMDLManager_iso18013DocType;
  v2 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000DEC04()
{
  return type metadata accessor for DeveloperTestMDLManager(0);
}

uint64_t type metadata accessor for DeveloperTestMDLManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100633D58;
  if (!qword_100633D58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeveloperTestMDLManager);
  return result;
}

uint64_t sub_1000DEC48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = "(";
  result = type metadata accessor for ISO18013KnownDocTypes(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000DECC0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;

  v0 = type metadata accessor for IdentityCredentialStoreHelper();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = objc_allocWithZone((Class)DCCredentialStore);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "initWithPartitions:", isa);

  *(_QWORD *)(v1 + 16) = v4;
  qword_100670250 = v1;
}

uint64_t sub_1000DED44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1000DED5C, 0, 0);
}

uint64_t sub_1000DED5C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  Class isa;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = *(void **)(v0[16] + 16);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[17] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000DEE1C;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1000A35F0;
  v5[3] = &unk_100607BC8;
  v5[4] = v4;
  objc_msgSend(v2, "credentialIdentifiersInPartitions:completion:", isa, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1000DEE1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 144) = v1;
  if (v1)
    v2 = sub_1000DEF04;
  else
    v2 = sub_1000DEE7C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DEE7C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v1 + 16) && (v2 = sub_1004A8604(0x797469746E656469, 0xE800000000000000), (v3 & 1) != 0))
  {
    v4 = *(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * v2);
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v4);
}

uint64_t sub_1000DEF04(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for IdentityCredentialStoreHelper()
{
  return objc_opt_self(_TtC8coreidvd29IdentityCredentialStoreHelper);
}

unint64_t sub_1000DEF64(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (!a2)
    return 0x726F727265;
  v4 = 1919968359;
  if ((a1 != 1919968359 || a2 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(1919968359, 0xE400000000000000, a1, a2, 0) & 1) == 0)
  {
    v4 = 0x72466E6163536469;
    if ((a1 != 0xD00000000000001ALL || a2 != 0x80000001005472C0)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001005472C0, a1, a2, 0) & 1) == 0)
    {
      v4 = 0xD000000000000013;
      if ((a1 != 0xD000000000000022 || a2 != 0x8000000100547270)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100547270, a1, a2, 0) & 1) == 0)
      {
        v4 = 0x61426E6163536469;
        if ((a1 != 0xD000000000000019 || a2 != 0x8000000100547250)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100547250, a1, a2, 0) & 1) == 0)
        {
          v4 = 0xD000000000000012;
          if ((a1 != 0xD000000000000021 || a2 != 0x8000000100547200)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100547200, a1, a2, 0) & 1) == 0)
          {
            v4 = 0x6569666C6573;
            if ((a1 != 0x6569666C6573 || a2 != 0xE600000000000000)
              && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6569666C6573, 0xE600000000000000, a1, a2, 0) & 1) == 0)
            {
              v4 = 0x65646F4368747561;
              if ((a1 != 0x65646F6368747561 || a2 != 0xE800000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F6368747561, 0xE800000000000000, a1, a2, 0) & 1) == 0)
              {
                v4 = 0xD000000000000010;
                if ((a1 != 0xD000000000000010 || a2 != 0x80000001005471C0)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001005471C0, a1, a2, 0) & 1) == 0)
                {
                  if (a1 == 0xD000000000000016 && a2 == 0x8000000100547160
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100547160, a1, a2, 0) & 1) != 0)
                  {
                    return 0xD00000000000001ELL;
                  }
                  if ((a1 != 0x776569766572 || a2 != 0xE600000000000000)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x776569766572, 0xE600000000000000, a1, a2, 0) & 1) == 0)
                  {
                    v4 = 0xD000000000000012;
                    if ((a1 != 0xD000000000000014 || a2 != 0x8000000100547120)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100547120, a1, a2, 0) & 1) == 0)
                    {
                      v4 = 0x7972746572;
                      if ((a1 != 0x7972746572 || a2 != 0xE500000000000000)
                        && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7972746572, 0xE500000000000000, a1, a2, 0) & 1) == 0)
                      {
                        v4 = 0x416F547964616572;
                        if ((a1 != 0x416F547964616572 || a2 != 0xEC00000044496464)
                          && (_stringCompareWithSmolCheck(_:_:expecting:)(0x416F547964616572, 0xEC00000044496464, a1, a2, 0) & 1) == 0)
                        {
                          v4 = 0xD000000000000019;
                          if ((a1 != 0xD00000000000001ELL || a2 != 0x8000000100543800)
                            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100543800, a1, a2, 0) & 1) == 0)
                          {
                            v4 = 0xD00000000000001ELL;
                            if ((a1 != 0xD000000000000017 || a2 != 0x8000000100543770)
                              && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100543770, a1, a2, 0) & 1) == 0)
                            {
                              v4 = 0xD00000000000001FLL;
                              if ((a1 != 0xD000000000000016 || a2 != 0x80000001005470A0)
                                && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001005470A0, a1, a2, 0) & 1) == 0)
                              {
                                return 0x726F727265;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t initializeWithCopy for DigitalPresentmentHelper(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for DigitalPresentmentHelper(_QWORD *a1, _QWORD *a2)
{
  sub_10000660C(a1, a2);
  return a1;
}

__n128 initializeWithTake for UploadedDataInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DigitalPresentmentHelper(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentHelper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentHelper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentHelper()
{
  return &type metadata for DigitalPresentmentHelper;
}

uint64_t sub_1000DF65C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v7 = sub_1000E6458(a1, a2, a3, a4);
  swift_bridgeObjectRelease(a3);
  v8 = (__int128 *)(a2 + 2);
  if (v4)
  {
    v13 = *(_OWORD *)a2;
    sub_1000E6CF0((uint64_t)&v13);
    v12 = *v8;
    sub_1000E6CF0((uint64_t)&v12);
  }
  else
  {
    v11 = *(_OWORD *)a2;
    sub_1000E6CF0((uint64_t)&v11);
    v10 = *v8;
    sub_1000E6CF0((uint64_t)&v10);
  }
  return v7;
}

_QWORD *sub_1000DF6FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  char *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;

  v2 = v1;
  v81 = a1;
  v3 = type metadata accessor for ISO18013KnownDocTypes(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  __chkstk_darwin(v3);
  v80 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PresentationStyle(0);
  v77 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v86 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IdentityDocumentPresentmentSource(0);
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  __chkstk_darwin(v6);
  v85 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v72 = *(_QWORD *)(v8 - 8);
  v73 = v8;
  __chkstk_darwin(v8);
  v74 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100633FA8);
  v11 = __chkstk_darwin(v10);
  v82 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v84 = (uint64_t)&v66 - v14;
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v66 - v15);
  v17 = sub_100004828(&qword_100633FB0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v66 - v21);
  v23 = type metadata accessor for IdentityDocumentElementCategoryGroups(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v1 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  v28 = v87;
  result = sub_1000DFD2C(*(_QWORD *)(v2 + 16), v2 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType, *(_QWORD *)(v2+ OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_elementsToIntentToStore), (uint64_t)v26);
  if (!v28)
  {
    v68 = v27;
    v69 = v20;
    v31 = v85;
    v30 = v86;
    v70 = v24;
    v71 = v23;
    sub_1000DFF78(v22);
    v87 = 0;
    v32 = v26;
    v33 = IdentityDocumentElementCategoryGroups.maximumRetentionPeriod.getter();
    v67 = v22;
    if ((v34 & 1) != 0)
    {
      v37 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v16, 1, 1, v37);
      v35 = v30;
      v39 = v31;
      v41 = (uint64_t)v82;
      v40 = v83;
    }
    else
    {
      v35 = v30;
      if (v33 <= 0)
      {
        v36 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.indefinitely(_:);
      }
      else
      {
        *v16 = v33;
        v36 = (unsigned int *)&enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.limit(_:);
      }
      v42 = *v36;
      v43 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v16, v42, v43);
      v39 = v31;
      v41 = (uint64_t)v82;
      v40 = v83;
      type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0);
      v38 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v16, 0, 1, v43);
    }
    v44 = IdentityDocumentElementCategoryGroups.retainingElements.getter(v38);
    v45 = *(_QWORD *)(v44 + 16);
    swift_bridgeObjectRelease(v44);
    v46 = (uint64_t)v16;
    v47 = (uint64_t)v16;
    v48 = v84;
    sub_100038B24(v47, v84, &qword_100633FA8);
    if (v45
      && (v49 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0),
          (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49) == 1))
    {
      sub_100008030(v48, &qword_100633FA8);
      v50 = v74;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v74, enum case for DIPError.Code.digitalPresentmentStorageLifetimeNotSpecified(_:), v73);
      v51 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v52 = type metadata accessor for DIPError(0);
      v53 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v54 = swift_allocError(v52, v53, 0, 0);
      v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x80000001005473E0, 0, v50, 0, v51, 0xD000000000000084, 0x8000000100547420, 0x2928646C697562, 0xE700000000000000, 86);
      v87 = v54;
      swift_willThrow(v55);
      sub_100008030(v46, &qword_100633FA8);
      v56 = (uint64_t)v67;
    }
    else
    {
      v57 = sub_100008030(v48, &qword_100633FA8);
      v86 = (char *)IdentityDocumentElementCategoryGroups.notRetainingElements.getter(v57);
      v85 = (char *)IdentityDocumentElementCategoryGroups.displayOnlyElements.getter();
      v84 = IdentityDocumentElementCategoryGroups.retainingElements.getter(v85);
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v39, enum case for IdentityDocumentPresentmentSource.app(_:), v76);
      (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v35, enum case for DigitalPresentmentDisplayConfiguration.PresentationStyle.consentSheet(_:), v40);
      v66 = v46;
      sub_100038B24(v46, v41, &qword_100633FA8);
      v58 = (uint64_t)v69;
      sub_100038B24((uint64_t)v67, (uint64_t)v69, &qword_100633FB0);
      v83 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID);
      v59 = v2;
      v60 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID + 8);
      v61 = v41;
      v63 = *(_QWORD *)(v59 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_usageDescription);
      v62 = *(_QWORD *)(v59
                      + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_usageDescription
                      + 8);
      v64 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v80, v68, v79);
      swift_bridgeObjectRetain(v62);
      v65 = swift_bridgeObjectRetain(v60);
      DigitalPresentmentDisplayConfiguration.init(elements:displayOnlyElements:persistedElements:presentmentSource:presentationStyle:persistedElementsStorageLifetimePeriod:clientDisplayInfo:passID:usageDescription:passName:documentType:)(v86, v85, v84, v39, v35, v61, v58, v83, v65, v60, v63, v62, 0, 0, v64);
      sub_100008030(v66, &qword_100633FA8);
      v56 = (uint64_t)v67;
    }
    sub_100008030(v56, &qword_100633FB0);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v32, v71);
  }
  return result;
}

_QWORD *sub_1000DFD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a4;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100004828(&qword_100633FC0);
  __chkstk_darwin(v13);
  v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = a2;
  v27 = a3;
  v28 = v4;
  result = sub_1000E0CFC((void (*)(uint64_t *__return_ptr, _QWORD *, __n128))sub_1000E1FCC, (uint64_t)v25, a1);
  if (!v5)
  {
    v17 = v29;
    v18 = ISO18013KnownDocTypes.rawValue.getter(result);
    IdentityDocumentElementCategoryGroups.init(documentType:documentElements:)(v18);
    v19 = type metadata accessor for IdentityDocumentElementCategoryGroups(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
    {
      sub_100008030((uint64_t)v15, &qword_100633FC0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.digitalPresentmentInvalidElement(_:), v9);
      v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v22 = type metadata accessor for DIPError(0);
      v23 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v22, v23, 0, 0);
      v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x80000001005474B0, 0, v12, 0, v21, 0xD000000000000084, 0x8000000100547420, 0xD000000000000053, 0x80000001005474D0, 130);
      return (_QWORD *)swift_willThrow(v24);
    }
    else
    {
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32))(v17, v15, v19);
    }
  }
  return result;
}

void sub_1000DFF78(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v3 = v1;
  v5 = type metadata accessor for AuditToken(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig;
  if (*(_BYTE *)(v9 + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig(0) + 20)) == 1)
  {
    v10 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride
                    + 8);
    *a1 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride);
    a1[1] = v10;
    v11 = enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.appleBranded(_:);
    v12 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 104))(a1, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    v14 = type metadata accessor for DigitalPresentmentCallingAppDataProvider(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + OBJC_IVAR____TtC8coreidvd40DigitalPresentmentCallingAppDataProvider_auditToken, v8, v5);
    v17 = GSMainScreenScaleFactor(v16);
    sub_1001DCA1C(v30, 54.0, 54.0, v17);
    swift_setDeallocating(v15);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15 + OBJC_IVAR____TtC8coreidvd40DigitalPresentmentCallingAppDataProvider_auditToken, v5);
    swift_deallocClassInstance(v15, *(unsigned int *)(*(_QWORD *)v15 + 48), *(unsigned __int16 *)(*(_QWORD *)v15 + 52));
    sub_1000A1F54((uint64_t)v30, (uint64_t)&v31, &qword_100633FB8);
    v18 = v32;
    if (v32)
    {
      v19 = v31;
      v34 = v2;
      v20 = v33;
      v21 = v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData;
      v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData);
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(void **)(v21 + 16);
      sub_1000A1F54((uint64_t)v30, v21, &qword_100633FB8);
      v25 = v20;
      swift_bridgeObjectRetain(v18);
      sub_1000E1F9C(v22, v23, v24);
      *a1 = v19;
      a1[1] = v18;
      a1[2] = v20;
      v26 = enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.custom(_:);
      v27 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo(0);
      v28 = *(_QWORD *)(v27 - 8);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 + 104))(a1, v26, v27);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
    }
    else
    {
      v29 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 1, 1, v29);
    }
  }
}

uint64_t sub_1000E0210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD v32[2];
  char v33;

  v29 = a5;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v28 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(Swift::String *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v12;
  v33 = *(_BYTE *)(a1 + 32);
  v13 = *((_QWORD *)&v32[0] + 1);
  v14 = v12;
  v15 = static IdentityDocumentElementCategory.groups(forDocumentType:namespace:identifier:)(a2, *(_QWORD *)&v32[0], *((_QWORD *)&v32[0] + 1), v12._countAndFlagsBits, v12._object);
  v16 = v15;
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14._object);
    swift_bridgeObjectRetain(a3);
    v17 = sub_1000DF65C(v16, (uint64_t *)v32, a3, a4);
    result = swift_bridgeObjectRelease(v16);
    *v29 = v17;
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v30 = 0;
    v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v19._countAndFlagsBits = 0x20746E656D656C45;
    v19._object = (void *)0xE800000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRetain(v14._object);
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v14._object);
    v20._object = (void *)0x8000000100547610;
    v20._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v20);
    v21 = v30;
    v22 = v31;
    v23 = v28;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v28, enum case for DIPError.Code.digitalPresentmentMissingElementGroup(_:), v9);
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v21, v22, 0, v23, 0, v24, 0xD000000000000084, 0x8000000100547420, 0xD000000000000053, 0x80000001005474D0, 112);
    return swift_willThrow(v27);
  }
  return result;
}

uint64_t sub_1000E0484(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for IdentityDocumentElement.RetentionIntent(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v10 = a2[3];
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_1000E0550(a3, v7);
  return IdentityDocumentElement.init(namespace:identifier:retentionIntent:)(v8, v9, v11, v10, v7);
}

uint64_t sub_1000E0550@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(void);
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  unint64_t v45;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  void (*v97)(void);
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v100 = a1;
  v3 = type metadata accessor for Logger(0);
  v85 = *(_QWORD *)(v3 - 8);
  v86 = v3;
  __chkstk_darwin(v3);
  v87 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IdentityIntentToStore(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v82 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v90 = (char *)&v75 - v9;
  v10 = type metadata accessor for IdentityElement(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v88 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v75 - v15;
  __chkstk_darwin(v14);
  v93 = (char *)&v75 - v17;
  v18 = sub_100004828(&qword_100633FD0);
  v19 = __chkstk_darwin(v18);
  v79 = (uint64_t *)((char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v75 - v22;
  v24 = __chkstk_darwin(v21);
  v89 = (char *)&v75 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v75 - v27;
  __chkstk_darwin(v26);
  v83 = v6;
  v29 = *(void (**)(void))(v6 + 56);
  v91 = (uint64_t)&v75 - v30;
  v101 = v5;
  v97 = v29;
  v29();
  v31 = sub_1000E5CA8();
  v33 = v31[2];
  if (v33)
  {
    v77 = v23;
    v78 = a2;
    v34 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v76 = v31;
    v35 = (char *)v31 + v34;
    v96 = *(_QWORD *)(v11 + 72);
    v99 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v95 = enum case for IdentityElement.ageIsOver(_:);
    v94 = enum case for IdentityElement.age(_:);
    *(_QWORD *)&v32 = 136315138;
    v81 = v32;
    v80 = (char *)&type metadata for Any + 8;
    v36 = v83;
    v98 = v11;
    v92 = v28;
    v37 = (uint64_t)v93;
    v84 = v16;
    do
    {
      v44 = v99;
      v99((char *)v37, (uint64_t)v35, v10);
      v44(v16, v37, v10);
      v45 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v16, v10);
      if ((_DWORD)v45 == v95 || (_DWORD)v45 == v94)
      {
        sub_1000E1274(v100, (uint64_t)v28);
      }
      else if (*(_QWORD *)(v100 + 16) && (v45 = sub_1004A8AD0(v37), (v47 & 1) != 0))
      {
        v48 = v101;
        v49 = v82;
        (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v82, *(_QWORD *)(v100 + 56) + *(_QWORD *)(v36 + 72) * v45, v101);
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v28, v49, v48);
        v50 = v48;
        v37 = (uint64_t)v93;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v97)(v28, 0, 1, v50);
        v11 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v16, v10);
      }
      else
      {
        v51 = v87;
        defaultLogger()(v45);
        v52 = v88;
        v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v99)(v88, v37, v10);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.debug.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = swift_slowAlloc(12, -1);
          v57 = swift_slowAlloc(32, -1);
          v102 = v57;
          *(_DWORD *)v56 = v81;
          v58 = sub_100004790((unint64_t *)&qword_100631250, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityElement, (uint64_t)&protocol conformance descriptor for IdentityElement);
          v59 = dispatch thunk of CustomStringConvertible.description.getter(v10, v58);
          v61 = v60;
          *(_QWORD *)(v56 + 4) = sub_1000E3AC8(v59, v60, &v102);
          swift_bridgeObjectRelease(v61);
          v62 = *(void (**)(char *, uint64_t))(v98 + 8);
          v62(v52, v10);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "IdentityDocumentDescriptor lookupIntentToStore: could not find suitable element for %s, returning nil", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy(v57, 1, v80);
          v63 = v57;
          v36 = v83;
          swift_slowDealloc(v63, -1, -1);
          v64 = v56;
          v37 = (uint64_t)v93;
          swift_slowDealloc(v64, -1, -1);
        }
        else
        {
          v62 = *(void (**)(char *, uint64_t))(v98 + 8);
          v62(v52, v10);
        }

        (*(void (**)(char *, uint64_t))(v85 + 8))(v51, v86);
        v16 = v84;
        v28 = v92;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v97)(v92, 1, 1, v101);
        v62(v16, v10);
        v11 = v98;
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v28, 1, v101) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v37, v10);
        sub_100008030((uint64_t)v28, &qword_100633FD0);
      }
      else
      {
        v38 = v90;
        v39 = v101;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v90, v28, v101);
        v40 = v89;
        v41 = v91;
        IdentityIntentToStore.merge(with:)(v91);
        v42 = v38;
        v11 = v98;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v39);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v37, v10);
        sub_100008030(v41, &qword_100633FD0);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v97)(v40, 0, 1, v39);
        v43 = (uint64_t)v40;
        v28 = v92;
        v37 = (uint64_t)v93;
        sub_1000A1F54(v43, v41, &qword_100633FD0);
      }
      v35 += v96;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease(v76);
    a2 = v78;
    v23 = v77;
  }
  else
  {
    swift_bridgeObjectRelease(v31);
  }
  sub_1000A1F54(v91, (uint64_t)v23, &qword_100633FD0);
  v65 = v83;
  v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48))(v23, 1, v101);
  v67 = v79;
  if (v66 == 1)
    goto LABEL_23;
  sub_100038B24((uint64_t)v23, (uint64_t)v79, &qword_100633FD0);
  v71 = (*(uint64_t (**)(_QWORD *, uint64_t))(v65 + 88))(v67, v101);
  if (v71 == enum case for IdentityIntentToStore.mayStoreForDays(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v65 + 96))(v67, v101);
    *a2 = *v67;
LABEL_30:
    v72 = (unsigned int *)&enum case for IdentityDocumentElement.RetentionIntent.retain(_:);
    goto LABEL_31;
  }
  if (v71 != enum case for IdentityIntentToStore.willNotStore(_:))
  {
    if (v71 != enum case for IdentityIntentToStore.mayStore(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v83 + 8))(v67, v101);
LABEL_23:
      sub_100008030((uint64_t)v23, &qword_100633FD0);
      *a2 = 0;
      v68 = enum case for IdentityDocumentElement.RetentionIntent.retain(_:);
      v69 = type metadata accessor for IdentityDocumentElement.RetentionIntent(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(a2, v68, v69);
    }
    *a2 = 0;
    goto LABEL_30;
  }
  v72 = (unsigned int *)&enum case for IdentityDocumentElement.RetentionIntent.doNotRetain(_:);
LABEL_31:
  v73 = *v72;
  v74 = type metadata accessor for IdentityDocumentElement.RetentionIntent(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 104))(a2, v73, v74);
  return sub_100008030((uint64_t)v23, &qword_100633FD0);
}

_QWORD *sub_1000E0CFC(void (*a1)(uint64_t *__return_ptr, _QWORD *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int isUniquelyReferenced_nonNull_native;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *result;
  _QWORD v37[4];
  char v38;
  uint64_t v39;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v7 = (_BYTE *)(a3 + 64);
  v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    v9 = *v7;
    v10 = *((_QWORD *)v7 - 2);
    v11 = *((_QWORD *)v7 - 1);
    v12 = *((_QWORD *)v7 - 3);
    v37[0] = *((_QWORD *)v7 - 4);
    v37[1] = v12;
    v37[2] = v10;
    v37[3] = v11;
    v38 = v9;
    swift_bridgeObjectRetain(v12);
    v13 = swift_bridgeObjectRetain(v11);
    a1(&v39, v37, v13);
    if (v4)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v12);
      return v8;
    }
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v12);
    v14 = v39;
    v15 = *(_QWORD *)(v39 + 16);
    v16 = v8[2];
    v17 = v16 + v15;
    if (__OFADD__(v16, v15))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    if (isUniquelyReferenced_nonNull_native && v17 <= v8[3] >> 1)
    {
      if (*(_QWORD *)(v14 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v16 <= v17)
        v19 = v16 + v15;
      else
        v19 = v16;
      v8 = (_QWORD *)sub_1000E2010(isUniquelyReferenced_nonNull_native, v19, 1, (unint64_t)v8, &qword_100633FC8, (uint64_t (*)(_QWORD))&type metadata accessor for IdentityDocumentElement);
      if (*(_QWORD *)(v14 + 16))
      {
LABEL_15:
        v20 = v8[2];
        v21 = (v8[3] >> 1) - v20;
        v22 = type metadata accessor for IdentityDocumentElement(0);
        if (v21 < v15)
          goto LABEL_30;
        v23 = *(_QWORD *)(v22 - 8);
        v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
        v25 = *(_QWORD *)(v23 + 72);
        v26 = (char *)v8 + v24 + v25 * v20;
        v27 = v14 + v24;
        v28 = v25 * v15;
        v29 = &v26[v28];
        v30 = v27 + v28;
        if (v27 < (unint64_t)v29 && (unint64_t)v26 < v30)
          goto LABEL_32;
        swift_arrayInitWithCopy(v26);
        if (v15)
        {
          v32 = v8[2];
          v33 = __OFADD__(v32, v15);
          v34 = v32 + v15;
          if (v33)
            goto LABEL_31;
          v8[2] = v34;
        }
        goto LABEL_4;
      }
    }
    if (v15)
      goto LABEL_29;
LABEL_4:
    swift_bridgeObjectRelease(v14);
    v7 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease(a3);
      return v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E0F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10004BC5C(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig);
  v1 = v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  v2 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_elementsToIntentToStore));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_usageDescription
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride
                                      + 8));
  sub_1000E1F9C(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData), *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData + 8), *(void **)(v0 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData + 16));
  return v0;
}

uint64_t sub_1000E1018()
{
  uint64_t v0;

  sub_1000E0F54();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E103C()
{
  return type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder(0);
}

uint64_t type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder(uint64_t a1)
{
  uint64_t result;

  result = qword_100633EE8;
  if (!qword_100633EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentDisplayConfigurationBuilder);
  return result;
}

uint64_t sub_1000E1080(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = &value witness table for Builtin.BridgeObject[8];
  result = type metadata accessor for DigitalPresentmentCallingClientConfig(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ISO18013KnownDocTypes(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &value witness table for Builtin.BridgeObject[8];
      v5[4] = &unk_100524250;
      v5[5] = &unk_100524250;
      v5[6] = &unk_100524250;
      v5[7] = &unk_100524268;
      result = swift_updateClassMetadata2(a1, 256, 8, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1000E1134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;

  v19 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v20 = v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingAppData;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_BYTE *)(v20 + 32) = 0;
  *(_QWORD *)(v19 + 16) = a1;
  sub_1000E6D24(a2, v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_callingClientConfig);
  v21 = (_QWORD *)(v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_passID);
  *v21 = a3;
  v21[1] = a4;
  v22 = v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_documentType;
  v23 = type metadata accessor for ISO18013KnownDocTypes(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a5, v23);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_elementsToIntentToStore) = a6;
  v25 = (_QWORD *)(v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_usageDescription);
  *v25 = a7;
  v25[1] = a8;
  v26 = (_QWORD *)(v19 + OBJC_IVAR____TtC8coreidvd45DigitalPresentmentDisplayConfigurationBuilder_merchantNameOverride);
  *v26 = a10;
  v26[1] = a11;
  *a9 = v19;
  return result;
}

_QWORD *sub_1000E1254@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF6FC(a1);
}

void sub_1000E1274(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  unint64_t v43;
  uint64_t *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  char *v131;
  __n128 v132;
  char *v133;
  uint64_t v134;
  int64_t v135;
  char *v136;
  int v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(void);
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;

  v127 = a2;
  v143 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v143 - 8);
  v4 = __chkstk_darwin(v143);
  v124 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v125 = (char *)&v119 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v119 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v119 - v11;
  v13 = type metadata accessor for IdentityElement(0);
  v153 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v150 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for IdentityIntentToStore(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v123 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v126 = (char *)&v119 - v20;
  v21 = __chkstk_darwin(v19);
  v138 = (char *)&v119 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v119 - v24;
  __chkstk_darwin(v23);
  v154 = (char *)&v119 - v26;
  v27 = sub_100004828(&qword_100630AD0);
  v28 = __chkstk_darwin(v27);
  v149 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v148 = (uint64_t)&v119 - v30;
  v31 = sub_100004828(&qword_100633FD0);
  v32 = __chkstk_darwin(v31);
  v128 = (uint64_t)&v119 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v140 = (char *)&v119 - v35;
  __chkstk_darwin(v34);
  v144 = *(void (**)(void))(v16 + 56);
  v145 = (uint64_t)&v119 - v36;
  v144();
  v37 = *(_QWORD *)(a1 + 64);
  v130 = a1 + 64;
  v38 = 1 << *(_BYTE *)(a1 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v41 = (unint64_t)(v38 + 63) >> 6;
  v147 = enum case for IdentityElement.ageIsOver(_:);
  v137 = enum case for IdentityElement.age(_:);
  v120 = v41 - 1;
  v42 = swift_bridgeObjectRetain(a1);
  v43 = 0;
  v135 = v41;
  v121 = v41 - 5;
  v146 = a1;
  v122 = a1 + 104;
  v44 = (uint64_t *)v150;
  v42.n128_u64[0] = 134218242;
  v132 = v42;
  v131 = (char *)&type metadata for Any + 8;
  v42.n128_u64[0] = 136315138;
  v129 = v42;
  v142 = v3;
  v134 = v16;
  v141 = v12;
  v139 = v13;
  v133 = v10;
  v136 = v25;
  while (1)
  {
    if (v40)
    {
      v151 = (v40 - 1) & v40;
      v152 = v43;
      v49 = __clz(__rbit64(v40)) | (v43 << 6);
      v50 = v153;
      v51 = v149;
LABEL_10:
      v52 = v146;
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v51, *(_QWORD *)(v146 + 48) + *(_QWORD *)(v50 + 72) * v49, v13);
      v53 = *(_QWORD *)(v52 + 56) + *(_QWORD *)(v16 + 72) * v49;
      v54 = sub_100004828(&qword_100630AE8);
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(&v51[*(int *)(v54 + 48)], v53, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v51, 0, 1, v54);
      v44 = (uint64_t *)v150;
      goto LABEL_17;
    }
    v55 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      return;
    }
    v51 = v149;
    if (v55 >= v135)
    {
      v57 = v43;
    }
    else
    {
      v56 = *(_QWORD *)(v130 + 8 * v55);
      if (v56)
        goto LABEL_14;
      v57 = v43 + 1;
      if ((uint64_t)(v43 + 2) < v135)
      {
        v56 = *(_QWORD *)(v130 + 8 * (v43 + 2));
        if (v56)
        {
          v55 = v43 + 2;
LABEL_14:
          v151 = (v56 - 1) & v56;
          v152 = v55;
          v49 = __clz(__rbit64(v56)) + (v55 << 6);
          v50 = v153;
          goto LABEL_10;
        }
        v57 = v43 + 2;
        if ((uint64_t)(v43 + 3) < v135)
        {
          v56 = *(_QWORD *)(v130 + 8 * (v43 + 3));
          if (v56)
          {
            v55 = v43 + 3;
            goto LABEL_14;
          }
          v55 = v43 + 4;
          v57 = v43 + 3;
          if ((uint64_t)(v43 + 4) < v135)
          {
            v56 = *(_QWORD *)(v130 + 8 * v55);
            if (v56)
              goto LABEL_14;
            while (v121 != v43)
            {
              v56 = *(_QWORD *)(v122 + 8 * v43++);
              if (v56)
              {
                v55 = v43 + 4;
                goto LABEL_14;
              }
            }
            v57 = v120;
          }
        }
      }
    }
    v58 = sub_100004828(&qword_100630AE8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v51, 1, 1, v58);
    v151 = 0;
    v152 = v57;
LABEL_17:
    v59 = (uint64_t)v51;
    v60 = v148;
    sub_1000A1F54(v59, v148, &qword_100630AD0);
    v61 = sub_100004828(&qword_100630AE8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v60, 1, v61) == 1)
      break;
    v62 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v154, v60 + *(int *)(v61 + 48), v15);
    v63 = v153;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v153 + 32))(v44, v60, v13);
    v64 = (*(uint64_t (**)(uint64_t *, uint64_t))(v63 + 88))(v44, v13);
    if ((_DWORD)v64 == v147)
    {
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t))(v63 + 96))(v44, v13);
      v66 = *v44;
      defaultLogger()(v65);
      v67 = v138;
      v68 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v138, v62, v15);
      v69 = v10;
      v70 = v16;
      v71 = Logger.logObject.getter(v68);
      v72 = static os_log_type_t.debug.getter(v71);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = swift_slowAlloc(22, -1);
        v74 = swift_slowAlloc(32, -1);
        v156 = v74;
        *(_DWORD *)v73 = v132.n128_u32[0];
        *(_QWORD *)(v73 + 4) = v66;
        *(_WORD *)(v73 + 12) = 2080;
        v75 = sub_100004790(&qword_100633FD8, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityIntentToStore, (uint64_t)&protocol conformance descriptor for IdentityIntentToStore);
        v76 = dispatch thunk of CustomStringConvertible.description.getter(v15, v75);
        v78 = v77;
        *(_QWORD *)(v73 + 14) = sub_1000E3AC8(v76, v77, &v156);
        swift_bridgeObjectRelease(v78);
        v45 = *(void (**)(char *, uint64_t))(v70 + 8);
        v45(v67, v15);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "IdentityDocumentDescriptor lookupIntentToStore: found ageIsOver %ld with intent %s", (uint8_t *)v73, 0x16u);
        swift_arrayDestroy(v74, 1, v131);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v73, -1, -1);
      }
      else
      {
        v45 = *(void (**)(char *, uint64_t))(v70 + 8);
        v45(v67, v15);
      }

      (*(void (**)(char *, uint64_t))(v142 + 8))(v69, v143);
      v16 = v70;
      v10 = v69;
      v13 = v139;
      v46 = (uint64_t)v140;
      v25 = v136;
      v47 = v154;
      v48 = v145;
      IdentityIntentToStore.merge(with:)(v145);
      v45(v47, v15);
      sub_100008030(v48, &qword_100633FD0);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v144)(v46, 0, 1, v15);
      sub_1000A1F54(v46, v48, &qword_100633FD0);
      v12 = v141;
LABEL_6:
      v44 = (uint64_t *)v150;
      goto LABEL_7;
    }
    if ((_DWORD)v64 == v137)
    {
      defaultLogger()(v64);
      v79 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v25, v154, v15);
      v80 = v16;
      v81 = Logger.logObject.getter(v79);
      v82 = static os_log_type_t.debug.getter(v81);
      v83 = v12;
      if (os_log_type_enabled(v81, v82))
      {
        v84 = swift_slowAlloc(12, -1);
        v85 = swift_slowAlloc(32, -1);
        v156 = v85;
        *(_DWORD *)v84 = v129.n128_u32[0];
        v86 = sub_100004790(&qword_100633FD8, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityIntentToStore, (uint64_t)&protocol conformance descriptor for IdentityIntentToStore);
        v87 = dispatch thunk of CustomStringConvertible.description.getter(v15, v86);
        v89 = v88;
        *(_QWORD *)(v84 + 4) = sub_1000E3AC8(v87, v88, &v156);
        swift_bridgeObjectRelease(v89);
        v90 = *(void (**)(char *, uint64_t))(v80 + 8);
        v90(v25, v15);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "IdentityDocumentDescriptor lookupIntentToStore: found age with intent %s", (uint8_t *)v84, 0xCu);
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        swift_slowDealloc(v84, -1, -1);
      }
      else
      {
        v90 = *(void (**)(char *, uint64_t))(v80 + 8);
        v90(v25, v15);
      }

      (*(void (**)(char *, uint64_t))(v142 + 8))(v83, v143);
      v91 = (uint64_t)v140;
      v92 = v145;
      v93 = v154;
      IdentityIntentToStore.merge(with:)(v145);
      v90(v93, v15);
      sub_100008030(v92, &qword_100633FD0);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v144)(v91, 0, 1, v15);
      sub_1000A1F54(v91, v92, &qword_100633FD0);
      v16 = v134;
      v10 = v133;
      v12 = v141;
      v13 = v139;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v154, v15);
    (*(void (**)(uint64_t *, uint64_t))(v153 + 8))(v44, v13);
LABEL_7:
    v40 = v151;
    v43 = v152;
  }
  swift_release(v146);
  v94 = v128;
  sub_100038B24(v145, v128, &qword_100633FD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v94, 1, v15) == 1)
  {
    v95 = sub_100008030(v94, &qword_100633FD0);
    v96 = v124;
    v97 = defaultLogger()(v95);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.debug.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "IdentityDocumentDescriptor lookupAgeIntentToStore: no age element intents to store", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v96, v143);
    sub_100008030(v145, &qword_100633FD0);
    v101 = 1;
    v102 = v127;
  }
  else
  {
    v103 = *(char **)(v16 + 32);
    v104 = v126;
    v105 = ((uint64_t (*)(char *, uint64_t, uint64_t))v103)(v126, v94, v15);
    v106 = v125;
    defaultLogger()(v105);
    v107 = v123;
    v108 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v123, v104, v15);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.debug.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = swift_slowAlloc(32, -1);
      v154 = v103;
      v113 = v112;
      v156 = v112;
      *(_DWORD *)v111 = v129.n128_u32[0];
      v114 = sub_100004790(&qword_100633FD8, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityIntentToStore, (uint64_t)&protocol conformance descriptor for IdentityIntentToStore);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v15, v114);
      v117 = v116;
      v155 = sub_1000E3AC8(v115, v116, &v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v111 + 4);
      swift_bridgeObjectRelease(v117);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v107, v15);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "IdentityDocumentDescriptor lookupAgeIntentToStore: using final age intent to store %s", v111, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      v118 = v113;
      v103 = v154;
      swift_slowDealloc(v118, -1, -1);
      swift_slowDealloc(v111, -1, -1);

      (*(void (**)(char *, uint64_t))(v142 + 8))(v125, v143);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v107, v15);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v106, v143);
    }
    sub_100008030(v145, &qword_100633FD0);
    v102 = v127;
    ((void (*)(uint64_t, char *, uint64_t))v103)(v127, v126, v15);
    v101 = 0;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v144)(v102, v101, 1, v15);
}

void sub_1000E1F9C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

  }
}

uint64_t sub_1000E1FCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_1000E0210(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_1000E1FE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634068, (uint64_t (*)(_QWORD))&type metadata accessor for IQSignal);
}

uint64_t sub_1000E1FFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_10062FCC0, (uint64_t (*)(_QWORD))&type metadata accessor for IQCType);
}

uint64_t sub_1000E2010(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004828(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000E7BEC(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000E221C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634060, (uint64_t (*)(_QWORD))&type metadata accessor for IQACode);
}

_QWORD *sub_1000E2230(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_1006340D8);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E691C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E2358(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100640CA0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E6738(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2464(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_1006340E8, (uint64_t (*)(_QWORD))&type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement);
}

_QWORD *sub_1000E2478(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E25CC(a1, a2, a3, a4, &qword_100633FE0);
}

_QWORD *sub_1000E2484(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E2800(a1, a2, a3, a4, (uint64_t *)&unk_100636900, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1000E6A10);
}

_QWORD *sub_1000E2498(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634128);
      v11 = (_QWORD *)swift_allocObject(v10, 112 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 112);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[14 * v8 + 4])
          memmove(v13, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E6B14(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E25C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E25CC(a1, a2, a3, a4, &qword_1006340C8);
}

_QWORD *sub_1000E25CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100004828(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E6C08(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E26C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E25CC(a1, a2, a3, a4, &qword_1006340C0);
}

_QWORD *sub_1000E26CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634058);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E6D68(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E27D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634048, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentElement);
}

_QWORD *sub_1000E27EC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E2800(a1, a2, a3, a4, &qword_100633FF0, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1000E6E58);
}

_QWORD *sub_1000E2800(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100004828(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v17, a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E2914(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634038);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E6F40(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2A20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634010, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege);
}

uint64_t sub_1000E2A34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100633FF8, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege);
}

uint64_t sub_1000E2A48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2A70(a1, a2, a3, a4, &qword_100634028, &qword_100634030);
}

uint64_t sub_1000E2A5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2A70(a1, a2, a3, a4, &qword_100634020, &qword_100630DE8);
}

uint64_t sub_1000E2A70(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004828(a5);
  v14 = *(_QWORD *)(sub_100004828(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100004828(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000E7714(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000E2C7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634090, type metadata accessor for MobileDocumentReaderAuthenticationSession);
}

uint64_t sub_1000E2C90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634018, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code);
}

_QWORD *sub_1000E2CA4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634078);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E7048(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E2DB0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634168);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E6828(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2ED0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2A70(a1, a2, a3, a4, &qword_100634150, &qword_100634158);
}

_QWORD *sub_1000E2EE4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E2EF8(a1, a2, a3, a4, &qword_100634180);
}

_QWORD *sub_1000E2EF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100004828(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 32 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 1;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 5);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[4 * v9 + 4])
          memmove(v15, a4 + 4, 32 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E7B00(0, v9, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E3010(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E2EF8(a1, a2, a3, a4, &qword_100634178);
}

uint64_t sub_1000E3024(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2A70(a1, a2, a3, a4, &qword_100634170, &qword_100636740);
}

_QWORD *sub_1000E3038(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634148);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E7228(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E315C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634130);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E731C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E3268(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634108);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E7518(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E3374(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634118);
      v11 = (_QWORD *)swift_allocObject(v10, 496 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 496);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[62 * v8 + 4])
          memmove(v13, a4 + 4, 496 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E7424(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E349C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2A70(a1, a2, a3, a4, &qword_1006340F0, &qword_100630278);
}

_QWORD *sub_1000E34B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_1006340F8);
      v11 = (_QWORD *)swift_allocObject(v10, 288 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 288);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[36 * v8 + 4])
          memmove(v13, a4 + 4, 288 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E7620(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E35D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634100);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000E7138(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E36E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_1006340E0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E782C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000E3800(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_100634070);
      v11 = (_QWORD *)swift_allocObject(v10, 184 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 184);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[23 * v8 + 4])
          memmove(v13, a4 + 4, 184 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E7920(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E3928(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634198, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_1000E393C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_1006340A0, type metadata accessor for ActionRequest);
}

_QWORD *sub_1000E3950(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004828(&qword_1006341A0);
      v11 = (_QWORD *)swift_allocObject(v10, 104 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[13 * v8 + 4])
          memmove(v13, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000E7A10(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E3A78(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634008, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleRestriction);
}

uint64_t sub_1000E3A8C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634000, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.AAMVADrivingPrivilege.VehicleEndorsement);
}

_QWORD *sub_1000E3AA0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000E2EF8(a1, a2, a3, a4, &qword_100634140);
}

uint64_t sub_1000E3AB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000E2010(a1, a2, a3, a4, &qword_100634188, type metadata accessor for DIPPregeneratedAssessment);
}

uint64_t sub_1000E3AC8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000E3B98(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10002EDBC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10002EDBC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v12);
  return v7;
}

uint64_t sub_1000E3B98(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000E3D50(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000E3D50(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000E3DE4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000E4034(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000E4034(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000E3DE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1000E3F58(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1000E3F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100004828(&qword_100633FE0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000E3FBC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_1000E4034(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100633FE0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4180(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E45F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E419C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E4760(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E41B8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E48C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E41D4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634198, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_1000E4200(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100633FC8, (uint64_t (*)(_QWORD))&type metadata accessor for IdentityDocumentElement);
  *v3 = result;
  return result;
}

uint64_t sub_1000E422C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E4BD4(a1, a2, a3, *v3, &qword_100634058);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E4258(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E4A4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000E4274(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634048, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentElement);
  *v3 = result;
  return result;
}

uint64_t sub_1000E42A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E4BD4(a1, a2, a3, *v3, &qword_100634050);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E42CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E4D40(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E42E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E4EC0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E4304(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E5034(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E4320(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E5194(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E433C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E531C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E4358(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000E5478(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000E4374(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E55D4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000E4390(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_10062FC90, (uint64_t (*)(_QWORD))&type metadata accessor for IQComplexSignal);
  *v3 = result;
  return result;
}

uint64_t sub_1000E43BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634068, (uint64_t (*)(_QWORD))&type metadata accessor for IQSignal);
  *v3 = result;
  return result;
}

uint64_t sub_1000E43E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634060, (uint64_t (*)(_QWORD))&type metadata accessor for IQACode);
  *v3 = result;
  return result;
}

uint64_t sub_1000E4414(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634098, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderIdentityKeyResponse.StatusItem);
  *v3 = result;
  return result;
}

uint64_t sub_1000E4440(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000E5944(a1, a2, a3, (_QWORD *)*v3, &qword_100634088, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentReaderCertificateResponse.StatusItem);
  *v3 = result;
  return result;
}

uint64_t sub_1000E446C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_1006340D0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100004828(&qword_10062FCD8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E45F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_1006341A8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4760(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100640CA0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E48C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634190);
    v11 = (char *)swift_allocObject(v10, 152 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 152);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[152 * v8])
      memmove(v13, v14, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[152 * v8] || v13 >= &v14[152 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4A4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634038);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_100004828(&qword_100634040);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4BD4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100004828(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4D40(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634168);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E4EC0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634160);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E5034(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1003BEABC();
    v11 = (char *)swift_allocObject(v10, ((*(unsigned int *)(v10 + 48) + 7) & 0x1FFFFFFF8) + 8 * v9, *(unsigned __int16 *)(v10 + 52) | 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E5194(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634128);
    v11 = (char *)swift_allocObject(v10, 112 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[112 * v8])
      memmove(v13, v14, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[112 * v8] || v13 >= &v14[112 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E531C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_100634120);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E5478(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_1006340A8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E55D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004828(&qword_1006340B0);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100004828(&qword_1006340B8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E575C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100004828((uint64_t *)&unk_100640C70);
  v11 = *(_QWORD *)(sub_100004828(&qword_100634080) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100004828(&qword_100634080);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E5944(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100004828(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E5B24(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1000E5BC4(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1000E5CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v0 = type metadata accessor for IdentityDocumentElementCategory.PresentmentElementGroup(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  IdentityDocumentElementCategory.storage.getter(v2);
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.ageAtLeast(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v1 + 96))(v4, v0);
    v6 = *v4;
    v7 = sub_100004828(&qword_100633FE8);
    v8 = *(_QWORD *)(type metadata accessor for IdentityElement(0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = (v9 + 32) & ~v9;
    v11 = swift_allocObject(v7, v10 + *(_QWORD *)(v8 + 72), v9 | 7);
    *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
    *(_QWORD *)(v11 + v10) = v6;
    v12 = *(void (**)(void))(v8 + 104);
LABEL_27:
    v12();
    return (_QWORD *)v11;
  }
  if (v5 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.name(_:))
  {
    if (v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.dateOfBirth(_:))
    {
LABEL_26:
      v24 = sub_100004828(&qword_100633FE8);
      v25 = *(_QWORD *)(type metadata accessor for IdentityElement(0) - 8);
      v11 = swift_allocObject(v24, ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72), *(unsigned __int8 *)(v25 + 80) | 7);
      *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
      v12 = *(void (**)(void))(v25 + 104);
      goto LABEL_27;
    }
    if (v5 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.birthYear(_:))
    {
      if (v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.age(_:)
        || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.sex(_:))
      {
        goto LABEL_26;
      }
      v21 = v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.height(_:)
         || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.weight(_:);
      v22 = v21 || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.eyeColor(_:);
      if (!v22 && v5 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.hairColor(_:))
      {
        if (v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.address(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.city(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.state(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.postalCode(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.country(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentNumber(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.issuingAuthority(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentIssueDate(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.expirationDate(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.documentDHSComplianceStatus(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.portrait(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.drivingPrivileges(_:)
          || v5 == enum case for IdentityDocumentElementCategory.PresentmentElementGroup.individualNumber(_:))
        {
          goto LABEL_26;
        }
        if (v5 != enum case for IdentityDocumentElementCategory.PresentmentElementGroup.veteranStatus(_:))
          (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
      }
    }
    return _swiftEmptyArrayStorage;
  }
  v13 = sub_100004828(&qword_100633FE8);
  v14 = type metadata accessor for IdentityElement(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v11 = swift_allocObject(v13, v18 + 2 * v16, v17 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1005208D0;
  v19 = v11 + v18;
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104);
  v20(v19, enum case for IdentityElement.givenName(_:), v14);
  v20(v19 + v16, enum case for IdentityElement.familyName(_:), v14);
  return (_QWORD *)v11;
}

uint64_t sub_1000E6458(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  uint64_t result;
  int64_t v16;
  int v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;

  v37 = a3;
  v38 = a4;
  v36 = a2;
  v6 = type metadata accessor for IdentityDocumentElementCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v35 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v34 = (char *)&v29 - v10;
  v11 = type metadata accessor for IdentityDocumentElement(0);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  __chkstk_darwin(v11);
  v39 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (char *)_swiftEmptyArrayStorage;
  if (!v13)
    return (uint64_t)v14;
  v40 = v4;
  v41 = (char *)_swiftEmptyArrayStorage;
  sub_1000E4200(0, v13, 0);
  result = sub_1000E5B24(a1);
  v16 = result;
  v18 = v17;
  v20 = v19 & 1;
  v30 = v6;
  v31 = a1 + 56;
  v29 = v7;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v31 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_17;
    if (*(_DWORD *)(a1 + 36) != v18)
      goto LABEL_18;
    v21 = a1;
    v22 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v16;
    v23 = v34;
    (*(void (**)(char *, int64_t, uint64_t))(v7 + 16))(v34, v22, v6);
    v14 = v35;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v35, v23, v6);
    v24 = v40;
    sub_1000E0484((uint64_t)v14, v36, v37);
    v40 = v24;
    if (v24)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      swift_release(v41);
      return (uint64_t)v14;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    v14 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    {
      sub_1000E4200(0, *((_QWORD *)v14 + 2) + 1, 1);
      v14 = v41;
    }
    a1 = v21;
    v26 = *((_QWORD *)v14 + 2);
    v25 = *((_QWORD *)v14 + 3);
    if (v26 >= v25 >> 1)
    {
      sub_1000E4200(v25 > 1, v26 + 1, 1);
      v14 = v41;
    }
    *((_QWORD *)v14 + 2) = v26 + 1;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v14[((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v26], v39, v33);
    v41 = v14;
    result = sub_1000E5BC4(v16, v18, v20 & 1, v21);
    v16 = result;
    v18 = v27;
    v20 = v28 & 1;
    --v13;
    v7 = v29;
    v6 = v30;
    if (!v13)
    {
      sub_1000E6D18(result, v27, v28 & 1);
      return (uint64_t)v14;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000E6738(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E6828(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E691C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E6A10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      type metadata accessor for DIAttributeImageEncoding(0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E6B14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 112 * a1 + 32;
  v6 = a3 + 112 * v4;
  if (v5 >= v6 || v5 + 112 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000E6C08(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E6CF0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000E6D18(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000E6D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E6D68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000E6E58(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E6F40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_100004828(&qword_100634040);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7048(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7138(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7228(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E731C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100004828(&qword_100634138);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7424(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 496 * a1 + 32;
  v6 = a3 + 496 * v4;
  if (v5 >= v6 || v5 + 496 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7518(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100004828(&qword_100634110);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7620(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 288 * a1 + 32;
  v6 = a3 + 288 * v4;
  if (v5 >= v6 || v5 + 288 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7714(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_100004828(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E782C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7920(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 184 * a1 + 32;
  v6 = a3 + 184 * v4;
  if (v5 >= v6 || v5 + 184 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7A10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 104 * a1 + 32;
  v6 = a3 + 104 * v4;
  if (v5 >= v6 || v5 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7B00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000E7BEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E7D04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _OWORD v12[3];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for SESKeystore(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = SESKeystore.init()();
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v4 = qword_1006702A0;
  v5 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 52;
  os_unfair_lock_lock(v5 + 52);
  sub_100139D14(v6, v4, v12);
  os_unfair_lock_unlock(v7);
  v8 = v13;
  swift_retain(v13);
  sub_10001D410(v12);
  v15 = type metadata accessor for MobileDocumentReaderDataContainer();
  v16 = sub_100004790((unint64_t *)&qword_10062FF70, (uint64_t (*)(uint64_t))type metadata accessor for MobileDocumentReaderDataContainer, (uint64_t)&unk_100535988);
  *(_QWORD *)&v14 = v8;
  v9 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  v10 = swift_allocObject(v9, 64, 7);
  *(_QWORD *)(v10 + 16) = v3;
  result = sub_100008018(&v14, v10 + 24);
  a1[3] = v9;
  a1[4] = (uint64_t)&off_100607EA0;
  *a1 = v10;
  return result;
}

uint64_t sub_1000E7E38(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v14;

  v4 = type metadata accessor for Milestone(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MobileDocumentReaderSession.State(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for MobileDocumentReaderSession.State.finished(_:))
    goto LABEL_2;
  if (v12 == enum case for MobileDocumentReaderSession.State.ready(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderReady.getter();
LABEL_9:
    Milestone.log()();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return a2(a1);
  }
  if (v12 == enum case for MobileDocumentReaderSession.State.connecting(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderConnecting.getter();
    goto LABEL_9;
  }
  if (v12 == enum case for MobileDocumentReaderSession.State.awaitingApproval(_:))
  {
    static MobileDocumentReaderMilestone.readDocumentReaderAwaitingApproval.getter();
    goto LABEL_9;
  }
LABEL_2:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a2(a1);
}

uint64_t sub_1000E7FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  ValueWitnessTable *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void *v47;
  id v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _UNKNOWN **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD v134[5];
  __int128 v135;
  __int128 v136;
  _UNKNOWN **v137;
  uint64_t v138;
  uint64_t v139[4];
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v2 = v1;
  v128 = type metadata accessor for Logger(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v125 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for BundleRecordFetcher(0);
  v121 = *(uint64_t **)(v130 - 8);
  v5 = __chkstk_darwin(v130);
  v7 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v117 - v8;
  v10 = type metadata accessor for AuditToken(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_defaultActor_initialize(v2, v14);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask) = 0;
  FeatureFlagProvider.init()(v15);
  v124 = v11;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v16(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_auditToken, a1, v10);
  v17 = type metadata accessor for MobileDocumentReaderIssuerRootStorage();
  v135 = 0u;
  v136 = 0u;
  v137 = 0;
  swift_allocObject(v17, 24, 7);
  v18 = sub_10010F248((uint64_t)&v135);
  v120 = v2;
  v19 = (uint64_t *)(v2 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage);
  v19[3] = v17;
  v19[4] = (uint64_t)&off_1006087F8;
  v118 = v19;
  *v19 = v18;
  v119 = (uint64_t *)v13;
  v126 = a1;
  v129 = v10;
  v122 = v16;
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v16)(v13, a1, v10);
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  BundleRecordFetcher.init()(v20);
  sub_1000E7D04(v139);
  v133 = 0;
  v132 = 0u;
  v131 = 0u;
  v21 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(&v135, v21);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v22 = (void *)qword_1006707A8;
  v138 = qword_1006707A8;
  v134[3] = &type metadata for FairPlayProvisioner;
  v134[4] = &off_10060C020;
  v134[0] = swift_allocObject(&unk_100607CB8, 64, 7);
  sub_1000EECFC((uint64_t)&v135, v134[0] + 16);
  v23 = type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  v24 = swift_allocObject(v23, 104, 7);
  v25 = sub_10001E624((uint64_t)v134, (uint64_t)&type metadata for FairPlayProvisioner);
  __chkstk_darwin(v25);
  v27 = (_OWORD *)((char *)&v117 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  ((void (*)(uint64_t, uint64_t))v28->initializeWithCopy)((uint64_t)v27, v29);
  v30 = v22;
  v31 = sub_1000EEFAC((uint64_t)&v131, v27, v24);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v134);
  sub_1000EF248((uint64_t)&v135);
  v32 = type metadata accessor for MobileDocumentReaderLogoFetcher();
  v33 = swift_allocObject(v32, 16, 7);
  v34 = type metadata accessor for Date(0);
  v123 = v21;
  static DIPAccountManager.sharedInstance.getter(&v135, v34);
  v35 = (void *)qword_1006707A8;
  v138 = qword_1006707A8;
  v36 = sub_10001E624((uint64_t)v139, v139[3]);
  __chkstk_darwin(v36);
  v38 = (uint64_t *)((char *)&v117 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v39 + 16))(v38);
  sub_1000EECFC((uint64_t)&v135, (uint64_t)&v131);
  v40 = *v38;
  v41 = v121;
  v42 = v130;
  ((void (*)(char *, char *, uint64_t))v121[2])(v7, v9, v130);
  v43 = v35;
  swift_retain(v31);
  swift_retain(v33);
  v44 = sub_1000EF5C4((uint64_t)v119, (uint64_t)v7, v40, v31, v33, (uint64_t)&v140, v34, (uint64_t)&protocol witness table for Date, &v131);
  ((void (*)(char *, uint64_t))v41[1])(v9, v42);
  sub_1000EF248((uint64_t)&v135);
  swift_release(v31);
  swift_release(v33);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v139);
  v45 = v120;
  v46 = (uint64_t *)(v120 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager);
  v46[3] = type metadata accessor for MobileDocumentReaderAuthenticationManager(0);
  v46[4] = (uint64_t)&off_100607150;
  *v46 = v44;
  v47 = (void *)objc_opt_self(NSUserDefaults);
  v48 = objc_msgSend(v47, "standardUserDefaults");
  v49 = String._bridgeToObjectiveC()();
  v50 = objc_msgSend(v48, "stringForKey:", v49);

  if (v50)
  {
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    if (v51 == 0x797469746E656469 && v53 == 0xED0000747365742DLL)
    {
      swift_bridgeObjectRelease(0xED0000747365742DLL);
LABEL_8:
      v55 = type metadata accessor for SimulatedMobileDocumentReaderManager();
      v56 = (_QWORD *)swift_allocObject(v55, 24, 7);
      v57 = sub_100004828(&qword_1006343C8);
      v58 = swift_allocObject(v57, 36, 7);
      *(_DWORD *)(v58 + 32) = 0;
      *(_QWORD *)(v58 + 16) = nullsub_7;
      *(_QWORD *)(v58 + 24) = 0;
      v56[2] = v58;
      v59 = &off_100608AB0;
      goto LABEL_10;
    }
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xED0000747365742DLL, v51, v53, 0);
    swift_bridgeObjectRelease(v53);
    if ((v54 & 1) != 0)
      goto LABEL_8;
  }
  sub_10002581C((uint64_t)v46, (uint64_t)&v135);
  sub_10002581C((uint64_t)v118, (uint64_t)&v131);
  v60 = type metadata accessor for MobileDocumentReaderBluetoothManager();
  v61 = swift_allocObject(v60, 112, 15);
  swift_defaultActor_initialize(v61, v62);
  v63 = type metadata accessor for MobileDocumentReaderNFCManager();
  v64 = swift_allocObject(v63, 112, 15);
  swift_defaultActor_initialize(v64, v65);
  v66 = type metadata accessor for SecureTransactionServiceManager();
  v67 = swift_allocObject(v66, 136, 15);
  swift_defaultActor_initialize(v67, v68);
  *(_BYTE *)(v67 + 112) = 0;
  *(_QWORD *)(v67 + 120) = 0;
  v69 = sub_100004828(&qword_1006343C8);
  v70 = swift_allocObject(v69, 36, 7);
  *(_DWORD *)(v70 + 32) = 0;
  *(_QWORD *)(v70 + 16) = nullsub_7;
  *(_QWORD *)(v70 + 24) = 0;
  *(_QWORD *)(v67 + 128) = v70;
  sub_1000E8BE8(&v140);
  v71 = sub_10001E624((uint64_t)&v140, *((uint64_t *)&v141 + 1));
  v121 = &v117;
  __chkstk_darwin(v71);
  v73 = (uint64_t *)((char *)&v117 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v74 + 16))(v73);
  v75 = sub_10001E624((uint64_t)&v135, *((uint64_t *)&v136 + 1));
  v119 = &v117;
  __chkstk_darwin(v75);
  v77 = (uint64_t *)((char *)&v117 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v78 + 16))(v77);
  v79 = sub_10001E624((uint64_t)&v131, *((uint64_t *)&v132 + 1));
  __chkstk_darwin(v79);
  v81 = (uint64_t **)((char *)&v117 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t **))(v82 + 16))(v81);
  v83 = *v73;
  v84 = *v77;
  v85 = *v81;
  swift_retain(v61);
  swift_retain(v64);
  v56 = sub_1000EF958(v61, v64, v67, v83, v84, v85);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v131);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v135);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v140);
  swift_release(v61);
  swift_release(v64);
  v59 = &off_100618F68;
LABEL_10:
  v86 = (_QWORD *)(v45 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager);
  *v86 = v56;
  v86[1] = v59;
  v87 = type metadata accessor for BiometricsHelper(0);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  v88 = BiometricsHelper.init()();
  v89 = (uint64_t *)(v45 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager);
  v89[3] = v87;
  v89[4] = (uint64_t)&protocol witness table for BiometricsHelper;
  *v89 = v88;
  v90 = type metadata accessor for MobileDocumentReaderRequestValidator(0);
  *((_QWORD *)&v136 + 1) = v90;
  v137 = &off_100616D80;
  v91 = sub_100022234(&v135);
  v92 = v126;
  v93 = v129;
  v122((uint64_t)v91, v126, v129);
  v94 = (_QWORD *)((char *)v91 + *(int *)(v90 + 20));
  v94[3] = v130;
  v94[4] = &protocol witness table for BundleRecordFetcher;
  v95 = sub_100022234(v94);
  BundleRecordFetcher.init()(v95);
  *(_QWORD *)((char *)v91 + *(int *)(v90 + 24)) = objc_msgSend(v47, "standardUserDefaults");
  sub_100008018(&v135, v45 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator);
  v96 = type metadata accessor for MobileDocumentReaderTermsAndConditionsFetcher();
  v97 = swift_allocObject(v96, 24, 7);
  *((_QWORD *)&v136 + 1) = &type metadata for BootstrapURLManager;
  v137 = &off_1006176C0;
  v98 = type metadata accessor for DIPConfigWebService();
  v99 = (_QWORD *)swift_allocObject(v98, 64, 7);
  v100 = sub_10001E624((uint64_t)&v135, (uint64_t)&type metadata for BootstrapURLManager);
  __chkstk_darwin(v100);
  (*(void (**)(void))(v101 + 16))();
  v102 = sub_1000EED38(v99);
  v103 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v135);
  *(_QWORD *)(v97 + 16) = v102;
  v104 = (uint64_t *)(v45 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher);
  v104[3] = v96;
  v104[4] = (uint64_t)&off_1006181A0;
  *v104 = v97;
  static DIPAccountManager.sharedInstance.getter(&v135, v103);
  v105 = sub_100008018(&v135, v45 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager);
  v106 = v125;
  defaultLogger()(v105);
  v107 = swift_retain_n(v45, 2);
  v108 = Logger.logObject.getter(v107);
  v110 = static os_log_type_t.info.getter(v108, v109);
  if (os_log_type_enabled(v108, v110))
  {
    v111 = swift_slowAlloc(22, -1);
    v112 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v135 = v112;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v131 = v45;
    v113 = String.init<A>(describing:)(&v131, &type metadata for ObjectIdentifier);
    v115 = v114;
    *(_QWORD *)&v131 = sub_1000E3AC8(v113, v114, (uint64_t *)&v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v111 + 4);
    swift_release_n(v45, 2);
    swift_bridgeObjectRelease(v115);
    *(_WORD *)(v111 + 12) = 2080;
    *(_QWORD *)&v131 = sub_1000E3AC8(0xD000000000000011, 0x80000001005479A0, (uint64_t *)&v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v111 + 14);
    _os_log_impl((void *)&_mh_execute_header, v108, v110, "MobileDocumentReaderFlow %s %s", (uint8_t *)v111, 0x16u);
    swift_arrayDestroy(v112, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v111, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v92, v129);
  }
  else
  {
    swift_release_n(v45, 2);

    (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v92, v93);
  }
  (*(void (**)(char *, uint64_t))(v127 + 8))(v106, v128);
  return v45;
}

uint64_t sub_1000E8BE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  v33 = a1;
  v32 = type metadata accessor for ISO18013DeviceAuthenticator(0);
  __chkstk_darwin(v32);
  v2 = (uint64_t *)((char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for DIPOIDVerifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = sub_100004828(&qword_10062FC40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for COSESignatureValidator(0);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v15 = v14(v12, 1, 1, v13);
  DIPOIDVerifier.init()(v15);
  v16 = type metadata accessor for Date(0);
  v17 = type metadata accessor for ISO18013IssuerAuthenticator(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v19 = sub_1000EF27C((uint64_t)v12, (uint64_t)v7, v16, (uint64_t)&protocol witness table for Date, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  v14(v12, 1, 1, v13);
  sub_1001B2E98((uint64_t)v12, v2);
  v20 = v32;
  v35 = v32;
  v36 = &off_10060A988;
  v21 = sub_100022234(v34);
  sub_100035DE8((uint64_t)v2, (uint64_t)v21, type metadata accessor for ISO18013DeviceAuthenticator);
  v22 = type metadata accessor for ISO18013ResponseValidator();
  v23 = (_QWORD *)swift_allocObject(v22, 72, 7);
  v24 = sub_10001E624((uint64_t)v34, v35);
  __chkstk_darwin(v24);
  v26 = (char *)&v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  v23[7] = v20;
  v23[8] = &off_10060A988;
  v28 = sub_100022234(v23 + 4);
  sub_100038AE0((uint64_t)v26, (uint64_t)v28, type metadata accessor for ISO18013DeviceAuthenticator);
  v23[2] = v19;
  v23[3] = &off_100604F68;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v34);
  result = sub_100035DAC((uint64_t)v2, type metadata accessor for ISO18013DeviceAuthenticator);
  v30 = v33;
  v33[3] = v22;
  v30[4] = &off_100607810;
  *v30 = v23;
  return result;
}

uint64_t sub_1000E8E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v4);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v23 = v2;
    v12 = v11;
    v13 = swift_slowAlloc(64, -1);
    v24 = v1;
    v25 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = String.init<A>(describing:)(&v24, &type metadata for ObjectIdentifier);
    v16 = v15;
    v24 = sub_1000E3AC8(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v12 + 12) = 2080;
    v24 = sub_1000E3AC8(0x74696E696564, 0xE600000000000000, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "MobileDocumentReaderFlow %s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v23);
  }
  else
  {

    swift_release_n(v1, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v17 = v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_auditToken;
  v18 = type metadata accessor for AuditToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask));
  swift_unknownObjectRelease(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1
                                                       + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage));
  v19 = v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_featureFlagProvider;
  v20 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_defaultActor_destroy(v1);
  return v1;
}

uint64_t sub_1000E9174()
{
  uint64_t v0;

  sub_1000E8E94();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000E918C()
{
  return type metadata accessor for MobileDocumentReaderFlow(0);
}

uint64_t type metadata accessor for MobileDocumentReaderFlow(uint64_t a1)
{
  uint64_t result;

  result = qword_100634228;
  if (!qword_100634228)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MobileDocumentReaderFlow);
  return result;
}

uint64_t sub_1000E91D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  result = type metadata accessor for AuditToken(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1005242D8;
    v5[3] = &unk_1005242F0;
    v5[4] = &unk_100524308;
    v5[5] = &unk_100524308;
    v5[6] = &unk_100524308;
    v5[7] = &unk_100524308;
    v5[8] = &unk_100524308;
    v5[9] = &unk_100524308;
    result = type metadata accessor for FeatureFlagProvider(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 11, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1000E928C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[7] = v0;
  v2 = type metadata accessor for Milestone(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[12] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v6);
  v1[14] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000E9324, v0, 0);
}

uint64_t sub_1000E9324(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1[7];
  defaultLogger()(a1);
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.info.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v23 = v1[12];
    v24 = v1[11];
    v25 = v1[14];
    v7 = v1[7];
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v26 = v9;
    *(_DWORD *)v8 = 136315394;
    v1[4] = v7;
    v10 = String.init<A>(describing:)(v1 + 4, &type metadata for ObjectIdentifier);
    v12 = v11;
    v1[5] = sub_1000E3AC8(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v8 + 4);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v7, 2);
    *(_WORD *)(v8 + 12) = 2080;
    v1[6] = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v8 + 14);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "MobileDocumentReaderFlow %s %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8);
    v14 = v13(v25, v24);
  }
  else
  {
    v15 = v1[14];
    v16 = v1[11];
    v17 = v1[12];
    swift_release_n(v1[7], 2);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    v14 = v13(v15, v16);
  }
  v1[15] = v13;
  v19 = v1[9];
  v18 = v1[10];
  v20 = v1[8];
  static MobileDocumentReaderMilestone.readerIdentifierCalled.getter(v14);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  v21 = (_QWORD *)swift_task_alloc(dword_100634264);
  v1[16] = v21;
  *v21 = v1;
  v21[1] = sub_1000E958C;
  return sub_1000EB9DC(0xD00000000000001ALL, 0x8000000100544680, 145);
}

uint64_t sub_1000E958C()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000E961C, v2[7], 0);
  v6 = v2[13];
  v5 = v2[14];
  v7 = v2[10];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000E961C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(_QWORD *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_100632DEC);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1000E967C;
  return sub_1000A81B0();
}

uint64_t sub_1000E967C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v3 + 136);
  v5 = *v3;
  *(_QWORD *)(v5 + 144) = a1;
  *(_QWORD *)(v5 + 152) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1000E9718, *(_QWORD *)(v5 + 56), 0);
  v6 = *(_QWORD *)(v5 + 104);
  v7 = *(_QWORD *)(v5 + 80);
  swift_task_dealloc(*(_QWORD *)(v5 + 112));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000E9718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  v2 = *(_QWORD *)(v1 + 152);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v7 = *(_QWORD *)(v1 + 144);
    v6 = *(_QWORD *)(v1 + 152);
    v17 = *(_QWORD *)(v1 + 104);
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v16 = *(_QWORD *)(v1 + 88);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v7, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v8 + 14);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "MobileDocumentReaderFlow %s returning %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v18(v17, v16);
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v11 = *(_QWORD *)(v1 + 104);
    v12 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 152), 2);

    v10(v11, v12);
  }
  v13 = *(_QWORD *)(v1 + 104);
  v14 = *(_QWORD *)(v1 + 80);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_1000E992C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[108] = v2;
  v3[107] = a2;
  v3[106] = a1;
  v4 = type metadata accessor for Date(0);
  v3[109] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[110] = v5;
  v3[111] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v3[112] = v6;
  v3[113] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Milestone(0);
  v3[114] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[115] = v8;
  v3[116] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MobileDocumentReaderConfiguration(0);
  v3[117] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[118] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[119] = swift_task_alloc(v11);
  v3[120] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v3[121] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[122] = v13;
  v3[123] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E9A40, v2, 0);
}

uint64_t sub_1000E9A40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1[120];
  v3 = v1[118];
  v4 = v1[117];
  v5 = v1[108];
  v6 = v1[107];
  defaultLogger()(a1);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v6, v4);
  v8 = swift_retain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.info.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v37 = v1[122];
    v38 = v1[121];
    v39 = v1[123];
    v34 = v1[120];
    v12 = v1[119];
    v35 = v1[118];
    v13 = v1[117];
    v14 = v1[108];
    v15 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(96, -1);
    v40 = v36;
    *(_DWORD *)v15 = 136315650;
    v1[87] = v14;
    v16 = String.init<A>(describing:)(v1 + 87, &type metadata for ObjectIdentifier);
    v18 = v17;
    v1[93] = sub_1000E3AC8(v16, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 93, v1 + 94, v15 + 4);
    swift_bridgeObjectRelease(v18);
    swift_release_n(v14, 2);
    *(_WORD *)(v15 + 12) = 2080;
    v1[99] = sub_1000E3AC8(0x2865726170657270, 0xEE00293A68746977, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 99, v1 + 100, v15 + 14);
    *(_WORD *)(v15 + 22) = 2080;
    v7(v12, v34, v13);
    v19 = String.init<A>(describing:)(v12, v13);
    v21 = v20;
    v1[105] = sub_1000E3AC8(v19, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 105, v1 + 106, v15 + 24);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "MobileDocumentReaderFlow %s %s Configuration: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v23 = v1[123];
    v24 = v1[122];
    v25 = v1[121];
    v26 = v1[120];
    v27 = v1[118];
    v28 = v1[117];
    swift_release_n(v1[108], 2);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);

    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  v29 = v1[116];
  v30 = v1[115];
  v31 = v1[114];
  static MobileDocumentReaderMilestone.prepareCalled.getter(v22);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  v32 = (_QWORD *)swift_task_alloc(dword_100634264);
  v1[124] = v32;
  *v32 = v1;
  v32[1] = sub_1000E9D88;
  return sub_1000EB9DC(0x2865726170657270, 0xEE00293A68746977, 160);
}

uint64_t sub_1000E9D88()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 992);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000E9E4C, v2[108], 0);
  v5 = v2[123];
  v6 = v2[120];
  v7 = v2[119];
  v8 = v2[116];
  v9 = v2[113];
  v10 = v2[111];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000E9E4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[108];
  swift_retain_n(v1, 2);
  swift_asyncLet_begin(v0 + 2, 0, (char *)&type metadata for () + 8, &unk_100634418, v1);
  v2 = (uint64_t **)swift_task_alloc(dword_10063426C);
  v0[125] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1000E9ED8;
  return sub_1000EC3F0(v0[113], v0[107]);
}

uint64_t sub_1000E9ED8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1000);
  *(_QWORD *)(*v1 + 1008) = v0;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(sub_1000EA0D0, *(_QWORD *)(v2 + 864), 0);
  else
    return swift_asyncLet_get_throwing(v2 + 16);
}

uint64_t sub_1000E9F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 1016) = v0;
  if (v0)
    v2 = sub_1000EA184;
  else
    v2 = sub_1000E9F7C;
  return swift_task_switch(v2, *(_QWORD *)(v1 + 864), 0);
}

uint64_t sub_1000E9F7C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v1 = (char *)v0[113];
  v2 = v0[111];
  v3 = *(_QWORD *)v1;
  v4 = *((_QWORD *)v1 + 1);
  (*(void (**)(uint64_t, char *, _QWORD))(v0[110] + 16))(v2, &v1[*(int *)(v0[112] + 48)], v0[109]);
  v5 = swift_bridgeObjectRetain(v4);
  MobileDocumentReaderConfigurationResponse.init(sessionIdentifier:sessionExpirationDate:)(v3, v4, v2, v5);
  sub_100035DAC((uint64_t)v1, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  return swift_asyncLet_finish(v0 + 2);
}

uint64_t sub_1000EA02C()
{
  uint64_t v0;

  return swift_task_switch(sub_1000EA040, *(_QWORD *)(v0 + 864), 0);
}

uint64_t sub_1000EA040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 960);
  v3 = *(_QWORD *)(v0 + 952);
  v4 = *(_QWORD *)(v0 + 928);
  v5 = *(_QWORD *)(v0 + 904);
  v6 = *(_QWORD *)(v0 + 888);
  swift_release_n(*(_QWORD *)(v0 + 864), 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA0D0()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_1000EA0E4()
{
  uint64_t v0;

  return swift_task_switch(sub_1000EA0F8, *(_QWORD *)(v0 + 864), 0);
}

uint64_t sub_1000EA0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release_n(*(_QWORD *)(v0 + 864), 2);
  v1 = *(_QWORD *)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(_QWORD *)(v0 + 904);
  v5 = *(_QWORD *)(v0 + 888);
  swift_task_dealloc(*(_QWORD *)(v0 + 984));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA184()
{
  uint64_t v0;

  sub_100035DAC(*(_QWORD *)(v0 + 904), type metadata accessor for MobileDocumentReaderAuthenticationSession);
  return swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_1000EA1D0()
{
  uint64_t v0;

  return swift_task_switch(sub_1000EA1E4, *(_QWORD *)(v0 + 864), 0);
}

uint64_t sub_1000EA1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release_n(*(_QWORD *)(v0 + 864), 2);
  v1 = *(_QWORD *)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 928);
  v4 = *(_QWORD *)(v0 + 904);
  v5 = *(_QWORD *)(v0 + 888);
  swift_task_dealloc(*(_QWORD *)(v0 + 984));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(sub_1000EA288, 0, 0);
}

uint64_t sub_1000EA288()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage), *(_QWORD *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage+ 24));
  v1 = (_QWORD *)swift_task_alloc(dword_100635334);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1000EA2E8;
  return sub_100110314();
}

uint64_t sub_1000EA2E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000EA330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v4[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100632D50);
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v4[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[17] = v11;
  v4[18] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Milestone(0);
  v4[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[20] = v13;
  v4[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v4[22] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[23] = v15;
  v4[24] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EA458, v3, 0);
}

uint64_t sub_1000EA458(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1[8];
  defaultLogger()(a1);
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.info.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = v1[23];
    v23 = v1[22];
    v24 = v1[24];
    v8 = v1[8];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v25 = v10;
    *(_DWORD *)v9 = 136315394;
    v1[2] = v8;
    v11 = String.init<A>(describing:)(v1 + 2, &type metadata for ObjectIdentifier);
    v13 = v12;
    v1[3] = sub_1000E3AC8(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v9 + 4);
    swift_bridgeObjectRelease(v13);
    swift_release_n(v8, 2);
    *(_WORD *)(v9 + 12) = 2080;
    v1[4] = sub_1000E3AC8(0x746E61686372656DLL, 0xEE00293A726F6628, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "MobileDocumentReaderFlow %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v24, v23);
  }
  else
  {
    v16 = v1[23];
    v15 = v1[24];
    v17 = v1[22];
    swift_release_n(v1[8], 2);

    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  v19 = v1[20];
  v18 = v1[21];
  v20 = v1[19];
  static MobileDocumentReaderMilestone.merchantCalled.getter(v14);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  v21 = (_QWORD *)swift_task_alloc(dword_100634264);
  v1[25] = v21;
  *v21 = v1;
  v21[1] = sub_1000EA6B8;
  return sub_1000EB9DC(0x746E61686372656DLL, 0xEE00293A726F6628, 186);
}

uint64_t sub_1000EA6B8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000EA778, v2[8], 0);
  v5 = v2[24];
  v6 = v2[21];
  v7 = v2[18];
  v9 = v2[14];
  v8 = v2[15];
  v10 = v2[11];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000EA778()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10000806C((_QWORD *)(v0[8] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(_QWORD *)(v0[8] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  v1 = (uint64_t **)swift_task_alloc(dword_100632D4C);
  v0[26] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000EA7E4;
  return sub_1000ADF00(v0[15], v0[6], v0[7]);
}

uint64_t sub_1000EA7E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EABE8;
  else
    v4 = sub_1000EA848;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1000EA848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v1 = v0[16];
  v2 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[17] + 48))(v2, 1, v1) == 1)
  {
    v3 = v0[13];
    v4 = v0[14];
    v5 = v0[11];
    v6 = v0[12];
    v7 = v0[10];
    v46 = v0[9];
    v9 = v0[6];
    v8 = (void *)v0[7];
    sub_100008030(v2, &qword_100632D50);
    type metadata accessor for DaemonAnalytics(0);
    v10 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.sessionMissing(_:);
    v11 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v4, v10, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v4, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v6);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(v4);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v6);
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(0xE000000000000000);
    v12._countAndFlagsBits = v9;
    v12._object = v8;
    String.append(_:)(v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for DIPError.Code.documentReaderMissingSession(_:), v46);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100547C40, 0, v5, 0, v13, 0xD000000000000072, 0x80000001005479C0, 0x746E61686372656DLL, 0xEE00293A726F6628, 190);
    swift_willThrow(v16);
    v17 = v0[21];
    v18 = v0[18];
    v20 = v0[14];
    v19 = v0[15];
    v21 = v0[11];
    swift_task_dealloc(v0[24]);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    v22 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v23 = v0[18];
    sub_100038AE0(v2, v23, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v24 = (uint64_t *)(v23 + *(int *)(v1 + 44));
    v25 = v24[1];
    if (v25)
    {
      v26 = v0[18];
      v27 = v0[5];
      v28 = *v24;
      v29 = *(int *)(v0[16] + 36);
      v30 = (uint64_t *)(v26 + *(int *)(v0[16] + 40));
      v31 = *v30;
      v32 = v30[1];
      v33 = *(_QWORD *)(v26 + v29);
      v34 = *(_QWORD *)(v26 + v29 + 8);
      swift_bridgeObjectRetain_n(v25, 2);
      sub_100028034(v31, v32);
      v35 = swift_bridgeObjectRetain(v34);
      MobileDocumentReaderMerchant.init(name:logoData:identifier:)(v28, v25, v31, v32, v33, v34, v35);
      v36 = type metadata accessor for MobileDocumentReaderMerchant(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v27, 0, 1, v36);
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      v37 = v0[5];
      v38 = type metadata accessor for MobileDocumentReaderMerchant(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
    }
    v39 = v0[24];
    v40 = v0[21];
    v41 = v0[18];
    v43 = v0[14];
    v42 = v0[15];
    v44 = v0[11];
    sub_100035DAC(v41, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    v22 = (uint64_t (*)(void))v0[1];
  }
  return v22();
}

uint64_t sub_1000EABE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EAC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MobileDocumentReaderDeviceEngagementType(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v4[11] = v9;
  v4[12] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MobileDocumentReaderRequest(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[15] = v12;
  v4[16] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_10062FEC0);
  v4[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Milestone(0);
  v4[18] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[19] = v15;
  v4[20] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EAD6C, v3, 0);
}

uint64_t sub_1000EAD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 40);
  static MobileDocumentReaderMilestone.readDocumentCalled.getter();
  Milestone.log()();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v6 = v5(v1, v3);
  v7 = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  *(_QWORD *)(v0 + 168) = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  if (*(_QWORD *)(v4 + v7))
  {
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);
    static MobileDocumentReaderMilestone.readDocumentInProgress.getter(v6);
    Milestone.log()();
    v5(v8, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.documentReadingAlreadyInProgress(_:), v12);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100547BF0, 0, v10, 0, v13, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000022, 0x8000000100547C10, 222);
    swift_willThrow(v16);
    v18 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 112);
    v26 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v44 = v26;
    v45 = *(_QWORD *)(v0 + 88);
    v46 = *(_QWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 72);
    v43 = v23;
    v47 = *(_QWORD *)(v0 + 40);
    v48 = v22;
    v28 = *(_QWORD *)(v0 + 24);
    v41 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v0 + 32);
    v29 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v22, 1, 1, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v28, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v26, v42, v27);
    v30 = sub_100004790(&qword_100634400, type metadata accessor for MobileDocumentReaderFlow, (uint64_t)&unk_100524320);
    v31 = *(unsigned __int8 *)(v24 + 80);
    v32 = (v31 + 40) & ~v31;
    v33 = *(unsigned __int8 *)(v41 + 80);
    v34 = (v46 + v33 + v32) & ~v33;
    v35 = (char *)swift_allocObject(&unk_100607CE0, v34 + v45, v31 | v33 | 7);
    *((_QWORD *)v35 + 2) = v47;
    *((_QWORD *)v35 + 3) = v30;
    *((_QWORD *)v35 + 4) = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(&v35[v32], v43, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(&v35[v34], v44, v27);
    swift_retain_n(v47, 2);
    v36 = sub_10012E180(v48, (uint64_t)&unk_100634408, (uint64_t)v35);
    *(_QWORD *)(v0 + 176) = v36;
    v37 = *(_QWORD *)(v4 + v7);
    *(_QWORD *)(v4 + v7) = v36;
    swift_retain(v36);
    swift_release(v37);
    v38 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 184) = v38;
    v39 = type metadata accessor for MobileDocumentReaderResponse(0);
    v40 = sub_100004828((uint64_t *)&unk_100633430);
    *v38 = v0;
    v38[1] = sub_1000EB0F8;
    return Task.value.getter(*(_QWORD *)(v0 + 16), v36, v39, v40, &protocol self-conformance witness table for Error);
  }
}

uint64_t sub_1000EB0F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EB1EC;
  else
    v4 = sub_1000EB15C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1000EB15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v8 + v2);
  *(_QWORD *)(v8 + v2) = 0;
  swift_release(v1);
  swift_release(v9);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v6, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000022, 0x8000000100547C10, 241);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  v10 = *(_QWORD *)(v5 + v3);
  *(_QWORD *)(v5 + v3) = 0;
  swift_release(v2);
  swift_release(v10);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = type metadata accessor for Milestone(0);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v6[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_100634264);
  v6[9] = v9;
  *v9 = v6;
  v9[1] = sub_1000EB3FC;
  return sub_1000EB9DC(0xD000000000000022, 0x8000000100547C10, 226);
}

uint64_t sub_1000EB3FC()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v6;

  v2 = *v1;
  v3 = (*v1)[9];
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_task_dealloc(v2[8]);
    return ((uint64_t (*)(void))v4[1])();
  }
  else
  {
    v6 = (uint64_t **)swift_task_alloc(dword_100634274);
    v2[10] = (uint64_t)v6;
    *v6 = v4;
    v6[1] = (uint64_t *)sub_1000EB484;
    return sub_1000ECDB8(v2[4]);
  }
}

uint64_t sub_1000EB484()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000EB4F4, *(_QWORD *)(v2 + 24), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 64));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000EB4F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)(v0[3] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager);
  v2 = v1[1];
  ObjectType = swift_getObjectType(*v1);
  v4 = *(int **)(v2 + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_1000EB584;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[2], v0[4], v0[5], ObjectType, v2);
}

uint64_t sub_1000EB584()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000EB5F4, *(_QWORD *)(v2 + 24), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 64));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000EB5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  static MobileDocumentReaderMilestone.readDocumentReturningResponse.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB654()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Milestone(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EB6DC, v0, 0);
}

uint64_t sub_1000EB6DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  static MobileDocumentReaderMilestone.cancelReadCalled.getter();
  Milestone.log()();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[9] = v4;
  v4(v1, v3);
  v5 = (_QWORD *)swift_task_alloc(dword_100634264);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_1000EB774;
  return sub_1000EB9DC(0x65526C65636E6163, 0xEC00000029286461, 249);
}

uint64_t sub_1000EB774()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000EB7F0, v2[2], 0);
  v5 = v2[8];
  v6 = v2[5];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000EB7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_readDocumentTask);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 40);
    type metadata accessor for MobileDocumentReaderResponse(0);
    swift_retain(v3);
    sub_100004828((uint64_t *)&unk_100633430);
    Task.cancel()();
    swift_release(v3);
    v6 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;
    swift_release(v6);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 24);
    v12 = *(_QWORD *)(v0 + 32);
    static MobileDocumentReaderMilestone.noReadInProgressToCancel.getter();
    Milestone.log()();
    v8(v7, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v9, enum case for DIPError.Code.unexpectedDaemonState(_:), v11);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100547BB0, 0, v9, 0, v13, 0xD000000000000072, 0x80000001005479C0, 0x65526C65636E6163, 0xEC00000029286461, 253);
    swift_willThrow(v16);
    v17 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v17);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[38] = a3;
  v4[39] = v3;
  v4[36] = a1;
  v4[37] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[40] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[41] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[42] = swift_task_alloc(v7);
  v4[43] = swift_task_alloc(v7);
  v8 = type metadata accessor for DIPError.Code(0);
  v4[44] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[45] = v9;
  v4[46] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_1006335E0);
  v4[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  v4[48] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[49] = v12;
  v4[50] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EBAC4, v3, 0);
}

uint64_t sub_1000EBAC4()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x8000000100547B20;
  v2._countAndFlagsBits = 0xD000000000000031;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 296);
    defaultLogger()(v4);
    v6 = swift_bridgeObjectRetain_n(v5, 2);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.info.getter(v7, v8);
    v10 = os_log_type_enabled(v7, v9);
    v11 = *(_QWORD *)(v0 + 344);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v0 + 328);
    v14 = *(_QWORD *)(v0 + 296);
    if (v10)
    {
      v15 = *(_QWORD *)(v0 + 288);
      v30 = *(_QWORD *)(v0 + 320);
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = v11;
      v17 = swift_slowAlloc(32, -1);
      v31 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(v14);
      *(_QWORD *)(v0 + 280) = sub_1000E3AC8(v15, v14, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v16 + 4);
      swift_bridgeObjectRelease_n(v14, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "MobileDocumentReaderFlow %s region check disabled.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v29, v30);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 296), 2);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    v22 = *(_QWORD *)(v0 + 368);
    v23 = *(_QWORD *)(v0 + 376);
    v25 = *(_QWORD *)(v0 + 336);
    v24 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v18 = qword_1006702A0;
    v19 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v20 = (uint64_t)&v19[4];
    v21 = v19 + 52;
    os_unfair_lock_lock(v19 + 52);
    sub_100139D14(v20, v18, (_OWORD *)(v0 + 16));
    os_unfair_lock_unlock(v21);
    sub_10002581C(v0 + 16, v0 + 208);
    sub_10001D410((_QWORD *)(v0 + 16));
    v26 = sub_10000806C((_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232));
    static Locale.current.getter(v26);
    *(_QWORD *)(v0 + 408) = *v26;
    v27 = (_QWORD *)swift_task_alloc(dword_100635144);
    *(_QWORD *)(v0 + 416) = v27;
    *v27 = v0;
    v27[1] = sub_1000EBDFC;
    return sub_1001082A0();
  }
}

uint64_t sub_1000EBDFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[39];
    (*(void (**)(_QWORD, _QWORD))(v2[49] + 8))(v2[50], v2[48]);
    v5 = sub_1000EC0AC;
    v6 = v4;
  }
  else
  {
    v5 = sub_1000EBE78;
    v6 = 0;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000EBE78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD **)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 312);
  v6 = v1[5];
  v7 = v1[6];
  sub_10000806C(v1 + 2, v6);
  *(_BYTE *)(v0 + 432) = dispatch thunk of MobileDocumentReaderSupportChecking.isLocaleSupported(_:)(v2, v6, v7) & 1;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch(sub_1000EBF0C, v5, 0);
}

uint64_t sub_1000EBF0C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_BYTE *)(v0 + 432);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 208));
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 376);
    v5 = *(_QWORD *)(v0 + 336);
    v4 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 368);
    v7 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 288);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 104))(v6, enum case for DIPError.Code.regionNotSupported(_:), *(_QWORD *)(v0 + 352));
    swift_bridgeObjectRetain(v7);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v11, v12, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100547B90, 0, v6, 0, v10, 0xD000000000000072, 0x80000001005479C0, v9, v7, v8);
    swift_willThrow(v13);
    v15 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 376);
    v17 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 208));
  swift_getErrorValue(v1, v0 + 272, v0 + 248);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v6 = *(_QWORD *)(v0 + 376);
  if (v5 == 1)
  {
    v7 = sub_100008030(*(_QWORD *)(v0 + 376), &qword_1006335E0);
LABEL_5:
    v12 = *(_QWORD *)(v0 + 424);
    v22 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    v23 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 288);
    defaultLogger()(v7);
    DIPRecordError(_:message:log:)(v12, 0xD00000000000002ELL, 0x8000000100547B60, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for DIPError.Code.documentReaderUnableToCheckRegionSupport(_:), v23);
    swift_bridgeObjectRetain(v27);
    swift_errorRetain(v12);
    v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v29, v30, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100547B60, v12, v21, 1, v28, 0xD000000000000072, 0x80000001005479C0, v37, v27, v36);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(v9 + 88))(*(_QWORD *)(v0 + 376), v8);
  v11 = enum case for DIPError.Code.networkTimeOut(_:);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  if (v10 != v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 288);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 352));
  swift_bridgeObjectRetain(v14);
  swift_errorRetain(v12);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v18, v19, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100547B60, v12, v13, 0, v17, 0xD000000000000072, 0x80000001005479C0, v16, v14, v15);
LABEL_6:
  swift_willThrow(v20);
  swift_errorRelease(v12);
  v32 = *(_QWORD *)(v0 + 368);
  v31 = *(_QWORD *)(v0 + 376);
  v34 = *(_QWORD *)(v0 + 336);
  v33 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError(0);
  v3[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[18] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v11);
  v3[20] = swift_task_alloc(v11);
  v3[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000EC4D0, v2, 0);
}

uint64_t sub_1000EC4D0()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10000806C((_QWORD *)(v0[9] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(_QWORD *)(v0[9] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  v1 = (uint64_t **)swift_task_alloc(dword_100632D6C);
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000EC538;
  return sub_1000AA2A4(v0[7], v0[8]);
}

uint64_t sub_1000EC538()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*v1 + 176);
  v3 = *v1;
  *(_QWORD *)(v3 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000EC5FC, *(_QWORD *)(v3 + 72), 0);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(_QWORD *)(v3 + 152);
  v8 = *(_QWORD *)(v3 + 120);
  v7 = *(_QWORD *)(v3 + 128);
  v9 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 168));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000EC5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  swift_errorRetain(v1);
  v4 = sub_100004828((uint64_t *)&unk_100633430);
  if (!swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v22 = *(_QWORD *)(v0 + 112);
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    v23 = *(void (**)(uint64_t, _QWORD, _QWORD))(v22 + 104);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v0 + 160);
  v53 = *(_QWORD *)(v0 + 144);
  v54 = *(_QWORD *)(v0 + 136);
  v55 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(v53 + 32))(v5, *(_QWORD *)(v0 + 168));
  DIPError.code.getter(v10);
  v11 = enum case for DIPError.Code.topekaTermsAndConditionsAcceptanceRequired(_:);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104);
  *(_QWORD *)(v0 + 192) = v12;
  v52 = v12;
  v12(v6, v11, v9);
  v13 = sub_100004790(&qword_1006343F0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
  dispatch thunk of RawRepresentable.rawValue.getter(v9, v13);
  dispatch thunk of RawRepresentable.rawValue.getter(v9, v13);
  v14 = *(_QWORD *)(v0 + 24);
  v15 = *(_QWORD *)(v0 + 32);
  v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v6, v9);
  v16(v7, v9);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
  *(_QWORD *)(v0 + 200) = v17;
  v18 = v17(v55, v5, v54);
  v20 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 152);
  if (v14 != v15)
  {
    v56 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    DIPError.code.getter(v18);
    v52(v25, enum case for DIPError.Code.topekaMobileDocumentReaderTermsAndConditionsAcceptanceRequired(_:), v26);
    dispatch thunk of RawRepresentable.rawValue.getter(v26, v13);
    dispatch thunk of RawRepresentable.rawValue.getter(v26, v13);
    v27 = *(_QWORD *)(v0 + 40);
    v28 = *(_QWORD *)(v0 + 48);
    v16(v25, v26);
    v16(v24, v26);
    v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v21(v19, v56);
    if (v27 == v28)
      goto LABEL_6;
    v21(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    v23 = v52;
LABEL_10:
    v41 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 128);
    v42 = *(_QWORD *)(v0 + 136);
    v23(v43, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
    swift_errorRetain(v41);
    v44 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v45 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v42, v45, 0, 0);
    v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100547B00, v41, v43, 0, v44, 0xD000000000000072, 0x80000001005479C0, 0xD00000000000001DLL, 0x80000001005442F0, 302);
    swift_willThrow(v46);
    swift_errorRelease(v41);
    v47 = *(_QWORD *)(v0 + 160);
    v48 = *(_QWORD *)(v0 + 152);
    v50 = *(_QWORD *)(v0 + 120);
    v49 = *(_QWORD *)(v0 + 128);
    v51 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v21(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
LABEL_6:
  *(_QWORD *)(v0 + 208) = v21;
  v29 = swift_errorRelease(*(_QWORD *)(v0 + 184));
  v30 = defaultLogger()(v29);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.info.getter(v31, v32);
  if (os_log_type_enabled(v31, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "MobileDocumentReaderFlow terms and conditions acceptance required", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }
  v36 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  sub_10000806C((_QWORD *)(v38 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher), *(_QWORD *)(v38 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_termsAndConditionsFetcher + 24));
  v39 = (_QWORD *)swift_task_alloc(dword_100641C2C);
  *(_QWORD *)(v0 + 216) = v39;
  *v39 = v0;
  v39[1] = sub_1000ECA6C;
  return sub_100443914();
}

uint64_t sub_1000ECA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 216);
  *(_QWORD *)(*(_QWORD *)v3 + 224) = v2;
  swift_task_dealloc(v7);
  v8 = v6[9];
  if (v2)
  {
    v9 = sub_1000ECD28;
  }
  else
  {
    v6[29] = a2;
    v6[30] = a1;
    v9 = sub_1000ECAE4;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1000ECAE4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, _QWORD, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 232);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  v31 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v30 = swift_allocError(v5, v8, 0, 0);
  v2(v9, v4, v5);
  v3(v6, enum case for DIPError.Code.documentReaderTermsAndConditionsAcceptanceRequired(_:), v7);
  v10 = sub_100004828((uint64_t *)&unk_1006325A0);
  v11 = sub_100004828((uint64_t *)&unk_100633440);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_10051FFB0;
  v17 = v16 + v15;
  v18 = (_QWORD *)(v17 + *(int *)(v11 + 48));
  v19 = enum case for DIPError.PropertyKey.termsAndConditions(_:);
  v20 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v17, v19, v20);
  v18[3] = &type metadata for MobileDocumentReaderTermsAndConditions;
  *v18 = v1;
  v18[1] = v29;
  v21 = sub_10011D314(v16);
  swift_allocError(v5, v8, 0, 0);
  v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v30, v6, 1, v21, 0xD000000000000072, 0x80000001005479C0, 0xD00000000000001DLL, 0x80000001005442F0, 300);
  swift_willThrow(v22);
  v31(v4, v5);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ECD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ECDB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus(0);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100632D50);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v2[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[18] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v8);
  v2[20] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v2[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[22] = v10;
  v2[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MobileDocumentReaderRequest(0);
  v2[24] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[25] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v13);
  v2[27] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v2[28] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[29] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v16);
  v2[31] = swift_task_alloc(v16);
  v17 = type metadata accessor for DIPSignpost.Config(0);
  v2[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost(0);
  v2[33] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[34] = v19;
  v2[35] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000ECF54, v1, 0);
}

uint64_t sub_1000ECF54()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  Swift::Bool v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t ObjectType;
  int *v46;
  _QWORD *v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82[2];

  v1 = v0;
  v2 = v0 + 11;
  v3 = v0[11];
  v4 = v0[32];
  v5 = v0[27];
  v6 = v0[24];
  v7 = v0[25];
  v8 = v0[12];
  static DaemonSignposts.MobileDocumentReader.canReadDocument.getter();
  v9 = DIPSignpost.init(_:)(v4);
  defaultLogger()(v9);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v10(v5, v3, v6);
  v11 = swift_retain_n(v8, 2);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.info.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v75 = v1[29];
    v77 = v1[28];
    v79 = v1[31];
    v69 = v1[27];
    v71 = v1[25];
    v65 = v1[26];
    v66 = v1[24];
    v67 = v10;
    v15 = v1[12];
    v16 = swift_slowAlloc(32, -1);
    v73 = swift_slowAlloc(96, -1);
    v82[0] = v73;
    *(_DWORD *)v16 = 136315650;
    v1[7] = v15;
    v17 = String.init<A>(describing:)(v1 + 7, &type metadata for ObjectIdentifier);
    v19 = v18;
    v1[8] = sub_1000E3AC8(v17, v18, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v16 + 4);
    swift_bridgeObjectRelease(v19);
    swift_release_n(v15, 2);
    *(_WORD *)(v16 + 12) = 2080;
    v1[9] = sub_1000E3AC8(0xD000000000000017, 0x8000000100547A60, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v16 + 14);
    *(_WORD *)(v16 + 22) = 2080;
    v67(v65, v69, v66);
    v20 = String.init<A>(describing:)(v65, v66);
    v22 = v21;
    v1[10] = sub_1000E3AC8(v20, v21, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v2, v16 + 24);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v66);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "MobileDocumentReaderFlow %s %s Request: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v23 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v23(v79, v77);
  }
  else
  {
    v24 = v1[31];
    v25 = v1[28];
    v26 = v1[29];
    v27 = v1[27];
    v28 = v1[24];
    v29 = v1[25];
    swift_release_n(v1[12], 2);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);

    v23 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v23(v24, v25);
  }
  v30 = (_QWORD *)(v1[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_localAuthenticationManager);
  v32 = v30[3];
  v31 = v30[4];
  sub_10000806C(v30, v32);
  if ((dispatch thunk of LocalAuthenticationManaging.isPasscodeSet.getter(v32, v31) & 1) != 0)
  {
LABEL_9:
    sub_1000EE4E4();
    v43 = (_QWORD *)(v1[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager);
    v44 = v43[1];
    ObjectType = swift_getObjectType(*v43);
    v46 = *(int **)(v44 + 32);
    v80 = (uint64_t (*)(uint64_t, uint64_t))((char *)v46 + *v46);
    v47 = (_QWORD *)swift_task_alloc(v46[1]);
    v1[36] = v47;
    *v47 = v1;
    v47[1] = sub_1000ED660;
    return v80(ObjectType, v44);
  }
  v33 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v34._countAndFlagsBits = 0xD000000000000033;
  v34._object = (void *)0x8000000100547A80;
  v35 = NSUserDefaults.internalBool(forKey:)(v34);

  if (v35)
  {
    v37 = defaultLogger()(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "MobileDocumentReaderFlow passcode is not set. Bypassing this check due to internal setting.", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }
    v41 = v1[30];
    v42 = v1[28];

    v23(v41, v42);
    goto LABEL_9;
  }
  v49 = v1[23];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[22] + 104))(v49, enum case for DIPError.Code.documentReaderPasscodeNotSet(_:), v1[21]);
  v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v51 = type metadata accessor for DIPError(0);
  v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v53 = swift_allocError(v51, v52, 0, 0);
  v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x8000000100547AC0, 0, v49, 0, v50, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 321);
  swift_willThrow(v54);
  v56 = v1[34];
  v55 = v1[35];
  v57 = v1[32];
  v58 = v1[33];
  v59 = v1[31];
  v68 = v1[30];
  v70 = v1[27];
  v60 = v1[23];
  v72 = v1[26];
  v74 = v1[20];
  v76 = v1[19];
  v78 = v1[16];
  v81 = v1[15];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[22] + 104))(v60, enum case for DIPError.Code.internalError(_:), v1[21]);
  swift_errorRetain(v53);
  v61 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v62 = type metadata accessor for DIPError(0);
  v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v62, v63, 0, 0);
  v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100547A40, v53, v60, 0, v61, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 350);
  swift_willThrow(v64);
  swift_errorRelease(v53);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v58);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v60);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1000ED660()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EE2FC;
  else
    v4 = sub_1000ED6C4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_1000ED6C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_10000806C((_QWORD *)(v0[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager), *(_QWORD *)(v0[12] + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_authenticationManager + 24));
  v1 = MobileDocumentReaderRequest.sessionIdentifier.getter();
  v3 = v2;
  v0[38] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_100632D4C);
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_1000ED750;
  return sub_1000ADF00(v0[16], v1, v3);
}

uint64_t sub_1000ED750()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 96);
    v5 = sub_1000EDD88;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 304));
    v5 = sub_1000ED7C4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

void sub_1000ED7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 48))(v2, 1, v1) == 1)
  {
    sub_100008030(v2, &qword_100632D50);
LABEL_22:
    v28 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 104);
    type metadata accessor for DaemonAnalytics(0);
    v33 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.sessionMissing(_:);
    v34 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v30, v33, v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v30, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v32);
    static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(v30);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.documentReaderMissingSession(_:), v29);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v36, v37, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100547AE0, 0, v27, 0, v35, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 340);
    swift_willThrow(v38);
LABEL_23:
    v39 = *(_QWORD *)(v0 + 272);
    v40 = *(_QWORD *)(v0 + 280);
    v46 = *(_QWORD *)(v0 + 264);
    v47 = *(_QWORD *)(v0 + 256);
    v48 = *(_QWORD *)(v0 + 248);
    v49 = *(_QWORD *)(v0 + 240);
    v50 = *(_QWORD *)(v0 + 216);
    v51 = *(_QWORD *)(v0 + 208);
    v41 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 160);
    v53 = *(_QWORD *)(v0 + 152);
    v54 = *(_QWORD *)(v0 + 128);
    v55 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v41, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 168));
    swift_errorRetain(v22);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v43 = type metadata accessor for DIPError(0);
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v43, v44, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100547A40, v22, v41, 0, v42, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 350);
    swift_willThrow(v45);
    swift_errorRelease(v22);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v46);
    swift_task_dealloc(v40);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v41);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v3 = *(_QWORD *)(v0 + 160);
  sub_100038AE0(v2, v3, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  v4 = *(_QWORD *)(v3 + *(int *)(v1 + 28));
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    if (v5)
      goto LABEL_5;
LABEL_21:
    v26 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease(v4);
    sub_100035DAC(v26, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    goto LABEL_22;
  }
  if (v4 < 0)
    v25 = v4;
  else
    v25 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  if (!_CocoaArrayWrapper.endIndex.getter(v25))
    goto LABEL_21;
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
LABEL_8:
    v7 = v6;
    *(_QWORD *)(v0 + 328) = v6;
    v9 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRelease(v4);
    sub_10000806C((_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator), *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_requestValidator + 24));
    type metadata accessor for SecCertificate(0);
    *(_QWORD *)(v0 + 40) = v12;
    *(_QWORD *)(v0 + 48) = &protocol witness table for SecCertificateRef;
    *(_QWORD *)(v0 + 16) = v7;
    v13 = *(_QWORD *)(v8 + *(int *)(v10 + 44) + 8);
    sub_100035DE8(v8, v9, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    v14 = *(_QWORD *)(v0 + 152);
    if (v13)
    {
      v15 = v7;
      sub_100035DAC(v14, type metadata accessor for MobileDocumentReaderAuthenticationSession);
    }
    else
    {
      v16 = (uint64_t *)(v14 + *(int *)(*(_QWORD *)(v0 + 136) + 40));
      v17 = *v16;
      v18 = v16[1];
      v19 = v7;
      sub_100028034(v17, v18);
      sub_100035DAC(v14, type metadata accessor for MobileDocumentReaderAuthenticationSession);
      if (v18 >> 60 == 15)
      {
        v20 = 1;
LABEL_14:
        v21 = *(_QWORD *)(v0 + 320);
        sub_1003F04A4(*(_QWORD *)(v0 + 88), (_QWORD *)(v0 + 16), v20);
        if (!v21)
        {
          v23 = *(_QWORD *)(v0 + 96);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
          sub_10000806C((_QWORD *)(v23 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage), *(_QWORD *)(v23 + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_issuerRootCertificateStorage + 24));
          v24 = (_QWORD *)swift_task_alloc(dword_100635314);
          *(_QWORD *)(v0 + 336) = v24;
          *v24 = v0;
          v24[1] = sub_1000EDF78;
          sub_10010F3E4(*(_QWORD *)(v0 + 88));
          return;
        }
        v22 = v21;
        sub_100035DAC(*(_QWORD *)(v0 + 160), type metadata accessor for MobileDocumentReaderAuthenticationSession);

        _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
        goto LABEL_23;
      }
      sub_100007F78(v17, v18);
    }
    v20 = 0;
    goto LABEL_14;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v4 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1000EDD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 168));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100547A40, v1, v7, 0, v8, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 350);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EDF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 336);
  *(_QWORD *)(*v2 + 344) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 96);
  if (v1)
  {
    v7 = sub_1000EE0F8;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v7 = sub_1000EDFF4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000EDFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 120);

  sub_100035DAC(v9, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 160);

  sub_100035DAC(v1, type metadata accessor for MobileDocumentReaderAuthenticationSession);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 128);
  v20 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 168));
  swift_errorRetain(v2);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100547A40, v2, v8, 0, v9, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 350);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v6);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v8);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 168));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100547A40, v1, v7, 0, v8, 0xD000000000000072, 0x80000001005479C0, 0xD000000000000017, 0x8000000100547A60, 350);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE4E4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, _QWORD, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v70 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v69 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v65 - v5;
  v77 = type metadata accessor for DIPError(0);
  v73 = *(_QWORD *)(v77 - 8);
  v7 = __chkstk_darwin(v77);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v74 = (char *)&v65 - v10;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v72 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v68 = (char *)&v65 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v65 - v18;
  defaultLogger()(v17);
  v78 = v1;
  v20 = swift_retain_n(v1, 2);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.info.getter(v21, v22);
  v24 = os_log_type_enabled(v21, v23);
  v76 = v11;
  v71 = v2;
  if (v24)
  {
    v25 = swift_slowAlloc(22, -1);
    v65 = v12;
    v26 = v25;
    v27 = swift_slowAlloc(64, -1);
    v67 = v9;
    v28 = v27;
    v82 = v27;
    *(_DWORD *)v26 = 136315394;
    v66 = v6;
    v29 = v78;
    v80 = (uint64_t)v78;
    v30 = String.init<A>(describing:)(&v80, &type metadata for ObjectIdentifier);
    v32 = v31;
    v80 = sub_1000E3AC8(v30, v31, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v26 + 4);
    swift_release_n(v29, 2);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v26 + 12) = 2080;
    v80 = sub_1000E3AC8(0x4153486B63656863, 0xEB00000000292832, &v82);
    v6 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v26 + 14);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "MobileDocumentReaderFlow %s %s)", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    v9 = v67;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v33 = *(void (**)(char *, uint64_t))(v65 + 8);
    v33(v19, v76);
  }
  else
  {

    swift_release_n(v78, 2);
    v33 = *(void (**)(char *, uint64_t))(v12 + 8);
    v33(v19, v11);
  }
  v34 = *(_QWORD *)&v78[OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager + 24];
  v35 = *(_QWORD *)&v78[OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager + 32];
  sub_10000806C(&v78[OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_accountManager], v34);
  v36 = v75;
  result = dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(1, v34, v35);
  if (!v36)
    return result;
  v82 = v36;
  swift_errorRetain(v36);
  v38 = sub_100004828((uint64_t *)&unk_100633430);
  v39 = v74;
  if (swift_dynamicCast(v74, &v82, v38, v77, 0))
  {
    v78 = (char *)v33;
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(v9, v39, v77);
    DIPError.code.getter(v40);
    v42 = v69;
    v41 = v70;
    v43 = *(void (**)(char *, _QWORD, uint64_t))(v70 + 104);
    v44 = v71;
    v43(v69, enum case for DIPError.Code.hsa2NotEnabled(_:), v71);
    v45 = sub_100004790(&qword_1006343F0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
    dispatch thunk of RawRepresentable.rawValue.getter(v44, v45);
    dispatch thunk of RawRepresentable.rawValue.getter(v44, v45);
    v47 = v79;
    v46 = v80;
    v48 = *(void (**)(char *, uint64_t))(v41 + 8);
    v48(v42, v44);
    v48(v6, v44);
    if (v46 == v47)
    {
      v49 = swift_errorRelease(v36);
      v50 = v68;
      v51 = defaultLogger()(v49);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.debug.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "MobileDocumentReaderFlow account is signed in, but HSA2 is disabled", v54, 2u);
        swift_slowDealloc(v54, -1, -1);
      }

      ((void (*)(char *, uint64_t))v78)(v50, v76);
      v43(v6, enum case for DIPError.Code.documentReaderHSA2NotEnabled(_:), v71);
      v55 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v56 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v57 = v77;
      swift_allocError(v77, v56, 0, 0);
      v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x7369642032415348, 0xED000064656C6261, 0, v6, 0, v55, 0xD000000000000072, 0x80000001005479C0, 0x4153486B63656863, 0xEB00000000292832, 362);
      swift_willThrow(v58);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v9, v57);
      return swift_errorRelease(v82);
    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v9, v77);
    v33 = (void (*)(char *, uint64_t))v78;
  }
  v59 = swift_errorRelease(v82);
  v60 = v72;
  v61 = defaultLogger()(v59);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "MobileDocumentReaderFlow ignoring account not signed in", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }
  swift_errorRelease(v36);

  return ((uint64_t (*)(char *, uint64_t))v33)(v60, v76);
}

uint64_t sub_1000EEB9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = type metadata accessor for MobileDocumentReaderFlow(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = sub_1000E7FB4(a1);
  *a2 = v5;
  return result;
}

uint64_t sub_1000EEBE8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a1;
  v3[3] = a2;
  v4 = *v2;
  v3[4] = *v2;
  return swift_task_switch(sub_1000EEC04, v4, 0);
}

uint64_t sub_1000EEC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void (*v7)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC8coreidvd24MobileDocumentReaderFlow_mobileDocumentReaderManager);
  v4 = v3[1];
  ObjectType = swift_getObjectType(*v3);
  v6 = swift_allocObject(&unk_100607C90, 32, 7);
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v1;
  v7 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v4 + 16);
  swift_retain(v1);
  v7(sub_1000EECC8, v6, ObjectType, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EECA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EECC8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E7E38(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000EECD0()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000EECFC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FairPlayProvisioner(a2, a1);
  return a2;
}

_QWORD *sub_1000EED38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  _OWORD v31[27];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (_QWORD *)((char *)v30 - v10);
  v30[3] = &type metadata for BootstrapURLManager;
  v30[4] = &off_1006176C0;
  v12 = sub_100004828(&qword_1006343D0);
  v13 = swift_allocObject(v12, 68, 7);
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_DWORD *)(v13 + 64) = 0;
  a1[6] = v13;
  sub_1000EFCF0(v31);
  v14 = sub_100004828(&qword_1006343D8);
  v15 = swift_allocObject(v14, 452, 7);
  *(_DWORD *)(v15 + 448) = 0;
  sub_1000A1F54((uint64_t)v31, v15 + 16, &qword_100632330);
  a1[7] = v15;
  v16 = (_QWORD *)((char *)v11 + v6[6]);
  *v16 = 0x3FF0000000000000;
  v17 = enum case for DIPBackoffStrategy.exponential(_:);
  v18 = type metadata accessor for DIPBackoffStrategy(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  *v11 = 0x403E000000000000;
  v11[1] = 3;
  *((_BYTE *)v11 + v6[7]) = 0;
  *((_BYTE *)v11 + v6[8]) = 0;
  *((_BYTE *)v11 + v6[9]) = 1;
  v19 = (_QWORD *)((char *)v11 + v6[10]);
  *v19 = 0;
  v19[1] = 0;
  v20 = sub_100004828(&qword_1006343E0);
  v21 = swift_allocObject(v20, 60, 7);
  *(_DWORD *)(v21 + 56) = 0;
  v22 = sub_10002581C((uint64_t)v30, v21 + 16);
  a1[2] = v21;
  v23 = UUID.init()(v22);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  a1[3] = v24;
  a1[4] = v26;
  sub_100035DE8((uint64_t)v11, (uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
  v27 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = sub_1004E0CF4((uint64_t)v9);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v30);
  sub_100035DAC((uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  a1[5] = v28;
  return a1;
}

uint64_t sub_1000EEFAC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  __int128 v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _UNKNOWN **v32;
  char *v33;
  uint64_t v35;
  objc_super v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  objc_class *v40;
  _UNKNOWN **v41;
  __int128 v42;
  ValueMetadata *v43;
  _UNKNOWN **v44;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = &type metadata for FairPlayProvisioner;
  v44 = &off_10060C020;
  v13 = (_OWORD *)swift_allocObject(&unk_100607CB8, 64, 7);
  *(_QWORD *)&v42 = v13;
  v14 = a2[1];
  v13[1] = *a2;
  v13[2] = v14;
  v13[3] = a2[2];
  sub_100038B24(a1, (uint64_t)&v37, &qword_1006343E8);
  if (v38)
  {
    sub_100008030(a1, &qword_1006343E8);
    sub_100008018(&v37, (uint64_t)&v39);
    *(_QWORD *)(a3 + 96) = 0;
  }
  else
  {
    sub_100008030((uint64_t)&v37, &qword_1006343E8);
    v15 = (objc_class *)type metadata accessor for IdentitySelfHealer();
    v16 = (char *)objc_allocWithZone(v15);
    v17 = &v16[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    v36.receiver = v16;
    v36.super_class = v15;
    *(_QWORD *)(a3 + 96) = objc_msgSendSuper2(&v36, "init");
    v18 = (char *)v12 + v10[6];
    v19 = enum case for DIPBackoffStrategy.noBackoff(_:);
    v20 = type metadata accessor for DIPBackoffStrategy(0);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
    *v12 = 0x403E000000000000;
    v12[1] = 0;
    *((_BYTE *)v12 + v10[7]) = 0;
    *((_BYTE *)v12 + v10[8]) = 1;
    *((_BYTE *)v12 + v10[9]) = 0;
    v22 = (_QWORD *)((char *)v12 + v10[10]);
    *v22 = 0;
    v22[1] = 0;
    v23 = UUID.init()(v21);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v27 = (objc_class *)type metadata accessor for DIPTopekaWebService(0);
    v28 = objc_allocWithZone(v27);
    v29 = (char *)sub_10024000C(v24, v26, (uint64_t)v12);
    v30 = v29;
    v31 = *(_QWORD *)(a3 + 96);
    v32 = &off_100618670;
    if (!v31)
      v32 = 0;
    v33 = &v29[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
    *((_QWORD *)v33 + 1) = v32;
    swift_unknownObjectWeakAssign(v33, v31);
    v40 = v27;
    v41 = &off_100619F20;
    *(_QWORD *)&v39 = v30;
    sub_100008030(a1, &qword_1006343E8);
  }
  sub_100008018(&v39, a3 + 16);
  sub_100008018(&v42, a3 + 56);
  return a3;
}

uint64_t sub_1000EF248(uint64_t a1)
{
  destroy for FairPlayProvisioner(a1);
  return a1;
}

uint64_t sub_1000EF27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;

  v45 = a3;
  v46 = a4;
  v44 = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v41 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v43 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v42 = (char *)&v40 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  v17 = sub_100004828(&qword_10062FC40);
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for COSESignatureValidator(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v40 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v40 - v24;
  v26 = type metadata accessor for DIPOIDVerifier(0);
  v48 = v26;
  v49 = &protocol witness table for DIPOIDVerifier;
  v27 = sub_100022234(&v47);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v27, a2, v26);
  swift_defaultActor_initialize(a5, v28);
  v29 = OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_decoder;
  v30 = type metadata accessor for CBORDecoder(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(a5 + v29) = CBORDecoder.init()();
  v31 = v44;
  sub_100038B24(v44, (uint64_t)v19, &qword_10062FC40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_100008030((uint64_t)v19, &qword_10062FC40);
    v32 = *(void (**)(char *, _QWORD, uint64_t))(v41 + 104);
    v32(v16, enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:), v7);
    v32(v14, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v7);
    v33 = v42;
    v32(v42, enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:), v7);
    v34 = v43;
    v32(v43, enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:), v7);
    v35 = v40;
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(v16, v14, v33, v34);
    sub_100008030(v31, &qword_10062FC40);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator, v35, v20);
  }
  else
  {
    sub_100008030(v31, &qword_10062FC40);
    v36 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v36(v25, v19, v20);
    v36((char *)(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator), v25, v20);
  }
  sub_100008018(&v47, a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier);
  v37 = (_QWORD *)(a5 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_dateProvider);
  v38 = v46;
  *v37 = v45;
  v37[1] = v38;
  return a5;
}

uint64_t sub_1000EF5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  ValueMetadata *v50;
  _UNKNOWN **v51;
  _QWORD v52[3];
  ValueMetadata *v53;
  _UNKNOWN **v54;
  _QWORD v55[3];
  uint64_t v56;
  _UNKNOWN **v57;
  _QWORD v58[3];
  uint64_t v59;
  _UNKNOWN **v60;
  _QWORD v61[6];

  v48 = a8;
  v47 = a7;
  v46 = a6;
  v45 = a1;
  v13 = type metadata accessor for BundleRecordFetcher(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  v61[3] = v17;
  v61[4] = &off_100607EA0;
  v61[0] = a3;
  v59 = type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  v60 = &off_100619F10;
  v58[0] = a4;
  v56 = type metadata accessor for MobileDocumentReaderLogoFetcher();
  v57 = &off_100618D40;
  v55[0] = a5;
  v53 = &type metadata for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider;
  v54 = &off_100618708;
  v50 = &type metadata for FairPlayProvisioner;
  v51 = &off_10060C020;
  v18 = (_OWORD *)swift_allocObject(&unk_100607CB8, 64, 7);
  v49[0] = v18;
  v19 = a9[1];
  v18[1] = *a9;
  v18[2] = v19;
  v18[3] = a9[2];
  v20 = type metadata accessor for MobileDocumentReaderAuthenticationManager(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = sub_10001E624((uint64_t)v61, v17);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_10001E624((uint64_t)v58, v59);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_10001E624((uint64_t)v55, v56);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)&v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  v34 = sub_10001E624((uint64_t)v52, (uint64_t)v53);
  __chkstk_darwin(v34);
  (*(void (**)(void))(v35 + 16))();
  v36 = sub_10001E624((uint64_t)v49, (uint64_t)v50);
  __chkstk_darwin(v36);
  v38 = (_OWORD *)((char *)&v45 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v39 + 16))(v38);
  v40 = *v24;
  v41 = *v28;
  v42 = *v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v43 = sub_1000EFE38(v45, (uint64_t)v16, v40, v41, v42, v46, v47, v48, v38, v21);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v49);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v52);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v58);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v61);
  return v43;
}

_QWORD *sub_1000EF958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[3];
  ValueMetadata *v49;
  _UNKNOWN **v50;
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;
  _QWORD v54[3];
  ValueMetadata *v55;
  _UNKNOWN **v56;
  _QWORD v57[3];
  uint64_t v58;
  _UNKNOWN **v59;
  _QWORD v60[3];
  uint64_t v61;
  _UNKNOWN **v62;

  v12 = *a6;
  v61 = type metadata accessor for MobileDocumentReaderBluetoothManager();
  v62 = &off_100616F58;
  v60[0] = a1;
  v58 = type metadata accessor for MobileDocumentReaderNFCManager();
  v59 = &off_10061A2C0;
  v57[0] = a2;
  v55 = &type metadata for ISO18013RequestBuilder;
  v56 = &off_100608DA0;
  v52 = type metadata accessor for ISO18013ResponseValidator();
  v53 = &off_100607810;
  v51[0] = a4;
  v49 = &type metadata for MobileDocumentReaderResponseProcessor;
  v50 = &off_100618D18;
  v46 = type metadata accessor for MobileDocumentReaderAuthenticationManager(0);
  v47 = &off_100607150;
  v45[0] = a5;
  v43 = v12;
  v44 = &off_1006087F8;
  v42[0] = a6;
  v13 = type metadata accessor for MobileDocumentReaderManager();
  v14 = (_QWORD *)swift_allocObject(v13, 320, 7);
  v15 = sub_10001E624((uint64_t)v60, v61);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)&v42[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_10001E624((uint64_t)v57, v58);
  __chkstk_darwin(v19);
  v21 = (_QWORD *)((char *)&v42[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_10001E624((uint64_t)v54, (uint64_t)v55);
  __chkstk_darwin(v23);
  (*(void (**)(void))(v24 + 16))();
  v25 = sub_10001E624((uint64_t)v51, v52);
  __chkstk_darwin(v25);
  v27 = (_QWORD *)((char *)&v42[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = sub_10001E624((uint64_t)v48, (uint64_t)v49);
  __chkstk_darwin(v29);
  (*(void (**)(void))(v30 + 16))();
  v31 = sub_10001E624((uint64_t)v45, v46);
  __chkstk_darwin(v31);
  v33 = (_QWORD *)((char *)&v42[-1] - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = sub_10001E624((uint64_t)v42, v43);
  __chkstk_darwin(v35);
  v37 = (_QWORD *)((char *)&v42[-1] - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = sub_1000EFD30(*v17, *v21, a3, *v27, *v33, *v37, v14);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v42);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v45);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v48);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v51);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v54);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v57);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v60);
  return v39;
}

double sub_1000EFCF0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *sub_1000EFD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  a7[5] = type metadata accessor for MobileDocumentReaderBluetoothManager();
  a7[6] = &off_100616F58;
  a7[2] = a1;
  a7[10] = type metadata accessor for MobileDocumentReaderNFCManager();
  a7[11] = &off_10061A2C0;
  a7[7] = a2;
  a7[18] = &type metadata for ISO18013RequestBuilder;
  a7[19] = &off_100608DA0;
  a7[23] = type metadata accessor for ISO18013ResponseValidator();
  a7[24] = &off_100607810;
  a7[20] = a4;
  a7[28] = &type metadata for MobileDocumentReaderResponseProcessor;
  a7[29] = &off_100618D18;
  a7[33] = type metadata accessor for MobileDocumentReaderAuthenticationManager(0);
  a7[34] = &off_100607150;
  a7[30] = a5;
  a7[38] = type metadata accessor for MobileDocumentReaderIssuerRootStorage();
  a7[39] = &off_1006087F8;
  a7[35] = a6;
  a7[12] = a3;
  a7[13] = &off_100618D58;
  a7[14] = &off_100618D68;
  return a7;
}

uint64_t sub_1000EFE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t a10)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  __int128 v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  _UNKNOWN **v52;
  __int128 v53;
  ValueMetadata *v54;
  _UNKNOWN **v55;
  __int128 v56;
  ValueMetadata *v57;
  _UNKNOWN **v58;
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[6];

  v44 = a7;
  v45 = a8;
  v16 = type metadata accessor for BundleRecordFetcher(0);
  v62[3] = v16;
  v62[4] = &protocol witness table for BundleRecordFetcher;
  v17 = sub_100022234(v62);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v17, a2, v16);
  v18 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  v61[3] = v18;
  v61[4] = &off_100607EA0;
  v61[0] = a3;
  v60[3] = type metadata accessor for MobileDocumentReaderAuthenticationCertificateFetcher();
  v60[4] = &off_100619F10;
  v60[0] = a4;
  v59[3] = type metadata accessor for MobileDocumentReaderLogoFetcher();
  v59[4] = &off_100618D40;
  v59[0] = a5;
  v57 = &type metadata for MobileDocumentReaderAuthenticationSessionRefreshThresholdProvider;
  v58 = &off_100618708;
  v54 = &type metadata for FairPlayProvisioner;
  v55 = &off_10060C020;
  v19 = (_OWORD *)swift_allocObject(&unk_100607CB8, 64, 7);
  *(_QWORD *)&v53 = v19;
  v20 = a9[1];
  v19[1] = *a9;
  v19[2] = v20;
  v19[3] = a9[2];
  v21 = a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_auditToken;
  v22 = type metadata accessor for AuditToken(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a1, v22);
  sub_10002581C((uint64_t)v62, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_bundleRecordFetcher);
  sub_10002581C((uint64_t)v61, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_storage);
  sub_10002581C((uint64_t)v60, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_certificateFetcher);
  sub_10002581C((uint64_t)v59, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_logoFetcher);
  sub_100038B24(a6, (uint64_t)&v47, &qword_100632DD0);
  if (v48)
  {
    sub_100008030(a6, &qword_100632DD0);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v59);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v60);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v61);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v62);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, v22);
    sub_100008018(&v47, (uint64_t)&v50);
    sub_100008018(&v50, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager);
  }
  else
  {
    sub_100008030((uint64_t)&v47, &qword_100632DD0);
    sub_10002581C((uint64_t)v61, (uint64_t)&v50);
    v42 = a6;
    v24 = type metadata accessor for SEPairingManager(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v43 = a1;
    v25 = SEPairingManager.init()();
    v48 = v24;
    v49 = &protocol witness table for SEPairingManager;
    *(_QWORD *)&v47 = v25;
    v26 = sub_10001E624((uint64_t)&v50, v51);
    v41[1] = v41;
    __chkstk_darwin(v26);
    v28 = (_QWORD *)((char *)v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    v30 = *v28;
    v46[3] = v18;
    v46[4] = &off_100607EA0;
    v46[0] = v30;
    v31 = type metadata accessor for MobileDocumentReaderSecureElementManager();
    v32 = (_QWORD *)swift_allocObject(v31, 96, 7);
    v33 = sub_10001E624((uint64_t)v46, v18);
    __chkstk_darwin(v33);
    v35 = (_QWORD *)((char *)v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    v37 = *v35;
    v32[5] = v18;
    v32[6] = &off_100607EA0;
    v32[2] = v37;
    sub_100008018(&v47, (uint64_t)(v32 + 7));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v46);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v50);
    v51 = v31;
    v52 = &off_100607DA0;
    *(_QWORD *)&v50 = v32;
    sub_100008030(v42, &qword_100632DD0);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v59);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v60);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v61);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v62);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v43, v22);
    sub_1000A1F54((uint64_t)&v50, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_secureElementManager, &qword_100632DD0);
  }
  v38 = (_QWORD *)(a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_dateProvider);
  v39 = v45;
  *v38 = v44;
  v38[1] = v39;
  sub_100008018(&v56, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_sessionRefreshThresholdProvider);
  sub_100008018(&v53, a10 + OBJC_IVAR____TtC8coreidvd41MobileDocumentReaderAuthenticationManager_fairPlayProvisioner);
  return a10;
}

uint64_t sub_1000F0274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for MobileDocumentReaderRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for MobileDocumentReaderDeviceEngagementType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1000F0338(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for MobileDocumentReaderRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MobileDocumentReaderDeviceEngagementType(0) - 8)
                          + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_1006343FC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100007EE8;
  return sub_1000EB368(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1000F03F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100634414);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10001D0A0;
  v2[2] = v0;
  return swift_task_switch(sub_1000EA288, 0, 0);
}

Swift::Double *BAA_SERVER_CONNECTION_TIMEOUT_IN_SECONDS.unsafeMutableAddressor()
{
  return &BAA_SERVER_CONNECTION_TIMEOUT_IN_SECONDS;
}

Swift::String *IOS_KEYCHAIN_ACCESS_GROUP.unsafeMutableAddressor()
{
  return &IOS_KEYCHAIN_ACCESS_GROUP;
}

char *sub_1000F0468()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  char *v6;
  NSString v7;
  id v8;
  objc_class *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  objc_super v19;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_allocWithZone((Class)NSXPCListener);
  v6 = v0;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v5, "initWithMachServiceName:", v7);

  *(_QWORD *)&v6[OBJC_IVAR____TtC8coreidvd26DIDocUploadSessionListener_xpcListener] = v8;
  v9 = (objc_class *)type metadata accessor for DIDocUploadSessionListener();
  v19.receiver = v6;
  v19.super_class = v9;
  v10 = (char *)objc_msgSendSuper2(&v19, "init");
  v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd26DIDocUploadSessionListener_xpcListener];
  v12 = v10;
  objc_msgSend(v11, "setDelegate:", v12);
  v13 = defaultLogger()(objc_msgSend(v11, "resume"));
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.info.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "DIDocUploadSessionListener started.", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_1000F0638()
{
  return sub_1000F0828((uint64_t (*)(void))&static os_log_type_t.info.getter, "DIDocUploadSessionListener is tearing down.", (uint64_t (*)(uint64_t))type metadata accessor for DIDocUploadSessionListener);
}

uint64_t sub_1000F0688()
{
  return sub_1000F06A0("DIDocUploadSessionListener: Connection invalidated.");
}

uint64_t sub_1000F0694()
{
  return sub_1000F06A0("DIDocUploadSessionListener: Connection interrupted.");
}

uint64_t sub_1000F06A0(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t type metadata accessor for DIDocUploadSessionListener()
{
  return objc_opt_self(_TtC8coreidvd26DIDocUploadSessionListener);
}

id sub_1000F080C()
{
  return sub_1000F0828((uint64_t (*)(void))&static os_log_type_t.debug.getter, "Destroying DIDocUploadSessionProxy", (uint64_t (*)(uint64_t))type metadata accessor for DIDocUploadSessionProxy);
}

id sub_1000F0828(uint64_t (*a1)(void), const char *a2, uint64_t (*a3)(uint64_t))
{
  void *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  objc_class *v18;
  objc_super v20;

  v7 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = a1();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, a2, v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v18 = (objc_class *)a3(v17);
  v20.receiver = v7;
  v20.super_class = v18;
  return objc_msgSendSuper2(&v20, "dealloc");
}

uint64_t sub_1000F09B4(uint64_t a1, void *a2, void (*a3)(_QWORD, unint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(_QWORD, unint64_t, uint64_t);
  uint64_t v20;
  void *v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v28 = a1;
  ObjectType = swift_getObjectType(v4);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v27 = a4;
    v19 = a3;
    v20 = ObjectType;
    v21 = a2;
    v22 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DIDocUploadSessionProxy: uploadDocData", v18, 2u);
    v23 = v22;
    a2 = v21;
    ObjectType = v20;
    a3 = v19;
    a4 = v27;
    swift_slowDealloc(v23, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_1000F1054();
  v24 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_docUploadHandler);
  swift_retain(a4);
  swift_retain(v24);
  sub_10001ED44(v28, a2, v24, a3, a4, ObjectType);
  return swift_release(v24);
}

uint64_t sub_1000F0B90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  if (a3)
  {
    swift_errorRetain(a3);
    v8 = sub_1000F14F0(a3, 0xD00000000000002BLL, 0x800000010053FE10, 103);
    swift_errorRelease(a3);
  }
  else
  {
    v8 = 0;
  }
  a4(a1, a2, v8);
  return swift_errorRelease(v8);
}

void sub_1000F0CE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

uint64_t sub_1000F0D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - v6;
  v8 = defaultLogger()(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DIDocUploadSessionProxy: cancelUploads", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  sub_1000F1054();
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_docUploadHandler);
  swift_retain(v12);
  sub_10001ED68();
  return swift_release(v12);
}

void sub_1000F1054()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  _QWORD *v14;
  uint8_t *v15;
  char *v16;
  void *Strong;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v7);
  v10 = v0;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = &unk_100634000;
  v45 = v3;
  if (v13)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v50 = v42;
    v43 = v2;
    *(_DWORD *)v15 = 136315138;
    v40 = v15 + 4;
    v41 = v15;
    v16 = v5;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_connection]);
    v48 = (uint64_t)Strong;
    v18 = sub_100004828(&qword_10063F270);
    v19 = Optional.debugDescription.getter(v18);
    v44 = v1;
    v21 = v20;

    v5 = v16;
    v22 = v19;
    v14 = (_QWORD *)&unk_100634000;
    v48 = sub_1000E3AC8(v22, v21, &v50);
    v2 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v40);

    swift_bridgeObjectRelease(v21);
    v23 = v12;
    v24 = v41;
    _os_log_impl((void *)&_mh_execute_header, v11, v23, "DIDocUploadSessionProxy.checkEntitlement: Checking connection %s", v41, 0xCu);
    v25 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  v26 = swift_unknownObjectWeakLoadStrong(&v10[v14[139]]);
  if (v26)
  {
    v27 = (void *)v26;
    v28._countAndFlagsBits = 0xD000000000000022;
    v28._object = (void *)0x8000000100547DE0;
    if (NSXPCConnection.isEntitled(_:)(v28))
    {
      v29._countAndFlagsBits = 0xD000000000000055;
      v29._object = (void *)0x8000000100547E50;
      v30._countAndFlagsBits = 0x3931363136363933;
      v30._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v30, v29);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
      v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v36 = type metadata accessor for DIPError(0);
      v37 = sub_100007F30();
      swift_allocError(v36, v37, 0, 0);
      v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100547E10, 0, v5, 0, v35, 0xD000000000000061, 0x8000000100547D70, 0xD000000000000012, 0x8000000100542350, 129);
      swift_willThrow(v38);
    }

  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_100007F30();
    swift_allocError(v32, v33, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x8000000100547D30, 0, v5, 0, v31, 0xD000000000000061, 0x8000000100547D70, 0xD000000000000012, 0x8000000100542350, 126);
    swift_willThrow(v34);
  }
}

uint64_t type metadata accessor for DIDocUploadSessionProxy()
{
  return objc_opt_self(_TtC8coreidvd23DIDocUploadSessionProxy);
}

uint64_t sub_1000F14F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a4;
  v32 = a2;
  v33 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
  swift_bridgeObjectRetain(a3);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRetain(a1);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, a1, v12, 0, v17, 0xD000000000000061, 0x8000000100547D70, v32, a3, v31);
  v18 = sub_100007F30();
  v19 = swift_allocError(v13, v18, 0, 0);
  v20 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 16);
  v22 = v20(v21, v16, v13);
  defaultLogger()(v22);
  DIPRecordError(_:message:log:)(v19, 0, 0xE000000000000000, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
  swift_errorRelease(v19);
  v23 = swift_allocError(v13, v18, 0, 0);
  v20(v24, v16, v13);
  sub_10001CFF8(0, (unint64_t *)&qword_1006344F0, NSError_ptr);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(DIDocUploadErrorDomain);
  v27 = v26;
  v28 = static NSError.mapFromError(_:domain:mapper:)(v23, v25, v26, sub_10042D668, 0);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_errorRelease(v23);
  return v28;
}

uint64_t sub_1000F1778()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F179C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000F0CE4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

id sub_1000F17A4(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  objc_super v21;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_connection];
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_connection], 0);
  v8 = v1;
  v9 = defaultLogger()(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Creating DIDocUploadSessionProxy", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  result = (id)os_transaction_create("DIDocUploadSessionProxy");
  if (result)
  {
    *(_QWORD *)&v8[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign(v7, a1);
    v14 = type metadata accessor for DocUploadHandler();
    v15 = swift_allocObject(v14, 24, 7);
    v16 = type metadata accessor for DocUploadHandler.UploadRequestTracker();
    v17 = swift_allocObject(v16, 24, 7);
    v18 = sub_100004828((uint64_t *)&unk_100634510);
    v19 = swift_allocObject(v18, 28, 7);
    *(_DWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v17 + 16) = v19;
    *(_QWORD *)(v15 + 16) = v17;
    *(_QWORD *)&v8[OBJC_IVAR____TtC8coreidvd23DIDocUploadSessionProxy_docUploadHandler] = v15;

    v20 = (objc_class *)type metadata accessor for DIDocUploadSessionProxy();
    v21.receiver = v8;
    v21.super_class = v20;
    return objc_msgSendSuper2(&v21, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F197C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *Strong;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v36;
  void **aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  uint64_t v42;
  _BYTE v43[8];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = swift_unknownObjectWeakInit(v43, a1);
  defaultLogger()(v9);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.info.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 67109120;
    LODWORD(aBlock) = -[NSObject processIdentifier](v10, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v14 + 4);

    _os_log_impl((void *)&_mh_execute_header, v11, v13, "DIDocUploadSessionListener connection received from %d.", v14, 8u);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v8, v2);
  v16 = sub_1003BEABC();
  v17 = swift_allocObject(v16, ((*(unsigned int *)(v16 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v16 + 52) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_1005208D0;
  *(_QWORD *)(v17 + 32) = sub_10001CFF8(0, &qword_100634500, NSArray_ptr);
  *(_QWORD *)(v17 + 40) = sub_10001CFF8(0, &qword_1006344F8, DIUploadAsset_ptr);
  v18 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___DIDocUploadSessionXPCProtocol);
  -[NSObject setExportedInterface:](v10, "setExportedInterface:", v18);

  v19 = -[NSObject exportedInterface](v10, "exportedInterface");
  if (v19)
  {
    v20 = v19;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v17, "uploadDocData:uploadSettings:completion:", 0, 0);

  }
  swift_bridgeObjectRelease(v17);
  v21 = sub_1003BEABC();
  v22 = swift_allocObject(v21, ((*(unsigned int *)(v21 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v21 + 52) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v22 + 32) = sub_10001CFF8(0, &qword_100634508, DIDocUploadSettings_ptr);
  v23 = -[NSObject exportedInterface](v10, "exportedInterface");
  if (v23)
  {
    v24 = v23;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v22, "uploadDocData:uploadSettings:completion:", 1, 0);

  }
  v25 = swift_bridgeObjectRelease(v22);
  v26 = defaultLogger()(v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "DIDocUploadSessionListener: Set allowed classes on listener. ***", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v15(v6, v2);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v43);
  v31 = objc_allocWithZone((Class)type metadata accessor for DIDocUploadSessionProxy());
  v32 = sub_1000F17A4((uint64_t)Strong);

  -[NSObject setExportedObject:](v10, "setExportedObject:", v32);
  v41 = sub_1000F0688;
  v42 = 0;
  aBlock = _NSConcreteStackBlock;
  v38 = 1107296256;
  v39 = sub_1004AB190;
  v40 = &unk_100607D48;
  v33 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v10, "setInvalidationHandler:", v33);
  _Block_release(v33);
  v41 = sub_1000F0694;
  v42 = 0;
  aBlock = _NSConcreteStackBlock;
  v38 = 1107296256;
  v39 = sub_1004AB190;
  v40 = &unk_100607D70;
  v34 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v10, "setInterruptionHandler:", v34);
  _Block_release(v34);
  -[NSObject resume](v10, "resume");
  swift_unknownObjectWeakDestroy(v43);
  return 1;
}

uint64_t sub_1000F1E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F1E18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F1E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v4[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F1EB4, 0, 0);
}

uint64_t sub_1000F1EB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[2];
  *(_QWORD *)(v0 + 120) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 128) = 0;
    v5 = v1[4];
    v4 = v1[5];
    v6 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRetain(v4);
    swift_retain(v6);
    swift_bridgeObjectRetain(v1);
    v7 = dispatch thunk of IdentityProofingAttributeConfigHelper.fetchAttributeID(input:)(v5, v4);
    v9 = v8;
    swift_release(v6);
    if (v9)
    {
      *(_QWORD *)(v0 + 16) = v7;
      *(_QWORD *)(v0 + 24) = v9;
      v10._countAndFlagsBits = 46;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11 = String.lowercased()();
      object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(object);
      v13 = swift_bridgeObjectRelease(v4);
      v14 = *(_QWORD *)(v0 + 16);
      v15 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 136) = v15;
      defaultLogger()(v13);
      v16 = swift_bridgeObjectRetain_n(v15, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.debug.getter(v17);
      v19 = os_log_type_enabled(v17, v18);
      v21 = *(_QWORD *)(v0 + 104);
      v20 = *(_QWORD *)(v0 + 112);
      v22 = *(_QWORD *)(v0 + 96);
      if (v19)
      {
        v23 = swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v36 = v24;
        *(_DWORD *)v23 = 136315138;
        swift_bridgeObjectRetain(v15);
        *(_QWORD *)(v23 + 4) = sub_1000E3AC8(v14, v15, &v36);
        swift_bridgeObjectRelease_n(v15, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "the assetID to be fetched is %s", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v15, 2);
      }

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      *(_QWORD *)(v0 + 144) = sub_10040E5F0();
      v35 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006404C8 + dword_1006404C8);
      v34 = (_QWORD *)swift_task_alloc(unk_1006404CC);
      *(_QWORD *)(v0 + 152) = v34;
      *v34 = v0;
      v34[1] = sub_1000F226C;
      return v35(v14, v15);
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 88);
      v28 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v27, enum case for DIPError.Code.invalidImageAssetPlaceholder(_:), *(_QWORD *)(v0 + 72));
      v29 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v30 = type metadata accessor for DIPError(0);
      v31 = sub_100007F30();
      swift_allocError(v30, v31, 0, 0);
      v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x8000000100547F60, 0, v27, 0, v29, 0xD00000000000007DLL, 0x8000000100547F80, 0xD000000000000012, 0x8000000100548000, 46);
      swift_willThrow(v32);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
      v33 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 112));
      swift_task_dealloc(v33);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1000F226C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[17];
    v6 = v3[7];
    swift_release(v3[18]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3[4]);
    v7 = sub_1000F271C;
  }
  else
  {
    v8 = v3[18];
    swift_bridgeObjectRelease(v3[17]);
    swift_release(v8);
    v7 = sub_1000F2314;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000F2314()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v0 + 160));
  v2 = *(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v1 = *(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v2 >= v1 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v1 > 1, v2 + 1, 1);
  v3 = *(void **)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128) + 1;
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
  specialized Array._endMutation()(v6);

  if (v5 == v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 128) + 1;
    *(_QWORD *)(v0 + 128) = v10;
    v11 = *(_QWORD *)(v0 + 56) + 16 * v10;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
    swift_bridgeObjectRetain(v12);
    swift_retain(v14);
    v15 = dispatch thunk of IdentityProofingAttributeConfigHelper.fetchAttributeID(input:)(v13, v12);
    v17 = v16;
    swift_release(v14);
    if (v17)
    {
      *(_QWORD *)(v0 + 16) = v15;
      *(_QWORD *)(v0 + 24) = v17;
      v18._countAndFlagsBits = 46;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19 = String.lowercased()();
      object = v19._object;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(object);
      v21 = swift_bridgeObjectRelease(v12);
      v22 = *(_QWORD *)(v0 + 16);
      v23 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 136) = v23;
      defaultLogger()(v21);
      v24 = swift_bridgeObjectRetain_n(v23, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter(v25);
      v27 = os_log_type_enabled(v25, v26);
      v29 = *(_QWORD *)(v0 + 104);
      v28 = *(_QWORD *)(v0 + 112);
      v30 = *(_QWORD *)(v0 + 96);
      if (v27)
      {
        v31 = swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v42 = v32;
        *(_DWORD *)v31 = 136315138;
        swift_bridgeObjectRetain(v23);
        *(_QWORD *)(v31 + 4) = sub_1000E3AC8(v22, v23, &v42);
        swift_bridgeObjectRelease_n(v23, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "the assetID to be fetched is %s", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v23, 2);
      }

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_QWORD *)(v0 + 144) = sub_10040E5F0();
      v41 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1006404C8 + dword_1006404C8);
      v40 = (_QWORD *)swift_task_alloc(unk_1006404CC);
      *(_QWORD *)(v0 + 152) = v40;
      *v40 = v0;
      v40[1] = sub_1000F226C;
      return v41(v22, v23);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 88);
      v34 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v33, enum case for DIPError.Code.invalidImageAssetPlaceholder(_:), *(_QWORD *)(v0 + 72));
      v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v36 = type metadata accessor for DIPError(0);
      v37 = sub_100007F30();
      swift_allocError(v36, v37, 0, 0);
      v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x8000000100547F60, 0, v33, 0, v35, 0xD00000000000007DLL, 0x8000000100547F80, 0xD000000000000012, 0x8000000100548000, 46);
      swift_willThrow(v38);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
      v39 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 112));
      swift_task_dealloc(v39);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_1000F271C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for IdentityProofingAssetsProvider()
{
  return objc_opt_self(_TtC8coreidvd30IdentityProofingAssetsProvider);
}

uint64_t sub_1000F277C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPSignpost.Config(0);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v1[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F2824, 0, 0);
}

uint64_t sub_1000F2824()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = (_QWORD *)v0[2];
  static DaemonSignposts.MobileDocumentReader.identityKeySecureElementStatus.getter();
  DIPSignpost.init(_:)(v1);
  v3 = v2 + 7;
  v4 = v2[10];
  v5 = v2[11];
  sub_10000806C(v3, v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()[1]);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_1000F28B0;
  return dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()(v4, v5);
}

uint64_t sub_1000F28B0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000F2AEC;
  }
  else
  {
    *(_BYTE *)(v4 + 104) = a1 & 1;
    v6 = sub_1000F2928;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F2928()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(v0 + 104) == 1)
  {
    v1 = *(_QWORD *)(v0 + 16);
    type metadata accessor for DaemonAnalytics(0);
    static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)(0, 0);
    sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v2 = (_QWORD *)swift_task_alloc(dword_100634A54);
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = sub_1000F2A18;
    return sub_1000F5DE0();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 40);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc(v4);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000F2A18()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_1000F2A6C, 0, 0);
}

uint64_t sub_1000F2A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F2AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  type metadata accessor for DaemonAnalytics(0);
  swift_errorRetain(v1);
  static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)(v1, 1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100007F30();
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100548090, v1, v6, 0, v9, 0xD000000000000082, 0x80000001005480D0, 0xD00000000000001ELL, 0x8000000100548160, 51);
  swift_willThrow(v12);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F2C84()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for MobileDocumentReaderSecureElementManager()
{
  return objc_opt_self(_TtC8coreidvd40MobileDocumentReaderSecureElementManager);
}

uint64_t sub_1000F2CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RewrapService();
  v11 = swift_allocObject(v10, 24, 7);
  sub_1000257E0();
  v12 = static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x8000000100548390, v6, v9, v3, 0);
  *(_QWORD *)(v11 + 16) = result;
  qword_100670290 = v11;
  return result;
}

void sub_1000F2E2C(unint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  SecAccessControlRef v15;
  SecAccessControlRef v16;
  uint64_t v17;
  uint64_t inited;
  unint64_t v19;
  __SecAccessControl *v20;
  Class isa;
  __SecAccessControl *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __SecAccessControl *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CFErrorRef v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __SecAccessControl *v40;
  Swift::String v41;
  void *object;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD v60[3];
  char v61[8];
  char v62[80];
  CFErrorRef error;

  v6 = type metadata accessor for DIPKeyAlgorithm(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.internalError(_:), v10);
    v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v28 = type metadata accessor for DIPError(0);
    v29 = sub_100007F30();
    swift_allocError(v28, v29, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x80000001005482F0, 0, v13, 0, v27, 0xD000000000000053, 0x8000000100548260, 0xD00000000000002CLL, 0x80000001005482C0, 37);
LABEL_9:
    swift_willThrow(v30);
    return;
  }
  v53 = a3;
  error = 0;
  v15 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, &error);
  if (!v15)
  {
    v31 = error;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.keychainAccessControlFailure(_:), v10);
    errorFromCFError(_:_:_:)(v31, 0xD000000000000040, 0x80000001005481E0, v13);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_9;
  }
  v16 = v15;
  v54 = v11;
  v55 = v10;
  v56 = v13;
  v17 = sub_100004828(&qword_100634838);
  inited = swift_initStackObject(v17, v62);
  *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
  *(_QWORD *)(inited + 32) = 1952671087;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v19 = sub_10011D1E0(inited);
  v20 = v16;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  SecAccessControlSetConstraints(v20, isa);

  type metadata accessor for DIPCryptoKeychain(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPKeyAlgorithm.ECIES_REWRAP(_:), v6);
  v22 = v20;
  v23 = v57;
  v24 = dispatch thunk of static DIPCryptoKeychain.generateKeyAsym(_:_:)(v9, v16);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    v26 = v22;
    swift_getErrorValue(v23, v61, v60);
    v41._countAndFlagsBits = Error.localizedDescription.getter(v60[1], v60[2]);
    object = v41._object;
    v58 = 0xD000000000000025;
    v59 = 0x8000000100548230;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(object);
    v43 = v58;
    v44 = v59;
    v45 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v56, enum case for DIPError.Code.internalError(_:), v55);
    v46 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v47 = type metadata accessor for DIPError(0);
    v48 = sub_100007F30();
    swift_allocError(v47, v48, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v43, v44, 0, v45, 0, v46, 0xD000000000000053, 0x8000000100548260, 0xD00000000000002CLL, 0x80000001005482C0, 62);
    swift_willThrow(v49);
    swift_errorRelease(v23);

  }
  else
  {
    v32 = v24;
    v33 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    v58 = a1;
    v59 = a2;
    swift_bridgeObjectRetain(a2);
    v34._countAndFlagsBits = 0x727765727065732ELL;
    v34._object = (void *)0xEA00000000007061;
    String.append(_:)(v34);
    v36 = v58;
    v35 = v59;
    type metadata accessor for DIPKeystoreKeychain(0);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassKey);
    v39 = v38;
    swift_bridgeObjectRetain(v35);
    static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(v36, v35, 0, 0xF000000000000000, v37, v39);
    v40 = v22;
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v39);
    static DIPKeystoreKeychain.storeKeychainKey(_:label:)(v32, v36, v35);
    v50 = type metadata accessor for RewrapKeySecKey();
    v51 = (_QWORD *)swift_allocObject(v50, 40, 7);
    v51[2] = v32;
    v51[3] = v36;
    v51[4] = v35;
    v52 = v53;
    v53[3] = v50;
    v52[4] = &off_100607DB8;

    *v52 = v51;
  }
}

void sub_1000F3404(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  unint64_t v19;
  const __CFDictionary *isa;
  OSStatus v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  CFTypeRef v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  void *object;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t);
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  OSStatus v45;
  uint64_t v46;
  unint64_t v47;
  CFTypeRef result;
  char v49[176];

  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v44 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a1;
  v47 = a2;
  swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = 0x727765727065732ELL;
  v9._object = (void *)0xEA00000000007061;
  String.append(_:)(v9);
  v10 = v46;
  v11 = (void *)v47;
  v12 = sub_100004828(&qword_100634838);
  inited = swift_initStackObject(v12, v49);
  *(_OWORD *)(inited + 16) = xmmword_100524440;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrLabel);
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 88) = v15;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 120) = v16;
  *(_QWORD *)(inited + 96) = kSecClassKey;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnRef);
  *(_QWORD *)(inited + 136) = v17;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  swift_bridgeObjectRetain(v11);
  v18 = (id)kSecClassKey;
  v19 = sub_10011D1E0(inited);
  result = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v21 = SecItemCopyMatching(isa, &result);

  v22 = result;
  if (v21 == -25300)
  {
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_6;
  }
  if (v21)
  {
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v30._countAndFlagsBits = 0xD000000000000025;
    v30._object = (void *)0x8000000100548330;
    String.append(_:)(v30);
    v31._countAndFlagsBits = v10;
    v31._object = v11;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v11);
    v32._countAndFlagsBits = 0x7473206874697720;
    v32._object = (void *)0xEF203D2073757461;
    String.append(_:)(v32);
    v45 = v21;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(object);
    v35 = v46;
    v36 = v47;
    v37 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
    v38 = v44;
    v37(v44, enum case for DIPError.Code.internalError(_:), v6);
    v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_100007F30();
    swift_allocError(v40, v41, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v35, v36, 0, v38, 0, v39, 0xD000000000000053, 0x8000000100548260, 0xD000000000000022, 0x8000000100548360, 90);
    swift_willThrow(v42);
    v29 = result;
    goto LABEL_8;
  }
  if (result)
  {
    type metadata accessor for SecKey(0);
    v24 = v23;
    v25 = swift_unknownObjectRetain(v22);
    v26 = swift_dynamicCastUnknownClassUnconditional(v25, v24, 0, 0, 0);
    v27 = type metadata accessor for RewrapKeySecKey();
    v28 = (_QWORD *)swift_allocObject(v27, 40, 7);
    v28[2] = v26;
    v28[3] = v10;
    v28[4] = v11;
    *(_QWORD *)(a3 + 24) = v27;
    *(_QWORD *)(a3 + 32) = &off_100607DB8;
    *(_QWORD *)a3 = v28;
LABEL_6:
    v29 = v22;
LABEL_8:
    swift_unknownObjectRelease(v29);
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for RewrapService()
{
  return objc_opt_self(_TtC8coreidvd13RewrapService);
}

uint64_t sub_1000F3864()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RewrapKeySecKey()
{
  return objc_opt_self(_TtC8coreidvd15RewrapKeySecKey);
}

uint64_t sub_1000F38B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5[19] = a3;
  v5[20] = a5;
  v5[17] = a1;
  v5[18] = a2;
  v7 = type metadata accessor for DIPKeyAlgorithm(0);
  v5[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[22] = v8;
  v5[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_100634874);
  v5[24] = v9;
  *v9 = v5;
  v9[1] = sub_1000F394C;
  return sub_1000F3CC4((uint64_t)(v5 + 2), a4, 0, 0, 0xF000000000000000);
}

uint64_t sub_1000F394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F3C54;
  else
    v3 = sub_1000F39B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F39B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 56), v2);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  sub_10000806C((_QWORD *)(v0 + 56), v3);
  v5 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v3, v4);
  *(_QWORD *)(v0 + 208) = v6;
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v5;
    v9 = v6;
    v10 = *(_QWORD *)(v0 + 184);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
    sub_10000806C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    sub_1001412AC(v10);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)[1]);
    *(_QWORD *)(v0 + 216) = v11;
    *v11 = v0;
    v11[1] = sub_1000F3AFC;
    return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(v0 + 96, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v8, v9, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 184), 0);
  }
}

uint64_t sub_1000F3AFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000F3C88;
  else
    v5 = sub_1000F3B84;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F3B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  sub_10000806C((_QWORD *)(v0 + 96), v2);
  v4 = dispatch thunk of IdentityKey.attestation(_:)(0, v2, v3);
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
  }
  else
  {
    v5 = v4;
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 136);
    sub_10002581C(v0 + 96, v7);
    *(_QWORD *)(v7 + 40) = v5;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F3C54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F3C88()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F3CC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 552) = v5;
  *(_QWORD *)(v6 + 544) = a5;
  *(_QWORD *)(v6 + 536) = a4;
  *(_BYTE *)(v6 + 796) = a3;
  *(_QWORD *)(v6 + 528) = a2;
  *(_QWORD *)(v6 + 520) = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 560) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 568) = v8;
  *(_QWORD *)(v6 + 576) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 584) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 592) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 600) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 608) = swift_task_alloc(v11);
  v12 = type metadata accessor for HardwareAttestationType(0);
  *(_QWORD *)(v6 + 616) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 624) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 632) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 640) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 648) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 656) = swift_task_alloc(v14);
  return swift_task_switch(sub_1000F3DC0, 0, 0);
}

uint64_t sub_1000F3DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *object;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  uint64_t countAndFlagsBits;
  Swift::String v36;
  _OWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  char v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  void (*v82)(uint64_t, uint64_t);
  uint8_t *v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v1 = sub_100281BEC(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 656));
  v8 = v0 + 296;
  v9 = defaultLogger()(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v0 + 656);
    v131 = *(_QWORD *)(v0 + 592);
    v133 = *(_QWORD *)(v0 + 584);
    v134 = *(_QWORD *)(v0 + 608);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v136 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = swift_beginAccess(v12, v0 + 416, 0, 0);
    v16 = HardwareAttestationType.rawValue.getter(v15);
    v18 = v17;
    *(_QWORD *)(v0 + 512) = sub_1000E3AC8(v16, v17, &v136);
    v8 = v0 + 296;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v13 + 4);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "pre-selected attestation type is %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v19 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v19(v134, v133);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 608);
    v21 = *(_QWORD *)(v0 + 592);
    v22 = *(_QWORD *)(v0 + 584);

    v19 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v19(v20, v22);
  }
  *(_QWORD *)(v0 + 664) = v19;
  v23 = *(_QWORD *)(v0 + 544);
  v24 = *(unsigned __int8 *)(v0 + 796);
  v25 = swift_beginAccess(*(_QWORD *)(v0 + 656), v8, 0, 0);
  v26 = HardwareAttestationType.rawValue.getter(v25);
  v28 = v27;
  object = (void *)0xE000000000000000;
  swift_bridgeObjectRelease(0xE000000000000000);
  v136 = v26;
  v137 = v28;
  v30._countAndFlagsBits = 45;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  if (v24)
    v31 = 1702195828;
  else
    v31 = 0x65736C6166;
  if (v24)
    v32 = 0xE400000000000000;
  else
    v32 = 0xE500000000000000;
  v33 = v32;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease(v32);
  v34._countAndFlagsBits = 45;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  if (v23 >> 60 == 15)
  {
    countAndFlagsBits = 0;
  }
  else
  {
    v36 = Data.base64EncodedString(options:)(0);
    countAndFlagsBits = v36._countAndFlagsBits;
    object = v36._object;
  }
  v37 = (_OWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 552);
  v39 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(object);
  v40 = v136;
  v41 = v137;
  *(_QWORD *)(v0 + 672) = v136;
  *(_QWORD *)(v0 + 680) = v41;
  swift_beginAccess(v38 + 16, v0 + 392, 0, 0);
  v42 = *(_QWORD *)(v38 + 16);
  if (*(_QWORD *)(v42 + 16))
  {
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    v43 = sub_1004A8604(v40, v41);
    if ((v44 & 1) != 0)
    {
      sub_10002581C(*(_QWORD *)(v42 + 56) + 40 * v43, v0 + 96);
    }
    else
    {
      *(_QWORD *)(v0 + 128) = 0;
      *v37 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
    if (*(_QWORD *)(v0 + 120))
    {
      v45 = *(_QWORD *)(v0 + 656);
      v46 = *(_QWORD *)(v0 + 624);
      v47 = *(_QWORD *)(v0 + 616);
      v48 = *(_QWORD *)(v0 + 520);
      swift_bridgeObjectRelease(v41);
      sub_100008018((__int128 *)(v0 + 96), v48);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
LABEL_20:
      v49 = *(_QWORD *)(v0 + 648);
      v50 = *(_QWORD *)(v0 + 640);
      v51 = *(_QWORD *)(v0 + 632);
      v52 = *(_QWORD *)(v0 + 608);
      v53 = *(_QWORD *)(v0 + 600);
      v54 = *(_QWORD *)(v0 + 576);
      swift_task_dealloc(*(_QWORD *)(v0 + 656));
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      v55 = *(uint64_t (**)(void))(v0 + 8);
      return v55();
    }
  }
  else
  {
    *(_QWORD *)(v0 + 128) = 0;
    *v37 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  v57 = *(_QWORD *)(v0 + 648);
  v58 = *(_QWORD *)(v0 + 624);
  v59 = *(_QWORD *)(v0 + 616);
  sub_1000F5D10(v0 + 96);
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_QWORD *)(v0 + 168) = 0;
  *(_DWORD *)(v0 + 792) = enum case for HardwareAttestationType.SE(_:);
  v60 = *(void (**)(uint64_t))(v58 + 104);
  *(_QWORD *)(v0 + 688) = v60;
  v60(v57);
  v61 = sub_100004790(&qword_100634950, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  *(_QWORD *)(v0 + 696) = v61;
  dispatch thunk of RawRepresentable.rawValue.getter(v59, v61);
  dispatch thunk of RawRepresentable.rawValue.getter(v59, v61);
  v62 = *(_QWORD *)(v0 + 488);
  v63 = *(_QWORD *)(v0 + 496);
  v64 = *(_QWORD *)(v0 + 456);
  v65 = *(_QWORD *)(v0 + 464);
  v66 = *(_QWORD *)(v0 + 648);
  v67 = *(_QWORD *)(v0 + 624);
  v68 = *(_QWORD *)(v0 + 616);
  if (v62 == v64 && v63 == v65)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 496), 2);
    v69 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v69(v66, v68);
  }
  else
  {
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, *(_QWORD *)(v0 + 496), v64, *(_QWORD *)(v0 + 464), 0);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v63);
    v69 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v71 = ((uint64_t (*)(uint64_t, uint64_t))v69)(v66, v68);
    if ((v70 & 1) == 0)
      goto LABEL_29;
  }
  *(_QWORD *)(v0 + 704) = v69;
  v72 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 552) + 24);
  if (v72 == 2 || (v72 & 1) != 0)
  {
    v91 = *(_QWORD *)(v0 + 544);
    v92 = *(_QWORD *)(v0 + 536);
    v93 = type metadata accessor for DIPKeystoreSecureElement(0);
    *(_QWORD *)(v0 + 712) = v93;
    swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
    sub_100028034(v92, v91);
    v94 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)[1]);
    v95 = sub_1000F48A4;
    *(_QWORD *)(v0 + 720) = v94;
LABEL_38:
    *v94 = v0;
    v94[1] = v95;
    return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(*(unsigned __int8 *)(v0 + 796), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544));
  }
  v73 = *(_QWORD *)(v0 + 656);
  v74 = *(_QWORD *)(v0 + 640);
  v75 = *(_QWORD *)(v0 + 624);
  v76 = *(_QWORD *)(v0 + 616);
  ((void (*)(uint64_t, _QWORD, uint64_t))v60)(v74, enum case for HardwareAttestationType.SEP(_:), v76);
  v77 = swift_beginAccess(v73, v0 + 320, 1, 0);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v75 + 40))(v73, v74, v76, v77);
LABEL_29:
  v135 = v0 + 136;
  *(_QWORD *)(v0 + 752) = v69;
  v78 = defaultLogger()(v71);
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.info.getter();
  v81 = os_log_type_enabled(v79, v80);
  v82 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
  if (v81)
  {
    v132 = *(_QWORD *)(v0 + 600);
    v130 = *(_QWORD *)(v0 + 584);
    v83 = (uint8_t *)swift_slowAlloc(12, -1);
    v84 = swift_slowAlloc(32, -1);
    v136 = v84;
    v85.n128_u64[0] = 136446210;
    *(_DWORD *)v83 = 136446210;
    v86 = HardwareAttestationType.rawValue.getter(v85);
    v88 = v87;
    *(_QWORD *)(v0 + 504) = sub_1000E3AC8(v86, v87, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v83 + 4);
    swift_bridgeObjectRelease(v88);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "final selected attestation type is %{public}s", v83, 0xCu);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);

    v90 = v130;
    v89 = v132;
  }
  else
  {
    v96 = *(_QWORD *)(v0 + 600);
    v97 = *(_QWORD *)(v0 + 584);

    v89 = v96;
    v90 = v97;
  }
  v82(v89, v90);
  v98 = *(_QWORD *)(v0 + 696);
  v99 = *(_QWORD *)(v0 + 616);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 688))(*(_QWORD *)(v0 + 632), enum case for HardwareAttestationType.SEP(_:), v99);
  dispatch thunk of RawRepresentable.rawValue.getter(v99, v98);
  dispatch thunk of RawRepresentable.rawValue.getter(v99, v98);
  v100 = *(_QWORD *)(v0 + 440);
  v101 = *(_QWORD *)(v0 + 448);
  v102 = *(_QWORD *)(v0 + 472);
  v103 = *(_QWORD *)(v0 + 480);
  v104 = *(_QWORD *)(v0 + 632);
  v105 = *(_QWORD *)(v0 + 616);
  if (v100 == v102 && v101 == v103)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 448), 2);
    v69(v104, v105);
LABEL_37:
    v107 = *(_QWORD *)(v0 + 544);
    v108 = *(_QWORD *)(v0 + 536);
    v109 = type metadata accessor for DIPKeystoreKeychain(0);
    *(_QWORD *)(v0 + 760) = v109;
    swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
    sub_100028034(v108, v107);
    v94 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)[1]);
    v95 = sub_1000F5120;
    *(_QWORD *)(v0 + 768) = v94;
    goto LABEL_38;
  }
  v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, *(_QWORD *)(v0 + 448), v102, *(_QWORD *)(v0 + 480), 0);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v101);
  v69(v104, v105);
  if ((v106 & 1) != 0)
    goto LABEL_37;
  v110 = *(_QWORD *)(v0 + 656);
  v111 = *(_QWORD *)(v0 + 640);
  v112 = *(_QWORD *)(v0 + 616);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 688))(v111, *(unsigned int *)(v0 + 792), v112);
  v113 = sub_100004790(&qword_100636430, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  LOBYTE(v110) = dispatch thunk of static Equatable.== infix(_:_:)(v110, v111, v112, v113);
  v69(v111, v112);
  if ((v110 & 1) == 0)
  {
    v121 = *(_QWORD *)(v0 + 656);
    v122 = *(_QWORD *)(v0 + 616);
    v123 = *(_QWORD *)(v0 + 576);
    v124 = *(_QWORD *)(v0 + 568);
    v125 = *(_QWORD *)(v0 + 560);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v124 + 104))(v123, enum case for DIPError.Code.unimplemented(_:), v125);
    v126 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v127 = type metadata accessor for DIPError(0);
    v128 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v127, v128, 0, 0);
    v129 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x80000001005484F0, 0, v123, 0, v126, 0xD000000000000056, 0x8000000100548420, 0xD000000000000038, 0x8000000100548520, 169);
    swift_willThrow(v129);
    sub_1000F5D10(v135);
    v69(v121, v122);
    v2 = *(_QWORD *)(v0 + 648);
    v3 = *(_QWORD *)(v0 + 640);
    v4 = *(_QWORD *)(v0 + 632);
    v5 = *(_QWORD *)(v0 + 608);
    v6 = *(_QWORD *)(v0 + 600);
    v7 = *(_QWORD *)(v0 + 576);
    swift_task_dealloc(*(_QWORD *)(v0 + 656));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v55 = *(uint64_t (**)(void))(v0 + 8);
    return v55();
  }
  result = sub_1000F5D50(v135, v0 + 16);
  if (*(_QWORD *)(v0 + 40))
  {
    v114 = *(_QWORD *)(v0 + 680);
    v115 = *(_QWORD *)(v0 + 672);
    v116 = *(_QWORD *)(v0 + 552) + 16;
    sub_100008018((__int128 *)(v0 + 16), v0 + 256);
    swift_beginAccess(v116, v0 + 368, 33, 0);
    sub_10047E244(v0 + 256, v115, v114);
    swift_endAccess(v0 + 368);
    result = sub_1000F5D50(v135, v0 + 216);
    if (*(_QWORD *)(v0 + 240))
    {
      v117 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
      v118 = *(_QWORD *)(v0 + 656);
      v119 = *(_QWORD *)(v0 + 616);
      v120 = *(_QWORD *)(v0 + 520);
      sub_1000F5D10(v135);
      sub_100008018((__int128 *)(v0 + 216), v120);
      v117(v118, v119);
      goto LABEL_20;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F48A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 720);
  *(_QWORD *)(*v2 + 728) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000F5060;
  }
  else
  {
    *(_QWORD *)(v4 + 736) = a1;
    v6 = sub_1000F4918;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F4918()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[92];
  v0[10] = v0[89];
  v0[11] = &protocol witness table for DIPKeystoreKeychain;
  v0[7] = v1;
  sub_1000F5D10((uint64_t)(v0 + 17));
  sub_1000F5D98((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
  v2 = (_QWORD *)swift_task_alloc(dword_10063A9C4);
  v0[93] = v2;
  *v2 = v0;
  v2[1] = sub_1000F4998;
  return sub_10028254C((uint64_t)(v0 + 17), 0);
}

uint64_t sub_1000F4998(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  *(_BYTE *)(*(_QWORD *)v1 + 797) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000F49F4, 0, 0);
}

uint64_t sub_1000F49F4(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  void (*v3)(uint64_t, _QWORD, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void (*v14)(uint64_t, uint64_t);
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = (unsigned __int8 *)(v1 + 796);
  if (*(_BYTE *)(v1 + 797) == 1)
  {
    *(_BYTE *)(*(_QWORD *)(v1 + 552) + 24) = 1;
  }
  else
  {
    v3 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 688);
    v4 = *(_QWORD *)(v1 + 656);
    v5 = *(_QWORD *)(v1 + 640);
    v6 = *(_QWORD *)(v1 + 624);
    v7 = *(_QWORD *)(v1 + 616);
    *(_BYTE *)(*(_QWORD *)(v1 + 552) + 24) = 0;
    v3(v5, enum case for HardwareAttestationType.SEP(_:), v7);
    v8 = swift_beginAccess(v4, v1 + 344, 1, 0);
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 40))(v4, v5, v7, v8);
  }
  v9 = *(void (**)(uint64_t, uint64_t))(v1 + 704);
  *(_QWORD *)(v1 + 752) = v9;
  v10 = defaultLogger()(a1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v1 + 664);
  if (v13)
  {
    v70 = *(_QWORD *)(v1 + 584);
    v71 = *(_QWORD *)(v1 + 600);
    v69 = *(void (**)(uint64_t, uint64_t))(v1 + 664);
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v72 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = HardwareAttestationType.rawValue.getter();
    v19 = v18;
    *(_QWORD *)(v1 + 504) = sub_1000E3AC8(v17, v18, &v72);
    v2 = (unsigned __int8 *)(v1 + 796);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 504, v1 + 512, v15 + 4);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "final selected attestation type is %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v69(v71, v70);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 600);
    v21 = *(_QWORD *)(v1 + 584);

    v14(v20, v21);
  }
  v22 = *(_QWORD *)(v1 + 696);
  v23 = *(_QWORD *)(v1 + 616);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v1 + 688))(*(_QWORD *)(v1 + 632), enum case for HardwareAttestationType.SEP(_:), v23);
  dispatch thunk of RawRepresentable.rawValue.getter(v23, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(v23, v22);
  v24 = *(_QWORD *)(v1 + 440);
  v25 = *(_QWORD *)(v1 + 448);
  v26 = *(_QWORD *)(v1 + 472);
  v27 = *(_QWORD *)(v1 + 480);
  v28 = *(_QWORD *)(v1 + 632);
  v29 = *(_QWORD *)(v1 + 616);
  if (v24 == v26 && v25 == v27)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 448), 2);
    v9(v28, v29);
LABEL_11:
    v31 = *(_QWORD *)(v1 + 544);
    v32 = *(_QWORD *)(v1 + 536);
    v33 = type metadata accessor for DIPKeystoreKeychain(0);
    *(_QWORD *)(v1 + 760) = v33;
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    sub_100028034(v32, v31);
    v34 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)[1]);
    *(_QWORD *)(v1 + 768) = v34;
    *v34 = v1;
    v34[1] = sub_1000F5120;
    return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(*v2, *(_QWORD *)(v1 + 536), *(_QWORD *)(v1 + 544));
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, *(_QWORD *)(v1 + 448), v26, *(_QWORD *)(v1 + 480), 0);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v25);
  v9(v28, v29);
  if ((v30 & 1) != 0)
    goto LABEL_11;
  v36 = *(_QWORD *)(v1 + 656);
  v37 = *(_QWORD *)(v1 + 640);
  v38 = *(_QWORD *)(v1 + 616);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 688))(v37, *(unsigned int *)(v1 + 792), v38);
  v39 = sub_100004790(&qword_100636430, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
  LOBYTE(v36) = dispatch thunk of static Equatable.== infix(_:_:)(v36, v37, v38, v39);
  v9(v37, v38);
  if ((v36 & 1) == 0)
  {
    v54 = *(_QWORD *)(v1 + 656);
    v55 = *(_QWORD *)(v1 + 616);
    v56 = *(_QWORD *)(v1 + 576);
    v57 = *(_QWORD *)(v1 + 568);
    v58 = *(_QWORD *)(v1 + 560);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 680));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v57 + 104))(v56, enum case for DIPError.Code.unimplemented(_:), v58);
    v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v60 = type metadata accessor for DIPError(0);
    v61 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v60, v61, 0, 0);
    v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x80000001005484F0, 0, v56, 0, v59, 0xD000000000000056, 0x8000000100548420, 0xD000000000000038, 0x8000000100548520, 169);
    swift_willThrow(v62);
    sub_1000F5D10(v1 + 136);
    v9(v54, v55);
    v63 = *(_QWORD *)(v1 + 648);
    v64 = *(_QWORD *)(v1 + 640);
    v65 = *(_QWORD *)(v1 + 632);
    v66 = *(_QWORD *)(v1 + 608);
    v67 = *(_QWORD *)(v1 + 600);
    v68 = *(_QWORD *)(v1 + 576);
    swift_task_dealloc(*(_QWORD *)(v1 + 656));
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    v53 = *(uint64_t (**)(void))(v1 + 8);
    return v53();
  }
  result = sub_1000F5D50(v1 + 136, v1 + 16);
  if (*(_QWORD *)(v1 + 40))
  {
    v40 = *(_QWORD *)(v1 + 680);
    v41 = *(_QWORD *)(v1 + 672);
    v42 = *(_QWORD *)(v1 + 552) + 16;
    sub_100008018((__int128 *)(v1 + 16), v1 + 256);
    swift_beginAccess(v42, v1 + 368, 33, 0);
    sub_10047E244(v1 + 256, v41, v40);
    swift_endAccess(v1 + 368);
    result = sub_1000F5D50(v1 + 136, v1 + 216);
    if (*(_QWORD *)(v1 + 240))
    {
      v43 = *(void (**)(uint64_t, uint64_t))(v1 + 752);
      v44 = *(_QWORD *)(v1 + 656);
      v45 = *(_QWORD *)(v1 + 616);
      v46 = *(_QWORD *)(v1 + 520);
      sub_1000F5D10(v1 + 136);
      sub_100008018((__int128 *)(v1 + 216), v46);
      v43(v44, v45);
      v47 = *(_QWORD *)(v1 + 648);
      v48 = *(_QWORD *)(v1 + 640);
      v49 = *(_QWORD *)(v1 + 632);
      v50 = *(_QWORD *)(v1 + 608);
      v51 = *(_QWORD *)(v1 + 600);
      v52 = *(_QWORD *)(v1 + 576);
      swift_task_dealloc(*(_QWORD *)(v1 + 656));
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      v53 = *(uint64_t (**)(void))(v1 + 8);
      return v53();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F5060()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
  sub_1000F5D10(v0 + 136);
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 608);
  v8 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 656));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F5120(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 768);
  *(_QWORD *)(*v2 + 776) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 680));
    v6 = sub_1000F5320;
  }
  else
  {
    *(_QWORD *)(v4 + 784) = a1;
    v6 = sub_1000F519C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F519C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 784);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 760);
  *(_QWORD *)(v0 + 208) = &protocol witness table for DIPKeystoreKeychain;
  sub_1000F5D10(v0 + 136);
  sub_1000F5D98(v0 + 176, v0 + 136);
  result = sub_1000F5D50(v0 + 136, v0 + 16);
  if (*(_QWORD *)(v0 + 40))
  {
    v2 = *(_QWORD *)(v0 + 680);
    v3 = *(_QWORD *)(v0 + 672);
    v4 = *(_QWORD *)(v0 + 552) + 16;
    sub_100008018((__int128 *)(v0 + 16), v0 + 256);
    swift_beginAccess(v4, v0 + 368, 33, 0);
    sub_10047E244(v0 + 256, v3, v2);
    swift_endAccess(v0 + 368);
    result = sub_1000F5D50(v0 + 136, v0 + 216);
    if (*(_QWORD *)(v0 + 240))
    {
      v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
      v6 = *(_QWORD *)(v0 + 656);
      v7 = *(_QWORD *)(v0 + 616);
      v8 = *(_QWORD *)(v0 + 520);
      sub_1000F5D10(v0 + 136);
      sub_100008018((__int128 *)(v0 + 216), v8);
      v5(v6, v7);
      v9 = *(_QWORD *)(v0 + 648);
      v10 = *(_QWORD *)(v0 + 640);
      v11 = *(_QWORD *)(v0 + 632);
      v12 = *(_QWORD *)(v0 + 608);
      v13 = *(_QWORD *)(v0 + 600);
      v14 = *(_QWORD *)(v0 + 576);
      swift_task_dealloc(*(_QWORD *)(v0 + 656));
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F5320()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 616);
  sub_1000F5D10(v0 + 136);
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 608);
  v8 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 656));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F53D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 25, 7);
}

uint64_t type metadata accessor for DIPKeystoreManager()
{
  return objc_opt_self(_TtC8coreidvd18DIPKeystoreManager);
}

uint64_t destroy for IdentityKeyPair(_QWORD *a1)
{
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for IdentityKeyPair(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for IdentityKeyPair(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000660C(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for IdentityKeyPair(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityKeyPair(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityKeyPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityKeyPair()
{
  return &type metadata for IdentityKeyPair;
}

uint64_t sub_1000F55A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[7];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v43 = a1;
  v44 = a2;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  v46 = v3;
  __chkstk_darwin(v2);
  v42[6] = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(&v47, v13);
  v14 = v49;
  v15 = v50;
  sub_10000806C(&v47, v49);
  v16 = v51;
  v17 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v14, v15);
  if (v16)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v47);
  v20 = v17;
  v21 = v18;
  v42[2] = v6;
  v42[3] = v5;
  v42[4] = v8;
  v42[5] = v12;
  v42[1] = v10;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v47);
  v47 = v43;
  v48 = v44;
  swift_bridgeObjectRetain(v44);
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = v48;
  swift_bridgeObjectRetain(v48);
  v24._countAndFlagsBits = v20;
  v24._object = v21;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v21);
  v26 = v47;
  v25 = v48;
  type metadata accessor for DIPKeystoreKeychain(0);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassCertificate);
  v29 = v28;
  swift_bridgeObjectRetain(v25);
  v43 = v26;
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(v26, v25, 0, 0xF000000000000000, v27, v29);
  v44 = v25;
  swift_bridgeObjectRelease(v25);
  v30 = swift_bridgeObjectRelease(v29);
  v51 = 0;
  v31 = IDV_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter(v30);
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassCertificate);
  v36 = v35;
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(v31, v33, 0, 0xF000000000000000, v34, v35);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v36);
  v38 = v43;
  v37 = v44;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassKey);
  v41 = v40;
  static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(v38, v37, 0, 0xF000000000000000, v39, v40);
  swift_bridgeObjectRelease(v37);
  result = swift_bridgeObjectRelease(v41);
  if (v51)
    return swift_willThrow(result);
  return result;
}

uint64_t sub_1000F5D10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828((uint64_t *)&unk_100636420);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F5D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_100636420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F5D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_100636420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F5DE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000F5E50, 0, 0);
}

uint64_t sub_1000F5E50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationStorage deleteAll", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[6];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[2];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[7] = v10;
  v10(v6, v7);
  sub_10000806C((_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 48));
  v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1]);
  v1[8] = v11;
  *v11 = v1;
  v11[1] = sub_1000F5F74;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_1000F5F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F6010;
  else
    v3 = sub_1000F5FD8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F5FD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F6010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(void (**)(uint64_t, uint64_t))(v1 + 56);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 24);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0xD000000000000080, 0x8000000100548A90, v4);
  swift_errorRelease(v2);
  v3(v4, v5);
  v6 = *(_QWORD *)(v1 + 40);
  swift_task_dealloc(*(_QWORD *)(v1 + 48));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000F60A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Milestone(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v4[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[15] = v11;
  v4[16] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F6158, 0, 0);
}

uint64_t sub_1000F6158()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v6 = v0[5];
  v5 = (_QWORD *)v0[6];
  v7 = v0[3];
  v8 = v0[4];
  v9 = v5[6];
  v17 = v5[7];
  sub_10000806C(v5 + 3, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(&unk_100607FB0, v11 + v2, v10 | 7);
  v0[17] = v12;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v11, v1, v4);
  v13 = async function pointer to dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v8);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[18] = v14;
  v15 = type metadata accessor for MobileDocumentReaderIdentityKey(0);
  *v14 = v0;
  v14[1] = sub_1000F6274;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 2, sub_1000FBB98, v12, v15, v9, v17);
}

uint64_t sub_1000F6274()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F6364;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 136));
    v4 = sub_1000F62E0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F62E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 16);
  static MobileDocumentReaderMilestone.readerAuthenticationKeyFetched.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_1000F6364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100548900, v1, v4, 0, v7, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000003ALL, 0x8000000100548940, 118);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F64CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v26 = a3;
  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_10045BE2C(a1, a2);
  if (!v3)
  {
    v11 = v10;
    v12 = v26;
    v13 = objc_msgSend(v10, "attestationCertificate");

    if (v13)
    {
      v14 = v13;
      v15 = sub_100417E84(v14);
      if (v15)
      {
        v16 = v15;

        *v12 = v16;
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.documentReaderInvalidCoreDataIdentityKeyRecord(_:), v6);
        v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v22 = type metadata accessor for DIPError(0);
        v23 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v22, v23, 0, 0);
        v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x80000001005489D0, 0, v9, 0, v21, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000003ALL, 0x8000000100548940, 109);
        swift_willThrow(v24);

      }
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:), v6);
      v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v18 = type metadata accessor for DIPError(0);
      v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v18, v19, 0, 0);
      v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000046, 0x8000000100548980, 0, v9, 0, v17, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000003ALL, 0x8000000100548940, 105);
      swift_willThrow(v20);
    }
  }
}

uint64_t sub_1000F6798()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F67F8, 0, 0);
}

uint64_t sub_1000F67F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD **)(v0 + 24);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000806C(v1 + 3, v2);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  v5 = sub_100004828(&qword_100634A40);
  *v4 = v0;
  v4[1] = sub_1000F689C;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 16, sub_1000F6A88, 0, v5, v2, v3);
}

uint64_t sub_1000F689C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F693C;
  else
    v3 = sub_1000F6900;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F6900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000F693C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100548830, v1, v2, 0, v3, 0xD00000000000008BLL, 0x8000000100548650, 0x797469746E656469, 0xEE0029287379654BLL, 130);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F6A88(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for StoredMobileDocumentReaderAttestationCertificate(0);
  v4 = (void *)static StoredMobileDocumentReaderAttestationCertificate.fetchRequest()();
  v5 = NSManagedObjectContext.fetch<A>(_:)(v4, v3);

  if (v1)
    return;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = v5;
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (v6)
      goto LABEL_4;
LABEL_19:
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v5);
    *a1 = _swiftEmptyArrayStorage;
    return;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v5);
  if (!v6)
    goto LABEL_19;
LABEL_4:
  if (v6 >= 1)
  {
    v7 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        v10 = sub_100417E84(v9);
        if (v10)
          goto LABEL_12;
      }
      else
      {
        v10 = sub_100417E84(*(id *)(v5 + 8 * v7 + 32));
        if (v10)
        {
LABEL_12:
          v11 = v10;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
          v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v13 >= v12 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
          specialized Array._endMutation()(v8);
        }
      }
      if (v6 == ++v7)
        goto LABEL_19;
    }
  }
  __break(1u);
}

uint64_t sub_1000F6C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Milestone(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v4[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[14] = v11;
  v4[15] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost.Config(0);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost(0);
  v4[17] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[18] = v14;
  v4[19] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v4[20] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[21] = v16;
  v4[22] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F6D50, 0, 0);
}

uint64_t sub_1000F6D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderAuthenticationStorage generateAndStoreIdentityKey", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 168);
  v6 = *(_QWORD *)(v1 + 176);
  v8 = *(_QWORD *)(v1 + 160);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = sub_1000F768C();
  *(_QWORD *)(v1 + 184) = v9;
  *(_QWORD *)(v1 + 192) = v10;
  *(_QWORD *)(v1 + 200) = v11;
  v12 = (uint64_t)v9;
  v13 = v10;
  v14 = *(_QWORD *)(v1 + 128);
  static DaemonSignposts.MobileDocumentReader.storeIdentityKey.getter();
  v15 = DIPSignpost.init(_:)(v14);
  v16 = SecCertificateRef.derRepresentation()(v15);
  *(_QWORD *)(v1 + 208) = v16;
  *(_QWORD *)(v1 + 216) = v17;
  if (v17 >> 60 == 15)
  {
    v18 = *(_QWORD *)(v1 + 64);
    v19 = enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v18, enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:), *(_QWORD *)(v1 + 48));
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v21, v22, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x8000000100548BB0, 0, v18, 0, v20, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000004ALL, 0x8000000100548B60, 145);
    swift_willThrow(v24);
    v25 = *(_QWORD *)(v1 + 192);
    v26 = *(void **)(v1 + 200);
    v27 = *(_QWORD *)(v1 + 184);
    v29 = *(_QWORD *)(v1 + 144);
    v28 = *(_QWORD *)(v1 + 152);
    v30 = *(_QWORD *)(v1 + 136);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

    sub_100007F8C(v27, v25);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    v31 = *(_QWORD *)(v1 + 176);
    v32 = *(_QWORD *)(v1 + 152);
    v33 = *(_QWORD *)(v1 + 120);
    v34 = *(_QWORD *)(v1 + 128);
    v35 = *(_QWORD *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v36, v19, *(_QWORD *)(v1 + 48));
    swift_errorRetain(v23);
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100548B20, v23, v36, 0, v37, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000004ALL, 0x8000000100548B60, 174);
    swift_willThrow(v40);
    swift_errorRelease(v23);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v42 = v17;
    v44 = *(_QWORD *)(v1 + 112);
    v43 = *(_QWORD *)(v1 + 120);
    v46 = *(_QWORD *)(v1 + 96);
    v45 = *(_QWORD *)(v1 + 104);
    v59 = v46;
    v60 = v43;
    v47 = *(_QWORD *)(v1 + 32);
    v48 = *(_QWORD *)(v1 + 24);
    v61 = *(_QWORD *)(v1 + 16);
    v62 = v16;
    sub_10000806C((_QWORD *)(*(_QWORD *)(v1 + 40) + 24), *(_QWORD *)(*(_QWORD *)(v1 + 40) + 48));
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
    *(_QWORD *)(v1 + 224) = v49;
    v49(v43, v47, v46);
    v50 = *(unsigned __int8 *)(v45 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = (v44 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
    v54 = swift_allocObject(&unk_100608000, v53 + 16, v50 | 7);
    *(_QWORD *)(v1 + 232) = v54;
    *(_QWORD *)(v54 + 16) = v61;
    *(_QWORD *)(v54 + 24) = v48;
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
    *(_QWORD *)(v1 + 240) = v55;
    v55(v54 + v51, v60, v59);
    v56 = (uint64_t *)(v54 + v52);
    *v56 = v12;
    v56[1] = v13;
    v57 = (uint64_t *)(v54 + v53);
    *v57 = v62;
    v57[1] = v42;
    swift_bridgeObjectRetain(v48);
    sub_100022948(v12, v13);
    sub_100028034(v62, v42);
    v58 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1]);
    *(_QWORD *)(v1 + 248) = v58;
    *v58 = v1;
    v58[1] = sub_1000F7218;
    return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
  }
}

uint64_t sub_1000F7218()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F74B0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 232));
    v4 = sub_1000F7284;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F7284()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v21 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(void **)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 184);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v30 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v23 = *(_QWORD *)(v0 + 16);
  static MobileDocumentReaderMilestone.readerAuthenticationKeyCreated.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v8, v3);
  v9 = type metadata accessor for SESKeystore(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_bridgeObjectRetain(v7);
  sub_100022948(v18, v19);
  v10 = v20;
  v11 = SESKeystore.init()();
  sub_100007F78(v21, v22);
  v12 = type metadata accessor for Date(0);
  v13 = type metadata accessor for MobileDocumentReaderIdentityKey(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v14 + 16) = v23;
  *(_QWORD *)(v14 + 24) = v7;
  v24(v14 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_installationIdentifier, v2, v3);
  v15 = (uint64_t *)(v14 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keyBlob);
  *v15 = v18;
  v15[1] = v19;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_attestationCertificate) = v10;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_keystore) = v11;
  v16 = (uint64_t *)(v14 + OBJC_IVAR____TtC8coreidvd31MobileDocumentReaderIdentityKey_dateProvider);
  *v16 = v12;
  v16[1] = (uint64_t)&protocol witness table for Date;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_100007F8C(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v25);
  swift_task_dealloc(v29);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_1000F74B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 232);
  sub_100007F78(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(void **)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_100007F8C(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v14, enum case for DIPError.Code.documentReaderCannotGenerateIdentityKey(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v2);
  v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v16 = type metadata accessor for DIPError(0);
  v17 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v16, v17, 0, 0);
  v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x8000000100548B20, v2, v14, 0, v15, 0xD00000000000008BLL, 0x8000000100548650, 0xD00000000000004ALL, 0x8000000100548B60, 174);
  swift_willThrow(v18);
  swift_errorRelease(v2);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_1000F768C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v39;
  Swift::String v40;
  Swift::String_optional v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  void *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  BOOL v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint8_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint8_t *v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  const __CFData *isa;
  SecCertificateRef v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t countAndFlagsBits;
  _QWORD v114[2];
  double v115[2];

  v0 = type metadata accessor for DIPError.Code(0);
  v104 = *(_QWORD *)(v0 - 8);
  v105 = v0;
  __chkstk_darwin(v0);
  v106 = (char *)&v94 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v100 = v2;
  v101 = v3;
  v4 = __chkstk_darwin(v2);
  v102 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v99 = (char *)&v94 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v94 - v8;
  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for KeyUsage(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DIPSignpost(0);
  v109 = *(_QWORD *)(v21 - 8);
  v110 = v21;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.MobileDocumentReader.generateIdentityKey.getter(v22);
  v108 = v24;
  DIPSignpost.init(_:)(v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for KeyUsage.signature(_:), v14);
  v25 = v107;
  v26 = createBAAKeyACLWithDefaultLAContext(enableUAM:keyUsage:requireUserAuth:forSecureElement:)(0, v17, 0, 1);
  v27 = v25;
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    goto LABEL_4;
  }
  v28 = (void *)v26;
  v97 = v13;
  v98 = v11;
  v107 = v10;
  v96 = v9;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29 = *(_QWORD *)(v103 + 16);
  v30 = dispatch thunk of SESKeystore.createKey(acl:)(v28);
  v94 = v29;
  v95 = (char *)v30;
  v103 = v31;
  v115[0] = 604800.0;
  v39 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v40._countAndFlagsBits = 0xD000000000000036;
  v40._object = (void *)0x8000000100548C50;
  v41 = NSUserDefaults.internalString(forKey:)(v40);

  if (v41.value._object)
  {
    v44 = ((unint64_t)v41.value._object >> 56) & 0xF;
    v45 = v28;
    if (((uint64_t)v41.value._object & 0x2000000000000000) == 0)
      v44 = v41.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v44)
    {
      countAndFlagsBits = v41.value._countAndFlagsBits;
      v114[0] = v41.value._object;
      v46 = v97;
      static CharacterSet.whitespaces.getter(v43);
      v47 = sub_1000994DC();
      v48 = StringProtocol.trimmingCharacters(in:)(v46, &type metadata for String, v47);
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v98 + 8))(v46, v107);
      v51 = swift_bridgeObjectRelease(v41.value._object);
      v112 = 0;
      v52 = __chkstk_darwin(v51);
      v53 = v103;
      if ((v50 & 0x1000000000000000) != 0 || !(v50 & 0x2000000000000000 | v48 & 0x1000000000000000))
      {
        _StringGuts._slowWithCString<A>(_:)(&v111, sub_1000FBD68);
        v56 = swift_bridgeObjectRelease(v50);
        v9 = v95;
      }
      else
      {
        __chkstk_darwin(v52);
        if ((v50 & 0x2000000000000000) != 0)
        {
          countAndFlagsBits = v48;
          v114[0] = v50 & 0xFFFFFFFFFFFFFFLL;
          v9 = v95;
          v61 = (v48 > 0x20u || ((0x100003E01uLL >> v48) & 1) == 0)
             && (v60 = (_BYTE *)_swift_stdlib_strtod_clocale(&countAndFlagsBits, &v112)) != 0
             && *v60 == 0;
          v111 = v61;
          v56 = swift_bridgeObjectRelease(v50);
        }
        else
        {
          v9 = v95;
          if ((v48 & 0x1000000000000000) != 0)
          {
            v54 = (v50 & 0xFFFFFFFFFFFFFFFLL) + 32;
            v55 = v48 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v54 = _StringObject.sharedUTF8.getter(v48, v50);
          }
          v111 = sub_100012AD0(v54, v55, (void (*)(uint64_t *__return_ptr))sub_1000FBD80) & 1;
          v56 = swift_bridgeObjectRelease(v50);
        }
      }
      v59 = v101;
      if ((v111 & 1) != 0)
      {
        v57 = v112;
        v62 = v96;
        v63 = defaultLogger()(v56);
        v64 = Logger.logObject.getter(v63);
        v65 = static os_log_type_t.debug.getter(v64);
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v66 = 134217984;
          v59 = v101;
          countAndFlagsBits = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v114, v66 + 4);
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "MobileDocumentReaderAuthenticationStorage found override value %f for validityInterval.", v66, 0xCu);
          v67 = v66;
          v62 = v96;
          swift_slowDealloc(v67, -1, -1);
        }

        v68 = v62;
        v58 = v100;
        v42 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v68, v100);
        v115[0] = *(double *)&v57;
      }
      else
      {
        v69 = v99;
        v70 = defaultLogger()(v56);
        v71 = Logger.logObject.getter(v70);
        v72 = static os_log_type_t.debug.getter(v71);
        if (os_log_type_enabled(v71, v72))
        {
          v73 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v73 = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "Unable to parse validity interval override in settings. Continuing with default value.", v73, 2u);
          v74 = v73;
          v69 = v99;
          swift_slowDealloc(v74, -1, -1);
        }

        v75 = v69;
        v58 = v100;
        v42 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v75, v100);
        v57 = *(_QWORD *)&v115[0];
      }
      goto LABEL_32;
    }
    v42 = swift_bridgeObjectRelease(v41.value._object);
    v57 = 0x4122750000000000;
  }
  else
  {
    v45 = v28;
    v57 = 0x4122750000000000;
  }
  v53 = v103;
  v9 = v95;
  v58 = v100;
  v59 = v101;
LABEL_32:
  v76 = defaultLogger()(v42);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.debug.getter(v77);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v79 = 134217984;
    v59 = v101;
    countAndFlagsBits = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&countAndFlagsBits, v114, v79 + 4);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "MobileDocumentReaderAuthenticationStorage creating SEBAAS certificate with validityInterval %f", v79, 0xCu);
    v80 = v79;
    v58 = v100;
    swift_slowDealloc(v80, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v59 + 8))(v102, v58);
  swift_beginAccess(v115, &countAndFlagsBits, 0, 0);
  v81 = dispatch thunk of SESKeystore.createSEBAASCertificate(with:validityInterval:)(v9, v53, v115[0]);
  v83 = v82;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v85 = SecCertificateCreateWithData(0, isa);

  if (v85)
  {
    sub_100007F8C(v81, v83);

    v86 = v108;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v86, v110);
    return v9;
  }
  v87 = v53;
  v88 = v106;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v106, enum case for DIPError.Code.certificateDecodingFailed(_:), v105);
  v89 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v90 = type metadata accessor for DIPError(0);
  v91 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v92 = swift_allocError(v90, v91, 0, 0);
  v93 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x8000000100548C90, 0, v88, 0, v89, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000019, 0x8000000100548C30, 337);
  swift_willThrow(v93);
  sub_100007F8C((uint64_t)v9, v87);

  v27 = v92;
  sub_100007F8C(v81, v83);
LABEL_4:
  type metadata accessor for DaemonAnalytics(0);
  static DaemonAnalytics.sendMobileDocumentReaderAttestationKeyCreationFailedEvent(error:)(v27);
  v32 = v106;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v106, enum case for DIPError.Code.internalError(_:), v105);
  swift_errorRetain(v27);
  v33 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v34 = type metadata accessor for DIPError(0);
  v35 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v34, v35, 0, 0);
  v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x8000000100548BF0, v27, v32, 0, v33, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000019, 0x8000000100548C30, 343);
  swift_willThrow(v36);
  swift_errorRelease(v27);
  v37 = v108;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v37, v110);
  return v9;
}

void sub_1000F80D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  Class v12;

  v4 = *a1;
  v5 = sub_10045B880(a2, a3);
  if (!v3)
  {
    v6 = v5;
    v7 = type metadata accessor for StoredMobileDocumentReaderSigningKey(0);
    v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)), "initWithContext:", *(_QWORD *)(v4 + 16));
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setKeyBlob:", isa);

    objc_msgSend(v8, "setApplicationInstallation:", v6);
    v10 = type metadata accessor for StoredMobileDocumentReaderAttestationCertificate(0);
    v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "initWithContext:", *(_QWORD *)(v4 + 16));
    v12 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setCertificateData:", v12);

    objc_msgSend(v11, "setSigningKey:", v8);
    objc_msgSend(v11, "setApplicationInstallation:", v6);
    sub_10045B944();

  }
}

uint64_t sub_1000F8228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Milestone(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v4[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[14] = v11;
  v4[15] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F82E0, 0, 0);
}

uint64_t sub_1000F82E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = v0[14];
  v1 = v0[15];
  v4 = v0[12];
  v3 = v0[13];
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[2];
  v8 = v0[3];
  sub_10000806C((_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_100607F88, v11 + 8, v9 | 7);
  v0[16] = v12;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v4);
  *(_QWORD *)(v12 + v11) = v5;
  v13 = async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1];
  swift_bridgeObjectRetain(v8);
  swift_retain(v5);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[17] = v14;
  *v14 = v0;
  v14[1] = sub_1000F8404;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_1000F8404()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F84EC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 128));
    v4 = sub_1000F8470;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F8470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  static MobileDocumentReaderMilestone.readerAuthenticationKeyDeleted.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F84EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.documentReaderCannotDeleteIdentityKey(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100548870, v1, v4, 0, v7, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000040, 0x80000001005488B0, 196);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F8654(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;

  v4 = *a1;
  v5 = (void *)sub_10045BE2C(a2, a3);
  if (!v3)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "attestationCertificate");

    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v8, "signingKey");
      if (v9)
      {
        v10 = v9;
        sub_1000F8730(v9, v4);

      }
      objc_msgSend(*(id *)(v4 + 16), "deleteObject:", v8);

    }
    sub_10045B944();

  }
}

id sub_1000F8730(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v30 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v30 - v9;
  v11 = objc_msgSend(a1, "attestationCertificates");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "count");

  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend(a1, "authenticationCertificates");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "count");

    v17 = (uint64_t)v16 + (_QWORD)v13;
    if (__OFADD__(v13, v16))
    {
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    v17 = (uint64_t)v13;
  }
  if (v17 <= 1)
  {
    v23 = defaultLogger()(v14);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MobileDocumentReaderAuthenticationStorage signing key has 1 or less related certificates. Cleaning up.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    v27 = objc_msgSend(a1, "keyBlob");
    if (!v27)
      return objc_msgSend(*(id *)(v31 + 16), "deleteObject:", a1, v30);
    v28 = v27;
    v15 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v10 = v29;

    dispatch thunk of SESKeystore.deleteKey(_:)(v15, v10);
LABEL_16:
    sub_100007F8C((uint64_t)v15, (unint64_t)v10);
    return objc_msgSend(*(id *)(v31 + 16), "deleteObject:", a1, v30);
  }
  v18 = defaultLogger()(v14);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "MobileDocumentReaderAuthenticationStorage signing key has more than 1 certificate. No need to clean it up.", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

uint64_t sub_1000F8B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Milestone(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F8C20, 0, 0);
}

uint64_t sub_1000F8C20()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = v0[4];
  v1 = (_QWORD *)v0[5];
  v3 = v0[3];
  v4 = v1[6];
  v5 = v1[7];
  sub_10000806C(v1 + 3, v4);
  v6 = swift_allocObject(&unk_100607F38, 32, 7);
  v0[12] = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = async function pointer to dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v2);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[13] = v8;
  v9 = sub_100004828(&qword_100632D50);
  *v8 = v0;
  v8[1] = sub_1000F8CF0;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0[2], sub_1000FB840, v6, v9, v4, v5);
}

uint64_t sub_1000F8CF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F8DC4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 96));
    v4 = sub_1000F8D5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F8D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  static MobileDocumentReaderMilestone.readerAuthenticationCertificateFetched.getter();
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F8DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x8000000100548620, v1, v3, 0, v6, 0xD00000000000008BLL, 0x8000000100548650, 0x286E6F6973736573, 0xED0000293A726F66, 237);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1000F8F24@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint8_t *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  os_log_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)sub_10045BC48(a1, a2);
  if (!v3)
  {
    if (result)
    {
      return (void *)sub_10041725C(result, a3);
    }
    else
    {
      defaultLogger()(0);
      v12 = swift_bridgeObjectRetain_n(a2, 2);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.debug.getter(v13);
      v15 = v14;
      if (os_log_type_enabled(v13, v14))
      {
        v16 = swift_slowAlloc(12, -1);
        v24 = v15;
        v17 = (uint8_t *)v16;
        v25 = swift_slowAlloc(32, -1);
        v28 = v25;
        v23 = v13;
        *(_DWORD *)v17 = 136315138;
        v22 = v17 + 4;
        swift_bridgeObjectRetain(a2);
        v26 = sub_1000E3AC8(a1, a2, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22);
        swift_bridgeObjectRelease_n(a2, 3);
        v18 = v23;
        _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "MobileDocumentReaderAuthenticationStorage could not find session for identifier %s", v17, 0xCu);
        v19 = v25;
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v20 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 1, 1, v20);
    }
  }
  return result;
}

uint64_t sub_1000F9150()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F91B0, 0, 0);
}

uint64_t sub_1000F91B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD **)(v0 + 24);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000806C(v1 + 3, v2);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  v5 = sub_100004828(&qword_100634A20);
  *v4 = v0;
  v4[1] = sub_1000F9254;
  return dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(v0 + 16, sub_1000F93FC, 0, v5, v2, v3);
}

uint64_t sub_1000F9254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F92B8;
  else
    v3 = sub_1000FBE80;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F92B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.documentReaderCannotListCertificates(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100548830, v1, v2, 0, v3, 0xD00000000000008BLL, 0x8000000100548650, 0x736E6F6973736573, 0xEA00000000002928, 249);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F93FC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v27 = a1;
  v1 = sub_100004828(&qword_100632D50);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate(0);
  v12 = (void *)static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()();
  v13 = v30;
  v14 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);

  if (!v13)
  {
    v26 = 0;
    v28 = v10;
    v29 = v8;
    v30 = v4;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v25 = v14;
      else
        v25 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v15 = _CocoaArrayWrapper.endIndex.getter(v25);
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v14);
    }
    v16 = v30;
    v17 = (uint64_t)v29;
    if (v15)
    {
      if (v15 < 1)
      {
        __break(1u);
        return;
      }
      v18 = 0;
      v19 = _swiftEmptyArrayStorage;
      do
      {
        if ((v14 & 0xC000000000000001) != 0)
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14);
        else
          v20 = *(id *)(v14 + 8 * v18 + 32);
        sub_10041725C(v20, (uint64_t)v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v16) == 1)
        {
          sub_100008030((uint64_t)v3, &qword_100632D50);
        }
        else
        {
          v21 = (uint64_t)v28;
          sub_1000B3B2C((uint64_t)v3, (uint64_t)v28);
          sub_1000B3B2C(v21, v17);
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = (_QWORD *)sub_1000E2C7C(0, v19[2] + 1, 1, (unint64_t)v19);
          v23 = v19[2];
          v22 = v19[3];
          if (v23 >= v22 >> 1)
            v19 = (_QWORD *)sub_1000E2C7C(v22 > 1, v23 + 1, 1, (unint64_t)v19);
          v19[2] = v23 + 1;
          v24 = (uint64_t)v19
              + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
              + *(_QWORD *)(v5 + 72) * v23;
          v17 = (uint64_t)v29;
          sub_1000B3B2C((uint64_t)v29, v24);
          v16 = v30;
        }
        ++v18;
      }
      while (v15 != v18);
    }
    else
    {
      v19 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(v14, 2);
    *v27 = v19;
  }
}

uint64_t sub_1000F96AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Milestone(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v2[12] = v9;
  v2[13] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9760, 0, 0);
}

uint64_t sub_1000F9760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = (uint64_t *)(v2 + *(int *)(v1 + 32));
  v4 = *v3;
  *(_QWORD *)(v0 + 112) = *v3;
  v5 = v3[1];
  *(_QWORD *)(v0 + 120) = v5;
  if ((v5 & 0x2000000000000000) != 0)
  {
    v22 = *(_QWORD *)(v0 + 48);
    v23 = enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:);
    v24 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 104);
    v24(v22, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), *(_QWORD *)(v0 + 32));
    v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v28 = swift_allocError(v26, v27, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001005486E0, 0, v22, 0, v25, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 256);
    swift_willThrow(v29);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + *(int *)(v1 + 28));
    sub_100022948(v4, v5);
    type metadata accessor for SecCertificate(0);
    v8 = Array<A>.derRepresentation()(v6, v7);
    if (v8)
    {
      v9 = v8;
      v11 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 104);
      v12 = *(_QWORD *)(v0 + 88);
      v13 = *(_QWORD *)(v0 + 16);
      sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 24) + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 48));
      sub_1000B3B70(v13, v10);
      v14 = *(unsigned __int8 *)(v12 + 80);
      v15 = (v14 + 16) & ~v14;
      v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
      v18 = swift_allocObject(&unk_100607F60, v17 + 8, v14 | 7);
      *(_QWORD *)(v0 + 128) = v18;
      sub_1000B3B2C(v10, v18 + v15);
      v19 = (uint64_t *)(v18 + v16);
      *v19 = v4;
      v19[1] = v5;
      *(_QWORD *)(v18 + v17) = v9;
      sub_100022948(v4, v5);
      v20 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1]);
      *(_QWORD *)(v0 + 136) = v20;
      *v20 = v0;
      v20[1] = sub_1000F9BB8;
      return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
    }
    v30 = *(_QWORD *)(v0 + 48);
    v23 = enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:);
    v24 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 104);
    v24(v30, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), *(_QWORD *)(v0 + 32));
    v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v31 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v28 = swift_allocError(v26, v31, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x8000000100548760, 0, v30, 0, v39, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 260);
    swift_willThrow(v32);
    sub_1000FB858(v4, v5);
  }
  v33 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 48);
  v24(v35, v23, *(_QWORD *)(v0 + 32));
  swift_errorRetain(v28);
  v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError(0);
  v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v26, v37, 0, 0);
  v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100548730, v28, v35, 0, v36, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 287);
  swift_willThrow(v38);
  swift_errorRelease(v28);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9BB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F9CB8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 128));
    v4 = sub_1000F9C24;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F9C24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  static MobileDocumentReaderMilestone.readerAuthenticationCertificateStored.getter();
  Milestone.log()();
  sub_1000FB858(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 40);
  sub_1000FB858(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v3(v7, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v4);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100548730, v4, v7, 0, v8, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 287);
  swift_willThrow(v11);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F9E28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSString v22;
  Class isa;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Class v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a5;
  v39 = a3;
  v40 = a4;
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v14 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v15 = type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v16 = sub_10045BE2C(v14, v13);
  if (!v5)
  {
    v17 = (id)v16;
    v37 = v15;
    v18 = v11;
    if (v16)
    {
      v19 = (void *)sub_10045C094();
      if (v19)
      {
        v20 = v17;
        v21 = type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate(0);
        v17 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21)), "initWithContext:", *(_QWORD *)(v12 + 16));
        v22 = String._bridgeToObjectiveC()();
        objc_msgSend(v17, "setSessionIdentifier:", v22);

        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v17, "setCertificateChain:", isa);

        v24 = a2 + *(int *)(v37 + 40);
        v25 = *(_QWORD *)(v24 + 8);
        if (v25 >> 60 != 15)
        {
          v26 = *(_QWORD *)v24;
          sub_100022948(*(_QWORD *)v24, *(_QWORD *)(v24 + 8));
          v27 = Data._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v17, "setMerchantLogo:", v27);

          sub_100007F78(v26, v25);
        }
        objc_msgSend(v17, "setApplicationInstallation:", v20);
        objc_msgSend(v17, "setSigningKey:", v19);
        sub_10045B944();

      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v18, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), v8);
        v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v33 = type metadata accessor for DIPError(0);
        v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v33, v34, 0, 0);
        v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004BLL, 0x80000001005487E0, 0, v18, 0, v32, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 269);
        swift_willThrow(v35);
      }

    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.documentReaderCannotStoreCertificate(_:), v8);
      v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v29 = type metadata accessor for DIPError(0);
      v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v29, v30, 0, 0);
      v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004BLL, 0x8000000100548790, 0, v11, 0, v28, 0xD00000000000008BLL, 0x8000000100548650, 0xD000000000000010, 0x8000000100548710, 265);
      swift_willThrow(v31);
    }
  }
}

uint64_t sub_1000FA20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Milestone(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FA298, 0, 0);
}

uint64_t sub_1000FA298()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[2];
  sub_10000806C((_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48));
  v4 = (_QWORD *)swift_allocObject(&unk_100607F10, 40, 7);
  v0[11] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_1000FA370;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_1000FA370()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000FA438;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_1000FA3DC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FA3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  static MobileDocumentReaderMilestone.readerAuthenticationCertificateDeleted.getter();
  Milestone.log()();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FA438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = swift_release(*(_QWORD *)(v0 + 88));
  defaultLogger()(v3);
  DIPRecordError(_:message:log:)(v1, 0xD00000000000006DLL, 0x80000001005485B0, v2);
  swift_errorRelease(v1);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(v4, *(_QWORD *)(v0 + 40));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000FA4CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v4 = *a1;
  v5 = (void *)sub_10045BC48(a2, a3);
  if (!v3)
  {
    v6 = v5;
    if (v5)
    {
      v7 = objc_msgSend(v5, "signingKey");
      if (v7)
      {
        v8 = v7;
        sub_1000F8730(v7, v4);

      }
      objc_msgSend(*(id *)(v4 + 16), "deleteObject:", v6);
      sub_10045B944();

    }
  }
}

uint64_t sub_1000FA578(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for Date(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[11] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000FA624, 0, 0);
}

uint64_t sub_1000FA624()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[13];
  v3 = v0[10];
  v2 = v0[11];
  v4 = v0[9];
  v6 = v0[3];
  v5 = v0[4];
  sub_10000806C((_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 48));
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v7;
  v7(v1, v6, v4);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_100608028, v10 + 8, v8 | 7);
  v0[15] = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v9, v1, v4);
  *(_QWORD *)(v11 + v10) = v5;
  v12 = async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1];
  swift_retain(v5);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[16] = v13;
  *v13 = v0;
  v13[1] = sub_1000FA744;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_1000FA744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000FA9D4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 120));
    v4 = sub_1000FA7B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FA7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 112);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 72);
  defaultLogger()(a1);
  v6 = v3(v4, v2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v1 + 96);
    v10 = *(_QWORD *)(v1 + 72);
    v25 = *(_QWORD *)(v1 + 80);
    v26 = *(_QWORD *)(v1 + 48);
    v27 = *(_QWORD *)(v1 + 40);
    v28 = *(_QWORD *)(v1 + 64);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v29 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v14 = v9;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    v17 = v16;
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v15, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v11 + 4);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v14, v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "MobileDocumentReaderAuthenticationStorage successfully deleted all sessions with expiration date earlier than %s.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 64);
    v19 = *(_QWORD *)(v1 + 40);
    v20 = *(_QWORD *)(v1 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 80) + 8))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 72));

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  v21 = *(_QWORD *)(v1 + 96);
  v23 = *(_QWORD *)(v1 + 56);
  v22 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000FA9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = swift_release(*(_QWORD *)(v0 + 120));
  defaultLogger()(v5);
  DIPRecordError(_:message:log:)(v1, 0xD000000000000078, 0x8000000100548CD0, v2);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000FAA80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __objc2_prop *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  const __CFData *isa;
  SecCertificateRef v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(char *, char *, uint64_t);
  char *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const __CFData *v54;
  SecCertificateRef v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(char *, uint64_t, uint64_t);
  char *v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (**v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD v103[6];
  uint64_t v104;

  v97 = a3;
  v95 = a2;
  v5 = sub_100004828(&qword_100633990);
  v6 = __chkstk_darwin(v5);
  v94 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v87 - v8;
  v10 = type metadata accessor for Date(0);
  v98 = *(void (***)(char *, uint64_t))(v10 - 8);
  v99 = v10;
  v11 = __chkstk_darwin(v10);
  v92 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v87 - v13;
  v15 = *a1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100404254((uint64_t)_swiftEmptyArrayStorage);
    v16 = v39;
  }
  else
  {
    v16 = &_swiftEmptySetSingleton;
  }
  v104 = (uint64_t)v16;
  v17 = type metadata accessor for StoredMobileDocumentReaderAuthenticationCertificate(0);
  v18 = (void *)static StoredMobileDocumentReaderAuthenticationCertificate.fetchRequest()();
  v19 = NSManagedObjectContext.fetch<A>(_:)(v18, v17);
  v96 = v3;
  if (v3)
  {
    swift_bridgeObjectRelease(v16);

    return;
  }
  v20 = v19;
  v100 = v15;

  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v40 = v20;
    else
      v40 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v20);
    if (!v21)
      goto LABEL_36;
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v21)
      goto LABEL_36;
  }
  v90 = v14;
  if (v21 < 1)
  {
    __break(1u);
    goto LABEL_59;
  }
  v22 = 0;
  v23 = v20 & 0xC000000000000001;
  v24 = &stru_10062A000;
  v88 = v20;
  v89 = v9;
  v91 = v21;
  v93 = v20 & 0xC000000000000001;
  do
  {
    if (v23)
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
    else
      v25 = *(id *)(v20 + 8 * v22 + 32);
    v26 = v25;
    v27 = objc_msgSend(v25, v24[145].name);
    if (v27
      && (v28 = v27,
          v102 = 0,
          static Array._conditionallyBridgeFromObjectiveC(_:result:)(v27, &v102, &type metadata for Data),
          v28,
          (v29 = v102) != 0))
    {
      if (v102[2])
      {
        v31 = v102[4];
        v30 = v102[5];
        sub_100022948(v31, v30);
        swift_bridgeObjectRelease(v29);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v33 = SecCertificateCreateWithData(0, isa);

        if (v33)
        {
          SecCertificateRef.expirationDate.getter(v34);
          v36 = (void (**)(char *, char *, uint64_t))v98;
          v35 = v99;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v98[6])(v9, 1, v99) == 1)
          {
            sub_100007F8C(v31, v30);

            sub_100008030((uint64_t)v9, &qword_100633990);
          }
          else
          {
            v37 = v90;
            v36[4](v90, v9, v35);
            if ((static Date.< infix(_:_:)(v37, v95) & 1) != 0)
            {
              v38 = objc_msgSend(v26, "signingKey");
              if (v38)
              {
                sub_1004E63D8((Swift::Int *)&v102, v38);

              }
              objc_msgSend(*(id *)(v100 + 16), "deleteObject:", v26);
              sub_100007F8C(v31, v30);

              v98[1](v90, v99);
            }
            else
            {
              ((void (*)(char *, uint64_t))v36[1])(v37, v35);
              sub_100007F8C(v31, v30);

            }
            v20 = v88;
            v9 = v89;
          }
          v21 = v91;
        }
        else
        {

          sub_100007F8C(v31, v30);
        }
        v23 = v93;
        v24 = &stru_10062A000;
      }
      else
      {

        swift_bridgeObjectRelease(v29);
      }
    }
    else
    {

    }
    ++v22;
  }
  while (v21 != v22);
LABEL_36:
  swift_bridgeObjectRelease(v20);
  v41 = type metadata accessor for StoredMobileDocumentReaderAttestationCertificate(0);
  v42 = (void *)static StoredMobileDocumentReaderAttestationCertificate.fetchRequest()();
  v43 = v96;
  v20 = NSManagedObjectContext.fetch<A>(_:)(v42, v41);

  if (v43)
  {
    swift_bridgeObjectRelease(v104);
    return;
  }
  v96 = 0;
  if ((unint64_t)v20 >> 62)
  {
LABEL_59:
    if (v20 < 0)
      v62 = v20;
    else
      v62 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v44 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v20);
    if (v44)
      goto LABEL_40;
LABEL_63:
    v63 = (_QWORD *)swift_bridgeObjectRelease(v20);
    v64 = v104;
    if ((v104 & 0xC000000000000001) != 0)
    {
      if (v104 < 0)
        v65 = v104;
      else
        v65 = v104 & 0xFFFFFFFFFFFFFF8;
      v66 = __CocoaSet.makeIterator()(v65);
      v67 = type metadata accessor for StoredMobileDocumentReaderSigningKey(0);
      v68 = sub_100004790(&qword_100634A68, (uint64_t (*)(uint64_t))&type metadata accessor for StoredMobileDocumentReaderSigningKey, (uint64_t)&protocol conformance descriptor for NSObject);
      v63 = Set.Iterator.init(_cocoa:)(v103, v66, v67, v68);
      v64 = v103[0];
      v69 = v103[1];
      v70 = v103[2];
      v71 = v103[3];
      v72 = v103[4];
    }
    else
    {
      v71 = 0;
      v73 = -1 << *(_BYTE *)(v104 + 32);
      v69 = v104 + 56;
      v70 = ~v73;
      v74 = -v73;
      if (v74 < 64)
        v75 = ~(-1 << v74);
      else
        v75 = -1;
      v72 = v75 & *(_QWORD *)(v104 + 56);
    }
    v99 = v64 & 0x7FFFFFFFFFFFFFFFLL;
    v95 = v70;
    v76 = (unint64_t)(v70 + 64) >> 6;
    v98 = (void (**)(char *, uint64_t))((char *)&type metadata for Swift.AnyObject + 8);
    if ((v64 & 0x8000000000000000) == 0)
      goto LABEL_76;
    while (1)
    {
      v77 = __CocoaSet.Iterator.next()(v63);
      if (!v77)
        break;
      v78 = v77;
      v101 = v77;
      v79 = type metadata accessor for StoredMobileDocumentReaderSigningKey(0);
      swift_unknownObjectRetain(v78);
      swift_dynamicCast(&v102, &v101, v98, v79, 7);
      v80 = v102;
      swift_unknownObjectRelease(v78);
      v81 = v71;
      v82 = v72;
      if (!v80)
        break;
      while (1)
      {
        sub_1000F8730(v80, v100);

        v71 = v81;
        v72 = v82;
        if (v64 < 0)
          break;
LABEL_76:
        if (v72)
        {
          v82 = (v72 - 1) & v72;
          v83 = __clz(__rbit64(v72)) | (v71 << 6);
          v81 = v71;
        }
        else
        {
          v84 = v71 + 1;
          if (__OFADD__(v71, 1))
          {
            __break(1u);
            goto LABEL_97;
          }
          if (v84 >= v76)
            goto LABEL_95;
          v85 = *(_QWORD *)(v69 + 8 * v84);
          v81 = v71 + 1;
          if (!v85)
          {
            v81 = v71 + 2;
            if (v71 + 2 >= v76)
              goto LABEL_95;
            v85 = *(_QWORD *)(v69 + 8 * v81);
            if (!v85)
            {
              v81 = v71 + 3;
              if (v71 + 3 >= v76)
                goto LABEL_95;
              v85 = *(_QWORD *)(v69 + 8 * v81);
              if (!v85)
              {
                v81 = v71 + 4;
                if (v71 + 4 >= v76)
                  goto LABEL_95;
                v85 = *(_QWORD *)(v69 + 8 * v81);
                if (!v85)
                {
                  v86 = v71 + 5;
                  while (v76 != v86)
                  {
                    v85 = *(_QWORD *)(v69 + 8 * v86++);
                    if (v85)
                    {
                      v81 = v86 - 1;
                      goto LABEL_91;
                    }
                  }
                  goto LABEL_95;
                }
              }
            }
          }
LABEL_91:
          v82 = (v85 - 1) & v85;
          v83 = __clz(__rbit64(v85)) + (v81 << 6);
        }
        v80 = *(id *)(*(_QWORD *)(v64 + 48) + 8 * v83);
        if (!v80)
          goto LABEL_95;
      }
    }
LABEL_95:
    sub_1000FBE78(v64);
    sub_10045B944();
    return;
  }
  v44 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v44)
    goto LABEL_63;
LABEL_40:
  if (v44 >= 1)
  {
    v45 = 0;
    v46 = v20 & 0xC000000000000001;
    v90 = (char *)v20;
    v91 = v20 & 0xC000000000000001;
    v93 = v44;
    while (1)
    {
      if (v46)
        v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v20);
      else
        v47 = *(id *)(v20 + 8 * v45 + 32);
      v48 = v47;
      v49 = objc_msgSend(v47, "certificateData");
      if (v49)
      {
        v50 = v49;
        v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v53 = v52;

        v54 = Data._bridgeToObjectiveC()().super.isa;
        v55 = SecCertificateCreateWithData(0, v54);

        if (v55)
        {
          v57 = (uint64_t)v94;
          SecCertificateRef.expirationDate.getter(v56);
          v59 = (void (**)(char *, uint64_t, uint64_t))v98;
          v58 = v99;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v98[6])(v57, 1, v99) == 1)
          {
            sub_100007F8C(v51, v53);

            sub_100008030(v57, &qword_100633990);
          }
          else
          {
            v60 = v92;
            v59[4](v92, v57, v58);
            if ((static Date.< infix(_:_:)(v60, v95) & 1) != 0)
            {
              v61 = objc_msgSend(v48, "signingKey");
              v46 = v91;
              if (v61)
              {
                sub_1004E63D8((Swift::Int *)&v102, v61);

              }
              objc_msgSend(*(id *)(v100 + 16), "deleteObject:", v48);
              sub_100007F8C(v51, v53);

              v98[1](v92, v99);
              v20 = (uint64_t)v90;
              v44 = v93;
              goto LABEL_43;
            }
            ((void (*)(char *, uint64_t))v59[1])(v60, v58);
            sub_100007F8C(v51, v53);

            v20 = (uint64_t)v90;
          }
          v44 = v93;
          v46 = v91;
        }
        else
        {

          sub_100007F8C(v51, v53);
        }
      }
      else
      {

      }
LABEL_43:
      if (v44 == ++v45)
        goto LABEL_63;
    }
  }
LABEL_97:
  __break(1u);
}

void sub_1000FB34C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;

  v2 = *a1;
  v3 = type metadata accessor for StoredMobileDocumentReaderApplicationInstallation(0);
  v4 = (void *)static StoredMobileDocumentReaderApplicationInstallation.fetchRequest()();
  v5 = NSManagedObjectContext.fetch<A>(_:)(v4, v3);

  if (!v1)
  {
    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v10 = v5;
      else
        v10 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v5);
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
          else
            v8 = *(id *)(v5 + 8 * i + 32);
          v9 = v8;
          objc_msgSend(*(id *)(v2 + 16), "deleteObject:", v8);

        }
      }
    }
    swift_bridgeObjectRelease(v5);
    sub_10045B944();
  }
}

uint64_t sub_1000FB478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FB4E0, 0, 0);
}

uint64_t sub_1000FB4E0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[2];
  sub_10000806C((_QWORD *)(v0[6] + 24), *(_QWORD *)(v0[6] + 48));
  v5 = (_QWORD *)swift_allocObject(&unk_100607FD8, 48, 7);
  v0[10] = v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v2;
  swift_bridgeObjectRetain(v1);
  sub_100022948(v4, v2);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)[1]);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_1000FB5BC;
  return dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)();
}

uint64_t sub_1000FB5BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000FB664;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_1000FB628;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FB628()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 96) == 0);
}

uint64_t sub_1000FB664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = swift_release(*(_QWORD *)(v0 + 80));
  defaultLogger()(v5);
  DIPRecordError(_:message:log:)(v1, 0xD00000000000007FLL, 0x8000000100548A10, v2);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 96) == 0);
}

void sub_1000FB6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;

  v4 = sub_10045BC48(a2, a3);
  if (!v3)
  {
    v5 = (void *)v4;
    if (v4)
    {
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v5, "setMerchantLogo:", isa);

      sub_10045B944();
    }
  }
}

uint64_t sub_1000FB788()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationStorage()
{
  return objc_opt_self(_TtC8coreidvd41MobileDocumentReaderAuthenticationStorage);
}

uint64_t sub_1000FB7D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000FB800(uint64_t *a1)
{
  uint64_t v1;

  sub_1000FA4CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000FB81C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void *sub_1000FB840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000F8F24(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1000FB858(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)

  else
    sub_100007F8C(result, a2);
}

uint64_t sub_1000FB864()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + v1[6];
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7]));
  sub_1000FB858(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[9] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_100007F8C(*v9, v10);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[11] + 8));
  v13 = v6 + v1[12];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_100007F8C(*(_QWORD *)(v0 + v11), *(_QWORD *)(v0 + v11 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

void sub_1000FB9A8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for MobileDocumentReaderAuthenticationSession(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F9E28(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000FBA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000FBAB4(uint64_t *a1)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  sub_1000F8654(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000FBB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000FBB98(uint64_t *a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  sub_1000F64CC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000FBBF4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100007F8C(v0[4], v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000FBC20(uint64_t a1)
{
  uint64_t v1;

  sub_1000FB6FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000FBC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100007F8C(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));
  sub_100007F8C(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_1000FBCE4(uint64_t *a1)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  sub_1000F80D0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_BYTE *sub_1000FBD68@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1002794E0(a1, a2);
}

_QWORD *sub_1000FBD80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100012B24(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000FBD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000FBE0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1000FAA80(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000FBE78(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000FBE84(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  unint64_t (*v25)@<X0>(unint64_t *@<X8>);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t *v76;
  char v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t (*v82)@<X0>(unint64_t *@<X8>);
  uint64_t result;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  unsigned int v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;

  v98 = a2;
  v3 = sub_100004828(&qword_100630AE8);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for IdentityIntentToStore(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v92 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v84 - v10;
  v12 = type metadata accessor for IdentityElement(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v3 + 48);
  v17 = (char *)v5;
  v97 = v5;
  v18 = (char *)v5 + v16;
  v19 = v98 + v16;
  (*(void (**)(char *))(v13 + 16))(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v18, v19, v6);
  v86 = v13;
  v87 = v12;
  v20 = v12;
  v21 = v7;
  (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 32))(v15, v97, v20);
  v22 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v93 = v11;
  v94 = v6;
  v22(v11, v18, v6);
  v85 = v15;
  v23 = sub_1000FC43C();
  v24 = v23[2];
  if (!v24)
  {
    swift_bridgeObjectRelease(v23);
    v82 = 0;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v93, v94);
LABEL_34:
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
    return sub_10002F034((uint64_t)v82, 0);
  }
  v25 = 0;
  v91 = enum case for IdentityIntentToStore.willNotStore(_:);
  v84 = v23;
  v26 = v23 + 7;
  v90 = v7;
  v88 = a1;
  while (1)
  {
    v29 = *(v26 - 3);
    v30 = *(v26 - 2);
    v31 = *(v26 - 1);
    v32 = *v26;
    v97 = v26;
    v98 = v31;
    v33 = *a1;
    v34 = *(_QWORD *)(*a1 + 16);
    swift_bridgeObjectRetain_n(v30, 2);
    swift_bridgeObjectRetain_n(v32, 2);
    if (!v34)
      goto LABEL_8;
    v35 = sub_1004A8604(v29, v30);
    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
      swift_bridgeObjectRetain(v37);
    }
    else
    {
LABEL_8:
      v37 = sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
    }
    swift_bridgeObjectRelease(v30);
    v38 = *(_QWORD *)(v37 + 16);
    v95 = v24;
    if (v38 && (v39 = sub_1004A8604(v98, v32), (v40 & 1) != 0))
      v41 = *(_BYTE *)(*(_QWORD *)(v37 + 56) + v39);
    else
      v41 = 0;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v37);
    v42 = v92;
    v43 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v92, v91, v94);
    v44 = sub_100004790(&qword_100634A70, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityIntentToStore, (uint64_t)&protocol conformance descriptor for IdentityIntentToStore);
    v96 = dispatch thunk of static Equatable.== infix(_:_:)(v93, v42, v43, v44);
    v89 = *(void (**)(char *, uint64_t))(v21 + 8);
    v89(v42, v43);
    sub_10002F034((uint64_t)v25, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v99 = (_QWORD *)*a1;
    v46 = v99;
    *a1 = 0x8000000000000000;
    v48 = sub_1004A8604(v29, v30);
    v49 = v46[2];
    v50 = (v47 & 1) == 0;
    v51 = v49 + v50;
    if (__OFADD__(v49, v50))
      break;
    v52 = v47;
    if (v46[3] >= v51)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10012A23C();
        v46 = v99;
      }
    }
    else
    {
      sub_100124E98(v51, isUniquelyReferenced_nonNull_native);
      v46 = v99;
      v53 = sub_1004A8604(v29, v30);
      if ((v52 & 1) != (v54 & 1))
        goto LABEL_39;
      v48 = v53;
    }
    v55 = *a1;
    *a1 = v46;
    swift_bridgeObjectRelease(v55);
    v56 = (_QWORD *)*a1;
    swift_bridgeObjectRetain(*a1);
    if ((v52 & 1) == 0)
    {
      v57 = sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
      v56[(v48 >> 6) + 8] |= 1 << v48;
      v58 = (uint64_t *)(v56[6] + 16 * v48);
      *v58 = v29;
      v58[1] = v30;
      *(_QWORD *)(v56[7] + 8 * v48) = v57;
      v59 = v56[2];
      v60 = __OFADD__(v59, 1);
      v61 = v59 + 1;
      if (v60)
        goto LABEL_37;
      v56[2] = v61;
      swift_bridgeObjectRetain(v30);
    }
    v62 = v41;
    v63 = v56[7];
    swift_bridgeObjectRelease(v56);
    v64 = 8 * v48;
    v65 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v63 + 8 * v48));
    v99 = *(_QWORD **)(v63 + v64);
    v66 = v99;
    *(_QWORD *)(v63 + v64) = 0x8000000000000000;
    v67 = v32;
    v69 = sub_1004A8604(v98, v32);
    v70 = v66[2];
    v71 = (v68 & 1) == 0;
    v72 = v70 + v71;
    if (__OFADD__(v70, v71))
      goto LABEL_36;
    v73 = v68;
    if (v66[3] < v72)
    {
      sub_100124B90(v72, v65);
      v74 = sub_1004A8604(v98, v67);
      if ((v73 & 1) != (v75 & 1))
        goto LABEL_39;
      v69 = v74;
      goto LABEL_26;
    }
    v76 = v97;
    if ((v65 & 1) == 0)
    {
      sub_10012A094();
LABEL_26:
      v76 = v97;
    }
    v77 = v62 | v96 ^ 1;
    v78 = v99;
    if ((v73 & 1) != 0)
    {
      *(_BYTE *)(v99[7] + v69) = v77 & 1;
      v27 = v67;
    }
    else
    {
      v99[(v69 >> 6) + 8] |= 1 << v69;
      v79 = (_QWORD *)(v78[6] + 16 * v69);
      *v79 = v98;
      v79[1] = v67;
      *(_BYTE *)(v78[7] + v69) = v77 & 1;
      v80 = v78[2];
      v60 = __OFADD__(v80, 1);
      v81 = v80 + 1;
      if (v60)
        goto LABEL_38;
      v78[2] = v81;
      swift_bridgeObjectRetain(v67);
    }
    v26 = v76 + 4;
    v28 = *(_QWORD *)(v63 + v64);
    *(_QWORD *)(v63 + v64) = v78;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v30);
    v25 = sub_1000FCC70;
    v24 = v95 - 1;
    a1 = v88;
    v21 = v90;
    if (v95 == 1)
    {
      swift_bridgeObjectRelease(v84);
      v82 = sub_1000FCC70;
      v89(v93, v94);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_1000FC43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t DynamicType;
  uint64_t v34;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v52;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD v62[5];
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;

  v1 = v0;
  v2 = type metadata accessor for ISO18013KnownNamespaces(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v62[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IdentityElement(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)&v62[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, v1, v6);
  v10 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 == enum case for IdentityElement.ageIsOver(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v9, v6);
    v11 = *v9;
    v12 = sub_100004828(&qword_100634038);
    v13 = swift_allocObject(v12, 64, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10051FFB0;
    v14 = static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter();
    v15 = ISO18013KnownNamespaces.rawValue.getter(v14);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v17;
    *(_QWORD *)(v13 + 48) = static ISO23220_1_ElementIdentifier.ageOver(nn:)(v11);
    *(_QWORD *)(v13 + 56) = v18;
    return (_QWORD *)v13;
  }
  if (v10 == enum case for IdentityElement.givenName(_:) || v10 == enum case for IdentityElement.familyName(_:))
  {
    v20 = sub_100004828(&qword_100634A78);
    v21 = (_QWORD *)swift_allocObject(v20, 72, 7);
    *((_OWORD *)v21 + 1) = xmmword_10051FFB0;
    v22 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
    v21[7] = v22;
    v21[8] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
    v23 = sub_100022234(v21 + 4);
    v24 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:);
LABEL_13:
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v23, *v24, v22);
    goto LABEL_14;
  }
  if (v10 == enum case for IdentityElement.sex(_:))
  {
    v25 = sub_100004828(&qword_100634A78);
    v21 = (_QWORD *)swift_allocObject(v25, 112, 7);
    *((_OWORD *)v21 + 1) = xmmword_1005208D0;
    v26 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
    v21[7] = v26;
    v21[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
    v27 = sub_100022234(v21 + 4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v27, enum case for ISO23220_1_ElementIdentifier.sex(_:), v26);
    v22 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
    v21[12] = v22;
    v21[13] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
    v23 = sub_100022234(v21 + 9);
    v24 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.sex(_:);
    goto LABEL_13;
  }
  if (v10 == enum case for IdentityElement.portrait(_:))
  {
    v28 = sub_100004828(&qword_100634A78);
    v21 = (_QWORD *)swift_allocObject(v28, 72, 7);
    *((_OWORD *)v21 + 1) = xmmword_10051FFB0;
    v22 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
    v21[7] = v22;
    v21[8] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
    v23 = sub_100022234(v21 + 4);
    v24 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:);
    goto LABEL_13;
  }
  if (v10 == enum case for IdentityElement.address(_:))
  {
    v47 = sub_100004828(&qword_100634A78);
    v21 = (_QWORD *)swift_allocObject(v47, 112, 7);
    *((_OWORD *)v21 + 1) = xmmword_1005208D0;
    v48 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
    v21[7] = v48;
    v49 = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
    v21[8] = v49;
    v50 = sub_100022234(v21 + 4);
    v51 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104);
    v51(v50, enum case for ISO23220_1_Japan_ElementIdentifier.localGovCode(_:), v48);
    v21[12] = v48;
    v21[13] = v49;
    v52 = sub_100022234(v21 + 9);
    v51(v52, enum case for ISO23220_1_Japan_ElementIdentifier.residentAddress(_:), v48);
  }
  else
  {
    if (v10 != enum case for IdentityElement.issuingAuthority(_:)
      && v10 != enum case for IdentityElement.documentDHSComplianceStatus(_:)
      && v10 != enum case for IdentityElement.documentIssueDate(_:)
      && v10 != enum case for IdentityElement.documentExpirationDate(_:))
    {
      if (v10 == enum case for IdentityElement.documentNumber(_:))
      {
        v56 = sub_100004828(&qword_100634A78);
        v21 = (_QWORD *)swift_allocObject(v56, 72, 7);
        *((_OWORD *)v21 + 1) = xmmword_10051FFB0;
        v22 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
        v21[7] = v22;
        v21[8] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
        v23 = sub_100022234(v21 + 4);
        v24 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.individualNumber(_:);
        goto LABEL_13;
      }
      if (v10 != enum case for IdentityElement.drivingPrivileges(_:))
      {
        if (v10 == enum case for IdentityElement.age(_:))
        {
          v57 = sub_100004828(&qword_100634A78);
          v21 = (_QWORD *)swift_allocObject(v57, 72, 7);
          *((_OWORD *)v21 + 1) = xmmword_10051FFB0;
          v22 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
          v21[7] = v22;
          v21[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
          v23 = sub_100022234(v21 + 4);
          v24 = (unsigned int *)&enum case for ISO23220_1_ElementIdentifier.ageInYears(_:);
          goto LABEL_13;
        }
        if (v10 == enum case for IdentityElement.dateOfBirth(_:))
        {
          v58 = sub_100004828(&qword_100634A78);
          v21 = (_QWORD *)swift_allocObject(v58, 112, 7);
          *((_OWORD *)v21 + 1) = xmmword_1005208D0;
          v59 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
          v21[7] = v59;
          v21[8] = sub_100004790(&qword_100634A80, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_ElementIdentifier);
          v60 = sub_100022234(v21 + 4);
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v60, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v59);
          v22 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
          v21[12] = v22;
          v21[13] = sub_100004790(&qword_100634A88, (uint64_t (*)(uint64_t))&type metadata accessor for ISO23220_1_Japan_ElementIdentifier, (uint64_t)&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier);
          v23 = sub_100022234(v21 + 9);
          v24 = (unsigned int *)&enum case for ISO23220_1_Japan_ElementIdentifier.birthDate(_:);
          goto LABEL_13;
        }
        (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
      }
    }
    v21 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  v29 = v21[2];
  if (v29)
  {
    v70 = _swiftEmptyArrayStorage;
    sub_1000E4258(0, v29, 0);
    v61 = v21;
    v30 = (uint64_t)(v21 + 4);
    do
    {
      sub_10002581C(v30, (uint64_t)v63);
      v31 = v64;
      v32 = sub_10000806C(v63, v64);
      DynamicType = swift_getDynamicType(v32, v31, 1);
      v34 = v65;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v65, DynamicType, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated type descriptor for MobileDocumentElementIdentifier.NamespaceIdentifier);
      v62[3] = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v34, DynamicType, AssociatedTypeWitness, &protocol requirements base descriptor for MobileDocumentElementIdentifier, &associated conformance descriptor for MobileDocumentElementIdentifier.MobileDocumentElementIdentifier.NamespaceIdentifier: RawRepresentable);
      v62[4] = AssociatedConformanceWitness;
      sub_100022234(v62);
      dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(DynamicType, v34);
      dispatch thunk of RawRepresentable.rawValue.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
      v37 = v64;
      v38 = v65;
      sub_10000806C(v63, v64);
      dispatch thunk of RawRepresentable.rawValue.getter(v37, *(_QWORD *)(v38 + 16));
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v62);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v63);
      v39 = v68;
      v40 = v69;
      v41 = v66;
      v42 = v67;
      v13 = (uint64_t)v70;
      if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
      {
        sub_1000E4258(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = (uint64_t)v70;
      }
      v44 = *(_QWORD *)(v13 + 16);
      v43 = *(_QWORD *)(v13 + 24);
      if (v44 >= v43 >> 1)
      {
        sub_1000E4258(v43 > 1, v44 + 1, 1);
        v13 = (uint64_t)v70;
      }
      *(_QWORD *)(v13 + 16) = v44 + 1;
      v45 = (_QWORD *)(v13 + 32 * v44);
      v45[4] = v39;
      v45[5] = v40;
      v45[6] = v41;
      v45[7] = v42;
      v30 += 40;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease(v61);
  }
  else
  {
    swift_bridgeObjectRelease(v21);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v13;
}

unint64_t sub_1000FCC70@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
  *a1 = result;
  return result;
}

uint64_t sub_1000FCC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Destroying IdentityProofingDataSharingSessionProxy", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10001D07C(v1 + 16);
  swift_release(*(_QWORD *)(v1 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 40));
  return v1;
}

uint64_t sub_1000FCDAC()
{
  uint64_t v0;

  sub_1000FCC9C();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_1000FCDCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000FCE8C, 0, 0);
}

uint64_t sub_1000FCE8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting fetchUserConsent event", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[12];
  v7 = v1[9];
  v8 = v1[10];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[13] = v9;
  v9(v6, v7);
  sub_1000FDE64();
  v10 = (_QWORD *)swift_task_alloc(dword_1006379B4);
  v1[14] = v10;
  *v10 = v1;
  v10[1] = sub_1000FD138;
  return sub_1001B7614();
}

uint64_t sub_1000FD138(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000FD1E4, 0, 0);
  v7 = *(_QWORD *)(v5 + 88);
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(_QWORD *)(v5 + 40);
  swift_task_dealloc(*(_QWORD *)(v5 + 96));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1000FD1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v18 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD00000000000006ELL, 0x8000000100548E10, 0xD000000000000012, 0x8000000100548F30, 42);
  v8 = sub_100007F30();
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v12 = v10(v11, v3, v5);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v9, 0, 0xE000000000000000, v2);
  v17(v2, v16);
  swift_errorRelease(v9);
  swift_allocError(v5, v8, 0, 0);
  v14 = v10(v13, v3, v5);
  swift_willThrow(v14);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v18);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD4C4(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100634ABC;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000FD524;
  return sub_1000FCDCC();
}

uint64_t sub_1000FD524(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(_QWORD *)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);
  swift_release(v5);
  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v7 + 16))(v7);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000FD634()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000FD6F4, 0, 0);
}

uint64_t sub_1000FD6F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting checkUserConsent event", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[12];
  v7 = v1[9];
  v8 = v1[10];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[13] = v9;
  v9(v6, v7);
  sub_1000FDE64();
  v10 = (_QWORD *)swift_task_alloc(dword_1006379AC);
  v1[14] = v10;
  *v10 = v1;
  v10[1] = sub_1000FD9A4;
  return sub_1001B6880();
}

uint64_t sub_1000FD9A4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000FDA50, 0, 0);
  v7 = *(_QWORD *)(v5 + 88);
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(_QWORD *)(v5 + 40);
  swift_task_dealloc(*(_QWORD *)(v5 + 96));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

uint64_t sub_1000FDA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v18 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD00000000000006ELL, 0x8000000100548E10, 0xD000000000000012, 0x8000000100548F10, 68);
  v8 = sub_100007F30();
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v12 = v10(v11, v3, v5);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v9, 0, 0xE000000000000000, v2);
  v17(v2, v16);
  swift_errorRelease(v9);
  swift_allocError(v5, v8, 0, 0);
  v14 = v10(v13, v3, v5);
  swift_willThrow(v14);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v18);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t type metadata accessor for IdentityProofingDataSharingSessionProxy()
{
  return objc_opt_self(_TtC8coreidvd39IdentityProofingDataSharingSessionProxy);
}

uint64_t sub_1000FDD54(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100634AC4;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000FDDB4;
  return sub_1000FD634();
}

uint64_t sub_1000FDDB4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(_QWORD *)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);
  swift_release(v5);
  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000FDE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v0;
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v8);
  v11 = swift_retain_n(v0, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v45 = v4;
  if (v14)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v50 = v42;
    v43 = v3;
    *(_DWORD *)v15 = 136315138;
    v40 = v15 + 4;
    v41 = v15;
    v16 = v6;
    Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
    v18 = *(_QWORD *)(v0 + 24);
    v48 = Strong;
    v49 = v18;
    v19 = sub_100004828((uint64_t *)&unk_100634B90);
    v20 = Optional.debugDescription.getter(v19);
    v44 = v1;
    v22 = v21;
    v23 = Strong;
    v6 = v16;
    swift_unknownObjectRelease(v23);
    v48 = sub_1000E3AC8(v20, v22, &v50);
    v3 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v40);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v22);
    v24 = v13;
    v25 = v41;
    _os_log_impl((void *)&_mh_execute_header, v12, v24, "Checking connection %s", v41, 0xCu);
    v26 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
  v27 = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(v27);
    if ((dispatch thunk of NSXPCConnectionProtocol.isEntitled(_:)(0xD000000000000031, 0x8000000100548E80, ObjectType, v29) & 1) == 0)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v6, enum case for DIPError.Code.missingEntitlement(_:), v3);
      v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v32 = type metadata accessor for DIPError(0);
      v33 = sub_100007F30();
      swift_allocError(v32, v33, 0, 0);
      v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x8000000100548EC0, 0, v6, 0, v31, 0xD00000000000006ELL, 0x8000000100548E10, 0xD000000000000012, 0x8000000100542350, 80);
      swift_willThrow(v34);
    }
    return swift_unknownObjectRelease(v28);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v6, enum case for DIPError.Code.missingEntitlement(_:), v3);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100007F30();
    swift_allocError(v37, v38, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x80000001005422B0, 0, v6, 0, v36, 0xD00000000000006ELL, 0x8000000100548E10, 0xD000000000000012, 0x8000000100542350, 77);
    return swift_willThrow(v39);
  }
}

uint64_t sub_1000FE298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[3] = 0;
  v12 = swift_unknownObjectWeakInit(v4 + 2, 0);
  v13 = defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v23 = a3;
    v17 = a2;
    v18 = a1;
    v19 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Creating IdentityProofingDataSharingSessionProxy", v16, 2u);
    v20 = v19;
    a1 = v18;
    a2 = v17;
    a3 = v23;
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v4[3] = a2;
  swift_unknownObjectWeakAssign(v4 + 2, a1);
  v4[4] = a3;
  swift_retain(a3);
  result = os_transaction_create("IdentityProofingDataSharingSessionProxy");
  if (result)
  {
    v4[5] = result;
    return (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FE40C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100634BA4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100007EE8;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100634BA0 + dword_100634BA0))(v2, v3);
}

uint64_t sub_1000FE474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100643684);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001D0A0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100643680 + dword_100643680))(v2, v3, v4);
}

void sub_1000FE4F0(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const void *v17;
  uint64_t v18[6];
  const void *v19;

  v18[5] = a2;
  v18[0] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v18[1] = *(_QWORD *)(v4 - 8);
  v18[2] = v4;
  __chkstk_darwin(v4);
  v18[3] = (uint64_t)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v18[4] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  v11 = (char *)v18 - v10;
  v19 = a3;
  v12 = _Block_copy(a3);
  v13 = defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting didChangeUserConsent event", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_1000FDE64();
  v17 = v19;
  _Block_copy(v19);
  sub_1001B9C08(v18[0], v17);
  _Block_release(v17);
  _Block_release(v17);
}

uint64_t sub_1000FE840()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FE86C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100634BC4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001D0A0;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100634BC0 + dword_100634BC0))(v2, v3);
}

uint64_t sub_1000FE8D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  v2[60] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v2[61] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[62] = v5;
  v2[63] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)&dword_100634CA0 + dword_100634CA0;
  v6 = (_QWORD *)swift_task_alloc(unk_100634CA4);
  v2[64] = v6;
  *v6 = v2;
  v6[1] = sub_1000FE974;
  return ((uint64_t (*)(_QWORD *, uint64_t))v8)(v2 + 2, a2);
}

uint64_t sub_1000FE974()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 512);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000FE9E4, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 504));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000FE9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (__cdecl *v12)();

  sub_1000A1F54(v0 + 424, v0 + 464, &qword_100632378);
  sub_1000A1F54(v0 + 464, v0 + 456, &qword_100632378);
  v1 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 520) = v1;
  if (v1
    && (sub_1000A1F54(v0 + 432, v0 + 472, &qword_100632378),
        sub_1000A1F54(v0 + 472, v0 + 448, &qword_100632378),
        v2 = *(_QWORD *)(v0 + 448),
        (*(_QWORD *)(v0 + 528) = v2) != 0))
  {
    sub_1000FFB34((_QWORD *)(v0 + 464));
    sub_1000FFB34((_QWORD *)(v0 + 472));
    sub_1000A7F60((_QWORD *)(v0 + 16));
    v12 = (uint64_t (__cdecl *)())((char *)&dword_100634CA8 + dword_100634CA8);
    v3 = (_QWORD *)swift_task_alloc(unk_100634CAC);
    *(_QWORD *)(v0 + 536) = v3;
    *v3 = v0;
    v3[1] = sub_1000FEBE4;
    return v12();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 496);
    v5 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 488);
    sub_1000A7F60((_QWORD *)(v0 + 16));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.attributeConfigUnavailable(_:), v7);
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100007F30();
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100549140, 0, v5, 0, v8, 0xD00000000000007DLL, 0x8000000100549040, 0xD000000000000030, 0x8000000100549170, 55);
    swift_willThrow(v11);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000FEBE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000FEC40, 0, 0);
}

uint64_t sub_1000FEC40()
{
  _QWORD *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  char v7;
  id v8;
  Swift::String v9;
  Swift::Bool v10;
  char v11;
  char v12;
  id v13;
  Swift::String v14;
  Swift::Bool v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  if (v0[68])
  {
    v1 = (void *)objc_opt_self(NSUserDefaults);
    v2 = objc_msgSend(v1, "standardUserDefaults");
    v3._countAndFlagsBits = 0xD00000000000001CLL;
    v3._object = (void *)0x80000001005491E0;
    v4 = NSUserDefaults.internalBool(forKey:)(v3);

    v5 = v0[65];
    if (v4)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0[65]);
      sub_100481050(0xD000000000000014, 0x8000000100549560, 0xD000000000000016, 0x8000000100549540, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      v7 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0x10000000000000D7, 0x80000001005495A0, 0xD000000000000019, 0x8000000100549580, v7);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v8 = objc_msgSend(v1, "standardUserDefaults");
    v9._countAndFlagsBits = 0xD00000000000003CLL;
    v9._object = (void *)0x8000000100549200;
    v10 = NSUserDefaults.internalBool(forKey:)(v9);

    if (v10)
    {
      v11 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000021, 0x80000001005494F0, 0xD000000000000033, 0x800000010053A220, v11);
      swift_bridgeObjectRelease(0x8000000000000000);
      v12 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD00000000000001DLL, 0x8000000100549520, 0xD00000000000002BLL, 0x800000010053A1F0, v12);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v13 = objc_msgSend(v1, "standardUserDefaults");
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    v14._object = (void *)0x8000000100549240;
    v15 = NSUserDefaults.internalBool(forKey:)(v14);

    if (v15)
    {
      v16 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000010, 0x80000001005492B0, 0xD000000000000038, 0x8000000100549270, v16);
      swift_bridgeObjectRelease(0x8000000000000000);
      v17 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x8000000100549310, 0xD000000000000039, 0x80000001005492D0, v17);
      swift_bridgeObjectRelease(0x8000000000000000);
      v18 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x8000000100549370, 0xD000000000000039, 0x8000000100549330, v18);
      swift_bridgeObjectRelease(0x8000000000000000);
      v19 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x80000001005493D0, 0xD000000000000039, 0x8000000100549390, v19);
      swift_bridgeObjectRelease(0x8000000000000000);
      v20 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000010, 0x80000001005492B0, 0xD000000000000036, 0x80000001005493F0, v20);
      swift_bridgeObjectRelease(0x8000000000000000);
      v21 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x8000000100549310, 0xD000000000000037, 0x8000000100549430, v21);
      swift_bridgeObjectRelease(0x8000000000000000);
      v22 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x8000000100549370, 0xD000000000000037, 0x8000000100549470, v22);
      swift_bridgeObjectRelease(0x8000000000000000);
      v23 = swift_isUniquelyReferenced_nonNull_native(v5);
      sub_100481050(0xD000000000000011, 0x80000001005493D0, 0xD000000000000037, 0x80000001005494B0, v23);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v24 = v0[63];
    IdentityProofingAttributeConfiguration.init(attributeMessages:messageReplacements:unorderedUI:)(v5, v0[66], v0[68]);
    swift_task_dealloc(v24);
    v25 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v27 = v0[62];
    v26 = v0[63];
    v28 = v0[61];
    sub_100083F00(v0 + 58);
    sub_100083F00(v0 + 59);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v26, enum case for DIPError.Code.invalidStaticWorkflow(_:), v28);
    v29 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_100007F30();
    swift_allocError(v30, v31, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001005491B0, 0, v26, 0, v29, 0xD00000000000007DLL, 0x8000000100549040, 0xD000000000000030, 0x8000000100549170, 59);
    swift_willThrow(v32);
    swift_task_dealloc(v0[63]);
    v25 = (uint64_t (*)(void))v0[1];
  }
  return v25();
}

uint64_t type metadata accessor for IdentityProofingConfigProvider()
{
  return objc_opt_self(_TtC8coreidvd30IdentityProofingConfigProvider);
}

uint64_t sub_1000FF22C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[112] = a2;
  v2[111] = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[113] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[114] = v4;
  v2[115] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[116] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[117] = v6;
  v2[118] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FF2B8, 0, 0);
}

uint64_t sub_1000FF2B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = (_QWORD *)v1[112];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v20 = v1[117];
    v21 = v1[116];
    v22 = v1[118];
    v6 = v1[112];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v23 = v8;
    if (v6)
      v9 = v2;
    else
      v9 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v2);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v9);
    v1[110] = sub_1000E3AC8(v10, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 110, v1 + 111, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetch active config called for supported languages %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    v13 = v1[118];
    v14 = v1[117];
    v15 = v1[116];
    swift_bridgeObjectRelease_n(v2, 2);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v16 = (uint64_t)v2;
  if (!v1[112])
  {
    if (qword_10062F5B8 != -1)
      swift_once(&qword_10062F5B8, sub_1004DF7EC);
    v16 = qword_100670840;
    swift_bridgeObjectRetain(qword_100670840);
  }
  v1[119] = v16;
  v17 = qword_10062F4C0;
  swift_bridgeObjectRetain(v2);
  if (v17 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v18 = (_QWORD *)swift_task_alloc(dword_10063997C);
  v1[120] = v18;
  *v18 = v1;
  v18[1] = sub_1000FF56C;
  return sub_100233BB8((uint64_t)(v1 + 56), 0xD000000000000025, 0x8000000100542BF0, v16, 1);
}

uint64_t sub_1000FF56C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 952);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 960));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000FF5CC, 0, 0);
}

uint64_t sub_1000FF5CC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_1000A1F54(v0 + 448, v0 + 16, &qword_100632330);
  v1 = sub_100035A5C(v0 + 16);
  v2 = *(_QWORD *)(v0 + 944);
  v3 = *(_QWORD *)(v0 + 920);
  if (v1 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 912) + 104))(*(_QWORD *)(v0 + 920), enum case for DIPError.Code.missingActiveConfig(_:), *(_QWORD *)(v0 + 904));
    v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v6 = sub_100007F30();
    swift_allocError(v5, v6, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100549010, 0, v3, 0, v4, 0xD00000000000007DLL, 0x8000000100549040, 0xD00000000000002DLL, 0x80000001005490C0, 21);
    swift_willThrow(v7);
  }
  else
  {
    memcpy(*(void **)(v0 + 888), (const void *)(v0 + 16), 0x1B0uLL);
  }
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF74C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPError.Code(0);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  v0[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v0[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[9] = v6;
  v0[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v0[11] = v7;
  v0[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FF81C, 0, 0);
}

uint64_t sub_1000FF81C()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[13] = sub_1004585BC();
  v1 = (uint64_t **)swift_task_alloc(dword_10064212C);
  v0[14] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1000FF8A8;
  return sub_100457E5C(v0[12], 0xD000000000000024, 0x800000010053AEF0, 0xD000000000000027, 0x800000010053AF20);
}

uint64_t sub_1000FF8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000FF990;
  else
    v3 = sub_1000FF90C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000FF90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 48));
  swift_bridgeObjectRetain(v3);
  sub_100006350(v1);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000FF990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v6, enum case for DIPError.Code.invalidStaticWorkflow(_:), *(_QWORD *)(v0 + 40));
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001005490F0, 0, v6, 0, v10, 0xD00000000000007DLL, 0x8000000100549040, 0xD000000000000019, 0x8000000100549120, 36);
  v11 = sub_100007F30();
  v12 = swift_allocError(v5, v11, 0, 0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v13, v3, v5);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v12, 0, 0xE000000000000000, v7);
  swift_release(v2);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_errorRelease(v12);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

_QWORD *sub_1000FFB34(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_1000FFB5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[31] = a1;
  v2[32] = a2;
  v3 = type metadata accessor for Date(0);
  v2[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[34] = v4;
  v2[35] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v2[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[37] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v7);
  v2[39] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000FFBF4, 0, 0);
}

uint64_t sub_1000FFBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  (*(void (**)(void))(v0 + 248))();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
  v5 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v1, v2);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = type metadata accessor for SESKeystore(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = SESKeystore.init()();
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v12 = qword_1006702A0;
    v13 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v14 = (uint64_t)&v13[4];
    v15 = v13 + 52;
    os_unfair_lock_lock(v13 + 52);
    sub_100139D14(v14, v12, (_OWORD *)(v0 + 16));
    os_unfair_lock_unlock(v15);
    v16 = *(_QWORD *)(v0 + 72);
    swift_retain(v16);
    sub_10001D410((_QWORD *)(v0 + 16));
    *(_QWORD *)(v0 + 232) = type metadata accessor for MobileDocumentReaderDataContainer();
    *(_QWORD *)(v0 + 240) = sub_10001D444();
    *(_QWORD *)(v0 + 208) = v16;
    v17 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
    v18 = swift_allocObject(v17, 64, 7);
    *(_QWORD *)(v0 + 320) = v18;
    *(_QWORD *)(v18 + 16) = v11;
    v19 = sub_100008018((__int128 *)(v0 + 208), v18 + 24);
    static Date.now.getter(v19);
    v20 = (_QWORD *)swift_task_alloc(dword_100634A64);
    *(_QWORD *)(v0 + 328) = v20;
    *v20 = v0;
    v20[1] = sub_1000FFDF4;
    return sub_1000FA578(*(_QWORD *)(v0 + 280));
  }
}

uint64_t sub_1000FFDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1000FFE68, 0, 0);
}

uint64_t sub_1000FFE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 320));
  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FFEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(double *)(v6 + 80) = a6;
  *(_QWORD *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 72) = a5;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 56) = a3;
  *(_QWORD *)(v6 + 40) = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 88) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100633990);
  *(_QWORD *)(v6 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 120) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 128) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 136) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 144) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 152) = swift_task_alloc(v12);
  v13 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
  *(_QWORD *)(v6 + 160) = v13;
  *(_QWORD *)(v6 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 176) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v6 + 184) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 192) = swift_task_alloc(v16);
  *(_QWORD *)(v6 + 200) = swift_task_alloc(v16);
  return swift_task_switch(sub_1000FFFE4, 0, 0);
}

uint64_t sub_1000FFFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v1 + 72);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 184);
    v17 = *(_QWORD *)(v1 + 176);
    v18 = *(_QWORD *)(v1 + 200);
    v8 = *(_QWORD *)(v1 + 64);
    v7 = *(_QWORD *)(v1 + 72);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v19 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 32) = sub_1000E3AC8(v8, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Checking if activity %s is ready to run", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v18, v17);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 176);
    v14 = *(_QWORD *)(v1 + 184);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 72), 2);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  *(_QWORD *)(v1 + 208) = v11;
  v15 = (_QWORD *)swift_task_alloc(dword_100634CCC);
  *(_QWORD *)(v1 + 216) = v15;
  *v15 = v1;
  v15[1] = sub_1001001B8;
  return sub_100100CD4(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(double *)(v1 + 80));
}

uint64_t sub_1001001B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100100830;
  else
    v3 = sub_10010021C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010021C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL4 v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t type;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_100027B0C(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 160) + 24), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001E5E4(*(_QWORD *)(v0 + 112));
    v4 = (_QWORD *)swift_task_alloc(dword_100634CD4);
    *(_QWORD *)(v0 + 256) = v4;
    *v4 = v0;
    v4[1] = sub_100100730;
    return sub_1001011E4(*(_QWORD *)(v0 + 40), *(double *)(v0 + 80), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 32);
    v11 = v10(v7, *(_QWORD *)(v0 + 112), v8);
    Date.init()(v11);
    LOBYTE(v7) = static Date.< infix(_:_:)(v6, v7);
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    *(_QWORD *)(v0 + 232) = v12;
    v13 = v12(v6, v8);
    if ((v7 & 1) != 0)
    {
      v14 = *(_QWORD *)(v0 + 152);
      v16 = *(_QWORD *)(v0 + 128);
      v15 = *(_QWORD *)(v0 + 136);
      v17 = *(_QWORD *)(v0 + 120);
      v18 = *(_QWORD *)(v0 + 72);
      defaultLogger()(v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
      v19 = swift_bridgeObjectRetain_n(v18, 2);
      v20 = Logger.logObject.getter(v19);
      type = static os_log_type_t.debug.getter(v20);
      v21 = os_log_type_enabled(v20, type);
      v22 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
      v23 = *(_QWORD *)(v0 + 192);
      v24 = *(_QWORD *)(v0 + 168);
      v47 = *(_QWORD *)(v0 + 176);
      v25 = *(_QWORD *)(v0 + 136);
      v26 = *(_QWORD *)(v0 + 120);
      v27 = *(_QWORD *)(v0 + 72);
      if (v21)
      {
        v45 = *(_QWORD *)(v0 + 168);
        v28 = *(_QWORD *)(v0 + 64);
        v44 = *(_QWORD *)(v0 + 192);
        v29 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v48 = v43;
        *(_DWORD *)v29 = 136315394;
        swift_bridgeObjectRetain(v27);
        *(_QWORD *)(v0 + 16) = sub_1000E3AC8(v28, v27, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v29 + 4);
        swift_bridgeObjectRelease_n(v27, 3);
        *(_WORD *)(v29 + 12) = 2080;
        v30 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v31 = dispatch thunk of CustomStringConvertible.description.getter(v26, v30);
        v33 = v32;
        *(_QWORD *)(v0 + 24) = sub_1000E3AC8(v31, v32, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v29 + 14);
        swift_bridgeObjectRelease(v33);
        v12(v25, v26);
        _os_log_impl((void *)&_mh_execute_header, v20, type, "Activity %s next attempt is at %s, not running now", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        v22(v44, v47);
        v34 = v45;
      }
      else
      {

        v12(v25, v26);
        swift_bridgeObjectRelease_n(v27, 2);
        v22(v23, v47);
        v34 = v24;
      }
      sub_100104848(v34);
      v10(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
      v36 = *(_QWORD *)(v0 + 192);
      v37 = *(_QWORD *)(v0 + 168);
      v39 = *(_QWORD *)(v0 + 144);
      v38 = *(_QWORD *)(v0 + 152);
      v40 = *(_QWORD *)(v0 + 136);
      v42 = *(_QWORD *)(v0 + 104);
      v41 = *(_QWORD *)(v0 + 112);
      swift_task_dealloc(*(_QWORD *)(v0 + 200));
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v35 = (_QWORD *)swift_task_alloc(dword_100634CDC);
      *(_QWORD *)(v0 + 240) = v35;
      *v35 = v0;
      v35[1] = sub_10010061C;
      return sub_100101904(*(_QWORD *)(v0 + 40), *(double *)(v0 + 80), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    }
  }
}

uint64_t sub_10010061C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100100B38;
  else
    v3 = sub_100100680;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100100680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(v0 + 232))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  sub_100104848(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001009B0;
  else
    v3 = sub_100100794;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100100794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100104848(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000090, 0x8000000100549680, 0xD000000000000014, 0x8000000100549740, 100);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001009B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100104848(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000090, 0x8000000100549680, 0xD000000000000014, 0x8000000100549740, 100);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(v0 + 232))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  sub_100104848(v1);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v2);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v9, 0xD000000000000090, 0x8000000100549680, 0xD000000000000014, 0x8000000100549740, 100);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100CD4(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v4 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 80) = v8;
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100100D64, 0, 0);
}

uint64_t sub_100100D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v1, 24, 7);
  sub_1000D6044();
  v0[12] = v2;
  v3 = v2;
  v5 = v0[10];
  v4 = v0[11];
  v6 = v0[9];
  v7 = v0[5];
  v9 = v0[3];
  v8 = v0[4];
  v10 = (_QWORD *)swift_allocObject(&unk_100608228, 48, 7);
  v0[13] = v10;
  v10[2] = v3;
  v10[3] = v9;
  v10[4] = v8;
  v10[5] = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v3);
  swift_bridgeObjectRetain(v8);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[14] = v12;
  v13 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
  *v12 = v0;
  v12[1] = sub_100100FC0;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0[2], v0[11], sub_100104A60, v10, v13);
}

uint64_t sub_100100FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_10010109C;
  else
    v7 = sub_100101054;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100101054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010109C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000090, 0x8000000100549680, 0x6174654D64616F6CLL, 0xEE00292861746164, 179);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001011E4(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(double *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  *(_QWORD *)(v5 + 32) = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v5 + 64) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 72) = v7;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 96) = v9;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 112) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 120) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v10);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 136) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 144) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 152) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 160) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 168) = swift_task_alloc(v13);
  return swift_task_switch(sub_1001012F8, 0, 0);
}

uint64_t sub_1001012F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;

  v2 = *(_QWORD *)(v1 + 160);
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = *(_QWORD **)(v1 + 144);
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 112);
  v9 = *(double *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = Date.init()(a1);
  Date.addingTimeInterval(_:)(v11, v9);
  v12 = (uint64_t (*)(uint64_t, uint64_t))v5[1];
  *(_QWORD *)(v1 + 176) = v12;
  v13 = v12(v2, v4);
  Date.addingRandomOffset(in:)(v13, v9);
  v12(v3, v4);
  v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5[7];
  v14(v6, 1, 1, v4);
  v14(v7, 1, 1, v4);
  v15 = (void (*)(uint64_t, uint64_t, uint64_t))v5[2];
  *(_QWORD *)(v1 + 184) = v15;
  v15(v8, v10, v4);
  v14(v8, 0, 1, v4);
  v16 = (_QWORD *)swift_task_alloc(dword_100634CE4);
  *(_QWORD *)(v1 + 192) = v16;
  *v16 = v1;
  v16[1] = sub_100101424;
  return sub_100102D88(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_100101424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  sub_10001E5E4(v5);
  sub_10001E5E4(v4);
  sub_10001E5E4(v3);
  if (v0)
    v6 = sub_100101774;
  else
    v6 = sub_1001014B0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001014B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 184);
  v4 = *(_QWORD *)(v1 + 152);
  v5 = *(_QWORD *)(v1 + 136);
  v6 = *(_QWORD *)(v1 + 48);
  defaultLogger()(a1);
  v3(v4, v2, v5);
  v7 = swift_bridgeObjectRetain_n(v6, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v1 + 152);
    v11 = *(_QWORD *)(v1 + 136);
    v35 = *(void (**)(uint64_t, uint64_t))(v1 + 176);
    v36 = *(_QWORD *)(v1 + 96);
    v37 = *(_QWORD *)(v1 + 88);
    v38 = *(_QWORD *)(v1 + 104);
    v13 = *(_QWORD *)(v1 + 40);
    v12 = *(_QWORD *)(v1 + 48);
    v14 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v39 = v34;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v13, v12, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v14 + 4);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v14 + 12) = 2080;
    v15 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    type = v9;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    v18 = v17;
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v16, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v14 + 14);
    swift_bridgeObjectRelease(v18);
    v35(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Initial attempt for activity %s scheduled for %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v1 + 176);
    v20 = *(_QWORD *)(v1 + 152);
    v21 = *(_QWORD *)(v1 + 136);
    v23 = *(_QWORD *)(v1 + 96);
    v22 = *(_QWORD *)(v1 + 104);
    v24 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 48), 2);
    v19(v20, v21);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  v25 = *(_QWORD *)(v1 + 160);
  v26 = *(_QWORD *)(v1 + 152);
  v28 = *(_QWORD *)(v1 + 120);
  v27 = *(_QWORD *)(v1 + 128);
  v30 = *(_QWORD *)(v1 + 104);
  v29 = *(_QWORD *)(v1 + 112);
  v31 = *(_QWORD *)(v1 + 80);
  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100101774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v1);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v10, 0xD000000000000090, 0x8000000100549680, 0xD00000000000001FLL, 0x80000001005497D0, 149);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101904(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(double *)(v7 + 96) = a2;
  *(_QWORD *)(v7 + 80) = a6;
  *(_QWORD *)(v7 + 88) = a7;
  *(_QWORD *)(v7 + 64) = a4;
  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 56) = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v7 + 104) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 112) = v9;
  *(_QWORD *)(v7 + 120) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 128) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 136) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 152) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 160) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 168) = swift_task_alloc(v10);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v7 + 176) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 184) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 192) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 200) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 208) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 216) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 224) = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 232) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 240) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 248) = swift_task_alloc(v16);
  *(_QWORD *)(v7 + 256) = swift_task_alloc(v16);
  *(_QWORD *)(v7 + 264) = swift_task_alloc(v16);
  return swift_task_switch(sub_100101A74, 0, 0);
}

uint64_t sub_100101A74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;

  v2 = v1[11];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[30];
    v18 = v1[29];
    v19 = v1[33];
    v8 = v1[10];
    v7 = v1[11];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v1[6] = sub_1000E3AC8(v8, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 6, v1 + 7, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Running activity %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v19, v18);
  }
  else
  {
    v12 = v1[33];
    v13 = v1[29];
    v14 = v1[30];
    swift_bridgeObjectRelease_n(v1[11], 2);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v1[34] = v11;
  v15 = (int *)v1[8];
  v20 = (uint64_t (*)(void))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v1[35] = v16;
  *v16 = v1;
  v16[1] = sub_100101C4C;
  return v20();
}

uint64_t sub_100101C4C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_BYTE *)(*(_QWORD *)v1 + 328) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100101CA8, 0, 0);
}

uint64_t sub_100101CA8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v80 = v1 + 32;
  v2 = *(unsigned __int8 *)(v1 + 328);
  v4 = *(_QWORD *)(v1 + 216);
  v3 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 184);
  v7 = *(double *)(v1 + 96);
  v8 = Date.init()(a1);
  Date.addingTimeInterval(_:)(v8, v7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v1 + 288) = v9;
  v10 = v9(v4, v5);
  Date.addingRandomOffset(in:)(v10, v7);
  v11 = v9(v3, v5);
  v12 = Date.init()(v11);
  v13 = *(_QWORD *)(v1 + 176);
  v14 = *(_QWORD *)(v1 + 88);
  v15 = *(_QWORD *)(v1 + 56);
  if (v2 == 1)
  {
    v16 = *(_QWORD *)(v1 + 200);
    defaultLogger()(v12);
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v78(v16, v15, v13);
    v17 = swift_bridgeObjectRetain_n(v14, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
    v22 = *(_QWORD *)(v1 + 256);
    v23 = *(_QWORD *)(v1 + 232);
    v24 = *(_QWORD *)(v1 + 200);
    v25 = *(_QWORD *)(v1 + 176);
    v26 = *(_QWORD *)(v1 + 88);
    if (v20)
    {
      v76 = *(_QWORD *)(v1 + 256);
      v27 = *(_QWORD *)(v1 + 80);
      v74 = *(_QWORD *)(v1 + 232);
      v28 = swift_slowAlloc(22, -1);
      v72 = swift_slowAlloc(64, -1);
      v81 = v72;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v1 + 32) = sub_1000E3AC8(v27, v26, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v1 + 40, v28 + 4);
      swift_bridgeObjectRelease_n(v26, 3);
      *(_WORD *)(v28 + 12) = 2080;
      v29 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v25, v29);
      v32 = v31;
      *(_QWORD *)(v1 + 40) = sub_1000E3AC8(v30, v31, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v28 + 14);
      swift_bridgeObjectRelease(v32);
      v9(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Activity %s was successful, next attempt is %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      v21(v76, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 88), 2);
      v9(v24, v25);

      v21(v22, v23);
    }
    v51 = *(_QWORD *)(v1 + 208);
    v52 = *(_QWORD *)(v1 + 176);
    v53 = *(_QWORD *)(v1 + 184);
    v55 = *(_QWORD *)(v1 + 160);
    v54 = *(_QWORD *)(v1 + 168);
    v56 = *(_QWORD *)(v1 + 152);
    v57 = *(_QWORD *)(v1 + 56);
    v78(v54, v51, v52);
    v58 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56);
    v58(v54, 0, 1, v52);
    v78(v55, v51, v52);
    v58(v55, 0, 1, v52);
    v78(v56, v57, v52);
    v58(v56, 0, 1, v52);
    v59 = (_QWORD *)swift_task_alloc(dword_100634CE4);
    *(_QWORD *)(v1 + 296) = v59;
    *v59 = v1;
    v59[1] = sub_1001022D8;
    v60 = *(_QWORD *)(v1 + 160);
    v61 = *(_QWORD *)(v1 + 168);
    v62 = *(_QWORD *)(v1 + 152);
  }
  else
  {
    v33 = *(_QWORD *)(v1 + 192);
    defaultLogger()(v12);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v34(v33, v15, v13);
    v35 = swift_bridgeObjectRetain_n(v14, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
    v40 = *(_QWORD *)(v1 + 248);
    v79 = *(_QWORD *)(v1 + 232);
    v41 = *(_QWORD *)(v1 + 192);
    v42 = *(_QWORD *)(v1 + 176);
    v43 = *(_QWORD *)(v1 + 88);
    if (v38)
    {
      v75 = *(void (**)(uint64_t, uint64_t))(v1 + 272);
      v44 = *(_QWORD *)(v1 + 80);
      v77 = v34;
      v45 = swift_slowAlloc(22, -1);
      v73 = swift_slowAlloc(64, -1);
      v81 = v73;
      *(_DWORD *)v45 = 136315394;
      swift_bridgeObjectRetain(v43);
      *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v44, v43, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v45 + 4);
      swift_bridgeObjectRelease_n(v43, 3);
      *(_WORD *)(v45 + 12) = 2080;
      v46 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v42, v46);
      v49 = v48;
      *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v47, v48, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v80, v45 + 14);
      swift_bridgeObjectRelease(v49);
      v9(v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Activity %s was not successful, next attempt is %s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      v50 = v45;
      v34 = v77;
      swift_slowDealloc(v50, -1, -1);

      v75(v40, v79);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 88), 2);
      v9(v41, v42);

      v39(v40, v79);
    }
    v63 = *(_QWORD *)(v1 + 176);
    v64 = *(_QWORD *)(v1 + 184);
    v66 = *(_QWORD *)(v1 + 136);
    v65 = *(_QWORD *)(v1 + 144);
    v67 = *(_QWORD *)(v1 + 128);
    v68 = *(_QWORD *)(v1 + 56);
    v34(v65, *(_QWORD *)(v1 + 208), v63);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v69(v65, 0, 1, v63);
    v69(v66, 1, 1, v63);
    v34(v67, v68, v63);
    v69(v67, 0, 1, v63);
    v70 = (_QWORD *)swift_task_alloc(dword_100634CE4);
    *(_QWORD *)(v1 + 312) = v70;
    *v70 = v1;
    v70[1] = sub_10010246C;
    v60 = *(_QWORD *)(v1 + 136);
    v61 = *(_QWORD *)(v1 + 144);
    v62 = *(_QWORD *)(v1 + 128);
  }
  return sub_100102D88(v61, v60, v62, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(double *)(v1 + 96));
}

uint64_t sub_1001022D8()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[37];
  (*v1)[38] = v0;
  swift_task_dealloc(v3);
  v5 = v2[20];
  v4 = v2[21];
  sub_10001E5E4(v2[19]);
  sub_10001E5E4(v5);
  sub_10001E5E4(v4);
  if (v0)
    v6 = sub_1001024F4;
  else
    v6 = sub_100102360;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100102360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD))(v0 + 288))(v6, *(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010246C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[39];
  (*v1)[40] = v0;
  swift_task_dealloc(v3);
  v5 = v2[17];
  v4 = v2[18];
  sub_10001E5E4(v2[16]);
  sub_10001E5E4(v5);
  sub_10001E5E4(v4);
  if (v0)
    v6 = sub_100102700;
  else
    v6 = sub_100105808;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001024F4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 56);
  v2(v4, v5);
  v2(v9, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v6, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v10, 0xD000000000000090, 0x8000000100549680, 0xD000000000000016, 0x8000000100549760, 137);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v4);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102700()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 56);
  v2(v4, v5);
  v2(v9, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v6, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v10, 0xD000000000000090, 0x8000000100549680, 0xD000000000000016, 0x8000000100549760, 137);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v4);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010290C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *(double *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v10 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 64) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 72) = v11;
  *(_QWORD *)(v6 + 80) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 88) = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100634CCC);
  *(_QWORD *)(v6 + 96) = v14;
  *v14 = v6;
  v14[1] = sub_1001029D4;
  return sub_100100CD4(v13, a4, a5, a6);
}

uint64_t sub_1001029D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100102B20, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_100634CDC);
  *(_QWORD *)(v3 + 112) = v5;
  *v5 = v3;
  v5[1] = sub_100102A74;
  return sub_100101904(*(_QWORD *)(v3 + 16), *(double *)(v3 + 56), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_100102A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100102C50;
  else
    v3 = sub_100102AD8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100102AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_100104848(v2);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000090, 0x8000000100549680, 0xD00000000000001BLL, 0x80000001005497F0, 110);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100104848(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000090, 0x8000000100549680, 0xD00000000000001BLL, 0x80000001005497F0, 110);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(double *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 72) = v8;
  *(_QWORD *)(v6 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v6 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 96) = v10;
  *(_QWORD *)(v6 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  *(_QWORD *)(v6 + 112) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v6 + 120) = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 128) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 136) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 144) = swift_task_alloc(v13);
  return swift_task_switch(sub_100102E64, 0, 0);
}

uint64_t sub_100102E64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v1, 24, 7);
  sub_1000D6044();
  v0[19] = v2;
  v3 = v2;
  v5 = v0[17];
  v4 = v0[18];
  v6 = v0[15];
  v7 = v0[16];
  v8 = v0[14];
  v27 = v0[11];
  v28 = v0[13];
  v9 = v0[7];
  v25 = v0[6];
  v26 = v0[12];
  v10 = v0[4];
  v24 = v0[5];
  v11 = v0[3];
  sub_100027B0C(v0[2], v4);
  sub_100027B0C(v11, v5);
  sub_100027B0C(v10, v7);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 48) & ~v12;
  v14 = (v13 + v6 + v12) & ~v12;
  v15 = (v14 + v6 + v12) & ~v12;
  v16 = (_QWORD *)swift_allocObject(&unk_1006081D8, v15 + v6, v12 | 7);
  v0[20] = (uint64_t)v16;
  v16[2] = v3;
  v16[3] = v24;
  v16[4] = v25;
  v16[5] = v9;
  sub_100027D88(v4, (uint64_t)v16 + v13);
  sub_100027D88(v5, (uint64_t)v16 + v14);
  sub_100027D88(v7, (uint64_t)v16 + v15);
  v17 = swift_allocObject(&unk_100608200, 32, 7);
  v0[21] = v17;
  *(_QWORD *)(v17 + 16) = sub_100104998;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 104);
  swift_retain(v3);
  v20 = swift_bridgeObjectRetain(v25);
  v19(v28, v18, v27, v20);
  v21 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v16);
  v22 = (uint64_t **)swift_task_alloc(v21);
  v0[22] = (uint64_t)v22;
  *v22 = v0;
  v22[1] = (uint64_t *)sub_100103188;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v22, v0[13], sub_1001057F4, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_100103188()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  v5 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 104);
  v6 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 168);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_1001032A4;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 160);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_10010322C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10010322C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001032A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v2);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v7, 0, v8, 0xD000000000000090, 0x8000000100549680, 0xD000000000000043, 0x8000000100549780, 195);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100103418@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *result;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = sub_100004828(&qword_100633990);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  result = (void *)sub_1000D8B14(a1, a2);
  if (!v3)
  {
    v17 = result;
    if (result)
    {
      v18 = objc_msgSend(result, "lastAttemptAt");
      if (v18)
      {
        v19 = v18;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

        v20 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v15, 0, 1, v20);
      }
      else
      {
        v24 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v15, 1, 1, v24);
      }
      v25 = objc_msgSend(v17, "lastSuccessfulAttemptAt");
      if (v25)
      {
        v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        v27 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v13, 0, 1, v27);
      }
      else
      {
        v28 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 1, 1, v28);
      }
      v29 = objc_msgSend(v17, "nextAttemptAt");
      if (v29)
      {
        v30 = v29;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v31 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 0, 1, v31);
      }
      else
      {

        v32 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v10, 1, 1, v32);
      }
      sub_100027D88((uint64_t)v15, a3);
      v33 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
      sub_100027D88((uint64_t)v13, a3 + *(int *)(v33 + 20));
      return (void *)sub_100027D88((uint64_t)v10, a3 + *(int *)(v33 + 24));
    }
    else
    {
      v21 = type metadata accessor for Date(0);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
      v22(a3, 1, 1, v21);
      v23 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
      v22(a3 + *(int *)(v23 + 20), 1, 1, v21);
      return (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(a3 + *(int *)(v23 + 24), 1, 1, v21);
    }
  }
  return result;
}

void sub_1001036E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  void *v11;

  v10 = sub_1000D8630(a2, a3);
  if (!v6)
  {
    v11 = (void *)v10;
    StoredRandomizedBackgroundActivity.update(lastAttemptAt:lastSuccessfulAttemptAt:nextAttemptAt:)(a4, a5, a6);
    sub_1000D6288();

  }
}

uint64_t sub_100103770(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(v4 + 64) = a4;
  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = a2;
  *(double *)(v4 + 40) = a3;
  v5 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v4 + 72) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = v6;
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v4 + 96) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 104) = v8;
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100103800, 0, 0);
}

uint64_t sub_100103800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v1 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v1, 24, 7);
  sub_1000D6044();
  v0[15] = v2;
  v3 = v0[14];
  v4 = v2;
  v5 = v0[13];
  v18 = v0[12];
  v6 = v0[8];
  v7 = v0[6];
  v8 = v0[7];
  v9 = v0[5];
  v10 = swift_allocObject(&unk_100608160, 17, 7);
  v0[16] = v10;
  *(_BYTE *)(v10 + 16) = 0;
  v11 = (_QWORD *)swift_allocObject(&unk_100608188, 64, 7);
  v0[17] = v11;
  v11[2] = v4;
  v11[3] = v7;
  v11[4] = v8;
  v11[5] = v6;
  v11[6] = v10;
  v11[7] = v9;
  v12 = swift_allocObject(&unk_1006081B0, 32, 7);
  v0[18] = v12;
  *(_QWORD *)(v12 + 16) = sub_1001047E4;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  swift_retain(v4);
  swift_bridgeObjectRetain(v8);
  swift_retain(v10);
  v14(v3, v13, v18);
  v15 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v11);
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[19] = v16;
  *v16 = v0;
  v16[1] = sub_100103AB4;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v16, v0[14], sub_10001E5CC, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_100103AB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  v5 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 112);
  v6 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v2 + 144);
  if (v0)
  {
    swift_release(v7);
    v8 = sub_100103BD4;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 136);
    swift_release(v7);
    swift_release(v9);
    v8 = sub_100103B58;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100103B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_beginAccess(v1 + 16, v0 + 16, 0, 0);
  v4 = *(unsigned __int8 *)(v1 + 16);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_100103BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 72));
  swift_errorRetain(v3);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v5, 0, v6, 0xD000000000000090, 0x8000000100549680, 0xD000000000000016, 0x8000000100549720, 228);
  swift_willThrow(v9);
  swift_errorRelease(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_100103D28(uint64_t a1, uint64_t a2, void *a3, char *a4, double a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  id v36;
  unint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  char *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];

  v110 = a1;
  v109 = a4;
  v9 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v9);
  v106 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v107 = *(_QWORD *)(v11 - 8);
  v108 = v11;
  v12 = __chkstk_darwin(v11);
  v103 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v102 = (char *)&v97 - v15;
  v16 = __chkstk_darwin(v14);
  v105 = (char *)&v97 - v17;
  __chkstk_darwin(v16);
  v104 = (char *)&v97 - v18;
  v19 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v97 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v97 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v97 - v30;
  v32 = v111;
  v33 = (char *)sub_1000D8B14(a2, a3);
  if (v32)
    return;
  v98 = v23;
  v99 = v29;
  v97 = v26;
  v100 = a2;
  v101 = v20;
  v34 = v108;
  v110 = 0;
  v111 = v19;
  v35 = v109 + 16;
  if (!v33)
  {
    v109 += 16;
    v63 = v31;
    defaultLogger()(0);
    v64 = swift_bridgeObjectRetain_n(a3, 2);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.debug.getter(v65);
    v67 = os_log_type_enabled(v65, v66);
    v68 = v111;
    v69 = v100;
    if (v67)
    {
      v70 = (unint64_t)a3;
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v114[0] = v72;
      v108 = (uint64_t)v63;
      *(_DWORD *)v71 = 136315138;
      swift_bridgeObjectRetain(v70);
      v113 = sub_1000E3AC8(v69, v70, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v71 + 4);
      swift_bridgeObjectRelease_n(v70, 3);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Activity %s does not exist so it has no recent successful attempts", v71, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v108, v68);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v31, v68);
    }
    v81 = v109;
    swift_beginAccess(v109, v114, 1, 0);
    *v81 = 0;
    return;
  }
  v109 = v33;
  v36 = objc_msgSend(v33, "lastSuccessfulAttemptAt");
  v37 = (unint64_t)a3;
  if (!v36)
  {
    v41 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v106, 1, 1, v34);
    v44 = v99;
    goto LABEL_11;
  }
  v38 = v36;
  v39 = v105;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  v41 = (uint64_t)v106;
  v40 = v107;
  v42 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  v42(v106, v39, v34);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v34);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v34);
  v44 = v99;
  if (v43 == 1)
  {
LABEL_11:
    v73 = sub_10001E5E4(v41);
    defaultLogger()(v73);
    v74 = v37;
    v75 = swift_bridgeObjectRetain_n(v37, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.debug.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = v44;
      v80 = swift_slowAlloc(32, -1);
      v114[0] = v80;
      *(_DWORD *)v78 = 136315138;
      swift_bridgeObjectRetain(v74);
      v113 = sub_1000E3AC8(v100, v74, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v78 + 4);
      swift_bridgeObjectRelease_n(v74, 3);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Activity %s does not have a last successful attempt", v78, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v79, v111);
    }
    else
    {

      swift_bridgeObjectRelease_n(v74, 2);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v44, v111);
    }
    swift_beginAccess(v35, v114, 1, 0);
    *v35 = 0;
    return;
  }
  v45 = v104;
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v104, v41, v34);
  Date.init()(v46);
  v47 = Date.isBeforeAndWithin(seconds:of:)(v39, a6);
  v48 = v39;
  v49 = *(void (**)(char *, uint64_t))(v40 + 8);
  v49(v48, v34);
  swift_beginAccess(v35, v114, 1, 0);
  *v35 = v47 & 1;
  if ((v47 & 1) != 0)
  {
    v51 = v97;
    defaultLogger()(v50);
    v52 = v102;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v102, v45, v34);
    v53 = swift_bridgeObjectRetain_n(v37, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.debug.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(32, -1);
      v107 = swift_slowAlloc(64, -1);
      v113 = v107;
      *(_DWORD *)v56 = 136315650;
      swift_bridgeObjectRetain(v37);
      v112 = sub_1000E3AC8(v100, v37, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v56 + 4);
      swift_bridgeObjectRelease_n(v37, 3);
      *(_WORD *)(v56 + 12) = 2080;
      v57 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v34, v57);
      v60 = v59;
      v112 = sub_1000E3AC8(v58, v59, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v56 + 14);
      swift_bridgeObjectRelease(v60);
      v49(v52, v34);
      *(_WORD *)(v56 + 22) = 2048;
      v112 = *(_QWORD *)&a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v56 + 24);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Activity %s has last success at %s, is within window of %f seconds", (uint8_t *)v56, 0x20u);
      v61 = v107;
      swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v97, v111);
      v62 = v104;
    }
    else
    {

      v49(v52, v34);
      swift_bridgeObjectRelease_n(v37, 2);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v51, v111);
      v62 = v45;
    }
    v96 = v34;
  }
  else
  {
    v82 = v98;
    defaultLogger()(v50);
    v83 = v103;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v103, v45, v34);
    v84 = v37;
    v85 = swift_bridgeObjectRetain_n(v37, 2);
    v86 = Logger.logObject.getter(v85);
    v87 = v45;
    v88 = static os_log_type_t.debug.getter(v86);
    if (os_log_type_enabled(v86, v88))
    {
      v89 = swift_slowAlloc(32, -1);
      v107 = swift_slowAlloc(64, -1);
      v113 = v107;
      *(_DWORD *)v89 = 136315650;
      swift_bridgeObjectRetain(v84);
      v112 = sub_1000E3AC8(v100, v84, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v89 + 4);
      swift_bridgeObjectRelease_n(v84, 3);
      *(_WORD *)(v89 + 12) = 2080;
      v90 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v91 = v103;
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v34, v90);
      v94 = v93;
      v112 = sub_1000E3AC8(v92, v93, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v89 + 14);
      swift_bridgeObjectRelease(v94);
      v49(v91, v34);
      *(_WORD *)(v89 + 22) = 2048;
      v112 = *(_QWORD *)&a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v89 + 24);
      _os_log_impl((void *)&_mh_execute_header, v86, v88, "Activity %s has last success at %s, is not within window of %f seconds", (uint8_t *)v89, 0x20u);
      v95 = v107;
      swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v111);
      v62 = v104;
    }
    else
    {

      v49(v83, v34);
      swift_bridgeObjectRelease_n(v84, 2);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v82, v111);
      v62 = v87;
    }
    v96 = v34;
  }
  v49(v62, v96);
}

uint64_t sub_1001047A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001047B0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1001047E4()
{
  uint64_t v0;

  sub_100103D28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 48), *(double *)(v0 + 40), *(double *)(v0 + 56));
}

uint64_t type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100634D48;
  if (!qword_100634D48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RandomizedBackgroundActivityRunner.ActivityMetadata);
  return result;
}

uint64_t sub_100104848(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RandomizedBackgroundActivityRunner.ActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100104884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v1 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v6 = v0 + v3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = (v4 + v2 + v5) & ~v2;
  if (!v9(v0 + v5, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v5, v7);
  if (!v9(v0 + v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return swift_deallocObject(v0, v10 + v4, v2 | 7);
}

void sub_100104998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  sub_1001036E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), v0 + ((v2 + 48) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2)) & ~v2));
}

uint64_t sub_100104A10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104A34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void *sub_100104A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100103418(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for RandomizedBackgroundActivityRunnerFactory()
{
  return &type metadata for RandomizedBackgroundActivityRunnerFactory;
}

uint64_t *sub_100104A90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100004828(&qword_100633990);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      v15 = sub_100004828(&qword_100633990);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v9((uint64_t *)v18, 1, v7))
    {
      v19 = sub_100004828(&qword_100633990);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100104C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  return result;
}

char *sub_100104D24(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_100004828(&qword_100633990);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v8(v16, 1, v6))
  {
    v17 = sub_100004828(&qword_100633990);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *sub_100104EBC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    v17 = sub_100004828(&qword_100633990);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v8(&a1[v18], 1, v6);
  v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v19, v20, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    v23 = sub_100004828(&qword_100633990);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  return a1;
}

char *sub_100105128(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_100004828(&qword_100633990);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v8(v16, 1, v6))
  {
    v17 = sub_100004828(&qword_100633990);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *sub_1001052C0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    v17 = sub_100004828(&qword_100633990);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v8(&a1[v18], 1, v6);
  v22 = v8(v20, 1, v6);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v20, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
    goto LABEL_18;
  }
  if (v22)
  {
LABEL_18:
    v23 = sub_100004828(&qword_100633990);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  return a1;
}

uint64_t sub_10010552C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100105538);
}

uint64_t sub_100105538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100633990);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100105578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100105584);
}

uint64_t sub_100105584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100633990);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1001055C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100105634(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100105634(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100634D58)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100634D58);
  }
}

uint64_t destroy for DIPConversation(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s8coreidvd13TSIDContainerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for RandomizedBackgroundActivityRunner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for RandomizedBackgroundActivityRunner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for RandomizedBackgroundActivityRunner(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RandomizedBackgroundActivityRunner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RandomizedBackgroundActivityRunner()
{
  return &type metadata for RandomizedBackgroundActivityRunner;
}

uint64_t sub_1001057F4()
{
  return sub_10001E5CC();
}

uint64_t type metadata accessor for IdentityBMUserProofingStreamWrapper()
{
  return objc_opt_self(_TtC8coreidvd35IdentityBMUserProofingStreamWrapper);
}

uint64_t sub_10010582C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100106D84(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100105868(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v27 = a3;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 16) = dispatch_group_create();
  sub_1000257E0();
  v20 = static OS_dispatch_queue.Attributes.concurrent.getter(v19);
  static DispatchQoS.unspecified.getter(v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x8000000100549950, v15, v18, v12, 0);
  *(_QWORD *)(v5 + 160) = 0x3FE999999999999ALL;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 24) = v21;
  *(_QWORD *)(v5 + 32) = a1;
  v22 = v27;
  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v22;
  *(_QWORD *)(v5 + 56) = a4;
  v23 = objc_allocWithZone((Class)type metadata accessor for DIPLocationHelper());
  v24 = a4;
  *(_QWORD *)(v5 + 152) = sub_100258320(0, 0, (unint64_t)a4);
  return v5;
}

void sub_100105A2C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v25 - v8;
  v10 = defaultLogger()(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Beginning fetch of supplemental device data", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v9, v2);
  v15 = *(_QWORD *)(v1 + 32);
  if ((v15 & 1) != 0)
    sub_100105D04();
  if ((v15 & 4) != 0)
  {
    dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
    v17 = defaultLogger()(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Beginning to fetch phone number", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v14(v6, v2);
    if (qword_10062F560 != -1)
      swift_once(&qword_10062F560, sub_10041FF94);
    v21 = (void *)qword_1006707A8;
    swift_retain(v1);
    v22 = v21;
    sub_100425240(0, (unint64_t)v22, v1);

    swift_release(v1);
    if ((v15 & 8) == 0)
    {
LABEL_7:
      if ((v15 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((v15 & 8) == 0)
  {
    goto LABEL_7;
  }
  sub_100106000();
  if ((v15 & 0x10) == 0)
  {
LABEL_8:
    if ((v15 & 0x20) == 0)
      return;
    goto LABEL_17;
  }
LABEL_16:
  sub_1001066A4();
  if ((v15 & 0x20) == 0)
    return;
LABEL_17:
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v23 = (void *)qword_1006707A8;
  swift_retain(v1);
  v24 = v23;
  sub_1004264D8((uint64_t)v24, v1);

  swift_release(v1);
}

void sub_100105CC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 && a1[2])
  {
    v4 = a1[4];
    v3 = a1[5];
    v5 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 136) = v4;
    *(_QWORD *)(a2 + 144) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
}

void sub_100105D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(*(dispatch_group_t *)(v1 + 16));
  v7 = defaultLogger()(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Beginning to fetch IDS data", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11 = *(_QWORD *)(v1 + 40);
  v12 = *(_QWORD *)(v1 + 48);
  sub_100028034(v11, v12);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  if (v12 >> 60 == 15)
  {
    v12 = 0xC000000000000000;
    v13 = 0;
  }
  else
  {
    v13 = v11;
  }
  v14 = (id)qword_1006707A8;
  swift_retain(v1);
  sub_10041FE80(v13, v12, (uint64_t)sub_1001070E0, v1);
  swift_release(v1);
  sub_100007F8C(v13, v12);

}

void sub_100105E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = a1;
  swift_bridgeObjectRetain(a1);
  v9 = swift_bridgeObjectRelease(v8);
  v10 = *(_QWORD *)(a2 + 64);
  if (!v10 || !*(_QWORD *)(v10 + 16))
  {
    v11 = defaultLogger()(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No IDS data available", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
}

void sub_100105FBC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 && a1[2])
  {
    v4 = a1[4];
    v3 = a1[5];
    v5 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 96) = v4;
    *(_QWORD *)(a2 + 104) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a2 + 16));
}

uint64_t sub_100106000()
{
  return sub_1001066B8((uint64_t)sub_1001070D8, (uint64_t)&unk_1006083F8);
}

uint64_t sub_100106014(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  _BYTE *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v69 = 0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v64 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v64 - v11;
  defaultLogger()(v10);
  v13 = swift_retain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    v70 = 0x3FE999999999999ALL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v16 + 4);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Beginning to fetch device location after %f seconds", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v12, v2);
  objc_msgSend((id)objc_opt_self(NSThread), "sleepForTimeInterval:", 0.8);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = sub_100257AD4();
  if (v19)
  {
    v20 = v19;
    v67 = v18;
    v68 = v2;
    v65 = v17;
    v21 = sub_100004828((uint64_t *)&unk_100636410);
    v22 = swift_allocObject(v21, 72, 7);
    v66 = xmmword_10051FFB0;
    *(_OWORD *)(v22 + 16) = xmmword_10051FFB0;
    -[NSObject coordinate](v20, "coordinate");
    *(_QWORD *)(v22 + 56) = &type metadata for Double;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v22 + 32) = v23;
    v24 = String.init(format:_:)(1714564645, 0xE400000000000000, v22);
    v26 = v25;
    v27 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v27 + 16) = v66;
    -[NSObject coordinate](v20, "coordinate");
    *(_QWORD *)(v27 + 56) = &type metadata for Double;
    *(_QWORD *)(v27 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v27 + 32) = v28;
    v29 = String.init(format:_:)(1714564645, 0xE400000000000000, v27);
    v31 = v30;
    v73 = 0;
    v32 = __chkstk_darwin(v29);
    *(&v64 - 2) = (uint64_t)&v73;
    *(_QWORD *)&v66 = v32;
    if ((v26 & 0x1000000000000000) != 0 || !(v26 & 0x2000000000000000 | v24 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)(&v72, sub_1000FBD68);
    }
    else
    {
      __chkstk_darwin(v32);
      *(&v64 - 2) = v34;
      *(&v64 - 1) = v33;
      if ((v26 & 0x2000000000000000) != 0)
      {
        v70 = v24;
        v71 = v26 & 0xFFFFFFFFFFFFFFLL;
        v44 = (v24 > 0x20u || ((0x100003E01uLL >> v24) & 1) == 0)
           && (v43 = (_BYTE *)_swift_stdlib_strtod_clocale(&v70, &v73)) != 0
           && *v43 == 0;
        v17 = v65;
        v72 = v44;
        v37 = swift_bridgeObjectRelease(v26);
LABEL_21:
        if ((v72 & 1) == 0)
        {
          v52 = v31;
          goto LABEL_38;
        }
        v45 = v73;
        v73 = 0;
        v46 = __chkstk_darwin(v37);
        *(&v64 - 2) = (uint64_t)&v73;
        if ((v31 & 0x1000000000000000) != 0 || !(v31 & 0x2000000000000000 | v66 & 0x1000000000000000))
        {
          _StringGuts._slowWithCString<A>(_:)(&v72, sub_100107104);
        }
        else
        {
          __chkstk_darwin(v46);
          *(&v64 - 2) = (uint64_t)sub_100107104;
          *(&v64 - 1) = v48;
          if ((v31 & 0x2000000000000000) != 0)
          {
            v70 = v47;
            v71 = v31 & 0xFFFFFFFFFFFFFFLL;
            v54 = (v47 > 0x20u || ((0x100003E01uLL >> v47) & 1) == 0)
               && (v53 = (_BYTE *)_swift_stdlib_strtod_clocale(&v70, &v73)) != 0
               && *v53 == 0;
            v72 = v54;
            v51 = swift_bridgeObjectRelease(v31);
            goto LABEL_36;
          }
          if ((v47 & 0x1000000000000000) != 0)
          {
            v49 = (v31 & 0xFFFFFFFFFFFFFFFLL) + 32;
            v50 = v47 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v49 = _StringObject.sharedUTF8.getter(v47, v31);
          }
          v72 = sub_100012AD0(v49, v50, (void (*)(uint64_t *__return_ptr))sub_1000FBD80) & 1;
        }
        v51 = swift_bridgeObjectRelease(v31);
LABEL_36:
        if ((v72 & 1) == 0)
        {
LABEL_39:
          v59 = defaultLogger()(v51);
          v60 = Logger.logObject.getter(v59);
          v61 = static os_log_type_t.debug.getter(v60);
          if (os_log_type_enabled(v60, v61))
          {
            v62 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v62 = 0;
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "Got device location", v62, 2u);
            swift_slowDealloc(v62, -1, -1);
          }

          v2 = v68;
          goto LABEL_42;
        }
        v55 = v73;
        v56 = sub_100004828(&qword_100635068);
        v57 = swift_allocObject(v56, 48, 7);
        *(_OWORD *)(v57 + 16) = xmmword_1005208D0;
        *(_QWORD *)(v57 + 32) = v45;
        *(_QWORD *)(v57 + 40) = v55;
        v58 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v57;
        v52 = v58;
LABEL_38:
        v51 = swift_bridgeObjectRelease(v52);
        goto LABEL_39;
      }
      if ((v24 & 0x1000000000000000) != 0)
      {
        v35 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v36 = v24 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v35 = _StringObject.sharedUTF8.getter(v24, v26);
      }
      v72 = sub_100012AD0(v35, v36, (void (*)(uint64_t *__return_ptr))sub_1001070E8) & 1;
    }
    v37 = swift_bridgeObjectRelease(v26);
    v17 = v65;
    goto LABEL_21;
  }
  v38 = defaultLogger()(0);
  v20 = Logger.logObject.getter(v38);
  v39 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v39))
  {
    v40 = v2;
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v39, "no device location available", v41, 2u);
    v42 = v41;
    v2 = v40;
    swift_slowDealloc(v42, -1, -1);
  }
  v6 = v9;
LABEL_42:

  v17(v6, v2);
  return sub_10025778C();
}

uint64_t sub_1001066A4()
{
  return sub_1001066B8((uint64_t)sub_100107058, (uint64_t)&unk_1006083D0);
}

uint64_t sub_1001066B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v2 + 24);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = v13;
  aBlock[4] = a1;
  v25 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = a2;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100004828((uint64_t *)&unk_1006308D0);
  v18 = sub_100107078();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v21, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v25);
}

uint64_t sub_10010686C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v2 = (id)qword_1006707A8;
  v3 = sub_10041FFC0();
  v5 = v4;
  sub_1001070C4(v3, v4);
  if (v5 == 1)
    sub_1004218D4();
  v6 = sub_10041FFC0();
  v8 = v7;

  if (v8 == 1)
    v9 = 0;
  else
    v9 = v6;
  v10 = *(_QWORD *)(a1 + 128);
  if (v8 == 1)
    v11 = 0;
  else
    v11 = v8;
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = v11;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100106904()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  sub_100007F78(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));

  return v0;
}

uint64_t sub_100106980()
{
  uint64_t v0;

  sub_100106904();
  return swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for SupplementalDeviceDataFetcher()
{
  return objc_opt_self(_TtC8coreidvd29SupplementalDeviceDataFetcher);
}

void destroy for SupplementalDeviceDataFetcher.Properties(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)a1, v2);

}

uint64_t _s8coreidvd29SupplementalDeviceDataFetcherC10PropertiesVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_100022948(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for SupplementalDeviceDataFetcher.Properties(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_100022948(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100007F8C(v7, v8);
      goto LABEL_8;
    }
    sub_10003BAAC((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_100022948(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = (void *)a1[2];
  v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  v11 = v10;

  return a1;
}

uint64_t *assignWithTake for SupplementalDeviceDataFetcher.Properties(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100007F8C(v6, v4);
      goto LABEL_6;
    }
    sub_10003BAAC((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for SupplementalDeviceDataFetcher.Properties(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SupplementalDeviceDataFetcher.Properties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SupplementalDeviceDataFetcher.Properties()
{
  return &type metadata for SupplementalDeviceDataFetcher.Properties;
}

ValueMetadata *type metadata accessor for SupplementalDeviceDataFetcher.Fields()
{
  return &type metadata for SupplementalDeviceDataFetcher.Fields;
}

unint64_t sub_100106C64()
{
  unint64_t result;

  result = qword_100635048;
  if (!qword_100635048)
  {
    result = swift_getWitnessTable(&unk_100524880, &type metadata for SupplementalDeviceDataFetcher.Fields);
    atomic_store(result, (unint64_t *)&qword_100635048);
  }
  return result;
}

unint64_t sub_100106CAC()
{
  unint64_t result;

  result = qword_100635050;
  if (!qword_100635050)
  {
    result = swift_getWitnessTable(&unk_100524850, &type metadata for SupplementalDeviceDataFetcher.Fields);
    atomic_store(result, (unint64_t *)&qword_100635050);
  }
  return result;
}

unint64_t sub_100106CF4()
{
  unint64_t result;

  result = qword_100635058;
  if (!qword_100635058)
  {
    result = swift_getWitnessTable(&unk_1005248A8, &type metadata for SupplementalDeviceDataFetcher.Fields);
    atomic_store(result, (unint64_t *)&qword_100635058);
  }
  return result;
}

unint64_t sub_100106D3C()
{
  unint64_t result;

  result = qword_100635060;
  if (!qword_100635060)
  {
    result = swift_getWitnessTable(&unk_1005248E0, &type metadata for SupplementalDeviceDataFetcher.Fields);
    atomic_store(result, (unint64_t *)&qword_100635060);
  }
  return result;
}

uint64_t sub_100106D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100106DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OS_dispatch_group.wait()();
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v11 = *(_QWORD *)(v0 + 72);
    if (v11)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
      swift_errorRetain(v11);
      swift_errorRetain(v11);
      v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v13 = type metadata accessor for DIPError(0);
      v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v13, v14, 0, 0);
      v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100549A20, v11, v5, 0, v12, 0xD000000000000060, 0x80000001005499B0, 0x4150534449746567, 0xEF29286174614443, 177);
      swift_willThrow(v15);
      return swift_errorRelease(v11);
    }
    else
    {
      return *(_QWORD *)(v1 + 64);
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.badLogic(_:), v2);
    v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v7 = type metadata accessor for DIPError(0);
    v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v7, v8, 0, 0);
    v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100549990, 0, v5, 0, v6, 0xD000000000000060, 0x80000001005499B0, 0x4150534449746567, 0xEF29286174614443, 173);
    return swift_willThrow(v9);
  }
}

uint64_t sub_100107058()
{
  uint64_t v0;

  return sub_10010686C(v0);
}

uint64_t sub_100107060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100107070(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100107078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100632390;
  if (!qword_100632390)
  {
    v1 = sub_100013E24((uint64_t *)&unk_1006308D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_100632390);
  }
  return result;
}

uint64_t sub_1001070C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1001070D8()
{
  uint64_t v0;

  return sub_100106014(v0);
}

void sub_1001070E0(uint64_t a1)
{
  uint64_t v1;

  sub_100105E94(a1, v1);
}

_QWORD *sub_1001070E8@<X0>(_BYTE *a1@<X8>)
{
  return sub_1000FBD80(a1);
}

_BYTE *sub_100107104@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000FBD68(a1, a2);
}

uint64_t destroy for IdentityPhoneProvisioningProvider(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  v2 = a1[11];
  if (v2 >> 60 != 15)
    sub_100007F8C(a1[10], v2);
  v3 = a1[13];
  if (v3 >> 60 != 15)
    sub_100007F8C(a1[12], v3);
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1 + 14);
}

uint64_t initializeWithCopy for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = (uint64_t *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_100022948(*v9, v10);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v10;
  }
  v12 = (uint64_t *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_100022948(*v12, *(_QWORD *)(a2 + 104));
    *(_QWORD *)(a1 + 96) = v14;
    *(_QWORD *)(a1 + 104) = v13;
  }
  v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v15;
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 112, a2 + 112);
  return a1;
}

uint64_t assignWithCopy for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = (uint64_t *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      v15 = *v13;
      sub_100022948(*v13, *(_QWORD *)(a2 + 88));
      *(_QWORD *)(a1 + 80) = v15;
      *(_QWORD *)(a1 + 88) = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    sub_10003BAAC(a1 + 80);
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v13;
    goto LABEL_8;
  }
  v16 = *v13;
  sub_100022948(*v13, *(_QWORD *)(a2 + 88));
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v14;
  sub_100007F8C(v17, v18);
LABEL_8:
  v19 = (uint64_t *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) >> 60 != 15)
  {
    if (v20 >> 60 != 15)
    {
      v22 = *v19;
      sub_100022948(*v19, *(_QWORD *)(a2 + 104));
      v23 = *(_QWORD *)(a1 + 96);
      v24 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v22;
      *(_QWORD *)(a1 + 104) = v20;
      sub_100007F8C(v23, v24);
      goto LABEL_15;
    }
    sub_10003BAAC(a1 + 96);
    goto LABEL_13;
  }
  if (v20 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v19;
    goto LABEL_15;
  }
  v21 = *v19;
  sub_100022948(*v19, *(_QWORD *)(a2 + 104));
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v20;
LABEL_15:
  sub_10000660C((_QWORD *)(a1 + 112), (_QWORD *)(a2 + 112));
  return a1;
}

uint64_t assignWithTake for IdentityPhoneProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = (_OWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *(_QWORD *)(a2 + 88);
  if (v14 >> 60 == 15)
  {
    sub_10003BAAC(a1 + 80);
LABEL_4:
    *(_OWORD *)(a1 + 80) = *v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v12;
  *(_QWORD *)(a1 + 88) = v14;
  sub_100007F8C(v15, v13);
LABEL_6:
  v16 = (_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  if (v17 >> 60 != 15)
  {
    v18 = *(_QWORD *)(a2 + 104);
    if (v18 >> 60 != 15)
    {
      v19 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *v16;
      *(_QWORD *)(a1 + 104) = v18;
      sub_100007F8C(v19, v17);
      goto LABEL_11;
    }
    sub_10003BAAC(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v16;
LABEL_11:
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + 112));
  v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityPhoneProvisioningProvider()
{
  return &type metadata for IdentityPhoneProvisioningProvider;
}

uint64_t sub_1001075A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_100028034(v1, *(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t sub_1001075D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100109660(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1006086E0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100630270, v16);
}

uint64_t sub_100107718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100109660(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100608758, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_100004828((uint64_t *)&unk_100642580);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_100635158, v16);
}

void sub_100107864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + i) & 1) != 0)
    {
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
      v15 = v14[1];
      v19 = *v14;
      swift_bridgeObjectRetain(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1000E2358(0, v8[2] + 1, 1, v8);
      v17 = v8[2];
      v16 = v8[3];
      if (v17 >= v16 >> 1)
        v8 = sub_1000E2358((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
      v8[2] = v17 + 1;
      v18 = &v8[2 * v17];
      v18[4] = v19;
      v18[5] = v15;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_29;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_29;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_29;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_100107A58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + i) & 1) != 0)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
      v15 = v14[1];
      v19 = *v14;
      swift_bridgeObjectRetain(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1000E2358(0, v8[2] + 1, 1, v8);
      v17 = v8[2];
      v16 = v8[3];
      if (v17 >= v16 >> 1)
        v8 = sub_1000E2358((_QWORD *)(v16 > 1), v17 + 1, 1, v8);
      v8[2] = v17 + 1;
      v18 = &v8[2 * v17];
      v18[4] = v19;
      v18[5] = v15;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_29;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_29;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_29;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

dispatch_group_t sub_100107C4C()
{
  dispatch_group_t result;

  result = dispatch_group_create();
  qword_100670298 = (uint64_t)result;
  return result;
}

uint64_t sub_100107C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19[2];

  v1 = v0;
  v2 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = defaultLogger()(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Start fetch of bootstrap config", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  dispatch_group_enter((dispatch_group_t)qword_100670298);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
  sub_10002581C(v1 + 56, (uint64_t)v19);
  v15 = (_QWORD *)swift_allocObject(&unk_100608780, 96, 7);
  v15[2] = 0;
  v15[3] = 0;
  sub_100008018(v19, (uint64_t)(v15 + 4));
  v15[9] = v1;
  v15[10] = sub_100107E58;
  v15[11] = 0;
  swift_retain(v1);
  v16 = sub_1001075D4((uint64_t)v4, (uint64_t)&unk_100635160, (uint64_t)v15);
  return swift_release(v16);
}

void sub_100107E58()
{
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  dispatch_group_leave((dispatch_group_t)qword_100670298);
}

uint64_t sub_100107E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13[2];

  v1 = v0;
  v2 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  v5 = qword_100670298;
  OS_dispatch_group.wait()();
  v6 = swift_allocObject(&unk_100608690, 24, 7);
  *(_QWORD *)(v6 + 16) = 0;
  sub_10000806C((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  if ((sub_10023A2E4() & 1) != 0)
    return swift_release(v6);
  dispatch_group_enter(v5);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  sub_10002581C(v0 + 56, (uint64_t)v13);
  v8 = (_QWORD *)swift_allocObject(&unk_1006086B8, 96, 7);
  v8[2] = 0;
  v8[3] = 0;
  sub_100008018(v13, (uint64_t)(v8 + 4));
  v8[9] = v1;
  v8[10] = sub_1001095C4;
  v8[11] = v6;
  swift_retain_n(v6, 2);
  swift_retain(v1);
  v9 = sub_1001075D4((uint64_t)v4, (uint64_t)&unk_100635120, (uint64_t)v8);
  swift_release(v6);
  swift_release(v9);
  OS_dispatch_group.wait()();
  swift_beginAccess(v6 + 16, v13, 0, 0);
  if (!*(_QWORD *)(v6 + 16))
    return swift_release(v6);
  v10 = swift_errorRetain(*(_QWORD *)(v6 + 16));
  swift_willThrow(v10);
  return swift_release(v6);
}

void sub_100108088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[488];
  _BYTE v18[488];
  _BYTE v19[488];
  _BYTE v20[488];

  sub_1000A1F54(a1, (uint64_t)v18, &qword_100635130);
  sub_1000A1F54((uint64_t)v18, (uint64_t)v20, &qword_100635130);
  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A1F54(a1, (uint64_t)v19, &qword_100635130);
  if (sub_100109B2C((uint64_t)v19) == 1)
  {
    v8 = *(_QWORD *)nullsub_7(v19);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    sub_1000A1F54((uint64_t)v20, (uint64_t)v17, &qword_100635130);
    v9 = (_QWORD *)nullsub_7(v17);
    swift_errorRetain(*v9);
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_100007F30();
    v13 = swift_allocError(v11, v12, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100549B80, v8, v7, 0, v10, 0xD00000000000005DLL, 0x8000000100549B00, 0xD000000000000016, 0x8000000100549BA0, 88);
    swift_beginAccess(a2 + 16, &v16, 1, 0);
    v14 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v13;
    swift_errorRelease(v14);
  }
  else
  {
    nullsub_7(v19);
  }
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  dispatch_group_leave((dispatch_group_t)qword_100670298);
}

uint64_t sub_1001082A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1001082B8, 0, 0);
}

uint64_t sub_1001082B8()
{
  uint64_t v0;
  _QWORD *v2;

  sub_10000806C((_QWORD *)(*(_QWORD *)(v0 + 16) + 56), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 80));
  if ((sub_10023A2E4() & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_10010836C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10010836C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001083DC;
  else
    v3 = sub_1001083D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001083D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001083DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001083E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18[2];

  v4 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_10062FF10);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100608708, v11 + v9, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  sub_10002581C(a2 + 56, (uint64_t)v18);
  v14 = (_QWORD *)swift_allocObject(&unk_100608730, 96, 7);
  v14[2] = 0;
  v14[3] = 0;
  sub_100008018(v18, (uint64_t)(v14 + 4));
  v14[9] = a2;
  v14[10] = sub_100109BA0;
  v14[11] = v12;
  swift_retain(a2);
  swift_retain(v12);
  v15 = sub_1001075D4((uint64_t)v6, (uint64_t)&unk_100635148, (uint64_t)v14);
  swift_release(v12);
  return swift_release(v15);
}

uint64_t sub_10010858C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[488];
  _BYTE v8[488];
  _BYTE v9[488];
  _BYTE v10[488];

  sub_1000A1F54(a1, (uint64_t)v8, &qword_100635130);
  sub_1000A1F54((uint64_t)v8, (uint64_t)v10, &qword_100635130);
  sub_1000A1F54(a1, (uint64_t)v9, &qword_100635130);
  if (sub_100109B2C((uint64_t)v9) == 1)
  {
    v6 = *(_QWORD *)nullsub_7(v9);
    sub_1000A1F54((uint64_t)v10, (uint64_t)v7, &qword_100635130);
    v2 = (_QWORD *)nullsub_7(v7);
    swift_errorRetain(*v2);
    v3 = sub_100004828(&qword_10062FF10);
    return CheckedContinuation.resume(throwing:)(&v6, v3);
  }
  else
  {
    nullsub_7(v9);
    v5 = sub_100004828(&qword_10062FF10);
    return CheckedContinuation.resume(returning:)(v5, v5);
  }
}

uint64_t sub_10010866C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _BYTE *v10;
  _BYTE v12[432];
  _BYTE v13[432];
  _BYTE v14[432];
  _BYTE v15[432];
  _BYTE v16[440];
  _BYTE v17[432];
  _QWORD v18[3];
  uint64_t v19;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  sub_10002581C(v1 + 56, (uint64_t)v18);
  v4 = *(os_unfair_lock_s **)(*sub_10000806C(v18, v19) + 56);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 112;
  os_unfair_lock_lock(v4 + 112);
  sub_1002355D8(v5, (uint64_t)v17);
  os_unfair_lock_unlock(v6);
  sub_1000A1F54((uint64_t)v17, (uint64_t)v15, &qword_100632330);
  sub_1000A1F54((uint64_t)v15, (uint64_t)v16, &qword_100632330);
  if (sub_100035A5C((uint64_t)v16) == 1)
  {
    sub_100107E98();
    v7 = *(os_unfair_lock_s **)(*sub_10000806C(v18, v19) + 56);
    v8 = (uint64_t)&v7[4];
    v9 = v7 + 112;
    os_unfair_lock_lock(v7 + 112);
    sub_1002355D8(v8, (uint64_t)v13);
    os_unfair_lock_unlock(v9);
    sub_1000A1F54((uint64_t)v13, (uint64_t)v12, &qword_100632330);
    v10 = v12;
  }
  else
  {
    v10 = v15;
  }
  sub_1000A1F54((uint64_t)v10, (uint64_t)v14, &qword_100632330);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v18);
  return sub_1000A1F54((uint64_t)v14, a1, &qword_100632330);
}

uint64_t sub_100108884(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[386] = v1;
  v2[385] = a1;
  v3 = type metadata accessor for Logger(0);
  v2[387] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[388] = v4;
  v2[389] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001088E8, 0, 0);
}

uint64_t sub_1001088E8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  sub_10002581C(*(_QWORD *)(v0 + 3088) + 56, v0 + 3040);
  v1 = *(os_unfair_lock_s **)(*sub_10000806C((_QWORD *)(v0 + 3040), *(_QWORD *)(v0 + 3064)) + 56);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 112;
  os_unfair_lock_lock(v1 + 112);
  sub_1002355D8(v2, v0 + 448);
  os_unfair_lock_unlock(v3);
  sub_1000A1F54(v0 + 448, v0 + 1312, &qword_100632330);
  sub_1000A1F54(v0 + 1312, v0 + 880, &qword_100632330);
  if (sub_100035A5C(v0 + 880) == 1)
  {
    v4 = (_QWORD *)swift_task_alloc(dword_100635144);
    *(_QWORD *)(v0 + 3120) = v4;
    *v4 = v0;
    v4[1] = sub_100108A70;
    v4[2] = *(_QWORD *)(v0 + 3088);
    return swift_task_switch(sub_1001082B8, 0, 0);
  }
  else
  {
    sub_1000A1F54(v0 + 1312, v0 + 16, &qword_100632330);
    v6 = *(_QWORD *)(v0 + 3112);
    v7 = *(_QWORD *)(v0 + 3080);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 3040));
    sub_1000A1F54(v0 + 16, v7, &qword_100632330);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100108A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3120);
  *(_QWORD *)(*(_QWORD *)v1 + 3128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100108BCC;
  else
    v3 = sub_100108AD4;
  return swift_task_switch(v3, 0, 0);
}

void sub_100108AD4()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 3128);
  v2 = *(os_unfair_lock_s **)(*sub_10000806C((_QWORD *)(v0 + 3040), *(_QWORD *)(v0 + 3064)) + 56);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 112;
  os_unfair_lock_lock(v2 + 112);
  sub_1002355D8(v3, v0 + 2608);
  os_unfair_lock_unlock(v4);
  if (!v1)
  {
    sub_1000A1F54(v0 + 2608, v0 + 1744, &qword_100632330);
    sub_1000A1F54(v0 + 1744, v0 + 16, &qword_100632330);
    v5 = *(_QWORD *)(v0 + 3112);
    v6 = *(_QWORD *)(v0 + 3080);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 3040));
    sub_1000A1F54(v0 + 16, v6, &qword_100632330);
    swift_task_dealloc(v5);
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100108BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 3128);
  v3 = *(_QWORD *)(v1 + 3112);
  v4 = *(_QWORD *)(v1 + 3104);
  v5 = *(_QWORD *)(v1 + 3096);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0xD000000000000035, 0x8000000100549AA0, v3);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000EFCF0((_OWORD *)(v1 + 2176));
  sub_1000A1F54(v1 + 2176, v1 + 16, &qword_100632330);
  v6 = *(_QWORD *)(v1 + 3112);
  v7 = *(_QWORD *)(v1 + 3080);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 3040));
  sub_1000A1F54(v1 + 16, v7, &qword_100632330);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100108CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[369] = a7;
  v7[368] = a6;
  v7[367] = a5;
  v7[366] = a4;
  v8 = type metadata accessor for Logger(0);
  v7[370] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[371] = v9;
  v7[372] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v7[373] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[374] = v11;
  v7[375] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  v7[376] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[377] = v13;
  v7[378] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100108D70, 0, 0);
}

uint64_t sub_100108D70()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000806C(*(_QWORD **)(v0 + 2928), *(_QWORD *)(*(_QWORD *)(v0 + 2928) + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_10063990C);
  *(_QWORD *)(v0 + 3032) = v1;
  *v1 = v0;
  v1[1] = sub_100108DD4;
  return sub_10023A41C(v0 + 1968, 0);
}

uint64_t sub_100108DD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t (*v14)();
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v2 = *v1;
  v3 = (_BYTE *)(*v1 + 2120);
  v4 = *(_QWORD *)(*v1 + 3032);
  *(_QWORD *)(v2 + 3040) = v0;
  *(_QWORD *)(v2 + 3048) = *(_QWORD *)(v2 + 1968);
  *(_OWORD *)(v2 + 3056) = *(_OWORD *)(v2 + 1976);
  *(_QWORD *)(v2 + 3072) = *(_QWORD *)(v2 + 1992);
  *(_OWORD *)(v2 + 3080) = *(_OWORD *)(v2 + 2000);
  *(_QWORD *)(v2 + 3096) = *(_QWORD *)(v2 + 2016);
  *(_QWORD *)(v2 + 3104) = *(_QWORD *)(v2 + 2024);
  *(_QWORD *)(v2 + 3112) = *(_QWORD *)(v2 + 2032);
  *(_QWORD *)(v2 + 3120) = *(_QWORD *)(v2 + 2040);
  *(_OWORD *)(v2 + 3128) = *(_OWORD *)(v2 + 2048);
  *(_QWORD *)(v2 + 3144) = *(_QWORD *)(v2 + 2064);
  *(_OWORD *)(v2 + 3152) = *(_OWORD *)(v2 + 2072);
  *(_QWORD *)(v2 + 3168) = *(_QWORD *)(v2 + 2088);
  *(_OWORD *)(v2 + 3176) = *(_OWORD *)(v2 + 2096);
  *(_QWORD *)(v2 + 3192) = *(_QWORD *)(v2 + 2112);
  v5 = *(_BYTE *)(v2 + 2120);
  *(_QWORD *)(v2 + 3200) = *(_QWORD *)(v2 + 2128);
  v19 = *(_BYTE *)(v2 + 2136);
  v20 = v5;
  *(_QWORD *)(v2 + 3208) = *(_QWORD *)(v2 + 2144);
  *(_QWORD *)(v2 + 3216) = *(_QWORD *)(v2 + 2152);
  *(_QWORD *)(v2 + 3224) = *(_QWORD *)(v2 + 2160);
  v6 = *(_BYTE *)(v2 + 2168);
  *(_QWORD *)(v2 + 3232) = *(_QWORD *)(v2 + 2176);
  v17 = *(_BYTE *)(v2 + 2184);
  v18 = v6;
  *(_QWORD *)(v2 + 3240) = *(_QWORD *)(v2 + 2192);
  v16 = *(_BYTE *)(v2 + 2200);
  *(_QWORD *)(v2 + 3248) = *(_QWORD *)(v2 + 2208);
  v7 = *(_BYTE *)(v2 + 2216);
  *(_QWORD *)(v2 + 3256) = *(_QWORD *)(v2 + 2224);
  v8 = *(_BYTE *)(v2 + 2232);
  *(_OWORD *)(v2 + 3264) = *(_OWORD *)(v2 + 2240);
  *(_OWORD *)(v2 + 3280) = *(_OWORD *)(v2 + 2256);
  *(_OWORD *)(v2 + 3296) = *(_OWORD *)(v2 + 2272);
  *(_QWORD *)(v2 + 3312) = *(_QWORD *)(v2 + 2288);
  v9 = *(_BYTE *)(v2 + 2296);
  *(_BYTE *)(v2 + 497) = *(_BYTE *)(v2 + 2297);
  *(_QWORD *)(v2 + 3320) = *(_QWORD *)(v2 + 2304);
  v10 = *(_BYTE *)(v2 + 2312);
  *(_QWORD *)(v2 + 3328) = *(_QWORD *)(v2 + 2320);
  v11 = *(_BYTE *)(v2 + 2328);
  *(_QWORD *)(v2 + 3336) = *(_QWORD *)(v2 + 2336);
  v12 = *(_BYTE *)(v2 + 2344);
  *(_BYTE *)(v2 + 498) = *(_BYTE *)(v2 + 2345);
  *(_QWORD *)(v2 + 3344) = *(_QWORD *)(v2 + 2352);
  v13 = *(_BYTE *)(v2 + 2360);
  *(_OWORD *)(v2 + 3352) = *(_OWORD *)(v2 + 2368);
  *(_OWORD *)(v2 + 3368) = *(_OWORD *)(v2 + 2384);
  *(_OWORD *)(v2 + 3384) = *(_OWORD *)(v2 + 2400);
  *(_OWORD *)(v2 + 3400) = *(_OWORD *)(v2 + 2416);
  *(_OWORD *)(v2 + 3416) = *(_OWORD *)(v2 + 2432);
  swift_task_dealloc(v4);
  if (v0)
  {
    v14 = sub_100109364;
  }
  else
  {
    v3[1312] = v20;
    v3[1320] = v19;
    v3[1328] = v18;
    v3[1336] = v17;
    v3[1344] = v16;
    v3[1352] = v7;
    v3[1360] = v8;
    v3[1368] = v9;
    v3[1376] = v10;
    v3[1384] = v11;
    v3[1392] = v12;
    v3[1400] = v13;
    v14 = sub_10010900C;
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t sub_10010900C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 3424);
  v2 = *(_QWORD *)(v0 + 3416);
  v22 = *(_QWORD *)(v0 + 3400);
  v23 = *(_QWORD *)(v0 + 3408);
  v41 = *(_QWORD *)(v0 + 3368);
  v42 = *(_QWORD *)(v0 + 3376);
  v40 = *(_OWORD *)(v0 + 3352);
  v39 = *(_QWORD *)(v0 + 3344);
  v38 = *(_BYTE *)(v0 + 498);
  v36 = *(_QWORD *)(v0 + 3328);
  v37 = *(_QWORD *)(v0 + 3336);
  v34 = *(_QWORD *)(v0 + 3320);
  v33 = *(_BYTE *)(v0 + 497);
  v32 = *(_QWORD *)(v0 + 3312);
  v30 = *(_OWORD *)(v0 + 3280);
  v31 = *(_OWORD *)(v0 + 3296);
  v29 = *(_OWORD *)(v0 + 3264);
  v27 = *(_QWORD *)(v0 + 3248);
  v28 = *(_QWORD *)(v0 + 3256);
  v25 = *(_QWORD *)(v0 + 3232);
  v26 = *(_QWORD *)(v0 + 3240);
  v24 = *(_QWORD *)(v0 + 3224);
  v3 = *(_QWORD *)(v0 + 3200);
  v4 = *(_QWORD *)(v0 + 3192);
  v20 = *(_OWORD *)(v0 + 3176);
  v21 = *(_OWORD *)(v0 + 3208);
  v18 = *(_OWORD *)(v0 + 3144);
  v19 = *(_OWORD *)(v0 + 3160);
  v16 = *(_OWORD *)(v0 + 3112);
  v17 = *(_OWORD *)(v0 + 3128);
  v5 = *(_QWORD *)(v0 + 3104);
  v6 = *(_QWORD *)(v0 + 3096);
  v7 = *(_QWORD *)(v0 + 3088);
  v8 = *(_QWORD *)(v0 + 3080);
  v9 = *(_QWORD *)(v0 + 3072);
  v10 = *(_QWORD *)(v0 + 3064);
  v15 = *(_OWORD *)(v0 + 3048);
  v35 = *(void (**)(uint64_t))(v0 + 2944);
  v14 = *(_OWORD *)(v0 + 3384);
  sub_100109814(v2, v1);
  *(_OWORD *)(v0 + 2448) = v14;
  *(_QWORD *)(v0 + 2464) = v22;
  *(_QWORD *)(v0 + 2472) = v23;
  *(_QWORD *)(v0 + 2480) = v2;
  *(_QWORD *)(v0 + 2488) = v1;
  *(_OWORD *)(v0 + 2496) = v15;
  *(_QWORD *)(v0 + 2512) = v10;
  *(_QWORD *)(v0 + 2520) = v9;
  *(_QWORD *)(v0 + 2528) = v8;
  *(_QWORD *)(v0 + 2536) = v7;
  *(_QWORD *)(v0 + 2544) = v6;
  *(_QWORD *)(v0 + 2552) = v5;
  *(_OWORD *)(v0 + 2560) = v16;
  *(_OWORD *)(v0 + 2576) = v17;
  *(_OWORD *)(v0 + 2592) = v18;
  *(_OWORD *)(v0 + 2608) = v19;
  *(_OWORD *)(v0 + 2624) = v20;
  *(_QWORD *)(v0 + 2640) = v4;
  *(_BYTE *)(v0 + 2648) = *(_BYTE *)(v0 + 3432);
  *(_QWORD *)(v0 + 2656) = v3;
  *(_BYTE *)(v0 + 2664) = *(_BYTE *)(v0 + 3440);
  *(_OWORD *)(v0 + 2672) = v21;
  *(_QWORD *)(v0 + 2688) = v24;
  *(_BYTE *)(v0 + 2696) = *(_BYTE *)(v0 + 3448);
  *(_QWORD *)(v0 + 2704) = v25;
  *(_BYTE *)(v0 + 2712) = *(_BYTE *)(v0 + 3456);
  *(_QWORD *)(v0 + 2720) = v26;
  *(_BYTE *)(v0 + 2728) = *(_BYTE *)(v0 + 3464);
  *(_QWORD *)(v0 + 2736) = v27;
  *(_BYTE *)(v0 + 2744) = *(_BYTE *)(v0 + 3472);
  *(_QWORD *)(v0 + 2752) = v28;
  *(_BYTE *)(v0 + 2760) = *(_BYTE *)(v0 + 3480);
  *(_OWORD *)(v0 + 2768) = v29;
  *(_OWORD *)(v0 + 2784) = v30;
  *(_OWORD *)(v0 + 2800) = v31;
  *(_QWORD *)(v0 + 2816) = v32;
  *(_BYTE *)(v0 + 2824) = *(_BYTE *)(v0 + 3488);
  *(_BYTE *)(v0 + 2825) = v33;
  *(_QWORD *)(v0 + 2832) = v34;
  *(_BYTE *)(v0 + 2840) = *(_BYTE *)(v0 + 3496);
  *(_QWORD *)(v0 + 2848) = v36;
  *(_BYTE *)(v0 + 2856) = *(_BYTE *)(v0 + 3504);
  *(_QWORD *)(v0 + 2864) = v37;
  *(_BYTE *)(v0 + 2872) = *(_BYTE *)(v0 + 3512);
  *(_BYTE *)(v0 + 2873) = v38;
  *(_QWORD *)(v0 + 2880) = v39;
  *(_BYTE *)(v0 + 2888) = *(_BYTE *)(v0 + 3520);
  *(_OWORD *)(v0 + 2896) = v40;
  *(_QWORD *)(v0 + 2912) = v41;
  *(_QWORD *)(v0 + 2920) = v42;
  memcpy((void *)(v0 + 1480), (const void *)(v0 + 2448), 0x1E0uLL);
  sub_1001099EC(v0 + 1480);
  sub_1000A1F54(v0 + 1480, v0 + 504, &qword_100635130);
  v35(v0 + 504);
  sub_1001099F4((uint64_t *)(v0 + 2448));
  v11 = *(_QWORD *)(v0 + 3000);
  v12 = *(_QWORD *)(v0 + 2976);
  swift_task_dealloc(*(_QWORD *)(v0 + 3024));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);

  v1 = *(_QWORD *)(v0 + 3040);
  v2 = *(_QWORD *)(v0 + 3024);
  v3 = *(_QWORD *)(v0 + 3016);
  v4 = *(_QWORD *)(v0 + 3008);
  v5 = *(_QWORD *)(v0 + 3000);
  v6 = *(_QWORD *)(v0 + 2976);
  v18 = *(_QWORD *)(v0 + 2968);
  v19 = *(_QWORD *)(v0 + 2960);
  v20 = *(void (**)(uint64_t))(v0 + 2944);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2992) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 2984));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100549AE0, v1, v5, 0, v7, 0xD00000000000005DLL, 0x8000000100549B00, 0xD000000000000016, 0x8000000100549B60, 171);
  v8 = sub_100007F30();
  v9 = swift_allocError(v4, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v12 = v10(v11, v2, v4);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v9, 0, 0xE000000000000000, v6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v6, v19);
  swift_errorRelease(v9);
  v13 = swift_allocError(v4, v8, 0, 0);
  v10(v14, v2, v4);
  *(_QWORD *)(v0 + 992) = v13;
  sub_100109750(v0 + 992);
  sub_1000A1F54(v0 + 992, v0 + 16, &qword_100635130);
  v20(v0 + 16);
  swift_errorRelease(v13);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v15 = *(_QWORD *)(v0 + 3000);
  v16 = *(_QWORD *)(v0 + 2976);
  swift_task_dealloc(*(_QWORD *)(v0 + 3024));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ConfigurationManager()
{
  return objc_opt_self(_TtC8coreidvd20ConfigurationManager);
}

uint64_t sub_1001095A0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001095C4(uint64_t a1)
{
  uint64_t v1;

  sub_100108088(a1, v1);
}

uint64_t sub_1001095D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  v10 = (_QWORD *)swift_task_alloc(dword_10063511C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D0A0;
  return sub_100108CB4(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100109660(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_10062FEC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001096A0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100109704;
  return v6(a1);
}

uint64_t sub_100109704()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100109750(uint64_t result)
{
  *(_BYTE *)(result + 480) = 1;
  return result;
}

uint64_t sub_10010975C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1001097C4;
  return v5(v2 + 32);
}

uint64_t sub_1001097C4()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_100109814(char a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  Swift::String v11;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11._object = (void *)0x8000000100547B20;
  v11._countAndFlagsBits = 0xD000000000000031;
  v12 = NSUserDefaults.internalBool(forKey:)(v11);

  if (v12)
  {
    v14 = defaultLogger()(v13);
    v15 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.info.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "ConfigurationManager region check disabled, skipping updateGlobalConfiguration", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else if (a2)
  {
    v19 = a1 & 1;
    swift_bridgeObjectRetain(a2);
    sub_100107864(v20);
    v22 = v21;
    sub_100107A58(a2);
    v24 = v23;
    swift_bridgeObjectRelease(a2);
    v25 = v3 + 2;
    v27 = v3[5];
    v26 = v3[6];
    sub_10000806C(v25, v27);
    dispatch thunk of MobileDocumentReaderSupportChecking.update(isGloballySupported:supportedRegions:unsupportedRegions:)(v19, v22, v24, v27, v26);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
  }
}

uint64_t sub_1001099EC(uint64_t result)
{
  *(_BYTE *)(result + 480) = 0;
  return result;
}

uint64_t *sub_1001099F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[15];
  v8 = a1[17];
  v9 = a1[19];
  v10 = a1[21];
  v12 = a1[5];
  v13 = a1[23];
  v14 = a1[41];
  v15 = a1[43];
  v16 = a1[45];
  v17 = a1[56];
  v18 = a1[57];
  v19 = a1[58];
  v20 = a1[59];
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_100109B2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

uint64_t sub_100109B34(uint64_t a1)
{
  uint64_t v1;

  return sub_1001083E8(a1, v1);
}

uint64_t sub_100109B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100004828(&qword_10062FF10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100109BA0(uint64_t a1)
{
  sub_100004828(&qword_10062FF10);
  return sub_10010858C(a1);
}

uint64_t sub_100109BE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  v10 = (_QWORD *)swift_task_alloc(dword_10063511C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100007EE8;
  return sub_100108CB4(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100109C74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100109C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100635154);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100635150 + dword_100635150))(a1, v4);
}

uint64_t sub_100109D0C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 4);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100109D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_100109D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100109DF8, 0, 0);
}

uint64_t sub_100109DF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[9];
  v2 = v0[5];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)swift_allocObject(&unk_1006087B0, 40, 7);
  v0[10] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v1, v6, v7);
  v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v3);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[11] = v9;
  *v9 = v0;
  v9[1] = sub_100109ED8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0[2], v0[9], sub_10010A6B4, v5, v0[5]);
}

uint64_t sub_100109ED8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 80);
  v2 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v6 = *(_QWORD *)(*v1 + 56);
  v7 = *v1;
  *(_QWORD *)(v7 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    return swift_task_switch(sub_100109F84, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v7 + 72));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_100109F84()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100109FB8()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v5;
  uint64_t v6;
  id v7;

  v1 = *(void **)(v0 + 16);
  v7 = 0;
  v2 = objc_msgSend(v1, "save:", &v7);
  v3 = v7;
  if (v2)
    return v7;
  v5 = v7;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow(v6);
}

uint64_t sub_10010A05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  Class isa;
  id v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = type metadata accessor for StoredProofingSession(0);
  v9 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000C000C();
  v10 = sub_100004828((uint64_t *)&unk_100636410);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_1000C0048();
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v12 = (void *)NSPredicate.init(format:_:)(0xD000000000000010, 0x8000000100546B80, v11);
  v13 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10051FFB0;
  v14 = IdentityTarget.rawValue.getter(a3);
  *(_QWORD *)(v13 + 56) = &type metadata for Int64;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v13 + 32) = v14;
  v15 = (void *)NSPredicate.init(format:_:)(0x3D20746567726174, 0xEC0000006425203DLL, v13);
  v16 = sub_100004828(&qword_100640C30);
  v17 = swift_allocObject(v16, 48, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100524030;
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v15;
  v27 = v17;
  specialized Array._endMutation()(v17);
  v18 = v12;
  v19 = v15;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v21 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  objc_msgSend(v9, "setPredicate:", v21);
  result = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  if (v26)
  {

    v9 = v19;
LABEL_10:

    return v4;
  }
  v23 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v25 = result;
    else
      v25 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v4 = _CocoaArrayWrapper.endIndex.getter(v25);
    result = swift_bridgeObjectRelease(v23);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:

      swift_bridgeObjectRelease(v23);
      goto LABEL_10;
    }
  }
  if ((v23 & 0xC000000000000001) != 0)
  {
    v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v24 = *(id *)(v23 + 32);
LABEL_8:
    v4 = (uint64_t)v24;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010A318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[3];
  char v29[8];

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoredProofingBiomeData(0);
  v6 = (void *)static StoredProofingBiomeData.fetchRequest()();
  result = NSManagedObjectContext.fetch<A>(_:)(v6, v5);
  if (v0)
  {

    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    v8 = sub_100004828((uint64_t *)&unk_1006325A0);
    v9 = sub_100004828((uint64_t *)&unk_100633440);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(unsigned __int8 *)(v10 + 80);
    v13 = (v12 + 32) & ~v12;
    v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
    *(_OWORD *)(v14 + 16) = xmmword_10051FFB0;
    v15 = (uint64_t *)(v14 + v13 + *(int *)(v9 + 48));
    v16 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v17 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14 + v13, v16, v17);
    swift_getErrorValue(v0, v29, v28);
    v18 = v28[1];
    v19 = v28[2];
    swift_errorRetain(v0);
    v20 = dispatch thunk of Error._code.getter(v18, v19);
    v15[3] = (uint64_t)&type metadata for Int;
    *v15 = v20;
    v21 = sub_10011D314(v14);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_100007F30();
    swift_allocError(v22, v23, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100549BF0, v0, v4, 0, v21, 0xD000000000000065, 0x8000000100549C20, 0xD000000000000018, 0x80000001005469F0, 98);
    swift_willThrow(v24);
    swift_errorRelease(v0);
    return (uint64_t)v4;
  }
  v25 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v27 = result;
    else
      v27 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v4 = (char *)_CocoaArrayWrapper.endIndex.getter(v27);
    result = swift_bridgeObjectRelease(v25);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(char **)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_9:
      swift_bridgeObjectRelease(v25);

      return (uint64_t)v4;
    }
  }
  if ((v25 & 0xC000000000000001) != 0)
  {
    v26 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = (char *)*(id *)(v25 + 32);
LABEL_8:
    v4 = v26;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingAsyncDataContext()
{
  return objc_opt_self(_TtC8coreidvd32IdentityProofingAsyncDataContext);
}

uint64_t sub_10010A614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_100635214);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100007EE8;
  return sub_100109D90(a1, a2, a3, a4);
}

uint64_t sub_10010A690()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010A6B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_10010A6D4(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class isa;
  id v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = type metadata accessor for StoredProofingSession(0);
  v4 = (void *)static StoredProofingSession.fetchRequest()();
  sub_1000C000C();
  v5 = sub_100004828((uint64_t *)&unk_100636410);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v7 = sub_1000C0048();
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v8 = (void *)NSPredicate.init(format:_:)(0x3D3D206574617473, 0xEB00000000402520, v6);
  v9 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = v7;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v10 = (void *)NSPredicate.init(format:_:)(0x207972746E756F63, 0xED00004025203D3DLL, v9);
  v11 = sub_100004828(&qword_100640C30);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100524030;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v10;
  v23 = v12;
  specialized Array._endMutation()(v12);
  v13 = v8;
  v14 = v10;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v16 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  objc_msgSend(v4, "setPredicate:", v16);
  result = NSManagedObjectContext.fetch<A>(_:)(v4, v21);
  if (v22)
  {

    v4 = v14;
LABEL_10:

    return v7;
  }
  v18 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v20 = result;
    else
      v20 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v7 = _CocoaArrayWrapper.endIndex.getter(v20);
    result = swift_bridgeObjectRelease(v18);
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
    {
LABEL_9:

      swift_bridgeObjectRelease(v18);
      goto LABEL_10;
    }
  }
  if ((v18 & 0xC000000000000001) != 0)
  {
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(v18 + 32);
LABEL_8:
    v7 = (unint64_t)v19;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010A984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  __int128 v48;
  __int128 v49;

  v4 = type metadata accessor for DIPError.PropertyKey(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MobileDocumentReaderSession.Error.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a1;
  DIPError.code.getter(v13);
  v41 = v12;
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if ((_DWORD)v16 == enum case for DIPError.Code.missingEntitlement(_:))
    goto LABEL_2;
  v43 = v8;
  v44 = v10;
  v45 = v7;
  v42 = a2;
  if ((_DWORD)v16 == enum case for DIPError.Code.networkTimeOut(_:))
    goto LABEL_4;
  v10 = v44;
  v22 = v45;
  v8 = v43;
  if ((_DWORD)v16 == enum case for DIPError.Code.regionNotSupported(_:))
    goto LABEL_8;
  if ((_DWORD)v16 == enum case for DIPError.Code.unexpectedServerResponse(_:))
    goto LABEL_10;
  v34 = (_DWORD)v16 == enum case for DIPError.Code.topekaEntitlementServiceError(_:)
     || (_DWORD)v16 == enum case for DIPError.Code.topekaWWDRTeamTerminated(_:)
     || (_DWORD)v16 == enum case for DIPError.Code.topekaWWDRTeamExpired(_:)
     || (_DWORD)v16 == enum case for DIPError.Code.topekaWWDRTeamDisabled(_:);
  v7 = v45;
  if (v34)
    goto LABEL_2;
  if ((_DWORD)v16 == enum case for DIPError.Code.topekaJWTVerificationFailed(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaMalformedJWT(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaInvalidJWTType(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaIncorrectJWTAlgorithm(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaInvalidJWTSignature(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaJWTOutsideOfValidityPeriod(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaInvalidJWTClaim(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaAppIDMismatch(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaNotOnboarded(_:)
    || (_DWORD)v16 == enum case for DIPError.Code.topekaInvalidKeyID(_:))
  {
    goto LABEL_36;
  }
  v8 = v43;
  v10 = v44;
  v7 = v45;
  if ((_DWORD)v16 != enum case for DIPError.Code.topekaCannotVerifyDeviceOwnership(_:))
  {
    if ((_DWORD)v16 != enum case for DIPError.Code.topekaInvalidAudience(_:))
    {
      if ((_DWORD)v16 == enum case for DIPError.Code.topekaiCloudAccountSignedOut(_:))
      {
        v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.iCloudAccountSignedOut(_:);
        goto LABEL_5;
      }
      v10 = v44;
      v22 = v45;
      v8 = v43;
      if ((_DWORD)v16 == enum case for DIPError.Code.topekaInvalidIAT(_:))
        goto LABEL_10;
      if ((_DWORD)v16 != enum case for DIPError.Code.topekaSubjectMismatch(_:))
      {
        if ((_DWORD)v16 == enum case for DIPError.Code.topekaMissingFairPlayProvisioningInfo(_:)
          || (_DWORD)v16 == enum case for DIPError.Code.topekaOSVersionNotSupported(_:))
        {
          v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.osNotSupported(_:);
          goto LABEL_5;
        }
        if ((_DWORD)v16 != enum case for DIPError.Code.topekaJWTSigningKeyExpired(_:))
        {
          v10 = v44;
          v22 = v45;
          v8 = v43;
          if ((_DWORD)v16 == enum case for DIPError.Code.topekaABRTermsAndConditionsAcceptanceRequired(_:)
            || (_DWORD)v16 == enum case for DIPError.Code.topekaInternalServerError(_:))
          {
            goto LABEL_10;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.sesKeyNetworkError(_:))
          {
LABEL_4:
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.networkError(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReadCancelled(_:))
          {
LABEL_48:
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.cancelled(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReadingAlreadyInProgress(_:))
          {
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadAlreadyInProgress(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderMissingSession(_:))
          {
LABEL_53:
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.sessionExpired(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderHolderCancelled(_:))
            goto LABEL_48;
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderSTSSessionUnexpectedError(_:))
          {
LABEL_56:
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadConnectionError(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderMalformedDocumentResponse(_:))
          {
LABEL_58:
            v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidResponse(_:);
            goto LABEL_5;
          }
          if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderMissingReaderAuthKey(_:))
          {
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderRequiresBluetooth(_:))
            {
              v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.bluetoothDisabled(_:);
              goto LABEL_5;
            }
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderRequiresNFC(_:))
            {
              v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcDisabled(_:);
              goto LABEL_5;
            }
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderUnknownDocumentType(_:)
              || (_DWORD)v16 == enum case for DIPError.Code.documentReaderUnknownDocumentElement(_:))
            {
              goto LABEL_70;
            }
            v10 = v44;
            v22 = v45;
            v8 = v43;
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderCertificateLogoHashMismatch(_:)
              || (_DWORD)v16 == enum case for DIPError.Code.documentReaderCertificateValidationFailed(_:))
            {
              goto LABEL_10;
            }
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderSTSConnectionError(_:))
              goto LABEL_56;
            if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidRequest(_:))
              goto LABEL_70;
            if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderExpiredAttestationCertificate(_:))
            {
              if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderTermsAndConditionsAcceptanceRequired(_:))
              {
                v35 = DIPError.properties.getter(v16);
                (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v6, enum case for DIPError.PropertyKey.termsAndConditions(_:), v4);
                if (*(_QWORD *)(v35 + 16) && (v36 = sub_1004A8668((uint64_t)v6), (v37 & 1) != 0))
                {
                  sub_10002EDBC(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)&v48);
                }
                else
                {
                  v48 = 0u;
                  v49 = 0u;
                }
                swift_bridgeObjectRelease(v35);
                (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
                if (*((_QWORD *)&v49 + 1))
                {
                  if ((swift_dynamicCast(v47, &v48, (char *)&type metadata for Any + 8, &type metadata for MobileDocumentReaderTermsAndConditions, 6) & 1) != 0)
                  {
                    v38 = v47[1];
                    v20 = v44;
                    *(_QWORD *)v44 = v47[0];
                    *((_QWORD *)v20 + 1) = v38;
                    v18 = enum case for MobileDocumentReaderSession.Error.Code.termsAndConditionsAcceptanceRequired(_:);
                    v19 = v43;
                    goto LABEL_6;
                  }
                }
                else
                {
                  sub_10010BDF4((uint64_t)&v48);
                }
                v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.unknown(_:);
LABEL_5:
                v18 = *v17;
                v19 = v43;
                v20 = v44;
LABEL_6:
                (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v20, v18, v45);
                v21 = v20;
LABEL_12:
                MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)(v21, 0, 0, 0);
                goto LABEL_13;
              }
              if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidResponse(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderUnknownDeviceAuthAlgorithm(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthPublicKey(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMisformattedDeviceAuthSignature(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthSignature(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderUnauthorizedDeviceKey(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:)
                || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDeviceMacUnsupported(_:))
              {
                goto LABEL_58;
              }
              if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderPasscodeNotSet(_:))
              {
                v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.passcodeNotSet(_:);
                goto LABEL_5;
              }
              if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:))
              {
                v10 = v44;
                v22 = v45;
                v8 = v43;
                if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderTermsAndConditionsFetchFailed(_:))
                  goto LABEL_10;
                if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderHSA2NotEnabled(_:))
                {
                  v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.hsa2Disabled(_:);
                  goto LABEL_5;
                }
                if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderReadTimedOut(_:))
                {
                  v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.documentReadTimedOut(_:);
                  goto LABEL_5;
                }
                if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderNFCOverheatProtectionEnabled(_:))
                {
                  v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcOverheatProtectionEnabled(_:);
                  goto LABEL_5;
                }
                if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderSessionExpired(_:))
                  goto LABEL_53;
                if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderNoTrustedIssuerRoots(_:))
                {
                  if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderUntrustedIssuer(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMismatchedDocType(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:)
                    || (_DWORD)v16 == enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:))
                  {
                    goto LABEL_58;
                  }
                  if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderEmptyRequest(_:)
                    && (_DWORD)v16 != enum case for DIPError.Code.documentReaderDuplicateElementsInRequest(_:)
                    && (_DWORD)v16 != enum case for DIPError.Code.documentReaderInvalidAgeAtLeastElement(_:)
                    && (_DWORD)v16 != enum case for DIPError.Code.documentReaderTooManyAgeAtLeastElements(_:)
                    && (_DWORD)v16 != enum case for DIPError.Code.documentReaderRequestOnlyContainsPortrait(_:))
                  {
                    v10 = v44;
                    v22 = v45;
                    v8 = v43;
                    if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderUnableToCheckRegionSupport(_:))
                      goto LABEL_10;
                    if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderCertificateRevoked(_:))
                      goto LABEL_58;
                    if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderNFCNegotiatedHandoverFailed(_:))
                    {
                      v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.nfcNegotiatedHandoverFailed(_:);
                      goto LABEL_5;
                    }
                    if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderUnsupportedPortraitDataFormat(_:))
                      goto LABEL_58;
                    if ((_DWORD)v16 != enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:)
                      && (_DWORD)v16 != enum case for DIPError.Code.documentReaderTokenRequiredForRequest(_:))
                    {
                      v10 = v44;
                      v22 = v45;
                      v8 = v43;
                      if ((_DWORD)v16 == enum case for DIPError.Code.documentReaderApplicationExtensionsNotPermitted(_:)
                        || (_DWORD)v16 == enum case for DIPError.Code.documentReaderUnsupportedBundleType(_:))
                      {
LABEL_8:
                        v23 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.notSupported(_:);
LABEL_11:
                        (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *v23, v22);
                        v21 = v10;
                        goto LABEL_12;
                      }
                      if ((_DWORD)v16 == enum case for DIPError.Code.vicalCouldNotFetch(_:))
                      {
LABEL_10:
                        v23 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.serviceUnavailable(_:);
                        goto LABEL_11;
                      }
                      if ((_DWORD)v16 != enum case for DIPError.Code.vicalMissing(_:))
                      {
                        v10 = v44;
                        v22 = v45;
                        v8 = v43;
                        if ((_DWORD)v16 != enum case for DIPError.Code.vicalCannotParseDocument(_:))
                        {
                          (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v44, enum case for MobileDocumentReaderSession.Error.Code.unknown(_:), v45);
                          MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)(v10, 0, 0, 0);
                          (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v11);
                          goto LABEL_13;
                        }
                        goto LABEL_10;
                      }
                      goto LABEL_53;
                    }
                  }
                }
              }
LABEL_70:
              v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidRequest(_:);
              goto LABEL_5;
            }
          }
        }
      }
    }
LABEL_36:
    v17 = (unsigned int *)&enum case for MobileDocumentReaderSession.Error.Code.invalidToken(_:);
    goto LABEL_5;
  }
LABEL_2:
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for MobileDocumentReaderSession.Error.Code.notEntitled(_:), v7);
  MobileDocumentReaderSession.Error.init(code:underlyingError:debugDescription:)(v10, 0, 0, 0);
LABEL_13:
  v24 = type metadata accessor for DIPError(0);
  v25 = sub_100007F30();
  v26 = swift_allocError(v24, v25, 0, 0);
  v27 = *(_QWORD *)(v24 - 8);
  v28 = v46;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v46, v24);
  MobileDocumentReaderSession.Error.underlyingError.setter(v26);
  v30 = sub_10010B568();
  MobileDocumentReaderSession.Error.debugDescription.setter(v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v28, v24);
}

unint64_t sub_10010B568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  unint64_t result;
  int v7;
  uint64_t v11;

  v0 = type metadata accessor for DIPError.Code(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DIPError.code.getter(v2);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == enum case for DIPError.Code.missingEntitlement(_:))
    return 0xD00000000000003ALL;
  v7 = v5;
  if (v5 == enum case for DIPError.Code.regionNotSupported(_:))
    return 0xD00000000000002BLL;
  if (v5 == enum case for DIPError.Code.topekaEntitlementServiceError(_:)
    || v5 == enum case for DIPError.Code.topekaWWDRTeamTerminated(_:)
    || v5 == enum case for DIPError.Code.topekaWWDRTeamExpired(_:)
    || v5 == enum case for DIPError.Code.topekaWWDRTeamDisabled(_:))
  {
    return 0xD000000000000050;
  }
  if (v5 == enum case for DIPError.Code.topekaJWTVerificationFailed(_:))
    return 0xD000000000000030;
  if (v5 == enum case for DIPError.Code.topekaMalformedJWT(_:))
    return 0xD000000000000027;
  if (v5 == enum case for DIPError.Code.topekaInvalidJWTType(_:))
    return 0xD000000000000055;
  if (v5 == enum case for DIPError.Code.topekaIncorrectJWTAlgorithm(_:))
    return 0xD000000000000057;
  if (v5 == enum case for DIPError.Code.topekaInvalidJWTSignature(_:))
    return 0xD000000000000038;
  if (v5 == enum case for DIPError.Code.topekaJWTOutsideOfValidityPeriod(_:))
    return 0xD00000000000004ELL;
  if (v5 == enum case for DIPError.Code.topekaInvalidJWTClaim(_:))
    return 0xD00000000000003ELL;
  result = 0xD000000000000090;
  if (v7 != enum case for DIPError.Code.topekaAppIDMismatch(_:)
    && v7 != enum case for DIPError.Code.topekaNotOnboarded(_:))
  {
    if (v7 == enum case for DIPError.Code.topekaInvalidKeyID(_:))
      return 0xD000000000000086;
    if (v7 == enum case for DIPError.Code.topekaCannotVerifyDeviceOwnership(_:))
      return 0xD000000000000040;
    if (v7 == enum case for DIPError.Code.topekaInvalidAudience(_:))
      return 0xD000000000000075;
    if (v7 == enum case for DIPError.Code.topekaSubjectMismatch(_:))
      return 0xD00000000000006DLL;
    if (v7 == enum case for DIPError.Code.topekaMissingFairPlayProvisioningInfo(_:))
      return 0;
    if (v7 == enum case for DIPError.Code.topekaJWTSigningKeyExpired(_:))
      return 0xD000000000000039;
    if (v7 == enum case for DIPError.Code.topekaABRTermsAndConditionsAcceptanceRequired(_:))
      return 0xD00000000000005CLL;
    if (v7 == enum case for DIPError.Code.documentReaderUnknownDocumentType(_:))
      return 0xD000000000000029;
    if (v7 == enum case for DIPError.Code.documentReaderUnknownIssuerAuthAlgorithm(_:))
      return 0xD000000000000064;
    if (v7 == enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:))
      return 0xD000000000000034;
    result = 0xD00000000000004ALL;
    if (v7 != enum case for DIPError.Code.documentReaderMisformattedIssuerAuthSignature(_:)
      && v7 != enum case for DIPError.Code.documentReaderInvalidIssuerAuthSignature(_:))
    {
      if (v7 == enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:))
        return 0xD00000000000004ALL;
      if (v7 == enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:))
        return 0xD000000000000069;
      if (v7 == enum case for DIPError.Code.documentReaderUnknownDeviceAuthAlgorithm(_:))
        return 0xD000000000000063;
      if (v7 == enum case for DIPError.Code.documentReaderInvalidDeviceAuthPublicKey(_:))
        return 0xD00000000000003CLL;
      result = 0xD00000000000004ALL;
      if (v7 != enum case for DIPError.Code.documentReaderMisformattedDeviceAuthSignature(_:)
        && v7 != enum case for DIPError.Code.documentReaderInvalidDeviceAuthSignature(_:))
      {
        if (v7 == enum case for DIPError.Code.documentReaderUnauthorizedDeviceKey(_:))
          return 0xD000000000000069;
        if (v7 == enum case for DIPError.Code.documentReaderMalformedDeviceAuthStructure(_:))
          return 0xD000000000000053;
        if (v7 == enum case for DIPError.Code.documentReaderDeviceMacUnsupported(_:))
          return 0xD00000000000005ALL;
        if (v7 == enum case for DIPError.Code.documentReaderAuthenticationCertificateNotAllowedToPerformRequest(_:))
          return 0xD00000000000008CLL;
        if (v7 == enum case for DIPError.Code.documentReaderUntrustedIssuer(_:))
          return 0xD000000000000044;
        if (v7 == enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:))
          return 0xD000000000000045;
        if (v7 == enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:))
          return 0xD00000000000003DLL;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:))
          return 0xD000000000000074;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:))
          return 0xD000000000000082;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:))
          return 0xD000000000000062;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:))
          return 0xD000000000000058;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:))
          return 0xD000000000000033;
        if (v7 == enum case for DIPError.Code.documentReaderMismatchedDocType(_:))
          return 0xD000000000000078;
        if (v7 == enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:))
          return 0xD000000000000061;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:))
          return 0xD000000000000053;
        if (v7 == enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:))
          return 0xD00000000000003BLL;
        if (v7 == enum case for DIPError.Code.documentReaderEmptyRequest(_:))
          return 0xD000000000000033;
        if (v7 == enum case for DIPError.Code.documentReaderDuplicateElementsInRequest(_:))
          return 0xD000000000000031;
        if (v7 == enum case for DIPError.Code.documentReaderInvalidAgeAtLeastElement(_:))
          return 0xD00000000000006FLL;
        if (v7 == enum case for DIPError.Code.documentReaderTooManyAgeAtLeastElements(_:))
          return 0xD00000000000003DLL;
        if (v7 == enum case for DIPError.Code.documentReaderRequestOnlyContainsPortrait(_:))
          return 0xD000000000000033;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerMissingCommonName(_:))
          return 0xD000000000000042;
        if (v7 == enum case for DIPError.Code.documentReaderDocSignerInvalidKeyUsage(_:))
          return 0xD00000000000005ALL;
        if (v7 == enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:))
          return 0xD000000000000041;
        if (v7 == enum case for DIPError.Code.documentReaderTokenRequiredForRequest(_:))
          return 0xD000000000000044;
        if (v7 == enum case for DIPError.Code.documentReaderApplicationExtensionsNotPermitted(_:))
          return 0xD00000000000003ELL;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10010BDF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828((uint64_t *)&unk_1006371E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for KRL()
{
  return &type metadata for KRL;
}

uint64_t sub_10010BE44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100004828(&qword_100635348);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_100008030((uint64_t)v17, &qword_100635350);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_100111EA8(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_100111F0C(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0]);
    sub_100111288();
    __asm { BR              X12 }
  }
  sub_100008018(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_10000806C(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_100111578, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_10010C348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint8_t *v50;
  Swift::String v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t countAndFlagsBits;
  uint8_t *v56;
  uint8_t *v57;
  int v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v54 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v54 - v13;
  v15 = SecCertificateRef.serialNumber.getter(v12);
  if (v16 >> 60 == 15)
  {
    v17 = defaultLogger()(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "IssuerRevocationList provided certificate is missing serial number.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22 = v8;
LABEL_13:
    v21(v22, v4);
    return 0;
  }
  v23 = v15;
  v24 = v16;
  v25 = SecCertificateRef.serialNumber.getter(v15);
  if (v26 >> 60 == 15)
  {
    v27 = defaultLogger()(v25);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "IssuerRevocationList provided root certificate is missing serial number.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);

      sub_100007F78(v23, v24);
    }
    else
    {
      sub_100007F78(v23, v24);

    }
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22 = v11;
    goto LABEL_13;
  }
  v31 = v25;
  v32 = v26;
  v61 = v4;
  sub_100028034(v23, v24);
  v62 = sub_100111FA8(v23, v24);
  v63 = v33;
  sub_100007F78(v23, v24);
  sub_100022948(v31, v32);
  v34 = sub_100111FA8(v31, v32);
  v36 = v35;
  v37 = sub_100007F78(v31, v32);
  if (*(_QWORD *)(a3 + 16))
  {
    sub_100022948(v34, v36);
    v38 = sub_1004A88B8(v34, v36);
    if ((v39 & 1) != 0)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v38);
      swift_bridgeObjectRetain(v40);
      sub_100007F8C(v34, v36);
      v42 = v62;
      v41 = v63;
      v43 = sub_1001B1D98(v62, v63, v40);
      sub_100007F78(v23, v24);
      sub_100007F78(v31, v32);
      sub_100007F8C(v34, v36);
      sub_100007F8C(v42, v41);
      swift_bridgeObjectRelease(v40);
      return v43 & 1;
    }
    v37 = sub_100007F8C(v34, v36);
  }
  defaultLogger()(v37);
  sub_100022948(v34, v36);
  v45 = sub_100022948(v34, v36);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  v48 = v47;
  if (os_log_type_enabled(v46, v47))
  {
    v60 = v46;
    v49 = swift_slowAlloc(12, -1);
    v58 = v48;
    v50 = (uint8_t *)v49;
    v59 = swift_slowAlloc(32, -1);
    v65 = v59;
    v57 = v50;
    *(_DWORD *)v50 = 136315138;
    v56 = v50 + 4;
    sub_100022948(v34, v36);
    v51 = Data.base16EncodedString()();
    countAndFlagsBits = v51._countAndFlagsBits;
    sub_100007F8C(v34, v36);
    v64 = sub_1000E3AC8(countAndFlagsBits, (unint64_t)v51._object, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v56);
    swift_bridgeObjectRelease(v51._object);
    sub_100007F8C(v34, v36);
    sub_100007F8C(v34, v36);
    v52 = v57;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v58, "IssuerRevocationList certificate revocation list is missing for serial number %s", v57, 0xCu);
    v53 = v59;
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
    sub_100007F8C(v62, v63);

    sub_100007F8C(v34, v36);
    sub_100007F78(v31, v32);
    sub_100007F78(v23, v24);
  }
  else
  {
    sub_100007F78(v23, v24);
    sub_100007F78(v31, v32);
    sub_100007F8C(v34, v36);
    sub_100007F8C(v62, v63);
    sub_100007F8C(v34, v36);
    sub_100007F8C(v34, v36);

  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v61);
  return 0;
}

uint64_t sub_10010C864()
{
  return Data.base16EncodedString()()._countAndFlagsBits;
}

void sub_10010C86C(uint64_t *a1)
{
  sub_1004406E8(*a1, a1[1]);
}

Swift::Int sub_10010C880()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  sub_100022948(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_100007F8C(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10010C8E0(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  sub_100022948(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_100007F8C(v4, v3);
}

Swift::Int sub_10010C92C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_100022948(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100007F8C(v2, v3);
  return Hasher._finalize()();
}

void sub_10010C988(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  os_unfair_lock_s *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  void (**v36)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  void (**v49)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *);
  uint64_t v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  os_unfair_lock_s *v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  objc_class *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t ObjectType;
  id v98;
  id v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  objc_class *v105;
  char *v106;
  uint64_t v107;
  id v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  os_unfair_lock_s *v111;
  id v112;
  _QWORD *v113;
  char *v114;
  char *v115;
  char *v116;
  os_unfair_lock_s *v117;
  os_unfair_lock_s *v118;
  os_unfair_lock_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  os_unfair_lock_s *v131;
  os_unfair_lock_s *v132;
  uint64_t v133;
  void (**v134)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *);
  _QWORD *v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  __int128 v139;
  uint64_t v140;
  _BYTE v141[432];
  _BYTE v142[432];
  _BYTE v143[432];
  _QWORD v144[46];
  _BYTE v145[16];
  __int128 v146;
  uint64_t v147;

  v135 = (_QWORD *)a1;
  v132 = (os_unfair_lock_s *)type metadata accessor for DIPError.Code(0);
  v134 = *(void (***)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *))&v132[-2]._os_unfair_lock_opaque;
  __chkstk_darwin(v132);
  v131 = (os_unfair_lock_s *)((char *)&v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_100004828(&qword_10062FC40);
  __chkstk_darwin(v3);
  v130 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for VICALTrustValidator(0);
  v6 = __chkstk_darwin(v5);
  v124 = (uint64_t)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v125 = (uint64_t)&v114 - v8;
  v9 = type metadata accessor for Logger(0);
  v128 = *(_QWORD *)(v9 - 8);
  v129 = v9;
  v10 = __chkstk_darwin(v9);
  v123 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v126 = (char *)&v114 - v12;
  v13 = sub_100004828(&qword_100630A48);
  v14 = __chkstk_darwin(v13);
  v122 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v127 = (char *)&v114 - v16;
  v17 = type metadata accessor for URL(0);
  v133 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v114 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v114 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v114 - v27;
  v29 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v29 + 14);
  sub_100038B24((uint64_t)&v29[4], (uint64_t)&v139, &qword_1006352C0);
  os_unfair_lock_unlock(v29 + 14);
  if (v140)
  {
    sub_100008018(&v139, (uint64_t)&v136);
    sub_100008018(&v136, (uint64_t)v135);
    return;
  }
  v119 = v29 + 14;
  v120 = v26;
  v114 = v20;
  v115 = v28;
  v116 = v23;
  v117 = v29 + 4;
  v118 = v29;
  v121 = v17;
  sub_100008030((uint64_t)&v139, &qword_1006352C0);
  v30 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "stringForKey:", v31);

  v34 = v132;
  v33 = v133;
  v35 = v131;
  v36 = v134;
  if (v32)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v39 = v38;

    v40 = (uint64_t)v127;
    URL.init(string:)(v37, v39);
    v41 = v121;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v40, 1, v121) != 1)
    {
      swift_bridgeObjectRelease(v39);
      v53 = v115;
      v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 32))(v115, v40, v41);
      v55 = v126;
      defaultLogger()(v54);
      v56 = v120;
      v132 = *(os_unfair_lock_s **)(v33 + 16);
      v57 = ((uint64_t (*)(char *, char *, uint64_t))v132)(v120, v53, v41);
      v58 = v41;
      v59 = Logger.logObject.getter(v57);
      v60 = static os_log_type_t.debug.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(12, -1);
        v131 = (os_unfair_lock_s *)swift_slowAlloc(32, -1);
        *(_QWORD *)&v136 = v131;
        *(_DWORD *)v61 = 136315138;
        v134 = (void (**)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *))(v61 + 4);
        v62 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v63 = dispatch thunk of CustomStringConvertible.description.getter(v41, v62);
        v65 = v64;
        *(_QWORD *)&v139 = sub_1000E3AC8(v63, v64, (uint64_t *)&v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, (char *)&v139 + 8, v134);
        swift_bridgeObjectRelease(v65);
        v134 = *(void (***)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *))(v33 + 8);
        ((void (*)(char *, uint64_t))v134)(v120, v58);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "MobileDocumentReaderIssuerRootStorage found override VICAL URL %s", v61, 0xCu);
        v66 = v131;
        swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v61, -1, -1);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v126, v129);
      }
      else
      {
        v134 = *(void (***)(os_unfair_lock_s *, _QWORD, os_unfair_lock_s *))(v33 + 8);
        ((void (*)(char *, uint64_t))v134)(v56, v41);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v55, v129);
      }
      v86 = v58;
      v87 = v125;
      v88 = (uint64_t)v130;
      v34 = v118;
      v89 = (uint64_t)v116;
      ((void (*)(char *, char *, uint64_t))v132)(v116, v53, v86);
      v90 = type metadata accessor for COSESignatureValidator(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v88, 1, 1, v90);
      v137 = type metadata accessor for DIPOIDVerifier(0);
      v138 = &protocol witness table for DIPOIDVerifier;
      sub_100022234(&v136);
      DIPOIDVerifier.init()();
      sub_10046A290(v88, (uint64_t)&v136, v87);
      v91 = (objc_class *)type metadata accessor for VICALWebService(0);
      v92 = (char *)objc_allocWithZone(v91);
      v93 = v53;
      v94 = v89;
      v95 = v124;
      sub_100035DE8(v87, v124, type metadata accessor for VICALTrustValidator);
      v96 = sub_1001118EC(v94, v95, v92);
      sub_100035DAC(v87, type metadata accessor for VICALTrustValidator);
      v35 = v119;
      os_unfair_lock_lock(v119);
      ObjectType = swift_getObjectType(v96);
      sub_100008030((uint64_t)v117, &qword_1006352C0);
      *(_QWORD *)&v34[10]._os_unfair_lock_opaque = ObjectType;
      *(_QWORD *)&v34[12]._os_unfair_lock_opaque = &off_100615590;
      *(_QWORD *)&v34[4]._os_unfair_lock_opaque = v96;
      v98 = v96;
      if (!v147)
      {
        v99 = v98;
        os_unfair_lock_unlock(v35);
        v100 = v135;
        v135[3] = v91;
        v100[4] = &off_100615590;
        *v100 = v99;
        ((void (*)(char *, uint64_t))v134)(v93, v121);
        return;
      }
      goto LABEL_25;
    }
    v42 = sub_100008030(v40, &qword_100630A48);
    v43 = v123;
    defaultLogger()(v42);
    swift_bridgeObjectRetain(v39);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v136 = v48;
      *(_DWORD *)v47 = 136315138;
      v127 = (char *)(v47 + 4);
      swift_bridgeObjectRetain(v39);
      *(_QWORD *)&v139 = sub_1000E3AC8(v37, v39, (uint64_t *)&v136);
      v49 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, (char *)&v139 + 8, v127);
      swift_bridgeObjectRelease_n(v39, 3);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "DIPTopekaStaticWebService found override VICAL URL string %s, but could not cast it into URL. Falling back to default URL.", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      v50 = v48;
      v35 = v131;
      v34 = v132;
      swift_slowDealloc(v50, -1, -1);
      v51 = v47;
      v33 = v133;
      swift_slowDealloc(v51, -1, -1);

      v52 = v43;
      v36 = v49;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v52, v129);
    }
    else
    {

      swift_bridgeObjectRelease_n(v39, 2);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v43, v129);
      v36 = v134;
    }
  }
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v67 = qword_1006702A0;
  v68 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v69 = (uint64_t)&v68[4];
  v70 = v68 + 52;
  os_unfair_lock_lock(v68 + 52);
  v71 = v147;
  sub_100139D14(v69, v67, &v136);
  if (v71)
  {
    os_unfair_lock_unlock(v70);
    __break(1u);
LABEL_25:
    os_unfair_lock_unlock(v35);
    __break(1u);
    os_unfair_lock_unlock(v34);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v70);
  sub_10002581C((uint64_t)&v136, (uint64_t)&v139);
  sub_10001D410(&v136);
  sub_10000806C(&v139, v140);
  sub_10010866C((uint64_t)v141);
  sub_1000A1F54((uint64_t)v141, (uint64_t)v142, &qword_100632330);
  v72 = sub_100035A5C((uint64_t)v142);
  v73 = (uint64_t)v130;
  if (v72 == 1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v139);
LABEL_18:
    v36[13](v35, enum case for DIPError.Code.vicalWebServiceMissing(_:), v34);
    v83 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v84 = type metadata accessor for DIPError(0);
    v85 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v84, v85, 0, 0);
    v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x800000010054B060, 0, v35, 0, v83, 0xD000000000000093, 0x800000010054AEF0, 0x6976726553626577, 0xEA00000000006563, 160);
    goto LABEL_19;
  }
  memcpy(v143, v142, sizeof(v143));
  memcpy(v144, &v143[32], 0x169uLL);
  sub_100035A74(v144);
  sub_100035B1C((uint64_t)v141);
  sub_1000A1F54((uint64_t)&v144[34], (uint64_t)v145, (uint64_t *)&unk_100632610);
  sub_1000DB7AC((uint64_t)v145);
  sub_100035CC0(v144);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v139);
  sub_1000A1F54((uint64_t)v145, (uint64_t)&v146, (uint64_t *)&unk_100632610);
  if (!*((_QWORD *)&v146 + 1))
    goto LABEL_18;
  v136 = v146;
  v74._countAndFlagsBits = 47;
  v74._object = (void *)0xE100000000000000;
  String.append(_:)(v74);
  v75._countAndFlagsBits = 0xD00000000000001CLL;
  v75._object = (void *)0x800000010054B0A0;
  String.append(_:)(v75);
  v76 = *((_QWORD *)&v136 + 1);
  v77 = (uint64_t)v122;
  URL.init(string:)(v136, *((_QWORD *)&v136 + 1));
  swift_bridgeObjectRelease(v76);
  v78 = v121;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v77, 1, v121) == 1)
  {
    sub_100008030(v77, &qword_100630A48);
    v36[13](v35, enum case for DIPError.Code.vicalWebServiceMissing(_:), v34);
    v79 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v80 = type metadata accessor for DIPError(0);
    v81 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v80, v81, 0, 0);
    v82 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054B0C0, 0, v35, 0, v79, 0xD000000000000093, 0x800000010054AEF0, 0x6976726553626577, 0xEA00000000006563, 164);
LABEL_19:
    swift_willThrow(v82);
    return;
  }
  v101 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v114, v77, v78);
  v102 = (uint64_t)v116;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v116, v101, v78);
  v103 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v73, 1, 1, v103);
  v137 = type metadata accessor for DIPOIDVerifier(0);
  v138 = &protocol witness table for DIPOIDVerifier;
  sub_100022234(&v136);
  DIPOIDVerifier.init()();
  v104 = v125;
  sub_10046A290(v73, (uint64_t)&v136, v125);
  v105 = (objc_class *)type metadata accessor for VICALWebService(0);
  v106 = (char *)objc_allocWithZone(v105);
  v107 = v124;
  sub_100035DE8(v104, v124, type metadata accessor for VICALTrustValidator);
  v108 = sub_1001118EC(v102, v107, v106);
  sub_100035DAC(v104, type metadata accessor for VICALTrustValidator);
  v109 = v119;
  os_unfair_lock_lock(v119);
  v110 = swift_getObjectType(v108);
  sub_100008030((uint64_t)v117, &qword_1006352C0);
  v111 = v118;
  *(_QWORD *)&v118[10]._os_unfair_lock_opaque = v110;
  *(_QWORD *)&v111[12]._os_unfair_lock_opaque = &off_100615590;
  *(_QWORD *)&v111[4]._os_unfair_lock_opaque = v108;
  v112 = v108;
  os_unfair_lock_unlock(v109);
  v113 = v135;
  v135[3] = v105;
  v113[4] = &off_100615590;
  *v113 = v112;
  (*(void (**)(char *, uint64_t))(v133 + 8))(v101, v121);
}

uint64_t sub_10010D6A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)swift_task_alloc(dword_10063531C);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_10010D70C;
  return sub_10010D89C();
}

uint64_t sub_10010D70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10010D7C8;
  }
  else
  {
    *(_QWORD *)(v4 + 56) = a1;
    v6 = sub_10010D780;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010D780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v2 != 0);
}

uint64_t sub_10010D7C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderIssuerRootStorage areTrustedSystemRootsPresent encountered error while fetching system roots, returning false.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 16);
  swift_errorRelease(*(_QWORD *)(v1 + 48));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc(*(_QWORD *)(v1 + 32));
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_10010D89C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = type metadata accessor for DIPError.Code(0);
  v0[4] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[5] = v2;
  v0[6] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BigUIntCBOR(0);
  v0[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[8] = v4;
  v0[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v0[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[12] = swift_task_alloc(v7);
  v0[13] = swift_task_alloc(v7);
  v0[14] = swift_task_alloc(v7);
  v0[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for VICALCertificateInfo(0);
  v0[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v0[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[18] = swift_task_alloc(v10);
  v0[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for VICALDocument(0);
  v0[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v0[21] = v12;
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[22] = v13;
  v0[2] = _swiftEmptyArrayStorage;
  v14 = (_QWORD *)swift_task_alloc(dword_1006352FC);
  v0[23] = v14;
  *v14 = v0;
  v14[1] = sub_10010D9F8;
  return sub_10010E4E4(v13);
}

uint64_t sub_10010D9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10010E340;
  else
    v3 = sub_10010DA5C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010DA5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  unint64_t v33;
  __SecCertificate *v34;
  uint64_t v35;
  CFDataRef v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  _QWORD *v67;
  uint64_t v68;
  __SecCertificate *v69;
  CFDataRef v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __SecCertificate *v78;
  CFDataRef v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *log;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;

  v1 = VICALDocument.certificateInfos.getter();
  v2 = *(_QWORD *)(v1 + 16);
  v107 = v0;
  if (v2)
  {
    v3 = v0[17];
    v105 = v0[11];
    v102 = v0[8];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v108 = v3;
    v109 = *(_QWORD *)(v3 + 72);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v6 = v0[24];
    v101 = v1;
    swift_bridgeObjectRetain(v1);
    v7 = _swiftEmptyArrayStorage;
    v106 = v5;
    do
    {
      v117 = v2;
      v9 = v5(v0[19], v4, v0[16]);
      v10 = VICALCertificateInfo.certificate.getter(v9);
      v12 = v11;
      v13 = decodeCertificate(fromDER:)();
      v14 = v0[19];
      if (v6)
      {
        v15 = v5;
        v115 = v7;
        v16 = v0[18];
        v17 = v0[16];
        v18 = sub_100007F8C(v10, v12);
        defaultLogger()(v18);
        v19 = v15(v16, v14, v17);
        v20 = Logger.logObject.getter(v19);
        v21 = static os_log_type_t.debug.getter(v20);
        v22 = os_log_type_enabled(v20, v21);
        v23 = v0[18];
        v24 = v0[15];
        v111 = v0[16];
        v113 = v0[10];
        if (v22)
        {
          v25 = v0[9];
          v104 = v0[7];
          log = v20;
          v26 = swift_slowAlloc(12, -1);
          v27 = (_QWORD *)swift_slowAlloc(32, -1);
          v119 = v27;
          *(_DWORD *)v26 = 136315138;
          v28 = VICALCertificateInfo.serialNumber.getter();
          v29 = BigUIntCBOR.value.getter(v28);
          v31 = v30;
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v25, v104);
          v32 = Data.base64EncodedString(options:)(0);
          v33 = v31;
          v0 = v107;
          sub_100007F8C(v29, v33);
          v5 = v106;
          *(_QWORD *)(v26 + 4) = sub_1000E3AC8(v32._countAndFlagsBits, (unint64_t)v32._object, (uint64_t *)&v119);
          swift_bridgeObjectRelease(v32._object);
          v8 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
          v8(v23, v111);
          _os_log_impl((void *)&_mh_execute_header, log, v21, "MobileDocumentReaderIssuerRootStorage could not parse certificate with serial number %s", (uint8_t *)v26, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          swift_slowDealloc(v26, -1, -1);
          swift_errorRelease(v6);

        }
        else
        {
          v5 = v15;
          swift_errorRelease(v6);
          v8 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
          v8(v23, v111);

        }
        (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v24, v113);
        v8(v0[19], v0[16]);
        v7 = v115;
      }
      else
      {
        v34 = (__SecCertificate *)v13;
        v35 = v0[16];
        sub_100007F8C(v10, v12);
        v36 = SecCertificateCopyData(v34);
        v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v14, v35);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1000E26CC(0, v7[2] + 1, 1, v7);
        v5 = v106;
        v41 = v7[2];
        v40 = v7[3];
        if (v41 >= v40 >> 1)
          v7 = sub_1000E26CC((_QWORD *)(v40 > 1), v41 + 1, 1, v7);
        v7[2] = v41 + 1;
        v42 = &v7[2 * v41];
        v42[4] = v37;
        v42[5] = v39;
        v0 = v107;
      }
      v6 = 0;
      v4 += v109;
      v2 = v117 - 1;
    }
    while (v117 != 1);
    swift_bridgeObjectRelease_n(v101, 2);
    v43 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v43 = v0[24];
    v7 = _swiftEmptyArrayStorage;
  }
  sub_1001223A8((uint64_t)v7);
  v44 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v44, "stringArrayForKey:", v45);

  if (!v46)
    goto LABEL_44;
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, &type metadata for String);

  defaultLogger()(v49);
  swift_bridgeObjectRetain(v48);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.debug.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v53 = 134217984;
    v107[3] = *(_QWORD *)(v48 + 16);
    v0 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v107 + 3, v107 + 4, v53 + 4);
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "MobileDocumentReaderIssuerRootStorage found additional %ld IACA roots in internal settings. Appending to list of trusted roots.", v53, 0xCu);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v48);
  }

  v54 = *(uint64_t (**)(uint64_t, uint64_t))(v0[11] + 8);
  v54(v0[14], v0[10]);
  v55 = decodeCertificateChain(fromBase64DER:)(v48);
  if (v43)
  {
    v56 = swift_bridgeObjectRelease(v48);
    v57 = defaultLogger()(v56);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.debug.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "MobileDocumentReaderIssuerRootStorage encountered error while decoding internal settings additional trusted roots. Ignoring and continuing.", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }
    v61 = v107[12];
    v62 = v107[10];
    swift_errorRelease(v43);

    v63 = v61;
    v0 = v107;
    v47 = v54(v63, v62);
    goto LABEL_44;
  }
  v64 = v55;
  swift_bridgeObjectRelease(v48);
  if ((unint64_t)v64 >> 62)
  {
    if (v64 < 0)
      v86 = v64;
    else
      v86 = v64 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v64);
    v65 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v64);
    if (v65)
      goto LABEL_26;
  }
  else
  {
    v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v65)
    {
LABEL_26:
      v119 = _swiftEmptyArrayStorage;
      result = sub_1000E422C(0, v65 & ~(v65 >> 63), 0);
      if (v65 < 0)
      {
        __break(1u);
        return result;
      }
      v67 = v119;
      if ((v64 & 0xC000000000000001) != 0)
      {
        v68 = 0;
        do
        {
          v69 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)(v68, v64);
          v70 = SecCertificateCopyData(v69);
          v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
          v73 = v72;

          swift_unknownObjectRelease(v69);
          v119 = v67;
          v75 = v67[2];
          v74 = v67[3];
          if (v75 >= v74 >> 1)
          {
            sub_1000E422C(v74 > 1, v75 + 1, 1);
            v67 = v119;
          }
          ++v68;
          v67[2] = v75 + 1;
          v76 = &v67[2 * v75];
          v76[4] = v71;
          v76[5] = v73;
        }
        while (v65 != v68);
      }
      else
      {
        v77 = 0;
        do
        {
          v78 = (__SecCertificate *)*(id *)(v64 + 8 * v77 + 32);
          v79 = SecCertificateCopyData(v78);
          v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
          v82 = v81;

          v119 = v67;
          v84 = v67[2];
          v83 = v67[3];
          if (v84 >= v83 >> 1)
          {
            sub_1000E422C(v83 > 1, v84 + 1, 1);
            v67 = v119;
          }
          ++v77;
          v67[2] = v84 + 1;
          v85 = &v67[2 * v84];
          v85[4] = v80;
          v85[5] = v82;
        }
        while (v65 != v77);
      }
      swift_bridgeObjectRelease(v64);
      v0 = v107;
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease(v64);
  v67 = _swiftEmptyArrayStorage;
LABEL_43:
  v47 = sub_1001223A8((uint64_t)v67);
LABEL_44:
  v87 = defaultLogger()(v47);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.debug.getter(v88);
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "MobileDocumentReaderIssuerRootStorage returning trusted roots.", v90, 2u);
    v91 = v90;
    v0 = v107;
    swift_slowDealloc(v91, -1, -1);
  }
  v93 = v0[21];
  v92 = v0[22];
  v95 = v0[19];
  v94 = v0[20];
  v96 = v0[18];
  v97 = v0[13];
  v110 = v0[15];
  v112 = v0[14];
  v98 = v0[11];
  v99 = v0[10];
  v114 = v0[12];
  v116 = v0[9];
  v118 = v0[6];

  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
  v100 = v0[2];
  swift_task_dealloc(v92);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v97);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  return ((uint64_t (*)(uint64_t))v0[1])(v100);
}

uint64_t sub_10010E340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v7, enum case for DIPError.Code.vicalMissing(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054B140, v1, v7, 1, v8, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000014, 0x800000010054B170, 272);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010E4E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for COSE_Sign1(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[18] = v8;
  v2[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CharacterSet(0);
  v2[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[21] = v10;
  v2[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.Encoding(0);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v12);
  v2[25] = swift_task_alloc(v12);
  v13 = type metadata accessor for URL(0);
  v2[26] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[27] = v14;
  v2[28] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010E638, 0, 0);
}

uint64_t sub_10010E638()
{
  _QWORD *v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  void *v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._countAndFlagsBits = 0xD000000000000030;
  v2._object = (void *)0x800000010054AEB0;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (!v3)
  {
    sub_10010C988((uint64_t)(v0 + 2));
    sub_10000806C(v0 + 2, v0[5]);
    v10 = (_QWORD *)swift_task_alloc(dword_10063EB54);
    v0[29] = v10;
    *v10 = v0;
    v10[1] = sub_10010EFB8;
    return sub_1003A1800(v0[9]);
  }
  sub_1000B3BB4();
  v4 = static NSBundle.internalSettings.getter();
  if (!v4)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[27] + 56))(v0[25], 1, 1, v0[26]);
LABEL_9:
    v17 = v0[12];
    v16 = v0[13];
    v18 = v0[11];
    sub_100008030(v0[25], &qword_100630A48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.vicalMissing(_:), v18);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v20, v21, 0, 0);
    v23 = v16;
    v24 = v22;
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x800000010054AFB0, 0, v23, 0, v19, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000015, 0x800000010054AF90, 320);
    swift_willThrow(v25);
    goto LABEL_12;
  }
  v5 = (void *)v4;
  v6 = String._bridgeToObjectiveC()();
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v5, "URLForResource:withExtension:", v6, v7);

  if (v8)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  v12 = v0[26];
  v13 = v0[27];
  v15 = v0[24];
  v14 = v0[25];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, v9, 1, v12);
  sub_1000A1F54(v15, v14, &qword_100630A48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
    goto LABEL_9;
  v26 = v0[28];
  v27 = v0[23];
  v28 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[27] + 32))(v26, v0[25], v0[26]);
  static String.Encoding.utf8.getter(v28);
  v29 = String.init(contentsOf:encoding:)(v26, v27);
  v31 = v0[21];
  v30 = v0[22];
  v32 = v0[20];
  v0[7] = v29;
  v0[8] = v33;
  static CharacterSet.whitespacesAndNewlines.getter(v34);
  v35 = sub_1000994DC();
  v36 = StringProtocol.trimmingCharacters(in:)(v30, &type metadata for String, v35);
  v38 = v37;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  swift_bridgeObjectRelease(v0[8]);
  v39 = Data.init(base16Encoded:)(v36, v38);
  if (v40 >> 60 == 15)
  {
    v42 = v0[27];
    v41 = v0[28];
    v43 = v0[26];
    v44 = v0[13];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v44, enum case for DIPError.Code.vicalMissing(_:), v0[11]);
    v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v48 = swift_allocError(v46, v47, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x800000010054AFB0, 0, v44, 0, v45, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000015, 0x800000010054AF90, 326);
    swift_willThrow(v49);
    v50 = v41;
    v24 = v48;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v43);
  }
  else
  {
    v60 = v39;
    v61 = v40;
    v62 = defaultLogger()(v39);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.debug.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "MobileDocumentReaderIssuerRootStorage storedSignedVICALDocument disable VICAL fetch call flag is enabled, returning hardcoded VICAL data.", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }
    v67 = v0[18];
    v66 = v0[19];
    v68 = v0[17];
    v69 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    v70 = type metadata accessor for CBORDecoder(0);
    swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
    v71 = CBORDecoder.init()();
    v72 = sub_100004790(&qword_100635300, (uint64_t (*)(uint64_t))&type metadata accessor for COSE_Sign1, (uint64_t)&protocol conformance descriptor for COSE_Sign1);
    v73 = dispatch thunk of CBORDecoder.decode<A>(_:from:)(v69, v60, v61, v69, v72);
    v74 = COSE_Sign1.payload.getter(v73);
    if (v75 >> 60 != 15)
    {
      v82 = v74;
      v83 = v75;
      v84 = type metadata accessor for VICALDocument(0);
      v85 = sub_100004790(&qword_100635308, (uint64_t (*)(uint64_t))&type metadata accessor for VICALDocument, (uint64_t)&protocol conformance descriptor for VICALDocument);
      dispatch thunk of CBORDecoder.decode<A>(_:from:)(v84, v82, v83, v84, v85);
      v86 = v0[27];
      v106 = v0[28];
      v103 = v0[26];
      v87 = v0[15];
      v88 = v0[16];
      v89 = v0[14];
      sub_100007F78(v82, v83);
      swift_release(v71);
      sub_100007F78(v60, v61);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v89);
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v106, v103);
      v90 = v0[24];
      v91 = v0[25];
      v93 = v0[22];
      v92 = v0[23];
      v94 = v0[19];
      v95 = v0[16];
      v96 = v0[13];
      swift_task_dealloc(v0[28]);
      swift_task_dealloc(v91);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      v59 = (uint64_t (*)(void))v0[1];
      return v59();
    }
    v105 = v0[26];
    v108 = v0[28];
    v76 = v0[15];
    v100 = v0[16];
    v102 = v0[27];
    v77 = v0[13];
    v98 = v0[14];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v77, enum case for DIPError.Code.vicalMissing(_:), v0[11]);
    v78 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v79 = type metadata accessor for DIPError(0);
    v80 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v24 = swift_allocError(v79, v80, 0, 0);
    v81 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054AFE0, 0, v77, 0, v78, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000015, 0x800000010054AF90, 334);
    swift_willThrow(v81);
    swift_release(v71);
    sub_100007F78(v60, v61);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v100, v98);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v108, v105);
  }
LABEL_12:
  v51 = v0[28];
  v52 = v0[25];
  v97 = v0[24];
  v99 = v0[23];
  v101 = v0[22];
  v104 = v0[19];
  v107 = v0[16];
  v53 = v0[13];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v53, enum case for DIPError.Code.vicalMissing(_:), v0[11]);
  swift_errorRetain(v24);
  v54 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v55 = v24;
  v56 = type metadata accessor for DIPError(0);
  v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v56, v57, 0, 0);
  v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v55, v53, 0, v54, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000015, 0x800000010054AF90, 342);
  swift_willThrow(v58);
  swift_errorRelease(v55);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v104);
  swift_task_dealloc(v107);
  swift_task_dealloc(v53);
  v59 = (uint64_t (*)(void))v0[1];
  return v59();
}

uint64_t sub_10010EFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10010F0BC;
  else
    v3 = sub_10010F01C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010F01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010F0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.vicalMissing(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000015, 0x800000010054AF90, 342);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010F248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v3 = sub_100004828(&qword_1006352B8);
  v4 = (os_unfair_lock_s *)swift_allocObject(v3, 60, 7);
  v4[14]._os_unfair_lock_opaque = 0;
  sub_100038B24((uint64_t)v6, (uint64_t)&v4[4], &qword_1006352C0);
  sub_100008030((uint64_t)v6, &qword_1006352C0);
  *(_QWORD *)(v1 + 16) = v4;
  os_unfair_lock_lock(v4 + 14);
  sub_10010F30C((uint64_t)&v4[4], a1);
  os_unfair_lock_unlock(v4 + 14);
  sub_100008030(a1, &qword_1006352C8);
  return v1;
}

uint64_t sub_10010F30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_100008030(a1, &qword_1006352C0);
  sub_100038B24(a2, (uint64_t)v9, &qword_1006352C8);
  v4 = v10;
  if (v10)
  {
    v5 = v11;
    v6 = sub_10000806C(v9, v10);
    *((_QWORD *)&v13 + 1) = v4;
    v14 = v5;
    v7 = sub_100022234(&v12);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v9);
  }
  else
  {
    sub_100008030((uint64_t)v9, &qword_1006352C8);
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
  }
  return sub_1000A1F54((uint64_t)&v12, a1, &qword_1006352C0);
}

uint64_t sub_10010F3E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v10 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType(0);
  v2[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[16] = v11;
  v2[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MobileDocumentReaderRequest.Document(0);
  v2[18] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[19] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v14);
  v2[21] = swift_task_alloc(v14);
  v2[22] = swift_task_alloc(v14);
  return swift_task_switch(sub_10010F510, 0, 0);
}

uint64_t sub_10010F510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __SecCertificate *v38;
  __SecCertificate *v39;
  CFDataRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD, uint64_t);
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = ((uint64_t (*)(void))MobileDocumentReaderRequest.document.getter)();
  MobileDocumentReaderRequest.Document.requestType.getter(v7);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 184) = v8;
  v8(v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v5 + 88))(v4, v6) == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
  {
    v9 = *(uint64_t **)(v0 + 136);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 128) + 96))(v9, *(_QWORD *)(v0 + 120));
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRelease(v10);
    v12 = swift_bridgeObjectRelease(v11);
    v13 = defaultLogger()(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "MobileDocumentReaderIssuerRootStorage raw data request - no validation required. Returning an empty list of trusted issuer root certificates.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  v24 = MobileDocumentReaderRequest.document.getter(v23);
  v25 = MobileDocumentReaderRequest.Document.usesSystemTrustedIssuerCertificates.getter(v24);
  v26 = ((uint64_t (*)(uint64_t, uint64_t))v8)(v21, v22);
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v27 = (_QWORD *)swift_task_alloc(dword_10063531C);
    *(_QWORD *)(v0 + 192) = v27;
    *v27 = v0;
    v27[1] = sub_10010FB04;
    return sub_10010D89C();
  }
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  v30 = *(_QWORD *)(v0 + 160);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = MobileDocumentReaderRequest.document.getter(v26);
  v33 = MobileDocumentReaderRequest.Document.additionalIssuerCertificates.getter(v32);
  v29(v30, v31);
  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0)
      v47 = v33;
    else
      v47 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v33);
    v34 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v33);
    if (v34)
      goto LABEL_9;
LABEL_22:
    swift_bridgeObjectRelease(v33);
    goto LABEL_23;
  }
  v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v34)
    goto LABEL_22;
LABEL_9:
  v73 = v0;
  result = sub_1000E422C(0, v34 & ~(v34 >> 63), 0);
  if (v34 < 0)
  {
    __break(1u);
    return result;
  }
  v35 = 0;
  v36 = v33 & 0xC000000000000001;
  v37 = v33;
  do
  {
    if (v36)
      v38 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v33);
    else
      v38 = (__SecCertificate *)*(id *)(v33 + 8 * v35 + 32);
    v39 = v38;
    v40 = SecCertificateCopyData(v38);
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v45 = _swiftEmptyArrayStorage[2];
    v44 = _swiftEmptyArrayStorage[3];
    if (v45 >= v44 >> 1)
      sub_1000E422C(v44 > 1, v45 + 1, 1);
    ++v35;
    _swiftEmptyArrayStorage[2] = v45 + 1;
    v46 = &_swiftEmptyArrayStorage[2 * v45];
    v46[4] = v41;
    v46[5] = v43;
    v33 = v37;
  }
  while (v34 != v35);
  swift_bridgeObjectRelease(v37);
  v0 = v73;
LABEL_23:
  sub_1001223A8((uint64_t)_swiftEmptyArrayStorage);
  v20 = *(_QWORD **)(v0 + 16);
  if (v20[2])
  {
LABEL_24:
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 160);
    v50 = *(_QWORD *)(v0 + 136);
    v52 = *(_QWORD *)(v0 + 104);
    v51 = *(_QWORD *)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 80);
    v54 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v20);
  }
  v56 = *(_QWORD *)(v0 + 72);
  v55 = *(_QWORD *)(v0 + 80);
  v57 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v58 = *(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104);
  v58(v55, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v57);
  v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v60 = type metadata accessor for DIPError(0);
  v61 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v62 = swift_allocError(v60, v61, 0, 0);
  v63 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010054B0F0, 0, v55, 0, v59, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 235);
  swift_willThrow(v63);
  v67 = *(_QWORD *)(v0 + 176);
  v68 = *(_QWORD *)(v0 + 168);
  v69 = *(_QWORD *)(v0 + 160);
  v70 = *(_QWORD *)(v0 + 136);
  v71 = *(_QWORD *)(v0 + 112);
  v72 = *(_QWORD *)(v0 + 104);
  v64 = *(_QWORD *)(v0 + 80);
  v74 = *(_QWORD *)(v0 + 56);
  v58(v64, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v62);
  v65 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v60, v61, 0, 0);
  v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v62, v64, 0, v65, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 240);
  swift_willThrow(v66);
  swift_errorRelease(v62);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v64);
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010FB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10010FFC0;
  }
  else
  {
    *(_QWORD *)(v4 + 208) = a1;
    v6 = sub_10010FB78;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010FB78()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __SecCertificate *v10;
  __SecCertificate *v11;
  CFDataRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 208);
  v1 = (_QWORD *)(v0 + 16);
  v2 = (void (*)(uint64_t, uint64_t))v1[21];
  v3 = v1[18];
  v4 = v1[16];
  v5 = MobileDocumentReaderRequest.document.getter();
  v6 = MobileDocumentReaderRequest.Document.additionalIssuerCertificates.getter(v5);
  v2(v3, v4);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v19 = v6;
    else
      v19 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v6);
    if (!v7)
      goto LABEL_16;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      goto LABEL_16;
  }
  result = sub_1000E422C(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
    __break(1u);
    return result;
  }
  v9 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
    else
      v10 = (__SecCertificate *)*(id *)(v6 + 8 * v9 + 32);
    v11 = v10;
    v12 = SecCertificateCopyData(v10);
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v17 = _swiftEmptyArrayStorage[2];
    v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1)
      sub_1000E422C(v16 > 1, v17 + 1, 1);
    ++v9;
    _swiftEmptyArrayStorage[2] = v17 + 1;
    v18 = &_swiftEmptyArrayStorage[2 * v17];
    v18[4] = v13;
    v18[5] = v15;
  }
  while (v7 != v9);
LABEL_16:
  swift_bridgeObjectRelease(v6);
  sub_1001223A8((uint64_t)_swiftEmptyArrayStorage);
  v20 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v21 = *(_QWORD *)(v47 + 168);
    v22 = *(_QWORD *)(v47 + 160);
    v23 = *(_QWORD *)(v47 + 136);
    v25 = *(_QWORD *)(v47 + 104);
    v24 = *(_QWORD *)(v47 + 112);
    v26 = *(_QWORD *)(v47 + 80);
    v27 = *(_QWORD *)(v47 + 56);
    swift_task_dealloc(*(_QWORD *)(v47 + 176));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(uint64_t))(v47 + 8))(v20);
  }
  else
  {
    v29 = *(_QWORD *)(v47 + 72);
    v28 = *(_QWORD *)(v47 + 80);
    v30 = *(_QWORD *)(v47 + 64);
    swift_bridgeObjectRelease(v20);
    v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104);
    v31(v28, enum case for DIPError.Code.documentReaderInvalidRequest(_:), v30);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v35 = swift_allocError(v33, v34, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010054B0F0, 0, v28, 0, v32, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 235);
    swift_willThrow(v36);
    v40 = *(_QWORD *)(v47 + 176);
    v41 = *(_QWORD *)(v47 + 168);
    v42 = *(_QWORD *)(v47 + 160);
    v43 = *(_QWORD *)(v47 + 136);
    v44 = *(_QWORD *)(v47 + 112);
    v45 = *(_QWORD *)(v47 + 104);
    v37 = *(_QWORD *)(v47 + 80);
    v46 = *(_QWORD *)(v47 + 56);
    v31(v37, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v47 + 64));
    swift_errorRetain(v35);
    v38 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v33, v34, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v37, 0, v38, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 240);
    swift_willThrow(v39);
    swift_errorRelease(v35);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v37);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v47 + 8))();
  }
}

uint64_t sub_10010FFC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderIssuerRootStorage there was an issue fetching the trusted roots. Throwing session expired error to indicate the calling app must call prepare again.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v29 = v8;
  v10 = *(_QWORD *)(v1 + 72);
  v31 = *(_QWORD *)(v1 + 64);
  v33 = *(_QWORD *)(v1 + 200);
  v11 = *(_QWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 56);
  v13 = *(_QWORD *)(v1 + 40);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
  type metadata accessor for DaemonAnalytics(0);
  v14 = enum case for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.vicalMissing(_:);
  v15 = type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v12, v14, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v12, enum case for DaemonAnalytics.MobileDocumentReaderSessionStatus.invalid(_:), v13);
  static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
  v35(v8, enum case for DIPError.Code.documentReaderSessionExpired(_:), v31);
  swift_errorRetain(v33);
  v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v17 = type metadata accessor for DIPError(0);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v17, v18, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v33, v29, 1, v16, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 228);
  swift_willThrow(v20);
  swift_errorRelease(v33);
  v21 = *(_QWORD *)(v1 + 176);
  v26 = *(_QWORD *)(v1 + 168);
  v27 = *(_QWORD *)(v1 + 160);
  v28 = *(_QWORD *)(v1 + 136);
  v30 = *(_QWORD *)(v1 + 112);
  v22 = *(_QWORD *)(v1 + 80);
  v32 = *(_QWORD *)(v1 + 104);
  v34 = *(_QWORD *)(v1 + 56);
  v35(v22, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 64));
  swift_errorRetain(v19);
  v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v17, v18, 0, 0);
  v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v22, 0, v23, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000013, 0x800000010054B120, 240);
  swift_willThrow(v24);
  swift_errorRelease(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v22);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100110314()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[11] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[12] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[13] = v3;
  v1[14] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100632D70);
  v1[15] = v4;
  v1[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v5);
  v1[18] = swift_task_alloc(v5);
  v1[19] = swift_task_alloc(v5);
  v6 = type metadata accessor for DaemonAnalytics.VICALFetchResult(0);
  v1[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[21] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v8);
  v1[23] = swift_task_alloc(v8);
  v9 = type metadata accessor for Logger(0);
  v1[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[25] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[26] = swift_task_alloc(v11);
  v1[27] = swift_task_alloc(v11);
  v1[28] = swift_task_alloc(v11);
  return swift_task_switch(sub_100110458, 0, 0);
}

uint64_t sub_100110458()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x800000010054AEB0;
  v2._countAndFlagsBits = 0xD000000000000030;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderIssuerRootStorage loadRemoteTrustedRoots disable VICAL fetch call flag is enabled, skipping call to fetch from network.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_10010C988(v0 + 16);
    sub_10000806C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v22 = (_QWORD *)swift_task_alloc(dword_10063EB64);
    *(_QWORD *)(v0 + 232) = v22;
    *v22 = v0;
    v22[1] = sub_100110694;
    return sub_1003A290C();
  }
}

uint64_t sub_100110694(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(*v2 + 240) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100110820;
  }
  else
  {
    *(_BYTE *)(v4 + 264) = a1;
    v6 = sub_100110708;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100110708()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_BYTE *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v5 = (unsigned int *)&enum case for DaemonAnalytics.VICALFetchResult.success(_:);
  if ((v1 & 1) != 0)
    v5 = (unsigned int *)&enum case for DaemonAnalytics.VICALFetchResult.fromCache(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, *v5, v3);
  type metadata accessor for DaemonAnalytics(0);
  static DaemonAnalytics.sendVICALFetchedEvent(result:error:)(v2, 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100110820()
{
  _QWORD *v0;
  _QWORD *v1;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2);
  v0[31] = v0[30];
  v1 = (_QWORD *)swift_task_alloc(dword_10063533C);
  v0[32] = v1;
  *v1 = v0;
  v1[1] = sub_100110878;
  return sub_10010D6A0();
}

uint64_t sub_100110878(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_BYTE *)(*(_QWORD *)v1 + 265) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001108D4, 0, 0);
}

uint64_t sub_1001108D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;

  if ((*(_BYTE *)(v1 + 265) & 1) == 0)
  {
    v23 = defaultLogger()(a1);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MobileDocumentReaderIssuerRootStorage there are no trusted system roots present to fall back to. Throwing error", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v1 + 248);
    v28 = *(_QWORD *)(v1 + 216);
    v29 = *(_QWORD *)(v1 + 192);
    v30 = *(_QWORD *)(v1 + 200);
    v32 = *(_QWORD *)(v1 + 168);
    v31 = *(_QWORD *)(v1 + 176);
    v33 = *(_QWORD *)(v1 + 160);
    v34 = *(_QWORD *)(v1 + 144);
    v76 = *(_QWORD *)(v1 + 120);
    v78 = *(_QWORD *)(v1 + 128);
    v70 = *(_QWORD *)(v1 + 152);
    v72 = *(_QWORD *)(v1 + 104);
    v74 = *(_QWORD *)(v1 + 96);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    type metadata accessor for DaemonAnalytics(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DaemonAnalytics.VICALFetchResult.failure(_:), v33);
    swift_errorRetain(v27);
    static DaemonAnalytics.sendVICALFetchedEvent(result:error:)(v31, v27);
    swift_errorRelease(v27);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    v82 = v27;
    swift_getErrorValue(v27, v1 + 80, v1 + 56);
    Error.dipErrorCode.getter(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104);
    v35(v34, enum case for DIPError.Code.networkTimeOut(_:), v74);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v34, 0, 1, v74);
    v36 = v78 + *(int *)(v76 + 48);
    sub_100038B24(v70, v78, &qword_1006335E0);
    sub_100038B24(v34, v36, &qword_1006335E0);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    if (v37(v78, 1, v74) == 1)
    {
      v38 = *(_QWORD *)(v1 + 152);
      v39 = *(_QWORD *)(v1 + 96);
      sub_100008030(*(_QWORD *)(v1 + 144), &qword_1006335E0);
      sub_100008030(v38, &qword_1006335E0);
      if (v37(v36, 1, v39) == 1)
      {
        sub_100008030(*(_QWORD *)(v1 + 128), &qword_1006335E0);
        v81 = 0;
        v79 = 0xE000000000000000;
        v80 = 0;
        v40 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
        v77 = 296;
LABEL_17:
        v56 = *(_QWORD *)(v1 + 248);
        v35(*(_QWORD *)(v1 + 112), *v40, *(_QWORD *)(v1 + 96));
        swift_errorRetain(v56);
        v57 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v58 = type metadata accessor for DIPError(0);
        v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v58, v59, 0, 0);
        v60 = *(_QWORD *)(v1 + 248);
        v62 = *(_QWORD *)(v1 + 216);
        v61 = *(_QWORD *)(v1 + 224);
        v63 = *(_QWORD *)(v1 + 208);
        v64 = *(_QWORD *)(v1 + 176);
        v65 = *(_QWORD *)(v1 + 184);
        v69 = *(_QWORD *)(v1 + 152);
        v71 = *(_QWORD *)(v1 + 144);
        v73 = *(_QWORD *)(v1 + 136);
        v75 = *(_QWORD *)(v1 + 128);
        v66 = *(_QWORD *)(v1 + 112);
        v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v80, v79, v82, v66, v81, v57, 0xD000000000000093, 0x800000010054AEF0, 0xD000000000000018, 0x800000010054B230, v77);
        swift_willThrow(v67);
        swift_errorRelease(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v65);
        swift_task_dealloc(v64);
        swift_task_dealloc(v69);
        swift_task_dealloc(v71);
        swift_task_dealloc(v73);
        swift_task_dealloc(v75);
        swift_task_dealloc(v66);
        v22 = *(uint64_t (**)(void))(v1 + 8);
        return v22();
      }
    }
    else
    {
      v41 = *(_QWORD *)(v1 + 96);
      sub_100038B24(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), &qword_1006335E0);
      v42 = v37(v36, 1, v41);
      v44 = *(_QWORD *)(v1 + 144);
      v43 = *(_QWORD *)(v1 + 152);
      v45 = *(_QWORD *)(v1 + 136);
      if (v42 != 1)
      {
        v48 = *(_QWORD *)(v1 + 128);
        v50 = *(_QWORD *)(v1 + 104);
        v49 = *(_QWORD *)(v1 + 112);
        v51 = *(_QWORD *)(v1 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v36, v51);
        v52 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
        v53 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v49, v51, v52);
        v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
        v54(v49, v51);
        sub_100008030(v44, &qword_1006335E0);
        sub_100008030(v43, &qword_1006335E0);
        v54(v45, v51);
        sub_100008030(v48, &qword_1006335E0);
        if ((v53 & 1) != 0)
        {
          v81 = 0;
          v79 = 0xE000000000000000;
          v80 = 0;
          v40 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
          v55 = 296;
LABEL_16:
          v77 = v55;
          goto LABEL_17;
        }
LABEL_15:
        v79 = 0x800000010054B1F0;
        v80 = 0xD00000000000003ALL;
        v81 = 1;
        v40 = (unsigned int *)&enum case for DIPError.Code.vicalCouldNotFetch(_:);
        v55 = 298;
        goto LABEL_16;
      }
      v46 = *(_QWORD *)(v1 + 96);
      v47 = *(_QWORD *)(v1 + 104);
      sub_100008030(*(_QWORD *)(v1 + 144), &qword_1006335E0);
      sub_100008030(v43, &qword_1006335E0);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    }
    sub_100008030(*(_QWORD *)(v1 + 128), &qword_100632D70);
    goto LABEL_15;
  }
  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderIssuerRootStorage there are system roots to fallback to.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 248);
  v8 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 208);
  v9 = *(_QWORD *)(v1 + 192);
  v11 = *(_QWORD *)(v1 + 168);
  v10 = *(_QWORD *)(v1 + 176);
  v12 = *(_QWORD *)(v1 + 160);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  type metadata accessor for DaemonAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DaemonAnalytics.VICALFetchResult.fallback(_:), v12);
  swift_errorRetain(v6);
  static DaemonAnalytics.sendVICALFetchedEvent(result:error:)(v10, v6);
  swift_errorRelease(v6);
  swift_errorRelease(v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  v13 = *(_QWORD *)(v1 + 216);
  v14 = *(_QWORD *)(v1 + 208);
  v16 = *(_QWORD *)(v1 + 176);
  v15 = *(_QWORD *)(v1 + 184);
  v18 = *(_QWORD *)(v1 + 144);
  v17 = *(_QWORD *)(v1 + 152);
  v20 = *(_QWORD *)(v1 + 128);
  v19 = *(_QWORD *)(v1 + 136);
  v21 = *(_QWORD *)(v1 + 112);
  swift_task_dealloc(*(_QWORD *)(v1 + 224));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  v22 = *(uint64_t (**)(void))(v1 + 8);
  return v22();
}

uint64_t sub_100110F98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[7] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[12] = v5;
  v1[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100111020, 0, 0);
}

uint64_t sub_100111020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderIssuerRootStorage clearTrustedRoots", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 88);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_10010C988(v1 + 16);
  sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  sub_1003A45F8();
  v10 = *(_QWORD *)(v1 + 104);
  v11 = *(_QWORD *)(v1 + 80);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for MobileDocumentReaderIssuerRootStorage()
{
  return objc_opt_self(_TtC8coreidvd37MobileDocumentReaderIssuerRootStorage);
}

void sub_100111288()
{
  __asm { BR              X11 }
}

_QWORD *sub_1001112E8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_100111578@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_100111B50(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100111C10((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_100111C88((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_1001115EC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_100111650(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

void sub_1001116FC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_100111778()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_100004828(&qword_100633FE0);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_100022948(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_100007F8C(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x10011184CLL);
    }
  }
  return v4;
}

uint64_t sub_100111864@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1001118EC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  objc_class *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_super v34;
  _QWORD v35[5];

  v6 = type metadata accessor for DIPHTTPSession.Configuration(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[3] = type metadata accessor for VICALTrustValidator(0);
  v35[4] = &off_100618D28;
  v16 = sub_100022234(v35);
  sub_100112A08(a2, (uint64_t)v16);
  v17 = &a3[OBJC_IVAR____TtC8coreidvd15VICALWebService_url];
  v18 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v18 - 8);
  v33 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v17, a1, v18);
  v19 = sub_10002581C((uint64_t)v35, (uint64_t)&a3[OBJC_IVAR____TtC8coreidvd15VICALWebService_validator]);
  v20 = UUID.init()(v19);
  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (qword_10062F540 != -1)
    swift_once(&qword_10062F540, sub_1003A1744);
  v24 = sub_1000352C0(v6, (uint64_t)qword_10063EAF8);
  sub_100035DE8(v24, (uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  v25 = (uint64_t *)&a3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *v25 = v21;
  v25[1] = v23;
  sub_100035DE8((uint64_t)v11, (uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
  v26 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = a3;
  *(_QWORD *)&v27[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1004E0CF4((uint64_t)v9);

  v28 = (objc_class *)type metadata accessor for DIPWebService();
  v34.receiver = v27;
  v34.super_class = v28;
  v29 = objc_msgSendSuper2(&v34, "init");
  sub_100035DAC((uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v35);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v18);
  return v29;
}

uint64_t sub_100111B50(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_100111C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_100111C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100111D08(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100004828(&qword_100635320);
  v10 = sub_100099FFC(&qword_100635328, &qword_100635320, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_10000806C(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_100111578(v3, v4, &v7);
  v5 = v7;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v8);
  return v5;
}

_QWORD *sub_100111DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = sub_100004828(&qword_1006352E8);
  v19[3] = v8;
  v19[4] = sub_100099FFC(&qword_1006352F0, &qword_1006352E8, (uint64_t)&protocol conformance descriptor for <A> ArraySlice<A>);
  v9 = (_QWORD *)swift_allocObject(&unk_100608838, 48, 7);
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = sub_10000806C(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain(a1);
    sub_100111578(v15, v16, &v18);
    v17 = v18;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v19);
    return (_QWORD *)v17;
  }
  return result;
}

_BYTE *sub_100111EA8(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_100111B50(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_100111C10((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_100111C88((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_100111F0C(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_100111FA8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022948(a1, a2);
  sub_1001116FC(a1, a2);
  v9 = v8;
  result = sub_100007F8C(a1, a2);
  v11 = *(_QWORD *)(v9 + 16);
  if (!v11)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = v9 + 32;
  if (!*(_BYTE *)(v9 + 32))
  {
    v14 = 0;
    while (v11 - 1 != v14)
    {
      v13 = v14 + 1;
      if (*(unsigned __int8 *)(v9 + 33 + v14++))
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_12;
  }
  v13 = 0;
LABEL_7:
  v16 = (2 * v11) | 1;
  v17 = swift_retain(v9);
  defaultLogger()(v17);
  v18 = swift_retain_n(v9, 3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc(22, -1);
    v42 = v7;
    v39 = v21;
    v23 = v22;
    v38 = swift_slowAlloc(64, -1);
    v44 = v38;
    *(_DWORD *)v23 = 136315394;
    v41 = v4;
    v24 = swift_retain(v9);
    v25 = Array.description.getter(v24, &type metadata for UInt8);
    v40 = v5;
    v26 = v25;
    v28 = v27;
    swift_release(v9);
    v43 = sub_1000E3AC8(v26, v28, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 4);
    swift_release_n(v9, 2);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v23 + 12) = 2080;
    v29 = swift_retain(v9);
    v30 = ArraySlice.description.getter(v29, v9 + 32, v13, v16, &type metadata for UInt8);
    v31 = v16;
    v33 = v32;
    swift_release(v9);
    v43 = sub_1000E3AC8(v30, v33, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 14);
    swift_release_n(v9, 2);
    v34 = v33;
    v16 = v31;
    v12 = v9 + 32;
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v39, "IssuerRevocationList trimmed %s to %s", (uint8_t *)v23, 0x16u);
    v35 = v38;
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
  }
  else
  {

    swift_release_n(v9, 4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v36 = sub_100111DB8(v9, v12, v13, v16);
  swift_release(v9);
  return (uint64_t)v36;
}

uint64_t sub_1001122D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t (*v97)(char *, unint64_t, uint64_t, __n128);
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[2];

  v2 = type metadata accessor for Logger(0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  __chkstk_darwin(v2);
  v84 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for BigUIntCBOR(0);
  v4 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_1006352D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for VICALCertificateInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a1;
  v14 = VICALDocument.certificateInfos.getter(v11);
  v100 = *(_QWORD *)(v14 + 16);
  if (!v100)
  {
    v18 = &_swiftEmptyDictionarySingleton;
LABEL_29:
    v68 = swift_bridgeObjectRelease(v14);
    v69 = v84;
    defaultLogger()(v68);
    v70 = swift_bridgeObjectRetain_n(v18, 2);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v106[0] = v74;
      *(_DWORD *)v73 = 136315138;
      swift_bridgeObjectRetain(v18);
      v75 = sub_100004828(&qword_1006352D8);
      v76 = sub_1001129A0();
      v77 = Dictionary.description.getter(v18, &type metadata for IssuerRevocationList.SerialNumber, v75, v76);
      v79 = v78;
      swift_bridgeObjectRelease(v18);
      v105 = sub_1000E3AC8(v77, v79, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v73 + 4);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease(v79);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "IssuerRevocationList initialized with %s", v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v73, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v18, 2);
    }

    v80 = type metadata accessor for VICALDocument(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v85, v80);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v87);
    return (uint64_t)v18;
  }
  v99 = v14 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v15 = *(_QWORD *)(v10 + 72);
  v97 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
  v98 = v15;
  v83 = v14;
  v16 = swift_bridgeObjectRetain(v14);
  v17 = 0;
  v18 = &_swiftEmptyDictionarySingleton;
  v89 = v8;
  v90 = v4;
  v88 = v9;
  v91 = v13;
  v92 = v10;
  while (1)
  {
    v101 = v17;
    v19 = v97(v13, v99 + v98 * v17, v9, v16);
    VICALCertificateInfo.extensions.getter(v19);
    v20 = type metadata accessor for VICALCertificateInfo.Extensions(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20) != 1)
      break;
    sub_100008030((uint64_t)v8, &qword_1006352D0);
LABEL_4:
    v17 = v101 + 1;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if (v17 == v100)
    {
      v67 = v83;
      swift_bridgeObjectRelease(v83);
      v14 = v67;
      goto LABEL_29;
    }
  }
  v22 = VICALCertificateInfo.Extensions.certificateRevocationList.getter();
  v23 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  if (!v22)
    goto LABEL_4;
  v24 = v103;
  v25 = VICALCertificateInfo.serialNumber.getter(v23);
  v26 = BigUIntCBOR.value.getter(v25);
  v28 = v27;
  v102 = *(void (**)(char *, uint64_t))(v4 + 8);
  v102(v24, v104);
  v96 = sub_100111FA8(v26, v28);
  v30 = v29;
  sub_100007F8C(v26, v28);
  v31 = *(_QWORD *)(v22 + 16);
  if (v31)
  {
    v94 = v30;
    v95 = v18;
    v106[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000E42A0(0, v31, 0);
    v32 = *(unsigned __int8 *)(v4 + 80);
    v93 = v22;
    v33 = v22 + ((v32 + 32) & ~v32);
    v34 = v4;
    v35 = *(_QWORD *)(v4 + 72);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 16);
    do
    {
      v38 = v103;
      v37 = v104;
      v39 = v36(v103, v33, v104);
      v40 = BigUIntCBOR.value.getter(v39);
      v42 = v41;
      v43 = sub_100111FA8(v40, v41);
      v45 = v44;
      sub_100007F8C(v40, v42);
      v102(v38, v37);
      v46 = (_QWORD *)v106[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v106[0]) & 1) == 0)
      {
        sub_1000E42A0(0, v46[2] + 1, 1);
        v46 = (_QWORD *)v106[0];
      }
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_1000E42A0(v47 > 1, v48 + 1, 1);
        v46 = (_QWORD *)v106[0];
      }
      v46[2] = v48 + 1;
      v49 = &v46[2 * v48];
      v49[4] = v43;
      v49[5] = v45;
      v33 += v35;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease(v93);
    v30 = v94;
    v18 = v95;
    v8 = v89;
    v4 = v90;
    v9 = v88;
  }
  else
  {
    swift_bridgeObjectRelease(v22);
    v46 = _swiftEmptyArrayStorage;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  v106[0] = (uint64_t)v18;
  v51 = v30;
  v53 = sub_1004A88B8(v96, v30);
  v54 = v18[2];
  v55 = (v52 & 1) == 0;
  v56 = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    v57 = v52;
    if (v18[3] >= v56)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_10012A8F8();
      v58 = v96;
      v18 = (_QWORD *)v106[0];
      if ((v57 & 1) == 0)
        goto LABEL_20;
    }
    else
    {
      sub_100125A10(v56, isUniquelyReferenced_nonNull_native);
      v58 = v96;
      v59 = sub_1004A88B8(v96, v51);
      if ((v57 & 1) != (v60 & 1))
        goto LABEL_35;
      v53 = v59;
      v18 = (_QWORD *)v106[0];
      if ((v57 & 1) == 0)
      {
LABEL_20:
        v18[(v53 >> 6) + 8] |= 1 << v53;
        v61 = (uint64_t *)(v18[6] + 16 * v53);
        *v61 = v58;
        v61[1] = v51;
        *(_QWORD *)(v18[7] + 8 * v53) = v46;
        v62 = v18[2];
        v63 = __OFADD__(v62, 1);
        v64 = v62 + 1;
        if (v63)
          goto LABEL_34;
        v18[2] = v64;
        sub_100022948(v58, v51);
        goto LABEL_26;
      }
    }
    v65 = v18[7];
    v66 = 8 * v53;
    swift_bridgeObjectRelease(*(_QWORD *)(v65 + v66));
    *(_QWORD *)(v65 + v66) = v46;
LABEL_26:
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100007F8C(v58, v51);
    v13 = v91;
    v10 = v92;
    goto LABEL_4;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for IssuerRevocationList.SerialNumber);
  __break(1u);
  return result;
}

unint64_t sub_1001129A0()
{
  unint64_t result;

  result = qword_1006352E0;
  if (!qword_1006352E0)
  {
    result = swift_getWitnessTable(&unk_100524BE4, &type metadata for IssuerRevocationList.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1006352E0);
  }
  return result;
}

uint64_t sub_1001129E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100112A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VICALTrustValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100112A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1001115EC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100112AA8, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_100112AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_100111864(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

ValueMetadata *type metadata accessor for IssuerRevocationList()
{
  return &type metadata for IssuerRevocationList;
}

uint64_t *initializeBufferWithCopyOfBuffer for IssuerRevocationList.SerialNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100022948(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for IssuerRevocationList.SerialNumber(uint64_t a1)
{
  return sub_100007F8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for IssuerRevocationList.SerialNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100022948(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100007F8C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for IssuerRevocationList.SerialNumber(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100007F8C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IssuerRevocationList.SerialNumber(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IssuerRevocationList.SerialNumber(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerRevocationList.SerialNumber()
{
  return &type metadata for IssuerRevocationList.SerialNumber;
}

unint64_t sub_100112C4C()
{
  unint64_t result;

  result = qword_100635358;
  if (!qword_100635358)
  {
    result = swift_getWitnessTable(&unk_100524B94, &type metadata for IssuerRevocationList.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_100635358);
  }
  return result;
}

char *sub_100112C94()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener;
  type metadata accessor for MobileDocumentReaderSession(0);
  v8 = v0;
  static MobileDocumentReaderSession.machServiceName.getter();
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSXPCListener);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = objc_msgSend(v11, "initWithMachServiceName:", v12);

  *(_QWORD *)&v1[v7] = v13;
  v26.receiver = v8;
  v26.super_class = ObjectType;
  v14 = (char *)objc_msgSendSuper2(&v26, "init");
  v15 = defaultLogger()(v14);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.info.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v25 = v20;
    *(_DWORD *)v19 = 136315138;
    v24 = sub_1000E3AC8(0x292874696E69, 0xE600000000000000, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "MobileDocumentReaderListener %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v21 = *(void **)&v14[OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener];
  objc_msgSend(v21, "setDelegate:", v14);
  v22 = v21;
  objc_msgSend(v22, "activate");

  return v14;
}

id sub_100112F18()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v17;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = defaultLogger()(v5);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.info.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v18 = ObjectType;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    v19 = sub_1000E3AC8(0x74696E696564, 0xE600000000000000, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "MobileDocumentReaderListener %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v15 = v13;
    ObjectType = v18;
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8coreidvd28MobileDocumentReaderListener_listener], "invalidate");
  v21.receiver = v1;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "dealloc");
}

uint64_t sub_100113110(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v4);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v18 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v22 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_getErrorValue(a1, v21, v20);
    v13 = Error.localizedDescription.getter(v20[1], v20[2]);
    v15 = v14;
    v19 = sub_1000E3AC8(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 4);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "MobileDocumentReaderListener Remote proxy delegate did fail with error: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v18);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1001132F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v12 = v9;
    *(_DWORD *)v8 = 136315138;
    v11 = sub_1000E3AC8(0xD000000000000026, 0x800000010054B2E0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MobileDocumentReaderListener %s Connection interrupted", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100113480(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = defaultLogger()(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v22 = a1;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315138;
    v23 = sub_1000E3AC8(0xD000000000000026, 0x800000010054B2E0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "MobileDocumentReaderListener %s Connection invalidated", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v16 = v14;
    a1 = v22;
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_1006089D0, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a1;
  swift_retain(a1);
  v19 = sub_1001075D4((uint64_t)v4, (uint64_t)&unk_1006353B0, (uint64_t)v18);
  return swift_release(v19);
}

uint64_t sub_1001136B0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10063FAC4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D0A0;
  return sub_1003E5384();
}

uint64_t type metadata accessor for MobileDocumentReaderListener()
{
  return objc_opt_self(_TtC8coreidvd28MobileDocumentReaderListener);
}

BOOL sub_100113774(objc_class *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  void (*v26)(char *, uint64_t);
  _QWORD *v27;
  Swift::Bool v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  objc_class *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];
  NSXPCConnection_optional v55;

  v2 = type metadata accessor for MobileDocumentReaderEntitlementChecker(0);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v47 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v47 - v14;
  v16 = defaultLogger()(v13);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.info.getter(v17, v18);
  if (os_log_type_enabled(v17, v19))
  {
    v50 = v12;
    v20 = swift_slowAlloc(12, -1);
    v49 = v5;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v48 = a1;
    v23 = v22;
    v54[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v53 = sub_1000E3AC8(0xD000000000000017, 0x800000010054B350, v54);
    v12 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v21 + 4);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "MobileDocumentReaderListener %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v24 = v23;
    a1 = v48;
    swift_slowDealloc(v24, -1, -1);
    v25 = v21;
    v5 = v49;
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v15, v5);
  v54[3] = type metadata accessor for BundleRecordFetcher(0);
  v54[4] = (uint64_t)&protocol witness table for BundleRecordFetcher;
  v27 = sub_100022234(v54);
  BundleRecordFetcher.init()(v27);
  MobileDocumentReaderEntitlementChecker.init(bundleRecordFetcher:)(v54);
  v55.value.super.isa = a1;
  v28 = MobileDocumentReaderEntitlementChecker.checkInternalEntitlement(connection:)(v55);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v4, v52);
  if (!v28)
  {
    v39 = defaultLogger()(v29);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.info.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = v5;
      v45 = swift_slowAlloc(32, -1);
      v54[0] = v45;
      *(_DWORD *)v43 = 136315138;
      v53 = sub_1000E3AC8(0xD000000000000017, 0x800000010054B350, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v43 + 4);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "MobileDocumentReaderListener %s No valid entitlements present", v43, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      v37 = v9;
      v38 = v44;
      goto LABEL_11;
    }

    v37 = v9;
LABEL_10:
    v38 = v5;
    goto LABEL_11;
  }
  v30 = defaultLogger()(v29);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.info.getter(v31, v32);
  if (!os_log_type_enabled(v31, v33))
  {

    v37 = v12;
    goto LABEL_10;
  }
  v50 = v12;
  v34 = (uint8_t *)swift_slowAlloc(12, -1);
  v35 = v5;
  v36 = swift_slowAlloc(32, -1);
  v54[0] = v36;
  *(_DWORD *)v34 = 136315138;
  v53 = sub_1000E3AC8(0xD000000000000017, 0x800000010054B350, v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v34 + 4);
  _os_log_impl((void *)&_mh_execute_header, v31, v33, "MobileDocumentReaderListener %s Internal entitlement present", v34, 0xCu);
  swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v36, -1, -1);
  swift_slowDealloc(v34, -1, -1);

  v37 = v50;
  v38 = v35;
LABEL_11:
  v26(v37, v38);
  return v28;
}

uint64_t sub_100113C34(objc_class *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void **v20;
  void **v21;
  void **v22;
  void (*v23)(char *, uint64_t);
  _BOOL8 v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  Swift::String v34;
  Swift::Bool v35;
  _QWORD *v36;
  uint64_t v37;
  objc_class *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  char *v50;
  uint8_t *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  void **v59;
  char *v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  objc_class *v73;
  uint64_t v74;
  void (**v75)(char *, uint64_t);
  objc_super v76;
  uint64_t v77;
  _QWORD v78[4];
  void **aBlock;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;

  v2 = type metadata accessor for Logger(0);
  v3 = *(char **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v75 = (void (**)(char *, uint64_t))((char *)&v73 - v8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v73 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v73 - v13;
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.info.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void **)swift_slowAlloc(32, -1);
    v73 = a1;
    v74 = v2;
    v21 = v20;
    aBlock = v20;
    *(_DWORD *)v19 = 136315138;
    v77 = sub_1000E3AC8(0xD000000000000026, 0x800000010054B2E0, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v19 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "MobileDocumentReaderListener %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v22 = v21;
    a1 = v73;
    v2 = v74;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  v23 = (void (*)(char *, uint64_t))*((_QWORD *)v3 + 1);
  v23(v14, v2);
  v24 = sub_100113774(a1);
  if (!v24)
  {
    v54 = defaultLogger()(v24);
    v55 = Logger.logObject.getter(v54);
    v57 = static os_log_type_t.info.getter(v55, v56);
    if (os_log_type_enabled(v55, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (void **)swift_slowAlloc(32, -1);
      aBlock = v59;
      *(_DWORD *)v58 = 136315138;
      v77 = sub_1000E3AC8(0xD000000000000026, 0x800000010054B2E0, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v58 + 4);
      _os_log_impl((void *)&_mh_execute_header, v55, v57, "MobileDocumentReaderListener %s Insufficient entitlements, rejecting new connection", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }

    v60 = v6;
    goto LABEL_14;
  }
  v25 = (void *)objc_opt_self(NSXPCInterface);
  v26 = objc_msgSend(v25, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7CoreIDV29MobileDocumentReaderInterface_);
  -[objc_class setExportedInterface:](a1, "setExportedInterface:", v26);

  v27 = objc_msgSend(v25, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7CoreIDV37MobileDocumentReaderDelegateInterface_);
  -[objc_class setRemoteObjectInterface:](a1, "setRemoteObjectInterface:", v27);

  v83 = sub_100113110;
  v84 = 0;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_1004AB208;
  v82 = &unk_100608948;
  v28 = _Block_copy(&aBlock);
  v29 = -[objc_class remoteObjectProxyWithErrorHandler:](a1, "remoteObjectProxyWithErrorHandler:", v28);
  _Block_release(v28);
  _bridgeAnyObjectToAny(_:)(&aBlock, v29);
  swift_unknownObjectRelease(v29);
  v30 = sub_100004828(&qword_100635390);
  v31 = swift_dynamicCast(&v77, &aBlock, (char *)&type metadata for Any + 8, v30, 6);
  if (!(_DWORD)v31)
  {
    v61 = (char *)v75;
    v62 = defaultLogger()(v31);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = (void **)swift_slowAlloc(32, -1);
      aBlock = v66;
      *(_DWORD *)v65 = 136315138;
      v77 = v30;
      v67 = sub_100004828((uint64_t *)&unk_100635398);
      v74 = v2;
      v68 = String.init<A>(describing:)(&v77, v67);
      v70 = v69;
      v77 = sub_1000E3AC8(v68, v69, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v65 + 4);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "MobileDocumentReaderListener Remote proxy could not be cast to %s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      v60 = v61;
      v71 = v74;
LABEL_15:
      v23(v60, v71);
      return 0;
    }

    v60 = v61;
LABEL_14:
    v71 = v2;
    goto LABEL_15;
  }
  v32 = a1;
  v33 = v77;
  swift_unknownObjectRetain(v77);
  v34._countAndFlagsBits = 0xD00000000000003ALL;
  v34._object = (void *)0x800000010054B310;
  v35 = NSXPCConnection.isEntitled(_:)(v34);
  v78[2] = type metadata accessor for BundleRecordFetcher(0);
  v78[3] = &protocol witness table for BundleRecordFetcher;
  v36 = sub_100022234(&v77);
  BundleRecordFetcher.init()(v36);
  v82 = (void *)type metadata accessor for MobileDocumentReaderEntitlementChecker(0);
  v83 = &protocol witness table for MobileDocumentReaderEntitlementChecker;
  sub_100022234(&aBlock);
  MobileDocumentReaderEntitlementChecker.init(bundleRecordFetcher:)(&v77);
  v37 = type metadata accessor for MobileDocumentReaderFlow(0);
  v38 = (objc_class *)type metadata accessor for MobileDocumentReaderSessionProxy();
  v39 = swift_allocObject(v38, 257, 15);
  swift_defaultActor_initialize(v39, v40);
  *(_OWORD *)(v39 + 160) = 0u;
  *(_OWORD *)(v39 + 176) = 0u;
  *(_OWORD *)(v39 + 128) = 0u;
  *(_OWORD *)(v39 + 144) = 0u;
  *(_OWORD *)(v39 + 112) = 0u;
  *(_QWORD *)(v39 + 192) = v33;
  sub_10002581C((uint64_t)&aBlock, v39 + 200);
  *(_QWORD *)(v39 + 240) = v37;
  *(_QWORD *)(v39 + 248) = &off_100615380;
  *(_BYTE *)(v39 + 256) = v35;
  v76.receiver = (id)v39;
  v76.super_class = v38;
  v41 = -[objc_class init](&v76, "init");
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&aBlock);
  -[objc_class setExportedObject:](v32, "setExportedObject:", v41);
  v83 = sub_1001132F8;
  v84 = 0;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_1004AB190;
  v82 = &unk_100608970;
  v42 = _Block_copy(&aBlock);
  -[objc_class setInterruptionHandler:](v32, "setInterruptionHandler:", v42);
  _Block_release(v42);
  v83 = sub_100114518;
  v84 = v41;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_1004AB190;
  v82 = &unk_100608998;
  v43 = _Block_copy(&aBlock);
  v44 = v84;
  v45 = v41;
  swift_release(v44);
  -[objc_class setInvalidationHandler:](v32, "setInvalidationHandler:", v43);
  _Block_release(v43);
  v46 = defaultLogger()(-[objc_class activate](v32, "activate"));
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.info.getter(v47, v48);
  if (os_log_type_enabled(v47, v49))
  {
    v75 = (void (**)(char *, uint64_t))v3;
    v50 = v11;
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = (void **)swift_slowAlloc(32, -1);
    aBlock = v52;
    *(_DWORD *)v51 = 136315138;
    v77 = sub_1000E3AC8(0xD000000000000026, 0x800000010054B2E0, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v51 + 4);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "MobileDocumentReaderListener %s Activating new connection", v51, 0xCu);
    v53 = 1;
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
    swift_unknownObjectRelease(v33);

    v75[1](v50, v2);
  }
  else
  {

    swift_unknownObjectRelease(v33);
    (*((void (**)(char *, uint64_t))v3 + 1))(v11, v2);
    return 1;
  }
  return v53;
}

uint64_t sub_100114500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100114510(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100114518()
{
  uint64_t v0;

  return sub_100113480(v0);
}

uint64_t sub_100114520()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011454C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1006353AC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  v2 = (_QWORD *)swift_task_alloc(dword_10063FAC4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10001D0A0;
  return sub_1003E5384();
}

uint64_t sub_1001145C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v47 = a7;
  v48 = a8;
  v45 = a6;
  v41 = a9;
  v49 = a2;
  v50 = a4;
  v53 = a1;
  v12 = type metadata accessor for DIPError.Code(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12);
  v46 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v14);
  v42 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004828(&qword_100630A50);
  __chkstk_darwin(v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URLComponents(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v49;
  v52 = a3;
  swift_bridgeObjectRetain(a3);
  v27._countAndFlagsBits = 47;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRetain(a5);
  v28._countAndFlagsBits = v50;
  v28._object = a5;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(a5);
  v29 = v52;
  URL.appendingPathComponent(_:)(v51, v52);
  swift_bridgeObjectRelease(v29);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v19, 0);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    v30 = &qword_100630A50;
    v31 = (uint64_t)v22;
LABEL_5:
    sub_100008030(v31, v30);
    v34 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v46, *v45, v44);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v36, v37, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v47, v48, 0, v34, 0, v35, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000012, 0x800000010054BA70, a10);
    return swift_willThrow(v38);
  }
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  v33 = v42;
  URLComponents.url.getter(v32);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v33, 1, v16) == 1)
  {
    v30 = &qword_100630A48;
    v31 = (uint64_t)v33;
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v41, v33, v16);
}

uint64_t sub_100114934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = v7;
  *(_BYTE *)(v8 + 352) = a6;
  *(_QWORD *)(v8 + 56) = a4;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 32) = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 112) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 120) = v12;
  *(_QWORD *)(v8 + 128) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_1006354A0);
  *(_QWORD *)(v8 + 136) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 144) = v14;
  *(_QWORD *)(v8 + 152) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_1006354A8);
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006335F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 168) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 176) = swift_task_alloc(v16);
  v17 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v8 + 184) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v8 + 192) = v18;
  *(_QWORD *)(v8 + 200) = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL(0);
  *(_QWORD *)(v8 + 208) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v8 + 216) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 224) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 232) = swift_task_alloc(v21);
  v22 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v8 + 240) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v8 + 248) = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 256) = swift_task_alloc(v24);
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v24);
  v25 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v8 + 272) = v25;
  v26 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v8 + 280) = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 288) = swift_task_alloc(v27);
  *(_QWORD *)(v8 + 296) = swift_task_alloc(v27);
  return swift_task_switch(sub_100114B20, 0, 0);
}

uint64_t sub_100114B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  void *v37;
  char v38;
  uint64_t (*v39)(uint64_t, uint64_t, char, char);

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v37 = *(void **)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  static DaemonSignposts.getStaticWorkflowRequest.getter();
  DIPSignpost.init(_:)(v1);
  v7 = sub_100004828((uint64_t *)&unk_1006325A0);
  v8 = sub_100004828((uint64_t *)&unk_100633440);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10051FFB0;
  v14 = v13 + v12;
  v15 = (_QWORD *)(v14 + *(int *)(v8 + 48));
  v16 = enum case for DIPError.PropertyKey.spProviderID(_:);
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14, v16, v17);
  v15[3] = &type metadata for String;
  *v15 = 0x61746E6567616DLL;
  v15[1] = 0xE700000000000000;
  *(_QWORD *)(v0 + 304) = sub_10011D314(v13);
  sub_1001145C4(v3 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v6, v5, v4, v37, &enum case for DIPError.Code.invalidStaticWorkflowBaseURL(_:), 0xD000000000000020, 0x800000010054BA40, v2, 25);
  v18 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 72);
  v38 = *(_BYTE *)(v0 + 352);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 16))(v22, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v22, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26(v23, 1, 1, v18);
  sub_10011BACC(v25, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20) == 1)
  {
    sub_100008030(*(_QWORD *)(v0 + 160), &qword_1006354A8);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 240);
    v33 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 32))(v29, *(_QWORD *)(v0 + 160), v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v27, v29, v31);
    DIPSignpost.init(_:)(v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    v26(v33, 0, 1, v28);
    sub_1000C8D8C(v33, v32);
  }
  v34 = v38 & 1;
  v39 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v35 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 312) = v35;
  *v35 = v0;
  v35[1] = sub_100114F08;
  return v39(*(_QWORD *)(v0 + 200), (uint64_t)_swiftEmptyArrayStorage, v34, 0);
}

