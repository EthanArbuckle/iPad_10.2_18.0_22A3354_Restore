uint64_t sub_100114F08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 312);
  *(_QWORD *)(v6 + 320) = a1;
  *(_QWORD *)(v6 + 328) = a2;
  *(_BYTE *)(v6 + 353) = a4;
  *(_QWORD *)(v6 + 336) = a3;
  *(_QWORD *)(v6 + 344) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_1001156E0;
  else
    v8 = sub_100114F7C;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100114F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  Class v45;
  id v46;
  id v47;
  void *v48;
  Class v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t);
  uint64_t v101;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 176);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    v4 = *(_QWORD *)(v0 + 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v3, v1);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  }
  v5 = (char *)(v0 + 353);
  if ((*(_BYTE *)(v0 + 352) & 1) == 0)
  {
    v6 = *v5;
    v8 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    type metadata accessor for DaemonAnalytics(0);
    static DaemonAnalytics.sendStaticWorkflowFetchedEvent(workflowID:wasLoadedFromCache:)(v8, v7, v6);
  }
  v9 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = JSONDecoder.init()();
  v15 = sub_10011C280(&qword_1006354B0, &qword_1006354A0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v12, v11, v10, v12, v15);
  v16 = v9;
  swift_release(v14);
  v17 = *v5;
  if (v9)
  {
    if (*v5)
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v18 = (void *)qword_100670810;
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v18, "removeCachedResponseForRequest:", isa);

    }
    v86 = *(void **)(v0 + 336);
    v93 = *(_QWORD *)(v0 + 328);
    v89 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 104);
    v97 = enum case for DIPError.Code.internalError(_:);
    v100 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 96) + 104);
    v100(v21);
    v84 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v84, v22, 0, 0);
    swift_errorRetain(v16);
    swift_bridgeObjectRetain(v20);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v16, v21, 0, v20, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000053, 0x800000010054B9E0, 184);
    swift_willThrow(v24);
    swift_errorRelease(v16);

    sub_100007F8C(v89, v93);
    v25 = *(_QWORD *)(v0 + 304);
    v94 = *(_QWORD *)(v0 + 296);
    v87 = *(_QWORD *)(v0 + 280);
    v90 = *(_QWORD *)(v0 + 272);
    v78 = *(_QWORD *)(v0 + 208);
    v80 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 192);
    v74 = *(_QWORD *)(v0 + 200);
    v76 = *(_QWORD *)(v0 + 216);
    v72 = *(_QWORD *)(v0 + 184);
    v82 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 104);
    ((void (*)(uint64_t, _QWORD, _QWORD))v100)(v27, v97, *(_QWORD *)(v0 + 88));
    swift_allocError(v84, v22, 0, 0);
    swift_errorRetain(v23);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054B960, v23, v27, 0, v25, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000053, 0x800000010054B9E0, 187);
    swift_willThrow(v28);
    swift_errorRelease(v23);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v74, v72);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v78);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v94, v90);
    sub_100008030(v82, (uint64_t *)&unk_1006335F0);
    v29 = *(_QWORD *)(v0 + 288);
    v31 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 264);
    v33 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 232);
    v34 = *(_QWORD *)(v0 + 200);
    v36 = *(_QWORD *)(v0 + 168);
    v35 = *(_QWORD *)(v0 + 176);
    v37 = *(_QWORD *)(v0 + 160);
    v91 = *(_QWORD *)(v0 + 152);
    v95 = *(_QWORD *)(v0 + 128);
    v98 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v91);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    v38 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 304));
    if ((v17 & 1) == 0)
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v39 = *(_QWORD *)(v0 + 328);
      v40 = *(void **)(v0 + 336);
      v41 = *(_QWORD *)(v0 + 320);
      v42 = qword_100670810;
      v43 = objc_allocWithZone((Class)NSCachedURLResponse);
      v44 = v40;
      sub_100022948(v41, v39);
      v45 = Data._bridgeToObjectiveC()().super.isa;
      v46 = objc_msgSend(v43, "initWithResponse:data:", v44, v45);
      sub_100007F8C(v41, v39);

      v47 = sub_10044D3C8(v46, 0);
      if (v47)
      {
        v48 = v47;
        v49 = URLRequest._bridgeToObjectiveC()().super.isa;
        v50 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 16) = v42;
        *(_QWORD *)(v0 + 24) = v50;
        objc_msgSendSuper2((objc_super *)(v0 + 16), "storeCachedResponse:forRequest:", v48, v49);

      }
      v52 = defaultLogger()(v51);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.debug.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Identity Proofing Static workflow response stored in the cache", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }
      v57 = *(_QWORD *)(v0 + 120);
      v56 = *(_QWORD *)(v0 + 128);
      v58 = *(_QWORD *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    v59 = *(_QWORD *)(v0 + 328);
    v60 = *(_QWORD *)(v0 + 320);
    v61 = *(_QWORD *)(v0 + 296);
    v79 = *(_QWORD *)(v0 + 272);
    v81 = *(_QWORD *)(v0 + 288);
    v83 = *(_QWORD *)(v0 + 264);
    v85 = *(_QWORD *)(v0 + 256);
    v88 = *(_QWORD *)(v0 + 224);
    v69 = *(void **)(v0 + 336);
    v70 = *(_QWORD *)(v0 + 216);
    v62 = *(_QWORD *)(v0 + 200);
    v71 = *(_QWORD *)(v0 + 208);
    v73 = *(_QWORD *)(v0 + 232);
    v63 = *(_QWORD *)(v0 + 184);
    v64 = *(_QWORD *)(v0 + 192);
    v75 = *(_QWORD *)(v0 + 176);
    v77 = *(_QWORD *)(v0 + 280);
    v92 = *(_QWORD *)(v0 + 168);
    v65 = *(_QWORD *)(v0 + 152);
    v66 = *(_QWORD *)(v0 + 136);
    v67 = *(_QWORD *)(v0 + 144);
    v96 = *(_QWORD *)(v0 + 160);
    v99 = *(_QWORD *)(v0 + 128);
    v101 = *(_QWORD *)(v0 + 104);
    JWSSignedJSON.payload.getter(v66);
    sub_100007F8C(v60, v59);

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v73, v71);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v61, v79);
    sub_100008030(v75, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v61);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v73);
    swift_task_dealloc(v88);
    swift_task_dealloc(v62);
    swift_task_dealloc(v75);
    swift_task_dealloc(v92);
    swift_task_dealloc(v96);
    swift_task_dealloc(v65);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    v38 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v38();
}

uint64_t sub_1001156E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 272);
  v26 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  swift_errorRetain(v1);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054B960, v1, v7, 0, v2, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000053, 0x800000010054B9E0, 187);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v21);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v24);
  sub_100008030(v28, (uint64_t *)&unk_1006335F0);
  v11 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100115910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v12);
  v5[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for URL(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v15);
  v5[21] = swift_task_alloc(v15);
  v16 = type metadata accessor for Date(0);
  v5[22] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[23] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[24] = swift_task_alloc(v18);
  v5[25] = swift_task_alloc(v18);
  v5[26] = swift_task_alloc(v18);
  return swift_task_switch(sub_100115A78, 0, 0);
}

void sub_100115A78(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  void *v25;

  v2 = v1[25];
  v3 = v1[23];
  v4 = v1[22];
  v5 = v1[20];
  v6 = v1[6];
  v7 = v1[3];
  v23 = v1[4];
  v25 = (void *)v1[5];
  v8 = v1[2];
  Date.init()(a1);
  static Date.- infix(_:_:)(v2, 80000.0);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v1[27] = v9;
  v10 = v9(v2, v4);
  Date.init()(v10);
  static Date.+ infix(_:_:)(v2, 120000.0);
  v9(v2, v4);
  sub_1001145C4(v6 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v8, v7, v23, v25, &enum case for DIPError.Code.invalidStaticWorkflowBaseURL(_:), 0xD000000000000020, 0x800000010054BA40, v5, 25);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[19] + 32))(v1[21], v1[20], v1[18]);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v12 = v1[23];
  v11 = v1[24];
  v13 = v1[22];
  v15 = v1[16];
  v14 = v1[17];
  v17 = v1[5];
  v16 = v1[6];
  v18 = v1[3];
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v19(v14, v1[26], v13);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v20(v14, 0, 1, v13);
  v19(v15, v11, v13);
  v20(v15, 0, 1, v13);
  v21 = unk_100641F94;
  v24 = (char *)&dword_100641F90 + dword_100641F90;
  swift_retain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  v22 = (_QWORD *)swift_task_alloc(v21);
  v1[28] = v22;
  *v22 = v1;
  v22[1] = sub_100115F58;
  __asm { BR              X8 }
}

uint64_t sub_100115F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  sub_100008030(v1, &qword_100633990);
  sub_100008030(v2, &qword_100633990);
  return swift_task_switch(sub_10011C2C0, 0, 0);
}

uint64_t sub_100116000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_1006354A8);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v5[15] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[16] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[17] = swift_task_alloc(v14);
  v5[18] = swift_task_alloc(v14);
  v5[19] = swift_task_alloc(v14);
  return swift_task_switch(sub_100116118, 0, 0);
}

uint64_t sub_100116118(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t **v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refreshing static workflow cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[19];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[13];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[20] = (uint64_t)v10;
  v10(v6, v7);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = (uint64_t **)swift_task_alloc(dword_10063549C);
  v1[21] = (uint64_t)v12;
  *v12 = v1;
  v12[1] = (uint64_t *)sub_100116240;
  return sub_100114934(v1[14], v1[3], v1[4], v1[5], v1[6], 1, v1[13]);
}

uint64_t sub_100116240()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v4 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  sub_100008030(v4, &qword_1006354A8);
  if (v0)
  {
    v5 = sub_1001163E0;
  }
  else
  {
    sub_100035DAC(*(_QWORD *)(v2 + 112), type metadata accessor for IdentityProofingStaticWorkflow);
    v5 = sub_1001162D0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001162D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing static workflow cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 160);
  v7 = *(_QWORD *)(v1 + 144);
  v8 = *(_QWORD *)(v1 + 120);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 144);
  v10 = *(_QWORD *)(v1 + 136);
  v12 = *(_QWORD *)(v1 + 104);
  v11 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 152));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001163E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 136);
  v32 = *(_QWORD *)(v0 + 120);
  v33 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v29 = *(_QWORD *)(v0 + 64);
  v30 = *(_QWORD *)(v0 + 56);
  v31 = *(_QWORD *)(v0 + 88);
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  v13 = v12 + v11;
  v14 = v13 + *(int *)(v7 + 48);
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  *(_QWORD *)(v14 + 24) = &type metadata for DIPState;
  *(_BYTE *)v14 = 9;
  swift_errorRetain(v1);
  v17 = sub_10011D314(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v5, enum case for DIPError.Code.internalError(_:), v30);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054BE10, v1, v5, 0, v17, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000001ELL, 0x800000010054BDF0, 215);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v4, v18, 0, 0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v20, v3, v4);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v19, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  v33(v2, v32);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v3, v4);
  swift_errorRelease(v19);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_QWORD *)(v7 + 104) = a6;
  *(_QWORD *)(v7 + 112) = v6;
  *(_BYTE *)(v7 + 400) = a5;
  *(_QWORD *)(v7 + 88) = a3;
  *(_QWORD *)(v7 + 96) = a4;
  *(_QWORD *)(v7 + 72) = a1;
  *(_QWORD *)(v7 + 80) = a2;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 120) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 128) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 136) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v10);
  v11 = sub_100004828(&qword_1006354F0);
  *(_QWORD *)(v7 + 152) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 160) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 168) = swift_task_alloc(v13);
  *(_QWORD *)(v7 + 176) = swift_task_alloc(v13);
  v14 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v7 + 184) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 192) = v15;
  *(_QWORD *)(v7 + 200) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_1006354A8);
  *(_QWORD *)(v7 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006335F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 216) = swift_task_alloc(v17);
  *(_QWORD *)(v7 + 224) = swift_task_alloc(v17);
  v18 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v7 + 232) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 240) = v19;
  *(_QWORD *)(v7 + 248) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  *(_QWORD *)(v7 + 256) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v7 + 264) = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 272) = swift_task_alloc(v22);
  *(_QWORD *)(v7 + 280) = swift_task_alloc(v22);
  v23 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v7 + 288) = v23;
  v24 = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(v7 + 296) = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 304) = swift_task_alloc(v25);
  *(_QWORD *)(v7 + 312) = swift_task_alloc(v25);
  v26 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v7 + 320) = v26;
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v7 + 328) = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 336) = swift_task_alloc(v28);
  *(_QWORD *)(v7 + 344) = swift_task_alloc(v28);
  return swift_task_switch(sub_10011686C, 0, 0);
}

uint64_t sub_10011686C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  void *v37;
  char v38;
  uint64_t (*v39)(uint64_t, uint64_t, char, char);

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v37 = *(void **)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  static DaemonSignposts.getStaticAssetRequest.getter();
  DIPSignpost.init(_:)(v1);
  v7 = sub_100004828((uint64_t *)&unk_1006325A0);
  v8 = sub_100004828((uint64_t *)&unk_100633440);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10051FFB0;
  v14 = v13 + v12;
  v15 = (_QWORD *)(v14 + *(int *)(v8 + 48));
  v16 = enum case for DIPError.PropertyKey.spProviderID(_:);
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14, v16, v17);
  v15[3] = &type metadata for String;
  *v15 = 0x61746E6567616DLL;
  v15[1] = 0xE700000000000000;
  *(_QWORD *)(v0 + 352) = sub_10011D314(v13);
  sub_1001145C4(v3 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v6, v5, v4, v37, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD00000000000001ELL, 0x800000010054BCA0, v2, 46);
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 104);
  v38 = *(_BYTE *)(v0 + 400);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 16))(v22, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v22, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26(v23, 1, 1, v18);
  sub_10011BACC(v25, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20) == 1)
  {
    sub_100008030(*(_QWORD *)(v0 + 208), &qword_1006354A8);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 312);
    v28 = *(_QWORD *)(v0 + 320);
    v30 = *(_QWORD *)(v0 + 296);
    v29 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 288);
    v33 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 224);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 32))(v29, *(_QWORD *)(v0 + 208), v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v27, v29, v31);
    DIPSignpost.init(_:)(v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    v26(v33, 0, 1, v28);
    sub_1000C8D8C(v33, v32);
  }
  v34 = v38 & 1;
  v39 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v35 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 360) = v35;
  *v35 = v0;
  v35[1] = sub_100116C70;
  return v39(*(_QWORD *)(v0 + 248), (uint64_t)_swiftEmptyArrayStorage, v34, 0);
}

uint64_t sub_100116C70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 360);
  *(_QWORD *)(v6 + 368) = a1;
  *(_QWORD *)(v6 + 376) = a2;
  *(_BYTE *)(v6 + 401) = a4;
  *(_QWORD *)(v6 + 384) = a3;
  *(_QWORD *)(v6 + 392) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_1001175BC;
  else
    v8 = sub_100116CE4;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100116CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  Class v54;
  id v55;
  id v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  Class v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(void **)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 368);
  if (v4)
  {
    sub_100022948(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
    v8 = v6;
    if ((*(_BYTE *)(v0 + 400) & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v43 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v43, v3, v1);
  sub_100022948(v7, v5);
  v44 = v6;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v43, v1);
  if ((*(_BYTE *)(v0 + 400) & 1) == 0)
  {
LABEL_3:
    v9 = *(unsigned __int8 *)(v0 + 401);
    type metadata accessor for DaemonAnalytics(0);
    static DaemonAnalytics.sendStaticAssetFetchedEvent(wasLoadedFromCache:)(v9);
  }
LABEL_4:
  v10 = *(_QWORD *)(v0 + 392);
  v12 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = type metadata accessor for JSONDecoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = JSONDecoder.init()(v15);
  v17 = sub_10011C280(&qword_1006354F8, &qword_1006354F0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v13, v12, v11, v13, v17);
  v18 = *(unsigned __int8 *)(v0 + 401);
  if (v10)
  {
    v19 = v10;
    v20 = *(_QWORD *)(v0 + 376);
    v21 = *(_QWORD *)(v0 + 368);

    sub_100007F8C(v21, v20);
    swift_release(v16);
    if (v18)
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v22 = (void *)qword_100670810;
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v22, "removeCachedResponseForRequest:", isa);

    }
    v24 = *(_QWORD *)(v0 + 368);
    v106 = *(void **)(v0 + 384);
    v108 = *(_QWORD *)(v0 + 376);
    v25 = *(_QWORD *)(v0 + 352);
    v120 = *(_QWORD *)(v0 + 328);
    v123 = *(_QWORD *)(v0 + 320);
    v126 = *(_QWORD *)(v0 + 344);
    v110 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 248);
    v112 = *(_QWORD *)(v0 + 256);
    v114 = *(_QWORD *)(v0 + 280);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 240);
    v117 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 104))(v29, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 184));
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v30, v31, 0, 0);
    swift_errorRetain(v19);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v29, 0, v25, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000050, 0x800000010054BC40, 274);
    swift_willThrow(v32);
    swift_errorRelease(v19);

    sub_100007F8C(v24, v108);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v114, v112);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v126, v123);
    sub_100008030(v117, (uint64_t *)&unk_1006335F0);
    v33 = *(_QWORD *)(v0 + 336);
    v35 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 312);
    v37 = *(_QWORD *)(v0 + 272);
    v36 = *(_QWORD *)(v0 + 280);
    v38 = *(_QWORD *)(v0 + 248);
    v40 = *(_QWORD *)(v0 + 216);
    v39 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 208);
    v115 = *(_QWORD *)(v0 + 200);
    v118 = *(_QWORD *)(v0 + 176);
    v121 = *(_QWORD *)(v0 + 168);
    v124 = *(_QWORD *)(v0 + 144);
    v127 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v115);
    swift_task_dealloc(v118);
    swift_task_dealloc(v121);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
    swift_release(v16);
    if ((v18 & 1) != 0)
    {
      v45 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 368);

      v47 = sub_100007F8C(v46, v45);
    }
    else
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v48 = *(_QWORD *)(v0 + 376);
      v49 = *(void **)(v0 + 384);
      v50 = *(_QWORD *)(v0 + 368);
      v51 = qword_100670810;
      v52 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_100022948(v50, v48);
      v53 = v49;
      v54 = Data._bridgeToObjectiveC()().super.isa;
      v55 = objc_msgSend(v52, "initWithResponse:data:", v53, v54);
      sub_100007F8C(v50, v48);

      v56 = sub_10044D3C8(v55, 0);
      if (v56)
      {
        v57 = v56;
        v59 = *(_QWORD *)(v0 + 368);
        v58 = *(_QWORD *)(v0 + 376);
        v60 = URLRequest._bridgeToObjectiveC()().super.isa;
        v61 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 48) = v51;
        *(_QWORD *)(v0 + 56) = v61;
        objc_msgSendSuper2((objc_super *)(v0 + 48), "storeCachedResponse:forRequest:", v57, v60);

        v62 = v59;
        v63 = v58;
      }
      else
      {
        v65 = *(_QWORD *)(v0 + 368);
        v64 = *(_QWORD *)(v0 + 376);

        v62 = v65;
        v63 = v64;
      }
      sub_100007F8C(v62, v63);

      v67 = defaultLogger()(v66);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.debug.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Identity Proofing Static asset response stored in the cache", v70, 2u);
        swift_slowDealloc(v70, -1, -1);
      }
      v71 = *(_QWORD *)(v0 + 144);
      v72 = *(_QWORD *)(v0 + 120);
      v73 = *(_QWORD *)(v0 + 128);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    v74 = *(_QWORD *)(v0 + 168);
    v75 = *(_QWORD *)(v0 + 176);
    v76 = *(_QWORD *)(v0 + 152);
    v77 = *(_QWORD *)(v0 + 160);
    defaultLogger()(v47);
    v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v74, v75, v76);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.debug.getter(v79);
    if (os_log_type_enabled(v79, v80))
    {
      v81 = *(_QWORD *)(v0 + 152);
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v82 = 134217984;
      JWSSignedJSON.payload.getter(v81);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
      v83 = *(_QWORD *)(v0 + 40);
      if (v83)
      {
        v84 = *(_QWORD *)(v83 + 16);
        swift_bridgeObjectRelease(v83);
      }
      else
      {
        v84 = 0;
      }
      v122 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 8);
      v122(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
      *(_QWORD *)(v0 + 64) = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v82 + 4);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Image assets count -> %ld", v82, 0xCu);
      swift_slowDealloc(v82, -1, -1);
    }
    else
    {
      v122 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 8);
      v122(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    }
    v85 = v79;
    v96 = *(void **)(v0 + 384);
    v97 = *(_QWORD *)(v0 + 368);
    v105 = *(_QWORD *)(v0 + 344);
    v107 = *(_QWORD *)(v0 + 336);
    v103 = *(_QWORD *)(v0 + 328);
    v104 = *(_QWORD *)(v0 + 320);
    v109 = *(_QWORD *)(v0 + 312);
    v111 = *(_QWORD *)(v0 + 304);
    v113 = *(_QWORD *)(v0 + 272);
    v98 = *(_QWORD *)(v0 + 376);
    v99 = *(_QWORD *)(v0 + 264);
    v86 = *(_QWORD *)(v0 + 248);
    v100 = *(_QWORD *)(v0 + 256);
    v101 = *(_QWORD *)(v0 + 280);
    v88 = *(_QWORD *)(v0 + 232);
    v87 = *(_QWORD *)(v0 + 240);
    v102 = *(_QWORD *)(v0 + 224);
    v116 = *(_QWORD *)(v0 + 216);
    v119 = *(_QWORD *)(v0 + 208);
    v89 = *(_QWORD *)(v0 + 176);
    v125 = *(_QWORD *)(v0 + 200);
    v128 = *(_QWORD *)(v0 + 168);
    v90 = *(_QWORD *)(v0 + 152);
    v129 = *(_QWORD *)(v0 + 144);
    v92 = *(_QWORD *)(v0 + 128);
    v91 = *(_QWORD *)(v0 + 136);
    v93 = *(_QWORD *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
    JWSSignedJSON.payload.getter(v90);

    sub_100007F8C(v97, v98);
    v122(v89, v90);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v101, v100);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v105, v104);
    v94 = *(_QWORD *)(v0 + 16);
    v95 = *(_QWORD *)(v0 + 24);
    sub_100008030(v102, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v101);
    swift_task_dealloc(v113);
    swift_task_dealloc(v86);
    swift_task_dealloc(v102);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v125);
    swift_task_dealloc(v89);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v94, v95);
  }
}

uint64_t sub_1001175BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 352);
  v28 = *(_QWORD *)(v0 + 320);
  v30 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 256);
  v22 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 184));
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  swift_errorRetain(v1);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054BC20, v1, v7, 0, v2, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000050, 0x800000010054BC40, 246);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v21);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v28);
  sub_100008030(v24, (uint64_t *)&unk_1006335F0);
  v11 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 144);
  v31 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v12);
  v5[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for URL(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v15);
  v5[21] = swift_task_alloc(v15);
  v16 = type metadata accessor for Date(0);
  v5[22] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[23] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[24] = swift_task_alloc(v18);
  v5[25] = swift_task_alloc(v18);
  v5[26] = swift_task_alloc(v18);
  return swift_task_switch(sub_10011796C, 0, 0);
}

void sub_10011796C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  void *v25;

  v2 = v1[25];
  v3 = v1[23];
  v4 = v1[22];
  v5 = v1[20];
  v6 = v1[6];
  v7 = v1[3];
  v23 = v1[4];
  v25 = (void *)v1[5];
  v8 = v1[2];
  Date.init()(a1);
  static Date.- infix(_:_:)(v2, 80000.0);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v1[27] = v9;
  v10 = v9(v2, v4);
  Date.init()(v10);
  static Date.+ infix(_:_:)(v2, 120000.0);
  v9(v2, v4);
  sub_1001145C4(v6 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v8, v7, v23, v25, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD00000000000001ELL, 0x800000010054BCA0, v5, 46);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[19] + 32))(v1[21], v1[20], v1[18]);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v12 = v1[23];
  v11 = v1[24];
  v13 = v1[22];
  v15 = v1[16];
  v14 = v1[17];
  v17 = v1[5];
  v16 = v1[6];
  v18 = v1[3];
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v19(v14, v1[26], v13);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v20(v14, 0, 1, v13);
  v19(v15, v11, v13);
  v20(v15, 0, 1, v13);
  v21 = unk_100641F8C;
  v24 = (char *)&dword_100641F88 + dword_100641F88;
  swift_retain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  v22 = (_QWORD *)swift_task_alloc(v21);
  v1[28] = v22;
  *v22 = v1;
  v22[1] = sub_100117E4C;
  __asm { BR              X8 }
}

uint64_t sub_100117E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  sub_100008030(v1, &qword_100633990);
  sub_100008030(v2, &qword_100633990);
  return swift_task_switch(sub_100117EF4, 0, 0);
}

uint64_t sub_100117EF4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  v2(v3, v4);
  v2(v1, v4);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_1006354A8);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v5[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[15] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v13);
  v5[17] = swift_task_alloc(v13);
  v5[18] = swift_task_alloc(v13);
  v5[19] = swift_task_alloc(v13);
  return swift_task_switch(sub_1001180D8, 0, 0);
}

uint64_t sub_1001180D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t **v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refreshing static asset cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[19];
  v7 = v1[14];
  v8 = v1[15];
  v9 = v1[13];

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[20] = (uint64_t)v10;
  v10(v6, v7);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = (uint64_t **)swift_task_alloc(dword_1006354EC);
  v1[21] = (uint64_t)v12;
  *v12 = v1;
  v12[1] = (uint64_t *)sub_100118200;
  return sub_100116664(v1[3], v1[4], v1[5], v1[6], 1, v1[13]);
}

uint64_t sub_100118200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  v4[22] = a1;
  v4[23] = a2;
  v4[24] = v2;
  swift_task_dealloc(v5);
  sub_100008030(v6, &qword_1006354A8);
  if (v2)
    v7 = sub_1001184E0;
  else
    v7 = sub_100118284;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100118284(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing static asset cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = (void (*)(uint64_t, uint64_t))v1[20];
  v7 = v1[18];
  v8 = v1[14];

  v6(v7, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_100635514);
  v1[25] = v9;
  *v9 = v1;
  v9[1] = sub_10011836C;
  return sub_100118760(v1[22], v1[23]);
}

uint64_t sub_10011836C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_1001183D4, 0, 0);
}

uint64_t sub_1001183D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing precache config data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 160);
  v7 = *(_QWORD *)(v1 + 136);
  v8 = *(_QWORD *)(v1 + 112);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 144);
  v11 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 136);
  v13 = *(_QWORD *)(v1 + 96);
  v12 = *(_QWORD *)(v1 + 104);
  v14 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 152));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001184E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 128);
  v32 = *(_QWORD *)(v0 + 112);
  v33 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v29 = *(_QWORD *)(v0 + 64);
  v30 = *(_QWORD *)(v0 + 56);
  v31 = *(_QWORD *)(v0 + 88);
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  v13 = v12 + v11;
  v14 = v13 + *(int *)(v7 + 48);
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  *(_QWORD *)(v14 + 24) = &type metadata for DIPState;
  *(_BYTE *)v14 = 9;
  swift_errorRetain(v1);
  v17 = sub_10011D314(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v5, enum case for DIPError.Code.internalError(_:), v30);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054BD10, v1, v5, 0, v17, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000001BLL, 0x800000010054BCF0, 304);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v4, v18, 0, 0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v20, v3, v4);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v19, 0, 0xE000000000000000, v2);
  swift_errorRelease(v1);
  v33(v2, v32);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v3, v4);
  swift_errorRelease(v19);
  v22 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v6);
  v3[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for DIPError.Code(0);
  v3[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[15] = v8;
  v3[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001187FC, 0, 0);
}

uint64_t sub_1001187FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v2 = *(_QWORD **)(v1 + 56);
  if (!v2)
  {
    v16 = *(_QWORD *)(v1 + 128);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 104))(v16, enum case for DIPError.Code.precachedConfigDoesntExist(_:), *(_QWORD *)(v1 + 112));
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v20 = swift_allocError(v18, v19, 0, 0);
    v21 = 0xD00000000000001DLL;
    v59 = 317;
    v22 = "PrecachedConfig doesn't exist";
LABEL_9:
    v25 = (unint64_t)(v22 - 32) | 0x8000000000000000;
    v26 = v16;
    v27 = v17;
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v1 + 64);
  if (!v3)
  {
    v16 = *(_QWORD *)(v1 + 128);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 104))(v16, enum case for DIPError.Code.imageAssetsUnavailable(_:), *(_QWORD *)(v1 + 112));
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v20 = swift_allocError(v23, v24, 0, 0);
    v21 = 0xD000000000000017;
    v59 = 321;
    v22 = "imageAssets unavailable";
    goto LABEL_9;
  }
  v4 = v2[2];
  *(_QWORD *)(v1 + 136) = v4;
  if (!v4)
  {
    v28 = defaultLogger()(a1);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Downloading precached config data complete", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    v32 = *(_QWORD *)(v1 + 104);
    v33 = *(_QWORD *)(v1 + 80);
    v34 = *(_QWORD *)(v1 + 88);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    goto LABEL_18;
  }
  v6 = v2[4];
  v5 = (void *)v2[5];
  v7 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain(v5);
  if (v7)
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v2);
    v8 = sub_1004A8604(v6, (uint64_t)v5);
    if ((v9 & 1) != 0)
    {
      *(_QWORD *)(v1 + 144) = 1;
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 56) + 32 * v8);
      v12 = *v10;
      v11 = v10[1];
      *(_QWORD *)(v1 + 152) = v11;
      *(_QWORD *)(v1 + 160) = v10[2];
      v13 = v10[3];
      *(_QWORD *)(v1 + 168) = v13;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease_n(v5, 2);
      v14 = (_QWORD *)swift_task_alloc(dword_1006354DC);
      *(_QWORD *)(v1 + 176) = v14;
      *v14 = v1;
      v14[1] = sub_100118E3C;
      return sub_100119888(v12, v11);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v2);
  }
  v36 = *(_QWORD *)(v1 + 120);
  v35 = *(_QWORD *)(v1 + 128);
  v37 = *(_QWORD *)(v1 + 112);
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(0xE000000000000000);
  v62[0] = 0x3E2D207465737361;
  v62[1] = 0xE900000000000020;
  v38._countAndFlagsBits = v6;
  v38._object = v5;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v5);
  v39._countAndFlagsBits = 0xD000000000000026;
  v39._object = (void *)0x800000010054BD90;
  String.append(_:)(v39);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v35, enum case for DIPError.Code.internalError(_:), v37);
  v40 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v41 = type metadata accessor for DIPError(0);
  v42 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v41, v42, 0, 0);
  v59 = 327;
  v21 = 0x3E2D207465737361;
  v25 = 0xE900000000000020;
  v26 = v35;
  v27 = v40;
LABEL_15:
  v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v21, v25, 0, v26, 0, v27, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000001FLL, 0x800000010054BD50, v59);
  v44 = swift_willThrow(v43);
  defaultLogger()(v44);
  swift_errorRetain(v20);
  v45 = swift_errorRetain(v20);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  v48 = os_log_type_enabled(v46, v47);
  v50 = *(_QWORD *)(v1 + 88);
  v49 = *(_QWORD *)(v1 + 96);
  v51 = *(_QWORD *)(v1 + 80);
  if (v48)
  {
    v60 = *(_QWORD *)(v1 + 88);
    v61 = *(_QWORD *)(v1 + 96);
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v62[0] = v53;
    *(_DWORD *)v52 = 136315138;
    swift_getErrorValue(v20, v1 + 40, v1 + 16);
    v54 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    v56 = v55;
    *(_QWORD *)(v1 + 48) = sub_1000E3AC8(v54, v55, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v52 + 4);
    swift_bridgeObjectRelease(v56);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to download the precached config %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    swift_errorRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v51);
  }
  else
  {
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  }
LABEL_18:
  v57 = *(_QWORD *)(v1 + 96);
  v58 = *(_QWORD *)(v1 + 104);
  swift_task_dealloc(*(_QWORD *)(v1 + 128));
  swift_task_dealloc(v58);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100118E3C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  v7 = *(_QWORD **)v3;
  v7[23] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    swift_bridgeObjectRelease(v7[7]);
    return swift_task_switch(sub_100119458, 0, 0);
  }
  else
  {
    sub_100007F8C(a1, a2);
    v9 = (_QWORD *)swift_task_alloc(dword_1006354DC);
    v7[24] = v9;
    *v9 = v7;
    v9[1] = sub_100118EF8;
    return sub_100119888(v7[20], v7[21]);
  }
}

uint64_t sub_100118EF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 192);
  *(_QWORD *)(*(_QWORD *)v3 + 200) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_bridgeObjectRelease(v6[7]);
    v8 = sub_100119670;
  }
  else
  {
    v9 = v6[21];
    v10 = v6[19];
    sub_100007F8C(a1, a2);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    v8 = sub_100118F98;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100118F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  v1 = *(_QWORD *)(v0 + 144);
  if (v1 == *(_QWORD *)(v0 + 136))
  {
    v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
    v3 = defaultLogger()(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Downloading precached config data complete", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 56);
    v11 = v10 + 16 * v1;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(void **)(v11 + 40);
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
    swift_bridgeObjectRetain(v12);
    if (v14)
    {
      swift_bridgeObjectRetain(v12);
      v15 = sub_1004A8604(v13, (uint64_t)v12);
      if ((v16 & 1) != 0)
      {
        *(_QWORD *)(v0 + 144) = v1 + 1;
        v17 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v0 + 64) + 56) + 32 * v15);
        v19 = *v17;
        v18 = v17[1];
        *(_QWORD *)(v0 + 152) = v18;
        *(_QWORD *)(v0 + 160) = v17[2];
        v20 = v17[3];
        *(_QWORD *)(v0 + 168) = v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRelease_n(v12, 2);
        v21 = (_QWORD *)swift_task_alloc(dword_1006354DC);
        *(_QWORD *)(v0 + 176) = v21;
        *v21 = v0;
        v21[1] = sub_100118E3C;
        return sub_100119888(v19, v18);
      }
      v10 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRelease(v12);
    }
    swift_bridgeObjectRelease(v10);
    v24 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 112);
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v51[0] = 0x3E2D207465737361;
    v51[1] = 0xE900000000000020;
    v26._countAndFlagsBits = v13;
    v26._object = v12;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v12);
    v27._countAndFlagsBits = 0xD000000000000026;
    v27._object = (void *)0x800000010054BD90;
    String.append(_:)(v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, enum case for DIPError.Code.internalError(_:), v25);
    v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x3E2D207465737361, 0xE900000000000020, 0, v23, 0, v28, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000001FLL, 0x800000010054BD50, 327);
    v33 = swift_willThrow(v32);
    defaultLogger()(v33);
    swift_errorRetain(v31);
    v34 = swift_errorRetain(v31);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v39 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 96);
    v40 = *(_QWORD *)(v0 + 80);
    if (v37)
    {
      v49 = *(_QWORD *)(v0 + 80);
      v50 = *(_QWORD *)(v0 + 96);
      v48 = *(_QWORD *)(v0 + 88);
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v51[0] = v42;
      *(_DWORD *)v41 = 136315138;
      swift_getErrorValue(v31, v0 + 40, v0 + 16);
      v43 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      v45 = v44;
      *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v43, v44, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v41 + 4);
      swift_bridgeObjectRelease(v45);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to download the precached config %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      swift_errorRelease(v31);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      swift_errorRelease(v31);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
  }
  v46 = *(_QWORD *)(v0 + 96);
  v47 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v47);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v2 = swift_bridgeObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 184);
  defaultLogger()(v2);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 96);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v3, v0 + 40, v0 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to download the precached config %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v2 = swift_bridgeObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 200);
  defaultLogger()(v2);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 96);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v3, v0 + 40, v0 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to download the precached config %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 80);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_100630A48);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v3[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[11] = v8;
  v3[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v3[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[14] = v10;
  v3[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100119960, 0, 0);
}

uint64_t sub_100119960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v28 = *(_QWORD *)(v1 + 112);
    v29 = *(_QWORD *)(v1 + 104);
    v30 = *(_QWORD *)(v1 + 120);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v31 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v7, v6, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempting to download for url %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 112);
    v10 = *(_QWORD *)(v1 + 120);
    v12 = *(_QWORD *)(v1 + 104);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v13 = *(_QWORD *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 88);
  v15 = *(_QWORD *)(v1 + 72);
  URL.init(string:)(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    v16 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 48);
    v18 = *(_QWORD *)(v1 + 56);
    sub_100008030(*(_QWORD *)(v1 + 72), &qword_100630A48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v16, enum case for DIPError.Code.invalidImageAssetDownloadURL(_:), v17);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054BB50, 0, v16, 0, v19, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000019, 0x800000010054BB80, 350);
    swift_willThrow(v22);
    v23 = *(_QWORD *)(v1 + 96);
    v25 = *(_QWORD *)(v1 + 64);
    v24 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 120));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 32))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
    v27 = (_QWORD *)swift_task_alloc(dword_1006354E4);
    *(_QWORD *)(v1 + 128) = v27;
    *v27 = v1;
    v27[1] = sub_100119CC0;
    return sub_100119F24(*(_QWORD *)(v1 + 96));
  }
}

uint64_t sub_100119CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 128);
  *(_QWORD *)(*v3 + 136) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100119DAC;
  }
  else
  {
    *(_QWORD *)(v6 + 144) = a2;
    *(_QWORD *)(v6 + 152) = a1;
    v8 = sub_100119D38;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100119D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 144));
}

uint64_t sub_100119DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054BBA0, v1, v5, 0, v6, 0xD00000000000005ALL, 0x800000010054B980, 0xD000000000000019, 0x800000010054BB80, 356);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v10 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119F24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLRequest(0);
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v2[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[20] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v12);
  v2[22] = swift_task_alloc(v12);
  return swift_task_switch(sub_10011A028, 0, 0);
}

uint64_t sub_10011A028(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, char, char);
  uint64_t v31;

  v2 = v1[6];
  v3 = v1[18];
  v4 = v1[14];
  v5 = v1[15];
  defaultLogger()(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[23] = v6;
  v7 = v6(v3, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v1[18];
    v28 = v1[19];
    v29 = v1[22];
    v25 = v1[15];
    v26 = v1[14];
    v27 = v1[20];
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v13.n128_u64[0] = 136315138;
    v31 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = URL.absoluteString.getter(v13);
    v16 = v15;
    v1[5] = sub_1000E3AC8(v14, v15, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v11 + 4);
    swift_bridgeObjectRelease(v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v17(v10, v26);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will attempt to download and cache the asset data for url %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v18 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v18(v29, v28);
  }
  else
  {
    v19 = v1[22];
    v20 = v1[19];
    v21 = v1[20];
    v17 = *(void (**)(uint64_t, uint64_t))(v1[15] + 8);
    v17(v1[18], v1[14]);

    v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v18(v19, v20);
  }
  v1[24] = v18;
  v1[25] = v17;
  v22 = v1[17];
  v6(v22, v1[6], v1[14]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v22, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v30 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v23 = (_QWORD *)swift_task_alloc(unk_100643F74);
  v1[26] = v23;
  *v23 = v1;
  v23[1] = sub_10011A2A4;
  return v30(v1[13], (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_10011A2A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 208);
  *(_QWORD *)(v7 + 216) = a1;
  *(_QWORD *)(v7 + 224) = a2;
  *(_QWORD *)(v7 + 232) = a3;
  *(_QWORD *)(v7 + 240) = v4;
  swift_task_dealloc(v8);
  if (v4)
  {
    v9 = sub_10011A698;
  }
  else
  {
    *(_BYTE *)(v7 + 248) = a4 & 1;
    v9 = sub_10011A328;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10011A328()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  Class isa;
  Class v9;
  id v10;
  void *v11;
  Class v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(uint64_t, uint64_t);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  if ((*(_BYTE *)(v0 + 248) & 1) != 0)
  {
    v1 = *(void **)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));

  }
  else
  {
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v2 = *(_QWORD *)(v0 + 224);
    v3 = *(void **)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 216);
    v5 = qword_100670810;
    v6 = objc_allocWithZone((Class)NSCachedURLResponse);
    v7 = v3;
    sub_100022948(v4, v2);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v9 = (Class)objc_msgSend(v6, "initWithResponse:data:", v7, isa);
    sub_100007F8C(v4, v2);

    v10 = sub_10044D3C8(v9, 0);
    if (v10)
    {
      v11 = v10;
      v12 = URLRequest._bridgeToObjectiveC()().super.isa;
      v13 = type metadata accessor for DIPURLCache();
      *(_QWORD *)(v0 + 16) = v5;
      *(_QWORD *)(v0 + 24) = v13;
      objc_msgSendSuper2((objc_super *)(v0 + 16), "storeCachedResponse:forRequest:", v11, v12);

      v9 = v12;
    }
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 48);

    defaultLogger()(v18);
    v19 = v14(v15, v17, v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 88);
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    v48 = *(_QWORD *)(v0 + 96);
    if (v22)
    {
      v46 = *(_QWORD *)(v0 + 104);
      v44 = *(void **)(v0 + 232);
      v45 = *(_QWORD *)(v0 + 88);
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = v23;
      v31 = swift_slowAlloc(32, -1);
      v49 = v31;
      v32.n128_u64[0] = 136315138;
      *(_DWORD *)v30 = 136315138;
      v33 = URL.absoluteString.getter(v32);
      v35 = v34;
      *(_QWORD *)(v0 + 32) = sub_1000E3AC8(v33, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v30 + 4);
      swift_bridgeObjectRelease(v35);
      v47(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Image data successully cached for URL %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v43(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v45);
    }
    else
    {

      v47(v26, v28);
      v23(v24, v25);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v27, v29);
    }
  }
  v36 = *(_QWORD *)(v0 + 168);
  v38 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 144);
  v39 = *(_QWORD *)(v0 + 128);
  v40 = *(_QWORD *)(v0 + 104);
  v41 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
}

uint64_t sub_10011A698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  Swift::String v7;
  void *object;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7._countAndFlagsBits = URL.absoluteString.getter(v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.internalError(_:), v4);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054BBD0, 0, v3, 0, v9, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000001FLL, 0x800000010054BC00, 381);
  swift_willThrow(v12);
  swift_errorRelease(v15);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011A888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_1006354C0);
  v6[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006354A8);
  v6[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006335F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[17] = swift_task_alloc(v12);
  v6[18] = swift_task_alloc(v12);
  v13 = type metadata accessor for URLRequest(0);
  v6[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[20] = v14;
  v6[21] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v6[22] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[23] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[24] = swift_task_alloc(v17);
  v6[25] = swift_task_alloc(v17);
  v18 = type metadata accessor for DIPSignpost.Config(0);
  v6[26] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v6[27] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v20);
  v6[29] = swift_task_alloc(v20);
  v21 = type metadata accessor for DIPSignpost(0);
  v6[30] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v6[31] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[32] = swift_task_alloc(v23);
  v6[33] = swift_task_alloc(v23);
  return swift_task_switch(sub_10011AA44, 0, 0);
}

uint64_t sub_10011AA44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v36;
  uint64_t (*v37)(uint64_t, uint64_t, char, char);

  v1 = v0[29];
  v2 = v0[25];
  v3 = v0[9];
  v4 = v0[6];
  v36 = (void *)v0[7];
  v6 = v0[4];
  v5 = v0[5];
  static DaemonSignposts.getStaticTCRequest.getter();
  DIPSignpost.init(_:)(v1);
  v7 = sub_100004828((uint64_t *)&unk_1006325A0);
  v8 = sub_100004828((uint64_t *)&unk_100633440);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10051FFB0;
  v14 = v13 + v12;
  v15 = (_QWORD *)(v14 + *(int *)(v8 + 48));
  v16 = enum case for DIPError.PropertyKey.spProviderID(_:);
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v14, v16, v17);
  v15[3] = &type metadata for String;
  *v15 = 0x61746E6567616DLL;
  v15[1] = 0xE700000000000000;
  v0[34] = sub_10011D314(v13);
  sub_1001145C4(v3 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v6, v5, v4, v36, &enum case for DIPError.Code.invalidStaticAssetsBaseURL(_:), 0xD000000000000025, 0x800000010054BB00, v2, 67);
  v18 = v0[30];
  v19 = v0[31];
  v20 = v0[26];
  v21 = v0[27];
  v22 = v0[24];
  v23 = v0[18];
  v24 = v0[16];
  v25 = v0[8];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[23] + 16))(v22, v0[25], v0[22]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v22, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v26(v23, 1, 1, v18);
  sub_10011BACC(v25, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20) == 1)
  {
    sub_100008030(v0[16], &qword_1006354A8);
  }
  else
  {
    v27 = v0[29];
    v28 = v0[30];
    v30 = v0[27];
    v29 = v0[28];
    v31 = v0[26];
    v33 = v0[17];
    v32 = v0[18];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 32))(v29, v0[16], v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v27, v29, v31);
    DIPSignpost.init(_:)(v27);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    v26(v33, 0, 1, v28);
    sub_1000C8D8C(v33, v32);
  }
  v37 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v34 = (_QWORD *)swift_task_alloc(unk_100643F74);
  v0[35] = v34;
  *v34 = v0;
  v34[1] = sub_10011AE10;
  return v37(v0[21], (uint64_t)_swiftEmptyArrayStorage, 1, 0);
}

uint64_t sub_10011AE10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 280);
  v6[36] = a1;
  v6[37] = a2;
  v6[38] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_10011B310;
  }
  else
  {

    v8 = sub_10011AE88;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10011AE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 144);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    v4 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v3, v1);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  }
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = type metadata accessor for JSONDecoder(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = JSONDecoder.init()(v10);
  v12 = sub_10011C280(&qword_1006354C8, &qword_1006354C0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v8, v7, v5, v8, v12);
  if (v6)
  {
    v13 = v6;
    sub_100007F8C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
    swift_release(v11);
    v14 = *(_QWORD *)(v0 + 272);
    v58 = *(_QWORD *)(v0 + 248);
    v60 = *(_QWORD *)(v0 + 240);
    v63 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 176);
    v54 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    v56 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v19, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    swift_errorRetain(v13);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010054BA90, v13, v19, 0, v14, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000003ALL, 0x800000010054BAC0, 410);
    swift_willThrow(v22);
    swift_errorRelease(v13);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v54, v52);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v63, v60);
    sub_100008030(v56, (uint64_t *)&unk_1006335F0);
    v23 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 224);
    v24 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 128);
    v61 = *(_QWORD *)(v0 + 120);
    v64 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 288);
    v44 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 264);
    v50 = *(_QWORD *)(v0 + 240);
    v51 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 232);
    v55 = *(_QWORD *)(v0 + 224);
    v57 = *(_QWORD *)(v0 + 192);
    v45 = *(_QWORD *)(v0 + 184);
    v34 = *(_QWORD *)(v0 + 168);
    v46 = *(_QWORD *)(v0 + 176);
    v47 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 160);
    v48 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 248);
    v37 = *(_QWORD *)(v0 + 120);
    v59 = *(_QWORD *)(v0 + 136);
    v62 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 104);
    v38 = *(_QWORD *)(v0 + 112);
    v65 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
    swift_release(v11);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    JWSSignedJSON.payload.getter(v39);
    sub_100007F8C(v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    v40 = v34;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v33, v50);
    v42 = *(_QWORD *)(v0 + 16);
    v41 = *(_QWORD *)(v0 + 24);
    sub_100008030(v48, (uint64_t *)&unk_1006335F0);
    swift_task_dealloc(v33);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v47);
    swift_task_dealloc(v57);
    swift_task_dealloc(v40);
    swift_task_dealloc(v48);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v37);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v42, v41);
  }
}

uint64_t sub_10011B310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  swift_errorRetain(v1);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010054BA90, v1, v7, 0, v2, 0xD00000000000005ALL, 0x800000010054B980, 0xD00000000000003ALL, 0x800000010054BAC0, 410);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v21);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v27, v25);
  sub_100008030(v23, (uint64_t *)&unk_1006335F0);
  v11 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 120);
  v28 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011B52C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLRequest(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011B5DC, 0, 0);
}

uint64_t sub_10011B5DC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, char, char);

  v1 = v0[9];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[8] + 16))(v1, v0[2], v0[7]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v1, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v4 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v2 = (_QWORD *)swift_task_alloc(unk_100643F74);
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_10011B6AC;
  return v4(v0[12], (uint64_t)_swiftEmptyArrayStorage, 1, 0);
}

uint64_t sub_10011B6AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 104);
  *(_QWORD *)(*v4 + 112) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = sub_10011B79C;
  }
  else
  {

    *(_QWORD *)(v8 + 120) = a2;
    *(_QWORD *)(v8 + 128) = a1;
    v10 = sub_10011B734;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_10011B734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v1, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

uint64_t sub_10011B79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054BB30, v1, v3, 0, v10, 0xD00000000000005ALL, 0x800000010054B980, 0x6F72662861746164, 0xEB00000000293A6DLL, 437);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v16);
  swift_task_dealloc(v2);
  swift_task_dealloc(v17);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011B990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_conversation + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_httpSession));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10011BA04()
{
  return type metadata accessor for DIPTopekaStaticWebService(0);
}

uint64_t type metadata accessor for DIPTopekaStaticWebService(uint64_t a1)
{
  uint64_t result;

  result = qword_100635400;
  if (!qword_100635400)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DIPTopekaStaticWebService);
  return result;
}

uint64_t sub_10011BA48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100524C80;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10011BACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_1006354A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011BB14(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[6];
  _OWORD v96[12];
  _BYTE v97[432];
  _QWORD v98[55];

  v91 = a1;
  v1 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v1 - 8);
  v90 = v1;
  __chkstk_darwin(v1);
  v88 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v94 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v83 = (char *)&v78 - v8;
  __chkstk_darwin(v7);
  v82 = (char *)&v78 - v9;
  v10 = sub_100004828(&qword_100630A48);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v78 - v14;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v92 = v16;
  v93 = v17;
  v18 = __chkstk_darwin(v16);
  v86 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v87 = (char *)&v78 - v20;
  v21 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v22 = __chkstk_darwin(v21);
  v85 = (uint64_t)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v84 = (uint64_t)&v78 - v25;
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v78 - v26);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v28 = qword_1006702A0;
  v29 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v30 = (uint64_t)&v29[4];
  v31 = v29 + 52;
  os_unfair_lock_lock(v29 + 52);
  sub_100139D14(v30, v28, v96);
  os_unfair_lock_unlock(v31);
  sub_10002581C((uint64_t)v96, (uint64_t)v95);
  sub_10001D410(v96);
  sub_10000806C(v95, v95[3]);
  sub_10010866C((uint64_t)v97);
  sub_100035A14((uint64_t)v97, (uint64_t)v98);
  if (sub_100035A5C((uint64_t)v98) == 1)
  {
    v32 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v95);
    v33 = defaultLogger()(v32);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "unable to fetch the baseURL from the config", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v94 + 8))(v6, v3);
    return 0;
  }
  v81 = v3;
  v37 = v98[5];
  v38 = v98[6];
  v39 = v98[7];
  v40 = v98[35];
  v79 = v98[36];
  v80 = v98[34];
  v41 = v98[37];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v95);
  v42 = (_QWORD *)((char *)v27 + v21[6]);
  *v42 = v39;
  v43 = enum case for DIPBackoffStrategy.exponential(_:);
  v44 = type metadata accessor for DIPBackoffStrategy(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  *v27 = v37;
  v27[1] = v38;
  *((_BYTE *)v27 + v21[7]) = 0;
  *((_BYTE *)v27 + v21[8]) = 0;
  *((_BYTE *)v27 + v21[9]) = 1;
  v45 = (_QWORD *)((char *)v27 + v21[10]);
  *v45 = 0;
  v45[1] = 0;
  if ((v91 & 1) == 0)
  {
    v46 = v92;
    v47 = v93;
    if (v40)
    {
      swift_bridgeObjectRetain(v40);
      v48 = v80;
      v49 = v81;
    }
    else
    {
      v48 = 0;
      v40 = 0xE000000000000000;
      v49 = v81;
    }
    sub_100035B1C((uint64_t)v97);
    URL.init(string:)(v48, v40);
    swift_bridgeObjectRelease(v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v15, 1, v46) == 1)
    {
      v51 = sub_100008030((uint64_t)v15, &qword_100630A48);
      v52 = v82;
      v53 = defaultLogger()(v51);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.debug.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        v57 = "EnvironmentManager: topeka server getWorkflow url is not a valid url";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v54, v55, v57, v56, 2u);
        swift_slowDealloc(v56, -1, -1);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
    v13 = v15;
LABEL_24:
    v61 = v87;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v87, v13, v46);
    v62 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v63 = v86;
    v62(v86, v61, v46);
    v64 = v84;
    sub_10011C23C((uint64_t)v27, v84);
    v65 = type metadata accessor for DIPTopekaStaticWebService(0);
    v60 = swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    v66 = ((uint64_t (*)(uint64_t, char *, uint64_t))v62)(v60 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_baseURL, v63, v46);
    v67 = v88;
    v68 = UUID.init()(v66);
    v69 = UUID.uuidString.getter(v68);
    v71 = v70;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v67, v90);
    v72 = (uint64_t *)(v60 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_conversation);
    *v72 = v69;
    v72[1] = v71;
    v73 = v85;
    sub_10011C23C(v64, v85);
    v74 = type metadata accessor for DIPHTTPSession(0);
    swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
    v75 = sub_1004E0CF4(v73);
    sub_100035DAC(v64, type metadata accessor for DIPHTTPSession.Configuration);
    v76 = *(void (**)(char *, uint64_t))(v93 + 8);
    v76(v63, v46);
    *(_QWORD *)(v60 + OBJC_IVAR____TtC8coreidvd25DIPTopekaStaticWebService_httpSession) = v75;
    v76(v61, v46);
    sub_100035DAC((uint64_t)v27, type metadata accessor for DIPHTTPSession.Configuration);
    return v60;
  }
  v46 = v92;
  v47 = v93;
  if (v41)
  {
    swift_bridgeObjectRetain(v41);
    v49 = v81;
    v50 = v79;
  }
  else
  {
    v50 = 0;
    v41 = 0xE000000000000000;
    v49 = v81;
  }
  sub_100035B1C((uint64_t)v97);
  URL.init(string:)(v50, v41);
  swift_bridgeObjectRelease(v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v13, 1, v46) != 1)
    goto LABEL_24;
  v58 = sub_100008030((uint64_t)v13, &qword_100630A48);
  v52 = v83;
  v59 = defaultLogger()(v58);
  v54 = Logger.logObject.getter(v59);
  v55 = static os_log_type_t.debug.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    v57 = "EnvironmentManager: topeka server resourcesBaseURL url is not a valid url";
    goto LABEL_21;
  }
LABEL_22:

  (*(void (**)(char *, uint64_t))(v94 + 8))(v52, v49);
  sub_100035DAC((uint64_t)v27, type metadata accessor for DIPHTTPSession.Configuration);
  return 0;
}

uint64_t sub_10011C23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DIPHTTPSession.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C280(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100013E24(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for JWSSignedJSON<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10011C2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v4 = sub_100004828(&qword_100635660);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = *(void **)(a2 + 24);
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + 40));
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 16) & ~v10;
    v12 = swift_allocObject(&unk_100608A18, v11 + v6, v10 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_10011D054;
    v15 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10011C4B8;
    aBlock[3] = &unk_100608A30;
    v13 = _Block_copy(aBlock);
    swift_release(v15);
    objc_msgSend(v8, "isAccountKeySigningKeyAvailableForAccountKeyIdentifier:completion:", v9, v13);
    _Block_release(v13);

  }
  else
  {
    LOBYTE(aBlock[0]) = 0;
    CheckedContinuation.resume(returning:)(aBlock, v4);
  }
}

uint64_t sub_10011C448(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (a2)
  {
    v5 = a2;
    swift_errorRetain(a2);
    v2 = sub_100004828(&qword_100635660);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v6 = a1 & 1;
    v4 = sub_100004828(&qword_100635660);
    return CheckedContinuation.resume(returning:)(&v6, v4);
  }
}

void sub_10011C4B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10011C518(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10011C58C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v1[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011C614, 0, 0);
}

uint64_t sub_10011C614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Attempting to create or retrieve Account key signing key", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v1 + 80) = v10;
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + 24);
    v12 = *(_QWORD *)(v11 + 32);
    v13 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v1 + 88) = v13;
    v13[2] = v11;
    v13[3] = v12;
    v13[4] = v10;
    v14 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    swift_bridgeObjectRetain(v10);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v1 + 96) = v15;
    v16 = sub_10011D0C8();
    *v15 = v1;
    v15[1] = sub_10011C884;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, 0, 0, 0xD00000000000001ELL, 0x800000010054BFA0, sub_10011D0BC, v13, v16);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 104))(v18, enum case for DIPError.Code.unableToCreateAccountKeySigningKeyLabel(_:), *(_QWORD *)(v1 + 32));
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100007F30();
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x800000010054BEE0, 0, v18, 0, v19, 0xD000000000000084, 0x800000010054BF10, 0xD00000000000001ELL, 0x800000010054BFA0, 114);
    swift_willThrow(v22);
    v23 = *(_QWORD *)(v1 + 48);
    swift_task_dealloc(*(_QWORD *)(v1 + 72));
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10011C884()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10011C940;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80));
    swift_task_dealloc(v5);
    v4 = sub_10011C8F8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10011C8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10011C940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10011C990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v14;

  v4 = sub_100004828(&qword_100635668);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(void **)(a2 + 24);
  v8 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100608A68, v10 + v6, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10011D16C;
  v14 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10011C518;
  aBlock[3] = &unk_100608A80;
  v12 = _Block_copy(aBlock);
  swift_release(v14);
  objc_msgSend(v7, "retrieveAccountKeySigningKeyForAccountKeyIdentifier:completion:", v8, v12);
  _Block_release(v12);

}

uint64_t sub_10011CAE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  char v61[8];
  uint64_t v62;

  v58 = a3;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for Logger(0);
  v13 = __chkstk_darwin(v57);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - v15;
  __chkstk_darwin(v14);
  v20 = (char *)&v55 - v19;
  if (a2)
  {
    v56 = v17;
    v21 = swift_errorRetain(a2);
    defaultLogger()(v21);
    swift_errorRetain(a2);
    v22 = swift_errorRetain(a2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v62 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_getErrorValue(a2, v61, v60);
      v27 = Error.localizedDescription.getter(v60[1], v60[2]);
      v29 = v28;
      v59 = sub_1000E3AC8(v27, v28, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v25 + 4);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received an error while retrieving the account key signing key %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v33 = *(void (**)(char *, uint64_t))(v56 + 8);
    v34 = v20;
    v35 = v57;
    v33(v34, v57);
    v62 = a2;
    v36 = sub_100004828(&qword_100635668);
    v37 = CheckedContinuation.resume(throwing:)(&v62, v36);
    v38 = defaultLogger()(v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Did encounter an error while retrieving the account key signing key for a given accountKeyIdentifier ", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v33(v16, v35);
  }
  else
  {
    if (a1)
    {
      v62 = (uint64_t)a1;
      v30 = a1;
      v31 = sub_100004828(&qword_100635668);
      return CheckedContinuation.resume(returning:)(&v62, v31);
    }
    v42 = v17;
    v43 = v18;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.unableToRetrieveAccountKeySigningKey(_:), v5);
    v44 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x800000010054BFC0, 0, v8, 0, v44, 0xD000000000000084, 0x800000010054BF10, 0xD00000000000001ELL, 0x800000010054BFA0, 137);
    v45 = sub_100007F30();
    v46 = swift_allocError(v9, v45, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v47, v12, v9);
    v62 = v46;
    v48 = sub_100004828(&qword_100635668);
    CheckedContinuation.resume(throwing:)(&v62, v48);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v50 = defaultLogger()(v49);
    v51 = v43;
    v52 = Logger.logObject.getter(v50);
    v53 = static os_log_type_t.debug.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Did encounter an error while retrieving the account key signing key for a given accountKeyIdentifier ", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v51, v57);
  }
  type metadata accessor for DaemonAnalytics(0);
  return static DaemonAnalytics.sendAccountKeySigningKeyUnavailableEvent()();
}

uint64_t sub_10011CFEC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for IdentityProofingDeviceMigrationManager()
{
  return objc_opt_self(_TtC8coreidvd38IdentityProofingDeviceMigrationManager);
}

uint64_t sub_10011D048()
{
  return sub_10011D110(&qword_100635660);
}

uint64_t sub_10011D054(char a1, uint64_t a2)
{
  sub_100004828(&qword_100635660);
  return sub_10011C448(a1, a2);
}

uint64_t sub_10011D0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011D0B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10011D0BC(uint64_t a1)
{
  uint64_t v1;

  sub_10011C990(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10011D0C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062FEB0;
  if (!qword_10062FEB0)
  {
    v1 = objc_opt_self(DCCredentialCryptoKey);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10062FEB0);
  }
  return result;
}

uint64_t sub_10011D104()
{
  return sub_10011D110(&qword_100635668);
}

uint64_t sub_10011D110(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100004828(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10011D16C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100004828(&qword_100635668) - 8) + 80);
  return sub_10011CAE4(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_10011D1C4(uint64_t a1)
{
  return sub_10011D4CC(a1, &qword_1006357D8, &qword_1006357E0, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

unint64_t sub_10011D1E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635780);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100038B24(v7, (uint64_t)&v16, &qword_100635788);
    v8 = v16;
    v9 = v17;
    result = sub_1004A8604(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10000491C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011D314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100004828((uint64_t *)&unk_100633440);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100004828(&qword_10062F790);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100038B24(v13, (uint64_t)v5, (uint64_t *)&unk_100633440);
    result = sub_1004A8668((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_10000491C(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011D4B0(uint64_t a1)
{
  return sub_10011D4CC(a1, &qword_10062FCD0, &qword_100635840, (uint64_t (*)(_QWORD))&type metadata accessor for IQACode);
}

unint64_t sub_10011D4CC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t *v34;

  v33 = a4;
  v34 = a2;
  v6 = sub_100004828(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v12;
  }
  sub_100004828(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = (char *)v9 + *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v32 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_100038B24(v17, (uint64_t)v9, v34);
    v19 = *v9;
    v20 = v9[1];
    result = sub_1004A8604(*v9, v20);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (uint64_t *)(v12[6] + 16 * result);
    *v24 = v19;
    v24[1] = v20;
    v25 = v12[7];
    v26 = v33(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v14, v26);
    v27 = v12[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011D668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635898);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_1004A8700((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v14;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011D764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635960);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1004A8604(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011D880(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635820);
}

unint64_t sub_10011D88C(uint64_t a1)
{
  return sub_10011EBA0(a1, &qword_100635968, &qword_1006358B0, type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
}

unint64_t sub_10011D8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635818);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((unsigned __int8 *)v6 - 8);
    v8 = *v6;
    swift_bridgeObjectRetain(*v6);
    result = sub_1004A87AC(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011D9A8(uint64_t a1)
{
  return sub_10011F110(a1, &qword_100635810);
}

unint64_t sub_10011D9B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635808);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_1004A8760((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011DABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100004828(&qword_1006357C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100038B24(v7, (uint64_t)&v17, &qword_1006357C8);
    v8 = v17;
    v9 = v18;
    result = sub_1004A8604(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_100008018(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011DBFC(uint64_t a1)
{
  return sub_10011E200(a1, &qword_1006358F8, &qword_100635900, (uint64_t (*)(char *))sub_1004A8820, (uint64_t (*)(_QWORD))&type metadata accessor for IdentityKeyGenerationOption);
}

unint64_t sub_10011DC20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828((uint64_t *)&unk_100643FD0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1004A8604(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011DD40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_1006357F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1004A8604(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011DE50(uint64_t a1)
{
  return sub_10011E3A4(a1, &qword_1006357E8);
}

unint64_t sub_10011DE5C(uint64_t a1)
{
  return sub_10011E0A8(a1, &qword_1006358C8, &qword_1006358D0, (uint64_t (*)(uint64_t))sub_1004A8A40);
}

unint64_t sub_10011DE78(uint64_t a1)
{
  return sub_10011EFCC(a1, &qword_100635850);
}

unint64_t sub_10011DE84(uint64_t a1)
{
  return sub_10011E3A4(a1, &qword_100635848);
}

unint64_t sub_10011DE90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }
  sub_100004828(&qword_100635988);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = *(_OWORD *)(a1 + 176);
  v44 = *(_OWORD *)(a1 + 160);
  v45 = v6;
  v46 = *(_QWORD *)(a1 + 192);
  v7 = *(_OWORD *)(a1 + 112);
  v40 = *(_OWORD *)(a1 + 96);
  v41 = v7;
  v8 = *(_OWORD *)(a1 + 144);
  v42 = *(_OWORD *)(a1 + 128);
  v43 = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v36 = *(_OWORD *)(a1 + 32);
  v37 = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v38 = *(_OWORD *)(a1 + 64);
  v39 = v10;
  v12 = *((_QWORD *)&v36 + 1);
  v11 = v36;
  sub_10012D068(&v36);
  result = sub_1004A8604(v11, v12);
  if ((v14 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release(v4);
    goto LABEL_11;
  }
  v15 = 200;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v16 = (uint64_t *)(v4[6] + 16 * result);
    *v16 = v11;
    v16[1] = v12;
    v17 = v4[7] + 152 * result;
    v18 = v38;
    *(_OWORD *)v17 = v37;
    *(_OWORD *)(v17 + 16) = v18;
    v19 = v39;
    v20 = v40;
    v21 = v42;
    *(_OWORD *)(v17 + 64) = v41;
    *(_OWORD *)(v17 + 80) = v21;
    *(_OWORD *)(v17 + 32) = v19;
    *(_OWORD *)(v17 + 48) = v20;
    v22 = v43;
    v23 = v44;
    v24 = v45;
    *(_QWORD *)(v17 + 144) = v46;
    *(_OWORD *)(v17 + 112) = v23;
    *(_OWORD *)(v17 + 128) = v24;
    *(_OWORD *)(v17 + 96) = v22;
    v25 = v4[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      break;
    v4[2] = v27;
    if (!--v5)
      goto LABEL_9;
    v28 = v15 + 168;
    v29 = (__int128 *)(a1 + v15);
    v30 = v29[9];
    v44 = v29[8];
    v45 = v30;
    v46 = *((_QWORD *)v29 + 20);
    v31 = v29[5];
    v40 = v29[4];
    v41 = v31;
    v32 = v29[7];
    v42 = v29[6];
    v43 = v32;
    v33 = v29[1];
    v36 = *v29;
    v37 = v33;
    v34 = v29[3];
    v38 = v29[2];
    v39 = v34;
    v12 = *((_QWORD *)&v36 + 1);
    v11 = v36;
    sub_10012D068(&v36);
    result = sub_1004A8604(v11, v12);
    v15 = v28;
    if ((v35 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_10011E064(uint64_t a1)
{
  return sub_10011D4CC(a1, &qword_100632468, &qword_100635800, (uint64_t (*)(_QWORD))&type metadata accessor for RecipientEncryptionCertificate);
}

unint64_t sub_10011E080(uint64_t a1)
{
  return sub_10011E3A4(a1, &qword_100635990);
}

unint64_t sub_10011E08C(uint64_t a1)
{
  return sub_10011E0A8(a1, &qword_100635828, &qword_100635830, (uint64_t (*)(uint64_t))sub_1004A8A40);
}

unint64_t sub_10011E0A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100038B24(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_10000491C(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E1D0(uint64_t a1)
{
  return sub_10011E3A4(a1, &qword_1006359C8);
}

unint64_t sub_10011E1DC(uint64_t a1)
{
  return sub_10011E200(a1, &qword_100635970, &qword_100635978, (uint64_t (*)(char *))sub_1004A8B68, (uint64_t (*)(_QWORD))&type metadata accessor for MobileDocumentElement.Element);
}

unint64_t sub_10011E200(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t (*v36)(char *);

  v35 = a5;
  v36 = a4;
  v8 = sub_100004828(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v32 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v32);
    return (unint64_t)v14;
  }
  sub_100004828(a3);
  v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_9;
  v16 = &v11[*(int *)(v8 + 48)];
  v17 = a1;
  v18 = v13 + 64;
  v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v34 = v17;
  v20 = v17 + v19;
  v21 = *(_QWORD *)(v9 + 72);
  swift_retain(v13);
  while (1)
  {
    sub_100038B24(v20, (uint64_t)v11, a2);
    result = v36(v11);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    *(_QWORD *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v25 = v14[6];
    v26 = v35(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v11, v26);
    v27 = (_QWORD *)(v14[7] + 16 * v24);
    v28 = *((_QWORD *)v16 + 1);
    *v27 = *(_QWORD *)v16;
    v27[1] = v28;
    v29 = v14[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_12;
    v14[2] = v31;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      v32 = v34;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011E3A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_1004A8604(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E4B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635908);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100038B24(v7, (uint64_t)&v14, &qword_100635910);
    v8 = v14;
    result = sub_1004A8C00(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10000491C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E5E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635928);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v23 = v3 + 64;
  swift_retain(v3);
  v22 = v1;
  v6 = (uint64_t *)(v1 + 72);
  while (1)
  {
    v24 = v5;
    v7 = *(v6 - 5);
    v8 = *(v6 - 4);
    v10 = *(v6 - 3);
    v9 = *(v6 - 2);
    v11 = *v6;
    v12 = v6[2];
    v29 = v6[1];
    v30 = *(v6 - 1);
    v28 = *((_BYTE *)v6 + 24);
    v13 = v6[5];
    v14 = v6[7];
    v26 = v6[6];
    v27 = v6[4];
    v25 = *((_BYTE *)v6 + 64);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    result = sub_1004A8604(v7, v8);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v23 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v4[6] + 16 * result);
    *v17 = v7;
    v17[1] = v8;
    v18 = v4[7] + 96 * result;
    *(_QWORD *)v18 = v10;
    *(_QWORD *)(v18 + 8) = v9;
    *(_QWORD *)(v18 + 16) = v30;
    *(_QWORD *)(v18 + 24) = v11;
    *(_QWORD *)(v18 + 32) = v29;
    *(_QWORD *)(v18 + 40) = v12;
    *(_BYTE *)(v18 + 48) = v28;
    *(_QWORD *)(v18 + 56) = v27;
    *(_QWORD *)(v18 + 64) = v13;
    *(_QWORD *)(v18 + 72) = v26;
    *(_QWORD *)(v18 + 80) = v14;
    *(_BYTE *)(v18 + 88) = v25;
    v19 = v4[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v4[2] = v21;
    v6 += 14;
    v5 = v24 - 1;
    if (v24 == 1)
    {
      swift_release(v4);
      v1 = v22;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E79C(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635890);
}

unint64_t sub_10011E7A8(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635938);
}

unint64_t sub_10011E7B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635950);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_1004A8A40();
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E8BC(uint64_t a1)
{
  return sub_10011F110(a1, &qword_100635948);
}

unint64_t sub_10011E8C8(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635958);
}

unint64_t sub_10011E8D4(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635930);
}

unint64_t sub_10011E8E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635940);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1004A8604(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011E9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100004828(&qword_100635918);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100004828(&qword_100635920);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100038B24(v13, (uint64_t)v5, &qword_100635918);
    result = sub_1004A8C4C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for ECIESOption(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011EB84(uint64_t a1)
{
  return sub_10011EBA0(a1, &qword_1006359A0, &qword_100635998, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata);
}

unint64_t sub_10011EBA0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v34 = a2;
  v7 = sub_100004828(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v13;
  }
  sub_100004828(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = (uint64_t)v10 + *(int *)(v7 + 48);
  v32 = a1;
  v33 = v15;
  v16 = v12 + 64;
  v17 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v18 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_100038B24(v17, (uint64_t)v10, v34);
    v19 = *v10;
    v20 = v10[1];
    result = sub_1004A8604(*v10, v20);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (uint64_t *)(v13[6] + 16 * result);
    *v24 = v19;
    v24[1] = v20;
    v25 = v13[7];
    v26 = a4(0);
    result = sub_100038AE0(v33, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, a4);
    v27 = v13[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v13[2] = v29;
    v17 += v18;
    if (!--v14)
    {
      swift_release(v13);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011ED38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_1006358E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100038B24(v7, (uint64_t)v16, &qword_1006358F0);
    result = sub_1004A85D4((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10000491C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011EE78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_1006358E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 64);
  while (1)
  {
    v7 = *(v6 - 4);
    v8 = *(v6 - 3);
    v9 = *(v6 - 2);
    v10 = *(v6 - 1);
    v11 = *v6;
    swift_bridgeObjectRetain(*v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_1004A8604(v7, v8);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = v8;
    v15 = (_QWORD *)(v4[7] + 24 * result);
    *v15 = v9;
    v15[1] = v10;
    v15[2] = v11;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6 += 5;
    v4[2] = v18;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011EFC0(uint64_t a1)
{
  return sub_10011EFCC(a1, &qword_1006358A0);
}

unint64_t sub_10011EFCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(v2);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v21 = v2;
  v7 = (uint64_t *)(v2 + 40);
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = v7[1];
    v11 = v7[2];
    v13 = v7[3];
    v12 = v7[4];
    swift_bridgeObjectRetain(*v7);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    result = sub_1004A8604(v8, v9);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v16 = (uint64_t *)(v5[6] + 16 * result);
    *v16 = v8;
    v16[1] = v9;
    v17 = (uint64_t *)(v5[7] + 32 * result);
    *v17 = v10;
    v17[1] = v11;
    v17[2] = v13;
    v17[3] = v12;
    v18 = v5[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v5[2] = v20;
    v7 += 6;
    if (!--v6)
    {
      swift_release(v5);
      v2 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011F104(uint64_t a1)
{
  return sub_10011F110(a1, &qword_100635838);
}

unint64_t sub_10011F110(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_1004A8604(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011F224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_1006358C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(*v6);
    swift_bridgeObjectRetain(v8);
    result = sub_1004A8604(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10011F344(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100004828(&qword_100635880);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100004828(&qword_100635870);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100038B24(v13, (uint64_t)v5, &qword_100635880);
    result = sub_1004A8D3C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for IQCType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10011F4D8(uint64_t a1)
{
  return sub_10011F4E4(a1, &qword_100635888);
}

unint64_t sub_10011F4E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    result = sub_1004A8604(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10011F5F8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject(&unk_100608AF0, 32, 7);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  v5 = swift_allocObject(&unk_100608B18, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100027AD4;
  *(_QWORD *)(v5 + 24) = v4;
  *a2 = sub_100027AD4;
  a2[1] = (uint64_t (*)())v5;
  v6 = swift_allocObject(&unk_100608B40, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100027AD4;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)a1 = sub_10002B224;
  *(_QWORD *)(a1 + 8) = v6;
  return swift_retain(v4);
}

uint64_t sub_10011F6A8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10011F6C8(uint64_t (**a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_release(a1[1]);
  v6 = swift_allocObject(&unk_100608B68, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *a1 = sub_10002B224;
  a1[1] = (uint64_t (*)())v6;
  return swift_retain(a3);
}

uint64_t sub_10011F730(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 176) = a4;
  *(_QWORD *)(v5 + 16) = a1;
  v6 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v5 + 40) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 48) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 56) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 64) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 72) = swift_task_alloc(v8);
  v9 = type metadata accessor for MobileDocumentReaderSession.State(0);
  *(_QWORD *)(v5 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 88) = v10;
  *(_QWORD *)(v5 + 96) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011F7DC, 0, 0);
}

uint64_t sub_10011F7DC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  _QWORD *v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)();
  uint64_t v44;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_10011F5F8(v2, &v43);
  os_unfair_lock_unlock(v3);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_BYTE *)(v0 + 176);
  v9 = v43;
  v8 = v44;
  v10 = enum case for MobileDocumentReaderSession.State.ready(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  *(_QWORD *)(v0 + 112) = v11;
  v11(v4, v10, v6);
  ((void (*)(uint64_t))v9)(v4);
  swift_release(v8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 120) = v12;
  v13 = v12(v4, v6);
  if ((v7 & 1) != 0)
  {
    ContinuousClock.init()(v13);
    v42 = (char *)&dword_100635728 + dword_100635728;
    v14 = (_QWORD *)swift_task_alloc(unk_10063572C);
    *(_QWORD *)(v0 + 128) = v14;
    *v14 = v0;
    v14[1] = sub_10011FB14;
LABEL_3:
    v15 = 3000000000000000000;
    return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v42)(v15, 0, 0, 0, 1);
  }
  v17 = *(os_unfair_lock_s **)(v0 + 104);
  v18 = v17 + 8;
  v19 = (uint64_t)&v17[4];
  os_unfair_lock_lock(v17 + 8);
  sub_10011F5F8(v19, &v43);
  os_unfair_lock_unlock(v18);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 120);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_BYTE *)(v0 + 176);
  v25 = v43;
  v24 = v44;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 112))(v21, enum case for MobileDocumentReaderSession.State.connecting(_:), v22);
  ((void (*)(uint64_t))v25)(v21);
  swift_release(v24);
  v26 = v20(v21, v22);
  if ((v23 & 1) != 0)
  {
    ContinuousClock.init()(v26);
    v42 = (char *)&dword_100635728 + dword_100635728;
    v27 = (_QWORD *)swift_task_alloc(unk_10063572C);
    *(_QWORD *)(v0 + 144) = v27;
    *v27 = v0;
    v27[1] = sub_10011FE5C;
    v15 = 1000000000000000000;
    return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v42)(v15, 0, 0, 0, 1);
  }
  v28 = *(os_unfair_lock_s **)(v0 + 104);
  v29 = v28 + 8;
  v30 = (uint64_t)&v28[4];
  os_unfair_lock_lock(v28 + 8);
  sub_10011F5F8(v30, &v43);
  os_unfair_lock_unlock(v29);
  v31 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 120);
  v32 = *(_QWORD *)(v0 + 96);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_BYTE *)(v0 + 176);
  v36 = v43;
  v35 = v44;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 112))(v32, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v33);
  ((void (*)(uint64_t))v36)(v32);
  swift_release(v35);
  v37 = v31(v32, v33);
  if ((v34 & 1) != 0)
  {
    ContinuousClock.init()(v37);
    v42 = (char *)&dword_100635728 + dword_100635728;
    v38 = (_QWORD *)swift_task_alloc(unk_10063572C);
    *(_QWORD *)(v0 + 160) = v38;
    *v38 = v0;
    v38[1] = sub_1001200D8;
    goto LABEL_3;
  }
  sub_100120238(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
  v39 = *(_QWORD *)(v0 + 64);
  v40 = *(_QWORD *)(v0 + 72);
  v41 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011FB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_10011FE00;
  else
    v6 = sub_10011FB98;
  return swift_task_switch(v6, 0, 0);
}

void sub_10011FB98()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)();
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(os_unfair_lock_s **)(v0 + 104);
  v3 = v2 + 8;
  v4 = (uint64_t)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_10011F5F8(v4, &v29);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_BYTE *)(v0 + 176);
    v10 = v29;
    v9 = v30;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 112))(v6, enum case for MobileDocumentReaderSession.State.connecting(_:), v7);
    ((void (*)(uint64_t))v10)(v6);
    swift_release(v9);
    v11 = v5(v6, v7);
    if ((v8 & 1) != 0)
    {
      ContinuousClock.init()(v11);
      v28 = (char *)&dword_100635728 + dword_100635728;
      v12 = (_QWORD *)swift_task_alloc(unk_10063572C);
      *(_QWORD *)(v0 + 144) = v12;
      *v12 = v0;
      v12[1] = sub_10011FE5C;
      v13 = 1000000000000000000;
LABEL_4:
      ((void (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v28)(v13, 0, 0, 0, 1);
      return;
    }
    v14 = *(os_unfair_lock_s **)(v0 + 104);
    v15 = v14 + 8;
    v16 = (uint64_t)&v14[4];
    os_unfair_lock_lock(v14 + 8);
    sub_10011F5F8(v16, &v29);
    os_unfair_lock_unlock(v15);
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = *(_BYTE *)(v0 + 176);
    v22 = v29;
    v21 = v30;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 112))(v18, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v19);
    ((void (*)(uint64_t))v22)(v18);
    swift_release(v21);
    v23 = v17(v18, v19);
    if ((v20 & 1) != 0)
    {
      ContinuousClock.init()(v23);
      v28 = (char *)&dword_100635728 + dword_100635728;
      v24 = (_QWORD *)swift_task_alloc(unk_10063572C);
      *(_QWORD *)(v0 + 160) = v24;
      *v24 = v0;
      v24[1] = sub_1001200D8;
      v13 = 3000000000000000000;
      goto LABEL_4;
    }
    sub_100120238(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
    v25 = *(_QWORD *)(v0 + 64);
    v26 = *(_QWORD *)(v0 + 72);
    v27 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    swift_task_dealloc(v27);
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011FE00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011FE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_10012007C;
  else
    v6 = sub_10011FEE0;
  return swift_task_switch(v6, 0, 0);
}

void sub_10011FEE0()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t (*v17[3])();

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(os_unfair_lock_s **)(v0 + 104);
  v3 = v2 + 8;
  v4 = (uint64_t)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_10011F5F8(v4, v17);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_BYTE *)(v0 + 176);
    v10 = v17[0];
    v9 = v17[1];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 112))(v6, enum case for MobileDocumentReaderSession.State.awaitingApproval(_:), v7);
    ((void (*)(uint64_t))v10)(v6);
    swift_release(v9);
    v11 = v5(v6, v7);
    if ((v8 & 1) != 0)
    {
      ContinuousClock.init()(v11);
      v16 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100635728 + dword_100635728);
      v12 = (_QWORD *)swift_task_alloc(unk_10063572C);
      *(_QWORD *)(v0 + 160) = v12;
      *v12 = v0;
      v12[1] = sub_1001200D8;
      v16(3000000000000000000, 0, 0, 0, 1);
    }
    else
    {
      sub_100120238(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
      v13 = *(_QWORD *)(v0 + 64);
      v14 = *(_QWORD *)(v0 + 72);
      v15 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 96));
      swift_task_dealloc(v14);
      swift_task_dealloc(v13);
      swift_task_dealloc(v15);
      (*(void (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_10012007C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001200D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1001201DC;
  else
    v6 = sub_10012015C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10012015C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100120238(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001201DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100120238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(void);
  uint64_t v117;
  uint64_t *v118;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v120;
  unint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  char v125;
  unint64_t v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t (*v230)(char *, uint64_t);
  uint64_t v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  void (*v239)(char *, uint64_t);
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  _QWORD *v249;

  v204 = a2;
  v227 = type metadata accessor for DIPError.Code(0);
  v226 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v228 = (char *)&v198 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100635740);
  __chkstk_darwin(v4);
  v202 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_100635748);
  __chkstk_darwin(v6);
  v201 = (char *)&v198 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements(0);
  v200 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v242 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = sub_100004828(&qword_100634030);
  v203 = *(_QWORD *)(v241 - 8);
  v9 = __chkstk_darwin(v241);
  v233 = (uint64_t *)((char *)&v198 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v232 = (uint64_t *)((char *)&v198 - v12);
  __chkstk_darwin(v11);
  v234 = (uint64_t *)((char *)&v198 - v13);
  v211 = type metadata accessor for MobileDocumentReaderRequest.Document.RequestType(0);
  v216 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v212 = (char *)&v198 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for MobileDocumentIssuer(0);
  v205 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v220 = (char *)&v198 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for ISO18013Response.Status(0);
  v208 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v209 = (char *)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for ISO18013Response(0);
  v213 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v222 = (char *)&v198 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828(&qword_100635750);
  __chkstk_darwin(v18);
  v207 = (char *)&v198 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  __chkstk_darwin(v20);
  v206 = (char *)&v198 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for ISO18013Response.Document(0);
  v223 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v218 = (char *)&v198 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for MobileDocumentType(0);
  v225 = *(_QWORD *)(v247 - 8);
  v23 = __chkstk_darwin(v247);
  v246 = (uint64_t)&v198 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v235 = (char *)&v198 - v25;
  v238 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v236 = *(_QWORD *)(v238 - 8);
  __chkstk_darwin(v238);
  v237 = (char *)&v198 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004828(&qword_100635758);
  __chkstk_darwin(v27);
  v239 = (void (*)(char *, uint64_t))((char *)&v198 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = type metadata accessor for COSE_Sign1(0);
  v243 = *(_QWORD *)(v29 - 8);
  v244 = v29;
  v30 = __chkstk_darwin(v29);
  v221 = (char *)&v198 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v229 = (char *)&v198 - v32;
  v33 = type metadata accessor for MobileDocumentReaderRequest.Document(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v240 = (char *)&v198 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v245 = (char *)&v198 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v198 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v198 - v43;
  v45 = __chkstk_darwin(v42);
  v47 = (char *)&v198 - v46;
  v48 = __chkstk_darwin(v45);
  v50 = (char *)&v198 - v49;
  v51 = MobileDocumentReaderRequest.document.getter(v48);
  v52 = MobileDocumentReaderRequest.Document.retainedElements.getter(v51);
  v53 = *(uint64_t (**)(char *, uint64_t))(v34 + 8);
  v54 = v53(v50, v33);
  v55 = MobileDocumentReaderRequest.document.getter(v54);
  v56 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter(v55);
  v53(v47, v33);
  v249 = (_QWORD *)v52;
  sub_1001224FC(v56);
  v57 = a1;
  v58 = v249;
  v59 = v248;
  v60 = sub_100121720(a1);
  if (v59)
    return swift_bridgeObjectRelease(v58);
  v62 = v60;
  v63 = v235;
  v224 = v41;
  v230 = v53;
  v231 = v33;
  v248 = (char *)v57;
  v64 = v237;
  (*(void (**)(char *, _QWORD, uint64_t))(v236 + 104))(v237, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v238);
  v65 = (uint64_t)v239;
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:payload:signature:includeCBORTag:)(v64, 0, 0xF000000000000000, 0, 0xF000000000000000, 0, 0xC000000000000000, 0);
  v66 = v243;
  v67 = v244;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v243 + 48))(v65, 1, v244) == 1)
  {
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v58);
    sub_100008030(v65, &qword_100635758);
    v68 = v228;
    (*(void (**)(char *, _QWORD, uint64_t))(v226 + 104))(v228, enum case for DIPError.Code.internalError(_:), v227);
    v69 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v70, v71, 0, 0);
    v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010054C060, 0, v68, 0, v69, 0xD00000000000007ELL, 0x800000010054C0A0, 0x65736E6F70736572, 0xEE00293A726F6628, 70);
    return swift_willThrow(v72);
  }
  v238 = (uint64_t)v58;
  v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 32))(v229, v65, v67);
  v74 = MobileDocumentReaderRequest.document.getter(v73);
  MobileDocumentReaderRequest.Document.type.getter(v74);
  v75 = v230(v44, v231);
  v199 = MobileDocumentType.iso18013Identifier.getter(v75);
  v237 = v76;
  v239 = *(void (**)(char *, uint64_t))(v225 + 8);
  v239(v63, v247);
  v249 = _swiftEmptyArrayStorage;
  v77 = v238;
  v78 = *(_QWORD *)(v238 + 16);
  if (v78)
  {
    v236 = v62;
    v79 = *(_QWORD *)(type metadata accessor for MobileDocumentElement(0) - 8);
    v80 = v77 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
    v81 = *(_QWORD *)(v79 + 72);
    swift_bridgeObjectRetain(v77);
    v83 = v231;
    do
    {
      v84 = v224;
      v85 = MobileDocumentReaderRequest.document.getter(v82);
      MobileDocumentReaderRequest.Document.type.getter(v85);
      v86 = (void (*)(char *, uint64_t))v230;
      v87 = v230(v84, v83);
      v88 = v245;
      v89 = MobileDocumentReaderRequest.document.getter(v87);
      v90 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter(v89);
      v86(v88, v83);
      v91 = v246;
      v92 = sub_10022CAE4(v246, v90 & 1);
      v239((char *)v91, v247);
      v82 = sub_100122670(v92);
      v80 += v81;
      --v78;
    }
    while (v78);
    v93 = swift_bridgeObjectRelease_n(v238, 2);
    v94 = v249;
    v62 = v236;
  }
  else
  {
    v93 = swift_bridgeObjectRelease(v238);
    v94 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin(v93);
  v95 = (char *)sub_10012CD0C((uint64_t)v94, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_10012330C);
  v96 = (unint64_t)v222;
  v97 = v223;
  v236 = 0;
  v98 = v241;
  v99 = (uint64_t)v242;
  v100 = v240;
  v101 = v221;
  v235 = v95;
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v94);
  v102 = (_QWORD *)sub_10011E3A4((uint64_t)_swiftEmptyArrayStorage, &qword_100635778);
  v103 = v235;
  v104 = *((_QWORD *)v235 + 2);
  if (!v104)
  {
    v139 = v244;
LABEL_28:
    swift_bridgeObjectRelease(v103);
    (*(void (**)(char *, char *, uint64_t))(v243 + 16))(v101, v229, v139);
    v140 = v101;
    v141 = v206;
    ISO18013Response.IssuerSigned.init(namespaces:issuerAuth:)(v102, v140);
    v142 = type metadata accessor for ISO18013Response.DeviceSigned(0);
    v143 = v207;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 56))(v207, 1, 1, v142);
    v144 = v218;
    v145 = ISO18013Response.Document.init(docType:issuerSigned:deviceSigned:errors:)(v199, v237, v141, v143, 0);
    v146 = static ISO18013Response.supportedVersion.getter(v145);
    v148 = v147;
    v149 = sub_100004828(&qword_100635760);
    v150 = *(_QWORD *)(v97 + 72);
    v151 = *(unsigned __int8 *)(v97 + 80);
    v152 = (v151 + 32) & ~v151;
    v153 = swift_allocObject(v149, v152 + v150, v151 | 7);
    *(_OWORD *)(v153 + 16) = xmmword_10051FFB0;
    v154 = v153 + v152;
    v155 = v223;
    (*(void (**)(uint64_t, char *, uint64_t))(v223 + 16))(v154, v144, v219);
    v156 = v209;
    (*(void (**)(char *, _QWORD, uint64_t))(v208 + 104))(v209, enum case for ISO18013Response.Status.ok(_:), v210);
    ISO18013Response.init(version:documents:documentErrors:status:)(v146, v148, v153, 0, v156);
    v157 = MobileDocumentIssuer.init(jurisdictionCode:)(1953719668, 0xE400000000000000);
    v158 = v248;
    v159 = MobileDocumentReaderRequest.document.getter(v157);
    v160 = v212;
    MobileDocumentReaderRequest.Document.requestType.getter(v159);
    v230(v100, v231);
    v161 = v216;
    v162 = v211;
    v163 = (*(uint64_t (**)(_QWORD *, uint64_t))(v216 + 88))(v160, v211);
    if (v163 == enum case for MobileDocumentReaderRequest.Document.RequestType.displayOnly(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v161 + 96))(v160, v162);
      swift_bridgeObjectRelease(*v160);
      v164 = v214;
      v165 = v217;
      v166 = v205;
      v167 = v215;
    }
    else
    {
      v165 = v217;
      v167 = v215;
      if (v163 == enum case for MobileDocumentReaderRequest.Document.RequestType.dataTransfer(_:))
      {
        (*(void (**)(_QWORD *, uint64_t))(v161 + 96))(v160, v162);
        v169 = v160;
        v170 = *v160;
        swift_bridgeObjectRelease(v169[1]);
        swift_bridgeObjectRelease(v170);
        v171 = type metadata accessor for CBOREncoder(0);
        v172 = swift_allocObject(v171, *(unsigned int *)(v171 + 48), *(unsigned __int16 *)(v171 + 52));
        v173 = CBOREncoder.init()(v172);
        v174 = sub_100004790(&qword_100635768, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013Response, (uint64_t)&protocol conformance descriptor for ISO18013Response);
        v175 = v236;
        v176 = dispatch thunk of CBOREncoder.encode<A>(_:)(v96, v165, v174);
        v236 = v175;
        if (v175)
        {
          swift_release(v173);
          (*(void (**)(char *, uint64_t))(v205 + 8))(v220, v214);
          goto LABEL_35;
        }
        v192 = v176;
        v193 = v177;
        swift_release(v173);
        v194 = v201;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v201, 1, 1, v167);
        v195 = v205;
        v196 = v202;
        v183 = v220;
        v164 = v214;
        (*(void (**)(char *, char *, uint64_t))(v205 + 16))(v202, v220, v214);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v196, 0, 1, v164);
        v197 = v193;
        v166 = v195;
        MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)(v192, v197, 0, 0xC000000000000000, v194, v196);
LABEL_41:
        (*(void (**)(char *, uint64_t))(v166 + 8))(v183, v164);
        (*(void (**)(unint64_t, uint64_t))(v213 + 8))(v96, v217);
        (*(void (**)(char *, uint64_t))(v223 + 8))(v218, v219);
        return (*(uint64_t (**)(char *, uint64_t))(v243 + 8))(v229, v244);
      }
      v164 = v214;
      if (v163 != enum case for MobileDocumentReaderRequest.Document.RequestType.validatedDataTransfer(_:))
      {
        v184 = v217;
        v185 = v228;
        (*(void (**)(char *, _QWORD, uint64_t))(v226 + 104))(v228, enum case for DIPError.Code.internalError(_:), v227);
        v186 = v160;
        v187 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v188 = v162;
        v189 = type metadata accessor for DIPError(0);
        v190 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v189, v190, 0, 0);
        v191 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054C120, 0, v185, 0, v187, 0xD00000000000007ELL, 0x800000010054C0A0, 0x65736E6F70736572, 0xEE00293A726F6628, 118);
        swift_willThrow(v191);
        (*(void (**)(char *, uint64_t))(v205 + 8))(v220, v164);
        (*(void (**)(unint64_t, uint64_t))(v213 + 8))(v96, v184);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v218, v219);
        (*(void (**)(char *, uint64_t))(v243 + 8))(v229, v244);
        return (*(uint64_t (**)(_QWORD *, uint64_t))(v216 + 8))(v186, v188);
      }
      (*(void (**)(_QWORD *, uint64_t))(v216 + 96))(v160, v162);
      swift_bridgeObjectRelease(*v160);
      swift_bridgeObjectRelease(v160[1]);
      v178 = (char *)v160 + *(int *)(sub_100004828(&qword_100635770) + 64);
      v179 = type metadata accessor for MobileDocumentReaderRequest.Document.ValidationOptions(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v179 - 8) + 8))(v178, v179);
      v166 = v205;
    }
    v168 = v236;
    sub_100467A40(v96, v158, v99);
    v236 = v168;
    if (v168)
    {
      (*(void (**)(char *, uint64_t))(v166 + 8))(v220, v164);
LABEL_35:
      (*(void (**)(unint64_t, uint64_t))(v213 + 8))(v96, v165);
      (*(void (**)(char *, uint64_t))(v155 + 8))(v218, v219);
      return (*(uint64_t (**)(char *, uint64_t))(v243 + 8))(v229, v244);
    }
    v180 = v200;
    v181 = v201;
    (*(void (**)(char *, uint64_t, uint64_t))(v200 + 16))(v201, v99, v167);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v181, 0, 1, v167);
    v182 = v202;
    v183 = v220;
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v202, v220, v164);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v182, 0, 1, v164);
    MobileDocumentReaderResponse.init(responseData:sessionTranscript:mobileIdentityDocumentElements:issuer:)(0, 0xF000000000000000, 0, 0xF000000000000000, v181, v182);
    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v99, v215);
    goto LABEL_41;
  }
  v105 = (uint64_t)&v235[(*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80)];
  v238 = *(_QWORD *)(v203 + 72);
  swift_bridgeObjectRetain(v235);
  v106 = v234;
  while (1)
  {
    v246 = v105;
    v247 = v104;
    sub_100038B24(v105, (uint64_t)v106, &qword_100634030);
    v107 = *(int *)(v98 + 48);
    v108 = v232;
    v109 = (char *)v232 + v107;
    v110 = (char *)v106 + v107;
    v111 = *v106;
    v112 = v106[1];
    *v232 = *v106;
    v108[1] = v112;
    v113 = v98;
    v114 = sub_100004828(&qword_100630DE8);
    v115 = *(_QWORD *)(v114 - 8);
    v116 = *(void (**)(void))(v115 + 16);
    v245 = v109;
    ((void (*)(char *, char *, uint64_t))v116)(v109, v110, v114);
    v117 = *(int *)(v113 + 48);
    v118 = v233;
    *v233 = v111;
    v118[1] = v112;
    v239 = (void (*)(char *, uint64_t))((char *)v118 + v117);
    v116();
    swift_bridgeObjectRetain(v112);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v102);
    v249 = v102;
    v121 = sub_1004A8604(v111, v112);
    v122 = v102[2];
    v123 = (v120 & 1) == 0;
    v124 = v122 + v123;
    if (__OFADD__(v122, v123))
      break;
    v125 = v120;
    if (v102[3] >= v124)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10012AC38(&qword_100635778);
        v102 = v249;
      }
    }
    else
    {
      sub_100125FCC(v124, isUniquelyReferenced_nonNull_native, &qword_100635778);
      v102 = v249;
      v126 = sub_1004A8604(v111, v112);
      if ((v125 & 1) != (v127 & 1))
        goto LABEL_45;
      v121 = v126;
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((v125 & 1) == 0)
    {
      v102[(v121 >> 6) + 8] |= 1 << v121;
      v128 = (uint64_t *)(v102[6] + 16 * v121);
      *v128 = v111;
      v128[1] = v112;
      *(_QWORD *)(v102[7] + 8 * v121) = _swiftEmptyArrayStorage;
      v129 = v102[2];
      v130 = __OFADD__(v129, 1);
      v131 = v129 + 1;
      if (v130)
        goto LABEL_44;
      v102[2] = v131;
      swift_bridgeObjectRetain(v112);
    }
    v132 = v102[7];
    v133 = *(_QWORD *)(v132 + 8 * v121);
    v134 = swift_isUniquelyReferenced_nonNull_native(v133);
    *(_QWORD *)(v132 + 8 * v121) = v133;
    if ((v134 & 1) == 0)
    {
      v133 = sub_1000E2A5C(0, *(_QWORD *)(v133 + 16) + 1, 1, v133);
      *(_QWORD *)(v132 + 8 * v121) = v133;
    }
    v136 = *(_QWORD *)(v133 + 16);
    v135 = *(_QWORD *)(v133 + 24);
    if (v136 >= v135 >> 1)
    {
      v133 = sub_1000E2A5C(v135 > 1, v136 + 1, 1, v133);
      *(_QWORD *)(v132 + 8 * v121) = v133;
    }
    v99 = (uint64_t)v242;
    v137 = (char *)v239;
    v100 = v240;
    *(_QWORD *)(v133 + 16) = v136 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v115 + 32))(v133+ ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80))+ *(_QWORD *)(v115 + 72) * v136, v137, v114);
    swift_bridgeObjectRelease(v112);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v245, v114);
    v106 = v234;
    sub_100008030((uint64_t)v234, &qword_100634030);
    v105 = v246 + v238;
    v104 = v247 - 1;
    v98 = v241;
    if (v247 == 1)
    {
      v138 = v235;
      swift_bridgeObjectRelease(v235);
      v103 = v138;
      v96 = (unint64_t)v222;
      v139 = v244;
      v97 = v223;
      v101 = v221;
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100121720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  void *object;
  Swift::String v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;

  v2 = type metadata accessor for DIPError.Code(0);
  v78 = *(_QWORD *)(v2 - 8);
  v79 = v2;
  __chkstk_darwin(v2);
  v80 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DeveloperTestJapanNationalIDCardCredentialBuilder(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  __chkstk_darwin(v4);
  v70 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Locale.Region(0);
  v75 = *(_QWORD *)(v77 - 8);
  v6 = __chkstk_darwin(v77);
  v76 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v74 = (char *)&v66 - v8;
  v83 = type metadata accessor for MobileDocumentType.Identifier(0);
  v9 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MobileDocumentType(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v69 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v66 - v16;
  v18 = type metadata accessor for MobileDocumentReaderRequest.Document(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v67 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v66 - v23;
  v71 = a1;
  v25 = MobileDocumentReaderRequest.document.getter(v22);
  MobileDocumentReaderRequest.Document.type.getter(v25);
  v26 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  v68 = v18;
  v27 = v26(v24, v18);
  MobileDocumentType.storage.getter(v27);
  v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29 = v12;
  v30 = v17;
  v31 = v83;
  v28(v30, v12);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v31);
  if (v32 == enum case for MobileDocumentType.Identifier.nationalIDCard(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v31);
    v34 = v74;
    v33 = v75;
    v35 = v77;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, v11, v77);
    v36 = v76;
    Locale.Region.init(stringLiteral:)(20554, 0xE200000000000000);
    v37 = sub_100004790((unint64_t *)&unk_100633500, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region, (uint64_t)&protocol conformance descriptor for Locale.Region);
    v38 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v34, v35, v37);
    v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    v39(v36, v35);
    v40 = ((uint64_t (*)(char *, uint64_t))v39)(v34, v35);
    if ((v38 & 1) != 0)
    {
      v41 = v70;
      v42 = DeveloperTestJapanNationalIDCardCredentialBuilder.init()(v40);
      v43 = DeveloperTestJapanNationalIDCardCredentialBuilder.payloadElements.getter(v42);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v73);
      v39(v11, v35);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v36, v11, v35);
      v81 = 0;
      v82 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v44._countAndFlagsBits = 0xD000000000000026;
      v44._object = (void *)0x800000010054C140;
      String.append(_:)(v44);
      v45._countAndFlagsBits = Locale.Region.identifier.getter();
      object = v45._object;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(object);
      v47._countAndFlagsBits = 0xD000000000000013;
      v47._object = (void *)0x800000010054C170;
      String.append(_:)(v47);
      v43 = v81;
      v48 = v82;
      v49 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v80, enum case for DIPError.Code.documentReaderUnsupportedNationalIDCardRegion(_:), v79);
      v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v51 = type metadata accessor for DIPError(0);
      v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v51, v52, 0, 0);
      v53 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v43, v48, 0, v49, 0, v50, 0xD00000000000007ELL, 0x800000010054C0A0, 0x65736E6F70736572, 0xEE00293A726F6628, 63);
      swift_willThrow(v53);
      v39(v36, v35);
    }
  }
  else if (v32 == enum case for MobileDocumentType.Identifier.driversLicense(_:))
  {
    return static DeveloperTestMDLCredentialBuilder.payloadElements.getter();
  }
  else
  {
    v81 = 0;
    v82 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v54._countAndFlagsBits = 0xD00000000000001ALL;
    v54._object = (void *)0x80000001005412E0;
    String.append(_:)(v54);
    v55 = v67;
    v57 = MobileDocumentReaderRequest.document.getter(v56);
    v58 = v69;
    MobileDocumentReaderRequest.Document.type.getter(v57);
    v26(v55, v68);
    _print_unlocked<A, B>(_:_:)(v58, &v81, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v28(v58, v29);
    v43 = v81;
    v59 = v82;
    v60 = v80;
    (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v80, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v79);
    v61 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v62 = type metadata accessor for DIPError(0);
    v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v62, v63, 0, 0);
    v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v43, v59, 0, v60, 0, v61, 0xD00000000000007ELL, 0x800000010054C0A0, 0x65736E6F70736572, 0xEE00293A726F6628, 65);
    swift_willThrow(v64);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
  }
  return v43;
}

void sub_100121DA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;

  v7 = v6;
  v81 = a4;
  v82 = a3;
  v78 = type metadata accessor for ISO18013IssuerSignedItem(0);
  __chkstk_darwin(v78);
  v77 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100630DE8);
  v76 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v79 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004828(&qword_1006357A0);
  __chkstk_darwin(v19);
  v80 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AnyCodable(0);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_18;
  v70 = v28;
  v71 = v27;
  v75 = (char *)&v64 - v25;
  v72 = v26;
  v73 = v24;
  swift_bridgeObjectRetain(a2);
  v29 = sub_1004A8604(a1, a2);
  if ((v30 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_18:
    v46 = sub_100004828(&qword_100634030);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a6, 1, 1, v46);
    return;
  }
  v65 = v13;
  v31 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v29);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(a2);
  v32 = *(_QWORD *)(v31 + 16);
  v66 = a1;
  v74 = v31;
  if (v32)
  {
    v67 = a2;
    v68 = a6;
    v69 = v6;
    v33 = v31 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v34 = *(_QWORD *)(v16 + 72);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
    v36 = swift_bridgeObjectRetain(v31);
    while (1)
    {
      v37 = v35(v18, v33, v15, v36);
      v38 = CredentialBuilderPayloadDetails.Element.elementIdentifier.getter(v37);
      v40 = v39;
      v41 = v81;
      if (v38 == v82 && v39 == v81)
      {
        swift_bridgeObjectRelease(v74);
        v45 = v41;
        goto LABEL_15;
      }
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v82, v81, 0);
      swift_bridgeObjectRelease(v40);
      if ((v42 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v33 += v34;
      if (!--v32)
      {
        swift_bridgeObjectRelease(v74);
        v43 = 1;
        a6 = v68;
        v7 = v69;
        a2 = v67;
        goto LABEL_12;
      }
    }
    v45 = v74;
LABEL_15:
    a6 = v68;
    v7 = v69;
    a2 = v67;
    v44 = (uint64_t)v80;
    swift_bridgeObjectRelease(v45);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v44, v18, v15);
    v43 = 0;
  }
  else
  {
    v43 = 1;
LABEL_12:
    v44 = (uint64_t)v80;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v44, v43, 1, v15);
  swift_bridgeObjectRelease(v74);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v44, 1, v15) == 1)
  {
    sub_100008030(v44, &qword_1006357A0);
    goto LABEL_18;
  }
  v47 = v70;
  CredentialBuilderPayloadDetails.Element.elementValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v44, v15);
  v49 = v72;
  v48 = v73;
  v50 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v75, v47, v73);
  v51 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v71, v50, v48);
  v52 = v81;
  v53 = swift_bridgeObjectRetain(v81);
  v54 = v77;
  ISO18013IssuerSignedItem.init(digestID:random:elementIdentifier:elementValue:)(0, 0, 0xC000000000000000, v82, v52, v51, v53);
  v55 = type metadata accessor for CBOREncoder(0);
  v56 = swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v57 = CBOREncoder.init()(v56);
  v58 = sub_100004790(&qword_1006357A8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
  v59 = sub_100004790(&qword_1006357B0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
  v60 = v79;
  CBOREncodedCBOR.init(value:tag:encoder:)(v54, 0, v57, v78, v58, v59);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v75, v48);
  if (!v7)
  {
    v61 = sub_100004828(&qword_100634030);
    v62 = (char *)a6 + *(int *)(v61 + 48);
    v63 = v65;
    *a6 = v66;
    a6[1] = a2;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v62, v60, v63);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(a6, 0, 1, v61);
    swift_bridgeObjectRetain(a2);
  }
}

uint64_t type metadata accessor for SimulatedMobileDocumentReaderManager()
{
  return objc_opt_self(_TtC8coreidvd36SimulatedMobileDocumentReaderManager);
}

uint64_t sub_1001222D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t (**v5)();
  os_unfair_lock_s *v6;

  v4 = *(os_unfair_lock_s **)(v2 + 16);
  v5 = (uint64_t (**)())&v4[4];
  v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  sub_10012CFD4(v5);
  os_unfair_lock_unlock(v6);
  return swift_release(a2);
}

uint64_t sub_100122334()
{
  uint64_t v0;

  return sub_10012CFC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100122344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(dword_100635724);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return sub_10011F730(a1, a2, v6, 1);
}

uint64_t sub_1001223A8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1000E26CC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001224FC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1000E27D8(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for MobileDocumentElement(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122670(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000E2914(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  sub_100004828(&qword_100634040);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001227D0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1000E2DB0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012292C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000E2498(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122A84(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1000E35D8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122BD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000E2358(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100122D28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10012C850(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(_QWORD))&type metadata accessor for StoredProofingSession, &qword_1006357B8, (uint64_t *)&unk_100642560, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100459FC8);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100122F00(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_1000E3928(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for URL(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100123068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10012310C, 0, 0);
}

uint64_t sub_10012310C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100004790(&qword_100635730, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100004790(&qword_100635738, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100123224;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100123224()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1001232D0, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1001232D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10012330C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  sub_100121DA0(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), a5);
}

Swift::Int sub_100123324(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635898);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
      v34 = v32;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001235F0(uint64_t a1, uint64_t a2)
{
  return sub_100129070(a1, a2, &qword_100635820);
}

Swift::Int sub_1001235FC(uint64_t a1, uint64_t a2)
{
  return sub_10012742C(a1, a2, type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, &qword_1006358B0);
}

Swift::Int sub_100123610(uint64_t a1, uint64_t a2)
{
  return sub_1001256AC(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for AEADKey, &qword_1006358A8);
}

Swift::Int sub_100123624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006357C0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100008018(v26, (uint64_t)v40);
    }
    else
    {
      sub_10002581C((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100008018(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100123948(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828((uint64_t *)&unk_100643FD0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100123C6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  int v42;
  _OWORD v43[2];

  v3 = v2;
  v6 = type metadata accessor for DIPError.PropertyKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_10062F790);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v10);
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v40)
              goto LABEL_36;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10000491C((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v43);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_10002EDBC(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v43);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_100004790((unint64_t *)&qword_10062F798, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = (uint64_t)sub_10000491C(v43, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v39;
  v24 = v41;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100124008(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD v29[9];

  v3 = v2;
  v6 = sub_100004828(&qword_100630FA8);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100004828(&qword_1006359B0);
  v28 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 64);
    v26 = (_QWORD *)(v9 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v24 = v3;
    v25 = (unint64_t)(v11 + 63) >> 6;
    swift_retain(v9);
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      goto LABEL_20;
    }
    if (v25 <= 1)
    {
      swift_release(v9);
      v3 = v24;
      v16 = v26;
      if ((v28 & 1) == 0)
        goto LABEL_31;
      goto LABEL_27;
    }
    v16 = v26;
    v17 = v26[1];
    v18 = 1;
    if (!v17)
    {
      v18 = 2;
      if (v25 <= 2)
        goto LABEL_24;
      v17 = v26[2];
      if (!v17)
      {
        v19 = 3;
        if (v25 > 3)
        {
          v17 = v26[3];
          if (v17)
          {
            v18 = 3;
            goto LABEL_19;
          }
          while (1)
          {
            v18 = v19 + 1;
            if (__OFADD__(v19, 1))
            {
              __break(1u);
              JUMPOUT(0x100124420);
            }
            if (v18 >= v25)
              break;
            v17 = v26[v18];
            ++v19;
            if (v17)
              goto LABEL_19;
          }
        }
LABEL_24:
        swift_release(v9);
        v3 = v24;
        if ((v28 & 1) == 0)
          goto LABEL_31;
LABEL_27:
        v22 = 1 << *(_BYTE *)(v9 + 32);
        if (v22 >= 64)
          bzero(v16, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v16 = -1 << v22;
        *(_QWORD *)(v9 + 16) = 0;
        goto LABEL_31;
      }
    }
LABEL_19:
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_20:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v15);
    v21 = *(_QWORD *)(v9 + 56) + *(_QWORD *)(v27 + 72) * v15;
    if ((v28 & 1) != 0)
      sub_1000A1F54(v21, (uint64_t)v8, &qword_100630FA8);
    else
      sub_100038B24(v21, (uint64_t)v8, &qword_100630FA8);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v10 + 40));
    __asm { BR              X8 }
  }
LABEL_31:
  result = swift_release(v9);
  *v3 = v10;
  return result;
}

uint64_t sub_100124434(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006359B8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v20 = v3;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v11 <= 1)
  {
    swift_release(v5);
    v13 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_25;
  }
  v13 = (_QWORD *)(v5 + 64);
  v14 = *(_QWORD *)(v5 + 72);
  v15 = 1;
  if (v14)
    goto LABEL_20;
  v15 = 2;
  if (v11 <= 2)
    goto LABEL_22;
  v14 = *(_QWORD *)(v5 + 80);
  if (v14)
  {
LABEL_20:
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_21:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
    Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v16 = 3;
  if (v11 > 3)
  {
    v14 = *(_QWORD *)(v5 + 88);
    if (v14)
    {
      v15 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v15 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        JUMPOUT(0x1001247BCLL);
      }
      if (v15 >= v11)
        break;
      v14 = *(_QWORD *)(v5 + 64 + 8 * v15);
      ++v16;
      if (v14)
        goto LABEL_20;
    }
  }
LABEL_22:
  swift_release(v5);
  v3 = v20;
  if ((a2 & 1) == 0)
    goto LABEL_29;
LABEL_25:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v13, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v13 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_29:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_1001247D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  char v20;
  uint64_t v21[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006359A8);
  v20 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((v20 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((v20 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v11 + 8));
    Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x100124B7CLL);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((v20 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

Swift::Int sub_100124B90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006357F0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100124E98(uint64_t a1, uint64_t a2)
{
  return sub_100125FCC(a1, a2, &qword_1006357E8);
}

Swift::Int sub_100124EA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635988);
  v52 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v50 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v48 = v3;
  v49 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v14 << 6);
      if ((v52 & 1) != 0)
        goto LABEL_13;
      goto LABEL_26;
    }
    v27 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v49)
      break;
    v28 = v50;
    v29 = v50[v27];
    ++v14;
    if (!v29)
    {
      v14 = v27 + 1;
      if (v27 + 1 >= v49)
        goto LABEL_36;
      v29 = v50[v14];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v49)
        {
LABEL_36:
          swift_release(v5);
          v3 = v48;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v50[v30];
        if (!v29)
        {
          while (1)
          {
            v14 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v14 >= v49)
              goto LABEL_36;
            v29 = v50[v14];
            ++v30;
            if (v29)
              goto LABEL_25;
          }
        }
        v14 = v30;
      }
    }
LABEL_25:
    v11 = (v29 - 1) & v29;
    v19 = __clz(__rbit64(v29)) + (v14 << 6);
    if ((v52 & 1) != 0)
    {
LABEL_13:
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v19);
      v21 = *v20;
      v22 = v20[1];
      v23 = *(_QWORD *)(v5 + 56) + 152 * v19;
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v53 = *(_BYTE *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 32);
      v54 = *(_QWORD *)(v23 + 48);
      v55 = *(_QWORD *)(v23 + 24);
      v56 = *(_BYTE *)(v23 + 56);
      v59 = *(_BYTE *)(v23 + 57);
      v57 = *(_QWORD *)(v23 + 40);
      v58 = *(_QWORD *)(v23 + 72);
      v60 = *(_QWORD *)(v23 + 88);
      v61 = *(_QWORD *)(v23 + 64);
      v62 = *(_QWORD *)(v23 + 104);
      v63 = *(_QWORD *)(v23 + 80);
      v65 = *(_QWORD *)(v23 + 112);
      v66 = *(_QWORD *)(v23 + 96);
      v69 = *(_QWORD *)(v23 + 128);
      v67 = *(_QWORD *)(v23 + 120);
      v68 = *(_QWORD *)(v23 + 136);
      v64 = *(_QWORD *)(v23 + 144);
      goto LABEL_27;
    }
LABEL_26:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v19);
    v21 = *v31;
    v22 = v31[1];
    v32 = *(_QWORD *)(v5 + 56) + 152 * v19;
    v33 = *(_OWORD *)(v32 + 16);
    v70 = *(_OWORD *)v32;
    v71 = v33;
    v34 = *(_OWORD *)(v32 + 80);
    v36 = *(_OWORD *)(v32 + 32);
    v35 = *(_OWORD *)(v32 + 48);
    v74 = *(_OWORD *)(v32 + 64);
    v75 = v34;
    v72 = v36;
    v73 = v35;
    v38 = *(_OWORD *)(v32 + 112);
    v37 = *(_OWORD *)(v32 + 128);
    v39 = *(_OWORD *)(v32 + 96);
    v79 = *(_QWORD *)(v32 + 144);
    v77 = v38;
    v78 = v37;
    v76 = v39;
    v68 = *((_QWORD *)&v37 + 1);
    v69 = v37;
    v64 = v79;
    v65 = v38;
    v66 = v39;
    v67 = *((_QWORD *)&v38 + 1);
    v62 = *((_QWORD *)&v39 + 1);
    v60 = *((_QWORD *)&v75 + 1);
    v63 = v75;
    v61 = v74;
    v59 = BYTE9(v73);
    v56 = BYTE8(v73);
    v57 = *((_QWORD *)&v36 + 1);
    v26 = v36;
    v58 = *((_QWORD *)&v74 + 1);
    v54 = v73;
    v55 = *((_QWORD *)&v71 + 1);
    v53 = v71;
    v25 = *((_QWORD *)&v70 + 1);
    v24 = v70;
    swift_bridgeObjectRetain(v22);
    sub_100099520(&v70);
LABEL_27:
    Hasher.init(_seed:)(&v70, *(_QWORD *)(v8 + 40));
    String.hash(into:)(&v70, v21, v22);
    result = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v8 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v12 + 8 * (v41 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v12 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v12 + 8 * v42);
      }
      while (v46 == -1);
      v15 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v21;
    v16[1] = v22;
    v17 = *(_QWORD *)(v8 + 56) + 152 * v15;
    *(_QWORD *)v17 = v24;
    *(_QWORD *)(v17 + 8) = v25;
    *(_BYTE *)(v17 + 16) = v53;
    *(_QWORD *)(v17 + 24) = v55;
    *(_QWORD *)(v17 + 32) = v26;
    *(_QWORD *)(v17 + 40) = v57;
    *(_QWORD *)(v17 + 48) = v54;
    *(_BYTE *)(v17 + 56) = v56;
    *(_BYTE *)(v17 + 57) = v59;
    *(_QWORD *)(v17 + 64) = v61;
    *(_QWORD *)(v17 + 72) = v58;
    *(_QWORD *)(v17 + 80) = v63;
    *(_QWORD *)(v17 + 88) = v60;
    *(_QWORD *)(v17 + 96) = v66;
    *(_QWORD *)(v17 + 104) = v62;
    *(_QWORD *)(v17 + 112) = v65;
    *(_QWORD *)(v17 + 120) = v67;
    *(_QWORD *)(v17 + 128) = v69;
    *(_QWORD *)(v17 + 136) = v68;
    *(_QWORD *)(v17 + 144) = v64;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v48;
  v28 = v50;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v5 + 32);
  if (v47 >= 64)
    bzero(v28, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v47;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100125364(uint64_t a1, uint64_t a2)
{
  return sub_100125FCC(a1, a2, &qword_100635848);
}

Swift::Int sub_100125370(uint64_t a1, uint64_t a2)
{
  return sub_100127B14(a1, a2, &qword_100635850);
}

Swift::Int sub_10012537C(uint64_t a1, uint64_t a2)
{
  return sub_1001256AC(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for RecipientEncryptionCertificate, &qword_100635800);
}

Swift::Int sub_100125390(uint64_t a1, uint64_t a2)
{
  return sub_100125FCC(a1, a2, &qword_100635990);
}

uint64_t sub_10012539C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635780);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10000491C(v25, v38);
      }
      else
      {
        sub_10002EDBC((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10000491C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100125698(uint64_t a1, uint64_t a2)
{
  return sub_1001256AC(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for AnyCodable, &qword_1006357F8);
}

Swift::Int sub_1001256AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[9];

  v6 = v4;
  v49 = a3(0);
  v9 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v43 - v10;
  v11 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100004828(a4);
  v47 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v44 = v6;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      goto LABEL_36;
    v26 = v46[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v20];
      if (!v26)
        break;
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v11 + 56);
    v29 = v11;
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v9 + 72);
    v34 = v28 + v33 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v34, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v48, v34, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v13 + 40));
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v13 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v32;
    v22[1] = v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v13 + 56) + v33 * v21, v48, v49);
    ++*(_QWORD *)(v13 + 16);
    v11 = v29;
  }
  v27 = v25 + 2;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v20 >= v45)
          goto LABEL_36;
        v26 = v46[v20];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v20 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v6 = v44;
  if ((v47 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v11 + 32);
    if (v42 >= 64)
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v42;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v6 = v13;
  return result;
}

Swift::Int sub_100125A10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006357D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v14 << 6);
      }
      else
      {
        v22 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v22 >= v33)
          goto LABEL_36;
        v23 = v34[v22];
        ++v14;
        if (!v23)
        {
          v14 = v22 + 1;
          if (v22 + 1 >= v33)
            goto LABEL_36;
          v23 = v34[v14];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v33)
            {
LABEL_36:
              swift_release(v5);
              v3 = v32;
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v34[v24];
            if (!v23)
            {
              while (1)
              {
                v14 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v14 >= v33)
                  goto LABEL_36;
                v23 = v34[v14];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v14 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8);
      if ((a2 & 1) == 0)
      {
        sub_100022948(v35, v30);
        swift_bridgeObjectRetain(v29);
      }
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      sub_100022948(v35, v30);
      Data.hash(into:)(v36, v35, v30);
      sub_100007F8C(v35, v30);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        v19 = v35;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        v19 = v35;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18) = v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100125D30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635790);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    v32 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_100125FCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100004828(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_1001262DC(uint64_t a1, uint64_t a2)
{
  return sub_100129070(a1, a2, &qword_100635890);
}

Swift::Int sub_1001262E8(uint64_t a1, uint64_t a2)
{
  return sub_100129070(a1, a2, &qword_100635958);
}

Swift::Int sub_1001262F4(uint64_t a1, uint64_t a2)
{
  return sub_100127E44(a1, a2, &qword_100635948);
}

Swift::Int sub_100126300(uint64_t a1, uint64_t a2)
{
  return sub_100129070(a1, a2, &qword_100635930);
}

Swift::Int sub_10012630C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635928);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    for (i = 0; ; i = v39)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v39 = i;
        v22 = v21 | (i << 6);
      }
      else
      {
        v23 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v37)
          goto LABEL_36;
        v24 = v38[v23];
        v25 = i + 1;
        if (!v24)
        {
          v25 = i + 2;
          if (i + 2 >= v37)
            goto LABEL_36;
          v24 = v38[v25];
          if (!v24)
          {
            v26 = i + 3;
            if (i + 3 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v38[v26];
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v25 >= v37)
                  goto LABEL_36;
                v24 = v38[v25];
                ++v26;
                if (v24)
                  goto LABEL_33;
              }
            }
            v25 = i + 3;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v39 = v25;
        v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v31;
      v33 = v31[1];
      v34 = *(_QWORD *)(v5 + 56) + 96 * v22;
      v40 = *(_QWORD *)v34;
      v44 = *(_QWORD *)(v34 + 16);
      v45 = *(_QWORD *)(v34 + 40);
      v46 = *(_QWORD *)(v34 + 8);
      v43 = *(_BYTE *)(v34 + 48);
      v42 = *(_QWORD *)(v34 + 56);
      v47 = *(_OWORD *)(v34 + 64);
      v48 = *(_OWORD *)(v34 + 24);
      v35 = *(_QWORD *)(v34 + 80);
      v41 = *(_BYTE *)(v34 + 88);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v47);
      }
      Hasher.init(_seed:)(v49, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v49, v32, v33);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v17 == v28;
          if (v17 == v28)
            v17 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v30 == -1);
        v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v33;
      v20 = *(_QWORD *)(v8 + 56) + 96 * v18;
      *(_QWORD *)v20 = v40;
      *(_QWORD *)(v20 + 8) = v46;
      *(_QWORD *)(v20 + 16) = v44;
      *(_OWORD *)(v20 + 24) = v48;
      *(_QWORD *)(v20 + 40) = v45;
      *(_BYTE *)(v20 + 48) = v43;
      *(_QWORD *)(v20 + 56) = v42;
      *(_OWORD *)(v20 + 64) = v47;
      *(_QWORD *)(v20 + 80) = v35;
      *(_BYTE *)(v20 + 88) = v41;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001266E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635940);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1001269F0(uint64_t a1, uint64_t a2)
{
  return sub_100127E44(a1, a2, &qword_100635810);
}

Swift::Int sub_1001269FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635808);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100126CCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635818);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x100127118);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

Swift::Int sub_100127140(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006359C0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v31 = *(_QWORD *)(v29 + v28);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v29 + v28));
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v30);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_100127418(uint64_t a1, uint64_t a2)
{
  return sub_10012742C(a1, a2, type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, &qword_100635998);
}

Swift::Int sub_10012742C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int result;
  int64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(_QWORD);
  _QWORD v50[9];

  v6 = v4;
  v49 = a3;
  v9 = a3(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100004828(a4);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v6;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v45)
      break;
    v27 = v46;
    v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v45)
        goto LABEL_36;
      v28 = v46[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v12);
          v6 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v28 = v46[v21];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v21 = v29;
      }
    }
LABEL_23:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    v30 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v25);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v47 + 72);
    v34 = *(_QWORD *)(v12 + 56) + v33 * v25;
    if ((v48 & 1) != 0)
    {
      sub_100038AE0(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_100035DE8(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v14 + 40));
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    *v23 = v32;
    v23[1] = v31;
    result = sub_100038AE0((uint64_t)v11, *(_QWORD *)(v14 + 56) + v33 * v22, v49);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v6 = v44;
  v27 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v6 = v14;
  return result;
}

Swift::Int sub_1001277A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  __int128 v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006358E0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  for (i = 0; ; i = v40)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v40 = i;
      v22 = v21 | (i << 6);
      goto LABEL_34;
    }
    v23 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    v26 = i + 1;
    if (!v25)
    {
      v26 = i + 2;
      if (i + 2 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v26);
      if (!v25)
      {
        v27 = i + 3;
        if (i + 3 >= v38)
        {
LABEL_36:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v27);
        if (!v25)
        {
          while (1)
          {
            v26 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v26 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v26);
            ++v27;
            if (v25)
              goto LABEL_33;
          }
        }
        v26 = i + 3;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v40 = v26;
    v22 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_34:
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v41 = *(_OWORD *)v35;
    v36 = *(_QWORD *)(v35 + 16);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v35 + 16));
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(*((_QWORD *)&v41 + 1));
    }
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v42, v34, v33);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_OWORD *)v20 = v41;
    *(_QWORD *)(v20 + 16) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100127B08(uint64_t a1, uint64_t a2)
{
  return sub_100127B14(a1, a2, &qword_1006358A0);
}

Swift::Int sub_100127B14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  uint64_t v44;
  _QWORD v45[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100004828(a3);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v39 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v41 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v40 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v6);
    v15 = 0;
    for (i = v6; ; v6 = i)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v40)
          goto LABEL_36;
        v25 = v41[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v40)
            goto LABEL_36;
          v25 = v41[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_36:
              swift_release(v6);
              v4 = v39;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v6 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v40)
                  goto LABEL_36;
                v25 = v41[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v23);
      v33 = *v31;
      v32 = v31[1];
      v34 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 32 * v23);
      v35 = *v34;
      v36 = v34[1];
      v37 = v34[3];
      v44 = v34[2];
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v45, v33, v32);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
      *v20 = v33;
      v20[1] = v32;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 32 * v19);
      *v21 = v35;
      v21[1] = v36;
      v21[2] = v44;
      v21[3] = v37;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_100127E38(uint64_t a1, uint64_t a2)
{
  return sub_100127E44(a1, a2, &qword_100635838);
}

Swift::Int sub_100127E44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100004828(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_10012814C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006358B8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v40 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain(v34);
    Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v41, v35, v34);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v40;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100128458(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006359D8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v25 = v41[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v22);
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      sub_100022948(v36, v37);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v18);
    *v20 = v35;
    v20[1] = v36;
    v20[2] = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100128790(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_1006359D0);
  v52 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v50 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v48 = v3;
  v49 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v14 << 6);
      if ((v52 & 1) != 0)
        goto LABEL_13;
      goto LABEL_26;
    }
    v27 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v49)
      break;
    v28 = v50;
    v29 = v50[v27];
    ++v14;
    if (!v29)
    {
      v14 = v27 + 1;
      if (v27 + 1 >= v49)
        goto LABEL_36;
      v29 = v50[v14];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v49)
        {
LABEL_36:
          swift_release(v5);
          v3 = v48;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v50[v30];
        if (!v29)
        {
          while (1)
          {
            v14 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v14 >= v49)
              goto LABEL_36;
            v29 = v50[v14];
            ++v30;
            if (v29)
              goto LABEL_25;
          }
        }
        v14 = v30;
      }
    }
LABEL_25:
    v11 = (v29 - 1) & v29;
    v19 = __clz(__rbit64(v29)) + (v14 << 6);
    if ((v52 & 1) != 0)
    {
LABEL_13:
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v19);
      v21 = *v20;
      v22 = v20[1];
      v23 = *(_QWORD *)(v5 + 56) + 152 * v19;
      v24 = *(_BYTE *)v23;
      v25 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 32);
      v57 = *(_QWORD *)(v23 + 40);
      v53 = *(_QWORD *)(v23 + 8);
      v54 = *(_QWORD *)(v23 + 48);
      v55 = *(_QWORD *)(v23 + 24);
      v56 = *(_QWORD *)(v23 + 64);
      v58 = *(_QWORD *)(v23 + 80);
      v59 = *(_QWORD *)(v23 + 56);
      v60 = *(_QWORD *)(v23 + 88);
      v61 = *(_QWORD *)(v23 + 72);
      v62 = *(_QWORD *)(v23 + 96);
      v63 = *(_BYTE *)(v23 + 104);
      v64 = *(_BYTE *)(v23 + 105);
      v65 = *(_BYTE *)(v23 + 106);
      v66 = *(_BYTE *)(v23 + 107);
      v67 = *(_BYTE *)(v23 + 108);
      v68 = *(_BYTE *)(v23 + 109);
      v69 = *(_QWORD *)(v23 + 112);
      v70 = *(_BYTE *)(v23 + 120);
      v71 = *(_BYTE *)(v23 + 121);
      v72 = *(_BYTE *)(v23 + 122);
      v74 = *(_OWORD *)(v23 + 128);
      v73 = *(_QWORD *)(v23 + 144);
      goto LABEL_27;
    }
LABEL_26:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v19);
    v21 = *v31;
    v22 = v31[1];
    v32 = *(_QWORD *)(v5 + 56) + 152 * v19;
    v33 = *(_OWORD *)(v32 + 16);
    v75 = *(_OWORD *)v32;
    v76 = v33;
    v34 = *(_OWORD *)(v32 + 80);
    v36 = *(_OWORD *)(v32 + 32);
    v35 = *(_OWORD *)(v32 + 48);
    v79 = *(_OWORD *)(v32 + 64);
    v80 = v34;
    v77 = v36;
    v78 = v35;
    v38 = *(_OWORD *)(v32 + 112);
    v37 = *(_OWORD *)(v32 + 128);
    v39 = *(_OWORD *)(v32 + 96);
    v84 = *(_QWORD *)(v32 + 144);
    v82 = v38;
    v83 = v37;
    v81 = v39;
    v73 = v84;
    v74 = v37;
    v71 = BYTE9(v38);
    v72 = BYTE10(v38);
    v70 = BYTE8(v38);
    v69 = v38;
    v67 = BYTE12(v39);
    v68 = BYTE13(v39);
    v65 = BYTE10(v39);
    v66 = BYTE11(v39);
    v63 = BYTE8(v39);
    v64 = BYTE9(v39);
    v61 = *((_QWORD *)&v79 + 1);
    v62 = v39;
    v59 = *((_QWORD *)&v78 + 1);
    v60 = *((_QWORD *)&v80 + 1);
    v57 = *((_QWORD *)&v36 + 1);
    v26 = v36;
    v58 = v80;
    v55 = *((_QWORD *)&v76 + 1);
    v25 = v76;
    v56 = v79;
    v53 = *((_QWORD *)&v75 + 1);
    v54 = v78;
    v24 = v75;
    swift_bridgeObjectRetain(v22);
    sub_100099EA8(&v75);
LABEL_27:
    Hasher.init(_seed:)(&v75, *(_QWORD *)(v8 + 40));
    String.hash(into:)(&v75, v21, v22);
    result = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v8 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v12 + 8 * (v41 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v12 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v12 + 8 * v42);
      }
      while (v46 == -1);
      v15 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v21;
    v16[1] = v22;
    v17 = *(_QWORD *)(v8 + 56) + 152 * v15;
    *(_BYTE *)v17 = v24;
    *(_QWORD *)(v17 + 8) = v53;
    *(_QWORD *)(v17 + 16) = v25;
    *(_QWORD *)(v17 + 24) = v55;
    *(_QWORD *)(v17 + 32) = v26;
    *(_QWORD *)(v17 + 40) = v57;
    *(_QWORD *)(v17 + 48) = v54;
    *(_QWORD *)(v17 + 56) = v59;
    *(_QWORD *)(v17 + 64) = v56;
    *(_QWORD *)(v17 + 72) = v61;
    *(_QWORD *)(v17 + 80) = v58;
    *(_QWORD *)(v17 + 88) = v60;
    *(_QWORD *)(v17 + 96) = v62;
    *(_BYTE *)(v17 + 104) = v63;
    *(_BYTE *)(v17 + 105) = v64;
    *(_BYTE *)(v17 + 106) = v65;
    *(_BYTE *)(v17 + 107) = v66;
    *(_BYTE *)(v17 + 108) = v67;
    *(_BYTE *)(v17 + 109) = v68;
    *(_QWORD *)(v17 + 112) = v69;
    *(_BYTE *)(v17 + 120) = v70;
    *(_BYTE *)(v17 + 121) = v71;
    *(_BYTE *)(v17 + 122) = v72;
    *(_OWORD *)(v17 + 128) = v74;
    *(_QWORD *)(v17 + 144) = v73;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v48;
  v28 = v50;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v5 + 32);
  if (v47 >= 64)
    bzero(v28, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v47;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100128CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for IQCType(0);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004828(&qword_100635870);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
    v38 = v41;
LABEL_44:
    *v38 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  HIDWORD(v40) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v44 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v42)
    {
      swift_release(v8);
      v38 = v41;
      v23 = v43;
      if ((v40 & 0x100000000) != 0)
      {
LABEL_39:
        v39 = 1 << *(_BYTE *)(v8 + 32);
        if (v39 >= 64)
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v39;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8);
      goto LABEL_44;
    }
    v23 = v43;
    v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v24 = v43[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5);
    v27 = v8;
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_100004790(&qword_100635878, (uint64_t (*)(uint64_t))&type metadata accessor for IQCType, (uint64_t)&protocol conformance descriptor for IQCType);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release(v8);
    v38 = v41;
    if ((v40 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v43[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v42)
      goto LABEL_36;
    v24 = v43[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_100129064(uint64_t a1, uint64_t a2)
{
  return sub_100129070(a1, a2, &qword_100635938);
}

Swift::Int sub_100129070(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100004828(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

id sub_100129380()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_100004828(&qword_100635898);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100129520()
{
  return sub_10012C680(&qword_100635820);
}

void *sub_10012952C()
{
  return sub_10012B70C(type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo, &qword_1006358B0);
}

void *sub_100129540()
{
  return sub_10012A69C((uint64_t (*)(_QWORD))&type metadata accessor for AEADKey, &qword_1006358A8);
}

void sub_100129554()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_100004828(&qword_1006357C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_10002581C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100008018(v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10012973C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100004828((uint64_t *)&unk_100643FD0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1001298F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for DIPError.PropertyKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004828(&qword_10062F790);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_10002EDBC(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_10000491C(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100129B30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = sub_100004828(&qword_100630FA8);
  v25 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004828(&qword_1006359B0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_25:
    *v1 = v7;
    return result;
  }
  v23 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v24 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v14)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_23;
      v20 = *(_QWORD *)(v24 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(v25 + 72) * v16;
    sub_100038B24(*(_QWORD *)(v5 + 56) + v18, (uint64_t)v4, &qword_100630FA8);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)sub_1000A1F54((uint64_t)v4, *(_QWORD *)(v7 + 56) + v18, &qword_100630FA8);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
  {
LABEL_23:
    result = (void *)swift_release(v5);
    v1 = v23;
    goto LABEL_25;
  }
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v20 = *(_QWORD *)(v24 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100129D60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100004828(&qword_1006359B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100129EEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004828(&qword_1006359A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10012A094()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004828(&qword_1006357F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10012A23C()
{
  sub_10012AC38(&qword_1006357E8);
}

void *sub_10012A248()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v1 = v0;
  sub_100004828(&qword_100635988);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      v9 = v38 + 1;
      if (v38 + 1 >= v13)
        goto LABEL_26;
      v39 = *(_QWORD *)(v6 + 8 * v9);
      if (!v39)
        break;
    }
LABEL_25:
    v12 = (v39 - 1) & v39;
    v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 152 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_OWORD *)(v21 + 32);
    v23 = *(_OWORD *)(v21 + 48);
    v24 = *(_OWORD *)(v21 + 80);
    v45 = *(_OWORD *)(v21 + 64);
    v46 = v24;
    v44 = v23;
    v26 = *(_OWORD *)(v21 + 112);
    v25 = *(_OWORD *)(v21 + 128);
    v27 = *(_OWORD *)(v21 + 96);
    v50 = *(_QWORD *)(v21 + 144);
    v48 = v26;
    v49 = v25;
    v47 = v27;
    v28 = *(_OWORD *)(v21 + 16);
    v41 = *(_OWORD *)v21;
    v42 = v28;
    v43 = v22;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v29 = v19;
    v29[1] = v18;
    v30 = *(_QWORD *)(v4 + 56) + v20;
    v31 = v42;
    *(_OWORD *)v30 = v41;
    *(_OWORD *)(v30 + 16) = v31;
    v32 = v43;
    v33 = v44;
    v34 = v46;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = v33;
    v35 = v47;
    v36 = v48;
    v37 = v49;
    *(_QWORD *)(v30 + 144) = v50;
    *(_OWORD *)(v30 + 112) = v36;
    *(_OWORD *)(v30 + 128) = v37;
    *(_OWORD *)(v30 + 96) = v35;
    swift_bridgeObjectRetain(v18);
    result = sub_100099520(&v41);
  }
  v40 = v38 + 2;
  if (v40 >= v13)
    goto LABEL_26;
  v39 = *(_QWORD *)(v6 + 8 * v40);
  if (v39)
  {
    v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v9);
    ++v40;
    if (v39)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10012A46C()
{
  sub_10012AC38(&qword_100635848);
}

void sub_10012A478()
{
  sub_10012BB30(&qword_100635850);
}

void *sub_10012A484()
{
  return sub_10012A69C((uint64_t (*)(_QWORD))&type metadata accessor for RecipientEncryptionCertificate, &qword_100635800);
}

void sub_10012A498()
{
  sub_10012AC38(&qword_100635990);
}

void sub_10012A4A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100004828(&qword_100635780);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10002EDBC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10000491C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_10012A688()
{
  return sub_10012A69C((uint64_t (*)(_QWORD))&type metadata accessor for AnyCodable, &qword_1006357F8);
}

void *sub_10012A69C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - v5;
  sub_100004828(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)(*v2);
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release(v7);
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain(v23);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release(v7);
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10012A8F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004828(&qword_1006357D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_100022948(v19, *((unint64_t *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10012AAAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100004828(&qword_100635790);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10012AC38(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100004828(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10012ADE4()
{
  return sub_10012C680(&qword_100635890);
}

void *sub_10012ADF0()
{
  return sub_10012C680(&qword_100635958);
}

id sub_10012ADFC()
{
  return sub_10012BD08(&qword_100635948);
}

void *sub_10012AE08()
{
  return sub_10012C680(&qword_100635930);
}

void sub_10012AE14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;

  sub_100004828(&qword_100635928);
  v37 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    swift_release(v1);
    *v37 = v3;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5)
    memmove(v4, (const void *)(v1 + 64), 8 * v5);
  v38 = v1 + 64;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    v34 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v11)
      goto LABEL_26;
    v35 = *(_QWORD *)(v38 + 8 * v34);
    ++v7;
    if (!v35)
    {
      v7 = v34 + 1;
      if (v34 + 1 >= v11)
        goto LABEL_26;
      v35 = *(_QWORD *)(v38 + 8 * v7);
      if (!v35)
        break;
    }
LABEL_25:
    v10 = (v35 - 1) & v35;
    v13 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    v14 = 16 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
    v16 = *v15;
    v17 = v15[1];
    v18 = 96 * v13;
    v19 = *(_QWORD *)(v1 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 40);
    v24 = *(_BYTE *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v26 = *(_QWORD *)(v19 + 80);
    v27 = *(_BYTE *)(v19 + 88);
    v28 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v14);
    v29 = *(_OWORD *)(v19 + 24);
    v30 = *(_OWORD *)(v19 + 64);
    *v28 = v16;
    v28[1] = v17;
    v31 = *(_QWORD *)(v3 + 56) + v18;
    *(_QWORD *)v31 = v20;
    *(_QWORD *)(v31 + 8) = v21;
    *(_QWORD *)(v31 + 16) = v22;
    *(_OWORD *)(v31 + 24) = v29;
    *(_QWORD *)(v31 + 40) = v23;
    *(_BYTE *)(v31 + 48) = v24;
    *(_QWORD *)(v31 + 56) = v25;
    *(_OWORD *)(v31 + 64) = v30;
    *(_QWORD *)(v31 + 80) = v26;
    *(_BYTE *)(v31 + 88) = v27;
    v32 = v29;
    v33 = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v33);
  }
  v36 = v34 + 2;
  if (v36 >= v11)
    goto LABEL_26;
  v35 = *(_QWORD *)(v38 + 8 * v36);
  if (v35)
  {
    v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v7 >= v11)
      goto LABEL_26;
    v35 = *(_QWORD *)(v38 + 8 * v7);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10012B05C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100004828(&qword_100635940);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_10012B208()
{
  return sub_10012BD08(&qword_100635810);
}

id sub_10012B214()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100004828(&qword_100635808);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10012B3B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100004828(&qword_100635818);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10012B558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100004828(&qword_1006359C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012B6F8()
{
  return sub_10012B70C(type metadata accessor for UploadsCloudContainer.AnalyticsMetadata, &qword_100635998);
}

void *sub_10012B70C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  sub_100004828(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v8);
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_100035DE8(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_100038AE0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10012B93C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  sub_100004828(&qword_1006358E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    *v23 = v18;
    v23[1] = v19;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v22;
    v26 = *((_QWORD *)&v24 + 1);
    v27 = v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v26);
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10012BB24()
{
  sub_10012BB30(&qword_1006358A0);
}

void sub_10012BB30(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v2 = v1;
  sub_100004828(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v29 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v14)
      goto LABEL_26;
    v30 = *(_QWORD *)(v7 + 8 * v29);
    ++v10;
    if (!v30)
    {
      v10 = v29 + 1;
      if (v29 + 1 >= v14)
        goto LABEL_26;
      v30 = *(_QWORD *)(v7 + 8 * v10);
      if (!v30)
        break;
    }
LABEL_25:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 32 * v16;
    v22 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v21);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    v26 = v22[3];
    v27 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v27 = v20;
    v27[1] = v19;
    v28 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v21);
    *v28 = v23;
    v28[1] = v24;
    v28[2] = v25;
    v28[3] = v26;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
  }
  v31 = v29 + 2;
  if (v31 >= v14)
    goto LABEL_26;
  v30 = *(_QWORD *)(v7 + 8 * v31);
  if (v30)
  {
    v10 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v30 = *(_QWORD *)(v7 + 8 * v10);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_10012BCFC()
{
  return sub_10012BD08(&qword_100635838);
}

id sub_10012BD08(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100004828(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10012BEB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100004828(&qword_1006358B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10012C058()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_100004828(&qword_1006359D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v25 = v19;
    v25[1] = v18;
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v26 = v22;
    v26[1] = v23;
    v26[2] = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_100022948(v23, v24);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012C22C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v1 = v0;
  sub_100004828(&qword_1006359D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      v9 = v38 + 1;
      if (v38 + 1 >= v13)
        goto LABEL_26;
      v39 = *(_QWORD *)(v6 + 8 * v9);
      if (!v39)
        break;
    }
LABEL_25:
    v12 = (v39 - 1) & v39;
    v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 152 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_OWORD *)(v21 + 32);
    v23 = *(_OWORD *)(v21 + 48);
    v24 = *(_OWORD *)(v21 + 80);
    v45 = *(_OWORD *)(v21 + 64);
    v46 = v24;
    v44 = v23;
    v26 = *(_OWORD *)(v21 + 112);
    v25 = *(_OWORD *)(v21 + 128);
    v27 = *(_OWORD *)(v21 + 96);
    v50 = *(_QWORD *)(v21 + 144);
    v48 = v26;
    v49 = v25;
    v47 = v27;
    v28 = *(_OWORD *)(v21 + 16);
    v41 = *(_OWORD *)v21;
    v42 = v28;
    v43 = v22;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v29 = v19;
    v29[1] = v18;
    v30 = *(_QWORD *)(v4 + 56) + v20;
    v31 = v42;
    *(_OWORD *)v30 = v41;
    *(_OWORD *)(v30 + 16) = v31;
    v32 = v43;
    v33 = v44;
    v34 = v46;
    *(_OWORD *)(v30 + 64) = v45;
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = v33;
    v35 = v47;
    v36 = v48;
    v37 = v49;
    *(_QWORD *)(v30 + 144) = v50;
    *(_OWORD *)(v30 + 112) = v36;
    *(_OWORD *)(v30 + 128) = v37;
    *(_OWORD *)(v30 + 96) = v35;
    swift_bridgeObjectRetain(v18);
    result = sub_100099EA8(&v41);
  }
  v40 = v38 + 2;
  if (v40 >= v13)
    goto LABEL_26;
  v39 = *(_QWORD *)(v6 + 8 * v40);
  if (v39)
  {
    v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v9);
    ++v40;
    if (v39)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012C450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for IQCType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004828(&qword_100635870);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10012C674()
{
  return sub_10012C680(&qword_100635938);
}

void *sub_10012C680(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100004828(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_retain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10012C82C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012C850(a1, a2, a3, (void (*)(_QWORD))sub_10012CFEC, &qword_100635868, &qword_100635860, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10045A020);
}

uint64_t sub_10012C850(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_10012D028(a5, a6);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_100004828(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10012CA58(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100004828(&qword_100635980);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_1004A8730(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v6);
    result = sub_1004A8730(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10012CB64(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004828(&qword_100635790);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_1004A8730(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10012CC38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004828(&qword_1006358D8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1004A8730(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

_QWORD *sub_10012CD0C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;

  v3 = v2;
  v28 = a2;
  v5 = sub_100004828(&qword_100635798);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004828(&qword_100634030);
  v29 = *(_QWORD *)(v27 - 8);
  v8 = __chkstk_darwin(v27);
  v26 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v25 = (uint64_t)&v23 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v24 = a1;
  v12 = (uint64_t *)(a1 + 56);
  v13 = _swiftEmptyArrayStorage;
  do
  {
    v14 = *(v12 - 1);
    v15 = *v12;
    v17 = *(v12 - 3);
    v16 = *(v12 - 2);
    swift_bridgeObjectRetain(v16);
    v18 = swift_bridgeObjectRetain(v15);
    v28(v17, v16, v14, v15, v18);
    if (v3)
    {
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16);
      return v13;
    }
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v7, 1, v27) == 1)
    {
      sub_100008030((uint64_t)v7, &qword_100635798);
    }
    else
    {
      v19 = v25;
      sub_1000A1F54((uint64_t)v7, v25, &qword_100634030);
      sub_1000A1F54(v19, v26, &qword_100634030);
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = (_QWORD *)sub_1000E2A48(0, v13[2] + 1, 1, (unint64_t)v13);
      v21 = v13[2];
      v20 = v13[3];
      if (v21 >= v20 >> 1)
        v13 = (_QWORD *)sub_1000E2A48(v20 > 1, v21 + 1, 1, (unint64_t)v13);
      v13[2] = v21 + 1;
      sub_1000A1F54(v26, (uint64_t)v13+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v21, &qword_100634030);
    }
    v12 += 4;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease(v24);
  return v13;
}

uint64_t sub_10012CFA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012CFC8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10012CFD4(uint64_t (**a1)())
{
  uint64_t v1;

  return sub_10011F6C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_10012CFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100635858;
  if (!qword_100635858)
  {
    v1 = objc_opt_self(CTXPCServiceSubscriptionContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100635858);
  }
  return result;
}

uint64_t sub_10012D028(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100013E24(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_10012D068(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[16];
  v10 = a1[17];
  swift_bridgeObjectRetain(a1[20]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10012D124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v10 = 1701601613;
    v11 = defaultLogger()(v7);
    __chkstk_darwin(v11);
    *(&v16 - 2) = a1;
    *(&v16 - 1) = a2;
    Logger.sensitive(_:)(sub_10012DEC8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((a1 != 49 || a2 != 0xE100000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(49, 0xE100000000000000, a1, a2, 0) & 1) == 0)
    {
      v10 = 0x656C616D6546;
      if ((a1 != 50 || a2 != 0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(50, 0xE100000000000000, a1, a2, 0) & 1) == 0)
      {
        return 0x6E776F6E6B6E55;
      }
    }
  }
  else
  {
    type metadata accessor for DaemonAnalytics(0);
    v12 = *(_QWORD *)(v2 + 16);
    v13 = *(_QWORD *)(v2 + 24);
    v14 = swift_bridgeObjectRetain(v13);
    static DaemonAnalytics.sendGenderInvalidEvent(issuer:)(v12, v13, v14);
    swift_bridgeObjectRelease(v13);
    return 0;
  }
  return v10;
}

unint64_t sub_10012D2CC(uint64_t a1, void *a2)
{
  Swift::String v4;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000021;
}

unint64_t sub_10012D348(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  NSString v31;
  NSString v32;
  id v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  unint64_t result;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;

  v4 = type metadata accessor for Calendar(0);
  v110 = *(_QWORD *)(v4 - 8);
  v111 = v4;
  __chkstk_darwin(v4);
  v107 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v108 = *(_QWORD *)(v6 - 8);
  v109 = v6;
  __chkstk_darwin(v6);
  v106 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v8);
  v10 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v112 = (char *)&v103 - v16;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v114 = (char *)&v103 - v23;
  v24 = __chkstk_darwin(v22);
  v25 = __chkstk_darwin(v24);
  v28 = (char *)&v103 - v27;
  if (!a2)
  {
    v77 = defaultLogger()(v25);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.debug.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Date of birth doesn't exist in the PDF417, hence not stored in the database", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    type metadata accessor for DaemonAnalytics(0);
    v81 = *(_QWORD *)(v116 + 16);
    v82 = *(_QWORD *)(v116 + 24);
    v83 = swift_bridgeObjectRetain(v82);
    static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)(v81, v82, 1, 0, 0, v83);
    goto LABEL_40;
  }
  v105 = v26;
  v115 = v11;
  v29 = defaultLogger()(v25);
  __chkstk_darwin(v29);
  *(&v103 - 2) = a1;
  *(&v103 - 1) = a2;
  Logger.sensitive(_:)(sub_10012DE8C);
  v113 = *(void (**)(char *, uint64_t))(v18 + 8);
  v113(v28, v17);
  v30 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setDateFormat:", v31);

  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v30, "dateFromString:", v32);

  if (!v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v115);
    goto LABEL_36;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v34 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v35 = v115;
  v34(v10, v15, v115);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v35) == 1)
  {
LABEL_36:
    v84 = sub_10001E5E4((uint64_t)v10);
LABEL_37:
    v85 = v113;
    v86 = v114;
    v87 = defaultLogger()(v84);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.debug.getter(v88);
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Date of birth is in an incorrect format. Unable to derive the age. ", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }

    v85(v86, v17);
    type metadata accessor for DaemonAnalytics(0);
    v91 = *(_QWORD *)(v116 + 16);
    v82 = *(_QWORD *)(v116 + 24);
    v92 = swift_bridgeObjectRetain(v82);
    static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)(v91, v82, 0, 0, 1, v92);

LABEL_40:
    swift_bridgeObjectRelease(v82);
    return 0;
  }
  v103 = v30;
  v104 = v17;
  v36 = v112;
  v37 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v112, v10, v35);
  v38 = v107;
  static Calendar.current.getter(v37);
  v39 = sub_100004828((uint64_t *)&unk_100633998);
  v40 = type metadata accessor for Calendar.Component(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(v39, v43 + *(_QWORD *)(v41 + 72), v42 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_10051FFB0;
  v45 = v44 + v43;
  v46 = v36;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v45, enum case for Calendar.Component.year(_:), v40);
  v47 = sub_100403E1C(v44);
  swift_setDeallocating(v44);
  swift_arrayDestroy(v45, 1, v40);
  v48 = swift_deallocClassInstance(v44, 32, 7);
  Date.init()(v48);
  v49 = v106;
  Calendar.dateComponents(_:from:to:)(v47, v46, v15);
  swift_bridgeObjectRelease(v47);
  v50 = *(void (**)(char *, uint64_t))(v12 + 8);
  v51 = v115;
  v50(v15, v115);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v38, v111);
  v53 = DateComponents.year.getter(v52);
  LOBYTE(v44) = v54;
  v55 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v49, v109);
  if ((v44 & 1) != 0)
  {
    v84 = ((uint64_t (*)(char *, uint64_t))v50)(v46, v51);
    v30 = v103;
    v17 = v104;
    goto LABEL_37;
  }
  v56 = defaultLogger()(v55);
  __chkstk_darwin(v56);
  *(&v103 - 2) = (id)v53;
  Logger.sensitive(_:)(sub_10012DE94);
  v57 = v104;
  v58 = (void (*)(uint64_t, uint64_t))v113;
  v113(v28, v104);
  result = sub_10011D764((uint64_t)&off_1005FFCB0);
  v60 = result;
  v61 = 0;
  v62 = result + 64;
  v63 = 1 << *(_BYTE *)(result + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  v65 = v64 & *(_QWORD *)(result + 64);
  v66 = (unint64_t)(v63 + 63) >> 6;
  v67 = v103;
  while (v65)
  {
    v68 = __clz(__rbit64(v65));
    v65 &= v65 - 1;
    v69 = v68 | (v61 << 6);
LABEL_9:
    v70 = (uint64_t *)(*(_QWORD *)(result + 56) + 16 * v69);
    v72 = *v70;
    v71 = v70[1];
    if (v53 >= v72 && v53 < v71)
    {
      v94 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v69);
      v93 = *v94;
      swift_bridgeObjectRetain(v94[1]);
      swift_release(v60);
      v50(v46, v115);

      return v93;
    }
  }
  v74 = v61 + 1;
  if (__OFADD__(v61, 1))
  {
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  if (v74 >= v66)
    goto LABEL_45;
  v75 = *(_QWORD *)(v62 + 8 * v74);
  ++v61;
  if (v75)
    goto LABEL_31;
  v61 = v74 + 1;
  if (v74 + 1 >= v66)
    goto LABEL_45;
  v75 = *(_QWORD *)(v62 + 8 * v61);
  if (v75)
    goto LABEL_31;
  v61 = v74 + 2;
  if (v74 + 2 >= v66)
    goto LABEL_45;
  v75 = *(_QWORD *)(v62 + 8 * v61);
  if (v75)
    goto LABEL_31;
  v61 = v74 + 3;
  if (v74 + 3 >= v66)
    goto LABEL_45;
  v75 = *(_QWORD *)(v62 + 8 * v61);
  if (v75)
    goto LABEL_31;
  v61 = v74 + 4;
  if (v74 + 4 >= v66)
    goto LABEL_45;
  v75 = *(_QWORD *)(v62 + 8 * v61);
  if (v75)
  {
LABEL_31:
    v65 = (v75 - 1) & v75;
    v69 = __clz(__rbit64(v75)) + (v61 << 6);
    goto LABEL_9;
  }
  v76 = v74 + 5;
  if (v76 < v66)
  {
    v75 = *(_QWORD *)(v62 + 8 * v76);
    if (!v75)
    {
      while (1)
      {
        v61 = v76 + 1;
        if (__OFADD__(v76, 1))
          goto LABEL_49;
        if (v61 >= v66)
          goto LABEL_45;
        v75 = *(_QWORD *)(v62 + 8 * v61);
        ++v76;
        if (v75)
          goto LABEL_31;
      }
    }
    v61 = v76;
    goto LABEL_31;
  }
LABEL_45:
  v95 = swift_release(result);
  v96 = defaultLogger()(v95);
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.debug.getter(v97);
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v99 = 0;
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "Age not in the valid range", v99, 2u);
    swift_slowDealloc(v99, -1, -1);
  }

  v58(v105, v57);
  type metadata accessor for DaemonAnalytics(0);
  v100 = *(_QWORD *)(v116 + 16);
  v101 = *(_QWORD *)(v116 + 24);
  v102 = swift_bridgeObjectRetain(v101);
  static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)(v100, v101, 0, 1, 0, v102);

  swift_bridgeObjectRelease(v101);
  v50(v46, v115);
  return 0;
}

uint64_t sub_10012DC18(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(52);
  v4._object = (void *)0x800000010054C1E0;
  v4._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return 0;
}

uint64_t sub_10012DC98(int a1, Swift::Int a2, uint64_t a3)
{
  Swift::String v4;
  void *object;

  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  return a3;
}

void sub_10012DD20(char a1)
{
  Swift::String v2;

  _StringGuts.grow(_:)(51);
  v2._countAndFlagsBits = 0xD000000000000031;
  v2._object = (void *)0x800000010054C250;
  String.append(_:)(v2);
  __asm { BR              X10 }
}

uint64_t sub_10012DDAC()
{
  Swift::String v0;
  uint64_t v2;

  v0._countAndFlagsBits = 0x45525F4D49414C43;
  v0._object = (void *)0xEB00000000594441;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xEB00000000594441);
  return v2;
}

uint64_t sub_10012DE48()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for IdentityBiomeHelper()
{
  return objc_opt_self(_TtC8coreidvd19IdentityBiomeHelper);
}

uint64_t sub_10012DE8C()
{
  uint64_t v0;

  return sub_10012DC18(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10012DE94()
{
  uint64_t v0;

  return sub_10012DC98(*(_QWORD *)(v0 + 16), 33, 0xD00000000000001FLL);
}

unint64_t sub_10012DEC8()
{
  uint64_t v0;

  return sub_10012D2CC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10012DED0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v17;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  if ((a2 & 1) == 0 && a1)
  {
    v10 = defaultLogger()(v6);
    __chkstk_darwin(v10);
    *(&v17 - 2) = a1;
    Logger.sensitive(_:)(sub_10012E010);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11 = sub_10012CA58(&off_1005FFE10);
    v12 = sub_100004828(&qword_100635AB8);
    swift_arrayDestroy(&unk_1005FFE30, 6, v12);
    if (*(_QWORD *)(v11 + 16) && (v13 = sub_1004A8730(a1), (v14 & 1) != 0))
    {
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v13);
      v9 = *v15;
      swift_bridgeObjectRetain(v15[1]);
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease(v11);
  }
  return v9;
}

uint64_t sub_10012E010()
{
  uint64_t v0;

  return sub_10012DC98(*(_QWORD *)(v0 + 16), 47, 0xD00000000000002DLL);
}

uint64_t sub_10012E044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E2B4(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_10012E054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100109660(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_100004828((uint64_t *)&unk_100633630);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_10012E180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100109660(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = type metadata accessor for MobileDocumentReaderResponse(0);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_10012E2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E2B4(a1, a2, a3, (uint64_t)&type metadata for Bool);
}

uint64_t sub_10012E2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  _QWORD v20[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_100109660(a1);
    v10 = 7168;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
    {
LABEL_6:
      v17 = 0;
      return swift_task_create(v10, v17, a4, a2, a3);
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v10 = v18 | 0x1C00;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
      goto LABEL_6;
  }
  v12 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v11);
  swift_unknownObjectRetain(v11);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  v16 = v15;
  swift_unknownObjectRelease(v11);
  if (!(v16 | v14))
    goto LABEL_6;
  v20[0] = 0;
  v20[1] = 0;
  v17 = v20;
  v20[2] = v14;
  v20[3] = v16;
  return swift_task_create(v10, v17, a4, a2, a3);
}

id sub_10012E3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  id result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];
  uint64_t v47;

  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  IdentityProofingConfiguration.state.getter(v12);
  if (!v15)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DIPError.Code.idStateUnavailable(_:), v10);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100007F30();
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054C420, 0, v14, 0, v20, 0xD000000000000083, 0x800000010054C350, 0xD000000000000039, 0x800000010054C3E0, 39);
    return (id)swift_willThrow(v23);
  }
  v16 = v15;
  v44 = a4;
  v47 = a5;
  v17 = String.lowercased()();
  swift_bridgeObjectRelease(v16);
  sub_1000D6E94(v17._countAndFlagsBits, (uint64_t)v17._object);
  if (v5)
    return (id)swift_bridgeObjectRelease(v17._object);
  v24 = v18;
  swift_bridgeObjectRelease(v17._object);
  if (!v24)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v10);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100007F30();
    swift_allocError(v33, v34, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054C440, 0, v14, 0, v32, 0xD000000000000083, 0x800000010054C350, 0xD000000000000039, 0x800000010054C3E0, 43);
    return (id)swift_willThrow(v23);
  }
  if (!((unint64_t)v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v24);
    if (v25)
      goto LABEL_9;
LABEL_19:
    swift_bridgeObjectRelease(v24);
    goto LABEL_20;
  }
  if (v24 >= 0)
    v35 = v24 & 0xFFFFFFFFFFFFFF8;
  else
    v35 = v24;
  swift_bridgeObjectRetain(v24);
  v25 = _CocoaArrayWrapper.endIndex.getter(v35);
  if (!v25)
    goto LABEL_19;
LABEL_9:
  if ((v24 & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
  }
  else
  {
    if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain(v24);
      v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
      swift_bridgeObjectRelease(v24);
      goto LABEL_25;
    }
    v26 = *(id *)(v24 + 32);
  }
  v27 = v26;
  swift_bridgeObjectRelease(v24);
  v28 = objc_msgSend(v27, "workflowID");

  if (v28)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    goto LABEL_21;
  }
LABEL_20:
  v29 = 0;
  v31 = 0;
LABEL_21:
  swift_beginAccess(a3 + 16, v46, 1, 0);
  v36 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v29;
  *(_QWORD *)(a3 + 24) = v31;
  result = (id)swift_bridgeObjectRelease(v36);
  if (!v25)
    goto LABEL_28;
  if ((v24 & 0xC000000000000001) != 0)
    goto LABEL_32;
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v37 = *(id *)(v24 + 32);
LABEL_25:
    v38 = objc_msgSend(v37, "proofingSessionID");

    if (v38)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v40 = v39;

LABEL_29:
      v41 = v44;
      swift_beginAccess(v44 + 16, v45, 1, 0);
      v42 = *(_QWORD *)(v41 + 24);
      *(_QWORD *)(v41 + 16) = v25;
      *(_QWORD *)(v41 + 24) = v40;
      swift_bridgeObjectRelease(v42);
      sub_10012EF88(a2, v24);
      swift_bridgeObjectRelease(v24);
      return sub_1000D6288();
    }
    v25 = 0;
LABEL_28:
    v40 = 0;
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012E7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc(dword_100635AF4);
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_100007EE8;
  return sub_10012F6D4(a5, a6, a7, a8);
}

uint64_t sub_10012E870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = sub_100004828(&qword_10062FEC0);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v5[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[15] = v8;
  v5[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012E8FC, 0, 0);
}

uint64_t sub_10012E8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Proofing has been cancelled by the user, will attempt to clean up and notify the server using Credential Identifier", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 112);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v9, 24, 7);
  sub_1000D6044();
  v11 = v10;
  v13 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 72);
  v30 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 64);
  v16 = swift_allocObject(&unk_100608B98, 32, 7);
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = swift_allocObject(&unk_100608B98, 32, 7);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  v18 = (_QWORD *)swift_allocObject(&unk_100608C10, 80, 7);
  v18[2] = v11;
  v18[3] = v15;
  v18[4] = v14;
  v18[5] = v30;
  v18[6] = v13;
  v18[7] = v16;
  v18[8] = v17;
  v18[9] = v12;
  swift_retain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v12);
  sub_1000D6570((uint64_t)sub_1001306B0, (uint64_t)v18);
  v31 = *(_QWORD *)(v1 + 128);
  v21 = *(_QWORD *)(v1 + 96);
  v20 = *(_QWORD *)(v1 + 104);
  v29 = v20;
  swift_release(v18);
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
  swift_beginAccess(v16 + 16, v1 + 16, 0, 0);
  v24 = *(_QWORD *)(v16 + 16);
  v23 = *(_QWORD *)(v16 + 24);
  swift_beginAccess(v17 + 16, v1 + 40, 0, 0);
  v25 = *(_QWORD *)(v17 + 16);
  v26 = *(_QWORD *)(v17 + 24);
  v27 = (_QWORD *)swift_allocObject(&unk_100608C38, 72, 7);
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = v21;
  v27[5] = v24;
  v27[6] = v23;
  v27[7] = v25;
  v27[8] = v26;
  swift_bridgeObjectRetain(v26);
  swift_retain(v21);
  swift_bridgeObjectRetain(v23);
  v28 = sub_10012E2B4(v29, (uint64_t)&unk_100635BB8, (uint64_t)v27, (uint64_t)&type metadata for () + 8);
  swift_release(v28);
  swift_release(v11);
  swift_release(v17);
  swift_release(v16);
  swift_task_dealloc(v31);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10012EC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[40];
  _BYTE v49[24];
  _BYTE v50[24];
  uint64_t v51;

  v46 = a7;
  v47 = a8;
  v45 = a6;
  v14 = type metadata accessor for DIPError.Code(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D6B54(a2, a3, a4, a5);
  if (!v8)
  {
    v19 = v18;
    v44 = a1;
    if (v18)
    {
      v20 = v45;
      v21 = v45 + 16;
      v22 = v46;
      v43 = v46 + 16;
      v23 = objc_msgSend(v18, "workflowID");
      if (v23)
      {
        v24 = v23;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v27 = v26;

      }
      else
      {
        v25 = 0;
        v27 = 0;
      }
      swift_beginAccess(v21, v50, 1, 0);
      v32 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 16) = v25;
      *(_QWORD *)(v20 + 24) = v27;
      swift_bridgeObjectRelease(v32);
      v33 = objc_msgSend(v19, "proofingSessionID");
      if (v33)
      {
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

      }
      else
      {
        v35 = 0;
        v37 = 0;
      }
      swift_beginAccess(v43, v49, 1, 0);
      v38 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 16) = v35;
      *(_QWORD *)(v22 + 24) = v37;
      swift_bridgeObjectRelease(v38);
      v39 = sub_100004828(&qword_100640C30);
      inited = swift_initStackObject(v39, v48);
      *(_OWORD *)(inited + 16) = xmmword_100523860;
      *(_QWORD *)(inited + 32) = v19;
      v51 = inited;
      specialized Array._endMutation()(inited);
      v41 = v51;
      v42 = v19;
      sub_10012EF88(v44, v41);
      swift_bridgeObjectRelease(v41);
      sub_1000D6288();

    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v14);
      v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v29 = type metadata accessor for DIPError(0);
      v30 = sub_100007F30();
      swift_allocError(v29, v30, 0, 0);
      v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054C5F0, 0, v17, 0, v28, 0xD000000000000083, 0x800000010054C350, 0xD000000000000021, 0x800000010054C610, 70);
      swift_willThrow(v31);
    }
  }
}

uint64_t sub_10012EF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc(dword_100635AF4);
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_10001D0A0;
  return sub_10012F6D4(a5, a6, a7, a8);
}

void sub_10012EF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v4 = v3;
  v5 = v2;
  v8 = type metadata accessor for Logger(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  v9 = __chkstk_darwin(v8);
  v31 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v32 = (char *)&v31 - v11;
  if ((unint64_t)a2 >> 62)
    goto LABEL_19;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v30))
  {
    v13 = 4;
    while (1)
    {
      v14 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, a2)
          : *(id *)(a2 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v35 = v14;
      sub_10012F220(&v35, v5, a1);
      if (v4)
      {
        swift_bridgeObjectRelease(a2);

        return;
      }

      ++v13;
      if (v16 == v12)
        goto LABEL_10;
    }
    __break(1u);
LABEL_19:
    if (a2 < 0)
      v30 = a2;
    else
      v30 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_10:
  v17 = swift_bridgeObjectRelease(a2);
  v18 = v32;
  v19 = defaultLogger()(v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Will attempt to delete biome meta data", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = v34;
  v24 = *(void (**)(char *, uint64_t))(v33 + 8);
  v24(v18, v34);
  v25 = sub_100396110();
  if (!v4)
  {
    v26 = defaultLogger()(v25);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Will attempt to delete proofing data", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v24(v31, v23);
    sub_10039648C();
  }
}

uint64_t sub_10012F220(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v5 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = IdentityTarget.init(rawValue:)(objc_msgSend(*a1, "target"));
  if ((v14 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.targetUnavailable(_:), v8);
    v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v31 = type metadata accessor for DIPError(0);
    v32 = sub_100007F30();
    swift_allocError(v31, v32, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000055, 0x800000010054C500, 0, v11, 0, v30, 0xD000000000000083, 0x800000010054C350, 0xD000000000000027, 0x800000010054C560, 89);
    return swift_willThrow(v33);
  }
  v47 = v13;
  v15 = objc_msgSend(v12, "credentialIdentifier");
  if (!v15)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.credentialIdentifierDoesNotExist(_:), v8);
    v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_100007F30();
    swift_allocError(v35, v36, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000005DLL, 0x800000010054C590, 0, v11, 0, v34, 0xD000000000000083, 0x800000010054C350, 0xD000000000000027, 0x800000010054C560, 93);
    return swift_willThrow(v33);
  }
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  sub_10038E634(v47, v17, v19);
  defaultLogger()(objc_msgSend(*(id *)(a3 + 16), "deleteObject:", v12));
  v20 = v12;
  swift_bridgeObjectRetain(v19);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    v24 = swift_slowAlloc(32, -1);
    v43 = swift_slowAlloc(96, -1);
    v52 = v43;
    *(_DWORD *)v24 = 136315650;
    v25 = objc_msgSend(v20, "proofingSessionID");
    v45 = v17;
    v46 = v22;
    v44 = v23;
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v29 = 0xE300000000000000;
      v27 = 4999502;
    }
    v50 = sub_1000E3AC8(v27, v29, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 4);

    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain(v19);
    v50 = sub_1000E3AC8(v45, v19, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 14);
    swift_bridgeObjectRelease_n(v19, 3);
    *(_WORD *)(v24 + 22) = 2080;
    v38 = IdentityTarget.debugDescription.getter(v47);
    v40 = v39;
    v50 = sub_1000E3AC8(v38, v39, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 24);
    swift_bridgeObjectRelease(v40);
    v41 = v46;
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, "Deleted proofing session with proofingSessionID %s and credentialIdentifier %s and target %s", (uint8_t *)v24, 0x20u);
    v42 = v43;
    swift_arrayDestroy(v43, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v7, v49);
}

uint64_t sub_10012F6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[10] = swift_task_alloc(v8);
  v5[11] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError(0);
  v5[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[13] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v11);
  v5[15] = swift_task_alloc(v11);
  v12 = type metadata accessor for DIPError.Code(0);
  v5[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[17] = v13;
  v5[18] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012F7AC, 0, 0);
}

uint64_t sub_10012F7AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (*(_QWORD *)(v0 + 32))
  {
    if (*(_QWORD *)(v0 + 48))
    {
      v1 = (_QWORD *)swift_task_alloc(dword_100640CE4);
      *(_QWORD *)(v0 + 152) = v1;
      *v1 = v0;
      v1[1] = sub_10012FC84;
      return sub_100427888((uint64_t)&off_100601090, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
    }
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 96);
    v49 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104);
    v49(v8, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), *(_QWORD *)(v0 + 128));
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100007F30();
    v51 = swift_allocError(v9, v11, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x800000010054C4C0, 0, v8, 0, v10, 0xD000000000000083, 0x800000010054C350, 0xD000000000000025, 0x800000010054C490, 122);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 96);
    v49 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104);
    v49(v3, enum case for DIPError.Code.workflowIdDoesNotExist(_:), *(_QWORD *)(v0 + 128));
    v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100007F30();
    v51 = swift_allocError(v4, v6, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010054C460, 0, v3, 0, v5, 0xD000000000000083, 0x800000010054C350, 0xD000000000000025, 0x800000010054C490, 118);
  }
  swift_willThrow(v7);
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v46 = *(_QWORD *)(v0 + 64);
  v47 = *(_QWORD *)(v0 + 112);
  v49(v12, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v51);
  v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v51, v12, 0, v18, 0xD000000000000083, 0x800000010054C350, 0xD000000000000025, 0x800000010054C490, 133);
  v19 = sub_100007F30();
  v20 = swift_allocError(v15, v19, 0, 0);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v23 = v21(v22, v13, v15);
  defaultLogger()(v23);
  DIPRecordError(_:message:log:)(v20, 0, 0xE000000000000000, v16);
  v24 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v24(v16, v46);
  v25 = swift_errorRelease(v20);
  defaultLogger()(v25);
  v26 = v21(v47, v13, v15);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v30 = *(_QWORD *)(v0 + 112);
  v31 = *(_QWORD *)(v0 + 120);
  v33 = *(_QWORD *)(v0 + 96);
  v32 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 80);
  v50 = *(_QWORD *)(v0 + 64);
  if (v29)
  {
    v48 = v24;
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = v34;
    v36 = swift_slowAlloc(32, -1);
    v52 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = Error.localizedDescription.getter(v33, v19);
    v39 = v38;
    *(_QWORD *)(v0 + 16) = sub_1000E3AC8(v37, v38, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v35 + 4);
    swift_bridgeObjectRelease(v39);
    v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v40(v30, v33);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Received an error communicating user cancelling the proofing flow with the server - %s. Treating this as a non fatal error as this has not user impact.", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    swift_errorRelease(v51);
    v48(v45, v50);
  }
  else
  {

    v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v40(v30, v33);
    swift_errorRelease(v51);
    v24(v34, v50);
  }
  v40(v31, v33);
  v41 = *(_QWORD *)(v0 + 112);
  v42 = *(_QWORD *)(v0 + 120);
  v44 = *(_QWORD *)(v0 + 80);
  v43 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v42);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012FC84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10012FD30, 0, 0);
  v5 = *(_QWORD *)(v3 + 112);
  v6 = *(_QWORD *)(v3 + 120);
  v8 = *(_QWORD *)(v3 + 80);
  v7 = *(_QWORD *)(v3 + 88);
  swift_task_dealloc(*(_QWORD *)(v3 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10012FD30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v42 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v45 = v1;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v9, 0xD000000000000083, 0x800000010054C350, 0xD000000000000025, 0x800000010054C490, 133);
  v10 = sub_100007F30();
  v11 = swift_allocError(v4, v10, 0, 0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v14 = v12(v13, v3, v4);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v6);
  v44 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v44(v6, v8);
  v15 = swift_errorRelease(v11);
  defaultLogger()(v15);
  v16 = v12(v42, v3, v4);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v41 = *(_QWORD *)(v0 + 80);
    v43 = *(_QWORD *)(v0 + 120);
    v39 = *(_QWORD *)(v0 + 104);
    v40 = *(_QWORD *)(v0 + 64);
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v46 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = Error.localizedDescription.getter(v20, v10);
    v25 = v24;
    *(_QWORD *)(v0 + 16) = sub_1000E3AC8(v23, v24, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v21 + 4);
    swift_bridgeObjectRelease(v25);
    v26 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v26(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received an error communicating user cancelling the proofing flow with the server - %s. Treating this as a non fatal error as this has not user impact.", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    swift_errorRelease(v45);
    v44(v41, v40);
    v26(v43, v20);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 112);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 64);

    v33 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v33(v27, v29);
    swift_errorRelease(v45);
    v44(v31, v32);
    v33(v28, v29);
  }
  v34 = *(_QWORD *)(v0 + 112);
  v35 = *(_QWORD *)(v0 + 120);
  v37 = *(_QWORD *)(v0 + 80);
  v36 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for IdentityProofingCancellationProvider()
{
  return objc_opt_self(_TtC8coreidvd36IdentityProofingCancellationProvider);
}

uint64_t sub_100130088(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_10062FEC0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v2[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100130134, 0, 0);
}

uint64_t sub_100130134()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v1 = (void *)v0[8];
  if (v1)
  {
    v2 = v1;
    v3 = defaultLogger()(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Proofing has been cancelled by the user, will attempt to clean up and notify the server using proofing configuration and proofing options", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = v0[15];
    v7 = v0[16];
    v9 = v0[14];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v10 = type metadata accessor for IdentityProofingDataContext();
    swift_allocObject(v10, 24, 7);
    sub_1000D6044();
    v12 = v11;
    v13 = v0[9];
    v14 = swift_allocObject(&unk_100608B98, 32, 7);
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    v15 = swift_allocObject(&unk_100608B98, 32, 7);
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    v16 = (_QWORD *)swift_allocObject(&unk_100608BC0, 56, 7);
    v16[2] = v2;
    v16[3] = v12;
    v16[4] = v14;
    v16[5] = v15;
    v16[6] = v13;
    v17 = v2;
    swift_retain(v12);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v13);
    sub_1000D6570((uint64_t)sub_1001305AC, (uint64_t)v16);
    v37 = v17;
    v38 = v0[16];
    v26 = v0[13];
    v36 = v26;
    v39 = v0[12];
    v27 = v0[9];
    swift_release(v16);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v26, 1, 1, v28);
    swift_beginAccess(v14 + 16, v0 + 2, 0, 0);
    v30 = *(_QWORD *)(v14 + 16);
    v29 = *(_QWORD *)(v14 + 24);
    swift_beginAccess(v15 + 16, v0 + 5, 0, 0);
    v32 = *(_QWORD *)(v15 + 16);
    v31 = *(_QWORD *)(v15 + 24);
    v33 = (_QWORD *)swift_allocObject(&unk_100608BE8, 72, 7);
    v33[2] = 0;
    v33[3] = 0;
    v33[4] = v27;
    v33[5] = v30;
    v33[6] = v29;
    v33[7] = v32;
    v33[8] = v31;
    swift_bridgeObjectRetain(v31);
    swift_retain(v27);
    swift_bridgeObjectRetain(v29);
    v34 = sub_10012E2B4(v36, (uint64_t)&unk_100635BA8, (uint64_t)v33, (uint64_t)&type metadata for () + 8);

    swift_release(v34);
    swift_release(v12);
    swift_release(v15);
    swift_release(v14);
    swift_task_dealloc(v38);
    swift_task_dealloc(v36);
    swift_task_dealloc(v39);
    v35 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v18 = v0[12];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[11] + 104))(v18, enum case for DIPError.Code.proofingConfigurationUnavailable(_:), v0[10]);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100007F30();
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010054C320, 0, v18, 0, v19, 0xD000000000000083, 0x800000010054C350, 0xD000000000000039, 0x800000010054C3E0, 28);
    swift_willThrow(v22);
    v23 = v0[12];
    v24 = v0[13];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v24);
    swift_task_dealloc(v23);
    v35 = (uint64_t (*)(void))v0[1];
  }
  return v35();
}

uint64_t sub_100130544()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100130568()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

id sub_1001305AC()
{
  uint64_t *v0;

  return sub_10012E3DC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1001305D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[8];
  v6 = (_QWORD *)swift_task_alloc(dword_100635BA4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100007EE8;
  v7 = (_QWORD *)swift_task_alloc(dword_100635AF4);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_100007EE8;
  return sub_10012F6D4(v2, v3, v4, v5);
}

uint64_t sub_100130664()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_1001306B0()
{
  uint64_t *v0;

  sub_10012EC14(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9]);
}

uint64_t sub_1001306D8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100130714()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[8];
  v6 = (_QWORD *)swift_task_alloc(dword_100635BB4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001D0A0;
  v7 = (_QWORD *)swift_task_alloc(dword_100635AF4);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_10001D0A0;
  return sub_10012F6D4(v2, v3, v4, v5);
}

uint64_t sub_1001307A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPCertUsage(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_10062FC40);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TrustValidator(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1, v16);
  v17 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPCertUsage.krlSigning(_:), v6);
  v32 = type metadata accessor for DIPOIDVerifier(0);
  v33 = &protocol witness table for DIPOIDVerifier;
  v18 = sub_100022234(&v31);
  DIPOIDVerifier.init()(v18);
  sub_100006D9C((uint64_t)v12, &v31, (uint64_t)v9, v15);
  v19 = v1 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
  sub_100131CF0((uint64_t)v15, v1 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator);
  type metadata accessor for SecCertificate(0);
  v20 = static SecCertificateRef.appleExternalRoots.getter();
  swift_beginAccess(v19, &v31, 33, 0);
  v21 = v19 + *(int *)(v13 + 20);
  v22 = *(_QWORD *)(v21 + 24);
  v23 = *(_QWORD *)(v21 + 32);
  sub_10001E624(v21, v22);
  dispatch thunk of OIDVerifying.setTrustedRoots(_:)(v20, v22, v23);
  swift_endAccess(&v31);
  v24 = swift_bridgeObjectRelease(v20);
  v25 = defaultLogger()(v24);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "KRLTrustValidator set trust for external roots.", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1;
}

uint64_t sub_100130A50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[2] = a1;
  v2[3] = v1;
  v4 = type metadata accessor for DIPError.Code(0);
  v2[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(dword_100635C0C);
  v2[7] = v6;
  *v6 = v2;
  v6[1] = sub_100130AC8;
  return sub_100130EFC(a1);
}

uint64_t sub_100130AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 56);
  v5 = *(_QWORD *)(*v2 + 24);
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v6 = sub_100130DE4;
  else
    v6 = sub_100130B38;
  return swift_task_switch(v6, v5, 0);
}

void sub_100130B38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;

  v1 = v0[8];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v22 = v0[8];
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0[8]);
    v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
  {
    v10 = v0[5];
    v9 = v0[6];
    v11 = v0[4];
    swift_bridgeObjectRelease(v0[8]);
    v8 = enum case for DIPError.Code.coseInvalidResponse(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.coseInvalidResponse(_:), v11);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100007F30();
    v7 = swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x800000010054C7D0, 0, v9, 0, v12, 0xD00000000000007CLL, 0x800000010054C750, 0x65746164696C6176, 0xEC000000293A5F28, 33);
    swift_willThrow(v15);
    goto LABEL_10;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[8]);
    v3 = v0[8];
    goto LABEL_7;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = v0[8];
    v4 = *(id *)(v3 + 32);
LABEL_7:
    v5 = v0[9];
    v6 = v0[2];
    swift_bridgeObjectRelease(v3);
    sub_100131934(v6);
    v7 = v5;

    if (!v5)
    {
      swift_task_dealloc(v0[6]);
      v21 = (void (*)(void))v0[1];
      goto LABEL_12;
    }
    v8 = enum case for DIPError.Code.coseInvalidResponse(_:);
LABEL_10:
    v16 = v0[6];
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v0[5] + 104))(v16, v8, v0[4]);
    swift_errorRetain(v7);
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100007F30();
    swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v7, v16, 0, v17, 0xD00000000000007CLL, 0x800000010054C750, 0x65746164696C6176, 0xEC000000293A5F28, 38);
    swift_willThrow(v20);
    swift_errorRelease(v7);
    swift_task_dealloc(v16);
    v21 = (void (*)(void))v0[1];
LABEL_12:
    v21();
    return;
  }
  __break(1u);
}

uint64_t sub_100130DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.coseInvalidResponse(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100007F30();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD00000000000007CLL, 0x800000010054C750, 0x65746164696C6176, 0xEC000000293A5F28, 38);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100130EFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v6 = type metadata accessor for TrustValidator(0);
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v2[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[18] = v8;
  v2[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100130FD8, v1, 0);
}

uint64_t sub_100130FD8()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __objc2_prop *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 160) = v1;
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3._countAndFlagsBits = 0xD00000000000001ELL;
  v3._object = (void *)0x800000010054C6C0;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (!v4)
  {
    v22 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
    swift_beginAccess(v23, v0 + 16, 0, 0);
    sub_100131D34(v23, v22);
    v24 = (_QWORD *)swift_task_alloc(dword_10062FC54);
    *(_QWORD *)(v0 + 168) = v24;
    *v24 = v0;
    v24[1] = sub_1001314B4;
    return sub_1000074E0(*(_QWORD *)(v0 + 72));
  }
  v5 = *(_QWORD *)(v0 + 152);
  v6 = enum case for DIPError.Code.revokedCertificate(_:);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v5, enum case for DIPError.Code.revokedCertificate(_:), *(_QWORD *)(v0 + 136));
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100007F30();
  v10 = swift_allocError(v8, v9, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010054C710, 0, v5, 0, v7, 0xD00000000000007CLL, 0x800000010054C750, 0xD00000000000001DLL, 0x800000010053B100, 48);
  swift_willThrow(v11);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = static DIPOIDVerifier.getSpecificCertificateError(_:)(v10);
  swift_getErrorValue(v15, v0 + 64, v0 + 40);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
    goto LABEL_13;
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 112);
  sub_1001320A4(*(_QWORD *)(v0 + 120), v18);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v18, v16);
  if (v19 != v6)
  {
    if (v19 == enum case for DIPError.Code.expiredCertificate(_:))
    {
      v20 = &stru_10062A000;
      if (qword_10062F608 != -1)
        swift_once(&qword_10062F608, sub_1004FE000);
      v21 = qword_1006708F0;
      goto LABEL_16;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
LABEL_13:
    if (qword_10062F610 != -1)
      swift_once(&qword_10062F610, sub_1004FE034);
    v21 = qword_100670908;
    v20 = &stru_10062A000;
    goto LABEL_16;
  }
  v20 = &stru_10062A000;
  if (qword_10062F600 != -1)
    swift_once(&qword_10062F600, sub_1004FDFCC);
  v21 = qword_1006708D8;
LABEL_16:
  v26 = *(void **)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 120);
  v28 = type metadata accessor for Milestone(0);
  sub_1000352C0(v28, (uint64_t)v21);
  Milestone.log()();
  sub_100131DB4(v27);
  v29 = objc_msgSend(v26, v20[130].attr);
  v30._countAndFlagsBits = 0xD000000000000022;
  v30._object = (void *)0x800000010054C6E0;
  LOBYTE(v26) = NSUserDefaults.internalBool(forKey:)(v30);

  if ((v26 & 1) != 0)
  {
    v32 = defaultLogger()(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "KRLTrustValidator trust validation failed. This check is disabled in settings, bypassing.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }
    v37 = *(_QWORD *)(v0 + 96);
    v36 = *(_QWORD *)(v0 + 104);
    v38 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    v39 = sub_100131DF4();
    swift_errorRelease(v15);
    swift_errorRelease(v10);
    v41 = *(_QWORD *)(v0 + 120);
    v40 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 104);
    v42 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v39);
  }
  else
  {
    v44 = *(_QWORD *)(v0 + 152);
    v46 = *(_QWORD *)(v0 + 120);
    v45 = *(_QWORD *)(v0 + 128);
    v48 = *(_QWORD *)(v0 + 104);
    v47 = *(_QWORD *)(v0 + 112);
    swift_willThrow(v31);
    swift_errorRelease(v15);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001314B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc(v4);
  v5 = v3[16];
  v6 = v3[10];
  sub_100131D78(v5);
  if (v1)
    v7 = sub_1001315E4;
  else
    v7 = sub_10013152C;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10013152C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_10062F5F8 != -1)
    swift_once(&qword_10062F5F8, sub_1004FDF98);
  v1 = type metadata accessor for Milestone(0);
  sub_1000352C0(v1, (uint64_t)qword_1006708C0);
  Milestone.log()();
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1001315E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = static DIPOIDVerifier.getSpecificCertificateError(_:)(v1);
  swift_getErrorValue(v5, v0 + 64, v0 + 40);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
  {
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 112);
    sub_1001320A4(*(_QWORD *)(v0 + 120), v8);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v8, v6);
    if (v9 == enum case for DIPError.Code.revokedCertificate(_:))
    {
      if (qword_10062F600 != -1)
        swift_once(&qword_10062F600, sub_1004FDFCC);
      v10 = qword_1006708D8;
      goto LABEL_14;
    }
    if (v9 == enum case for DIPError.Code.expiredCertificate(_:))
    {
      if (qword_10062F608 != -1)
        swift_once(&qword_10062F608, sub_1004FE000);
      v10 = qword_1006708F0;
      goto LABEL_14;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
  }
  if (qword_10062F610 != -1)
    swift_once(&qword_10062F610, sub_1004FE034);
  v10 = qword_100670908;
LABEL_14:
  v11 = *(void **)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = type metadata accessor for Milestone(0);
  sub_1000352C0(v13, (uint64_t)v10);
  Milestone.log()();
  sub_100131DB4(v12);
  v14 = objc_msgSend(v11, "standardUserDefaults");
  v15._object = (void *)0x800000010054C6E0;
  v15._countAndFlagsBits = 0xD000000000000022;
  LOBYTE(v11) = NSUserDefaults.internalBool(forKey:)(v15);

  if ((v11 & 1) != 0)
  {
    v17 = defaultLogger()(v16);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "KRLTrustValidator trust validation failed. This check is disabled in settings, bypassing.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 104);
    v23 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v24 = sub_100131DF4();
    swift_errorRelease(v5);
    swift_errorRelease(v1);
    v26 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v24);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 120);
    v31 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 104);
    v33 = *(_QWORD *)(v0 + 112);
    swift_willThrow(v16);
    swift_errorRelease(v5);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_100131934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for TrustValidator(0);
  __chkstk_darwin(v8);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = v1 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator;
  swift_beginAccess(v11, v24, 0, 0);
  sub_100131D34(v11, (uint64_t)v10);
  sub_1000078F0(a1);
  if (v2)
  {
    sub_100131D78((uint64_t)v10);
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v13._object = (void *)0x800000010054C690;
    v13._countAndFlagsBits = 0xD000000000000026;
    v14 = NSUserDefaults.internalBool(forKey:)(v13);

    if (v14)
    {
      v16 = defaultLogger()(v15);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.debug.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "KRLTrustValidator signature validation failed. This check is disabled in settings, bypassing.", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }
      swift_errorRelease(v2);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      if (qword_10062F5F0 != -1)
        swift_once(&qword_10062F5F0, sub_1004FDF64);
      v21 = type metadata accessor for Milestone(0);
      sub_1000352C0(v21, (uint64_t)qword_1006708A8);
      Milestone.log()();
      swift_willThrow(v22);
    }
  }
  else
  {
    sub_100131D78((uint64_t)v10);
    if (qword_10062F5E8 != -1)
      swift_once(&qword_10062F5E8, sub_1004FDF30);
    v20 = type metadata accessor for Milestone(0);
    sub_1000352C0(v20, (uint64_t)qword_100670890);
    Milestone.log()();
  }
}

uint64_t sub_100131BB8()
{
  uint64_t v0;

  sub_100131D78(v0 + OBJC_IVAR____TtC8coreidvd17KRLTrustValidator_baseTrustValidator);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100131BE4()
{
  return type metadata accessor for KRLTrustValidator(0);
}

uint64_t type metadata accessor for KRLTrustValidator(uint64_t a1)
{
  uint64_t result;

  result = qword_100635BF0;
  if (!qword_100635BF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KRLTrustValidator);
  return result;
}

uint64_t sub_100131C28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for TrustValidator(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100131CA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100635C04);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100007EE8;
  return sub_100130A50(a1);
}

uint64_t sub_100131CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrustValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100131D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrustValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100131D78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrustValidator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100131DB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_1006335E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100131DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - v4;
  v6 = COSE_Sign1.x509Chain.getter(v3);
  if (v6)
  {
    v7 = v6;
    v12 = decodeCertificateChain(fromDER:)(v6);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v8 = defaultLogger()(0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "KRLTrustValidator signedKRL does not include a x509 chain", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v12;
}

uint64_t sub_1001320A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_1006335E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1001320EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v5);
  v8 = swift_retain_n(v1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v20 = v3;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc(32, -1);
    v21 = (uint64_t)v1;
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_retain(v1);
    v14 = String.init<A>(describing:)(&v21, v2);
    v16 = v15;
    v21 = sub_1000E3AC8(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "denit from %s called", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v20);
  }
  else
  {

    swift_release_n(v1, 2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  v17 = v1[10];
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  objc_msgSend(*(id *)(v17 + 16), "invalidate");
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));

  swift_bridgeObjectRelease(v1[4]);
  swift_bridgeObjectRelease(v1[6]);
  swift_bridgeObjectRelease(v1[9]);
  swift_release(v1[10]);
  return v1;
}

uint64_t sub_100132314()
{
  uint64_t v0;

  sub_1001320EC();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for Pass()
{
  return objc_opt_self(_TtC8coreidvd4Pass);
}

uint64_t sub_100132354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_QWORD *)(v9 + 176) = a8;
  *(_QWORD *)(v9 + 184) = v8;
  *(_BYTE *)(v9 + 344) = a7;
  *(_QWORD *)(v9 + 160) = a5;
  *(_QWORD *)(v9 + 168) = a6;
  *(_QWORD *)(v9 + 144) = a3;
  *(_QWORD *)(v9 + 152) = a4;
  *(_QWORD *)(v9 + 128) = a1;
  *(_QWORD *)(v9 + 136) = a2;
  v10 = sub_100004828(&qword_100630A48);
  *(_QWORD *)(v9 + 192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100633FB0);
  *(_QWORD *)(v9 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BundleRecordFetcher(0);
  *(_QWORD *)(v9 + 208) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 216) = v13;
  *(_QWORD *)(v9 + 224) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  *(_QWORD *)(v9 + 232) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 240) = v15;
  *(_QWORD *)(v9 + 248) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  *(_QWORD *)(v9 + 256) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 264) = v17;
  *(_QWORD *)(v9 + 272) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 280) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 288) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 296) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 304) = swift_task_alloc(v20);
  return swift_task_switch(sub_100132494, 0, 0);
}

void sub_100132494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  NSURL *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  NSString v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(uint64_t, uint64_t);
  id v76;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pass addHistoryEvent", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 304);
  v7 = *(_QWORD *)(v1 + 280);
  v8 = *(_QWORD *)(v1 + 288);

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = objc_msgSend(objc_allocWithZone((Class)PKPaymentService), "init");
  *(_QWORD *)(v1 + 312) = v10;
  v11 = objc_msgSend((id)objc_opt_self(PKPaymentTransaction), "paymentTransactionWithSource:", 2);
  *(_QWORD *)(v1 + 320) = v11;
  if (!v11)
  {

    v44 = *(_QWORD *)(v1 + 296);
    v45 = *(_QWORD *)(v1 + 272);
    v46 = *(_QWORD *)(v1 + 248);
    v47 = *(_QWORD *)(v1 + 224);
    v49 = *(_QWORD *)(v1 + 192);
    v48 = *(_QWORD *)(v1 + 200);
    swift_task_dealloc(*(_QWORD *)(v1 + 304));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    (*(void (**)(void))(v1 + 8))();
    return;
  }
  v12 = v11;
  v75 = v9;
  v76 = v10;
  v14 = *(_QWORD *)(v1 + 264);
  v13 = *(_QWORD *)(v1 + 272);
  v15 = *(_QWORD *)(v1 + 248);
  v16 = *(_QWORD *)(v1 + 256);
  v18 = *(_QWORD *)(v1 + 232);
  v17 = *(_QWORD *)(v1 + 240);
  Date.init()(objc_msgSend(v11, "setTransactionType:", 15));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v16);
  objc_msgSend(v12, "setTransactionDate:", isa);

  v20 = UUID.init()(objc_msgSend(v12, "setTransactionStatus:", 1));
  UUID.uuidString.getter(v20);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v12, "setIdentifier:", v23);

  objc_msgSend(v12, "setOriginatedByDevice:", 1);
  objc_msgSend(v12, "setHasNotificationServiceData:", 1);
  v24 = sub_1001335E8();
  if ((v24 & 1) != 0)
  {
    v25 = defaultLogger()(v24);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "The bundleID is associated with an App Clip. Will set requiresLocation to true", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    v29 = *(_QWORD *)(v1 + 296);
    v30 = *(_QWORD *)(v1 + 280);

    v75(v29, v30);
    v24 = (uint64_t)objc_msgSend(v12, "setRequiresLocation:", 1);
  }
  v31 = *(_QWORD *)(v1 + 216);
  v32 = *(_QWORD *)(v1 + 224);
  v33 = *(_QWORD *)(v1 + 208);
  v34 = *(_QWORD *)(v1 + 176);
  v35 = *(_QWORD *)(v1 + 160);
  v36 = *(_QWORD *)(v1 + 128);
  BundleRecordFetcher.init()(v24);
  v37 = sub_100132C38(v36, v35, v34);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  if (v37)
  {
    v39 = *(_QWORD *)(v1 + 200);
    DigitalPresentmentDisplayConfiguration.clientDisplayInfo.getter(v38);
    v40 = type metadata accessor for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40);
    v43 = *(_QWORD *)(v1 + 200);
    if (v42 == 1)
    {
      sub_100008030(v43, &qword_100633FB0);
    }
    else
    {
      v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 88))(v43, v40);
      v51 = *(_QWORD **)(v1 + 200);
      if (v50 == enum case for DigitalPresentmentDisplayConfiguration.ClientDisplayInfo.appleBranded(_:))
      {
        (*(void (**)(_QWORD, uint64_t))(v41 + 96))(*(_QWORD *)(v1 + 200), v40);
        v52 = v51[1];
        if (v52)
        {
          v53 = HIBYTE(v52) & 0xF;
          if ((v52 & 0x2000000000000000) == 0)
            v53 = *v51 & 0xFFFFFFFFFFFFLL;
          if (v53)
          {
            v54 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v52);
            objc_msgSend(v37, "setMerchantNameOverride:", v54);

          }
          else
          {
            swift_bridgeObjectRelease(v51[1]);
          }
        }
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t))(v41 + 8))(*(_QWORD *)(v1 + 200), v40);
      }
    }
    v55 = *(_QWORD *)(v1 + 192);
    sub_100038B24(*(_QWORD *)(v1 + 152), v55, &qword_100630A48);
    v56 = type metadata accessor for URL(0);
    v57 = *(_QWORD *)(v56 - 8);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56);
    v60 = 0;
    if (v58 != 1)
    {
      v61 = *(_QWORD *)(v1 + 192);
      URL._bridgeToObjectiveC()(v59);
      v60 = v62;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v61, v56);
    }
    objc_msgSend(v37, "setPrivacyPolicyURL:", v60);

    objc_msgSend(v12, "setReleasedData:", v37);
  }
  v63 = objc_msgSend(objc_allocWithZone((Class)PKMerchant), "init");
  *(_QWORD *)(v1 + 328) = v63;
  v64 = String._bridgeToObjectiveC()();
  objc_msgSend(v63, "setMerchantIdentifier:", v64);

  DigitalPresentmentDisplayConfiguration.clientDisplayName.getter();
  if (v65)
  {
    v66 = v65;
    v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v66);
    objc_msgSend(v63, "setName:", v67);

  }
  if ((*(_BYTE *)(v1 + 344) & 1) != 0)
    goto LABEL_27;
  if ((*(_QWORD *)(v1 + 168) & 0x8000000000000000) == 0)
  {
    objc_msgSend(v63, "setAdamIdentifier:");
LABEL_27:
    v68 = v1 + 16;
    v69 = *(_QWORD *)(v1 + 184);
    objc_msgSend(v12, "setMerchant:", v63);
    v70 = v12;
    v71 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v1 + 336) = v71;
    v72 = *(_QWORD *)(v69 + 16);
    *(_QWORD *)(v1 + 56) = v1 + 120;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_100132AF8;
    v73 = swift_continuation_init(v1 + 16, 0);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v74 = (_QWORD *)(v1 + 80);
    v74[1] = 0x40000000;
    v74[2] = sub_100132BE8;
    v74[3] = &unk_100608C80;
    v74[4] = v73;
    objc_msgSend(v76, "insertOrUpdatePaymentTransaction:forPassUniqueIdentifier:paymentApplication:completion:", v70, v71, v72, v74);
    swift_continuation_await(v68);
    return;
  }
  __break(1u);
}

uint64_t sub_100132AF8()
{
  return swift_task_switch(sub_100132B44, 0, 0);
}

uint64_t sub_100132B44()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 336);
  v3 = *(void **)(v0 + 312);
  v2 = *(void **)(v0 + 320);

  v4 = *(void **)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100132BE8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  sub_1000A1F54((uint64_t)&v6, v3, &qword_100635DA0);
  return swift_continuation_resume(v2);
}

void *sub_100132C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  id v28;
  id v29;
  NSString v30;
  NSString v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  NSString v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  id v70;
  id v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[2];
  uint64_t v85;

  v82 = a3;
  v79 = a2;
  v4 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  v5 = __chkstk_darwin(v4);
  v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (char *)&v70 - v7;
  v8 = sub_100004828(&qword_100630AC0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v73 = (char *)&v70 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v70 - v14;
  v16 = type metadata accessor for BundleRecordFetcher(0);
  v17 = *(id *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void (*)(void))*((_QWORD *)v17 + 2);
  v80 = v21;
  v81 = v19;
  v20();
  v22 = (uint64_t)_swiftEmptyArrayStorage;
  v85 = (uint64_t)_swiftEmptyArrayStorage;
  v23 = *(_QWORD *)(a1 + 16);
  v77 = v11;
  v78 = v15;
  if (v23)
  {
    v71 = v17;
    swift_bridgeObjectRetain(a1);
    v70 = (id)a1;
    v24 = (unsigned __int8 *)(a1 + 64);
    do
    {
      v25 = *((_QWORD *)v24 - 3);
      v26 = *((_QWORD *)v24 - 1);
      v27 = *v24;
      v28 = objc_allocWithZone((Class)PKTransactionReleasedDataElement);
      swift_bridgeObjectRetain(v25);
      v29 = objc_msgSend(v28, "init", swift_bridgeObjectRetain(v26).n128_f64[0]);
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "setElementNamespace:", v30);

      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "setIdentifier:", v31);

      if (v27)
        v32 = 1;
      else
        v32 = 2;
      objc_msgSend(v29, "setRetentionIntent:", v32, v70);
      sub_100133B3C(v27, v82, v29);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v25);
      v33 = v29;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v35 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v34 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v35 >= v34 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v36 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
      specialized Array._endMutation()(v36);

      v24 += 40;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease(v70);
    v22 = v85;
    v17 = v71;
    v11 = v77;
    v15 = v78;
  }
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v67 = v22;
    else
      v67 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease(v22);
    v37 = v80;
    v38 = v81;
    if (v68)
      goto LABEL_12;
LABEL_38:
    swift_bridgeObjectRelease(v22);
    v59 = 0;
    goto LABEL_39;
  }
  v37 = v80;
  v38 = v81;
  if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_38;
LABEL_12:
  v39 = objc_msgSend(objc_allocWithZone((Class)PKTransactionReleasedData), "init");
  v40 = sub_1004EAD68(v22);
  swift_bridgeObjectRelease(v22);
  sub_100133E7C();
  sub_100133EB8();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v39, "setElements:", isa);

  v70 = objc_msgSend(objc_allocWithZone((Class)PKTransactionReleasedDataApplication), "init");
  v42 = AuditToken.wrapped.getter();
  v43 = (uint64_t)v73;
  dispatch thunk of BundleRecordFetching.record(withAuditToken:)(v42);
  v71 = v39;
  v44 = type metadata accessor for BundleRecord(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
  sub_1000A1F54(v43, (uint64_t)v15, &qword_100630AC0);
  v45 = v74;
  type metadata accessor for BundleRecord(0);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48);
  v47 = v46(v15, 1, v44);
  if ((_DWORD)v47 || (v47 = BundleRecord.bundleIdentifier.getter(), !v56))
  {
    defaultLogger()(v47);
    v48 = sub_100038B24((uint64_t)v15, (uint64_t)v11, &qword_100630AC0);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v84[0] = v52;
      *(_DWORD *)v51 = 136315138;
      if (v46(v11, 1, v44) || (v55 = BundleRecord.applicationIdentifier.getter(), !v57))
      {
        v53 = (uint64_t)v11;
        swift_bridgeObjectRelease(0);
        v54 = 0xE500000000000000;
        v55 = 0x3E6C696E3CLL;
      }
      else
      {
        v54 = v57;
        v53 = (uint64_t)v11;
      }
      v83 = sub_1000E3AC8(v55, v54, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v51 + 4);
      swift_bridgeObjectRelease(v54);
      sub_100008030(v53, &qword_100630AC0);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "PKTransactionReleasedData.makeFromRequestedElements Record bundle identifier is nil for application identifier: %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
      v15 = v78;
      v37 = v80;
    }
    else
    {
      sub_100008030((uint64_t)v11, &qword_100630AC0);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v76);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v56);
  }
  if (v46(v15, 1, v44))
  {
    v58 = 0;
    v60 = v70;
    v59 = v71;
    v38 = v81;
  }
  else
  {
    BundleRecord.bundleIdentifier.getter();
    v60 = v70;
    v59 = v71;
    v38 = v81;
    if (v61)
    {
      v62 = v61;
      v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v62);
    }
    else
    {
      v58 = 0;
    }
  }
  objc_msgSend(v60, "setBundleIdentifier:", v58);

  if (*(_BYTE *)(v79 + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig(0) + 20)))
    v63 = 1;
  else
    v63 = 2;
  DigitalPresentmentDisplayConfiguration.usageDescription.getter(objc_msgSend(v60, "setClient:", v63));
  if (v64)
  {
    v65 = v64;
    v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v65);
  }
  else
  {
    v66 = 0;
  }
  objc_msgSend(v60, "setUsageDescription:", v66);

  objc_msgSend(v59, "setApplication:", v60);
  sub_100008030((uint64_t)v15, &qword_100630AC0);
LABEL_39:
  (*((void (**)(char *, uint64_t))v17 + 1))(v38, v37);
  return v59;
}

void sub_100133510(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_BYTE *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  v10 = (void *)objc_opt_self(CLInUseAssertion);
  v11 = (id)PKPassKitCoreBundle(a3);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "newAssertionForBundle:withReason:", v11, v12);

  if (v13)
  {
    v14 = sub_100004828(&qword_100635DB0);
    v15 = swift_allocObject(v14, 28, 7);
    *(_DWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(v8 + 80) = v15;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001335E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64[16];
  id v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;

  v0 = type metadata accessor for Logger(0);
  v61 = *(_QWORD *)(v0 - 8);
  v62 = v0;
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v1);
  v60 = (char *)&v60 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v60 - v7;
  v9 = AuditToken.wrapped.getter(v6);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = HIDWORD(v9);
  v18 = HIDWORD(v11);
  v19 = HIDWORD(v13);
  v20 = HIDWORD(v15);
  v21 = (void *)objc_opt_self(LSBundleRecord);
  v65 = 0;
  v66 = __PAIR64__(v17, v10);
  v67 = v12;
  v68 = v18;
  v69 = v14;
  v70 = v19;
  v71 = v16;
  v72 = v20;
  v22 = objc_msgSend(v21, "bundleRecordForAuditToken:error:", &v66, &v65);
  v23 = v65;
  if (!v22)
  {
    v41 = v65;
    v42 = _convertNSErrorToError(_:)(v23);

    v44 = swift_willThrow(v43);
    defaultLogger()(v44);
    swift_errorRetain(v42);
    v45 = swift_errorRetain(v42);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v66 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_getErrorValue(v42, v64, v63);
      v50 = Error.localizedDescription.getter(v63[1], v63[2]);
      v52 = v51;
      v65 = (id)sub_1000E3AC8(v50, v51, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v48 + 4);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "received an error while fetching the application record. %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      swift_errorRelease(v42);
    }
    else
    {
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      swift_errorRelease(v42);

    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v62);
    return 0;
  }
  v24 = v22;
  v25 = objc_opt_self(LSApplicationRecord);
  v26 = (void *)swift_dynamicCastObjCClass(v24, v25);
  v27 = v23;
  if (!v26)
  {

    v54 = defaultLogger()(v53);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unable to cast bundle record to application record. Calling process is not an app clip.", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v3, v62);
    return 0;
  }
  v28 = objc_msgSend(v26, "appClipMetadata");

  if (!v28)
  {

    return 0;
  }
  v30 = v60;
  defaultLogger()(v29);
  v31 = v24;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v66 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = objc_msgSend(v26, "applicationIdentifier");
    if (v36)
    {
      v37 = v36;
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v40 = v39;

    }
    else
    {
      v40 = 0xE500000000000000;
      v38 = 0x3E6C696E3CLL;
    }
    v65 = (id)sub_1000E3AC8(v38, v40, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v34 + 4);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "The application identifier %s is associated with an App Clip", v34, 0xCu);
    v58 = 1;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v62);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v62);
    return 1;
  }
  return v58;
}

uint64_t sub_100133B3C(char a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  int v33;
  int v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a3;
  v5 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100633FA8);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  v17 = type metadata accessor for DigitalPresentmentDisplayConfiguration(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, v17);
  if ((a1 & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v22 = DigitalPresentmentDisplayConfiguration.persistedElements.getter(v21);
  v23 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (v23)
  {
    DigitalPresentmentDisplayConfiguration.persistedElementsStorageLifetimePeriod.getter(result);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      return sub_100008030((uint64_t)v9, &qword_100633FA8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
      (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v14, v10);
      if (v25 == enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.limit(_:))
      {
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 96))(v14, v10);
        v27 = *v14;
        v28 = v37;
        v29 = defaultLogger()(v26);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.debug.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v32 = 134217984;
          v41 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v32 + 4);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "PKTransactionReleasedData - Setting retention period to %ld.", v32, 0xCu);
          swift_slowDealloc(v32, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
        objc_msgSend(v40, "setRetentionPeriod:", v27);
        return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }
      else
      {
        v33 = v25;
        v34 = enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.indefinitely(_:);
        v35 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
        result = v35(v16, v10);
        if (v33 != v34)
          return v35((char *)v14, v10);
      }
    }
  }
  return result;
}

unint64_t sub_100133E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100635DA8;
  if (!qword_100635DA8)
  {
    v1 = objc_opt_self(PKTransactionReleasedDataElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100635DA8);
  }
  return result;
}

unint64_t sub_100133EB8()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100644000;
  if (!qword_100644000)
  {
    v1 = sub_100133E7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100644000);
  }
  return result;
}

_QWORD *sub_100133F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v0 = sub_100004828(&qword_100635DB8);
  __chkstk_darwin(v0);
  v49 = (uint64_t)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege(0);
  v47 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v51 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)&v40 - v5;
  v6 = type metadata accessor for AnyCodable(0);
  v46 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v50 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - v9;
  v11 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_100635DC0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AnyCodableArray(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v43 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:), v11);
  sub_10025944C((uint64_t)v14, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100008030((uint64_t)v17, &qword_100635DC0);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v22 = v43;
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v43, v17, v18);
    v24 = AnyCodableArray.value.getter(v23);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v41 = v19;
      v42 = v18;
      v26 = v46;
      v27 = v47;
      v28 = *(unsigned __int8 *)(v46 + 80);
      v40 = v24;
      v29 = v24 + ((v28 + 32) & ~v28);
      v48 = *(_QWORD *)(v46 + 72);
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
      v21 = _swiftEmptyArrayStorage;
      v44 = v2;
      v30(v10, v29, v6);
      while (1)
      {
        v31 = v50;
        v30(v50, (uint64_t)v10, v6);
        v32 = (uint64_t)v31;
        v33 = v49;
        sub_100134324(v32, v49);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v6);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v33, 1, v2) == 1)
        {
          sub_100008030(v33, &qword_100635DB8);
        }
        else
        {
          v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
          v35 = v45;
          v34(v45, v33, v2);
          v34(v51, (uint64_t)v35, v2);
          if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
            v21 = (_QWORD *)sub_1000E2A20(0, v21[2] + 1, 1, (unint64_t)v21);
          v37 = v21[2];
          v36 = v21[3];
          if (v37 >= v36 >> 1)
            v21 = (_QWORD *)sub_1000E2A20(v36 > 1, v37 + 1, 1, (unint64_t)v21);
          v21[2] = v37 + 1;
          v27 = v47;
          v38 = (unint64_t)v21
              + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
              + *(_QWORD *)(v47 + 72) * v37;
          v2 = v44;
          v34((char *)v38, (uint64_t)v51, v44);
          v26 = v46;
        }
        v29 += v48;
        if (!--v25)
          break;
        v30(v10, v29, v6);
      }
      swift_bridgeObjectRelease(v40);
      v19 = v41;
      v18 = v42;
      v22 = v43;
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      v21 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  return v21;
}

uint64_t sub_100134324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int (**v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(char *, uint64_t);
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  char *v103;
  void (**v104)(char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v119 = a2;
  v3 = sub_100004828(&qword_100633990);
  v4 = __chkstk_darwin(v3);
  v108 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v107 = (char *)&v99 - v6;
  v7 = sub_100004828(&qword_100635DC8);
  v8 = __chkstk_darwin(v7);
  v112 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v109 = (char *)&v99 - v11;
  v12 = __chkstk_darwin(v10);
  v111 = (char *)&v99 - v13;
  __chkstk_darwin(v12);
  v110 = (char *)&v99 - v14;
  v15 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier(0);
  v114 = *(_QWORD *)(v15 - 8);
  v115 = v15;
  v16 = __chkstk_darwin(v15);
  v106 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v105 = (char *)&v99 - v19;
  __chkstk_darwin(v18);
  v113 = (char *)&v99 - v20;
  v21 = sub_100004828(&qword_100635DD0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v99 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v99 - v28;
  v30 = type metadata accessor for Logger(0);
  v116 = *(_QWORD *)(v30 - 8);
  v117 = v30;
  v31 = __chkstk_darwin(v30);
  v33 = (void (**)(char *, uint64_t))((char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v35 = (char *)&v99 - v34;
  v36 = sub_100004828(&qword_100635DD8);
  __chkstk_darwin(v36);
  v38 = (char *)&v99 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for AnyCodableDictionary(0);
  v40 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v39 - 8);
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v99 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = a1;
  AnyCodable.dictValue.getter(v41);
  if (v40[6](v38, 1, v39) == 1)
  {
    v44 = sub_100008030((uint64_t)v38, &qword_100635DD8);
    v45 = defaultLogger()(v44);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "MobileDocumentReaderResponse DrivingPrivilege expected an AnyCodableDictionary representation, returning nil.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v49 = type metadata accessor for AnyCodable(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v118, v49);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v35, v117);
LABEL_14:
    v77 = v119;
    v78 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 1, 1, v78);
  }
  v104 = v33;
  v102 = v27;
  v103 = v24;
  v40[4](v43, (uint64_t)v38, v39);
  v51 = v113;
  v50 = v114;
  v52 = *(char **)(v114 + 104);
  v53 = v115;
  ((void (*)(char *, _QWORD, uint64_t))v52)(v113, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.vehicleCategoryCode(_:), v115);
  sub_100134C3C((uint64_t)v29);
  v54 = *(void (**)(char *, uint64_t))(v50 + 8);
  v54(v51, v53);
  v55 = type metadata accessor for AnyCodable(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v57(v29, 1, v55) == 1)
  {
    v58 = sub_100008030((uint64_t)v29, &qword_100635DD0);
LABEL_11:
    v72 = v104;
    v73 = defaultLogger()(v58);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "MobileDocumentReaderResponse DrivingPrivilege missing vehicle category code, returning nil.", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v118, v55);
    (*(void (**)(_QWORD, uint64_t))(v116 + 8))(v72, v117);
    ((void (*)(char *, uint64_t))v40[1])(v43, v39);
    goto LABEL_14;
  }
  v101 = v54;
  v113 = v52;
  v59 = AnyCodable.stringValue.getter();
  v61 = v60;
  v114 = *(_QWORD *)(v56 + 8);
  v58 = ((uint64_t (*)(char *, uint64_t))v114)(v29, v55);
  if (!v61)
    goto LABEL_11;
  v120 = v59;
  v121 = v61;
  v62 = sub_1000B3C38();
  Collection.nilIfEmpty.getter(&v122, &type metadata for String, v62);
  v58 = swift_bridgeObjectRelease(v61);
  if (!v123)
    goto LABEL_11;
  v100 = v123;
  v104 = (void (**)(char *, uint64_t))v40;
  v116 = v39;
  v99 = v122;
  v63 = v105;
  ((void (*)(char *, _QWORD, uint64_t))v113)(v105, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.issueDate(_:), v53);
  v64 = (uint64_t)v102;
  sub_100134C3C((uint64_t)v102);
  v101(v63, v53);
  v65 = v57((char *)v64, 1, v55);
  v117 = v55;
  v66 = v43;
  if (v65 == 1)
  {
    sub_100008030(v64, &qword_100635DD0);
    v67 = type metadata accessor for Date(0);
    v68 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v107, 1, 1, v67);
    v69 = (uint64_t)v111;
    v70 = (uint64_t)v108;
    v71 = (uint64_t)v109;
LABEL_16:
    sub_100008030(v68, &qword_100633990);
    v83 = type metadata accessor for DateComponents(0);
    v84 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v110, 1, 1, v83);
    goto LABEL_18;
  }
  v68 = (uint64_t)v107;
  AnyCodable.dateValue.getter();
  ((void (*)(uint64_t, uint64_t))v114)(v64, v55);
  v80 = type metadata accessor for Date(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v68, 1, v80);
  v69 = (uint64_t)v111;
  v70 = (uint64_t)v108;
  v71 = (uint64_t)v109;
  if (v82 == 1)
    goto LABEL_16;
  v85 = v68;
  v84 = (uint64_t)v110;
  Date.utcDayRepresentation.getter();
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v85, v80);
LABEL_18:
  v86 = v106;
  v87 = v53;
  ((void (*)(char *, _QWORD, uint64_t))v113)(v106, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.expiryDate(_:), v53);
  v88 = (uint64_t)v103;
  sub_100134C3C((uint64_t)v103);
  v101(v86, v87);
  v89 = v117;
  if (v57((char *)v88, 1, v117) == 1)
  {
    sub_100008030(v88, &qword_100635DD0);
    v90 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v70, 1, 1, v90);
    v91 = (uint64_t)v112;
  }
  else
  {
    AnyCodable.dateValue.getter();
    ((void (*)(uint64_t, uint64_t))v114)(v88, v89);
    v92 = type metadata accessor for Date(0);
    v93 = *(_QWORD *)(v92 - 8);
    v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v70, 1, v92);
    v91 = (uint64_t)v112;
    if (v94 != 1)
    {
      Date.utcDayRepresentation.getter();
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v70, v92);
      goto LABEL_23;
    }
  }
  sub_100008030(v70, &qword_100633990);
  v95 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v69, 1, 1, v95);
LABEL_23:
  sub_1001358A4(v84, v71);
  sub_1001358A4(v69, v91);
  v96 = sub_100134D18();
  v97 = v119;
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.init(vehicleCategoryCode:issueDate:expirationDate:codes:)(v99, v100, v71, v91, v96);
  ((void (*)(uint64_t, uint64_t))v114)(v118, v117);
  sub_100008030(v69, &qword_100635DC8);
  sub_100008030(v84, &qword_100635DC8);
  v104[1](v66, v116);
  v98 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
}

uint64_t sub_100134C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = AnyCodableDictionary.value.getter();
  v3 = ISO18013_5_1_DrivingPrivilegeIdentifier.rawValue.getter();
  v5 = v4;
  if (*(_QWORD *)(v2 + 16) && (v6 = sub_1004A8604(v3, v4), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(v2 + 56);
    v10 = type metadata accessor for AnyCodable(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(a1, v9 + *(_QWORD *)(v11 + 72) * v8, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  else
  {
    v12 = type metadata accessor for AnyCodable(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  swift_bridgeObjectRelease(v5);
  return swift_bridgeObjectRelease(v2);
}

_QWORD *sub_100134D18()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;

  v0 = sub_100004828(&qword_100635DE0);
  __chkstk_darwin(v0);
  v2 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code(0);
  v56 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v59 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v54 = (char *)&v48 - v6;
  v7 = type metadata accessor for AnyCodable(0);
  v53 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v55 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v48 - v10;
  v12 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_100635DD0);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004828(&qword_100635DC0);
  __chkstk_darwin(v19);
  v58 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AnyCodableArray(0);
  v51 = *(_QWORD *)(v21 - 8);
  v52 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.codes(_:), v12);
  sub_100134C3C((uint64_t)v18);
  v24 = v15;
  v25 = v53;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v7) == 1)
  {
    sub_100008030((uint64_t)v18, &qword_100635DD0);
    v26 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v58, 1, 1, v52);
LABEL_4:
    sub_100008030(v26, &qword_100635DC0);
    return _swiftEmptyArrayStorage;
  }
  v50 = v23;
  v27 = v58;
  AnyCodable.arrayValue.getter();
  v28 = *(void (**)(char *, uint64_t))(v25 + 8);
  v26 = (uint64_t)v27;
  v28(v18, v7);
  v29 = v51;
  v30 = v27;
  v31 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v30, 1, v52) == 1)
    goto LABEL_4;
  v33 = v50;
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 32))(v50, v26, v31);
  v35 = AnyCodableArray.value.getter(v34);
  v36 = *(_QWORD *)(v35 + 16);
  if (v36)
  {
    v58 = (char *)v28;
    v37 = *(unsigned __int8 *)(v53 + 80);
    v49 = v35;
    v38 = v35 + ((v37 + 32) & ~v37);
    v57 = *(_QWORD *)(v53 + 72);
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
    v32 = _swiftEmptyArrayStorage;
    v53 = v3;
    v41 = v55;
    v40 = v56;
    v39(v11, v38, v7);
    while (1)
    {
      v39(v41, (uint64_t)v11, v7);
      sub_1001351EC(v41, (uint64_t)v2);
      ((void (*)(char *, uint64_t))v58)(v11, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v2, 1, v3) == 1)
      {
        sub_100008030((uint64_t)v2, &qword_100635DE0);
      }
      else
      {
        v42 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
        v43 = v54;
        v42(v54, v2, v3);
        v42(v59, v43, v3);
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          v32 = (_QWORD *)sub_1000E2C90(0, v32[2] + 1, 1, (unint64_t)v32);
        v45 = v32[2];
        v44 = v32[3];
        if (v45 >= v44 >> 1)
          v32 = (_QWORD *)sub_1000E2C90(v44 > 1, v45 + 1, 1, (unint64_t)v32);
        v32[2] = v45 + 1;
        v40 = v56;
        v46 = (unint64_t)v32
            + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
            + *(_QWORD *)(v56 + 72) * v45;
        v3 = v53;
        v42((char *)v46, v59, v53);
        v41 = v55;
      }
      v38 += v57;
      if (!--v36)
        break;
      v39(v11, v38, v7);
    }
    swift_bridgeObjectRelease(v49);
    v29 = v51;
    v31 = v52;
    v33 = v50;
  }
  else
  {
    swift_bridgeObjectRelease(v35);
    v32 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v31);
  return v32;
}

uint64_t sub_1001351EC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  char *v60;
  uint8_t *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  void (*v80)(char *, _QWORD, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v91 = a2;
  v3 = type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v86 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v84 = (char *)&v78 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v78 - v9;
  v11 = sub_100004828(&qword_100635DD0);
  v12 = __chkstk_darwin(v11);
  v85 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v83 = (uint64_t)&v78 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v78 - v16;
  v18 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v18 - 8);
  v89 = v18;
  v19 = __chkstk_darwin(v18);
  v87 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v78 - v21;
  v23 = sub_100004828(&qword_100635DD8);
  __chkstk_darwin(v23);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AnyCodableDictionary(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v78 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = a1;
  AnyCodable.dictValue.getter(v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    v31 = sub_100008030((uint64_t)v25, &qword_100635DD8);
    v32 = defaultLogger()(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "MobileDocumentReaderResponse DrivingPrivilege Code expected an AnyCodableDictionary representation, returning nil.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = type metadata accessor for AnyCodable(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v90, v36);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v22, v89);
LABEL_14:
    v63 = v91;
    v64 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
  }
  v81 = v27;
  v82 = v26;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v25, v26);
  v37 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v37(v10, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.code(_:), v3);
  sub_100134C3C((uint64_t)v17);
  v38 = *(void (**)(char *, uint64_t))(v4 + 8);
  v38(v10, v3);
  v39 = type metadata accessor for AnyCodable(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v30;
  if (v41(v17, 1, v39) == 1)
  {
    v43 = sub_100008030((uint64_t)v17, &qword_100635DD0);
LABEL_11:
    v56 = v87;
    v57 = defaultLogger()(v43);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.debug.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = v42;
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "MobileDocumentReaderResponse DrivingPrivilege Code missing code, returning nil.", v61, 2u);
      v62 = v61;
      v42 = v60;
      swift_slowDealloc(v62, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v90, v39);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v89);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v42, v82);
    goto LABEL_14;
  }
  v79 = v38;
  v80 = v37;
  v44 = v3;
  v45 = AnyCodable.stringValue.getter();
  v47 = v46;
  v48 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  v43 = v48(v17, v39);
  if (!v47)
    goto LABEL_11;
  v92 = v45;
  v93 = v47;
  v49 = sub_1000B3C38();
  Collection.nilIfEmpty.getter(&v94, &type metadata for String, v49);
  v43 = swift_bridgeObjectRelease(v47);
  if (!v95)
    goto LABEL_11;
  v89 = v95;
  v87 = (char *)v49;
  v88 = v94;
  v50 = v84;
  v51 = v44;
  v80(v84, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.sign(_:), v44);
  v52 = v83;
  sub_100134C3C(v83);
  v79(v50, v44);
  v53 = v42;
  if (v41((char *)v52, 1, v39) == 1)
  {
    sub_100008030(v52, &qword_100635DD0);
    v54 = 0;
    v55 = 0;
  }
  else
  {
    v66 = AnyCodable.stringValue.getter();
    v68 = v67;
    v48((char *)v52, v39);
    if (v68)
    {
      v92 = v66;
      v93 = v68;
      Collection.nilIfEmpty.getter(&v94, &type metadata for String, v87);
      swift_bridgeObjectRelease(v68);
      v54 = v94;
      v55 = v95;
    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
    v51 = v44;
  }
  v69 = v86;
  v80(v86, enum case for ISO18013_5_1_DrivingPrivilegeIdentifier.value(_:), v51);
  v70 = v85;
  sub_100134C3C(v85);
  v79(v69, v51);
  if (v41((char *)v70, 1, v39) == 1)
  {
    sub_100008030(v70, &qword_100635DD0);
    v71 = 0;
    v72 = 0;
    v73 = v91;
  }
  else
  {
    v74 = AnyCodable.stringValue.getter();
    v76 = v75;
    v48((char *)v70, v39);
    v73 = v91;
    if (v76)
    {
      v92 = v74;
      v93 = v76;
      Collection.nilIfEmpty.getter(&v94, &type metadata for String, v87);
      swift_bridgeObjectRelease(v76);
      v71 = v94;
      v72 = v95;
    }
    else
    {
      v71 = 0;
      v72 = 0;
    }
  }
  MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code.init(code:sign:value:)(v88, v89, v54, v55, v71, v72);
  v48(v90, v39);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v53, v82);
  v77 = type metadata accessor for MobileDocumentReaderResponse.MobileIdentityDocumentElements.DrivingPrivilege.Code(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v73, 0, 1, v77);
}

uint64_t sub_1001358A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100635DC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1001358EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v7 = type metadata accessor for DIPHTTPSession.Configuration(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = &v3[OBJC_IVAR____TtC8coreidvd15DIPSPWebService_IDENTITY_SHARE_ENDPOINT];
  *(_QWORD *)v13 = 0xD000000000000012;
  *((_QWORD *)v13 + 1) = 0x800000010054C930;
  sub_10011C23C(a3, (uint64_t)&v20 - v11);
  v14 = &v3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  sub_10011C23C((uint64_t)v12, (uint64_t)v10);
  v15 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = v3;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1004E0CF4((uint64_t)v10);

  v17 = (objc_class *)type metadata accessor for DIPWebService();
  v20.receiver = v16;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, "init");
  sub_100035DAC((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  sub_100035DAC(a3, type metadata accessor for DIPHTTPSession.Configuration);
  return v18;
}

uint64_t sub_100135A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[23] = a6;
  v7[24] = v6;
  v7[21] = a4;
  v7[22] = a5;
  v7[19] = a2;
  v7[20] = a3;
  v7[18] = a1;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[25] = swift_task_alloc(v8);
  v7[26] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v7[27] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[28] = v10;
  v7[29] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v7[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v7[31] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[32] = v13;
  v7[33] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100135B40, 0, 0);
}

uint64_t sub_100135B40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[30];
  v3 = (_QWORD *)v0[21];
  v2 = v0[22];
  static DaemonSignposts.inputValidationRequest.getter();
  DIPSignpost.init(_:)(v1);
  v4 = v3[3];
  v5 = sub_10000806C(v3, v4);
  v0[13] = v4;
  v6 = sub_100022234(v0 + 10);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v6, v5, v4);
  v7 = (_QWORD *)swift_task_alloc(dword_100635E34);
  v0[34] = v7;
  *v7 = v0;
  v7[1] = sub_100135C04;
  return sub_100138594((uint64_t)(v0 + 10), v0[19], v0[20], v2, (uint64_t)&off_1006010E8);
}

uint64_t sub_100135C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 272);
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  v5[38] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = sub_100136340;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v5 + 10);
    v7 = sub_100135C7C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100135C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String_optional v41;
  void *object;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t (*v52)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(void);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (v3 && objc_msgSend(v3, "statusCode") == (id)403)
  {
    v4 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 288);
    v7 = type metadata accessor for JSONDecoder(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v9 = JSONDecoder.init()(v8);
    v10 = sub_100139544();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for InputValidationResponse, v6, v5, &type metadata for InputValidationResponse, v10);
    v11 = *(_QWORD *)(v0 + 288);
    v12 = *(void **)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    if (v4)
    {
      v14 = v4;
      v16 = *(_QWORD *)(v0 + 224);
      v15 = *(_QWORD *)(v0 + 232);
      v17 = *(_QWORD *)(v0 + 216);
      swift_release(v9);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.serverResponseInconsistent(_:), v17);
      swift_errorRetain(v14);
      v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v19 = type metadata accessor for DIPError(0);
      v85 = sub_100007F30();
      v20 = swift_allocError(v19, v85, 0, 0);
      v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010054CC20, v14, v15, 0, v18, 0xD000000000000050, 0x800000010054C970, 0xD00000000000001ELL, 0x800000010054CBD0, 41);
      swift_willThrow(v21);
      swift_errorRelease(v14);

      sub_100007F8C(v13, v11);
      v22 = *(_QWORD *)(v0 + 216);
      v23 = *(_QWORD *)(v0 + 224);
      v24 = *(_QWORD *)(v0 + 208);
      swift_getErrorValue(v20, v0 + 136, v0 + 112);
      Error.dipErrorCode.getter(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22);
      v82 = v19;
      if ((_DWORD)v25 != 1)
      {
        v26 = *(_QWORD *)(v0 + 216);
        v27 = *(_QWORD *)(v0 + 224);
        v28 = *(_QWORD *)(v0 + 200);
        sub_1001320A4(*(_QWORD *)(v0 + 208), v28);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v28, v26) == enum case for DIPError.Code.httpTooManyRequests(_:))
        {
          v29 = *(_QWORD *)(v0 + 232);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 104))(v29, enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), *(_QWORD *)(v0 + 216));
          v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v31 = swift_allocError(v19, v85, 0, 0);
          v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v29, 0, v30, 0xD000000000000050, 0x800000010054C970, 0xD00000000000001ELL, 0x800000010054CBD0, 55);
          swift_willThrow(v32);
          swift_errorRelease(v20);
          v20 = v31;
LABEL_13:
          v76 = *(_QWORD *)(v0 + 248);
          v77 = *(_QWORD *)(v0 + 264);
          v72 = *(_QWORD *)(v0 + 224);
          v73 = *(_QWORD *)(v0 + 232);
          v74 = *(_QWORD *)(v0 + 216);
          v75 = *(_QWORD *)(v0 + 256);
          v78 = *(_QWORD *)(v0 + 208);
          v79 = *(_QWORD *)(v0 + 240);
          v80 = *(_QWORD *)(v0 + 200);
          v71 = *(_QWORD *)(v0 + 192);
          sub_100008030(v78, &qword_1006335E0);
          v54 = sub_100004828((uint64_t *)&unk_1006325A0);
          v55 = sub_100004828((uint64_t *)&unk_100633440);
          v56 = *(_QWORD *)(v55 - 8);
          v57 = *(_QWORD *)(v56 + 72);
          v58 = *(unsigned __int8 *)(v56 + 80);
          v59 = (v58 + 32) & ~v58;
          v60 = swift_allocObject(v54, v59 + 2 * v57, v58 | 7);
          *(_OWORD *)(v60 + 16) = xmmword_1005208D0;
          v61 = v60 + v59;
          v62 = (_QWORD *)(v60 + v59 + *(int *)(v55 + 48));
          v63 = enum case for DIPError.PropertyKey.serverURL(_:);
          v64 = type metadata accessor for DIPError.PropertyKey(0);
          v65 = *(void (**)(void))(*(_QWORD *)(v64 - 8) + 104);
          ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v61, v63, v64);
          v62[3] = &type metadata for String;
          *v62 = 0xD000000000000013;
          v62[1] = 0x800000010054CBB0;
          v66 = (_QWORD *)(v61 + v57 + *(int *)(v55 + 48));
          v65();
          v67 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
          v68 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
          v66[3] = &type metadata for String;
          *v66 = v67;
          v66[1] = v68;
          swift_errorRetain(v20);
          swift_errorRetain(v20);
          swift_bridgeObjectRetain(v68);
          v69 = sub_10011D314(v60);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v73, enum case for DIPError.Code.internalError(_:), v74);
          swift_allocError(v82, v85, 0, 0);
          v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054CB90, v20, v73, 0, v69, 0xD000000000000050, 0x800000010054C970, 0xD00000000000001ELL, 0x800000010054CBD0, 61);
          swift_willThrow(v70);
          swift_errorRelease(v20);
          swift_errorRelease(v20);
          (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v76);
          swift_task_dealloc(v77);
          swift_task_dealloc(v79);
          swift_task_dealloc(v73);
          swift_task_dealloc(v78);
          swift_task_dealloc(v80);
          v52 = *(uint64_t (**)(void))(v0 + 8);
          return v52();
        }
        v25 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 216));
      }
      swift_willThrow(v25);
      goto LABEL_13;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));

    swift_release(v9);
    sub_100007F8C(v13, v11);
    v84 = *(unsigned __int8 *)(v0 + 24);
    v86 = *(_QWORD *)(v0 + 16);
    v46 = *(_QWORD *)(v0 + 40);
    v83 = *(_QWORD *)(v0 + 32);
    v43 = *(_QWORD *)(v0 + 56);
    v81 = *(_QWORD *)(v0 + 48);
    v44 = *(_QWORD *)(v0 + 64);
    v45 = *(_QWORD *)(v0 + 72);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 288);
    v34 = *(void **)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 256);
    v36 = *(_QWORD *)(v0 + 264);
    v38 = *(_QWORD *)(v0 + 248);
    v39._countAndFlagsBits = 0xD000000000000021;
    v39._object = (void *)0x800000010054CBF0;
    v40._countAndFlagsBits = 0x3032373065323933;
    v40._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v40, v39);
    v41.value._countAndFlagsBits = sub_1000549DC();
    object = v41.value._object;
    DIPSignpost.end(workflowID:isBackground:)(v41, (Swift::Bool_optional)2);
    sub_100007F8C(v35, v33);
    swift_bridgeObjectRelease(object);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    v84 = 0;
    v86 = 0;
    v83 = 0;
    v81 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 1;
  }
  v47 = *(_QWORD *)(v0 + 232);
  v48 = *(_QWORD *)(v0 + 240);
  v50 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 208);
  v51 = *(_QWORD **)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  *v51 = v86;
  v51[1] = v84;
  v51[2] = v83;
  v51[3] = v46;
  v51[4] = v81;
  v51[5] = v43;
  v51[6] = v44;
  v51[7] = v45;
  v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

uint64_t sub_100136340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_getErrorValue(v1, v0 + 136, v0 + 112);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if ((_DWORD)v5 == 1)
    goto LABEL_5;
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 200);
  sub_1001320A4(*(_QWORD *)(v0 + 208), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v8, v6) != enum case for DIPError.Code.httpTooManyRequests(_:))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 216));
LABEL_5:
    swift_willThrow(v5);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 232);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 104))(v9, enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), *(_QWORD *)(v0 + 216));
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100007F30();
  v13 = swift_allocError(v11, v12, 0, 0);
  v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v9, 0, v10, 0xD000000000000050, 0x800000010054C970, 0xD00000000000001ELL, 0x800000010054CBD0, 55);
  swift_willThrow(v14);
  swift_errorRelease(v1);
  v1 = v13;
LABEL_6:
  v39 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 264);
  v35 = *(_QWORD *)(v0 + 224);
  v36 = *(_QWORD *)(v0 + 232);
  v37 = *(_QWORD *)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 208);
  v42 = *(_QWORD *)(v0 + 240);
  v43 = *(_QWORD *)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 192);
  sub_100008030(v41, &qword_1006335E0);
  v15 = sub_100004828((uint64_t *)&unk_1006325A0);
  v16 = sub_100004828((uint64_t *)&unk_100633440);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v15, v20 + 2 * v18, v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_1005208D0;
  v22 = (_QWORD *)(v21 + v20 + *(int *)(v16 + 48));
  v23 = enum case for DIPError.PropertyKey.serverURL(_:);
  v24 = type metadata accessor for DIPError.PropertyKey(0);
  v25 = *(void (**)(void))(*(_QWORD *)(v24 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v25)(v21 + v20, v23, v24);
  v22[3] = &type metadata for String;
  *v22 = 0xD000000000000013;
  v22[1] = 0x800000010054CBB0;
  v26 = (_QWORD *)(v21 + v20 + v18 + *(int *)(v16 + 48));
  v25();
  v27 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v28 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v26[3] = &type metadata for String;
  *v26 = v27;
  v26[1] = v28;
  swift_errorRetain(v1);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v28);
  v29 = sub_10011D314(v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v36, enum case for DIPError.Code.internalError(_:), v37);
  v30 = type metadata accessor for DIPError(0);
  v31 = sub_100007F30();
  swift_allocError(v30, v31, 0, 0);
  v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054CB90, v1, v36, 0, v29, 0xD000000000000050, 0x800000010054C970, 0xD00000000000001ELL, 0x800000010054CBD0, 61);
  swift_willThrow(v32);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v36);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013676C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7[42] = a6;
  v7[43] = v6;
  v7[40] = a4;
  v7[41] = a5;
  v7[38] = a2;
  v7[39] = a3;
  v7[37] = a1;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[44] = swift_task_alloc(v8);
  v7[45] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v7[46] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[47] = v10;
  v7[48] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v7[49] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[50] = v12;
  v7[51] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  v7[52] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v7[53] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[54] = v15;
  v7[55] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013687C, 0, 0);
}

uint64_t sub_10013687C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[51];
  v1 = v0[52];
  v3 = v0[49];
  v4 = v0[50];
  v6 = v0[40];
  v5 = v0[41];
  static DaemonSignposts.spNonceRequest.getter();
  v7 = DIPSignpost.init(_:)(v1);
  v8 = UUID.init()(v7);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  v0[56] = v9;
  v0[57] = v10;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v0[32] = &type metadata for NonceRequest;
  v12 = swift_allocObject(&unk_100608CA8, 120, 7);
  v0[29] = v12;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0xE000000000000000;
  *(_QWORD *)(v12 + 32) = v9;
  *(_QWORD *)(v12 + 40) = v11;
  *(_QWORD *)(v12 + 48) = v6;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  swift_bridgeObjectRetain(0xE000000000000000);
  swift_bridgeObjectRetain(v11);
  sub_10008F020(0, 0, 0, 0, 0, 0);
  v13 = (_QWORD *)swift_task_alloc(dword_100635E34);
  v0[58] = v13;
  *v13 = v0;
  v13[1] = sub_1001369B8;
  return sub_100138594((uint64_t)(v0 + 29), v0[38], v0[39], v5, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001369B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 464);
  v6[59] = a1;
  v6[60] = a2;
  v6[61] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = v6[57];
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(0);
    sub_10008EF5C(0, 0, 0, 0, 0, 0);
    v9 = sub_1001371D8;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 29);

    v9 = sub_100136A78;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_100136A78()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  _QWORD *v64;
  Swift::String v65;
  Swift::String_optional v66;
  void *object;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v2 = v0[60];
  v1 = v0[61];
  v3 = v0[59];
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v2);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100139500();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for NonceResponse, v3, v2, &type metadata for NonceResponse, v7);
  v8 = v1;
  v10 = v0[59];
  v9 = v0[60];
  v11 = (void *)v0[57];
  if (v8)
  {
    v12 = v0[47];
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(0);
    sub_10008EF5C(0, 0, 0, 0, 0, 0);
    sub_100007F8C(v10, v9);
    swift_release(v6);
    v13 = enum case for DIPError.Code.internalError(_:);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104);
  }
  else
  {
    v15 = v0[56];
    sub_100007F8C(v0[59], v0[60]);
    swift_release(v6);
    v16 = v0[3];
    v17 = v0[4];
    v18 = v0[5];
    v19 = v0[6];
    v20 = v0[7];
    v21 = v0[8];
    v22 = v0[9];
    v24 = v0[10];
    v23 = v0[11];
    v26 = v0[12];
    v25 = v0[13];
    v81 = v0[14];
    v96 = v0[15];
    v98 = v0[16];
    v90 = v0[2];
    v0[17] = v90;
    v0[18] = v16;
    v87 = v19;
    v88 = v17;
    v0[19] = v17;
    v0[20] = v18;
    v0[21] = v19;
    v0[22] = v20;
    v83 = v24;
    v85 = v21;
    v0[23] = v21;
    v0[24] = v22;
    v0[25] = v24;
    v0[26] = v23;
    v92 = v23;
    v82 = v26;
    v0[27] = v26;
    v0[28] = v25;
    v94 = v25;
    sub_10023E9A8(0, 0xE000000000000000, v15, v11, v0 + 17, 0);
    v28 = v27;
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(0);
    sub_10008EF5C(0, 0, 0, 0, 0, 0);
    if (!v28)
    {
      v61 = v0[59];
      v62 = v0[55];
      v68 = v0[54];
      v69 = v0[60];
      v70 = v0[53];
      v72 = v0[52];
      v74 = v0[51];
      v76 = v0[48];
      v78 = v0[45];
      v80 = v0[44];
      v63._countAndFlagsBits = 0xD000000000000019;
      v64 = (_QWORD *)v0[37];
      v63._object = (void *)0x800000010054CB70;
      v65._countAndFlagsBits = 0x3361656436313837;
      v65._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v65, v63);
      v66.value._countAndFlagsBits = sub_1000549DC();
      object = v66.value._object;
      DIPSignpost.end(workflowID:isBackground:)(v66, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease(object);
      sub_100007F8C(v61, v69);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v62, v70);
      swift_task_dealloc(v62);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      *v64 = v90;
      v64[1] = v16;
      v64[2] = v88;
      v64[3] = v18;
      v64[4] = v87;
      v64[5] = v20;
      v64[6] = v85;
      v64[7] = v22;
      v64[8] = v83;
      v64[9] = v92;
      v64[10] = v82;
      v64[11] = v94;
      v64[12] = v81;
      v64[13] = v96;
      v64[14] = v98;
      v59 = (uint64_t (*)(void))v0[1];
      return v59();
    }
    v30 = v0[47];
    v29 = v0[48];
    v31 = v0[46];
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v98);
    v13 = enum case for DIPError.Code.internalError(_:);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104);
    v14(v29, enum case for DIPError.Code.internalError(_:), v31);
    swift_errorRetain(v28);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100007F30();
    v8 = swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v28, v29, 0, v32, 0xD000000000000050, 0x800000010054C970, 0xD000000000000022, 0x800000010054CB10, 86);
    swift_willThrow(v35);
    swift_errorRelease(v28);
  }
  v37 = v0[59];
  v36 = v0[60];
  v38 = v0[48];
  v14(v38, v13, v0[46]);
  swift_errorRetain(v8);
  v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v91 = type metadata accessor for DIPError(0);
  v89 = sub_100007F30();
  v71 = swift_allocError(v91, v89, 0, 0);
  v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054CB40, v8, v38, 0, v39, 0xD000000000000050, 0x800000010054C970, 0xD000000000000022, 0x800000010054CB10, 92);
  swift_willThrow(v40);
  sub_100007F8C(v37, v36);
  swift_errorRelease(v8);
  v79 = v0[54];
  v84 = v0[53];
  v86 = v0[55];
  v93 = v0[52];
  v95 = v0[51];
  v73 = v0[47];
  v75 = v0[48];
  v77 = v0[46];
  v41 = v0[43];
  v97 = v0[45];
  v99 = v0[44];
  v42 = sub_100004828((uint64_t *)&unk_1006325A0);
  v43 = sub_100004828((uint64_t *)&unk_100633440);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(_QWORD *)(v44 + 72);
  v46 = *(unsigned __int8 *)(v44 + 80);
  v47 = (v46 + 32) & ~v46;
  v48 = swift_allocObject(v42, v47 + 2 * v45, v46 | 7);
  *(_OWORD *)(v48 + 16) = xmmword_1005208D0;
  v49 = v48 + v47;
  v50 = (_QWORD *)(v48 + v47 + *(int *)(v43 + 48));
  v51 = enum case for DIPError.PropertyKey.conversationID(_:);
  v52 = type metadata accessor for DIPError.PropertyKey(0);
  v53 = *(void (**)(void))(*(_QWORD *)(v52 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v53)(v49, v51, v52);
  v54 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v55 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v50[3] = &type metadata for String;
  *v50 = v54;
  v50[1] = v55;
  v56 = (_QWORD *)(v49 + v45 + *(int *)(v43 + 48));
  v53();
  v56[3] = &type metadata for String;
  *v56 = 0x69726168732D7073;
  v56[1] = 0xEA0000000000676ELL;
  swift_errorRetain(v71);
  swift_errorRetain(v71);
  swift_bridgeObjectRetain(v55);
  v57 = sub_10011D314(v48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v73 + 104))(v75, enum case for DIPError.Code.internalError(_:), v77);
  swift_allocError(v91, v89, 0, 0);
  v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x800000010054CAF0, v71, v75, 0, v57, 0xD000000000000050, 0x800000010054C970, 0xD000000000000022, 0x800000010054CB10, 95);
  swift_willThrow(v58);
  swift_errorRelease(v71);
  swift_errorRelease(v71);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v86, v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v93);
  swift_task_dealloc(v95);
  swift_task_dealloc(v75);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  v59 = (uint64_t (*)(void))v0[1];
  return v59();
}

uint64_t sub_1001371D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 360);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 232));
  swift_getErrorValue(v1, v0 + 288, v0 + 264);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if ((_DWORD)v5 == 1)
    goto LABEL_5;
  v6 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 352);
  sub_1001320A4(*(_QWORD *)(v0 + 360), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v8, v6) != enum case for DIPError.Code.httpTooManyRequests(_:))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 368));
LABEL_5:
    v17 = *(_QWORD *)(v0 + 360);
    swift_willThrow(v5);
    sub_100008030(v17, &qword_1006335E0);
    v49 = *(_QWORD *)(v0 + 488);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 488);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 360);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 104))(v10, enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), *(_QWORD *)(v0 + 368));
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_100007F30();
  v15 = swift_allocError(v13, v14, 0, 0);
  v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v10, 0, v12, 0xD000000000000050, 0x800000010054C970, 0xD000000000000022, 0x800000010054CB10, 78);
  v49 = v15;
  swift_willThrow(v16);
  swift_errorRelease(v9);
  sub_100008030(v11, &qword_1006335E0);
LABEL_6:
  v43 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 440);
  v45 = *(_QWORD *)(v0 + 416);
  v46 = *(_QWORD *)(v0 + 408);
  v39 = *(_QWORD *)(v0 + 376);
  v40 = *(_QWORD *)(v0 + 384);
  v41 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 432);
  v18 = *(_QWORD *)(v0 + 344);
  v47 = *(_QWORD *)(v0 + 360);
  v48 = *(_QWORD *)(v0 + 352);
  v19 = sub_100004828((uint64_t *)&unk_1006325A0);
  v20 = sub_100004828((uint64_t *)&unk_100633440);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 72);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v19, v24 + 2 * v22, v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_1005208D0;
  v26 = v25 + v24;
  v27 = (_QWORD *)(v26 + *(int *)(v20 + 48));
  v28 = enum case for DIPError.PropertyKey.conversationID(_:);
  v29 = type metadata accessor for DIPError.PropertyKey(0);
  v30 = *(void (**)(void))(*(_QWORD *)(v29 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v26, v28, v29);
  v31 = *(_QWORD *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v32 = *(_QWORD *)(v18 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v27[3] = &type metadata for String;
  *v27 = v31;
  v27[1] = v32;
  v33 = (_QWORD *)(v26 + v22 + *(int *)(v20 + 48));
  v30();
  v33[3] = &type metadata for String;
  *v33 = 0x69726168732D7073;
  v33[1] = 0xEA0000000000676ELL;
  swift_errorRetain(v49);
  swift_errorRetain(v49);
  swift_bridgeObjectRetain(v32);
  v34 = sub_10011D314(v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v40, enum case for DIPError.Code.internalError(_:), v41);
  v35 = type metadata accessor for DIPError(0);
  v36 = sub_100007F30();
  swift_allocError(v35, v36, 0, 0);
  v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x800000010054CAF0, v49, v40, 0, v34, 0xD000000000000050, 0x800000010054C970, 0xD000000000000022, 0x800000010054CB10, 95);
  swift_willThrow(v37);
  swift_errorRelease(v49);
  swift_errorRelease(v49);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v40);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100137620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7[68] = v6;
  v7[67] = a6;
  v7[66] = a5;
  v7[65] = a4;
  v7[63] = a2;
  v7[64] = a3;
  v7[62] = a1;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[69] = swift_task_alloc(v8);
  v7[70] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v7[71] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[72] = v10;
  v7[73] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IdentitySharingRequest(0);
  v7[74] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost.Config(0);
  v7[75] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost(0);
  v7[76] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[77] = v14;
  v7[78] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100137730, 0, 0);
}

uint64_t sub_100137730()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[75];
  v2 = v0[66];
  v3 = v0[63];
  static DaemonSignposts.identitySharingRequest.getter();
  DIPSignpost.init(_:)(v1);
  v4 = sub_100004828(&qword_100636580);
  v0[79] = v4;
  v0[57] = v4;
  v5 = sub_100022234(v0 + 54);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, v3, v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100635E34);
  v0[80] = v6;
  *v6 = v0;
  v6[1] = sub_1001377FC;
  return sub_100138594((uint64_t)(v0 + 54), v0[64], v0[65], v2, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001377FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 640);
  v6[81] = a1;
  v6[82] = a2;
  v6[83] = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = sub_1001380AC;
  }
  else
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v6 + 54);

    v8 = sub_100137888;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100137888()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD);
  uint64_t v13;
  unint64_t *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String_optional v77;
  void *object;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_100022948(v3, v2);
  v6 = JSONDecoder.init()(v5);
  v7 = sub_100004828(&qword_100635E50);
  v8 = sub_100099FFC(&qword_100635E58, &qword_100635E50, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v3, v2, v7, v8);
  v9 = v1;
  if (v1)
  {
    v10 = *(_QWORD *)(v0 + 576);
    sub_100007F8C(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    swift_release(v6);
    v11 = enum case for DIPError.Code.internalError(_:);
    v12 = *(void (**)(uint64_t, uint64_t, _QWORD))(v10 + 104);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 632);
    v14 = *(unint64_t **)(v0 + 592);
    sub_100007F8C(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    swift_release(v6);
    JWSSignedJSON.payload.getter(v13);
    v91 = v14[1];
    v15 = (void *)v14[3];
    v93 = v14[2];
    v95 = *v14;
    v89 = v15;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v15);
    sub_100035DAC((uint64_t)v14, type metadata accessor for IdentitySharingRequest);
    JWSSignedJSON.payload.getter(v7);
    v16 = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 96) = v16;
    v17 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 64) = v17;
    v18 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 160) = v18;
    v19 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 128) = v19;
    v20 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 32) = v20;
    v22 = *(_QWORD *)(v0 + 40);
    v21 = *(_QWORD *)(v0 + 48);
    v24 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 64);
    v26 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 16);
    v28 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v0 + 344) = v28;
    *(_QWORD *)(v0 + 360) = v22;
    *(_QWORD *)(v0 + 368) = v21;
    *(_QWORD *)(v0 + 376) = v24;
    *(_QWORD *)(v0 + 384) = v23;
    *(_QWORD *)(v0 + 392) = v26;
    *(_QWORD *)(v0 + 400) = v25;
    v29 = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v0 + 408) = v29;
    v30 = v28;
    v31 = v29;
    v88 = v29;
    *(_QWORD *)(v0 + 424) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v31);
    sub_1001393FC((_QWORD *)(v0 + 16));
    sub_10023E9A8(v95, v91, v93, v89, (_QWORD *)(v0 + 336), 0);
    v33 = v32;
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v27);
    if (!v33)
    {
      v68 = *(_QWORD *)(v0 + 656);
      v69 = *(_QWORD *)(v0 + 648);
      v70 = *(_QWORD *)(v0 + 624);
      v71 = *(_QWORD *)(v0 + 616);
      v72 = *(_QWORD *)(v0 + 608);
      v73 = *(_QWORD *)(v0 + 600);
      v74 = *(_QWORD *)(v0 + 592);
      v97 = *(_QWORD *)(v0 + 584);
      v99 = *(_QWORD *)(v0 + 560);
      v102 = *(_QWORD *)(v0 + 552);
      v75._countAndFlagsBits = 0xD00000000000001BLL;
      v75._object = (void *)0x800000010054CAD0;
      v76._countAndFlagsBits = 0x6561373163616336;
      v76._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v76, v75);
      v77.value._countAndFlagsBits = sub_1000549DC();
      object = v77.value._object;
      DIPSignpost.end(workflowID:isBackground:)(v77, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease(object);
      sub_100007F8C(v69, v68);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      swift_task_dealloc(v70);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v97);
      swift_task_dealloc(v99);
      swift_task_dealloc(v102);
      v66 = *(uint64_t (**)(void))(v0 + 8);
      return v66();
    }
    v34 = *(_QWORD *)(v0 + 584);
    v100 = *(_QWORD *)(v0 + 496);
    v11 = enum case for DIPError.Code.internalError(_:);
    v12 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 576) + 104);
    v12(v34, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 568));
    swift_errorRetain(v33);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = v33;
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100007F30();
    v9 = swift_allocError(v37, v38, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v36, v34, 0, v35, 0xD000000000000050, 0x800000010054C970, 0xD000000000000018, 0x800000010054CA70, 120);
    swift_willThrow(v39);
    swift_errorRelease(v36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v100, v7);
  }
  v40 = *(_QWORD *)(v0 + 656);
  v41 = *(_QWORD *)(v0 + 648);
  v42 = *(_QWORD *)(v0 + 584);
  v12(v42, v11, *(_QWORD *)(v0 + 568));
  swift_errorRetain(v9);
  v43 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v92 = type metadata accessor for DIPError(0);
  v90 = sub_100007F30();
  v44 = swift_allocError(v92, v90, 0, 0);
  v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010054CA90, v9, v42, 0, v43, 0xD000000000000050, 0x800000010054C970, 0xD000000000000018, 0x800000010054CA70, 126);
  swift_willThrow(v45);
  sub_100007F8C(v41, v40);
  swift_errorRelease(v9);
  v81 = *(_QWORD *)(v0 + 632);
  v85 = *(_QWORD *)(v0 + 616);
  v86 = *(_QWORD *)(v0 + 608);
  v87 = *(_QWORD *)(v0 + 624);
  v94 = *(_QWORD *)(v0 + 600);
  v101 = *(_QWORD *)(v0 + 592);
  v82 = *(_QWORD *)(v0 + 576);
  v83 = *(_QWORD *)(v0 + 584);
  v84 = *(_QWORD *)(v0 + 568);
  v96 = *(_QWORD *)(v0 + 560);
  v98 = *(_QWORD *)(v0 + 552);
  v79 = *(_QWORD *)(v0 + 544);
  v46 = sub_100004828((uint64_t *)&unk_1006325A0);
  v47 = sub_100004828((uint64_t *)&unk_100633440);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(_QWORD *)(v48 + 72);
  v50 = *(unsigned __int8 *)(v48 + 80);
  v51 = (v50 + 32) & ~v50;
  v80 = 2 * v49;
  v52 = swift_allocObject(v46, v51 + 3 * v49, v50 | 7);
  *(_OWORD *)(v52 + 16) = xmmword_100524440;
  v53 = v52 + v51;
  v54 = (_QWORD *)(v52 + v51 + *(int *)(v47 + 48));
  v55 = enum case for DIPError.PropertyKey.conversationID(_:);
  v56 = type metadata accessor for DIPError.PropertyKey(0);
  v57 = *(void (**)(void))(*(_QWORD *)(v56 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v53, v55, v56);
  v58 = *(_QWORD *)(v79 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v59 = *(_QWORD *)(v79 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v54[3] = &type metadata for String;
  *v54 = v58;
  v54[1] = v59;
  v60 = (_QWORD *)(v53 + v49 + *(int *)(v47 + 48));
  v57();
  swift_errorRetain(v44);
  swift_errorRetain(v44);
  swift_bridgeObjectRetain(v59);
  JWSSignedJSON.payload.getter(v81);
  v62 = *(_QWORD *)(v101 + 16);
  v61 = *(_QWORD *)(v101 + 24);
  swift_bridgeObjectRetain(v61);
  sub_100035DAC(v101, type metadata accessor for IdentitySharingRequest);
  v60[3] = &type metadata for String;
  *v60 = v62;
  v60[1] = v61;
  v63 = (_QWORD *)(v53 + v80 + *(int *)(v47 + 48));
  v57();
  v63[3] = &type metadata for String;
  *v63 = 0x69726168732D7073;
  v63[1] = 0xEA0000000000676ELL;
  v64 = sub_10011D314(v52);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v83, enum case for DIPError.Code.internalError(_:), v84);
  swift_allocError(v92, v90, 0, 0);
  v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054CA50, v44, v83, 0, v64, 0xD000000000000050, 0x800000010054C970, 0xD000000000000018, 0x800000010054CA70, 129);
  swift_willThrow(v65);
  swift_errorRelease(v44);
  swift_errorRelease(v44);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v87, v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v94);
  swift_task_dealloc(v101);
  swift_task_dealloc(v83);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  v66 = *(uint64_t (**)(void))(v0 + 8);
  return v66();
}

uint64_t sub_1001380AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 560);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 432));
  swift_getErrorValue(v1, v0 + 488, v0 + 464);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3);
  if ((_DWORD)v5 == 1)
    goto LABEL_5;
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  sub_1001320A4(*(_QWORD *)(v0 + 560), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v8, v7) != enum case for DIPError.Code.httpTooManyRequests(_:))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 576) + 8))(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 568));
LABEL_5:
    v18 = *(_QWORD *)(v0 + 560);
    swift_willThrow(v5);
    sub_100008030(v18, &qword_1006335E0);
    v17 = *(_QWORD *)(v0 + 664);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v0 + 664);
  v10 = *(_QWORD *)(v0 + 584);
  v11 = *(_QWORD *)(v0 + 560);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 576) + 104))(v10, enum case for DIPError.Code.topekaDownstreamServiceProviderUnavailable(_:), *(_QWORD *)(v0 + 568));
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_100007F30();
  v15 = swift_allocError(v13, v14, 0, 0);
  v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v10, 0, v12, 0xD000000000000050, 0x800000010054C970, 0xD000000000000018, 0x800000010054CA70, 112);
  v17 = v15;
  swift_willThrow(v16);
  swift_errorRelease(v9);
  sub_100008030(v11, &qword_1006335E0);
LABEL_6:
  v45 = *(_QWORD *)(v0 + 632);
  v49 = *(_QWORD *)(v0 + 616);
  v50 = *(_QWORD *)(v0 + 608);
  v51 = *(_QWORD *)(v0 + 624);
  v52 = *(_QWORD *)(v0 + 600);
  v19 = *(_QWORD *)(v0 + 592);
  v46 = *(_QWORD *)(v0 + 576);
  v47 = *(_QWORD *)(v0 + 584);
  v48 = *(_QWORD *)(v0 + 568);
  v53 = *(_QWORD *)(v0 + 560);
  v54 = *(_QWORD *)(v0 + 552);
  v42 = *(_QWORD *)(v0 + 544);
  v20 = sub_100004828((uint64_t *)&unk_1006325A0);
  v21 = sub_100004828((uint64_t *)&unk_100633440);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 72);
  v24 = *(unsigned __int8 *)(v22 + 80);
  v25 = (v24 + 32) & ~v24;
  v43 = 2 * v23;
  v44 = swift_allocObject(v20, v25 + 3 * v23, v24 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_100524440;
  v26 = v44 + v25;
  v27 = (_QWORD *)(v44 + v25 + *(int *)(v21 + 48));
  v28 = enum case for DIPError.PropertyKey.conversationID(_:);
  v29 = type metadata accessor for DIPError.PropertyKey(0);
  v30 = *(void (**)(void))(*(_QWORD *)(v29 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v26, v28, v29);
  v31 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v32 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v27[3] = &type metadata for String;
  *v27 = v31;
  v27[1] = v32;
  v33 = (_QWORD *)(v26 + v23 + *(int *)(v21 + 48));
  v30();
  swift_errorRetain(v17);
  swift_errorRetain(v17);
  swift_bridgeObjectRetain(v32);
  JWSSignedJSON.payload.getter(v45);
  v35 = *(_QWORD *)(v19 + 16);
  v34 = *(_QWORD *)(v19 + 24);
  swift_bridgeObjectRetain(v34);
  sub_100035DAC(v19, type metadata accessor for IdentitySharingRequest);
  v33[3] = &type metadata for String;
  *v33 = v35;
  v33[1] = v34;
  v36 = (_QWORD *)(v26 + v43 + *(int *)(v21 + 48));
  v30();
  v36[3] = &type metadata for String;
  *v36 = 0x69726168732D7073;
  v36[1] = 0xEA0000000000676ELL;
  v37 = sub_10011D314(v44);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v47, enum case for DIPError.Code.internalError(_:), v48);
  v38 = type metadata accessor for DIPError(0);
  v39 = sub_100007F30();
  swift_allocError(v38, v39, 0, 0);
  v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054CA50, v17, v47, 0, v37, 0xD000000000000050, 0x800000010054C970, 0xD000000000000018, 0x800000010054CA70, 129);
  swift_willThrow(v40);
  swift_errorRelease(v17);
  swift_errorRelease(v17);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v51, v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v19);
  swift_task_dealloc(v47);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100138594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6[78] = v5;
  v6[77] = a5;
  v6[76] = a4;
  v6[75] = a3;
  v6[74] = a2;
  v6[73] = a1;
  v7 = type metadata accessor for URLRequest(0);
  v6[79] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[80] = v8;
  v6[81] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100630A48);
  v6[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v6[83] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[84] = v11;
  v6[85] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  v6[86] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[87] = v13;
  v6[88] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_100636580);
  v6[89] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[90] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[91] = swift_task_alloc(v16);
  v6[92] = swift_task_alloc(v16);
  v17 = type metadata accessor for Logger(0);
  v6[93] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[94] = v18;
  v6[95] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001386E0, 0, 0);
}

uint64_t sub_1001386E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String_optional v72;
  Swift::String v73;
  _QWORD *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t DynamicType;
  Swift::String v83;
  void *object;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, char, char);
  uint64_t v115;
  unint64_t v116;

  v2 = (_QWORD *)(v1 + 504);
  v3 = *(_QWORD *)(v1 + 584);
  defaultLogger()(a1);
  v4 = sub_10002EDBC(v3, v1 + 440);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.info.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v110 = *(_QWORD *)(v1 + 752);
    v112 = *(_QWORD *)(v1 + 744);
    v113 = *(_QWORD *)(v1 + 760);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v115 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = *(_QWORD *)(v1 + 464);
    v11 = sub_10000806C((_QWORD *)(v1 + 440), v10);
    *(_QWORD *)(v1 + 568) = swift_getDynamicType(v11, v10, 1);
    v12 = sub_100004828(&qword_100630AA0);
    v13 = String.init<A>(describing:)(v1 + 568, v12);
    v15 = v14;
    *(_QWORD *)(v1 + 576) = sub_1000E3AC8(v13, v14, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 576, v1 + 584, v8 + 4);
    swift_bridgeObjectRelease(v15);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 440));
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "coreidvd: sendPostRequest of type %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v113, v112);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 760);
    v17 = *(_QWORD *)(v1 + 752);
    v18 = *(_QWORD *)(v1 + 744);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 440));

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  v19 = *(_QWORD *)(v1 + 736);
  v20 = *(_QWORD *)(v1 + 712);
  sub_10002EDBC(*(_QWORD *)(v1 + 584), (uint64_t)v2);
  if (swift_dynamicCast(v19, v2, (char *)&type metadata for Any + 8, v20, 0))
  {
    v21 = *(_QWORD *)(v1 + 728);
    v22 = *(_QWORD *)(v1 + 712);
    v23 = *(_QWORD *)(v1 + 584);
    v24 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = JSONEncoder.init()();
    sub_10002EDBC(v23, v1 + 536);
    swift_dynamicCast(v21, v1 + 536, (char *)&type metadata for Any + 8, v22, 7);
    v26 = sub_100099FFC(&qword_100635E48, &qword_100636580, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v27 = dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v22, v26);
    v29 = v28;
    v30 = *(_QWORD *)(v1 + 736);
    v31 = *(_QWORD *)(v1 + 728);
    v32 = *(_QWORD *)(v1 + 720);
    v33 = *(_QWORD *)(v1 + 712);
    swift_release(v25);
    v34 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v34(v31, v33);
    v34(v30, v33);
  }
  else
  {
    v35 = sub_100004828(&qword_100635E38);
    if (swift_dynamicCast(v1 + 368, v2, (char *)&type metadata for Any + 8, v35, 0))
    {
      sub_10002EDBC(*(_QWORD *)(v1 + 584), v1 + 472);
      swift_dynamicCast(v1 + 328, v1 + 472, (char *)&type metadata for Any + 8, v35, 7);
      v36 = *(_QWORD *)(v1 + 352);
      v37 = *(_QWORD *)(v1 + 360);
      sub_10000806C((_QWORD *)(v1 + 328), v36);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
      v29 = v38;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 328));
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 368));
    }
    else
    {
      if (!swift_dynamicCast(v1 + 120, v2, (char *)&type metadata for Any + 8, &type metadata for NonceRequest, 0))
      {
        v76 = *(_QWORD *)(v1 + 704);
        v77 = *(_QWORD *)(v1 + 696);
        v78 = *(_QWORD *)(v1 + 688);
        v79 = *(_QWORD **)(v1 + 584);
        v115 = 0;
        v116 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease(v116);
        v115 = 0xD000000000000015;
        v116 = 0x800000010054C950;
        v80 = v79[3];
        v81 = sub_10000806C(v79, v80);
        DynamicType = swift_getDynamicType(v81, v80, 1);
        v83._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
        object = v83._object;
        String.append(_:)(v83);
        swift_bridgeObjectRelease(object);
        v85 = v115;
        v86 = v116;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v76, enum case for DIPError.Code.badLogic(_:), v78);
        v87 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v88 = type metadata accessor for DIPError(0);
        v89 = sub_100007F30();
        v90 = swift_allocError(v88, v89, 0, 0);
        v91 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v85, v86, 0, v76, 0, v87, 0xD000000000000050, 0x800000010054C970, 0xD000000000000032, 0x800000010054C9D0, 153);
        swift_willThrow(v91);
        v92 = *(_QWORD *)(v1 + 704);
        v93 = *(_QWORD *)(v1 + 696);
        v94 = *(_QWORD *)(v1 + 688);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v93 + 104))(v92, enum case for DIPError.Code.internalError(_:), v94);
        swift_errorRetain(v90);
        v95 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v96 = type metadata accessor for DIPError(0);
        v97 = sub_100007F30();
        swift_allocError(v96, v97, 0, 0);
        v98 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054CA10, v90, v92, 0, v95, 0xD000000000000050, 0x800000010054C970, 0xD000000000000032, 0x800000010054C9D0, 156);
        swift_willThrow(v98);
        swift_errorRelease(v90);
        goto LABEL_14;
      }
      v108 = *(_QWORD *)(v1 + 584);
      v39 = *(_QWORD *)(v1 + 144);
      v40 = *(_QWORD *)(v1 + 168);
      v41 = *(_QWORD *)(v1 + 176);
      v43 = *(_QWORD *)(v1 + 184);
      v42 = *(_QWORD *)(v1 + 192);
      v44 = *(_QWORD *)(v1 + 200);
      v45 = *(_QWORD *)(v1 + 208);
      v46 = *(_QWORD *)(v1 + 216);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 128));
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v40);
      sub_10008EF5C(v41, v43, v42, v44, v45, v46);
      v47 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
      v48 = JSONEncoder.init()();
      sub_10002EDBC(v108, v1 + 408);
      swift_dynamicCast(v1 + 224, v1 + 408, (char *)&type metadata for Any + 8, &type metadata for NonceRequest, 7);
      v49 = *(_QWORD *)(v1 + 232);
      v50 = *(_QWORD *)(v1 + 240);
      v51 = *(_QWORD *)(v1 + 248);
      v53 = *(_QWORD *)(v1 + 272);
      v52 = *(_QWORD *)(v1 + 280);
      v109 = *(_QWORD *)(v1 + 296);
      v111 = *(_QWORD *)(v1 + 288);
      v106 = *(_QWORD *)(v1 + 312);
      v107 = *(_QWORD *)(v1 + 304);
      v105 = *(_QWORD *)(v1 + 320);
      *(_QWORD *)(v1 + 16) = *(_QWORD *)(v1 + 224);
      *(_QWORD *)(v1 + 24) = v49;
      *(_QWORD *)(v1 + 32) = v50;
      *(_QWORD *)(v1 + 40) = v51;
      *(_OWORD *)(v1 + 48) = *(_OWORD *)(v1 + 256);
      *(_QWORD *)(v1 + 64) = v53;
      *(_QWORD *)(v1 + 72) = v52;
      *(_QWORD *)(v1 + 80) = v111;
      *(_QWORD *)(v1 + 88) = v109;
      *(_QWORD *)(v1 + 96) = v107;
      *(_QWORD *)(v1 + 104) = v106;
      *(_QWORD *)(v1 + 112) = v105;
      v54 = sub_1001393B8();
      v27 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1 + 16, &type metadata for NonceRequest, v54);
      v29 = v55;
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v51);
      v56 = v53;
      v2 = (_QWORD *)(v1 + 504);
      swift_bridgeObjectRelease(v56);
      sub_10008EF5C(v52, v111, v109, v107, v106, v105);
      swift_release(v48);
    }
  }
  v57 = *(_QWORD *)(v1 + 672);
  v58 = *(_QWORD *)(v1 + 664);
  v59 = *(_QWORD *)(v1 + 656);
  v60 = *(_QWORD *)(v1 + 600);
  v61 = *(_QWORD *)(v1 + 592);
  *(_QWORD *)(v1 + 768) = v29;
  *(_QWORD *)(v1 + 776) = v27;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2);
  URL.init(string:)(v61, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v59, 1, v58) != 1)
  {
    v69 = *(_QWORD *)(v1 + 680);
    v70 = *(_QWORD *)(v1 + 648);
    v71 = *(_QWORD *)(v1 + 608);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 672) + 32))(v69, *(_QWORD *)(v1 + 656), *(_QWORD *)(v1 + 664));
    sub_100022948(v27, v29);
    sub_1004E1380(v69, v71, 0, 0, v70);
    URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
    v72.value._countAndFlagsBits = 0xD000000000000010;
    v72.value._object = (void *)0x8000000100540CB0;
    v73._countAndFlagsBits = 0x2D746E65746E6F43;
    v73._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(v72, v73);
    URLRequest.httpBody.setter(v27, v29);
    v114 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
    v74 = (_QWORD *)swift_task_alloc(unk_100643F74);
    *(_QWORD *)(v1 + 784) = v74;
    *v74 = v1;
    v74[1] = sub_1001390DC;
    return v114(*(_QWORD *)(v1 + 648), *(_QWORD *)(v1 + 616), 0, 0);
  }
  v62 = *(_QWORD *)(v1 + 704);
  v63 = *(_QWORD *)(v1 + 696);
  v64 = *(_QWORD *)(v1 + 688);
  sub_100008030(*(_QWORD *)(v1 + 656), &qword_100630A48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v62, enum case for DIPError.Code.badLogic(_:), v64);
  v65 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v66 = type metadata accessor for DIPError(0);
  v67 = sub_100007F30();
  swift_allocError(v66, v67, 0, 0);
  v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x800000010054CA30, 0, v62, 0, v65, 0xD000000000000050, 0x800000010054C970, 0xD000000000000032, 0x800000010054C9D0, 160);
  swift_willThrow(v68);
  sub_100007F8C(v27, v29);
LABEL_14:
  v99 = *(_QWORD *)(v1 + 736);
  v100 = *(_QWORD *)(v1 + 728);
  v101 = *(_QWORD *)(v1 + 704);
  v102 = *(_QWORD *)(v1 + 680);
  v103 = *(_QWORD *)(v1 + 656);
  v104 = *(_QWORD *)(v1 + 648);
  swift_task_dealloc(*(_QWORD *)(v1 + 760));
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001390DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v10 = *v5;
  v11 = *(_QWORD *)(*v5 + 784);
  *(_QWORD *)(*v5 + 792) = v4;
  swift_task_dealloc(v11);
  if (v4)
  {
    v12 = sub_100139264;
  }
  else
  {
    *(_BYTE *)(v10 + 824) = a4 & 1;
    *(_QWORD *)(v10 + 800) = a3;
    *(_QWORD *)(v10 + 808) = a2;
    *(_QWORD *)(v10 + 816) = a1;
    v12 = sub_100139174;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_100139174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 648);
  v8 = *(_QWORD *)(v0 + 640);
  v9 = *(_QWORD *)(v0 + 632);
  sub_100007F8C(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 768));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v11);
  swift_task_dealloc(v4);
  swift_task_dealloc(v12);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 800), *(unsigned __int8 *)(v0 + 824));
}

uint64_t sub_100139264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v6 = *(_QWORD *)(v0 + 632);
  sub_100007F8C(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 768));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 736);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 704);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 648);
  swift_task_dealloc(*(_QWORD *)(v0 + 760));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100139340()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8coreidvd15DIPSPWebService_IDENTITY_SHARE_ENDPOINT
                                             + 8));
}

id sub_100139354()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPSPWebService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DIPSPWebService()
{
  return objc_opt_self(_TtC8coreidvd15DIPSPWebService);
}

unint64_t sub_1001393B8()
{
  unint64_t result;

  result = qword_100635E40;
  if (!qword_100635E40)
  {
    result = swift_getWitnessTable(&unk_10052B894, &type metadata for NonceRequest);
    atomic_store(result, (unint64_t *)&qword_100635E40);
  }
  return result;
}

_QWORD *sub_1001393FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  v10 = a1[19];
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1001394B0()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = v0[10];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[12]);
    swift_bridgeObjectRelease(v0[14]);
  }
  return swift_deallocObject(v0, 120, 7);
}

unint64_t sub_100139500()
{
  unint64_t result;

  result = qword_100635E60;
  if (!qword_100635E60)
  {
    result = swift_getWitnessTable(&unk_10052B7CC, &type metadata for NonceResponse);
    atomic_store(result, (unint64_t *)&qword_100635E60);
  }
  return result;
}

unint64_t sub_100139544()
{
  unint64_t result;

  result = qword_100635E68;
  if (!qword_100635E68)
  {
    result = swift_getWitnessTable(&unk_10052B4EC, &type metadata for InputValidationResponse);
    atomic_store(result, (unint64_t *)&qword_100635E68);
  }
  return result;
}

uint64_t sub_100139588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v28 - v5;
  v7 = type metadata accessor for String.Encoding(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v12._object = (void *)0x800000010054CC80;
  v12._countAndFlagsBits = 0xD000000000000024;
  v13 = NSUserDefaults.internalString(forKey:)(v12);

  if (!v13.value._object)
    return 0;
  v14 = ((unint64_t)v13.value._object >> 56) & 0xF;
  if (((uint64_t)v13.value._object & 0x2000000000000000) == 0)
    v14 = v13.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    swift_bridgeObjectRelease(v13.value._object);
    return 0;
  }
  static String.Encoding.utf8.getter();
  v15 = String.data(using:allowLossyConversion:)(v10, 0, v13.value._countAndFlagsBits, v13.value._object);
  v17 = v16;
  swift_bridgeObjectRelease(v13.value._object);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v17 >> 60 == 15)
  {
    v19 = defaultLogger()(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "KRL CDN response override value is set, but failed to parse value into data object", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return 0;
  }
  v24 = defaultLogger()(v18);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Got override for KRL CDN response with internal settings value.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v15;
}

_QWORD *sub_100139830()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  _QWORD *countAndFlagsBits;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  void **v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  Swift::String_optional v35;

  v0 = type metadata accessor for CharacterSet(0);
  v32 = *(_QWORD *)(v0 - 8);
  v33 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4._object = (void *)0x800000010054CC60;
  v4._countAndFlagsBits = 0xD00000000000001DLL;
  v5 = NSUserDefaults.internalString(forKey:)(v4);

  countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v5.value._object)
  {
    v35 = v5;
    v34[0] = 10;
    v34[1] = 0xE100000000000000;
    v7 = sub_1000994DC();
    v8 = StringProtocol.components<A>(separatedBy:)(v34, &type metadata for String, &type metadata for String, v7, v7);
    swift_bridgeObjectRelease(v5.value._object);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v34[0] = _swiftEmptyArrayStorage;
      sub_1000E419C(0, v9, 0);
      v31 = v8;
      v10 = (void **)(v8 + 40);
      do
      {
        v11 = *v10;
        v35.value._countAndFlagsBits = (uint64_t)*(v10 - 1);
        v35.value._object = v11;
        v12 = swift_bridgeObjectRetain(v11);
        static CharacterSet.whitespacesAndNewlines.getter(v12);
        v13 = StringProtocol.trimmingCharacters(in:)(v2, &type metadata for String, v7);
        v15 = v14;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v2, v33);
        swift_bridgeObjectRelease(v11);
        v16 = (_QWORD *)v34[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v34[0]) & 1) == 0)
        {
          sub_1000E419C(0, v16[2] + 1, 1);
          v16 = (_QWORD *)v34[0];
        }
        v18 = v16[2];
        v17 = v16[3];
        if (v18 >= v17 >> 1)
        {
          sub_1000E419C(v17 > 1, v18 + 1, 1);
          v16 = (_QWORD *)v34[0];
        }
        v10 += 2;
        v16[2] = v18 + 1;
        v19 = &v16[2 * v18];
        v19[4] = v13;
        v19[5] = v15;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease(v31);
      v20 = v16[2];
      if (v20)
        goto LABEL_10;
    }
    else
    {
      swift_bridgeObjectRelease(v8);
      v16 = _swiftEmptyArrayStorage;
      v20 = _swiftEmptyArrayStorage[2];
      if (v20)
      {
LABEL_10:
        v21 = v16 + 5;
        countAndFlagsBits = _swiftEmptyArrayStorage;
        do
        {
          v26 = *(v21 - 1);
          v25 = *v21;
          v27 = HIBYTE(*v21) & 0xFLL;
          if ((*v21 & 0x2000000000000000) == 0)
            v27 = v26 & 0xFFFFFFFFFFFFLL;
          if (v27)
          {
            swift_bridgeObjectRetain(*v21);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits);
            v35.value._countAndFlagsBits = (uint64_t)countAndFlagsBits;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1000E419C(0, countAndFlagsBits[2] + 1, 1);
              countAndFlagsBits = (_QWORD *)v35.value._countAndFlagsBits;
            }
            v23 = countAndFlagsBits[2];
            v22 = countAndFlagsBits[3];
            if (v23 >= v22 >> 1)
            {
              sub_1000E419C(v22 > 1, v23 + 1, 1);
              countAndFlagsBits = (_QWORD *)v35.value._countAndFlagsBits;
            }
            countAndFlagsBits[2] = v23 + 1;
            v24 = &countAndFlagsBits[2 * v23];
            v24[4] = v26;
            v24[5] = v25;
          }
          v21 += 2;
          --v20;
        }
        while (v20);
        goto LABEL_22;
      }
    }
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease(v16);
  }
  return countAndFlagsBits;
}

uint64_t sub_100139B1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v8 = type metadata accessor for ThreadSafeUploadTracker();
  v9 = swift_allocObject(v8, 24, 7);
  v10 = sub_100004828(&qword_100635F18);
  v11 = swift_allocObject(v10, 28, 7);
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v9 + 16) = v11;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  sub_10002581C((uint64_t)a1, a4);
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  v12 = type metadata accessor for MobileDocumentReaderDataContainer();
  v13 = swift_allocObject(v12, 32, 7);
  *(_QWORD *)(v13 + 24) = a2;
  v14 = sub_100004828(&qword_100635F20);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain_n(a2, 3);
  swift_retain(a3);
  *(_QWORD *)(v13 + 16) = AsyncCoreDataContainer.init(contextBuilder:)(sub_10013AACC, a2);
  *(_QWORD *)(a4 + 56) = v13;
  v15 = type metadata accessor for IdentityProofingDataContainer();
  v16 = swift_allocObject(v15, 32, 7);
  *(_QWORD *)(v16 + 24) = a2;
  v17 = sub_100004828(&qword_100635F28);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  swift_retain(a2);
  *(_QWORD *)(v16 + 16) = AsyncCoreDataContainer.init(contextBuilder:)(sub_10013AAE4, a2);
  swift_release(a3);
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  *(_QWORD *)(a4 + 64) = v16;
  return result;
}

uint64_t sub_100139C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD v5[12];

  v0 = type metadata accessor for EnvironmentManager();
  v1 = swift_allocObject(v0, 24, 7);
  memset(v5, 0, sizeof(v5));
  v2 = sub_100004828(&qword_100635F30);
  v3 = swift_allocObject(v2, 212, 7);
  *(_DWORD *)(v3 + 208) = 0;
  sub_10013AA10((uint64_t)v5, v3 + 16);
  result = sub_10013AA58((uint64_t)v5);
  *(_QWORD *)(v1 + 16) = v3;
  qword_1006702A0 = v1;
  return result;
}

uint64_t sub_100139D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10013AA10(a1, (uint64_t)&v24);
  if (*((_QWORD *)&v25 + 1))
  {
    v11 = v33;
    a3[8] = v32;
    a3[9] = v11;
    v12 = v35;
    a3[10] = v34;
    a3[11] = v12;
    v13 = v29;
    a3[4] = v28;
    a3[5] = v13;
    v14 = v31;
    a3[6] = v30;
    a3[7] = v14;
    v15 = v25;
    *a3 = v24;
    a3[1] = v15;
    v16 = v27;
    a3[2] = v26;
    a3[3] = v16;
  }
  else
  {
    sub_10013AA58(a1);
    v17 = sub_10013AA58((uint64_t)&v24);
    v18 = defaultLogger()(v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      v36 = a2;
      v22 = v21;
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No environment exists, creating new environment", v21, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_100139EBC((uint64_t)a3);
    return sub_10013AA98((uint64_t)a3, a1);
  }
  return result;
}

uint64_t sub_100139EBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v22 = a1;
  v1 = type metadata accessor for AsyncCoreDataStore.StoreType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MobileDocumentReaderSupportChecker(0);
  v26 = (_UNKNOWN **)&protocol witness table for MobileDocumentReaderSupportChecker;
  sub_100022234(&v24);
  MobileDocumentReaderSupportChecker.init(suiteNameOverride:)(0, 0);
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v5 = qword_100670320;
  v6 = type metadata accessor for DIPConfigWebService();
  v23[3] = v6;
  v23[4] = &off_10060C2B8;
  v23[0] = v5;
  v7 = type metadata accessor for ConfigurationManager();
  v8 = (_QWORD *)swift_allocObject(v7, 96, 7);
  v9 = sub_10001E624((uint64_t)v23, v6);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v8[10] = v6;
  v8[11] = &off_10060C2B8;
  v8[7] = v13;
  sub_100008018(&v24, (uint64_t)(v8 + 2));
  swift_retain(v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v23);
  v25 = v7;
  v26 = &off_100608648;
  *(_QWORD *)&v24 = v8;
  v14 = enum case for AsyncCoreDataStore.StoreType.disk(_:);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v15(v4, enum case for AsyncCoreDataStore.StoreType.disk(_:), v1);
  v16 = type metadata accessor for DaemonCoreDataStore();
  swift_allocObject(v16, 24, 7);
  v17 = sub_10048650C((uint64_t)v4);
  v15(v4, v14, v1);
  v18 = type metadata accessor for DaemonBiomeCoreDataStore();
  swift_allocObject(v18, 24, 7);
  v19 = sub_1001B1A6C((uint64_t)v4);
  return sub_100139B1C(&v24, v17, v19, v22);
}

uint64_t type metadata accessor for EnvironmentManager()
{
  return objc_opt_self(_TtC8coreidvd18EnvironmentManager);
}

uint64_t destroy for Environment(_QWORD *a1)
{
  uint64_t result;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_release(a1[5]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  result = swift_release(a1[9]);
  if (a1[10])
    result = swift_release(a1[11]);
  if (a1[12])
    result = swift_release(a1[13]);
  if (a1[14])
    result = swift_release(a1[15]);
  if (a1[16])
    result = swift_release(a1[17]);
  if (a1[18])
    result = swift_release(a1[19]);
  if (a1[20])
    result = swift_release(a1[21]);
  if (a1[22])
    return swift_release(a1[23]);
  return result;
}

uint64_t initializeWithCopy for Environment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  if (v5)
  {
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = v11;
    swift_retain(v11);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  v14 = *(_QWORD *)(a2 + 112);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    swift_retain(v15);
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  v16 = *(_QWORD *)(a2 + 128);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v16;
    *(_QWORD *)(a1 + 136) = v17;
    swift_retain(v17);
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  v18 = *(_QWORD *)(a2 + 144);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v19;
    swift_retain(v19);
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  v20 = *(_QWORD *)(a2 + 160);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v20;
    *(_QWORD *)(a1 + 168) = v21;
    swift_retain(v21);
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  v22 = *(_QWORD *)(a2 + 176);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v22;
    *(_QWORD *)(a1 + 184) = v23;
    swift_retain(v23);
  }
  else
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  }
  return a1;
}

_QWORD *assignWithCopy for Environment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_10000660C(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[6];
  v7 = a1[6];
  a1[6] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[7];
  v9 = a1[7];
  a1[7] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[10];
  if (a1[10])
  {
    if (v14)
    {
      v15 = a2[11];
      v16 = a1[11];
      a1[10] = v14;
      a1[11] = v15;
      swift_retain(v15);
      swift_release(v16);
      goto LABEL_8;
    }
    swift_release(a1[11]);
  }
  else if (v14)
  {
    v17 = a2[11];
    a1[10] = v14;
    a1[11] = v17;
    swift_retain(v17);
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_8:
  v18 = a2[12];
  if (a1[12])
  {
    if (v18)
    {
      v19 = a2[13];
      v20 = a1[13];
      a1[12] = v18;
      a1[13] = v19;
      swift_retain(v19);
      swift_release(v20);
      goto LABEL_15;
    }
    swift_release(a1[13]);
  }
  else if (v18)
  {
    v21 = a2[13];
    a1[12] = v18;
    a1[13] = v21;
    swift_retain(v21);
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
LABEL_15:
  v22 = a2[14];
  if (a1[14])
  {
    if (v22)
    {
      v23 = a2[15];
      v24 = a1[15];
      a1[14] = v22;
      a1[15] = v23;
      swift_retain(v23);
      swift_release(v24);
      goto LABEL_22;
    }
    swift_release(a1[15]);
  }
  else if (v22)
  {
    v25 = a2[15];
    a1[14] = v22;
    a1[15] = v25;
    swift_retain(v25);
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
LABEL_22:
  v26 = a2[16];
  if (a1[16])
  {
    if (v26)
    {
      v27 = a2[17];
      v28 = a1[17];
      a1[16] = v26;
      a1[17] = v27;
      swift_retain(v27);
      swift_release(v28);
      goto LABEL_29;
    }
    swift_release(a1[17]);
  }
  else if (v26)
  {
    v29 = a2[17];
    a1[16] = v26;
    a1[17] = v29;
    swift_retain(v29);
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
LABEL_29:
  v30 = a2[18];
  if (a1[18])
  {
    if (v30)
    {
      v31 = a2[19];
      v32 = a1[19];
      a1[18] = v30;
      a1[19] = v31;
      swift_retain(v31);
      swift_release(v32);
      goto LABEL_36;
    }
    swift_release(a1[19]);
  }
  else if (v30)
  {
    v33 = a2[19];
    a1[18] = v30;
    a1[19] = v33;
    swift_retain(v33);
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
LABEL_36:
  v34 = a2[20];
  if (a1[20])
  {
    if (v34)
    {
      v35 = a2[21];
      v36 = a1[21];
      a1[20] = v34;
      a1[21] = v35;
      swift_retain(v35);
      swift_release(v36);
      goto LABEL_43;
    }
    swift_release(a1[21]);
  }
  else if (v34)
  {
    v37 = a2[21];
    a1[20] = v34;
    a1[21] = v37;
    swift_retain(v37);
    goto LABEL_43;
  }
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
LABEL_43:
  v38 = a2[22];
  if (!a1[22])
  {
    if (v38)
    {
      v41 = a2[23];
      a1[22] = v38;
      a1[23] = v41;
      swift_retain(v41);
      return a1;
    }
LABEL_49:
    *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
    return a1;
  }
  if (!v38)
  {
    swift_release(a1[23]);
    goto LABEL_49;
  }
  v39 = a2[23];
  v40 = a1[23];
  a1[22] = v38;
  a1[23] = v39;
  swift_retain(v39);
  swift_release(v40);
  return a1;
}

__n128 initializeWithTake for Environment(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for Environment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 88);
      v13 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = v12;
      swift_release(v13);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 88));
  }
  else if (v11)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v14;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_8:
  v15 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 104);
      v17 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v16;
      swift_release(v17);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 104));
  }
  else if (v15)
  {
    v18 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v15;
    *(_QWORD *)(a1 + 104) = v18;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_15:
  v19 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 120);
      v21 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = v19;
      *(_QWORD *)(a1 + 120) = v20;
      swift_release(v21);
      goto LABEL_22;
    }
    swift_release(*(_QWORD *)(a1 + 120));
  }
  else if (v19)
  {
    v22 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v22;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_22:
  v23 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v23)
    {
      v24 = *(_QWORD *)(a2 + 136);
      v25 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 128) = v23;
      *(_QWORD *)(a1 + 136) = v24;
      swift_release(v25);
      goto LABEL_29;
    }
    swift_release(*(_QWORD *)(a1 + 136));
  }
  else if (v23)
  {
    v26 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v23;
    *(_QWORD *)(a1 + 136) = v26;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_29:
  v27 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v27)
    {
      v28 = *(_QWORD *)(a2 + 152);
      v29 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = v27;
      *(_QWORD *)(a1 + 152) = v28;
      swift_release(v29);
      goto LABEL_36;
    }
    swift_release(*(_QWORD *)(a1 + 152));
  }
  else if (v27)
  {
    v30 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v27;
    *(_QWORD *)(a1 + 152) = v30;
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
LABEL_36:
  v31 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v31)
    {
      v32 = *(_QWORD *)(a2 + 168);
      v33 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 160) = v31;
      *(_QWORD *)(a1 + 168) = v32;
      swift_release(v33);
      goto LABEL_43;
    }
    swift_release(*(_QWORD *)(a1 + 168));
  }
  else if (v31)
  {
    v34 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v31;
    *(_QWORD *)(a1 + 168) = v34;
    goto LABEL_43;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_43:
  v35 = *(_QWORD *)(a2 + 176);
  if (!*(_QWORD *)(a1 + 176))
  {
    if (v35)
    {
      v38 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v35;
      *(_QWORD *)(a1 + 184) = v38;
      return a1;
    }
LABEL_49:
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    return a1;
  }
  if (!v35)
  {
    swift_release(*(_QWORD *)(a1 + 184));
    goto LABEL_49;
  }
  v36 = *(_QWORD *)(a2 + 184);
  v37 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v35;
  *(_QWORD *)(a1 + 184) = v36;
  swift_release(v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Environment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

uint64_t sub_10013AA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100635F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013AA58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100635F10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013AA98(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Environment(a2, a1);
  return a2;
}

uint64_t sub_10013AACC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10045C2B4(a1);
}

uint64_t sub_10013AAE4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004FE24C(a1);
}

uint64_t sub_10013AAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  char *v64;
  int v65;
  os_log_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v73 = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  __chkstk_darwin(v7);
  v79 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for MobileDocumentReaderRequest.Document(0);
  __chkstk_darwin(v69);
  v68 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MobileDocumentReaderRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v72 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v63 - v14;
  v80 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for DIPSignpost(0);
  v76 = *(_QWORD *)(v78 - 8);
  v21 = __chkstk_darwin(v78);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.MobileDocumentReader.buildRequest.getter(v21);
  v75 = v23;
  v24 = v17;
  v25 = DIPSignpost.init(_:)(v20);
  defaultLogger()(v25);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v77 = a1;
  v26(v15, a1, v10);
  sub_100028034(a2, a3);
  v81 = a2;
  v27 = sub_100028034(a2, a3);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    v65 = v29;
    v66 = v28;
    v67 = v26;
    v64 = v24;
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(32, -1);
    v85 = v31;
    *(_DWORD *)v30 = 136315394;
    v32 = v68;
    MobileDocumentReaderRequest.document.getter(v31);
    v33 = String.init<A>(describing:)(v32, v69);
    v35 = v34;
    v83 = sub_1000E3AC8(v33, v34, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v30 + 4);
    swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    *(_WORD *)(v30 + 12) = 2048;
    v36 = v80;
    v37 = v81;
    v38 = v82;
    if (a3 >> 60 != 15)
      __asm { BR              X10 }
    v83 = -1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v30 + 14);
    sub_100007F78(v37, a3);
    v41 = v66;
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v65, "ISO18013RequestBuilder building mdoc request with %s and logotype icon data %ld bytes", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v64, v36);
    v40 = v79;
    v26 = v67;
  }
  else
  {
    v39 = v81;
    sub_100007F78(v81, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    sub_100007F78(v39, a3);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v24, v80);
    v37 = v39;
    v40 = v79;
  }
  v42 = (uint64_t)v72;
  v43 = v77;
  v26(v72, v77, v10);
  sub_100028034(v37, a3);
  v44 = v74;
  sub_10013B1CC(v42, v37, a3, v73);
  if (v44)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v40, enum case for DIPError.Code.documentReaderCannotBuildRequest(_:), v71);
    v45 = sub_100004828((uint64_t *)&unk_1006325A0);
    v46 = sub_100004828((uint64_t *)&unk_100633440);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(_QWORD *)(v47 + 72);
    v49 = *(unsigned __int8 *)(v47 + 80);
    v50 = (v49 + 32) & ~v49;
    v51 = swift_allocObject(v45, v50 + v48, v49 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_10051FFB0;
    v52 = v51 + v50;
    v53 = (_QWORD *)(v52 + *(int *)(v46 + 48));
    v54 = enum case for DIPError.PropertyKey.documentRequest(_:);
    v55 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v52, v54, v55);
    v53[3] = v10;
    v56 = (char *)sub_100022234(v53);
    v26(v56, v43, v10);
    swift_errorRetain(v44);
    v57 = sub_10011D314(v51);
    v58 = type metadata accessor for DIPError(0);
    v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v58, v59, 0, 0);
    v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010054CFC0, v44, v40, 0, v57, 0xD000000000000070, 0x800000010054CCE0, 0xD00000000000002CLL, 0x800000010054CFF0, 48);
    swift_willThrow(v60);
    swift_errorRelease(v44);
  }
  v61 = v75;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v61, v78);
}

uint64_t sub_10013B1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;

  v113 = a1;
  v114 = a2;
  v100 = a4;
  v5 = sub_100004828(&qword_100635758);
  __chkstk_darwin(v5);
  v97 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MobileDocumentType(0);
  v105 = *(_QWORD *)(v7 - 8);
  v106 = v7;
  __chkstk_darwin(v7);
  v112 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  __chkstk_darwin(v102);
  v101 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100635F60);
  __chkstk_darwin(v10);
  v103 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ISO18013ReaderRequest.DocRequest(0);
  v98 = *(_QWORD *)(v12 - 8);
  v99 = v12;
  __chkstk_darwin(v12);
  v96 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for MobileDocumentReaderRequest.Document(0);
  v108 = *(_QWORD *)(v110 - 8);
  v14 = __chkstk_darwin(v110);
  v104 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v96 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v96 - v18;
  v20 = sub_100004828(&qword_100635DD0);
  __chkstk_darwin(v20);
  v22 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AnyCodable(0);
  v115 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v96 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v96 - v31;
  v117 = &_swiftEmptyDictionarySingleton;
  v33 = static ISO18013ReaderRequestInfoConstant.requestLogotypeIconDataKey.getter(v30);
  v35 = v33;
  v36 = v34;
  v107 = a3;
  if (a3 >> 60 == 15)
  {
    sub_10047F1B8(v33, v34, (uint64_t)v22);
    swift_bridgeObjectRelease(v36);
    v37 = sub_100008030((uint64_t)v22, &qword_100635DD0);
  }
  else
  {
    v38 = a3;
    v39 = v26;
    v40 = v23;
    v41 = v114;
    v42 = v38;
    sub_100022948(v114, v38);
    v43 = v41;
    v23 = v40;
    v26 = v39;
    AnyCodable.init(value:)(v43, v42);
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v29, v32, v23);
    v44 = v117;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v117);
    v116 = v44;
    v117 = (_QWORD *)0x8000000000000000;
    sub_100481B44((uint64_t)v29, v35, v36, isUniquelyReferenced_nonNull_native);
    v46 = v117;
    v117 = v116;
    swift_bridgeObjectRelease(v36);
    v37 = swift_bridgeObjectRelease(v46);
  }
  v47 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter(v37);
  v49 = v48;
  v50 = v113;
  v51 = MobileDocumentReaderRequest.document.getter(v47);
  v52 = MobileDocumentReaderRequest.Document.isDisplayOnly.getter(v51);
  v53 = *(void (**)(char *, uint64_t))(v108 + 8);
  v54 = v19;
  v55 = v110;
  v53(v54, v110);
  AnyCodable.init(value:)(v52 & 1);
  v56 = v29;
  v57 = v55;
  (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v26, v56, v23);
  v58 = v117;
  v59 = swift_isUniquelyReferenced_nonNull_native(v117);
  v116 = v58;
  v117 = (_QWORD *)0x8000000000000000;
  sub_100481B44((uint64_t)v26, v47, v49, v59);
  v60 = v117;
  v117 = v116;
  swift_bridgeObjectRelease(v49);
  v61 = swift_bridgeObjectRelease(v60);
  v62 = v109;
  v63 = MobileDocumentReaderRequest.document.getter(v61);
  v64 = v112;
  MobileDocumentReaderRequest.Document.type.getter(v63);
  v65 = ((uint64_t (*)(char *, uint64_t))v53)(v62, v57);
  v66 = v111;
  v67 = MobileDocumentType.iso18013Identifier.getter(v65);
  if (v66)
  {
    sub_100007F78(v114, v107);
    v69 = type metadata accessor for MobileDocumentReaderRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v50, v69);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v64, v106);
    return swift_bridgeObjectRelease(v117);
  }
  else
  {
    v70 = v67;
    v71 = v68;
    v72 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v64, v106);
    v73 = v104;
    MobileDocumentReaderRequest.document.getter(v72);
    v75 = sub_10013DDA8();
    v53(v73, v57);
    v76 = v101;
    ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)(v70, v71, v75, v117);
    v77 = type metadata accessor for CBOREncoder(0);
    v78 = swift_allocObject(v77, *(unsigned int *)(v77 + 48), *(unsigned __int16 *)(v77 + 52));
    v79 = CBOREncoder.init()(v78);
    v80 = sub_100004790(&qword_100635FA0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest.ItemsRequest);
    v81 = sub_100004790(&qword_100635FA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest.ItemsRequest);
    v82 = v103;
    CBOREncodedCBOR.init(value:tag:encoder:)(v76, 0, v79, v102, v80, v81);
    v83 = v107;
    v84 = v114;
    v85 = type metadata accessor for COSE_Sign1(0);
    v86 = v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v97, 1, 1, v85);
    v87 = v96;
    ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)(v82, v86);
    v88 = sub_100004828((uint64_t *)&unk_100635FB0);
    v89 = v98;
    v90 = *(unsigned __int8 *)(v98 + 80);
    v91 = (v90 + 32) & ~v90;
    v92 = swift_allocObject(v88, v91 + *(_QWORD *)(v98 + 72), v90 | 7);
    *(_OWORD *)(v92 + 16) = xmmword_10051FFB0;
    v93 = v92 + v91;
    v94 = v99;
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v93, v87, v99);
    ISO18013ReaderRequest.init(version:docRequests:)(3157553);
    sub_100007F78(v84, v83);
    v95 = type metadata accessor for MobileDocumentReaderRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v50, v95);
    return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v87, v94);
  }
}

uint64_t sub_10013B8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v5[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Milestone(0);
  v5[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[15] = v9;
  v5[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v5[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[18] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v12);
  v5[20] = swift_task_alloc(v12);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v5[22] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[23] = v15;
  v5[24] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013B9F0, 0, 0);
}

uint64_t sub_10013B9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v19;

  v1 = *(_QWORD *)(v0 + 168);
  static DaemonSignposts.MobileDocumentReader.signRequest.getter();
  v2 = DIPSignpost.init(_:)(v1);
  v3 = defaultLogger()(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ISO18013RequestBuilder signDocumentRequest starting to sign document request", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 80);
  v19 = *(_OWORD *)(v0 + 64);

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v0 + 200) = v11;
  v12 = v11(v7, v8);
  *(_QWORD *)(v0 + 40) = ISO18013ReaderRequest.docRequests.getter(v12);
  v13 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 208) = v13;
  *(_OWORD *)(v13 + 16) = v19;
  *(_QWORD *)(v13 + 32) = v10;
  v14 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 216) = v14;
  v15 = sub_100004828(&qword_100635F50);
  v16 = type metadata accessor for ISO18013ReaderRequest.DocRequest(0);
  v17 = sub_10013C344();
  *v14 = v0;
  v14[1] = sub_10013BB74;
  return Sequence.asyncMap<A>(_:)(&unk_100635F48, v13, v15, v16, v17);
}

uint64_t sub_10013BB74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v4 = v3[27];
  v3[28] = v1;
  swift_task_dealloc(v4);
  v5 = v3[5];
  v6 = v3[26];
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  if (v1)
    v7 = sub_10013BD80;
  else
    v7 = sub_10013BBF4;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10013BBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ISO18013RequestBuilder signDocumentRequest returning successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 200);
  v17 = *(_QWORD *)(v1 + 184);
  v18 = *(_QWORD *)(v1 + 176);
  v19 = *(_QWORD *)(v1 + 168);
  v8 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 128);
  v9 = *(_QWORD *)(v1 + 136);
  v12 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 120);
  v20 = *(_QWORD *)(v1 + 160);
  v21 = *(_QWORD *)(v1 + 104);

  v13 = v7(v8, v9);
  static MobileDocumentReaderMilestone.readRequestSigned.getter(v13);
  Milestone.log()();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  v15 = ISO18013ReaderRequest.version.getter(v14);
  ISO18013ReaderRequest.init(version:docRequests:)(v15);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v6, v18);
  swift_task_dealloc(v6);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10013BD80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000053, 0x800000010054CD60, 76);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013BF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_100004828(&qword_100635758);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for COSE_Sign1(0);
  v5[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[9] = v8;
  v5[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100635F60);
  v5[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[12] = v10;
  v5[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013SessionTranscript(0);
  v5[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[15] = v12;
  v5[16] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ISO18013ReaderAuthentication(0);
  v5[17] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[18] = v14;
  v5[19] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013C01C, 0, 0);
}

uint64_t sub_10013C01C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[11];
  v4 = v0[12];
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[15] + 16))(v1, v0[4], v0[14]);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v5);
  v6 = CBOREncodedCBOR.dataValue.getter(v3);
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  ISO18013ReaderAuthentication.init(sessionTranscript:itemsRequestBytes:)(v1, v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_100635F6C);
  v0[20] = v9;
  *v9 = v0;
  v9[1] = sub_10013C0E8;
  return sub_10013C390(v0[10], v0[19], v0[5], v0[6]);
}

uint64_t sub_10013C0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10013C244;
  else
    v3 = sub_10013C14C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10013C14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v7);
  ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  swift_task_dealloc(v1);
  swift_task_dealloc(v10);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013C244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(v1, *(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013C2C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100635F44);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100007EE8;
  return sub_10013BF14(a1, a2, v6, v7, v8);
}

unint64_t sub_10013C344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100635F58;
  if (!qword_100635F58)
  {
    v1 = sub_100013E24(&qword_100635F50);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100635F58);
  }
  return result;
}

uint64_t sub_10013C390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[18] = v6;
  v4[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100635758);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v4[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[22] = v9;
  v4[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SHA256(0);
  v4[24] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[25] = v11;
  v4[26] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA256Digest(0);
  v4[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[28] = v13;
  v4[29] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004828(&qword_100635F70);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RFC8152SigStructure(0);
  v4[31] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[32] = v16;
  v4[33] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_10062FC58);
  v4[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828(&qword_100635F78);
  v4[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v4[36] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[37] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[38] = swift_task_alloc(v21);
  v4[39] = swift_task_alloc(v21);
  return swift_task_switch(sub_10013C588, 0, 0);
}

void sub_10013C588()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);

  v1 = v0[15];
  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for MobileDocumentReaderAuthenticationSession(0) + 28));
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v96 = v2;
    else
      v96 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v96);
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
  }
  if (!v3)
  {
    v18 = v0[18];
    v17 = v0[19];
    v19 = v0[17];
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v19);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v21, v22, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x800000010054CF60, 0, v17, 0, v20, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 93);
    swift_willThrow(v24);
    goto LABEL_14;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
  }
  else
  {
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      JUMPOUT(0x10013D380);
    }
    v4 = *(id *)(v2 + 32);
  }
  v5 = v4;
  v0[40] = v4;
  swift_bridgeObjectRelease(v2);
  type metadata accessor for SecCertificate(0);
  v7 = Array<A>.derRepresentation()(v2, v6);
  v0[41] = v7;
  if (!v7)
  {
    v25 = v0[19];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[18] + 104))(v25, enum case for DIPError.Code.internalError(_:), v0[17]);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v23 = swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x800000010054CDC0, 0, v25, 0, v26, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 97);
    swift_willThrow(v29);

    goto LABEL_14;
  }
  v8 = v7;
  v9 = v0[34];
  SecCertificateRef.publicKeyAlgorithm()();
  v10 = type metadata accessor for PublicKeyAlgorithm(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  v13 = v0[36];
  v14 = v0[37];
  v15 = v0[34];
  v16 = v0[35];
  if (v12 == 1)
  {
    sub_100008030(v0[34], &qword_10062FC58);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, 1, 1, v13);
  }
  else
  {
    sub_10013DB90(v0[35]);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) != 1)
    {
      v48 = v0[38];
      v49 = v0[36];
      v50 = v0[37];
      (*(void (**)(_QWORD, _QWORD, uint64_t))(v50 + 32))(v0[39], v0[35], v49);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v48, enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:), v49);
      v51 = sub_100004790(&qword_100635F80, (uint64_t (*)(uint64_t))&type metadata accessor for COSE_Sign1.AlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for COSE_Sign1.AlgorithmIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter(v49, v51);
      dispatch thunk of RawRepresentable.rawValue.getter(v49, v51);
      v53 = v0[11];
      v52 = v0[12];
      v54 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
      v0[42] = v54;
      v55 = v54(v48, v49);
      v104 = (void (*)(uint64_t, uint64_t))v54;
      if (v52 == v53)
      {
        v56 = ((uint64_t (*)(uint64_t))ISO18013ReaderAuthentication.dataValue.getter)(v55);
        v0[43] = v56;
        v0[44] = v57;
        v58 = v0[39];
        if (v57 >> 60 != 15)
        {
          v82 = v56;
          v83 = v57;
          v84 = v0[30];
          v100 = v0[33];
          v102 = v0[31];
          v85 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
          sub_100022948(v82, v83);
          ((void (*)(uint64_t, uint64_t, unint64_t))RFC8152SigStructure.init(algorithm:payload:))(v85, v82, v83);
          v86 = type metadata accessor for CBOREncoder(0);
          v87 = swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
          v0[45] = CBOREncoder.init()(v87);
          v88 = enum case for ISO18013PresentmentType.physical(_:);
          v89 = type metadata accessor for ISO18013PresentmentType(0);
          v90 = *(_QWORD *)(v89 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 104))(v84, v88, v89);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v84, 0, 1, v89);
          CBOREncoder.presentmentType.setter(v84);
          v91 = sub_100004790(&qword_100635F88, (uint64_t (*)(uint64_t))&type metadata accessor for RFC8152SigStructure, (uint64_t)&protocol conformance descriptor for RFC8152SigStructure);
          v0[46] = dispatch thunk of CBOREncoder.encode<A>(_:)(v100, v102, v91);
          v0[47] = v92;
          v93 = v92;
          v94 = v0[24];
          v95 = sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
          ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.init())(v94, v95);
          __asm { BR              X10 }
        }
        v59 = v0[36];
        v61 = v0[18];
        v60 = v0[19];
        v62 = v0[17];
        swift_bridgeObjectRelease(v8);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v61 + 104))(v60, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v62);
        v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v64 = type metadata accessor for DIPError(0);
        v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v23 = swift_allocError(v64, v65, 0, 0);
        v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x800000010054CEE0, 0, v60, 0, v63, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 110);
        swift_willThrow(v66);

        v67 = v58;
        v68 = v59;
      }
      else
      {
        v69 = v0[39];
        v70 = v0[36];
        v72 = v0[18];
        v71 = v0[19];
        v73 = v0[17];
        swift_bridgeObjectRelease(v8);
        _StringGuts.grow(_:)(74);
        v0[9] = 0;
        v0[10] = 0xE000000000000000;
        v74._countAndFlagsBits = 0xD000000000000014;
        v74._object = (void *)0x800000010054CE80;
        String.append(_:)(v74);
        _print_unlocked<A, B>(_:_:)(v69, v0 + 9, v70, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v75._countAndFlagsBits = 0xD000000000000034;
        v75._object = (void *)0x800000010054CEA0;
        String.append(_:)(v75);
        v76 = v0[9];
        v77 = v0[10];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v71, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v73);
        v78 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v79 = type metadata accessor for DIPError(0);
        v80 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v23 = swift_allocError(v79, v80, 0, 0);
        v81 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v76, v77, 0, v71, 0, v78, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 106);
        swift_willThrow(v81);

        v68 = v70;
        v67 = v69;
      }
      v104(v67, v68);
LABEL_14:
      v38 = v0[38];
      v39 = v0[39];
      v41 = v0[34];
      v40 = v0[35];
      v42 = v0[33];
      v97 = v0[30];
      v98 = v0[29];
      v99 = v0[26];
      v101 = v0[23];
      v43 = v0[19];
      v103 = v0[20];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[18] + 104))(v43, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v0[17]);
      swift_errorRetain(v23);
      v44 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v45 = type metadata accessor for DIPError(0);
      v46 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v45, v46, 0, 0);
      v47 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v23, v43, 0, v44, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 135);
      swift_willThrow(v47);
      swift_errorRelease(v23);
      swift_task_dealloc(v39);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v43);
      __asm { BR              X0 }
    }
  }
  v30 = v0[35];
  v32 = v0[18];
  v31 = v0[19];
  v33 = v0[17];
  swift_bridgeObjectRelease(v8);
  sub_100008030(v30, &qword_100635F78);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), v33);
  v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v35 = type metadata accessor for DIPError(0);
  v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v23 = swift_allocError(v35, v36, 0, 0);
  v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054CE40, 0, v31, 0, v34, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 101);
  swift_willThrow(v37);

  goto LABEL_14;
}

uint64_t sub_10013D398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 400);
  v4[51] = a1;
  v4[52] = a2;
  v4[53] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_bridgeObjectRelease(v4[41]);
    v6 = sub_10013D948;
  }
  else
  {
    v6 = sub_10013D45C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10013D45C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v2 = *(_QWORD *)(v0 + 408);
  v1 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter();
  sub_100022948(v2, v1);
  COSE_Sign1.init(algorithmIdentifier:keyIdentifier:initializationVector:partialInitializationVector:payload:signature:x509Chain:includeCBORTag:)(v5, 0, 0xF000000000000000, 0, 0xF000000000000000, 0, 0xF000000000000000, 0, 0xF000000000000000, v2, v1, v3, 0);
  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  v58 = *(_QWORD *)(v0 + 408);
  v60 = *(_QWORD *)(v0 + 416);
  v47 = *(_QWORD *)(v0 + 368);
  v48 = *(_QWORD *)(v0 + 376);
  v50 = *(_QWORD *)(v0 + 360);
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v54 = *(_QWORD *)(v0 + 344);
  v56 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 312);
  v52 = *(void **)(v0 + 320);
  if (v8 == 1)
  {
    v45 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 256);
    v39 = *(_QWORD *)(v0 + 248);
    v41 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 392);
    v13 = *(_QWORD *)(v0 + 384);
    sub_100008030(*(_QWORD *)(v0 + 160), &qword_100635758);
    v43 = enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:);
    (*(void (**)(uint64_t))(v12 + 104))(v11);
    v14 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v15 = swift_allocError(v35, v33, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054CF20, 0, v11, 0, v14, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 130);
    swift_willThrow(v16);
    sub_100007F8C(v13, v30);
    sub_100007F8C(v47, v48);
    swift_release(v50);

    sub_100007F8C(v58, v60);
    sub_100007F78(v54, v56);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v41, v39);
    v9(v10, v45);
    v17 = *(_QWORD *)(v0 + 304);
    v18 = *(_QWORD *)(v0 + 312);
    v19 = *(_QWORD *)(v0 + 280);
    v49 = *(_QWORD *)(v0 + 272);
    v51 = *(_QWORD *)(v0 + 264);
    v53 = *(_QWORD *)(v0 + 240);
    v55 = *(_QWORD *)(v0 + 232);
    v57 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 152);
    v59 = *(_QWORD *)(v0 + 184);
    v61 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v20, v43, *(_QWORD *)(v0 + 136));
    swift_errorRetain(v15);
    v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v35, v33, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v15, v20, 0, v21, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 135);
    swift_willThrow(v22);
    swift_errorRelease(v15);
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v20);
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 288);
    v32 = *(_QWORD *)(v0 + 304);
    v23 = *(_QWORD *)(v0 + 264);
    v34 = *(_QWORD *)(v0 + 280);
    v36 = *(_QWORD *)(v0 + 272);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v26 = *(_QWORD *)(v0 + 248);
    v25 = *(_QWORD *)(v0 + 256);
    v38 = *(_QWORD *)(v0 + 240);
    v40 = *(_QWORD *)(v0 + 232);
    v42 = *(_QWORD *)(v0 + 208);
    v44 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 152);
    v28 = *(_QWORD *)(v0 + 104);
    sub_100007F8C(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    sub_100007F8C(v47, v48);
    swift_release(v50);

    sub_100007F8C(v58, v60);
    sub_100007F78(v54, v56);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
    v24(v10, v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v28, v27, v6);
    swift_task_dealloc(v10);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v23);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v27);
    swift_task_dealloc(v46);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013D948()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(void **)(v0 + 320);
  v26 = *(_QWORD *)(v0 + 312);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v24 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 248);
  sub_100007F8C(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
  sub_100007F8C(v1, v2);
  swift_release(v3);

  sub_100007F78(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  v28(v26, v24);
  v10 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 264);
  v22 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v16, enum case for DIPError.Code.documentReaderCannotSignReaderAuthentication(_:), *(_QWORD *)(v0 + 136));
  swift_errorRetain(v10);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v18, v19, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v16, 0, v17, 0xD000000000000070, 0x800000010054CCE0, 0xD000000000000046, 0x800000010054CDF0, 135);
  swift_willThrow(v20);
  swift_errorRelease(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013DB90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for PublicKeyAlgorithm(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for PublicKeyAlgorithm.EC_P256(_:))
  {
    if (v8 == enum case for PublicKeyAlgorithm.EC_P384(_:))
    {
      v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES384(_:);
      goto LABEL_7;
    }
    if (v8 == enum case for PublicKeyAlgorithm.EC_P521(_:))
    {
      v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES512(_:);
      goto LABEL_7;
    }
    if (v8 != enum case for PublicKeyAlgorithm.ED_25519(_:) && v8 != enum case for PublicKeyAlgorithm.ED_448(_:))
    {
      v15 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  v9 = (unsigned int *)&enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:);
LABEL_7:
  v10 = *v9;
  v11 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t sub_10013DD18()
{
  Swift::String v0;
  Swift::String v1;
  void *object;

  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x800000010054CF80;
  v0._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v0);
  v1 = Data.base16EncodedString()();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_10013DDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t (*v17)@<X0>(unint64_t *@<X8>);
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t (*v68)@<X0>(unint64_t *@<X8>);
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  uint64_t v105;
  _BOOL8 v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  char v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t result;
  char *v116;
  unint64_t (*v117)@<X0>(unint64_t *@<X8>);
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;

  v2 = v1;
  v3 = type metadata accessor for MobileDocumentType(0);
  v124 = *(_QWORD *)(v3 - 8);
  v125 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v116 - v7;
  v9 = type metadata accessor for MobileDocumentElement(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v120 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v130 = (char *)&v116 - v14;
  v126 = v0;
  v15 = MobileDocumentReaderRequest.Document.nonRetainedElements.getter(v13);
  v16 = *(_QWORD *)(v15 + 16);
  v122 = v6;
  v123 = v9;
  v121 = v10;
  v118 = v16;
  if (!v16)
  {
    v65 = swift_bridgeObjectRelease(v15);
    v17 = 0;
    v19 = &_swiftEmptyDictionarySingleton;
    goto LABEL_33;
  }
  v17 = 0;
  v18 = 0;
  v119 = v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v19 = &_swiftEmptyDictionarySingleton;
  v116 = v8;
  v117 = (unint64_t (*)@<X0>(unint64_t *@<X8>))v15;
  while (1)
  {
    if (v18 >= *(_QWORD *)(v15 + 16))
      goto LABEL_76;
    v22 = *(_QWORD *)(v10 + 72);
    v128 = v18;
    v23 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16))(v130, v119 + v22 * v18, v9);
    v24 = MobileDocumentReaderRequest.Document.type.getter(v23);
    v25 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter(v24);
    v26 = sub_10022CAE4((uint64_t)v8, v25 & 1);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v124 + 8))(v8, v125);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v130, v9);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v117);
      goto LABEL_64;
    }
    v27 = v26;
    v129 = 0;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v8, v125);
    v28 = *(_QWORD *)(v27 + 16);
    v127 = v27;
    if (v28)
      break;
LABEL_3:
    v20 = v128 + 1;
    swift_bridgeObjectRelease(v127);
    v10 = v121;
    v9 = v123;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v130, v123);
    v18 = v20;
    v15 = (uint64_t)v117;
    v21 = v20 == v118;
    v2 = v129;
    v6 = v122;
    v8 = v116;
    if (v21)
    {
      v65 = swift_bridgeObjectRelease(v117);
LABEL_33:
      v66 = MobileDocumentReaderRequest.Document.retainedElements.getter(v65);
      v67 = v66;
      v118 = *(_QWORD *)(v66 + 16);
      if (!v118)
      {
        swift_bridgeObjectRelease(v66);
        v68 = 0;
        goto LABEL_66;
      }
      v68 = 0;
      v69 = 0;
      v119 = v66 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v116 = (char *)v66;
      v117 = v17;
      while (1)
      {
        if (v69 >= *(_QWORD *)(v67 + 16))
          goto LABEL_77;
        v71 = *(_QWORD *)(v10 + 72);
        v128 = v69;
        v72 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16))(v120, v119 + v71 * v69, v9);
        v73 = MobileDocumentReaderRequest.Document.type.getter(v72);
        v74 = MobileDocumentReaderRequest.Document.isRawDataTransfer.getter(v73);
        v75 = sub_10022CAE4((uint64_t)v6, v74 & 1);
        if (v2)
          break;
        v76 = v75;
        v129 = 0;
        (*(void (**)(char *, uint64_t))(v124 + 8))(v6, v125);
        v77 = *(char **)(v76 + 16);
        v127 = v76;
        if (v77)
        {
          v78 = (uint64_t *)(v76 + 56);
          do
          {
            v81 = *(v78 - 3);
            v80 = *(v78 - 2);
            v82 = *v78;
            v131 = *(v78 - 1);
            swift_bridgeObjectRetain(v80);
            swift_bridgeObjectRetain(v82);
            sub_10002F034((uint64_t)v68, 0);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
            v134 = v19;
            v132 = v80;
            v85 = sub_1004A8604(v81, v80);
            v86 = v19[2];
            v87 = (v84 & 1) == 0;
            v88 = v86 + v87;
            if (__OFADD__(v86, v87))
              goto LABEL_70;
            v89 = v84;
            if (v19[3] >= v88)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_10012A23C();
            }
            else
            {
              sub_100124E98(v88, isUniquelyReferenced_nonNull_native);
              v90 = sub_1004A8604(v81, v132);
              if ((v89 & 1) != (v91 & 1))
                goto LABEL_78;
              v85 = v90;
            }
            v92 = v134;
            swift_bridgeObjectRelease(0x8000000000000000);
            swift_bridgeObjectRetain(v92);
            if ((v89 & 1) == 0)
            {
              v93 = sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
              v92[(v85 >> 6) + 8] |= 1 << v85;
              v94 = (uint64_t *)(v92[6] + 16 * v85);
              v95 = v132;
              *v94 = v81;
              v94[1] = v95;
              *(_QWORD *)(v92[7] + 8 * v85) = v93;
              v96 = v92[2];
              v47 = __OFADD__(v96, 1);
              v97 = v96 + 1;
              if (v47)
                goto LABEL_74;
              v92[2] = v97;
              swift_bridgeObjectRetain(v95);
            }
            v130 = v77;
            v98 = v92[7];
            v133 = v92;
            swift_bridgeObjectRelease(v92);
            v99 = 8 * v85;
            v100 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v98 + 8 * v85));
            v134 = *(_QWORD **)(v98 + v99);
            v101 = v134;
            *(_QWORD *)(v98 + v99) = 0x8000000000000000;
            v102 = v131;
            v104 = sub_1004A8604(v131, v82);
            v105 = v101[2];
            v106 = (v103 & 1) == 0;
            v107 = v105 + v106;
            if (__OFADD__(v105, v106))
              goto LABEL_71;
            v108 = v103;
            if (v101[3] >= v107)
            {
              if ((v100 & 1) != 0)
              {
                v111 = v134;
                if ((v103 & 1) != 0)
                  goto LABEL_40;
              }
              else
              {
                sub_10012A094();
                v111 = v134;
                if ((v108 & 1) != 0)
                  goto LABEL_40;
              }
            }
            else
            {
              sub_100124B90(v107, v100);
              v109 = sub_1004A8604(v102, v82);
              if ((v108 & 1) != (v110 & 1))
                goto LABEL_78;
              v104 = v109;
              v111 = v134;
              if ((v108 & 1) != 0)
              {
LABEL_40:
                *(_BYTE *)(v111[7] + v104) = 1;
                goto LABEL_41;
              }
            }
            v111[(v104 >> 6) + 8] |= 1 << v104;
            v112 = (uint64_t *)(v111[6] + 16 * v104);
            *v112 = v102;
            v112[1] = v82;
            *(_BYTE *)(v111[7] + v104) = 1;
            v113 = v111[2];
            v47 = __OFADD__(v113, 1);
            v114 = v113 + 1;
            if (v47)
              goto LABEL_75;
            v111[2] = v114;
            swift_bridgeObjectRetain(v82);
LABEL_41:
            v78 += 4;
            v79 = *(_QWORD *)(v98 + v99);
            *(_QWORD *)(v98 + v99) = v111;
            swift_bridgeObjectRelease(v82);
            swift_bridgeObjectRelease(v79);
            swift_bridgeObjectRelease(v132);
            v68 = sub_10013E9FC;
            v77 = v130 - 1;
            v19 = v133;
          }
          while (v130 != (char *)1);
        }
        v70 = v128 + 1;
        swift_bridgeObjectRelease(v127);
        v10 = v121;
        v9 = v123;
        (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v123);
        v69 = v70;
        v17 = v117;
        v21 = v70 == v118;
        v2 = v129;
        v6 = v122;
        v67 = (uint64_t)v116;
        if (v21)
        {
          swift_bridgeObjectRelease(v116);
LABEL_66:
          sub_10002F034((uint64_t)v17, 0);
          sub_10002F034((uint64_t)v68, 0);
          return (uint64_t)v19;
        }
      }
      (*(void (**)(char *, uint64_t))(v124 + 8))(v6, v125);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v120, v9);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v67);
      sub_10002F034((uint64_t)v117, 0);
      v17 = v68;
LABEL_64:
      sub_10002F034((uint64_t)v17, 0);
      return (uint64_t)v19;
    }
  }
  v29 = (uint64_t *)(v27 + 56);
  while (1)
  {
    v131 = v28;
    v32 = *(v29 - 3);
    v31 = *(v29 - 2);
    v33 = *v29;
    v132 = *(v29 - 1);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    sub_10002F034((uint64_t)v17, 0);
    v34 = swift_isUniquelyReferenced_nonNull_native(v19);
    v134 = v19;
    v36 = sub_1004A8604(v32, v31);
    v37 = v19[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      break;
    v40 = v35;
    if (v19[3] >= v39)
    {
      if ((v34 & 1) == 0)
        sub_10012A23C();
    }
    else
    {
      sub_100124E98(v39, v34);
      v41 = sub_1004A8604(v32, v31);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_78;
      v36 = v41;
    }
    v43 = v134;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRetain(v43);
    if ((v40 & 1) == 0)
    {
      v44 = sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
      v43[(v36 >> 6) + 8] |= 1 << v36;
      v45 = (uint64_t *)(v43[6] + 16 * v36);
      *v45 = v32;
      v45[1] = v31;
      *(_QWORD *)(v43[7] + 8 * v36) = v44;
      v46 = v43[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_72;
      v43[2] = v48;
      swift_bridgeObjectRetain(v31);
    }
    v49 = v43[7];
    v133 = v43;
    swift_bridgeObjectRelease(v43);
    v50 = 8 * v36;
    v51 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v49 + 8 * v36));
    v134 = *(_QWORD **)(v49 + 8 * v36);
    v52 = v134;
    *(_QWORD *)(v49 + 8 * v36) = 0x8000000000000000;
    v54 = sub_1004A8604(v132, v33);
    v55 = v52[2];
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
      goto LABEL_69;
    v58 = v53;
    if (v52[3] >= v57)
    {
      if ((v51 & 1) != 0)
      {
        v61 = v134;
        if ((v53 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_10012A094();
        v61 = v134;
        if ((v58 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_100124B90(v57, v51);
      v59 = sub_1004A8604(v132, v33);
      if ((v58 & 1) != (v60 & 1))
        goto LABEL_78;
      v54 = v59;
      v61 = v134;
      if ((v58 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v61[7] + v54) = 0;
        goto LABEL_9;
      }
    }
    v61[(v54 >> 6) + 8] |= 1 << v54;
    v62 = (_QWORD *)(v61[6] + 16 * v54);
    *v62 = v132;
    v62[1] = v33;
    *(_BYTE *)(v61[7] + v54) = 0;
    v63 = v61[2];
    v47 = __OFADD__(v63, 1);
    v64 = v63 + 1;
    if (v47)
      goto LABEL_73;
    v61[2] = v64;
    swift_bridgeObjectRetain(v33);
LABEL_9:
    v29 += 4;
    v30 = *(_QWORD *)(v49 + v50);
    *(_QWORD *)(v49 + v50) = v61;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v31);
    v17 = sub_1000FCC70;
    v28 = v131 - 1;
    v19 = v133;
    if (v131 == 1)
      goto LABEL_3;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10013E6B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10013E774()
{
  return sub_10013DD18();
}

uint64_t sub_10013E77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10013E798, 0, 0);
}

uint64_t sub_10013E798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MobileDocumentReaderAuthenticationSession(0) + 32));
  v3 = *v2;
  *(_QWORD *)(v0 + 48) = *v2;
  v4 = v2[1];
  *(_QWORD *)(v0 + 56) = v4;
  if ((v4 & 0x2000000000000000) != 0)
  {
    v8 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    sub_10013E9E0(v3, v4);
    v9 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
    v10 = SecKeyRef.signSHA256Digest(_:algorithm:)(v8, v7, v9);
    v12 = v11;

    sub_1000FB858(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v12);
  }
  else
  {
    sub_10000806C(*(_QWORD **)(v0 + 40), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24));
    sub_100022948(v3, v4);
    v5 = (_QWORD *)swift_task_alloc(dword_100642A44);
    *(_QWORD *)(v0 + 64) = v5;
    *v5 = v0;
    v5[1] = sub_10013E8F4;
    return sub_100472924(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v3, v4);
  }
}

uint64_t sub_10013E8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 64);
  *(_QWORD *)(*v3 + 72) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_10013E9AC;
  }
  else
  {
    *(_QWORD *)(v6 + 80) = a2;
    *(_QWORD *)(v6 + 88) = a1;
    v8 = sub_10013E96C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10013E96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_1000FB858(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10013E9AC()
{
  uint64_t v0;

  sub_1000FB858(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10013E9E0(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return (id)result;
  else
    return (id)sub_100022948(result, a2);
}

ValueMetadata *type metadata accessor for ISO18013RequestBuilder()
{
  return &type metadata for ISO18013RequestBuilder;
}

void sub_10013EA00(uint64_t a1, _QWORD *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25[4];
  int64_t v26;

  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = 16 * i;
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v17);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v17);
    v22 = *v21;
    v23 = v21[1];
    v25[0] = v19;
    v25[1] = v20;
    v25[2] = v22;
    v25[3] = v23;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    sub_10014C7EC(v25, a2, a3);
    if (v3)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v20);
      return;
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v26)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v26)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v26)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v26)
        goto LABEL_26;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v24 = v11 + 4;
      if (v11 + 4 >= v26)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v15 = *(_QWORD *)(v7 + 8 * v24);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v10 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    ++v24;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10013EBF8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v46 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v48 = a2;
  while (1)
  {
    if (v5)
    {
      v50 = (v5 - 1) & v5;
      v51 = v6;
      v14 = __clz(__rbit64(v5)) | (v6 << 6);
    }
    else
    {
      v15 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_38;
      if (v15 >= v46)
        return swift_release(a1);
      v16 = *(_QWORD *)(v45 + 8 * v15);
      v17 = v6 + 1;
      if (!v16)
      {
        v17 = v6 + 2;
        if (v6 + 2 >= v46)
          return swift_release(a1);
        v16 = *(_QWORD *)(v45 + 8 * v17);
        if (!v16)
        {
          v17 = v6 + 3;
          if (v6 + 3 >= v46)
            return swift_release(a1);
          v16 = *(_QWORD *)(v45 + 8 * v17);
          if (!v16)
          {
            v17 = v6 + 4;
            if (v6 + 4 >= v46)
              return swift_release(a1);
            v16 = *(_QWORD *)(v45 + 8 * v17);
            if (!v16)
            {
              v18 = v6 + 5;
              if (v6 + 5 >= v46)
                return swift_release(a1);
              v16 = *(_QWORD *)(v45 + 8 * v18);
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v17 >= v46)
                    return swift_release(a1);
                  v16 = *(_QWORD *)(v45 + 8 * v17);
                  ++v18;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v17 = v6 + 5;
            }
          }
        }
      }
LABEL_23:
      v50 = (v16 - 1) & v16;
      v51 = v17;
      v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(a1 + 56) + 96 * v14;
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(_QWORD *)(v22 + 24);
    v52 = *(_QWORD *)v22;
    v53 = *(_QWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 40);
    v54 = *(_QWORD *)(v22 + 32);
    v55 = *(_BYTE *)(v22 + 48);
    v26 = *(_QWORD *)(v22 + 64);
    v56 = *(_QWORD *)(v22 + 56);
    v57 = *(_QWORD *)(v22 + 72);
    v58 = *(_BYTE *)(v22 + 88);
    v59 = *(_QWORD *)(v22 + 80);
    swift_bridgeObjectRetain_n(v59, 2);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v27 = *a2;
    swift_bridgeObjectRetain(v21);
    v60 = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    v29 = *a2;
    v61 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v31 = sub_1004A8604(v20, v21);
    v32 = *(_QWORD *)(v29 + 16);
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (*(_QWORD *)(v29 + 24) >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v38 = v61;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10012AE14();
        v38 = v61;
        if ((v35 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10012630C(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_1004A8604(v20, v21);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_40;
      v31 = v36;
      v38 = v61;
      if ((v35 & 1) != 0)
      {
LABEL_4:
        v7 = v38[7] + 96 * v31;
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 24);
        v10 = *(_QWORD *)(v7 + 64);
        v47 = *(_QWORD *)(v7 + 80);
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v47);
        v12 = v59;
        v11 = v60;
        *(_QWORD *)v7 = v52;
        *(_QWORD *)(v7 + 8) = v60;
        *(_QWORD *)(v7 + 16) = v53;
        *(_QWORD *)(v7 + 24) = v24;
        *(_QWORD *)(v7 + 32) = v54;
        *(_QWORD *)(v7 + 40) = v25;
        *(_BYTE *)(v7 + 48) = v55;
        *(_QWORD *)(v7 + 56) = v56;
        *(_QWORD *)(v7 + 64) = v26;
        *(_QWORD *)(v7 + 72) = v57;
        *(_QWORD *)(v7 + 80) = v59;
        *(_BYTE *)(v7 + 88) = v58;
        goto LABEL_5;
      }
    }
    v38[(v31 >> 6) + 8] |= 1 << v31;
    v39 = (uint64_t *)(v38[6] + 16 * v31);
    *v39 = v20;
    v39[1] = v21;
    v40 = v38[7] + 96 * v31;
    v12 = v59;
    v11 = v60;
    *(_QWORD *)v40 = v52;
    *(_QWORD *)(v40 + 8) = v60;
    *(_QWORD *)(v40 + 16) = v53;
    *(_QWORD *)(v40 + 24) = v24;
    *(_QWORD *)(v40 + 32) = v54;
    *(_QWORD *)(v40 + 40) = v25;
    *(_BYTE *)(v40 + 48) = v55;
    *(_QWORD *)(v40 + 56) = v56;
    *(_QWORD *)(v40 + 64) = v26;
    *(_QWORD *)(v40 + 72) = v57;
    *(_QWORD *)(v40 + 80) = v59;
    *(_BYTE *)(v40 + 88) = v58;
    v41 = v38[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_37;
    v38[2] = v43;
    swift_bridgeObjectRetain(v21);
LABEL_5:
    a2 = v48;
    v13 = *v48;
    *v48 = v38;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease(v13);
    v5 = v50;
    v6 = v51;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10013F060(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v43 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v46 = a2;
  while (1)
  {
    if (v5)
    {
      v49 = (v5 - 1) & v5;
      v50 = v6;
      v12 = __clz(__rbit64(v5)) | (v6 << 6);
    }
    else
    {
      v13 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_38;
      if (v13 >= v43)
        return swift_release(a1);
      v14 = *(_QWORD *)(v42 + 8 * v13);
      v15 = v6 + 1;
      if (!v14)
      {
        v15 = v6 + 2;
        if (v6 + 2 >= v43)
          return swift_release(a1);
        v14 = *(_QWORD *)(v42 + 8 * v15);
        if (!v14)
        {
          v15 = v6 + 3;
          if (v6 + 3 >= v43)
            return swift_release(a1);
          v14 = *(_QWORD *)(v42 + 8 * v15);
          if (!v14)
          {
            v15 = v6 + 4;
            if (v6 + 4 >= v43)
              return swift_release(a1);
            v14 = *(_QWORD *)(v42 + 8 * v15);
            if (!v14)
            {
              v16 = v6 + 5;
              if (v6 + 5 >= v43)
                return swift_release(a1);
              v14 = *(_QWORD *)(v42 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  v15 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_39;
                  if (v15 >= v43)
                    return swift_release(a1);
                  v14 = *(_QWORD *)(v42 + 8 * v15);
                  ++v16;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v15 = v6 + 5;
            }
          }
        }
      }
LABEL_23:
      v49 = (v14 - 1) & v14;
      v50 = v15;
      v12 = __clz(__rbit64(v14)) + (v15 << 6);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12 + 8);
    v18 = *(_QWORD *)(a1 + 56) + 96 * v12;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 40);
    v51 = *(_QWORD *)(v18 + 16);
    v52 = *(_QWORD *)(v18 + 32);
    v53 = *(_BYTE *)(v18 + 48);
    v23 = *(_QWORD *)(v18 + 64);
    v54 = *(_QWORD *)(v18 + 56);
    v55 = *(_QWORD *)(v18 + 72);
    v56 = *(_BYTE *)(v18 + 88);
    v57 = *(_QWORD *)(v18 + 80);
    swift_bridgeObjectRetain_n(v57, 2);
    swift_bridgeObjectRetain_n(v20, 2);
    v48 = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v24 = *a2;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    v26 = *a2;
    v58 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v28 = sub_1004A8604(v19, v20);
    v29 = *(_QWORD *)(v26 + 16);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (*(_QWORD *)(v26 + 24) >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v35 = v58;
        if ((v27 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10012AE14();
        v35 = v58;
        if ((v32 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10012630C(v31, isUniquelyReferenced_nonNull_native);
      v33 = sub_1004A8604(v19, v20);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_40;
      v28 = v33;
      v35 = v58;
      if ((v32 & 1) != 0)
      {
LABEL_4:
        v7 = v35[7] + 96 * v28;
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 24);
        v44 = *(_QWORD *)(v7 + 64);
        v45 = *(_QWORD *)(v7 + 80);
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v45);
        *(_QWORD *)v7 = v19;
        *(_QWORD *)(v7 + 8) = v20;
        *(_QWORD *)(v7 + 16) = v51;
        *(_QWORD *)(v7 + 24) = v21;
        *(_QWORD *)(v7 + 32) = v52;
        *(_QWORD *)(v7 + 40) = v22;
        *(_BYTE *)(v7 + 48) = v53;
        *(_QWORD *)(v7 + 56) = v54;
        *(_QWORD *)(v7 + 64) = v23;
        v10 = v57;
        *(_QWORD *)(v7 + 72) = v55;
        *(_QWORD *)(v7 + 80) = v57;
        *(_BYTE *)(v7 + 88) = v56;
        goto LABEL_5;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v36 = (uint64_t *)(v35[6] + 16 * v28);
    *v36 = v19;
    v36[1] = v20;
    v37 = v35[7] + 96 * v28;
    *(_QWORD *)v37 = v19;
    *(_QWORD *)(v37 + 8) = v20;
    *(_QWORD *)(v37 + 16) = v51;
    *(_QWORD *)(v37 + 24) = v21;
    *(_QWORD *)(v37 + 32) = v52;
    *(_QWORD *)(v37 + 40) = v22;
    *(_BYTE *)(v37 + 48) = v53;
    *(_QWORD *)(v37 + 56) = v54;
    *(_QWORD *)(v37 + 64) = v23;
    v10 = v57;
    *(_QWORD *)(v37 + 72) = v55;
    *(_QWORD *)(v37 + 80) = v57;
    *(_BYTE *)(v37 + 88) = v56;
    v38 = v35[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_37;
    v35[2] = v40;
    swift_bridgeObjectRetain(v20);
LABEL_5:
    a2 = v46;
    v11 = *v46;
    *v46 = v35;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease(v11);
    v5 = v49;
    v6 = v50;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10013F4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[42];
  uint64_t v37;
  uint64_t v38;

  v36[32] = a5;
  v38 = a6;
  v36[40] = a1;
  v36[41] = a2;
  v36[22] = a7;
  v9 = type metadata accessor for KDFParams(0);
  __chkstk_darwin(v9);
  v36[21] = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v36[17] = *(_QWORD *)(v11 - 8);
  v36[18] = v11;
  __chkstk_darwin(v11);
  v36[19] = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EncryptionParams(0);
  v36[24] = *(_QWORD *)(v13 - 8);
  v36[25] = v13;
  v14 = __chkstk_darwin(v13);
  v36[20] = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v36[23] = (char *)v36 - v16;
  v17 = type metadata accessor for Logger(0);
  v36[27] = *(_QWORD *)(v17 - 8);
  v36[28] = v17;
  __chkstk_darwin(v17);
  v36[29] = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ECIESOption(0);
  v19 = __chkstk_darwin(v37);
  v36[36] = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v36[37] = (char *)v36 - v22;
  v23 = __chkstk_darwin(v21);
  __chkstk_darwin(v23);
  v24 = type metadata accessor for DIPError.Code(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v36[30] = (char *)v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)v36 - v28;
  v36[16] = sub_100004828(&qword_100636480);
  Data.init(base64Encoded:options:)(a3, a4, 0);
  if (v30 >> 60 != 15)
  {
    v36[38] = v29;
    v36[39] = v25;
    v36[35] = v24;
    __asm { BR              X10 }
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v29, enum case for DIPError.Code.internalError(_:), v24);
  v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v32 = type metadata accessor for DIPError(0);
  v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v32, v33, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054D750, 0, v29, 0, v31, 0xD000000000000053, 0x8000000100548260, 0xD000000000000037, 0x800000010054D790, 135);
  return swift_willThrow(v34);
}

void sub_10014081C()
{
  uint64_t v0;
  int v1;
  void (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Class isa;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  Class v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Class v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (BYTE6(*(_QWORD *)(v0 + 256)) < 0x42uLL)
  {
    v7 = *(_QWORD *)(v0 + 304);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 16))(v7, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 280));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054D9C0, 0, v7, 0, v8, 0xD000000000000053, 0x8000000100548260, 0xD000000000000037, 0x800000010054D790, 201);
    swift_willThrow(v11);

    v12 = *(void **)(v0 + 288);
    sub_100007F8C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
    sub_100007F78(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
    sub_100007F8C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 296));
    sub_100007F8C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
    sub_100007F8C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
    sub_100007F8C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    sub_100007F8C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 64));
    sub_100007F8C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
    sub_100007F78(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));

    goto LABEL_18;
  }
  *(_QWORD *)(v0 + 224) = Data.subdata(in:)(0, 65, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  *(_QWORD *)(v0 + 232) = v4;
  if (v1)
  {
    if (v1 == 1)
    {
      v5 = *(_QWORD *)(v0 + 248);
      if (!__OFSUB__(HIDWORD(v5), (_DWORD)v5))
      {
        v6 = HIDWORD(v5) - (int)v5;
        goto LABEL_9;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      JUMPOUT(0x100141200);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 16);
    v13 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 24);
    v6 = v13 - v14;
    if (__OFSUB__(v13, v14))
      goto LABEL_21;
  }
  else
  {
    v6 = BYTE6(*(_QWORD *)(v0 + 256));
  }
LABEL_9:
  if (v6 < 65)
  {
    __break(1u);
    JUMPOUT(0x10014124CLL);
  }
  v15 = Data.subdata(in:)(65, v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  v17 = v16;
  v18 = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(v0 + 24) = v18._countAndFlagsBits;
  sub_100007F8C(v15, v17);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v20 = (id)DigestSha256();

  if (v20)
  {
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = Data.base64EncodedString(options:)(0);
    *(_QWORD *)(v0 + 16) = v24._countAndFlagsBits;
    *(_QWORD *)(v0 + 216) = v24._object;
    sub_100007F8C(v21, v23);
    v25 = Data._bridgeToObjectiveC()().super.isa;
    v26 = (id)DigestSha256();

    if (v26)
    {
      v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v30 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v0 + 8) = v30._countAndFlagsBits;
      sub_100007F8C(v27, v29);
      v31 = Data._bridgeToObjectiveC()().super.isa;
      v32 = (id)DigestSha256();

      if (v32)
      {
        v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;

        v36 = Data.base64EncodedString(options:)(0);
        sub_100007F8C(v33, v35);
        v37 = *(_QWORD *)(v0 + 152);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104))(v37, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), *(_QWORD *)(v0 + 144));
        v38 = Data.base64EncodedString(options:)(0);
        v39 = *(_QWORD *)(v0 + 168);
        KDFParams.init(senderSigningKeyFingerprint:recipientSigningKeyFingerprint:conversationToken:sharedIdentifierNames:)(v36._countAndFlagsBits, v36._object, *(_QWORD *)(v0 + 8), v30._object, 0, 0, 0);
        v40 = *(_QWORD *)(v0 + 184);
        EncryptionParams.init(alg:sender:recipientFingerprint:kdfParams:)(v37, v38._countAndFlagsBits, v38._object, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 216), v39);
        v42 = *(_QWORD *)(v0 + 192);
        v41 = *(_QWORD *)(v0 + 200);
        v43 = *(_QWORD *)(v0 + 160);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v43, v40, v41);
        v44 = sub_100182850();
        v45 = sub_1001828D4();
        EncryptedDataContainer.init(type:data:params:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), v18._object, v43, *(_QWORD *)(v0 + 128), v44, v45);

        v46 = *(void **)(v0 + 288);
        sub_100007F8C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
        sub_100007F78(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
        sub_100007F8C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 296));
        sub_100007F8C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
        sub_100007F8C(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
        sub_100007F8C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
        sub_100007F8C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
        sub_100007F8C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 64));
        sub_100007F8C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
        sub_100007F78(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));

        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 280));
        sub_100007F8C(*(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 152));
        sub_100007F8C(*(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 136));
        sub_100007F8C(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 104));
        JUMPOUT(0x10013F978);
      }
      swift_bridgeObjectRelease(v30._object);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
      swift_bridgeObjectRelease(v18._object);
      v56 = *(_QWORD *)(v0 + 304);
      v2(v56, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 280));
      v57 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v58 = type metadata accessor for DIPError(0);
      v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v58, v59, 0, 0);
      v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010054DA40, 0, v56, 0, v57, 0xD000000000000053, 0x8000000100548260, 0xD000000000000037, 0x800000010054D790, 213);
      goto LABEL_17;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
    swift_bridgeObjectRelease(v18._object);
    v47 = *(_QWORD *)(v0 + 304);
    v2(v47, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 280));
    v48 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v52 = type metadata accessor for DIPError(0);
    v53 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v52, v53, 0, 0);
    v51 = 210;
  }
  else
  {
    swift_bridgeObjectRelease(v18._object);
    v47 = *(_QWORD *)(v0 + 304);
    v2(v47, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 280));
    v48 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v49 = type metadata accessor for DIPError(0);
    v50 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v49, v50, 0, 0);
    v51 = 207;
  }
  v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010054DA00, 0, v47, 0, v48, 0xD000000000000053, 0x8000000100548260, 0xD000000000000037, 0x800000010054D790, v51);
LABEL_17:
  swift_willThrow(v54);

  v55 = *(void **)(v0 + 288);
  sub_100007F8C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
  sub_100007F78(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
  sub_100007F8C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 296));
  sub_100007F8C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
  sub_100007F8C(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_100007F8C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_100007F8C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_100007F8C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 64));
  sub_100007F8C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
  sub_100007F78(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));

LABEL_18:
  JUMPOUT(0x100140FA0);
}

void sub_1001408D4()
{
  uint64_t v0;
  int v1;
  void (*v2)(_QWORD, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Class isa;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  Class v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  Class v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *(_QWORD *)(v0 + 248);
  if (!__OFSUB__(HIDWORD(v4), (_DWORD)v4))
  {
    if (HIDWORD(v4) - (int)v4 >= 66)
    {
      *(_QWORD *)(v0 + 224) = Data.subdata(in:)(0, 65, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
      *(_QWORD *)(v0 + 232) = v5;
      if (v1)
      {
        if (v1 == 1)
        {
          v6 = *(_QWORD *)(v0 + 248);
          if (__OFSUB__(HIDWORD(v6), (_DWORD)v6))
            JUMPOUT(0x1001411F8);
          v7 = HIDWORD(v6) - (int)v6;
        }
        else
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 16);
          v14 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 24);
          v7 = v14 - v15;
          if (__OFSUB__(v14, v15))
            JUMPOUT(0x1001411FCLL);
        }
      }
      else
      {
        v7 = BYTE6(*(_QWORD *)(v0 + 256));
      }
      if (v7 >= 65)
      {
        v16 = Data.subdata(in:)(65, v7, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
        v18 = v17;
        v19 = Data.base64EncodedString(options:)(0);
        *(_QWORD *)(v0 + 24) = v19._countAndFlagsBits;
        sub_100007F8C(v16, v18);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v21 = (id)DigestSha256();

        if (v21)
        {
          v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v24 = v23;

          v25 = Data.base64EncodedString(options:)(0);
          *(_QWORD *)(v0 + 16) = v25._countAndFlagsBits;
          *(_QWORD *)(v0 + 216) = v25._object;
          sub_100007F8C(v22, v24);
          v26 = Data._bridgeToObjectiveC()().super.isa;
          v27 = (id)DigestSha256();

          if (v27)
          {
            v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
            v30 = v29;

            v31 = Data.base64EncodedString(options:)(0);
            *(_QWORD *)(v0 + 8) = v31._countAndFlagsBits;
            sub_100007F8C(v28, v30);
            v32 = Data._bridgeToObjectiveC()().super.isa;
            v33 = (id)DigestSha256();

            if (v33)
            {
              v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
              v36 = v35;

              v37 = Data.base64EncodedString(options:)(0);
              sub_100007F8C(v34, v36);
              v38 = *(_QWORD *)(v0 + 152);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 104))(v38, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), *(_QWORD *)(v0 + 144));
              v39 = Data.base64EncodedString(options:)(0);
              v40 = *(_QWORD *)(v0 + 168);
              KDFParams.init(senderSigningKeyFingerprint:recipientSigningKeyFingerprint:conversationToken:sharedIdentifierNames:)(v37._countAndFlagsBits, v37._object, *(_QWORD *)(v0 + 8), v31._object, 0, 0, 0);
              v41 = *(_QWORD *)(v0 + 184);
              EncryptionParams.init(alg:sender:recipientFingerprint:kdfParams:)(v38, v39._countAndFlagsBits, v39._object, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 216), v40);
              v43 = *(_QWORD *)(v0 + 192);
              v42 = *(_QWORD *)(v0 + 200);
              v44 = *(_QWORD *)(v0 + 160);
              v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v44, v41, v42);
              v46 = sub_100182850(v45);
              v47 = sub_1001828D4();
              EncryptedDataContainer.init(type:data:params:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), v19._object, v44, *(_QWORD *)(v0 + 128), v46, v47);

              v48 = *(void **)(v0 + 288);
              sub_100007F8C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
              sub_100007F78(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
              sub_100007F8C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 296));
              sub_100007F8C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
              sub_100007F8C(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
              sub_100007F8C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
              sub_100007F8C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
              sub_100007F8C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 64));
              sub_100007F8C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
              sub_100007F78(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));

              (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 280));
              sub_100007F8C(*(_QWORD *)(v3 - 160), *(_QWORD *)(v3 - 152));
              sub_100007F8C(*(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 136));
              sub_100007F8C(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 104));
              JUMPOUT(0x10013F978);
            }
            JUMPOUT(0x100140FB8);
          }
          JUMPOUT(0x100140E28);
        }
        swift_bridgeObjectRelease(v19._object);
        v2(*(_QWORD *)(v0 + 304), enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 280));
        sub_100004544(&_swiftEmptyArrayStorage);
        v49 = type metadata accessor for DIPError(0);
        v50 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v49, v50, 0, 0);
        JUMPOUT(0x100140EC0);
      }
      JUMPOUT(0x100141248);
    }
    v8 = *(_QWORD *)(v0 + 304);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 16))(v8, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 280));
    v9 = sub_100004544(&_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054D9C0, 0, v8, 0, v9, 0xD000000000000053, 0x8000000100548260, 0xD000000000000037, 0x800000010054D790, 201);
    swift_willThrow(v12);

    v13 = *(void **)(v0 + 288);
    sub_100007F8C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
    sub_100007F78(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
    sub_100007F8C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 296));
    sub_100007F8C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96));
    sub_100007F8C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
    sub_100007F8C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    sub_100007F8C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 64));
    sub_100007F8C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
    sub_100007F78(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));

    JUMPOUT(0x100140F9CLL);
  }
  __break(1u);
  JUMPOUT(0x1001411F4);
}

void sub_1001408EC()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 + 248) + 24), *(_QWORD *)(*(_QWORD *)(v0 + 248) + 16)))
  {
    __break(1u);
    JUMPOUT(0x1001411F8);
  }
  JUMPOUT(0x1001408FCLL);
}

uint64_t sub_1001412AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DIPKeyAlgorithm.ECC256(_:);
  v3 = type metadata accessor for DIPKeyAlgorithm(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

unint64_t sub_1001412F0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100170590(*a1);
  *a2 = result;
  return result;
}

void sub_100141318(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_100141324(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[24];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88[8];
  __int128 v89;
  uint64_t v90;

  v81 = a5;
  v90 = a6;
  v80 = a4;
  v82 = a2;
  v79 = a1;
  v76 = *a3;
  v75 = a3[1];
  v74 = a3[2];
  v73 = a3[3];
  v72 = a3[4];
  v71 = a3[5];
  v8 = *((_BYTE *)a3 + 48);
  v70 = a3[7];
  v69 = a3[8];
  v68 = a3[9];
  v67 = a3[10];
  v9 = *((_BYTE *)a3 + 88);
  v10 = sub_100004828(&qword_1006363E8);
  __chkstk_darwin(v10);
  v78 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v6 + 169) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  v16 = v6 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  v17 = sub_100004828((uint64_t *)&unk_100636010);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v77 = v16;
  v66 = v18;
  v18((char *)v16, 1, 1, v17);
  v19 = *((_OWORD *)a3 + 3);
  v84 = *((_OWORD *)a3 + 2);
  v85 = v19;
  v86 = *((_OWORD *)a3 + 4);
  v87 = a3[10];
  sub_1000A1F54((uint64_t)&v86 + 8, (uint64_t)v88, (uint64_t *)&unk_100632610);
  sub_1000A1F54((uint64_t)v88, (uint64_t)&v89, (uint64_t *)&unk_100632610);
  if (*((_QWORD *)&v89 + 1))
  {
    v65 = v9 & 1;
    v64 = v8 & 1;
    v20 = v84;
    *(_OWORD *)(v6 + 40) = v84;
    v21 = sub_100004828(&qword_100640CA0);
    v22 = swift_allocObject(v21, 48, 7);
    v23 = v89;
    *(_OWORD *)(v22 + 16) = xmmword_10051FFB0;
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v6 + 56) = v20;
    *(_QWORD *)(v6 + 72) = v22;
    *(_QWORD *)(v6 + 80) = 0;
    v24 = *(_QWORD *)(v6 + 104);
    v63 = *(_QWORD *)(v6 + 96);
    v26 = *(_QWORD *)(v6 + 112);
    v25 = *(_QWORD *)(v6 + 120);
    v27 = *(_QWORD *)(v6 + 128);
    v62 = *(_QWORD *)(v6 + 136);
    v61 = *(_QWORD *)(v6 + 144);
    v60 = *(_QWORD *)(v6 + 152);
    v59 = *(_OWORD *)(v6 + 160);
    v28 = *(_QWORD *)(v6 + 176);
    v29 = v76;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = v29;
    v30 = v74;
    *(_QWORD *)(v6 + 104) = v75;
    *(_QWORD *)(v6 + 112) = v30;
    v31 = v72;
    *(_QWORD *)(v6 + 120) = v73;
    *(_QWORD *)(v6 + 128) = v31;
    v32 = v64;
    *(_QWORD *)(v6 + 136) = v71;
    *(_QWORD *)(v6 + 144) = v32;
    v33 = v69;
    *(_QWORD *)(v6 + 152) = v70;
    *(_QWORD *)(v6 + 160) = v33;
    v34 = v67;
    *(_QWORD *)(v6 + 168) = v68;
    *(_QWORD *)(v6 + 176) = v34;
    *(_BYTE *)(v6 + 184) = v65;
    swift_bridgeObjectRetain_n(*((_QWORD *)&v20 + 1), 2);
    sub_1000DB7AC((uint64_t)v88);
    sub_100183E44(v63, v24, v26, v25, v27, v62, v61, v60, v59, *((uint64_t *)&v59 + 1), v28);
    v35 = *(_QWORD *)(v6 + 200);
    v36 = v82;
    *(_QWORD *)(v6 + 192) = v79;
    *(_QWORD *)(v6 + 200) = v36;
    swift_bridgeObjectRelease(v35);
    v37 = (uint64_t)v78;
    v66(v78, 1, 1, v17);
    v38 = v77;
    swift_beginAccess(v77, v83, 33, 0);
    sub_100184E1C(v37, v38, &qword_1006363E8);
    swift_endAccess(v83);
    v39 = *(_QWORD *)(v6 + 216);
    *(_QWORD *)(v6 + 208) = 0;
    *(_QWORD *)(v6 + 216) = 0;
    swift_bridgeObjectRelease(v39);
    *(_BYTE *)(v6 + 18) = v80 & 1;
    *(_WORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 19) = 0;
    *(_BYTE *)(v6 + 21) = 0;
    v40 = v90;
    *(_QWORD *)(v6 + 24) = v81;
    *(_QWORD *)(v6 + 32) = v40;
  }
  else
  {
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v90);
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DIPError.Code.unexpectedDaemonState(_:), v12);
    v41 = sub_100004828((uint64_t *)&unk_1006325A0);
    v42 = sub_100004828((uint64_t *)&unk_100633440);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(_QWORD *)(v43 + 72);
    v45 = *(unsigned __int8 *)(v43 + 80);
    v46 = (v45 + 32) & ~v45;
    v47 = swift_allocObject(v41, v46 + v44, v45 | 7);
    *(_OWORD *)(v47 + 16) = xmmword_10051FFB0;
    v48 = v47 + v46;
    v49 = v48 + *(int *)(v42 + 48);
    v50 = enum case for DIPError.PropertyKey.attributeID(_:);
    v51 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v48, v50, v51);
    v52 = v84;
    *(_QWORD *)(v49 + 24) = &type metadata for String;
    *(_OWORD *)v49 = v52;
    swift_bridgeObjectRetain(*((_QWORD *)&v52 + 1));
    sub_100183EA0(a3);
    v53 = sub_10011D314(v47);
    v54 = type metadata accessor for DIPError(0);
    v55 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v54, v55, 0, 0);
    v56 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000042, 0x800000010054E950, 0, v15, 0, v53, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000036, 0x800000010054E9A0, 136);
    swift_willThrow(v56);
    sub_100183E44(*(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), *(_QWORD *)(v6 + 112), *(_QWORD *)(v6 + 120), *(_QWORD *)(v6 + 128), *(_QWORD *)(v6 + 136), *(_QWORD *)(v6 + 144), *(_QWORD *)(v6 + 152), *(_QWORD *)(v6 + 160), *(_QWORD *)(v6 + 168), *(_QWORD *)(v6 + 176));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 200));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 216));
    sub_100008030(v6 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, &qword_1006363E8);
    v57 = type metadata accessor for SubmittedAttributeWrapper(0);
    swift_deallocPartialClassInstance(v6, v57, *(unsigned int *)(*(_QWORD *)v6 + 48), *(unsigned __int16 *)(*(_QWORD *)v6 + 52));
  }
  return v6;
}

uint64_t sub_10014194C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];

  v44 = a8;
  v43 = a7;
  v41 = a4;
  v42 = a6;
  v39 = a10;
  v40 = a5;
  v38 = a9;
  v14 = sub_100004828(&qword_1006363E8);
  __chkstk_darwin(v14);
  v37 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v10 + 169) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  v16 = v10 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  v36 = v10 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  v17 = sub_100004828((uint64_t *)&unk_100636010);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v35(v16, 1, 1, v17);
  *(_QWORD *)(v10 + 40) = a1;
  *(_QWORD *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 56) = a1;
  *(_QWORD *)(v10 + 64) = a2;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 72) = a3;
  v18 = *(_QWORD *)(v10 + 96);
  v19 = *(_QWORD *)(v10 + 112);
  v33 = *(_QWORD *)(v10 + 104);
  v34 = v18;
  v20 = *(_QWORD *)(v10 + 120);
  v21 = *(_QWORD *)(v10 + 128);
  v23 = *(_QWORD *)(v10 + 136);
  v22 = *(_QWORD *)(v10 + 144);
  v32 = *(_QWORD *)(v10 + 152);
  v31 = *(_OWORD *)(v10 + 160);
  v24 = *(_QWORD *)(v10 + 176);
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 169) = 0u;
  swift_bridgeObjectRetain(a2);
  sub_100183E44(v34, v33, v19, v20, v21, v23, v22, v32, v31, *((uint64_t *)&v31 + 1), v24);
  v25 = *(_QWORD *)(v10 + 200);
  *(_QWORD *)(v10 + 192) = 0;
  *(_QWORD *)(v10 + 200) = 0;
  swift_bridgeObjectRelease(v25);
  v26 = (uint64_t)v37;
  v35((uint64_t)v37, 1, 1, v17);
  v27 = v36;
  swift_beginAccess(v36, v45, 33, 0);
  sub_100184E1C(v26, v27, &qword_1006363E8);
  swift_endAccess(v45);
  v28 = *(_QWORD *)(v10 + 216);
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(v10 + 17) = 1;
  *(_BYTE *)(v10 + 18) = v40;
  *(_BYTE *)(v10 + 16) = v41;
  *(_BYTE *)(v10 + 19) = v38;
  *(_BYTE *)(v10 + 20) = v39;
  *(_BYTE *)(v10 + 21) = v42;
  v29 = v44;
  *(_QWORD *)(v10 + 24) = v43;
  *(_QWORD *)(v10 + 32) = v29;
  return v10;
}

uint64_t sub_100141B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];

  v36 = a6;
  v37 = a7;
  v39 = a4;
  v40 = a5;
  v38 = a3;
  v10 = sub_100004828(&qword_1006363E8);
  __chkstk_darwin(v10);
  v35 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 169) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  v12 = v7 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  v34 = v7 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
  v13 = sub_100004828((uint64_t *)&unk_100636010);
  v32 = *(_QWORD *)(v13 - 8);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v33(v12, 1, 1, v13);
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a1;
  *(_QWORD *)(v7 + 64) = a2;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 72) = _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(v7 + 96);
  v15 = *(_QWORD *)(v7 + 112);
  v30 = *(_QWORD *)(v7 + 104);
  v31 = v14;
  v16 = *(_QWORD *)(v7 + 120);
  v17 = *(_QWORD *)(v7 + 128);
  v19 = *(_QWORD *)(v7 + 136);
  v18 = *(_QWORD *)(v7 + 144);
  v29 = *(_QWORD *)(v7 + 152);
  v28 = *(_OWORD *)(v7 + 160);
  v20 = *(_QWORD *)(v7 + 176);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 169) = 0u;
  swift_bridgeObjectRetain(a2);
  sub_100183E44(v31, v30, v15, v16, v17, v19, v18, v29, v28, *((uint64_t *)&v28 + 1), v20);
  v21 = *(_QWORD *)(v7 + 200);
  v22 = v37;
  *(_QWORD *)(v7 + 192) = v36;
  *(_QWORD *)(v7 + 200) = v22;
  swift_bridgeObjectRelease(v21);
  v23 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v35, v38, v13);
  v33(v23, 0, 1, v13);
  v24 = v34;
  swift_beginAccess(v34, v41, 33, 0);
  sub_100184E1C(v23, v24, &qword_1006363E8);
  swift_endAccess(v41);
  v25 = *(_QWORD *)(v7 + 216);
  v26 = v40;
  *(_QWORD *)(v7 + 208) = v39;
  *(_QWORD *)(v7 + 216) = v26;
  swift_bridgeObjectRelease(v25);
  *(_DWORD *)(v7 + 16) = 1;
  *(_WORD *)(v7 + 20) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  return v7;
}

void sub_100141DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  Class isa;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v4 = v3;
  v5 = v2;
  v75 = a1;
  v85 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 16) & 1) != 0
    || (*(_BYTE *)(v5 + 18) & 1) != 0
    || (*(_BYTE *)(v5 + 21) & 1) != 0
    || *(_BYTE *)(v5 + 19) == 1)
  {
    sub_1001705A0();
    if (v3)
      return;
    v16 = v15;
    v73 = a2;
    v74 = v14;
    v71 = v9;
    v17 = *(_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v5 + 72);
    v19 = *(_QWORD *)(v5 + 88);
    *(_QWORD *)(v5 + 80) = v14;
    *(_QWORD *)(v5 + 88) = v15;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v73 = a2;
    v74 = 0;
    v71 = v9;
    v16 = 0;
  }
  v69 = v11;
  v70 = v10;
  v21 = *(_QWORD *)(v5 + 40);
  v22 = *(_QWORD *)(v5 + 48);
  v23 = *(_QWORD **)(v5 + 72);
  v24 = v23[2];
  v72 = v7;
  if (v24)
  {
    v25 = v23[4];
    v26 = v23[5];
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v78 = v21;
  v79 = v22;
  v80 = 0;
  v81 = v74;
  v82 = v16;
  v83 = v25;
  v84 = v26;
  swift_bridgeObjectRetain(v22);
  v27 = sub_100439A90();
  if (v4)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    v64 = v25;
    v65 = v21;
    v67 = v22;
    v68 = v16;
    v66 = v26;
    if (v28 >> 60 == 15)
    {
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v66);
      v29 = (uint64_t)v71;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, enum case for DIPError.Code.unexpectedDeviceState(_:), v85);
      v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ELL, 0x8000000100550150, 0, v29, 0, v30, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001BLL, 0x8000000100550190, 220);
      swift_willThrow(v33);
    }
    else
    {
      v76 = v27;
      v77 = v28;
      if (v73)
      {
        static String.Encoding.utf8.getter(v27);
        v34 = String.data(using:allowLossyConversion:)(v13, 0, v75, v73);
        v36 = v35;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v13, v70);
        if (v36 >> 60 != 15)
        {
          sub_100022948(v34, v36);
          sub_100440348(v34, v36);
          sub_100007F78(v34, v36);
          sub_100007F78(v34, v36);
        }
      }
      v38 = v76;
      v37 = v77;
      sub_100022948(v76, v77);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100007F8C(v38, v37);
      v40 = (id)DigestSha256(isa);

      v41 = v72;
      v42 = v67;
      v43 = v68;
      if (v40)
      {
        v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v46 = v45;

        v47 = Data.base16EncodedString()();
        sub_100007F8C(v44, v46);
        sub_100007F8C(v38, v37);
        v48 = *(_QWORD *)(v5 + 200);
        *(Swift::String *)(v5 + 192) = v47;
        swift_bridgeObjectRetain(v47._object);
        swift_bridgeObjectRelease(v48);
        v49 = *(_QWORD *)(v5 + 104);
        v85 = *(_QWORD *)(v5 + 96);
        v50 = *(_QWORD *)(v5 + 112);
        v51 = *(_QWORD *)(v5 + 120);
        v52 = *(_QWORD *)(v5 + 128);
        v71 = *(char **)(v5 + 136);
        v72 = v52;
        v53 = *(_QWORD *)(v5 + 144);
        v69 = *(_QWORD *)(v5 + 152);
        v70 = v53;
        v63 = *(_OWORD *)(v5 + 160);
        v54 = *(_QWORD *)(v5 + 176);
        *(Swift::String *)(v5 + 96) = v47;
        v55 = v73;
        *(_QWORD *)(v5 + 112) = v75;
        *(_QWORD *)(v5 + 120) = v55;
        *(_QWORD *)(v5 + 128) = v65;
        *(_QWORD *)(v5 + 136) = v42;
        v56 = v74;
        *(_QWORD *)(v5 + 144) = 0;
        *(_QWORD *)(v5 + 152) = v56;
        v57 = v64;
        *(_QWORD *)(v5 + 160) = v68;
        *(_QWORD *)(v5 + 168) = v57;
        *(_QWORD *)(v5 + 176) = v66;
        *(_BYTE *)(v5 + 184) = 0;
        swift_bridgeObjectRetain(v55);
        sub_100183E44(v85, v49, v50, v51, v72, (uint64_t)v71, v70, v69, v63, *((uint64_t *)&v63 + 1), v54);
      }
      else
      {
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v66);
        v58 = (uint64_t)v71;
        (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v71, enum case for DIPError.Code.unexpectedDeviceState(_:), v85);
        v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v60 = type metadata accessor for DIPError(0);
        v61 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v60, v61, 0, 0);
        v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000041, 0x80000001005501B0, 0, v58, 0, v59, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001BLL, 0x8000000100550190, 226);
        swift_willThrow(v62);
        sub_100007F8C(v76, v77);
      }
    }
  }
}

uint64_t sub_100142368(void *a1)
{
  Swift::String *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *object;
  Swift::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int object_low;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  Swift::String v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t countAndFlagsBits;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  id v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[5];
  char v119[8];
  unint64_t v120;

  v112 = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for EncryptedMessageEntity(0);
  v106 = *(_QWORD *)(v108 - 8);
  v6 = __chkstk_darwin(v108);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v107 = (char *)&v84 - v9;
  v10 = sub_100004828(&qword_1006363E8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v84 - v14;
  v110 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v111 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_100636468);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  object = v1[12]._object;
  if (object && (v117 = (uint64_t)v1[6]._object) != 0)
  {
    v88 = v22;
    v89 = v15;
    v90 = v8;
    v91 = v13;
    v85 = v3;
    v96 = (char *)&v84 - v20;
    v86 = v2;
    v92 = v21;
    v93 = v19;
    v87 = v5;
    countAndFlagsBits = v1[12]._countAndFlagsBits;
    v98 = v1[6]._countAndFlagsBits;
    v24 = v1;
    v26 = v1[7]._countAndFlagsBits;
    v25 = (uint64_t)v1[7]._object;
    v113 = v1[8]._countAndFlagsBits;
    v114 = v1[8]._object;
    v27 = (uint64_t)v1[9]._object;
    v115 = v1[9]._countAndFlagsBits;
    v28 = v1[10]._countAndFlagsBits;
    v30 = (uint64_t)v24[10]._object;
    v29 = v24[11]._countAndFlagsBits;
    object_low = LOBYTE(v24[11]._object);
    v32 = type metadata accessor for DIPECIESSessionV3SecKey(0);
    v33 = *(unsigned int *)(v32 + 48);
    v34 = *(unsigned __int16 *)(v32 + 52);
    v95 = v32;
    v97 = swift_allocObject(v32, v33, v34);
    swift_bridgeObjectRetain(object);
    v99 = object_low;
    v100 = v29;
    v83 = v29;
    v35 = v98;
    v101 = v30;
    v102 = v28;
    v103 = v26;
    v104 = v25;
    v105 = v27;
    sub_100184158(v98, v117, v26, v25, v113, (uint64_t)v114, v115, v27, v28, v30, v83);
    v36 = v116;
    v37 = DIPECIESSessionV3SecKey.init(_:)(0);
    if (v36)
    {
      sub_100183E44(v35, v117, v103, v104, v113, (uint64_t)v114, v115, v105, v102, v101, v100);
      return swift_bridgeObjectRelease(object);
    }
    else
    {
      v43 = v99 & 1;
      v44 = v37;
      v45 = sub_100004828(&qword_100636920);
      inited = swift_initStackObject(v45, v119);
      *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
      *(_QWORD *)(inited + 32) = countAndFlagsBits;
      *(_QWORD *)(inited + 40) = object;
      v47 = v117;
      *(_QWORD *)(inited + 48) = v35;
      *(_QWORD *)(inited + 56) = v47;
      v48 = v104;
      *(_QWORD *)(inited + 64) = v103;
      *(_QWORD *)(inited + 72) = v48;
      v49 = (uint64_t)v114;
      *(_QWORD *)(inited + 80) = v113;
      *(_QWORD *)(inited + 88) = v49;
      *(_BYTE *)(inited + 96) = v115 & 1;
      v50 = v102;
      *(_QWORD *)(inited + 104) = v105;
      *(_QWORD *)(inited + 112) = v50;
      v51 = v100;
      *(_QWORD *)(inited + 120) = v101;
      *(_QWORD *)(inited + 128) = v51;
      *(_BYTE *)(inited + 136) = v43;
      v52 = sub_10011E5E4(inited);
      v118[3] = v95;
      v118[4] = &protocol witness table for DIPECIESSessionV3SecKey;
      v118[0] = v44;
      v53 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
      v117 = v44;
      swift_retain(v44);
      v54 = v112;
      v55 = __DataStorage.init(length:)(65) | 0x4000000000000000;
      swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
      v56 = __DataStorage.init(length:)(65) | 0x4000000000000000;
      v120 = v52;
      v57 = v111;
      (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), v110);
      v58 = sub_100004828(&qword_100636480);
      v59 = sub_100182850();
      v60 = sub_1001828D4();
      EncryptedDataContainer.init(alg:encryptor:remotePublicKey:senderSigningKey:recipientSigningKey:data:)(v57, v118, v54, 0x4100000000, v55, 0x4100000000, v56, &v120, v58, v59, v60);
      v116 = 0;
      v61 = *(void (**)(char *, _QWORD, uint64_t))(v106 + 104);
      v62 = v107;
      v63 = v108;
      v61(v107, enum case for EncryptedMessageEntity.device_see(_:), v108);
      v64 = v90;
      v61(v90, enum case for EncryptedMessageEntity.sp(_:), v63);
      v65 = v88;
      v66 = v96;
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v88, v96, v93);
      v67 = (uint64_t)v89;
      EncryptedMessage.init(sender:recipient:message:senderSigningKey:)(v62, v64, v65, 0, 0, v58, v59, v60);
      v68 = sub_100004828((uint64_t *)&unk_100636010);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 0, 1, v68);
      v69 = (uint64_t)v91;
      sub_1000A1F54(v67, (uint64_t)v91, &qword_1006363E8);
      v70 = (uint64_t)v24 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess((char *)v24 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, v118, 33, 0);
      sub_100184E1C(v69, v70, &qword_1006363E8);
      v71 = swift_endAccess(v118);
      v72 = dispatch thunk of DIPECIESSessionV3SecKey.ePublicKeyData.getter(v71);
      if (v73 >> 60 == 15)
      {
        v74 = v87;
        (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v87, enum case for DIPError.Code.unexpectedDaemonState(_:), v86);
        v75 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v76 = type metadata accessor for DIPError(0);
        v77 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v76, v77, 0, 0);
        v78 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100550100, 0, v74, 0, v75, 0xD00000000000004CLL, 0x800000010054D540, 0x2874707972636E65, 0xEE00293A68746977, 247);
        swift_willThrow(v78);
        swift_release(v117);
        return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v66, v93);
      }
      else
      {
        v79 = v72;
        v80 = v73;
        v81 = Data.base64EncodedString(options:)(0);
        swift_release(v117);
        sub_100007F78(v79, v80);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v66, v93);
        v82 = v24[13]._object;
        v24[13] = v81;
        return swift_bridgeObjectRelease(v82);
      }
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.unexpectedDaemonState(_:), v2);
    v39 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v40, v41, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x80000001005500C0, 0, v5, 0, v39, 0xD00000000000004CLL, 0x800000010054D540, 0x2874707972636E65, 0xEE00293A68746977, 239);
    return swift_willThrow(v42);
  }
}

_QWORD *sub_100142D34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = v0[8];
  v2 = v0[11];
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  sub_100183E44(v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19], v0[20], v0[21], v0[22]);
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[27]);
  sub_100008030((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, &qword_1006363E8);
  return v0;
}

uint64_t sub_100142DE0()
{
  uint64_t v0;

  sub_100142D34();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100142E04(uint64_t *a1, uint64_t *a2)
{
  return sub_10016EDA0(*a1, *a2);
}

id sub_100142E10()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  objc_class *v34;
  uint64_t v36;
  objc_super v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42[24];
  char v43[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService] = 0;

  v7 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService] = 0;

  v8 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = 0;

  v9 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context] = 0;

  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = 0;
  swift_release(v10);
  v11 = &v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages], v43, 1, 0);
  v12 = *(_QWORD *)v11;
  *(_QWORD *)v11 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v12);
  v13 = sub_10011E79C((uint64_t)_swiftEmptyArrayStorage);
  v14 = (unint64_t *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes], v42, 1, 0);
  v15 = *v14;
  *v14 = v13;
  swift_bridgeObjectRelease(v15);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey], v38, 33, 0);
  sub_100184E1C((uint64_t)&v39, v16, &qword_100636508);
  swift_endAccess(v38);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v17 = (uint64_t)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey], v38, 33, 0);
  sub_100184E1C((uint64_t)&v39, v17, &qword_100636508);
  swift_endAccess(v38);
  v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = 0;
  swift_release(v18);
  v19 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = 0;

  v20 = &v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  v21 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 8];
  v23 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 16];
  v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 24];
  v25 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 32];
  v26 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 40];
  v27 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 48];
  v28 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56];
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_QWORD *)v20 + 6) = 0;
  *((_QWORD *)v20 + 7) = 1;
  v29 = sub_1001825D8(v21, v22, v23, v24, v25, v26, v27, v28);
  v30 = defaultLogger()(v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Destroying IDVSessionProxy", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v34 = (objc_class *)type metadata accessor for IDVSessionProxy(0);
  v37.receiver = v1;
  v37.super_class = v34;
  return objc_msgSendSuper2(&v37, "dealloc");
}

uint64_t sub_100143458(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  id v27;
  BOOL *v28;
  uint64_t v29;
  __n128 v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  _BOOL4 v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  BOOL *v83;
  __int128 *v84;
  _QWORD *v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  __int128 v103;
  char *v104;
  _QWORD *v105;
  _OWORD v106[10];
  uint64_t v107;
  _BYTE v108[7];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  BOOL v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;

  v3 = v2;
  *(_QWORD *)&v103 = a1;
  *((_QWORD *)&v103 + 1) = a2;
  v4 = type metadata accessor for DIPBackoffStrategy(0);
  v96 = *(_QWORD *)(v4 - 8);
  v97 = v4;
  __chkstk_darwin(v4);
  v98 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPRetrier(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v101 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v9 - 8);
  v95 = v9;
  __chkstk_darwin(v9);
  v93 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v99 = *(_QWORD *)(v14 - 8);
  v100 = v14;
  __chkstk_darwin(v14);
  v104 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v20);
  v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = v3;
  v25 = *(void **)((char *)v3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  if (!v25)
  {
    (*(void (**)(char *, _QWORD))(v22 + 104))(v24, enum case for DIPError.Code.unexpectedDaemonState(_:));
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054DDA0, 0, v24, 0, v37, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000024, 0x800000010054F410, 458);
    return swift_willThrow(v40);
  }
  v90 = v22;
  v91 = v21;
  v88 = v7;
  v89 = v6;
  v92 = v24;
  v121 = _swiftEmptyArrayStorage;
  v122 = _swiftEmptyArrayStorage;
  v26 = qword_10062F5B0;
  v27 = v25;
  v102 = v27;
  if (v26 != -1)
    v27 = (id)swift_once(&qword_10062F5B0, sub_100486FCC);
  *(_QWORD *)&v109 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v27);
  v83 = v28;
  v84 = &v109;
  v29 = v123;
  OS_dispatch_queue.sync<A>(execute:)(sub_100184A68, v82, (char *)&type metadata for () + 8, v30);
  if (v29)
  {
    swift_bridgeObjectRelease(v109);
    v31 = v92;
    (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v92, enum case for DIPError.Code.internalError(_:), v91);
    swift_errorRetain(v29);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v29, v31, 0, v32, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000024, 0x800000010054F410, 469);
    swift_willThrow(v35);

    swift_errorRelease(v29);
    swift_bridgeObjectRelease(v121);
    return swift_bridgeObjectRelease(v122);
  }
  v123 = 0;
  v41 = (_QWORD *)v109;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v122 = v41;
  v42 = sub_100492954(v103, *((uint64_t *)&v103 + 1));
  v43 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v121 = (_QWORD *)v42;
  if (v41[2] != *(_QWORD *)(v42 + 16))
  {
    v44 = defaultLogger()(v43);
    v45 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.info.getter(v45, v46);
    if (os_log_type_enabled(v45, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v47, "We have more claims than just claims for the current requested providerId", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v43 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  static DaemonSignposts.configureFetchWorkflow.getter(v43);
  DIPSignpost.init(_:)(v13);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v49 = (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState") - 1 < (char *)2;
  v120 = v49;
  v50 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context;
  v51 = *(void **)((char *)v105 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  v87 = v49;
  if (!v51)
  {
    v56 = 0;
    v54 = 0;
    v57 = v122;
LABEL_21:
    v85 = v57;
    v86 = v56;
    swift_bridgeObjectRetain(v57);
    goto LABEL_22;
  }
  v52 = objc_msgSend(v51, "tier");
  if (v52)
  {
    v53 = v52;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v56 = v55;

  }
  else
  {
    v54 = 0;
    v56 = 0;
  }
  v58 = *(void **)((char *)v105 + v50);
  v57 = v122;
  if (!v58)
    goto LABEL_21;
  v59 = objc_msgSend(v58, "regionCode", swift_bridgeObjectRetain(v122).n128_f64[0]);
  v85 = v57;
  v86 = v56;
  if (!v59)
  {
LABEL_22:
    v61 = 0;
    v63 = 0;
    goto LABEL_23;
  }
  v60 = v59;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v63 = v62;

LABEL_23:
  v64 = v93;
  v65 = UUID.init()(v59);
  v66 = UUID.uuidString.getter(v65);
  v68 = v67;
  (*(void (**)(char *, uint64_t))(v94 + 8))(v64, v95);
  if (qword_10062F4F8 != -1)
    swift_once(&qword_10062F4F8, sub_100283AC4);
  v69 = qword_100670340;
  *(_QWORD *)&v109 = 0;
  *((_QWORD *)&v109 + 1) = 0xE000000000000000;
  *(_QWORD *)&v110 = v66;
  *((_QWORD *)&v110 + 1) = v68;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v70 = v103;
  v114 = v103;
  *(_QWORD *)&v115 = v54;
  *((_QWORD *)&v115 + 1) = v86;
  *(_QWORD *)&v116 = v85;
  *((_QWORD *)&v116 + 1) = 8;
  *(_QWORD *)&v117 = v61;
  *((_QWORD *)&v117 + 1) = v63;
  *(_QWORD *)&v118 = qword_100670340;
  BYTE8(v118) = v87;
  HIDWORD(v118) = *(_DWORD *)&v108[3];
  *(_DWORD *)((char *)&v118 + 9) = *(_DWORD *)v108;
  v119 = 0;
  v71 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v98, enum case for DIPBackoffStrategy.noBackoff(_:), v97);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(*((_QWORD *)&v70 + 1));
  v72 = v101;
  v73 = DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(3, v71, 0, 1);
  __chkstk_darwin(v73);
  v74 = v102;
  *(&v85 - 10) = v102;
  *(&v85 - 9) = &v109;
  v75 = v104;
  *(&v85 - 8) = v105;
  *(&v85 - 7) = v75;
  *(&v85 - 6) = &v121;
  *(&v85 - 5) = (_QWORD *)v70;
  v82[0] = *((_QWORD *)&v70 + 1);
  v82[1] = &v122;
  v83 = &v120;
  v76 = v123;
  DIPRetrier.sync(_:)(sub_100184A80, &v85 - 12);
  if (v76)
  {
    v77 = v92;
    (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v92, enum case for DIPError.Code.internalError(_:), v91);
    swift_errorRetain(v76);
    v78 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v79 = type metadata accessor for DIPError(0);
    v80 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v79, v80, 0, 0);
    v81 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v76, v77, 0, v78, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000024, 0x800000010054F410, 603);
    swift_willThrow(v81);

    swift_errorRelease(v76);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v72, v89);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v72, v89);

  }
  (*(void (**)(char *, uint64_t))(v99 + 8))(v75, v100);
  v106[8] = v117;
  v106[9] = v118;
  v107 = v119;
  v106[4] = v113;
  v106[5] = v114;
  v106[6] = v115;
  v106[7] = v116;
  v106[0] = v109;
  v106[1] = v110;
  v106[2] = v111;
  v106[3] = v112;
  sub_100184AB4(v106);
  swift_bridgeObjectRelease(v121);
  return swift_bridgeObjectRelease(v122);
}

void sub_100143E20(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  os_log_type_t v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  id v95;
  Swift::String v96;
  Swift::Bool v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  void *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  id v163;
  Swift::String v164;
  Swift::Bool v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void *v169;
  char *v170;
  id v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  Swift::String v190;
  Swift::String v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, uint64_t);
  char *v211;
  void (*v212)(char *);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(char *, uint64_t);
  uint64_t v217;
  char *v218;
  uint64_t v219;
  NSObject *v220;
  uint64_t v221;
  os_log_type_t v222;
  _BOOL4 v223;
  char *v224;
  void (*v225)(char *, _QWORD, uint64_t);
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  uint64_t v250;
  os_log_type_t v251;
  uint8_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  void (*v262)(char *, uint64_t);
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  _QWORD *v293;
  __int128 v294;
  __int128 v295;
  void (*v296)(char *, uint64_t);
  uint64_t v297;
  _QWORD v298[5];
  _QWORD v299[3];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE v303[16];
  uint64_t v304;
  uint64_t v305;
  _OWORD v306[2];
  uint64_t v307;
  uint64_t v308;
  _OWORD v309[10];
  uint64_t v310;

  v279 = a7;
  v280 = a8;
  v285 = a5;
  v286 = a6;
  v293 = a9;
  v13 = type metadata accessor for UUID(0);
  v269 = *(_QWORD *)(v13 - 8);
  v270 = v13;
  __chkstk_darwin(v13);
  v268 = (char *)&v256 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_1006335E0);
  v16 = __chkstk_darwin(v15);
  v291 = (char *)&v256 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v282 = (char *)&v256 - v18;
  v289 = type metadata accessor for DIPError.Code(0);
  v292 = *(_QWORD *)(v289 - 8);
  v19 = __chkstk_darwin(v289);
  v274 = (char *)&v256 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v272 = (char *)&v256 - v21;
  v22 = type metadata accessor for DIPError(0);
  v277 = *(_QWORD *)(v22 - 8);
  v278 = v22;
  v23 = __chkstk_darwin(v22);
  v275 = (char *)&v256 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v267 = (char *)&v256 - v25;
  v26 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v26);
  v287 = (char *)&v256 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DIPSignpost(0);
  v283 = *(_QWORD *)(v28 - 8);
  v284 = v28;
  __chkstk_darwin(v28);
  v288 = (char *)&v256 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for HardwareAttestationType(0);
  v262 = *(void (**)(char *, uint64_t))(v30 - 8);
  v263 = v30;
  v31 = __chkstk_darwin(v30);
  v258 = (char *)&v256 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v261 = (char *)&v256 - v33;
  v34 = type metadata accessor for KeystoreKeyType(0);
  v265 = *(_QWORD *)(v34 - 8);
  v266 = v34;
  v35 = __chkstk_darwin(v34);
  v259 = (char *)&v256 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v264 = (char *)&v256 - v37;
  v297 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v297 - 8);
  v39 = __chkstk_darwin(v297);
  v271 = (char *)&v256 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v273 = (char *)&v256 - v42;
  v43 = __chkstk_darwin(v41);
  v290 = (char *)&v256 - v44;
  v45 = __chkstk_darwin(v43);
  v257 = (char *)&v256 - v46;
  v47 = __chkstk_darwin(v45);
  v260 = (char *)&v256 - v48;
  v49 = __chkstk_darwin(v47);
  v281 = (char *)&v256 - v50;
  v51 = __chkstk_darwin(v49);
  v53 = (char *)&v256 - v52;
  v54 = defaultLogger()(v51);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.debug.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v57 = 134349056;
    *(_QWORD *)&v309[0] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v309, (char *)v309 + 8, v57 + 4);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Attempting workflow try # %{public}ld", v57, 0xCu);
    swift_slowDealloc(v57, -1, -1);
  }

  v296 = *(void (**)(char *, uint64_t))(v38 + 8);
  v296(v53, v297);
  v58 = &a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  v59 = *(_QWORD *)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  v60 = *(_QWORD *)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8];
  v61 = *(_QWORD *)&a2[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v62 = *(_QWORD *)&a2[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8];
  v63 = *(_QWORD *)(a3 + 8);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)a3 = v61;
  *(_QWORD *)(a3 + 8) = v62;
  sub_1002555A4(v59, v60, (uint64_t *)v306);
  v294 = v306[1];
  v295 = v306[0];
  v64 = v307;
  v65 = v308;
  sub_10008EF5C(*(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 64), *(_QWORD *)(a3 + 72));
  *(_OWORD *)(a3 + 32) = v295;
  *(_OWORD *)(a3 + 48) = v294;
  *(_QWORD *)(a3 + 64) = v64;
  *(_QWORD *)(a3 + 72) = v65;
  swift_bridgeObjectRelease(v60);
  v66 = *(NSObject **)&a4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__commonDispatchGroup];
  dispatch_group_enter(v66);
  v67 = *(_OWORD *)(a3 + 112);
  v68 = *(_OWORD *)(a3 + 144);
  v309[8] = *(_OWORD *)(a3 + 128);
  v309[9] = v68;
  v69 = *(_OWORD *)(a3 + 48);
  v70 = *(_OWORD *)(a3 + 80);
  v71 = *(_OWORD *)(a3 + 96);
  v309[4] = *(_OWORD *)(a3 + 64);
  v309[5] = v70;
  v310 = *(_QWORD *)(a3 + 160);
  v309[6] = v71;
  v309[7] = v67;
  v72 = *(_OWORD *)(a3 + 16);
  v309[0] = *(_OWORD *)a3;
  v309[1] = v72;
  v309[2] = *(_OWORD *)(a3 + 32);
  v309[3] = v69;
  v73 = swift_allocObject(&unk_1006094E8, 200, 7);
  v74 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v73 + 136) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v73 + 152) = v74;
  *(_OWORD *)(v73 + 168) = *(_OWORD *)(a3 + 144);
  v75 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v73 + 72) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v73 + 88) = v75;
  v76 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v73 + 104) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v73 + 120) = v76;
  v77 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v73 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(v73 + 16) = a2;
  v78 = *(_QWORD *)(a3 + 160);
  *(_OWORD *)(v73 + 40) = v77;
  *(_OWORD *)(v73 + 56) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v73 + 184) = v78;
  *(_QWORD *)(v73 + 192) = a4;
  sub_100184C7C(v309);
  v79 = type metadata accessor for LegacySynthesizedWorkflows();
  v80 = a2;
  v81 = a4;
  v276 = (unint64_t)"regenerated assessments";
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000024, 0x800000010054F410, 496, &unk_100636870, v73, v79);
  *(_QWORD *)&v295 = 0;
  v291 = v58;
  v82 = swift_release(v73);
  v83 = v302;
  v84 = *(_QWORD *)(v302 + 5968);
  v85 = v288;
  v86 = v81;
  if (!v84 || *(_QWORD *)(v84 + 16) != 8)
  {
    v87 = v281;
    defaultLogger()(v82);
    v88 = swift_retain(v83);
    v89 = Logger.logObject.getter(v88);
    v91 = static os_log_type_t.info.getter(v89, v90);
    if (os_log_type_enabled(v89, v91))
    {
      v92 = (_DWORD *)swift_slowAlloc(22, -1);
      v93 = v92;
      *v92 = 134349312;
      v94 = *(_QWORD *)(v83 + 5968);
      if (v94)
        v94 = *(_QWORD *)(v94 + 16);
      v302 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v92 + 1);
      swift_release(v83);
      *((_WORD *)v93 + 6) = 2050;
      v302 = 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, (char *)v93 + 14);
      _os_log_impl((void *)&_mh_execute_header, v89, v91, "assessmentGUIDs count (%{public}ld) doesn't match the request number (%{public}ld)", (uint8_t *)v93, 0x16u);
      swift_slowDealloc(v93, -1, -1);
      v85 = v288;
    }
    else
    {
      swift_release(v83);
    }

    v296(v87, v297);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  if (!*(_QWORD *)(*(_QWORD *)v286 + 16))
  {
    v95 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v96._countAndFlagsBits = 0xD00000000000002CLL;
    v96._object = (void *)0x800000010054F530;
    v97 = NSUserDefaults.internalBool(forKey:)(v96);

    if (!v97)
    {
      v98 = type metadata accessor for DIPAccountManager(0);
      static DIPAccountManager.sharedInstance.getter(&v302, v98);
      v99 = v304;
      v100 = v305;
      sub_10000806C(&v302, v304);
      v101 = v295;
      v102 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v99, v100);
      v285 = v101;
      v286 = v86;
      *(_QWORD *)&v294 = v66;
      if (v101)
      {
LABEL_14:
        v104 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v302);
LABEL_17:
        *(_QWORD *)&v295 = 0;
        v109 = v271;
        v110 = defaultLogger()(v104);
        v111 = Logger.logObject.getter(v110);
        v112 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v111, v112))
        {
          v113 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v113 = 0;
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "ignoring Error deleting lingering keys when there are no claims", v113, 2u);
          swift_slowDealloc(v113, -1, -1);
        }

        v114 = v296;
        v115 = v297;
        v296(v109, v297);
        v116 = v274;
        (*(void (**)(char *, _QWORD, uint64_t))(v292 + 104))(v274, enum case for DIPError.Code.deleteKeyWithoutClaimFailure(_:), v289);
        v117 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v118 = v275;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054F560, 0, v116, 0, v117, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000024, v276 | 0x8000000000000000, 527);
        v119 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v120 = v278;
        v121 = swift_allocError(v278, v119, 0, 0);
        v122 = v277;
        v124 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v277 + 16))(v123, v118, v120);
        v125 = v290;
        defaultLogger()(v124);
        DIPRecordError(_:message:log:)(v121, 0, 0xE000000000000000, v125);
        swift_errorRelease(v285);
        v114(v125, v115);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v118, v120);
        swift_errorRelease(v121);
        v85 = v288;
        v86 = v286;
        v66 = v294;
        goto LABEL_20;
      }
      v105 = (char *)v102;
      v106 = v103;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v302);
      v107 = sub_1000552C8();
      v108 = v285;
      sub_100169B64((uint64_t)v107, 0, 0, 0xF000000000000000, (uint64_t)&v302);
      v285 = v108;
      if (v108)
      {
        swift_bridgeObjectRelease(v106);
        v104 = swift_bridgeObjectRelease(v107);
        goto LABEL_17;
      }
      swift_bridgeObjectRelease(v107);
      v194 = v304;
      *(_QWORD *)&v295 = v305;
      sub_10000806C(&v302, v304);
      v195 = *(_QWORD *)(v83 + 16);
      v196 = *(_QWORD *)(v195 + 64);
      v197 = *(_QWORD *)(v195 + 72);
      v198 = v264;
      v199 = v265;
      v200 = *(char **)(v265 + 104);
      LODWORD(v270) = enum case for KeystoreKeyType.standard(_:);
      v281 = v200;
      ((void (*)(char *))v200)(v264);
      swift_bridgeObjectRetain(v197);
      v201 = v196;
      v202 = v198;
      v273 = v105;
      v282 = v106;
      v203 = v198;
      v204 = v285;
      v205 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v201, v197, v105, v106, v203, v194, v295);
      v285 = v204;
      if (v204)
      {
        (*(void (**)(char *, uint64_t))(v199 + 8))(v202, v266);
        swift_bridgeObjectRelease(v197);
        swift_bridgeObjectRelease(v282);
        goto LABEL_14;
      }
      v207 = (char *)v205;
      v208 = v206;
      v265 = *(_QWORD *)(v199 + 8);
      ((void (*)(char *, uint64_t))v265)(v202, v266);
      swift_bridgeObjectRelease(v197);
      v209 = v304;
      *(_QWORD *)&v295 = v305;
      sub_10000806C(&v302, v304);
      v211 = v261;
      v210 = v262;
      v212 = (void (*)(char *))*((_QWORD *)v262 + 13);
      LODWORD(v264) = enum case for HardwareAttestationType.IDV(_:);
      v213 = v263;
      v212(v261);
      v268 = v207;
      v269 = v208;
      v214 = v208;
      v215 = v285;
      dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)(v299, v207, v214, 0, v211, v209, v295);
      v285 = v215;
      if (v215)
      {
        (*((void (**)(char *, uint64_t))v210 + 1))(v211, v213);
        swift_bridgeObjectRelease(v282);
        swift_bridgeObjectRelease(v269);
        goto LABEL_14;
      }
      *(_QWORD *)&v295 = v212;
      v216 = (void (*)(char *, uint64_t))*((_QWORD *)v210 + 1);
      v216(v211, v213);
      v262 = v216;
      if (v300)
      {
        v217 = sub_100008030((uint64_t)v299, &qword_100636508);
        v218 = v260;
        v219 = defaultLogger()(v217);
        v220 = Logger.logObject.getter(v219);
        v222 = static os_log_type_t.info.getter(v220, v221);
        v223 = os_log_type_enabled(v220, v222);
        v225 = (void (*)(char *, _QWORD, uint64_t))v281;
        v224 = v282;
        if (v223)
        {
          v226 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v226 = 0;
          _os_log_impl((void *)&_mh_execute_header, v220, v222, "detected INO key without any claims. proceeding to delete INO key", v226, 2u);
          swift_slowDealloc(v226, -1, -1);
        }

        v296(v218, v297);
        v227 = v304;
        v228 = v305;
        sub_10000806C(&v302, v304);
        v229 = v269;
        v230 = v285;
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v268, v269, 0, v227, v228);
        v285 = v230;
        if (v230)
        {
          swift_bridgeObjectRelease(v224);
          swift_bridgeObjectRelease(v229);
          goto LABEL_14;
        }
        swift_bridgeObjectRelease(v229);
      }
      else
      {
        swift_bridgeObjectRelease(v269);
        sub_100008030((uint64_t)v299, &qword_100636508);
        v225 = (void (*)(char *, _QWORD, uint64_t))v281;
        v224 = v282;
      }
      v231 = sub_10005543C();
      v232 = v285;
      sub_100169B64((uint64_t)v231, 0, 0, 0xF000000000000000, (uint64_t)v299);
      v285 = v232;
      v233 = v259;
      if (v232)
      {
        swift_bridgeObjectRelease(v224);
        swift_bridgeObjectRelease(v231);
        goto LABEL_14;
      }
      swift_bridgeObjectRelease(v231);
      v234 = v300;
      v235 = v301;
      sub_10000806C(v299, v300);
      v236 = v266;
      v225(v233, v270, v266);
      v237 = v285;
      v239 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v279, v280, v273, v224, v233, v234, v235);
      v240 = v233;
      v285 = v237;
      if (v237)
      {
        ((void (*)(char *, uint64_t))v265)(v233, v236);
        swift_bridgeObjectRelease(v224);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v299);
        goto LABEL_14;
      }
      v241 = v238;
      ((void (*)(char *, uint64_t))v265)(v240, v236);
      swift_bridgeObjectRelease(v224);
      v242 = v300;
      v243 = v301;
      sub_10000806C(v299, v300);
      v244 = v258;
      v245 = v263;
      ((void (*)(char *, _QWORD, uint64_t))v295)(v258, v264, v263);
      v246 = v285;
      dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)(v298, v239, v241, 0, v244, v242, v243);
      *(_QWORD *)&v295 = v246;
      if (v246)
      {
        v262(v244, v245);
LABEL_62:
        swift_bridgeObjectRelease(v241);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v299);
        v104 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v302);
        v285 = v295;
        goto LABEL_17;
      }
      v262(v244, v245);
      if (v298[3])
      {
        v247 = sub_100008030((uint64_t)v298, &qword_100636508);
        v248 = defaultLogger()(v247);
        v249 = Logger.logObject.getter(v248);
        v251 = static os_log_type_t.info.getter(v249, v250);
        if (os_log_type_enabled(v249, v251))
        {
          v252 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v252 = 0;
          _os_log_impl((void *)&_mh_execute_header, v249, v251, "detected SP key without any claims. proceeding to delete SP key", v252, 2u);
          swift_slowDealloc(v252, -1, -1);
        }

        v296(v257, v297);
        v254 = v300;
        v253 = v301;
        sub_10000806C(v299, v300);
        v255 = v295;
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v239, v241, 0, v254, v253);
        *(_QWORD *)&v295 = v255;
        if (v255)
          goto LABEL_62;
        swift_bridgeObjectRelease(v241);
      }
      else
      {
        swift_bridgeObjectRelease(v241);
        sub_100008030((uint64_t)v298, &qword_100636508);
      }
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v299);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v302);
      v66 = v294;
      v85 = v288;
      v86 = v286;
    }
  }
LABEL_20:
  v126 = v287;
  static DaemonSignposts.configureLoadClaimsAndPrefill.getter();
  DIPSignpost.init(_:)(v126);
  v127 = v295;
  sub_10015702C((char *)v83);
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v85, v284);
    swift_release(v83);
    v128 = v293;
    *v293 = v127;
    v129 = enum case for DIPRetryResult.stopWithError(_:);
    v130 = type metadata accessor for DIPRetryResult(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 104))(v128, v129, v130);
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v131 = sub_10016C004(v83);
    v132 = *(void **)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
    *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = v131;

    if ((sub_1000556BC() & 1) != 0)
    {
      v133 = *(_QWORD *)(v83 + 24);
      if (v133
        && (v134 = (uint64_t *)(v133 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName),
            (v135 = v134[1]) != 0))
      {
        v136 = *v134;
        objc_allocWithZone((Class)type metadata accessor for DIPLocationHelper());
        swift_bridgeObjectRetain(v135);
        v137 = sub_100258320(v136, v135, 0);
        swift_bridgeObjectRelease(v135);
        v138 = *(void **)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
        *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = v137;

      }
      else
      {
        v286 = v86;
        (*(void (**)(char *, _QWORD, uint64_t))(v292 + 104))(v272, enum case for DIPError.Code.missingLocationAuthorization(_:), v289);
        v139 = sub_100004828((uint64_t *)&unk_1006325A0);
        v140 = sub_100004828((uint64_t *)&unk_100633440);
        v141 = *(_QWORD *)(v140 - 8);
        v142 = *(_QWORD *)(v141 + 72);
        v143 = *(unsigned __int8 *)(v141 + 80);
        v144 = (v143 + 32) & ~v143;
        v145 = swift_allocObject(v139, v144 + v142, v143 | 7);
        *(_OWORD *)(v145 + 16) = xmmword_10051FFB0;
        v146 = v145 + v144;
        v147 = enum case for DIPError.PropertyKey.spWorkflowID(_:);
        v148 = type metadata accessor for DIPError.PropertyKey(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 104))(v146, v147, v148);
        v149 = *(_QWORD *)(v83 + 24);
        v150 = v66;
        if (v149)
        {
          v151 = *(_QWORD *)(v149 + 16);
          swift_bridgeObjectRetain(*(_QWORD *)(v149 + 24));
        }
        else
        {
          v152 = 0xEB00000000454C42;
          v151 = 0x414C494156414E55;
        }
        v153 = (uint64_t *)(v146 + *(int *)(v140 + 48));
        v153[3] = (uint64_t)&type metadata for String;
        *v153 = v151;
        v153[1] = v152;
        v154 = sub_10011D314(v145);
        v155 = v267;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004CLL, 0x800000010054F4E0, 0, v272, 0, v154, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000024, v276 | 0x8000000000000000, 550);
        v156 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v157 = v278;
        v158 = swift_allocError(v278, v156, 0, 0);
        v159 = v277;
        v161 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v277 + 16))(v160, v155, v157);
        v162 = v290;
        defaultLogger()(v161);
        DIPRecordError(_:message:log:)(v158, 0, 0xE000000000000000, v162);
        v296(v162, v297);
        (*(void (**)(char *, uint64_t))(v159 + 8))(v155, v157);
        swift_errorRelease(v158);
        v66 = v150;
        v86 = v286;
      }
    }
    v163 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v164._countAndFlagsBits = 0xD00000000000001ALL;
    v164._object = (void *)0x800000010054F4A0;
    v165 = NSUserDefaults.internalBool(forKey:)(v164);

    if (v165
      || (v166 = *(_QWORD *)(v83 + 24)) != 0
      && (*(_BYTE *)(v166 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) & 1) != 0)
    {
      v169 = *(void **)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
      v170 = v291;
      if (v169 && (v171 = objc_msgSend(v169, "httpHeaders")) != 0)
      {
        v172 = v171;
        v173 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v171, &type metadata for String, &type metadata for String, &protocol witness table for String);

        v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderDIPGSToken);
        v176 = v175;
        if (*(_QWORD *)(v173 + 16) && (v177 = sub_1004A8604(v174, v175), (v178 & 1) != 0))
        {
          v179 = (uint64_t *)(*(_QWORD *)(v173 + 56) + 16 * v177);
          v181 = *v179;
          v180 = v179[1];
          swift_bridgeObjectRetain(v180);
        }
        else
        {
          v181 = 0;
          v180 = 0;
        }
        swift_bridgeObjectRelease(v173);
        swift_bridgeObjectRelease(v176);
        v170 = v291;
      }
      else
      {
        v181 = 0;
        v180 = 0;
      }
      v168 = *((_QWORD *)v170 + 1);
      *(_QWORD *)v170 = v181;
      *((_QWORD *)v170 + 1) = v180;
    }
    else
    {
      v167 = v291;
      v168 = *((_QWORD *)v291 + 1);
      *(_QWORD *)v291 = 0;
      *((_QWORD *)v167 + 1) = 0;
    }
    swift_bridgeObjectRelease(v168);
    v182 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
    *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = v83;
    swift_retain(v83);
    swift_release(v182);
    v183 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
    v184 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
    v185 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
    v186 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
    swift_retain(v83);
    swift_bridgeObjectRetain(v184);
    v187 = sub_1000356BC(v183, v184, v185, v186);
    swift_bridgeObjectRelease(v184);
    v188 = sub_1004FCDF8(v83, (uint64_t)v187);
    swift_release(v187);
    swift_release(v83);
    v189 = *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager];
    *(_QWORD *)&v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = v188;
    swift_release(v189);
    v86[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 2;
    sub_100147518();
    v190._countAndFlagsBits = 0xD000000000000016;
    v190._object = (void *)0x800000010054F4C0;
    v191._countAndFlagsBits = 0x3837323838646361;
    v191._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v191, v190);
    swift_release(v83);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v85, v284);
    v192 = enum case for DIPRetryResult.stop(_:);
    v193 = type metadata accessor for DIPRetryResult(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 104))(v293, v192, v193);
  }
  dispatch_group_leave(v66);
}

uint64_t sub_100145A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100004828(&qword_1006354A8);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100145A68, 0, 0);
}

uint64_t sub_100145A68()
{
  uint64_t *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;

  v1 = *(void **)(v0[5] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1 && (v2 = objc_msgSend(v1, "preferredLanguages")) != 0)
  {
    v3 = v2;
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  }
  else
  {
    v4 = 0;
  }
  v0[7] = v4;
  v5 = v0[6];
  v6 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (uint64_t **)swift_task_alloc(dword_100639AEC);
  v0[8] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = (uint64_t *)sub_100145B44;
  return sub_1002403C4(v0[4], v4, 0, v0[6], 0);
}

uint64_t sub_100145B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  *(_QWORD *)(*(_QWORD *)v2 + 72) = v1;
  swift_task_dealloc(v5);
  v6 = v4[6];
  v7 = v4[7];
  if (v1)
  {
    sub_100008030(v6, &qword_1006354A8);
    swift_bridgeObjectRelease(v7);
    v8 = sub_100145C24;
  }
  else
  {
    v4[10] = a1;
    sub_100008030(v6, &qword_1006354A8);
    swift_bridgeObjectRelease(v7);
    v8 = sub_100145BE4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100145BE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100145C24()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100145C58()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  void **aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;

  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(char **)(v41 - 8);
  __chkstk_darwin(v41);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100456E78();
  v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = v6;
  swift_retain(v6);
  swift_release(v7);
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
  v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  v11 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  swift_bridgeObjectRetain(v8);
  v12 = sub_1000356BC(v9, v8, v10, v11);
  swift_bridgeObjectRelease(v8);
  swift_retain(v6);
  swift_retain(v12);
  v45 = v12;
  v13 = sub_1004FCDF8(v6, (uint64_t)v12);
  swift_release(v12);
  swift_release(v6);
  v14 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = v13;
  swift_release(v14);
  v15 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupQueue];
  v37 = *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupDispatchGroup];
  v16 = v37;
  v38 = v15;
  v17 = swift_allocObject(&unk_1006093F8, 32, 7);
  *(_QWORD *)(v17 + 16) = v0;
  *(_QWORD *)(v17 + 24) = v6;
  v51 = sub_100184874;
  v52 = v17;
  aBlock = _NSConcreteStackBlock;
  v48 = 1107296256;
  v49 = sub_1004AB190;
  v50 = &unk_100609410;
  v18 = _Block_copy(&aBlock);
  swift_retain(v6);
  v40 = v0;
  static DispatchQoS.unspecified.getter(v40);
  v46 = _swiftEmptyArrayStorage;
  v19 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = v19;
  v20 = sub_100004828((uint64_t *)&unk_1006308D0);
  v35 = v20;
  v39 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = v20;
  v22 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v21, v39, v41, v19);
  v23 = v16;
  v24 = v2;
  OS_dispatch_queue.async(group:qos:flags:execute:)(v23, v5, v2, v18);
  _Block_release(v18);
  v25 = (void (*)(char *, uint64_t))*((_QWORD *)v44 + 1);
  v25(v2, v22);
  v26 = v43;
  v27 = *(void (**)(char *, uint64_t))(v42 + 8);
  v27(v5, v43);
  swift_release(v52);
  v28 = swift_allocObject(&unk_100609448, 32, 7);
  v29 = v40;
  *(_QWORD *)(v28 + 16) = v40;
  *(_QWORD *)(v28 + 24) = v6;
  v51 = sub_1001848AC;
  v52 = v28;
  aBlock = _NSConcreteStackBlock;
  v48 = 1107296256;
  v49 = sub_1004AB190;
  v50 = &unk_100609460;
  v30 = _Block_copy(&aBlock);
  swift_retain(v6);
  v44 = v29;
  static DispatchQoS.unspecified.getter(v44);
  v46 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v35, v39, v22, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v37, v5, v24, v30);
  _Block_release(v30);
  v25(v24, v22);
  v27(v5, v26);
  swift_release(v52);
  v44[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 2;
  v31._object = (void *)0x800000010054F300;
  v32._countAndFlagsBits = 0x3431386261376564;
  v32._object = (void *)0xE800000000000000;
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  logMilestone(tag:description:)(v32, v31);
  swift_release(v45);
  return swift_release(v6);
}

uint64_t sub_100146068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Swift::String v15;
  Swift::Bool v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD **v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v41 = a2;
  v38 = a1;
  v39 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v39);
  v2 = type metadata accessor for DIPError(0);
  v40 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)v36 - v5;
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v44 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.configureLoadPregeneratedAssessment.getter(v11);
  DIPSignpost.init(_:)(v9);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15._countAndFlagsBits = 0xD000000000000024;
  v15._object = (void *)0x800000010054F3A0;
  v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    v18 = defaultLogger()(v17);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.info.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Ignoring precomputed assessment due to user defaults setting", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v43);
  }
  else
  {
    v36[1] = v2;
    if (qword_10062F5B0 != -1)
      v17 = swift_once(&qword_10062F5B0, sub_100486FCC);
    v37 = v10;
    v23 = qword_100670828;
    v24 = *(_QWORD *)(v41 + 24);
    if (v24)
    {
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      swift_bridgeObjectRetain(v25);
    }
    else
    {
      v25 = 0xEB00000000454C42;
      v26 = 0x414C494156414E55;
    }
    v45 = _swiftEmptyArrayStorage;
    __chkstk_darwin(v17);
    v32 = v23;
    v33 = v26;
    v34 = v25;
    v35 = &v45;
    OS_dispatch_queue.sync<A>(execute:)(sub_100184A4C, &v36[-6], (char *)&type metadata for () + 8, v27);
    swift_bridgeObjectRelease(v25);
    v28 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments);
    *(_QWORD *)(v38 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments) = v45;
    swift_bridgeObjectRelease(v28);
    v29._countAndFlagsBits = 0xD000000000000037;
    v29._object = (void *)0x800000010054F3D0;
    v30._countAndFlagsBits = 0x6137643236366435;
    v30._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v30, v29);
    v10 = v37;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v13, v10);
}

uint64_t sub_100146574(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  _QWORD v173[5];
  char v174[8];

  v148 = a2;
  v160 = 0;
  v3 = type metadata accessor for DIPError(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100004828(&qword_100636840);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v140 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100636668);
  v9 = __chkstk_darwin(v8);
  v151 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (uint8_t *)&v140 - v11;
  v161 = type metadata accessor for Logger(0);
  v159 = *(_QWORD *)(v161 - 8);
  v13 = __chkstk_darwin(v161);
  v141 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v152 = (char *)&v140 - v15;
  v16 = type metadata accessor for DIPError.Code(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v149 = (char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v147 = (char *)&v140 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v140 - v22;
  v24 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v140 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for DIPSignpost(0);
  v154 = *(_QWORD *)(v155 - 8);
  v27 = __chkstk_darwin(v155);
  v29 = (char *)&v140 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DaemonSignposts.createClientGUIDFactory.getter(v27);
  v153 = v29;
  DIPSignpost.init(_:)(v26);
  v30 = swift_allocObject(&unk_100609498, 24, 7);
  *(_QWORD *)(v30 + 16) = a1;
  v150 = a1;
  v31 = sub_100004828((uint64_t *)&unk_100632610);
  v158 = (unint64_t)"Tiberius configure complete";
  runAsyncAndBlock<A>(file:function:line:_:)(&v162, 0xD00000000000001ELL, 0x800000010054D670, 0xD00000000000001ALL, 0x800000010054F320, 667, &unk_100636850, v30, v31);
  swift_release(v30);
  v32 = *((_QWORD *)&v162 + 1);
  v157 = v16;
  v156 = v17;
  if (!*((_QWORD *)&v162 + 1))
  {
    v146 = v6;
    v144 = v4;
    v145 = v3;
    v66 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
    v149 = v23;
    v66(v23, enum case for DIPError.Code.odnMissingProfile(_:), v16);
    v67 = sub_100004828((uint64_t *)&unk_1006325A0);
    v68 = sub_100004828((uint64_t *)&unk_100633440);
    v69 = *(_QWORD *)(v68 - 8);
    v70 = *(_QWORD *)(v69 + 72);
    v71 = *(unsigned __int8 *)(v69 + 80);
    v72 = (v71 + 32) & ~v71;
    v73 = swift_allocObject(v67, v72 + 2 * v70, v71 | 7);
    *(_OWORD *)(v73 + 16) = xmmword_1005208D0;
    v74 = (_QWORD *)(v73 + v72 + *(int *)(v68 + 48));
    v75 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    v76 = type metadata accessor for DIPError.PropertyKey(0);
    v77 = v148;
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 104);
    v78(v73 + v72, v75, v76);
    v79 = *(_QWORD *)(v77 + 16);
    v80 = *(_QWORD *)(v79 + 16);
    v81 = *(_QWORD *)(v79 + 24);
    v74[3] = &type metadata for String;
    *v74 = v80;
    v74[1] = v81;
    v82 = v73 + v72 + v70;
    v78(v82, enum case for DIPError.PropertyKey.spWorkflowID(_:), v76);
    v83 = *(_QWORD *)(v77 + 24);
    if (v83)
    {
      v84 = *(_QWORD *)(v83 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v83 + 24));
    }
    else
    {
      v84 = 0x414C494156414E55;
      v85 = 0xEB00000000454C42;
    }
    v3 = v145;
    v89 = v152;
    v97 = (uint64_t *)(v82 + *(int *)(v68 + 48));
    v97[3] = (uint64_t)&type metadata for String;
    *v97 = v84;
    v97[1] = v85;
    swift_bridgeObjectRetain(v81);
    v98 = sub_10011D314(v73);
    v99 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v100 = swift_allocError(v3, v99, 0, 0);
    v101 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054F340, 0, v149, 0, v98, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ALL, v158 | 0x8000000000000000, 676);
    defaultLogger()(v101);
    DIPRecordError(_:message:log:)(v100, 0, 0xE000000000000000, v89);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v89, v161);
    swift_errorRelease(v100);
    v34 = v144;
    v33 = v146;
    v35 = v160;
    v44 = (uint64_t)v151;
LABEL_14:
    v87 = v150;
    goto LABEL_15;
  }
  v33 = v6;
  v34 = v4;
  v35 = v160;
  sub_1001A5908(v162, *((uint64_t *)&v162 + 1), v12);
  if (v35)
  {
    v160 = v35;
    v146 = v6;
    v144 = v4;
    v145 = v3;
    v36 = swift_bridgeObjectRelease(v32);
    v37 = v141;
    v38 = defaultLogger()(v36);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.info.getter(v39, v40);
    v42 = os_log_type_enabled(v39, v41);
    v43 = v157;
    v44 = (uint64_t)v151;
    if (v42)
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "unexpected error getting augmented profile", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v141 = *(char **)(v159 + 8);
    ((void (*)(char *, uint64_t))v141)(v37, v161);
    (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v149, enum case for DIPError.Code.odnErrorDecodingProfile(_:), v43);
    v46 = sub_100004828((uint64_t *)&unk_1006325A0);
    v47 = sub_100004828((uint64_t *)&unk_100633440);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(_QWORD *)(v48 + 72);
    v50 = *(unsigned __int8 *)(v48 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(v46, v51 + 2 * v49, v50 | 7);
    *(_OWORD *)(v52 + 16) = xmmword_1005208D0;
    v53 = v52 + v51;
    v54 = (_QWORD *)(v53 + *(int *)(v47 + 48));
    v55 = enum case for DIPError.PropertyKey.inoWorkflowID(_:);
    v56 = type metadata accessor for DIPError.PropertyKey(0);
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104);
    v57(v53, v55, v56);
    v58 = v148;
    v59 = *(_QWORD *)(v148 + 16);
    v60 = *(_QWORD *)(v59 + 16);
    v61 = *(_QWORD *)(v59 + 24);
    v54[3] = &type metadata for String;
    *v54 = v60;
    v54[1] = v61;
    v62 = v53 + v49;
    v57(v62, enum case for DIPError.PropertyKey.spWorkflowID(_:), v56);
    v63 = *(_QWORD *)(v58 + 24);
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v63 + 24));
    }
    else
    {
      v64 = 0x414C494156414E55;
      v65 = 0xEB00000000454C42;
    }
    v3 = v145;
    v34 = v144;
    v90 = v160;
    v91 = (void (*)(char *, uint64_t))v141;
    v92 = (uint64_t *)(v62 + *(int *)(v47 + 48));
    v92[3] = (uint64_t)&type metadata for String;
    *v92 = v64;
    v92[1] = v65;
    swift_bridgeObjectRetain(v61);
    v93 = sub_10011D314(v52);
    v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v95 = swift_allocError(v3, v94, 0, 0);
    v96 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054F370, 0, v149, 0, v93, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ALL, v158 | 0x8000000000000000, 672);
    v89 = v152;
    defaultLogger()(v96);
    DIPRecordError(_:message:log:)(v95, 0, 0xE000000000000000, v89);
    swift_errorRelease(v90);
    v91(v89, v161);
    swift_errorRelease(v95);
    v35 = 0;
    v33 = v146;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v32);
  v86 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(uint8_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v12, 0, 1, v86);
  v87 = v150;
  v88 = (uint64_t)&v150[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile];
  swift_beginAccess(&v150[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile], &v162, 33, 0);
  sub_100184E1C((uint64_t)v12, v88, &qword_100636668);
  swift_endAccess(&v162);
  v89 = v152;
  v44 = (uint64_t)v151;
LABEL_15:
  v102 = (uint64_t)&v87[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile];
  swift_beginAccess(&v87[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile], v174, 0, 0);
  sub_100038B24(v102, v44, &qword_100636668);
  v103 = type metadata accessor for AugmentedProfile(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 48))(v44, 1, v103)
    || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v44, 1, v143))
  {
    sub_100008030(v44, &qword_100636668);
    v104 = 0;
  }
  else
  {
    v134 = v142;
    v135 = v140;
    v136 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v140, v44, v143);
    sub_100008030(v44, &qword_100636668);
    JWSSignedJSON.payload.getter(v136);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
    v137 = v169;
    v138 = v170;
    v139 = v171;
    v104 = v172;
    sub_1001849FC(v162, *((uint64_t *)&v162 + 1), v163, v164, v165, v166, v167, v168);
    swift_bridgeObjectRelease(v137);
    swift_bridgeObjectRelease(v138);
    swift_bridgeObjectRelease(v139);
  }
  v105 = swift_allocObject(&unk_1006094C0, 24, 7);
  *(_QWORD *)(v105 + 16) = v87;
  v173[3] = type metadata accessor for DeviceInformationProvider(0);
  v173[4] = &protocol witness table for DeviceInformationProvider;
  sub_100022234(v173);
  v106 = v87;
  DeviceInformationProvider.init()(v106);
  sub_1002104E4(v173, v104, (uint64_t)&unk_100636860, v105, &v162);
  if (v35)
  {
    v107 = v147;
    (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v147, enum case for DIPError.Code.internalError(_:), v157);
    swift_errorRetain(v35);
    v108 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v107, 0, v108, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ALL, v158 | 0x8000000000000000, 688);
    v109 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v110 = swift_allocError(v3, v109, 0, 0);
    v112 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 16))(v111, v33, v3);
    defaultLogger()(v112);
    DIPRecordError(_:message:log:)(v110, 0, 0xE000000000000000, v89);
    swift_errorRelease(v35);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v89, v161);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v3);
    swift_errorRelease(v110);
  }
  else
  {
    v113 = v163;
    v114 = v164;
    v115 = v165;
    v116 = v166;
    v117 = v167;
    v118 = v168;
    v119 = v169;
    v120 = v170;
    v121 = &v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
    v122 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
    v123 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 8];
    v124 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 16];
    v125 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 24];
    v126 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 32];
    v127 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 40];
    v128 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 48];
    v129 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 56];
    v130 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 64];
    v131 = *(_QWORD *)&v106[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory + 72];
    *(_OWORD *)v121 = v162;
    *((_QWORD *)v121 + 2) = v113;
    *((_QWORD *)v121 + 3) = v114;
    *((_QWORD *)v121 + 4) = v115;
    *((_QWORD *)v121 + 5) = v116;
    *((_QWORD *)v121 + 6) = v117;
    *((_QWORD *)v121 + 7) = v118;
    *((_QWORD *)v121 + 8) = v119;
    *((_QWORD *)v121 + 9) = v120;
    sub_10018343C(v122, v123, v124, v125, v126, v127, v128, v129, v130, v131);
  }
  v132 = v153;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v132, v155);
}

uint64_t sub_1001472B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1001472C8, 0, 0);
}

uint64_t sub_1001472C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = dword_1006446AC;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 40) = v3;
    *v3 = v0;
    v3[1] = sub_10014734C;
    return sub_1004F92EC();
  }
  else
  {
    v5 = *(_QWORD **)(v0 + 16);
    *v5 = 0;
    v5[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10014734C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  v4 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = a2;
  swift_task_dealloc(v4);
  swift_release(v5);
  return swift_task_switch(sub_1001473B0, 0, 0);
}

uint64_t sub_1001473B0()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 16) = *(_OWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001473C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_1001473DC, 0, 0);
}

uint64_t sub_1001473DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  *(_QWORD *)(v0 + 48) = v1;
  if (v1)
  {
    v2 = dword_1006446B4;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_100147468;
    return sub_1004FAD30();
  }
  else
  {
    swift_bridgeObjectRelease(0);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xE000000000000000);
  }
}

uint64_t sub_100147468(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v5 = v3[6];
  v4 = v3[7];
  v3[8] = a2;
  swift_task_dealloc(v4);
  swift_release(v5);
  return swift_task_switch(sub_1001474CC, 0, 0);
}

uint64_t sub_1001474CC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v2 = 0;
    v1 = 0xE000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100147518()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  v16 = defaultLogger()(v13);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "creating identity key ahead", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v21 = v20(v15, v8);
  v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (v22)
  {
    v23 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__baaDispatchGroup];
    v24 = swift_allocObject(&unk_100609358, 32, 7);
    *(_QWORD *)(v24 + 16) = v1;
    *(_QWORD *)(v24 + 24) = v22;
    aBlock[4] = sub_100184734;
    v42 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AB190;
    aBlock[3] = &unk_100609370;
    v25 = _Block_copy(aBlock);
    swift_retain_n(v22, 2);
    static DispatchQoS.unspecified.getter(v1);
    v40 = _swiftEmptyArrayStorage;
    v26 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_100004828((uint64_t *)&unk_1006308D0);
    v28 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v27, v28, v39, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(v23, v7, v4, v25);
    _Block_release(v25);
    swift_release(v22);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
    return swift_release(v42);
  }
  else
  {
    v31 = defaultLogger()(v21);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "unexpected error in createIdentityKeyAhead - workflow is nil", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    return v20(v12, v8);
  }
}

uint64_t sub_100147898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52[2];
  __int128 v53[2];
  _QWORD v54[6];
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v45 = a2;
  v46 = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = type metadata accessor for DIPError(0);
  v47 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Logger(0);
  v50 = *(_QWORD *)(v51 - 8);
  v6 = __chkstk_darwin(v51);
  v48 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(v55, v10);
  v11 = v56;
  v12 = v57;
  sub_10000806C(v55, v56);
  v41 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v11, v12);
  v40 = v9;
  v44 = v13;
  v43 = v4;
  v42 = v3;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
  v14 = v45;
  v15 = sub_1000552C8();
  sub_100169B64((uint64_t)v15, 0, 0, 0xF000000000000000, (uint64_t)v55);
  swift_bridgeObjectRelease(v15);
  sub_10002581C((uint64_t)v55, (uint64_t)v53);
  v16 = (_QWORD *)swift_allocObject(&unk_1006093A8, 80, 7);
  sub_100008018(v53, (uint64_t)(v16 + 2));
  v17 = v41;
  v16[7] = v14;
  v16[8] = v17;
  v18 = v44;
  v16[9] = v44;
  swift_retain(v14);
  swift_bridgeObjectRetain(v18);
  v19 = sub_100004828(&qword_100636520);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000019, 0x800000010054F250, 715, &unk_100636828, v16, v19);
  v39 = (unint64_t)"c-entitlement-checks";
  swift_release(v16);
  v20 = v46;
  v21 = v46 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey;
  swift_beginAccess(v46 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey, v53, 33, 0);
  sub_100184E1C((uint64_t)v54, v21, &qword_100636508);
  swift_endAccess(v53);
  v22._countAndFlagsBits = 0xD00000000000002BLL;
  v22._object = (void *)0x800000010054F2A0;
  v23._countAndFlagsBits = 0x6633356232316665;
  v23._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v23, v22);
  if (*(_BYTE *)(v20 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    v24 = swift_bridgeObjectRelease(v44);
    v25 = v40;
    v26 = defaultLogger()(v24);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.info.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Skipping sp identity key generation for Tiberius", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v51);
  }
  else
  {
    v32 = sub_10005543C();
    sub_100169B64((uint64_t)v32, 0, 0, 0xF000000000000000, (uint64_t)v54);
    swift_bridgeObjectRelease(v32);
    sub_10002581C((uint64_t)v54, (uint64_t)v52);
    v33 = (_QWORD *)swift_allocObject(&unk_1006093D0, 80, 7);
    sub_100008018(v52, (uint64_t)(v33 + 2));
    v34 = v41;
    v33[7] = v14;
    v33[8] = v34;
    v33[9] = v44;
    swift_retain(v14);
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000019, v39 | 0x8000000000000000, 734, &unk_100636838, v33, v19);
    swift_release(v33);
    v35 = v20 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey;
    swift_beginAccess(v20 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey, v52, 33, 0);
    sub_100184E1C((uint64_t)v53, v35, &qword_100636508);
    swift_endAccess(v52);
    v36._countAndFlagsBits = 0xD00000000000002ALL;
    v36._object = (void *)0x800000010054F2D0;
    v37._countAndFlagsBits = 0x3434336139663634;
    v37._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v37, v36);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v54);
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
}

uint64_t sub_1001480F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPKeyAlgorithm(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeystoreKeyType(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100148180, 0, 0);
}

uint64_t sub_100148180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 32);
  sub_10000806C(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v0 + 104) = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for KeystoreKeyType.temporary(_:), v3);
  v9 = enum case for DIPKeyAlgorithm.ECC256(_:);
  v10 = type metadata accessor for DIPKeyAlgorithm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v4, v9, v10);
  v11 = async function pointer to DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)[1];
  swift_bridgeObjectRetain(v8);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 112) = v12;
  *v12 = v0;
  v12[1] = sub_1001482A4;
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(*(_QWORD *)(v0 + 16), v7, v8, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), 0);
}

uint64_t sub_1001482A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*v1 + 104);
  v2 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v7 = *(_QWORD *)(*v1 + 72);
  v6 = *(_QWORD *)(*v1 + 80);
  v8 = *(_QWORD *)(*v1 + 56);
  v9 = *(_QWORD *)(*v1 + 64);
  v10 = *v1;
  *(_QWORD *)(v10 + 120) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    return swift_task_switch(sub_1001850F4, 0, 0);
  v12 = *(_QWORD *)(v10 + 72);
  swift_task_dealloc(*(_QWORD *)(v10 + 96));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_10014838C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPKeyAlgorithm(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeystoreKeyType(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10014841C, 0, 0);
}

uint64_t sub_10014841C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 32);
  sub_10000806C(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  if (v2)
  {
    v6 = *(_QWORD *)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 72);
    v8 = enum case for KeystoreKeyType.temporary(_:);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 104);
    v10 = swift_bridgeObjectRetain(v7);
    v9(v4, v8, v5, v10);
    v11 = v6;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 104))(*(_QWORD *)(v0 + 96), enum case for KeystoreKeyType.temporary(_:), *(_QWORD *)(v0 + 80));
    v11 = 0x414C494156414E55;
    v7 = 0xEB00000000454C42;
  }
  *(_QWORD *)(v0 + 104) = v7;
  v12 = *(_QWORD *)(v0 + 72);
  v13 = enum case for DIPKeyAlgorithm.ECC256(_:);
  v14 = type metadata accessor for DIPKeyAlgorithm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)[1]);
  *(_QWORD *)(v0 + 112) = v15;
  *v15 = v0;
  v15[1] = sub_1001485A0;
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(*(_QWORD *)(v0 + 16), v11, v7, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), 0);
}

uint64_t sub_1001485A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*v1 + 104);
  v2 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v7 = *(_QWORD *)(*v1 + 72);
  v6 = *(_QWORD *)(*v1 + 80);
  v8 = *(_QWORD *)(*v1 + 56);
  v9 = *(_QWORD *)(*v1 + 64);
  v10 = *v1;
  *(_QWORD *)(v10 + 120) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    return swift_task_switch(sub_100148688, 0, 0);
  v12 = *(_QWORD *)(v10 + 72);
  swift_task_dealloc(*(_QWORD *)(v10 + 96));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100148688()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100148740()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t result;
  void *v6;
  NSString v7;
  id v8;
  unsigned __int8 v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3._object = (void *)0x800000010054F220;
  v3._countAndFlagsBits = 0xD000000000000024;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
    return 1;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__connection);
  if (result)
  {
    v6 = (void *)result;
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "valueForEntitlement:", v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(v10, v8);

      swift_unknownObjectRelease(v8);
    }
    else
    {

      memset(v10, 0, sizeof(v10));
    }
    sub_1000A1F54((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_1006371E0);
    if (v12)
    {
      if ((swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
        return v9;
    }
    else
    {
      sub_100008030((uint64_t)v11, (uint64_t *)&unk_1006371E0);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001488A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v16 - 8);
  v7 = __chkstk_darwin(v16);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10062F480 != -1)
    v7 = swift_once(&qword_10062F480, sub_1000F2CD0);
  v10 = qword_100670290;
  __chkstk_darwin(v7);
  *(&v16 - 2) = a1;
  *(&v16 - 1) = a2;
  swift_retain(v10);
  v11 = sub_100004828(&qword_100636808);
  OS_dispatch_queue.sync<A>(execute:)(sub_100184700, &v16 - 4, v11, v12);
  if (v3)
    return swift_release(v10);
  if (!v18)
  {
    v14 = sub_100008030((uint64_t)&v17, &qword_100636808);
    v15 = static DispatchWorkItemFlags.barrier.getter(v14);
    __chkstk_darwin(v15);
    *(&v16 - 2) = a1;
    *(&v16 - 1) = a2;
    sub_100004828((uint64_t *)&unk_100636810);
    OS_dispatch_queue.sync<A>(flags:execute:)(v9, sub_100184718);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v16);
  }
  sub_100008018(&v17, v19);
  return swift_release(v10);
}

uint64_t sub_100148A94(void *a1, char *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  id v9;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  char v48[24];

  v8 = (unint64_t)a1;
  v9 = objc_msgSend(a1, "page");
  v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages);
  *(_QWORD *)&v11 = swift_beginAccess(v10, v48, 0, 0).n128_u64[0];
  v12 = *v10;
  if ((unint64_t)*v10 >> 62)
  {
    if (v12 < 0)
      v19 = *v10;
    else
      v19 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v10);
    v20 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v12);
    if ((uint64_t)v9 < v20)
      goto LABEL_3;
  }
  else if ((uint64_t)v9 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_beginAccess(v10, v47, 33, 0);
    v8 = *v10;
    a4 = a2;
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v8);
    *v10 = v8;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v8 & 0x8000000000000000) != 0
      || (v8 & 0x4000000000000000) != 0)
    {
      v8 = sub_100424480(v8);
      *v10 = v8;
    }
    if ((a3 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) > a3)
    {
      v14 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20);
      *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a3 + 0x20) = a4;

      specialized Array._endMutation()(v15);
      swift_endAccess(v47);
      v8 = a3 + 1;
      a4 = *v10;
      if ((*v10 & 0xC000000000000001) == 0)
      {
        v16 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v8 < v16)
        {
          v17 = *(void **)(a4 + 8 * v8 + 32);
          v18 = v17;
          return (uint64_t)v17;
        }
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      swift_bridgeObjectRetain(*v10);
      goto LABEL_56;
    }
    __break(1u);
    goto LABEL_51;
  }
  v9 = objc_msgSend((id)v8, "page", v11);
  v12 = *v10;
  if (!((unint64_t)*v10 >> 62))
  {
    v21 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_18;
  }
LABEL_51:
  if (v12 < 0)
    v45 = v12;
  else
    v45 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v21 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease(v12);
LABEL_18:
  if (v9 != (id)v21)
  {
    swift_beginAccess(v10, v47, 33, 0);
    a3 = a2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a3);
    a2 = *(char **)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v16 = *(_QWORD *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if ((unint64_t)a2 < v16 >> 1)
      goto LABEL_35;
    goto LABEL_60;
  }
  swift_beginAccess(v10, v47, 33, 0);
  v22 = *v10;
  a2 = a2;
  v23 = swift_isUniquelyReferenced_nonNull_bridgeObject(v22);
  *v10 = v22;
  if (!v23 || v22 < 0 || (v22 & 0x4000000000000000) != 0)
  {
    v22 = sub_100424480(v22);
    *v10 = v22;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_58;
  v16 = v22 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) > a3)
  {
    v24 = v16 + 8 * a3;
    v25 = *(void **)(v24 + 32);
    *(_QWORD *)(v24 + 32) = a2;

    specialized Array._endMutation()(v26);
    swift_endAccess(v47);
    v27 = objc_msgSend((id)v8, "page");
    v28 = (uint64_t)sub_100050960();
    v29 = v28;
    if ((unint64_t)v28 >> 62)
    {
      if (v28 >= 0)
        v28 &= 0xFFFFFFFFFFFFFF8uLL;
      v30 = _CocoaArrayWrapper.endIndex.getter(v28);
    }
    else
    {
      v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v29);
    if (v27 == (id)v30)
      return 0;
    v31 = *(_QWORD *)(a4 + 6048);
    v8 = v31 - 1;
    if (__OFSUB__(v31, 1))
    {
      __break(1u);
      goto LABEL_68;
    }
    v32 = (unint64_t)sub_100050960();
    a4 = v32;
    if ((v32 & 0xC000000000000001) == 0)
    {
      if ((v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v8 < *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v33 = *(id *)(v32 + 8 * v8 + 32);
LABEL_33:
        v17 = v33;
        swift_bridgeObjectRelease(a4);
        return (uint64_t)v17;
      }
      __break(1u);
      goto LABEL_74;
    }
LABEL_56:
    v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a4);
    goto LABEL_33;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, a2 + 1, 1);
LABEL_35:
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a2, a3);
  specialized Array._endMutation()(v34);
  swift_endAccess(v47);
  v35 = objc_msgSend((id)v8, "page");
  v36 = (uint64_t)sub_100050960();
  v37 = v36;
  if ((unint64_t)v36 >> 62)
  {
    if (v36 >= 0)
      v36 &= 0xFFFFFFFFFFFFFF8uLL;
    v38 = _CocoaArrayWrapper.endIndex.getter(v36);
  }
  else
  {
    v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v37);
  if ((uint64_t)v35 >= v38)
    return 0;
  v30 = *(_QWORD *)(a4 + 6048);
  v29 = (uint64_t)sub_100050960();
  if (!((unint64_t)v29 >> 62))
  {
    v39 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_40;
  }
LABEL_68:
  if (v29 < 0)
    v46 = v29;
  else
    v46 = v29 & 0xFFFFFFFFFFFFFF8;
  v39 = _CocoaArrayWrapper.endIndex.getter(v46);
LABEL_40:
  swift_bridgeObjectRelease(v29);
  if (v30 >= v39)
    return 0;
  v30 = *(_QWORD *)(a4 + 6048);
  result = (uint64_t)sub_100050960();
  v8 = result;
  if ((result & 0xC000000000000001) == 0)
  {
    if (v30 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v30 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v41 = *(id *)(result + 8 * v30 + 32);
      goto LABEL_45;
    }
    __break(1u);
    goto LABEL_77;
  }
LABEL_74:
  v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v8);
LABEL_45:
  v17 = v41;
  result = swift_bridgeObjectRelease(v8);
  v42 = *(_QWORD *)(a4 + 6048);
  v43 = __OFADD__(v42, 1);
  v44 = v42 + 1;
  if (!v43)
  {
    *(_QWORD *)(a4 + 6048) = v44;
    return (uint64_t)v17;
  }
LABEL_77:
  __break(1u);
  return result;
}

void sub_100148F24(_BYTE *a1, void *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v60 = (char *)&v54 - v12;
  if (*a1 != 1)
    goto LABEL_24;
  v13 = objc_msgSend(a2, "attributes");
  v14 = sub_10001CFF8(0, &qword_1006323A0, DIAttribute_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v47 = v15;
    else
      v47 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v17 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v15);
    if (v17)
      goto LABEL_4;
LABEL_23:
    v11 = swift_bridgeObjectRelease(v15);
    goto LABEL_24;
  }
  v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_23;
LABEL_4:
  if (v17 < 1)
  {
    __break(1u);
    return;
  }
  v55 = a3;
  v56 = v10;
  v18 = 0;
  v19 = (uint64_t *)&a3[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  v62 = v15 & 0xC000000000000001;
  *(_QWORD *)&v16 = 136446210;
  v58 = v16;
  v57 = (char *)&type metadata for Any + 8;
  v20 = v60;
  v63 = v17;
  v64 = v15;
  v59 = v6;
  do
  {
    if (v62)
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
    else
      v21 = *(id *)(v15 + 8 * v18 + 32);
    v22 = v21;
    v23 = objc_msgSend(v21, "identifier");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    swift_beginAccess(v19, v66, 33, 0);
    v27 = *v19;
    swift_bridgeObjectRetain(*v19);
    v28 = sub_1004A8604(v24, v26);
    LOBYTE(v24) = v29;
    swift_bridgeObjectRelease(v27);
    if ((v24 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
      v31 = *v19;
      v65 = *v19;
      *v19 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10012ADE4();
        v31 = v65;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * v28 + 8));
      v32 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v28);
      sub_1004806D0(v28, v31);
      v33 = *v19;
      *v19 = v31;
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v33);
      swift_endAccess(v66);
      v34 = swift_release(v32);
      defaultLogger()(v34);
      v35 = v22;
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.debug.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v66[0] = v61;
        *(_DWORD *)v38 = v58;
        v39 = objc_msgSend(v35, "identifier");
        v40 = v7;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v43 = v42;

        v20 = v60;
        v44 = v41;
        v7 = v40;
        *(_QWORD *)(v38 + 4) = sub_1000E3AC8(v44, v43, v66);

        v45 = v43;
        v6 = v59;
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "removed cached value for %{public}s", (uint8_t *)v38, 0xCu);
        v46 = v61;
        swift_arrayDestroy(v61, 1, v57);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    }
    else
    {
      swift_endAccess(v66);

      swift_bridgeObjectRelease(v26);
    }
    v15 = v64;
    ++v18;
  }
  while (v63 != v18);
  v11 = swift_bridgeObjectRelease(v64);
  a3 = v55;
  v10 = v56;
LABEL_24:
  defaultLogger()(v11);
  v48 = a3;
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.debug.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = v10;
    *(_DWORD *)v51 = 134349056;
    v53 = (char *)v48 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes;
    swift_beginAccess((char *)v48 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes, v66, 0, 0);
    v65 = *(_QWORD *)(*(_QWORD *)v53 + 16);
    v10 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v51 + 4);

    _os_log_impl((void *)&_mh_execute_header, v49, v50, "submitted attr count %{public}ld", v51, 0xCu);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {

    v49 = v48;
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100149454(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  char v89;
  char v90;
  _QWORD *v91;
  unint64_t *v92;
  uint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  SecCertificateRef v109;
  uint64_t v110;
  SecCertificateRef v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  void *v120;
  id v121;
  void *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  unint64_t v140;
  char v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v150;
  unint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  char v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  Swift::String v172;
  _QWORD *v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t result;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  void *v210;
  unint64_t v211;
  Class isa;
  id v213;
  id v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  unint64_t v235;
  Swift::String v236;
  uint64_t v237;
  _QWORD *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  Swift::String v245;
  uint64_t v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  char *v256;
  uint64_t v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char *object;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t countAndFlagsBits;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  __int128 v282[2];
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;

  v275 = a4;
  v274 = a2;
  v263 = sub_100004828(&qword_1006367C0);
  v262 = *(_QWORD *)(v263 - 8);
  __chkstk_darwin(v263);
  v8 = (char *)&v254 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = type metadata accessor for RecipientEncryptionCertificate(0);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v267 = (uint64_t)&v254 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v254 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v272 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  object = (char *)&v254 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = v4;
  v16 = sub_10014C6D4();
  if (!v17)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.invalidSPURL(_:), v10);
    v22 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = (id)swift_allocError(v23, v24, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000055, 0x800000010054F000, 0, v13, 0, v22, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1145);
    return (uint64_t)v25;
  }
  v18 = v17;
  v269 = v10;
  v74 = *(_BYTE *)(a1 + 48) == 1;
  v264 = v14;
  v261 = a1;
  if (v74)
  {
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(void **)(a1 + 40);
    *(_QWORD *)&v283 = v16;
    *((_QWORD *)&v283 + 1) = v17;
    swift_bridgeObjectRetain(v17);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    v271 = *((_QWORD *)&v283 + 1);
    v26 = v283;
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    v26 = *(_QWORD *)(a1 + 32);
    v271 = *(_QWORD *)(a1 + 40);
    swift_bridgeObjectRetain(v271);
  }
  v27 = *(void **)(v276 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService);
  if (!v27)
  {
    swift_bridgeObjectRelease(v271);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.Code.unexpectedDaemonState(_:), v269);
    v98 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v99 = type metadata accessor for DIPError(0);
    v100 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = (id)swift_allocError(v99, v100, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054F090, 0, v13, 0, v98, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1150);
    return (uint64_t)v25;
  }
  v257 = v26;
  v258 = v27;
  v28 = sub_1000550B8();
  v280 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v279 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v29 = v274[2];
  v273 = v13;
  v259 = v11;
  v256 = v8;
  if (!v29)
  {
    v97 = v28;
LABEL_67:
    swift_bridgeObjectRelease(v97);
    if (*(_QWORD *)(v280 + 16))
    {
      v101 = v261;
      v102 = v272;
      v103 = object;
      v104 = v264;
      (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(object, v261 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm, v264);
      v105 = (*(uint64_t (**)(char *, uint64_t))(v102 + 88))(v103, v104);
      v106 = v105;
      if ((_DWORD)v105 == enum case for EncryptionParamsAlgorithmIdentifier.EC_v1_ASN1(_:))
      {
        v107 = *(_QWORD *)(v101 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
        if (v107)
        {
          v108 = *(_QWORD *)(v101 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
          v109 = createCertificateFromString(_:)(*(Swift::String *)(&v107 - 1));
          if (!v110)
          {
            v111 = v109;
            v112 = type metadata accessor for DIPECIESSessionECV1(0);
            swift_allocObject(v112, *(unsigned int *)(v112 + 48), *(unsigned __int16 *)(v112 + 52));
            v209 = DIPECIESSessionECV1.init(_:)(0);
            v274 = 0;
            v210 = (void *)objc_opt_self(NSJSONSerialization);
            v211 = v280;
            swift_bridgeObjectRetain(v280);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v211);
            *(_QWORD *)&v283 = 0;
            v213 = objc_msgSend(v210, "dataWithJSONObject:options:error:", isa, 1, &v283);

            v214 = (id)v283;
            if (!v213)
            {
              v228 = v214;
              swift_bridgeObjectRelease(v271);
              v229 = _convertNSErrorToError(_:)(v228);

              swift_willThrow(v230);
              v110 = v229;

              swift_release(v209);
              goto LABEL_128;
            }
            v215 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v213);
            v217 = v216;

            v110 = (uint64_t)v274;
            v218 = dispatch thunk of DIPECIESSessionECV1.encrypt(_:_:_:)(v215, v217, v111, 0);
            if (v110)
            {
              swift_bridgeObjectRelease(v271);
              sub_100007F8C(v215, v217);

              swift_release(v209);
              v13 = v273;
LABEL_128:
              v113 = v269;
              goto LABEL_121;
            }
            v231 = v221;
            v281 = v220;
            v274 = 0;
            sub_100007F8C(v218, v219);
            v232 = DIPSecCertificateCopySubjectPublicKeyInfoSHA256Digest(v111);
            v278 = v231;
            if (!v232)
            {
              swift_bridgeObjectRelease(v271);
              v247 = v273;
              (*(void (**)(char *, _QWORD, uint64_t))(v259 + 104))(v273, enum case for DIPError.Code.internalError(_:), v269);
              v248 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
              v249 = type metadata accessor for DIPError(0);
              v250 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              v251 = swift_allocError(v249, v250, 0, 0);
              v252 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003FLL, 0x800000010054F1E0, 0, v247, 0, v248, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1192);
              swift_willThrow(v252);
              v110 = v251;
              sub_100007F8C((uint64_t)v281, v278);
              v253 = v217;
              v13 = v247;
              v113 = v269;
              sub_100007F8C(v215, v253);

              swift_release(v209);
              goto LABEL_121;
            }
            v233 = (void *)v232;
            v234 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v232);
            v268 = v235;

            swift_bridgeObjectRetain(v279);
            v236 = Data.base64EncodedString(options:)(0);
            countAndFlagsBits = v236._countAndFlagsBits;
            object = (char *)v236._object;
            v237 = type metadata accessor for InputValidationRequestV1(0);
            v290 = v237;
            v291 = sub_100004790(&qword_1006367C8, type metadata accessor for InputValidationRequestV1, (uint64_t)&unk_10052B558);
            v238 = sub_100022234(&v289);
            v239 = (char *)v238 + *(int *)(v237 + 24);
            v240 = v272;
            v241 = v106;
            v242 = v264;
            (*(void (**)(char *, uint64_t, uint64_t))(v272 + 104))(v239, v241, v264);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v239, 0, 1, v242);
            v243 = v234;
            v244 = v268;
            v245 = Data.base16EncodedString()();
            sub_100007F8C(v243, v244);
            sub_100007F8C((uint64_t)v281, v278);
            sub_100007F8C(v215, v217);

            swift_release(v209);
            v246 = countAndFlagsBits;
            *v238 = v279;
            v238[1] = v246;
            v238[2] = object;
            *(Swift::String *)((char *)v238 + *(int *)(v237 + 28)) = v245;
            v13 = v273;
            v119 = v274;
            goto LABEL_74;
          }
          swift_bridgeObjectRelease(v271);
          v113 = v269;
        }
        else
        {
          swift_bridgeObjectRelease(v271);
          v113 = v269;
          (*(void (**)(char *, _QWORD, uint64_t))(v259 + 104))(v13, enum case for DIPError.Code.serverResponseInconsistent(_:), v269);
          v183 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v184 = type metadata accessor for DIPError(0);
          v185 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v186 = swift_allocError(v184, v185, 0, 0);
          v187 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010054F1A0, 0, v13, 0, v183, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1184);
          swift_willThrow(v187);
          v110 = v186;
        }
LABEL_121:
        (*(void (**)(char *, _QWORD, uint64_t))(v259 + 104))(v13, enum case for DIPError.Code.internalError(_:), v113);
        v198 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v199 = type metadata accessor for DIPError(0);
        v200 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v25 = (id)swift_allocError(v199, v200, 0, 0);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010054F130, 0, v13, 0, v198, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1205);

        swift_errorRelease(v110);
LABEL_122:
        swift_bridgeObjectRelease(v280);
        swift_bridgeObjectRelease(v279);
        return (uint64_t)v25;
      }
      if ((_DWORD)v105 != enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:))
      {
        v164 = enum case for EncryptionParamsAlgorithmIdentifier.EC_v3_SH(_:);
        swift_bridgeObjectRelease(v271);
        (*(void (**)(char *, _QWORD, uint64_t))(v259 + 104))(v13, enum case for DIPError.Code.internalError(_:), v269);
        v165 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v166 = type metadata accessor for DIPError(0);
        v167 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v168 = swift_allocError(v166, v167, 0, 0);
        if ((_DWORD)v106 == v164)
        {
          v169 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010054F160, 0, v13, 0, v165, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1200);
          swift_willThrow(v169);
        }
        else
        {
          v188 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x800000010054F100, 0, v13, 0, v165, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1202);
          swift_willThrow(v188);
          (*(void (**)(char *, uint64_t))(v272 + 8))(v103, v104);
        }
        v113 = v269;
        v110 = v168;
        goto LABEL_121;
      }
      v126 = *(void **)(v101 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
      if (v126)
      {
        v127 = *(_QWORD *)(v101 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
        v128 = v126;
      }
      else
      {
        v195 = *(_QWORD *)(v275 + 24);
        if (v195
          && (v196 = (uint64_t *)(v195 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate),
              (v128 = (void *)v196[1]) != 0))
        {
          v127 = *v196;
          swift_bridgeObjectRetain(v196[1]);
        }
        else
        {
          swift_bridgeObjectRelease(0);
          v128 = (void *)0xE700000000000000;
          v127 = 0x746C7561666564;
        }
      }
      swift_bridgeObjectRetain(v126);
      v197 = v267;
      v119 = 0;
      sub_100054D9C(v127, v128, v267);
      swift_bridgeObjectRelease(v128);
      v202 = v280;
      *(_QWORD *)&v282[0] = v280;
      v203 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v203, *(unsigned int *)(v203 + 48), *(unsigned __int16 *)(v203 + 52));
      swift_bridgeObjectRetain(v202);
      v204 = __DataStorage.init(length:)(65);
      v285 = 0;
      v283 = 0u;
      v284 = 0u;
      v205 = sub_100004828(&qword_1006367E8);
      v206 = sub_1001846A0(&qword_1006367F0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
      v207 = sub_1001846A0(&qword_1006367F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
      v208 = v256;
      createEncryptedDataContainer<A>(with:to:senderSigningKey:encryptor:)(v282, v197, 0x4100000000, v204 | 0x4000000000000000, &v283, v205, v206, v207);
      swift_release(v204);
      sub_100008030((uint64_t)&v283, &qword_100636598);
      swift_bridgeObjectRelease(*(_QWORD *)&v282[0]);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v197, v266);
      v222 = type metadata accessor for InputValidationRequestV3(0);
      v290 = v222;
      v291 = sub_100004790(&qword_100636800, type metadata accessor for InputValidationRequestV3, (uint64_t)&unk_10052B53C);
      v223 = sub_100022234(&v289);
      v224 = (char *)v223 + *(int *)(v222 + 20);
      v225 = v262;
      v226 = v263;
      (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v224, v208, v263);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v225 + 56))(v224, 0, 1, v226);
      v227 = v279;
      *v223 = v279;
      v118 = swift_bridgeObjectRetain(v227).n128_u64[0];
    }
    else
    {
      v114 = type metadata accessor for InputValidationRequestV1(0);
      v290 = v114;
      v291 = sub_100004790(&qword_1006367C8, type metadata accessor for InputValidationRequestV1, (uint64_t)&unk_10052B558);
      v115 = (char *)sub_100022234(&v289);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v272 + 56))(&v115[*(int *)(v114 + 24)], 1, 1, v264);
      *((_QWORD *)v115 + 1) = 0;
      *((_QWORD *)v115 + 2) = 0;
      v116 = v279;
      *(_QWORD *)v115 = v279;
      v117 = &v115[*(int *)(v114 + 28)];
      *(_QWORD *)v117 = 0;
      *((_QWORD *)v117 + 1) = 0;
      v118 = swift_bridgeObjectRetain(v116).n128_u64[0];
      v119 = 0;
    }
LABEL_74:
    v120 = *(void **)(v276 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
    if (v120 && (v121 = objc_msgSend(v120, "httpHeaders", *(double *)&v118)) != 0)
    {
      v122 = v121;
      v123 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v121, &type metadata for String, &type metadata for String, &protocol witness table for String);

      *(_QWORD *)&v283 = &_swiftEmptyDictionarySingleton;
      v124 = v13;
      if (v123)
      {
        swift_bridgeObjectRetain(v123);
        sub_10013EA00(v125, &v283, "sp headers from context: %s = %s");
        swift_bridgeObjectRelease(v123);
      }
    }
    else
    {
      v124 = v13;
      v123 = 0;
      *(_QWORD *)&v283 = &_swiftEmptyDictionarySingleton;
    }
    v274 = v119;
    v129 = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
    v130 = v129;
    v131 = *(_QWORD *)(v129 + 16);
    if (v131)
    {
      v276 = v123;
      swift_bridgeObjectRetain(v129);
      v132 = 0;
      v281 = &_swiftEmptyDictionarySingleton;
      v278 = v130;
      countAndFlagsBits = v131;
      while (1)
      {
        v133 = *(void **)(v130 + 8 * v132 + 32);
        v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
        v136 = v135;
        v137 = v283;
        if (*(_QWORD *)(v283 + 16))
        {
          v138 = v134;
          v139 = v133;
          v140 = sub_1004A8604(v138, v136);
          if ((v141 & 1) != 0)
          {
            v142 = (uint64_t *)(*(_QWORD *)(v137 + 56) + 16 * v140);
            v143 = *v142;
            v144 = v142[1];
            swift_bridgeObjectRetain(v144);
            swift_bridgeObjectRelease(v136);
            v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
            v147 = v146;
            v148 = v281;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v281);
            *(_QWORD *)&v282[0] = v148;
            v151 = sub_1004A8604(v145, v147);
            v152 = v148[2];
            v153 = (v150 & 1) == 0;
            v154 = v152 + v153;
            if (__OFADD__(v152, v153))
              goto LABEL_133;
            v155 = v150;
            if (v148[3] >= v154)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_10012973C();
            }
            else
            {
              sub_100123948(v154, isUniquelyReferenced_nonNull_native);
              v156 = sub_1004A8604(v145, v147);
              if ((v155 & 1) != (v157 & 1))
                goto LABEL_139;
              v151 = v156;
            }
            v158 = *(_QWORD **)&v282[0];
            v281 = *(_QWORD **)&v282[0];
            if ((v155 & 1) != 0)
            {
              v159 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)&v282[0] + 56) + 16 * v151);
              swift_bridgeObjectRelease(v159[1]);
              *v159 = v143;
              v159[1] = v144;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)&v282[0] + 8 * (v151 >> 6) + 64) |= 1 << v151;
              v160 = (uint64_t *)(v158[6] + 16 * v151);
              *v160 = v145;
              v160[1] = v147;
              v161 = (_QWORD *)(v158[7] + 16 * v151);
              *v161 = v143;
              v161[1] = v144;
              v162 = v158[2];
              v67 = __OFADD__(v162, 1);
              v163 = v162 + 1;
              if (v67)
                goto LABEL_136;
              v158[2] = v163;
              swift_bridgeObjectRetain(v147);
            }

            swift_bridgeObjectRelease(v147);
            swift_bridgeObjectRelease(0x8000000000000000);
            v124 = v273;
            v130 = v278;
            v131 = countAndFlagsBits;
            goto LABEL_86;
          }

        }
        swift_bridgeObjectRelease(v136);
LABEL_86:
        if (v131 == ++v132)
        {
          swift_bridgeObjectRelease(v130);
          v123 = v276;
          goto LABEL_104;
        }
      }
    }
    v281 = &_swiftEmptyDictionarySingleton;
LABEL_104:
    swift_bridgeObjectRelease(v130);
    v170 = v283;
    swift_bridgeObjectRelease(v123);
    swift_bridgeObjectRelease(v170);
    v171 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v172._countAndFlagsBits = 0xD000000000000025;
    v172._object = (void *)0x800000010054F0B0;
    LOBYTE(v170) = NSUserDefaults.internalBool(forKey:)(v172);

    if ((v170 & 1) == 0)
    {
      sub_10002581C((uint64_t)&v289, (uint64_t)v282);
      v173 = (_QWORD *)swift_allocObject(&unk_100609330, 96, 7);
      v174 = v258;
      v175 = v257;
      v173[2] = v258;
      v173[3] = v175;
      v173[4] = v271;
      sub_100008018(v282, (uint64_t)(v173 + 5));
      v176 = v275;
      v173[10] = v281;
      v173[11] = v176;
      v177 = v174;
      swift_retain(v176);
      v178 = sub_100004828(&qword_1006367E0);
      v179 = v274;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD00000000000002BLL, 0x800000010054F060, 1221, &unk_1006367D8, v173, v178);
      if (v179)
      {
        swift_release(v173);
        (*(void (**)(char *, _QWORD, uint64_t))(v259 + 104))(v124, enum case for DIPError.Code.internalError(_:), v269);
        swift_errorRetain(v179);
        v180 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v181 = type metadata accessor for DIPError(0);
        v182 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v25 = (id)swift_allocError(v181, v182, 0, 0);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x800000010054F0E0, v179, v124, 0, v180, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002BLL, 0x800000010054F060, 1228);
        swift_errorRelease(v179);

        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v289);
      }
      else
      {
        swift_release(v173);
        v189 = v283;
        v190 = v284;
        v191 = v285;
        v192 = v286;
        v193 = v287;
        v194 = v288;
        if (*((_QWORD *)&v284 + 1) == 1)
        {

          v25 = 0;
        }
        else
        {
          sub_100184660(v283, *((uint64_t *)&v283 + 1), v284, *((uint64_t *)&v284 + 1), v285, v286, v287, v288);
          v25 = sub_100174F28(v189, BYTE8(v189) & 1, v193, v194, v190, *((uint64_t *)&v190 + 1), v191, v192);
          sub_100184620(v189, *((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191, v192, v193, v194);

        }
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v289);
        sub_100184620(v189, *((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191, v192, v193, v194);
      }
      goto LABEL_122;
    }

    swift_bridgeObjectRelease(v281);
    swift_bridgeObjectRelease(v271);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v289);
    swift_bridgeObjectRelease(v280);
    swift_bridgeObjectRelease(v279);
    return 0;
  }
  v30 = (uint64_t)(v274 + 4);
  swift_bridgeObjectRetain(v274);
  v31 = 0;
  v255 = v28 + 7;
  v281 = v28;
  v278 = v29;
  countAndFlagsBits = v30;
  v260 = a3;
  while (1)
  {
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_10;
    v32 = (uint64_t *)(v30 + 16 * v31);
    v34 = *v32;
    v33 = v32[1];
    swift_bridgeObjectRetain_n(v33, 2);
    v35 = sub_1004A8604(v34, v33);
    if ((v36 & 1) != 0)
      break;
    swift_bridgeObjectRelease_n(v33, 2);
LABEL_10:
    if (++v31 == v29)
    {
      swift_bridgeObjectRelease(v28);
      v13 = v273;
      v97 = v274;
      goto LABEL_67;
    }
  }
  v37 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v35);
  swift_retain(v37);
  swift_bridgeObjectRelease(v33);
  if ((*(_BYTE *)(v37 + 16) & 1) != 0 && (*(_BYTE *)(v37 + 17) & 1) == 0)
  {
    swift_bridgeObjectRelease(v33);
    swift_release(v37);
    goto LABEL_10;
  }
  v38 = v28[2];
  if (v38)
  {
    v39 = v281[4];
    v40 = v281[5];
    if (v39 == v34 && v40 == v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v34, v33, 0) & 1) != 0)
    {
LABEL_19:
      v41 = *(_QWORD **)(v37 + 72);
      if (v41[2])
      {
        v42 = v41[4];
        v43 = v41[5];
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v43);
        v44 = v280;
        v45 = swift_isUniquelyReferenced_nonNull_native(v280);
        *(_QWORD *)&v283 = v44;
        v47 = sub_1004A8604(v34, v33);
        v48 = *(_QWORD *)(v44 + 16);
        v49 = (v46 & 1) == 0;
        v50 = v48 + v49;
        if (__OFADD__(v48, v49))
          goto LABEL_134;
        v51 = v46;
        if (*(_QWORD *)(v44 + 24) >= v50)
        {
          if ((v45 & 1) == 0)
            sub_10012973C();
        }
        else
        {
          sub_100123948(v50, v45);
          v52 = sub_1004A8604(v34, v33);
          if ((v51 & 1) != (v53 & 1))
            goto LABEL_139;
          v47 = v52;
        }
        v62 = (_QWORD *)v283;
        v280 = v283;
        if ((v51 & 1) != 0)
        {
          v63 = (_QWORD *)(*(_QWORD *)(v283 + 56) + 16 * v47);
          swift_bridgeObjectRelease(v63[1]);
          *v63 = v42;
          v63[1] = v43;
        }
        else
        {
          *(_QWORD *)(v283 + 8 * (v47 >> 6) + 64) |= 1 << v47;
          v64 = (uint64_t *)(v62[6] + 16 * v47);
          *v64 = v34;
          v64[1] = v33;
          v65 = (_QWORD *)(v62[7] + 16 * v47);
          *v65 = v42;
          v65[1] = v43;
          v66 = v62[2];
          v67 = __OFADD__(v66, 1);
          v68 = v66 + 1;
          if (v67)
            goto LABEL_137;
          v62[2] = v68;
          swift_bridgeObjectRetain(v33);
        }
        swift_release(v37);
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease(0x8000000000000000);
        v28 = v281;
        v29 = v278;
        v30 = countAndFlagsBits;
        a3 = v260;
        goto LABEL_10;
      }
      swift_bridgeObjectRetain(v33);
      v54 = v280;
      swift_bridgeObjectRetain(v280);
      v55 = sub_1004A8604(v34, v33);
      v57 = v56;
      swift_bridgeObjectRelease(v54);
      if ((v57 & 1) == 0)
      {
LABEL_55:
        swift_release(v37);
        swift_bridgeObjectRelease_n(v33, 2);
LABEL_63:
        v28 = v281;
        v29 = v278;
        v30 = countAndFlagsBits;
        goto LABEL_10;
      }
      v58 = swift_isUniquelyReferenced_nonNull_native(v54);
      *(_QWORD *)&v283 = v54;
      v30 = countAndFlagsBits;
      if ((v58 & 1) == 0)
      {
        sub_10012973C();
        v54 = v283;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v54 + 48) + 16 * v55 + 8));
      v59 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 16 * v55 + 8);
      v60 = v55;
      v61 = &v293;
      goto LABEL_54;
    }
    if (v38 != 1)
    {
      v69 = v255;
      v70 = 1;
      while (1)
      {
        v71 = v70 + 1;
        if (__OFADD__(v70, 1))
          break;
        v72 = *(v69 - 1);
        v73 = *v69;
        v74 = v72 == v34 && v73 == v33;
        if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, v34, v33, 0) & 1) != 0)
          goto LABEL_19;
        v69 += 2;
        ++v70;
        if (v71 == v38)
          goto LABEL_45;
      }
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
    }
  }
LABEL_45:
  v75 = *(_QWORD **)(v37 + 72);
  if (!v75[2])
  {
    swift_bridgeObjectRetain(v33);
    v54 = v279;
    swift_bridgeObjectRetain(v279);
    v87 = sub_1004A8604(v34, v33);
    v89 = v88;
    swift_bridgeObjectRelease(v54);
    if ((v89 & 1) == 0)
      goto LABEL_55;
    v90 = swift_isUniquelyReferenced_nonNull_native(v54);
    *(_QWORD *)&v283 = v54;
    v30 = countAndFlagsBits;
    if ((v90 & 1) == 0)
    {
      sub_10012973C();
      v54 = v283;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v54 + 48) + 16 * v87 + 8));
    v59 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 16 * v87 + 8);
    v60 = v87;
    v61 = &v292;
LABEL_54:
    *(v61 - 32) = v54;
    sub_10047F7B8(v60, v54);
    swift_release(v37);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v28 = v281;
    v29 = v278;
    goto LABEL_10;
  }
  v76 = v75[5];
  v268 = v75[4];
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v76);
  v77 = v279;
  v78 = swift_isUniquelyReferenced_nonNull_native(v279);
  *(_QWORD *)&v283 = v77;
  v80 = sub_1004A8604(v34, v33);
  v81 = *(_QWORD *)(v77 + 16);
  v82 = (v79 & 1) == 0;
  v83 = v81 + v82;
  if (__OFADD__(v81, v82))
    goto LABEL_135;
  v84 = v79;
  if (*(_QWORD *)(v77 + 24) >= v83)
  {
    if ((v78 & 1) == 0)
      sub_10012973C();
    goto LABEL_58;
  }
  sub_100123948(v83, v78);
  v85 = sub_1004A8604(v34, v33);
  if ((v84 & 1) == (v86 & 1))
  {
    v80 = v85;
LABEL_58:
    v91 = (_QWORD *)v283;
    v279 = v283;
    if ((v84 & 1) != 0)
    {
      v92 = (unint64_t *)(*(_QWORD *)(v283 + 56) + 16 * v80);
      swift_bridgeObjectRelease(v92[1]);
      *v92 = v268;
      v92[1] = v76;
    }
    else
    {
      *(_QWORD *)(v283 + 8 * (v80 >> 6) + 64) |= 1 << v80;
      v93 = (uint64_t *)(v91[6] + 16 * v80);
      *v93 = v34;
      v93[1] = v33;
      v94 = (unint64_t *)(v91[7] + 16 * v80);
      *v94 = v268;
      v94[1] = v76;
      v95 = v91[2];
      v67 = __OFADD__(v95, 1);
      v96 = v95 + 1;
      if (v67)
        goto LABEL_138;
      v91[2] = v96;
      swift_bridgeObjectRetain(v33);
    }
    swift_release(v37);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    goto LABEL_63;
  }
LABEL_139:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10014B0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;

  *(_QWORD *)(v7 + 80) = a1;
  v13 = (_QWORD *)swift_task_alloc(dword_100635E1C);
  *(_QWORD *)(v7 + 88) = v13;
  *v13 = v7;
  v13[1] = sub_10014B154;
  return sub_100135A58(v7 + 16, a3, a4, a5, a6, a7);
}

uint64_t sub_10014B154()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_10014B1C0, 0, 0);
}

uint64_t sub_10014B1C0()
{
  uint64_t v0;

  sub_1000A1F54(v0 + 16, *(_QWORD *)(v0 + 80), &qword_1006367E0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10014B200(void **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v52 = a5;
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = objc_msgSend(v15, "getCurrentValue");
  if (v16)
  {
    v17 = v16;
    v49 = a2;
    v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v50 = v19;

    v20 = objc_opt_self(DIAttributeDocument);
    v21 = swift_dynamicCastObjCClass(a3, v20);
    if (v21)
    {
      v22 = (void *)v21;
      v49 = a6;
      v23 = v18;
      v24 = v50;
      v25 = a3;
      if (objc_msgSend(v15, "format"))
      {
        v26 = objc_msgSend(v15, "format");
        if (v26 == (id)1)
        {
          v27 = (id *)&DIAttributeImageEncodingPNG;
        }
        else if (v26 == (id)2)
        {
          v27 = (id *)&DIAttributeImageEncodingJPEG;
        }
        else
        {
          v27 = (id *)&DIAttributeImageEncodingUnknown;
        }
        v36 = *v27;
      }
      else
      {
        v36 = objc_msgSend(v15, "encoding");
      }
      v37 = v36;
      v38 = objc_msgSend(a4, "idDocType");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v40 = v39;
      v41 = String._bridgeToObjectiveC()();

      swift_bridgeObjectRelease(v40);
      v42 = v51;
      v43 = sub_10014B5F8(v23, v24, v37, (uint64_t)v41, v22);
      v30 = v42;
      if (!v42)
      {
        v45 = v43;
        v46 = v44;
        sub_100007F8C(v23, v24);

        v47 = v49;
        *v49 = v45;
        v47[1] = v46;
        return;
      }
      sub_100007F8C(v23, v24);

    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.missingAttribute(_:), v11);
      v32 = type metadata accessor for DIPError(0);
      v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v30 = swift_allocError(v32, v33, 0, 0);
      v34 = v49;
      swift_bridgeObjectRetain(v49);
      v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x800000010054FE80, 0, v14, 0, v34, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1301);
      swift_willThrow(v35);
      sub_100007F8C(v18, v50);
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.missingAttribute(_:), v11);
    v28 = type metadata accessor for DIPError(0);
    v29 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v30 = swift_allocError(v28, v29, 0, 0);
    swift_bridgeObjectRetain(a2);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054FDF0, 0, v14, 0, a2, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1298);
    swift_willThrow(v31);
  }
  *v52 = v30;
}

uint64_t sub_10014B5F8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  Class isa;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;

  v51 = a4;
  v48 = a1;
  v11 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  __chkstk_darwin(v11);
  v49 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a5, "acceptableDocs");
  if (v13)
  {
    v14 = v13;
    v15 = sub_10001CFF8(0, &qword_1006325D0, DIAttributeDocumentScanRequirements_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    v44 = a3;
    v45 = v5;
    v43 = a2;
    if ((unint64_t)v16 >> 62)
      goto LABEL_27;
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v17)
    {
      v50 = v16 & 0xC000000000000001;
      v18 = 4;
      while (1)
      {
        v6 = (_WORD *)(v18 - 4);
        v19 = v50
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v16)
            : *(id *)(v16 + 8 * v18);
        v20 = v19;
        v21 = v18 - 3;
        if (__OFADD__(v6, 1))
          break;
        v6 = objc_msgSend(v19, "type");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        v7 = v23;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        if (v22 == v24 && v7 == v25)
          goto LABEL_22;
        v27 = v25;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v7, v24, v25, 0);

        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v27);
        if ((v28 & 1) != 0)
        {
          v7 = v16;
          goto LABEL_24;
        }

        ++v18;
        if (v21 == v17)
          goto LABEL_15;
      }
      __break(1u);
LABEL_27:
      if (v16 < 0)
        v42 = v16;
      else
        v42 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(v16);
    }
LABEL_15:
    swift_bridgeObjectRelease(v16);
    a3 = v44;
    a2 = v43;
  }
  v29 = objc_msgSend(objc_allocWithZone((Class)DIAttributeDocumentScanRequirements), "init");
  v20 = v29;
  if (v29)
  {
    v30 = sub_100004828((uint64_t *)&unk_100636900);
    v31 = swift_allocObject(v30, 40, 7);
    *(_OWORD *)(v31 + 16) = xmmword_10051FFB0;
    v32 = (void *)DIAttributeImageEncodingJPEG;
    *(_QWORD *)(v31 + 32) = DIAttributeImageEncodingJPEG;
    type metadata accessor for DIAttributeImageEncoding(0);
    v6 = v20;
    v33 = v32;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v6, "setSupportedEncoding:", isa);

  }
  v35 = defaultLogger()(v29);
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.info.getter(v36, v37);
  v16 = v38;
  if (os_log_type_enabled(v36, v38))
  {
    v6 = (_WORD *)swift_slowAlloc(2, -1);
    *v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v16, "no document scan requirement is specified, using default requirement", (uint8_t *)v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v47);
  if (!v20)
  {
    __break(1u);
LABEL_22:
    swift_bridgeObjectRelease(v16);

    swift_bridgeObjectRelease(v7);
LABEL_24:
    swift_bridgeObjectRelease(v7);
    a3 = v44;
    a2 = v43;
  }
  v39 = v20;
  v40 = sub_10014B998(v48, a2, a3, v39);

  return v40;
}

uint64_t sub_10014B998(uint64_t a1, unint64_t a2, void *a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGColorSpace *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  NSObject *v31;
  CGColorSpace *v32;
  os_log_type_t v33;
  __objc2_prop *v34;
  uint8_t *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  CGColorSpaceRef v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  Class isa;
  char *v72;
  CGColorSpaceRef v73;
  id v74;
  double v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  unint64_t v81;
  _OWORD *v82;
  Class v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v96;
  void *object;
  unint64_t v98;
  Swift::String v99;
  unint64_t v100;
  uint64_t v101;
  Swift::String v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Swift::String v111;
  void *v112;
  unint64_t v113;
  Swift::String v114;
  uint64_t v115;
  unint64_t v116;
  Swift::String v117;
  uint8_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  CGColorSpaceRef v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t);
  uint64_t v129;
  _BYTE v130[48];
  uint64_t v131;
  unint64_t v132;

  v128 = a4;
  v121 = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v123 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v125 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v120 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (CGColorSpace *)((char *)&v118 - v13);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v118 - v16;
  defaultLogger()(v15);
  v18 = a3;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v126 = v14;
  v127 = (uint64_t)v18;
  v124 = v6;
  v122 = a2;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v118 = (uint8_t *)v9;
    v24 = v23;
    v131 = v23;
    *(_DWORD *)v22 = 136315138;
    v119 = v8;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v27 = v26;
    v129 = sub_1000E3AC8(v25, v26, &v131);
    v8 = v119;
    v14 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v22 + 4);

    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, " ===== format entered = %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v28 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v118 + 1);
  }
  else
  {

    v28 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  }
  v29 = v28(v17, v8);
  defaultLogger()(v29);
  v30 = v128;
  v31 = Logger.logObject.getter(v30);
  v32 = v14;
  v33 = static os_log_type_t.debug.getter(v31);
  v34 = &stru_10062A000;
  if (os_log_type_enabled(v31, v33))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v119 = swift_slowAlloc(32, -1);
    v131 = v119;
    *(_DWORD *)v35 = 136315138;
    v118 = v35 + 4;
    v36 = objc_msgSend(v30, "supportedEncoding");
    v128 = v28;
    v37 = v36;
    type metadata accessor for DIAttributeImageEncoding(0);
    v39 = v38;
    v40 = v30;
    v41 = v8;
    v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

    v43 = Array.description.getter(v42, v39);
    v45 = v44;
    v46 = v42;
    v8 = v41;
    v30 = v40;
    v34 = &stru_10062A000;
    swift_bridgeObjectRelease(v46);
    v129 = sub_1000E3AC8(v43, v45, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130, v118);

    v47 = v45;
    v28 = v128;
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, " ===== supported list = %s", v35, 0xCu);
    v48 = v119;
    swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v49 = v126;
  }
  else
  {

    v49 = v32;
  }
  v28((char *)v49, v8);
  v50 = v127;
  v51 = objc_msgSend(v30, v34[208].name);
  type metadata accessor for DIAttributeImageEncoding(0);
  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v52);

  LOBYTE(v51) = sub_1001B2BD0(v50, v53);
  swift_bridgeObjectRelease(v53);
  if ((v51 & 1) == 0)
  {
    v62 = v125;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v125, enum case for DIPError.Code.unsupportedImageEncoding(_:), v124);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v64, v65, 0, 0);
    v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010054FEB0, 0, v62, 0, v63, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000015, 0x800000010054FEE0, 3747);
LABEL_20:
    swift_willThrow(v66);
    return v63;
  }
  v54 = v30;
  v55 = DIAttributeImageEncodingJPEG;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v58 = v57;
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v61 = v59;
  if (v56 == v60 && v58 == v59)
  {
    swift_bridgeObjectRelease_n(v58, 2);
  }
  else
  {
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v59, 0);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v61);
    if ((v67 & 1) == 0)
    {
      v96._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      object = v96._object;
      v131 = 0x616D693A61746164;
      v132 = 0xEB000000002F6567;
      String.append(_:)(v96);
      swift_bridgeObjectRelease(object);
      v98 = v132;
      swift_bridgeObjectRetain(v132);
      v99._countAndFlagsBits = 0x2C3436657361623BLL;
      v99._object = (void *)0xE800000000000000;
      String.append(_:)(v99);
      swift_bridgeObjectRelease(v98);
      v101 = v131;
      v100 = v132;
      v102 = Data.base64EncodedString(options:)(0);
      v131 = v101;
      v132 = v100;
      swift_bridgeObjectRetain(v100);
      String.append(_:)(v102);
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v102._object);
      return v131;
    }
  }
  v68 = objc_allocWithZone((Class)CIImage);
  v70 = v121;
  v69 = v122;
  sub_100022948(v121, v122);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v72 = (char *)objc_msgSend(v68, "initWithData:", isa);
  sub_100007F8C(v70, v69);

  if (!v72)
  {
    v92 = v125;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v125, enum case for DIPError.Code.imageConversionFailed(_:), v124);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v93 = type metadata accessor for DIPError(0);
    v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v93, v94, 0, 0);
    v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010054FF00, 0, v92, 0, v63, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000015, 0x800000010054FEE0, 3751);
    goto LABEL_20;
  }
  v128 = (uint64_t (*)(char *, uint64_t))objc_msgSend(objc_allocWithZone((Class)CIContext), "init");
  v73 = (CGColorSpaceRef)objc_msgSend(v72, "colorSpace");
  if (v73 || (v73 = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3)) != 0)
  {
    v74 = objc_msgSend(v54, "maximumCompressionRatio");
    v75 = CGFloat.init(truncating:)();

    v76 = sub_100004828((uint64_t *)&unk_100636910);
    inited = swift_initStackObject(v76, v130);
    *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCGImageDestinationLossyCompressionQuality);
    v79 = v78;
    v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v79);
    *(_QWORD *)(inited + 32) = v80;
    *(double *)(inited + 40) = v75;
    v81 = sub_10011E7B4(inited);
    v82 = sub_10044B7CC(v81);
    swift_bridgeObjectRelease(v81);
    type metadata accessor for CIImageRepresentationOption(0);
    sub_100004790(&qword_10062F990, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051FBA4);
    v83 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v82);
    v84 = objc_msgSend(v128, "JPEGRepresentationOfImage:colorSpace:options:", v72, v73, v83);

    if (v84)
    {
      v126 = v73;
      v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v87 = v86;

      defaultLogger()(v88);
      v89 = sub_100022948(v85, v87);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.debug.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        v125 = v72;
        *(_DWORD *)swift_slowAlloc(12, -1) = 134349056;
        __asm { BR              X10 }
      }
      sub_100007F8C(v85, v87);

      v28(v120, v8);
      v111._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v112 = v111._object;
      v131 = 0x616D693A61746164;
      v132 = 0xEB000000002F6567;
      String.append(_:)(v111);
      swift_bridgeObjectRelease(v112);
      v113 = v132;
      swift_bridgeObjectRetain(v132);
      v114._countAndFlagsBits = 0x2C3436657361623BLL;
      v114._object = (void *)0xE800000000000000;
      String.append(_:)(v114);
      swift_bridgeObjectRelease(v113);
      v115 = v131;
      v116 = v132;
      v117 = Data.base64EncodedString(options:)(0);
      v131 = v115;
      v132 = v116;
      swift_bridgeObjectRetain(v116);
      String.append(_:)(v117);
      swift_bridgeObjectRelease(v116);
      swift_bridgeObjectRelease(v117._object);
      sub_100007F8C(v85, v87);

      v63 = v131;
    }
    else
    {
      v103 = v125;
      (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v125, enum case for DIPError.Code.jpegEncodingFailed(_:), v124);
      v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v104 = type metadata accessor for DIPError(0);
      v105 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v104, v105, 0, 0);
      v106 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x800000010054FF60, 0, v103, 0, v63, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000015, 0x800000010054FEE0, 3766);
      swift_willThrow(v106);

    }
  }
  else
  {
    v107 = v125;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v125, enum case for DIPError.Code.invalidColorSpace(_:), v124);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v108 = type metadata accessor for DIPError(0);
    v109 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v108, v109, 0, 0);
    v110 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x800000010054FF30, 0, v107, 0, v63, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000015, 0x800000010054FEE0, 3757);
    swift_willThrow(v110);

  }
  return v63;
}

id sub_10014C6D4()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;

  result = *(id *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (result)
  {
    result = objc_msgSend(result, "serviceURL");
    if (result)
    {
      v2 = result;
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v5 = v4;

      v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v6 = v3 & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            if ((*(_BYTE *)(v8 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) & 1) != 0)
              return (id)v3;
          }
        }
      }
      result = (id)swift_bridgeObjectRelease(v5);
    }
  }
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    return 0;
  v11 = *(_QWORD **)(v10 + 152);
  if (v11[2])
  {
    v3 = v11[4];
    v12 = v11[5];
    v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v13 = v3 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      swift_bridgeObjectRetain(v11[5]);
      return (id)v3;
    }
    return 0;
  }
  if ((*(_BYTE *)(v10 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) & 1) != 0)
    return 0;
  __break(1u);
  return result;
}

uint64_t sub_10014C7EC(uint64_t *a1, _QWORD *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  _QWORD v24[2];
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a3;
  v6 = type metadata accessor for Logger(0);
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v10 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  defaultLogger()(v7);
  swift_bridgeObjectRetain_n(v10, 4);
  v14 = swift_bridgeObjectRetain_n(v12, 4);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v26 = v13;
    v18 = v17;
    v24[0] = swift_slowAlloc(64, -1);
    v32 = v24[0];
    *(_DWORD *)v18 = 136315394;
    v27 = v11;
    swift_bridgeObjectRetain(v10);
    v30 = sub_1000E3AC8(v27, v10, &v32);
    v24[1] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 4);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    v30 = sub_1000E3AC8(v26, v12, &v32);
    v11 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 14);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v12, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v25, (uint8_t *)v18, 0x16u);
    v19 = v24[0];
    swift_arrayDestroy(v24[0], 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v20 = v18;
    v13 = v26;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 4);
    swift_bridgeObjectRelease_n(v10, 4);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v32 = *a2;
  *a2 = 0x8000000000000000;
  sub_100481050(v13, v12, v11, v10, isUniquelyReferenced_nonNull_native);
  v22 = *a2;
  *a2 = v32;
  swift_bridgeObjectRelease(v10);
  return swift_bridgeObjectRelease(v22);
}

void (*sub_10014CAA4(uint64_t a1, int a2, uint64_t a3))(void)
{
  void (*v3)(void);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  char *v68;
  void (*v69)(void);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void (*v117)(void);
  uint64_t v118;
  int v119;
  char *v120;
  uint64_t v121;
  id v122;
  uint8_t *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126[16];
  uint64_t v127;
  uint64_t v128;

  v118 = a3;
  v6 = type metadata accessor for DIPError.Code(0);
  v123 = *(uint8_t **)(v6 - 8);
  v124 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v116 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v112 - v13;
  v119 = a2;
  if ((a2 & 1) == 0)
  {
    v15 = sub_100055A54();
    if (v16)
      return (void (*)(void))v15;
    v18 = v10;
    v19 = defaultLogger()(v15);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = v9;
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "retrieving more nonce from INO", v23, 2u);
      v24 = v23;
      v9 = v22;
      swift_slowDealloc(v24, -1, -1);
    }

    v10 = v18;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v9);
  }
  v113 = v10;
  v114 = v9;
  v120 = v8;
  v117 = v3;
  v25 = sub_100004828((uint64_t *)&unk_1006325A0);
  v26 = sub_100004828((uint64_t *)&unk_100633440);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = (_OWORD *)swift_allocObject(v25, v30 + 5 * v28, v29 | 7);
  v31[1] = xmmword_1005208C0;
  v122 = v31;
  v32 = (char *)v31 + v30;
  v33 = (_QWORD *)((char *)v31 + v30 + *(int *)(v26 + 48));
  v34 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  v35 = type metadata accessor for DIPError.PropertyKey(0);
  v17 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v32, v34, v35);
  v36 = *(_QWORD **)(a1 + 16);
  v37 = v36[8];
  v38 = v36[9];
  v33[3] = &type metadata for String;
  *v33 = v37;
  v33[1] = v38;
  v121 = v38;
  v39 = &v32[v28 + *(int *)(v26 + 48)];
  v17();
  v40 = v36[2];
  v41 = v36[3];
  *((_QWORD *)v39 + 3) = &type metadata for String;
  v42 = v41;
  *(_QWORD *)v39 = v40;
  *((_QWORD *)v39 + 1) = v41;
  ((void (*)(char *, _QWORD, uint64_t))v17)(&v32[2 * v28], enum case for DIPError.PropertyKey.spProviderID(_:), v35);
  v115 = a1;
  v44 = *(_QWORD **)(a1 + 24);
  if (v44)
  {
    v45 = v44[8];
    v43 = swift_bridgeObjectRetain(v44[9]);
  }
  else
  {
    v45 = 0x414C494156414E55;
    v46 = 0xEB00000000454C42;
  }
  v47 = (uint64_t *)&v32[2 * v28 + *(int *)(v26 + 48)];
  v47[3] = (uint64_t)&type metadata for String;
  *v47 = v45;
  v47[1] = v46;
  ((void (*)(char *, _QWORD, uint64_t, __n128))v17)(&v32[3 * v28], enum case for DIPError.PropertyKey.spWorkflowID(_:), v35, v43);
  if (v44)
  {
    v49 = v44[2];
    v48 = swift_bridgeObjectRetain(v44[3]);
  }
  else
  {
    v49 = 0x414C494156414E55;
    v50 = 0xEB00000000454C42;
  }
  v51 = *(int *)(v26 + 48);
  v52 = (uint64_t *)&v32[3 * v28 + v51];
  v52[3] = (uint64_t)&type metadata for String;
  *v52 = v49;
  v52[1] = v50;
  v53 = &v32[4 * v28 + v51];
  ((void (*)(__n128))v17)(v48);
  v54 = v125;
  v55 = v125[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *((_QWORD *)v53 + 3) = &type metadata for DIPState;
  *v53 = v55;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v42);
  v56 = sub_10011D314((uint64_t)v122);
  v57 = v56;
  v58 = *(void **)&v54[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService];
  if (!v58)
  {
    swift_bridgeObjectRelease(v56);
    v74 = v120;
    (*((void (**)(char *, _QWORD, uint64_t))v123 + 13))(v120, enum case for DIPError.Code.unexpectedDaemonState(_:), v124);
    v75 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v76 = type metadata accessor for DIPError(0);
    v77 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v76, v77, 0, 0);
    v78 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054DDA0, 0, v74, 0, v75, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1387);
    swift_willThrow(v78);
    return v17;
  }
  v59 = *(void **)&v54[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService];
  if (!v59)
  {
    v79 = v58;
    swift_bridgeObjectRelease(v57);
    v80 = v120;
    (*((void (**)(char *, _QWORD, uint64_t))v123 + 13))(v120, enum case for DIPError.Code.unexpectedDaemonState(_:), v124);
    v81 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v82 = type metadata accessor for DIPError(0);
    v83 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v82, v83, 0, 0);
    v84 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x800000010054DB10, 0, v80, 0, v81, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1390);
    swift_willThrow(v84);

    return v17;
  }
  v60 = v119 & 1;
  if ((v119 & 1) != 0)
    v61 = 1;
  else
    v61 = 8;
  v62 = swift_allocObject(&unk_100609308, 80, 7);
  *(_BYTE *)(v62 + 16) = v60;
  *(_QWORD *)(v62 + 24) = v54;
  *(_QWORD *)(v62 + 32) = v57;
  v63 = v115;
  *(_QWORD *)(v62 + 40) = v115;
  *(_QWORD *)(v62 + 48) = v59;
  v64 = v118;
  *(_QWORD *)(v62 + 56) = v61;
  *(_QWORD *)(v62 + 64) = v64;
  *(_QWORD *)(v62 + 72) = v58;
  v65 = v58;
  v66 = v59;
  v67 = v65;
  v68 = v54;
  swift_bridgeObjectRetain(v57);
  swift_retain(v63);
  swift_bridgeObjectRetain(v64);
  v69 = v117;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD00000000000001ELL, 0x800000010054EF70, 1398, &unk_1006367B8, v62, &type metadata for NonceResponse);
  v17 = v69;
  if (v69)
  {
    swift_release(v62);
    v70 = v120;
    (*((void (**)(char *, _QWORD, uint64_t))v123 + 13))(v120, enum case for DIPError.Code.internalError(_:), v124);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v71, v72, 0, 0);
    swift_errorRetain(v69);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054EF90, v69, v70, 0, v57, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1416);
    swift_willThrow(v73);
    swift_errorRelease(v69);

    return v17;
  }
  v121 = v61;
  v122 = v66;
  v125 = (char *)v67;
  v117 = 0;
  swift_release(v62);
  v85 = v126[1];
  v86 = v126[5];
  v87 = v126[7];
  v17 = (void (*)(void))v126[9];
  v88 = v126[11];
  v90 = v126[13];
  v89 = (_QWORD *)v126[14];
  swift_bridgeObjectRelease(v126[3]);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v85);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v90);
  if (!v89)
  {
LABEL_27:
    v104 = v120;
    (*((void (**)(char *, _QWORD, uint64_t))v123 + 13))(v120, enum case for DIPError.Code.serverResponseInconsistent(_:), v124);
    v105 = type metadata accessor for DIPError(0);
    v106 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v105, v106, 0, 0);
    v107 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054EFB0, 0, v104, 0, v57, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1420);
    swift_willThrow(v107);

    return v17;
  }
  if (v89[2] != v121)
  {
    swift_bridgeObjectRelease(v89);
    goto LABEL_27;
  }
  v17 = (void (*)(void))v89[4];
  swift_bridgeObjectRetain(v89[5]);
  v91 = swift_bridgeObjectRelease(v57);
  v92 = v116;
  defaultLogger()(v91);
  v93 = swift_bridgeObjectRetain_n(v89, 2);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.debug.getter(v94);
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(12, -1);
    v124 = swift_slowAlloc(32, -1);
    v126[0] = v124;
    *(_DWORD *)v96 = 136315138;
    v123 = v96 + 4;
    swift_bridgeObjectRetain(v89);
    v98 = Array.description.getter(v97, &type metadata for String);
    v99 = v89;
    v101 = v100;
    swift_bridgeObjectRelease(v99);
    v127 = sub_1000E3AC8(v98, v101, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v123);
    swift_bridgeObjectRelease(v101);
    v102 = (uint64_t)v99;
    swift_bridgeObjectRelease_n(v99, 2);
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "received nonces: %s", v96, 0xCu);
    v103 = v124;
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v103, -1, -1);
    swift_slowDealloc(v96, -1, -1);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
  }
  else
  {
    v102 = (uint64_t)v89;
    swift_bridgeObjectRelease_n(v89, 2);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v92, v114);
  }
  v109 = v122;
  if ((v119 & 1) != 0)
  {

    swift_bridgeObjectRelease(v102);
  }
  else
  {
    sub_100055D34(v102);
    swift_bridgeObjectRelease(v102);
    sub_100055A54();
    v111 = v110;

    swift_bridgeObjectRelease(v111);
  }
  return v17;
}

uint64_t sub_10014D5EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v8 + 408) = a8;
  *(_QWORD *)(v8 + 416) = v14;
  *(_QWORD *)(v8 + 392) = a6;
  *(_QWORD *)(v8 + 400) = a7;
  *(_QWORD *)(v8 + 376) = a4;
  *(_QWORD *)(v8 + 384) = a5;
  *(_BYTE *)(v8 + 544) = a2;
  *(_QWORD *)(v8 + 360) = a1;
  *(_QWORD *)(v8 + 368) = a3;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 424) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 432) = v10;
  *(_QWORD *)(v8 + 440) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 448) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 456) = v12;
  *(_QWORD *)(v8 + 464) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10014D688, 0, 0);
}

uint64_t sub_10014D688(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_BYTE *)(v1 + 544) == 1)
  {
    v2 = sub_10014C6D4();
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 384) + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL);
        *(_QWORD *)(v1 + 472) = v6;
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 32) & 1) != 0)
          {
            v7 = *(_QWORD *)(v6 + 16);
            v8 = *(void **)(v6 + 24);
            v43 = (uint64_t)v2;
            v44 = v3;
            swift_bridgeObjectRetain(v3);
            v9._countAndFlagsBits = v7;
            v9._object = v8;
            String.append(_:)(v9);
            v11 = v43;
            v10 = v44;
            swift_retain(v6);
            swift_bridgeObjectRelease(v4);
          }
          else
          {
            swift_retain(v6);
            swift_bridgeObjectRelease(v4);
            v11 = *(_QWORD *)(v6 + 16);
            v10 = *(_QWORD *)(v6 + 24);
            swift_bridgeObjectRetain(v10);
          }
          *(_QWORD *)(v1 + 480) = v10;
          v42 = (_QWORD *)swift_task_alloc(dword_100635E24);
          *(_QWORD *)(v1 + 488) = v42;
          *v42 = v1;
          v42[1] = sub_10014DAC0;
          return sub_10013676C(v1 + 136, v11, v10, *(_QWORD *)(v1 + 400), *(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 384));
        }
      }
      v29 = *(_QWORD *)(v1 + 456);
      v28 = *(_QWORD *)(v1 + 464);
      v30 = *(_QWORD *)(v1 + 448);
      v31 = *(_QWORD *)(v1 + 376);
      swift_bridgeObjectRelease(v3);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.invalidSPURL(_:), v30);
      v32 = type metadata accessor for DIPError(0);
      v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v32, v33, 0, 0);
      swift_bridgeObjectRetain(v31);
      v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010054EFD0, 0, v28, 0, v31, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1405);
    }
    else
    {
      v23 = *(_QWORD *)(v1 + 464);
      v24 = *(_QWORD *)(v1 + 376);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 456) + 104))(v23, enum case for DIPError.Code.invalidSPURL(_:), *(_QWORD *)(v1 + 448));
      v25 = type metadata accessor for DIPError(0);
      v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v25, v26, 0, 0);
      swift_bridgeObjectRetain(v24);
      v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010054DAE0, 0, v23, 0, v24, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001ELL, 0x800000010054EF70, 1402);
    }
    swift_willThrow(v27);
    v34 = *(_QWORD *)(v1 + 440);
    swift_task_dealloc(*(_QWORD *)(v1 + 464));
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v13 = *(_QWORD *)(v1 + 432);
  v12 = *(_QWORD *)(v1 + 440);
  v14 = *(_QWORD *)(v1 + 424);
  v15 = *(_QWORD *)(v1 + 384);
  v16 = UUID.init()(a1);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  *(_QWORD *)(v1 + 504) = v18;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v20 = *(_QWORD *)(v15 + 24);
  if (v20)
  {
    v22 = *(_QWORD *)(v20 + 64);
    v21 = *(_QWORD *)(v20 + 72);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v21 = 0xEB00000000454C42;
    v22 = 0x414C494156414E55;
  }
  *(_QWORD *)(v1 + 512) = v21;
  v36 = *(_QWORD *)(v1 + 400);
  v37 = *(_QWORD *)(v1 + 368);
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0xE000000000000000;
  *(_QWORD *)(v1 + 272) = v17;
  *(_QWORD *)(v1 + 280) = v19;
  *(_QWORD *)(v1 + 288) = v36;
  *(_QWORD *)(v1 + 296) = v22;
  *(_QWORD *)(v1 + 304) = v21;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  v38 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  v39 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  *(_QWORD *)(v1 + 520) = v39;
  swift_bridgeObjectRetain(0xE000000000000000);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  sub_10008F020(0, 0, 0, 0, 0, 0);
  v40 = dword_100639AFC;
  swift_bridgeObjectRetain(v39);
  v41 = (_QWORD *)swift_task_alloc(v40);
  *(_QWORD *)(v1 + 528) = v41;
  *v41 = v1;
  v41[1] = sub_10014DBAC;
  return sub_100243D18(v1 + 16, v1 + 256, *(_QWORD *)(v1 + 408), v38, v39);
}

uint64_t sub_10014DAC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 488);
  *(_QWORD *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10014DD00;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 480));
    v4 = sub_10014DB2C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014DB2C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 472));
  v2 = *(_OWORD *)(v0 + 136);
  v3 = *(_OWORD *)(v0 + 152);
  v4 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v1 + 48) = v4;
  *(_OWORD *)v1 = v2;
  *(_OWORD *)(v1 + 16) = v3;
  v5 = *(_OWORD *)(v0 + 200);
  v6 = *(_OWORD *)(v0 + 216);
  v7 = *(_OWORD *)(v0 + 232);
  *(_QWORD *)(v1 + 112) = *(_QWORD *)(v0 + 248);
  *(_OWORD *)(v1 + 80) = v6;
  *(_OWORD *)(v1 + 96) = v7;
  *(_OWORD *)(v1 + 64) = v5;
  v8 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014DBAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 528);
  *(_QWORD *)(*v1 + 536) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10014DD50;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 520);
    v8 = v2 + 504;
    v7 = *(_QWORD *)(v2 + 504);
    v6 = *(_QWORD *)(v8 + 8);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    sub_10008EF5C(0, 0, 0, 0, 0, 0);
    v4 = sub_10014DC5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014DC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 360);
  v5 = *(_OWORD *)(v0 + 96);
  v4 = *(_OWORD *)(v0 + 112);
  v6 = *(_OWORD *)(v0 + 80);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(v0 + 128);
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 64) = v6;
  v7 = *(_OWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 32);
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)v3 = v7;
  *(_OWORD *)(v3 + 16) = v8;
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(0, 0, 0, 0, 0, 0);
  v10 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014DD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 472);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014DD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  sub_10008EF5C(0, 0, 0, 0, 0, 0);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(0, 0, 0, 0, 0, 0);
  v4 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014DE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(void);
  char v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  void *v122;
  void *v123;
  char *v124;
  id v125;
  char *v126;
  char *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  id v135;
  uint8_t *v136;
  uint8_t *v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t result;
  uint64_t v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  _QWORD *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  BOOL v180;
  uint64_t v181;
  void *v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  Swift::OpaquePointer v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  NSObject *v196;
  os_log_type_t v197;
  uint64_t v198;
  uint8_t *v199;
  uint8_t *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  char *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  Swift::String v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  NSObject *v255;
  os_log_type_t v256;
  _BOOL4 v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t, uint64_t, char *);
  uint8_t *v260;
  char v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  id v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  int v272;
  uint64_t v273;
  id v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  void (*v291)(uint64_t, char *, uint64_t);
  uint64_t *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __n128 v320;
  _QWORD *v321;
  _QWORD *v322;
  char *v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  int *v336;
  uint64_t v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  id v344;
  uint64_t v345;
  int v346;
  char *v347;
  unint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void (*v360)(char *, uint64_t);
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  id v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  void *v391;
  uint64_t v392;
  id v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  _QWORD *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  id v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  char *v470;
  char *v471;
  uint64_t v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t (*v480)(char *, uint64_t);
  uint64_t v481;
  uint64_t v482;
  NSObject *v483;
  os_log_type_t v484;
  uint8_t *v485;
  uint64_t v486;
  uint64_t v487;
  char *v488;
  uint64_t v489;
  uint64_t v490;
  Swift::String v491;
  Swift::String v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  _QWORD **v498;
  unint64_t *v499;
  _QWORD *v500;
  unint64_t *v501;
  uint64_t *v502;
  unint64_t *v503;
  uint64_t *v504;
  _QWORD **v505;
  unint64_t *v506;
  id v507;
  char *v508;
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char *v525;
  unint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  __int128 v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  char *v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int *v551;
  uint64_t v552;
  _QWORD *v553;
  char *v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  _QWORD *v558;
  _QWORD *v559;
  uint64_t v560;
  char *v561;
  uint64_t v562;
  char *v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  char *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  char *v573;
  char *v574;
  char *v575;
  uint64_t v576;
  char *v577;
  uint64_t v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  uint64_t v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  uint64_t v605;
  _OWORD v606[8];
  uint64_t v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  uint64_t v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  _QWORD *v629;
  _QWORD *v630;
  unint64_t v631;
  _QWORD *v632;
  unint64_t v633;
  _QWORD *v634;
  char *v635;
  _QWORD *v636;
  _QWORD *v637;
  _QWORD *v638;
  uint64_t v639;
  _QWORD v640[3];
  uint64_t v641;
  uint64_t v642;
  char v643[24];
  _QWORD *v644;
  _QWORD v645[5];
  void *v646;
  uint64_t v647[12];
  _QWORD *v648;

  v2 = v1;
  v555 = a1;
  v522 = type metadata accessor for DispatchWorkItemFlags(0);
  v515 = *(_QWORD *)(v522 - 8);
  v3 = __chkstk_darwin(v522);
  v517 = (char *)&v505 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v525 = (char *)&v505 - v5;
  v6 = type metadata accessor for Date(0);
  v523 = *(_QWORD *)(v6 - 8);
  v524 = v6;
  __chkstk_darwin(v6);
  v513 = (char *)&v505 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_1006366D0);
  __chkstk_darwin(v8);
  v509 = (char *)&v505 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_1006366D8);
  __chkstk_darwin(v10);
  v508 = (char *)&v505 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0);
  v511 = *(_QWORD *)(v12 - 8);
  v512 = v12;
  __chkstk_darwin(v12);
  v521 = (char *)&v505 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Calendar(0);
  v519 = *(_QWORD *)(v14 - 8);
  v520 = v14;
  __chkstk_darwin(v14);
  v518 = (char *)&v505 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_100633990);
  v17 = __chkstk_darwin(v16);
  v510 = (char *)&v505 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v526 = (unint64_t *)((char *)&v505 - v19);
  v20 = sub_100004828(&qword_1006366E0);
  __chkstk_darwin(v20);
  v531 = (uint64_t)&v505 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for IdentityProofingResponse(0);
  v550 = *(_QWORD *)(v22 - 8);
  v551 = (int *)v22;
  __chkstk_darwin(v22);
  v541 = (uint64_t)&v505 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004828(&qword_1006366E8);
  v25 = __chkstk_darwin(v24);
  v540 = (uint64_t)&v505 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v552 = (uint64_t)&v505 - v27;
  v28 = type metadata accessor for UUID(0);
  v545 = *(_QWORD *)(v28 - 8);
  v546 = v28;
  __chkstk_darwin(v28);
  v544 = (char *)&v505 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for HardwareAttestationType(0);
  v547 = *(_QWORD *)(v30 - 8);
  v548 = v30;
  __chkstk_darwin(v30);
  v556 = (char *)&v505 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v549 = type metadata accessor for IdentityProofingRequest(0);
  __chkstk_darwin(v549);
  v553 = (_QWORD ***)((char *)&v505 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100004828(&qword_100636688);
  __chkstk_darwin(v33);
  v529 = (char *)&v505 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for ODNAssessmentResult(0);
  __chkstk_darwin(v35);
  v530 = (uint64_t)&v505 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v536 = type metadata accessor for VerifiedClaim(0);
  v527 = *(_QWORD *)(v536 - 8);
  v37 = __chkstk_darwin(v536);
  v514 = (uint64_t)&v505 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v528 = (uint64_t)&v505 - v40;
  __chkstk_darwin(v39);
  v532 = (uint64_t)&v505 - v41;
  v576 = type metadata accessor for DIPError.Code(0);
  v578 = *(_QWORD *)(v576 - 8);
  __chkstk_darwin(v576);
  v577 = (char *)&v505 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for VerifiedClaimPresentment(0);
  v44 = *(_QWORD *)(v43 - 8);
  v534 = v43;
  v535 = v44;
  __chkstk_darwin(v43);
  v537 = (uint64_t)&v505 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v560 = sub_100004828(&qword_1006336F8);
  v557 = *(_QWORD *)(v560 - 8);
  __chkstk_darwin(v560);
  v558 = (_QWORD ***)((char *)&v505 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v562 = sub_100004828((uint64_t *)&unk_1006364E0);
  v559 = *(_QWORD **)(v562 - 8);
  v47 = __chkstk_darwin(v562);
  v542 = (char *)&v505 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v564 = (uint64_t *)((char *)&v505 - v50);
  v539 = v51;
  __chkstk_darwin(v49);
  v561 = (char *)&v505 - v52;
  v53 = sub_100004828((uint64_t *)&unk_100636548);
  __chkstk_darwin(v53);
  v572 = (uint64_t)&v505 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Logger(0);
  v565 = *(_QWORD *)(v55 - 8);
  v566 = v55;
  v56 = __chkstk_darwin(v55);
  v543 = (char *)&v505 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __chkstk_darwin(v56);
  v516 = (char *)&v505 - v59;
  v60 = __chkstk_darwin(v58);
  v554 = (char *)&v505 - v61;
  v62 = __chkstk_darwin(v60);
  v563 = (char *)&v505 - v63;
  __chkstk_darwin(v62);
  v567 = (char *)&v505 - v64;
  v65 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v65);
  v568 = (char *)&v505 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v571 = type metadata accessor for DIPSignpost(0);
  v570 = *(_QWORD *)(v571 - 8);
  __chkstk_darwin(v571);
  v573 = (char *)&v505 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for DIPError.PropertyKey(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = __chkstk_darwin(v68);
  v574 = (char *)&v505 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __chkstk_darwin(v70);
  v74 = (char *)&v505 - v73;
  __chkstk_darwin(v72);
  v76 = (char *)&v505 - v75;
  v77 = sub_100004828((uint64_t *)&unk_1006325A0);
  v78 = sub_100004828((uint64_t *)&unk_100633440);
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(_QWORD *)(v79 + 72);
  v81 = *(unsigned __int8 *)(v79 + 80);
  v82 = (v81 + 32) & ~v81;
  v83 = swift_allocObject(v77, v82 + v80, v81 | 7);
  v533 = xmmword_10051FFB0;
  *(_OWORD *)(v83 + 16) = xmmword_10051FFB0;
  v84 = v83 + v82 + *(int *)(v78 + 48);
  v85 = *(void (**)(void))(v69 + 104);
  v85();
  v538 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  v86 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
  *(_QWORD *)(v84 + 24) = &type metadata for DIPState;
  *(_BYTE *)v84 = v86;
  v87 = sub_10011D314(v83);
  v646 = (void *)v87;
  v575 = (char *)v2;
  v88 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
  if (!v88)
  {
    v103 = (id)v87;
    v104 = v577;
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v105 = type metadata accessor for DIPError(0);
    v106 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v105, v106, 0, 0);
    swift_bridgeObjectRetain(v103);
    v107 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x800000010054E730, 0, v104, 0, v103, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1444);
    swift_willThrow(v107);
LABEL_29:
    swift_bridgeObjectRelease(v646);
    return (uint64_t)v103;
  }
  ((void (*)(char *, _QWORD, uint64_t))v85)(v76, enum case for DIPError.PropertyKey.inoProviderID(_:), v68);
  v89 = *(_QWORD *)(v88 + 16);
  v90 = *(_QWORD *)(v89 + 64);
  v91 = *(_QWORD *)(v89 + 72);
  *((_QWORD *)&v618 + 1) = &type metadata for String;
  *(_QWORD *)&v617 = v90;
  *((_QWORD *)&v617 + 1) = v91;
  sub_10000491C(&v617, &v608);
  swift_bridgeObjectRetain(v91);
  swift_retain(v88);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v646);
  *(_QWORD *)&v606[0] = v646;
  v646 = (void *)0x8000000000000000;
  sub_1004811C4(&v608, (uint64_t)v76, isUniquelyReferenced_nonNull_native);
  v93 = (uint64_t)v646;
  v646 = *(void **)&v606[0];
  swift_bridgeObjectRelease(v93);
  v94 = *(void (**)(char *, uint64_t))(v69 + 8);
  v94(v76, v68);
  ((void (*)(char *, _QWORD, uint64_t))v85)(v76, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v68);
  v95 = *(_QWORD *)(v88 + 16);
  v96 = *(_QWORD *)(v95 + 16);
  v97 = *(_QWORD *)(v95 + 24);
  *((_QWORD *)&v618 + 1) = &type metadata for String;
  *(_QWORD *)&v617 = v96;
  *((_QWORD *)&v617 + 1) = v97;
  sub_10000491C(&v617, &v608);
  swift_bridgeObjectRetain(v97);
  v98 = swift_isUniquelyReferenced_nonNull_native(v646);
  *(_QWORD *)&v606[0] = v646;
  v646 = (void *)0x8000000000000000;
  sub_1004811C4(&v608, (uint64_t)v76, v98);
  v99 = (uint64_t)v646;
  v646 = *(void **)&v606[0];
  swift_bridgeObjectRelease(v99);
  v94(v76, v68);
  ((void (*)(char *, _QWORD, uint64_t))v85)(v74, enum case for DIPError.PropertyKey.spProviderID(_:), v68);
  v648 = (_QWORD *)v88;
  v100 = *(_QWORD *)(v88 + 24);
  if (v100)
  {
    v101 = *(_QWORD *)(v100 + 64);
    swift_bridgeObjectRetain(*(_QWORD *)(v100 + 72));
  }
  else
  {
    v101 = 0x414C494156414E55;
    v102 = 0xEB00000000454C42;
  }
  v108 = (uint64_t)v574;
  *((_QWORD *)&v618 + 1) = &type metadata for String;
  *(_QWORD *)&v617 = v101;
  *((_QWORD *)&v617 + 1) = v102;
  sub_10000491C(&v617, &v608);
  v109 = swift_isUniquelyReferenced_nonNull_native(v646);
  *(_QWORD *)&v606[0] = v646;
  v646 = (void *)0x8000000000000000;
  sub_1004811C4(&v608, (uint64_t)v74, v109);
  v110 = (uint64_t)v646;
  v646 = *(void **)&v606[0];
  swift_bridgeObjectRelease(v110);
  v94(v74, v68);
  ((void (*)(uint64_t, _QWORD, uint64_t))v85)(v108, enum case for DIPError.PropertyKey.spWorkflowID(_:), v68);
  v111 = (uint64_t)v648;
  v112 = v648[3];
  if (v112)
  {
    v113 = *(_QWORD *)(v112 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v112 + 24));
  }
  else
  {
    v113 = 0x414C494156414E55;
    v114 = 0xEB00000000454C42;
  }
  *((_QWORD *)&v618 + 1) = &type metadata for String;
  *(_QWORD *)&v617 = v113;
  *((_QWORD *)&v617 + 1) = v114;
  sub_10000491C(&v617, &v608);
  v115 = swift_isUniquelyReferenced_nonNull_native(v646);
  *(_QWORD *)&v606[0] = v646;
  v646 = (void *)0x8000000000000000;
  sub_1004811C4(&v608, v108, v115);
  v116 = (uint64_t)v646;
  v646 = *(void **)&v606[0];
  swift_bridgeObjectRelease(v116);
  v94((char *)v108, v68);
  v117 = *(_QWORD *)(v111 + 16);
  v118 = *(_QWORD *)(v117 + 128);
  if (v118)
  {
    v119 = *(_QWORD *)(v117 + 120);
    ((void (*)(char *, _QWORD, uint64_t))v85)(v76, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v68);
    *((_QWORD *)&v618 + 1) = &type metadata for String;
    *(_QWORD *)&v617 = v119;
    *((_QWORD *)&v617 + 1) = v118;
    sub_10000491C(&v617, &v608);
    swift_bridgeObjectRetain(v118);
    v120 = swift_isUniquelyReferenced_nonNull_native(v646);
    *(_QWORD *)&v606[0] = v646;
    v646 = (void *)0x8000000000000000;
    sub_1004811C4(&v608, (uint64_t)v76, v120);
    v121 = (uint64_t)v646;
    v646 = *(void **)&v606[0];
    swift_bridgeObjectRelease(v121);
    v94(v76, v68);
  }
  v122 = *(void **)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
  if (!v122)
  {
    v144 = v577;
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v103 = v646;
    v145 = type metadata accessor for DIPError(0);
    v146 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v145, v146, 0, 0);
    swift_bridgeObjectRetain(v103);
    v147 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x800000010054E7A0, 0, v144, 0, v103, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1455);
    swift_willThrow(v147);
LABEL_21:
    swift_release(v648);
    goto LABEL_29;
  }
  v123 = *(void **)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService];
  v124 = v577;
  if (!v123)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v103 = v122;
    v148 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v149 = type metadata accessor for DIPError(0);
    v150 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v149, v150, 0, 0);
    v151 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054DDA0, 0, v124, 0, v148, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1459);
    swift_willThrow(v151);

    goto LABEL_21;
  }
  v125 = v122;
  v126 = v123;
  v127 = v568;
  static DaemonSignposts.getVerificationResultWaitForBAA.getter();
  DIPSignpost.init(_:)(v127);
  v128 = OS_dispatch_group.wait(interval:)(10.0);
  v129 = static DispatchTimeoutResult.== infix(_:_:)(v128 & 1, 0);
  v130 = v572;
  if ((v129 & 1) == 0)
  {
    v131 = v567;
    v132 = defaultLogger()(v129);
    v133 = Logger.logObject.getter(v132);
    v134 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v133, v134))
    {
      v135 = v125;
      v136 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v136 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "BAA creation timed out.", v136, 2u);
      v137 = v136;
      v125 = v135;
      v131 = v567;
      swift_slowDealloc(v137, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v565 + 8))(v131, v566);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v138 = type metadata accessor for SharingCredentials(0);
  v139 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56);
  v139(v130, 1, 1, v138);
  v140 = sub_1000552C8();
  v141 = v569;
  sub_100169B64((uint64_t)v140, 0, 0, 0xF000000000000000, (uint64_t)v645);
  if (v141)
  {
    swift_bridgeObjectRelease(v140);
    v142 = v576;
    v143 = v141;
LABEL_27:
    v165 = v573;
LABEL_28:
    v103 = v646;
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v124, enum case for DIPError.Code.internalError(_:), v142);
    v166 = type metadata accessor for DIPError(0);
    v167 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v166, v167, 0, 0);
    swift_errorRetain(v143);
    swift_bridgeObjectRetain(v103);
    v168 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054E7E0, v143, v124, 0, v103, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1906);
    swift_willThrow(v168);

    swift_release(v648);
    swift_errorRelease(v143);
    sub_100008030(v572, (uint64_t *)&unk_100636548);
    (*(void (**)(char *, uint64_t))(v570 + 8))(v165, v571);
    goto LABEL_29;
  }
  v567 = (char *)v139;
  v568 = (char *)v138;
  v574 = v126;
  swift_bridgeObjectRelease(v140);
  v152 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(&v617, v152);
  v153 = *((_QWORD *)&v618 + 1);
  v154 = v619;
  sub_10000806C(&v617, *((uint64_t *)&v618 + 1));
  v155 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v153, v154);
  v157 = v156;
  v569 = 0;
  v507 = v125;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v617);
  v158 = (uint64_t)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  swift_beginAccess(&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey], v643, 0, 0);
  sub_100038B24(v158, (uint64_t)&v617, &qword_100636508);
  if (*((_QWORD *)&v618 + 1))
  {
    v159 = v155;
    sub_10002581C((uint64_t)&v617, (uint64_t)&v608);
    sub_100008030((uint64_t)&v617, &qword_100636508);
    v160 = *((_QWORD *)&v609 + 1);
    v161 = v610;
    sub_10000806C(&v608, *((uint64_t *)&v609 + 1));
    v162 = v569;
    v163 = dispatch thunk of IdentityKey.attestation(_:)(0, v160, v161);
    v143 = v162;
    v164 = v564;
    if (v162)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      swift_bridgeObjectRelease(v157);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v608);
LABEL_25:
      v142 = v576;
      v125 = v507;
LABEL_26:
      v126 = v574;
      goto LABEL_27;
    }
    v171 = (_QWORD *)v163;
    v569 = 0;
    v170 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v608);
    v155 = v159;
  }
  else
  {
    v170 = sub_100008030((uint64_t)&v617, &qword_100636508);
    v171 = _swiftEmptyArrayStorage;
    v164 = v564;
  }
  v644 = v171;
  if (!v171[2])
  {
    v194 = v563;
    v195 = defaultLogger()(v170);
    v196 = Logger.logObject.getter(v195);
    v197 = static os_log_type_t.debug.getter(v196);
    if (os_log_type_enabled(v196, v197))
    {
      v198 = v155;
      v199 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v199 = 0;
      _os_log_impl((void *)&_mh_execute_header, v196, v197, "INO attestation is empty; generating key pair for INO",
        v199,
        2u);
      v200 = v199;
      v155 = v198;
      swift_slowDealloc(v200, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v565 + 8))(v194, v566);
    sub_10002581C((uint64_t)v645, (uint64_t)&v608);
    v201 = (_QWORD *)swift_allocObject(&unk_100609240, 80, 7);
    sub_100008018(&v608, (uint64_t)(v201 + 2));
    v202 = (uint64_t)v648;
    v201[7] = v648;
    v201[8] = v155;
    v201[9] = v157;
    swift_retain(v202);
    swift_bridgeObjectRetain(v157);
    v203 = sub_100004828(&qword_100636520);
    v204 = v569;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1487, &unk_100636718, v201, v203);
    v126 = v574;
    if (v204)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      swift_release(v201);
      swift_bridgeObjectRelease(v157);
      swift_bridgeObjectRelease(v644);
      v143 = v204;
      v142 = v576;
LABEL_58:
      v125 = v507;
      goto LABEL_27;
    }
    v569 = 0;
    swift_release(v201);
    swift_beginAccess(v158, &v608, 33, 0);
    sub_100184E1C((uint64_t)&v617, v158, &qword_100636508);
    swift_endAccess(&v608);
    sub_100038B24(v158, (uint64_t)&v617, &qword_100636508);
    v164 = v564;
    if (*((_QWORD *)&v618 + 1))
    {
      v217 = v564;
      v218 = v155;
      sub_10002581C((uint64_t)&v617, (uint64_t)&v608);
      sub_100008030((uint64_t)&v617, &qword_100636508);
      v219 = *((_QWORD *)&v609 + 1);
      v220 = v610;
      sub_10000806C(&v608, *((uint64_t *)&v609 + 1));
      v221 = v569;
      v222 = dispatch thunk of IdentityKey.attestation(_:)(0, v219, v220);
      v143 = v221;
      if (v221)
      {
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
        swift_bridgeObjectRelease(v157);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v608);
        swift_bridgeObjectRelease(v644);
        goto LABEL_25;
      }
      v171 = (_QWORD *)v222;
      v569 = 0;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v608);
      v155 = v218;
      v164 = v217;
    }
    else
    {
      sub_100008030((uint64_t)&v617, &qword_100636508);
      v171 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v644);
    v644 = v171;
  }
  sub_100038B24(v158, (uint64_t)&v617, &qword_100636508);
  if (!*((_QWORD *)&v618 + 1))
  {
    swift_bridgeObjectRelease(v157);
    sub_100008030((uint64_t)&v617, &qword_100636508);
    v205 = v576;
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v124, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v206 = (uint64_t)v646;
    v207 = type metadata accessor for DIPError(0);
    v208 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v209 = v207;
    v142 = v205;
    v126 = v574;
    v143 = swift_allocError(v209, v208, 0, 0);
    swift_bridgeObjectRetain(v206);
    v210 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x204F4E49206C696ELL, 0xEC0000002E79656BLL, 0, v124, 0, v206, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1499);
    swift_willThrow(v210);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
    swift_bridgeObjectRelease(v644);
    goto LABEL_58;
  }
  v172 = v164;
  sub_100008018(&v617, (uint64_t)v640);
  v125 = v507;
  if (!v171[2])
  {
    swift_bridgeObjectRelease(v157);
    v211 = v576;
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v124, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v212 = (uint64_t)v646;
    v213 = type metadata accessor for DIPError(0);
    v214 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v215 = v213;
    v142 = v211;
    v143 = swift_allocError(v215, v214, 0, 0);
    swift_bridgeObjectRetain(v212);
    v216 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010054E8E0, 0, v124, 0, v212, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1502);
    swift_willThrow(v216);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
    swift_bridgeObjectRelease(v644);
    goto LABEL_26;
  }
  v173 = *(_QWORD *)(v648[2] + 128);
  v505 = (_QWORD **)v155;
  v506 = (unint64_t *)v157;
  if (v173)
  {
    v165 = v573;
    goto LABEL_38;
  }
  v223 = sub_1000555CC();
  v224 = v223[2];
  if (v224)
  {
    v225 = &v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
    swift_beginAccess(&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes], &v639, 0, 0);
    v226 = v223 + 5;
    v165 = v573;
    while (1)
    {
      v227 = *(_QWORD *)v225;
      if (*(_QWORD *)(*(_QWORD *)v225 + 16))
      {
        v228 = *(v226 - 1);
        v229 = *v226;
        swift_bridgeObjectRetain(*v226);
        swift_bridgeObjectRetain(v227);
        v230 = sub_1004A8604(v228, v229);
        if ((v231 & 1) != 0)
        {
          v232 = *(_QWORD *)(*(_QWORD *)(v227 + 56) + 8 * v230);
          swift_retain(v232);
          swift_bridgeObjectRelease(v227);
          v233 = *(_BYTE *)(v232 + 17);
          v234 = v232;
          v165 = v573;
          swift_release(v234);
          swift_bridgeObjectRelease(v229);
          if ((v233 & 1) != 0)
          {
            swift_bridgeObjectRelease(v223);
            v125 = v507;
            v172 = v564;
            goto LABEL_38;
          }
        }
        else
        {
          swift_bridgeObjectRelease(v227);
          swift_bridgeObjectRelease(v229);
        }
      }
      v226 += 2;
      if (!--v224)
        goto LABEL_81;
    }
  }
  v165 = v573;
LABEL_81:
  swift_bridgeObjectRelease(v223);
  v172 = v564;
  if (*(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim])
  {
    v252 = swift_bridgeObjectRelease(v506);
    v253 = v554;
    v254 = defaultLogger()(v252);
    v255 = Logger.logObject.getter(v254);
    v256 = static os_log_type_t.debug.getter(v255);
    v257 = os_log_type_enabled(v255, v256);
    v258 = v572;
    v259 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v567;
    if (v257)
    {
      v260 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v260 = 0;
      _os_log_impl((void *)&_mh_execute_header, v255, v256, "skipping proofing with server", v260, 2u);
      swift_slowDealloc(v260, -1, -1);
    }

    swift_release(v648);
    (*(void (**)(char *, uint64_t))(v565 + 8))(v253, v566);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
    sub_100008030(v258, (uint64_t *)&unk_100636548);
    (*(void (**)(char *, uint64_t))(v570 + 8))(v165, v571);
    v259(v555, 1, 1, v568);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
    swift_bridgeObjectRelease(v644);
    swift_bridgeObjectRelease(v646);
    return 0;
  }
  v125 = v507;
LABEL_38:
  v638 = _swiftEmptyArrayStorage;
  v637 = _swiftEmptyArrayStorage;
  v636 = _swiftEmptyArrayStorage;
  v635 = (char *)_swiftEmptyArrayStorage;
  v634 = _swiftEmptyArrayStorage;
  v633 = sub_10011E5E4((uint64_t)_swiftEmptyArrayStorage);
  v632 = _swiftEmptyArrayStorage;
  v631 = sub_10011E8E0((uint64_t)_swiftEmptyArrayStorage);
  v630 = _swiftEmptyArrayStorage;
  v174 = (_QWORD *)v648[2];
  v175 = (void *)v174[16];
  if (v175)
  {
    v176 = v174[15];
    v177 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim];
    if (!v177
      || ((v178 = *(_QWORD *)(v177 + 32), v179 = *(void **)(v177 + 40), v178 == v176)
        ? (v180 = v175 == v179)
        : (v180 = 0),
          !v180
       && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v177 + 32), *(_QWORD *)(v177 + 40), v174[15], v174[16], 0) & 1) == 0&& ((v181 = v174[17], v182 = (void *)v174[18], v178 == v181) ? (v183 = v179 == v182) : (v183 = 0), !v183 && (_stringCompareWithSmolCheck(_:_:expecting:)(v178, v179, v181, v182, 0) & 1) == 0)))
    {
      swift_bridgeObjectRetain(v175);
      swift_bridgeObjectRelease(v506);
      *(_QWORD *)&v617 = 0;
      *((_QWORD *)&v617 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(*((_QWORD *)&v617 + 1));
      *(_QWORD *)&v617 = 0xD000000000000024;
      *((_QWORD *)&v617 + 1) = 0x800000010054E8B0;
      v243._countAndFlagsBits = v176;
      v243._object = v175;
      String.append(_:)(v243);
      swift_bridgeObjectRelease(v175);
      v245 = *((_QWORD *)&v617 + 1);
      v244 = v617;
      v124 = v577;
      v246 = v576;
      (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
      v247 = (uint64_t)v646;
      v248 = type metadata accessor for DIPError(0);
      v249 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v143 = swift_allocError(v248, v249, 0, 0);
      swift_bridgeObjectRetain(v247);
      v250 = v245;
      v142 = v246;
      v251 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v244, v250, 0, v124, 0, v247, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1543);
      swift_willThrow(v251);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      goto LABEL_78;
    }
    v184 = v177 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim;
    v185 = (uint64_t)v558;
    v186 = v560;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v557 + 16))(v558, v177 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, v560);
    v187 = sub_100099FFC(&qword_1006364F8, &qword_1006336F8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v188 = sub_100099FFC(&qword_100636500, &qword_1006336F8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    swift_retain(v177);
    v189 = v561;
    JWSSignedJSON.init(payload:)(v185, v186, v187, v188);
    swift_bridgeObjectRetain(v171);
    v190 = v562;
    JWSSignedJSON.setCertificateChain(_:)(v191);
    v193 = v192;
    if (v192)
    {
      swift_bridgeObjectRelease(v171);
      swift_release(v177);
      swift_bridgeObjectRelease(v506);
      ((void (*)(char *, uint64_t))v559[1])(v189, v190);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
LABEL_52:
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v124 = v577;
      v165 = v573;
      v142 = v576;
      v125 = v507;
      v126 = v574;
      v143 = v193;
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v171);
    JWSSignedJSON.setKid(_:)(v640, v190);
    v569 = 0;
    v282 = v559;
    v564 = (uint64_t *)v559[2];
    ((void (*)(char *, char *, uint64_t))v564)(v542, v189, v190);
    sub_10002581C((uint64_t)v640, (uint64_t)&v617);
    v284 = *((unsigned __int8 *)v282 + 80);
    v285 = (v284 + 16) & ~v284;
    v286 = (v539 + v285 + 7) & 0xFFFFFFFFFFFFFFF8;
    v287 = swift_allocObject(&unk_100609218, v286 + 40, v284 | 7);
    v288 = v287 + v285;
    v289 = v562;
    v290 = v282;
    v291 = (void (*)(uint64_t, char *, uint64_t))v282[4];
    v291(v288, v542, v562);
    sub_100008018(&v617, v287 + v286);
    v292 = v172;
    v293 = v569;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1548, &unk_100636708, v287, v289);
    v569 = v293;
    if (v293)
    {
      swift_release(v287);
      swift_release(v177);
      swift_bridgeObjectRelease(v506);
      ((void (*)(char *, uint64_t))v290[1])(v561, v289);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
LABEL_100:
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v124 = v577;
      v165 = v573;
      v142 = v576;
      v125 = v507;
      v126 = v574;
      v143 = v569;
      goto LABEL_28;
    }
    v359 = v289;
    v360 = (void (*)(char *, uint64_t))v290[1];
    v361 = v561;
    v360(v561, v359);
    swift_release(v287);
    v291((uint64_t)v361, (char *)v292, v359);
    v362 = v537;
    ((void (*)(uint64_t, char *, uint64_t))v564)(v537, v361, v359);
    v363 = *(_QWORD *)(v184 + *(int *)(v536 + 20));
    *(_QWORD *)(v362 + *(int *)(v534 + 20)) = v363;
    v364 = sub_100004828(&qword_1006365E0);
    v365 = *(unsigned __int8 *)(v535 + 80);
    v366 = (v365 + 32) & ~v365;
    v235 = swift_allocObject(v364, v366 + *(_QWORD *)(v535 + 72), v365 | 7);
    *(_OWORD *)(v235 + 16) = v533;
    v367 = sub_100035DE8(v362, v235 + v366, type metadata accessor for VerifiedClaimPresentment);
    v368 = *(_QWORD *)(v177 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData);
    __chkstk_darwin(v367);
    v369 = v575;
    v501 = &v633;
    v502 = (uint64_t *)v575;
    v503 = &v631;
    swift_retain(v363);
    swift_bridgeObjectRetain(v368);
    v370 = v569;
    sub_10016F384(v371, (void (*)(uint64_t, uint64_t, _OWORD *))sub_100183C80);
    v193 = v370;
    if (v370)
    {
      swift_release(v177);
      swift_bridgeObjectRelease(v506);
      swift_bridgeObjectRelease(v235);
      swift_bridgeObjectRelease(v368);
      sub_100035DAC(v537, type metadata accessor for VerifiedClaimPresentment);
      v360(v561, v562);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      goto LABEL_52;
    }
    swift_bridgeObjectRelease(v368);
    v384 = *(_QWORD *)(v177 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData);
    v385 = v369;
    swift_bridgeObjectRetain(v384);
    sub_10016F614(v386, (uint64_t)v385, (uint64_t *)&v646, &v637, &v630, &v631);

    v426 = swift_bridgeObjectRelease(v384);
    v427 = *(_QWORD *)(v177 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData);
    if (v427)
    {
      __chkstk_darwin(v426);
      v497 = (uint64_t)v385;
      v498 = v505;
      v499 = v506;
      v500 = v648;
      v501 = v640;
      v502 = (uint64_t *)&v644;
      v503 = (unint64_t *)&v632;
      v504 = (uint64_t *)&v631;
      swift_bridgeObjectRetain(v427);
      sub_10016F8D8(v428, (void (*)(uint64_t, uint64_t, uint64_t))sub_100183C9C);
      v569 = 0;
      swift_release(v177);
      swift_bridgeObjectRelease(v427);
      sub_100035DAC(v537, type metadata accessor for VerifiedClaimPresentment);
      v360(v561, v562);
    }
    else
    {
      swift_release(v177);
      sub_100035DAC(v537, type metadata accessor for VerifiedClaimPresentment);
      v360(v561, v562);
      v569 = 0;
    }
    v165 = v573;
    v125 = v507;
  }
  else
  {
    v235 = 0;
  }
  v236 = (char *)sub_1000555CC();
  v237 = v236;
  v238 = *((_QWORD *)v236 + 2);
  if (v238)
  {
    swift_bridgeObjectRetain(v236);
    v563 = v237;
    v239 = (uint64_t *)(v237 + 40);
    while (1)
    {
      v240 = *v239;
      *(_QWORD *)&v617 = *(v239 - 1);
      *((_QWORD *)&v617 + 1) = v240;
      swift_bridgeObjectRetain(v240);
      v241 = v569;
      sub_100153E44((uint64_t *)&v617, (uint64_t)v575, (uint64_t *)&v631, (uint64_t *)&v646, (uint64_t)v505, (uint64_t)v506, &v636, &v637, &v630, &v634, (_QWORD **)&v635, &v638);
      v569 = v241;
      if (v241)
        break;
      v239 += 2;
      swift_bridgeObjectRelease(v240);
      if (!--v238)
      {
        v564 = (uint64_t *)v235;
        v237 = v563;
        swift_bridgeObjectRelease(v563);
        v165 = v573;
        v242 = v507;
        goto LABEL_89;
      }
    }
    swift_bridgeObjectRelease(v240);
    swift_bridgeObjectRelease_n(v563, 2);
    swift_bridgeObjectRelease(v506);
    swift_bridgeObjectRelease(v235);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
    swift_bridgeObjectRelease(v630);
    swift_bridgeObjectRelease(v631);
    swift_bridgeObjectRelease(v632);
    swift_bridgeObjectRelease(v633);
    swift_bridgeObjectRelease(v634);
    swift_bridgeObjectRelease(v635);
    swift_bridgeObjectRelease(v636);
    swift_bridgeObjectRelease(v637);
    swift_bridgeObjectRelease(v638);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
    swift_bridgeObjectRelease(v644);
    v143 = v569;
LABEL_97:
    v124 = v577;
    v165 = v573;
LABEL_113:
    v142 = v576;
    goto LABEL_114;
  }
  v564 = (uint64_t *)v235;
  v242 = v125;
LABEL_89:
  swift_bridgeObjectRelease(v237);
  v261 = sub_100055820();
  v124 = v577;
  v262 = v556;
  if ((v261 & 1) == 0)
  {
    v283 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator];
    *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
    swift_release(v283);
    goto LABEL_105;
  }
  v263 = (uint64_t)v575;
  v264 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager];
  if (!v264)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    v294 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v295 = type metadata accessor for DIPError(0);
    v296 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v279 = swift_allocError(v295, v296, 0, 0);
    v297 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054E2D0, 0, v124, 0, v294, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1681);
    v278 = swift_willThrow(v297);
LABEL_103:
    v569 = 0;
    v280 = v566;
    v281 = v543;
    goto LABEL_104;
  }
  v265 = *(void **)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService];
  if (!v265)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.unexpectedDaemonState(_:), v576);
    swift_retain(v264);
    v298 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v299 = type metadata accessor for DIPError(0);
    v300 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v279 = swift_allocError(v299, v300, 0, 0);
    v301 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010054E2F0, 0, v124, 0, v298, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1685);
    swift_willThrow(v301);
    v278 = swift_release(v264);
    goto LABEL_103;
  }
  v266 = (uint64_t)v648;
  swift_retain(v648);
  swift_retain(v264);
  v561 = v265;
  v267 = objc_msgSend(v242, "serviceName");
  v268 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v267);
  v562 = v269;
  v563 = v268;

  LODWORD(v559) = *(unsigned __int8 *)(v263 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
  v270 = *(_QWORD *)(v263 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  v558 = *(_QWORD **)(v263 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  v271 = *(void **)(v263 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper);
  v272 = *(unsigned __int8 *)(v263 + v538);
  *(_QWORD *)&v619 = 0;
  v617 = 0u;
  v618 = 0u;
  *(_QWORD *)&v610 = 0;
  v608 = 0u;
  v609 = 0u;
  v273 = type metadata accessor for AssessDuringProofingODNator(0);
  memset(v647, 0, 80);
  swift_allocObject(v273, *(unsigned int *)(v273 + 48), *(unsigned __int16 *)(v273 + 52));
  v274 = v271;
  swift_retain(v264);
  v275 = v561;
  swift_bridgeObjectRetain(v270);
  v276 = v569;
  v277 = sub_1002711E0(v266, (uint64_t)v563, v562, (int)v559, (uint64_t)v558, v270, v272, v271, v264, v275, (uint64_t)&v617, (uint64_t)&v608, v647, 0);
  if (v276)
  {
    swift_release(v264);

    v279 = v276;
    v569 = 0;
    v124 = v577;
    v165 = v573;
    v280 = v566;
    v281 = v543;
LABEL_104:
    defaultLogger()(v278);
    DIPRecordError(_:message:log:)(v279, 0xD000000000000022, 0x800000010054E880, v281);
    (*(void (**)(char *, uint64_t))(v565 + 8))(v281, v280);
    v302 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator];
    *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
    swift_release(v302);
    swift_errorRelease(v279);
    goto LABEL_105;
  }
  v563 = v275;
  v372 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator;
  v373 = (uint64_t)v575;
  v374 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator];
  *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = v277;
  swift_release(v374);
  v375 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim;
  v376 = *(_QWORD *)(v373 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
  if (v376)
  {
    swift_retain(v376);
    v377 = sub_100167258(v532, (uint64_t)v648, v376);
    v569 = 0;
    v395 = v377;
    v397 = v396;
    v399 = v398;
    v401 = v400;
    sub_100035DAC(v532, type metadata accessor for VerifiedClaim);
    swift_release(v376);
    swift_bridgeObjectRelease(v399);
    swift_bridgeObjectRelease(v397);
    swift_bridgeObjectRelease(v395);
  }
  else
  {
    v569 = 0;
    v401 = 0;
  }
  v402 = v638;
  v403 = v648[3];
  if (v403)
  {
    v404 = *(_QWORD **)(v403 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain(v404);
  }
  else
  {
    v404 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v402);
  v406 = sub_10040E018(v405, 1, (uint64_t)v404);
  swift_bridgeObjectRelease(v404);
  swift_bridgeObjectRelease(v402);
  *(_QWORD *)&v606[0] = v406;
  v407 = v630;
  v408 = v648[3];
  if (v408)
  {
    v409 = *(_QWORD **)(v408 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain(v409);
  }
  else
  {
    v409 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v407);
  v411 = sub_10040E018(v410, 2, (uint64_t)v409);
  swift_bridgeObjectRelease(v409);
  swift_bridgeObjectRelease(v407);
  sub_1001227D0((uint64_t)v411);
  v412 = (uint64_t)v575;
  v413 = *(_QWORD *)&v575[v375];
  v414 = *(_QWORD *)&v606[0];
  *(_QWORD *)&v619 = 0;
  v617 = 0u;
  v618 = 0u;
  v415 = type metadata accessor for DIPPregeneratedAssessment(0);
  v608 = 0u;
  v609 = 0u;
  *(_QWORD *)&v610 = 0;
  v416 = (uint64_t)v529;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v415 - 8) + 56))(v529, 1, 1, v415);
  v417 = *(_QWORD *)(v412 + v372);
  swift_retain(v417);
  swift_retain(v413);
  v418 = v530;
  sub_10015DD6C((uint64_t)v648, v413, v401, v414, (uint64_t)&v617, (uint64_t)&v608, v416, v417, v530, 0, 0);
  swift_release(v417);
  swift_bridgeObjectRelease(v414);
  swift_release(v413);

  swift_release(v264);
  swift_bridgeObjectRelease(v401);
  sub_100008030(v416, &qword_100636688);
  sub_100008030((uint64_t)&v608, &qword_100636670);
  sub_100008030((uint64_t)&v617, &qword_100636670);
  sub_100035DAC(v418, type metadata accessor for ODNAssessmentResult);
  v124 = v577;
  v165 = v573;
  v262 = v556;
LABEL_105:
  v629 = _swiftEmptyArrayStorage;
  v303 = (uint64_t)v648;
  v304 = v648 + 760;
  swift_beginAccess(v648 + 760, &v628, 0, 0);
  v306 = *(_QWORD *)(v303 + 6080);
  if (!*(_QWORD *)(v306 + 16))
  {
    v312 = v262;
    goto LABEL_117;
  }
  v307 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession;
  v308 = *(unint64_t **)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession];
  if (v308)
  {
    v309 = v564;
LABEL_108:
    __chkstk_darwin(v305);
    v497 = (uint64_t)v648;
    v498 = &v638;
    v499 = &v633;
    v500 = v640;
    v501 = v308;
    v502 = (uint64_t *)&v644;
    v503 = (unint64_t *)&v629;
    swift_retain(v308);
    swift_bridgeObjectRetain(v306);
    v310 = v569;
    sub_10016FAB8(v311, (void (*)(uint64_t, uint64_t, uint64_t))sub_100183BA4);
    v143 = v310;
    v125 = v507;
    if (v310)
    {
      swift_bridgeObjectRelease(v506);
      swift_bridgeObjectRelease(v306);
      swift_bridgeObjectRelease(v309);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      swift_release(v308);
      swift_bridgeObjectRelease(v629);
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v142 = v576;
LABEL_115:
      v126 = v574;
      goto LABEL_28;
    }
    v564 = v309;
    v569 = 0;
    swift_bridgeObjectRelease(v306);
    swift_release(v308);
    v312 = v556;
LABEL_117:
    v316 = v648[2];
    v317 = *(_QWORD *)(v316 + 24);
    v563 = *(char **)(v316 + 16);
    v318 = v641;
    v319 = v642;
    sub_10000806C(v640, v641);
    v562 = v317;
    v320 = swift_bridgeObjectRetain(v317);
    dispatch thunk of IdentityKey.attestationType()(v318, v319, v320);
    v321 = v629;
    v322 = v632;
    v323 = v635;
    v324 = v637;
    v325 = v636;
    v326 = v634;
    swift_bridgeObjectRetain(v629);
    swift_bridgeObjectRetain(v322);
    v561 = v323;
    swift_bridgeObjectRetain(v323);
    swift_bridgeObjectRetain(v324);
    v559 = v325;
    swift_bridgeObjectRetain(v325);
    v558 = v326;
    swift_bridgeObjectRetain(v326);
    v327 = v544;
    v329 = UUID.init()(v328);
    v330 = UUID.uuidString.getter(v329);
    v332 = v331;
    (*(void (**)(char *, uint64_t))(v545 + 8))(v327, v546);
    if (qword_10062F4F8 != -1)
      swift_once(&qword_10062F4F8, sub_100283AC4);
    v333 = qword_100670340;
    v334 = v553;
    *v553 = 0;
    v334[1] = 0xE000000000000000;
    v334[2] = v330;
    v334[3] = v332;
    *((_OWORD *)v334 + 2) = 0u;
    *((_OWORD *)v334 + 3) = 0u;
    *((_OWORD *)v334 + 4) = 0u;
    v335 = v562;
    v334[10] = v563;
    v334[11] = v335;
    v336 = (int *)v549;
    (*(void (**)(char *, char *, uint64_t))(v547 + 32))((char *)v334 + *(int *)(v549 + 28), v312, v548);
    *(_QWORD *)((char *)v334 + v336[8]) = v321;
    *(_QWORD *)((char *)v334 + v336[9]) = v564;
    *(_QWORD *)((char *)v334 + v336[10]) = v322;
    *(_QWORD *)((char *)v334 + v336[11]) = v561;
    *(_QWORD *)((char *)v334 + v336[12]) = v324;
    *(_QWORD *)((char *)v334 + v336[13]) = v559;
    *(_QWORD *)((char *)v334 + v336[14]) = v558;
    *(_QWORD *)((char *)v334 + v336[15]) = v333;
    v627 = 0;
    v337 = v550;
    v338 = v552;
    v339 = v551;
    v340 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v550 + 56))(v552, 1, 1);
    v564 = (uint64_t *)&v505;
    __chkstk_darwin(v340);
    v126 = v574;
    v495 = v341;
    v496 = v574;
    v497 = (uint64_t)v334;
    v498 = (_QWORD **)v648;
    v499 = (unint64_t *)&v644;
    v500 = v640;
    v501 = (unint64_t *)v338;
    v502 = &v627;
    v125 = v507;
    v503 = (unint64_t *)v507;
    v504 = (uint64_t *)&v646;
    swift_bridgeObjectRetain(v333);
    v342 = v569;
    DIPRetrier.sync(_:)(sub_100183A84, &v493);
    if (v342)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      swift_bridgeObjectRelease(v506);
      sub_100008030(v338, &qword_1006366E8);
      swift_errorRelease(v627);
      sub_100035DAC((uint64_t)v334, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease(v629);
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v124 = v577;
      v165 = v573;
      v142 = v576;
      v143 = v342;
      goto LABEL_28;
    }
    v569 = 0;
    v343 = v337;
    v344 = v125;
    v345 = v540;
    sub_100038B24(v338, v540, &qword_1006366E8);
    v346 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v343 + 48))(v345, 1, v339);
    v124 = v577;
    v347 = v573;
    v348 = v506;
    if (v346 == 1)
    {
      swift_bridgeObjectRelease(v506);
      sub_100008030(v345, &qword_1006366E8);
LABEL_133:
      v378 = v576;
      (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v124, enum case for DIPError.Code.serverResponseInconsistent(_:), v576);
      v379 = (uint64_t)v646;
      v380 = type metadata accessor for DIPError(0);
      v381 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v382 = v380;
      v142 = v378;
      v143 = swift_allocError(v382, v381, 0, 0);
      swift_bridgeObjectRetain(v379);
      v383 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054E800, 0, v124, 0, v379, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1826);
      swift_willThrow(v383);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      sub_100008030(v552, &qword_1006366E8);
      swift_errorRelease(v627);
      sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease(v629);
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v126 = v574;
      goto LABEL_134;
    }
    v349 = v345;
    v350 = v541;
    sub_100038AE0(v349, v541, type metadata accessor for IdentityProofingResponse);
    v351 = *(_QWORD *)(v350 + 112);
    if (!v351)
    {
      sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
      swift_bridgeObjectRelease(v348);
      goto LABEL_133;
    }
    v352 = v648[2];
    v354 = *(_QWORD *)(v352 + 64);
    v353 = *(void **)(v352 + 72);
    swift_bridgeObjectRetain(v351);
    swift_bridgeObjectRetain(v353);
    v355 = v354;
    v356 = v569;
    sub_100177078(v640, v351, v355, v353, (uint64_t)v505, v348);
    v569 = v356;
    if (v356)
    {
      swift_bridgeObjectRelease(v351);
      swift_bridgeObjectRelease(v353);
      swift_bridgeObjectRelease(v348);
      sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      sub_100008030(v552, &qword_1006366E8);
      swift_errorRelease(v627);
      sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease(v629);
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v142 = v576;
      v143 = v569;
LABEL_134:
      v165 = v347;
      v125 = v344;
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v351);
    swift_bridgeObjectRelease(v348);
    swift_bridgeObjectRelease(v353);
    v387 = v531;
    sub_100038B24(v541 + v551[7], v531, &qword_1006366E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v527 + 48))(v387, 1, v536) == 1)
    {
      sub_100008030(v531, &qword_1006366E0);
      v388 = *(_QWORD *)(v541 + v551[9]);
      if (v388)
      {
        v389 = (_QWORD *)swift_allocObject(&unk_1006091F0, 40, 7);
        v390 = (uint64_t)v648;
        v389[2] = v648;
        v389[3] = v388;
        v391 = v575;
        v389[4] = v575;
        v392 = type metadata accessor for LegacySynthesizedWorkflows();
        swift_retain_n(v388, 2);
        swift_retain(v390);
        v393 = v391;
        v394 = v569;
        runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1834, &unk_1006366F8, v389, v392);
        v143 = v394;
        if (!v394)
        {

          swift_release(v389);
          swift_release(v388);
          swift_release(v648);
          sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
          sub_100008030(v572, (uint64_t *)&unk_100636548);
          (*(void (**)(char *, uint64_t))(v570 + 8))(v573, v571);
          v103 = (id)v617;
          ((void (*)(uint64_t, uint64_t, uint64_t, char *))v567)(v555, 1, 1, v568);
          sub_100008030(v552, &qword_1006366E8);
          swift_errorRelease(v627);
          sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
          swift_bridgeObjectRelease(v629);
          swift_bridgeObjectRelease(v630);
          swift_bridgeObjectRelease(v631);
          swift_bridgeObjectRelease(v632);
          swift_bridgeObjectRelease(v633);
          swift_bridgeObjectRelease(v634);
          swift_bridgeObjectRelease(v635);
          swift_bridgeObjectRelease(v636);
          swift_bridgeObjectRelease(v637);
          swift_bridgeObjectRelease(v638);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
          swift_bridgeObjectRelease(v644);
          swift_bridgeObjectRelease(v646);
          return (uint64_t)v103;
        }
        swift_release(v389);
        swift_release(v388);
        sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
        sub_100008030(v552, &qword_1006366E8);
        swift_errorRelease(v627);
        sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
        swift_bridgeObjectRelease(v629);
        swift_bridgeObjectRelease(v630);
        swift_bridgeObjectRelease(v631);
        swift_bridgeObjectRelease(v632);
        swift_bridgeObjectRelease(v633);
        swift_bridgeObjectRelease(v634);
        swift_bridgeObjectRelease(v635);
        swift_bridgeObjectRelease(v636);
        swift_bridgeObjectRelease(v637);
        swift_bridgeObjectRelease(v638);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
        swift_bridgeObjectRelease(v644);
        goto LABEL_97;
      }
      v124 = v577;
      v429 = v576;
      (*(void (**)(char *, _QWORD, uint64_t))(v578 + 104))(v577, enum case for DIPError.Code.serverResponseInconsistent(_:), v576);
      v430 = (uint64_t)v646;
      v431 = type metadata accessor for DIPError(0);
      v432 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v433 = v431;
      v142 = v429;
      v143 = swift_allocError(v433, v432, 0, 0);
      swift_bridgeObjectRetain(v430);
      v434 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x800000010054E820, 0, v124, 0, v430, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1840);
      swift_willThrow(v434);
      sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      sub_100008030(v552, &qword_1006366E8);
      swift_errorRelease(v627);
      sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease(v629);
LABEL_78:
      swift_bridgeObjectRelease(v630);
      swift_bridgeObjectRelease(v631);
      swift_bridgeObjectRelease(v632);
      swift_bridgeObjectRelease(v633);
      swift_bridgeObjectRelease(v634);
      swift_bridgeObjectRelease(v635);
      swift_bridgeObjectRelease(v636);
      swift_bridgeObjectRelease(v637);
      swift_bridgeObjectRelease(v638);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
      swift_bridgeObjectRelease(v644);
      v165 = v573;
LABEL_114:
      v125 = v507;
      goto LABEL_115;
    }
    sub_100038AE0(v531, v528, type metadata accessor for VerifiedClaim);
    v419 = *(_QWORD *)(v541 + v551[8]);
    if (v419)
    {
      v420 = &_swiftEmptyDictionarySingleton;
      *(_QWORD *)&v617 = &_swiftEmptyDictionarySingleton;
      v421 = *(_QWORD *)(v419 + 16);
      if (v421)
      {
        v422 = *(_QWORD *)(sub_100004828(&qword_100634158) - 8);
        v423 = v419 + ((*(unsigned __int8 *)(v422 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v422 + 80));
        v424 = *(_QWORD *)(v422 + 72);
        swift_bridgeObjectRetain_n(v419, 2);
        while (1)
        {
          v425 = v569;
          sub_100156268(&v617, v423, (uint64_t)v575, (uint64_t)v648, v640);
          v569 = v425;
          if (v425)
            break;
          v423 += v424;
          if (!--v421)
          {
            swift_bridgeObjectRelease_n(v419, 2);
            v420 = (void *)v617;
            goto LABEL_158;
          }
        }
        swift_bridgeObjectRelease(v617);
        swift_bridgeObjectRelease_n(v419, 2);
        goto LABEL_166;
      }
    }
    else
    {
      v420 = 0;
    }
LABEL_158:
    v435 = &v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
    swift_beginAccess(&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes], &v626, 0, 0);
    v436 = *(_QWORD *)v435;
    v437 = (uint64_t)v648;
    swift_retain(v648);
    swift_bridgeObjectRetain(v436);
    v438 = v569;
    v440 = sub_10017758C(v439, v437);
    swift_release(v437);
    swift_bridgeObjectRelease(v436);
    v564 = (uint64_t *)sub_100177740(v640, v528, (uint64_t)v420, v440, *(_BYTE *)(*(_QWORD *)(v437 + 16)+ OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) & 1);
    v567 = v441;
    v568 = v442;
    v569 = v438;
    if (v438)
    {
      swift_release(v440);
      swift_bridgeObjectRelease(v420);
LABEL_166:
      sub_100035DAC(v528, type metadata accessor for VerifiedClaim);
      sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
      sub_100008030(v552, &qword_1006366E8);
      swift_errorRelease(v627);
      sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
      swift_bridgeObjectRelease(v629);
      goto LABEL_100;
    }
    swift_release(v440);
    swift_bridgeObjectRelease(v420);
    v443 = v560;
    v444 = v528;
    JWSSignedJSON.payload.getter(v560);
    v606[6] = v603;
    v606[7] = v604;
    v607 = v605;
    v606[2] = v599;
    v606[3] = v600;
    v606[4] = v601;
    v606[5] = v602;
    v606[0] = v597;
    v606[1] = v598;
    v562 = v599;
    v563 = (char *)*((_QWORD *)&v598 + 1);
    swift_bridgeObjectRetain(v599);
    sub_100182A60(v606);
    JWSSignedJSON.payload.getter(v443);
    v614 = v594;
    v615 = v595;
    v616 = v596;
    v610 = v590;
    v611 = v591;
    v612 = v592;
    v613 = v593;
    v608 = v588;
    v609 = v589;
    v561 = (char *)*((_QWORD *)&v593 + 1);
    v445 = v594;
    swift_bridgeObjectRetain(v594);
    sub_100182A60(&v608);
    JWSSignedJSON.payload.getter(v443);
    v621 = v583;
    v622 = v584;
    v623 = v585;
    v624 = v586;
    v625 = v587;
    v619 = v581;
    v620 = v582;
    v617 = v579;
    v618 = v580;
    v560 = *((_QWORD *)&v583 + 1);
    v446 = v584;
    swift_bridgeObjectRetain(v584);
    sub_100182A60(&v617);
    v447 = v444;
    v448 = v514;
    sub_100035DE8(v447, v514, type metadata accessor for VerifiedClaim);
    v449 = objc_msgSend(v507, "serviceName");
    v450 = static String._unconditionallyBridgeFromObjectiveC(_:)(v449);
    v559 = v451;

    v452 = (uint64_t)v648;
    v453 = *(_QWORD *)(v648[2] + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL);
    v454 = type metadata accessor for DIPStoredVerifiedClaim(0);
    v455 = (uint64_t *)swift_allocObject(v454, *(unsigned int *)(v454 + 48), *(unsigned __int16 *)(v454 + 52));
    v456 = OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData;
    *(uint64_t *)((char *)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_encryptedClaimData) = 0;
    v457 = v562;
    v455[2] = (uint64_t)v563;
    v455[3] = v457;
    v455[4] = (uint64_t)v561;
    v455[5] = v445;
    v455[6] = v560;
    v455[7] = v446;
    sub_100038AE0(v448, (uint64_t)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claim, type metadata accessor for VerifiedClaim);
    *(uint64_t *)((char *)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_claimData) = (uint64_t)v564;
    *(uint64_t *)((char *)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_unverifiedClaimData) = (uint64_t)v567;
    v458 = *(uint64_t *)((char *)v455 + v456);
    *(uint64_t *)((char *)v455 + v456) = (uint64_t)v568;
    swift_bridgeObjectRetain(v453);
    swift_bridgeObjectRelease(v458);
    v459 = (uint64_t *)((char *)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_serviceName);
    v460 = v559;
    *v459 = v450;
    v459[1] = (uint64_t)v460;
    *(uint64_t *)((char *)v455 + OBJC_IVAR____TtC8coreidvd22DIPStoredVerifiedClaim_acl) = v453;
    v461 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v523 + 56))(v526, 1, 1, v524);
    v462 = *(_QWORD *)(v452 + 16) + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
    v463 = *(_QWORD *)v462;
    if ((*(_BYTE *)(v462 + 8) & 1) != 0)
    {
      static Calendar.current.getter(v461);
      v464 = v508;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v519 + 56))(v508, 1, 1, v520);
      v465 = type metadata accessor for TimeZone(0);
      v466 = v509;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v465 - 8) + 56))(v509, 1, 1, v465);
      LOBYTE(v504) = 1;
      LOBYTE(v502) = 1;
      LOBYTE(v500) = 1;
      LOBYTE(v498) = 1;
      LOBYTE(v496) = 1;
      LOBYTE(v494) = 1;
      v467 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v464, v466, v463, 1, v463, 1, v463, 1, 60, 0, v463, 1, v463, 1, v463, 1, v463, 1, v463,
               v494,
               v463,
               (_DWORD)v496,
               v463,
               (_DWORD)v498,
               v463,
               (_DWORD)v500,
               v463,
               (_DWORD)v502,
               v463,
               (_DWORD)v504);
    }
    else
    {
      if (v463 < 0)
      {
LABEL_170:
        if (qword_10062F5B0 != -1)
          v461 = swift_once(&qword_10062F5B0, sub_100486FCC);
        v476 = qword_100670828;
        v477 = v525;
        v478 = static DispatchWorkItemFlags.barrier.getter(v461);
        __chkstk_darwin(v478);
        v501 = (unint64_t *)v476;
        v502 = v455;
        v503 = v526;
        v479 = v569;
        OS_dispatch_queue.sync<A>(flags:execute:)(v477, sub_100183B6C);
        if (v479)
        {
          v480 = *(uint64_t (**)(char *, uint64_t))(v515 + 8);
          v481 = v480(v525, v522);
          v482 = defaultLogger()(v481);
          v483 = Logger.logObject.getter(v482);
          v484 = static os_log_type_t.debug.getter(v483);
          if (os_log_type_enabled(v483, v484))
          {
            v485 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v485 = 0;
            _os_log_impl((void *)&_mh_execute_header, v483, v484, "storing claim failed, attempting update instead", v485, 2u);
            swift_slowDealloc(v485, -1, -1);
          }

          v486 = (*(uint64_t (**)(char *, uint64_t))(v565 + 8))(v516, v566);
          v487 = qword_100670828;
          v488 = v517;
          v489 = static DispatchWorkItemFlags.barrier.getter(v486);
          __chkstk_darwin(v489);
          v501 = (unint64_t *)v487;
          v502 = v455;
          v503 = v526;
          OS_dispatch_queue.sync<A>(flags:execute:)(v488, sub_100183B88);
          v480(v517, v522);
          swift_errorRelease(v479);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v515 + 8))(v525, v522);
        }
        v490 = *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim];
        *(_QWORD *)&v575[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = v455;
        swift_retain(v455);
        swift_release(v490);
        v491._countAndFlagsBits = 0xD000000000000023;
        v491._object = (void *)0x800000010054E850;
        v492._countAndFlagsBits = 0x3464313061663533;
        v492._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v492, v491);

        swift_release(v455);
        swift_release(v648);
        sub_100008030((uint64_t)v526, &qword_100633990);
        sub_100035DAC(v528, type metadata accessor for VerifiedClaim);
        sub_100035DAC(v541, type metadata accessor for IdentityProofingResponse);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
        (*(void (**)(char *, uint64_t))(v570 + 8))(v573, v571);
        sub_100008030(v552, &qword_1006366E8);
        swift_errorRelease(v627);
        sub_100035DAC((uint64_t)v553, type metadata accessor for IdentityProofingRequest);
        swift_bridgeObjectRelease(v629);
        swift_bridgeObjectRelease(v630);
        swift_bridgeObjectRelease(v631);
        swift_bridgeObjectRelease(v632);
        swift_bridgeObjectRelease(v633);
        swift_bridgeObjectRelease(v634);
        swift_bridgeObjectRelease(v635);
        swift_bridgeObjectRelease(v636);
        swift_bridgeObjectRelease(v637);
        swift_bridgeObjectRelease(v638);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
        swift_bridgeObjectRelease(v644);
        sub_1000A1F54(v572, v555, (uint64_t *)&unk_100636548);
        swift_bridgeObjectRelease(v646);
        return 0;
      }
      static Calendar.current.getter(v461);
      v468 = v508;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v519 + 56))(v508, 1, 1, v520);
      v469 = type metadata accessor for TimeZone(0);
      v470 = v509;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v469 - 8) + 56))(v509, 1, 1, v469);
      LOBYTE(v504) = 1;
      LOBYTE(v502) = 1;
      LOBYTE(v500) = 1;
      LOBYTE(v498) = 1;
      LOBYTE(v496) = 1;
      LOBYTE(v494) = 1;
      v467 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v468, v470, 0, 1, 0, 1, 0, 1, v463, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
               v494,
               0,
               (_DWORD)v496,
               0,
               (_DWORD)v498,
               0,
               (_DWORD)v500,
               0,
               (_DWORD)v502,
               0,
               (_DWORD)v504);
    }
    v471 = v513;
    Date.init()(v467);
    v472 = (uint64_t)v510;
    v473 = v521;
    v474 = v518;
    Calendar.date(byAdding:to:wrappingComponents:)(v521, v471, 0);
    (*(void (**)(char *, uint64_t))(v523 + 8))(v471, v524);
    (*(void (**)(char *, uint64_t))(v511 + 8))(v473, v512);
    (*(void (**)(char *, uint64_t))(v519 + 8))(v474, v520);
    v475 = (uint64_t)v526;
    sub_100008030((uint64_t)v526, &qword_100633990);
    v461 = sub_1000A1F54(v472, v475, &qword_100633990);
    goto LABEL_170;
  }
  v313 = type metadata accessor for DIPECIESSessionECV3(0);
  swift_allocObject(v313, *(unsigned int *)(v313 + 48), *(unsigned __int16 *)(v313 + 52));
  v314 = v569;
  v315 = DIPECIESSessionECV3.init(_:)(0);
  v309 = v564;
  if (v314)
  {
    swift_bridgeObjectRelease(v506);
    swift_bridgeObjectRelease(v309);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v645);
    swift_bridgeObjectRelease(v629);
    swift_bridgeObjectRelease(v630);
    swift_bridgeObjectRelease(v631);
    swift_bridgeObjectRelease(v632);
    swift_bridgeObjectRelease(v633);
    swift_bridgeObjectRelease(v634);
    swift_bridgeObjectRelease(v635);
    swift_bridgeObjectRelease(v636);
    swift_bridgeObjectRelease(v637);
    swift_bridgeObjectRelease(v638);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v640);
    swift_bridgeObjectRelease(v644);
    v143 = v314;
    goto LABEL_113;
  }
  v569 = 0;
  v357 = (uint64_t)v575;
  v358 = *(_QWORD *)&v575[v307];
  *(_QWORD *)&v575[v307] = v315;
  v305 = swift_release(v358);
  v308 = *(unint64_t **)(v357 + v307);
  if (v308)
  {
    v306 = *v304;
    goto LABEL_108;
  }
  result = swift_bridgeObjectRelease(v309);
  __break(1u);
  return result;
}

uint64_t sub_100152218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPKeyAlgorithm(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeystoreKeyType(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001522A8, 0, 0);
}

uint64_t sub_1001522A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 32);
  sub_10000806C(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v0 + 104) = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for KeystoreKeyType.temporary(_:), v3);
  v9 = enum case for DIPKeyAlgorithm.ECC256(_:);
  v10 = type metadata accessor for DIPKeyAlgorithm(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v4, v9, v10);
  v11 = async function pointer to DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)[1];
  swift_bridgeObjectRetain(v8);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 112) = v12;
  *v12 = v0;
  v12[1] = sub_1001485A0;
  return DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(*(_QWORD *)(v0 + 16), v7, v8, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), 0);
}

uint64_t sub_1001523CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1001523E8, 0, 0);
}

uint64_t sub_1001523E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = sub_100004828((uint64_t *)&unk_1006364E0);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_10015247C;
  return JWSSignedJSON.sign(_:)(v0[4], v3);
}

uint64_t sub_10015247C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1001850F8, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

char *sub_1001524E8(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  char *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD v45[3];
  uint64_t v46;

  result = sub_10040C194(a1, a2);
  if (v6)
    return result;
  v15 = v12;
  v16 = v14;
  v42 = (uint64_t)result;
  v43 = v13;
  v45[0] = v13;
  v45[1] = v14;
  v44[0] = 0x6E692D646579656BLL;
  v44[1] = 0xE800000000000000;
  v17 = sub_100099FB8();
  v18 = sub_100183D54();
  if ((BidirectionalCollection<>.starts<A>(with:)(v44, &type metadata for String, &type metadata for String, v17, v18) & 1) == 0)
  {
    v27 = v15;
    goto LABEL_7;
  }
  v41 = v15;
  v19 = *a3;
  v20 = a3[1];
  swift_bridgeObjectRetain(v20);
  sub_100183F08(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v45[0] = *a4;
  *a4 = 0x8000000000000000;
  sub_100481B88(a3, v19, v20, isUniquelyReferenced_nonNull_native);
  v22 = *a4;
  *a4 = v45[0];
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v22);
  v23 = (uint64_t *)(a5 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
  swift_beginAccess(v23, v45, 0, 0);
  v24 = *v23;
  if (*(_QWORD *)(*v23 + 16))
  {
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v24);
    sub_1004A8604(v42, v41);
    v26 = v25;
    swift_bridgeObjectRelease(v41);
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease(v41);
      v27 = v24;
LABEL_7:
      swift_bridgeObjectRelease(v27);
      v28 = v43;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease(v24);
  }
  v36 = type metadata accessor for SubmittedAttributeWrapper(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  swift_bridgeObjectRetain(v20);
  sub_100183F08(a3);
  swift_bridgeObjectRetain(v16);
  v38 = v20;
  v28 = v43;
  sub_100141324(v19, v38, a3, 0, v43, v16);
  swift_beginAccess(v23, v44, 33, 0);
  v39 = swift_isUniquelyReferenced_nonNull_native(*v23);
  v46 = *v23;
  *v23 = 0x8000000000000000;
  sub_100481B60(v37, v42, v41, v39);
  v40 = *v23;
  *v23 = v46;
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v40);
  swift_endAccess(v44);
LABEL_8:
  v29 = *a6;
  if (!*(_QWORD *)(*a6 + 16))
  {
LABEL_13:
    v33 = swift_isUniquelyReferenced_nonNull_native(v29);
    v44[0] = *a6;
    *a6 = 0x8000000000000000;
    v34 = 1;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain(v16);
  v30 = sub_1004A8604(v28, v16);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease(v16);
    v29 = *a6;
    goto LABEL_13;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
  result = (char *)swift_bridgeObjectRelease(v16);
  if (!__OFADD__(v32, 1))
  {
    v33 = swift_isUniquelyReferenced_nonNull_native(*a6);
    v44[0] = *a6;
    *a6 = 0x8000000000000000;
    v34 = v32 + 1;
LABEL_14:
    sub_100481D10(v34, v28, v16, v33);
    v35 = *a6;
    *a6 = v44[0];
    swift_bridgeObjectRelease(v16);
    return (char *)swift_bridgeObjectRelease(v35);
  }
  __break(1u);
  return result;
}

char *sub_100152824(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD **a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  _QWORD *v54;
  _QWORD *v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD **v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[3];
  char v98[24];
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105[6];
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;

  v86 = a6;
  v87 = a5;
  v85 = a4;
  v89 = a3;
  v88 = a2;
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)a1;
  v13 = *(void **)(a1 + 8);
  v96 = *(_QWORD *)(a1 + 16);
  v95 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 40);
  v94 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 56);
  v93 = *(_QWORD *)(a1 + 48);
  v92 = *(unsigned __int8 *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 80);
  v91 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 96);
  v90 = *(_QWORD *)(a1 + 88);
  v18 = *(_BYTE *)(a1 + 104);
  result = sub_10040C194(v12, v13);
  if (!v6)
  {
    v23 = v22;
    v81 = result;
    v84 = v20;
    v80 = v9;
    v82 = v8;
    v83 = v11;
    v24 = v95;
    v105[0] = v96;
    v105[1] = v95;
    v105[2] = v94;
    v105[3] = v14;
    v105[4] = v93;
    v105[5] = v15;
    v25 = v15;
    v106 = v92;
    v107 = v91;
    v108 = v16;
    v109 = v90;
    v110 = v17;
    v111 = v18;
    v26 = v21;
    v27 = type metadata accessor for SubmittedAttributeWrapper(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain_n(v24, 2);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    sub_100141324(v96, v24, v105, 1, v26, v23);
    v29 = v23;
    v96 = v26;
    v30 = (_QWORD *)(v88 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
    swift_beginAccess(v88 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes, v98, 0, 0);
    v31 = *v30;
    v32 = v83;
    v33 = v89;
    if (*(_QWORD *)(*v30 + 16))
    {
      v34 = v84;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v31);
      sub_1004A8604((uint64_t)v81, v34);
      v36 = v35;
      swift_bridgeObjectRelease(v34);
      if ((v36 & 1) != 0)
      {
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v31);
LABEL_7:
        v40 = v82;
        if (!*(_QWORD *)(v28 + 104))
          goto LABEL_9;
        v41 = *(_QWORD *)(v28 + 176);
        v42 = *(_QWORD *)(v28 + 152);
        v43 = *(_BYTE *)(v28 + 144);
        v44 = *(_QWORD *)(v28 + 136);
        v99 = *(_QWORD *)(v28 + 128);
        v100 = v44;
        v101 = v43 & 1;
        v102 = v42;
        v103 = *(_OWORD *)(v28 + 160);
        v104 = v41;
        v45 = v103;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        v46 = sub_100439A90();
        v48 = v47;
        v95 = 0;
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v45);
        swift_bridgeObjectRelease(v44);
        v32 = v83;
        v33 = v89;
        v40 = v82;
        if (v48 >> 60 == 15)
        {
LABEL_9:
          swift_bridgeObjectRelease(v29);
          (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v32, enum case for DIPError.Code.unexpectedDaemonState(_:), v40);
          v49 = *v33;
          v50 = type metadata accessor for DIPError(0);
          v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v50, v51, 0, 0);
          swift_bridgeObjectRetain(v49);
          v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000040, 0x800000010054E900, 0, v32, 0, v49, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1581);
          swift_willThrow(v52);
          return (char *)swift_release(v28);
        }
        v53 = Data.base16EncodedString()();
        sub_100007F78(v46, v48);
        v54 = v85;
        v55 = (_QWORD *)*v85;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v85);
        *v54 = v55;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v55 = sub_1000E2358(0, v55[2] + 1, 1, v55);
          *v54 = v55;
        }
        v58 = v55[2];
        v57 = v55[3];
        v79 = v29;
        if (v58 >= v57 >> 1)
        {
          v55 = sub_1000E2358((_QWORD *)(v57 > 1), v58 + 1, 1, v55);
          *v54 = v55;
        }
        v55[2] = v58 + 1;
        *(Swift::String *)&v55[2 * v58 + 4] = v53;
        v60 = *(_QWORD *)(v28 + 56);
        v59 = *(_QWORD *)(v28 + 64);
        v61 = *(_QWORD *)(v28 + 72);
        v62 = *(_QWORD *)(v28 + 80);
        v63 = *(_QWORD *)(v28 + 88);
        v64 = v87;
        v65 = *v87;
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v61);
        v66 = swift_isUniquelyReferenced_nonNull_native(v65);
        *v64 = v65;
        if ((v66 & 1) == 0)
        {
          v65 = sub_1000E2DB0(0, v65[2] + 1, 1, v65);
          *v64 = v65;
        }
        v68 = v65[2];
        v67 = v65[3];
        if (v68 >= v67 >> 1)
        {
          v65 = sub_1000E2DB0((_QWORD *)(v67 > 1), v68 + 1, 1, v65);
          *v87 = v65;
        }
        v65[2] = v68 + 1;
        v69 = &v65[5 * v68];
        v69[4] = v60;
        v69[5] = v59;
        v69[6] = v61;
        v69[7] = v62;
        v69[8] = v63;
        v70 = v86;
        v71 = *v86;
        if (*(_QWORD *)(*v86 + 16))
        {
          v72 = v79;
          swift_bridgeObjectRetain(v79);
          v73 = sub_1004A8604(v96, v72);
          if ((v74 & 1) != 0)
          {
            v75 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v73);
            result = (char *)swift_bridgeObjectRelease(v72);
            if (__OFADD__(v75, 1))
            {
              __break(1u);
              return result;
            }
            v76 = swift_isUniquelyReferenced_nonNull_native(*v70);
            v97[0] = *v70;
            *v70 = 0x8000000000000000;
            v77 = v75 + 1;
LABEL_26:
            sub_100481D10(v77, v96, v72, v76);
            v78 = *v70;
            *v70 = v97[0];
            swift_release(v28);
            swift_bridgeObjectRelease(v72);
            return (char *)swift_bridgeObjectRelease(v78);
          }
          swift_bridgeObjectRelease(v72);
          v71 = *v70;
        }
        else
        {
          v72 = v79;
        }
        v76 = swift_isUniquelyReferenced_nonNull_native(v71);
        v97[0] = *v70;
        *v70 = 0x8000000000000000;
        v77 = 1;
        goto LABEL_26;
      }
      swift_bridgeObjectRelease(v31);
    }
    swift_beginAccess(v30, v97, 33, 0);
    swift_retain(v28);
    v37 = swift_isUniquelyReferenced_nonNull_native(*v30);
    v112 = *v30;
    *v30 = 0x8000000000000000;
    v38 = v84;
    sub_100481B60(v28, (uint64_t)v81, v84, v37);
    v39 = *v30;
    *v30 = v112;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v39);
    swift_endAccess(v97);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100152FD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, unint64_t *a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  Swift::OpaquePointer v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  id v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  char *v137;
  id v138;
  _QWORD v139[2];
  __int128 v140;
  uint64_t v141;
  uint64_t v142;

  v129 = a8;
  v132 = a7;
  v136 = a5;
  v137 = (char *)a6;
  v119 = a4;
  v128 = a3;
  v134 = a1;
  v135 = a2;
  v133 = sub_100004828(&qword_100634158);
  v123 = *(_QWORD *)(v133 - 8);
  v11 = *(_QWORD *)(v123 + 64);
  v12 = __chkstk_darwin(v133);
  v120 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v121 = (char *)&v109 - v14;
  v15 = __chkstk_darwin(v13);
  v122 = (char *)&v109 - v16;
  __chkstk_darwin(v15);
  v124 = (char *)&v109 - v17;
  v131 = (void (*)(char *, char *, uint64_t))type metadata accessor for EncryptedMessageEntity(0);
  v130 = *((_QWORD *)v131 - 1);
  __chkstk_darwin(v131);
  v127 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100004828((uint64_t *)&unk_100636010);
  v125 = *(_QWORD *)(v126 - 8);
  v19 = __chkstk_darwin(v126);
  v21 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v109 - v22;
  v24 = type metadata accessor for DIPError.Code(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for RecipientEncryptionCertificate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v138;
  result = sub_1001488A8(v136, (uint64_t)v137, (uint64_t)&v141);
  if (v32)
    return result;
  v116 = v25;
  v117 = v24;
  v138 = v27;
  v114 = v11;
  v115 = v21;
  v137 = v23;
  v34 = v133;
  v118 = v29;
  v136 = v28;
  v35 = sub_10040C194(v134, v135);
  v37 = v36;
  v39 = v38;
  v135 = v40;
  *(_QWORD *)&v140 = v36;
  *((_QWORD *)&v140 + 1) = v38;
  v139[0] = 0x6E692D646579656BLL;
  v139[1] = 0xE800000000000000;
  v41 = sub_100099FB8();
  v42 = sub_100183D54();
  if ((BidirectionalCollection<>.starts<A>(with:)(v139, &type metadata for String, &type metadata for String, v41, v42) & 1) == 0)
  {
    swift_bridgeObjectRelease(v135);
    goto LABEL_6;
  }
  v134 = v37;
  v43 = (uint64_t *)(*(_QWORD *)(v132 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v44 = v43[1];
  if (v44)
  {
    v45 = *v43;
    v46 = (void *)v43[1];
  }
  else
  {
    v46 = (void *)0xE700000000000000;
    v45 = 0x746C7561666564;
  }
  v56 = v138;
  swift_bridgeObjectRetain(v44);
  sub_100054A78(v45, v46, (uint64_t)v31);
  v57 = swift_bridgeObjectRelease(v46);
  v138 = (id)RecipientEncryptionCertificate.keyAgreement.getter(v57);
  v58 = RecipientEncryptionCertificate.signing.getter(v138);
  if (!v58)
  {
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v135);
    (*(void (**)(id, _QWORD, uint64_t))(v116 + 104))(v56, enum case for DIPError.Code.missingCertificate(_:), v117);
    v64 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v65 = type metadata accessor for DIPError(0);
    v66 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v65, v66, 0, 0);
    v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054DE10, 0, v56, 0, v64, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1601);
    swift_willThrow(v67);

    (*(void (**)(char *, uint64_t))(v118 + 8))(v31, v136);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v141);
  }
  v59 = (void *)v58;
  v113 = v31;
  v60 = v128 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value;
  v61 = *(_QWORD *)(v128 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
  v132 = *(_QWORD *)(v128 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey + 8);
  v62 = (uint64_t)v127;
  (*(void (**)(char *, _QWORD, _QWORD *))(v130 + 104))(v127, enum case for EncryptedMessageEntity.ino(_:), v131);
  v116 = v60;
  v117 = v61;
  sub_10016926C(&v141, v61, v132, (uint64_t)v138, v129, (unint64_t)v59, v62, (uint64_t)v137);
  v110 = v59;
  v109 = v35;
  v111 = v39;
  v112 = a9;
  (*(void (**)(uint64_t, void (*)(char *, char *, uint64_t)))(v130 + 8))(v62, v131);
  v68 = v125;
  v69 = v115;
  v70 = v126;
  v131 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v131(v115, v137, v126);
  v71 = sub_100099FFC(&qword_1006365A8, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
  v72 = sub_100099FFC(&qword_1006365B0, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
  v73 = v124;
  JWSSignedJSON.init(payload:)(v69, v70, v71, v72);
  v74 = *v112;
  swift_bridgeObjectRetain(*v112);
  JWSSignedJSON.setCertificateChain(_:)(v75);
  if (v76)
  {
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v135);

    swift_bridgeObjectRelease(v74);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v73, v34);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v137, v126);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v113, v136);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v141);
  }
  swift_bridgeObjectRelease(v74);
  v77 = v129;
  JWSSignedJSON.setKid(_:)(v129, v34);
  v78 = v123;
  v79 = v121;
  v127 = *(char **)(v123 + 16);
  ((void (*)(char *, char *, uint64_t))v127)(v121, v73, v34);
  v80 = (uint64_t)v77;
  v47 = (_QWORD *)v78;
  sub_10002581C(v80, (uint64_t)&v140);
  v48 = *(unsigned __int8 *)(v78 + 80);
  v130 = 0;
  v81 = (v48 + 16) & ~v48;
  v82 = (v114 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
  v83 = swift_allocObject(&unk_100609268, v82 + 40, v48 | 7);
  v129 = (_QWORD *)v47[4];
  ((void (*)(uint64_t, char *, uint64_t))v129)(v83 + v81, v79, v34);
  sub_100008018(&v140, v83 + v82);
  v84 = v122;
  v85 = v130;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1607, &unk_100636738, v83, v34);
  if (v85)
  {
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v135);

    swift_release(v83);
    ((void (*)(char *, uint64_t))v47[1])(v124, v34);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v137, v126);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v31, v136);
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v141);
  }
  v130 = 0;
  v86 = v124;
  v121 = (char *)v47[1];
  ((void (*)(char *, uint64_t))v121)(v124, v34);
  swift_release(v83);
  ((void (*)(char *, char *, uint64_t))v129)(v86, v84, v34);
  ((void (*)(char *, char *, uint64_t))v127)(v120, v86, v34);
  v53 = *a10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
  v127 = (char *)a10;
  *a10 = v53;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_33;
  while (1)
  {
    v89 = *(_QWORD *)(v53 + 16);
    v88 = *(_QWORD *)(v53 + 24);
    if (v89 >= v88 >> 1)
    {
      v53 = sub_1000E2ED0(v88 > 1, v89 + 1, 1, v53);
      *(_QWORD *)v127 = v53;
    }
    *(_QWORD *)(v53 + 16) = v89 + 1;
    v90 = v34;
    ((void (*)(unint64_t, char *, uint64_t))v129)(v53 + ((v48 + 32) & ~v48) + v47[9] * v89, v120, v34);
    v91 = (_QWORD *)(v119 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
    v92 = swift_beginAccess(v119 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes, &v140, 0, 0);
    v93 = *v91;
    v94 = v118;
    v95 = v126;
    v34 = v128;
    v96 = (uint64_t)v115;
    v97 = v132;
    if (!*(_QWORD *)(*v91 + 16))
      goto LABEL_30;
    v98 = (uint64_t)v135;
    swift_bridgeObjectRetain(v135);
    swift_bridgeObjectRetain(v93);
    sub_1004A8604((uint64_t)v109, v98);
    if ((v99 & 1) == 0)
    {
      swift_bridgeObjectRelease(v98);
      swift_bridgeObjectRelease(v93);
LABEL_30:
      ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v131)(v96, v116, v95, v92);
      v100 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
      v101 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash + 8);
      v102 = type metadata accessor for SubmittedAttributeWrapper(0);
      v34 = swift_allocObject(v102, *(unsigned int *)(v102 + 48), *(unsigned __int16 *)(v102 + 52));
      v103 = v96;
      v104 = (uint64_t)v135;
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v101);
      v105 = v97;
      v106 = (uint64_t)v109;
      sub_100141B78((uint64_t)v109, v104, v103, v117, v105, v100, v101);
      swift_beginAccess(v91, v139, 33, 0);
      v107 = swift_isUniquelyReferenced_nonNull_native(*v91);
      v142 = *v91;
      *v91 = 0x8000000000000000;
      sub_100481B60(v34, v106, v104, v107);
      v108 = *v91;
      *v91 = v142;
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v108);
      swift_endAccess(v139);

      goto LABEL_31;
    }

    swift_bridgeObjectRelease_n(v98, 2);
    swift_bridgeObjectRelease(v93);
LABEL_31:
    ((void (*)(char *, uint64_t))v121)(v124, v90);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v137, v95);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v113, v136);
    v39 = v111;
    v37 = v134;
LABEL_6:
    v47 = a11;
    v48 = *a11;
    if (!*(_QWORD *)(*a11 + 16))
      goto LABEL_14;
    swift_bridgeObjectRetain(v39);
    v49 = sub_1004A8604(v37, v39);
    if ((v50 & 1) == 0)
      break;
    v51 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v49);
    swift_bridgeObjectRelease(v39);
    v52 = __OFADD__(v51, 1);
    v53 = v51 + 1;
    if (!v52)
    {
      v54 = swift_isUniquelyReferenced_nonNull_native(*a11);
      v139[0] = *a11;
      *a11 = 0x8000000000000000;
      v55 = v53;
      goto LABEL_15;
    }
    __break(1u);
LABEL_33:
    v53 = sub_1000E2ED0(0, *(_QWORD *)(v53 + 16) + 1, 1, v53);
    *(_QWORD *)v127 = v53;
  }
  swift_bridgeObjectRelease(v39);
  v48 = *a11;
LABEL_14:
  v54 = swift_isUniquelyReferenced_nonNull_native(v48);
  v139[0] = *a11;
  *a11 = 0x8000000000000000;
  v55 = 1;
LABEL_15:
  sub_100481D10(v55, v37, v39, v54);
  v63 = *a11;
  *a11 = v139[0];
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v63);
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v141);
}

uint64_t sub_100153D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100153DB0, 0, 0);
}

uint64_t sub_100153DB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = sub_100004828(&qword_100634158);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_10015247C;
  return JWSSignedJSON.sign(_:)(v0[4], v3);
}

void sub_100153E44(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD **a7, _QWORD *a8, _QWORD **a9, _QWORD **a10, _QWORD **a11, _QWORD **a12)
{
  uint64_t v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  Swift::String v54;
  uint64_t countAndFlagsBits;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  SecKeyRef v66;
  SecKeyRef v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD **v115;
  uint64_t v116;
  uint64_t *v117;
  _QWORD v118[2];
  _QWORD v119[5];
  char v120[24];
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char *v127;

  v114 = a8;
  v115 = a7;
  v116 = a6;
  v117 = a4;
  v17 = type metadata accessor for DIPError.Code(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v127 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v21 = a1[1];
  v22 = (uint64_t *)(a2 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes);
  swift_beginAccess(v22, v120, 0, 0);
  v23 = *v22;
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    v24 = sub_1004A8604(v20, v21);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_retain(v26);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
      if ((*(_BYTE *)(v26 + 21) & 1) != 0
        || (*(_BYTE *)(v26 + 18) & 1) != 0
        || (*(_BYTE *)(v26 + 19) & 1) != 0
        || *(_BYTE *)(v26 + 16) == 1)
      {
        v27 = *(_QWORD *)(v26 + 32);
        if (v27 && (v28 = *a3, *(_QWORD *)(*a3 + 16)))
        {
          v29 = *(_QWORD *)(v26 + 24);
          swift_bridgeObjectRetain(*(_QWORD *)(v26 + 32));
          v30 = sub_1004A8604(v29, v27);
          if ((v31 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v30) == 1)
          {
            v119[0] = v29;
            v119[1] = v27;
            v118[0] = 46;
            v118[1] = 0xE100000000000000;
            v32 = sub_1000994DC();
            v33 = StringProtocol.components<A>(separatedBy:)(v118, &type metadata for String, &type metadata for String, v32, v32);
            swift_bridgeObjectRelease(v27);
            v34 = *(_QWORD *)(v33 + 16);
            if (v34)
            {
              v35 = v33 + 16 * v34;
              v36 = *(_QWORD *)(v35 + 16);
              v37 = *(_QWORD *)(v35 + 24);
              swift_bridgeObjectRetain(v37);
            }
            else
            {
              v36 = 0;
              v37 = 0;
            }
          }
          else
          {
            v36 = 0;
            v37 = 0;
            v33 = v27;
          }
          swift_bridgeObjectRelease(v33);
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
        sub_100141DA0(v36, v37);
        if (v12)
        {
          swift_release(v26);
          swift_bridgeObjectRelease(v37);
          return;
        }
        swift_bridgeObjectRelease(v37);
        if (!*(_QWORD *)(v26 + 104))
          goto LABEL_22;
        v38 = *(_QWORD *)(v26 + 176);
        v39 = *(_QWORD *)(v26 + 152);
        v40 = *(_BYTE *)(v26 + 144);
        v41 = *(_QWORD *)(v26 + 136);
        v121 = *(_QWORD *)(v26 + 128);
        v122 = v41;
        v123 = v40 & 1;
        v124 = v39;
        v125 = *(_OWORD *)(v26 + 160);
        v126 = v38;
        v42 = v125;
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        v43 = sub_100439A90();
        v45 = v44;
        v113 = v43;
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v41);
        if (v45 >> 60 == 15)
        {
LABEL_22:
          v46 = v127;
          (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v127, enum case for DIPError.Code.unexpectedDaemonState(_:), v17);
          v47 = *v117;
          v48 = type metadata accessor for DIPError(0);
          v49 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v48, v49, 0, 0);
          swift_bridgeObjectRetain(v47);
          v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000053, 0x800000010054EEB0, 0, v46, 0, v47, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1641);
LABEL_23:
          swift_willThrow(v50);
LABEL_24:
          swift_release(v26);
          return;
        }
        v51 = 0;
        v53 = v113;
        v54 = Data.base16EncodedString()();
        countAndFlagsBits = v54._countAndFlagsBits;
        sub_100007F78(v53, v45);
        if (*(_BYTE *)(v26 + 16) == 1)
        {
          sub_1001488A8(a5, v116, (uint64_t)v119);
          v65 = sub_10000806C(v119, v119[3]);
          v66 = SecKeyCopyPublicKey(*(SecKeyRef *)(*v65 + 16));
          if (!v66)
          {
            v68 = v127;
            (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v127, enum case for DIPError.Code.internalError(_:), v17);
            v69 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v70 = type metadata accessor for DIPError(0);
            v71 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v70, v71, 0, 0);
            v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010054EF40, 0, v68, 0, v69, 0xD000000000000053, 0x8000000100548260, 0x696C627550746567, 0xEE00292879654B63, 123);
            swift_willThrow(v72);
            swift_release(v26);
            swift_bridgeObjectRelease(v54._object);
            _s8coreidvd24DigitalPresentmentHelperVwxx_0(v119);
            return;
          }
          v67 = v66;
          sub_100142368(v66);

          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v119);
        }
        v73 = *(unsigned __int8 *)(v26 + 21);
        v116 = 0;
        if (v73 == 1)
        {
          v113 = v54._countAndFlagsBits;
          v75 = *(_QWORD *)(v26 + 40);
          v74 = *(_QWORD *)(v26 + 48);
          v76 = v115;
          v77 = *v115;
          swift_bridgeObjectRetain(v74);
          swift_bridgeObjectRetain(v54._object);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v77);
          *v76 = v77;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v77 = sub_1000E3010(0, v77[2] + 1, 1, v77);
            *v115 = v77;
          }
          v80 = v77[2];
          v79 = v77[3];
          if (v80 >= v79 >> 1)
          {
            v77 = sub_1000E3010((_QWORD *)(v79 > 1), v80 + 1, 1, v77);
            *v115 = v77;
          }
          v77[2] = v80 + 1;
          v81 = &v77[4 * v80];
          v81[4] = v75;
          v81[5] = v74;
          countAndFlagsBits = v113;
          v81[6] = v113;
          v81[7] = v54._object;
          v51 = v116;
        }
        if (*(_BYTE *)(v26 + 18) == 1)
        {
          v82 = countAndFlagsBits;
          v115 = a9;
          v83 = v114;
          v84 = (_QWORD *)*v114;
          v85 = swift_isUniquelyReferenced_nonNull_native(*v114);
          *v83 = v84;
          if ((v85 & 1) == 0)
          {
            v84 = sub_1000E2358(0, v84[2] + 1, 1, v84);
            *v83 = v84;
          }
          v87 = v84[2];
          v86 = v84[3];
          if (v87 >= v86 >> 1)
          {
            v84 = sub_1000E2358((_QWORD *)(v86 > 1), v87 + 1, 1, v84);
            *v83 = v84;
          }
          v84[2] = v87 + 1;
          v88 = &v84[2 * v87];
          v88[4] = v82;
          v88[5] = v54._object;
          v89 = *(_QWORD *)(v26 + 64);
          v114 = *(_QWORD **)(v26 + 56);
          v90 = *(_QWORD *)(v26 + 72);
          v113 = *(_QWORD *)(v26 + 80);
          v91 = *(_QWORD *)(v26 + 88);
          v92 = v115;
          v93 = *v115;
          swift_bridgeObjectRetain(v91);
          swift_bridgeObjectRetain(v89);
          swift_bridgeObjectRetain(v90);
          v94 = swift_isUniquelyReferenced_nonNull_native(v93);
          *v92 = v93;
          if ((v94 & 1) == 0)
          {
            v93 = sub_1000E2DB0(0, v93[2] + 1, 1, v93);
            *v115 = v93;
          }
          v96 = v93[2];
          v95 = v93[3];
          if (v96 >= v95 >> 1)
          {
            v93 = sub_1000E2DB0((_QWORD *)(v95 > 1), v96 + 1, 1, v93);
            *v115 = v93;
          }
          v93[2] = v96 + 1;
          v97 = &v93[5 * v96];
          v97[4] = v114;
          v97[5] = v89;
          v98 = v113;
          v97[6] = v90;
          v97[7] = v98;
          v97[8] = v91;
          v51 = v116;
        }
        else
        {
          swift_bridgeObjectRelease(v54._object);
        }
        if (*(_BYTE *)(v26 + 19) == 1)
        {
          v99 = *(_QWORD *)(v26 + 88);
          if (!v99)
          {
            v108 = v127;
            (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v127, enum case for DIPError.Code.unexpectedDaemonState(_:), v17);
            v109 = *v117;
            v110 = type metadata accessor for DIPError(0);
            v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v110, v111, 0, 0);
            swift_bridgeObjectRetain(v109);
            v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054EF10, 0, v108, 0, v109, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1660);
            goto LABEL_23;
          }
          v100 = *(_QWORD *)(v26 + 80);
          v102 = *(_QWORD *)(v26 + 40);
          v101 = *(_QWORD *)(v26 + 48);
          v103 = *a10;
          swift_bridgeObjectRetain(*(_QWORD *)(v26 + 88));
          swift_bridgeObjectRetain(v101);
          v104 = swift_isUniquelyReferenced_nonNull_native(v103);
          *a10 = v103;
          if ((v104 & 1) == 0)
          {
            v103 = sub_1000E2EE4(0, v103[2] + 1, 1, v103);
            *a10 = v103;
          }
          v106 = v103[2];
          v105 = v103[3];
          if (v106 >= v105 >> 1)
          {
            v103 = sub_1000E2EE4((_QWORD *)(v105 > 1), v106 + 1, 1, v103);
            *a10 = v103;
          }
          v51 = v116;
          v103[2] = v106 + 1;
          v107 = &v103[4 * v106];
          v107[4] = v102;
          v107[5] = v101;
          v107[6] = v100;
          v107[7] = v99;
        }
      }
      else
      {
        v51 = v12;
      }
      if (*(_BYTE *)(v26 + 20) == 1)
      {
        v116 = v51;
      }
      else
      {
        if ((*(_BYTE *)(v26 + 18) & 1) != 0)
          goto LABEL_24;
        v116 = v51;
        a11 = a12;
      }
      v56 = *(_QWORD *)(v26 + 64);
      v127 = *(char **)(v26 + 56);
      v57 = *(_QWORD *)(v26 + 72);
      v58 = *(_QWORD *)(v26 + 80);
      v59 = *(_QWORD *)(v26 + 88);
      v60 = *a11;
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v57);
      v61 = swift_isUniquelyReferenced_nonNull_native(v60);
      *a11 = v60;
      if ((v61 & 1) == 0)
      {
        v60 = sub_1000E2DB0(0, v60[2] + 1, 1, v60);
        *a11 = v60;
      }
      v63 = v60[2];
      v62 = v60[3];
      if (v63 >= v62 >> 1)
      {
        v60 = sub_1000E2DB0((_QWORD *)(v62 > 1), v63 + 1, 1, v60);
        *a11 = v60;
      }
      v60[2] = v63 + 1;
      v64 = &v60[5 * v63];
      v64[4] = v127;
      v64[5] = v56;
      v64[6] = v57;
      v64[7] = v58;
      v64[8] = v59;
      swift_release(v26);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
    }
  }
}

uint64_t sub_100154878(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, _QWORD *a9, unint64_t *a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  Swift::OpaquePointer v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75[2];
  char *v76;

  v71 = a8;
  v68 = a6;
  v69 = a5;
  v74 = sub_100004828(&qword_100636740);
  v67 = *(_QWORD *)(v74 - 8);
  v16 = __chkstk_darwin(v74);
  v66 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v76 = (char *)&v64 - v18;
  v19 = type metadata accessor for RecipientEncryptionCertificate(0);
  v72 = *(_QWORD *)(v19 - 8);
  v73 = v19;
  v20 = *(_QWORD *)(v72 + 64);
  v21 = __chkstk_darwin(v19);
  v70 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v64 - v22;
  if (*(_QWORD *)(a3 + 16))
    goto LABEL_9;
  v64 = a7;
  v65 = (char *)&v64 - v22;
  v24 = (uint64_t *)(*(_QWORD *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v25 = v24[1];
  if (!v25)
  {
    v26 = 0x746C7561666564;
    v27 = 0xE700000000000000;
    if (a1 != 0x746C7561666564)
      goto LABEL_8;
LABEL_6:
    if ((void *)v27 == a2)
    {
      swift_bridgeObjectRetain(v24[1]);
      swift_bridgeObjectRelease(a2);
      a7 = v64;
      v23 = v65;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v26 = *v24;
  v27 = v24[1];
  if (*v24 == a1)
    goto LABEL_6;
LABEL_8:
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v26, v27, 0);
  swift_bridgeObjectRetain(v25);
  result = swift_bridgeObjectRelease(v27);
  a7 = v64;
  v23 = v65;
  if ((v28 & 1) == 0)
    return result;
LABEL_9:
  result = sub_100054A78(a1, a2, (uint64_t)v23);
  if (v10)
    return result;
  v30 = *v69;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v30);
  v65 = (char *)sub_10016FC98(v31, a3);
  v69 = 0;
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(a3);
  v32 = (uint64_t *)(*(_QWORD *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v33 = v32[1];
  if (v33)
  {
    v34 = *v32;
    v35 = v32[1];
    if (*v32 != a1)
      goto LABEL_16;
  }
  else
  {
    v34 = 0x746C7561666564;
    v35 = 0xE700000000000000;
    if (a1 != 0x746C7561666564)
      goto LABEL_16;
  }
  if ((void *)v35 == a2)
  {
    swift_bridgeObjectRetain(v32[1]);
    swift_bridgeObjectRelease(a2);
LABEL_17:
    v38 = *v68;
    v37 = swift_bridgeObjectRetain(*v68);
    goto LABEL_19;
  }
LABEL_16:
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v34, v35, 0);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v35);
  if ((v36 & 1) != 0)
    goto LABEL_17;
  v38 = 0;
LABEL_19:
  v39 = v72;
  v40 = v73;
  v41 = v70;
  (*(void (**)(char *, char *, uint64_t, __n128))(v72 + 16))(v70, v23, v73, v37);
  sub_10002581C(a7, (uint64_t)v75);
  v42 = *(unsigned __int8 *)(v39 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = v42 | 7;
  v45 = v20 + v43;
  v46 = v39;
  v47 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = v23;
  v49 = (v47 + 47) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_100609290, v49 + 8, v44);
  v51 = v65;
  *(_QWORD *)(v50 + 16) = v38;
  *(_QWORD *)(v50 + 24) = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v50 + v43, v41, v40);
  sub_100008018(v75, v50 + v47);
  v52 = v71;
  *(_QWORD *)(v50 + v49) = v71;
  swift_retain(v52);
  v53 = v74;
  v54 = v76;
  v55 = v69;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1733, &unk_100636750, v50, v74);
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v40);
    return swift_release(v50);
  }
  else
  {
    v65 = v48;
    swift_release(v50);
    v56 = *a9;
    swift_bridgeObjectRetain(*a9);
    JWSSignedJSON.setCertificateChain(_:)(v57);
    if (v58)
    {
      swift_bridgeObjectRelease(v56);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v53);
    }
    else
    {
      swift_bridgeObjectRelease(v56);
      v59 = v67;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, v54, v53);
      v60 = *a10;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
      *a10 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v60 = sub_1000E3024(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
        *a10 = v60;
      }
      v63 = *(_QWORD *)(v60 + 16);
      v62 = *(_QWORD *)(v60 + 24);
      if (v63 >= v62 >> 1)
      {
        v60 = sub_1000E3024(v62 > 1, v63 + 1, 1, v60);
        *a10 = v60;
      }
      *(_QWORD *)(v60 + 16) = v63 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v60+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v63, v66, v53);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v76, v53);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v65, v40);
  }
}

uint64_t sub_100154D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  return swift_task_switch(sub_100154DAC, 0, 0);
}

uint64_t sub_100154DAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[14];
  v2 = v0[11];
  v0[7] = v0[10];
  v0[8] = v2;
  v0[5] = type metadata accessor for DIPECIESSessionECV3(0);
  v0[6] = &protocol witness table for DIPECIESSessionECV3;
  v0[2] = v1;
  v3 = async function pointer to createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)[1];
  swift_retain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[15] = v4;
  sub_1001840D0();
  sub_100184114();
  *v4 = v0;
  v4[1] = sub_100154E70;
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v0[9], v0 + 7, v0[12], v0[13], v0 + 2, 0, 0, &type metadata for IdVData);
}

uint64_t sub_100154E70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 120);
  v3 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100154EEC, 0, 0);
  sub_100008030(v3 + 16, &qword_100636598);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100154EEC()
{
  uint64_t v0;

  sub_100008030(v0 + 16, &qword_100636598);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100154F28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t *a9, void *a10, uint64_t *a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint8_t *v63;
  id v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char v84[16];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD v93[3];
  char v94[24];

  v82 = a6;
  v83 = (char *)a7;
  v79 = a8;
  v80 = a9;
  v81 = a5;
  v77 = type metadata accessor for DIPError.Code(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v78 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v75 - 8);
  v17 = __chkstk_darwin(v75);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v72 - v20;
  v22 = sub_100004828(&qword_1006335E0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v72 - v26;
  v85 = a2;
  v86 = a3;
  v28 = a1;
  v29 = v80;
  v87 = v28;
  v88 = a4;
  v89 = v81;
  v90 = v82;
  v91 = (uint64_t)v83;
  v92 = v80;
  DIPRetrier.sync(_:)(sub_1001841B4, v84);
  v74 = v28;
  v83 = v25;
  v72 = v21;
  v73 = v16;
  v81 = v19;
  v82 = a4;
  v30 = v76;
  v31 = v77;
  v32 = v78;
  v33 = v29;
  v34 = *v29;
  if (v34)
  {
    swift_getErrorValue(v34, v94, v93);
    v35 = v93[1];
    v36 = v93[2];
    swift_errorRetain(v34);
    Error.dipErrorCode.getter(v35, v36);
    v37 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v31) == 1)
      goto LABEL_3;
    v50 = (uint64_t)v83;
    sub_100038B24((uint64_t)v27, (uint64_t)v83, &qword_1006335E0);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v50, v31);
    if ((_DWORD)v51 != enum case for DIPError.Code.topekaInvalidNonce(_:))
    {
      if ((_DWORD)v51 == enum case for DIPError.Code.topekaIdentityNotFound(_:))
      {
        v55 = v72;
        defaultLogger()(v51);
        DIPRecordError(_:message:log:)(v34, 0xD000000000000023, 0x800000010054E110, v55);
        v56 = *(uint64_t (**)(_QWORD, _QWORD))(v73 + 8);
        v57 = v56(v55, v75);
        v58 = defaultLogger()(v57);
        v59 = Logger.logObject.getter(v58);
        v61 = static os_log_type_t.info.getter(v59, v60);
        if (os_log_type_enabled(v59, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v61, "at proofing: identity not found, clearing local cache", v62, 2u);
          v63 = v62;
          v37 = v31;
          swift_slowDealloc(v63, -1, -1);
        }

        v56(v81, v75);
        v64 = objc_msgSend(a10, "serviceName");
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v67 = v66;

        sub_1001589C4(v65, v67, 0);
        swift_bridgeObjectRelease(v67);
        v68 = v78;
        (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v78, enum case for DIPError.Code.topekaCanNotResume(_:), v37);
        v69 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v70 = type metadata accessor for DIPError(0);
        v71 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v42 = swift_allocError(v70, v71, 0, 0);
        v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010054E140, 0, v68, 0, v69, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1812);
        goto LABEL_4;
      }
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v50, v31);
      v32 = v78;
LABEL_3:
      v38 = *v33;
      v39 = *a11;
      (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, enum case for DIPError.Code.internalError(_:), v31);
      v40 = type metadata accessor for DIPError(0);
      v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v42 = swift_allocError(v40, v41, 0, 0);
      swift_errorRetain(v38);
      swift_bridgeObjectRetain(v39);
      v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054EE80, v38, v32, 0, v39, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1814);
LABEL_4:
      swift_willThrow(v43);
      swift_errorRelease(v34);
      sub_100008030((uint64_t)v27, &qword_1006335E0);
      v44 = v79;
      *v79 = v42;
      v45 = enum case for DIPRetryResult.stopWithError(_:);
      v46 = type metadata accessor for DIPRetryResult(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
    }
    sub_100055D34((uint64_t)_swiftEmptyArrayStorage);
    v52 = v79;
    *v79 = v34;
    v53 = enum case for DIPRetryResult.retryWithError(_:);
    v54 = type metadata accessor for DIPRetryResult(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v52, v53, v54);
    return sub_100008030((uint64_t)v27, &qword_1006335E0);
  }
  else
  {
    v48 = enum case for DIPRetryResult.stop(_:);
    v49 = type metadata accessor for DIPRetryResult(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v79, v48, v49);
  }
}

uint64_t sub_100155588@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(void);
  void *v44;
  void *v45;
  uint64_t v46;
  void (**v47)(char *, uint64_t);
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  Swift::OpaquePointer v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  void (**v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  void *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  uint64_t v113;
  __int128 v114[3];
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;

  v96 = a7;
  v105 = a6;
  v106 = a5;
  v112 = a3;
  v113 = a4;
  v107 = a8;
  v12 = sub_100004828(&qword_100636620);
  __chkstk_darwin(v12);
  v100 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for DIPError(0);
  v99 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v98 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_1006366E8);
  __chkstk_darwin(v15);
  v102 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for IdentityProofingRequest(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004828(&qword_100636770);
  v108 = *(char **)(v20 - 8);
  v109 = v20;
  v21 = *((_QWORD *)v108 + 8);
  v22 = __chkstk_darwin(v20);
  v104 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v103 = (char *)&v94 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v94 - v25;
  v27 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  v28 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  v101 = a1;
  v29 = &a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v30 = *(_QWORD *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v31 = *((_QWORD *)v29 + 1);
  v32 = a2[1];
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *a2 = v30;
  a2[1] = v31;
  v33 = v27;
  v34 = v113;
  sub_1002555A4(v33, v28, (uint64_t *)v115);
  v110 = v115[1];
  v111 = v115[0];
  v35 = v116;
  v36 = v117;
  sub_10008EF5C(a2[4], a2[5], a2[6], a2[7], a2[8], a2[9]);
  v37 = v110;
  *((_OWORD *)a2 + 2) = v111;
  *((_OWORD *)a2 + 3) = v37;
  a2[8] = v35;
  a2[9] = v36;
  v38 = v28;
  v39 = v26;
  swift_bridgeObjectRelease(v38);
  sub_100035DE8((uint64_t)a2, (uint64_t)v19, type metadata accessor for IdentityProofingRequest);
  v40 = sub_100004790(&qword_100636778, type metadata accessor for IdentityProofingRequest, (uint64_t)&unk_10052B59C);
  v41 = sub_100004790(&qword_100636780, type metadata accessor for IdentityProofingRequest, (uint64_t)&unk_10052B574);
  JWSSignedJSON.init(payload:)(v19, v17, v40, v41);
  v42 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v43 = sub_10014CAA4(v34, 0, v42);
  v45 = v44;
  v46 = v105;
  v47 = (void (**)(char *, uint64_t))v108;
  swift_bridgeObjectRelease(v42);
  v48._countAndFlagsBits = (uint64_t)v43;
  v48._object = v45;
  v49 = v109;
  JWSSignedJSON.setNonce(_:)(v48);
  swift_bridgeObjectRelease(v45);
  v50 = *v106;
  swift_bridgeObjectRetain(*v106);
  JWSSignedJSON.setCertificateChain(_:)(v51);
  if (v52)
  {
    v47[1](v39, v49);
    swift_bridgeObjectRelease(v50);
    v53 = v107;
    *v107 = v52;
    v54 = enum case for DIPRetryResult.stopWithError(_:);
    v55 = type metadata accessor for DIPRetryResult(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v53, v54, v55);
  }
  swift_bridgeObjectRelease(v50);
  v57 = v46;
  JWSSignedJSON.setKid(_:)(v46, v49);
  v58 = v104;
  v59 = v47;
  *(_QWORD *)&v111 = v47[2];
  ((void (*)(char *, char *, uint64_t))v111)(v104, v39, v49);
  sub_10002581C(v57, (uint64_t)v114);
  v60 = v39;
  v61 = *((unsigned __int8 *)v47 + 80);
  v62 = (v61 + 16) & ~v61;
  v105 = v21 + 7;
  v63 = (v62 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v106 = (_QWORD *)(v61 | 7);
  v64 = swift_allocObject(&unk_1006092B8, v63 + 40, v61 | 7);
  v65 = v64 + v62;
  v66 = v47[4];
  ((void (*)(uint64_t, char *, uint64_t))v66)(v65, v58, v49);
  sub_100008018(v114, v64 + v63);
  v67 = v103;
  *(_QWORD *)&v110 = 0x800000010054D670;
  v112 = 0xD000000000000029;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000029, 0x800000010054E770, 1773, &unk_100636790, v64, v49);
  v94 = a9;
  v95 = ~v61;
  v68 = v59[1];
  v68(v60, v49);
  swift_release(v64);
  ((void (*)(char *, char *, uint64_t))v66)(v60, v67, v49);
  v108 = v60;
  ((void (*)(char *, char *, uint64_t))v111)(v58, v60, v49);
  v69 = (v61 + 24) & v95;
  v70 = (v69 + v105) & 0xFFFFFFFFFFFFFFF8;
  v71 = swift_allocObject(&unk_1006092E0, v70 + 8, v106);
  v72 = v101;
  *(_QWORD *)(v71 + 16) = v101;
  ((void (*)(uint64_t, char *, uint64_t))v66)(v71 + v69, v58, v49);
  v73 = v113;
  *(_QWORD *)(v71 + v70) = v113;
  v74 = type metadata accessor for IdentityProofingResponse(0);
  v75 = v72;
  swift_retain(v73);
  v76 = (uint64_t)v102;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, v110, v112, 0x800000010054E770, 1785, &unk_1006367A0, v71, v74);
  swift_release(v71);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v76, 0, 1, v74);
  sub_100184E1C(v76, v96, &qword_1006366E8);
  v77 = v107;
  v78 = v97;
  v79 = v98;
  v80 = (uint64_t)v100;
  v81 = v99;
  v82 = v108;
  v83 = *v94;
  if (!*v94)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v100, 1, 1, v97);
    goto LABEL_8;
  }
  *(_QWORD *)&v114[0] = *v94;
  swift_errorRetain(v83);
  v84 = sub_100004828((uint64_t *)&unk_100633430);
  v85 = swift_dynamicCast(v80, v114, v84, v78, 6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v80, v85 ^ 1u, 1, v78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v80, 1, v78) == 1)
  {
LABEL_8:
    v68(v82, v49);
    sub_100008030(v80, &qword_100636620);
LABEL_9:
    v91 = (unsigned int *)&enum case for DIPRetryResult.stop(_:);
    goto LABEL_10;
  }
  v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 32);
  v87 = v86(v79, v80, v78);
  if ((DIPError.isAuthorizationError.getter(v87) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v78);
    v68(v82, v49);
    goto LABEL_9;
  }
  v88 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v89 = swift_allocError(v78, v88, 0, 0);
  v86((char *)v90, (uint64_t)v79, v78);
  v68(v82, v49);
  *v77 = v89;
  v91 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
LABEL_10:
  v92 = *v91;
  v93 = type metadata accessor for DIPRetryResult(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 104))(v77, v92, v93);
}

uint64_t sub_100155DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100155E08, 0, 0);
}

uint64_t sub_100155E08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = sub_100004828(&qword_100636770);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_100155E9C;
  return JWSSignedJSON.sign(_:)(v0[4], v3);
}

uint64_t sub_100155E9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100155F08, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100155F08()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100155F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4[2] = a1;
  v7 = sub_100004828(&qword_1006367A8);
  v4[3] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[4] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[5] = v9;
  v10 = (_QWORD *)swift_task_alloc(dword_100639B04);
  v4[6] = v10;
  *v10 = v4;
  v10[1] = sub_100155FE4;
  return sub_100245088(v9, a3, a4);
}

uint64_t sub_100155FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001560A4;
  else
    v3 = sub_100156048;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100156048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  JWSSignedJSON.payload.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001560A4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001560D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1001560F4, 0, 0);
}

uint64_t sub_1001560F4()
{
  uint64_t *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = *(void **)(v0[5] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1 && (v2 = objc_msgSend(v1, "preferredLanguages")) != 0)
  {
    v3 = v2;
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  }
  else
  {
    v4 = 0;
  }
  v6 = v0[3];
  v5 = v0[4];
  v7 = type metadata accessor for LegacySynthesizedWorkflows();
  swift_allocObject(v7, 6096, 7);
  v8 = dword_10063239C;
  swift_retain(v5);
  swift_retain(v6);
  v9 = (uint64_t **)swift_task_alloc(v8);
  v0[6] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_1001561D4;
  return sub_100052754(v0[3], v0[4], v4);
}

uint64_t sub_1001561D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 48);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch(sub_100156250, 0, 0);
}

uint64_t sub_100156250()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100156268(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  SecCertificateRef_optional v50;
  SecCertificateRef value;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  SecCertificateRef v121;
  uint64_t v122;
  unint64_t v123;
  id v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v132 = a5;
  v140 = a1;
  v141 = a4;
  v144 = a3;
  v128 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100636468);
  v133 = *(_QWORD *)(v7 - 8);
  v134 = v7;
  __chkstk_darwin(v7);
  v142 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecipientEncryptionCertificate(0);
  v135 = *(_QWORD *)(v9 - 8);
  v136 = v9;
  __chkstk_darwin(v9);
  v143 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v137 = *(_QWORD *)(v11 - 8);
  v138 = v11;
  __chkstk_darwin(v11);
  v139 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EncryptedMessageEntity(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v121 - v18;
  v20 = sub_100004828((uint64_t *)&unk_100636010);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v130 = (char *)&v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v121 - v24;
  v129 = sub_100004828(&qword_100634158);
  v131 = a2;
  JWSSignedJSON.payload.getter(v129);
  EncryptedMessage.recipient.getter(v20);
  v26 = *(void (**)(char *, uint64_t))(v21 + 8);
  v26(v25, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for EncryptedMessageEntity.device(_:), v13);
  v27 = sub_100004790(&qword_100636768, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity, (uint64_t)&protocol conformance descriptor for EncryptedMessageEntity);
  dispatch thunk of RawRepresentable.rawValue.getter(v13, v27);
  dispatch thunk of RawRepresentable.rawValue.getter(v13, v27);
  v28 = v146;
  v29 = v150;
  if (v145 == (_QWORD *)v149 && v146 == v150)
  {
    swift_bridgeObjectRelease_n(v146, 2);
    v30 = *(void (**)(char *, uint64_t))(v14 + 8);
    v30(v17, v13);
    v30(v19, v13);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v146, v149, v150, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v29);
    v32 = *(void (**)(char *, uint64_t))(v14 + 8);
    v32(v17, v13);
    result = ((uint64_t (*)(char *, uint64_t))v32)(v19, v13);
    if ((v31 & 1) == 0)
      return result;
  }
  v34 = *(_QWORD *)(v144 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession);
  if (!v34)
  {
    v39 = v139;
    (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v139, enum case for DIPError.Code.unexpectedDaemonState(_:), v138);
    v40 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v41 = type metadata accessor for DIPError(0);
    v42 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v41, v42, 0, 0);
    v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054E9E0, 0, v39, 0, v40, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1847);
    return swift_willThrow(v43);
  }
  v35 = (uint64_t *)(*(_QWORD *)(v141 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  v36 = v35[1];
  if (v36)
  {
    v37 = *v35;
    v38 = (void *)v35[1];
  }
  else
  {
    v38 = (void *)0xE700000000000000;
    v37 = 0x746C7561666564;
  }
  v44 = v151;
  v46 = v142;
  v45 = (uint64_t)v143;
  swift_retain(v34);
  swift_bridgeObjectRetain(v36);
  sub_100054A78(v37, v38, v45);
  if (v44)
  {
    swift_release(v34);
    return swift_bridgeObjectRelease(v38);
  }
  v47 = swift_bridgeObjectRelease(v38);
  v48 = RecipientEncryptionCertificate.signing.getter(v47);
  if (!v48)
  {
LABEL_18:
    v59 = v139;
    (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v139, enum case for DIPError.Code.serverResponseInconsistent(_:), v138);
    v60 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v61 = type metadata accessor for DIPError(0);
    v62 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v61, v62, 0, 0);
    v63 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010054EA10, 0, v59, 0, v60, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1853);
    swift_willThrow(v63);
    swift_release(v34);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 8))(v45, v136);
  }
  v49 = (void *)v48;
  v50.value = SecTrustRef.getLeafCertificate()().value;
  if (!v50.value)
  {

    goto LABEL_18;
  }
  v124 = v49;
  value = v50.value;
  v52 = copyPublicKeyDataFromCertificate(_:)();
  if (v53 >> 60 == 15)
  {
    v54 = v139;
    (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v139, enum case for DIPError.Code.keychainKeyExportFailure(_:), v138);
    v55 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v56 = type metadata accessor for DIPError(0);
    v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v56, v57, 0, 0);
    v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054D710, 0, v54, 0, v55, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000029, 0x800000010054E770, 1856);
    swift_willThrow(v58);
    swift_release(v34);

    return (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v143, v136);
  }
  v122 = v52;
  v123 = v53;
  v121 = value;
  v64 = v130;
  JWSSignedJSON.payload.getter(v129);
  EncryptedMessage.message.getter(v20);
  v26(v64, v20);
  v147 = type metadata accessor for DIPECIESSessionECV3(0);
  v148 = &protocol witness table for DIPECIESSessionECV3;
  v145 = (_QWORD *)v34;
  v65 = v132[3];
  v66 = v132[4];
  sub_10000806C(v132, v65);
  swift_retain(v34);
  v67 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()(v65, v66);
  v69 = v68;
  v70 = v126;
  (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, enum case for EncryptionParamsAlgorithmIdentifier.EC_v3(_:), v128);
  v71 = v134;
  EncryptedDataContainer.getUnencryptedData(alg:decryptor:senderSigningKey:recipientSigningKey:)(&v149, v70, &v145, v122, v123, v67, v69, v134);
  sub_100007F8C(v67, v69);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v70, v128);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v46, v71);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v145);
  v72 = 0;
  v73 = *(_QWORD *)(v149 + 64);
  v125 = v149 + 64;
  v129 = v149;
  v74 = 1 << *(_BYTE *)(v149 + 32);
  v75 = -1;
  if (v74 < 64)
    v75 = ~(-1 << v74);
  v76 = v75 & v73;
  v126 = (char *)((unint64_t)(v74 + 63) >> 6);
  v151 = 0;
  v128 = v34;
  v77 = v143;
  while (1)
  {
    if (v76)
    {
      v130 = (char *)((v76 - 1) & v76);
      v131 = v72;
      v86 = __clz(__rbit64(v76)) | (v72 << 6);
    }
    else
    {
      v87 = v72 + 1;
      if (__OFADD__(v72, 1))
        goto LABEL_54;
      if (v87 >= (uint64_t)v126)
      {
LABEL_51:

        sub_100007F78(v122, v123);
        swift_release(v129);
        swift_release(v34);
        return (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v77, v136);
      }
      v88 = *(_QWORD *)(v125 + 8 * v87);
      v89 = v72 + 1;
      if (!v88)
      {
        v89 = v72 + 2;
        if (v72 + 2 >= (uint64_t)v126)
          goto LABEL_51;
        v88 = *(_QWORD *)(v125 + 8 * v89);
        if (!v88)
        {
          v89 = v72 + 3;
          if (v72 + 3 >= (uint64_t)v126)
            goto LABEL_51;
          v88 = *(_QWORD *)(v125 + 8 * v89);
          if (!v88)
          {
            v90 = v72 + 4;
            if (v72 + 4 >= (uint64_t)v126)
              goto LABEL_51;
            v88 = *(_QWORD *)(v125 + 8 * v90);
            if (!v88)
            {
              while (1)
              {
                v89 = v90 + 1;
                if (__OFADD__(v90, 1))
                  goto LABEL_55;
                if (v89 >= (uint64_t)v126)
                  goto LABEL_51;
                v88 = *(_QWORD *)(v125 + 8 * v89);
                ++v90;
                if (v88)
                  goto LABEL_39;
              }
            }
            v89 = v72 + 4;
          }
        }
      }
LABEL_39:
      v130 = (char *)((v88 - 1) & v88);
      v131 = v89;
      v86 = __clz(__rbit64(v88)) + (v89 << 6);
    }
    v91 = (uint64_t *)(*(_QWORD *)(v129 + 48) + 16 * v86);
    v93 = *v91;
    v92 = v91[1];
    v94 = *(_QWORD *)(v129 + 56) + 96 * v86;
    v95 = *(_QWORD *)(v94 + 8);
    v96 = *(_QWORD *)(v94 + 16);
    v97 = *(_QWORD *)(v94 + 24);
    v132 = *(_QWORD **)v94;
    v133 = v96;
    v98 = *(_QWORD *)(v94 + 40);
    v134 = *(_QWORD *)(v94 + 32);
    LODWORD(v137) = *(unsigned __int8 *)(v94 + 48);
    v99 = *(char **)(v94 + 64);
    v138 = *(_QWORD *)(v94 + 56);
    v100 = *(char **)(v94 + 80);
    v141 = *(_QWORD *)(v94 + 72);
    v142 = v100;
    LODWORD(v144) = *(unsigned __int8 *)(v94 + 88);
    swift_bridgeObjectRetain(v100);
    v101 = v140;
    v102 = *v140;
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRetain(v98);
    v139 = v99;
    swift_bridgeObjectRetain(v99);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v102);
    v145 = (_QWORD *)*v101;
    v104 = v145;
    *v101 = 0x8000000000000000;
    v106 = sub_1004A8604(v93, v92);
    v107 = v104[2];
    v108 = (v105 & 1) == 0;
    v109 = v107 + v108;
    if (__OFADD__(v107, v108))
      break;
    v110 = v105;
    if (v104[3] >= v109)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v113 = v145;
        if ((v105 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        sub_10012AE14();
        v113 = v145;
        if ((v110 & 1) != 0)
          goto LABEL_22;
      }
    }
    else
    {
      sub_10012630C(v109, isUniquelyReferenced_nonNull_native);
      v111 = sub_1004A8604(v93, v92);
      if ((v110 & 1) != (v112 & 1))
        goto LABEL_56;
      v106 = v111;
      v113 = v145;
      if ((v110 & 1) != 0)
      {
LABEL_22:
        v78 = v113[7] + 96 * v106;
        v79 = *(_QWORD *)(v78 + 8);
        v80 = *(_QWORD *)(v78 + 24);
        v81 = *(_QWORD *)(v78 + 40);
        v82 = *(_QWORD *)(v78 + 64);
        v127 = *(_QWORD *)(v78 + 80);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v127);
        *(_QWORD *)v78 = v132;
        *(_QWORD *)(v78 + 8) = v95;
        *(_QWORD *)(v78 + 16) = v133;
        *(_QWORD *)(v78 + 24) = v97;
        *(_QWORD *)(v78 + 32) = v134;
        *(_QWORD *)(v78 + 40) = v98;
        *(_BYTE *)(v78 + 48) = v137;
        v83 = v139;
        *(_QWORD *)(v78 + 56) = v138;
        *(_QWORD *)(v78 + 64) = v83;
        v84 = v142;
        *(_QWORD *)(v78 + 72) = v141;
        *(_QWORD *)(v78 + 80) = v84;
        *(_BYTE *)(v78 + 88) = v144;
        goto LABEL_23;
      }
    }
    v113[(v106 >> 6) + 8] |= 1 << v106;
    v114 = (uint64_t *)(v113[6] + 16 * v106);
    *v114 = v93;
    v114[1] = v92;
    v115 = v113[7] + 96 * v106;
    *(_QWORD *)v115 = v132;
    *(_QWORD *)(v115 + 8) = v95;
    *(_QWORD *)(v115 + 16) = v133;
    *(_QWORD *)(v115 + 24) = v97;
    *(_QWORD *)(v115 + 32) = v134;
    *(_QWORD *)(v115 + 40) = v98;
    *(_BYTE *)(v115 + 48) = v137;
    v116 = v139;
    *(_QWORD *)(v115 + 56) = v138;
    *(_QWORD *)(v115 + 64) = v116;
    v117 = v142;
    *(_QWORD *)(v115 + 72) = v141;
    *(_QWORD *)(v115 + 80) = v117;
    *(_BYTE *)(v115 + 88) = v144;
    v118 = v113[2];
    v119 = __OFADD__(v118, 1);
    v120 = v118 + 1;
    if (v119)
      goto LABEL_53;
    v113[2] = v120;
    swift_bridgeObjectRetain(v92);
LABEL_23:
    v34 = v128;
    v85 = *v140;
    *v140 = v113;
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v85);
    v77 = v143;
    v72 = v131;
    v76 = (unint64_t)v130;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10015702C(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75[16];
  uint64_t v76;
  char *v77;
  char v78[24];
  uint64_t v79;

  v74 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPBackoffStrategy(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DIPRetrier(0);
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1006091C8, 24, 7);
  *(_QWORD *)(v12 + 16) = sub_10011E7A8((uint64_t)_swiftEmptyArrayStorage);
  v13 = v12 + 16;
  *v8 = 0x4000000000000000;
  v14 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104);
  v15 = v12;
  v16 = v11;
  v14(v8, enum case for DIPBackoffStrategy.linear(_:), v5);
  v17 = v8;
  v18 = v74;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(1, v17, 0, 1);
  v76 = v15;
  v77 = v18;
  v19 = v79;
  DIPRetrier.sync(_:)(sub_100183A60, v75);
  if (v19)
    goto LABEL_2;
  v79 = 0;
  v23 = swift_beginAccess(v13, v78, 0, 0);
  v24 = *(_QWORD *)v13;
  v25 = (_QWORD *)*((_QWORD *)v18 + 2);
  if (*(_QWORD *)(*(_QWORD *)v13 + 16))
  {
    v26 = v25[16];
    if (!v26)
    {
      v39 = v11;
      v40 = v25[17];
      v41 = v25[18];
      swift_bridgeObjectRetain(v41);
      v42 = sub_1004A8604(v40, v41);
      if ((v43 & 1) != 0)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v42);
        swift_retain(v44);
        swift_bridgeObjectRelease(v41);
        v31 = v71;
        v45 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
        *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v44;
        swift_release(v45);
      }
      else
      {
        swift_bridgeObjectRelease(v41);
        v31 = v71;
      }
      v16 = v39;
      goto LABEL_17;
    }
    v27 = v25[15];
    swift_bridgeObjectRetain_n(v25[16], 2);
    v28 = sub_1004A8604(v27, v26);
    if ((v29 & 1) == 0)
    {
      v74 = v16;
      v70 = v15;
      swift_bridgeObjectRelease(v26);
      if (*(_QWORD *)(v24 + 16))
      {
        v46 = v25[17];
        v47 = v25[18];
        swift_bridgeObjectRetain(v47);
        v48 = sub_1004A8604(v46, v47);
        if ((v49 & 1) != 0)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v48);
          swift_retain(v50);
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v47);
          v31 = v71;
          v51 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
          *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v50;
          swift_release(v51);
          v15 = v70;
          v16 = v74;
          goto LABEL_17;
        }
        swift_bridgeObjectRelease(v47);
      }
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.invalidStepUp(_:), v1);
      v54 = sub_100004828((uint64_t *)&unk_1006325A0);
      v55 = sub_100004828((uint64_t *)&unk_100633440);
      v56 = *(_QWORD *)(v55 - 8);
      v57 = *(_QWORD *)(v56 + 72);
      v58 = *(unsigned __int8 *)(v56 + 80);
      v59 = (v58 + 32) & ~v58;
      v60 = swift_allocObject(v54, v59 + v57, v58 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_10051FFB0;
      v61 = v60 + v59;
      v62 = (uint64_t *)(v60 + v59 + *(int *)(v55 + 48));
      v63 = enum case for DIPError.PropertyKey.inoLaunchTier(_:);
      v64 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v61, v63, v64);
      v62[3] = (uint64_t)&type metadata for String;
      *v62 = v27;
      v62[1] = v26;
      v65 = sub_10011D314(v60);
      v66 = type metadata accessor for DIPError(0);
      v67 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v66, v67, 0, 0);
      v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010054E680, 0, v4, 0, v65, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x800000010054E6C0, 1952);
      swift_willThrow(v68);
      v21 = v72;
      v20 = v73;
      v15 = v70;
      v16 = v74;
      goto LABEL_3;
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v28);
    swift_retain(v30);
    swift_bridgeObjectRelease_n(v26, 2);
    v31 = v71;
    v32 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
    *(_QWORD *)(v71 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim) = v30;
    swift_release(v32);
  }
  else
  {
    v31 = v71;
    if (v25[16])
    {
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v2 + 104))(v4, enum case for DIPError.Code.topekaCanNotResume(_:), v1, v23);
      v33 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v34 = v16;
      v35 = type metadata accessor for DIPError(0);
      v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v37 = v35;
      v16 = v34;
      swift_allocError(v37, v36, 0, 0);
      v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000040, 0x800000010054E6E0, 0, v4, 0, v33, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x800000010054E6C0, 1935);
      swift_willThrow(v38);
LABEL_2:
      v21 = v72;
      v20 = v73;
LABEL_3:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
      return swift_release(v15);
    }
  }
LABEL_17:
  if (*(_QWORD *)(v31 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim))
  {
    v52._countAndFlagsBits = 0xD00000000000002ALL;
    v52._object = (void *)0x800000010054E650;
    v53._countAndFlagsBits = 0x6431343936396236;
    v53._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v53, v52);
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v73);
  return swift_release(v15);
}

uint64_t sub_100157630@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  uint64_t v36;
  _QWORD v37[4];

  v6 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  if (qword_10062F5B0 != -1)
    v10 = swift_once(&qword_10062F5B0, sub_100486FCC);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 + 72);
  v37[0] = &_swiftEmptyDictionarySingleton;
  __chkstk_darwin(v10);
  *(&v29 - 4) = v13;
  *(&v29 - 3) = v14;
  *(&v29 - 2) = v12;
  *(&v29 - 1) = (uint64_t)v37;
  v15 = swift_bridgeObjectRetain(v12);
  OS_dispatch_queue.sync<A>(execute:)(sub_100183A68, &v29 - 6, (char *)&type metadata for () + 8, v15);
  v31 = a3;
  swift_bridgeObjectRelease(v12);
  v16 = v37[0];
  swift_beginAccess(a1 + 16, v37, 1, 0);
  v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  v18 = swift_bridgeObjectRelease(v17);
  defaultLogger()(v18);
  swift_retain(a1);
  v19 = swift_retain(a2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(32, -1);
    v36 = v30;
    *(_DWORD *)v22 = 134349314;
    swift_beginAccess(a1 + 16, v35, 0, 0);
    v34 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v22 + 4);
    swift_release(a1);
    *(_WORD *)(v22 + 12) = 2082;
    v23 = *(_QWORD *)(v11 + 64);
    v24 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain(v24);
    v34 = sub_1000E3AC8(v23, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v22 + 14);
    swift_release(a2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}ld claims retrieved for %{public}s", (uint8_t *)v22, 0x16u);
    v25 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_release(a2);
    swift_release(a1);
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  v26 = enum case for DIPRetryResult.stop(_:);
  v27 = type metadata accessor for DIPRetryResult(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v31, v26, v27);
}

uint64_t sub_100157A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_100636394);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10001D0A0;
  return sub_10015A32C(a1, a3, a4, a5);
}

uint64_t sub_100157AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_1006363AC);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10001D0A0;
  return sub_1001688B8(a1, a3, a4, a5);
}

uint64_t sub_100157B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_100636394);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100007EE8;
  return sub_10015A32C(a1, a3, a4, a5);
}

void sub_100157BCC(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  uint64_t v9;
  id v10;

  v8 = _Block_copy(aBlock);
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  _Block_copy(v8);
  v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
  swift_bridgeObjectRelease(v9);

}

uint64_t sub_100157C70(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  Swift::String v28;
  Swift::String v29;
  char *v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  int64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v3 = v2;
  v56 = a1;
  v57 = a2;
  v4 = type metadata accessor for DIPError.Code(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v60 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  __chkstk_darwin(v6);
  v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  v64 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v56 - v20;
  v22 = defaultLogger()(v19);
  v23 = Logger.logObject.getter(v22);
  v25 = static os_log_type_t.info.getter(v23, v24);
  if (os_log_type_enabled(v23, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "coreidvd concludeVerification", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v21, v14);
  v28._countAndFlagsBits = 0xD000000000000022;
  v28._object = (void *)0x800000010054E500;
  v29._countAndFlagsBits = 0x3632666339313139;
  v29._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v29, v28);
  static DaemonSignposts.concludeVerificationTotal.getter();
  v30 = v13;
  DIPSignpost.init(_:)(v10);
  if ((sub_100148740() & 1) == 0)
  {
    v34 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v60, enum case for DIPError.Code.missingEntitlement(_:), v59);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = v61;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054E550, 0, v34, 0, v35, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x800000010054E590, 2391);
    goto LABEL_7;
  }
  v31 = v57;
  if (!v57)
  {
    v43 = *(void **)(v3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
    if (v43)
    {
      v44 = objc_msgSend(v43, "serviceName");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v32 = v45;

      goto LABEL_10;
    }
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(100);
    v49._countAndFlagsBits = 0xD000000000000048;
    v49._object = (void *)0x800000010054E5E0;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 7104878;
    v50._object = (void *)0xE300000000000000;
    String.append(_:)(v50);
    v51._countAndFlagsBits = 0xD00000000000001ALL;
    v51._object = (void *)0x800000010054E630;
    String.append(_:)(v51);
    v52 = v66;
    v53 = v67;
    v54 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v60, enum case for DIPError.Code.unexpectedDaemonState(_:), v59);
    v55 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = v61;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v52, v53, 0, v54, 0, v55, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x800000010054E590, 2402);
LABEL_7:
    v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v38 = v63;
    v39 = swift_allocError(v63, v37, 0, 0);
    v40 = v62;
    v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 16))(v41, v36, v38);
    defaultLogger()(v42);
    DIPRecordError(_:message:log:)(v39, 0, 0xE000000000000000, v18);
    v27(v18, v14);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v38);
    swift_errorRelease(v39);
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v30, v65);
  }
  v32 = v57;
  v33 = v56;
LABEL_10:
  swift_bridgeObjectRetain(v31);
  sub_1001589C4(v33, v32, 1);
  swift_bridgeObjectRelease(v32);
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  sub_100234AF4();
  v46._countAndFlagsBits = 0xD000000000000023;
  v46._object = (void *)0x800000010054E5B0;
  v47._countAndFlagsBits = 0x3364613234303837;
  v47._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v47, v46);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v30, v65);
}

id sub_100158240(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint8_t *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject **v33;
  uint64_t v34;
  uint8_t *v35;
  void (*isa)(char *, uint64_t);
  id result;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  id v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  id v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(double *, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  NSObject **v79;
  NSObject *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90[24];
  double v91;
  _BYTE v92[24];
  char v93[32];

  v2 = v1;
  v4 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v4);
  v82 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  v7 = __chkstk_darwin(v6);
  v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v79 - v9;
  v11 = sub_100004828(&qword_100633990);
  v12 = __chkstk_darwin(v11);
  v86 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v79 - v14;
  v16 = type metadata accessor for Logger(0);
  v17 = *(NSObject **)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v79 - v22;
  defaultLogger()(v21);
  v24 = a1;
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.info.getter(v25, v26);
  v28 = os_log_type_enabled(v25, v27);
  v84 = v15;
  if (v28)
  {
    v87 = v16;
    v29 = swift_slowAlloc(12, -1);
    v80 = v17;
    v30 = (uint8_t *)v29;
    v79 = (NSObject **)swift_slowAlloc(8, -1);
    v81 = v2;
    *(_DWORD *)v30 = 138412290;
    v91 = *(double *)&v24;
    v31 = v24;
    v85 = v10;
    v32 = v31;
    v16 = v87;
    v2 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v30 + 4);
    v33 = v79;
    *v79 = v24;

    v10 = v85;
    _os_log_impl((void *)&_mh_execute_header, v25, v27, "confirmVerificationCompleted, feedback = %@", v30, 0xCu);
    v34 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v33, 1, v34);
    swift_slowDealloc(v33, -1, -1);
    v35 = v30;
    v17 = v80;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {

    v25 = v24;
  }

  isa = (void (*)(char *, uint64_t))v17[1].isa;
  isa(v23, v16);
  result = -[NSObject consumed](v24, "consumed");
  if ((_DWORD)result)
  {
    defaultLogger()(result);
    v38 = v24;
    v39 = v2;
    v40 = v38;
    v41 = v39;
    v42 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.info.getter(v42, v43);
    if (os_log_type_enabled(v42, v44))
    {
      v80 = v40;
      v81 = v20;
      v87 = v16;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v45 = 134217984;
      v46 = (uint64_t)v41 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate;
      swift_beginAccess((char *)v41 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate, v90, 0, 0);
      v47 = (uint64_t)v84;
      sub_100038B24(v46, (uint64_t)v84, &qword_100633990);
      v49 = v88;
      v48 = v89;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v47, 1, v89))
      {
        sub_100008030(v47, &qword_100633990);
        v50 = 0.0;
        v16 = v87;
        v40 = v80;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v10, v47, v48);
        sub_100008030(v47, &qword_100633990);
        v40 = v80;
        v51 = -[NSObject finishDate](v80, "finishDate");
        v85 = v10;
        v52 = v83;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

        v50 = Date.timeIntervalSince(_:)(v52);
        v53 = *(void (**)(char *, uint64_t))(v49 + 8);
        v54 = v52;
        v10 = v85;
        v53(v54, v48);
        v53(v10, v48);
        v16 = v87;
      }
      v91 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v45 + 4);

      _os_log_impl((void *)&_mh_execute_header, v42, v44, "confirmVerificationCompleted, assessment - feedback = %f seconds", v45, 0xCu);
      swift_slowDealloc(v45, -1, -1);
      v20 = v81;
    }
    else
    {

      v42 = v41;
    }

    result = (id)((uint64_t (*)(char *, uint64_t))isa)(v20, v16);
    v55 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator;
    v56 = *(uint64_t *)((char *)&v41->isa + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator);
    if (v56)
    {
      v57 = v40;
      v58 = (uint64_t)v41 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate;
      swift_beginAccess((char *)v41 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate, v93, 0, 0);
      v59 = v86;
      sub_100038B24(v58, v86, &qword_100633990);
      v61 = v88;
      v60 = v89;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v59, 1, v89))
      {
        swift_retain(v56);
        sub_100008030(v59, &qword_100633990);
        v62 = 0.0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v10, v59, v60);
        swift_retain(v56);
        sub_100008030(v59, &qword_100633990);
        v63 = -[NSObject finishDate](v57, "finishDate");
        v64 = v83;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

        v62 = Date.timeIntervalSince(_:)(v64);
        v65 = *(void (**)(char *, uint64_t))(v61 + 8);
        v65(v64, v60);
        v65(v10, v60);
      }
      v66 = (void (*)(double *, _QWORD))sub_100263410((uint64_t)&v91);
      v68 = v67;
      v69 = type metadata accessor for OTDRequest(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v68, 1, v69))
      {
        v70 = v68 + *(int *)(v69 + 52);
        *(double *)v70 = v62;
        *(_BYTE *)(v70 + 8) = 0;
      }
      v66(&v91, 0);
      result = (id)swift_release(v56);
      v71 = *(Class *)((char *)&v41->isa + v55);
      if (v71)
      {
        v72 = v71[13];
        if (v72)
        {
          v73 = v71[12];
          v74 = v71[13];
        }
        else
        {
          v73 = v71[14];
          v74 = v71[15];
          swift_bridgeObjectRetain(v74);
        }
        v75 = type metadata accessor for TaskPriority(0);
        v76 = (uint64_t)v82;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v82, 1, 1, v75);
        v77 = (_QWORD *)swift_allocObject(&unk_1006091A0, 56, 7);
        v77[2] = 0;
        v77[3] = 0;
        v77[4] = v71;
        v77[5] = v73;
        v77[6] = v74;
        swift_bridgeObjectRetain(v72);
        swift_retain_n(v71, 2);
        v78 = sub_1001075D4(v76, (uint64_t)&unk_1006366C8, (uint64_t)v77);
        swift_release(v71);
        return (id)swift_release(v78);
      }
    }
  }
  return result;
}

uint64_t sub_1001589C4(uint64_t a1, int64_t a2, int a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  os_log_type_t v81;
  uint8_t *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  os_log_type_t v90;
  _BOOL4 v91;
  uint8_t *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, unint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, _QWORD, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  BOOL v135;
  unint64_t v136;
  int64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, _QWORD, uint64_t);
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  uint64_t v163;
  os_log_type_t v164;
  _BOOL4 v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  unint64_t v184;
  uint64_t (*v185)(char *, uint64_t);
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  char *v194;
  unint64_t v195;
  void (*v196)(char *, _QWORD, uint64_t);
  char *v197;
  unsigned int v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220[2];
  char *v221;
  char *v222;
  uint64_t v223;
  char v224[8];

  v4 = v3;
  v192 = a1;
  v182 = type metadata accessor for KeystoreKeyType(0);
  v199 = *(_QWORD *)(v182 - 8);
  v7 = __chkstk_darwin(v182);
  v194 = (char *)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v197 = (char *)&v180 - v10;
  v11 = __chkstk_darwin(v9);
  v181 = (char *)&v180 - v12;
  __chkstk_darwin(v11);
  v183 = (char *)&v180 - v13;
  v14 = type metadata accessor for HardwareAttestationType(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v216 = (char *)&v180 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPError.Code(0);
  v213 = *(_QWORD *)(v17 - 8);
  v214 = v17;
  __chkstk_darwin(v17);
  v217 = (char *)&v180 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchWorkItemFlags(0);
  v208 = *(_QWORD *)(v19 - 8);
  v209 = v19;
  v20 = __chkstk_darwin(v19);
  v211 = (char *)&v180 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v207 = (char *)&v180 - v22;
  v23 = type metadata accessor for Logger(0);
  v210 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v186 = (char *)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v180 = (char *)&v180 - v27;
  v28 = __chkstk_darwin(v26);
  v218 = (char *)&v180 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (unint64_t)&v180 - v31;
  v33 = __chkstk_darwin(v30);
  v215 = (char *)&v180 - v34;
  v35 = __chkstk_darwin(v33);
  v206 = (char *)&v180 - v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v180 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v180 - v41;
  v187 = v40;
  v200 = v4;
  v201 = v14;
  LODWORD(v212) = a3;
  if ((a3 & 1) != 0)
  {
    defaultLogger()(v40);
    swift_bridgeObjectRetain_n(a2, 2);
    v43 = v4;
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.info.getter(v44, v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = swift_slowAlloc(22, -1);
      v204 = (_QWORD *)swift_slowAlloc(64, -1);
      v220[0] = (uint64_t)v204;
      *(_DWORD *)v47 = 136446466;
      v205 = v32;
      swift_bridgeObjectRetain(a2);
      v223 = sub_1000E3AC8(v192, a2, v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v47 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v47 + 12) = 2082;
      v191 = v15;
      v48 = *(_QWORD *)&v43[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
      v49 = *(_QWORD *)&v43[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
      swift_bridgeObjectRetain(v49);
      v50 = v48;
      v4 = v200;
      v223 = sub_1000E3AC8(v50, v49, v220);
      v32 = v205;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v47 + 14);

      v51 = v49;
      v15 = v191;
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "deleting non-persistent claims for %{public}s - %{public}s", (uint8_t *)v47, 0x16u);
      v52 = v204;
      swift_arrayDestroy(v204, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v53 = v47;
      v14 = v201;
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v60 = *(void (**)(char *, uint64_t))(v210 + 8);
    v61 = v42;
    goto LABEL_8;
  }
  defaultLogger()(v40);
  v54 = swift_bridgeObjectRetain_n(a2, 2);
  v55 = Logger.logObject.getter(v54);
  v57 = static os_log_type_t.info.getter(v55, v56);
  if (os_log_type_enabled(v55, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v220[0] = v59;
    v205 = v32;
    *(_DWORD *)v58 = 136446210;
    swift_bridgeObjectRetain(a2);
    v223 = sub_1000E3AC8(v192, a2, v220);
    v4 = v200;
    v32 = v205;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v58 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "deleting all claims for %{public}s", v58, 0xCu);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    v60 = *(void (**)(char *, uint64_t))(v210 + 8);
    v61 = v39;
LABEL_8:
    v62 = v187;
    goto LABEL_10;
  }

  swift_bridgeObjectRelease_n(a2, 2);
  v60 = *(void (**)(char *, uint64_t))(v210 + 8);
  v61 = v39;
  v62 = v23;
LABEL_10:
  v60(v61, v62);
  v185 = (uint64_t (*)(char *, uint64_t))v60;
  if (qword_10062F5B0 == -1)
    goto LABEL_11;
  while (1)
  {
    swift_once(&qword_10062F5B0, sub_100486FCC);
LABEL_11:
    v63 = v192;
    v64 = sub_100492954(v192, a2);
    v65 = sub_1004EACD4(v64);
    swift_bridgeObjectRelease(v64);
    v223 = v65;
    if (v63 == 0x6E6F7275626974 && a2 == 0xE700000000000000
      || (v66 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F7275626974, 0xE700000000000000, v192, a2, 0),
          (v66 & 1) != 0))
    {
      sub_1004E5D2C(v220, 0x6E6F7275626974, 0xE700000000000000);
      v66 = swift_bridgeObjectRelease(v220[1]);
    }
    v184 = a2;
    v67 = qword_100670828;
    v68 = v211;
    if ((v212 & 1) != 0)
    {
      v69 = *(_QWORD *)&v4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
      v70 = *(_QWORD *)&v4[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
      v71 = v207;
      v72 = static DispatchWorkItemFlags.barrier.getter(v66);
      __chkstk_darwin(v72);
      v73 = v192;
      *(&v180 - 6) = (char *)v67;
      *(&v180 - 5) = (char *)v73;
      v177 = v184;
      v178 = v69;
      v179 = v70;
      OS_dispatch_queue.sync<A>(flags:execute:)(v71, sub_100183968);
      v76 = (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v71, v209);
      v77 = v206;
      v78 = defaultLogger()(v76);
      v79 = Logger.logObject.getter(v78);
      v81 = static os_log_type_t.info.getter(v79, v80);
      a2 = 0xD00000000000001FLL;
      if (os_log_type_enabled(v79, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v81, "deleted non-persistent claims", v82, 2u);
        swift_slowDealloc(v82, -1, -1);
      }

      v83 = v77;
      v84 = v187;
      v32 = (unint64_t)v185;
      v85 = v185(v83, v187);
    }
    else
    {
      v74 = static DispatchWorkItemFlags.barrier.getter(v66);
      __chkstk_darwin(v74);
      v177 = v67;
      v178 = v192;
      v75 = v184;
      v179 = v184;
      OS_dispatch_queue.sync<A>(flags:execute:)(v68, sub_10018394C);
      v86 = (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v68, v209);
      defaultLogger()(v86);
      v87 = swift_bridgeObjectRetain_n(v75, 2);
      v88 = Logger.logObject.getter(v87);
      v90 = static os_log_type_t.info.getter(v88, v89);
      v91 = os_log_type_enabled(v88, v90);
      a2 = 0xD00000000000001FLL;
      if (v91)
      {
        v92 = (uint8_t *)swift_slowAlloc(12, -1);
        v93 = swift_slowAlloc(32, -1);
        v220[0] = v93;
        v205 = v32;
        *(_DWORD *)v92 = 136446210;
        swift_bridgeObjectRetain(v75);
        v219 = sub_1000E3AC8(v192, v75, v220);
        v4 = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v92 + 4);
        swift_bridgeObjectRelease_n(v75, 3);
        _os_log_impl((void *)&_mh_execute_header, v88, v90, "deleted all claims for %{public}s", v92, 0xCu);
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v92, -1, -1);

        v94 = v205;
      }
      else
      {

        swift_bridgeObjectRelease_n(v75, 2);
        v94 = v32;
      }
      v84 = v187;
      v32 = (unint64_t)v185;
      v85 = v185((char *)v94, v187);
      v14 = v201;
    }
    v95 = v218;
    v96 = defaultLogger()(v85);
    v97 = Logger.logObject.getter(v96);
    v99 = static os_log_type_t.info.getter(v97, v98);
    if (os_log_type_enabled(v97, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, v99, "deleting keys in the keychain", v100, 2u);
      v101 = v100;
      v95 = v218;
      v32 = (unint64_t)v185;
      v84 = v187;
      swift_slowDealloc(v101, -1, -1);
    }

    ((void (*)(char *, uint64_t))v32)(v95, v84);
    v102 = type metadata accessor for DIPAccountManager(0);
    static DIPAccountManager.sharedInstance.getter(v220, v102);
    v103 = (uint64_t)v221;
    v104 = v222;
    sub_10000806C(v220, (uint64_t)v221);
    v202 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v103, v104);
    v203 = v105;
    v106 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v220);
    v107 = static HardwareAttestationType.allCases.getter(v106);
    v190 = *(_QWORD *)(v107 + 16);
    if (!v190)
      break;
    v108 = 0;
    v109 = *(unsigned __int8 *)(v15 + 80);
    v214 = (v109 + 32) & ~v109;
    v189 = v107 + v214;
    v213 = v109 | 7;
    v198 = enum case for KeystoreKeyType.standard(_:);
    v193 = enum case for KeystoreKeyType.background(_:);
    v212 = xmmword_10051FFB0;
    v110 = v182;
    v191 = v15;
    v188 = v107;
    while (v108 < *(_QWORD *)(v107 + 16))
    {
      v111 = *(_QWORD *)(v15 + 72);
      v195 = v108;
      v112 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
      v113 = v216;
      v112(v216, v189 + v111 * v108, v14);
      v114 = sub_100004828(&qword_100632570);
      v115 = v214;
      v209 = v111 + v214;
      v210 = v114;
      v116 = swift_allocObject(v114, v111 + v214, v213);
      *(_OWORD *)(v116 + 16) = v212;
      v211 = (char *)v112;
      v112((char *)(v116 + v115), (unint64_t)v113, v14);
      sub_100169B64(v116, 0, 0, 0xF000000000000000, (uint64_t)v220);
      swift_setDeallocating(v116);
      swift_arrayDestroy(v116 + v115, *(_QWORD *)(v116 + 16), v14);
      swift_deallocClassInstance(v116, 32, 7);
      v117 = (uint64_t)v221;
      v218 = v222;
      sub_10000806C(v220, (uint64_t)v221);
      v118 = (uint64_t)v221;
      v119 = v222;
      sub_10000806C(v220, (uint64_t)v221);
      v120 = v199;
      v121 = *(void (**)(char *, _QWORD, uint64_t))(v199 + 104);
      v122 = v183;
      v121(v183, v198, v110);
      v123 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v192, v184, v202, v203, v122, v118, v119);
      v125 = v124;
      v15 = *(_QWORD *)(v120 + 8);
      ((void (*)(char *, uint64_t))v15)(v122, v110);
      dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v123, v125, 0, v117, v218);
      swift_bridgeObjectRelease(v125);
      v126 = (uint64_t)v221;
      v218 = v222;
      sub_10000806C(v220, (uint64_t)v221);
      v127 = (uint64_t)v221;
      v128 = v222;
      sub_10000806C(v220, (uint64_t)v221);
      v129 = v181;
      v121(v181, v193, v110);
      v167 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v192, v184, v202, v203, v129, v127, v128);
      v169 = v168;
      ((void (*)(char *, uint64_t))v15)(v129, v110);
      dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v167, v169, 0, v126, v218);
      v14 = v201;
      v170 = swift_bridgeObjectRelease(v169);
      v171 = defaultLogger()(v170);
      v172 = Logger.logObject.getter(v171);
      v174 = static os_log_type_t.info.getter(v172, v173);
      if (os_log_type_enabled(v172, v174))
      {
        v175 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v175 = 0;
        _os_log_impl((void *)&_mh_execute_header, v172, v174, "deleted keys SP Identity key", v175, 2u);
        swift_slowDealloc(v175, -1, -1);
      }

      v185(v180, v187);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v220);
      v4 = v200;
      v110 = v182;
      ++v195;
      v130 = *(_QWORD *)(v223 + 56);
      v207 = (char *)(v223 + 56);
      v131 = 1 << *(_BYTE *)(v223 + 32);
      if (v131 < 64)
        v132 = ~(-1 << v131);
      else
        v132 = -1;
      v32 = v132 & v130;
      v208 = (unint64_t)(v131 + 63) >> 6;
      v215 = (char *)v223;
      swift_bridgeObjectRetain(v223);
      v133 = 0;
      if (v32)
      {
LABEL_36:
        v217 = v133;
        v218 = (char *)((v32 - 1) & v32);
        v134 = __clz(__rbit64(v32)) | ((_QWORD)v133 << 6);
        goto LABEL_48;
      }
      while (1)
      {
        v135 = __OFADD__(v133, 1);
        a2 = (int64_t)(v133 + 1);
        if (v135)
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (a2 >= v208)
          goto LABEL_29;
        v136 = *(_QWORD *)&v207[8 * a2];
        if (!v136)
          break;
LABEL_47:
        v217 = (char *)a2;
        v218 = (char *)((v136 - 1) & v136);
        v134 = __clz(__rbit64(v136)) + (a2 << 6);
LABEL_48:
        v138 = (uint64_t *)(*((_QWORD *)v215 + 6) + 16 * v134);
        v15 = *v138;
        v139 = v138[1];
        v140 = swift_allocObject(v210, v209, v213);
        *(_OWORD *)(v140 + 16) = v212;
        v141 = v140 + v214;
        ((void (*)(uint64_t, char *, uint64_t))v211)(v140 + v214, v216, v14);
        swift_bridgeObjectRetain(v139);
        sub_100169B64(v140, 0, 0, 0xF000000000000000, (uint64_t)v220);
        swift_setDeallocating(v140);
        swift_arrayDestroy(v141, *(_QWORD *)(v140 + 16), v14);
        swift_deallocClassInstance(v140, 32, 7);
        v205 = (unint64_t)v222;
        v206 = v221;
        v204 = sub_10000806C(v220, (uint64_t)v221);
        v142 = v110;
        v144 = (uint64_t)v221;
        v143 = v222;
        sub_10000806C(v220, (uint64_t)v221);
        v145 = v199;
        v146 = *(void (**)(char *, _QWORD, uint64_t))(v199 + 104);
        v147 = v197;
        v146(v197, v198, v142);
        v148 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v15, v139, v202, v203, v147, v144, v143);
        v150 = v149;
        v196 = v146;
        v151 = *(void (**)(char *, uint64_t))(v145 + 8);
        v151(v147, v142);
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v148, v150, 0, v206, v205);
        v206 = (char *)v151;
        swift_bridgeObjectRelease(v150);
        v152 = (uint64_t)v221;
        v205 = (unint64_t)v222;
        v204 = sub_10000806C(v220, (uint64_t)v221);
        v153 = (uint64_t)v221;
        v154 = v222;
        sub_10000806C(v220, (uint64_t)v221);
        v155 = v194;
        v196(v194, v193, v142);
        v156 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v15, v139, v202, v203, v155, v153, v154);
        v14 = v201;
        v157 = v156;
        v159 = v158;
        ((void (*)(char *, uint64_t))v206)(v155, v142);
        swift_bridgeObjectRelease(v139);
        dispatch thunk of DIPKeystoreProtocol.deleteIdentityKey(label:constraints:)(v157, v159, 0, v152, v205);
        v110 = v142;
        v160 = swift_bridgeObjectRelease(v159);
        v161 = defaultLogger()(v160);
        v162 = Logger.logObject.getter(v161);
        v164 = static os_log_type_t.info.getter(v162, v163);
        v165 = os_log_type_enabled(v162, v164);
        v133 = v217;
        v32 = (unint64_t)v218;
        if (v165)
        {
          v166 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v166 = 0;
          _os_log_impl((void *)&_mh_execute_header, v162, v164, "deleted keys INO Identity key", v166, 2u);
          swift_slowDealloc(v166, -1, -1);
        }

        v185(v186, v187);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v220);
        v4 = v200;
        if (v32)
          goto LABEL_36;
      }
      v137 = a2 + 1;
      if (a2 + 1 >= v208)
        goto LABEL_29;
      v136 = *(_QWORD *)&v207[8 * v137];
      if (v136)
        goto LABEL_46;
      v137 = a2 + 2;
      if (a2 + 2 >= v208)
        goto LABEL_29;
      v136 = *(_QWORD *)&v207[8 * v137];
      if (v136)
        goto LABEL_46;
      v137 = a2 + 3;
      if (a2 + 3 < v208)
      {
        v136 = *(_QWORD *)&v207[8 * v137];
        if (!v136)
        {
          while (1)
          {
            a2 = v137 + 1;
            if (__OFADD__(v137, 1))
              goto LABEL_62;
            if (a2 >= v208)
              goto LABEL_29;
            v136 = *(_QWORD *)&v207[8 * a2];
            ++v137;
            if (v136)
              goto LABEL_47;
          }
        }
LABEL_46:
        a2 = v137;
        goto LABEL_47;
      }
LABEL_29:
      v15 = v191;
      swift_release(v215);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v216, v14);
      v108 = v195;
      v107 = v188;
      if (v195 == v190)
        goto LABEL_60;
    }
LABEL_63:
    __break(1u);
  }
LABEL_60:
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease(v203);
  return swift_bridgeObjectRelease(v223);
}

uint64_t sub_10015A32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v5[55] = a4;
  v5[56] = v4;
  v5[53] = a2;
  v5[54] = a3;
  v5[52] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[57] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[58] = v7;
  v5[59] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharingRegistrationResponse(0);
  v5[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for VerifiedClaimPresentment(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[61] = swift_task_alloc(v9);
  v5[62] = swift_task_alloc(v9);
  v10 = sub_100004828((uint64_t *)&unk_1006364E0);
  v5[63] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[64] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[65] = swift_task_alloc(v12);
  v5[66] = swift_task_alloc(v12);
  v13 = sub_100004828(&qword_100636688);
  v5[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ODNAssessmentResult(0);
  v5[68] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for VerifiedClaim(0);
  v5[69] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_1006364F0);
  v5[70] = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[71] = swift_task_alloc(v17);
  v5[72] = swift_task_alloc(v17);
  v5[73] = swift_task_alloc(v17);
  v5[74] = swift_task_alloc(v17);
  v5[75] = swift_task_alloc(v17);
  return swift_task_switch(sub_10015A4E0, 0, 0);
}

uint64_t sub_10015A4E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 448) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
  v2 = *v1;
  v3 = v1[1];
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0x800000010054E310;
  v6 = NSUserDefaults.internalBool(forKey:)(v5);

  if (v6
    || (v13 = *(_QWORD *)(*(_QWORD *)(v0 + 424) + 24)) != 0
    && (v14 = *(_QWORD **)(v13 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL)) != 0
    && (sub_1001B2720(v2, v3, v14) & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
    *(_QWORD *)(v0 + 608) = v7;
    if (v7)
    {
      type metadata accessor for DIPAccountManager(0);
      v8 = swift_retain(v7);
      static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 16), v8);
      v9 = *(_QWORD *)(v0 + 40);
      v10 = *(_QWORD *)(v0 + 48);
      sub_10000806C((_QWORD *)(v0 + 16), v9);
      v11 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v9, v10);
      *(_QWORD *)(v0 + 616) = v11;
      *(_QWORD *)(v0 + 624) = v12;
      v33 = v11;
      v34 = v12;
      v35 = *(_QWORD *)(v0 + 424);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
      v36 = sub_100167430(v0 + 136, v0 + 176, v35, v33, v34);
      *(_QWORD *)(v0 + 632) = v36;
      *(_QWORD *)(v0 + 640) = v37;
      v72 = v36;
      v38 = *(_QWORD *)(v0 + 552);
      v39 = *(_QWORD *)(v0 + 424);
      sub_100008018((__int128 *)(v0 + 136), v0 + 56);
      sub_100008018((__int128 *)(v0 + 176), v0 + 96);
      v40 = sub_100167258(v38, v39, v7);
      *(_QWORD *)(v0 + 648) = v40;
      *(_QWORD *)(v0 + 656) = v41;
      *(_QWORD *)(v0 + 664) = v42;
      *(_QWORD *)(v0 + 672) = v43;
      v44 = v42;
      v45 = v43;
      v46 = *(_QWORD *)(v0 + 600);
      v47 = *(_QWORD *)(v0 + 592);
      v67 = *(_QWORD *)(v0 + 584);
      v48 = *(_QWORD *)(v0 + 560);
      v49 = v40;
      v69 = *(_QWORD *)(v0 + 544);
      v61 = *(_QWORD *)(v0 + 536);
      v62 = *(_QWORD *)(v0 + 448);
      v63 = *(_QWORD *)(v0 + 424);
      v50 = v41;
      sub_100038AE0(*(_QWORD *)(v0 + 552), v47, type metadata accessor for VerifiedClaim);
      v51 = v46;
      v65 = v46;
      v52 = (uint64_t *)(v46 + *(int *)(v48 + 48));
      sub_100038AE0(v47, v51, type metadata accessor for VerifiedClaim);
      v64 = v49;
      *v52 = v49;
      v52[1] = v50;
      v52[2] = v44;
      *(_OWORD *)(v0 + 232) = 0u;
      *(_QWORD *)(v0 + 248) = 0;
      *(_OWORD *)(v0 + 216) = 0u;
      v53 = type metadata accessor for DIPPregeneratedAssessment(0);
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_QWORD *)(v0 + 288) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v61, 1, 1, v53);
      v54 = *(_QWORD *)(v62 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator);
      swift_retain(v54);
      swift_retain(v7);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      sub_10015DD6C(v63, v7, v45, 0, v0 + 216, v0 + 256, v61, v54, v69, 0, 0);
      swift_release(v7);
      swift_bridgeObjectRelease(v45);
      swift_release(v54);
      sub_100008030(v61, &qword_100636688);
      sub_100008030(v0 + 256, &qword_100636670);
      sub_100008030(v0 + 216, &qword_100636670);
      sub_100038B24(v69, v0 + 296, &qword_100636670);
      *(_QWORD *)(v0 + 680) = *(_QWORD *)(v69 + 40);
      v55 = *(_QWORD *)(v69 + 48);
      *(_QWORD *)(v0 + 688) = v55;
      v56 = (uint64_t *)(v67 + *(int *)(v48 + 48));
      sub_100035DE8(v65, v67, type metadata accessor for VerifiedClaim);
      *v56 = v64;
      v56[1] = v50;
      v56[2] = v44;
      v57 = dword_1006363A4;
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v55);
      v58 = (_QWORD *)swift_task_alloc(v57);
      *(_QWORD *)(v0 + 696) = v58;
      *v58 = v0;
      v58[1] = sub_10015ACAC;
      return sub_100168398(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 488), v59, *(_QWORD *)(v0 + 584), v64, v50, v44, v72);
    }
    v20 = *(_QWORD *)(v0 + 472);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 104))(v20, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 456));
    v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v22, v23, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054E480, 0, v20, 0, v21, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054E450, 2507);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 472);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 104))(v15, enum case for DIPError.Code.missingEntitlement(_:), *(_QWORD *)(v0 + 456));
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010054E420, 0, v15, 0, v16, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054E450, 2504);
  }
  swift_willThrow(v19);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 584);
  v26 = *(_QWORD *)(v0 + 576);
  v27 = *(_QWORD *)(v0 + 568);
  v28 = *(_QWORD *)(v0 + 552);
  v29 = *(_QWORD *)(v0 + 544);
  v30 = *(_QWORD *)(v0 + 536);
  v31 = *(_QWORD *)(v0 + 528);
  v32 = *(_QWORD *)(v0 + 520);
  v66 = *(_QWORD *)(v0 + 496);
  v68 = *(_QWORD *)(v0 + 488);
  v70 = *(_QWORD *)(v0 + 480);
  v71 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015ACAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 696);
  *(_QWORD *)(*(_QWORD *)v1 + 704) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[86];
    v5 = v2[84];
    v6 = v2[83];
    v7 = v2[82];
    v8 = v2[81];
    v9 = v2[80];
    v10 = v2[79];
    swift_bridgeObjectRelease(v2[78]);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(v4);
    v11 = sub_10015B5C4;
  }
  else
  {
    v12 = v2[83];
    v13 = v2[82];
    v14 = v2[73];
    swift_bridgeObjectRelease(v2[81]);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    sub_100035DAC(v14, type metadata accessor for VerifiedClaim);
    v11 = sub_10015ADC4;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_10015ADC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v61 = (_QWORD *)(v0 + 56);
  v1 = (_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 496);
  v56 = *(_OWORD *)(v0 + 648);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 512) + 32))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 504));
  sub_100038AE0(v7, v6, type metadata accessor for VerifiedClaimPresentment);
  v8 = v4 + *(int *)(v5 + 48);
  sub_100035DE8(v3, v4, type metadata accessor for VerifiedClaim);
  *(_OWORD *)v8 = v56;
  *(_QWORD *)(v8 + 16) = v2;
  v57 = v0 + 296;
  sub_100038B24(v0 + 296, v0 + 336, &qword_100636670);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 648);
  if (v9)
  {
    v13 = *(_QWORD *)(v0 + 368);
    sub_10000806C((_QWORD *)(v0 + 336), v9);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    v15 = swift_bridgeObjectRetain(v10);
    v1 = (_QWORD *)(v0 + 96);
    v16 = v14(v9, v13, v15);
    v9 = v17;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 336));
  }
  else
  {
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    sub_100008030(v0 + 336, &qword_100636670);
    v16 = 0;
  }
  v18 = *(_QWORD *)(v0 + 704);
  sub_10015E700(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656), *(_QWORD **)(v0 + 664), *(_QWORD *)(v0 + 496), v16, *(_QWORD *)(v0 + 480), v9, *(void **)(v0 + 632), (uint64_t)v61, *(_QWORD *)(v0 + 640), v1);
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 664);
    v20 = *(_QWORD *)(v0 + 656);
    v21 = *(_QWORD *)(v0 + 648);
    v22 = *(_QWORD *)(v0 + 640);
    v23 = *(_QWORD *)(v0 + 632);
    v24 = *(_QWORD *)(v0 + 624);
    v25 = *(_QWORD *)(v0 + 608);
    v53 = *(_QWORD *)(v0 + 600);
    v54 = *(_QWORD *)(v0 + 576);
    v51 = *(_QWORD *)(v0 + 528);
    v52 = *(_QWORD *)(v0 + 544);
    v48 = *(_QWORD *)(v0 + 688);
    v49 = *(_QWORD *)(v0 + 512);
    v26 = *(_QWORD *)(v0 + 496);
    v50 = *(_QWORD *)(v0 + 504);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease(v48);
    swift_release(v25);
    swift_bridgeObjectRelease(v9);
    sub_100035DAC(v26, type metadata accessor for VerifiedClaimPresentment);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v51, v50);
    sub_100008030(v57, &qword_100636670);
    sub_100035DAC(v52, type metadata accessor for ODNAssessmentResult);
    sub_100008030(v53, &qword_1006364F0);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v61);
    sub_100035DAC(v54, type metadata accessor for VerifiedClaim);
    v27 = *(_QWORD *)(v0 + 592);
    v28 = *(_QWORD *)(v0 + 584);
    v29 = *(_QWORD *)(v0 + 576);
    v30 = *(_QWORD *)(v0 + 568);
    v31 = *(_QWORD *)(v0 + 552);
    v32 = *(_QWORD *)(v0 + 544);
    v33 = *(_QWORD *)(v0 + 536);
    v34 = *(_QWORD *)(v0 + 528);
    v35 = *(_QWORD *)(v0 + 520);
    v55 = *(_QWORD *)(v0 + 496);
    v58 = *(_QWORD *)(v0 + 488);
    v60 = *(_QWORD *)(v0 + 480);
    v62 = *(_QWORD *)(v0 + 472);
    swift_task_dealloc(*(_QWORD *)(v0 + 600));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v55);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 664);
    v38 = *(_QWORD *)(v0 + 656);
    v39 = *(_QWORD *)(v0 + 576);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 648));
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v9);
    sub_100035DAC(v39, type metadata accessor for VerifiedClaim);
    sub_100038B24(v57, v0 + 376, &qword_100636670);
    v40 = *(_QWORD *)(v0 + 400);
    if (v40)
    {
      v41 = *(_QWORD *)(v0 + 408);
      sub_10000806C((_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 400));
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      v40 = v43;
      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 376));
    }
    else
    {
      sub_100008030(v0 + 376, &qword_100636670);
      v42 = 0;
    }
    *(_QWORD *)(v0 + 712) = v40;
    v44 = *(_QWORD *)(v0 + 664);
    v45 = *(_QWORD *)(v0 + 568);
    v46 = v45 + *(int *)(*(_QWORD *)(v0 + 560) + 48);
    v59 = *(_OWORD *)(v0 + 648);
    sub_100035DE8(*(_QWORD *)(v0 + 600), v45, type metadata accessor for VerifiedClaim);
    *(_OWORD *)v46 = v59;
    *(_QWORD *)(v46 + 16) = v44;
    v47 = (_QWORD *)swift_task_alloc(dword_10063639C);
    *(_QWORD *)(v0 + 720) = v47;
    *v47 = v0;
    v47[1] = sub_10015B2EC;
    return sub_100161EF8(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 624), v42, v40, *(_QWORD *)(v0 + 680));
  }
}

uint64_t sub_10015B2EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v3);
  v14 = v2[86];
  v15 = v2[89];
  v4 = v2[84];
  v5 = v2[83];
  v6 = v2[82];
  v7 = v2[81];
  v8 = v2[80];
  v9 = v2[79];
  v10 = v2[78];
  if (v0)
  {
    swift_bridgeObjectRelease(v2[83]);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    v11 = sub_10015B734;
  }
  else
  {
    v12 = v2[71];
    swift_bridgeObjectRelease(v2[84]);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    sub_100035DAC(v12, type metadata accessor for VerifiedClaim);
    v11 = sub_10015B43C;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_10015B43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 592);
  v10 = *(_QWORD *)(v0 + 584);
  v11 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 568);
  v13 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 536);
  v15 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 488);
  v17 = *(_QWORD *)(v0 + 472);
  swift_release(*(_QWORD *)(v0 + 608));
  sub_100035DAC(v7, type metadata accessor for SharingRegistrationResponse);
  sub_100035DAC(v6, type metadata accessor for VerifiedClaimPresentment);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100008030(v0 + 296, &qword_100636670);
  sub_100035DAC(v2, type metadata accessor for ODNAssessmentResult);
  sub_100008030(v1, &qword_1006364F0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v2);
  swift_task_dealloc(v14);
  swift_task_dealloc(v3);
  swift_task_dealloc(v15);
  swift_task_dealloc(v6);
  swift_task_dealloc(v16);
  swift_task_dealloc(v7);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015B5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 544);
  swift_release(*(_QWORD *)(v0 + 608));
  sub_100008030(v0 + 296, &qword_100636670);
  sub_100035DAC(v3, type metadata accessor for ODNAssessmentResult);
  sub_100008030(v1, &qword_1006364F0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
  sub_100035DAC(v2, type metadata accessor for VerifiedClaim);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(_QWORD *)(v0 + 544);
  v10 = *(_QWORD *)(v0 + 536);
  v11 = *(_QWORD *)(v0 + 528);
  v12 = *(_QWORD *)(v0 + 520);
  v14 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 488);
  v16 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015B734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 600);
  v22 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 480);
  swift_release(*(_QWORD *)(v0 + 608));
  sub_100035DAC(v7, type metadata accessor for SharingRegistrationResponse);
  sub_100035DAC(v6, type metadata accessor for VerifiedClaimPresentment);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100008030(v0 + 296, &qword_100636670);
  sub_100035DAC(v2, type metadata accessor for ODNAssessmentResult);
  sub_100008030(v1, &qword_1006364F0);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 96));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
  sub_100035DAC(v22, type metadata accessor for VerifiedClaim);
  v8 = *(_QWORD *)(v0 + 592);
  v9 = *(_QWORD *)(v0 + 584);
  v10 = *(_QWORD *)(v0 + 576);
  v11 = *(_QWORD *)(v0 + 568);
  v12 = *(_QWORD *)(v0 + 552);
  v13 = *(_QWORD *)(v0 + 544);
  v14 = *(_QWORD *)(v0 + 536);
  v15 = *(_QWORD *)(v0 + 528);
  v16 = *(_QWORD *)(v0 + 520);
  v18 = *(_QWORD *)(v0 + 496);
  v19 = *(_QWORD *)(v0 + 488);
  v20 = *(_QWORD *)(v0 + 480);
  v21 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015B8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  Swift::Bool v34;
  char *v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  dispatch_group_t v131;
  NSObject *v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  char *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  int v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  dispatch_group_t v216;
  id v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD v261[3];
  _QWORD v262[5];
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  char *v282;

  v251 = a1;
  v234 = a2;
  v3 = sub_100004828(&qword_100636678);
  __chkstk_darwin(v3);
  v233 = (char *)&v206 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v240 = *(_QWORD *)(v5 - 8);
  v241 = v5;
  __chkstk_darwin(v5);
  v239 = (char *)&v206 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_100004828(&qword_100636680);
  __chkstk_darwin(v248);
  v247 = (char *)&v206 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100636688);
  v235 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v242 = (uint64_t)&v206 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = v10;
  __chkstk_darwin(v9);
  v243 = (uint64_t)&v206 - v11;
  v12 = sub_100004828((uint64_t *)&unk_100636548);
  __chkstk_darwin(v12);
  v250 = (uint64_t)&v206 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v244 = *(_QWORD *)(v14 - 8);
  v245 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v206 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v237 = *(_QWORD *)(v17 - 8);
  v238 = v17;
  __chkstk_darwin(v17);
  v249 = (char *)&v206 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v206 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DIPError.Code(0);
  v255 = *(_QWORD *)(v22 - 8);
  v256 = v22;
  __chkstk_darwin(v22);
  v282 = (char *)&v206 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v206 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DIPSignpost(0);
  v252 = *(_QWORD *)(v27 - 8);
  v253 = v27;
  __chkstk_darwin(v27);
  v254 = (char *)&v206 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v2;
  v31 = *(_QWORD *)&v2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  v30 = *(_QWORD *)&v2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  v32 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v33._countAndFlagsBits = 0xD00000000000001ALL;
  v33._object = (void *)0x800000010054E310;
  v34 = NSUserDefaults.internalBool(forKey:)(v33);

  if (!v34)
  {
    v84 = *(_QWORD *)(v251 + 24);
    if (!v84
      || (v85 = *(_QWORD **)(v84 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL)) == 0
      || (sub_1001B2720(v31, v30, v85) & 1) == 0)
    {
      v86 = v282;
      (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v282, enum case for DIPError.Code.missingEntitlement(_:), v256);
      v87 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v88 = type metadata accessor for DIPError(0);
      v89 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v88, v89, 0, 0);
      v90 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010054E330, 0, v86, 0, v87, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000028, 0x800000010054E370, 2570);
      return swift_willThrow(v90);
    }
  }
  static DaemonSignposts.getVerificationResultWaitForSetup.getter();
  v35 = v254;
  DIPSignpost.init(_:)(v26);
  v36 = OS_dispatch_group.wait(interval:)(4.0);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v36 & 1, 0) & 1) == 0)
  {
    v91 = v282;
    (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v282, enum case for DIPError.Code.timeoutTaskTiberiusSetup(_:), v256);
    v92 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v93 = type metadata accessor for DIPError(0);
    v94 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v93, v94, 0, 0);
    v95 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054E3A0, 0, v91, 0, v92, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000028, 0x800000010054E370, 2575);
LABEL_12:
    swift_willThrow(v95);
    return (*(uint64_t (**)(char *, uint64_t))(v252 + 8))(v35, v253);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v37 = &v29[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  v38 = *(_QWORD *)&v29[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  if (!v38)
  {
    v96 = v282;
    (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v282, enum case for DIPError.Code.unexpectedDaemonState(_:), v256);
    v97 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v98 = type metadata accessor for DIPError(0);
    v99 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v98, v99, 0, 0);
    v95 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010054E3D0, 0, v96, 0, v97, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000028, 0x800000010054E370, 2580);
    goto LABEL_12;
  }
  v222 = v16;
  v39 = *((_QWORD *)v37 + 1);
  v41 = *((_QWORD *)v37 + 3);
  v40 = *((_QWORD *)v37 + 4);
  v226 = *((_QWORD *)v37 + 2);
  v227 = v40;
  v43 = *((_QWORD *)v37 + 5);
  v42 = *((_QWORD *)v37 + 6);
  v231 = v41;
  v232 = v43;
  v228 = v42;
  v229 = v38;
  v44 = *((_QWORD *)v37 + 8);
  v230 = *((_QWORD *)v37 + 7);
  v45 = v230;
  v223 = *((_QWORD *)v37 + 9);
  v46 = v223;
  v224 = v44;
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v225 = v39;
  swift_retain(v39);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  v47 = swift_bridgeObjectRetain(v46);
  v48 = static OS_dispatch_queue.Attributes.concurrent.getter(v47);
  v49 = v249;
  static DispatchQoS.unspecified.getter(v48);
  v50 = v222;
  (*(void (**)(char *, _QWORD, uint64_t))(v244 + 104))(v222, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v245);
  v219 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x800000010054E400, v49, v21, v50, 0);
  v216 = dispatch_group_create();
  v51 = swift_allocObject(&unk_100609060, 24, 7);
  v245 = v51;
  *(_QWORD *)(v51 + 16) = 0;
  v215 = v51 + 16;
  v52 = swift_allocObject(&unk_100609088, 32, 7);
  v53 = type metadata accessor for SharingCredentials(0);
  *(_QWORD *)(v52 + 16) = 0;
  v213 = v52 + 16;
  v244 = v52;
  *(_QWORD *)(v52 + 24) = 0;
  v209 = *(_QWORD *)(v53 - 8);
  v210 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 56))(v250, 1, 1);
  v54 = swift_allocObject(&unk_1006090B0, 73, 7);
  *(_OWORD *)(v54 + 16) = 0u;
  v212 = v54 + 16;
  *(_OWORD *)(v54 + 32) = 0u;
  *(_QWORD *)(v54 + 56) = 0;
  *(_QWORD *)(v54 + 64) = 0;
  *(_QWORD *)(v54 + 48) = 1;
  v218 = v54;
  *(_BYTE *)(v54 + 72) = 0;
  v55 = sub_100004828(&qword_100636690);
  v221 = swift_allocBox(v55);
  v57 = v56;
  v58 = type metadata accessor for ODNAssessmentResult(0);
  v206 = *(_QWORD *)(v58 - 8);
  v207 = v58;
  v59 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v206 + 56);
  v208 = v57;
  v59(v57, 1, 1);
  v60 = swift_allocObject(&unk_100609088, 32, 7);
  *(_QWORD *)(v60 + 16) = 0;
  v211 = v60 + 16;
  v222 = (char *)v60;
  *(_QWORD *)(v60 + 24) = 0;
  v61 = sub_100004828(&qword_100636698);
  v220 = swift_allocBox(v61);
  v217 = v29;
  v63 = v62;
  v64 = type metadata accessor for AssessmentAdditionalInfo(0);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
  v214 = v63;
  v65(v63, 1, 1, v64);
  v66 = (_QWORD *)swift_allocObject(&unk_1006090D8, 104, 7);
  v66[2] = v29;
  v68 = v228;
  v67 = v229;
  v66[3] = v229;
  v66[4] = v39;
  v70 = v226;
  v69 = v227;
  v72 = v230;
  v71 = v231;
  v66[5] = v226;
  v66[6] = v71;
  v73 = v232;
  v66[7] = v69;
  v66[8] = v73;
  v66[9] = v68;
  v66[10] = v72;
  v74 = v223;
  v75 = v224;
  v66[11] = v224;
  v66[12] = v74;
  v76 = swift_allocObject(&unk_100609100, 32, 7);
  *(_QWORD *)(v76 + 16) = &unk_1006366A8;
  *(_QWORD *)(v76 + 24) = v66;
  v77 = v69;
  v78 = v76;
  sub_1001833E0(v67, v225, v70, v231, v77, v232, v68, v72, v75, v74);
  v79 = v217;
  v80 = v248;
  v81 = v246;
  v82 = v247;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000028, 0x800000010054E370, 2598, &unk_1006366B8, v78, v248);
  if (v81)
  {
    swift_release(v78);

    sub_10018343C(v229, v225, v226, v231, v227, v232, v228, v230, v224, v223);
    (*(void (**)(char *, uint64_t))(v252 + 8))(v254, v253);
    swift_release(v220);
    swift_release(v222);
    swift_release(v221);
    swift_release(v218);
    sub_100008030(v250, (uint64_t *)&unk_100636548);
    swift_release(v244);
    return swift_release(v245);
  }
  else
  {
    v246 = (unint64_t)"rkflow ACL violation";
    v217 = 0;
    swift_release(v78);
    v100 = *((_OWORD *)v82 + 7);
    v270 = *((_OWORD *)v82 + 6);
    v271 = v100;
    v272 = *((_QWORD *)v82 + 16);
    v101 = *((_OWORD *)v82 + 3);
    v266 = *((_OWORD *)v82 + 2);
    v267 = v101;
    v102 = *((_OWORD *)v82 + 5);
    v268 = *((_OWORD *)v82 + 4);
    v269 = v102;
    v103 = *((_OWORD *)v82 + 1);
    v264 = *(_OWORD *)v82;
    v265 = v103;
    v104 = *(_OWORD *)(v82 + 216);
    v105 = *(_OWORD *)(v82 + 248);
    v279 = *(_OWORD *)(v82 + 232);
    v280 = v105;
    v281 = *((_QWORD *)v82 + 33);
    v106 = *(_OWORD *)(v82 + 152);
    v107 = *(_OWORD *)(v82 + 184);
    v275 = *(_OWORD *)(v82 + 168);
    v276 = v107;
    v277 = *(_OWORD *)(v82 + 200);
    v278 = v104;
    v108 = (uint64_t)&v82[*(int *)(v80 + 64)];
    v273 = *(_OWORD *)(v82 + 136);
    v274 = v106;
    v109 = v243;
    sub_1000A1F54(v108, v243, &qword_100636688);
    sub_100038B24(v109, v242, &qword_100636688);
    v110 = *(unsigned __int8 *)(v235 + 80);
    v248 = (v110 + 320) & ~v110;
    v111 = (v236 + v248 + 7) & 0xFFFFFFFFFFFFFFF8;
    v112 = (v111 + 15) & 0xFFFFFFFFFFFFFFF8;
    v113 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
    v114 = (v113 + 15) & 0xFFFFFFFFFFFFFFF8;
    v115 = swift_allocObject(&unk_100609128, v114 + 8, v110 | 7);
    v116 = v271;
    *(_OWORD *)(v115 + 144) = v270;
    *(_OWORD *)(v115 + 160) = v116;
    v117 = v267;
    *(_OWORD *)(v115 + 80) = v266;
    *(_OWORD *)(v115 + 96) = v117;
    v118 = v269;
    *(_OWORD *)(v115 + 112) = v268;
    *(_OWORD *)(v115 + 128) = v118;
    v119 = v265;
    *(_OWORD *)(v115 + 48) = v264;
    *(_OWORD *)(v115 + 64) = v119;
    v120 = v279;
    v121 = v280;
    v122 = v277;
    *(_OWORD *)(v115 + 264) = v278;
    *(_OWORD *)(v115 + 280) = v120;
    *(_OWORD *)(v115 + 296) = v121;
    v123 = v273;
    *(_OWORD *)(v115 + 200) = v274;
    v124 = v276;
    *(_OWORD *)(v115 + 216) = v275;
    *(_OWORD *)(v115 + 232) = v124;
    *(_OWORD *)(v115 + 248) = v122;
    v125 = v221;
    *(_QWORD *)(v115 + 16) = v79;
    *(_QWORD *)(v115 + 24) = v125;
    v126 = v251;
    *(_QWORD *)(v115 + 32) = v245;
    *(_QWORD *)(v115 + 40) = v126;
    *(_QWORD *)(v115 + 176) = v272;
    *(_QWORD *)(v115 + 312) = v281;
    v127 = v115 + v248;
    *(_OWORD *)(v115 + 184) = v123;
    sub_1000A1F54(v242, v127, &qword_100636688);
    *(_QWORD *)(v115 + v111) = v244;
    v128 = v218;
    *(_QWORD *)(v115 + v112) = v218;
    v129 = v222;
    *(_QWORD *)(v115 + v113) = v222;
    v130 = v220;
    *(_QWORD *)(v115 + v114) = v220;
    v262[4] = sub_1001836D4;
    v263 = v115;
    v262[0] = _NSConcreteStackBlock;
    v262[1] = 1107296256;
    v262[2] = sub_1004AB190;
    v262[3] = &unk_100609140;
    v248 = (uint64_t)_Block_copy(v262);
    v247 = (char *)v79;
    v131 = v216;
    v132 = v216;
    swift_retain(v125);
    swift_retain(v245);
    swift_retain(v126);
    swift_retain(v244);
    swift_retain(v128);
    swift_retain(v129);
    swift_retain(v130);
    v133 = sub_100183760(&v264);
    v134 = v249;
    static DispatchQoS.unspecified.getter(v133);
    v261[0] = _swiftEmptyArrayStorage;
    v135 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v136 = sub_100004828((uint64_t *)&unk_1006308D0);
    v137 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
    v138 = v239;
    v139 = v136;
    v140 = v245;
    v141 = v241;
    dispatch thunk of SetAlgebra.init<A>(_:)(v261, v139, v137, v241, v135);
    v142 = (const void *)v248;
    OS_dispatch_queue.async(group:qos:flags:execute:)(v131, v134, v138, v248);
    _Block_release(v142);

    (*(void (**)(char *, uint64_t))(v240 + 8))(v138, v141);
    (*(void (**)(char *, uint64_t))(v237 + 8))(v134, v238);
    swift_release(v263);
    v143 = v132;
    OS_dispatch_group.wait()();
    swift_beginAccess(v215, v262, 0, 0);
    v144 = *(_QWORD *)(v140 + 16);
    v145 = v221;
    v146 = v222;
    v147 = v220;
    if (v144)
    {
      swift_errorRetain(*(_QWORD *)(v140 + 16));
      sub_1001837F4(&v264);
      v148 = v147;
      v149 = v282;
      (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v282, enum case for DIPError.Code.internalError(_:), v256);
      swift_errorRetain(v144);
      v150 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v151 = type metadata accessor for DIPError(0);
      v152 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v151, v152, 0, 0);
      v153 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v144, v149, 0, v150, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000028, v246 | 0x8000000000000000, 2716);
      swift_willThrow(v153);

      swift_errorRelease(v144);
      sub_10018343C(v229, v225, v226, v231, v227, v232, v228, v230, v224, v223);
      sub_100008030(v243, &qword_100636688);
      (*(void (**)(char *, uint64_t))(v252 + 8))(v254, v253);
      swift_release(v148);
      swift_release(v222);
      swift_release(v145);
      swift_release(v218);
      sub_100008030(v250, (uint64_t *)&unk_100636548);
      swift_release(v244);
      return swift_release(v140);
    }
    else
    {
      v154 = (_QWORD *)v218;
      if ((_BYTE)v264)
        v155 = 50;
      else
        v155 = 49;
      v156 = (char *)*((_QWORD *)&v268 + 1);
      v157 = *((_QWORD *)&v269 + 1);
      v158 = v270;
      v159 = v271;
      v251 = v269;
      swift_bridgeObjectRetain(v269);
      v249 = (char *)v158;
      swift_bridgeObjectRetain(v158);
      v248 = v159;
      swift_bridgeObjectRetain(v159);

      sub_1001837F4(&v264);
      sub_10018343C(v229, v225, v226, v231, v227, v232, v228, v230, v224, v223);
      sub_100008030(v243, &qword_100636688);
      (*(void (**)(char *, uint64_t))(v252 + 8))(v254, v253);
      v160 = *(_QWORD *)&v247[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator];
      v246 = (unint64_t)v156;
      v242 = v155;
      if (v160
        && (v161 = v208,
            v162 = swift_beginAccess(v208, &v257, 0, 0),
            !(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v206 + 48))(v161, 1, v207, v162)))
      {
        v169 = v161[20];
        v164 = v233;
        if (v169)
        {
          v170 = v161[25];
          v171 = v161[26];
          v235 = v161[20];
          v236 = v170;
          v168 = v161[23];
          v172 = (char *)v161[24];
          v173 = v161[22];
          v246 = v161[21];
          v242 = v161[19];
          swift_bridgeObjectRetain(v169);
          swift_bridgeObjectRetain(v173);
          swift_bridgeObjectRetain(v172);
          swift_bridgeObjectRetain(v171);
          swift_bridgeObjectRelease(0xE100000000000000);
          swift_bridgeObjectRelease(v251);
          swift_bridgeObjectRelease(v249);
          swift_bridgeObjectRelease(v248);
          v251 = v173;
          v248 = v171;
          v249 = v172;
        }
        else
        {
          v168 = v157;
          v235 = 0xE100000000000000;
          v236 = *((_QWORD *)&v158 + 1);
        }
        v163 = v250;
        v166 = v209;
        v167 = v210;
        v165 = v154;
      }
      else
      {
        v235 = 0xE100000000000000;
        v236 = *((_QWORD *)&v158 + 1);
        v163 = v250;
        v164 = v233;
        v165 = v154;
        v166 = v209;
        v167 = v210;
        v168 = v157;
      }
      v174 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v163, 1, v167);
      v253 = v168;
      v175 = v146;
      if (v174)
      {
        v176 = sub_100004828(&qword_100636528);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 56))(v164, 1, 1, v176);
      }
      else
      {
        v177 = v163 + *(int *)(v167 + 20);
        v178 = sub_100004828(&qword_100636528);
        v179 = *(_QWORD *)(v178 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v164, v177, v178);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v164, 0, 1, v178);
      }
      v181 = v212;
      v180 = v213;
      v182 = v211;
      v183 = (uint64_t)v164;
      v184 = v234;
      sub_1000A1F54(v183, v234, &qword_100636678);
      v252 = type metadata accessor for TiberiusIdentitySharingRequest(0);
      v185 = v184 + *(int *)(v252 + 20);
      swift_beginAccess(v180, v261, 0, 0);
      v186 = *(char **)(v244 + 24);
      v243 = *(_QWORD *)(v244 + 16);
      v282 = v186;
      swift_beginAccess(v181, &v260, 0, 0);
      v187 = v165[3];
      v237 = v165[2];
      v188 = v237;
      v189 = v165;
      v190 = v165[4];
      v191 = v165[5];
      v240 = v189[6];
      v241 = v187;
      v239 = (char *)v189[7];
      v256 = v189[8];
      LODWORD(v255) = *((unsigned __int8 *)v189 + 72);
      swift_beginAccess(v182, &v259, 0, 0);
      v238 = *((_QWORD *)v175 + 2);
      v254 = (char *)*((_QWORD *)v175 + 3);
      v192 = v214;
      swift_beginAccess(v214, &v258, 0, 0);
      v193 = type metadata accessor for TiberiusWrappedAssessment(0);
      sub_100038B24(v192, v185 + *(int *)(v193 + 32), &qword_100636698);
      v194 = v282;
      *(_QWORD *)v185 = v243;
      *(_QWORD *)(v185 + 8) = v194;
      v195 = v241;
      v196 = v235;
      *(_QWORD *)(v185 + 16) = v242;
      *(_QWORD *)(v185 + 24) = v196;
      v197 = v251;
      *(_QWORD *)(v185 + 32) = v246;
      *(_QWORD *)(v185 + 40) = v197;
      v198 = v249;
      *(_QWORD *)(v185 + 48) = v253;
      *(_QWORD *)(v185 + 56) = v198;
      v199 = v248;
      *(_QWORD *)(v185 + 64) = v236;
      *(_QWORD *)(v185 + 72) = v199;
      *(_QWORD *)(v185 + 80) = v188;
      *(_QWORD *)(v185 + 88) = v195;
      *(_QWORD *)(v185 + 96) = v190;
      *(_QWORD *)(v185 + 104) = v191;
      v200 = (uint64_t)v239;
      v201 = v240;
      *(_QWORD *)(v185 + 112) = v240;
      *(_QWORD *)(v185 + 120) = v200;
      *(_QWORD *)(v185 + 128) = v256;
      *(_BYTE *)(v185 + 136) = v255;
      v202 = v254;
      *(_QWORD *)(v185 + 144) = v238;
      *(_QWORD *)(v185 + 152) = v202;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 56))(v185, 0, 1, v193);
      v204 = *(_QWORD *)&v247[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
      v203 = *(_QWORD *)&v247[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8];
      swift_bridgeObjectRetain(v282);
      sub_100183888(v237, v195, v190, v191, v201, v200, v256);
      swift_bridgeObjectRetain(v254);
      swift_bridgeObjectRetain(v203);
      swift_release(v220);
      swift_release(v222);
      swift_release(v221);
      swift_release(v189);
      v205 = (_QWORD *)(v234 + *(int *)(v252 + 24));
      *v205 = v204;
      v205[1] = v203;
      sub_100008030(v250, (uint64_t *)&unk_100636548);
      swift_release(v244);
      return swift_release(v245);
    }
  }
}

uint64_t sub_10015CCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[38] = a3;
  v4[39] = a4;
  v4[36] = a1;
  v4[37] = a2;
  v5 = sub_100004828(&qword_100636688);
  v4[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10015CD10, 0, 0);
}

uint64_t sub_10015CD10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = *(_QWORD *)(v0[38] + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for DIPPregeneratedAssessment(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_100035DE8(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v0[40], type metadata accessor for DIPPregeneratedAssessment);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v0[40], v5, 1, v3);
  type metadata accessor for DIPODNator(0);
  v6 = (uint64_t **)swift_task_alloc(dword_10063A8EC);
  v0[41] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_10015CDE4;
  return sub_100262684((uint64_t)(v0 + 2), v0[37], v0[40], v0[39]);
}

uint64_t sub_10015CDE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v2 = *(_QWORD *)(*v1 + 328);
  v3 = *v1;
  *(_QWORD *)(v3 + 336) = v0;
  v40 = *(_BYTE *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_QWORD *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  v9 = *(_QWORD *)(v3 + 64);
  v38 = *(_QWORD *)(v3 + 80);
  v39 = *(_QWORD *)(v3 + 72);
  v36 = *(_QWORD *)(v3 + 96);
  v37 = *(_QWORD *)(v3 + 88);
  v34 = *(_QWORD *)(v3 + 112);
  v35 = *(_QWORD *)(v3 + 104);
  v33 = *(_QWORD *)(v3 + 120);
  v31 = *(_QWORD *)(v3 + 136);
  v32 = *(_QWORD *)(v3 + 128);
  v30 = *(_QWORD *)(v3 + 144);
  v29 = *(_BYTE *)(v3 + 152);
  v27 = *(_QWORD *)(v3 + 168);
  v28 = *(_QWORD *)(v3 + 160);
  v25 = *(_QWORD *)(v3 + 184);
  v26 = *(_QWORD *)(v3 + 176);
  v23 = *(_QWORD *)(v3 + 200);
  v24 = *(_QWORD *)(v3 + 192);
  v21 = *(_QWORD *)(v3 + 216);
  v22 = *(_QWORD *)(v3 + 208);
  v19 = *(_QWORD *)(v3 + 232);
  v20 = *(_QWORD *)(v3 + 224);
  v17 = *(_QWORD *)(v3 + 248);
  v18 = *(_QWORD *)(v3 + 240);
  v15 = *(_QWORD *)(v3 + 264);
  v16 = *(_QWORD *)(v3 + 256);
  v13 = *(_QWORD *)(v3 + 280);
  v14 = *(_QWORD *)(v3 + 272);
  swift_task_dealloc(v2);
  v10 = *(_QWORD *)(v3 + 320);
  if (v0)
  {
    sub_100008030(*(_QWORD *)(v3 + 320), &qword_100636688);
    return swift_task_switch(sub_10015D028, 0, 0);
  }
  else
  {
    v12 = *(_QWORD *)(v3 + 288);
    sub_100008030(*(_QWORD *)(v3 + 320), &qword_100636688);
    swift_task_dealloc(v10);
    *(_BYTE *)v12 = v40;
    *(_QWORD *)(v12 + 8) = v4;
    *(_QWORD *)(v12 + 16) = v5;
    *(_QWORD *)(v12 + 24) = v6;
    *(_QWORD *)(v12 + 32) = v7;
    *(_QWORD *)(v12 + 40) = v8;
    *(_QWORD *)(v12 + 48) = v9;
    *(_QWORD *)(v12 + 56) = v39;
    *(_QWORD *)(v12 + 64) = v38;
    *(_QWORD *)(v12 + 72) = v37;
    *(_QWORD *)(v12 + 80) = v36;
    *(_QWORD *)(v12 + 88) = v35;
    *(_QWORD *)(v12 + 96) = v34;
    *(_QWORD *)(v12 + 104) = v33;
    *(_QWORD *)(v12 + 112) = v32;
    *(_QWORD *)(v12 + 120) = v31;
    *(_QWORD *)(v12 + 128) = v30;
    *(_BYTE *)(v12 + 136) = v29;
    *(_QWORD *)(v12 + 144) = v28;
    *(_QWORD *)(v12 + 152) = v27;
    *(_QWORD *)(v12 + 160) = v26;
    *(_QWORD *)(v12 + 168) = v25;
    *(_QWORD *)(v12 + 176) = v24;
    *(_QWORD *)(v12 + 184) = v23;
    *(_QWORD *)(v12 + 192) = v22;
    *(_QWORD *)(v12 + 200) = v21;
    *(_QWORD *)(v12 + 208) = v20;
    *(_QWORD *)(v12 + 216) = v19;
    *(_QWORD *)(v12 + 224) = v18;
    *(_QWORD *)(v12 + 232) = v17;
    *(_QWORD *)(v12 + 240) = v16;
    *(_QWORD *)(v12 + 248) = v15;
    *(_QWORD *)(v12 + 256) = v14;
    *(_QWORD *)(v12 + 264) = v13;
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_10015D028()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015D05C(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 288) = a1;
  v4 = a1 + *(int *)(sub_100004828(&qword_100636680) + 64);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v5 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 296) = v5;
  *v5 = v2;
  v5[1] = sub_10015D0EC;
  return v7(v2 + 16, v4);
}

uint64_t sub_10015D0EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(*v1 + 296);
  v3 = *v1;
  v4 = *(_BYTE *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 40);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(_QWORD *)(v3 + 64);
  v38 = *(_QWORD *)(v3 + 80);
  v39 = *(_QWORD *)(v3 + 72);
  v36 = *(_QWORD *)(v3 + 96);
  v37 = *(_QWORD *)(v3 + 88);
  v34 = *(_QWORD *)(v3 + 112);
  v35 = *(_QWORD *)(v3 + 104);
  v32 = *(_QWORD *)(v3 + 128);
  v33 = *(_QWORD *)(v3 + 120);
  v30 = *(_QWORD *)(v3 + 144);
  v31 = *(_QWORD *)(v3 + 136);
  v29 = *(_BYTE *)(v3 + 152);
  v27 = *(_QWORD *)(v3 + 168);
  v28 = *(_QWORD *)(v3 + 160);
  v25 = *(_QWORD *)(v3 + 184);
  v26 = *(_QWORD *)(v3 + 176);
  v23 = *(_QWORD *)(v3 + 200);
  v24 = *(_QWORD *)(v3 + 192);
  v21 = *(_QWORD *)(v3 + 216);
  v22 = *(_QWORD *)(v3 + 208);
  v19 = *(_QWORD *)(v3 + 232);
  v20 = *(_QWORD *)(v3 + 224);
  v17 = *(_QWORD *)(v3 + 248);
  v18 = *(_QWORD *)(v3 + 240);
  v15 = *(_QWORD *)(v3 + 264);
  v16 = *(_QWORD *)(v3 + 256);
  v13 = *(_QWORD *)(v3 + 280);
  v14 = *(_QWORD *)(v3 + 272);
  swift_task_dealloc(v2);
  if (!v0)
  {
    v11 = *(_QWORD *)(v3 + 288);
    *(_BYTE *)v11 = v4;
    *(_QWORD *)(v11 + 8) = v5;
    *(_QWORD *)(v11 + 16) = v6;
    *(_QWORD *)(v11 + 24) = v7;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v9;
    *(_QWORD *)(v11 + 48) = v10;
    *(_QWORD *)(v11 + 56) = v39;
    *(_QWORD *)(v11 + 64) = v38;
    *(_QWORD *)(v11 + 72) = v37;
    *(_QWORD *)(v11 + 80) = v36;
    *(_QWORD *)(v11 + 88) = v35;
    *(_QWORD *)(v11 + 96) = v34;
    *(_QWORD *)(v11 + 104) = v33;
    *(_QWORD *)(v11 + 112) = v32;
    *(_QWORD *)(v11 + 120) = v31;
    *(_QWORD *)(v11 + 128) = v30;
    *(_BYTE *)(v11 + 136) = v29;
    *(_QWORD *)(v11 + 144) = v28;
    *(_QWORD *)(v11 + 152) = v27;
    *(_QWORD *)(v11 + 160) = v26;
    *(_QWORD *)(v11 + 168) = v25;
    *(_QWORD *)(v11 + 176) = v24;
    *(_QWORD *)(v11 + 184) = v23;
    *(_QWORD *)(v11 + 192) = v22;
    *(_QWORD *)(v11 + 200) = v21;
    *(_QWORD *)(v11 + 208) = v20;
    *(_QWORD *)(v11 + 216) = v19;
    *(_QWORD *)(v11 + 224) = v18;
    *(_QWORD *)(v11 + 232) = v17;
    *(_QWORD *)(v11 + 240) = v16;
    *(_QWORD *)(v11 + 248) = v15;
    *(_QWORD *)(v11 + 256) = v14;
    *(_QWORD *)(v11 + 264) = v13;
  }
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10015D2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD, uint64_t);
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[24];
  char v120[24];
  char v121[24];
  char v122[24];
  char v123[24];
  char v124[16];
  char v125[8];
  _QWORD v126[5];
  _QWORD v127[5];

  v117 = a8;
  v110 = a7;
  v109 = a4;
  v107 = a3;
  v114 = a11;
  v15 = sub_100004828(&qword_100636698);
  __chkstk_darwin(v15);
  v118 = (uint64_t)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_1006335E0);
  __chkstk_darwin(v17);
  v108 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DIPError.Code(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v20);
  v22 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004828(&qword_100636688);
  __chkstk_darwin(v23);
  v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Logger(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v27 = (char *)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004828(&qword_100636690);
  __chkstk_darwin(v28);
  v30 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for DIPSignpost(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v35 = (char *)&v103 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = swift_projectBox(a2);
  v113 = swift_projectBox(v114);
  static DaemonSignposts.tiberiusGetVerificationResultFetchAssessment.getter();
  v114 = v35;
  DIPSignpost.init(_:)(v33);
  v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator);
  if (v37)
  {
    v38 = (uint64_t)v30;
    v39 = swift_retain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator));
    v40 = defaultLogger()(v39);
    v41 = Logger.logObject.getter(v40);
    v42 = v37;
    v43 = static os_log_type_t.debug.getter(v41);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "AssessDuringProofingODNator present, fetching from it", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v111 + 8))(v27, v112);
    v45 = type metadata accessor for DIPPregeneratedAssessment(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v25, 1, 1, v45);
    v46 = type metadata accessor for AugmentedProfile(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v22, 1, 1, v46);
    sub_10027295C((uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t)v25, (uint64_t)v22, v38);
    sub_100008030((uint64_t)v22, &qword_100636668);
    sub_100008030((uint64_t)v25, &qword_100636688);
    v47 = type metadata accessor for ODNAssessmentResult(0);
    v48 = *(_QWORD *)(v47 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v38, 0, 1, v47);
    swift_beginAccess(v36, v127, 1, 0);
    sub_100184E1C(v38, v36, &qword_100636690);
    v49 = swift_beginAccess(v36, v120, 0, 0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v48 + 48))(v36, 1, v47, v49)
      || *(_QWORD *)(v36 + 120) == 1)
    {
      swift_release(v42);
    }
    else
    {
      v60 = (uint64_t *)(v107 + 16);
      v61 = (uint64_t)v108;
      DIPError.Code.init(rawValue:)(*(_QWORD *)(v36 + 88));
      v62 = v105;
      v63 = v106;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v61, 1, v106) == 1)
      {
        v64 = *(void (**)(char *, _QWORD, uint64_t))(v62 + 104);
        v65 = v104;
        v64(v104, enum case for DIPError.Code.odnErrorGettingAssessment(_:), v63);
        sub_100008030(v61, &qword_1006335E0);
      }
      else
      {
        v66 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
        v65 = v104;
        v66(v104, v61, v63);
      }
      v67 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v68 = type metadata accessor for DIPError(0);
      v69 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v70 = swift_allocError(v68, v69, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x656D737365737341, 0xEF726F727245746ELL, 0, v65, 0, v67, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000028, 0x800000010054E370, 2615);
      swift_release(v42);
      swift_beginAccess(v60, v119, 1, 0);
      v71 = *v60;
      *v60 = v70;
      swift_errorRelease(v71);
    }
  }
  else
  {
    v127[3] = &type metadata for DIPClientGUID;
    v127[4] = &off_10060B980;
    v50 = swift_allocObject(&unk_100609178, 152, 7);
    v126[4] = &off_10060B980;
    v127[0] = v50;
    v51 = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(v50 + 112) = *(_OWORD *)(a5 + 96);
    *(_OWORD *)(v50 + 128) = v51;
    *(_QWORD *)(v50 + 144) = *(_QWORD *)(a5 + 128);
    v52 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(v50 + 48) = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(v50 + 64) = v52;
    v53 = *(_OWORD *)(a5 + 80);
    *(_OWORD *)(v50 + 80) = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(v50 + 96) = v53;
    v54 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(v50 + 16) = *(_OWORD *)a5;
    *(_OWORD *)(v50 + 32) = v54;
    v126[3] = &type metadata for DIPClientGUID;
    v55 = swift_allocObject(&unk_100609178, 152, 7);
    v126[0] = v55;
    v56 = *(_OWORD *)(a6 + 112);
    *(_OWORD *)(v55 + 112) = *(_OWORD *)(a6 + 96);
    *(_OWORD *)(v55 + 128) = v56;
    *(_QWORD *)(v55 + 144) = *(_QWORD *)(a6 + 128);
    v57 = *(_OWORD *)(a6 + 48);
    *(_OWORD *)(v55 + 48) = *(_OWORD *)(a6 + 32);
    *(_OWORD *)(v55 + 64) = v57;
    v58 = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(v55 + 80) = *(_OWORD *)(a6 + 64);
    *(_OWORD *)(v55 + 96) = v58;
    v59 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(v55 + 16) = *(_OWORD *)a6;
    *(_OWORD *)(v55 + 32) = v59;
    sub_100183760((_QWORD *)a5);
    sub_100183760((_QWORD *)a6);
    sub_10015DD6C(v109, 0, 0, 0, (uint64_t)v127, (uint64_t)v126, v110, 0, (uint64_t)v30, 0, 0);
    sub_100008030((uint64_t)v126, &qword_100636670);
    sub_100008030((uint64_t)v127, &qword_100636670);
    v47 = type metadata accessor for ODNAssessmentResult(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v30, 0, 1, v47);
    swift_beginAccess(v36, v127, 1, 0);
    sub_100184E1C((uint64_t)v30, v36, &qword_100636690);
  }
  swift_beginAccess(v36, v126, 0, 0);
  type metadata accessor for ODNAssessmentResult(0);
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
  v74 = 0;
  v75 = 0;
  if (!v72(v36, 1, v47))
  {
    v74 = *(_QWORD *)(v36 + 56);
    v75 = *(_QWORD *)(v36 + 64);
    v73 = swift_bridgeObjectRetain(v75);
  }
  v112 = v74;
  v76 = 1;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v72)(v36, 1, v47, v73))
  {
    v111 = 0;
    v110 = 0;
    v109 = 0;
    v108 = 0;
    v107 = 0;
    v106 = 0;
    v77 = 0;
  }
  else
  {
    v78 = *(_QWORD *)(v36 + 96);
    v79 = *(_QWORD *)(v36 + 104);
    v80 = *(_QWORD *)(v36 + 112);
    v76 = *(_QWORD *)(v36 + 120);
    v81 = *(_QWORD *)(v36 + 128);
    v82 = *(_QWORD *)(v36 + 136);
    v77 = *(_BYTE *)(v36 + 144);
    v111 = *(_QWORD *)(v36 + 88);
    v110 = v78;
    v109 = v79;
    v108 = (char *)v80;
    v107 = v81;
    v106 = v82;
    sub_100183888(v111, v78, v79, v80, v76, v81, v82);
  }
  if (v72(v36, 1, v47))
  {
    v105 = 0;
    v83 = 0;
  }
  else
  {
    v83 = *(_QWORD *)(v36 + 224);
    v105 = *(_QWORD *)(v36 + 216);
    swift_bridgeObjectRetain(v83);
  }
  v84 = swift_beginAccess(v36, v125, 0, 0);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v72)(v36, 1, v47, v84))
  {
    v85 = type metadata accessor for AssessmentAdditionalInfo(0);
    v86 = v118;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v118, 1, 1, v85);
  }
  else
  {
    v86 = v118;
    sub_100038B24(v36 + *(int *)(v47 + 44), v118, &qword_100636698);
  }
  v87 = v117;
  swift_beginAccess(v117 + 16, v124, 1, 0);
  v88 = *(_QWORD *)(v87 + 24);
  *(_QWORD *)(v87 + 16) = v112;
  *(_QWORD *)(v87 + 24) = v75;
  swift_bridgeObjectRelease(v88);
  swift_beginAccess(a9 + 16, v123, 1, 0);
  v89 = *(_QWORD *)(a9 + 16);
  v90 = *(_QWORD *)(a9 + 24);
  v91 = *(_QWORD *)(a9 + 32);
  v92 = *(_QWORD *)(a9 + 40);
  v93 = *(_QWORD *)(a9 + 48);
  v94 = *(_QWORD *)(a9 + 56);
  v95 = *(_QWORD *)(a9 + 64);
  v96 = v110;
  *(_QWORD *)(a9 + 16) = v111;
  *(_QWORD *)(a9 + 24) = v96;
  v97 = v108;
  *(_QWORD *)(a9 + 32) = v109;
  *(_QWORD *)(a9 + 40) = v97;
  v98 = v107;
  *(_QWORD *)(a9 + 48) = v76;
  *(_QWORD *)(a9 + 56) = v98;
  *(_QWORD *)(a9 + 64) = v106;
  *(_BYTE *)(a9 + 72) = v77;
  sub_100183918(v89, v90, v91, v92, v93, v94, v95);
  swift_beginAccess(a10 + 16, v122, 1, 0);
  v99 = *(_QWORD *)(a10 + 24);
  *(_QWORD *)(a10 + 16) = v105;
  *(_QWORD *)(a10 + 24) = v83;
  swift_bridgeObjectRelease(v99);
  v100 = v113;
  swift_beginAccess(v113, v121, 1, 0);
  sub_100184E1C(v86, v100, &qword_100636698);
  v101 = v114;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v101, v116);
}

uint64_t sub_10015DD6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _BYTE v93[40];
  _BYTE v94[48];
  _OWORD v95[5];

  v12 = v11;
  v91 = a8;
  v84 = a7;
  v86 = a6;
  v85 = a5;
  v89 = a3;
  v88 = a2;
  v87 = a1;
  v83 = a11;
  v90 = a10;
  v15 = type metadata accessor for DIPError.Code(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004828(&qword_100636668);
  __chkstk_darwin(v19);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger(0);
  v23 = __chkstk_darwin(v22);
  v92 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v80 - v26;
  v28 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v28)
  {
    v35 = v25;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v37, v38, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054DA80, 0, v18, 0, v36, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000009BLL, 0x800000010054E210, 2766);
    v41 = swift_willThrow(v40);
LABEL_11:
    v53 = v92;
    defaultLogger()(v41);
    DIPRecordError(_:message:log:)(v39, 0xD000000000000019, 0x800000010054E2B0, v53);
    swift_errorRelease(v39);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v53, v22);
    v54 = type metadata accessor for ODNAssessmentResult(0);
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_QWORD *)(a9 + 32) = 0;
    v55 = a9 + *(int *)(v54 + 44);
    v56 = type metadata accessor for AssessmentAdditionalInfo(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
    *(_OWORD *)(a9 + 104) = 0u;
    *(_OWORD *)(a9 + 88) = 0u;
    *(_OWORD *)(a9 + 72) = 0u;
    *(_OWORD *)(a9 + 56) = 0u;
    *(_OWORD *)(a9 + 40) = 0u;
    *(_QWORD *)(a9 + 128) = 0;
    *(_QWORD *)(a9 + 136) = 0;
    *(_QWORD *)(a9 + 120) = 1;
    *(_BYTE *)(a9 + 144) = 0;
    *(_OWORD *)(a9 + 152) = 0u;
    *(_OWORD *)(a9 + 168) = 0u;
    *(_OWORD *)(a9 + 184) = 0u;
    *(_OWORD *)(a9 + 200) = 0u;
    *(_OWORD *)(a9 + 216) = 0u;
    return result;
  }
  v29 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager);
  if (!v29)
  {
    v35 = v25;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    v42 = v28;
    v43 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v44 = type metadata accessor for DIPError(0);
    v45 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v44, v45, 0, 0);
    v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054E2D0, 0, v18, 0, v43, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000009BLL, 0x800000010054E210, 2770);
    swift_willThrow(v46);

    goto LABEL_11;
  }
  v82 = v22;
  v30 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService);
  if (!v30)
  {
    v35 = v25;
    v47 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DIPError.Code.unexpectedDaemonState(_:), v15);
    v48 = v28;
    swift_retain(v47);
    v49 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v50 = type metadata accessor for DIPError(0);
    v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v50, v51, 0, 0);
    v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010054E2F0, 0, v18, 0, v49, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000009BLL, 0x800000010054E210, 2774);
    swift_willThrow(v52);

    v41 = swift_release(v47);
    v22 = v82;
    goto LABEL_11;
  }
  v31 = v91;
  if (!v91)
  {
    v67 = v29;
    v68 = v28;
    swift_retain(v67);
    v69 = v30;
    v70 = v87;
    swift_retain(v87);
    v80 = v68;
    v71 = objc_msgSend(v68, "serviceName");
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v90 = v72;

    LODWORD(v83) = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
    v73 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
    v81 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
    v74 = *(void **)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper);
    v75 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
    sub_100038B24(v85, (uint64_t)v94, &qword_100636670);
    sub_100038B24(v86, (uint64_t)v93, &qword_100636670);
    v76 = type metadata accessor for DIPODNator(0);
    memset(v95, 0, sizeof(v95));
    swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
    v77 = v74;
    swift_retain(v67);
    v78 = v69;
    swift_bridgeObjectRetain(v73);
    v79 = sub_100263458(v70, v91, v90, v83, v81, v73, v75, v74, v67, v78, (uint64_t)v94, (uint64_t)v93, (uint64_t *)v95, 0);
    sub_10026553C(v88, v89, v84, a9);

    swift_release(v67);
    return swift_release(v79);
  }
  v32 = v29;
  if (a4 && *(_QWORD *)(a4 + 16))
  {
    v33 = v28;
    swift_retain(v32);
    v34 = v30;
    swift_retain(v31);
    sub_100271ED4(v88, v89, a4, a9);

LABEL_20:
    swift_release(v32);

    return swift_release(v31);
  }
  v58 = v25;
  v59 = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
  v92 = v28;
  swift_retain(v32);
  v34 = v30;
  v60 = swift_retain(v31);
  if (v59 != 1 || !v90)
  {
    sub_100271ED4(0, 0, 0, a9);

    goto LABEL_20;
  }
  v61 = defaultLogger()(v60);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "fetching assessment based on attributes/bindings", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v82);
  v65 = v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile;
  swift_beginAccess(v12 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile, v95, 0, 0);
  sub_100038B24(v65, (uint64_t)v21, &qword_100636668);
  v66 = v91;
  sub_10027295C(v90, v84, (uint64_t)v21, a9);
  swift_release(v32);

  swift_release(v66);
  return sub_100008030((uint64_t)v21, &qword_100636668);
}

uint64_t sub_10015E700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  id v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  id v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  _BOOL4 v112;
  uint8_t *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  _QWORD *v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  id v167;
  uint64_t v168;
  char *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t result;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  void (*v185)(char *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  int64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int64_t v220;
  uint64_t v221;
  unint64_t v222;
  int64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  _BOOL8 v232;
  uint64_t v233;
  char v234;
  unint64_t v235;
  char v236;
  unint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  NSObject *v265;
  uint64_t v266;
  os_log_type_t v267;
  uint8_t *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  __int128 *v286;
  id v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  void (*v292)(char *, char *, uint64_t);
  void (*v293)(char *, uint64_t, uint64_t, uint64_t);
  Swift::OpaquePointer v294;
  uint64_t v295;
  int64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  id v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  char *v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  int64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  char *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;

  v343 = a8;
  v327 = a7;
  v358 = a5;
  v359 = a6;
  v357 = a4;
  v353 = a2;
  v354 = a1;
  v324 = a9;
  v335 = sub_100004828(&qword_1006365B8);
  v334 = *(_QWORD *)(v335 - 8);
  __chkstk_darwin(v335);
  v322 = (char *)&v288 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SharingRegistrationResponse(0);
  __chkstk_darwin(v16);
  v323 = (char *)&v288 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828((uint64_t *)&unk_1006365C0);
  __chkstk_darwin(v18);
  v336 = (char *)&v288 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v331 = type metadata accessor for UUID(0);
  v329 = *(_QWORD *)(v331 - 8);
  __chkstk_darwin(v331);
  v328 = (char *)&v288 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v332 = type metadata accessor for HardwareAttestationType(0);
  v330 = *(_QWORD *)(v332 - 8);
  __chkstk_darwin(v332);
  v342 = (char *)&v288 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v333 = type metadata accessor for SharingRegistrationRequest(0);
  __chkstk_darwin(v333);
  v344 = (char *)&v288 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = type metadata accessor for Logger(0);
  v337 = *(_QWORD *)(v338 - 8);
  v23 = __chkstk_darwin(v338);
  v345 = (char *)&v288 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v311 = (char *)&v288 - v26;
  __chkstk_darwin(v25);
  v314 = (char *)&v288 - v27;
  v28 = type metadata accessor for DIPError.Code(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v288 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DIPError(0);
  v313 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v312 = (char *)&v288 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = type metadata accessor for DispatchTime(0);
  v320 = *(_QWORD *)(v321 - 8);
  v34 = __chkstk_darwin(v321);
  v318 = (char *)&v288 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v319 = (char *)&v288 - v36;
  v315 = sub_100004828(&qword_100634158);
  v310 = *(_QWORD *)(v315 - 8);
  v37 = __chkstk_darwin(v315);
  v309 = (char *)&v288 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v316 = (char *)&v288 - v39;
  v40 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v40);
  v42 = (char *)&v288 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v341 = type metadata accessor for RecipientEncryptionCertificate(0);
  v347 = *(_QWORD *)(v341 - 8);
  v43 = __chkstk_darwin(v341);
  v317 = (char *)&v288 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v362 = v44;
  __chkstk_darwin(v43);
  v356 = (char *)&v288 - v45;
  v46 = sub_100004828(&qword_1006365D0);
  v47 = __chkstk_darwin(v46);
  v326 = (uint64_t)&v288 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v308 = (char *)&v288 - v50;
  __chkstk_darwin(v49);
  v360 = (char *)&v288 - v51;
  v52 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v52);
  v54 = (char *)&v288 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = type metadata accessor for DIPSignpost(0);
  v339 = *(_QWORD *)(v340 - 8);
  __chkstk_darwin(v340);
  v355 = (char *)&v288 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100004828(&qword_1006364F0);
  v57 = __chkstk_darwin(v56);
  v346 = (uint64_t *)((char *)&v288 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v57);
  v60 = (char *)&v288 - v59;
  sub_100035DE8(a3, (uint64_t)&v288 - v59, type metadata accessor for VerifiedClaim);
  v61 = v357;
  v62 = v358;
  v63 = v359;
  v64 = v363;
  v352 = v56;
  v65 = &v60[*(int *)(v56 + 48)];
  *(_QWORD *)v65 = v357;
  *((_QWORD *)v65 + 1) = v62;
  *((_QWORD *)v65 + 2) = v63;
  v66 = *(void **)(v64 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v66)
  {
    v94 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DIPError.Code.unexpectedDaemonState(_:), v28);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    v95 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v96 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v32, v96, 0, 0);
    v97 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054DA80, 0, v31, 0, v95, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2807);
    swift_willThrow(v97);
    v98 = &qword_1006364F0;
    v99 = (uint64_t)v60;
    return sub_100008030(v99, v98);
  }
  v303 = v29;
  v304 = v28;
  v305 = v32;
  v306 = v31;
  v325 = v60;
  v67 = *(void **)(v64 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  if (!v67)
  {
    v100 = v306;
    v101 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v303 + 104))(v306, enum case for DIPError.Code.unexpectedDaemonState(_:), v304);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    v102 = v66;
    v103 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v104 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v305, v104, 0, 0);
    v105 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054DDA0, 0, v100, 0, v103, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2810);
    swift_willThrow(v105);

    v98 = &qword_1006364F0;
    v99 = (uint64_t)v325;
    return sub_100008030(v99, v98);
  }
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  v300 = v66;
  v301 = v67;
  static DaemonSignposts.getVerificationResultSharingRegistration.getter();
  DIPSignpost.init(_:)(v54);
  v68 = sub_100004828(&qword_1006365D8);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
  v70(v360, 1, 1, v68);
  v71 = *(_QWORD *)(v354 + 24);
  v302 = v71;
  if (!v71)
  {
    if ((sub_1000556BC() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v347 + 56))(v42, 1, 1, v341);
      v76 = v361;
      goto LABEL_21;
    }
LABEL_22:
    v359 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v72 = v341;
  if ((*(_BYTE *)(v71 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) & 1) == 0)
  {
    v73 = sub_1000556BC();
    v71 = v302;
    if ((v73 & 1) == 0)
      goto LABEL_22;
  }
  sub_100038B24(v71 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, (uint64_t)v42, &qword_1006322E0);
  v74 = v347;
  v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v347 + 48))(v42, 1, v72);
  v76 = v361;
  if (v75 == 1)
  {
LABEL_21:
    sub_100008030((uint64_t)v42, &qword_1006322E0);
    v359 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v293 = v70;
  v307 = a12;
  v294._rawValue = a11;
  v77 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v78 = v356;
  v77(v356, v42, v72);
  if (*(_BYTE *)(v302 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) != 1)
  {
    v359 = _swiftEmptyArrayStorage;
    v180 = v306;
    v181 = sub_1000556BC();
    if ((v181 & 1) == 0)
    {
LABEL_105:
      (*(void (**)(char *, uint64_t))(v347 + 8))(v78, v72);
      goto LABEL_23;
    }
    goto LABEL_48;
  }
  v292 = v77;
  v290 = v69;
  v291 = v68;
  v79 = *(_QWORD *)(v302 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
  v80 = *(_QWORD *)(v79 + 16);
  v81 = v362;
  if (v80)
  {
    swift_bridgeObjectRetain(v79);
    v358 = v82;
    v83 = (_BYTE *)(v82 + 64);
    v84 = _swiftEmptyArrayStorage;
    v85 = v346;
    do
    {
      v89 = *v83;
      if ((*v83 & 1) != 0)
      {
        v90 = (_QWORD *)*((_QWORD *)v83 - 4);
        v91 = *((_QWORD *)v83 - 3);
        v76 = *((_QWORD *)v83 - 2);
        v92 = *((_QWORD *)v83 - 1);
        swift_bridgeObjectRetain(v92);
        swift_bridgeObjectRetain(v91);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
        *(_QWORD *)&v364 = v84;
        v359 = v90;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000E42E8(0, v84[2] + 1, 1);
          v84 = (_QWORD *)v364;
        }
        v87 = v84[2];
        v86 = v84[3];
        if (v87 >= v86 >> 1)
        {
          sub_1000E42E8(v86 > 1, v87 + 1, 1);
          v84 = (_QWORD *)v364;
        }
        v84[2] = v87 + 1;
        v88 = &v84[5 * v87];
        v88[4] = v359;
        v88[5] = v91;
        v88[6] = v76;
        v88[7] = v92;
        *((_BYTE *)v88 + 64) = v89;
        v81 = v362;
        v85 = v346;
      }
      v83 += 40;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease(v358);
    v78 = v356;
  }
  else
  {
    v84 = _swiftEmptyArrayStorage;
    v85 = v346;
  }
  v198 = v361;
  v199 = sub_10040C3DC((uint64_t)v85, v353, (uint64_t)v84);
  v361 = v198;
  v202 = v307;
  if (v198)
  {
    swift_release(v84);

    (*(void (**)(char *, uint64_t))(v347 + 8))(v78, v341);
    (*(void (**)(char *, uint64_t))(v339 + 8))(v355, v340);
    sub_100008030((uint64_t)v325, &qword_1006364F0);
    return sub_100008030((uint64_t)v360, &qword_1006365D0);
  }
  v203 = v199;
  v204 = v200;
  v205 = v201;
  swift_release(v84);
  v206 = (_QWORD *)((char *)v85 + *(int *)(v352 + 48));
  *v206 = v203;
  v206[1] = v204;
  v289 = v206;
  v206[2] = v205;
  v207 = *(_QWORD *)(v203 + 64);
  v295 = v203 + 64;
  v208 = 1 << *(_BYTE *)(v203 + 32);
  v209 = -1;
  if (v208 < 64)
    v209 = ~(-1 << v208);
  v210 = v209 & v207;
  v296 = (unint64_t)(v208 + 63) >> 6;
  swift_bridgeObjectRetain(v203);
  v212 = 0;
  v213 = (char *)&_swiftEmptyDictionarySingleton;
  v299 = v203;
  while (1)
  {
    if (v210)
    {
      v348 = (v210 - 1) & v210;
      v349 = v212;
      v219 = __clz(__rbit64(v210)) | (v212 << 6);
      goto LABEL_79;
    }
    v220 = v212 + 1;
    v221 = v347;
    if (__OFADD__(v212, 1))
    {
      __break(1u);
LABEL_114:
      (*(void (**)(char *, uint64_t))(v347 + 8))(v213, v341);
LABEL_24:
      v106 = (unint64_t)v345;
      v361 = v76;
      v85 = a14;
      if (qword_10062F560 != -1)
        goto LABEL_112;
      goto LABEL_25;
    }
    if (v220 >= v296)
      goto LABEL_90;
    v222 = *(_QWORD *)(v295 + 8 * v220);
    v223 = v212 + 1;
    if (!v222)
    {
      v223 = v212 + 2;
      if (v212 + 2 >= v296)
        goto LABEL_90;
      v222 = *(_QWORD *)(v295 + 8 * v223);
      if (!v222)
      {
        v223 = v212 + 3;
        if (v212 + 3 >= v296)
          goto LABEL_90;
        v222 = *(_QWORD *)(v295 + 8 * v223);
        if (!v222)
        {
          v223 = v212 + 4;
          if (v212 + 4 >= v296)
            goto LABEL_90;
          v222 = *(_QWORD *)(v295 + 8 * v223);
          if (!v222)
          {
            v223 = v212 + 5;
            if (v212 + 5 >= v296)
              goto LABEL_90;
            v222 = *(_QWORD *)(v295 + 8 * v223);
            if (!v222)
            {
              v224 = v212 + 6;
              if (v212 + 6 < v296)
              {
                v222 = *(_QWORD *)(v295 + 8 * v224);
                if (v222)
                {
                  v223 = v212 + 6;
                  goto LABEL_78;
                }
                while (1)
                {
                  v223 = v224 + 1;
                  if (__OFADD__(v224, 1))
                    break;
                  if (v223 >= v296)
                    goto LABEL_90;
                  v222 = *(_QWORD *)(v295 + 8 * v223);
                  ++v224;
                  if (v222)
                    goto LABEL_78;
                }
                __break(1u);
LABEL_116:
                v211 = sub_1000E2ED0(v224 > 1, (int64_t)v85, 1, v211);
LABEL_104:
                v180 = v306;
                v68 = v291;
                v69 = v290;
                *(_QWORD *)(v211 + 16) = v85;
                v281 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
                v359 = (_QWORD *)v211;
                (*(void (**)(unint64_t, char *, unint64_t))(v76 + 32))(v211 + v281 + *(_QWORD *)(v76 + 72) * v204, v309, v81);
                (*(void (**)(char *, unint64_t))(v76 + 8))(v316, v81);
                swift_bridgeObjectRelease(v365);
                sub_100008030((uint64_t)v346, &qword_1006364F0);
                v72 = v341;
                v77 = v292;
                v181 = sub_1000556BC();
                if ((v181 & 1) == 0)
                  goto LABEL_105;
LABEL_48:
                v292 = v77;
                v290 = v69;
                v291 = v68;
                v182 = v363;
                v183 = v318;
                static DispatchTime.now()(v181);
                v184 = v319;
                + infix(_:_:)(v183, 0.2);
                v185 = *(void (**)(char *, uint64_t))(v320 + 8);
                v186 = v321;
                v185(v183, v321);
                v187 = OS_dispatch_semaphore.wait(timeout:)(v184) & 1;
                v185(v184, v186);
                v188 = static DispatchTimeoutResult.== infix(_:_:)(v187, 1);
                if ((v188 & 1) != 0)
                {
                  (*(void (**)(char *, _QWORD, uint64_t))(v303 + 104))(v180, enum case for DIPError.Code.timeoutTaskDeviceInfo(_:), v304);
                  v189 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
                  v190 = v312;
                  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010054E0B0, 0, v180, 0, v189, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2852);
                  v191 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                  v192 = v305;
                  v193 = swift_allocError(v305, v191, 0, 0);
                  v194 = v313;
                  v196 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v313 + 16))(v195, v190, v192);
                  v197 = v314;
                  defaultLogger()(v196);
                  DIPRecordError(_:message:log:)(v193, 0, 0xE000000000000000, v197);
                  (*(void (**)(char *, uint64_t))(v337 + 8))(v197, v338);
                  (*(void (**)(char *, uint64_t))(v194 + 8))(v190, v192);
                  (*(void (**)(char *, uint64_t))(v347 + 8))(v78, v341);
                  swift_errorRelease(v193);
                }
                else
                {
                  v254 = (uint64_t *)(v182
                                   + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
                  v255 = *(_QWORD *)(v182
                                   + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData
                                   + 56);
                  if (v255 != 1)
                  {
                    v257 = *v254;
                    v256 = v254[1];
                    v258 = v254[2];
                    v259 = v254[3];
                    v260 = v254[4];
                    v261 = v254[5];
                    v262 = v254[6];
                    sub_100182CE4(*v254, v256, v258, v259, v260, v261, v262);
                    sub_100182CB4(v257, v256, v258, v259, v260, v261, v262, v255);
                    v188 = sub_1001825D8(v257, v256, v258, v259, v260, v261, v262, v255);
                    if (v256 != 1)
                    {
                      v273 = v347;
                      (*(void (**)(char *, char *, uint64_t))(v347 + 16))(v317, v356, v341);
                      sub_10002581C(v307, (uint64_t)&v364);
                      v274 = *(unsigned __int8 *)(v273 + 80);
                      v275 = (v274 + 72) & ~v274;
                      v362 = (v362 + v275 + 7) & 0xFFFFFFFFFFFFFFF8;
                      v276 = (char *)swift_allocObject(&unk_100608FC0, v362 + 40, v274 | 7);
                      *((_QWORD *)v276 + 2) = v257;
                      *((_QWORD *)v276 + 3) = v256;
                      v277 = v341;
                      *((_QWORD *)v276 + 4) = v258;
                      *((_QWORD *)v276 + 5) = v259;
                      *((_QWORD *)v276 + 6) = v260;
                      *((_QWORD *)v276 + 7) = v261;
                      *((_QWORD *)v276 + 8) = v262;
                      v292(&v276[v275], v317, v277);
                      sub_100008018(&v364, (uint64_t)&v276[v362]);
                      v278 = v291;
                      v279 = v308;
                      v280 = v361;
                      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD0000000000000A8, 0x800000010054DFD0, 2856, &unk_1006365F0, v276, v291);
                      v76 = v280;
                      if (v280)
                      {
                        swift_release(v276);

                        (*(void (**)(char *, uint64_t))(v347 + 8))(v356, v277);
                        swift_bridgeObjectRelease(v359);
                        (*(void (**)(char *, uint64_t))(v339 + 8))(v355, v340);
                        v272 = (uint64_t)v325;
LABEL_100:
                        sub_100008030(v272, &qword_1006364F0);
                        goto LABEL_44;
                      }
                      swift_release(v276);
                      v293(v279, 0, 1, v278);
                      v282 = (uint64_t)v279;
                      v85 = v360;
                      sub_100184E1C(v282, (uint64_t)v360, &qword_1006365D0);
                      v283 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v290 + 48))(v85, 1, v278);
                      v204 = (unint64_t)v325;
                      a10 = (uint64_t)v355;
                      if (v283)
                      {
                        (*(void (**)(char *, uint64_t))(v347 + 8))(v356, v341);
                        goto LABEL_24;
                      }
                      goto LABEL_109;
                    }
                  }
                  v263 = v311;
                  v264 = defaultLogger()(v188);
                  v265 = Logger.logObject.getter(v264);
                  v267 = static os_log_type_t.info.getter(v265, v266);
                  if (os_log_type_enabled(v265, v267))
                  {
                    v268 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v268 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v265, v267, "Did not receive anything for DeviceInfo, skipping", v268, 2u);
                    swift_slowDealloc(v268, -1, -1);
                  }

                  (*(void (**)(char *, uint64_t))(v337 + 8))(v263, v338);
                  (*(void (**)(char *, uint64_t))(v347 + 8))(v356, v341);
                }
LABEL_23:
                v76 = v361;
                goto LABEL_24;
              }
LABEL_90:
              swift_release(v203);
              v365 = (uint64_t)v213;
              v243 = v361;
              sub_10013F060(v289[1], &v365);
              v244 = v365;
              v245 = v317;
              v246 = v341;
              (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v317, v78, v341);
              sub_10002581C(v202, (uint64_t)&v364);
              v247 = *(unsigned __int8 *)(v221 + 80);
              v248 = v221;
              v249 = (v247 + 24) & ~v247;
              v250 = (v81 + v249 + 7) & 0xFFFFFFFFFFFFFFF8;
              v251 = swift_allocObject(&unk_100608FE8, v250 + 40, v247 | 7);
              *(_QWORD *)(v251 + 16) = v244;
              v292((char *)(v251 + v249), v245, v246);
              sub_100008018(&v364, v251 + v250);
              swift_bridgeObjectRetain(v244);
              v81 = v315;
              v252 = v316;
              runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD0000000000000A8, 0x800000010054DFD0, 2836, &unk_100636600, v251, v315);
              if (v243)
              {
                swift_release(v251);

                (*(void (**)(char *, uint64_t))(v248 + 8))(v78, v246);
                (*(void (**)(char *, uint64_t))(v339 + 8))(v355, v340);
                v253 = (uint64_t)v325;
              }
              else
              {
                swift_release(v251);
                JWSSignedJSON.setCertificateChain(_:)(v294);
                v269 = (uint64_t)v325;
                v270 = v355;
                if (!v271)
                {
                  v361 = 0;
                  v76 = v310;
                  (*(void (**)(char *, char *, unint64_t))(v310 + 16))(v309, v252, v81);
                  v211 = sub_1000E2ED0(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
                  v204 = *(_QWORD *)(v211 + 16);
                  v224 = *(_QWORD *)(v211 + 24);
                  v85 = (_QWORD *)(v204 + 1);
                  if (v204 < v224 >> 1)
                    goto LABEL_104;
                  goto LABEL_116;
                }

                (*(void (**)(char *, unint64_t))(v310 + 8))(v252, v81);
                (*(void (**)(char *, uint64_t))(v347 + 8))(v78, v341);
                (*(void (**)(char *, uint64_t))(v339 + 8))(v270, v340);
                v253 = v269;
              }
              sub_100008030(v253, &qword_1006364F0);
              swift_bridgeObjectRelease(v365);
              v272 = (uint64_t)v346;
              goto LABEL_100;
            }
          }
        }
      }
    }
LABEL_78:
    v348 = (v222 - 1) & v222;
    v349 = v223;
    v219 = __clz(__rbit64(v222)) + (v223 << 6);
LABEL_79:
    v225 = *(_QWORD *)(v203 + 56) + 96 * v219;
    v204 = *(_QWORD *)v225;
    v85 = *(_QWORD **)(v225 + 8);
    v226 = *(_QWORD *)(v225 + 24);
    v227 = *(_QWORD *)(v225 + 32);
    v76 = *(_QWORD *)(v225 + 40);
    v350 = *(_QWORD *)(v225 + 16);
    v351 = v227;
    LODWORD(v352) = *(unsigned __int8 *)(v225 + 48);
    v228 = *(_QWORD *)(v225 + 64);
    v353 = *(_QWORD *)(v225 + 56);
    v229 = *(_QWORD *)(v225 + 80);
    v357 = *(_QWORD *)(v225 + 72);
    v358 = v229;
    LODWORD(v359) = *(unsigned __int8 *)(v225 + 88);
    swift_bridgeObjectRetain(v229);
    swift_bridgeObjectRetain_n(v85, 2);
    swift_bridgeObjectRetain(v226);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v228);
    a10 = swift_isUniquelyReferenced_nonNull_native(v213);
    *(_QWORD *)&v364 = v213;
    v106 = sub_1004A8604(v204, (uint64_t)v85);
    v231 = *((_QWORD *)v213 + 2);
    v232 = (v230 & 1) == 0;
    v233 = v231 + v232;
    if (__OFADD__(v231, v232))
    {
      __break(1u);
LABEL_109:
      JWSSignedJSON.setCertificateChain(_:)(v294);
      v76 = v284;
      v213 = v356;
      if (v284)
      {

        (*(void (**)(char *, uint64_t))(v347 + 8))(v213, v341);
        swift_bridgeObjectRelease(v359);
        (*(void (**)(uint64_t, uint64_t))(v339 + 8))(a10, v340);
        sub_100008030(v204, &qword_1006364F0);
        v98 = &qword_1006365D0;
        v99 = (uint64_t)v85;
        return sub_100008030(v99, v98);
      }
      goto LABEL_114;
    }
    v234 = v230;
    if (*((_QWORD *)v213 + 3) >= v233)
    {
      if ((a10 & 1) != 0)
      {
        if ((v230 & 1) != 0)
          goto LABEL_57;
      }
      else
      {
        sub_10012AE14();
        v213 = (char *)v364;
        if ((v234 & 1) != 0)
          goto LABEL_57;
      }
    }
    else
    {
      sub_10012630C(v233, a10);
      v213 = (char *)v364;
      v235 = sub_1004A8604(v204, (uint64_t)v85);
      if ((v234 & 1) != (v236 & 1))
      {
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v106 = v235;
      if ((v234 & 1) != 0)
      {
LABEL_57:
        v214 = *((_QWORD *)v213 + 7) + 96 * v106;
        v215 = *(_QWORD *)(v214 + 8);
        v216 = *(_QWORD *)(v214 + 24);
        v217 = *(_QWORD *)(v214 + 40);
        v297 = *(_QWORD *)(v214 + 64);
        v298 = *(_QWORD *)(v214 + 80);
        swift_bridgeObjectRelease(v215);
        swift_bridgeObjectRelease(v217);
        swift_bridgeObjectRelease(v216);
        swift_bridgeObjectRelease(v297);
        swift_bridgeObjectRelease(v298);
        *(_QWORD *)v214 = v204;
        *(_QWORD *)(v214 + 8) = v85;
        *(_QWORD *)(v214 + 16) = v350;
        *(_QWORD *)(v214 + 24) = v226;
        *(_QWORD *)(v214 + 32) = v351;
        *(_QWORD *)(v214 + 40) = v76;
        *(_BYTE *)(v214 + 48) = v352;
        *(_QWORD *)(v214 + 56) = v353;
        *(_QWORD *)(v214 + 64) = v228;
        v218 = v358;
        *(_QWORD *)(v214 + 72) = v357;
        *(_QWORD *)(v214 + 80) = v218;
        *(_BYTE *)(v214 + 88) = (_BYTE)v359;
        goto LABEL_58;
      }
    }
    *(_QWORD *)&v213[8 * (v106 >> 6) + 64] |= 1 << v106;
    v237 = (unint64_t *)(*((_QWORD *)v213 + 6) + 16 * v106);
    *v237 = v204;
    v237[1] = (unint64_t)v85;
    v238 = *((_QWORD *)v213 + 7) + 96 * v106;
    *(_QWORD *)v238 = v204;
    *(_QWORD *)(v238 + 8) = v85;
    *(_QWORD *)(v238 + 16) = v350;
    *(_QWORD *)(v238 + 24) = v226;
    *(_QWORD *)(v238 + 32) = v351;
    *(_QWORD *)(v238 + 40) = v76;
    *(_BYTE *)(v238 + 48) = v352;
    *(_QWORD *)(v238 + 56) = v353;
    *(_QWORD *)(v238 + 64) = v228;
    v239 = v358;
    *(_QWORD *)(v238 + 72) = v357;
    *(_QWORD *)(v238 + 80) = v239;
    *(_BYTE *)(v238 + 88) = (_BYTE)v359;
    v240 = *((_QWORD *)v213 + 2);
    v241 = __OFADD__(v240, 1);
    v242 = v240 + 1;
    if (v241)
      break;
    *((_QWORD *)v213 + 2) = v242;
    swift_bridgeObjectRetain(v85);
LABEL_58:
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v85);
    v78 = v356;
    v81 = v362;
    v202 = v307;
    v203 = v299;
    v210 = v348;
    v212 = v349;
  }
  __break(1u);
LABEL_112:
  swift_once(&qword_10062F560, sub_10041FF94);
LABEL_25:
  v108 = objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState");
  defaultLogger()(v108);
  v109 = swift_bridgeObjectRetain_n(a10, 2);
  v110 = Logger.logObject.getter(v109);
  v111 = static os_log_type_t.debug.getter(v110);
  v112 = os_log_type_enabled(v110, v111);
  v362 = (unint64_t)v85;
  v358 = a10;
  if (v112)
  {
    v113 = (uint8_t *)swift_slowAlloc(12, -1);
    v114 = v108;
    v115 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v364 = v115;
    *(_DWORD *)v113 = 136446210;
    if (a10)
      v116 = v343;
    else
      v116 = 1701736302;
    if (a10)
      v117 = a10;
    else
      v117 = 0xE400000000000000;
    swift_bridgeObjectRetain(a10);
    v365 = sub_1000E3AC8(v116, v117, (uint64_t *)&v364);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v365, &v366, v113 + 4);
    swift_bridgeObjectRelease(v117);
    v85 = (_QWORD *)v362;
    swift_bridgeObjectRelease_n(a10, 2);
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "share register is using guid %{public}s", v113, 0xCu);
    swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
    v118 = v115;
    v108 = v114;
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v113, -1, -1);

    (*(void (**)(char *, uint64_t))(v337 + 8))(v345, v338);
  }
  else
  {
    swift_bridgeObjectRelease_n(a10, 2);

    (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v106, v338);
  }
  v119 = (uint64_t)v344;
  v120 = v342;
  v121 = v327;
  v122 = v85[3];
  v123 = v85[4];
  sub_10000806C(v85, v122);
  dispatch thunk of IdentityKey.attestationType()(v122, v123, v124);
  if (v302)
  {
    v125 = *(char **)(v302 + 24);
    v353 = *(_QWORD *)(v302 + 16);
    v356 = v125;
    swift_bridgeObjectRetain(v125);
  }
  else
  {
    v356 = (char *)0xEB00000000454C42;
    v353 = 0x414C494156414E55;
  }
  v357 = a13;
  v126 = (unint64_t)v108 - 1;
  v127 = sub_100004828(&qword_1006365E0);
  v128 = *(_QWORD *)(type metadata accessor for VerifiedClaimPresentment(0) - 8);
  v129 = *(_QWORD *)(v128 + 72);
  v130 = *(unsigned __int8 *)(v128 + 80);
  v131 = (v130 + 32) & ~v130;
  v132 = swift_allocObject(v127, v131 + v129, v130 | 7);
  *(_OWORD *)(v132 + 16) = xmmword_10051FFB0;
  sub_100035DE8(v121, v132 + v131, type metadata accessor for VerifiedClaimPresentment);
  v133 = 0;
  v134 = (uint64_t *)(v363 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  v135 = *(_QWORD *)(v363 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56);
  if (v135 != 1)
  {
    v352 = v126;
    v137 = v134[5];
    v136 = v134[6];
    v139 = v134[3];
    v138 = v134[4];
    v141 = v134[1];
    v140 = v134[2];
    v142 = *v134;
    sub_100182CB4(*v134, v141, v140, v139, v138, v137, v136, v135);
    swift_bridgeObjectRetain(v135);
    v143 = v139;
    v120 = v342;
    v144 = v138;
    v119 = (uint64_t)v344;
    v145 = v137;
    v126 = v352;
    sub_1001825D8(v142, v141, v140, v143, v144, v145, v136, v135);
    v133 = v135;
  }
  v146 = v326;
  v147 = sub_100038B24((uint64_t)v360, v326, &qword_1006365D0);
  v148 = v328;
  v149 = UUID.init()(v147);
  v150 = UUID.uuidString.getter(v149);
  v152 = v151;
  (*(void (**)(char *, uint64_t))(v329 + 8))(v148, v331);
  *(_QWORD *)v119 = 0;
  *(_QWORD *)(v119 + 8) = 0xE000000000000000;
  *(_QWORD *)(v119 + 16) = v150;
  *(_QWORD *)(v119 + 24) = v152;
  *(_OWORD *)(v119 + 32) = 0u;
  *(_OWORD *)(v119 + 48) = 0u;
  *(_OWORD *)(v119 + 64) = 0u;
  v153 = (int *)v333;
  (*(void (**)(uint64_t, char *, uint64_t))(v330 + 32))(v119 + *(int *)(v333 + 24), v120, v332);
  v154 = (_QWORD *)(v119 + v153[7]);
  v155 = v356;
  *v154 = v353;
  v154[1] = v155;
  v156 = (uint64_t *)(v119 + v153[8]);
  v157 = v358;
  *v156 = v343;
  v156[1] = v157;
  *(_QWORD *)(v119 + v153[9]) = v132;
  *(_QWORD *)(v119 + v153[10]) = v359;
  v158 = (_OWORD *)(v119 + v153[11]);
  *v158 = 0u;
  v158[1] = 0u;
  *(_QWORD *)(v119 + v153[12]) = v133;
  sub_1000A1F54(v146, v119 + v153[13], &qword_1006365D0);
  *(_BYTE *)(v119 + v153[14]) = v126 < 2;
  *(_QWORD *)&v364 = 0;
  v159 = v334;
  v160 = (uint64_t)v336;
  v161 = v335;
  v162 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v334 + 56))(v336, 1, 1, v335);
  __chkstk_darwin(v162);
  v163 = v301;
  *(&v288 - 10) = v164;
  *(&v288 - 9) = (uint64_t)v163;
  v165 = v354;
  *(&v288 - 8) = v119;
  *(&v288 - 7) = v165;
  v166 = v362;
  *(&v288 - 6) = v357;
  *(&v288 - 5) = v166;
  v285 = v160;
  v286 = &v364;
  v167 = v300;
  v287 = v300;
  swift_bridgeObjectRetain(v157);
  v168 = v361;
  DIPRetrier.sync(_:)(sub_100182D38, &v288 - 12);
  if (v168)
  {
    (*(void (**)(char *, uint64_t))(v339 + 8))(v355, v340);
    sub_100008030((uint64_t)v325, &qword_1006364F0);

    goto LABEL_43;
  }
  v169 = v355;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v160, 1, v161);
  v171 = v159;
  v172 = (uint64_t)v325;
  if (v170)
  {
    v173 = v306;
    (*(void (**)(char *, _QWORD, uint64_t))(v303 + 104))(v306, enum case for DIPError.Code.serverResponseInconsistent(_:), v304);
    v174 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v175 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v305, v175, 0, 0);
    v176 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x800000010054E080, 0, v173, 0, v174, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2955);
    swift_willThrow(v176);

    (*(void (**)(char *, uint64_t))(v339 + 8))(v169, v340);
    sub_100008030(v172, &qword_1006364F0);
LABEL_43:
    sub_100008030(v160, (uint64_t *)&unk_1006365C0);
    swift_errorRelease(v364);
    sub_100035DAC(v119, type metadata accessor for SharingRegistrationRequest);
LABEL_44:
    v98 = &qword_1006365D0;
    v99 = (uint64_t)v360;
    return sub_100008030(v99, v98);
  }
  else
  {
    v178 = v322;
    (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v322, v160, v161);
    v179 = (uint64_t)v323;
    JWSSignedJSON.payload.getter(v161);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v178, v161);

    (*(void (**)(char *, uint64_t))(v339 + 8))(v169, v340);
    sub_100008030(v172, &qword_1006364F0);
    sub_100038AE0(v179, v324, type metadata accessor for SharingRegistrationResponse);
    sub_100008030(v160, (uint64_t *)&unk_1006365C0);
    swift_errorRelease(v364);
    sub_100035DAC(v119, type metadata accessor for SharingRegistrationRequest);
    return sub_100008030((uint64_t)v360, &qword_1006365D0);
  }
}

uint64_t sub_100160970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch(sub_10016098C, 0, 0);
}

uint64_t sub_10016098C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v1 = (_QWORD *)swift_task_alloc(async function pointer to createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)[1]);
  *(_QWORD *)(v0 + 96) = v1;
  v2 = sub_100004828(&qword_100636480);
  sub_100182850();
  sub_1001828D4();
  *v1 = v0;
  v1[1] = sub_100160A48;
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(*(_QWORD *)(v0 + 64), v0 + 56, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v0 + 16, 0, 0, v2);
}

uint64_t sub_100160A48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1 + 16;
  v3 = *(_QWORD *)(*v1 + 96);
  v4 = *v1;
  *(_QWORD *)(v4 + 104) = v0;
  swift_task_dealloc(v3);
  sub_100008030(v2, &qword_100636598);
  if (v0)
    return swift_task_switch(sub_100160AC8, 0, 0);
  else
    return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100160AC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100160AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  return swift_task_switch(sub_100160AF0, 0, 0);
}

uint64_t sub_100160AF0()
{
  uint64_t v0;
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(__int128 **)(v0 + 120);
  v3 = v1[1];
  v2 = v1[2];
  v4 = *v1;
  *(_QWORD *)(v0 + 64) = *((_QWORD *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 16) = v4;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_QWORD *)(v0 + 104) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)[1]);
  *(_QWORD *)(v0 + 144) = v5;
  sub_100182FE4();
  sub_100183028();
  *v5 = v0;
  v5[1] = sub_100160BAC;
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(*(_QWORD *)(v0 + 112), v0 + 16, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v0 + 72, 0, 0, &type metadata for AccountAssessmentDeviceData);
}

uint64_t sub_100160BAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1 + 72;
  v3 = *(_QWORD *)(*v1 + 144);
  v4 = *v1;
  *(_QWORD *)(v4 + 152) = v0;
  swift_task_dealloc(v3);
  sub_100008030(v2, &qword_100636598);
  if (v0)
    return swift_task_switch(sub_100160C2C, 0, 0);
  else
    return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100160C2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100160C38@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, _QWORD *a9, void *a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char v83[16];
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD v92[3];
  char v93[24];

  v81 = a6;
  v82 = (char *)a7;
  v79 = a2;
  v80 = a5;
  v78 = a8;
  v77 = type metadata accessor for DIPError.Code(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v76 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v74 - 8);
  v15 = __chkstk_darwin(v74);
  v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v73 - v18;
  v20 = sub_100004828(&qword_1006335E0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v73 - v24;
  v84 = v79;
  v85 = a3;
  v86 = a1;
  v87 = a4;
  v88 = v80;
  v89 = v81;
  v90 = (uint64_t)v82;
  v91 = a9;
  DIPRetrier.sync(_:)(sub_10018306C, v83);
  v81 = a4;
  v82 = v23;
  v80 = v19;
  v73 = v14;
  v79 = v17;
  v26 = v77;
  v27 = v76;
  v28 = *a9;
  if (*a9)
  {
    swift_getErrorValue(v28, v93, v92);
    v29 = v92[1];
    v30 = v92[2];
    swift_errorRetain(v28);
    Error.dipErrorCode.getter(v29, v30);
    v31 = v75;
    v32 = v27;
    v33 = v28;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v25, 1, v26) == 1)
      goto LABEL_3;
    v47 = v28;
    v48 = (uint64_t)v82;
    sub_100038B24((uint64_t)v25, (uint64_t)v82, &qword_1006335E0);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 88))(v48, v26);
    if ((_DWORD)v49 != enum case for DIPError.Code.topekaInvalidNonce(_:))
    {
      if ((_DWORD)v49 == enum case for DIPError.Code.topekaIdentityNotFound(_:))
      {
        v53 = v80;
        v54 = defaultLogger()(v49);
        v55 = Logger.logObject.getter(v54);
        v57 = static os_log_type_t.info.getter(v55, v56);
        if (os_log_type_enabled(v55, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v57, "identity not found, clearing local cache", v58, 2u);
          v59 = v58;
          v53 = v80;
          swift_slowDealloc(v59, -1, -1);
        }

        v60 = *(void (**)(char *, uint64_t))(v73 + 8);
        v61 = v53;
        v62 = v74;
        v60(v61, v74);
        v63 = objc_msgSend(a10, "serviceName");
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        sub_1001589C4(v64, v66, 0);
        v67 = swift_bridgeObjectRelease(v66);
        v68 = v79;
        defaultLogger()(v67);
        DIPRecordError(_:message:log:)(v47, 0xD000000000000023, 0x800000010054E110, v68);
        v60(v68, v62);
        (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v32, enum case for DIPError.Code.topekaCanNotResume(_:), v26);
        v69 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v70 = type metadata accessor for DIPError(0);
        v71 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v38 = swift_allocError(v70, v71, 0, 0);
        v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010054E140, 0, v32, 0, v69, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2938);
        swift_willThrow(v72);
        v40 = v47;
        goto LABEL_4;
      }
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v48, v26);
LABEL_3:
      v34 = *a9;
      (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v32, enum case for DIPError.Code.internalError(_:), v26);
      swift_errorRetain(v34);
      v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v36 = type metadata accessor for DIPError(0);
      v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v38 = swift_allocError(v36, v37, 0, 0);
      v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x800000010054E0E0, v34, v32, 0, v35, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000A8, 0x800000010054DFD0, 2940);
      swift_willThrow(v39);
      v40 = v33;
LABEL_4:
      swift_errorRelease(v40);
      sub_100008030((uint64_t)v25, &qword_1006335E0);
      v41 = v78;
      *v78 = v38;
      v42 = enum case for DIPRetryResult.stopWithError(_:);
      v43 = type metadata accessor for DIPRetryResult(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v41, v42, v43);
    }
    sub_100055D34((uint64_t)_swiftEmptyArrayStorage);
    v50 = v78;
    *v78 = v33;
    v51 = enum case for DIPRetryResult.retryWithError(_:);
    v52 = type metadata accessor for DIPRetryResult(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v50, v51, v52);
    return sub_100008030((uint64_t)v25, &qword_1006335E0);
  }
  else
  {
    v45 = enum case for DIPRetryResult.stop(_:);
    v46 = type metadata accessor for DIPRetryResult(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v78, v45, v46);
  }
}

uint64_t sub_1001612B8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, void *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(void);
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  void *object;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, char *, uint64_t);
  char *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  Swift::OpaquePointer v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140[3];
  _OWORD v141[2];
  uint64_t v142;
  uint64_t v143;

  v118 = a7;
  v126 = a6;
  v128._rawValue = a5;
  v133 = a4;
  v134 = a8;
  v135 = 0;
  v12 = sub_100004828(&qword_100636620);
  __chkstk_darwin(v12);
  v120 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for DIPError(0);
  v119 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v121 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828((uint64_t *)&unk_1006365C0);
  __chkstk_darwin(v15);
  v123 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DIPError.Code(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SharingRegistrationRequest(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100004828(&qword_100636628);
  v136 = *(_QWORD *)(v139 - 8);
  v21 = __chkstk_darwin(v139);
  v129 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v125 = (char *)&v117 - v24;
  v124 = v25;
  __chkstk_darwin(v23);
  v27 = (char *)&v117 - v26;
  v29 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
  v28 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
  v122 = a1;
  v30 = &a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v31 = *(_QWORD *)&a1[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  v32 = *((_QWORD *)v30 + 1);
  v33 = a2[1];
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *a2 = v31;
  a2[1] = v32;
  sub_1002555A4(v29, v28, (uint64_t *)v141);
  v137 = v141[1];
  v138 = v141[0];
  v34 = v142;
  v35 = v143;
  sub_10008EF5C(a2[4], a2[5], a2[6], a2[7], a2[8], a2[9]);
  v36 = v137;
  *((_OWORD *)a2 + 2) = v138;
  *((_OWORD *)a2 + 3) = v36;
  a2[8] = v34;
  a2[9] = v35;
  v37 = v27;
  swift_bridgeObjectRelease(v28);
  sub_100035DE8((uint64_t)a2, (uint64_t)v20, type metadata accessor for SharingRegistrationRequest);
  v38 = sub_100004790(&qword_100636630, type metadata accessor for SharingRegistrationRequest, (uint64_t)&unk_10052B63C);
  v39 = sub_100004790(&qword_100636638, type metadata accessor for SharingRegistrationRequest, (uint64_t)&unk_10052B614);
  JWSSignedJSON.init(payload:)(v20, v18, v38, v39);
  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    v40 = v131;
    v41 = v132;
    v42 = v130;
    v43 = static Array._allocateBufferUninitialized(minimumCapacity:)(18, &type metadata for UInt8);
    *(_QWORD *)(v43 + 16) = 18;
    *(_QWORD *)(v43 + 40) = 0;
    *(_WORD *)(v43 + 48) = 0;
    *(_QWORD *)(v43 + 32) = 0;
    v44 = SecRandomCopyBytes(kSecRandomDefault, 0x12uLL, (void *)(v43 + 32));
    if (v44)
    {
      v45 = v44;
      swift_bridgeObjectRelease(v43);
      v46 = v42;
      (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v42, enum case for DIPError.Code.systemSecError(_:), v41);
      v47 = sub_100004828((uint64_t *)&unk_1006325A0);
      v48 = sub_100004828((uint64_t *)&unk_100633440);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(_QWORD *)(v49 + 72);
      v51 = *(unsigned __int8 *)(v49 + 80);
      v52 = (v51 + 32) & ~v51;
      v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
      *(_OWORD *)(v53 + 16) = xmmword_10051FFB0;
      v54 = v53 + v52;
      v55 = v54 + *(int *)(v48 + 48);
      v56 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v57 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v54, v56, v57);
      *(_QWORD *)(v55 + 24) = &type metadata for Int32;
      *(_DWORD *)v55 = v45;
      v58 = sub_10011D314(v53);
      v59 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v60 = swift_allocError(v127, v59, 0, 0);
      v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054E180, 0, v46, 0, v58, 0xD000000000000048, 0x800000010054E1A0, 0xD00000000000001ALL, 0x800000010054E1F0, 35);
      swift_willThrow(v61);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v37, v139);
LABEL_11:
      v78 = v134;
      *v134 = v60;
      v79 = enum case for DIPRetryResult.stopWithError(_:);
      v80 = type metadata accessor for DIPRetryResult(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v78, v79, v80);
    }
    v66 = sub_100111D08(v43);
    v68 = v67;
    swift_bridgeObjectRelease(v43);
    v69 = Data.base64EncodedString(options:)(0);
    object = v69._object;
    sub_100007F8C(v66, v68);
    v71 = v139;
    JWSSignedJSON.setSalt(_:)(v69);
  }
  else
  {
    v62 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
    v63 = v135;
    v64 = sub_10014CAA4(v133, 0, v62);
    v60 = v63;
    if (v63)
    {
      (*(void (**)(char *, uint64_t))(v136 + 8))(v37, v139);
      swift_bridgeObjectRelease(v62);
      goto LABEL_11;
    }
    v72 = (uint64_t)v64;
    object = v65;
    swift_bridgeObjectRelease(v62);
    v73._countAndFlagsBits = v72;
    v73._object = object;
    v71 = v139;
    JWSSignedJSON.setNonce(_:)(v73);
  }
  v74 = v136;
  swift_bridgeObjectRelease(object);
  JWSSignedJSON.setCertificateChain(_:)(v128);
  v60 = v75;
  v76 = v129;
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v71);
    goto LABEL_11;
  }
  v77 = v126;
  JWSSignedJSON.setKid(_:)(v126, v71);
  *(_QWORD *)&v137 = *(_QWORD *)(v74 + 16);
  ((void (*)(char *, char *, uint64_t))v137)(v76, v37, v71);
  sub_10002581C(v77, (uint64_t)v140);
  v82 = v37;
  v83 = *(unsigned __int8 *)(v74 + 80);
  v84 = (v83 + 16) & ~v83;
  v131 = v124 + 7;
  v85 = (v84 + v124 + 7) & 0xFFFFFFFFFFFFFFF8;
  v132 = v83 | 7;
  v86 = swift_allocObject(&unk_100609010, v85 + 40, v83 | 7);
  v87 = v86 + v84;
  v88 = *(void (**)(uint64_t, char *, uint64_t))(v74 + 32);
  v88(v87, v76, v71);
  sub_100008018(v140, v86 + v85);
  v89 = v125;
  v135 = 0x800000010054DFD0;
  v136 = 0x800000010054D670;
  *(_QWORD *)&v138 = 0xD0000000000000A8;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD0000000000000A8, 0x800000010054DFD0, 2898, &unk_100636648, v86, v71);
  v128._rawValue = a9;
  v90 = *(void (**)(char *, uint64_t))(v74 + 8);
  v90(v82, v71);
  swift_release(v86);
  v88((uint64_t)v82, v89, v71);
  v91 = v129;
  v130 = v82;
  ((void (*)(char *, char *, uint64_t))v137)(v129, v82, v71);
  v92 = (v83 + 24) & ~v83;
  v93 = (v92 + v131) & 0xFFFFFFFFFFFFFFF8;
  v94 = swift_allocObject(&unk_100609038, v93 + 8, v132);
  v95 = v122;
  *(_QWORD *)(v94 + 16) = v122;
  v88(v94 + v92, v91, v71);
  v96 = v133;
  *(_QWORD *)(v94 + v93) = v133;
  v97 = v95;
  swift_retain(v96);
  v98 = sub_100004828(&qword_1006365B8);
  v99 = (uint64_t)v123;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, v136, v138, v135, 2909, &unk_100636658, v94, v98);
  swift_release(v94);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v99, 0, 1, v98);
  sub_100184E1C(v99, v118, (uint64_t *)&unk_1006365C0);
  v100 = v134;
  v101 = v127;
  v102 = v130;
  v103 = v121;
  v104 = (uint64_t)v120;
  v105 = v119;
  v106 = *(_QWORD *)v128._rawValue;
  if (!*(_QWORD *)v128._rawValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v120, 1, 1, v127);
    goto LABEL_17;
  }
  *(_QWORD *)&v140[0] = *(_QWORD *)v128._rawValue;
  swift_errorRetain(v106);
  v107 = sub_100004828((uint64_t *)&unk_100633430);
  v108 = swift_dynamicCast(v104, v140, v107, v101, 6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v104, v108 ^ 1u, 1, v101);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v104, 1, v101) == 1)
  {
LABEL_17:
    v90(v102, v139);
    sub_100008030(v104, &qword_100636620);
LABEL_18:
    v114 = (unsigned int *)&enum case for DIPRetryResult.stop(_:);
    goto LABEL_19;
  }
  v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 32);
  v110 = v109(v103, v104, v101);
  if ((DIPError.isAuthorizationError.getter(v110) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v101);
    v90(v102, v139);
    goto LABEL_18;
  }
  v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v112 = swift_allocError(v101, v111, 0, 0);
  v109(v113, (uint64_t)v103, v101);
  v90(v102, v139);
  *v100 = v112;
  v114 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
LABEL_19:
  v115 = *v114;
  v116 = type metadata accessor for DIPRetryResult(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 104))(v100, v115, v116);
}

uint64_t sub_100161DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100161DF4, 0, 0);
}

uint64_t sub_100161DF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = sub_100004828(&qword_100636628);
  v0[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[6] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_10015247C;
  return JWSSignedJSON.sign(_:)(v0[4], v3);
}

uint64_t sub_100161E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_100639B0C);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_10001D0A0;
  return sub_100246490(a1, a3, a4);
}

uint64_t sub_100161EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  *(_QWORD *)(v9 + 1248) = v8;
  *(_QWORD *)(v9 + 1240) = v63;
  *(_QWORD *)(v9 + 1232) = v62;
  *(_QWORD *)(v9 + 1224) = v61;
  *(_QWORD *)(v9 + 1216) = v60;
  *(_OWORD *)(v9 + 1200) = v59;
  *(_QWORD *)(v9 + 1192) = v58;
  *(_QWORD *)(v9 + 1184) = v57;
  *(_QWORD *)(v9 + 1176) = v56;
  *(_QWORD *)(v9 + 1168) = v54;
  *(_QWORD *)(v9 + 1160) = v53;
  *(_QWORD *)(v9 + 1152) = a8;
  *(_QWORD *)(v9 + 1144) = a7;
  *(_QWORD *)(v9 + 1136) = a6;
  *(_QWORD *)(v9 + 1128) = a5;
  *(_QWORD *)(v9 + 1120) = a4;
  *(_QWORD *)(v9 + 1112) = a3;
  *(_QWORD *)(v9 + 1104) = a2;
  *(_QWORD *)(v9 + 1096) = a1;
  v10 = sub_100004828(&qword_100636528);
  *(_QWORD *)(v9 + 1256) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 1264) = v11;
  *(_QWORD *)(v9 + 1272) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IdentitySharingRequest(0);
  *(_QWORD *)(v9 + 1280) = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1288) = swift_task_alloc(v13);
  *(_QWORD *)(v9 + 1296) = swift_task_alloc(v13);
  v14 = sub_100004828((uint64_t *)&unk_1006364E0);
  *(_QWORD *)(v9 + 1304) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 1312) = v15;
  *(_QWORD *)(v9 + 1320) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization(0);
  *(_QWORD *)(v9 + 1328) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 1336) = v17;
  *(_QWORD *)(v9 + 1344) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828((uint64_t *)&unk_100636530);
  *(_QWORD *)(v9 + 1352) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 1360) = v19;
  *(_QWORD *)(v9 + 1368) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  *(_QWORD *)(v9 + 1376) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v9 + 1384) = v21;
  *(_QWORD *)(v9 + 1392) = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  *(_QWORD *)(v9 + 1400) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v9 + 1408) = v23;
  *(_QWORD *)(v9 + 1416) = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004828(&qword_1006336F8);
  *(_QWORD *)(v9 + 1424) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v9 + 1432) = v25;
  *(_QWORD *)(v9 + 1440) = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v9 + 1448) = v26;
  v27 = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v9 + 1456) = v27;
  *(_QWORD *)(v9 + 1464) = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004828(&qword_100634158);
  *(_QWORD *)(v9 + 1472) = v28;
  v29 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v9 + 1480) = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1488) = swift_task_alloc(v30);
  *(_QWORD *)(v9 + 1496) = swift_task_alloc(v30);
  v31 = type metadata accessor for EncryptedMessageEntity(0);
  *(_QWORD *)(v9 + 1504) = v31;
  v32 = *(_QWORD *)(v31 - 8);
  *(_QWORD *)(v9 + 1512) = v32;
  *(_QWORD *)(v9 + 1520) = swift_task_alloc((*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004828((uint64_t *)&unk_100636010);
  *(_QWORD *)(v9 + 1528) = v33;
  v34 = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v9 + 1536) = v34;
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1544) = swift_task_alloc(v35);
  *(_QWORD *)(v9 + 1552) = swift_task_alloc(v35);
  v36 = sub_100004828(&qword_100636540);
  *(_QWORD *)(v9 + 1560) = v36;
  v37 = *(_QWORD *)(v36 - 8);
  *(_QWORD *)(v9 + 1568) = v37;
  *(_QWORD *)(v9 + 1576) = swift_task_alloc((*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for RecipientEncryptionCertificate(0);
  *(_QWORD *)(v9 + 1584) = v38;
  v39 = *(_QWORD *)(v38 - 8);
  *(_QWORD *)(v9 + 1592) = v39;
  *(_QWORD *)(v9 + 1600) = swift_task_alloc((*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 1608) = v40;
  v41 = *(_QWORD *)(v40 - 8);
  *(_QWORD *)(v9 + 1616) = v41;
  *(_QWORD *)(v9 + 1624) = swift_task_alloc((*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v9 + 1632) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v42 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v9 + 1640) = v43;
  v44 = *(_QWORD *)(v43 - 8);
  *(_QWORD *)(v9 + 1648) = v44;
  *(_QWORD *)(v9 + 1656) = swift_task_alloc((*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004828((uint64_t *)&unk_100636548);
  *(_QWORD *)(v9 + 1664) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v45 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for SharingCredentials(0);
  *(_QWORD *)(v9 + 1672) = v46;
  v47 = *(_QWORD *)(v46 - 8);
  *(_QWORD *)(v9 + 1680) = v47;
  *(_QWORD *)(v9 + 1688) = swift_task_alloc((*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100004828(&qword_1006364F0);
  *(_QWORD *)(v9 + 1696) = v48;
  v49 = (*(_QWORD *)(*(_QWORD *)(v48 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1704) = swift_task_alloc(v49);
  *(_QWORD *)(v9 + 1712) = swift_task_alloc(v49);
  *(_QWORD *)(v9 + 1720) = swift_task_alloc(v49);
  *(_QWORD *)(v9 + 1728) = swift_task_alloc(v49);
  v50 = swift_task_alloc(v49);
  *(_QWORD *)(v9 + 1736) = v50;
  sub_100035DE8(v55, v50, type metadata accessor for VerifiedClaim);
  v51 = (_QWORD *)(v50 + *(int *)(v48 + 48));
  *v51 = v56;
  v51[1] = v57;
  v51[2] = v58;
  ((void (*)(uint64_t))swift_bridgeObjectRetain_n)(2);
  ((void (*)(uint64_t))swift_bridgeObjectRetain_n)(2);
  ((void (*)(uint64_t))swift_bridgeObjectRetain_n)(2);
  return swift_task_switch(sub_100162388, 0, 0);
}

uint64_t sub_100162388()
{
  const char *v0;
  uint8_t *v1;
  Swift::String *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  Swift::String *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL8 v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _QWORD *v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t);
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String **v217;
  const char *v218;
  char *v219;
  const char *v220;
  const char *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  Swift::OpaquePointer v249;
  uint64_t v250;
  int64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  unint64_t v261;
  unint64_t v262;
  _OWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278[17];

  v3 = (unint64_t)v0;
  v4 = *((_QWORD *)v0 + 156);
  v5 = *(void **)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  *((_QWORD *)v0 + 218) = v5;
  if (!v5)
  {
    v27 = *((_QWORD *)v0 + 217);
    v28 = *((_QWORD *)v0 + 183);
    v29 = *((_QWORD *)v0 + 182);
    v30 = *((_QWORD *)v0 + 181);
    v31 = *(_QWORD *)(v3 + 1184);
    v32 = *(_QWORD *)(v3 + 1176);
    swift_bridgeObjectRelease(*(_QWORD *)(v3 + 1192));
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.unexpectedDaemonState(_:), v30);
    v33 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054DA80, 0, v28, 0, v33, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000F7, 0x800000010054DCA0, 2964);
    swift_willThrow(v36);
LABEL_7:
    v48 = v27;
LABEL_52:
    sub_100008030(v48, &qword_1006364F0);
    v78 = *(_QWORD *)(v3 + 1736);
    v79 = v3;
    v80 = *(_QWORD *)(v3 + 1728);
    v81 = *(_QWORD *)(v79 + 1720);
    v82 = *(_QWORD *)(v79 + 1712);
    v83 = *(_QWORD *)(v79 + 1704);
    v84 = *(_QWORD *)(v79 + 1688);
    v85 = *(_QWORD *)(v79 + 1664);
    v86 = *(_QWORD *)(v79 + 1656);
    v87 = *(_QWORD *)(v79 + 1632);
    v88 = *(_QWORD *)(v79 + 1624);
    v230 = *(_QWORD *)(v79 + 1600);
    v231 = *(_QWORD *)(v79 + 1576);
    v233 = *(_QWORD *)(v79 + 1552);
    v234 = *(_QWORD *)(v79 + 1544);
    v236 = *(_QWORD *)(v79 + 1520);
    v238 = *(_QWORD *)(v79 + 1496);
    v240 = *(_QWORD *)(v79 + 1488);
    v242 = *(_QWORD *)(v79 + 1464);
    v246 = *(_QWORD *)(v79 + 1440);
    v247 = *(_QWORD *)(v79 + 1416);
    v250 = *(_QWORD *)(v79 + 1392);
    v252 = *(_QWORD *)(v79 + 1368);
    v255 = *(_QWORD *)(v79 + 1344);
    v259 = *(_QWORD *)(v79 + 1320);
    v264 = *(_QWORD *)(v79 + 1296);
    v268 = *(_QWORD *)(v79 + 1288);
    v273 = *(_QWORD *)(v79 + 1272);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v230);
    swift_task_dealloc(v231);
    swift_task_dealloc(v233);
    swift_task_dealloc(v234);
    swift_task_dealloc(v236);
    swift_task_dealloc(v238);
    swift_task_dealloc(v240);
    swift_task_dealloc(v242);
    swift_task_dealloc(v246);
    swift_task_dealloc(v247);
    swift_task_dealloc(v250);
    swift_task_dealloc(v252);
    swift_task_dealloc(v255);
    swift_task_dealloc(v259);
    swift_task_dealloc(v264);
    swift_task_dealloc(v268);
    swift_task_dealloc(v273);
    return (*(uint64_t (**)(void))(v79 + 8))();
  }
  v6 = *(_QWORD **)(v4 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  *((_QWORD *)v0 + 219) = v6;
  if (!v6)
  {
    v27 = *((_QWORD *)v0 + 217);
    v37 = *((_QWORD *)v0 + 183);
    v38 = *((_QWORD *)v0 + 182);
    v39 = *((_QWORD *)v0 + 181);
    v40 = *(_QWORD *)(v3 + 1192);
    v41 = *(_QWORD *)(v3 + 1184);
    v42 = *(_QWORD *)(v3 + 1176);
    v43 = v5;
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v42);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v38 + 104))(v37, enum case for DIPError.Code.unexpectedDaemonState(_:), v39);
    v44 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v45 = type metadata accessor for DIPError(0);
    v46 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v45, v46, 0, 0);
    v47 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010054DDA0, 0, v37, 0, v44, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000F7, 0x800000010054DCA0, 2967);
    swift_willThrow(v47);

    goto LABEL_7;
  }
  v7 = *((_QWORD *)v0 + 210);
  v8 = *((_QWORD *)v0 + 209);
  v9 = *((_QWORD *)v0 + 208);
  v10 = *(_QWORD *)(v3 + 1112);
  v11 = type metadata accessor for SharingRegistrationResponse(0);
  sub_100038B24(v10 + *(int *)(v11 + 24), v9, (uint64_t *)&unk_100636548);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8);
  v13 = *(_QWORD *)(v3 + 1664);
  v245 = (char *)v3;
  if (v12 == 1)
  {
    v271 = *(_QWORD *)(v3 + 1736);
    v14 = *(_QWORD *)(v3 + 1464);
    v15 = *(_QWORD *)(v3 + 1456);
    v16 = *(_QWORD *)(v3 + 1448);
    v17 = *(_QWORD *)(v3 + 1192);
    v18 = *(_QWORD *)(v3 + 1184);
    v19 = *(_QWORD *)(v3 + 1176);
    v20 = v5;
    v21 = v6;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v18);
    v22 = v19;
    v3 = (unint64_t)v245;
    swift_bridgeObjectRelease(v22);
    sub_100008030(v13, (uint64_t *)&unk_100636548);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.serverResponseInconsistent(_:), v16);
    v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v24 = type metadata accessor for DIPError(0);
    v25 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v24, v25, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000041, 0x800000010054DDC0, 0, v14, 0, v23, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000F7, 0x800000010054DCA0, 2971);
    swift_willThrow(v26);

LABEL_51:
    v48 = v271;
    goto LABEL_52;
  }
  v49 = *(_QWORD *)(v3 + 1632);
  v50 = *(_QWORD *)(v3 + 1104);
  sub_100038AE0(v13, *(_QWORD *)(v3 + 1688), type metadata accessor for SharingCredentials);
  v5;
  v6;
  static DaemonSignposts.getVerificationResultBuildSharingRequest.getter();
  DIPSignpost.init(_:)(v49);
  v51 = *(_QWORD *)(v50 + 24);
  *(_QWORD *)(v3 + 1760) = v51;
  v232 = v51;
  if (v51)
  {
    v6 = *(_QWORD **)(v51 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD);
    if (v6)
    {
      v2 = (Swift::String *)v6[2];
      if (v2)
      {
        v52 = (_OWORD *)(v3 + 288);
        v263 = (_OWORD *)(v3 + 544);
        v267 = (char *)(v3 + 672);
        v272 = (char *)(v3 + 416);
        swift_bridgeObjectRetain_n(v6, 2);
        v53 = 0;
        v3 = (unint64_t)"identityDocument";
        v54 = (uint64_t)"deviceConfidenceAssessment";
        while (1)
        {
          v55 = (_QWORD *)(*((_BYTE *)v6 + v53 + 32) ? 0x800000010053A8A0 : 0x800000010053A880);
          if (!*((_BYTE *)v6 + v53 + 32) || 0x800000010053A8A0 == 0x800000010053A880)
            break;
          isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, v55, 0xD00000000000001ALL, 0x800000010053A880, 0);
          swift_bridgeObjectRelease(v55);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v55 = v6;
LABEL_24:
            v60 = *((_QWORD *)v245 + 157);
            swift_bridgeObjectRelease(v55);
            JWSSignedJSON.payload.getter(v60);
            v61 = v52[7];
            isUniquelyReferenced_nonNull_native = (uint64_t)v272;
            *((_OWORD *)v272 + 6) = v52[6];
            *((_OWORD *)v272 + 7) = v61;
            v62 = v52[5];
            *((_OWORD *)v272 + 4) = v52[4];
            *((_OWORD *)v272 + 5) = v62;
            v63 = v52[1];
            *(_OWORD *)v272 = *v52;
            *((_OWORD *)v272 + 1) = v63;
            v64 = v52[3];
            *((_OWORD *)v272 + 2) = v52[2];
            *((_OWORD *)v272 + 3) = v64;
            v1 = (uint8_t *)*((_QWORD *)v245 + 62);
            v55 = (_QWORD *)*((_QWORD *)v245 + 63);
            swift_bridgeObjectRetain(v55);
            sub_100182C14(v272);
            if (v55)
            {
              v65 = sub_1000E3038(0, 1, 1, _swiftEmptyArrayStorage);
              v58 = v65[2];
              v66 = v65[3];
              isUniquelyReferenced_nonNull_native = v58 + 1;
              if (v58 >= v66 >> 1)
                goto LABEL_129;
              goto LABEL_26;
            }
            goto LABEL_27;
          }
          if (v2 == (Swift::String *)++v53)
          {
            swift_bridgeObjectRelease(v6);
LABEL_27:
            v228 = _swiftEmptyArrayStorage;
            goto LABEL_28;
          }
        }
        swift_bridgeObjectRelease(v6);
        goto LABEL_24;
      }
    }
    v54 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_49:
    v58 = **(_QWORD **)(v3 + 1688);
    v57 = *(_QWORD *)(v51 + 64);
    v59 = *(void **)(v51 + 72);
    swift_bridgeObjectRetain(v59);
  }
  else
  {
    v57 = 0x414C494156414E55;
    v58 = **(_QWORD **)(v3 + 1688);
    v54 = (uint64_t)_swiftEmptyArrayStorage;
    v59 = (void *)0xEB00000000454C42;
  }
  swift_bridgeObjectRetain(v58);
  *(_QWORD *)(v3 + 1776) = v54;
  *(_QWORD *)(v3 + 1768) = v58;
  sub_100177078(*(_QWORD **)(v3 + 1224), v58, v57, v59, *(_QWORD *)(v3 + 1120), *(void **)(v3 + 1128));
  v222 = (const char *)(v3 + 800);
  v221 = (const char *)(v3 + 1056);
  v220 = (const char *)(v3 + 1072);
  swift_bridgeObjectRelease(v59);
  v90 = v232;
  if (v232)
  {
    v91 = *(unsigned __int8 *)(v232 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID);
    if (v91 == 2)
    {
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v92 = 0;
      if ((v91 & 1) != 0)
      {
        v6 = *(_QWORD **)(v3 + 1160);
        v93 = 0;
        v94 = 0;
        v95 = 0;
        if (v6)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(v3 + 1160));
          defaultLogger()(v97);
          v98 = swift_bridgeObjectRetain_n(v6, 2);
          v99 = Logger.logObject.getter(v98);
          v100 = static os_log_type_t.debug.getter(v99);
          v101 = os_log_type_enabled(v99, v100);
          v102 = *(_QWORD *)(v3 + 1624);
          v103 = *(_QWORD *)(v3 + 1616);
          v58 = *(_QWORD *)(v3 + 1608);
          if (v101)
          {
            v267 = *(char **)(v3 + 1608);
            v274 = *(_QWORD *)(v3 + 1624);
            v104 = (const char *)(v3 + 1088);
            v2 = *(Swift::String **)(v3 + 1152);
            v1 = (uint8_t *)swift_slowAlloc(12, -1);
            v105 = swift_slowAlloc(32, -1);
            v278[0] = v105;
            *(_DWORD *)v1 = 136315138;
            v54 = (uint64_t)(v1 + 12);
            v58 = (unint64_t)(v1 + 4);
            swift_bridgeObjectRetain(v6);
            *((_QWORD *)v245 + 136) = sub_1000E3AC8((uint64_t)v2, (unint64_t)v6, v278);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v104, v245 + 1096, v1 + 4);
            swift_bridgeObjectRelease_n(v6, 3);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "share is using guid %s", v1, 0xCu);
            swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
            v106 = v105;
            v3 = (unint64_t)v245;
            swift_slowDealloc(v106, -1, -1);
            swift_slowDealloc(v1, -1, -1);

            (*(void (**)(uint64_t, char *))(v103 + 8))(v274, v267);
          }
          else
          {
            swift_bridgeObjectRelease_n(v6, 2);

            (*(void (**)(uint64_t, unint64_t))(v103 + 8))(v102, v58);
          }
          v95 = *(_QWORD *)(v3 + 1160);
          v94 = *(_QWORD *)(v3 + 1152);
          v93 = 0xE100000000000000;
          v92 = 49;
          v90 = v232;
        }
      }
      else
      {
        v93 = 0;
        v94 = 0;
        v95 = 0;
      }
    }
    if ((*(_BYTE *)(v90 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid) & 1) != 0)
    {
      v107 = v92;
      v108 = v95;
      v58 = v93;
      v109 = v94;
      swift_bridgeObjectRetain(*(_QWORD *)(v3 + 1144));
      v94 = v109;
      v93 = v58;
      v95 = v108;
      v92 = v107;
      v229 = *(_QWORD *)(v3 + 1136);
    }
    else
    {
      v229 = 0;
      v96 = 0;
    }
  }
  else
  {
    v229 = 0;
    v96 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
  }
  v219 = (char *)(v3 + 16);
  v225 = v93;
  v226 = v95;
  *(_QWORD *)(v3 + 1816) = v95;
  v223 = v96;
  v224 = v94;
  *(_QWORD *)(v3 + 1808) = v94;
  *(_QWORD *)(v3 + 1800) = v93;
  v227 = v92;
  *(_QWORD *)(v3 + 1792) = v92;
  *(_QWORD *)(v3 + 1784) = v96;
  v110 = *(_QWORD *)(v3 + 1168);
  v235 = v110 + 64;
  v218 = (const char *)(v3 + 152);
  v111 = -1;
  v112 = -1 << *(_BYTE *)(v110 + 32);
  if (-v112 < 64)
    v111 = ~(-1 << -(char)v112);
  isUniquelyReferenced_nonNull_native = v111 & *(_QWORD *)(v110 + 64);
  v237 = (unint64_t)(63 - v112) >> 6;
  v243 = *(_QWORD *)(v3 + 1168);
  swift_bridgeObjectRetain(v110);
  v113 = 0;
  v55 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    *(_QWORD *)(v3 + 1824) = v55;
    if (isUniquelyReferenced_nonNull_native)
    {
      v248 = (isUniquelyReferenced_nonNull_native - 1) & isUniquelyReferenced_nonNull_native;
      v251 = v113;
      v118 = __clz(__rbit64(isUniquelyReferenced_nonNull_native)) | (v113 << 6);
      goto LABEL_92;
    }
    v66 = v113 + 1;
    if (__OFADD__(v113, 1))
      goto LABEL_126;
    v54 = (uint64_t)v55;
    if ((uint64_t)v66 >= v237)
      break;
    v119 = *(_QWORD *)(v235 + 8 * v66);
    v120 = v113 + 1;
    if (!v119)
    {
      v120 = v113 + 2;
      if (v113 + 2 >= v237)
        break;
      v119 = *(_QWORD *)(v235 + 8 * v120);
      if (!v119)
      {
        v120 = v113 + 3;
        if (v113 + 3 >= v237)
          break;
        v119 = *(_QWORD *)(v235 + 8 * v120);
        if (!v119)
        {
          v120 = v113 + 4;
          if (v113 + 4 >= v237)
            break;
          v119 = *(_QWORD *)(v235 + 8 * v120);
          if (!v119)
          {
            v120 = v113 + 5;
            if (v113 + 5 >= v237)
              break;
            v119 = *(_QWORD *)(v235 + 8 * v120);
            if (!v119)
            {
              v66 = v113 + 6;
              if (v113 + 6 >= v237)
                break;
              v119 = *(_QWORD *)(v235 + 8 * v66);
              if (!v119)
              {
                while (1)
                {
                  v120 = v66 + 1;
                  if (__OFADD__(v66, 1))
                    break;
                  if (v120 >= v237)
                    goto LABEL_103;
                  v119 = *(_QWORD *)(v235 + 8 * v120);
                  ++v66;
                  if (v119)
                    goto LABEL_91;
                }
LABEL_128:
                __break(1u);
LABEL_129:
                v65 = sub_1000E3038((_QWORD *)(v66 > 1), isUniquelyReferenced_nonNull_native, 1, v65);
LABEL_26:
                v65[2] = isUniquelyReferenced_nonNull_native;
                v228 = v65;
                v67 = &v65[3 * v58];
                *((_BYTE *)v67 + 32) = 0;
                v67[5] = v1;
                v67[6] = v55;
LABEL_28:
                swift_bridgeObjectRetain(v6);
                v58 = 32;
                v1 = (uint8_t *)(v54 | 0x8000000000000000);
                while (1)
                {
                  v66 = v58 - 32;
                  v68 = (Swift::String *)(v58 - 31);
                  if (__OFADD__(v58 - 32, 1))
                    goto LABEL_127;
                  if (*((_BYTE *)v6 + v58))
                    v55 = (_QWORD *)(v54 | 0x8000000000000000);
                  else
                    v55 = (_QWORD *)(v3 | 0x8000000000000000);
                  if ((*((_BYTE *)v6 + v58) & 1) != 0 || (v3 | 0x8000000000000000) == (v54 | 0x8000000000000000))
                  {
                    swift_bridgeObjectRelease(v6);
                    goto LABEL_40;
                  }
                  isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, v55, 0xD00000000000001ALL, v54 | 0x8000000000000000, 0);
                  swift_bridgeObjectRelease(v55);
                  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                    break;
                  ++v58;
                  if (v68 == v2)
                  {
                    swift_bridgeObjectRelease_n(v6, 2);
                    v3 = (unint64_t)v245;
                    goto LABEL_47;
                  }
                }
                v55 = v6;
LABEL_40:
                swift_bridgeObjectRelease(v55);
                swift_bridgeObjectRelease(v6);
                v51 = v232;
                v3 = (unint64_t)v245;
                if ((*(_BYTE *)(v232 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) & 1) != 0)
                {
                  JWSSignedJSON.payload.getter(*((_QWORD *)v245 + 157));
                  v69 = v263[7];
                  *((_OWORD *)v267 + 6) = v263[6];
                  *((_OWORD *)v267 + 7) = v69;
                  v70 = v263[5];
                  *((_OWORD *)v267 + 4) = v263[4];
                  *((_OWORD *)v267 + 5) = v70;
                  v71 = v263[1];
                  *(_OWORD *)v267 = *v263;
                  *((_OWORD *)v267 + 1) = v71;
                  v72 = v263[3];
                  *((_OWORD *)v267 + 2) = v263[2];
                  *((_OWORD *)v267 + 3) = v72;
                  v73 = *((_QWORD *)v245 + 96);
                  v74 = *((_QWORD *)v245 + 97);
                  swift_bridgeObjectRetain(v74);
                  sub_100182C14(v267);
                  if (v74)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native(v228) & 1) == 0)
                      v228 = sub_1000E3038(0, v228[2] + 1, 1, v228);
                    v76 = v228[2];
                    v75 = v228[3];
                    if (v76 >= v75 >> 1)
                      v228 = sub_1000E3038((_QWORD *)(v75 > 1), v76 + 1, 1, v228);
                    v54 = (uint64_t)v228;
                    v228[2] = v76 + 1;
                    v77 = &v228[3 * v76];
                    *((_BYTE *)v77 + 32) = 1;
                    v77[5] = v73;
                    v77[6] = v74;
                    v51 = v232;
                    goto LABEL_49;
                  }
LABEL_47:
                  v51 = v232;
                }
                v54 = (uint64_t)v228;
                goto LABEL_49;
              }
              v120 = v113 + 6;
            }
          }
        }
      }
    }
LABEL_91:
    v248 = (v119 - 1) & v119;
    v251 = v120;
    v118 = __clz(__rbit64(v119)) + (v120 << 6);
LABEL_92:
    v121 = *(_QWORD *)(v243 + 56) + 96 * v118;
    v54 = *(_QWORD *)v121;
    v2 = *(Swift::String **)(v121 + 8);
    v122 = *(_QWORD *)(v121 + 24);
    v1 = *(uint8_t **)(v121 + 40);
    v253 = *(_QWORD *)(v121 + 16);
    v256 = *(_QWORD *)(v121 + 32);
    v260 = *(_BYTE *)(v121 + 48);
    v6 = *(_QWORD **)(v121 + 64);
    v3 = *(_QWORD *)(v121 + 80);
    v263 = *(_OWORD **)(v121 + 56);
    v267 = *(char **)(v121 + 72);
    v275 = *(_BYTE *)(v121 + 88);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain_n(v2, 2);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
    v278[0] = (uint64_t)v55;
    v124 = sub_1004A8604(v54, (uint64_t)v2);
    v125 = v55[2];
    v126 = (v123 & 1) == 0;
    v127 = v125 + v126;
    if (__OFADD__(v125, v126))
    {
      __break(1u);
      goto LABEL_124;
    }
    v58 = v123;
    if (v55[3] >= v127)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v123 & 1) != 0)
          goto LABEL_70;
      }
      else
      {
        sub_10012AE14();
        v55 = (_QWORD *)v278[0];
        if ((v58 & 1) != 0)
          goto LABEL_70;
      }
    }
    else
    {
      sub_10012630C(v127, isUniquelyReferenced_nonNull_native);
      isUniquelyReferenced_nonNull_native = v278[0];
      v128 = sub_1004A8604(v54, (uint64_t)v2);
      if ((v58 & 1) != (v129 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v124 = v128;
      v55 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      if ((v58 & 1) != 0)
      {
LABEL_70:
        v114 = v55[7] + 96 * v124;
        v58 = (unint64_t)v55;
        v115 = *(_QWORD *)(v114 + 24);
        v116 = *(_QWORD *)(v114 + 40);
        v239 = *(_QWORD *)(v114 + 64);
        v241 = *(_QWORD *)(v114 + 80);
        swift_bridgeObjectRelease(*(_QWORD *)(v114 + 8));
        swift_bridgeObjectRelease(v116);
        v117 = v115;
        v55 = (_QWORD *)v58;
        swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(v239);
        swift_bridgeObjectRelease(v241);
        *(_QWORD *)v114 = v54;
        *(_QWORD *)(v114 + 8) = v2;
        *(_QWORD *)(v114 + 16) = v253;
        *(_QWORD *)(v114 + 24) = v122;
        *(_QWORD *)(v114 + 32) = v256;
        *(_QWORD *)(v114 + 40) = v1;
        *(_BYTE *)(v114 + 48) = v260;
        *(_QWORD *)(v114 + 56) = v263;
        *(_QWORD *)(v114 + 64) = v6;
        *(_QWORD *)(v114 + 72) = v267;
        *(_QWORD *)(v114 + 80) = v3;
        *(_BYTE *)(v114 + 88) = v275;
        goto LABEL_71;
      }
    }
    v55[(v124 >> 6) + 8] |= 1 << v124;
    v130 = (uint64_t *)(v55[6] + 16 * v124);
    *v130 = v54;
    v130[1] = (uint64_t)v2;
    v131 = v55[7] + 96 * v124;
    *(_QWORD *)v131 = v54;
    *(_QWORD *)(v131 + 8) = v2;
    *(_QWORD *)(v131 + 16) = v253;
    *(_QWORD *)(v131 + 24) = v122;
    *(_QWORD *)(v131 + 32) = v256;
    *(_QWORD *)(v131 + 40) = v1;
    *(_BYTE *)(v131 + 48) = v260;
    *(_QWORD *)(v131 + 56) = v263;
    *(_QWORD *)(v131 + 64) = v6;
    *(_QWORD *)(v131 + 72) = v267;
    *(_QWORD *)(v131 + 80) = v3;
    *(_BYTE *)(v131 + 88) = v275;
    v132 = v55[2];
    v133 = __OFADD__(v132, 1);
    v66 = v132 + 1;
    if (v133)
    {
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    v55[2] = v66;
    swift_bridgeObjectRetain(v2);
LABEL_71:
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v2);
    v3 = (unint64_t)v245;
    isUniquelyReferenced_nonNull_native = v248;
    v113 = v251;
  }
LABEL_103:
  v134 = *(_QWORD *)(v3 + 1736);
  v135 = *(_QWORD *)(v3 + 1728);
  v136 = *(_QWORD *)(v3 + 1696);
  v137 = *(_QWORD *)(v3 + 1192);
  v138 = (__int128 *)(v3 + 1176);
  v276 = *(_OWORD *)(v3 + 1176);
  swift_release(*(_QWORD *)(v3 + 1168));
  v139 = *(_QWORD *)(v54 + 16);
  v140 = v135 + *(int *)(v136 + 48);
  sub_100035DE8(v134, v135, type metadata accessor for VerifiedClaim);
  *(_OWORD *)v140 = v276;
  *(_QWORD *)(v140 + 16) = v137;
  v141 = *(_QWORD *)(v3 + 1728);
  if (!v139)
  {
    v144 = *(_QWORD *)(v3 + 1720);
    v145 = *(_QWORD *)(v3 + 1192);
    v146 = *(_QWORD *)(v3 + 1184);
    v147 = *(_QWORD *)(v3 + 1176);
    v148 = (_QWORD *)(v144 + *(int *)(*(_QWORD *)(v3 + 1696) + 48));
    sub_100035DE8(*(_QWORD *)(v3 + 1728), v144, type metadata accessor for VerifiedClaim);
    *v148 = v147;
    v148[1] = v146;
    v148[2] = v145;
    v149 = *(_QWORD *)(v145 + 16);
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRetain(v145);
    sub_100008030(v141, &qword_1006364F0);
    sub_100035DAC(v144, type metadata accessor for VerifiedClaim);
    if (v149)
      goto LABEL_107;
    swift_bridgeObjectRelease(v54);
    sub_100182A30(v227, v225, v224, v226);
    swift_bridgeObjectRelease(v223);
    *(_QWORD *)(v3 + 1928) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v3 + 1920) = 0;
    v160 = *(_QWORD *)(v3 + 1760);
    v161 = objc_msgSend(*(id *)(v3 + 1744), "serviceName");
    v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
    v269 = v163;
    v277 = v162;

    v164 = *(_QWORD *)(v3 + 1760);
    if (v160)
    {
      v261 = *(_QWORD *)(v164 + 24);
      v265 = *(_QWORD *)(v164 + 16);
      swift_bridgeObjectRetain(v261);
    }
    else
    {
      v265 = 0x414C494156414E55;
      v261 = 0xEB00000000454C42;
    }
    v165 = *(_QWORD *)(v3 + 1736);
    v166 = *(_QWORD *)(v3 + 1704);
    v167 = *(_QWORD *)(v3 + 1440);
    v168 = *(_QWORD *)(v3 + 1432);
    v169 = *(_QWORD *)(v3 + 1424);
    v170 = *(_QWORD *)(v3 + 1192);
    v171 = v166 + *(int *)(*(_QWORD *)(v3 + 1696) + 48);
    v257 = *v138;
    sub_100035DE8(v165, v166, type metadata accessor for VerifiedClaim);
    *(_OWORD *)v171 = v257;
    *(_QWORD *)(v171 + 16) = v170;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v167, v166, v169);
    sub_100035DAC(v166, type metadata accessor for VerifiedClaim);
    JWSSignedJSON.payload.getter(v169);
    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v167, v169);
    v172 = *((_OWORD *)v218 + 7);
    *((_OWORD *)v219 + 6) = *((_OWORD *)v218 + 6);
    *((_OWORD *)v219 + 7) = v172;
    *((_QWORD *)v219 + 16) = *((_QWORD *)v218 + 16);
    v173 = *((_OWORD *)v218 + 3);
    *((_OWORD *)v219 + 2) = *((_OWORD *)v218 + 2);
    *((_OWORD *)v219 + 3) = v173;
    v174 = *((_OWORD *)v218 + 5);
    *((_OWORD *)v219 + 4) = *((_OWORD *)v218 + 4);
    *((_OWORD *)v219 + 5) = v174;
    v175 = *((_OWORD *)v218 + 1);
    *(_OWORD *)v219 = *(_OWORD *)v218;
    *((_OWORD *)v219 + 1) = v175;
    v254 = *((_QWORD *)v245 + 2);
    v258 = *((_QWORD *)v245 + 3);
    swift_bridgeObjectRetain(v258);
    v176 = sub_100182A60(v219);
    if (v164)
    {
      v177 = *((_QWORD *)v245 + 220) + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
      if (*(_BYTE *)(v177 + 8))
        v178 = 180000.0;
      else
        v178 = *(double *)v177;
    }
    else
    {
      v178 = 180000.0;
    }
    v244 = *((_QWORD *)v245 + 222);
    v179 = *((_QWORD *)v245 + 177);
    v180 = *((_QWORD *)v245 + 176);
    v181 = *((_QWORD *)v245 + 175);
    v182 = *((_QWORD *)v245 + 174);
    v183 = *((_QWORD *)v245 + 173);
    v184 = *((_QWORD *)v245 + 172);
    v249._rawValue = (void *)*((_QWORD *)v245 + 151);
    v185 = UUID.init()(v176);
    v186 = UUID.uuidString.getter(v185);
    v188 = v187;
    v189 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
    *((_QWORD *)v245 + 242) = v189;
    v189(v179, v181);
    *((_QWORD *)v245 + 130) = v186;
    *((_QWORD *)v245 + 131) = v188;
    *((_QWORD *)v245 + 134) = 45;
    *((_QWORD *)v245 + 135) = 0xE100000000000000;
    *((_QWORD *)v245 + 132) = 0;
    *((_QWORD *)v245 + 133) = 0xE000000000000000;
    v190 = sub_1000994DC();
    v191 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v220, v221, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v190, v190, v190);
    v193 = v192;
    v194 = swift_bridgeObjectRelease(v188);
    Date.init()(v194);
    v195 = UTCTimestamp(_:)(v182);
    v197 = v196;
    v198 = *(uint64_t (**)(uint64_t, uint64_t))(v183 + 8);
    v199 = v198(v182, v184);
    Date.init(timeIntervalSinceNow:)(v199, v178);
    v200 = UTCTimestamp(_:)(v182);
    v202 = v201;
    v198(v182, v184);
    *((_QWORD *)v245 + 100) = v191;
    *((_QWORD *)v245 + 101) = v193;
    *((_QWORD *)v245 + 102) = v254;
    *((_QWORD *)v245 + 103) = v258;
    *((_QWORD *)v245 + 104) = v277;
    *((_QWORD *)v245 + 105) = v269;
    *((_QWORD *)v245 + 106) = v265;
    *((_QWORD *)v245 + 107) = v261;
    *((_QWORD *)v245 + 108) = v244;
    *((_QWORD *)v245 + 109) = v195;
    *((_QWORD *)v245 + 110) = v197;
    *((_QWORD *)v245 + 111) = v200;
    *((_QWORD *)v245 + 112) = v202;
    v2 = (Swift::String *)v245;
    v203 = sub_100182B04();
    v204 = sub_100182B48();
    JWSSignedJSON.init(payload:)(v222, &type metadata for DataSharingAuthorization, v203, v204);
    JWSSignedJSON.setCertificateChain(_:)(v249);
    if (v205)
    {
      v206 = *((_QWORD *)v245 + 221);
      v207 = (void *)*((_QWORD *)v245 + 219);
      v208 = (void *)*((_QWORD *)v245 + 218);
      v270 = *((_QWORD *)v245 + 211);
      v271 = *((_QWORD *)v245 + 217);
      v266 = *((_QWORD *)v245 + 207);
      v209 = *((_QWORD *)v245 + 206);
      v262 = *((_QWORD *)v245 + 205);
      v210 = *((_QWORD *)v245 + 171);
      v211 = *((_QWORD *)v245 + 170);
      v212 = *((_QWORD *)v245 + 169);
      v213 = *((_QWORD *)v245 + 149);
      v214 = *((_QWORD *)v245 + 148);
      v215 = *((_QWORD *)v245 + 147);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v206);
      swift_bridgeObjectRelease(v213);
      v216 = v214;
      v3 = (unint64_t)v245;
      swift_bridgeObjectRelease(v216);
      swift_bridgeObjectRelease(v215);

      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v210, v212);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      (*(void (**)(uint64_t, unint64_t))(v209 + 8))(v266, v262);
      sub_100035DAC(v270, type metadata accessor for SharingCredentials);
      goto LABEL_51;
    }
    JWSSignedJSON.setKid(_:)(*((_QWORD *)v245 + 152), *((_QWORD *)v245 + 169));
LABEL_124:
    JWSSignedJSON.setNonce(_:)(v2[77]);
    v217 = (Swift::String **)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
    v2[121]._object = v217;
    *v217 = v2;
    v217[1] = (Swift::String *)sub_100165E5C;
    return JWSSignedJSON.sign(_:)(v2[76]._countAndFlagsBits, v2[84]._object);
  }
  v142 = *(_QWORD *)(v3 + 1192);
  v143 = *(_QWORD *)(v3 + 1184);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 1176));
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRetain(v142);
  sub_100008030(v141, &qword_1006364F0);
LABEL_107:
  if (v232
    && (v150 = *(void **)(v232 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8)) != 0)
  {
    v151 = *(_QWORD *)(v232 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
    swift_bridgeObjectRetain(*(_QWORD *)(v232
                                       + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate
                                       + 8));
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v150 = (void *)0xE700000000000000;
    v151 = 0x746C7561666564;
  }
  sub_100054D9C(v151, v150, *(_QWORD *)(v3 + 1600));
  v152 = *(_QWORD *)(v3 + 1240);
  swift_bridgeObjectRelease(v150);
  *(_QWORD *)(v3 + 904) = v54;
  *(_QWORD *)(v3 + 912) = v227;
  *(_QWORD *)(v3 + 920) = v225;
  *(_QWORD *)(v3 + 928) = v224;
  *(_QWORD *)(v3 + 936) = v226;
  *(_QWORD *)(v3 + 944) = v229;
  *(_QWORD *)(v3 + 952) = v223;
  *(_OWORD *)(v3 + 960) = 0u;
  *(_OWORD *)(v3 + 976) = 0u;
  *(_QWORD *)(v3 + 992) = 0;
  v153 = (unint64_t *)swift_task_alloc(async function pointer to createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)[1]);
  *(_QWORD *)(v3 + 1832) = v153;
  v154 = sub_100182B8C();
  v155 = sub_100182BD0();
  *v153 = v3;
  v153[1] = (unint64_t)sub_100163CBC;
  v156 = *(_QWORD *)(v3 + 1600);
  v157 = *(_QWORD *)(v3 + 1576);
  v158 = *(_QWORD *)(v3 + 1232);
  v159 = *(_QWORD *)(v3 + 1216);
  v278[15] = v154;
  v278[16] = v155;
  return createSignedEncryptedMessage<A>(with:to:signingKey:encryptor:nonce:)(v157, v3 + 904, v156, v159, v3 + 960, v158, v152, &type metadata for SharingIdVData);
}

uint64_t sub_100163CBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 960;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 1832);
  *(_QWORD *)(*(_QWORD *)v1 + 1840) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[222];
    v6 = v2[149];
    v7 = v2[148];
    v8 = v2[147];
    swift_bridgeObjectRelease(v2[221]);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    sub_100008030((uint64_t)(v2 + 120), &qword_100636598);
    swift_bridgeObjectRelease(v5);
    v9 = sub_100166870;
  }
  else
  {
    v10 = v2[228];
    v11 = v2[227];
    v12 = v2[226];
    v13 = v2[225];
    v14 = v2[224];
    v15 = v2[223];
    sub_100008030(v3, &qword_100636598);
    swift_bridgeObjectRelease(v10);
    sub_100182A30(v14, v13, v12, v11);
    swift_bridgeObjectRelease(v15);
    v9 = sub_100163DD0;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_100163DD0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::OpaquePointer v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  Swift::OpaquePointer v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  _QWORD *v224;

  JWSSignedJSON.setCertificateChain(_:)(*(Swift::OpaquePointer *)(v0 + 1208));
  if (v1)
  {
    v2 = *(void **)(v0 + 1752);
    v3 = *(void **)(v0 + 1744);
    v221 = *(_QWORD *)(v0 + 1736);
    v211 = *(_QWORD *)(v0 + 1776);
    v218 = *(_QWORD *)(v0 + 1688);
    v206 = *(_QWORD *)(v0 + 1656);
    v196 = *(_QWORD *)(v0 + 1648);
    v202 = *(_QWORD *)(v0 + 1640);
    v4 = *(_QWORD *)(v0 + 1592);
    v186 = *(_QWORD *)(v0 + 1584);
    v191 = *(_QWORD *)(v0 + 1600);
    v5 = *(_QWORD *)(v0 + 1576);
    v6 = *(_QWORD *)(v0 + 1568);
    v7 = *(_QWORD *)(v0 + 1560);
    v8 = *(_QWORD *)(v0 + 1192);
    v9 = *(_QWORD *)(v0 + 1184);
    v10 = *(_QWORD *)(v0 + 1176);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1768));
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v10);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v191, v186);
    swift_bridgeObjectRelease(v211);
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v206, v202);
LABEL_4:
    sub_100035DAC(v218, type metadata accessor for SharingCredentials);
    v20 = v221;
LABEL_5:
    sub_100008030(v20, &qword_1006364F0);
    v21 = *(_QWORD *)(v0 + 1728);
    v22 = *(_QWORD *)(v0 + 1720);
    v23 = *(_QWORD *)(v0 + 1712);
    v24 = *(_QWORD *)(v0 + 1704);
    v25 = *(_QWORD *)(v0 + 1688);
    v26 = *(_QWORD *)(v0 + 1664);
    v27 = *(_QWORD *)(v0 + 1656);
    v28 = *(_QWORD *)(v0 + 1632);
    v29 = *(_QWORD *)(v0 + 1624);
    v155 = *(_QWORD *)(v0 + 1600);
    v157 = *(_QWORD *)(v0 + 1576);
    v160 = *(_QWORD *)(v0 + 1552);
    v163 = *(_QWORD *)(v0 + 1544);
    v167 = *(_QWORD *)(v0 + 1520);
    v171 = *(_QWORD *)(v0 + 1496);
    v175 = *(_QWORD *)(v0 + 1488);
    v179 = *(_QWORD *)(v0 + 1464);
    v182 = *(_QWORD *)(v0 + 1440);
    v187 = *(_QWORD *)(v0 + 1416);
    v192 = *(_QWORD *)(v0 + 1392);
    v197 = *(_QWORD *)(v0 + 1368);
    v203 = *(_QWORD *)(v0 + 1344);
    v207 = *(_QWORD *)(v0 + 1320);
    v212 = *(_QWORD *)(v0 + 1296);
    v219 = *(_QWORD *)(v0 + 1288);
    v222 = *(_QWORD *)(v0 + 1272);
    swift_task_dealloc(*(_QWORD *)(v0 + 1736));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v155);
    swift_task_dealloc(v157);
    swift_task_dealloc(v160);
    swift_task_dealloc(v163);
    swift_task_dealloc(v167);
    swift_task_dealloc(v171);
    swift_task_dealloc(v175);
    swift_task_dealloc(v179);
    swift_task_dealloc(v182);
    swift_task_dealloc(v187);
    swift_task_dealloc(v192);
    swift_task_dealloc(v197);
    swift_task_dealloc(v203);
    swift_task_dealloc(v207);
    swift_task_dealloc(v212);
    swift_task_dealloc(v219);
    swift_task_dealloc(v222);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = *(_QWORD *)(v0 + 1576);
  v12 = *(_QWORD *)(v0 + 1568);
  v13 = *(_QWORD *)(v0 + 1560);
  v14 = *(_QWORD *)(v0 + 1128);
  v15 = *(_QWORD *)(v0 + 1120);
  v16 = sub_100004828(&qword_1006365A0);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v16, v18 + *(_QWORD *)(v12 + 72), v17 | 7);
  *(_QWORD *)(v0 + 1848) = v19;
  *(_OWORD *)(v19 + 16) = xmmword_10051FFB0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v19 + v18, v11, v13);
  sub_1001488A8(v15, v14, v0 + 1000);
  v31 = *(_QWORD *)(v0 + 1712);
  v32 = *(_QWORD *)(v0 + 1192);
  v33 = v31 + *(int *)(*(_QWORD *)(v0 + 1696) + 48);
  v223 = *(_OWORD *)(v0 + 1176);
  sub_100035DE8(*(_QWORD *)(v0 + 1736), v31, type metadata accessor for VerifiedClaim);
  *(_OWORD *)v33 = v223;
  *(_QWORD *)(v33 + 16) = v32;
  v34 = *(_BYTE *)(v32 + 32);
  *(_BYTE *)(v0 + 1988) = v34;
  v35 = 1 << v34;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(v32 + 64);
  swift_bridgeObjectRetain(v32);
  sub_100035DAC(v31, type metadata accessor for VerifiedClaim);
  *(_DWORD *)(v0 + 1984) = enum case for EncryptedMessageEntity.sp(_:);
  *(_QWORD *)(v0 + 1856) = _swiftEmptyArrayStorage;
  if (v37)
  {
    v38 = 0;
    v39 = __clz(__rbit64(v37));
    v40 = (v37 - 1) & v37;
    v41 = *(_QWORD **)(v0 + 1192);
    goto LABEL_11;
  }
  v52 = *(_BYTE *)(v0 + 1988);
  v53 = v52 & 0x3F;
  v41 = *(_QWORD **)(v0 + 1192);
  if (v53 > 6)
  {
    v54 = v41[9];
    if (v54)
    {
      v38 = 1;
LABEL_16:
      v40 = (v54 - 1) & v54;
      v39 = __clz(__rbit64(v54)) + (v38 << 6);
LABEL_11:
      v224 = (_QWORD *)(v0 + 1000);
      *(_QWORD *)(v0 + 1872) = v40;
      *(_QWORD *)(v0 + 1864) = v38;
      v42 = *(_QWORD *)(v41[7] + 8 * v39);
      *(_QWORD *)(v0 + 1880) = v42;
      v43 = swift_retain(v42);
      v44 = RecipientEncryptionCertificate.keyAgreement.getter(v43);
      *(_QWORD *)(v0 + 1888) = v44;
      v45 = RecipientEncryptionCertificate.signing.getter(v44);
      *(_QWORD *)(v0 + 1896) = v45;
      if (v45)
      {
        v46 = (void *)v45;
        v47 = *(_QWORD *)(v0 + 1552);
        v48 = *(_QWORD *)(v0 + 1520);
        v49 = *(_QWORD **)(v0 + 1216);
        v51 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
        v50 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey + 8);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1512) + 104))(v48, *(unsigned int *)(v0 + 1984), *(_QWORD *)(v0 + 1504));
        sub_10016926C(v224, v51, v50, v44, v49, (unint64_t)v46, v48, v47);
        v220 = v42;
        v214 = (void *)v44;
        v67 = *(_QWORD *)(v0 + 1552);
        v68 = *(_QWORD *)(v0 + 1544);
        v69 = *(_QWORD *)(v0 + 1536);
        v70 = *(_QWORD *)(v0 + 1528);
        v71._rawValue = *(void **)(v0 + 1208);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1512) + 8))(*(_QWORD *)(v0 + 1520), *(_QWORD *)(v0 + 1504));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v68, v67, v70);
        v72 = sub_100099FFC(&qword_1006365A8, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
        v73 = sub_100099FFC(&qword_1006365B0, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
        JWSSignedJSON.init(payload:)(v68, v70, v72, v73);
        JWSSignedJSON.setCertificateChain(_:)(v71);
        if (!v74)
        {
          JWSSignedJSON.setKid(_:)(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1472));
          JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
          v83 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
          *(_QWORD *)(v0 + 1904) = v83;
          *v83 = v0;
          v83[1] = sub_100164E84;
          v84 = *(_QWORD *)(v0 + 1472);
          return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 1216), v84);
        }
        v75 = *(_QWORD *)(v0 + 1848);
        v199 = *(_QWORD *)(v0 + 1776);
        v76 = *(_QWORD *)(v0 + 1768);
        v154 = *(void **)(v0 + 1752);
        v159 = *(void **)(v0 + 1744);
        v204 = *(_QWORD *)(v0 + 1688);
        v208 = *(_QWORD *)(v0 + 1736);
        v189 = *(_QWORD *)(v0 + 1640);
        v194 = *(_QWORD *)(v0 + 1656);
        v181 = *(_QWORD *)(v0 + 1600);
        v184 = *(_QWORD *)(v0 + 1648);
        v173 = *(_QWORD *)(v0 + 1592);
        v177 = *(_QWORD *)(v0 + 1584);
        v162 = *(_QWORD *)(v0 + 1568);
        v165 = *(_QWORD *)(v0 + 1560);
        v169 = *(_QWORD *)(v0 + 1576);
        v156 = *(_QWORD *)(v0 + 1552);
        v152 = *(_QWORD *)(v0 + 1536);
        v153 = *(_QWORD *)(v0 + 1528);
        v77 = *(_QWORD *)(v0 + 1496);
        v78 = *(_QWORD *)(v0 + 1480);
        v79 = *(_QWORD *)(v0 + 1472);
        v80 = *(_QWORD *)(v0 + 1192);
        v81 = *(_QWORD *)(v0 + 1184);
        v82 = *(_QWORD *)(v0 + 1176);

        swift_bridgeObjectRelease(v76);
        swift_release(v220);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v75);

        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v156, v153);
        swift_release(v80);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v224);
        (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v169, v165);
        (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v181, v177);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(v199);
        (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v194, v189);
      }
      else
      {
        v55 = *(_QWORD *)(v0 + 1776);
        v56 = *(_QWORD *)(v0 + 1768);
        v158 = *(void **)(v0 + 1744);
        v161 = *(void **)(v0 + 1752);
        v204 = *(_QWORD *)(v0 + 1688);
        v208 = *(_QWORD *)(v0 + 1736);
        v193 = *(_QWORD *)(v0 + 1640);
        v198 = *(_QWORD *)(v0 + 1656);
        v183 = *(_QWORD *)(v0 + 1600);
        v188 = *(_QWORD *)(v0 + 1648);
        v176 = *(_QWORD *)(v0 + 1592);
        v180 = *(_QWORD *)(v0 + 1584);
        v164 = *(_QWORD *)(v0 + 1568);
        v168 = *(_QWORD *)(v0 + 1560);
        v172 = *(_QWORD *)(v0 + 1576);
        v57 = *(_QWORD *)(v0 + 1464);
        v213 = (void *)v44;
        v58 = *(_QWORD *)(v0 + 1456);
        v59 = *(_QWORD *)(v0 + 1448);
        v60 = *(_QWORD *)(v0 + 1192);
        v61 = *(_QWORD *)(v0 + 1184);
        v62 = *(_QWORD *)(v0 + 1176);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1848));
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRelease(v61);
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(v55);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v58 + 104))(v57, enum case for DIPError.Code.missingCertificate(_:), v59);
        v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v64 = type metadata accessor for DIPError(0);
        v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v64, v65, 0, 0);
        v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054DE10, 0, v57, 0, v63, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000F7, 0x800000010054DCA0, 3021);
        swift_willThrow(v66);

        swift_release(v42);
        swift_release(v60);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v224);
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v172, v168);
        (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v183, v180);
        (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v198, v193);
      }
      sub_100035DAC(v204, type metadata accessor for SharingCredentials);
      v20 = v208;
      goto LABEL_5;
    }
    if (v53 >= 8)
    {
      v54 = v41[10];
      if (v54)
      {
        v38 = 2;
        goto LABEL_16;
      }
      v54 = v41[11];
      if (v54)
      {
        v38 = 3;
        goto LABEL_16;
      }
      if (v53 >= 9)
      {
        v54 = v41[12];
        if (v54)
        {
          v38 = 4;
          goto LABEL_16;
        }
        v85 = 0;
        v86 = (unint64_t)((1 << v52) + 63) >> 6;
        if (v86 <= 5)
          v86 = 5;
        v87 = v86 - 5;
        while (v87 != v85)
        {
          v54 = v41[v85++ + 13];
          if (v54)
          {
            v38 = v85 + 4;
            goto LABEL_16;
          }
        }
      }
    }
  }
  v88 = *(_QWORD *)(v0 + 1848);
  v215 = *(_QWORD *)(v0 + 1600);
  v89 = *(_QWORD *)(v0 + 1592);
  v90 = *(_QWORD *)(v0 + 1584);
  v91 = *(_QWORD *)(v0 + 1576);
  v92 = *(_QWORD *)(v0 + 1568);
  v93 = *(_QWORD *)(v0 + 1560);
  swift_release(v41);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1000));
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v215, v90);
  *(_QWORD *)(v0 + 1928) = _swiftEmptyArrayStorage;
  v166 = v88;
  *(_QWORD *)(v0 + 1920) = v88;
  v94 = *(_QWORD *)(v0 + 1760);
  v95 = objc_msgSend(*(id *)(v0 + 1744), "serviceName");
  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
  v98 = v97;

  v99 = *(_QWORD *)(v0 + 1760);
  v209 = v98;
  v216 = v96;
  v190 = v99;
  if (v94)
  {
    v170 = *(_QWORD *)(v99 + 16);
    v174 = *(_QWORD *)(v99 + 24);
    swift_bridgeObjectRetain(v174);
  }
  else
  {
    v174 = 0xEB00000000454C42;
    v170 = 0x414C494156414E55;
  }
  v100 = *(_QWORD *)(v0 + 1704);
  v101 = *(_QWORD *)(v0 + 1440);
  v102 = *(_QWORD *)(v0 + 1432);
  v103 = *(_QWORD *)(v0 + 1424);
  v104 = *(_QWORD *)(v0 + 1192);
  v105 = v100 + *(int *)(*(_QWORD *)(v0 + 1696) + 48);
  v200 = *(_OWORD *)(v0 + 1176);
  sub_100035DE8(*(_QWORD *)(v0 + 1736), v100, type metadata accessor for VerifiedClaim);
  *(_OWORD *)v105 = v200;
  *(_QWORD *)(v105 + 16) = v104;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v101, v100, v103);
  sub_100035DAC(v100, type metadata accessor for VerifiedClaim);
  JWSSignedJSON.payload.getter(v103);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
  v106 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 128) = v106;
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 280);
  v107 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 64) = v107;
  v108 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 96) = v108;
  v109 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 32) = v109;
  v111 = *(_QWORD *)(v0 + 16);
  v110 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v110);
  v112 = sub_100182A60((_QWORD *)(v0 + 16));
  v195 = v111;
  v201 = v110;
  if (v190)
  {
    v113 = *(_QWORD *)(v0 + 1760) + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
    if (*(_BYTE *)(v113 + 8))
      v114 = 180000.0;
    else
      v114 = *(double *)v113;
  }
  else
  {
    v114 = 180000.0;
  }
  v115 = *(_QWORD *)(v0 + 1416);
  v116 = *(_QWORD *)(v0 + 1408);
  v117 = *(_QWORD *)(v0 + 1400);
  v118 = *(_QWORD *)(v0 + 1392);
  v119 = *(_QWORD *)(v0 + 1384);
  v120 = *(_QWORD *)(v0 + 1376);
  v178 = *(_QWORD *)(v0 + 1776);
  v185._rawValue = *(void **)(v0 + 1208);
  v121 = UUID.init()(v112);
  v122 = UUID.uuidString.getter(v121);
  v124 = v123;
  v125 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
  *(_QWORD *)(v0 + 1936) = v125;
  v125(v115, v117);
  *(_QWORD *)(v0 + 1040) = v122;
  *(_QWORD *)(v0 + 1048) = v124;
  *(_QWORD *)(v0 + 1072) = 45;
  *(_QWORD *)(v0 + 1080) = 0xE100000000000000;
  *(_QWORD *)(v0 + 1056) = 0;
  *(_QWORD *)(v0 + 1064) = 0xE000000000000000;
  v126 = sub_1000994DC();
  v127 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v0 + 1072, v0 + 1056, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v126, v126, v126);
  v129 = v128;
  v130 = swift_bridgeObjectRelease(v124);
  Date.init()(v130);
  v131 = UTCTimestamp(_:)(v118);
  v133 = v132;
  v134 = *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8);
  v135 = v134(v118, v120);
  Date.init(timeIntervalSinceNow:)(v135, v114);
  v136 = UTCTimestamp(_:)(v118);
  v138 = v137;
  v134(v118, v120);
  *(_QWORD *)(v0 + 800) = v127;
  *(_QWORD *)(v0 + 808) = v129;
  *(_QWORD *)(v0 + 816) = v195;
  *(_QWORD *)(v0 + 824) = v201;
  *(_QWORD *)(v0 + 832) = v216;
  *(_QWORD *)(v0 + 840) = v209;
  *(_QWORD *)(v0 + 848) = v170;
  *(_QWORD *)(v0 + 856) = v174;
  *(_QWORD *)(v0 + 864) = v178;
  *(_QWORD *)(v0 + 872) = v131;
  *(_QWORD *)(v0 + 880) = v133;
  *(_QWORD *)(v0 + 888) = v136;
  *(_QWORD *)(v0 + 896) = v138;
  v139 = sub_100182B04();
  v140 = sub_100182B48();
  JWSSignedJSON.init(payload:)(v0 + 800, &type metadata for DataSharingAuthorization, v139, v140);
  JWSSignedJSON.setCertificateChain(_:)(v185);
  if (v141)
  {
    v142 = *(_QWORD *)(v0 + 1768);
    v143 = *(void **)(v0 + 1752);
    v144 = *(void **)(v0 + 1744);
    v218 = *(_QWORD *)(v0 + 1688);
    v221 = *(_QWORD *)(v0 + 1736);
    v205 = *(_QWORD *)(v0 + 1648);
    v210 = *(_QWORD *)(v0 + 1640);
    v217 = *(_QWORD *)(v0 + 1656);
    v145 = *(_QWORD *)(v0 + 1368);
    v146 = *(_QWORD *)(v0 + 1360);
    v147 = *(_QWORD *)(v0 + 1352);
    v148 = *(_QWORD *)(v0 + 1192);
    v149 = *(_QWORD *)(v0 + 1184);
    v150 = *(_QWORD *)(v0 + 1176);
    swift_bridgeObjectRelease(v166);
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v148);
    swift_bridgeObjectRelease(v149);
    swift_bridgeObjectRelease(v150);

    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v147);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v217, v210);
    goto LABEL_4;
  }
  JWSSignedJSON.setKid(_:)(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1352));
  JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
  v151 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
  *(_QWORD *)(v0 + 1944) = v151;
  *v151 = v0;
  v151[1] = sub_100165E5C;
  v84 = *(_QWORD *)(v0 + 1352);
  return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 1216), v84);
}

uint64_t sub_100164E84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1904);
  *(_QWORD *)(*(_QWORD *)v1 + 1912) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[232];
    v5 = v2[231];
    v6 = v2[222];
    v7 = v2[221];
    v8 = v2[149];
    v9 = v2[148];
    v10 = v2[147];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
    v11 = sub_100166AE4;
  }
  else
  {
    v11 = sub_100164F48;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_100164F48()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::OpaquePointer v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD *v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  Swift::OpaquePointer v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;

  v1 = *(_QWORD *)(v0 + 1856);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1480) + 16))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1496), *(_QWORD *)(v0 + 1472));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 1856);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1000E2ED0(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  v222 = (_QWORD *)(v0 + 1000);
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1000E2ED0(v4 > 1, v5 + 1, 1, v3);
  v6 = *(void **)(v0 + 1896);
  v7 = *(void **)(v0 + 1888);
  v8 = *(_QWORD *)(v0 + 1880);
  v226 = *(_QWORD *)(v0 + 1552);
  v9 = *(_QWORD *)(v0 + 1536);
  v215 = *(_QWORD *)(v0 + 1528);
  v10 = *(_QWORD *)(v0 + 1496);
  v11 = *(_QWORD *)(v0 + 1488);
  v12 = *(_QWORD *)(v0 + 1480);
  v13 = *(_QWORD *)(v0 + 1472);
  *(_QWORD *)(v3 + 16) = v5 + 1;
  v14 = v3;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v3+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v5, v11, v13);

  swift_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v13);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v226, v215);
  v216 = *(_QWORD *)(v0 + 1912);
  v16 = *(_QWORD *)(v0 + 1872);
  v17 = *(_QWORD *)(v0 + 1864);
  v227 = v14;
  *(_QWORD *)(v0 + 1856) = v14;
  if (v16)
  {
    v18 = (v16 - 1) & v16;
    v19 = __clz(__rbit64(v16)) | (v17 << 6);
    result = *(_QWORD *)(v0 + 1192);
LABEL_7:
    *(_QWORD *)(v0 + 1872) = v18;
    *(_QWORD *)(v0 + 1864) = v17;
    v20 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v19);
    *(_QWORD *)(v0 + 1880) = v20;
    v21 = swift_retain(v20);
    v22 = RecipientEncryptionCertificate.keyAgreement.getter(v21);
    *(_QWORD *)(v0 + 1888) = v22;
    v23 = RecipientEncryptionCertificate.signing.getter(v22);
    *(_QWORD *)(v0 + 1896) = v23;
    if (v23)
    {
      v24 = (void *)v23;
      v25 = *(_QWORD *)(v0 + 1552);
      v26 = *(_QWORD *)(v0 + 1520);
      v27 = *(_QWORD **)(v0 + 1216);
      v28 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
      v29 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey + 8);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1512) + 104))(v26, *(unsigned int *)(v0 + 1984), *(_QWORD *)(v0 + 1504));
      v30 = v26;
      v31 = (void *)v22;
      sub_10016926C(v222, v28, v29, v22, v27, (unint64_t)v24, v30, v25);
      v212 = v20;
      if (v216)
      {
        v148 = *(_QWORD *)(v0 + 1848);
        v204 = *(_QWORD *)(v0 + 1776);
        v32 = *(_QWORD *)(v0 + 1768);
        v150 = *(void **)(v0 + 1752);
        v155 = *(void **)(v0 + 1744);
        v217 = *(_QWORD *)(v0 + 1736);
        v208 = *(_QWORD *)(v0 + 1688);
        v199 = *(_QWORD *)(v0 + 1656);
        v190 = *(_QWORD *)(v0 + 1648);
        v195 = *(_QWORD *)(v0 + 1640);
        v185 = *(_QWORD *)(v0 + 1600);
        v174 = *(_QWORD *)(v0 + 1592);
        v179 = *(_QWORD *)(v0 + 1584);
        v160 = *(_QWORD *)(v0 + 1568);
        v164 = *(_QWORD *)(v0 + 1560);
        v169 = *(_QWORD *)(v0 + 1576);
        v146 = *(_QWORD *)(v0 + 1520);
        v33 = *(_QWORD *)(v0 + 1512);
        v34 = *(_QWORD *)(v0 + 1504);
        v35 = *(_QWORD *)(v0 + 1192);
        v36 = *(_QWORD *)(v0 + 1184);
        v37 = *(_QWORD *)(v0 + 1176);

        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v148);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v146, v34);
        swift_release(v35);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v222);
        (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v169, v164);
        (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v185, v179);
        swift_bridgeObjectRelease(v227);
        swift_bridgeObjectRelease(v204);
        (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v199, v195);
        sub_100035DAC(v208, type metadata accessor for SharingCredentials);
        sub_100008030(v217, &qword_1006364F0);
        swift_release(v212);
LABEL_41:
        v134 = *(_QWORD *)(v0 + 1728);
        v135 = *(_QWORD *)(v0 + 1720);
        v136 = *(_QWORD *)(v0 + 1712);
        v137 = *(_QWORD *)(v0 + 1704);
        v138 = *(_QWORD *)(v0 + 1688);
        v139 = *(_QWORD *)(v0 + 1664);
        v140 = *(_QWORD *)(v0 + 1656);
        v141 = *(_QWORD *)(v0 + 1632);
        v142 = *(_QWORD *)(v0 + 1624);
        v154 = *(_QWORD *)(v0 + 1600);
        v159 = *(_QWORD *)(v0 + 1576);
        v163 = *(_QWORD *)(v0 + 1552);
        v168 = *(_QWORD *)(v0 + 1544);
        v173 = *(_QWORD *)(v0 + 1520);
        v178 = *(_QWORD *)(v0 + 1496);
        v184 = *(_QWORD *)(v0 + 1488);
        v189 = *(_QWORD *)(v0 + 1464);
        v194 = *(_QWORD *)(v0 + 1440);
        v198 = *(_QWORD *)(v0 + 1416);
        v203 = *(_QWORD *)(v0 + 1392);
        v207 = *(_QWORD *)(v0 + 1368);
        v211 = *(_QWORD *)(v0 + 1344);
        v214 = *(_QWORD *)(v0 + 1320);
        v221 = *(_QWORD *)(v0 + 1296);
        v225 = *(_QWORD *)(v0 + 1288);
        v228 = *(_QWORD *)(v0 + 1272);
        swift_task_dealloc(*(_QWORD *)(v0 + 1736));
        swift_task_dealloc(v134);
        swift_task_dealloc(v135);
        swift_task_dealloc(v136);
        swift_task_dealloc(v137);
        swift_task_dealloc(v138);
        swift_task_dealloc(v139);
        swift_task_dealloc(v140);
        swift_task_dealloc(v141);
        swift_task_dealloc(v142);
        swift_task_dealloc(v154);
        swift_task_dealloc(v159);
        swift_task_dealloc(v163);
        swift_task_dealloc(v168);
        swift_task_dealloc(v173);
        swift_task_dealloc(v178);
        swift_task_dealloc(v184);
        swift_task_dealloc(v189);
        swift_task_dealloc(v194);
        swift_task_dealloc(v198);
        swift_task_dealloc(v203);
        swift_task_dealloc(v207);
        swift_task_dealloc(v211);
        swift_task_dealloc(v214);
        swift_task_dealloc(v221);
        swift_task_dealloc(v225);
        swift_task_dealloc(v228);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v219 = (void *)v22;
      v54 = *(_QWORD *)(v0 + 1552);
      v55 = *(_QWORD *)(v0 + 1544);
      v56 = *(_QWORD *)(v0 + 1536);
      v57 = *(_QWORD *)(v0 + 1528);
      v58._rawValue = *(void **)(v0 + 1208);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1512) + 8))(*(_QWORD *)(v0 + 1520), *(_QWORD *)(v0 + 1504));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v54, v57);
      v59 = sub_100099FFC(&qword_1006365A8, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
      v60 = sub_100099FFC(&qword_1006365B0, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
      JWSSignedJSON.init(payload:)(v55, v57, v59, v60);
      JWSSignedJSON.setCertificateChain(_:)(v58);
      if (!v61)
      {
        JWSSignedJSON.setKid(_:)(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1472));
        JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
        v72 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
        *(_QWORD *)(v0 + 1904) = v72;
        *v72 = v0;
        v72[1] = sub_100164E84;
        v73 = *(_QWORD *)(v0 + 1472);
        return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 1216), v73);
      }
      v62 = *(_QWORD *)(v0 + 1848);
      v201 = *(_QWORD *)(v0 + 1776);
      v63 = *(_QWORD *)(v0 + 1768);
      v147 = *(void **)(v0 + 1752);
      v152 = *(void **)(v0 + 1744);
      v205 = *(_QWORD *)(v0 + 1688);
      v209 = *(_QWORD *)(v0 + 1736);
      v187 = *(_QWORD *)(v0 + 1648);
      v192 = *(_QWORD *)(v0 + 1640);
      v197 = *(_QWORD *)(v0 + 1656);
      v176 = *(_QWORD *)(v0 + 1584);
      v181 = *(_QWORD *)(v0 + 1600);
      v166 = *(_QWORD *)(v0 + 1576);
      v171 = *(_QWORD *)(v0 + 1592);
      v157 = *(_QWORD *)(v0 + 1568);
      v162 = *(_QWORD *)(v0 + 1560);
      v149 = *(_QWORD *)(v0 + 1552);
      v144 = *(_QWORD *)(v0 + 1536);
      v145 = *(_QWORD *)(v0 + 1528);
      v64 = *(_QWORD *)(v0 + 1496);
      v65 = *(_QWORD *)(v0 + 1480);
      v66 = *(_QWORD *)(v0 + 1472);
      v67 = *(_QWORD *)(v0 + 1192);
      v68 = *(_QWORD *)(v0 + 1184);
      v69 = *(_QWORD *)(v0 + 1176);

      swift_bridgeObjectRelease(v63);
      swift_release(v212);
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v62);

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v149, v145);
      swift_release(v67);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v222);
      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v166, v162);
      (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v181, v176);
      swift_bridgeObjectRelease(v227);
      swift_bridgeObjectRelease(v201);
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v197, v192);
    }
    else
    {
      v42 = *(_QWORD *)(v0 + 1776);
      v43 = *(_QWORD *)(v0 + 1768);
      v151 = *(void **)(v0 + 1744);
      v156 = *(void **)(v0 + 1752);
      v205 = *(_QWORD *)(v0 + 1688);
      v209 = *(_QWORD *)(v0 + 1736);
      v200 = *(_QWORD *)(v0 + 1656);
      v191 = *(_QWORD *)(v0 + 1648);
      v196 = *(_QWORD *)(v0 + 1640);
      v186 = *(_QWORD *)(v0 + 1600);
      v175 = *(_QWORD *)(v0 + 1592);
      v180 = *(_QWORD *)(v0 + 1584);
      v161 = *(_QWORD *)(v0 + 1568);
      v165 = *(_QWORD *)(v0 + 1560);
      v170 = *(_QWORD *)(v0 + 1576);
      v218 = (void *)v22;
      v44 = *(_QWORD *)(v0 + 1464);
      v45 = *(_QWORD *)(v0 + 1456);
      v46 = *(_QWORD *)(v0 + 1448);
      v47 = *(_QWORD *)(v0 + 1192);
      v48 = *(_QWORD *)(v0 + 1184);
      v49 = *(_QWORD *)(v0 + 1176);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1848));
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v227);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v44, enum case for DIPError.Code.missingCertificate(_:), v46);
      v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v51 = type metadata accessor for DIPError(0);
      v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v51, v52, 0, 0);
      v53 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054DE10, 0, v44, 0, v50, 0xD00000000000004CLL, 0x800000010054D540, 0xD0000000000000F7, 0x800000010054DCA0, 3021);
      swift_willThrow(v53);

      swift_release(v20);
      swift_release(v47);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v222);
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v170, v165);
      (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v186, v180);
      (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v200, v196);
    }
    sub_100035DAC(v205, type metadata accessor for SharingCredentials);
    v70 = v209;
    goto LABEL_40;
  }
  v38 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = (unint64_t)((1 << *(_BYTE *)(v0 + 1988)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 1192);
    if (v38 >= v39)
      goto LABEL_29;
    v40 = result + 64;
    v41 = *(_QWORD *)(result + 64 + 8 * v38);
    ++v17;
    if (v41)
    {
LABEL_13:
      v18 = (v41 - 1) & v41;
      v19 = __clz(__rbit64(v41)) + (v17 << 6);
      goto LABEL_7;
    }
    v17 = v38 + 1;
    if (v38 + 1 >= v39)
      goto LABEL_29;
    v41 = *(_QWORD *)(v40 + 8 * v17);
    if (v41)
      goto LABEL_13;
    v17 = v38 + 2;
    if (v38 + 2 >= v39)
      goto LABEL_29;
    v41 = *(_QWORD *)(v40 + 8 * v17);
    if (v41)
      goto LABEL_13;
    v71 = v38 + 3;
    if (v71 >= v39)
    {
LABEL_29:
      v74 = *(_QWORD *)(v0 + 1848);
      v75 = *(_QWORD *)(v0 + 1600);
      v76 = *(_QWORD *)(v0 + 1592);
      v77 = *(_QWORD *)(v0 + 1584);
      v78 = *(_QWORD *)(v0 + 1576);
      v79 = *(_QWORD *)(v0 + 1568);
      v80 = *(_QWORD *)(v0 + 1560);
      swift_release(result);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v222);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
      *(_QWORD *)(v0 + 1928) = v227;
      v153 = v74;
      *(_QWORD *)(v0 + 1920) = v74;
      v81 = *(_QWORD *)(v0 + 1760);
      v82 = objc_msgSend(*(id *)(v0 + 1744), "serviceName");
      v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v202 = v83;

      v84 = *(_QWORD *)(v0 + 1760);
      v172 = v84;
      if (v81)
      {
        v188 = *(_QWORD *)(v84 + 16);
        v193 = *(_QWORD *)(v84 + 24);
        swift_bridgeObjectRetain(v193);
      }
      else
      {
        v193 = 0xEB00000000454C42;
        v188 = 0x414C494156414E55;
      }
      v85 = *(_QWORD *)(v0 + 1704);
      v86 = *(_QWORD *)(v0 + 1440);
      v87 = *(_QWORD *)(v0 + 1432);
      v88 = *(_QWORD *)(v0 + 1424);
      v89 = *(_QWORD *)(v0 + 1192);
      v90 = v85 + *(int *)(*(_QWORD *)(v0 + 1696) + 48);
      v182 = *(_OWORD *)(v0 + 1176);
      sub_100035DE8(*(_QWORD *)(v0 + 1736), v85, type metadata accessor for VerifiedClaim);
      *(_OWORD *)v90 = v182;
      *(_QWORD *)(v90 + 16) = v89;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v86, v85, v88);
      sub_100035DAC(v85, type metadata accessor for VerifiedClaim);
      JWSSignedJSON.payload.getter(v88);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
      v91 = *(_OWORD *)(v0 + 264);
      *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
      *(_OWORD *)(v0 + 128) = v91;
      *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 280);
      v92 = *(_OWORD *)(v0 + 200);
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
      *(_OWORD *)(v0 + 64) = v92;
      v93 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 96) = v93;
      v94 = *(_OWORD *)(v0 + 168);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 152);
      *(_OWORD *)(v0 + 32) = v94;
      v177 = *(_QWORD *)(v0 + 16);
      v183 = *(_QWORD *)(v0 + 24);
      swift_bridgeObjectRetain(v183);
      v95 = sub_100182A60((_QWORD *)(v0 + 16));
      if (v172)
      {
        v96 = *(_QWORD *)(v0 + 1760) + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
        if (*(_BYTE *)(v96 + 8))
          v97 = 180000.0;
        else
          v97 = *(double *)v96;
      }
      else
      {
        v97 = 180000.0;
      }
      v98 = *(_QWORD *)(v0 + 1416);
      v99 = *(_QWORD *)(v0 + 1408);
      v100 = *(_QWORD *)(v0 + 1400);
      v101 = *(_QWORD *)(v0 + 1392);
      v102 = *(_QWORD *)(v0 + 1384);
      v103 = *(_QWORD *)(v0 + 1376);
      v158 = *(_QWORD *)(v0 + 1776);
      v167._rawValue = *(void **)(v0 + 1208);
      v104 = UUID.init()(v95);
      v105 = UUID.uuidString.getter(v104);
      v107 = v106;
      v108 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
      *(_QWORD *)(v0 + 1936) = v108;
      v108(v98, v100);
      *(_QWORD *)(v0 + 1040) = v105;
      *(_QWORD *)(v0 + 1048) = v107;
      *(_QWORD *)(v0 + 1072) = 45;
      *(_QWORD *)(v0 + 1080) = 0xE100000000000000;
      *(_QWORD *)(v0 + 1056) = 0;
      *(_QWORD *)(v0 + 1064) = 0xE000000000000000;
      v109 = sub_1000994DC();
      v110 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v0 + 1072, v0 + 1056, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v109, v109, v109);
      v112 = v111;
      v113 = swift_bridgeObjectRelease(v107);
      Date.init()(v113);
      v114 = UTCTimestamp(_:)(v101);
      v116 = v115;
      v117 = *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8);
      v118 = v117(v101, v103);
      Date.init(timeIntervalSinceNow:)(v118, v97);
      v119 = UTCTimestamp(_:)(v101);
      v121 = v120;
      v117(v101, v103);
      *(_QWORD *)(v0 + 800) = v110;
      *(_QWORD *)(v0 + 808) = v112;
      *(_QWORD *)(v0 + 816) = v177;
      *(_QWORD *)(v0 + 824) = v183;
      *(_QWORD *)(v0 + 832) = v223;
      *(_QWORD *)(v0 + 840) = v202;
      *(_QWORD *)(v0 + 848) = v188;
      *(_QWORD *)(v0 + 856) = v193;
      *(_QWORD *)(v0 + 864) = v158;
      *(_QWORD *)(v0 + 872) = v114;
      *(_QWORD *)(v0 + 880) = v116;
      *(_QWORD *)(v0 + 888) = v119;
      *(_QWORD *)(v0 + 896) = v121;
      v122 = sub_100182B04();
      v123 = sub_100182B48();
      JWSSignedJSON.init(payload:)(v0 + 800, &type metadata for DataSharingAuthorization, v122, v123);
      JWSSignedJSON.setCertificateChain(_:)(v167);
      if (!v124)
      {
        JWSSignedJSON.setKid(_:)(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1352));
        JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
        v143 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
        *(_QWORD *)(v0 + 1944) = v143;
        *v143 = v0;
        v143[1] = sub_100165E5C;
        v73 = *(_QWORD *)(v0 + 1352);
        return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 1216), v73);
      }
      v125 = *(_QWORD *)(v0 + 1768);
      v126 = *(void **)(v0 + 1752);
      v127 = *(void **)(v0 + 1744);
      v220 = *(_QWORD *)(v0 + 1688);
      v224 = *(_QWORD *)(v0 + 1736);
      v206 = *(_QWORD *)(v0 + 1648);
      v210 = *(_QWORD *)(v0 + 1640);
      v213 = *(_QWORD *)(v0 + 1656);
      v128 = *(_QWORD *)(v0 + 1368);
      v129 = *(_QWORD *)(v0 + 1360);
      v130 = *(_QWORD *)(v0 + 1352);
      v131 = *(_QWORD *)(v0 + 1192);
      v132 = *(_QWORD *)(v0 + 1184);
      v133 = *(_QWORD *)(v0 + 1176);
      swift_bridgeObjectRelease(v153);
      swift_bridgeObjectRelease(v125);
      swift_bridgeObjectRelease(v131);
      swift_bridgeObjectRelease(v132);
      swift_bridgeObjectRelease(v133);

      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
      swift_bridgeObjectRelease(v227);
      (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v213, v210);
      sub_100035DAC(v220, type metadata accessor for SharingCredentials);
      v70 = v224;
LABEL_40:
      sub_100008030(v70, &qword_1006364F0);
      goto LABEL_41;
    }
    v41 = *(_QWORD *)(v40 + 8 * v71);
    if (v41)
    {
      v17 = v71;
      goto LABEL_13;
    }
    while (1)
    {
      v17 = v71 + 1;
      if (__OFADD__(v71, 1))
        break;
      if (v17 >= v39)
        goto LABEL_29;
      v41 = *(_QWORD *)(v40 + 8 * v17);
      ++v71;
      if (v41)
        goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100165E5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1944);
  *(_QWORD *)(*(_QWORD *)v1 + 1952) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[241];
    v5 = v2[240];
    v6 = v2[221];
    v7 = v2[149];
    v8 = v2[148];
    v9 = v2[147];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v5);
    v10 = sub_100166DC0;
  }
  else
  {
    v10 = sub_100165F14;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_100165F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::OpaquePointer v88;
  uint64_t v89;
  uint64_t v90;

  v73 = *(void (**)(uint64_t, uint64_t))(v0 + 1936);
  v77 = *(_QWORD *)(v0 + 1928);
  v88._rawValue = *(void **)(v0 + 1768);
  v80 = *(_QWORD *)(v0 + 1920);
  v83 = *(_QWORD *)(v0 + 1752);
  v1 = *(_QWORD *)(v0 + 1736);
  v2 = *(_QWORD *)(v0 + 1720);
  v3 = *(_QWORD *)(v0 + 1696);
  v63 = *(_QWORD *)(v0 + 1672);
  v65 = *(_QWORD *)(v0 + 1688);
  v69 = *(_QWORD *)(v0 + 1416);
  v71 = *(_QWORD *)(v0 + 1400);
  v53 = *(_QWORD *)(v0 + 1352);
  v55 = *(_QWORD *)(v0 + 1368);
  v4 = *(_QWORD *)(v0 + 1344);
  v67 = *(_QWORD *)(v0 + 1336);
  v51 = *(_QWORD *)(v0 + 1328);
  v52 = *(_QWORD *)(v0 + 1360);
  v48 = *(_QWORD *)(v0 + 1312);
  v49 = *(_QWORD *)(v0 + 1304);
  v50 = *(_QWORD *)(v0 + 1320);
  v5 = *(char **)(v0 + 1296);
  v75 = *(_QWORD *)(v0 + 1288);
  v6 = *(int **)(v0 + 1280);
  v57 = *(_QWORD *)(v0 + 1264);
  v59 = *(_QWORD *)(v0 + 1256);
  v61 = *(_QWORD *)(v0 + 1272);
  v7 = *(_QWORD *)(v0 + 1192);
  v8 = *(_QWORD *)(v0 + 1184);
  v9 = *(_QWORD *)(v0 + 1176);
  (*(void (**)(void))(v48 + 16))();
  v10 = (_QWORD *)(v2 + *(int *)(v3 + 48));
  sub_100035DE8(v1, v2, type metadata accessor for VerifiedClaim);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  *v10 = v9;
  v10[1] = v8;
  v10[2] = v7;
  v11 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  swift_retain(v11);
  sub_100035DAC(v2, type metadata accessor for VerifiedClaim);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v4 + *(int *)(v51 + 24), v55, v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v4, v50, v49);
  *(_QWORD *)(v4 + *(int *)(v51 + 20)) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v61, v65 + *(int *)(v63 + 20), v59);
  v12 = sub_100004828(&qword_100636568);
  v13 = *(unsigned __int8 *)(v67 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v12, v14 + *(_QWORD *)(v67 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_10051FFB0;
  v16 = sub_100035DE8(v4, v15 + v14, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  v17 = UUID.init()(v16);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  v73(v69, v71);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0xE000000000000000;
  *((_QWORD *)v5 + 2) = v18;
  *((_QWORD *)v5 + 3) = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(&v5[v6[5]], v61, v59);
  *(_QWORD *)&v5[v6[6]] = v15;
  *(_QWORD *)&v5[v6[7]] = v77;
  *(_QWORD *)&v5[v6[8]] = v80;
  v21 = &v5[v6[9]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = *(_QWORD *)(v83 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  *(_QWORD *)v5 = *(_QWORD *)(v83 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  *((_QWORD *)v5 + 1) = v22;
  sub_100035DE8((uint64_t)v5, v75, type metadata accessor for IdentitySharingRequest);
  v23 = sub_100004790(&qword_100636570, type metadata accessor for IdentitySharingRequest, (uint64_t)&unk_10052B6DC);
  v24 = sub_100004790(&qword_100636578, type metadata accessor for IdentitySharingRequest, (uint64_t)&unk_10052B6B4);
  swift_bridgeObjectRetain(v22);
  JWSSignedJSON.init(payload:)(v75, v6, v23, v24);
  v25 = sub_100004828(&qword_100636580);
  *(_QWORD *)(v0 + 1960) = v25;
  JWSSignedJSON.setCertificateChain(_:)(v88);
  v26 = *(_QWORD *)(v0 + 1768);
  if (v27)
  {
    v28 = *(void **)(v0 + 1752);
    v29 = *(void **)(v0 + 1744);
    v86 = *(_QWORD *)(v0 + 1688);
    v89 = *(_QWORD *)(v0 + 1736);
    v84 = *(_QWORD *)(v0 + 1656);
    v78 = *(_QWORD *)(v0 + 1648);
    v81 = *(_QWORD *)(v0 + 1640);
    v30 = *(_QWORD *)(v0 + 1368);
    v31 = *(_QWORD *)(v0 + 1360);
    v32 = *(_QWORD *)(v0 + 1352);
    v33 = *(_QWORD *)(v0 + 1344);
    v34 = *(_QWORD *)(v0 + 1296);
    v35 = *(_QWORD *)(v0 + 1096);
    swift_bridgeObjectRelease(v26);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v35, v25);
    sub_100035DAC(v34, type metadata accessor for IdentitySharingRequest);
    sub_100035DAC(v33, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v84, v81);
    sub_100035DAC(v86, type metadata accessor for SharingCredentials);
    sub_100008030(v89, &qword_1006364F0);
    v37 = *(_QWORD *)(v0 + 1728);
    v38 = *(_QWORD *)(v0 + 1720);
    v39 = *(_QWORD *)(v0 + 1712);
    v40 = *(_QWORD *)(v0 + 1704);
    v41 = *(_QWORD *)(v0 + 1688);
    v42 = *(_QWORD *)(v0 + 1664);
    v43 = *(_QWORD *)(v0 + 1656);
    v44 = *(_QWORD *)(v0 + 1632);
    v45 = *(_QWORD *)(v0 + 1624);
    v54 = *(_QWORD *)(v0 + 1600);
    v56 = *(_QWORD *)(v0 + 1576);
    v58 = *(_QWORD *)(v0 + 1552);
    v60 = *(_QWORD *)(v0 + 1544);
    v62 = *(_QWORD *)(v0 + 1520);
    v64 = *(_QWORD *)(v0 + 1496);
    v66 = *(_QWORD *)(v0 + 1488);
    v68 = *(_QWORD *)(v0 + 1464);
    v70 = *(_QWORD *)(v0 + 1440);
    v72 = *(_QWORD *)(v0 + 1416);
    v74 = *(_QWORD *)(v0 + 1392);
    v76 = *(_QWORD *)(v0 + 1368);
    v79 = *(_QWORD *)(v0 + 1344);
    v82 = *(_QWORD *)(v0 + 1320);
    v85 = *(_QWORD *)(v0 + 1296);
    v87 = *(_QWORD *)(v0 + 1288);
    v90 = *(_QWORD *)(v0 + 1272);
    swift_task_dealloc(*(_QWORD *)(v0 + 1736));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    swift_task_dealloc(v82);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v90);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 1224);
    swift_bridgeObjectRelease(v26);
    JWSSignedJSON.setKid(_:)(v36, v25);
    JWSSignedJSON.setNonce(_:)(*(Swift::String *)(v0 + 1232));
    v47 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
    *(_QWORD *)(v0 + 1968) = v47;
    *v47 = v0;
    v47[1] = sub_1001665B4;
    return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 1224), v25);
  }
}

uint64_t sub_1001665B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1968);
  *(_QWORD *)(*(_QWORD *)v1 + 1976) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100166FE8;
  else
    v3 = sub_100166618;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100166618()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 1752);
  v2 = *(void **)(v0 + 1744);
  v3 = *(_QWORD *)(v0 + 1736);
  v14 = *(_QWORD *)(v0 + 1728);
  v15 = *(_QWORD *)(v0 + 1720);
  v16 = *(_QWORD *)(v0 + 1712);
  v17 = *(_QWORD *)(v0 + 1704);
  v4 = *(_QWORD *)(v0 + 1656);
  v11 = *(_QWORD *)(v0 + 1648);
  v12 = *(_QWORD *)(v0 + 1640);
  v13 = *(_QWORD *)(v0 + 1688);
  v18 = *(_QWORD *)(v0 + 1664);
  v19 = *(_QWORD *)(v0 + 1632);
  v20 = *(_QWORD *)(v0 + 1624);
  v21 = *(_QWORD *)(v0 + 1600);
  v22 = *(_QWORD *)(v0 + 1576);
  v23 = *(_QWORD *)(v0 + 1552);
  v24 = *(_QWORD *)(v0 + 1544);
  v25 = *(_QWORD *)(v0 + 1520);
  v26 = *(_QWORD *)(v0 + 1496);
  v27 = *(_QWORD *)(v0 + 1488);
  v28 = *(_QWORD *)(v0 + 1464);
  v29 = *(_QWORD *)(v0 + 1440);
  v30 = *(_QWORD *)(v0 + 1416);
  v31 = *(_QWORD *)(v0 + 1392);
  v5 = *(_QWORD *)(v0 + 1368);
  v6 = *(_QWORD *)(v0 + 1360);
  v7 = *(_QWORD *)(v0 + 1352);
  v8 = *(_QWORD *)(v0 + 1344);
  v9 = *(_QWORD *)(v0 + 1296);
  v32 = *(_QWORD *)(v0 + 1320);
  v33 = *(_QWORD *)(v0 + 1288);
  v34 = *(_QWORD *)(v0 + 1272);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);

  sub_100035DAC(v9, type metadata accessor for IdentitySharingRequest);
  sub_100035DAC(v8, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v12);
  sub_100035DAC(v13, type metadata accessor for SharingCredentials);
  sub_100008030(v3, &qword_1006364F0);
  swift_task_dealloc(v3);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v18);
  swift_task_dealloc(v4);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  swift_task_dealloc(v32);
  swift_task_dealloc(v9);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100166870()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v34 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  v36 = *(_QWORD *)(v0 + 1800);
  v38 = *(_QWORD *)(v0 + 1808);
  v32 = *(_QWORD *)(v0 + 1792);
  v40 = *(_QWORD *)(v0 + 1784);
  v1 = *(void **)(v0 + 1744);
  v2 = *(_QWORD *)(v0 + 1736);
  v3 = *(_QWORD *)(v0 + 1688);
  v4 = *(_QWORD *)(v0 + 1656);
  v5 = *(_QWORD *)(v0 + 1648);
  v6 = *(_QWORD *)(v0 + 1640);
  v7 = *(_QWORD *)(v0 + 1600);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100035DAC(v3, type metadata accessor for SharingCredentials);
  sub_100008030(v2, &qword_1006364F0);
  swift_bridgeObjectRelease(v34);
  sub_100182A30(v32, v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  v10 = *(_QWORD *)(v0 + 1728);
  v11 = *(_QWORD *)(v0 + 1720);
  v12 = *(_QWORD *)(v0 + 1712);
  v13 = *(_QWORD *)(v0 + 1704);
  v14 = *(_QWORD *)(v0 + 1688);
  v15 = *(_QWORD *)(v0 + 1664);
  v16 = *(_QWORD *)(v0 + 1656);
  v17 = *(_QWORD *)(v0 + 1632);
  v18 = *(_QWORD *)(v0 + 1624);
  v20 = *(_QWORD *)(v0 + 1600);
  v21 = *(_QWORD *)(v0 + 1576);
  v22 = *(_QWORD *)(v0 + 1552);
  v23 = *(_QWORD *)(v0 + 1544);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1496);
  v26 = *(_QWORD *)(v0 + 1488);
  v27 = *(_QWORD *)(v0 + 1464);
  v28 = *(_QWORD *)(v0 + 1440);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1392);
  v31 = *(_QWORD *)(v0 + 1368);
  v33 = *(_QWORD *)(v0 + 1344);
  v35 = *(_QWORD *)(v0 + 1320);
  v37 = *(_QWORD *)(v0 + 1296);
  v39 = *(_QWORD *)(v0 + 1288);
  v41 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100166AE4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(void **)(v0 + 1896);
  v2 = *(_QWORD *)(v0 + 1880);
  v3 = *(void **)(v0 + 1752);
  v26 = *(void **)(v0 + 1744);
  v47 = *(_QWORD *)(v0 + 1688);
  v49 = *(_QWORD *)(v0 + 1736);
  v45 = *(_QWORD *)(v0 + 1656);
  v41 = *(_QWORD *)(v0 + 1648);
  v43 = *(_QWORD *)(v0 + 1640);
  v37 = *(_QWORD *)(v0 + 1584);
  v39 = *(_QWORD *)(v0 + 1600);
  v32 = *(_QWORD *)(v0 + 1576);
  v34 = *(_QWORD *)(v0 + 1592);
  v28 = *(_QWORD *)(v0 + 1568);
  v30 = *(_QWORD *)(v0 + 1560);
  v24 = *(_QWORD *)(v0 + 1552);
  v4 = *(_QWORD *)(v0 + 1536);
  v5 = *(_QWORD *)(v0 + 1528);
  v6 = *(_QWORD *)(v0 + 1496);
  v7 = *(_QWORD *)(v0 + 1480);
  v8 = *(_QWORD *)(v0 + 1472);
  v9 = *(_QWORD *)(v0 + 1192);

  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, v5);
  swift_release(v9);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1000));
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v30);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v37);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
  sub_100035DAC(v47, type metadata accessor for SharingCredentials);
  sub_100008030(v49, &qword_1006364F0);
  v10 = *(_QWORD *)(v0 + 1728);
  v11 = *(_QWORD *)(v0 + 1720);
  v12 = *(_QWORD *)(v0 + 1712);
  v13 = *(_QWORD *)(v0 + 1704);
  v14 = *(_QWORD *)(v0 + 1688);
  v15 = *(_QWORD *)(v0 + 1664);
  v16 = *(_QWORD *)(v0 + 1656);
  v17 = *(_QWORD *)(v0 + 1632);
  v18 = *(_QWORD *)(v0 + 1624);
  v20 = *(_QWORD *)(v0 + 1600);
  v21 = *(_QWORD *)(v0 + 1576);
  v22 = *(_QWORD *)(v0 + 1552);
  v23 = *(_QWORD *)(v0 + 1544);
  v25 = *(_QWORD *)(v0 + 1520);
  v27 = *(_QWORD *)(v0 + 1496);
  v29 = *(_QWORD *)(v0 + 1488);
  v31 = *(_QWORD *)(v0 + 1464);
  v33 = *(_QWORD *)(v0 + 1440);
  v35 = *(_QWORD *)(v0 + 1416);
  v36 = *(_QWORD *)(v0 + 1392);
  v38 = *(_QWORD *)(v0 + 1368);
  v40 = *(_QWORD *)(v0 + 1344);
  v42 = *(_QWORD *)(v0 + 1320);
  v44 = *(_QWORD *)(v0 + 1296);
  v46 = *(_QWORD *)(v0 + 1288);
  v48 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100166DC0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(void **)(v0 + 1744);
  v2 = *(_QWORD *)(v0 + 1736);
  v3 = *(_QWORD *)(v0 + 1688);
  v4 = *(_QWORD *)(v0 + 1656);
  v5 = *(_QWORD *)(v0 + 1648);
  v6 = *(_QWORD *)(v0 + 1640);
  v7 = *(_QWORD *)(v0 + 1368);
  v8 = *(_QWORD *)(v0 + 1360);
  v9 = *(_QWORD *)(v0 + 1352);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100035DAC(v3, type metadata accessor for SharingCredentials);
  sub_100008030(v2, &qword_1006364F0);
  v10 = *(_QWORD *)(v0 + 1728);
  v11 = *(_QWORD *)(v0 + 1720);
  v12 = *(_QWORD *)(v0 + 1712);
  v13 = *(_QWORD *)(v0 + 1704);
  v14 = *(_QWORD *)(v0 + 1688);
  v15 = *(_QWORD *)(v0 + 1664);
  v16 = *(_QWORD *)(v0 + 1656);
  v17 = *(_QWORD *)(v0 + 1632);
  v18 = *(_QWORD *)(v0 + 1624);
  v20 = *(_QWORD *)(v0 + 1600);
  v21 = *(_QWORD *)(v0 + 1576);
  v22 = *(_QWORD *)(v0 + 1552);
  v23 = *(_QWORD *)(v0 + 1544);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1496);
  v26 = *(_QWORD *)(v0 + 1488);
  v27 = *(_QWORD *)(v0 + 1464);
  v28 = *(_QWORD *)(v0 + 1440);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1392);
  v31 = *(_QWORD *)(v0 + 1368);
  v32 = *(_QWORD *)(v0 + 1344);
  v33 = *(_QWORD *)(v0 + 1320);
  v34 = *(_QWORD *)(v0 + 1296);
  v35 = *(_QWORD *)(v0 + 1288);
  v36 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100166FE8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 1960);
  v2 = *(void **)(v0 + 1744);
  v38 = *(_QWORD *)(v0 + 1688);
  v40 = *(_QWORD *)(v0 + 1736);
  v3 = *(_QWORD *)(v0 + 1648);
  v34 = *(_QWORD *)(v0 + 1640);
  v36 = *(_QWORD *)(v0 + 1656);
  v4 = *(_QWORD *)(v0 + 1368);
  v5 = *(_QWORD *)(v0 + 1360);
  v6 = *(_QWORD *)(v0 + 1352);
  v7 = *(_QWORD *)(v0 + 1344);
  v8 = *(_QWORD *)(v0 + 1296);
  v9 = *(_QWORD *)(v0 + 1096);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
  sub_100035DAC(v8, type metadata accessor for IdentitySharingRequest);
  sub_100035DAC(v7, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v36, v34);
  sub_100035DAC(v38, type metadata accessor for SharingCredentials);
  sub_100008030(v40, &qword_1006364F0);
  v10 = *(_QWORD *)(v0 + 1728);
  v11 = *(_QWORD *)(v0 + 1720);
  v12 = *(_QWORD *)(v0 + 1712);
  v13 = *(_QWORD *)(v0 + 1704);
  v14 = *(_QWORD *)(v0 + 1688);
  v15 = *(_QWORD *)(v0 + 1664);
  v16 = *(_QWORD *)(v0 + 1656);
  v17 = *(_QWORD *)(v0 + 1632);
  v18 = *(_QWORD *)(v0 + 1624);
  v20 = *(_QWORD *)(v0 + 1600);
  v21 = *(_QWORD *)(v0 + 1576);
  v22 = *(_QWORD *)(v0 + 1552);
  v23 = *(_QWORD *)(v0 + 1544);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1496);
  v26 = *(_QWORD *)(v0 + 1488);
  v27 = *(_QWORD *)(v0 + 1464);
  v28 = *(_QWORD *)(v0 + 1440);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1392);
  v31 = *(_QWORD *)(v0 + 1368);
  v32 = *(_QWORD *)(v0 + 1344);
  v33 = *(_QWORD *)(v0 + 1320);
  v35 = *(_QWORD *)(v0 + 1296);
  v37 = *(_QWORD *)(v0 + 1288);
  v39 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1736));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100167258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = sub_100004828(&qword_1006364F0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = sub_10040C3DC((uint64_t)v12, a3, (uint64_t)v14);
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease(v14);
  if (!v3)
  {
    v20 = *(int *)(v7 + 48);
    v27 = a1;
    v21 = (uint64_t *)&v12[v20];
    *v21 = v15;
    v21[1] = v17;
    v21[2] = v19;
    v22 = (uint64_t *)&v10[v20];
    sub_100035DE8((uint64_t)v12, (uint64_t)v10, type metadata accessor for VerifiedClaim);
    *v22 = v15;
    v22[1] = v17;
    v22[2] = v19;
    v28 = v15;
    swift_bridgeObjectRetain(v15);
    sub_100035DAC((uint64_t)v10, type metadata accessor for VerifiedClaim);
    v23 = v21[1];
    sub_10013EBF8(v23, &v28);
    sub_100035DE8((uint64_t)v12, (uint64_t)v10, type metadata accessor for VerifiedClaim);
    v15 = *v21;
    v24 = v21[2];
    sub_100038AE0((uint64_t)v10, v27, type metadata accessor for VerifiedClaim);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    sub_100008030((uint64_t)v12, &qword_1006364F0);
  }
  return v15;
}

uint64_t sub_100167430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint8_t *v34;
  char *v35;
  uint64_t v36;
  id v38;
  Swift::String v39;
  Swift::Bool v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114[24];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char v118[24];
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[8];
  char *v127;

  v6 = v5;
  v109 = a5;
  v108 = a4;
  v113 = a3;
  v99 = a2;
  v98 = a1;
  v104 = type metadata accessor for DIPError.Code(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v105 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for HardwareAttestationType(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for KeystoreKeyType(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost(0);
  v110 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v96 - v23;
  static DaemonSignposts.getVerificationResultKeysAndCertificates.getter(v22);
  v111 = v24;
  v25 = v6;
  v26 = DIPSignpost.init(_:)(v17);
  static DaemonSignposts.getVerificationResultWaitForBAA.getter(v26);
  v127 = v21;
  DIPSignpost.init(_:)(v17);
  v27 = OS_dispatch_group.wait(interval:)(10.0);
  v28 = static DispatchTimeoutResult.== infix(_:_:)(v27 & 1, 0);
  if ((v28 & 1) == 0)
  {
    v29 = defaultLogger()(v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v18;
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "BAA creation timed out.", v33, 2u);
      v34 = v33;
      v18 = v32;
      v25 = v6;
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  v35 = v127;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v36 = v113;
  if (*(_QWORD *)(v113 + 24))
    __asm { BR              X10 }
  swift_bridgeObjectRelease(0xE400000000000000);
  v38 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v39._countAndFlagsBits = 0xD000000000000015;
  v39._object = (void *)0x800000010054DC80;
  v40 = NSUserDefaults.internalBool(forKey:)(v39);

  if (v40)
  {
    v41 = sub_1000552C8();
    v42 = v112;
    sub_100169B64((uint64_t)v41, 1, 0, 0xF000000000000000, (uint64_t)&v123);
    if (v42)
    {
      v43 = *(void (**)(char *, uint64_t))(v110 + 8);
      v43(v35, v18);
      swift_bridgeObjectRelease(v41);
      v73 = v111;
LABEL_19:
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v43(v73, v18);
      return v18;
    }
    v97 = v25;
    v112 = v18;
    swift_bridgeObjectRelease(v41);
    v50 = v124;
    v51 = v125;
    sub_10000806C(&v123, v124);
    v52 = *(_QWORD *)(v36 + 16);
    v53 = *(_QWORD *)(v52 + 64);
    v54 = *(_QWORD *)(v52 + 72);
    v55 = v106;
    v56 = v107;
    (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v10, enum case for KeystoreKeyType.standard(_:), v107);
    swift_bridgeObjectRetain(v54);
    v65 = dispatch thunk of DIPKeystoreProtocol.identityKeyLabel(for:userInfo:type:)(v53, v54, v108, v109, v10, v50, v51);
    v67 = v66;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v56);
    swift_bridgeObjectRelease(v54);
    v68 = v124;
    v69 = v125;
    sub_10000806C(&v123, v124);
    v70 = v101;
    v71 = v100;
    v72 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for HardwareAttestationType.IDV(_:), v102);
    dispatch thunk of DIPKeystoreProtocol.retrieveIdentityKey(label:constraints:attestationType:)(&v121, v65, v67, 0, v71, v68, v69);
    v45 = 0;
    v18 = v112;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
    swift_bridgeObjectRelease(v67);
    sub_1000A1F54((uint64_t)&v121, (uint64_t)v126, &qword_100636508);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v123);
    v73 = v111;
    v36 = v113;
  }
  else
  {
    v97 = v25;
    v44 = v25 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey;
    swift_beginAccess(v44, v114, 0, 0);
    sub_100038B24(v44, (uint64_t)v126, &qword_100636508);
    v73 = v111;
    v45 = v112;
  }
  sub_100038B24((uint64_t)v126, (uint64_t)&v121, &qword_100636508);
  if (!v122)
  {
    sub_100008030((uint64_t)&v121, &qword_100636508);
    v57 = v105;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v105, enum case for DIPError.Code.unexpectedDaemonState(_:), v104);
    v58 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v59 = type metadata accessor for DIPError(0);
    v60 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v59, v60, 0, 0);
    v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010054DBD0, 0, v57, 0, v58, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000042, 0x800000010054DC00, 3099);
    swift_willThrow(v61);
    sub_100008030((uint64_t)v126, &qword_100636508);
    v43 = *(void (**)(char *, uint64_t))(v110 + 8);
    v43(v127, v18);
    goto LABEL_19;
  }
  v46 = v18;
  sub_100008018(&v121, (uint64_t)&v123);
  v47 = v124;
  v48 = v125;
  sub_10000806C(&v123, v124);
  v49 = dispatch thunk of IdentityKey.attestation(_:)(0, v47, v48);
  if (v45)
  {
LABEL_13:
    sub_100008030((uint64_t)v126, &qword_100636508);
    v43 = *(void (**)(char *, uint64_t))(v110 + 8);
    v18 = v46;
    v43(v127, v46);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v123);
    goto LABEL_19;
  }
  v18 = v49;
  v62 = v97;
  if (*(_BYTE *)(v97 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) == 1)
  {
    sub_100008030((uint64_t)v126, &qword_100636508);
    v63 = *(void (**)(char *, uint64_t))(v110 + 8);
    v64 = v46;
    v63(v127, v46);
    sub_10002581C((uint64_t)&v123, v98);
    sub_10002581C((uint64_t)&v123, v99);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v75 = sub_10005543C();
    sub_100169B64((uint64_t)v75, 0, 0, 0xF000000000000000, (uint64_t)&v121);
    swift_bridgeObjectRelease(v75);
    v76 = v62 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey;
    swift_beginAccess(v62 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey, v118, 0, 0);
    sub_100038B24(v76, (uint64_t)&v119, &qword_100636508);
    if (v120)
    {
      sub_10002581C((uint64_t)&v119, (uint64_t)&v115);
      sub_100008030((uint64_t)&v119, &qword_100636508);
      v77 = v116;
      v78 = v117;
      sub_10000806C(&v115, v116);
      v79 = (_QWORD *)dispatch thunk of IdentityKey.attestation(_:)(0, v77, v78);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v115);
      v36 = v113;
    }
    else
    {
      sub_100008030((uint64_t)&v119, &qword_100636508);
      v79 = _swiftEmptyArrayStorage;
    }
    if (!v79[2])
    {
      swift_bridgeObjectRelease(v79);
      sub_10002581C((uint64_t)&v121, (uint64_t)&v115);
      v80 = (_QWORD *)swift_allocObject(&unk_100608F98, 80, 7);
      sub_100008018(&v115, (uint64_t)(v80 + 2));
      v81 = v108;
      v80[7] = v36;
      v80[8] = v81;
      v82 = v109;
      v80[9] = v109;
      swift_retain(v36);
      swift_bridgeObjectRetain(v82);
      v83 = sub_100004828(&qword_100636520);
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000042, 0x800000010054DC00, 3120, &unk_100636518, v80, v83);
      swift_release(v80);
      swift_beginAccess(v76, &v115, 33, 0);
      sub_100184E1C((uint64_t)&v119, v76, &qword_100636508);
      swift_endAccess(&v115);
      sub_100038B24(v76, (uint64_t)&v119, &qword_100636508);
      if (v120)
      {
        sub_10002581C((uint64_t)&v119, (uint64_t)&v115);
        sub_100008030((uint64_t)&v119, &qword_100636508);
        v94 = v116;
        v95 = v117;
        sub_10000806C(&v115, v116);
        v79 = (_QWORD *)dispatch thunk of IdentityKey.attestation(_:)(0, v94, v95);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v115);
      }
      else
      {
        sub_100008030((uint64_t)&v119, &qword_100636508);
        v79 = _swiftEmptyArrayStorage;
      }
    }
    sub_100038B24(v76, (uint64_t)&v115, &qword_100636508);
    if (!v116)
    {
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v79);
      sub_100008030((uint64_t)&v115, &qword_100636508);
      v89 = v105;
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v105, enum case for DIPError.Code.internalError(_:), v104);
      v90 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v91 = type metadata accessor for DIPError(0);
      v92 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v91, v92, 0, 0);
      v93 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6B205053206C696ELL, 0xEB000000002E7965, 0, v89, 0, v90, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000042, 0x800000010054DC00, 3131);
      swift_willThrow(v93);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v121);
      goto LABEL_13;
    }
    sub_100008018(&v115, (uint64_t)&v119);
    if (!*(_QWORD *)(v18 + 16) || !v79[2])
    {
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v79);
      v84 = v105;
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v105, enum case for DIPError.Code.unexpectedDeviceState(_:), v104);
      v85 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v86 = type metadata accessor for DIPError(0);
      v87 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v86, v87, 0, 0);
      v88 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x800000010054DC50, 0, v84, 0, v85, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000042, 0x800000010054DC00, 3135);
      swift_willThrow(v88);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v119);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v121);
      goto LABEL_13;
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v121);
    sub_100008030((uint64_t)v126, &qword_100636508);
    v63 = *(void (**)(char *, uint64_t))(v110 + 8);
    v64 = v46;
    v63(v127, v46);
    sub_10002581C((uint64_t)&v123, v98);
    sub_100008018(&v119, v99);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v123);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v63(v73, v64);
  return v18;
}

uint64_t sub_100168398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v8[7] = a8;
  v8[8] = v22;
  v8[5] = a6;
  v8[6] = a7;
  v8[3] = a2;
  v8[4] = a5;
  v8[2] = a1;
  v13 = sub_100004828((uint64_t *)&unk_1006364E0);
  v8[9] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[10] = v14;
  v8[11] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_1006336F8);
  v8[12] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[13] = v16;
  v8[14] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_1006364F0);
  v8[15] = v17;
  v18 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[16] = swift_task_alloc(v18);
  v19 = swift_task_alloc(v18);
  v8[17] = v19;
  sub_100035DE8(a4, v19, type metadata accessor for VerifiedClaim);
  v20 = (_QWORD *)(v19 + *(int *)(v17 + 48));
  *v20 = a5;
  v20[1] = a6;
  v20[2] = a7;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  return swift_task_switch(sub_1001684D8, 0, 0);
}

uint64_t sub_1001684D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  __int128 v17;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 48);
  v5._rawValue = *(void **)(v0 + 56);
  v7 = v1 + *(int *)(*(_QWORD *)(v0 + 120) + 48);
  v17 = *(_OWORD *)(v0 + 32);
  sub_100035DE8(*(_QWORD *)(v0 + 136), v1, type metadata accessor for VerifiedClaim);
  *(_OWORD *)v7 = v17;
  *(_QWORD *)(v7 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_100035DAC(v1, type metadata accessor for VerifiedClaim);
  v8 = sub_100099FFC(&qword_1006364F8, &qword_1006336F8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  v9 = sub_100099FFC(&qword_100636500, &qword_1006336F8, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
  JWSSignedJSON.init(payload:)(v2, v3, v8, v9);
  JWSSignedJSON.setCertificateChain(_:)(v5);
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 72));
    sub_100008030(v12, &qword_1006364F0);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    JWSSignedJSON.setKid(_:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    v16 = (_QWORD *)swift_task_alloc(async function pointer to JWSSignedJSON.sign(_:)[1]);
    *(_QWORD *)(v0 + 144) = v16;
    *v16 = v0;
    v16[1] = sub_1001686A8;
    return JWSSignedJSON.sign(_:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_1001686A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100168830;
  else
    v3 = sub_10016870C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10016870C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v4, *(_QWORD *)(v0 + 16), v6);
  v9 = v1 + *(int *)(v3 + 48);
  sub_100035DE8(v2, v1, type metadata accessor for VerifiedClaim);
  sub_100008030(v2, &qword_1006364F0);
  *(_OWORD *)v9 = v12;
  *(_QWORD *)(v9 + 16) = v7;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  swift_retain(v10);
  sub_100035DAC(v1, type metadata accessor for VerifiedClaim);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v4, v6);
  *(_QWORD *)(v8 + *(int *)(type metadata accessor for VerifiedClaimPresentment(0) + 20)) = v10;
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v13);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100168830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 72));
  sub_100008030(v1, &qword_1006364F0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001688B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[45] = a4;
  v5[46] = v4;
  v5[43] = a2;
  v5[44] = a3;
  v5[42] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[47] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[48] = v7;
  v5[49] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828((uint64_t *)&unk_1006364D0);
  v5[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100635E50);
  v5[51] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[52] = v10;
  v5[53] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100168970, 0, 0);
}

uint64_t sub_100168970()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 368) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context))
  {
    v13 = *(_QWORD *)(v0 + 392);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 104))(v13, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 376));
    v14 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054DA80, 0, v13, 0, v14, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3155);
LABEL_11:
    swift_willThrow(v17);
LABEL_12:
    v29 = *(_QWORD *)(v0 + 392);
    v28 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = sub_10014C6D4();
  if (!v2)
  {
    v18 = *(_QWORD *)(v0 + 392);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 104))(v18, enum case for DIPError.Code.invalidSPURL(_:), *(_QWORD *)(v0 + 376));
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010054DAE0, 0, v18, 0, v19, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3158);
    goto LABEL_11;
  }
  v3 = v2;
  v4 = *(void **)(*(_QWORD *)(v0 + 368) + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService);
  *(_QWORD *)(v0 + 432) = v4;
  if (!v4)
  {
    v23 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 376);
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, enum case for DIPError.Code.unexpectedDaemonState(_:), v24);
    v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x800000010054DB10, 0, v22, 0, v25, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3161);
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 352) + 24);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL),
        (*(_QWORD *)(v0 + 440) = v6) == 0))
  {
    v32 = *(_QWORD *)(v0 + 384);
    v31 = *(_QWORD *)(v0 + 392);
    v33 = *(_QWORD *)(v0 + 376);
    v34 = v4;
    swift_bridgeObjectRelease(v3);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.invalidSPURL(_:), v33);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v36, v37, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010054DB30, 0, v31, 0, v35, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3168);
    swift_willThrow(v38);

    goto LABEL_12;
  }
  if (*(_BYTE *)(v6 + 32) == 1)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(void **)(v6 + 24);
    v41 = (uint64_t)v1;
    v42 = v2;
    swift_bridgeObjectRetain(v2);
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    String.append(_:)(v9);
    v10 = v41;
    v11 = v42;
    v12 = v4;
    swift_retain(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v39 = v4;
    swift_retain(v6);
    swift_bridgeObjectRelease(v3);
    v10 = *(_QWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain(v11);
  }
  *(_QWORD *)(v0 + 448) = v11;
  v40 = (_QWORD *)swift_task_alloc(dword_100635E2C);
  *(_QWORD *)(v0 + 456) = v40;
  *v40 = v0;
  v40[1] = sub_100168E24;
  return sub_100137620(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 344), v10, v11, *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 352));
}

uint64_t sub_100168E24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 448));
  if (v0)
    v4 = sub_100169100;
  else
    v4 = sub_100168E98;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100168E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  JWSSignedJSON.payload.getter(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  v5 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 128) = v5;
  v6 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 160) = v6;
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 64) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 96) = v8;
  v9 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 32) = v9;
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain(v11);
  sub_1001393FC((_QWORD *)(v0 + 16));
  UUID.init(uuidString:)(v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v3, 1, v12);
  v16 = *(void **)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 440);
  if (v14 == 1)
  {
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 384);
    sub_100008030(*(_QWORD *)(v0 + 400), (uint64_t *)&unk_1006364D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v17, enum case for DIPError.Code.serverResponseInconsistent(_:), v18);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010054DBA0, 0, v17, 0, v20, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3179);
    swift_willThrow(v23);
    swift_release(v15);

    v24 = *(_QWORD *)(v0 + 392);
    v25 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 424);
    v28 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 336);
    swift_release(*(_QWORD *)(v0 + 440));

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v29, v27, v12);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100169100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 464);
  v3 = *(void **)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 376));
  swift_errorRetain(v1);
  v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010054DB70, v1, v4, 0, v5, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000027, 0x800000010054DAB0, 3175);
  swift_willThrow(v8);
  swift_errorRelease(v1);
  swift_release(v2);

  v9 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016926C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  SecCertificateRef_optional v54;
  SecCertificateRef value;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v80)(void);
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t, _QWORD);
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD v99[2];
  __int128 v100;
  unsigned int v101;
  void (*v102)(void);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;

  v127 = a5;
  v120 = a7;
  v129 = a6;
  v124 = a3;
  v125 = a4;
  v122 = a1;
  v123 = a2;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for EncryptedMessageEntity(0);
  v116 = *(_QWORD *)(v118 - 8);
  v13 = __chkstk_darwin(v118);
  v119 = (char *)v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v121 = (char *)v99 - v15;
  v16 = sub_100004828(&qword_100636468);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v117 = (char *)v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v126 = (uint64_t)v99 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)v99 - v22;
  v24 = sub_100004828((uint64_t *)&unk_100636010);
  EncryptedMessage.message.getter(v24);
  v25 = EncryptedDataContainer.data.getter(v16);
  v27 = v26;
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  v114 = v17;
  v115 = v28;
  v28((uint64_t)v23, v16);
  if (!v27
    || (v29 = Data.init(base64Encoded:options:)(v25, v27, 0),
        v31 = v30,
        swift_bridgeObjectRelease(v27),
        v31 >> 60 == 15))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.badLogic(_:), v9);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000011, 0x800000010054D690, 0, v12, 0, v32, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000016, 0x800000010054D6B0, 3187);
    return swift_willThrow(v35);
  }
  v109 = v10;
  v110 = v9;
  v99[0] = v16;
  v99[1] = a8;
  v111 = v12;
  v112 = v29;
  v113 = v31;
  v37 = sub_100004828((uint64_t *)&unk_100636470);
  v38 = sub_100004828(&qword_100635918);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(_QWORD *)(v39 + 72);
  v41 = *(unsigned __int8 *)(v39 + 80);
  v42 = (v41 + 32) & ~v41;
  v106 = v37;
  v104 = v42 + 2 * v40;
  v103 = v41 | 7;
  v43 = swift_allocObject(v37, v104, v41 | 7);
  v100 = xmmword_1005208D0;
  *(_OWORD *)(v43 + 16) = xmmword_1005208D0;
  v105 = v42;
  v44 = (_QWORD *)(v43 + v42 + *(int *)(v38 + 48));
  v45 = enum case for ECIESOption.recipientSigningKey(_:);
  v46 = type metadata accessor for ECIESOption(0);
  v47 = *(void (**)(void))(*(_QWORD *)(v46 - 8) + 104);
  v101 = v45;
  ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v43 + v42, v45, v46);
  v48 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v49 = __DataStorage.init(length:)(65);
  *v44 = 0x4100000000;
  v44[1] = v49 | 0x4000000000000000;
  v107 = v40;
  v108 = v38;
  v50 = (_QWORD *)(v43 + v42 + v40 + *(int *)(v38 + 48));
  v51 = enum case for ECIESOption.senderSigningKey(_:);
  v102 = v47;
  v47();
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  v52 = __DataStorage.init(length:)(65);
  *v50 = 0x4100000000;
  v50[1] = v52 | 0x4000000000000000;
  v53 = sub_10011E9F0(v43);
  v54.value = SecTrustRef.getLeafCertificate()().value;
  if (!v54.value)
  {
    swift_bridgeObjectRelease(v53);
    v63 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, enum case for DIPError.Code.serverResponseInconsistent(_:), v110);
    v64 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v65 = type metadata accessor for DIPError(0);
    v66 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v65, v66, 0, 0);
    v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010054D6D0, 0, v63, 0, v64, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000016, 0x800000010054D6B0, 3192);
    swift_willThrow(v67);
    return sub_100007F78(v112, v113);
  }
  value = v54.value;
  v56 = copyPublicKeyDataFromCertificate(_:)(v54.value);
  if (v57 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v53);
    v58 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, enum case for DIPError.Code.keychainKeyExportFailure(_:), v110);
    v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v60 = type metadata accessor for DIPError(0);
    v61 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v60, v61, 0, 0);
    v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054D710, 0, v58, 0, v59, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000016, 0x800000010054D6B0, 3195);
    swift_willThrow(v62);
LABEL_10:

    return sub_100007F78(v112, v113);
  }
  v68 = (_QWORD *)v56;
  v69 = v57;
  LODWORD(v111) = v51;
  v129 = v53;
  v70 = v127[3];
  v71 = v127[4];
  sub_10000806C(v127, v70);
  v72 = v128;
  v73 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()(v70, v71);
  if (v72)
  {
    sub_100007F78((uint64_t)v68, v69);
    swift_bridgeObjectRelease(v129);
    goto LABEL_10;
  }
  v75 = v73;
  v127 = value;
  v128 = v74;
  v76 = swift_allocObject(v106, v104, v103);
  *(_OWORD *)(v76 + 16) = v100;
  v77 = v76 + v105;
  v110 = v75;
  v78 = v108;
  v79 = (_QWORD *)(v76 + v105 + *(int *)(v108 + 48));
  v80 = v102;
  ((void (*)(uint64_t, _QWORD, uint64_t))v102)(v76 + v105, v101, v46);
  *v79 = v68;
  v79[1] = v69;
  v81 = *(int *)(v78 + 48);
  v82 = v110;
  v83 = (uint64_t *)(v77 + v107 + v81);
  v80();
  v84 = v128;
  *v83 = v82;
  v83[1] = v84;
  sub_100028034((uint64_t)v68, v69);
  sub_100022948(v82, v84);
  v85 = sub_10011E9F0(v76);
  sub_10000806C(v122, v122[3]);
  v122 = v68;
  v86 = v126;
  v87 = v69;
  v89 = v112;
  v88 = v113;
  v90 = v129;
  sub_10013F4BC(v112, v113, v123, v124, v125, v129, v126);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v85);
  v91 = v116;
  v92 = v118;
  (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v121, enum case for EncryptedMessageEntity.device_see(_:), v118);
  v93 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v119, v120, v92);
  v94 = *(void (**)(char *, uint64_t, _QWORD))(v114 + 16);
  v95 = v117;
  v129 = v87;
  v96 = v99[0];
  v94(v117, v86, v99[0]);
  v125 = sub_100004828(&qword_100636480);
  v97 = sub_100182850();
  v98 = sub_1001828D4();
  EncryptedMessage.init(sender:recipient:message:senderSigningKey:)(v121, v93, v95, 0, 0, v125, v97, v98);

  sub_100007F78(v89, v88);
  sub_100007F8C(v82, v128);
  sub_100007F78((uint64_t)v122, v129);
  return v115(v86, v96);
}

uint64_t sub_100169B64@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t result;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *object;
  Swift::String v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t countAndFlagsBits;
  Swift::String v53;
  void *v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  char v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __n128 v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  __n128 v120;
  _BYTE v121[12];
  unsigned int v122;
  _BYTE *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  void (*v129)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146[24];
  _BYTE v147[24];
  _BYTE v148[20];
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char v157[12];
  char v158[8];
  uint64_t v159;

  v142 = a4;
  v141 = a3;
  v140 = a2;
  v144 = a1;
  v138 = a5;
  v137 = type metadata accessor for DIPError.Code(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v6 = &v121[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v121[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v139 = &v121[-v12];
  v145 = type metadata accessor for HardwareAttestationType(0);
  v13 = *(_QWORD *)(v145 - 8);
  v14 = __chkstk_darwin(v145);
  v16 = &v121[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v121[-v18];
  v20 = __chkstk_darwin(v17);
  v22 = &v121[-v21];
  __chkstk_darwin(v20);
  v24 = &v121[-v23];
  v25 = v159;
  result = sub_100281BEC(v144, (uint64_t)&v121[-v23]);
  v159 = v25;
  if (!v25)
  {
    v132 = v8;
    v134 = v22;
    v144 = v13;
    v130 = v11;
    v135 = v7;
    v131 = v16;
    v133 = v19;
    v27 = v24;
    v123 = v6;
    v28 = v139;
    v29 = defaultLogger()(result);
    v30 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.info.getter(v30, v31);
    if (os_log_type_enabled(v30, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v154 = v34;
      *(_DWORD *)v33 = 136446210;
      v35 = swift_beginAccess(v27, v146, 0, 0);
      v36 = HardwareAttestationType.rawValue.getter(v35);
      v38 = v37;
      *(_QWORD *)&v151 = sub_1000E3AC8(v36, v37, (uint64_t *)&v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, (char *)&v151 + 8, v33 + 4);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v32, "pre-selected attestation type is %{public}s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }

    v132 = *(_QWORD *)(v132 + 8);
    ((void (*)(_BYTE *, uint64_t))v132)(v28, v135);
    v39 = swift_beginAccess(v27, v158, 0, 0);
    v40 = HardwareAttestationType.rawValue.getter(v39);
    v42 = v41;
    object = (void *)0xE000000000000000;
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)&v154 = v40;
    *((_QWORD *)&v154 + 1) = v42;
    v44._countAndFlagsBits = 45;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    v45 = v140;
    if ((v140 & 1) != 0)
      v46 = 1702195828;
    else
      v46 = 0x65736C6166;
    if ((v140 & 1) != 0)
      v47 = 0xE400000000000000;
    else
      v47 = 0xE500000000000000;
    v48 = v47;
    String.append(_:)(*(Swift::String *)&v46);
    swift_bridgeObjectRelease(v47);
    v49._countAndFlagsBits = 45;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v50 = v142;
    v51 = v141;
    countAndFlagsBits = 0;
    if (v142 >> 60 != 15)
    {
      v53 = Data.base64EncodedString(options:)(0);
      countAndFlagsBits = v53._countAndFlagsBits;
      object = v53._object;
    }
    v54 = object;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    swift_bridgeObjectRelease(object);
    v55 = v154;
    v56 = (_QWORD *)(v143 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__keystoreDict);
    swift_beginAccess(v143 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__keystoreDict, v157, 0, 0);
    v125 = v56;
    v57 = *v56;
    v58 = *(_QWORD *)(v57 + 16);
    v126 = v55;
    if (v58)
    {
      swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
      swift_bridgeObjectRetain(v57);
      v59 = sub_1004A8604(v55, *((uint64_t *)&v55 + 1));
      v60 = v133;
      if ((v61 & 1) != 0)
      {
        sub_10002581C(*(_QWORD *)(v57 + 56) + 40 * v59, (uint64_t)&v154);
      }
      else
      {
        v156 = 0;
        v154 = 0u;
        v155 = 0u;
      }
      swift_bridgeObjectRelease(*((_QWORD *)&v55 + 1));
      swift_bridgeObjectRelease(v57);
      if (*((_QWORD *)&v155 + 1))
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v55 + 1));
        sub_100008018(&v154, v138);
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v144 + 8))(v27, v145);
      }
    }
    else
    {
      v156 = 0;
      v154 = 0u;
      v155 = 0u;
      v60 = v133;
    }
    v62 = v51;
    v127 = *((_QWORD *)&v55 + 1);
    sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
    v156 = 0;
    v154 = 0u;
    v155 = 0u;
    v63 = *(void (**)(_QWORD))(v144 + 104);
    v122 = enum case for HardwareAttestationType.SE(_:);
    v64 = v145;
    v129 = (void (*)(_BYTE *, _QWORD, uint64_t))v63;
    v63(v134);
    v65 = sub_100004790(&qword_100634950, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    dispatch thunk of RawRepresentable.rawValue.getter(v64, v65);
    v124 = v65;
    dispatch thunk of RawRepresentable.rawValue.getter(v64, v65);
    v66 = *((_QWORD *)&v151 + 1);
    v67 = *((_QWORD *)&v149 + 1);
    v128 = v27;
    if (v151 == v149)
    {
      swift_bridgeObjectRelease_n(*((_QWORD *)&v151 + 1), 2);
      v68 = v144;
      v139 = *(_BYTE **)(v144 + 8);
      ((void (*)(_BYTE *, uint64_t))v139)(v134, v145);
    }
    else
    {
      v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v151, *((_QWORD *)&v151 + 1), v149, *((_QWORD *)&v149 + 1), 0);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v67);
      v68 = v144;
      v139 = *(_BYTE **)(v144 + 8);
      v70 = ((uint64_t (*)(_BYTE *, uint64_t))v139)(v134, v145);
      if ((v69 & 1) == 0)
      {
        v75 = v130;
        goto LABEL_28;
      }
    }
    v71 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable;
    v72 = *(unsigned __int8 *)(v143 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable);
    if (v72 == 2 || (v72 & 1) != 0)
    {
      v76 = swift_allocObject(&unk_100608F48, 40, 7);
      *(_BYTE *)(v76 + 16) = v45 & 1;
      *(_QWORD *)(v76 + 24) = v62;
      *(_QWORD *)(v76 + 32) = v50;
      v77 = type metadata accessor for DIPKeystoreSecureElement(0);
      v152 = v77;
      v153 = &protocol witness table for DIPKeystoreKeychain;
      sub_100028034(v62, v50);
      v78 = v159;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000038, 0x8000000100548520, 3223, &unk_100636450, v76, v77);
      v159 = v78;
      if (v78)
      {
        sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
        swift_bridgeObjectRelease(v127);
        v79 = v76;
LABEL_37:
        swift_release(v79);
        sub_1001826CC(&v151);
LABEL_38:
        v103 = v128;
        return ((uint64_t (*)(_BYTE *, uint64_t))v139)(v103, v145);
      }
      v110 = v145;
      sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
      swift_release(v76);
      sub_1000A1F54((uint64_t)&v151, (uint64_t)&v154, (uint64_t *)&unk_100636420);
      sub_100038B24((uint64_t)&v154, (uint64_t)&v151, (uint64_t *)&unk_100636420);
      v111 = swift_allocObject(&unk_100608F70, 56, 7);
      sub_1000A1F54((uint64_t)&v151, v111 + 16, (uint64_t *)&unk_100636420);
      runAsyncAndBlock<A>(file:function:line:_:)(&v151, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000038, 0x8000000100548520, 3226, &unk_100636460, v111, &type metadata for Bool);
      v70 = swift_release(v111);
      if (v151 == 1)
      {
        *(_BYTE *)(v143 + v71) = 1;
      }
      else
      {
        *(_BYTE *)(v143 + v71) = 0;
        v118 = v133;
        v129(v133, enum case for HardwareAttestationType.SEP(_:), v110);
        v119 = v128;
        v120 = swift_beginAccess(v128, v147, 1, 0);
        v70 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v144 + 40))(v119, v118, v110, v120);
      }
      v50 = v142;
      v51 = v141;
      v45 = v140;
      v80 = v135;
      v75 = v130;
LABEL_29:
      v81 = defaultLogger()(v70);
      v82 = Logger.logObject.getter(v81);
      v84 = static os_log_type_t.info.getter(v82, v83);
      if (os_log_type_enabled(v82, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v151 = v86;
        v87.n128_u64[0] = 136446210;
        *(_DWORD *)v85 = 136446210;
        v88 = HardwareAttestationType.rawValue.getter(v87);
        v90 = v89;
        *(_QWORD *)&v149 = sub_1000E3AC8(v88, v89, (uint64_t *)&v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 8, v85 + 4);
        v91 = v90;
        v51 = v141;
        v50 = v142;
        swift_bridgeObjectRelease(v91);
        _os_log_impl((void *)&_mh_execute_header, v82, v84, "final selected attestation type is %{public}s", v85, 0xCu);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);

        ((void (*)(_BYTE *, uint64_t))v132)(v130, v135);
      }
      else
      {

        ((void (*)(_BYTE *, uint64_t))v132)(v75, v80);
      }
      v92 = v137;
      v93 = v136;
      v94 = v145;
      v129(v131, enum case for HardwareAttestationType.SEP(_:), v145);
      v95 = v124;
      dispatch thunk of RawRepresentable.rawValue.getter(v94, v124);
      dispatch thunk of RawRepresentable.rawValue.getter(v94, v95);
      v96 = *((_QWORD *)&v151 + 1);
      v97 = *((_QWORD *)&v149 + 1);
      if (v151 == v149)
      {
        swift_bridgeObjectRelease_n(*((_QWORD *)&v151 + 1), 2);
        ((void (*)(_BYTE *, uint64_t))v139)(v131, v145);
      }
      else
      {
        v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v151, *((_QWORD *)&v151 + 1), v149, *((_QWORD *)&v149 + 1), 0);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v97);
        ((void (*)(_BYTE *, uint64_t))v139)(v131, v145);
        if ((v98 & 1) == 0)
        {
          v104 = v133;
          v105 = v145;
          v129(v133, v122, v145);
          v106 = sub_100004790(&qword_100636430, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
          v107 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v104, v105, v106);
          ((void (*)(_BYTE *, uint64_t))v139)(v104, v105);
          v102 = v127;
          if ((v107 & 1) == 0)
          {
            swift_bridgeObjectRelease(v127);
            v112 = v123;
            (*(void (**)(_BYTE *, _QWORD, uint64_t))(v93 + 104))(v123, enum case for DIPError.Code.unimplemented(_:), v92);
            v113 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v114 = type metadata accessor for DIPError(0);
            v115 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            v116 = swift_allocError(v114, v115, 0, 0);
            v117 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x80000001005484F0, 0, v112, 0, v113, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000038, 0x8000000100548520, 3243);
            v159 = v116;
            swift_willThrow(v117);
            sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
            goto LABEL_38;
          }
          goto LABEL_41;
        }
      }
      v99 = swift_allocObject(&unk_100608F20, 40, 7);
      *(_BYTE *)(v99 + 16) = v45 & 1;
      *(_QWORD *)(v99 + 24) = v51;
      *(_QWORD *)(v99 + 32) = v50;
      v100 = type metadata accessor for DIPKeystoreKeychain(0);
      v152 = v100;
      v153 = &protocol witness table for DIPKeystoreKeychain;
      sub_100028034(v51, v50);
      v101 = v159;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000038, 0x8000000100548520, 3238, &unk_100636440, v99, v100);
      v159 = v101;
      v102 = v127;
      if (v101)
      {
        sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
        swift_bridgeObjectRelease(v102);
        v79 = v99;
        goto LABEL_37;
      }
      sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
      swift_release(v99);
      sub_1000A1F54((uint64_t)&v151, (uint64_t)&v154, (uint64_t *)&unk_100636420);
LABEL_41:
      result = sub_100038B24((uint64_t)&v154, (uint64_t)&v149, (uint64_t *)&unk_100636420);
      if (v150)
      {
        sub_100008018(&v149, (uint64_t)&v151);
        swift_beginAccess(v125, v148, 33, 0);
        sub_10047E244((uint64_t)&v151, v126, v102);
        swift_endAccess(v148);
        result = sub_100038B24((uint64_t)&v154, (uint64_t)&v151, (uint64_t *)&unk_100636420);
        v108 = v138;
        v109 = v128;
        if (v152)
        {
          sub_100008030((uint64_t)&v154, (uint64_t *)&unk_100636420);
          sub_100008018(&v151, v108);
          v103 = v109;
          return ((uint64_t (*)(_BYTE *, uint64_t))v139)(v103, v145);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    v73 = v145;
    v129(v60, enum case for HardwareAttestationType.SEP(_:), v145);
    v74 = swift_beginAccess(v27, v147, 1, 0);
    v70 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v68 + 40))(v27, v60, v73, v74);
    v75 = v130;
LABEL_28:
    v80 = v135;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_10016AA90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = type metadata accessor for DIPKeystoreSecureElement(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_100028034(a3, a4);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)[1]);
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = sub_10016AB24;
  return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(a2, a3, a4);
}

uint64_t sub_10016AB24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_10016ABA0, 0, 0);
}

uint64_t sub_10016ABA0()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016ABB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_10063A9C4);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_10016AC0C;
  return sub_10028254C(a2, 0);
}

uint64_t sub_10016AC0C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10016AC68, 0, 0);
}

uint64_t sub_10016AC68()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016AC7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = type metadata accessor for DIPKeystoreKeychain(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_100028034(a3, a4);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)[1]);
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = sub_10016AB24;
  return DIPKeystoreKeychain.init(requireUserAuth:externalizedLAContext:)(a2, a3, a4);
}

uint64_t sub_10016AD10(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  void *v32;
  id v33;
  _QWORD *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD aBlock[5];
  _QWORD *v57;
  _QWORD *v58;

  v4 = type metadata accessor for DIPError.Code(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v54 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v53 = a1;
  v14 = a1;
  v15 = v1;
  v16 = sub_10014CAA4(v14, 0, v13);
  v18 = v17;
  result = swift_bridgeObjectRelease(v13);
  if (!v2)
  {
    v45 = v15;
    v46 = v10;
    v49 = v6;
    v50 = 0;
    v20 = v12;
    v47 = v9;
    v48 = v8;
    v21 = v55;
    v22 = Data.init(base16Encoded:)(v16, v18);
    if (v23 >> 60 == 15)
    {
      v24 = v54;
      (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v54, enum case for DIPError.Code.serverResponseInconsistent(_:), v52);
      v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v26 = type metadata accessor for DIPError(0);
      v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v26, v27, 0, 0);
      v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x656D726F666C616DLL, 0xEF65636E6F6E2064, 0, v24, 0, v25, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000001DLL, 0x800000010054D5E0, 3254);
      return swift_willThrow(v28);
    }
    else
    {
      v29 = v22;
      v30 = v23;
      if ((sub_1000556BC() & 1) != 0)
      {
        v31 = v45;
        v32 = *(void **)&v45[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
        if (v32)
        {
          v33 = v32;
          sub_1002573CC();

        }
        v54 = *(char **)&v31[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoQueue];
        v34 = (_QWORD *)swift_allocObject(&unk_100608E80, 40, 7);
        v34[2] = v31;
        v34[3] = v29;
        v34[4] = v30;
        aBlock[4] = sub_100174F04;
        v57 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1004AB190;
        aBlock[3] = &unk_100608E98;
        v35 = _Block_copy(aBlock);
        v36 = v31;
        v37 = sub_100028034(v29, v30);
        v38 = v20;
        static DispatchQoS.unspecified.getter(v37);
        v58 = _swiftEmptyArrayStorage;
        v39 = v30;
        v40 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v41 = sub_100004828((uint64_t *)&unk_1006308D0);
        v42 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
        v43 = v48;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v41, v42, v21, v40);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v43, v35);
        _Block_release(v35);
        sub_100007F78(v29, v39);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v43, v21);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
        return swift_release(v57);
      }
      else
      {
        return sub_100007F78(v29, v30);
      }
    }
  }
  return result;
}

void sub_10016B120(char *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  id v7;
  char *v8;

  v6 = *(void **)&a1[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper];
  v7 = v6;
  v8 = a1;
  sub_100181430(a2, a3, (uint64_t)v6, (uint64_t)v8);

}

void sub_10016B194(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(a2 + 16, v18, 1, 0);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v10);
  v11 = swift_beginAccess(a2 + 16, v17, 0, 0);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12 && *(_QWORD *)(v12 + 16))
  {
    v13 = defaultLogger()(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "got IDS data", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  dispatch_group_leave(a3);
}

void sub_10016B2F0(_QWORD *a1, uint64_t a2, void *a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const __CFData *isa;
  SecCertificateRef v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  SecCertificateRef v76;
  SecCertificateRef v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;

  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Data.init(base64Encoded:options:)(*a1, a1[1], 1);
  if (v16 >> 60 == 15)
  {
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v17._countAndFlagsBits = 0xD00000000000003FLL;
    v17._object = (void *)0x800000010054DE70;
    String.append(_:)(v17);
    v18._countAndFlagsBits = a2;
    v18._object = a3;
    String.append(_:)(v18);
    v19 = v82;
    v20 = v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.certificateDecodingFailed(_:), v11);
    v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v22, v23, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v19, v20, 0, v14, 0, v21, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000034, 0x800000010054DEB0, 3344);
    swift_willThrow(v24);
    return;
  }
  v84 = a4;
  v81._countAndFlagsBits = a2;
  v81._object = a3;
  v25 = v15;
  v26 = v16;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v28 = SecCertificateCreateWithData(kCFAllocatorDefault, isa);

  if (v28)
  {
    v79 = v26;
    v80 = v25;
    if ((*v84 & 1) != 0)
    {
      v29 = copyPublicKeyDataFromCertificate(_:)(v28);
      if (v30 >> 60 == 15)
      {
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        v31._countAndFlagsBits = 0xD000000000000049;
        v31._object = (void *)0x800000010054DF30;
        String.append(_:)(v31);
        String.append(_:)(v81);
        v32 = v82;
        v33 = v83;
        (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.certificateDecodingFailed(_:), v11);
        v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v35 = type metadata accessor for DIPError(0);
        v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v35, v36, 0, 0);
        v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v32, v33, 0, v14, 0, v34, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000034, 0x800000010054DEB0, 3352);
        swift_willThrow(v37);

      }
      else
      {
        v50 = v30;
        v77 = v28;
        v78 = v29;
        v51 = a5[3];
        v52 = a5[4];
        sub_10000806C(a5, v51);
        v53 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()(v51, v52);
        if (v5)
        {
          v55 = v78;
          v56 = v50;
        }
        else
        {
          v57 = v53;
          v58 = v54;
          v59 = v78;
          sub_1004406E8(v53, v54);
          v61 = v60;
          sub_100007F8C(v57, v58);
          if ((v61 & 1) != 0)
          {
            v62 = v50;
            type metadata accessor for DIPKeystoreKeychain(0);
            v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClassCertificate);
            v65 = v64;
            countAndFlagsBits = v81._countAndFlagsBits;
            object = v81._object;
            static DIPKeystoreKeychain.deleteKeychainItem(label:serialNumber:secClass:)(v81._countAndFlagsBits, v81._object, 0, 0xF000000000000000, v63, v64);
            swift_bridgeObjectRelease(v65);
            v76 = v77;
            static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(v77, countAndFlagsBits, object, 1);
            sub_100007F78(v80, v79);

            sub_100007F78(v78, v62);
            *v84 = 0;
            return;
          }
          v82 = 0;
          v83 = 0xE000000000000000;
          _StringGuts.grow(_:)(67);
          v68._countAndFlagsBits = 0xD000000000000041;
          v68._object = (void *)0x800000010054DF80;
          String.append(_:)(v68);
          String.append(_:)(v81);
          v69 = v82;
          v70 = v83;
          (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.claimKeyMismatch(_:), v11);
          v71 = v50;
          v72 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v73 = type metadata accessor for DIPError(0);
          v74 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v73, v74, 0, 0);
          v75 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v69, v70, 0, v14, 0, v72, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000034, 0x800000010054DEB0, 3356);
          swift_willThrow(v75);
          v55 = v59;
          v56 = v71;
        }
        sub_100007F78(v55, v56);

      }
    }
    else
    {
      type metadata accessor for DIPKeystoreKeychain(0);
      v47 = IDV_INTERMEDIATE_CERT_KEYCHAIN_LABEL.getter();
      v49 = v48;
      static DIPKeystoreKeychain.storeKeychainCertificate(_:label:failIfDuplicate:)(v28, v47, v48, 0);
      if (!v5)
      {
        sub_100007F78(v80, v79);
        swift_bridgeObjectRelease(v49);

        return;
      }

      swift_bridgeObjectRelease(v49);
    }
    v46 = v79;
    v45 = v80;
  }
  else
  {
    v82 = 0;
    v83 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v38._countAndFlagsBits = 0xD00000000000003DLL;
    v38._object = (void *)0x800000010054DEF0;
    String.append(_:)(v38);
    String.append(_:)(v81);
    v39 = v82;
    v40 = v83;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DIPError.Code.certificateDecodingFailed(_:), v11);
    v41 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v42 = type metadata accessor for DIPError(0);
    v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v42, v43, 0, 0);
    v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v39, v40, 0, v14, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000034, 0x800000010054DEB0, 3347);
    swift_willThrow(v44);
    v45 = v25;
    v46 = v26;
  }
  sub_100007F78(v45, v46);
}

id sub_10016BA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[432];
  _BYTE v31[32];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  _BYTE v37[16];
  _BYTE v38[200];
  _BYTE v39[440];

  v0 = type metadata accessor for DIPBackoffStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v10 = *(os_unfair_lock_s **)(qword_100670320 + 56);
  v11 = (uint64_t)&v10[4];
  v12 = v10 + 112;
  os_unfair_lock_lock(v10 + 112);
  sub_1002355D8(v11, (uint64_t)v39);
  os_unfair_lock_unlock(v12);
  sub_1000A1F54((uint64_t)v39, (uint64_t)v30, &qword_100632330);
  sub_1000A1F54((uint64_t)v30, (uint64_t)v31, &qword_100632330);
  if (sub_100035A5C((uint64_t)v31) == 1)
  {
    if (qword_10062F5D0 != -1)
      swift_once(&qword_10062F5D0, sub_1004E0C20);
    v13 = sub_1000352C0((uint64_t)v4, (uint64_t)qword_100670860);
    sub_100035DE8(v13, (uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
    v14 = v29;
  }
  else
  {
    sub_100035A74(&v32);
    sub_100035B1C((uint64_t)v30);
    sub_100035CC0(&v32);
    v15 = (uint64_t *)v36;
    if (v36[8])
      v15 = &v33;
    v16 = *v15;
    v17 = (uint64_t *)v37;
    if (v37[8])
      v17 = &v34;
    v18 = *v17;
    v19 = (uint64_t *)v38;
    if (v38[8])
      v19 = &v35;
    *v3 = *v19;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DIPBackoffStrategy.exponential(_:), v0);
    v20 = v0;
    v14 = v29;
    v22 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    v21 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8);
    *(_QWORD *)v9 = v16;
    *((_QWORD *)v9 + 1) = v18;
    (*(void (**)(char *, uint64_t *, uint64_t))(v1 + 32))(&v9[v4[6]], v3, v20);
    v9[v4[7]] = 1;
    v9[v4[8]] = 1;
    v9[v4[9]] = 0;
    v23 = &v9[v4[10]];
    *(_QWORD *)v23 = v22;
    *((_QWORD *)v23 + 1) = v21;
    swift_bridgeObjectRetain(v21);
  }
  v24 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  v25 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8);
  sub_100035DE8((uint64_t)v9, (uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPAssessmentWebService());
  swift_bridgeObjectRetain(v25);
  v26 = sub_10002F314(v24, v25, (uint64_t)v7);
  sub_100035DAC((uint64_t)v9, type metadata accessor for DIPHTTPSession.Configuration);
  return v26;
}

char *sub_10016BD54()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _BYTE v27[432];
  _QWORD v28[55];
  _BYTE v29[432];

  v1 = v0;
  v2 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3);
  v7 = &v27[-v6 - 8];
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v8 = *(os_unfair_lock_s **)(qword_100670320 + 56);
  v9 = (uint64_t)&v8[4];
  v10 = v8 + 112;
  os_unfair_lock_lock(v8 + 112);
  sub_1002355D8(v9, (uint64_t)v29);
  os_unfair_lock_unlock(v10);
  sub_1000A1F54((uint64_t)v29, (uint64_t)v27, &qword_100632330);
  sub_1000A1F54((uint64_t)v27, (uint64_t)v28, &qword_100632330);
  if (sub_100035A5C((uint64_t)v28) == 1)
  {
    if (qword_10062F5C8 != -1)
      swift_once(&qword_10062F5C8, sub_1004E0C10);
    v11 = sub_1000352C0((uint64_t)v2, (uint64_t)qword_100670848);
    sub_100035DE8(v11, (uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  }
  else
  {
    v12 = v28[5];
    v13 = v28[6];
    v14 = (_QWORD *)((char *)v7 + v2[6]);
    sub_100035B1C((uint64_t)v27);
    *v14 = v28[7];
    v15 = enum case for DIPBackoffStrategy.exponential(_:);
    v16 = type metadata accessor for DIPBackoffStrategy(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
    v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    *v7 = v12;
    v7[1] = v13;
    *((_BYTE *)v7 + v2[7]) = 0;
    v19 = *v17;
    v18 = v17[1];
    *((_BYTE *)v7 + v2[8]) = 1;
    *((_BYTE *)v7 + v2[9]) = 0;
    v20 = (_QWORD *)((char *)v7 + v2[10]);
    *v20 = v19;
    v20[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8);
  sub_100035DE8((uint64_t)v7, (uint64_t)v5, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService(0));
  swift_bridgeObjectRetain(v22);
  v23 = (char *)sub_10024000C(v21, v22, (uint64_t)v5);
  v24 = &v23[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
  *((_QWORD *)v24 + 1) = &off_100608E50;
  swift_unknownObjectWeakAssign(v24, v1);
  sub_100035DAC((uint64_t)v7, type metadata accessor for DIPHTTPSession.Configuration);
  return v23;
}

id sub_10016C004(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26;

  v3 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v26 - v7);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 && (v10 = v9 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity, (*(_BYTE *)(v10 + 32) & 1) == 0))
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 8);
    v14 = (_QWORD *)((char *)v8 + v3[6]);
    *v14 = *(_QWORD *)(v10 + 24);
    v15 = enum case for DIPBackoffStrategy.exponential(_:);
    v16 = type metadata accessor for DIPBackoffStrategy(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
    v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier);
    *v8 = v13;
    v8[1] = v12;
    *((_BYTE *)v8 + v3[7]) = 0;
    v19 = *v17;
    v18 = v17[1];
    *((_BYTE *)v8 + v3[8]) = 1;
    *((_BYTE *)v8 + v3[9]) = 0;
    v20 = (_QWORD *)((char *)v8 + v3[10]);
    *v20 = v19;
    v20[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    if (qword_10062F5C8 != -1)
      swift_once(&qword_10062F5C8, sub_1004E0C10);
    v11 = sub_1000352C0((uint64_t)v3, (uint64_t)qword_100670848);
    sub_100035DE8(v11, (uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  }
  v21 = v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation;
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
  v23 = *(_QWORD *)(v21 + 8);
  sub_100035DE8((uint64_t)v8, (uint64_t)v6, type metadata accessor for DIPHTTPSession.Configuration);
  objc_allocWithZone((Class)type metadata accessor for DIPSPWebService());
  swift_bridgeObjectRetain(v23);
  v24 = sub_1001358EC(v22, v23, (uint64_t)v6);
  sub_100035DAC((uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  return v24;
}

uint64_t sub_10016C1F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2[31] = a1;
  v2[32] = a2;
  v3 = type metadata accessor for Date(0);
  v2[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[34] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[35] = swift_task_alloc(v5);
  v2[36] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[37] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[38] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v8);
  v2[40] = swift_task_alloc(v8);
  v9 = type metadata accessor for DIPError.Code(0);
  v2[41] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[42] = v10;
  v2[43] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError(0);
  v2[44] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[45] = v12;
  v2[46] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v2[47] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[48] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[49] = swift_task_alloc(v15);
  v2[50] = swift_task_alloc(v15);
  v2[51] = swift_task_alloc(v15);
  v16 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v2[52] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[53] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[54] = swift_task_alloc(v18);
  v2[55] = swift_task_alloc(v18);
  return swift_task_switch(sub_10016C368, 0, 0);
}

uint64_t sub_10016C368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  char v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  os_unfair_lock_s *v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  unsigned int v64;
  uint64_t (*v65)(_QWORD, _QWORD);
  void (*v66)(uint64_t, _QWORD, uint64_t);
  uint64_t v67;
  uint64_t v68;

  v1 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 208), v1);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  sub_10000806C((_QWORD *)(v0 + 208), v2);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(1, v2, v3);
  *(_QWORD *)(v0 + 448) = 0;
  v4 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 208));
  v6 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t))(v0 + 248))(v4);
  v9 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104);
  v10(v6, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v8);
  v11 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v5, v6);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v6, v8);
  v13 = ((uint64_t (*)(uint64_t, uint64_t))v12)(v5, v8);
  if ((v11 & 1) == 0)
  {
    if (qword_10062F5B0 != -1)
      v13 = swift_once(&qword_10062F5B0, sub_100486FCC);
    v14 = *(_QWORD *)(v0 + 408);
    static DispatchWorkItemFlags.barrier.getter(v13);
    OS_dispatch_queue.sync<A>(flags:execute:)(v14, sub_1001850AC);
    v66 = v10;
    v65 = *(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 8);
    v15 = v65(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 376));
    v17 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 440);
    v18 = *(_QWORD *)(v0 + 416);
    (*(void (**)(uint64_t))(v0 + 248))(v15);
    v10(v17, v9, v18);
    v19 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v16, v17);
    v12(v17, v18);
    v20 = ((uint64_t (*)(uint64_t, uint64_t))v12)(v16, v18);
    if ((v19 & 1) == 0)
    {
      v64 = v9;
      v21 = *(_QWORD *)(v0 + 400);
      v23 = *(_QWORD *)(v0 + 280);
      v22 = *(_QWORD *)(v0 + 288);
      v25 = *(_QWORD *)(v0 + 264);
      v24 = *(_QWORD *)(v0 + 272);
      v26 = qword_100670828;
      Date.init()(v20);
      static Date.- infix(_:_:)(v23, 604800.0);
      v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
      v28 = v27(v23, v25);
      static DispatchWorkItemFlags.barrier.getter(v28);
      v29 = swift_task_alloc(32);
      *(_QWORD *)(v29 + 16) = v26;
      *(_QWORD *)(v29 + 24) = v22;
      OS_dispatch_queue.sync<A>(flags:execute:)(v21, sub_1001850C4);
      v30 = *(_QWORD *)(v0 + 288);
      v31 = *(_QWORD *)(v0 + 264);
      v65(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 376));
      swift_task_dealloc(v29);
      v32 = v27(v30, v31);
      v34 = *(_QWORD *)(v0 + 432);
      v33 = *(_QWORD *)(v0 + 440);
      v35 = *(_QWORD *)(v0 + 416);
      (*(void (**)(uint64_t))(v0 + 248))(v32);
      v66(v34, v64, v35);
      LOBYTE(v30) = static DIPBackgroundDeferralStatus.== infix(_:_:)(v33, v34);
      v12(v34, v35);
      v36 = ((uint64_t (*)(uint64_t, uint64_t))v12)(v33, v35);
      if ((v30 & 1) == 0)
      {
        v37 = *(_QWORD *)(v0 + 392);
        static DispatchWorkItemFlags.barrier.getter(v36);
        OS_dispatch_queue.sync<A>(flags:execute:)(v37, sub_1001850DC);
        v38 = v65(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
        v40 = *(_QWORD *)(v0 + 432);
        v39 = *(_QWORD *)(v0 + 440);
        v41 = *(_QWORD *)(v0 + 416);
        (*(void (**)(uint64_t))(v0 + 248))(v38);
        v66(v40, v64, v41);
        v42 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v39, v40);
        v12(v40, v41);
        v12(v39, v41);
        if ((v42 & 1) == 0)
        {
          if (qword_10062F490 != -1)
            swift_once(&qword_10062F490, sub_100139C84);
          v53 = qword_1006702A0;
          v54 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
          v55 = (uint64_t)&v54[4];
          v56 = v54 + 52;
          os_unfair_lock_lock(v54 + 52);
          sub_100139D14(v55, v53, (_OWORD *)(v0 + 16));
          os_unfair_lock_unlock(v56);
          v57 = *(_QWORD *)(v0 + 88);
          swift_retain(v57);
          sub_10001D410((_QWORD *)(v0 + 16));
          v58 = *(os_unfair_lock_s **)(v57 + 16);
          v59 = v58 + 4;
          v60 = v58 + 6;
          os_unfair_lock_lock(v58 + 6);
          sub_100003C14(v59, &v68);
          os_unfair_lock_unlock(v60);
          v61 = v68;
          swift_release(v57);
          if (v61 <= 0)
            sub_100394798();
          v62._countAndFlagsBits = 0xD00000000000001CLL;
          v62._object = (void *)0x80000001005504A0;
          v63._countAndFlagsBits = 0x3462333231303338;
          v63._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v63, v62);
        }
      }
    }
  }
  v43 = *(_QWORD *)(v0 + 432);
  v45 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 392);
  v47 = *(_QWORD *)(v0 + 368);
  v48 = *(_QWORD *)(v0 + 344);
  v50 = *(_QWORD *)(v0 + 312);
  v49 = *(_QWORD *)(v0 + 320);
  v51 = *(_QWORD *)(v0 + 288);
  v67 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v67);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016CEB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 456);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_release(v1);
  return swift_task_switch(sub_10016CF0C, 0, 0);
}

uint64_t sub_10016CF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_errorRelease(*(_QWORD *)(v0 + 448));
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016CFD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[3] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[4] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[5] = swift_task_alloc(v3);
  v0[6] = swift_task_alloc(v3);
  return swift_task_switch(sub_10016D03C, 0, 0);
}

uint64_t sub_10016D03C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v1 = (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState");
  if ((unint64_t)(v1 - 1) > 1)
  {
    v12 = (_QWORD *)swift_task_alloc(async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1]);
    *(_QWORD *)(v0 + 56) = v12;
    *v12 = v0;
    v12[1] = sub_10016D1AC;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v12, &unk_100636940, 0, (char *)&type metadata for () + 8, 2.0);
  }
  else
  {
    v2 = defaultLogger()(v1);
    v3 = Logger.logObject.getter(v2);
    v5 = static os_log_type_t.info.getter(v3, v4);
    if (os_log_type_enabled(v3, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v5, "Cannot continue gcdu background task because device is locked", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v10 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10016D1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10016D278;
  else
    v3 = sub_10016D210;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10016D210()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;

  v1._object = (void *)0x80000001005503B0;
  v2._countAndFlagsBits = 0x3532663139616266;
  v2._object = (void *)0xE800000000000000;
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  logMilestone(tag:description:)(v2, v1);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016D278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v1 + 64);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    *(_QWORD *)(v1 + 16) = 0x4000000000000000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ODN cleanup timed out after %f seconds", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 64);
  }
  swift_errorRelease(v5);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 32) + 8))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 24));
  v7._object = (void *)0x80000001005503B0;
  v8._countAndFlagsBits = 0x3532663139616266;
  v8._object = (void *)0xE800000000000000;
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  logMilestone(tag:description:)(v8, v7);
  v9 = *(_QWORD *)(v1 + 40);
  swift_task_dealloc(*(_QWORD *)(v1 + 48));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10016D3B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10016D410, 0, 0);
}

uint64_t sub_10016D410()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_10062F4B0 != -1)
    swift_once(&qword_10062F4B0, sub_1001A5E1C);
  v1 = qword_1006702E0;
  v0[5] = qword_1006702E0;
  swift_retain(v1);
  v2 = swift_task_alloc(32);
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 0;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_10016D4EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x6361436E61656C63, 0xEE00293A5F286568, sub_1001850A0, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10016D4EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10016D594;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_10016D558;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10016D558()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016D594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  v6 = swift_release(v2);
  defaultLogger()(v6);
  DIPLogError(_:message:log:)(v1, 0xD00000000000002FLL, 0x80000001005503D0, v3);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10016D638(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  char v41[24];

  v39 = a1;
  v40 = a2;
  v36 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v36);
  v37 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v38 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError.Code(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  v17 = OS_dispatch_group.wait(interval:)(9.0);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v17 & 1, 0) & 1) != 0)
  {
    v19 = v39;
    v18 = v40;
    v39();
    v20 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v21(v7, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
    v22 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v9, v7);
    v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v7, v3);
    v23(v9, v3);
    if ((v22 & 1) == 0)
    {
      v24 = runAsyncAndBlock<A>(file:function:line:_:)(" waiting for config", 0xD00000000000001ELL, 0x800000010054D670, 0xD000000000000014, 0x8000000100550350, 3602, &unk_100636938, 0, (char *)&type metadata for () + 8);
      ((void (*)(_QWORD *))v19)(v24);
      v21(v7, v20, v3);
      v25 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v9, v7);
      v23(v7, v3);
      v23(v9, v3);
      if ((v25 & 1) == 0)
      {
        if (qword_10062F530 != -1)
          swift_once(&qword_10062F530, sub_10037BB30);
        v26 = sub_1000352C0(v36, (uint64_t)qword_100670728);
        swift_beginAccess(v26, v41, 0, 0);
        v27 = v26;
        v28 = v37;
        sub_100035DE8(v27, v37, type metadata accessor for WarmerUpper);
        sub_100379B6C((uint64_t)v19, v18);
        sub_100035DAC(v28, type metadata accessor for WarmerUpper);
        v29._countAndFlagsBits = 0xD00000000000001CLL;
        v29._object = (void *)0x8000000100550390;
        v30._countAndFlagsBits = 0x6338323638616632;
        v30._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v30, v29);
      }
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DIPError.Code.timeoutNetworkConfig(_:), v13);
    v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100550320, 0, v16, 0, v31, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000014, 0x8000000100550350, 3593);
    defaultLogger()(v35);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v38);
    swift_errorRelease(v34);
  }
}

uint64_t sub_10016DA80()
{
  return swift_task_switch(sub_10016DA94, 0, 0);
}

uint64_t sub_10016DA94()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v1 = (_QWORD *)swift_task_alloc(dword_100639984);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D0A0;
  return sub_100234EE4();
}

void sub_10016DB08(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(void);
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];

  v45 = a1;
  v46 = a2;
  v43 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v43);
  v44 = (uint64_t)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for Logger(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  v16 = type metadata accessor for DIPError.Code(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10062F488 != -1)
    swift_once(&qword_10062F488, sub_100107C4C);
  v20 = OS_dispatch_group.wait(interval:)(9.0);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v20 & 1, 0) & 1) != 0)
  {
    v21 = v45;
    v45();
    v22 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v23(v7, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v3);
    v24 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v9, v7);
    v25 = *(void (**)(char *, uint64_t))(v4 + 8);
    v25(v7, v3);
    v25(v9, v3);
    if ((v24 & 1) == 0)
    {
      if (qword_10062F560 != -1)
        swift_once(&qword_10062F560, sub_10041FF94);
      v26 = (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState");
      if ((unint64_t)(v26 - 1) > 1)
      {
        v36 = v23;
        if (qword_10062F530 != -1)
          swift_once(&qword_10062F530, sub_10037BB30);
        v37 = sub_1000352C0(v43, (uint64_t)qword_100670728);
        swift_beginAccess(v37, v49, 0, 0);
        v38 = v44;
        sub_100035DE8(v37, v44, type metadata accessor for WarmerUpper);
        sub_10037A4C8((uint64_t)v21, v46);
        v39 = sub_100035DAC(v38, type metadata accessor for WarmerUpper);
        ((void (*)(uint64_t))v21)(v39);
        v36(v7, v22, v3);
        LOBYTE(v37) = static DIPBackgroundDeferralStatus.== infix(_:_:)(v9, v7);
        v25(v7, v3);
        v25(v9, v3);
        if ((v37 & 1) == 0)
        {
          v40._countAndFlagsBits = 0xD00000000000001ELL;
          v40._object = (void *)0x8000000100550370;
          v41._countAndFlagsBits = 0x6439613736303839;
          v41._object = (void *)0xE800000000000000;
          logMilestone(tag:description:)(v41, v40);
        }
      }
      else
      {
        v27 = defaultLogger()(v26);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cannot continue wudu background task because device is locked", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v48);
      }
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DIPError.Code.timeoutNetworkConfig(_:), v16);
    v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100550320, 0, v19, 0, v31, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000014, 0x8000000100550350, 3621);
    defaultLogger()(v35);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v15);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
    swift_errorRelease(v34);
  }
}

BOOL sub_10016E000()
{
  uint64_t v0;
  void *v1;
  int v2;
  id v3;
  void *v4;
  Swift::Bool v5;
  id v6;
  Swift::String v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius);
    v3 = v1;
    v4 = v3;
    if (v2 == 1
      && (objc_msgSend(v3, "invocationReason") == (id)1
       || objc_msgSend(v4, "invocationReason") == (id)3
       || objc_msgSend(v4, "invocationReason") == (id)2
       || objc_msgSend(v4, "invocationReason") == (id)4))
    {
      v5 = 1;
    }
    else
    {
      v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v7._object = (void *)0x800000010054D5C0;
      v7._countAndFlagsBits = 0xD00000000000001BLL;
      v5 = NSUserDefaults.internalBool(forKey:)(v7);

    }
  }
  else
  {
    return 0;
  }
  return v5;
}

void sub_10016E104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  _QWORD v49[7];
  char *v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v49[0] = *(_QWORD *)(v2 - 8);
  v49[1] = v2;
  __chkstk_darwin(v2);
  v49[3] = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v49[5] = *(_QWORD *)(v4 - 8);
  v49[6] = v4;
  __chkstk_darwin(v4);
  v49[4] = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v51 - 8);
  v11 = __chkstk_darwin(v51);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v50 = (char *)v49 - v15;
  v16 = __chkstk_darwin(v14);
  v49[2] = (char *)v49 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)v49 - v19;
  v21 = defaultLogger()(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = v9;
    v25 = v7;
    v26 = v6;
    v27 = v1;
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Asked to delete current claim due to self-heal", v28, 2u);
    v29 = v28;
    v1 = v27;
    v6 = v26;
    v7 = v25;
    v9 = v24;
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v31 = v51;
  v32 = v30(v20, v51);
  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim);
  if (v33)
  {
    v39 = qword_10062F5B0;
    v40 = swift_retain(v33);
    if (v39 != -1)
      v40 = swift_once(&qword_10062F5B0, sub_100486FCC);
    v41 = static DispatchWorkItemFlags.barrier.getter(v40);
    __chkstk_darwin(v41);
    OS_dispatch_queue.sync<A>(flags:execute:)(v9, sub_100174EC0);
    v42 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v43 = v50;
    v44 = defaultLogger()(v42);
    v45 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.info.getter(v45, v46);
    if (os_log_type_enabled(v45, (os_log_type_t)v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v47, "Done deleting current claim due to self-heal; terminating process",
        v48,
        2u);
      swift_slowDealloc(v48, -1, -1);
    }

    v38 = v43;
  }
  else
  {
    v34 = defaultLogger()(v32);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No claim to delete during self-healing; terminating process",
        v37,
        2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = v13;
  }
  v30(v38, v31);
  exit(0);
}

void sub_10016E634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v36 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)v36 - v10;
  v12 = *(void **)(v1 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  if (!v12)
  {
    v13 = defaultLogger()(0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No service name during self-healing; terminating process",
        v16,
        2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    exit(0);
  }
  v17 = objc_msgSend(v12, "serviceName");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  defaultLogger()(v21);
  v22 = swift_bridgeObjectRetain_n(v20, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v36[1] = v1;
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v38 = v18;
    v27 = v26;
    v40 = v26;
    v37 = v2;
    *(_DWORD *)v25 = 136446210;
    swift_bridgeObjectRetain(v20);
    v39 = sub_1000E3AC8(v38, v20, &v40);
    v2 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Asked to delete all claims for current service provider %{public}s due to self-heal", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v28 = v27;
    v18 = v38;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
  }
  v29 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29(v11, v2);
  v30 = sub_1001589C4(v18, v20, 0);
  v31 = defaultLogger()(v30);
  v32 = Logger.logObject.getter(v31);
  v34 = static os_log_type_t.info.getter(v32, v33);
  if (os_log_type_enabled(v32, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v34, "Done deleting all claims for current service provider due to self-heal; terminating process",
      v35,
      2u);
    swift_slowDealloc(v35, -1, -1);
  }

  v29(v9, v2);
  exit(0);
}

void sub_10016E9A4()
{
  sub_10016E104();
}

void sub_10016E9BC()
{
  sub_10016E634();
}

uint64_t sub_10016E9D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1006363F8 + dword_1006363F8);
  v1 = (_QWORD *)swift_task_alloc(unk_1006363FC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001D0A0;
  return v3();
}

uint64_t sub_10016EA2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
  *a1 = result;
  return result;
}

uint64_t sub_10016EA50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1004E8A08();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_10016EBDC(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t sub_10016EBDC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10016EDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v31[24];
  _BYTE v32[24];

  v4 = sub_100004828((uint64_t *)&unk_100636010);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100004828(&qword_1006363E0);
  __chkstk_darwin(v8);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100004828(&qword_1006363E8);
  v12 = __chkstk_darwin(v11);
  v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = &v31[-v15];
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  if (v17 == v19 && v18 == v20
    || (v21 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0) & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
      && (sub_1002AD2B8(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD **)(a1 + 72), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD **)(a2 + 72)) & 1) != 0&& *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20))
    {
      v23 = a1 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess(a1 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, v32, 0, 0);
      sub_100038B24(v23, (uint64_t)v16, &qword_1006363E8);
      v24 = a2 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
      swift_beginAccess(a2 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, v31, 0, 0);
      v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_100038B24((uint64_t)v16, (uint64_t)v10, &qword_1006363E8);
      sub_100038B24(v24, v25, &qword_1006363E8);
      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v26((uint64_t)v10, 1, v4) == 1)
      {
        sub_100008030((uint64_t)v16, &qword_1006363E8);
        v27 = v26(v25, 1, v4);
        if (v27 == 1)
          v28 = &qword_1006363E8;
        else
          v28 = &qword_1006363E0;
        if (v27 == 1)
          v21 = -1;
        else
          v21 = 0;
      }
      else
      {
        sub_100038B24((uint64_t)v10, (uint64_t)v14, &qword_1006363E8);
        if (v26(v25, 1, v4) == 1)
        {
          sub_100008030((uint64_t)v16, &qword_1006363E8);
          v21 = 0;
          v28 = &qword_1006363E0;
          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v7, v25, v4);
          v29 = sub_100099FFC(&qword_1006363F0, (uint64_t *)&unk_100636010, (uint64_t)&protocol conformance descriptor for EncryptedMessage<A>);
          v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v29);
          v30 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
          v30(v7, v4);
          v28 = &qword_1006363E8;
          sub_100008030((uint64_t)v16, &qword_1006363E8);
          v30(v14, v4);
        }
      }
      sub_100008030((uint64_t)v10, v28);
    }
    else
    {
      v21 = 0;
    }
  }
  return v21 & 1;
}

uint64_t sub_10016F0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for DIPBackgroundActivityManager(0);
  v0 = ((uint64_t (*)(void))static DIPBackgroundActivityManager.sharedInstance.getter)();
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000015, 0x80000001005502A0, &unk_100636928, 0);
  v1 = swift_release(v0);
  v2 = static DIPBackgroundActivityManager.sharedInstance.getter(v1);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000017, 0x80000001005502C0, &unk_100636930, 0);
  v3 = swift_release(v2);
  v4 = static DIPBackgroundActivityManager.sharedInstance.getter(v3);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000015, 0x80000001005502E0, sub_10016D638, 0);
  v5 = swift_release(v4);
  v6 = static DIPBackgroundActivityManager.sharedInstance.getter(v5);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000017, 0x8000000100550300, sub_10016DB08, 0);
  return swift_release(v6);
}

uint64_t sub_10016F1F0(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v22;
  void *v23;
  uint64_t v24[2];
  _QWORD *v25;

  v5 = v4;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = _swiftEmptyArrayStorage;
    if (!v7)
      return (uint64_t)v8;
    v25 = _swiftEmptyArrayStorage;
    result = sub_1000E419C(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v10 = 0;
    v8 = v25;
    while (v7 != v10)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v23 = v11;
      sub_10014B200(&v23, a2, a3, a4, &v22, v24);
      if (v5)
      {
        swift_release(v8);

        return (uint64_t)v8;
      }
      v5 = 0;

      v13 = v24[0];
      v14 = v24[1];
      v25 = v8;
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000E419C(v15 > 1, v16 + 1, 1);
        v8 = v25;
      }
      ++v10;
      v8[2] = v16 + 1;
      v17 = &v8[2 * v16];
      v17[4] = v13;
      v17[5] = v14;
      if (v7 == v10)
        return (uint64_t)v8;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

void sub_10016F384(uint64_t a1, void (*a2)(uint64_t, uint64_t, _OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v32;
  _OWORD v33[4];
  _BYTE v34[25];
  uint64_t v35;

  v3 = v2;
  v28 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v35 = v3;
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v32 = v7;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(a1 + 56) + 96 * i;
    v18 = *(_OWORD *)(v17 + 16);
    v33[0] = *(_OWORD *)v17;
    v33[1] = v18;
    v20 = *(_OWORD *)(v17 + 48);
    v19 = *(_OWORD *)(v17 + 64);
    v21 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)&v34[9] = *(_OWORD *)(v17 + 73);
    v33[3] = v20;
    *(_OWORD *)v34 = v19;
    v33[2] = v21;
    v22 = *(_QWORD *)(v17 + 8);
    v23 = *(_QWORD *)(v17 + 24);
    v24 = *(_QWORD *)(v17 + 40);
    v25 = *(_QWORD *)(v17 + 64);
    v26 = *(_QWORD *)(v17 + 80);
    swift_bridgeObjectRetain(v16);
    sub_100183F08(v33);
    v27 = v35;
    a2(v15, v16, v33);
    v3 = v27;
    if (v27)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v26);
      return;
    }
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v26);
    v7 = v32;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v10 = __OFADD__(v7, 1);
    v11 = v7 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v29)
      goto LABEL_26;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    if (!v12)
      break;
LABEL_17:
    v35 = v3;
    v6 = (v12 - 1) & v12;
    v32 = v11;
  }
  v13 = v11 + 1;
  if (v11 + 1 >= v29)
    goto LABEL_26;
  v12 = *(_QWORD *)(v28 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 2;
  if (v11 + 2 >= v29)
    goto LABEL_26;
  v12 = *(_QWORD *)(v28 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 3;
  if (v11 + 3 >= v29)
    goto LABEL_26;
  v12 = *(_QWORD *)(v28 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 4;
  if (v11 + 4 >= v29)
  {
LABEL_26:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v28 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v11 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v29)
      goto LABEL_26;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

void sub_10016F614(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD **a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v38[5];
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v31 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v46 = a1;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v46 + 56) + 96 * i;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 40);
    v24 = *(_BYTE *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v26 = *(_QWORD *)(v19 + 80);
    v27 = *(_BYTE *)(v19 + 88);
    v38[0] = v17;
    v38[1] = v18;
    v38[2] = v20;
    v38[3] = v21;
    v38[4] = v22;
    v39 = *(_OWORD *)(v19 + 24);
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = *(_OWORD *)(v19 + 64);
    v44 = v26;
    v45 = v27;
    v28 = v39;
    v29 = v43;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v29);
    sub_100152824((uint64_t)v38, a2, a3, a4, a5, a6);
    if (v6)
    {
      swift_release(v46);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v18);
      return;
    }
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v18);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v32)
      goto LABEL_26;
    v14 = *(_QWORD *)(v31 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v32)
        goto LABEL_26;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 2;
      if (v10 + 2 >= v32)
        goto LABEL_26;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 3;
      if (v10 + 3 >= v32)
        goto LABEL_26;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (v14)
      {
LABEL_14:
        v10 = v15;
        goto LABEL_15;
      }
      v30 = v10 + 4;
      if (v10 + 4 >= v32)
      {
LABEL_26:
        swift_release(v46);
        return;
      }
      v14 = *(_QWORD *)(v31 + 8 * v30);
      v10 += 4;
      if (!v14)
        break;
    }
LABEL_15:
    v9 = (v14 - 1) & v14;
  }
  while (1)
  {
    v10 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v10 >= v32)
      goto LABEL_26;
    v14 = *(_QWORD *)(v31 + 8 * v10);
    ++v30;
    if (v14)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10016F8D8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;

  v3 = v2;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain(v19);
    swift_retain(v20);
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release(a1);
      swift_release(v20);
      return swift_bridgeObjectRelease(v19);
    }
    swift_release(v20);
    result = swift_bridgeObjectRelease(v19);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22)
      return swift_release(a1);
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v21 = v11 + 4;
      if (v11 + 4 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v22)
      return swift_release(a1);
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v21;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10016FAB8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;

  v3 = v2;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v20);
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v20);
    result = swift_bridgeObjectRelease(v19);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22)
      return swift_release(a1);
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v21 = v11 + 4;
      if (v11 + 4 >= v22)
        return swift_release(a1);
      v15 = *(_QWORD *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v22)
      return swift_release(a1);
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v21;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10016FC98(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[9];
  _QWORD *v37;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = a2;
    v4 = 0;
    v30 = result + 32;
    v5 = a2 + 56;
    v28 = _swiftEmptyArrayStorage;
    v31 = *(_QWORD *)(result + 16);
    while (1)
    {
      if (v4 <= v2)
        v6 = v2;
      else
        v6 = v4;
      v7 = v4;
      v29 = v6;
      while (1)
      {
        if (v7 == v6)
        {
          __break(1u);
          return result;
        }
        v4 = v7 + 1;
        if (*(_QWORD *)(v3 + 16))
          break;
LABEL_8:
        v7 = v4;
        if (v4 == v2)
          return (uint64_t)v28;
      }
      v8 = v30 + 40 * v7;
      v9 = *(_QWORD *)v8;
      v35 = *(_OWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 32);
      v32 = *(_QWORD *)(v8 + 24);
      Hasher.init(_seed:)(v36, *(_QWORD *)(v3 + 40));
      v34 = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain_n(v35, 2);
      swift_bridgeObjectRetain(*((_QWORD *)&v35 + 1));
      String.hash(into:)(v36, v9, v35);
      v11 = Hasher._finalize()();
      v12 = -1 << *(_BYTE *)(v3 + 32);
      v13 = v11 & ~v12;
      if (((*(_QWORD *)(v5 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_7;
      v14 = *(_QWORD *)(a2 + 48);
      v15 = (_QWORD *)(v14 + 16 * v13);
      v16 = v15[1];
      v17 = *v15 == v9 && v16 == (_QWORD)v35;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, v9, v35, 0) & 1) == 0)
        break;
LABEL_25:
      swift_bridgeObjectRelease(v35);
      v24 = v28;
      result = swift_isUniquelyReferenced_nonNull_native(v28);
      v37 = v28;
      if ((result & 1) == 0)
      {
        result = sub_1000E42CC(0, v28[2] + 1, 1);
        v24 = v37;
      }
      v2 = v31;
      v26 = v24[2];
      v25 = v24[3];
      if (v26 >= v25 >> 1)
      {
        result = sub_1000E42CC(v25 > 1, v26 + 1, 1);
        v24 = v37;
      }
      v24[2] = v26 + 1;
      v28 = v24;
      v27 = &v24[5 * v26];
      v27[4] = v9;
      *(_OWORD *)(v27 + 5) = v35;
      v3 = a2;
      v27[7] = v32;
      v27[8] = v34;
      if (v4 == v31)
        return (uint64_t)v28;
    }
    v18 = ~v12;
    for (i = v13 + 1; ; i = v20 + 1)
    {
      v20 = i & v18;
      if (((*(_QWORD *)(v5 + (((i & v18) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v18)) & 1) == 0)
        break;
      v21 = (_QWORD *)(v14 + 16 * v20);
      v22 = v21[1];
      v23 = *v21 == v9 && v22 == (_QWORD)v35;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v9, v35, 0) & 1) != 0)
        goto LABEL_25;
    }
LABEL_7:
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(*((_QWORD *)&v35 + 1));
    result = swift_bridgeObjectRelease_n(v35, 2);
    v3 = a2;
    v2 = v31;
    v6 = v29;
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10016FF34(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t result;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int64_t v52;

  v4 = a2;
  v5 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v52 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  v47 = a3 + 9;
  v48 = v5;
  v49 = a3;
  v50 = v4;
  while (1)
  {
    while (1)
    {
      do
      {
        while (v8)
        {
          v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
          v12 = v11 | (v9 << 6);
          v13 = a3[2];
          if (v13)
            goto LABEL_21;
        }
        v14 = __OFADD__(v9++, 1);
        if (v14)
          goto LABEL_59;
        if (v9 >= v52)
        {
LABEL_57:
          swift_release(v4);
          return (uint64_t)a1;
        }
        v15 = *(_QWORD *)(v5 + 8 * v9);
        if (!v15)
        {
          v16 = v9 + 1;
          if (v9 + 1 >= v52)
            goto LABEL_57;
          v15 = *(_QWORD *)(v5 + 8 * v16);
          if (v15)
            goto LABEL_19;
          v16 = v9 + 2;
          if (v9 + 2 >= v52)
            goto LABEL_57;
          v15 = *(_QWORD *)(v5 + 8 * v16);
          if (v15)
            goto LABEL_19;
          v16 = v9 + 3;
          if (v9 + 3 >= v52)
            goto LABEL_57;
          v15 = *(_QWORD *)(v5 + 8 * v16);
          if (v15)
          {
LABEL_19:
            v9 = v16;
          }
          else
          {
            v45 = v9 + 4;
            if (v9 + 4 >= v52)
              goto LABEL_57;
            v15 = *(_QWORD *)(v5 + 8 * v45);
            for (v9 += 4; !v15; ++v45)
            {
              v9 = v45 + 1;
              if (__OFADD__(v45, 1))
                goto LABEL_62;
              if (v9 >= v52)
                goto LABEL_57;
              v15 = *(_QWORD *)(v5 + 8 * v9);
            }
          }
        }
        v8 = (v15 - 1) & v15;
        v12 = __clz(__rbit64(v15)) + (v9 << 6);
        v13 = a3[2];
      }
      while (!v13);
LABEL_21:
      v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      v19 = *v17;
      v18 = v17[1];
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v12);
      v21 = a3[4];
      v22 = a3[5];
      v23 = v21 == *v17 && v22 == v18;
      if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, *v17, v17[1], 0) & 1) == 0)
        break;
LABEL_42:
      swift_bridgeObjectRetain_n(v18, 2);
      swift_retain_n(v20, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      v35 = sub_1004A8604(v19, v18);
      v36 = a1[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_60;
      v39 = v34;
      if (a1[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10012ADE4();
      }
      else
      {
        sub_1001262DC(v38, isUniquelyReferenced_nonNull_native);
        v40 = sub_1004A8604(v19, v18);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_63;
        v35 = v40;
      }
      if ((v39 & 1) != 0)
      {
        v10 = a1[7];
        swift_release(*(_QWORD *)(v10 + 8 * v35));
        *(_QWORD *)(v10 + 8 * v35) = v20;
      }
      else
      {
        a1[(v35 >> 6) + 8] |= 1 << v35;
        v42 = (uint64_t *)(a1[6] + 16 * v35);
        *v42 = v19;
        v42[1] = v18;
        *(_QWORD *)(a1[7] + 8 * v35) = v20;
        v43 = a1[2];
        v14 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v14)
          goto LABEL_61;
        a1[2] = v44;
        swift_bridgeObjectRetain(v18);
      }
      swift_release(v20);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease(0x8000000000000000);
LABEL_6:
      a3 = v49;
      v4 = v50;
      v5 = v48;
    }
    if (v13 != 1)
    {
      v24 = a3[6];
      v25 = a3[7];
      v26 = v24 == v19 && v25 == v18;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v19, v18, 0) & 1) != 0)
        goto LABEL_42;
      if (v13 != 2)
        break;
    }
  }
  v27 = v47;
  v28 = 2;
  while (1)
  {
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    v30 = *(v27 - 1);
    v31 = *v27;
    v32 = v30 == v19 && v31 == v18;
    if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v19, v18, 0) & 1) != 0)
      goto LABEL_42;
    v27 += 2;
    ++v28;
    if (v29 == v13)
      goto LABEL_6;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001702D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  return swift_task_switch(sub_10017033C, 0, 0);
}

uint64_t sub_10017033C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Asked to delete everything due to self-heal", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = v1[5];
  v8 = v1[2];
  v9 = v1[3];

  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v1[6] = v10;
  v10(v7, v8);
  if (qword_10062F5B0 != -1)
    swift_once(&qword_10062F5B0, sub_100486FCC);
  v11 = qword_100670828;
  v1[7] = qword_100670828;
  v12 = unk_100642E34;
  v15 = (char *)&dword_100642E30 + dword_100642E30;
  swift_retain(v11);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v1[8] = v13;
  *v13 = v1;
  v13[1] = sub_100170484;
  return ((uint64_t (*)(_UNKNOWN **, uint64_t))v15)(&off_100600820, v11);
}

uint64_t sub_100170484()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release(v1);
  return swift_task_switch(sub_1001704E0, 0, 0);
}

void sub_1001704E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done deleting everything due to self-heal; terminating process",
      v5,
      2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = (void (*)(uint64_t, uint64_t))v1[6];
  v7 = v1[4];
  v8 = v1[2];

  v6(v7, v8);
  exit(0);
}

unint64_t sub_100170590(unint64_t result)
{
  if (result >= 0xA)
    return 10;
  return result;
}

void sub_1001705A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v0 = type metadata accessor for DIPError.Code(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSMutableData), "initWithLength:", 32);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "length");
    v7 = objc_retainAutorelease(v5);
    if (SecRandomCopyBytes(kSecRandomDefault, (size_t)v6, objc_msgSend(v7, "mutableBytes")))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.unexpectedDeviceState(_:), v0);
      v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v9 = type metadata accessor for DIPError(0);
      v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v9, v10, 0, 0);
      v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100550250, 0, v3, 0, v8, 0xD00000000000004CLL, 0x800000010054D540, 0x6153657275636573, 0xEC0000002928746CLL, 198);
      swift_willThrow(v11);

    }
    else
    {
      v16 = v7;
      v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v19 = v18;

      Data.base16EncodedString()();
      sub_100007F8C(v17, v19);

    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.unexpectedDeviceState(_:), v0);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x8000000100550200, 0, v3, 0, v12, 0xD00000000000004CLL, 0x800000010054D540, 0x6153657275636573, 0xEC0000002928746CLL, 195);
    swift_willThrow(v15);
  }
}

id sub_1001708BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  id result;
  objc_class *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  objc_super v91;
  _QWORD v92[2];

  v85 = a2;
  v86 = a3;
  v84 = a1;
  v4 = type metadata accessor for Logger(0);
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  __chkstk_darwin(v4);
  v83 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPBackoffStrategy(0);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  __chkstk_darwin(v6);
  v79 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v78 = *(_QWORD **)(v90 - 8);
  __chkstk_darwin(v90);
  v89 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t *)&v3[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation];
  v20 = v3;
  v21 = UUID.init()(v20);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *v19 = v22;
  v19[1] = v24;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_spWebService] = 0;
  v82 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__connection];
  swift_unknownObjectWeakInit(&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__connection], 0);
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context] = 0;
  v25 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages] = _swiftEmptyArrayStorage;
  v26 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes;
  *(_QWORD *)&v20[v26] = sub_10011E79C((uint64_t)_swiftEmptyArrayStorage);
  v27 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKey];
  *((_QWORD *)v27 + 4) = 0;
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  v28 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__spKey];
  *(_OWORD *)v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  *((_QWORD *)v28 + 4) = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoECIESSession] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__storedClaim] = 0;
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 0;
  v29 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__commonDispatchGroup;
  *(_QWORD *)&v20[v29] = dispatch_group_create();
  v30 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__baaDispatchGroup;
  *(_QWORD *)&v20[v30] = dispatch_group_create();
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__locationHelper] = 0;
  v31 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__inoKeyCreationDispatchSignal;
  *(_QWORD *)&v20[v31] = dispatch_group_create();
  v76 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__baa_queue;
  v75 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v32 = v14;
  static DispatchQoS.unspecified.getter(v75);
  v92[0] = _swiftEmptyArrayStorage;
  v33 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v74 = v33;
  v34 = sub_100004828((uint64_t *)&unk_100636400);
  v73 = v34;
  v35 = sub_100099FFC((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v34;
  v37 = v9;
  dispatch thunk of SetAlgebra.init<A>(_:)(v92, v36, v35, v9, v33);
  v38 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v39 = (_QWORD *)v78[13];
  v40 = v89;
  v41 = v90;
  v77 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  ((void (*)(char *, _QWORD, uint64_t))v39)(v89, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v90);
  v78 = v39;
  v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x800000010054D4C0, v32, v11, v40, 0);
  *(_QWORD *)&v20[v76] = v42;
  v76 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoQueue;
  static DispatchQoS.unspecified.getter(v42);
  v92[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v92, v73, v35, v37, v74);
  v43 = v89;
  ((void (*)(char *, uint64_t, uint64_t))v39)(v89, v38, v41);
  v44 = v32;
  v45 = v32;
  v46 = v11;
  v47 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x800000010054D4E0, v44, v11, v43, 0);
  *(_QWORD *)&v20[v76] = v47;
  v48 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__deviceInfoSemaphore;
  *(_QWORD *)&v20[v48] = dispatch_semaphore_create(0);
  v49 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData];
  *((_OWORD *)v49 + 1) = 0u;
  *((_OWORD *)v49 + 2) = 0u;
  *(_OWORD *)v49 = 0u;
  *((_QWORD *)v49 + 6) = 0;
  *((_QWORD *)v49 + 7) = 1;
  v50 = enum case for DIPBackoffStrategy.noBackoff(_:);
  v51 = v79;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 104);
  v53 = v81;
  v52(v79, enum case for DIPBackoffStrategy.noBackoff(_:), v81);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(2, v51, 0, 1);
  v52(v51, v50, v53);
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(1, v51, 0, 1);
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__profileManager] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator] = 0;
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius] = 0;
  v54 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__clientGUIDFactory];
  *(_OWORD *)v54 = 0u;
  *((_OWORD *)v54 + 1) = 0u;
  *((_OWORD *)v54 + 2) = 0u;
  *((_OWORD *)v54 + 3) = 0u;
  *((_OWORD *)v54 + 4) = 0u;
  v55 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupQueue;
  v56 = static OS_dispatch_queue.Attributes.concurrent.getter((__n128)0);
  static DispatchQoS.unspecified.getter(v56);
  ((void (*)(char *, _QWORD, uint64_t))v78)(v43, v77, v90);
  *(_QWORD *)&v20[v55] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x800000010054D500, v45, v46, v43, 0);
  v57 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__tiberiusSetupDispatchGroup;
  *(_QWORD *)&v20[v57] = dispatch_group_create();
  *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__pregeneratedAssessments] = _swiftEmptyArrayStorage;
  v58 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__augmentedProfile];
  v59 = type metadata accessor for AugmentedProfile(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 1, 1, v59);
  v60 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate];
  v61 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 1, 1, v61);
  v62 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__keystoreDict;
  *(_QWORD *)&v20[v62] = sub_10011DABC((uint64_t)_swiftEmptyArrayStorage);
  v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isSEAvailable] = 2;
  v63 = v83;
  v64 = swift_unknownObjectWeakAssign(v82, v84);
  v65 = &v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  v66 = v86;
  *(_QWORD *)v65 = v85;
  *((_QWORD *)v65 + 1) = v66;
  v67 = defaultLogger()(v64);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.debug.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Creating IDVSessionProxy", v70, 2u);
    swift_slowDealloc(v70, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v87 + 8))(v63, v88);
  result = (id)os_transaction_create("IDVSessionProxy");
  if (result)
  {
    *(_QWORD *)&v20[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__jetsamTransaction] = result;

    v72 = (objc_class *)type metadata accessor for IDVSessionProxy(0);
    v91.receiver = v20;
    v91.super_class = v72;
    return objc_msgSendSuper2(&v91, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100171064(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];

  v33 = a3;
  v34 = a4;
  v32 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_beginAccess(a2, v35, 0, 0);
  v18 = *a2;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9, v17);
  swift_bridgeObjectRetain(v18);
  swift_errorRetain(a1);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x80000001005500A0, a1, v12, 0, v18, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x8000000100550030, 365);
  v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v13, v19, 0, 0);
  v21 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 16);
  v23 = v21(v22, v16, v13);
  defaultLogger()(v23);
  DIPRecordError(_:message:log:)(v20, 0, 0xE000000000000000, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v32);
  swift_errorRelease(v20);
  v24 = swift_allocError(v13, v19, 0, 0);
  v21(v25, v16, v13);
  v26 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit) = v24;
  swift_errorRelease(v26);
  v27 = (void *)swift_allocError(v13, v19, 0, 0);
  v21(v28, v16, v13);
  v29 = sub_1004845F0(v27);
  swift_errorRelease(v27);
  v30 = (void *)_convertErrorToNSError(_:)(v29);
  (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v30);

  swift_errorRelease(v29);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void sub_100171344(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void (*v48)(void);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(void);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void);
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  char v93;
  uint64_t v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  id v118;
  Swift::String v119;
  Swift::Bool v120;
  uint64_t *v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  os_unfair_lock_s *v133;
  id v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  void *v148;
  id v149;
  void *v150;
  _BOOL8 v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  Swift::String_optional v173;
  char *v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(void);
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  const void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205[4];
  __int128 v206;
  void *v207;
  uint64_t v208;
  unint64_t v209;

  v201 = a2;
  v187 = type metadata accessor for WarmerUpper(0);
  __chkstk_darwin(v187);
  v188 = (uint64_t)&v180 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.PropertyKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v190 = (uint64_t)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for DIPError.Code(0);
  v195 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v197 = (char *)&v180 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v180 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for DIPSignpost(0);
  v199 = *(_QWORD *)(v200 - 8);
  v13 = __chkstk_darwin(v200);
  v15 = (char *)&v180 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v189 = (char *)&v180 - v17;
  v18 = __chkstk_darwin(v16);
  v191 = (char *)&v180 - v19;
  v20 = __chkstk_darwin(v18);
  v203 = (char *)&v180 - v21;
  __chkstk_darwin(v20);
  v202 = (char *)&v180 - v22;
  v23 = type metadata accessor for Logger(0);
  v198 = *(void (**)(char *, uint64_t))(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v183 = (char *)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v184 = (char *)&v180 - v27;
  v28 = __chkstk_darwin(v26);
  v186 = (char *)&v180 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v180 - v30;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  v32 = _Block_copy(a3);
  defaultLogger()(v32);
  v33 = a1;
  v34 = Logger.logObject.getter(v33);
  v36 = static os_log_type_t.info.getter(v34, v35);
  v37 = os_log_type_enabled(v34, v36);
  v194 = v23;
  v185 = v15;
  if (v37)
  {
    v38 = swift_slowAlloc(22, -1);
    v192 = a3;
    v39 = v38;
    v182 = (void (*)(void))swift_slowAlloc(32, -1);
    *(_QWORD *)&v206 = v182;
    *(_DWORD *)v39 = 136446466;
    v181 = v39 + 4;
    v40 = v7;
    v41 = v12;
    v42 = objc_msgSend(v33, "serviceName");
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v193 = v6;
    v44 = v43;
    v46 = v45;

    v12 = v41;
    v7 = v40;
    v204 = sub_1000E3AC8(v44, v46, (uint64_t *)&v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v181);
    swift_bridgeObjectRelease(v46);

    *(_WORD *)(v39 + 12) = 2050;
    v47 = objc_msgSend(v33, "invocationReason");

    v204 = (uint64_t)v47;
    v6 = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, v205, v39 + 14);

    _os_log_impl((void *)&_mh_execute_header, v34, v36, "coreidvd configure for service %{public}s, reason %{public}lu", (uint8_t *)v39, 0x16u);
    v48 = v182;
    swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v49 = v39;
    a3 = v192;
    swift_slowDealloc(v49, -1, -1);

    v50 = (void (*)(char *, uint64_t))*((_QWORD *)v198 + 1);
    v51 = v31;
    v52 = v194;
  }
  else
  {

    v50 = (void (*)(char *, uint64_t))*((_QWORD *)v198 + 1);
    v51 = v31;
    v52 = v23;
  }
  v198 = v50;
  v50(v51, v52);
  v53._countAndFlagsBits = 0xD00000000000001ELL;
  v53._object = (void *)0x800000010054FFD0;
  v54._countAndFlagsBits = 0x6635626635333731;
  v54._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v54, v53);
  static DaemonSignposts.configureTotal.getter();
  v55 = DIPSignpost.init(_:)(v12);
  static DaemonSignposts.configureTiberiusBeforeConfigure.getter(v55);
  DIPSignpost.init(_:)(v12);
  v56 = sub_100004828((uint64_t *)&unk_1006325A0);
  v57 = sub_100004828((uint64_t *)&unk_100633440);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(_QWORD *)(v58 + 72);
  v60 = *(unsigned __int8 *)(v58 + 80);
  v61 = (v60 + 32) & ~v60;
  v62 = swift_allocObject(v56, v61 + v59, v60 | 7);
  *(_OWORD *)(v62 + 16) = xmmword_10051FFB0;
  v63 = v62 + v61 + *(int *)(v57 + 48);
  v64 = *(void (**)(void))(v7 + 104);
  v64();
  v65 = v6;
  v66 = v12;
  v67 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  v68 = v201;
  v69 = *(_BYTE *)(v201 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state);
  *(_QWORD *)(v63 + 24) = &type metadata for DIPState;
  *(_BYTE *)v63 = v69;
  v209 = sub_10011D314(v62);
  if (*(_BYTE *)(v68 + v67))
  {
    v70 = v197;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v197, enum case for DIPError.Code.invalidCallSequence(_:), v196);
    v71 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v72 = type metadata accessor for DIPError(0);
    v73 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v74 = swift_allocError(v72, v73, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010054FFF0, 0, v70, 0, v71, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x8000000100550030, 372);
LABEL_11:
    _Block_copy(a3);
    sub_100171064(v74, (uint64_t *)&v209, v68, (uint64_t)a3);
    _Block_release(a3);
    swift_bridgeObjectRelease(v209);
    swift_errorRelease(v74);
    v88 = v200;
    v89 = v199;
    v90 = v202;
    v91 = v203;
    goto LABEL_12;
  }
  v182 = v64;
  v193 = v65;
  v75 = v66;
  if ((sub_100148740() & 1) == 0)
  {
    v84 = v197;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v197, enum case for DIPError.Code.missingEntitlement(_:), v196);
    v85 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = type metadata accessor for DIPError(0);
    v87 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v74 = swift_allocError(v86, v87, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054E550, 0, v84, 0, v85, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x8000000100550030, 376);
    goto LABEL_11;
  }
  v192 = a3;
  v76 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context;
  v77 = *(void **)(v68 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context);
  *(_QWORD *)(v68 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context) = v33;
  v78 = v33;

  v79 = objc_msgSend(v78, "serviceName");
  v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
  v82 = v81;

  if (v80 == 0x6E6F7275626974 && v82 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    v83 = v182;
LABEL_14:
    v94 = v201;
    *(_BYTE *)(v201 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) = 1;
    goto LABEL_15;
  }
  v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, 0x6E6F7275626974, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v82);
  v83 = v182;
  if ((v93 & 1) != 0)
    goto LABEL_14;
  v94 = v201;
  v107 = *(void **)(v201 + v76);
  if (!v107)
    goto LABEL_24;
  v108 = objc_msgSend(v107, "httpHeaders");
  if (v108)
  {
    v109 = v108;
    v110 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v108, &type metadata for String, &type metadata for String, &protocol witness table for String);

    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderDIPGSToken);
    v113 = v112;
    if (*(_QWORD *)(v110 + 16) && (v114 = sub_1004A8604(v111, v112), (v115 & 1) != 0))
    {
      v116 = (uint64_t *)(*(_QWORD *)(v110 + 56) + 16 * v114);
      v117 = v116[1];
      v181 = *v116;
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRelease(v110);
      swift_bridgeObjectRelease(v113);
      v94 = v201;
      if ((sub_100148740() & 1) != 0
        || (v118 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
            v119._countAndFlagsBits = 0xD00000000000001ALL,
            v119._object = (void *)0x800000010054F4A0,
            v120 = NSUserDefaults.internalBool(forKey:)(v119),
            v118,
            v120))
      {
        v121 = (uint64_t *)(v94 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken);
        v122 = *(_QWORD *)(v94 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__externalGSToken + 8);
        *v121 = v181;
        v121[1] = v117;
      }
      else
      {
        v122 = v117;
      }
      swift_bridgeObjectRelease(v122);
    }
    else
    {
      swift_bridgeObjectRelease(v110);
      swift_bridgeObjectRelease(v113);
      v94 = v201;
    }
    v83 = v182;
  }
LABEL_15:
  v95 = *(void **)(v94 + v76);
  if (!v95)
  {
LABEL_24:
    v123 = v197;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v197, enum case for DIPError.Code.missingContextField(_:), v196);
    v124 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v125 = type metadata accessor for DIPError(0);
    v126 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v127 = swift_allocError(v125, v126, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100550050, 0, v123, 0, v124, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000018, 0x8000000100550030, 392);
    a3 = v192;
    _Block_copy(v192);
    sub_100171064(v127, (uint64_t *)&v209, v94, (uint64_t)a3);
    _Block_release(a3);
    swift_bridgeObjectRelease(v209);
    swift_errorRelease(v127);
    v88 = v200;
    v89 = v199;
    v91 = v203;
    v90 = v202;
    goto LABEL_12;
  }
  v182 = (void (*)(void))v78;
  v96 = objc_msgSend(v95, "serviceName");
  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  v99 = v98;

  v100 = v190;
  ((void (*)(uint64_t, _QWORD, uint64_t))v83)(v190, enum case for DIPError.PropertyKey.inoProviderID(_:), v193);
  v207 = &type metadata for String;
  *(_QWORD *)&v206 = v97;
  *((_QWORD *)&v206 + 1) = v99;
  swift_beginAccess(&v209, &v204, 33, 0);
  swift_bridgeObjectRetain(v99);
  sub_10047E318((uint64_t)&v206, v100);
  v101 = swift_endAccess(&v204);
  static DaemonSignposts.configureVerifyAccountStatus.getter(v101);
  DIPSignpost.init(_:)(v75);
  v102 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(&v206, v102);
  v103 = v207;
  v104 = v208;
  sub_10000806C(&v206, (uint64_t)v207);
  v105 = v94;
  v106 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius;
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)((*(_BYTE *)(v105 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius) & 1) == 0, v103, v104);
  v190 = v97;
  v193 = v99;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v206);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v128 = sub_10016E000();
  a3 = v192;
  v91 = v203;
  v90 = v202;
  if ((v128 & 1) == 0)
  {
    if (qword_10062F4B0 != -1)
      swift_once(&qword_10062F4B0, sub_1001A5E1C);
    v129 = qword_1006702E0;
    swift_retain(qword_1006702E0);
    sub_1001A5E54();
    v128 = swift_release(v129);
  }
  static DaemonSignposts.configureLoadConfig.getter(v128);
  DIPSignpost.init(_:)(v75);
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v130 = qword_1006702A0;
  v131 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v132 = (uint64_t)&v131[4];
  v133 = v131 + 52;
  os_unfair_lock_lock(v131 + 52);
  sub_100139D14(v132, v130, &v206);
  os_unfair_lock_unlock(v133);
  sub_10002581C((uint64_t)&v206, (uint64_t)&v204);
  sub_10001D410(&v206);
  sub_10000806C(&v204, v205[2]);
  sub_100107E98();
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v204);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v134 = objc_msgSend(v182, "httpHeaders");
  if (v134)
  {
    v135 = v134;
    v136 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v134, &type metadata for String, &type metadata for String, &protocol witness table for String);

    v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderConversationID);
    v139 = v138;
    if (*(_QWORD *)(v136 + 16) && (v140 = sub_1004A8604(v137, v138), (v141 & 1) != 0))
    {
      v142 = (uint64_t *)(*(_QWORD *)(v136 + 56) + 16 * v140);
      v144 = *v142;
      v143 = v142[1];
      swift_bridgeObjectRetain(v143);
      swift_bridgeObjectRelease(v136);
      swift_bridgeObjectRelease(v139);
      v145 = (_QWORD *)(v201 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation);
      v139 = *(_QWORD *)(v201 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_conversation + 8);
      *v145 = v144;
      v145[1] = v143;
      a3 = v192;
    }
    else
    {
      swift_bridgeObjectRelease(v136);
    }
    swift_bridgeObjectRelease(v139);
  }
  v146 = v201;
  v147 = sub_10016BD54();
  v148 = *(void **)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService);
  *(_QWORD *)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_topekaWebService) = v147;

  v149 = sub_10016BA30();
  v150 = *(void **)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService);
  *(_QWORD *)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy_assessmentWebService) = v149;

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v151 = sub_10016E000();
  if (v151)
  {
    v152 = swift_bridgeObjectRelease(v193);
    v153 = v186;
    v154 = defaultLogger()(v152);
    v155 = Logger.logObject.getter(v154);
    v156 = static os_log_type_t.debug.getter(v155);
    if (os_log_type_enabled(v155, v156))
    {
      v157 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v157 = 0;
      swift_bridgeObjectRelease(v209);
      _os_log_impl((void *)&_mh_execute_header, v155, v156, "Performing Tiberius background warmup", v157, 2u);
      swift_slowDealloc(v157, -1, -1);

      v198(v153, v194);
    }
    else
    {

      v198(v153, v194);
      swift_bridgeObjectRelease(v209);
    }
    v146 = v201;
    v88 = v200;
    v89 = v199;
    if (qword_10062F530 != -1)
      swift_once(&qword_10062F530, sub_10037BB30);
    v166 = sub_1000352C0(v187, (uint64_t)qword_100670728);
    swift_beginAccess(v166, &v206, 0, 0);
    v167 = v188;
    sub_100035DE8(v166, v188, type metadata accessor for WarmerUpper);
    sub_1003795B0();
    sub_100035DAC(v167, type metadata accessor for WarmerUpper);
  }
  else if ((*(_BYTE *)(v146 + v106) & 1) != 0)
  {
    v158 = swift_bridgeObjectRelease(v193);
    static DaemonSignposts.configureTiberiusCofigure.getter(v158);
    v159 = v185;
    v160 = DIPSignpost.init(_:)(v75);
    v161 = v184;
    v162 = defaultLogger()(v160);
    v163 = Logger.logObject.getter(v162);
    v164 = static os_log_type_t.debug.getter(v163);
    if (os_log_type_enabled(v163, v164))
    {
      v165 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v165 = 0;
      _os_log_impl((void *)&_mh_execute_header, v163, v164, "Performing Tiberius configure", v165, 2u);
      swift_slowDealloc(v165, -1, -1);
    }

    v198(v161, v194);
    sub_100145C58();
    swift_bridgeObjectRelease(v209);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v89 = v199;
    v88 = v200;
    (*(void (**)(char *, uint64_t))(v199 + 8))(v159, v200);
  }
  else
  {
    v174 = v183;
    v175 = defaultLogger()(v151);
    v176 = Logger.logObject.getter(v175);
    v177 = static os_log_type_t.debug.getter(v176);
    if (os_log_type_enabled(v176, v177))
    {
      v178 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v178 = 0;
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "Performing standard configure", v178, 2u);
      swift_slowDealloc(v178, -1, -1);
    }

    v198(v174, v194);
    v179 = v193;
    sub_100143458(v190, v193);
    swift_bridgeObjectRelease(v209);
    swift_bridgeObjectRelease(v179);
    v88 = v200;
    v89 = v199;
  }
  (*((void (**)(const void *, _QWORD))a3 + 2))(a3, 0);
  v168 = *(void (**)(char *, uint64_t))(v89 + 8);
  v168(v189, v88);
  v168(v191, v88);
  v169 = *(_QWORD *)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow);
  if (v169)
  {
    swift_retain(*(_QWORD *)(v146 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow));
    v170 = sub_1000549DC();
    v172 = v171;
    swift_release(v169);
    v173.value._countAndFlagsBits = v170;
    v173.value._object = v172;
    DIPSignpost.end(workflowID:isBackground:)(v173, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(v172);
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  }
LABEL_12:
  v92 = *(void (**)(char *, uint64_t))(v89 + 8);
  v92(v91, v88);
  v92(v90, v88);
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_100172AE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v30 = a3;
  v29 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_beginAccess(a2, v31, 0, 0);
  v17 = *a2;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8, v16);
  swift_bridgeObjectRetain(v17);
  swift_errorRetain(a1);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x800000010054FFB0, a1, v11, 0, v17, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 765);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v12, v18, 0, 0);
  v20 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 16);
  v22 = v20(v21, v15, v12);
  defaultLogger()(v22);
  DIPRecordError(_:message:log:)(v19, 0, 0xE000000000000000, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
  swift_errorRelease(v19);
  v23 = (void *)swift_allocError(v12, v18, 0, 0);
  v20(v24, v15, v12);
  v25 = sub_1004845F0(v23);
  swift_errorRelease(v23);
  v26 = (void *)_convertErrorToNSError(_:)(v25);
  (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v30 + 16))(v30, 0, 0, v26);

  swift_errorRelease(v25);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100172D8C(void *a1, uint8_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint8_t *v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  unint64_t v66;
  char *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(uint64_t, char *, uint64_t);
  char *v72;
  id v73;
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  Class isa;
  char *v82;
  Class v83;
  uint64_t v84;
  Class v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint8_t *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint8_t *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint8_t *v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  void *v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  void *v149;
  id v150;
  void *v151;
  id v152;
  void *v153;
  uint64_t v154;
  uint64_t (*v155)(char *, uint64_t);
  uint64_t (*v156)(char *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  id v167;
  void *v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t result;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t *v211;
  id v212;
  void (**v213)(_QWORD, _QWORD, _QWORD);
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint8_t *v218;

  v204 = type metadata accessor for Locale(0);
  v202 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v201 = (char *)&v194 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Identifier(0);
  v199 = *(_QWORD *)(v5 - 8);
  v200 = v5;
  __chkstk_darwin(v5);
  v196 = (char *)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for Calendar(0);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v195 = (char *)&v194 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v8);
  v10 = (uint64_t)&v194 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v209 = *(_QWORD **)(v11 - 8);
  v210 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v194 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v203 = (char *)&v194 - v15;
  v16 = type metadata accessor for DIPError.Code(0);
  v213 = *(void (***)(_QWORD, _QWORD, _QWORD))(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v194 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)type metadata accessor for Logger(0);
  v211 = (uint64_t *)*(v19 - 1);
  v212 = v19;
  v20 = __chkstk_darwin(v19);
  v205 = (char *)&v194 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v194 - v22;
  v214 = a2;
  if (-[uint8_t optional](a2, "optional"))
  {
    v24 = objc_msgSend(a1, "getCurrentValue");
    v25 = swift_unknownObjectRelease(v24);
    if (!v24)
    {
      defaultLogger()(v25);
      v90 = v214;
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.debug.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v214 = (uint8_t *)swift_slowAlloc(32, -1);
        v218 = v214;
        *(_DWORD *)v93 = 136446210;
        v213 = (void (**)(_QWORD, _QWORD, _QWORD))(v93 + 4);
        v94 = -[uint8_t identifier](v90, "identifier");
        v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        v97 = v96;

        v216 = sub_1000E3AC8(v95, v97, (uint64_t *)&v218);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v213);

        swift_bridgeObjectRelease(v97);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "optional attribute %{public}s not set", v93, 0xCu);
        v98 = v214;
        swift_arrayDestroy(v214, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v93, -1, -1);

      }
      else
      {

      }
      ((void (*)(char *, id))v211[1])(v23, v212);
      return 0;
    }
  }
  v207 = v16;
  v208 = v18;
  v26 = sub_100004828((uint64_t *)&unk_1006325A0);
  v27 = sub_100004828((uint64_t *)&unk_100633440);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
  v206 = xmmword_10051FFB0;
  *(_OWORD *)(v32 + 16) = xmmword_10051FFB0;
  v33 = v32 + v31;
  v34 = (uint64_t *)(v33 + *(int *)(v27 + 48));
  v35 = enum case for DIPError.PropertyKey.attributeID(_:);
  v36 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v33, v35, v36);
  v37 = objc_msgSend(a1, "identifier");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v34[3] = (uint64_t)&type metadata for String;
  *v34 = v38;
  v34[1] = v40;
  v41 = (uint64_t *)sub_10011D314(v32);
  v42 = objc_opt_self(DIAttributeText);
  v43 = swift_dynamicCastObjCClass(a1, v42);
  if (v43)
  {
    v44 = (void *)v43;
    v45 = a1;
    v46 = v214;
    if (!-[uint8_t optional](v214, "optional"))
      goto LABEL_9;
    v47 = objc_msgSend(v44, "getCurrentValue");
    if (!v47)
      goto LABEL_9;
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v40 = v50;

    swift_bridgeObjectRelease(v40);
    v51 = HIBYTE(v40) & 0xF;
    if ((v40 & 0x2000000000000000) == 0)
      v51 = v49 & 0xFFFFFFFFFFFFLL;
    if (!v51)
    {
      v124 = swift_bridgeObjectRelease(v41);
      v125 = v205;
      defaultLogger()(v124);
      v126 = v46;
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.debug.getter(v127);
      if (os_log_type_enabled(v127, v128))
      {
        v129 = (uint8_t *)swift_slowAlloc(12, -1);
        v130 = swift_slowAlloc(32, -1);
        v218 = (uint8_t *)v130;
        *(_DWORD *)v129 = 136446210;
        v213 = (void (**)(_QWORD, _QWORD, _QWORD))(v129 + 4);
        v214 = v129;
        v131 = -[uint8_t identifier](v126, "identifier");
        v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
        v134 = v133;

        v216 = sub_1000E3AC8(v132, v134, (uint64_t *)&v218);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v213);

        swift_bridgeObjectRelease(v134);
        v135 = v214;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "optional attribute %{public}s is empty", v214, 0xCu);
        swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v130, -1, -1);
        swift_slowDealloc(v135, -1, -1);

        ((void (*)(char *, id))v211[1])(v205, v212);
      }
      else
      {

        ((void (*)(char *, id))v211[1])(v125, v212);
      }
    }
    else
    {
LABEL_9:
      v52 = objc_opt_self(DIAttributeSMSOTP);
      v53 = swift_dynamicCastObjCClass(v44, v52);
      if (!v53)
      {
        v99 = objc_msgSend(v44, "submissionString");
        if (v99)
        {
          v100 = v99;
          swift_bridgeObjectRelease(v41);
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          v103 = v102;

          v104 = sub_100004828(&qword_100640CA0);
          v40 = swift_allocObject(v104, 48, 7);
          *(_OWORD *)(v40 + 16) = v206;
          *(_QWORD *)(v40 + 32) = v101;
          *(_QWORD *)(v40 + 40) = v103;
        }
        else
        {
          v120 = v208;
          ((void (**)(char *, _QWORD, unint64_t))v213)[13](v208, enum case for DIPError.Code.missingAttribute(_:), v207);
          v121 = type metadata accessor for DIPError(0);
          v122 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v121, v122, 0, 0);
          v123 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054FE60, 0, v120, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1280);
          swift_willThrow(v123);
        }

        return v40;
      }
      v54 = (void *)v53;
      v55 = v45;
      swift_bridgeObjectRelease(v41);
      v56 = objc_msgSend(v54, "submissionString");
      if (v56)
      {
        v57 = v56;
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v60 = v59;

        v61 = sub_100004828(&qword_100640CA0);
        v40 = swift_allocObject(v61, 48, 7);
        *(_OWORD *)(v40 + 16) = v206;
        *(_QWORD *)(v40 + 32) = v58;
        *(_QWORD *)(v40 + 40) = v60;

        return v40;
      }

    }
    return 0;
  }
  v62 = objc_opt_self(DIAttributeDate);
  v63 = swift_dynamicCastObjCClass(a1, v62);
  if (v63)
  {
    v64 = (void *)v63;
    v40 = a1;
    v65 = objc_msgSend(v64, "getCurrentValue");
    v66 = v207;
    v67 = v208;
    if (v65)
    {
      v68 = v65;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

      v70 = v209;
      v69 = v210;
      v71 = (void (*)(uint64_t, char *, uint64_t))v209[4];
      v71(v10, v14, v210);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v70[7])(v10, 0, 1, v69);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v70[6])(v10, 1, v69) != 1)
      {
        v213 = (void (**)(_QWORD, _QWORD, _QWORD))v40;
        swift_bridgeObjectRelease(v41);
        v72 = v203;
        v71((uint64_t)v203, (char *)v10, v69);
        v73 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
        v74 = -[uint8_t submissionFormat](v214, "submissionFormat");
        if (!v74)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v76 = v75;
          v74 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v76);
        }
        objc_msgSend(v73, "setDateFormat:", v74);

        v78 = v199;
        v77 = v200;
        v79 = v196;
        (*(void (**)(char *, _QWORD, uint64_t))(v199 + 104))(v196, enum case for Calendar.Identifier.gregorian(_:), v200);
        v80 = v195;
        Calendar.init(identifier:)(v79);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v77);
        isa = Calendar._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v80, v198);
        objc_msgSend(v73, "setCalendar:", isa);

        v82 = v201;
        Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
        v83 = Locale._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v202 + 8))(v82, v204);
        objc_msgSend(v73, "setLocale:", v83);

        v84 = sub_100004828(&qword_100640CA0);
        v40 = swift_allocObject(v84, 48, 7);
        *(_OWORD *)(v40 + 16) = v206;
        v85 = Date._bridgeToObjectiveC()().super.isa;
        v86 = objc_msgSend(v73, "stringFromDate:", v85);

        v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
        v89 = v88;

        *(_QWORD *)(v40 + 32) = v87;
        *(_QWORD *)(v40 + 40) = v89;

        ((void (*)(char *, uint64_t))v70[1])(v72, v69);
        return v40;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v209[7])(v10, 1, 1, v210);
    }
    sub_100008030(v10, &qword_100633990);
    ((void (**)(char *, _QWORD, unint64_t))v213)[13](v67, enum case for DIPError.Code.missingAttribute(_:), v66);
    v117 = type metadata accessor for DIPError(0);
    v118 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v117, v118, 0, 0);
    v119 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054FE40, 0, v67, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1285);
    swift_willThrow(v119);

    return v40;
  }
  v105 = objc_opt_self(DIAttributeDocument);
  v106 = swift_dynamicCastObjCClass(a1, v105);
  v40 = v207;
  v107 = (uint64_t)v208;
  if (v106)
  {
    v108 = v106;
    v109 = a1;
    v110 = objc_msgSend((id)v108, "getCurrentValue");
    if (!v110)
    {
LABEL_88:
      v213[13](v107, enum case for DIPError.Code.missingAttribute(_:), v40);
      v187 = type metadata accessor for DIPError(0);
      v188 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v187, v188, 0, 0);
      v177 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054FE20, 0, v107, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1294);
      goto LABEL_89;
    }
    v111 = v110;
    v112 = sub_10001CFF8(0, (unint64_t *)&unk_1006368F0, DIAttributeImage_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v111, v112);

    if (!((unint64_t)v10 >> 62))
    {
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_27:
        v113 = v214;
        v114 = (id)v109;
        swift_bridgeObjectRetain(v41);
        v115 = v215;
        v116 = sub_10016F1F0(v10, v41, v113, (void *)v108);
        if (!v115)
          v40 = v116;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease_n(v41, 2);

        return v40;
      }
      goto LABEL_87;
    }
LABEL_83:
    if (v10 < 0)
      v185 = v10;
    else
      v185 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v186 = _CocoaArrayWrapper.endIndex.getter(v185);
    swift_bridgeObjectRelease(v10);
    if (v186)
      goto LABEL_27;
LABEL_87:
    swift_bridgeObjectRelease(v10);
    goto LABEL_88;
  }
  v136 = objc_opt_self(DIAttributeCamera);
  v137 = swift_dynamicCastObjCClass(a1, v136);
  if (!v137)
  {
    v164 = objc_opt_self(DIAttributePicker);
    v165 = swift_dynamicCastObjCClass(a1, v164);
    if (!v165)
    {
      v174 = objc_opt_self(DIAttributeLabel);
      if (!swift_dynamicCastObjCClass(a1, v174))
      {
        v213[13](v107, enum case for DIPError.Code.badLogic(_:), v40);
        v182 = type metadata accessor for DIPError(0);
        v183 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v182, v183, 0, 0);
        v184 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x800000010054FD50, 0, v107, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1324);
        swift_willThrow(v184);
        return v40;
      }
      swift_bridgeObjectRelease(v41);
      return 0;
    }
    v166 = (void *)v165;
    v109 = a1;
    v167 = objc_msgSend(v166, "getCurrentValue");
    if (v167)
    {
      v168 = v167;
      swift_bridgeObjectRelease(v41);
      v169 = sub_100004828(&qword_100640CA0);
      v40 = swift_allocObject(v169, 48, 7);
      *(_OWORD *)(v40 + 16) = v206;
      v170 = objc_msgSend(v168, "value");
      v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
      v173 = v172;

      *(_QWORD *)(v40 + 32) = v171;
      *(_QWORD *)(v40 + 40) = v173;

      return v40;
    }
    v213[13](v107, enum case for DIPError.Code.missingAttribute(_:), v40);
    v175 = type metadata accessor for DIPError(0);
    v176 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v175, v176, 0, 0);
    v177 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010054FD90, 0, v107, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1317);
LABEL_89:
    swift_willThrow(v177);

    return v40;
  }
  v138 = (void *)v137;
  v209 = a1;
  v139 = objc_msgSend(v138, "getCurrentValue");
  if (!v139)
  {
LABEL_99:
    v213[13](v107, enum case for DIPError.Code.missingAttribute(_:), v40);
    v192 = type metadata accessor for DIPError(0);
    v193 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v192, v193, 0, 0);
    v181 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010054FDC0, 0, v107, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1307);
LABEL_100:
    swift_willThrow(v181);

    return v40;
  }
  v140 = v139;
  v212 = v138;
  v141 = sub_10001CFF8(0, (unint64_t *)&unk_1006368F0, DIAttributeImage_ptr);
  v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v140, v141);

  v210 = v142;
  v211 = v41;
  if (!((unint64_t)v142 >> 62))
  {
    v109 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v109)
    {
LABEL_43:
      v108 = 0;
      v214 = (uint8_t *)(v142 & 0xC000000000000001);
      *(_QWORD *)&v206 = DIAttributeImageEncodingPNG;
      v205 = (char *)DIAttributeImageEncodingJPEG;
      v204 = DIAttributeImageEncodingUnknown;
      v40 = (unint64_t)_swiftEmptyArrayStorage;
      while (v109 != v108)
      {
        if (v214)
          v143 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v108, v142);
        else
          v143 = *(id *)(v142 + 8 * v108 + 32);
        v144 = v143;
        v145 = objc_msgSend(v143, "getCurrentValue");

        if (!v145)
        {
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v142);
          v178 = v208;
          ((void (**)(char *, _QWORD, unint64_t))v213)[13](v208, enum case for DIPError.Code.missingAttribute(_:), v207);
          v179 = type metadata accessor for DIPError(0);
          v180 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v179, v180, 0, 0);
          v181 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054FDF0, 0, v178, 0, v41, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054FD70, 1311);
          goto LABEL_100;
        }
        v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v145);
        v147 = v146;

        if (v214)
          v148 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v108, v142);
        else
          v148 = *(id *)(v142 + 8 * v108 + 32);
        v149 = v148;
        if (objc_msgSend(v148, "format"))
        {
          v150 = objc_msgSend(v149, "format");
          if (v150 == (id)1)
          {
            v151 = (void *)v206;
          }
          else if (v150 == (id)2)
          {
            v151 = v205;
          }
          else
          {
            v151 = (void *)v204;
          }
          v152 = v151;
        }
        else
        {
          v152 = objc_msgSend(v149, "encoding");
        }
        v153 = v152;

        v41 = (uint64_t *)objc_msgSend(v212, "scanRequirements");
        v154 = sub_10001CFF8(0, (unint64_t *)&unk_10063F340, DIAttributeImageCaptureRequirements_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v154);

        if ((v10 & 0xC000000000000001) != 0)
        {
          v155 = (uint64_t (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)(v108, v10);
        }
        else
        {
          if (v108 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_82;
          v155 = (uint64_t (*)(char *, uint64_t))*(id *)(v10 + 8 * v108 + 32);
        }
        v156 = v155;
        swift_bridgeObjectRelease(v10);
        v157 = v215;
        v158 = sub_10014B998(v107, v147, v153, v156);
        v215 = v157;
        if (v157)
        {

          swift_bridgeObjectRelease(v40);
          sub_100007F8C(v107, v147);
          swift_bridgeObjectRelease(v210);
          swift_bridgeObjectRelease(v211);

          return v40;
        }
        v160 = v158;
        v10 = v159;

        if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
          v40 = (unint64_t)sub_1000E2358(0, *(_QWORD *)(v40 + 16) + 1, 1, (_QWORD *)v40);
        v162 = *(_QWORD *)(v40 + 16);
        v161 = *(_QWORD *)(v40 + 24);
        if (v162 >= v161 >> 1)
          v40 = (unint64_t)sub_1000E2358((_QWORD *)(v161 > 1), v162 + 1, 1, (_QWORD *)v40);
        ++v108;
        *(_QWORD *)(v40 + 16) = v162 + 1;
        v163 = v40 + 16 * v162;
        *(_QWORD *)(v163 + 32) = v160;
        *(_QWORD *)(v163 + 40) = v10;
        sub_100007F8C(v107, v147);
        v142 = v210;
        v41 = v211;
        if (v109 == v108)
          goto LABEL_97;
      }
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    goto LABEL_98;
  }
  if (v142 < 0)
    v189 = v142;
  else
    v189 = v142 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v142);
  v190 = _CocoaArrayWrapper.endIndex.getter(v189);
  swift_bridgeObjectRelease(v142);
  if (!v190)
  {
LABEL_98:
    swift_bridgeObjectRelease(v142);
    goto LABEL_99;
  }
  swift_bridgeObjectRetain(v142);
  v109 = _CocoaArrayWrapper.endIndex.getter(v189);
  result = swift_bridgeObjectRelease(v142);
  if ((v109 & 0x8000000000000000) == 0)
  {
    v142 = v210;
    v41 = v211;
    if (!v109)
    {
      v40 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_97:

      swift_bridgeObjectRelease(v142);
      swift_bridgeObjectRelease(v41);
      return v40;
    }
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017440C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  id v29;
  Swift::String v30;
  Swift::Bool v31;
  char v32;
  __n128 v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;

  v44 = a1;
  v7 = sub_100004828(&qword_1006368D8);
  __chkstk_darwin(v7);
  v46 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_1006368E0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v43 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v39 - v17;
  defaultLogger()(v16);
  v19 = swift_bridgeObjectRetain_n(a4, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v47 = a3;
  v45 = a2;
  if (v22)
  {
    v23 = swift_slowAlloc(12, -1);
    v40 = v10;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v41 = v9;
    v26 = v25;
    v49[0] = v25;
    v42 = v15;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain(a4);
    v50 = sub_1000E3AC8(a3, a4, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "perform local regex validation from pattern %{public}s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v27 = v26;
    v9 = v41;
    swift_slowDealloc(v27, -1, -1);
    v28 = v24;
    v10 = v40;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v12);
  v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v30._object = (void *)0x800000010054FD20;
  v30._countAndFlagsBits = 0xD000000000000024;
  v31 = NSUserDefaults.internalBool(forKey:)(v30);

  if (v31)
  {
    v32 = 1;
  }
  else
  {
    v33 = swift_bridgeObjectRetain(a4);
    v34 = v46;
    Regex<A>.init(_:)(v47, a4, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v34, 0, 1, v9);
    v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v34, v9);
    v49[0] = v44;
    v49[1] = v45;
    v36 = sub_100099FB8();
    v37 = sub_100099FFC(&qword_1006368E8, &qword_1006368E0, (uint64_t)&protocol conformance descriptor for Regex<A>);
    v32 = BidirectionalCollection<>.contains<A>(_:)(v35, &type metadata for String, v9, v36, v37);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
  }
  return v32 & 1;
}

uint64_t _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v0 = sub_100004828(&qword_100636948);
  v1 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100524F20;
  v2 = (void *)kDIHttpHeaderAppleAppInfo;
  v3 = (void *)kDIHttpHeaderAppleGSToken;
  *(_QWORD *)(v1 + 32) = kDIHttpHeaderAppleAppInfo;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = (void *)kDIHttpHeaderAppleIdentityId;
  v5 = (void *)kDIHttpHeaderAppleRefererIdentifier;
  *(_QWORD *)(v1 + 48) = kDIHttpHeaderAppleIdentityId;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = (void *)kDIHttpHeaderAppleWebServiceSession;
  v7 = (void *)kDIHttpHeaderAuthorization;
  *(_QWORD *)(v1 + 64) = kDIHttpHeaderAppleWebServiceSession;
  *(_QWORD *)(v1 + 72) = v7;
  v8 = (void *)kDIHttpHeaderSEID;
  v9 = (void *)kDIHttpHeaderConversationID;
  *(_QWORD *)(v1 + 80) = kDIHttpHeaderSEID;
  *(_QWORD *)(v1 + 88) = v9;
  v10 = (void *)kDIHttpHeaderDIPGSToken;
  v11 = (void *)kDIHttpHeaderXRequestID;
  *(_QWORD *)(v1 + 96) = kDIHttpHeaderDIPGSToken;
  *(_QWORD *)(v1 + 104) = v11;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  return v1;
}

uint64_t sub_100174A28()
{
  return sub_100099FFC(&qword_100635FC0, &qword_100635FC8, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_100174A54()
{
  return type metadata accessor for SubmittedAttributeWrapper(0);
}

uint64_t type metadata accessor for SubmittedAttributeWrapper(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100635FF8, (uint64_t)&nominal type descriptor for SubmittedAttributeWrapper);
}

void sub_100174A70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_100525030;
  v4[1] = &unk_100525030;
  v4[2] = &unk_100525030;
  v4[3] = &unk_100525030;
  v4[4] = &unk_100525030;
  v4[5] = &unk_100525030;
  v4[6] = &unk_100525048;
  v4[7] = &unk_100525060;
  v4[8] = &unk_100525078;
  v4[9] = &unk_100525090;
  v4[10] = &unk_100525048;
  v4[11] = &unk_100525048;
  sub_100174B1C(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
}

void sub_100174B1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100636008)
  {
    v2 = sub_100013E24((uint64_t *)&unk_100636010);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100636008);
  }
}

uint64_t sub_100174B74()
{
  return type metadata accessor for IDVSessionProxy(0);
}

uint64_t type metadata accessor for IDVSessionProxy(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100636380, (uint64_t)&nominal type descriptor for IDVSessionProxy);
}

void sub_100174B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[26];
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  void (**v17)(uint64_t *, uint64_t, ValueMetadata *);
  uint64_t v18;
  uint64_t v19;
  void (**v20)(uint64_t *, uint64_t, ValueMetadata *);
  void *v21;

  v8[0] = &unk_100525060;
  v8[1] = "\b";
  v8[2] = "\b";
  v8[3] = "\b";
  v8[4] = &unk_1005250D0;
  v8[5] = "\b";
  v8[6] = &unk_100525048;
  v8[7] = "\b";
  v8[8] = &value witness table for Builtin.BridgeObject[8];
  v8[9] = &value witness table for Builtin.BridgeObject[8];
  v8[10] = &unk_1005250E8;
  v8[11] = &unk_1005250E8;
  v8[12] = "\b";
  v8[13] = "\b";
  v8[14] = &unk_100525100;
  v8[15] = &unk_100525060;
  v8[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[18] = "\b";
  v8[19] = "\b";
  v8[20] = &unk_100525118;
  v8[21] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[25] = &unk_100525130;
  v2 = type metadata accessor for DIPRetrier(319);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v11 = "\b";
    v12 = "\b";
    v13 = &unk_100525030;
    v14 = &unk_100525148;
    v15 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v16 = (char *)&value witness table for Builtin.UnknownObject + 64;
    v17 = &value witness table for Builtin.BridgeObject[8];
    sub_10003B6E4(319, (unint64_t *)&unk_1006363B0, type metadata accessor for AugmentedProfile);
    if (v5 <= 0x3F)
    {
      v18 = *(_QWORD *)(v4 - 8) + 64;
      sub_10003B6E4(319, (unint64_t *)&qword_100634D58, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v19 = *(_QWORD *)(v6 - 8) + 64;
        v20 = &value witness table for Builtin.BridgeObject[8];
        v21 = &unk_100525160;
        swift_updateClassMetadata2(a1, 256, 39, v8, a1 + 80);
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for DIPCloudContainerState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100174DF8 + 4 * byte_100524F65[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100174E2C + 4 * byte_100524F60[v4]))();
}

uint64_t sub_100174E2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100174E34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100174E3CLL);
  return result;
}

uint64_t sub_100174E48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100174E50);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100174E54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100174E5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DIPState()
{
  return &type metadata for DIPState;
}

unint64_t sub_100174E7C()
{
  unint64_t result;

  result = qword_1006363C0;
  if (!qword_1006363C0)
  {
    result = swift_getWitnessTable(&unk_100525204, &type metadata for DIPState);
    atomic_store(result, (unint64_t *)&qword_1006363C0);
  }
  return result;
}

const char *sub_100174EC0()
{
  uint64_t v0;

  return sub_10049AD04(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_100174ED8()
{
  uint64_t v0;

  sub_100007F8C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100174F04()
{
  uint64_t v0;

  sub_10016B120(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32));
}

uint64_t sub_100174F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100174F20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100174F28(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  Class isa;
  id v33;
  _OWORD v37[2];
  __int128 v38;
  void *v39;

  v14 = sub_10011D1E0((uint64_t)_swiftEmptyArrayStorage);
  if (a4)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    v17 = v16;
    v39 = &type metadata for String;
    *(_QWORD *)&v38 = a3;
    *((_QWORD *)&v38 + 1) = a4;
    sub_10000491C(&v38, v37);
    swift_bridgeObjectRetain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_100481A14(v37, v15, v17, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (a6)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    v21 = v20;
    v39 = &type metadata for String;
    *(_QWORD *)&v38 = a5;
    *((_QWORD *)&v38 + 1) = a6;
    sub_10000491C(&v38, v37);
    swift_bridgeObjectRetain(a6);
    v22 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_100481A14(v37, v19, v21, v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (a8)
  {
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedRecoverySuggestionErrorKey);
    v25 = v24;
    v39 = &type metadata for String;
    *(_QWORD *)&v38 = a7;
    *((_QWORD *)&v38 + 1) = a8;
    sub_10000491C(&v38, v37);
    swift_bridgeObjectRetain(a8);
    v26 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_100481A14(v37, v23, v25, v26);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(DIVerificationErrorDomain);
  v28 = v27;
  if ((a2 & 1) != 0)
    v29 = -6;
  else
    v29 = a1;
  v30 = objc_allocWithZone((Class)NSError);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v33 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, v29, isa);

  return v33;
}

void *sub_1001751A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t isa;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t *v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t *v41;
  int64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(void);
  id v53;
  uint64_t v54;
  uint64_t *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  id v88;
  uint64_t *v89;
  id v90;
  id v91;
  unint64_t v92;
  unint64_t v93;
  uint8_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  id v103;
  uint64_t v104;
  void *v105;
  id v106;
  char v108;
  id v109;
  uint64_t v110;
  void *v111;
  int v112;
  id v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  _QWORD *v132;
  id v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  char v141;
  uint64_t v142;
  char v143;
  char v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  NSString v149;
  id v150;
  uint64_t v151;
  uint8_t *v152;
  int v153;
  int v154;
  id v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  id v168;
  id v169;
  uint8_t *v170;
  unint64_t v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  char *v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t *v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  char *v192;
  uint64_t v193;
  uint8_t *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  unint64_t v218;
  uint64_t v219;
  _BOOL8 v220;
  uint64_t v221;
  char v222;
  unint64_t v223;
  char v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  int64_t v233;
  unint64_t v234;
  unint64_t i;
  unint64_t v236;
  int64_t v237;
  uint64_t *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  id v258;
  uint64_t v259;
  NSObject *v260;
  uint64_t v261;
  os_log_type_t v262;
  uint8_t *v263;
  id v264;
  void *result;
  uint64_t v266;
  char *v267;
  __int128 v268;
  uint64_t **v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint8_t *v289;
  uint8_t *v290;
  uint64_t v291;
  __int128 v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  int64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  unsigned int v302;
  char v303;

  v285 = a3;
  v296 = a2;
  v276 = type metadata accessor for Logger(0);
  v275 = *(_QWORD *)(v276 - 8);
  v4 = __chkstk_darwin(v276);
  v277 = (char *)&v266 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v272 = (char *)&v266 - v7;
  __chkstk_darwin(v6);
  v9 = (uint64_t)&v266 - v8;
  v279 = type metadata accessor for DIPError.Code(0);
  v278 = *(_QWORD *)(v279 - 8);
  __chkstk_darwin(v279);
  v281 = (char *)&v266 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = type metadata accessor for DIPError(0);
  v271 = *(_QWORD *)(v280 - 8);
  __chkstk_darwin(v280);
  v270 = (char *)&v266 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "attributes");
  v293 = sub_10001CFF8(0, &qword_1006323A0, DIAttribute_ptr);
  isa = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v293);

  isUniquelyReferenced_nonNull_native = sub_10011E8BC((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)isa >> 62)
    goto LABEL_117;
  v15 = *(uint64_t **)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(isa);
LABEL_3:
  v273 = v9;
  if (v15)
  {
    v297 = isa;
    v298 = isa & 0xC000000000000001;
    v16 = 4;
    do
    {
      v18 = (id)(v16 - 4);
      if (v298)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, isa);
        v20 = (uint64_t *)(v16 - 3);
        if (__OFADD__(v18, 1))
          goto LABEL_107;
      }
      else
      {
        v19 = *(id *)(isa + 8 * v16);
        v20 = (uint64_t *)(v16 - 3);
        if (__OFADD__(v18, 1))
        {
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          swift_bridgeObjectRelease(v287);
          swift_errorRelease(v282);

LABEL_110:
          swift_bridgeObjectRelease(v18);
          v200 = isUniquelyReferenced_nonNull_native;
LABEL_111:
          swift_bridgeObjectRelease(v200);
          goto LABEL_185;
        }
      }
      v299 = v20;
      v21 = v15;
      v22 = v19;
      v18 = objc_msgSend(v19, "identifier", v266);
      v15 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      isa = v23;

      v24 = isUniquelyReferenced_nonNull_native;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native);
      v301 = (uint64_t *)v24;
      v26 = sub_1004A8604((uint64_t)v15, isa);
      v27 = *(_QWORD *)(v24 + 16);
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_108;
      v30 = v25;
      if (*(_QWORD *)(v24 + 24) >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = (unint64_t)v301;
          if ((v25 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_10012ADFC();
          isUniquelyReferenced_nonNull_native = (unint64_t)v301;
          if ((v30 & 1) != 0)
            goto LABEL_5;
        }
      }
      else
      {
        sub_1001262F4(v29, isUniquelyReferenced_nonNull_native);
        v31 = sub_1004A8604((uint64_t)v15, isa);
        if ((v30 & 1) != (v32 & 1))
          goto LABEL_195;
        v26 = v31;
        isUniquelyReferenced_nonNull_native = (unint64_t)v301;
        if ((v30 & 1) != 0)
        {
LABEL_5:
          v17 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56);

          *(_QWORD *)(v17 + 8 * v26) = v22;
          goto LABEL_6;
        }
      }
      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v26 >> 6) + 64) |= 1 << v26;
      v33 = (uint64_t **)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v26);
      *v33 = v15;
      v33[1] = (uint64_t *)isa;
      *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v26) = v22;
      v34 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:

        swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
        v200 = v287;
        goto LABEL_111;
      }
      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v36;
      swift_bridgeObjectRetain(isa);
LABEL_6:
      swift_bridgeObjectRelease(isa);
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v16;
      v15 = v21;
      isa = v297;
    }
    while (v299 != v21);
  }
  swift_bridgeObjectRelease_n(isa, 2);
  v303 = 0;
  v37 = objc_msgSend(v296, "attributes");
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v293);

  v287 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v202 = v9;
    else
      v202 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v38 = _CocoaArrayWrapper.endIndex.getter(v202);
    swift_bridgeObjectRelease(v287);
    if (!v38)
    {
LABEL_125:
      swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(v287);
      goto LABEL_126;
    }
  }
  else
  {
    v38 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v38)
      goto LABEL_125;
  }
  v282 = 0;
  v39 = 0;
  v274 = &v286[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  v293 = v287 & 0xC000000000000001;
  v284 = v287 & 0xFFFFFFFFFFFFFF8;
  v283 = v287 + 32;
  v302 = enum case for DIPError.PropertyKey.page(_:);
  v269 = &v301;
  LODWORD(v297) = enum case for DIPError.PropertyKey.attributeID(_:);
  v266 = DIVerificationErrorDomain;
  *((_QWORD *)&v40 + 1) = 4;
  v292 = xmmword_1005208D0;
  *(_QWORD *)&v40 = 136446210;
  v268 = v40;
  v267 = (char *)&type metadata for Any + 8;
  v295 = isUniquelyReferenced_nonNull_native;
  v291 = v38;
  do
  {
    while (1)
    {
      if (v293)
      {
        v41 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v287);
      }
      else
      {
        if (v39 >= *(_QWORD *)(v284 + 16))
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          if (isa < 0)
            v201 = isa;
          else
            v201 = isa & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(isa, 2);
          v15 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v201);
          swift_bridgeObjectRelease(isa);
          goto LABEL_3;
        }
        v41 = (uint64_t *)*(id *)(v283 + 8 * v39);
      }
      v15 = v41;
      v35 = __OFADD__(v39, 1);
      v42 = v39 + 1;
      if (v35)
        goto LABEL_113;
      v298 = v42;
      v43 = (uint8_t *)sub_100004828((uint64_t *)&unk_1006325A0);
      v44 = sub_100004828((uint64_t *)&unk_100633440);
      v45 = *(_QWORD *)(v44 - 8);
      v46 = *(_QWORD *)(v45 + 72);
      v47 = *(unsigned __int8 *)(v45 + 80);
      v48 = (v47 + 32) & ~v47;
      v290 = v43;
      v288 = v47 | 7;
      v9 = swift_allocObject(v43, v48 + 2 * v46, v47 | 7);
      *(_OWORD *)(v9 + 16) = v292;
      v289 = (uint8_t *)v48;
      v49 = v9 + v48;
      v50 = (_QWORD *)(v49 + *(int *)(v44 + 48));
      v51 = type metadata accessor for DIPError.PropertyKey(0);
      v52 = *(void (**)(void))(*(_QWORD *)(v51 - 8) + 104);
      ((void (*)(uint64_t, _QWORD, uint64_t))v52)(v49, v302, v51);
      v53 = objc_msgSend(v296, "page");
      v50[3] = &type metadata for Int;
      *v50 = v53;
      v54 = *(int *)(v44 + 48);
      v299 = v15;
      v55 = (uint64_t *)(v49 + v46 + v54);
      v52();
      v56 = objc_msgSend(v299, "identifier");
      isa = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v58 = v57;

      v55[3] = (uint64_t)&type metadata for String;
      *v55 = isa;
      v55[1] = v58;
      v15 = v299;
      v59 = (uint8_t *)sub_10011D314(v9);
      if (objc_msgSend(v15, "isAttributeTypeLabel")
        || objc_msgSend(v15, "isAttributeTypeFooter"))
      {

        swift_bridgeObjectRelease(v59);
        isUniquelyReferenced_nonNull_native = v295;
        goto LABEL_34;
      }
      v60 = objc_msgSend(v15, "identifier");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      isa = v61;

      isUniquelyReferenced_nonNull_native = v295;
      if (*(_QWORD *)(v295 + 16))
      {
        v62 = v9;
        v9 = v295;
        v63 = sub_1004A8604(v62, isa);
        if ((v64 & 1) != 0)
          break;
      }
      swift_bridgeObjectRelease(isa);
      if (objc_msgSend(v15, "holdLocally"))
      {
        v96 = *(_QWORD *)(v285 + 5984);
        v97 = *(_QWORD *)(v96 + 16);
        if (!v97)
        {
          swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
          v171 = v287;
          v172 = v299;
          goto LABEL_101;
        }
        v290 = v59;
        swift_bridgeObjectRetain_n(v96, 2);
        v289 = (uint8_t *)v96;
        v98 = (_QWORD *)(v96 + 64);
        while (1)
        {
          v99 = *(v98 - 4);
          v18 = (id)*(v98 - 3);
          v100 = *(v98 - 2);
          v101 = *v98;
          swift_bridgeObjectRetain(*v98);
          swift_bridgeObjectRetain(v18);
          *(_QWORD *)&v102 = swift_bridgeObjectRetain(v100).n128_u64[0];
          v103 = objc_msgSend(v299, "identifier", v102);
          v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
          v106 = v105;

          if (v99 == v104 && v18 == v106)
          {
            swift_bridgeObjectRelease_n(v289, 2);
            swift_bridgeObjectRelease(v18);
            goto LABEL_66;
          }
          v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v99, v18, v104, v106, 0);
          swift_bridgeObjectRelease(v106);
          if ((v108 & 1) != 0)
            break;
          v98 += 5;
          swift_bridgeObjectRelease(v101);
          swift_bridgeObjectRelease(v100);
          swift_bridgeObjectRelease(v18);
          if (!--v97)
          {
            swift_bridgeObjectRelease(v295);
            swift_bridgeObjectRelease(v287);
            v170 = v289;
            swift_bridgeObjectRelease(v289);
            v171 = (unint64_t)v170;
            v172 = v299;
            v59 = v290;
            goto LABEL_101;
          }
        }
        swift_bridgeObjectRelease_n(v289, 2);
LABEL_66:
        v59 = v290;
        isUniquelyReferenced_nonNull_native = v295;
        v172 = v299;
        if (!v100)
        {
          swift_bridgeObjectRelease(v287);
          swift_bridgeObjectRelease(v101);
          swift_bridgeObjectRelease(v18);
          v171 = isUniquelyReferenced_nonNull_native;
LABEL_101:
          swift_bridgeObjectRelease(v171);
          v173 = v281;
          (*(void (**)(char *, _QWORD, uint64_t))(v278 + 104))(v281, enum case for DIPError.Code.unexpectedDaemonState(_:), v279);
          v174 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v175 = swift_allocError(v280, v174, 0, 0);
          v176 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x800000010054FCA0, 0, v173, 0, v59, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000022, 0x800000010054FC00, 1009);
          v294 = v175;
          swift_willThrow(v176);
          swift_errorRelease(v282);

LABEL_185:
          sub_100148F24(&v303, v296, v286);
          return v296;
        }
        swift_bridgeObjectRetain(v100);
        swift_bridgeObjectRelease(v59);
        v118 = objc_msgSend(v172, "dataNodeProof", swift_bridgeObjectRetain(v18).n128_f64[0]);
        v119 = objc_msgSend(v172, "dataNodeProofGroup");
        if (v119)
        {
          v120 = v119;
          v290 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
          v122 = v121;

        }
        else
        {
          v290 = 0;
          v122 = 0;
        }
        v123 = type metadata accessor for SubmittedAttributeWrapper(0);
        v124 = swift_allocObject(v123, *(unsigned int *)(v123 + 48), *(unsigned __int16 *)(v123 + 52));
        v125 = v294;
        sub_10014194C(v99, (uint64_t)v18, v100, 0, 0, v118, (uint64_t)v290, v122, 1u, 0);
        v294 = v125;
        if (v125)
        {

          swift_errorRelease(v282);
          swift_bridgeObjectRelease(v287);
          swift_bridgeObjectRelease(v101);
          swift_bridgeObjectRelease(v100);
          goto LABEL_110;
        }
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v100);
        swift_bridgeObjectRelease(v18);
        v126 = objc_msgSend(v172, "identifier");
        v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
        v129 = v128;

        isa = (uint64_t)v274;
        swift_beginAccess(v274, &v301, 33, 0);
        swift_retain(v124);
        v130 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)isa);
        v300 = *(_QWORD *)isa;
        *(_QWORD *)isa = 0x8000000000000000;
        v9 = (uint64_t)&v300;
        sub_100481B60(v124, v127, v129, v130);
        v131 = *(_QWORD *)isa;
        *(_QWORD *)isa = v300;
        swift_bridgeObjectRelease(v129);
        swift_bridgeObjectRelease(v131);
        swift_endAccess(&v301);

        swift_release(v124);
      }
      else
      {
        swift_bridgeObjectRelease(v59);
        if (!objc_msgSend(v15, "optional"))
        {
          swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease(v287);
          v177 = v15;
          v178 = v281;
          (*(void (**)(char *, _QWORD, uint64_t))(v278 + 104))(v281, enum case for DIPError.Code.missingAttribute(_:), v279);
          v179 = v289;
          v180 = swift_allocObject(v290, &v289[v46], v288);
          *(_OWORD *)(v180 + 16) = xmmword_10051FFB0;
          v181 = (uint64_t *)&v179[v180 + *(int *)(v44 + 48)];
          v52();
          v182 = objc_msgSend(v177, "identifier");
          v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
          v185 = v184;

          v181[3] = (uint64_t)&type metadata for String;
          *v181 = v183;
          v181[1] = v185;
          v186 = sub_10011D314(v180);
          v187 = v270;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010054FBE0, 0, v178, 0, v186, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000022, 0x800000010054FC00, 1020);
          v188 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v189 = v280;
          swift_allocError(v280, v188, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v271 + 32))(v190, v187, v189);
          v191 = v296;
          swift_errorRelease(v282);

          sub_100148F24(&v303, v191, v286);
          return v296;
        }

      }
LABEL_34:
      v39 = v298;
      if (v298 == v291)
        goto LABEL_99;
    }
    v65 = *(id *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v63);
    swift_bridgeObjectRelease(isa);
    v66 = v294;
    v67 = sub_100172D8C(v65, (uint8_t *)v15);
    v294 = v66;
    if (v66)
    {
      swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(v287);
      v192 = v281;
      (*(void (**)(char *, _QWORD, uint64_t))(v278 + 104))(v281, enum case for DIPError.Code.internalError(_:), v279);
      v193 = v294;
      swift_errorRetain(v294);
      v194 = v59;
      v195 = v270;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010054FCF0, v193, v192, 0, v194, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000022, 0x800000010054FC00, 1034);
      v196 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v197 = v280;
      swift_allocError(v280, v196, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v271 + 32))(v198, v195, v197);
      v199 = v296;
      swift_errorRelease(v282);
      swift_errorRelease(v193);

      sub_100148F24(&v303, v199, v286);
      return v296;
    }
    v68 = (_QWORD *)v67;
    swift_bridgeObjectRelease(v59);
    if (v68)
    {
      objc_msgSend(v15, "setIncorrect:", 0);
      v69 = objc_msgSend(v15, "clientValidationRegex");
      if (v69)
      {
        v70 = v69;
        v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v9 = v72;

        v73 = v68[2];
        if (v73)
        {
          v74 = v68[4];
          v75 = v68[5];
          swift_bridgeObjectRetain(v68);
          swift_bridgeObjectRetain(v75);
          v76 = sub_10017440C(v74, v75, v71, v9);
          swift_bridgeObjectRelease(v75);
          if ((v76 & 1) == 0)
          {
LABEL_47:
            v83 = swift_bridgeObjectRelease(v9);
            v84 = v273;
            defaultLogger()(v83);
            v15 = v299;
            v85 = Logger.logObject.getter(v15);
            v86 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v85, v86))
            {
              v87 = (uint8_t *)swift_slowAlloc(12, -1);
              v299 = (uint64_t *)swift_slowAlloc(32, -1);
              v301 = v299;
              v290 = v87;
              *(_DWORD *)v87 = v268;
              v289 = v87 + 4;
              v88 = objc_msgSend(v15, "identifier");
              v89 = v15;
              v90 = v65;
              v91 = v88;
              isa = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
              v93 = v92;

              v65 = v90;
              v15 = v89;
              v300 = sub_1000E3AC8(isa, v93, (uint64_t *)&v301);
              isUniquelyReferenced_nonNull_native = v295;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v300, v269, v289);

              swift_bridgeObjectRelease(v68);
              swift_bridgeObjectRelease(v93);
              v94 = v290;
              _os_log_impl((void *)&_mh_execute_header, v85, v86, "regex validation for %{public}s failed", v290, 0xCu);
              v95 = v299;
              swift_arrayDestroy(v299, 1, v267);
              swift_slowDealloc(v95, -1, -1);
              swift_slowDealloc(v94, -1, -1);

              (*(void (**)(uint64_t, uint64_t))(v275 + 8))(v273, v276);
            }
            else
            {

              (*(void (**)(uint64_t, uint64_t))(v275 + 8))(v84, v276);
              swift_bridgeObjectRelease(v68);
            }
            v303 = 1;
            v133 = objc_msgSend(v15, "codeOnError", v266);
            if (v133)
            {
              v134 = v133;
              v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
              v137 = v136;

            }
            else
            {
              v135 = 0;
              v137 = 0xE000000000000000;
            }
            v9 = sub_1004E04F4(v135, v137);
            v144 = v143;
            objc_msgSend(v15, "setIncorrect:", 1);
            if (v282)
            {
LABEL_89:

            }
            else
            {
              v145 = sub_10011D1E0((uint64_t)_swiftEmptyArrayStorage);
              static String._unconditionallyBridgeFromObjectiveC(_:)(v266);
              v147 = v146;
              if ((v144 & 1) != 0)
                v9 = -6;
              v148 = objc_allocWithZone((Class)NSError);
              v149 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v147);
              isa = (uint64_t)Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v145);
              v282 = objc_msgSend(v148, "initWithDomain:code:userInfo:", v149, v9, isa);

            }
            swift_bridgeObjectRelease(v68);
            goto LABEL_34;
          }
          isa = 0;
          v77 = v68 + 7;
          v78 = v73 - 1;
          while (v78 != isa)
          {
            if ((unint64_t)++isa >= v68[2])
              goto LABEL_116;
            v79 = v77 + 2;
            v80 = *(v77 - 1);
            v81 = *v77;
            swift_bridgeObjectRetain(*v77);
            v82 = sub_10017440C(v80, v81, v71, v9);
            swift_bridgeObjectRelease(v81);
            v77 = v79;
            isUniquelyReferenced_nonNull_native = v295;
            if ((v82 & 1) == 0)
              goto LABEL_47;
          }
          swift_bridgeObjectRelease(v9);
          v132 = v68;
        }
        else
        {
          v132 = (_QWORD *)v9;
        }
        swift_bridgeObjectRelease(v132);
        v15 = v299;
        if (v282)
          goto LABEL_89;
      }
      else
      {
        objc_msgSend(v15, "attributeType");
        if (v282)
          goto LABEL_89;
      }
      v299 = (uint64_t *)v65;
      v150 = objc_msgSend(v15, "identifier", v266);
      v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
      v290 = v152;

      LODWORD(v289) = objc_msgSend(v15, "isSensitive");
      v153 = objc_msgSend(v15, "notForVerification");
      v154 = objc_msgSend(v15, "dataNodeProof");
      v155 = objc_msgSend(v15, "dataNodeProofGroup");
      if (v155)
      {
        v156 = v155;
        v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
        v159 = v158;

      }
      else
      {
        v157 = 0;
        v159 = 0;
      }
      v160 = type metadata accessor for SubmittedAttributeWrapper(0);
      v59 = (uint8_t *)swift_allocObject(v160, *(unsigned int *)(v160 + 48), *(unsigned __int16 *)(v160 + 52));
      v161 = v294;
      sub_10014194C(v151, (uint64_t)v290, (uint64_t)v68, (int)v289, v153, v154, v157, v159, 0, 0);
      v294 = v161;
      if (v161)
        goto LABEL_114;
      swift_retain(v59);
      v162 = objc_msgSend(v15, "identifier");
      v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
      v165 = v164;

      isa = (uint64_t)v274;
      swift_beginAccess(v274, &v301, 33, 0);
      v166 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)isa);
      v300 = *(_QWORD *)isa;
      *(_QWORD *)isa = 0x8000000000000000;
      sub_100481B60((uint64_t)v59, v163, v165, v166);
      v167 = *(_QWORD *)isa;
      *(_QWORD *)isa = v300;
      swift_bridgeObjectRelease(v165);
      swift_bridgeObjectRelease(v167);
      swift_endAccess(&v301);
      v9 = 1;
      v65 = v299;
    }
    else
    {
      v109 = objc_msgSend(v15, "supportingData");
      v9 = (uint64_t)v109;
      if (v109)
      {
        isa = (uint64_t)v65;
        v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
        v18 = v111;

        v112 = objc_msgSend(v15, "dataNodeProof");
        v113 = objc_msgSend(v15, "dataNodeProofGroup");
        if (v113)
        {
          v114 = v113;
          v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
          v117 = v116;

        }
        else
        {
          v115 = 0;
          v117 = 0;
        }
        v138 = type metadata accessor for SubmittedAttributeWrapper(0);
        v59 = (uint8_t *)swift_allocObject(v138, *(unsigned int *)(v138 + 48), *(unsigned __int16 *)(v138 + 52));
        swift_bridgeObjectRetain(v18);
        v139 = v294;
        sub_10014194C(v110, (uint64_t)v18, (uint64_t)_swiftEmptyArrayStorage, 0, 0, v112, v115, v117, 0, 1u);
        v294 = v139;
        if (v139)
          goto LABEL_109;
        v140 = (uint64_t *)v274;
        swift_beginAccess(v274, &v301, 33, 0);
        swift_retain(v59);
        v141 = swift_isUniquelyReferenced_nonNull_native(*v140);
        v300 = *v140;
        *v140 = 0x8000000000000000;
        sub_100481B60((uint64_t)v59, v110, (uint64_t)v18, v141);
        v142 = *v140;
        *v140 = v300;
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v142);
        swift_endAccess(&v301);
        v9 = 1;
        v65 = (id)isa;
      }
    }
    v168 = objc_msgSend(v65, "getCurrentValue", v266);
    objc_msgSend(v15, "setCurrentValue:", v168);
    swift_unknownObjectRelease(v168);

    v39 = v298;
    if ((_DWORD)v9)
      swift_release(v59);
  }
  while (v39 != v291);
LABEL_99:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(v287);
  if (v282)
  {
    v169 = v296;
    sub_100148F24(&v303, v169, v286);
    return v296;
  }
LABEL_126:
  v203 = objc_msgSend(v296, "serverValidationGroup", v266);
  if (!v203)
  {
LABEL_188:
    v259 = defaultLogger()(v203);
    v260 = Logger.logObject.getter(v259);
    v262 = static os_log_type_t.info.getter(v260, v261);
    if (os_log_type_enabled(v260, v262))
    {
      v263 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v263 = 0;
      _os_log_impl((void *)&_mh_execute_header, v260, v262, "Finished input validation for a page", v263, 2u);
      swift_slowDealloc(v263, -1, -1);

      swift_errorRelease(0);
    }
    else
    {
      swift_errorRelease(0);

    }
    (*(void (**)(char *, uint64_t))(v275 + 8))(v277, v276);
    v264 = v296;
    sub_100148F24(&v303, v264, v286);
    return v296;
  }
  v204 = v203;
  v205 = sub_100004828(&qword_1006368D0);
  v295 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v204, &type metadata for String, v205, &protocol witness table for String);

  v206 = *(_QWORD *)(v285 + 24);
  if (v206)
  {
    v207 = *(_QWORD *)(v206 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs);
    swift_bridgeObjectRetain(v207);
  }
  else
  {
    v207 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v208 = (uint64_t *)sub_10011E8C8((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)v207 >> 62)
    goto LABEL_154;
  v209 = *(uint64_t **)((v207 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v207);
  if (v209)
  {
LABEL_132:
    v297 = v207;
    v298 = v207 & 0xC000000000000001;
    v210 = 4;
    do
    {
      v212 = v210 - 4;
      if (v298)
      {
        v213 = specialized _ArrayBuffer._getElementSlowPath(_:)(v210 - 4, v207);
        v214 = (uint64_t *)(v210 - 3);
        if (__OFADD__(v212, 1))
          goto LABEL_151;
      }
      else
      {
        v213 = *(_QWORD *)(v207 + 8 * v210);
        swift_retain(v213);
        v214 = (uint64_t *)(v210 - 3);
        if (__OFADD__(v212, 1))
        {
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          if (v207 < 0)
            v228 = v207;
          else
            v228 = v207 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v207, 2);
          v209 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v228);
          swift_bridgeObjectRelease(v207);
          if (!v209)
            break;
          goto LABEL_132;
        }
      }
      v299 = v214;
      v216 = *(_QWORD *)(v213 + 16);
      v215 = *(_QWORD *)(v213 + 24);
      swift_bridgeObjectRetain(v215);
      v207 = swift_isUniquelyReferenced_nonNull_native(v208);
      v301 = v208;
      v218 = sub_1004A8604(v216, v215);
      v219 = v208[2];
      v220 = (v217 & 1) == 0;
      v221 = v219 + v220;
      if (__OFADD__(v219, v220))
        goto LABEL_152;
      v222 = v217;
      if (v208[3] >= v221)
      {
        if ((v207 & 1) != 0)
        {
          v208 = v301;
          if ((v217 & 1) != 0)
            goto LABEL_133;
        }
        else
        {
          sub_10012ADF0();
          v208 = v301;
          if ((v222 & 1) != 0)
            goto LABEL_133;
        }
      }
      else
      {
        sub_1001262E8(v221, v207);
        v223 = sub_1004A8604(v216, v215);
        if ((v222 & 1) != (v224 & 1))
          goto LABEL_195;
        v218 = v223;
        v208 = v301;
        if ((v222 & 1) != 0)
        {
LABEL_133:
          v211 = v208[7];
          swift_release(*(_QWORD *)(v211 + 8 * v218));
          *(_QWORD *)(v211 + 8 * v218) = v213;
          goto LABEL_134;
        }
      }
      v208[(v218 >> 6) + 8] |= 1 << v218;
      v225 = (uint64_t *)(v208[6] + 16 * v218);
      *v225 = v216;
      v225[1] = v215;
      *(_QWORD *)(v208[7] + 8 * v218) = v213;
      v226 = v208[2];
      v35 = __OFADD__(v226, 1);
      v227 = v226 + 1;
      if (v35)
        goto LABEL_153;
      v208[2] = v227;
      swift_bridgeObjectRetain(v215);
LABEL_134:
      swift_bridgeObjectRelease(v215);
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v210;
      v207 = v297;
    }
    while (v299 != v209);
  }
  swift_bridgeObjectRelease_n(v207, 2);
  v229 = *(_QWORD *)(v295 + 64);
  v297 = v295 + 64;
  v230 = 1 << *(_BYTE *)(v295 + 32);
  v231 = -1;
  if (v230 < 64)
    v231 = ~(-1 << v230);
  v232 = v231 & v229;
  v299 = (uint64_t *)&v286[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
  swift_beginAccess(&v286[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes], &v301, 0, 0);
  v233 = 0;
  v298 = (unint64_t)(v230 + 63) >> 6;
  if (!v232)
    goto LABEL_162;
LABEL_161:
  v234 = __clz(__rbit64(v232));
  v232 &= v232 - 1;
  for (i = v234 | (v233 << 6); ; i = __clz(__rbit64(v236)) + (v233 << 6))
  {
    v238 = (uint64_t *)(*(_QWORD *)(v295 + 48) + 16 * i);
    v239 = v238[1];
    v240 = *(_QWORD **)(*(_QWORD *)(v295 + 56) + 8 * i);
    if (!v208[2])
    {
      swift_bridgeObjectRetain(v238[1]);
      swift_bridgeObjectRetain(v240);
      swift_bridgeObjectRelease(v239);
      swift_bridgeObjectRelease(v208);
LABEL_184:
      swift_bridgeObjectRelease(v240);
      v250 = v281;
      (*(void (**)(char *, _QWORD, uint64_t))(v278 + 104))(v281, enum case for DIPError.Code.invalidSPURL(_:), v279);
      v251 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v252 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v253 = swift_allocError(v280, v252, 0, 0);
      v254 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010054FC30, 0, v250, 0, v251, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000022, 0x800000010054FC00, 1120);
      v294 = v253;
      swift_willThrow(v254);
      swift_errorRelease(0);
      swift_release(v295);
      goto LABEL_185;
    }
    v241 = *v238;
    swift_bridgeObjectRetain_n(v238[1], 2);
    swift_bridgeObjectRetain(v240);
    v242 = sub_1004A8604(v241, v239);
    if ((v243 & 1) == 0)
    {
      swift_bridgeObjectRelease(v208);
      swift_bridgeObjectRelease_n(v239, 2);
      goto LABEL_184;
    }
    v244 = v208;
    v245 = *(_QWORD *)(v208[7] + 8 * v242);
    swift_retain(v245);
    swift_bridgeObjectRelease(v239);
    v246 = *v299;
    swift_bridgeObjectRetain(v239);
    swift_bridgeObjectRetain(v240);
    swift_bridgeObjectRetain(v246);
    v247 = v294;
    v248 = sub_10016FF34(&_swiftEmptyDictionarySingleton, v246, v240);
    v294 = v247;
    swift_bridgeObjectRelease(v246);
    swift_bridgeObjectRelease(v240);
    swift_bridgeObjectRelease(v239);
    v249 = sub_100149454(v245, v240, v248, v285);
    swift_bridgeObjectRelease(v240);
    swift_bridgeObjectRelease(v239);
    swift_bridgeObjectRelease(v248);
    if (v249)
    {
      v255 = v249;
      swift_bridgeObjectRelease(v244);
      v256 = swift_errorRetain(v249);
      v257 = v272;
      defaultLogger()(v256);
      DIPRecordError(_:message:log:)(v255, 0xD000000000000024, 0x800000010054FC70, v257);
      swift_errorRelease(v255);
      swift_release(v245);
      swift_errorRelease(0);
      (*(void (**)(char *, uint64_t))(v275 + 8))(v257, v276);
      swift_release(v295);
      v303 = 1;
      v258 = v296;
      sub_100148F24(&v303, v258, v286);
      return v296;
    }
    swift_release(v245);
    if (v232)
      goto LABEL_161;
LABEL_162:
    v35 = __OFADD__(v233++, 1);
    if (v35)
    {
      __break(1u);
      goto LABEL_194;
    }
    if (v233 >= v298)
      goto LABEL_187;
    v236 = *(_QWORD *)(v297 + 8 * v233);
    if (!v236)
      break;
LABEL_172:
    v232 = (v236 - 1) & v236;
  }
  v237 = v233 + 1;
  if (v233 + 1 >= v298)
    goto LABEL_187;
  v236 = *(_QWORD *)(v297 + 8 * v237);
  if (v236)
    goto LABEL_171;
  v237 = v233 + 2;
  if (v233 + 2 >= v298)
    goto LABEL_187;
  v236 = *(_QWORD *)(v297 + 8 * v237);
  if (v236)
    goto LABEL_171;
  v237 = v233 + 3;
  if (v233 + 3 >= v298)
  {
LABEL_187:
    swift_bridgeObjectRelease(v208);
    v203 = (id)swift_release(v295);
    goto LABEL_188;
  }
  v236 = *(_QWORD *)(v297 + 8 * v237);
  if (v236)
  {
LABEL_171:
    v233 = v237;
    goto LABEL_172;
  }
  while (1)
  {
    v233 = v237 + 1;
    if (__OFADD__(v237, 1))
      break;
    if (v233 >= v298)
      goto LABEL_187;
    v236 = *(_QWORD *)(v297 + 8 * v233);
    ++v237;
    if (v236)
      goto LABEL_172;
  }
LABEL_194:
  __break(1u);
LABEL_195:
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100177078(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  char v23;
  uint64_t v24;
  void *v25;

  v24 = a3;
  v25 = a4;
  swift_bridgeObjectRetain(a4);
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(v25);
  v12._countAndFlagsBits = a5;
  v12._object = a6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v25);
  v14 = v24;
  v13 = v25;
  v23 = 1;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain(a2);
    v16 = (void **)(a2 + 40);
    while (1)
    {
      v17 = *v16;
      v24 = (uint64_t)*(v16 - 1);
      v25 = v17;
      swift_bridgeObjectRetain(v17);
      sub_10016B2F0(&v24, v14, v13, &v23, a1);
      if (v6)
        break;
      v16 += 2;
      swift_bridgeObjectRelease(v17);
      if (!--v15)
      {
        swift_bridgeObjectRelease(v13);
        v18 = (void *)a2;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18 = v25;
LABEL_7:
    swift_bridgeObjectRelease(v18);
    v19 = a1[3];
    v20 = a1[4];
    sub_10000806C(a1, v19);
    dispatch thunk of IdentityKey.persist()(v19, v20);
    if (!v6)
    {
      v21._object = (void *)0x800000010054DE30;
      v22._countAndFlagsBits = 0x6462373964656164;
      v22._object = (void *)0xE800000000000000;
      v21._countAndFlagsBits = 0xD00000000000003FLL;
      logMilestone(tag:description:)(v22, v21);
    }
  }
}

uint64_t sub_100177204(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v40 = (unint64_t *)result;
  v41 = 0;
  v4 = 0;
  v7 = a3[8];
  v5 = a3 + 8;
  v6 = v7;
  v8 = 1 << *((_BYTE *)v5 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v42 = v5;
  v43 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v4 << 6);
    }
    else
    {
      v14 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_48;
      if (v14 >= v43)
        return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
      v15 = v42[v14];
      ++v4;
      if (!v15)
      {
        v4 = v14 + 1;
        if (v14 + 1 >= v43)
          return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
        v15 = v42[v4];
        if (!v15)
        {
          v4 = v14 + 2;
          if (v14 + 2 >= v43)
            return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
          v15 = v42[v4];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v43)
              return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
            v15 = v42[v16];
            if (!v15)
            {
              while (1)
              {
                v4 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_49;
                if (v4 >= v43)
                  return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
                v15 = v42[v4];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v4 = v16;
          }
        }
      }
LABEL_20:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v4 << 6);
    }
    v17 = (uint64_t *)(a3[6] + 16 * v13);
    v48 = v13;
    v18 = *(_QWORD *)(a3[7] + 8 * v13);
    v19 = *v17;
    v20 = v17[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    v22 = *(_QWORD *)(v21 + 16);
    v49 = v18;
    if (v22)
    {
      v47 = v10;
      swift_bridgeObjectRetain(v20);
      swift_retain(v18);
      swift_bridgeObjectRetain(v21);
      sub_1000E419C(0, v22, 0);
      v46 = v21;
      v23 = (_QWORD *)(v21 + 40);
      do
      {
        v25 = *(v23 - 1);
        v24 = *v23;
        v27 = _swiftEmptyArrayStorage[2];
        v26 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain(*v23);
        if (v27 >= v26 >> 1)
          sub_1000E419C(v26 > 1, v27 + 1, 1);
        v23 += 19;
        _swiftEmptyArrayStorage[2] = v27 + 1;
        v28 = &_swiftEmptyArrayStorage[2 * v27];
        v28[4] = v25;
        v28[5] = v24;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease(v46);
      v10 = v47;
      v29 = _swiftEmptyArrayStorage[2];
      if (!v29)
        goto LABEL_4;
    }
    else
    {
      swift_bridgeObjectRetain(v20);
      swift_retain(v18);
      v29 = _swiftEmptyArrayStorage[2];
      if (!v29)
        goto LABEL_4;
    }
    v30 = _swiftEmptyArrayStorage[4];
    v31 = _swiftEmptyArrayStorage[5];
    if (v30 == v19 && v31 == v20
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v19, v20, 0), (result & 1) != 0))
    {
LABEL_42:
      swift_release(v49);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      result = swift_bridgeObjectRelease(v20);
      goto LABEL_43;
    }
    if (v29 != 1)
      break;
LABEL_4:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v11 = *(_BYTE *)(v49 + 17);
    swift_bridgeObjectRelease(v20);
    result = swift_release(v49);
    if ((v11 & 1) == 0)
    {
LABEL_43:
      *(unint64_t *)((char *)v40 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      if (__OFADD__(v41++, 1))
      {
        __break(1u);
        return sub_1003FB2E4(v40, a2, v41, (uint64_t)a3);
      }
    }
  }
  v32 = &_swiftEmptyArrayStorage[7];
  v33 = 1;
  while (1)
  {
    v34 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    v35 = *(v32 - 1);
    v36 = *v32;
    if (v35 == v19 && v36 == v20)
      goto LABEL_42;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v19, v20, 0);
    if ((result & 1) != 0)
      goto LABEL_42;
    v32 += 2;
    ++v33;
    if (v34 == v29)
      goto LABEL_4;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10017758C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    v11 = sub_100177204((uint64_t)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, (_QWORD *)a1, a2);
    v12 = swift_release(a2);
    if (v3)
      swift_willThrow(v12);
    swift_release_n(a2, 2);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v9, -1);
    bzero(v13, v9);
    swift_retain(a2);
    v11 = sub_100177204((uint64_t)v13, v8, (_QWORD *)a1, a2);
    swift_release(a2);
    swift_slowDealloc(v13, -1, -1);
    swift_release_n(a2, 2);
  }
  return v11;
}

void *sub_100177740(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Class isa;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::String v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  void *result;
  char v57;
  id v58;
  Swift::String v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  char v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *object;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  char v120;
  unint64_t v121;
  void *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void *v128;
  _OWORD *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  Swift::String v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  Swift::String v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  __int128 v154;
  Class v155;
  id v156;
  void *v157;
  unint64_t v158;
  unint64_t v159;
  Swift::String v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  Swift::String v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  Swift::String v184;
  Swift::String v185;
  Swift::String v186;
  Swift::String v187;
  Swift::String v188;
  __int128 v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  Swift::String v210;
  Swift::String v211;
  Swift::String v212;
  Swift::String v213;
  Swift::String v214;
  __int128 v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  Swift::String v229;
  Swift::String v230;
  Swift::String v231;
  Swift::String v232;
  Swift::String v233;
  __int128 v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char v253;
  uint64_t v254;
  void *v255;
  Swift::String v256;
  Swift::String v257;
  Swift::String v258;
  __int128 v259;
  char *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  void *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  Swift::String v315;
  uint64_t v316;
  unint64_t v317;
  void *v318;
  void *v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  unint64_t v323;
  __int128 v324;
  Class v325;
  id v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  Swift::String v330;
  uint64_t v331;
  void *v332;
  void *v333;
  uint64_t v334;
  Swift::String v335;
  Swift::String v336;
  Swift::String v337;
  __int128 v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char v343;
  Swift::String v344;
  Swift::String v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  Swift::String v357;
  char *v358;
  __int128 v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  char v371;
  uint64_t v372;
  unint64_t v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  void (*v377)(char *, uint64_t, uint64_t);
  char *v378;
  Swift::String v379;
  uint64_t v380;
  unint64_t v381;
  char v382;
  char v383;
  uint64_t v384;
  char v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  Swift::String v391;
  Swift::String v392;
  char *v393;
  uint64_t v394;
  void (*v395)(char *, char *, uint64_t);
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t *v402;
  void *v403;
  char v404;
  uint64_t v405;
  void *v406;
  Swift::String v407;
  Swift::String v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  void *v418;
  Swift::String v419;
  void *v420;
  Swift::String v421;
  uint64_t v422;
  unint64_t v423;
  char *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  Swift::String v431;
  Swift::String v432;
  Swift::String v433;
  __int128 v434;
  char *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  void *v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  void *v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t countAndFlagsBits;
  uint64_t v456;
  void *v457;
  uint64_t v458;
  void *v459;
  Swift::String v460;
  uint64_t v461;
  void *v462;
  Swift::String v463;
  Swift::String v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  Swift::String v473;
  uint64_t v474;
  void *v475;
  Swift::String v476;
  Swift::String v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  void *v487;
  void *v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  void *v495;
  void *v496;
  __int128 *v497;
  unsigned int v498;
  __int128 v499;
  unsigned int v500;
  _BOOL4 v501;
  unint64_t v502;
  int64_t v503;
  unint64_t v504;
  void *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _OWORD *v509;
  unint64_t v510;
  uint64_t v511;
  void *v512;
  Swift::String v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  char *v518;
  char *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  void *v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  Swift::String v555;
  __int128 v556;
  Swift::String v557;
  __int128 v558;
  _QWORD v559[7];
  _QWORD v560[5];
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  uint64_t v564;
  char v565;
  uint64_t v566;
  __int128 v567;
  uint64_t v568;
  char v569;
  uint64_t v570;
  uint64_t v571;
  char v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  _BYTE v576[16];
  uint64_t v577;
  uint64_t v578;
  uint64_t v579[17];
  _OWORD v580[8];
  uint64_t v581;
  void *v582;

  v534 = a4;
  v536 = a3;
  v9 = sub_100004828(&qword_1006363E8);
  __chkstk_darwin(v9);
  v523 = (uint64_t)&v485 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828((uint64_t *)&unk_100636010);
  v12 = *(_QWORD *)(v11 - 8);
  v524 = v11;
  v525 = v12;
  v13 = __chkstk_darwin(v11);
  v517 = (char *)&v485 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v518 = (char *)&v485 - v15;
  v16 = type metadata accessor for Logger(0);
  v532 = *(_QWORD *)(v16 - 8);
  v533 = v16;
  __chkstk_darwin(v16);
  v531 = (char *)&v485 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v540 = type metadata accessor for DIPError(0);
  v530 = *(_QWORD *)(v540 - 8);
  v18 = __chkstk_darwin(v540);
  v519 = (char *)&v485 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v526 = (char *)&v485 - v21;
  v22 = __chkstk_darwin(v20);
  v521 = (char *)&v485 - v23;
  __chkstk_darwin(v22);
  v520 = (char *)&v485 - v24;
  v25 = type metadata accessor for String.Encoding(0);
  v528 = *(_QWORD *)(v25 - 8);
  v529 = v25;
  __chkstk_darwin(v25);
  v527 = (char *)&v485 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DIPError.Code(0);
  v537 = *(_QWORD *)(v27 - 8);
  v538 = v27;
  __chkstk_darwin(v27);
  v539 = (char *)&v485 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004828(&qword_1006336F8);
  JWSSignedJSON.payload.getter(v29);
  v30 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for VerifiedClaim(0) + 20));
  JWSSignedJSON.payload.getter(v29);
  v580[6] = v552;
  v580[7] = v553;
  v581 = v554;
  v580[2] = v548;
  v580[3] = v549;
  v580[4] = v550;
  v580[5] = v551;
  v580[0] = v546;
  v580[1] = v547;
  v32 = *((_QWORD *)&v552 + 1);
  v31 = (void *)v553;
  swift_bridgeObjectRetain(v553);
  sub_100182A60(v580);
  v33 = String.uppercased()();
  sub_100182A60(v579);
  v535 = v30;
  v34 = String.uppercased()();
  if (v33._countAndFlagsBits == v34._countAndFlagsBits && v33._object == v34._object)
  {
    swift_bridgeObjectRelease_n(v33._object, 2);
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v33._countAndFlagsBits, v33._object, v34._countAndFlagsBits, v34._object, 0);
    swift_bridgeObjectRelease(v33._object);
    swift_bridgeObjectRelease(v34._object);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease(v31);
      v49 = v539;
      (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.invalidClaim(_:), v538);
      v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v540, v51, 0, 0);
      v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000042, 0x800000010054EA50, 0, v49, 0, v50, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054EAA0, 2021);
LABEL_13:
      swift_willThrow(v52);
      return v582;
    }
  }
  v36 = a1[3];
  v37 = a1[4];
  sub_10000806C(a1, v36);
  v38 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()(v36, v37);
  if (v5)
  {
    swift_bridgeObjectRelease(v31);
    return v582;
  }
  v40 = v38;
  v41 = v39;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100007F8C(v40, v41);
  v43 = (id)DigestSha256(isa);

  if (!v43)
  {
    swift_bridgeObjectRelease(v31);
    v53 = v539;
    (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
    v54 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v55 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v540, v55, 0, 0);
    v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054EAC0, 0, v53, 0, v54, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054EAA0, 2024);
    goto LABEL_13;
  }
  v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
  isUniquelyReferenced_nonNull_native = v45;

  v507 = v44;
  v47 = Data.base64EncodedString(options:)(0);
  v48 = v540;
  if (v47._countAndFlagsBits == v32 && v47._object == v31)
  {
    swift_bridgeObjectRelease_n(v31, 2);
  }
  else
  {
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v47._countAndFlagsBits, v47._object, v32, v31, 0);
    swift_bridgeObjectRelease(v47._object);
    swift_bridgeObjectRelease(v31);
    if ((v57 & 1) == 0)
    {
      v64 = v539;
      (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.claimKeyMismatch(_:), v538);
      v65 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v66 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v48, v66, 0, 0);
      v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x800000010054EB00, 0, v64, 0, v65, 0xD00000000000004CLL, 0x800000010054D540, 0xD000000000000019, 0x800000010054EAA0, 2027);
      swift_willThrow(v67);
      sub_100007F8C(v507, isUniquelyReferenced_nonNull_native);
      return v582;
    }
  }
  if ((a5 & 1) != 0)
  {
    v501 = 1;
  }
  else
  {
    v58 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v59._countAndFlagsBits = 0xD000000000000022;
    v59._object = (void *)0x800000010054EB40;
    v501 = NSUserDefaults.internalBool(forKey:)(v59);

  }
  v60 = (_QWORD *)v535;
  v545 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v534);
  v544 = sub_1004E0740(v61);
  sub_10043A794(v60, 0, 0xE000000000000000);
  v522 = 0;
  v543 = v62;
  v490 = isUniquelyReferenced_nonNull_native;
  if (v536)
  {
    swift_bridgeObjectRetain(v536);
    goto LABEL_63;
  }
  v68 = v534;
  v69 = v534 + 64;
  v70 = 1 << *(_BYTE *)(v534 + 32);
  v71 = -1;
  if (v70 < 64)
    v71 = ~(-1 << v70);
  v72 = v71 & *(_QWORD *)(v534 + 64);
  v32 = (unint64_t)(v70 + 63) >> 6;
  swift_bridgeObjectRetain(v534);
  v74 = 0;
  v536 = (uint64_t)&_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v72)
    {
      v75 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      v76 = v75 | (v74 << 6);
      goto LABEL_42;
    }
    v77 = __OFADD__(v74++, 1);
    if (v77)
    {
      __break(1u);
LABEL_195:
      swift_willThrow(v73);
      swift_errorRetain(v68);
      sub_100007F8C(v507, v490);
      swift_bridgeObjectRelease(v526);
      v454 = v511;
      countAndFlagsBits = v513._countAndFlagsBits;
      sub_100007F8C(v511, v513._countAndFlagsBits);
      sub_100007F8C((uint64_t)v509, v510);
      sub_100007F78((uint64_t)v513._object, (unint64_t)v512);
      swift_bridgeObjectRelease(v32);
      swift_release(v521);
      sub_100007F78(v454, countAndFlagsBits);
LABEL_196:
      swift_release(v508);
      v456 = v543;
      swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(v456);
      v457 = v545;
      swift_bridgeObjectRelease(v582);
      swift_bridgeObjectRelease(v457);
      swift_errorRelease(v68);
      return v582;
    }
    if (v74 >= v32)
      break;
    v78 = *(_QWORD *)(v69 + 8 * v74);
    if (!v78)
    {
      v79 = v74 + 1;
      if (v74 + 1 >= v32)
        break;
      v78 = *(_QWORD *)(v69 + 8 * v79);
      if (!v78)
      {
        v79 = v74 + 2;
        if (v74 + 2 >= v32)
          break;
        v78 = *(_QWORD *)(v69 + 8 * v79);
        if (!v78)
        {
          v79 = v74 + 3;
          if (v74 + 3 >= v32)
            break;
          v78 = *(_QWORD *)(v69 + 8 * v79);
          if (!v78)
          {
            v79 = v74 + 4;
            if (v74 + 4 >= v32)
              break;
            v78 = *(_QWORD *)(v69 + 8 * v79);
            if (!v78)
            {
              v79 = v74 + 5;
              if (v74 + 5 >= v32)
                break;
              v78 = *(_QWORD *)(v69 + 8 * v79);
              if (!v78)
              {
                while (1)
                {
                  v74 = v79 + 1;
                  if (__OFADD__(v79, 1))
                    break;
                  if (v74 >= v32)
                    goto LABEL_62;
                  v78 = *(_QWORD *)(v69 + 8 * v74);
                  ++v79;
                  if (v78)
                    goto LABEL_41;
                }
LABEL_204:
                __break(1u);
                goto LABEL_205;
              }
            }
          }
        }
      }
      v74 = v79;
    }
LABEL_41:
    v72 = (v78 - 1) & v78;
    v76 = __clz(__rbit64(v78)) + (v74 << 6);
LABEL_42:
    v80 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v76);
    if (*(_BYTE *)(v80 + 21) == 1 && (*(_BYTE *)(v80 + 18) & 1) == 0 && (*(_BYTE *)(v80 + 16) & 1) == 0)
    {
      v81 = *(_QWORD *)(v80 + 200);
      if (v81)
      {
        v82 = *(_QWORD *)(v80 + 104);
        if (v82)
        {
          v83 = *(void **)(v80 + 96);
          v511 = *(_QWORD *)(v80 + 192);
          v512 = v83;
          v84 = *(void **)(v80 + 120);
          v513._countAndFlagsBits = *(_QWORD *)(v80 + 112);
          v513._object = v84;
          v85 = *(_QWORD *)(v80 + 136);
          v514 = *(_QWORD *)(v80 + 128);
          v515 = v85;
          v510 = *(_QWORD *)(v80 + 144);
          v516 = *(_QWORD *)(v80 + 152);
          v86 = *(_QWORD *)(v80 + 168);
          v582 = *(void **)(v80 + 160);
          v87 = *(_QWORD *)(v80 + 176);
          v88 = *(unsigned __int8 *)(v80 + 184);
          swift_bridgeObjectRetain(v81);
          LODWORD(v506) = v88;
          v509 = (_OWORD *)v87;
          v508 = v86;
          sub_100184158((uint64_t)v512, v82, v513._countAndFlagsBits, (uint64_t)v513._object, v514, v515, v510, v516, (uint64_t)v582, v86, v87);
          v89 = v536;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v536);
          *(_QWORD *)&v546 = v89;
          v91 = sub_1004A8604(v511, v81);
          v92 = *(_QWORD *)(v89 + 16);
          v93 = (v90 & 1) == 0;
          v94 = v92 + v93;
          if (__OFADD__(v92, v93))
            goto LABEL_206;
          if (*(_QWORD *)(v89 + 24) >= v94)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              isUniquelyReferenced_nonNull_native = v91;
              LODWORD(v536) = v90;
              sub_10012AE14();
              LOBYTE(v90) = v536;
              v91 = isUniquelyReferenced_nonNull_native;
            }
          }
          else
          {
            LODWORD(v536) = v90;
            sub_10012630C(v94, isUniquelyReferenced_nonNull_native);
            v95 = sub_1004A8604(v511, v81);
            v96 = v90 & 1;
            LOBYTE(v90) = v536;
            if ((v536 & 1) != v96)
              goto LABEL_208;
            v91 = v95;
          }
          v97 = v510 & 1;
          v98 = v506 & 1;
          v99 = (_QWORD *)v546;
          v536 = v546;
          if ((v90 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = *(_QWORD *)(v546 + 56) + 96 * v91;
            v100 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8);
            v101 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 40);
            v102 = *(void **)(isUniquelyReferenced_nonNull_native + 64);
            v504 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
            v505 = v102;
            v506 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 80);
            LODWORD(v511) = v98;
            v510 &= 1u;
            swift_bridgeObjectRelease(v101);
            swift_bridgeObjectRelease(v100);
            swift_bridgeObjectRelease(v504);
            swift_bridgeObjectRelease(v505);
            swift_bridgeObjectRelease(v506);
            *(_QWORD *)isUniquelyReferenced_nonNull_native = v512;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8) = v82;
            object = v513._object;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v513._countAndFlagsBits;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) = object;
            v104 = v515;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 32) = v514;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 40) = v104;
            *(_BYTE *)(isUniquelyReferenced_nonNull_native + 48) = v510;
            v105 = v582;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) = v516;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64) = v105;
            v106 = (uint64_t)v509;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) = v508;
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 80) = v106;
            *(_BYTE *)(isUniquelyReferenced_nonNull_native + 88) = v511;
          }
          else
          {
            *(_QWORD *)(v546 + 8 * (v91 >> 6) + 64) |= 1 << v91;
            v107 = (_QWORD *)(v99[6] + 16 * v91);
            *v107 = v511;
            v107[1] = v81;
            v108 = v99[7] + 96 * v91;
            *(_QWORD *)v108 = v512;
            *(_QWORD *)(v108 + 8) = v82;
            v109 = v513._object;
            *(_QWORD *)(v108 + 16) = v513._countAndFlagsBits;
            *(_QWORD *)(v108 + 24) = v109;
            v110 = v515;
            *(_QWORD *)(v108 + 32) = v514;
            *(_QWORD *)(v108 + 40) = v110;
            *(_BYTE *)(v108 + 48) = v97;
            v111 = v582;
            *(_QWORD *)(v108 + 56) = v516;
            *(_QWORD *)(v108 + 64) = v111;
            v112 = (uint64_t)v509;
            *(_QWORD *)(v108 + 72) = v508;
            *(_QWORD *)(v108 + 80) = v112;
            *(_BYTE *)(v108 + 88) = v98;
            v113 = v99[2];
            v77 = __OFADD__(v113, 1);
            v114 = v113 + 1;
            if (v77)
              goto LABEL_207;
            v99[2] = v114;
            swift_bridgeObjectRetain(v81);
          }
          v68 = v534;
          swift_bridgeObjectRelease(v81);
          v73 = swift_bridgeObjectRelease(0x8000000000000000);
        }
      }
    }
  }
LABEL_62:
  swift_release(v68);
  swift_bridgeObjectRelease(0);
  v60 = (_QWORD *)v535;
  v63 = v536;
LABEL_63:
  v115 = 0;
  v116 = *(_QWORD *)(v63 + 64);
  v502 = v63 + 64;
  v117 = 1 << *(_BYTE *)(v63 + 32);
  v118 = -1;
  if (v117 < 64)
    v118 = ~(-1 << v117);
  isUniquelyReferenced_nonNull_native = v118 & v116;
  v503 = (unint64_t)(v117 + 63) >> 6;
  v509 = v560;
  v510 = (unint64_t)&v558;
  v497 = &v556;
  v498 = enum case for DIPError.Code.invalidClaim(_:);
  v582 = &_swiftEmptyDictionarySingleton;
  v500 = enum case for DIPError.PropertyKey.attributeID(_:);
  v489 = (unint64_t)"ode on the merkle tree";
  v495 = (void *)0x800000010054EBF0;
  v496 = (void *)0x800000010054EBD0;
  v499 = xmmword_10051FFB0;
  v491 = (unint64_t)"n the Merkle tree.";
  v492 = (unint64_t)"error deleting stored claim";
  v493 = 0x800000010054D540;
  v494 = 0x800000010054EAA0;
  v487 = (void *)0x800000010054EC40;
  v488 = (void *)0x800000010054EC20;
  v486 = (void *)0x800000010054EC70;
  v536 = v63;
  if ((v118 & v116) != 0)
    goto LABEL_68;
  while (2)
  {
    while (2)
    {
      v77 = __OFADD__(v115++, 1);
      if (v77)
      {
        __break(1u);
LABEL_198:
        swift_bridgeObjectRelease(v526);
        v458 = v543;
        swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease(v458);
        v459 = v545;
        swift_bridgeObjectRelease(v582);
        swift_bridgeObjectRelease(v459);
        *(_QWORD *)&v546 = 0;
        *((_QWORD *)&v546 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v460._countAndFlagsBits = 0xD000000000000013;
        v460._object = (void *)0x800000010054ECF0;
        String.append(_:)(v460);
        v461 = *(_QWORD *)(v32 + 40);
        v462 = *(void **)(v32 + 48);
        swift_bridgeObjectRetain(v462);
        v463._countAndFlagsBits = v461;
        v463._object = v462;
        String.append(_:)(v463);
        swift_bridgeObjectRelease(v462);
        v464._countAndFlagsBits = 0xD00000000000001FLL;
        v464._object = (void *)0x800000010054EDD0;
        String.append(_:)(v464);
        v466 = *((_QWORD *)&v546 + 1);
        v465 = v546;
        v467 = v539;
        (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
        v468 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v469 = v115;
        swift_allocError(v540, v468, 0, 0);
        v470 = 2124;
LABEL_200:
        v479 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v465, v466, 0, v467, 0, v536, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, v470);
        swift_willThrow(v479);
        sub_100007F8C(v507, v490);
        swift_release(v32);
        (*(void (**)(char *, uint64_t))(v525 + 8))(v518, v524);
        v428 = v469;
        goto LABEL_179;
      }
      if (v115 >= v503)
        goto LABEL_118;
      v124 = *(_QWORD *)(v502 + 8 * v115);
      if (v124)
        goto LABEL_79;
      v125 = v115 + 1;
      if (v115 + 1 >= v503)
        goto LABEL_118;
      v124 = *(_QWORD *)(v502 + 8 * v125);
      if (v124)
        goto LABEL_78;
      v125 = v115 + 2;
      if (v115 + 2 >= v503)
        goto LABEL_118;
      v124 = *(_QWORD *)(v502 + 8 * v125);
      if (v124)
        goto LABEL_78;
      v125 = v115 + 3;
      if (v115 + 3 >= v503)
      {
LABEL_118:
        swift_release(v63);
        LODWORD(v506) = sub_10043AAC8((uint64_t)v60);
        v269 = 0;
        v270 = v544;
        v271 = 1 << *(_BYTE *)(v544 + 32);
        v272 = -1;
        if (v271 < 64)
          v272 = ~(-1 << v271);
        v273 = v272 & *(_QWORD *)(v544 + 56);
        isUniquelyReferenced_nonNull_native = (uint64_t)&_swiftEmptyDictionarySingleton;
        v515 = v544 + 56;
        v516 = (unint64_t)(v271 + 63) >> 6;
        v504 = 0x800000010054EDB0;
        v505 = (void *)0x800000010054ED90;
        v502 = v492 | 0x8000000000000000;
        v503 = v491 | 0x8000000000000000;
        v508 = v544;
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (v273)
              {
                v535 = (v273 - 1) & v273;
                v274 = __clz(__rbit64(v273)) | (v269 << 6);
              }
              else
              {
                v77 = __OFADD__(v269++, 1);
                if (v77)
                  goto LABEL_203;
                if (v269 >= v516)
                {
LABEL_186:
                  sub_100007F8C(v507, v490);
                  swift_release(v270);
                  swift_bridgeObjectRelease(v543);
                  return v582;
                }
                v275 = *(_QWORD *)(v515 + 8 * v269);
                if (!v275)
                {
                  v276 = v269 + 1;
                  if (v269 + 1 >= v516)
                    goto LABEL_186;
                  v275 = *(_QWORD *)(v515 + 8 * v276);
                  if (!v275)
                  {
                    v276 = v269 + 2;
                    if (v269 + 2 >= v516)
                      goto LABEL_186;
                    v275 = *(_QWORD *)(v515 + 8 * v276);
                    if (!v275)
                    {
                      v276 = v269 + 3;
                      if (v269 + 3 >= v516)
                        goto LABEL_186;
                      v275 = *(_QWORD *)(v515 + 8 * v276);
                      if (!v275)
                      {
                        while (1)
                        {
                          v269 = v276 + 1;
                          if (__OFADD__(v276, 1))
                            break;
                          if (v269 >= v516)
                            goto LABEL_186;
                          v275 = *(_QWORD *)(v515 + 8 * v269);
                          ++v276;
                          if (v275)
                            goto LABEL_134;
                        }
LABEL_205:
                        __break(1u);
LABEL_206:
                        __break(1u);
LABEL_207:
                        __break(1u);
LABEL_208:
                        result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                        __break(1u);
                        return result;
                      }
                    }
                  }
                  v269 = v276;
                }
LABEL_134:
                v535 = (v275 - 1) & v275;
                v274 = __clz(__rbit64(v275)) + (v269 << 6);
              }
              v115 = v270;
              v277 = (uint64_t *)(*(_QWORD *)(v270 + 48) + 16 * v274);
              v278 = *v277;
              v279 = (char *)v277[1];
              v280 = sub_100004828((uint64_t *)&unk_1006325A0);
              v281 = sub_100004828((uint64_t *)&unk_100633440);
              v282 = *(_QWORD *)(v281 - 8);
              v283 = *(_QWORD *)(v282 + 72);
              v284 = *(unsigned __int8 *)(v282 + 80);
              v285 = (v284 + 32) & ~v284;
              v286 = swift_allocObject(v280, v285 + v283, v284 | 7);
              *(_OWORD *)(v286 + 16) = v499;
              v287 = v286 + v285;
              v288 = (uint64_t *)(v287 + *(int *)(v281 + 48));
              v289 = type metadata accessor for DIPError.PropertyKey(0);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v289 - 8) + 104))(v287, v500, v289);
              v288[3] = (uint64_t)&type metadata for String;
              *v288 = v278;
              v288[1] = (uint64_t)v279;
              swift_bridgeObjectRetain_n(v279, 2);
              v290 = sub_10011D314(v286);
              v291 = v534;
              if (!*(_QWORD *)(v534 + 16))
                goto LABEL_182;
              swift_bridgeObjectRetain(v279);
              v292 = sub_1004A8604(v278, (uint64_t)v279);
              if ((v293 & 1) == 0)
              {
                swift_bridgeObjectRelease(v290);
                v290 = (unint64_t)v279;
LABEL_182:
                swift_bridgeObjectRelease(v290);
                v429 = v543;
                swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
                swift_bridgeObjectRelease(v429);
                v430 = v545;
                swift_bridgeObjectRelease(v582);
                swift_bridgeObjectRelease(v430);
                *(_QWORD *)&v546 = 0;
                *((_QWORD *)&v546 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(60);
                v431._countAndFlagsBits = 0xD000000000000013;
                v431._object = (void *)0x800000010054ECF0;
                String.append(_:)(v431);
                v432._countAndFlagsBits = v278;
                v432._object = v279;
                String.append(_:)(v432);
                swift_bridgeObjectRelease(v279);
                v433._countAndFlagsBits = 0xD000000000000027;
                v433._object = (void *)0x800000010054ED10;
                String.append(_:)(v433);
                v434 = v546;
                v435 = v539;
                (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
                v436 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
                v437 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                swift_allocError(v540, v437, 0, 0);
                v438 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v434, *((_QWORD *)&v434 + 1), 0, v435, 0, v436, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2115);
                swift_willThrow(v438);
                sub_100007F8C(v507, v490);
LABEL_192:
                v428 = v508;
LABEL_179:
                swift_release(v428);
                return v582;
              }
              v536 = v290;
              v32 = *(_QWORD *)(*(_QWORD *)(v291 + 56) + 8 * v292);
              swift_retain(v32);
              swift_bridgeObjectRelease(v279);
              v295 = *(_QWORD *)(v32 + 40);
              v294 = *(void **)(v32 + 48);
              swift_bridgeObjectRetain(v294);
              v296 = v295;
              v297 = v522;
              v298 = sub_10040C194(v296, v294);
              v522 = v297;
              if (v297)
              {
                sub_100007F8C(v507, v490);
                swift_release(v115);
                swift_bridgeObjectRelease(v279);
                swift_bridgeObjectRelease(v536);
                swift_release(v32);
                swift_bridgeObjectRelease(v294);
                v266 = v543;
                v267 = (void *)isUniquelyReferenced_nonNull_native;
LABEL_117:
                swift_bridgeObjectRelease(v267);
                swift_bridgeObjectRelease(v266);
                v268 = v545;
                swift_bridgeObjectRelease(v582);
                swift_bridgeObjectRelease(v268);
                return v582;
              }
              v301 = v300;
              v520 = v298;
              v526 = v299;
              swift_bridgeObjectRelease(v294);
              swift_bridgeObjectRelease(v301);
              v302 = v32 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue;
              swift_beginAccess(v32 + OBJC_IVAR____TtC8coreidvd25SubmittedAttributeWrapper__encryptedValue, &v541, 0, 0);
              v303 = v302;
              v304 = v523;
              sub_100038B24(v303, v523, &qword_1006363E8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v525 + 48))(v304, 1, v524) == 1)
                break;
              swift_bridgeObjectRelease(v279);
              v377 = *(void (**)(char *, uint64_t, uint64_t))(v525 + 32);
              v377(v518, v304, v524);
              if (!*(_QWORD *)(v32 + 200))
                goto LABEL_198;
              v378 = (char *)v32;
              v379 = String.lowercased()();
              v380 = v543;
              swift_bridgeObjectRetain(v543);
              v513 = v379;
              v381 = sub_1004A8604(v379._countAndFlagsBits, (uint64_t)v379._object);
              v383 = v382;
              swift_bridgeObjectRelease(v380);
              if ((v383 & 1) == 0)
              {
                swift_bridgeObjectRelease(v513._object);
                swift_bridgeObjectRelease(v526);
                v471 = v543;
                swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
                swift_bridgeObjectRelease(v471);
                v472 = v545;
                swift_bridgeObjectRelease(v582);
                swift_bridgeObjectRelease(v472);
                *(_QWORD *)&v546 = 0;
                *((_QWORD *)&v546 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(74);
                v473._countAndFlagsBits = 0xD000000000000013;
                v473._object = (void *)0x800000010054EDF0;
                String.append(_:)(v473);
                v32 = (uint64_t)v378;
                v474 = *((_QWORD *)v378 + 5);
                v475 = (void *)*((_QWORD *)v378 + 6);
                swift_bridgeObjectRetain(v475);
                v476._countAndFlagsBits = v474;
                v476._object = v475;
                String.append(_:)(v476);
                swift_bridgeObjectRelease(v475);
                v477._countAndFlagsBits = 0xD000000000000035;
                v477._object = (void *)0x800000010054EE10;
                String.append(_:)(v477);
                v466 = *((_QWORD *)&v546 + 1);
                v465 = v546;
                v467 = v539;
                (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
                v478 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                v469 = v115;
                swift_allocError(v540, v478, 0, 0);
                v470 = 2127;
                goto LABEL_200;
              }
              v514 = v269;
              v384 = v543;
              v385 = swift_isUniquelyReferenced_nonNull_native(v543);
              *(_QWORD *)&v546 = v384;
              if ((v385 & 1) == 0)
              {
                sub_10012973C();
                v384 = v546;
              }
              swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v384 + 48) + 16 * v381 + 8));
              v386 = (uint64_t *)(*(_QWORD *)(v384 + 56) + 16 * v381);
              v388 = *v386;
              v387 = v386[1];
              sub_10047F7B8(v381, v384);
              v543 = v384;
              swift_bridgeObjectRelease(0x8000000000000000);
              v389 = v378;
              v390 = *((_QWORD *)v378 + 27);
              if (!v390)
              {
                swift_bridgeObjectRelease(v513._object);
                swift_bridgeObjectRelease(v526);
                swift_bridgeObjectRelease(v387);
                v480 = v543;
                swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
                swift_bridgeObjectRelease(v480);
                v481 = v545;
                swift_bridgeObjectRelease(v582);
                swift_bridgeObjectRelease(v481);
                v482 = v539;
                (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
                v483 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                swift_allocError(v540, v483, 0, 0);
                v484 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x800000010054EE50, 0, v482, 0, v536, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2131);
                swift_willThrow(v484);
                sub_100007F8C(v507, v490);
                swift_release(v378);
                (*(void (**)(char *, uint64_t))(v525 + 8))(v518, v524);
                goto LABEL_192;
              }
              v512 = (void *)*((_QWORD *)v378 + 26);
              swift_bridgeObjectRetain(v390);
              swift_bridgeObjectRelease(v536);
              *(_QWORD *)&v546 = v388;
              *((_QWORD *)&v546 + 1) = v387;
              v391._countAndFlagsBits = 46;
              v391._object = (void *)0xE100000000000000;
              String.append(_:)(v391);
              v392._countAndFlagsBits = (uint64_t)v520;
              v393 = v526;
              v392._object = v526;
              String.append(_:)(v392);
              swift_bridgeObjectRelease(v393);
              v394 = *((_QWORD *)&v546 + 1);
              v536 = v546;
              v395 = *(void (**)(char *, char *, uint64_t))(v525 + 16);
              v396 = v517;
              v397 = v518;
              v521 = v389;
              v398 = v524;
              v395(v517, v518, v524);
              v399 = type metadata accessor for VerifiedEncryptedDataWrapper(0);
              v400 = swift_allocObject(v399, *(unsigned int *)(v399 + 48), *(unsigned __int16 *)(v399 + 52));
              v377((char *)(v400 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_value), (uint64_t)v396, v398);
              v401 = (_QWORD *)(v400 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_publicKey);
              *v401 = v512;
              v401[1] = v390;
              v402 = (uint64_t *)(v400 + OBJC_IVAR____TtC8coreidvd28VerifiedEncryptedDataWrapper_hash);
              v403 = v513._object;
              *v402 = v513._countAndFlagsBits;
              v402[1] = (uint64_t)v403;
              v404 = swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native);
              *(_QWORD *)&v546 = isUniquelyReferenced_nonNull_native;
              sub_100481B74(v400, v536, v394, v404);
              isUniquelyReferenced_nonNull_native = v546;
              swift_release(v521);
              swift_bridgeObjectRelease(v394);
              swift_bridgeObjectRelease(0x8000000000000000);
              (*(void (**)(char *, uint64_t))(v525 + 8))(v397, v398);
              v270 = v508;
              v269 = v514;
              v273 = v535;
            }
            sub_100008030(v304, &qword_1006363E8);
            if (*(_BYTE *)(v32 + 18) == 1)
              break;
            swift_release(v32);
            swift_bridgeObjectRelease(v526);
            swift_bridgeObjectRelease(v536);
            swift_bridgeObjectRelease(v279);
            v273 = v535;
            v270 = v115;
          }
          v514 = v269;
          v521 = (char *)v32;
          if (!*(_QWORD *)(v32 + 104))
            goto LABEL_188;
          v305 = *((_QWORD *)v521 + 22);
          v306 = *((_QWORD *)v521 + 19);
          v307 = v521[144];
          v308 = *((_QWORD *)v521 + 17);
          v570 = *((_QWORD *)v521 + 16);
          v571 = v308;
          v572 = v307 & 1;
          v574 = *((_OWORD *)v521 + 10);
          v573 = v306;
          v575 = v305;
          v309 = v574;
          swift_bridgeObjectRetain(v305);
          swift_bridgeObjectRetain(v308);
          swift_bridgeObjectRetain(v309);
          v310 = v522;
          v311 = sub_100439A90();
          v522 = v310;
          if (v310)
          {
            swift_bridgeObjectRelease(v305);
            swift_bridgeObjectRelease(v309);
            swift_bridgeObjectRelease(v308);
            swift_errorRelease(v522);
LABEL_188:
            swift_bridgeObjectRelease(v279);
            swift_bridgeObjectRelease(v526);
            v441 = v543;
            swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease(v441);
            v442 = v545;
            swift_bridgeObjectRelease(v582);
            swift_bridgeObjectRelease(v442);
            v443 = v539;
            (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
            v444 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v540, v444, 0, 0);
            v445 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010054ED40, 0, v443, 0, v536, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2139);
            swift_willThrow(v445);
            sub_100007F8C(v507, v490);
            swift_release(v508);
            v428 = (uint64_t)v521;
            goto LABEL_179;
          }
          v313 = v311;
          v314 = v312;
          swift_bridgeObjectRelease(v305);
          swift_bridgeObjectRelease(v309);
          swift_bridgeObjectRelease(v308);
          if (v314 >> 60 == 15)
            goto LABEL_188;
          v315 = Data.base16EncodedString()();
          sub_100007F78(v313, v314);
          v316 = Data.init(base16Encoded:)(v315._countAndFlagsBits, v315._object);
          if (v317 >> 60 == 15)
            goto LABEL_188;
          v318 = (void *)v316;
          v319 = (void *)v317;
          if ((v506 & 1) != 0)
          {
            v320 = 0;
            v321 = 0xC000000000000000;
          }
          else
          {
            v322 = v527;
            static String.Encoding.utf8.getter(v316);
            v320 = String.data(using:allowLossyConversion:)(v322, 0, 0x6966697265766E75, 0xEA00000000006465);
            v321 = v323;
            (*(void (**)(char *, uint64_t))(v528 + 8))(v322, v529);
            if (v321 >> 60 == 15)
            {
              swift_bridgeObjectRelease(v279);
              v446 = v526;
              goto LABEL_191;
            }
            sub_100022948(v320, v321);
          }
          *(_QWORD *)&v546 = v318;
          *((_QWORD *)&v546 + 1) = v319;
          v513._object = v318;
          sub_100028034((uint64_t)v318, (unint64_t)v319);
          sub_100022948(v320, v321);
          sub_100440348(v320, v321);
          v513._countAndFlagsBits = v321;
          sub_100007F8C(v320, v321);
          v324 = v546;
          v325 = Data._bridgeToObjectiveC()().super.isa;
          sub_100007F8C(v324, *((unint64_t *)&v324 + 1));
          v326 = (id)DigestSha256(v325);

          if (!v326)
          {
            swift_bridgeObjectRelease(v526);
            v321 = v513._countAndFlagsBits;
            sub_100007F8C(v320, v513._countAndFlagsBits);
            v446 = v279;
            v318 = v513._object;
LABEL_191:
            swift_bridgeObjectRelease(v446);
            v447 = v543;
            swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease(v447);
            v448 = v545;
            swift_bridgeObjectRelease(v582);
            swift_bridgeObjectRelease(v448);
            v449 = v539;
            (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, enum case for DIPError.Code.unexpectedDaemonState(_:), v538);
            v450 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v540, v450, 0, 0);
            v451 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054ED70, 0, v449, 0, v536, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2143);
            swift_willThrow(v451);
            sub_100007F8C(v507, v490);
            sub_100007F78((uint64_t)v318, (unint64_t)v319);
            swift_release(v521);
            sub_100007F78(v320, v321);
            goto LABEL_192;
          }
          v511 = v320;
          v512 = v319;
          v327 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v326);
          v329 = v328;

          v509 = (_OWORD *)v327;
          v510 = v329;
          v330 = Data.base16EncodedString()();
          v331 = sub_10047ED00(v330._countAndFlagsBits, (uint64_t)v330._object);
          v333 = v332;
          swift_bridgeObjectRelease(v330._object);
          if (v333)
          {
            swift_bridgeObjectRelease(v279);
            v269 = v514;
            if (v331 == 0x6966697265766E75 && v333 == (void *)0xEA00000000006465)
            {
              swift_bridgeObjectRelease(0xEA00000000006465);
              v334 = v536;
LABEL_157:
              swift_bridgeObjectRelease(v334);
              goto LABEL_160;
            }
            v343 = _stringCompareWithSmolCheck(_:_:expecting:)(v331, v333, 0x6966697265766E75, 0xEA00000000006465, 0);
            v32 = v536;
            if ((v343 & 1) != 0)
            {
              swift_bridgeObjectRelease(v333);
              v334 = v32;
              goto LABEL_157;
            }
          }
          else
          {
            *(_QWORD *)&v546 = 0;
            *((_QWORD *)&v546 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(52);
            v335._countAndFlagsBits = 0xD000000000000015;
            v335._object = v505;
            String.append(_:)(v335);
            v336._countAndFlagsBits = v278;
            v336._object = v279;
            String.append(_:)(v336);
            swift_bridgeObjectRelease(v279);
            v337._countAndFlagsBits = 0xD00000000000001DLL;
            v337._object = (void *)v504;
            String.append(_:)(v337);
            v338 = v546;
            v339 = v539;
            (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
            v340 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            v68 = swift_allocError(v540, v340, 0, 0);
            swift_bridgeObjectRetain(v536);
            v32 = v341;
            v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v338, *((_QWORD *)&v338 + 1), 0, v339, 0, v341, 0xD00000000000004CLL, v502, 0xD000000000000019, v503, 2149);
            v269 = v514;
            if (v501)
              goto LABEL_195;
            v342 = v531;
            defaultLogger()(v73);
            v333 = (void *)0xE000000000000000;
            DIPRecordError(_:message:log:)(v68, 0, 0xE000000000000000, v342);
            (*(void (**)(char *, uint64_t))(v532 + 8))(v342, v533);
            swift_errorRelease(v68);
            v331 = 0;
          }
          *(_QWORD *)&v546 = 0;
          *((_QWORD *)&v546 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(18);
          swift_bridgeObjectRelease(*((_QWORD *)&v546 + 1));
          *(_QWORD *)&v546 = 0x206E776F6E6B6E75;
          *((_QWORD *)&v546 + 1) = 0xEF222070756F7267;
          v344._countAndFlagsBits = v331;
          v344._object = v333;
          String.append(_:)(v344);
          swift_bridgeObjectRelease(v333);
          v345._countAndFlagsBits = 34;
          v345._object = (void *)0xE100000000000000;
          String.append(_:)(v345);
          v347 = *((_QWORD *)&v546 + 1);
          v346 = v546;
          v348 = v539;
          (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
          v349 = v348;
          v350 = v519;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v346, v347, 0, v349, 0, v32, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2152);
          v351 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v352 = v540;
          v68 = swift_allocError(v540, v351, 0, 0);
          v353 = v530;
          v355 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v530 + 16))(v354, v350, v352);
          if (v501)
          {
            swift_willThrow(v355);
            swift_errorRetain(v68);
            sub_100007F8C(v507, v490);
            swift_bridgeObjectRelease(v526);
            v452 = v511;
            v453 = v513._countAndFlagsBits;
            sub_100007F8C(v511, v513._countAndFlagsBits);
            sub_100007F8C((uint64_t)v509, v510);
            sub_100007F78((uint64_t)v513._object, (unint64_t)v512);
            swift_release(v521);
            sub_100007F78(v452, v453);
            (*(void (**)(char *, uint64_t))(v353 + 8))(v350, v352);
            goto LABEL_196;
          }
          v356 = v531;
          defaultLogger()(v355);
          DIPRecordError(_:message:log:)(v68, 0, 0xE000000000000000, v356);
          (*(void (**)(char *, uint64_t))(v532 + 8))(v356, v533);
          (*(void (**)(char *, uint64_t))(v353 + 8))(v350, v352);
          swift_errorRelease(v68);
LABEL_160:
          *(_QWORD *)&v546 = 0x6966697265766E75;
          *((_QWORD *)&v546 + 1) = 0xEB000000002E6465;
          v357._countAndFlagsBits = (uint64_t)v520;
          v358 = v526;
          v357._object = v526;
          String.append(_:)(v357);
          swift_bridgeObjectRelease(v358);
          v359 = v546;
          v360 = v521;
          v361 = *((_QWORD *)v521 + 13);
          if (v361)
          {
            v362 = *((_QWORD *)v521 + 22);
            v363 = *((_QWORD *)v521 + 19);
            v364 = v521[144];
            v365 = *((_QWORD *)v521 + 17);
            v366 = *((_QWORD *)v521 + 14);
            v367 = v521[184] & 1;
            *(_QWORD *)&v561 = *((_QWORD *)v521 + 12);
            *((_QWORD *)&v561 + 1) = v361;
            v563 = *(_OWORD *)(v521 + 120);
            v562 = v366;
            v564 = v365;
            v565 = v364 & 1;
            v567 = *((_OWORD *)v521 + 10);
            v566 = v363;
            v568 = v362;
            v368 = v563;
            v369 = v567;
            v569 = v367;
            swift_bridgeObjectRetain(v362);
            v370 = v545;
            swift_bridgeObjectRetain(v361);
            swift_bridgeObjectRetain(v368);
            swift_bridgeObjectRetain(v365);
            swift_bridgeObjectRetain(v369);
            v371 = swift_isUniquelyReferenced_nonNull_native(v370);
            *(_QWORD *)&v546 = v370;
            sub_100481B88(&v561, v359, *((uint64_t *)&v359 + 1), v371);
            v545 = (void *)v546;
            swift_bridgeObjectRelease(*((_QWORD *)&v359 + 1));
            swift_bridgeObjectRelease(0x8000000000000000);
            v372 = v511;
            v373 = v513._countAndFlagsBits;
            sub_100007F78(v511, v513._countAndFlagsBits);
            sub_100007F8C(v372, v373);
            sub_100007F8C((uint64_t)v509, v510);
            sub_100007F78((uint64_t)v513._object, (unint64_t)v512);
            v374 = v521;
          }
          else
          {
            sub_10047F308(v546, *((uint64_t *)&v546 + 1), (uint64_t)&v546);
            swift_bridgeObjectRelease(*((_QWORD *)&v359 + 1));
            sub_100183E44(v546, *((uint64_t *)&v546 + 1), v547, *((uint64_t *)&v547 + 1), v548, *((uint64_t *)&v548 + 1), v549, *((uint64_t *)&v549 + 1), v550, *((uint64_t *)&v550 + 1), v551);
            v375 = v511;
            v376 = v513._countAndFlagsBits;
            sub_100007F78(v511, v513._countAndFlagsBits);
            sub_100007F8C(v375, v376);
            sub_100007F8C((uint64_t)v509, v510);
            sub_100007F78((uint64_t)v513._object, (unint64_t)v512);
            v374 = v360;
          }
          swift_release(v374);
          v270 = v508;
          v273 = v535;
        }
      }
      v124 = *(_QWORD *)(v502 + 8 * v125);
      if (!v124)
      {
        while (1)
        {
          v115 = v125 + 1;
          if (__OFADD__(v125, 1))
            break;
          if (v115 >= v503)
            goto LABEL_118;
          v124 = *(_QWORD *)(v502 + 8 * v115);
          ++v125;
          if (v124)
            goto LABEL_79;
        }
        __break(1u);
LABEL_203:
        __break(1u);
        goto LABEL_204;
      }
LABEL_78:
      v115 = v125;
LABEL_79:
      v122 = (void *)((v124 - 1) & v124);
      v123 = __clz(__rbit64(v124)) + (v115 << 6);
LABEL_80:
      v126 = (uint64_t *)(*(_QWORD *)(v63 + 48) + 16 * v123);
      v127 = *v126;
      v128 = (void *)v126[1];
      v129 = (_OWORD *)(*(_QWORD *)(v63 + 56) + 96 * v123);
      v130 = v129[1];
      v555 = (Swift::String)*v129;
      v556 = v130;
      v132 = v129[3];
      v131 = v129[4];
      v133 = (Swift::String)v129[2];
      *(_OWORD *)((char *)&v559[1] + 1) = *(_OWORD *)((char *)v129 + 73);
      v558 = v132;
      *(_OWORD *)v559 = v131;
      v557 = v133;
      v134 = v543;
      swift_bridgeObjectRetain(v128);
      sub_100183F08(&v555);
      swift_bridgeObjectRetain(v134);
      v135 = sub_1004A8604(v127, (uint64_t)v128);
      v137 = v136;
      swift_bridgeObjectRelease(v134);
      if ((v137 & 1) == 0)
      {
        sub_100183EA0(&v555);
        swift_bridgeObjectRelease(v134);
        v254 = v544;
        swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
        swift_bridgeObjectRelease(v254);
        v255 = v545;
        swift_bridgeObjectRelease(v582);
        swift_bridgeObjectRelease(v255);
        *(_QWORD *)&v546 = 0;
        *((_QWORD *)&v546 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v256._object = (void *)0x800000010054EB70;
        v256._countAndFlagsBits = 0xD000000000000019;
        String.append(_:)(v256);
        v257._countAndFlagsBits = v127;
        v257._object = v128;
        String.append(_:)(v257);
        swift_bridgeObjectRelease(v128);
        v258._countAndFlagsBits = 0xD000000000000036;
        v258._object = (void *)0x800000010054EB90;
        String.append(_:)(v258);
        v259 = v546;
        v260 = v539;
        (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
        v261 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v262 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v540, v262, 0, 0);
        v263 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v259, *((_QWORD *)&v259 + 1), 0, v260, 0, v261, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2061);
        swift_willThrow(v263);
        v264 = v507;
        v265 = v490;
        goto LABEL_178;
      }
      v515 = v127;
      v138 = swift_isUniquelyReferenced_nonNull_native(v134);
      *(_QWORD *)&v546 = v134;
      if ((v138 & 1) == 0)
      {
        sub_10012973C();
        v134 = v546;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v134 + 48) + 16 * v135 + 8));
      v139 = (uint64_t *)(*(_QWORD *)(v134 + 56) + 16 * v135);
      v140 = v139[1];
      v514 = *v139;
      sub_10047F7B8(v135, v134);
      v543 = v134;
      swift_bridgeObjectRelease(0x8000000000000000);
      v141 = v557;
      v143 = (uint64_t)v509;
      v142 = v510;
      *v509 = *(_OWORD *)v510;
      *(_QWORD *)(v143 + 16) = *(_QWORD *)(v142 + 16);
      *(Swift::String *)&v559[5] = v141;
      v508 = v559[1];
      v560[3] = v559[1];
      v511 = v559[2];
      v560[4] = v559[2];
      v144 = v522;
      v145 = sub_100439A90();
      v522 = v144;
      if (v144)
      {
        sub_100007F8C(v507, v490);
        swift_bridgeObjectRelease(v140);
        swift_bridgeObjectRelease(v128);
        sub_100183EA0(&v555);
        swift_release(v536);
        swift_bridgeObjectRelease(v543);
        v266 = v544;
        v267 = &_swiftEmptyDictionarySingleton;
        goto LABEL_117;
      }
      v513._object = v122;
      v516 = v115;
      if (v146 >> 60 != 15)
      {
        v513._countAndFlagsBits = v140;
        *(_QWORD *)&v546 = v145;
        *((_QWORD *)&v546 + 1) = v146;
        sub_1000A1F54((uint64_t)v497, (uint64_t)v576, (uint64_t *)&unk_100632610);
        v147 = sub_1000A1F54((uint64_t)v576, (uint64_t)&v577, (uint64_t *)&unk_100632610);
        v148 = v578;
        if (v578)
        {
          v149 = v577;
          v150 = v527;
          static String.Encoding.utf8.getter(v147);
          v151 = String.data(using:allowLossyConversion:)(v150, 0, v149, v148);
          v153 = v152;
          (*(void (**)(char *, uint64_t))(v528 + 8))(v150, v529);
          if (v153 >> 60 != 15)
          {
            sub_100022948(v151, v153);
            sub_100440348(v151, v153);
            sub_100007F78(v151, v153);
            sub_100007F78(v151, v153);
          }
        }
        v154 = v546;
        sub_100022948(v546, *((unint64_t *)&v546 + 1));
        v155 = Data._bridgeToObjectiveC()().super.isa;
        sub_100007F8C(v154, *((unint64_t *)&v154 + 1));
        v156 = (id)DigestSha256(v155);

        if (!v156)
        {
          swift_bridgeObjectRelease(v513._countAndFlagsBits);
          sub_100183EA0(&v555);
          swift_bridgeObjectRelease(v543);
          v405 = v544;
          swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
          swift_bridgeObjectRelease(v405);
          v406 = v545;
          swift_bridgeObjectRelease(v582);
          swift_bridgeObjectRelease(v406);
          v541 = 0;
          v542 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          swift_bridgeObjectRelease(v542);
          v541 = 0x5B65646F6ELL;
          v542 = 0xE500000000000000;
          v407._countAndFlagsBits = v515;
          v407._object = v128;
          String.append(_:)(v407);
          swift_bridgeObjectRelease(v128);
          v408._countAndFlagsBits = 0xD00000000000001ELL;
          v408._object = (void *)0x800000010054ECA0;
          String.append(_:)(v408);
          v409 = v541;
          v410 = v542;
          v411 = v539;
          (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
          v412 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v413 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v540, v413, 0, 0);
          v414 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v409, v410, 0, v411, 0, v412, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2069);
          swift_willThrow(v414);
          v415 = v507;
          v416 = v490;
          goto LABEL_177;
        }
        v512 = v128;
        v157 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v156);
        v159 = v158;

        v160 = v555;
        swift_bridgeObjectRetain(v555._object);
        sub_100022948((uint64_t)v157, v159);
        v161 = Data.init(base16Encoded:)(v160._countAndFlagsBits, v160._object);
        v163 = v162;
        v505 = v157;
        v506 = v159;
        if (v162 >> 60 == 15)
        {
          sub_100007F78((uint64_t)v157, v159);
          sub_100007F78(v161, v163);
LABEL_176:
          swift_bridgeObjectRelease(v513._countAndFlagsBits);
          sub_100183EA0(&v555);
          swift_bridgeObjectRelease(v543);
          v417 = v544;
          swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
          swift_bridgeObjectRelease(v417);
          v418 = v545;
          swift_bridgeObjectRelease(v582);
          swift_bridgeObjectRelease(v418);
          v541 = 0;
          v542 = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          swift_bridgeObjectRelease(v542);
          v541 = 0x5B65646F6ELL;
          v542 = 0xE500000000000000;
          v419._countAndFlagsBits = v515;
          v420 = v512;
          v419._object = v512;
          String.append(_:)(v419);
          swift_bridgeObjectRelease(v420);
          v421._countAndFlagsBits = 0xD000000000000026;
          v421._object = (void *)0x800000010054ECC0;
          String.append(_:)(v421);
          v422 = v541;
          v423 = v542;
          v424 = v539;
          (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
          v425 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v426 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v540, v426, 0, 0);
          v427 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v422, v423, 0, v424, 0, v425, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2072);
          swift_willThrow(v427);
          sub_100007F8C(v507, v490);
          v415 = (uint64_t)v505;
          v416 = v506;
LABEL_177:
          sub_100007F8C(v415, v416);
          v265 = *((_QWORD *)&v546 + 1);
          v264 = v546;
LABEL_178:
          sub_100007F8C(v264, v265);
          v428 = v536;
          goto LABEL_179;
        }
        sub_100022948((uint64_t)v157, v159);
        sub_1004406E8((uint64_t)v157, v159);
        LODWORD(v504) = v164;
        sub_100007F78(v161, v163);
        sub_100007F8C((uint64_t)v157, v159);
        sub_100007F8C((uint64_t)v157, v159);
        if ((v504 & 1) == 0)
          goto LABEL_176;
        sub_100007F8C(v154, *((unint64_t *)&v154 + 1));
        sub_100007F8C((uint64_t)v505, v506);
        v128 = v512;
        v140 = v513._countAndFlagsBits;
      }
      swift_bridgeObjectRelease(v128);
      v165 = v514;
      *(_QWORD *)&v546 = v514;
      *((_QWORD *)&v546 + 1) = v140;
      swift_bridgeObjectRetain(v140);
      v166._countAndFlagsBits = 46;
      v166._object = (void *)0xE100000000000000;
      String.append(_:)(v166);
      swift_bridgeObjectRetain(v141._object);
      v512 = (void *)v141._countAndFlagsBits;
      String.append(_:)(v141);
      v513._countAndFlagsBits = (uint64_t)v141._object;
      swift_bridgeObjectRelease(v141._object);
      v167 = *((_QWORD *)&v546 + 1);
      v515 = v546;
      *(_QWORD *)&v546 = v165;
      *((_QWORD *)&v546 + 1) = v140;
      v541 = 46;
      v542 = 0xE100000000000000;
      v168 = sub_1000994DC();
      v32 = v140;
      v169 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v541, &type metadata for String, &type metadata for String, v168, v168);
      *(_QWORD *)&v546 = 0x6E692D646579656BLL;
      *((_QWORD *)&v546 + 1) = 0xE800000000000000;
      v541 = 46;
      v542 = 0xE100000000000000;
      v170 = StringProtocol.components<A>(separatedBy:)(&v541, &type metadata for String, &type metadata for String, v168, v168);
      LOBYTE(v168) = sub_10040CD30(v170, v169);
      swift_bridgeObjectRelease(v140);
      swift_bridgeObjectRelease(v169);
      swift_bridgeObjectRelease(v170);
      if ((v168 & 1) == 0)
      {
        v119 = v582;
        v120 = swift_isUniquelyReferenced_nonNull_native(v582);
        *(_QWORD *)&v546 = v119;
        sub_100481B88(&v555, v515, v167, v120);
        v582 = (void *)v546;
        swift_bridgeObjectRelease(v167);
        swift_bridgeObjectRelease(0x8000000000000000);
        v60 = (_QWORD *)v535;
        v63 = v536;
        isUniquelyReferenced_nonNull_native = (uint64_t)v513._object;
        v115 = v516;
        if (!v513._object)
          continue;
        goto LABEL_68;
      }
      break;
    }
    v514 = v167;
    v171 = v534;
    v172 = v515;
    v115 = v516;
    v173 = (uint64_t)v512;
    v32 = v513._countAndFlagsBits;
    if (!*(_QWORD *)(v534 + 16))
      goto LABEL_102;
    swift_bridgeObjectRetain(v513._countAndFlagsBits);
    v174 = sub_1004A8604(v173, v32);
    if ((v175 & 1) == 0)
    {
      swift_bridgeObjectRelease(v32);
LABEL_102:
      *(_QWORD *)&v546 = 0;
      *((_QWORD *)&v546 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v184._countAndFlagsBits = 0xD000000000000017;
      v184._object = v496;
      String.append(_:)(v184);
      swift_bridgeObjectRetain(v32);
      v185._countAndFlagsBits = v173;
      v185._object = (void *)v32;
      String.append(_:)(v185);
      swift_bridgeObjectRelease(v32);
      v186._countAndFlagsBits = 8236;
      v186._object = (void *)0xE200000000000000;
      String.append(_:)(v186);
      v187 = v555;
      swift_bridgeObjectRetain(v555._object);
      String.append(_:)(v187);
      swift_bridgeObjectRelease(v187._object);
      v188._countAndFlagsBits = 0xD000000000000028;
      v188._object = v495;
      String.append(_:)(v188);
      v189 = v546;
      v190 = v539;
      (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
      v191 = sub_100004828((uint64_t *)&unk_1006325A0);
      v192 = sub_100004828((uint64_t *)&unk_100633440);
      v193 = *(_QWORD *)(v192 - 8);
      v194 = *(_QWORD *)(v193 + 72);
      v195 = *(unsigned __int8 *)(v193 + 80);
      v196 = v32;
      v197 = (v195 + 32) & ~v195;
      v198 = swift_allocObject(v191, v197 + v194, v195 | 7);
      *(_OWORD *)(v198 + 16) = v499;
      v199 = v198 + v197;
      v200 = (uint64_t *)(v199 + *(int *)(v192 + 48));
      v201 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v201 - 8) + 104))(v199, v500, v201);
      v200[3] = (uint64_t)&type metadata for String;
      *v200 = v173;
      v200[1] = v196;
      swift_bridgeObjectRetain(v196);
      v202 = sub_10011D314(v198);
      v32 = (uint64_t)v526;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v189, *((_QWORD *)&v189 + 1), 0, v190, 0, v202, 0xD00000000000004CLL, v493, 0xD000000000000019, v494, 2101);
      v203 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v204 = v540;
      v205 = swift_allocError(v540, v203, 0, 0);
      v206 = v530;
      v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v530 + 16))(v207, v32, v204);
      if (v501)
      {
        swift_willThrow(v208);
        swift_errorRetain(v205);
        sub_100007F8C(v507, v490);
        swift_bridgeObjectRelease(v514);
        sub_100183EA0(&v555);
        (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v32, v204);
        goto LABEL_185;
      }
      v209 = v531;
      defaultLogger()(v208);
      DIPRecordError(_:message:log:)(v205, 0, 0xE000000000000000, v209);
      (*(void (**)(char *, uint64_t))(v532 + 8))(v209, v533);
      (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v32, v204);
      goto LABEL_112;
    }
    v176 = *(_QWORD *)(*(_QWORD *)(v171 + 56) + 8 * v174);
    swift_retain(v176);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRetain(v32);
    sub_10016EA50(v173, v32);
    v178 = v177;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v178);
    if (v511)
    {
      v179 = *(_QWORD **)(v176 + 72);
      if (v179[2])
      {
        if ((v180 = v179[4], v181 = v179[5], v508 == v180) && v511 == v181
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v508, v511, v180, v181, 0) & 1) != 0)
        {
          swift_release(v176);
          v182 = v582;
          v183 = v514;
          v60 = (_QWORD *)v535;
LABEL_113:
          v253 = swift_isUniquelyReferenced_nonNull_native(v182);
          *(_QWORD *)&v546 = v182;
          sub_100481B88(&v555, v172, v183, v253);
          v582 = (void *)v546;
          swift_bridgeObjectRelease(v183);
          swift_bridgeObjectRelease(0x8000000000000000);
          v63 = v536;
          isUniquelyReferenced_nonNull_native = (uint64_t)v513._object;
          if (!v513._object)
            continue;
LABEL_68:
          v121 = __clz(__rbit64(isUniquelyReferenced_nonNull_native));
          v122 = (void *)((isUniquelyReferenced_nonNull_native - 1) & isUniquelyReferenced_nonNull_native);
          v123 = v121 | (v115 << 6);
          goto LABEL_80;
        }
      }
      v511 = v176;
      *(_QWORD *)&v546 = 0;
      *((_QWORD *)&v546 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(72);
      v229._countAndFlagsBits = 0xD000000000000020;
      v229._object = v487;
      String.append(_:)(v229);
      swift_bridgeObjectRetain(v32);
      v230._countAndFlagsBits = v173;
      v230._object = (void *)v32;
      String.append(_:)(v230);
      swift_bridgeObjectRelease(v32);
      v231._countAndFlagsBits = 8236;
      v231._object = (void *)0xE200000000000000;
      String.append(_:)(v231);
      v232 = v555;
      swift_bridgeObjectRetain(v555._object);
      String.append(_:)(v232);
      swift_bridgeObjectRelease(v232._object);
      v233._countAndFlagsBits = 0xD000000000000022;
      v233._object = v486;
      String.append(_:)(v233);
      v234 = v546;
      v235 = v539;
      (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
      v236 = sub_100004828((uint64_t *)&unk_1006325A0);
      v237 = sub_100004828((uint64_t *)&unk_100633440);
      v238 = *(_QWORD *)(v237 - 8);
      v239 = *(_QWORD *)(v238 + 72);
      v240 = *(unsigned __int8 *)(v238 + 80);
      v241 = v32;
      v242 = (v240 + 32) & ~v240;
      v243 = swift_allocObject(v236, v242 + v239, v240 | 7);
      *(_OWORD *)(v243 + 16) = v499;
      v32 = v243 + v242;
      v244 = (uint64_t *)(v32 + *(int *)(v237 + 48));
      v245 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v245 - 8) + 104))(v32, v500, v245);
      v244[3] = (uint64_t)&type metadata for String;
      *v244 = v173;
      v244[1] = v241;
      swift_bridgeObjectRetain(v241);
      v246 = sub_10011D314(v243);
      v228 = v520;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v234, *((_QWORD *)&v234 + 1), 0, v235, 0, v246, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2091);
    }
    else
    {
      v511 = v176;
      *(_QWORD *)&v546 = 0;
      *((_QWORD *)&v546 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v210._countAndFlagsBits = 0xD000000000000017;
      v210._object = (void *)(v489 | 0x8000000000000000);
      String.append(_:)(v210);
      swift_bridgeObjectRetain(v32);
      v211._countAndFlagsBits = v173;
      v211._object = (void *)v32;
      String.append(_:)(v211);
      swift_bridgeObjectRelease(v32);
      v212._countAndFlagsBits = 8236;
      v212._object = (void *)0xE200000000000000;
      String.append(_:)(v212);
      v213 = v555;
      swift_bridgeObjectRetain(v555._object);
      String.append(_:)(v213);
      swift_bridgeObjectRelease(v213._object);
      v214._countAndFlagsBits = 0xD00000000000001CLL;
      v214._object = v488;
      String.append(_:)(v214);
      v215 = v546;
      v216 = v539;
      (*(void (**)(char *, _QWORD, uint64_t))(v537 + 104))(v539, v498, v538);
      v217 = sub_100004828((uint64_t *)&unk_1006325A0);
      v218 = sub_100004828((uint64_t *)&unk_100633440);
      v219 = *(_QWORD *)(v218 - 8);
      v220 = *(_QWORD *)(v219 + 72);
      v221 = *(unsigned __int8 *)(v219 + 80);
      v222 = v32;
      v223 = (v221 + 32) & ~v221;
      v224 = swift_allocObject(v217, v223 + v220, v221 | 7);
      *(_OWORD *)(v224 + 16) = v499;
      v32 = v224 + v223;
      v225 = (uint64_t *)(v32 + *(int *)(v218 + 48));
      v226 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v226 - 8) + 104))(v32, v500, v226);
      v225[3] = (uint64_t)&type metadata for String;
      *v225 = v173;
      v225[1] = v222;
      swift_bridgeObjectRetain(v222);
      v227 = sub_10011D314(v224);
      v228 = v521;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v215, *((_QWORD *)&v215 + 1), 0, v216, 0, v227, 0xD00000000000004CLL, v492 | 0x8000000000000000, 0xD000000000000019, v491 | 0x8000000000000000, 2096);
    }
    break;
  }
  v247 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v248 = v540;
  v205 = swift_allocError(v540, v247, 0, 0);
  v249 = v530;
  v251 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v530 + 16))(v250, v228, v248);
  if (!v501)
  {
    v252 = v531;
    defaultLogger()(v251);
    DIPRecordError(_:message:log:)(v205, 0, 0xE000000000000000, v252);
    (*(void (**)(char *, uint64_t))(v532 + 8))(v252, v533);
    (*(void (**)(char *, uint64_t))(v249 + 8))(v228, v248);
    swift_release(v511);
LABEL_112:
    swift_errorRelease(v205);
    v182 = v582;
    v60 = (_QWORD *)v535;
    v172 = v515;
    v115 = v516;
    v183 = v514;
    goto LABEL_113;
  }
  swift_willThrow(v251);
  swift_errorRetain(v205);
  sub_100007F8C(v507, v490);
  swift_bridgeObjectRelease(v514);
  swift_release(v511);
  sub_100183EA0(&v555);
  (*(void (**)(char *, uint64_t))(v249 + 8))(v228, v248);
LABEL_185:
  swift_release(v536);
  swift_bridgeObjectRelease(v543);
  v439 = v544;
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(v439);
  v440 = v545;
  swift_bridgeObjectRelease(v582);
  swift_bridgeObjectRelease(v440);
  swift_errorRelease(v205);
  return v582;
}

void sub_10017AC6C(void *a1, _BYTE *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void (*v56)(void);
  char v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  id v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  id v113;
  _BYTE *v114;
  uint64_t v115;
  char *v116;
  NSObject *v117;
  void *v118;
  Swift::String v119;
  Swift::Bool v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  _BYTE *v124;
  id v125;
  Swift::String v126;
  Swift::String v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  Swift::String v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  Swift::String v158;
  Swift::String v159;
  unint64_t v160;
  uint64_t v161;
  Swift::String v162;
  Swift::String_optional v163;
  void *object;
  char *v165;
  _QWORD *v166;
  void (*v167)(char *, uint64_t);
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Swift::String v172;
  uint64_t v173;
  unint64_t v174;
  NSObject *v175;
  objc_class *v176;
  objc_class *v177;
  objc_class *v178;
  id v179;
  uint64_t v180;
  os_log_type_t v181;
  _BYTE *v182;
  uint8_t *v183;
  uint8_t *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  id v189;
  void *v190;
  id v191;
  Swift::String v192;
  Swift::String v193;
  void *v194;
  Swift::String v195;
  id v196;
  Swift::String v197;
  void *v198;
  unint64_t v199;
  unint64_t v200;
  void (*v201)(char *, _QWORD, uint64_t);
  char *v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  id v206;
  id v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  NSObject *v214;
  uint64_t v215;
  uint64_t v216;
  uint8_t *v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  id v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  id v239;
  void *v240;
  id v241;
  uint64_t *v242;
  char *v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  NSObject *v250;
  uint64_t v251;
  os_log_type_t v252;
  BOOL v253;
  _QWORD *v254;
  uint8_t *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  Swift::String v265;
  _QWORD *v266;
  Swift::String_optional v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  Swift::String v271;
  Swift::String_optional v272;
  void *v273;
  char *v274;
  void *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  void *v279;
  void *v280;
  id v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  NSObject *v291;
  NSObject *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  void *v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  NSObject *v309;
  os_log_type_t v310;
  char *v311;
  uint64_t v312;
  double v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  id v328;
  void *v329;
  Swift::String v330;
  uint64_t v331;
  uint64_t v332;
  Swift::String v333;
  Swift::String v334;
  id v335;
  id v336;
  id v337;
  void *v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  Swift::String v344;
  Swift::String_optional v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  id v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  Swift::String v367;
  _QWORD *v368;
  Swift::String_optional v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  os_log_type_t v373;
  uint8_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  Swift::String v382;
  Swift::String v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void (*v388)(char *, uint64_t);
  uint64_t v389;
  void (*v390)(void);
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  uint64_t v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  id v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  _QWORD *v414;
  char *v415;
  unint64_t v416;
  id v417;
  char *v418;
  char *v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  void (*v426)(char *, uint64_t);
  uint64_t v427;
  _BYTE *v428;
  char v429[8];
  char v430[16];
  unint64_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  id v435;
  id v436;
  unint64_t v437;

  v410 = a1;
  v5 = sub_100004828(&qword_1006368B8);
  v6 = __chkstk_darwin(v5);
  v408 = (char *)&v389 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v394 = (char *)&v389 - v8;
  v9 = sub_100004828((uint64_t *)&unk_100636548);
  v10 = __chkstk_darwin(v9);
  v400 = (uint64_t)&v389 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v395 = (uint64_t)&v389 - v12;
  v13 = type metadata accessor for DIPError.PropertyKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v416 = (unint64_t)&v389 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v415 = (char *)&v389 - v18;
  __chkstk_darwin(v17);
  v414 = (uint64_t *)((char *)&v389 - v19);
  v20 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v20);
  v413 = (char *)&v389 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = type metadata accessor for DIPSignpost(0);
  v411 = *(_QWORD *)(v412 - 8);
  __chkstk_darwin(v412);
  v418 = (char *)&v389 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v424 = type metadata accessor for DIPError(0);
  v421 = *(_QWORD *)(v424 - 8);
  __chkstk_darwin(v424);
  v420 = (char *)&v389 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v423 = type metadata accessor for DIPError.Code(0);
  v422 = *(char **)(v423 - 8);
  __chkstk_darwin(v423);
  v425 = (char *)&v389 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v427 = type metadata accessor for Logger(0);
  v25 = *(_QWORD *)(v427 - 8);
  v26 = __chkstk_darwin(v427);
  v398 = (char *)&v389 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v407 = (char *)&v389 - v29;
  v30 = __chkstk_darwin(v28);
  v399 = (char *)&v389 - v31;
  v32 = __chkstk_darwin(v30);
  v393 = (char *)&v389 - v33;
  v34 = __chkstk_darwin(v32);
  v396 = (char *)&v389 - v35;
  v36 = __chkstk_darwin(v34);
  v397 = (char *)&v389 - v37;
  v38 = __chkstk_darwin(v36);
  v409 = (char *)&v389 - v39;
  v40 = __chkstk_darwin(v38);
  v419 = (char *)&v389 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v389 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v389 - v45;
  _Block_copy(a3);
  _Block_copy(a3);
  v47 = sub_100004828((uint64_t *)&unk_1006325A0);
  v48 = sub_100004828((uint64_t *)&unk_100633440);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(_QWORD *)(v49 + 72);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v51 + 32) & ~v51;
  v404 = v47;
  v402 = v52 + v50;
  v403 = v51 | 7;
  v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
  v401 = xmmword_10051FFB0;
  *(_OWORD *)(v53 + 16) = xmmword_10051FFB0;
  v405 = v52;
  v406 = v48;
  v54 = v53 + v52 + *(int *)(v48 + 48);
  v55 = (void *)v13;
  v56 = *(void (**)(void))(v14 + 104);
  v417 = v55;
  v56();
  v428 = a2;
  v57 = a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  v58 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  *(_QWORD *)(v54 + 24) = &type metadata for DIPState;
  *(_BYTE *)v54 = v57;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  v426 = (void (*)(char *, uint64_t))a3;
  _Block_copy(a3);
  v437 = sub_10011D314(v53);
  v59 = defaultLogger()(v437);
  v60 = Logger.logObject.getter(v59);
  v62 = static os_log_type_t.info.getter(v60, v61);
  if (os_log_type_enabled(v60, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v62, "coreidvd performVerification", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

  v64 = *(void (**)(char *, uint64_t))(v25 + 8);
  v65 = v427;
  v64(v46, v427);
  v66._object = (void *)0x800000010054F920;
  v67._countAndFlagsBits = 0x3735666464613236;
  v67._object = (void *)0xE800000000000000;
  v66._countAndFlagsBits = 0xD000000000000029;
  logMilestone(tag:description:)(v67, v66);
  v69 = v428;
  if (v428[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__isTiberius] == 1)
  {
    v70 = defaultLogger()(v68);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      swift_bridgeObjectRelease(v437);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "performVerification called for Tiberius; nothing to do",
        v73,
        2u);
      swift_slowDealloc(v73, -1, -1);

      v64(v44, v65);
    }
    else
    {

      v64(v44, v65);
      swift_bridgeObjectRelease(v437);
    }
    v428[v58] = 4;
    v64 = v426;
    (*((void (**)(void (*)(char *, uint64_t), _QWORD, _QWORD, _QWORD))v426 + 2))(v426, 0, 0, 0);
    goto LABEL_14;
  }
  v74._countAndFlagsBits = 0xD000000000000018;
  v74._object = (void *)0x800000010054F950;
  debugLogFootprint(_:)(v74);
  if ((sub_100148740() & 1) == 0)
  {
    v87 = v425;
    (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v425, enum case for DIPError.Code.missingEntitlement(_:), v423);
    v88 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v89 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v90 = swift_allocError(v424, v89, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054F5E0, 0, v87, 0, v88, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 787);
LABEL_12:
    v64 = v426;
    _Block_copy(v426);
    sub_100172AE4(v90, (uint64_t *)&v437, (uint64_t)v64);
    _Block_release(v64);
    swift_bridgeObjectRelease(v437);
    v86 = v90;
    goto LABEL_13;
  }
  OS_dispatch_group.wait()();
  v75 = *(_QWORD *)&v69[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit];
  if (v75)
  {
    v76 = swift_errorRetain(*(_QWORD *)&v69[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__errorInInit]);
    v77 = v419;
    defaultLogger()(v76);
    DIPRecordError(_:message:log:)(v75, 0, 0xE000000000000000, v77);
    v64(v77, v65);
    v78 = v425;
    (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v425, enum case for DIPError.Code.restartCurrentTier(_:), v423);
    swift_errorRetain(v75);
    v79 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v80 = v420;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v75, v78, 0, v79, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 797);
    v81 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v82 = v424;
    v83 = swift_allocError(v424, v81, 0, 0);
    v84 = v421;
    (*(void (**)(uint64_t, char *, uint64_t))(v421 + 16))(v85, v80, v82);
    v64 = v426;
    _Block_copy(v426);
    sub_100172AE4(v83, (uint64_t *)&v437, (uint64_t)v64);
    _Block_release(v64);
    swift_errorRelease(v75);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v80, v82);
    swift_bridgeObjectRelease(v437);
    v86 = v83;
LABEL_13:
    swift_errorRelease(v86);
LABEL_14:
    _Block_release(v64);
    _Block_release(v64);
    _Block_release(v64);
    _Block_release(v64);
    _Block_release(v64);
    _Block_release(v64);
    return;
  }
  v91 = *(_QWORD **)&v69[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v91)
  {
    v110 = v425;
    (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v425, enum case for DIPError.Code.unexpectedDaemonState(_:), v423);
    v111 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v112 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v90 = swift_allocError(v424, v112, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054F9A0, 0, v110, 0, v111, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 802);
    goto LABEL_12;
  }
  v391 = 0xD000000000000029;
  v389 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow;
  v392 = 0xD000000000000016;
  v92 = swift_retain(v91);
  v93 = v413;
  static DaemonSignposts.performVerificationTotal.getter(v92);
  DIPSignpost.init(_:)(v93);
  v94 = v414;
  v95 = v417;
  ((void (*)(_QWORD *, _QWORD, id))v56)(v414, enum case for DIPError.PropertyKey.inoProviderID(_:), v417);
  v96 = (_QWORD *)v91[2];
  v97 = v96[8];
  v98 = v96[9];
  v433 = &type metadata for String;
  v431 = v97;
  v432 = v98;
  swift_beginAccess(&v437, &v436, 33, 0);
  v99 = v98;
  v100 = v95;
  swift_bridgeObjectRetain(v99);
  sub_10047E318((uint64_t)&v431, (uint64_t)v94);
  ((void (*)(_QWORD *, _QWORD, id))v56)(v94, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v95);
  v102 = v96[2];
  v101 = v96[3];
  v433 = &type metadata for String;
  v431 = v102;
  v432 = v101;
  swift_bridgeObjectRetain(v101);
  sub_10047E318((uint64_t)&v431, (uint64_t)v94);
  v103 = (uint64_t)v415;
  ((void (*)(char *, _QWORD, id))v56)(v415, enum case for DIPError.PropertyKey.spProviderID(_:), v95);
  v414 = v91;
  v104 = (_QWORD *)v91[3];
  v390 = v56;
  if (v104)
  {
    v106 = v104[8];
    v105 = v104[9];
    v433 = &type metadata for String;
    v431 = v106;
    v432 = v105;
    swift_bridgeObjectRetain(v105);
    sub_10047E318((uint64_t)&v431, v103);
    v107 = v416;
    ((void (*)(unint64_t, _QWORD, id))v56)(v416, enum case for DIPError.PropertyKey.spWorkflowID(_:), v100);
    v108 = v104[2];
    v109 = v104[3];
    swift_bridgeObjectRetain(v109);
  }
  else
  {
    v433 = &type metadata for String;
    v113 = v95;
    v108 = 0x414C494156414E55;
    v109 = 0xEB00000000454C42;
    v431 = 0x414C494156414E55;
    v432 = 0xEB00000000454C42;
    sub_10047E318((uint64_t)&v431, v103);
    v107 = v416;
    ((void (*)(unint64_t, _QWORD, id))v56)(v416, enum case for DIPError.PropertyKey.spWorkflowID(_:), v113);
  }
  v114 = v428;
  v433 = &type metadata for String;
  v431 = v108;
  v432 = v109;
  sub_10047E318((uint64_t)&v431, v107);
  swift_endAccess(&v436);
  v115 = *(_QWORD *)&v114[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier];
  v116 = *(char **)&v114[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__applicationIdentifier + 8];
  v117 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v118 = (void *)0xD00000000000002FLL;
  v119._countAndFlagsBits = 0xD00000000000001ALL;
  v119._object = (void *)0x800000010054E310;
  v120 = NSUserDefaults.internalBool(forKey:)(v119);

  v121 = (uint64_t)v414;
  v122 = v425;
  v123 = v424;
  if (!v120
    && (sub_1001B2720(v115, (uint64_t)v116, *(_QWORD **)(v414[2] + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL)) & 1) == 0)
  {
    (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v122, enum case for DIPError.Code.missingEntitlement(_:), v423);
    v169 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v170 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v171 = swift_allocError(v123, v170, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v391, 0x800000010054F9D0, 0, v122, 0, v169, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 820);
    v64 = v426;
    _Block_copy(v426);
    sub_100172AE4(v171, (uint64_t *)&v437, (uint64_t)v64);
    _Block_release(v64);
    swift_bridgeObjectRelease(v437);
    swift_errorRelease(v171);
    v172._object = (void *)0x800000010054FA00;
    v172._countAndFlagsBits = v392;
    debugLogFootprint(_:)(v172);
    v136 = (_QWORD *)v121;
    goto LABEL_44;
  }
  if (!v410)
  {
    v137 = (uint64_t)sub_100050960();
    v138 = v137;
    if ((unint64_t)v137 >> 62)
    {
      if (v137 >= 0)
        v137 &= 0xFFFFFFFFFFFFFF8uLL;
      v139 = _CocoaArrayWrapper.endIndex.getter(v137);
    }
    else
    {
      v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v140 = (uint64_t)v408;
    v141 = (unint64_t)v407;
    v142 = swift_bridgeObjectRelease(v138);
    if (!v139)
    {
      v212 = v399;
      v213 = defaultLogger()(v142);
      v214 = Logger.logObject.getter(v213);
      v216 = static os_log_type_t.info.getter(v214, v215);
      if (os_log_type_enabled(v214, (os_log_type_t)v216))
      {
        v217 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v217 = 0;
        _os_log_impl((void *)&_mh_execute_header, v214, (os_log_type_t)v216, "Workflow does not containing any pages; skipping ahead to proofing",
          v217,
          2u);
        v218 = v217;
        v140 = (uint64_t)v408;
        swift_slowDealloc(v218, -1, -1);
      }

      v64(v212, v427);
      v219 = sub_100004828((uint64_t *)&unk_1006368C0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56))(v140, 1, 1, v219);
      v220 = v400;
      v221 = v428;
      v222 = sub_10014DE10(v400);
      swift_release(v222);
      sub_100008030(v140, &qword_1006368B8);
      v247 = sub_100008030(v220, (uint64_t *)&unk_100636548);
      v221[v58] = 4;
      v248 = v398;
      v249 = defaultLogger()(v247);
      v250 = Logger.logObject.getter(v249);
      v252 = static os_log_type_t.info.getter(v250, v251);
      v253 = os_log_type_enabled(v250, v252);
      v254 = v414;
      if (v253)
      {
        v255 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v255 = 0;
        swift_bridgeObjectRelease(v437);
        _os_log_impl((void *)&_mh_execute_header, v250, v252, " state set to PROOFED", v255, 2u);
        swift_slowDealloc(v255, -1, -1);

        v64(v248, v427);
      }
      else
      {

        v64(v248, v427);
        swift_bridgeObjectRelease(v437);
      }
      v269 = v412;
      v270 = v411;
      v64 = v426;
      (*((void (**)(void (*)(char *, uint64_t), _QWORD, _QWORD, _QWORD))v426 + 2))(v426, 0, 0, 0);
      goto LABEL_89;
    }
    v143 = defaultLogger()(v142);
    v144 = Logger.logObject.getter(v143);
    v145 = static os_log_type_t.debug.getter(v144);
    if (os_log_type_enabled(v144, v145))
    {
      v146 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v146 = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, v145, "sending 1st page back", v146, 2u);
      swift_slowDealloc(v146, -1, -1);
    }

    v64((char *)v141, v427);
    v428[v58] = 3;
    v147 = *(_QWORD *)(v121 + 6048);
    v148 = (uint64_t)sub_100050960();
    v149 = v148;
    if ((unint64_t)v148 >> 62)
    {
      if (v148 >= 0)
        v148 &= 0xFFFFFFFFFFFFFF8uLL;
      v150 = _CocoaArrayWrapper.endIndex.getter(v148);
    }
    else
    {
      v150 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v64 = v426;
    swift_bridgeObjectRelease(v149);
    if (v147 >= v150)
    {
      v116 = v422;
      v223 = v122;
      v205 = v122;
      v122 = (char *)v423;
      (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v223, enum case for DIPError.Code.unexpectedDaemonState(_:), v423);
      v224 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v225 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v210 = swift_allocError(v123, v225, 0, 0);
      v226 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054FA20, 0, v205, 0, v224, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 910);
      swift_willThrow(v226);
      v227 = 0;
      goto LABEL_69;
    }
    v151 = *(_QWORD *)(v121 + 6048);
    v152 = (uint64_t)sub_100050960();
    v153 = v152;
    if ((v152 & 0xC000000000000001) == 0)
    {
      if (v151 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v151 < *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v154 = *(id *)(v152 + 8 * v151 + 32);
        goto LABEL_37;
      }
      __break(1u);
      goto LABEL_163;
    }
LABEL_160:
    v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v151, v153);
LABEL_37:
    v151 = (uint64_t)v154;
    swift_bridgeObjectRelease(v153);
    v155 = *(_QWORD *)(v121 + 6048);
    v156 = __OFADD__(v155, 1);
    v157 = v155 + 1;
    if (!v156)
    {
      *(_QWORD *)(v121 + 6048) = v157;
      swift_bridgeObjectRelease(v437);
      v158._countAndFlagsBits = 0xD00000000000002BLL;
      v158._object = (void *)0x800000010054FA70;
      v159._countAndFlagsBits = 0x3266656261363438;
      v159._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v159, v158);
      sub_100069A30();
      v141 = v160;
      v153 = (uint64_t)sub_100050960();
      if (!((unint64_t)v153 >> 62))
      {
        v161 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_40:
        swift_bridgeObjectRelease(v153);
        (*((void (**)(void (*)(char *, uint64_t), unint64_t, uint64_t, _QWORD))v64 + 2))(v64, v141, v161, 0);

        v162._object = (void *)0x800000010054FA00;
        v162._countAndFlagsBits = v392;
        debugLogFootprint(_:)(v162);
        v163.value._countAndFlagsBits = sub_1000549DC();
        object = v163.value._object;
        v165 = v418;
        DIPSignpost.end(workflowID:isBackground:)(v163, (Swift::Bool_optional)2);
        swift_bridgeObjectRelease(object);
        v166 = (_QWORD *)v121;
LABEL_41:
        swift_release(v166);
        v167 = *(void (**)(char *, uint64_t))(v411 + 8);
LABEL_42:
        v168 = v165;
LABEL_45:
        v167(v168, v412);
        goto LABEL_14;
      }
LABEL_164:
      if (v153 < 0)
        v384 = v153;
      else
        v384 = v153 & 0xFFFFFFFFFFFFFF8;
      v161 = _CocoaArrayWrapper.endIndex.getter(v384);
      goto LABEL_40;
    }
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  v124 = v428;
  if (v428[v58] < 3u)
  {
    v431 = 0;
    v432 = 0xE000000000000000;
    v125 = v410;
    _StringGuts.grow(_:)(63);
    v126._countAndFlagsBits = 0xD00000000000003CLL;
    v126._object = (void *)0x800000010054FBA0;
    String.append(_:)(v126);
    LOBYTE(v436) = v124[v58];
    _print_unlocked<A, B>(_:_:)(&v436, &v431, &type metadata for DIPState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v127._countAndFlagsBits = 46;
    v127._object = (void *)0xE100000000000000;
    String.append(_:)(v127);
    v128 = v431;
    v129 = v432;
    (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v122, enum case for DIPError.Code.invalidCallSequence(_:), v423);
    v130 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v131 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v132 = swift_allocError(v123, v131, 0, 0);
    v133 = (_QWORD *)v121;
    v134 = v132;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v128, v129, 0, v122, 0, v130, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 826);
    v64 = v426;
    _Block_copy(v426);
    sub_100172AE4(v134, (uint64_t *)&v437, (uint64_t)v64);
    _Block_release(v64);

    swift_bridgeObjectRelease(v437);
    swift_errorRelease(v134);
    v135._object = (void *)0x800000010054FA00;
    v135._countAndFlagsBits = v392;
    debugLogFootprint(_:)(v135);
    v136 = v133;
LABEL_44:
    swift_release(v136);
    v167 = *(void (**)(char *, uint64_t))(v411 + 8);
    v168 = v418;
    goto LABEL_45;
  }
  v413 = (char *)v58;
  v173 = *(_QWORD *)(v121 + 6048);
  v174 = v173 - 1;
  if (__OFSUB__(v173, 1))
  {
    __break(1u);
  }
  else
  {
    v124 = v410;
    v175 = sub_100050960();
    v117 = v175;
    v122 = (char *)v423;
    v116 = v422;
    if (((unint64_t)v175 & 0xC000000000000001) == 0)
    {
      if ((v174 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v174 < *(_QWORD *)(((unint64_t)v175 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v176 = v175[v174 + 4].isa;
        goto LABEL_51;
      }
      __break(1u);
      goto LABEL_143;
    }
  }
  v176 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v174, v117);
LABEL_51:
  v177 = v176;
  swift_bridgeObjectRelease(v117);
  v178 = v177;
  v179 = objc_msgSend(v124, "page");
  v416 = (unint64_t)v179 - 1;
  if (__OFSUB__(v179, 1))
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v435 = 0;
  v180 = defaultLogger()(v179);
  v153 = Logger.logObject.getter(v180);
  v181 = static os_log_type_t.debug.getter(v153);
  v151 = v181;
  if (os_log_type_enabled((os_log_t)v153, v181))
  {
    v182 = v124;
    v183 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v183 = 134349056;
    v431 = v416;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v183 + 4);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v153, (os_log_type_t)v151, "pageIndex is %{public}ld", v183, 0xCu);
    v184 = v183;
    v124 = v182;
    v116 = v422;
    v122 = (char *)v423;
    swift_slowDealloc(v184, -1, -1);
  }

  v64(v409, v427);
  if ((uint64_t)objc_msgSend(v124, "page") <= 0)
  {
    v415 = (char *)v178;

    v228 = v425;
    (*((void (**)(char *, _QWORD, char *))v116 + 13))(v425, enum case for DIPError.Code.invalidPage(_:), v122);
    v206 = v124;
    v229 = swift_allocObject(v404, v402, v403);
    *(_OWORD *)(v229 + 16) = v401;
    v230 = (_QWORD *)(v229 + v405 + *(int *)(v406 + 48));
    v390();
    v205 = v228;
    v231 = objc_msgSend(v206, "page");
    v230[3] = &type metadata for Int;
    *v230 = v231;
    v232 = sub_10011D314(v229);
    v233 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v123 = v424;
    v210 = swift_allocError(v424, v233, 0, 0);
    v211 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x800000010054FB80, 0, v228, 0, v232, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 835);
    goto LABEL_67;
  }
  v185 = objc_msgSend(v124, "page");
  v186 = *(_QWORD *)(v121 + 6048);
  v141 = v186 - 1;
  if (__OFSUB__(v186, 1))
  {
    __break(1u);
  }
  else
  {
    v151 = (uint64_t)v185;
    v187 = (uint64_t)sub_100050960();
    v153 = v187;
    v122 = (char *)v178;
    if ((v187 & 0xC000000000000001) == 0)
    {
      if ((v141 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v141 < *(_QWORD *)((v187 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v188 = v124;
        v189 = *(id *)(v187 + 8 * v141 + 32);
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_160;
    }
  }
  v188 = v124;
  v189 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v141, v153);
LABEL_60:
  v190 = v189;
  swift_bridgeObjectRelease(v153);
  v191 = objc_msgSend(v190, "page");

  if ((uint64_t)v191 < v151)
  {
    v431 = 0;
    v432 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v192._countAndFlagsBits = 0xD000000000000010;
    v192._object = (void *)0x800000010054FB30;
    String.append(_:)(v192);
    v410 = v188;
    v436 = objc_msgSend(v188, "page");
    v193._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v194 = v193._object;
    String.append(_:)(v193);
    swift_bridgeObjectRelease(v194);
    v195._object = (void *)0x800000010054FB50;
    v195._countAndFlagsBits = v391;
    String.append(_:)(v195);
    v196 = objc_msgSend(v122, "page");

    v436 = v196;
    v197._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v198 = v197._object;
    String.append(_:)(v197);
    swift_bridgeObjectRelease(v198);
    v199 = v431;
    v200 = v432;
    v116 = v422;
    v201 = (void (*)(char *, _QWORD, uint64_t))*((_QWORD *)v422 + 13);
    v202 = v425;
    v415 = v122;
    v122 = (char *)v423;
    v201(v425, enum case for DIPError.Code.invalidPage(_:), v423);
    v203 = swift_allocObject(v404, v402, v403);
    *(_OWORD *)(v203 + 16) = v401;
    v204 = (_QWORD *)(v203 + v405 + *(int *)(v406 + 48));
    v390();
    v205 = v202;
    v206 = v410;
    v207 = objc_msgSend(v410, "page");
    v204[3] = &type metadata for Int;
    *v204 = v207;
    v208 = sub_10011D314(v203);
    v209 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v123 = v424;
    v210 = swift_allocError(v424, v209, 0, 0);
    v211 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v199, v200, 0, v205, 0, v208, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 838);
LABEL_67:
    swift_willThrow(v211);

    v227 = 0;
LABEL_68:
    v64 = v426;
LABEL_69:
    v234 = v412;
    (*((void (**)(char *, _QWORD, char *))v116 + 13))(v205, enum case for DIPError.Code.internalError(_:), v122);
    swift_errorRetain(v210);
    v259 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v260 = v420;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054FA50, v210, v205, 0, v259, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 918);
    v261 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v262 = swift_allocError(v123, v261, 0, 0);
    v263 = v421;
    (*(void (**)(uint64_t, char *, uint64_t))(v421 + 16))(v264, v260, v123);
    _Block_copy(v64);
    sub_100172AE4(v262, (uint64_t *)&v437, (uint64_t)v64);
    _Block_release(v64);
    swift_errorRelease(v210);
    (*(void (**)(char *, uint64_t))(v263 + 8))(v260, v123);
    swift_bridgeObjectRelease(v437);
    swift_errorRelease(v262);
    v265._object = (void *)0x800000010054FA00;
    v265._countAndFlagsBits = v392;
    debugLogFootprint(_:)(v265);
    v266 = v414;
    if (v227)
    {
      v267.value._countAndFlagsBits = sub_1000549DC();
      v268 = v267.value._object;
      DIPSignpost.end(workflowID:isBackground:)(v267, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease(v268);
    }
    swift_release(v266);
    (*(void (**)(char *, uint64_t))(v411 + 8))(v418, v234);
    goto LABEL_14;
  }

  v235 = objc_msgSend(v188, "page");
  v236 = *(_QWORD *)(v121 + 6048);
  v237 = v236 - 1;
  if (__OFSUB__(v236, 1))
  {
    __break(1u);
  }
  else
  {
    v151 = (uint64_t)v235;
    v238 = (uint64_t)sub_100050960();
    v153 = v238;
    if ((v238 & 0xC000000000000001) == 0)
    {
      if ((v237 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v237 < *(_QWORD *)((v238 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v239 = *(id *)(v238 + 8 * v237 + 32);
        goto LABEL_75;
      }
      __break(1u);
      goto LABEL_172;
    }
  }
  v239 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v237, v153);
LABEL_75:
  v240 = v239;
  swift_bridgeObjectRelease(v153);
  v241 = objc_msgSend(v240, "page");

  if (v151 < (uint64_t)v241)
  {
    v242 = (uint64_t *)&v428[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
    swift_beginAccess(&v428[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages], v429, 0, 0);
    v153 = *v242;
    if ((*v242 & 0xC000000000000001) == 0)
    {
      if ((v416 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v416 < *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v243 = (char *)*(id *)(v153 + 8 * v416 + 32);
LABEL_80:

        v122 = v243;
        goto LABEL_81;
      }
      __break(1u);
      goto LABEL_175;
    }
LABEL_172:
    swift_bridgeObjectRetain(v153);
    v243 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v416, v153);
    swift_bridgeObjectRelease(v153);
    goto LABEL_80;
  }
LABEL_81:
  v244 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter(&v431, v244);
  v245 = v433;
  v246 = v434;
  sub_10000806C(&v431, (uint64_t)v433);
  dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccountIdentifier()(v245, v246);
  v257 = v256;
  v258 = v188;
  v275 = sub_1001751A0(v188, v122, (uint64_t)v414);
  v277 = v276;
  v410 = v258;
  swift_bridgeObjectRelease(v257);
  v278 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v431);
  if (v277)
  {
    v279 = v275;
    swift_errorRetain(v277);
    swift_errorRetain(v277);
    v240 = v277;
    v280 = (void *)_convertErrorToNSError(_:)(v277);
    v281 = objc_msgSend(v280, "domain");
    v282 = static String._unconditionallyBridgeFromObjectiveC(_:)(v281);
    v284 = v283;

    v286 = static String._unconditionallyBridgeFromObjectiveC(_:)(DIVerificationErrorDomain);
    v287 = v285;
    if (v282 == v286 && v284 == v285)
    {
      swift_bridgeObjectRelease_n(v284, 2);

      v188 = v279;
    }
    else
    {
      v304 = _stringCompareWithSmolCheck(_:_:expecting:)(v282, v284, v286, v285, 0);
      swift_bridgeObjectRelease(v287);
      swift_bridgeObjectRelease(v284);

      v188 = v279;
      if ((v304 & 1) == 0)
      {
        v320 = v437;
        v321 = v425;
        (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v425, enum case for DIPError.Code.internalError(_:), v423);
        v322 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v151 = swift_allocError(v424, v322, 0, 0);
        v323 = v321;
        v305 = v240;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x800000010054FB10, v240, v323, 0, v320, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 852);
LABEL_110:
        v324 = v419;
        v325 = swift_errorRelease(v305);
        defaultLogger()(v325);
        DIPRecordError(_:message:log:)(v151, 0, 0xE000000000000000, v324);
        v64(v324, v427);
        sub_100069A30();
        v118 = v326;
        v121 = (uint64_t)sub_100050960();
        if (!((unint64_t)v121 >> 62))
        {
          v327 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_112:
          v64 = v426;
          swift_bridgeObjectRelease(v121);
          v328 = sub_1004845F0((id)v151);
          v329 = (void *)_convertErrorToNSError(_:)(v328);
          (*((void (**)(void (*)(char *, uint64_t), void *, uint64_t, void *))v64 + 2))(v64, v118, v327, v329);

          swift_errorRelease(v151);
          swift_errorRelease(v240);
          swift_errorRelease(v328);

          v330._object = (void *)0x800000010054FA00;
          v330._countAndFlagsBits = v392;
          debugLogFootprint(_:)(v330);
          v136 = v414;
          goto LABEL_44;
        }
LABEL_175:
        if (v121 < 0)
          v385 = v121;
        else
          v385 = v121 & 0xFFFFFFFFFFFFFF8;
        v327 = _CocoaArrayWrapper.endIndex.getter(v385);
        goto LABEL_112;
      }
    }
    swift_bridgeObjectRelease(v437);
    v305 = v240;
    v151 = (uint64_t)v240;
    goto LABEL_110;
  }
  v288 = v397;
  defaultLogger()(v278);
  swift_retain_n(v414, 2);
  v289 = (char *)v410;
  v290 = v428;
  v291 = Logger.logObject.getter(v290);
  LODWORD(v415) = static os_log_type_t.debug.getter(v291);
  v292 = v291;
  v293 = os_log_type_enabled(v291, (os_log_type_t)v415);
  v419 = v289;
  v417 = v275;
  if (v293)
  {
    v294 = v290;
    v295 = swift_slowAlloc(32, -1);
    *(_DWORD *)v295 = 134349568;
    v431 = (unint64_t)objc_msgSend(v289, "page");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v295 + 4);

    *(_WORD *)(v295 + 12) = 2050;
    v296 = v294;
    v297 = (uint64_t *)&v294[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
    swift_beginAccess(&v294[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages], v430, 0, 0);
    v298 = *v297;
    if ((unint64_t)*v297 >> 62)
    {
      if (v298 < 0)
        v386 = *v297;
      else
        v386 = v298 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v298);
      v299 = _CocoaArrayWrapper.endIndex.getter(v386);
      swift_bridgeObjectRelease(v298);
    }
    else
    {
      v299 = *(_QWORD *)((v298 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v431 = v299;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v295 + 14);

    *(_WORD *)(v295 + 22) = 2050;
    v300 = (uint64_t)sub_100050960();
    v301 = v300;
    if ((unint64_t)v300 >> 62)
    {
      if (v300 >= 0)
        v300 &= 0xFFFFFFFFFFFFFF8uLL;
      v302 = _CocoaArrayWrapper.endIndex.getter(v300);
    }
    else
    {
      v302 = *(_QWORD *)((v300 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v301);
    v303 = (unint64_t)v414;
    swift_release(v414);
    v431 = v302;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v295 + 24);
    swift_release(v303);
    _os_log_impl((void *)&_mh_execute_header, v292, (os_log_type_t)v415, " page = %{public}ld, submittedPages = %{public}ld, totalPages = %{public}ld", (uint8_t *)v295, 0x20u);
    swift_slowDealloc(v295, -1, -1);
    v288 = v397;
    v289 = v419;
    v290 = v296;
  }
  else
  {
    v303 = (unint64_t)v414;
    swift_release_n(v414, 2);

  }
  v64(v288, v427);
  v306 = (void *)sub_100148A94(v289, v122, v416, v303);

  v435 = v306;
  if (!v306)
  {
    v331 = sub_100004828((uint64_t *)&unk_1006368C0);
    v332 = (uint64_t)v394;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v331 - 8) + 56))(v394, 1, 1, v331);
    v116 = v290;
    v347 = sub_10014DE10(v395);
    v415 = v122;
    sub_100008030(v332, &qword_1006368B8);
    v348 = sub_100008030(v395, (uint64_t *)&unk_100636548);
    if (v347)
    {
      v349 = *(_QWORD *)&v428[v389];
      *(_QWORD *)&v428[v389] = v347;
      swift_retain_n(v347, 2);
      swift_release(v349);
      v350 = (uint64_t *)&v290[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages];
      swift_beginAccess(&v290[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedPages], &v431, 1, 0);
      v351 = *v350;
      *v350 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v351);
      v352 = sub_10011E79C((uint64_t)_swiftEmptyArrayStorage);
      v353 = (unint64_t *)&v290[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes];
      swift_beginAccess(&v290[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__submittedAttributes], &v436, 1, 0);
      v354 = *v353;
      *v353 = v352;
      swift_bridgeObjectRelease(v354);
      v355 = *(_QWORD *)(v347 + 6048);
      v356 = (uint64_t)sub_100050960();
      v357 = v356;
      if ((unint64_t)v356 >> 62)
      {
        if (v356 >= 0)
          v356 &= 0xFFFFFFFFFFFFFF8uLL;
        v358 = _CocoaArrayWrapper.endIndex.getter(v356);
      }
      else
      {
        v358 = *(_QWORD *)((v356 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v357);
      if (v355 >= v358)
      {
        v116 = v422;
        v205 = v425;
        v122 = (char *)v423;
        (*((void (**)(char *, _QWORD, uint64_t))v422 + 13))(v425, enum case for DIPError.Code.unexpectedDaemonState(_:), v423);
        v375 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v376 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v377 = v424;
        v210 = swift_allocError(v424, v376, 0, 0);
        v378 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054FA20, 0, v205, 0, v375, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002FLL, 0x800000010054F970, 880);
        swift_willThrow(v378);

        v379 = v347;
        v123 = v377;
        swift_release_n(v379, 2);

        v227 = 1;
        goto LABEL_68;
      }
      v359 = *(_QWORD *)(v347 + 6048);
      v360 = (uint64_t)sub_100050960();
      v361 = v360;
      if ((v360 & 0xC000000000000001) == 0)
      {
        if ((v359 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v359 < *(_QWORD *)((v360 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v362 = *(id *)(v360 + 8 * v359 + 32);
          goto LABEL_129;
        }
        __break(1u);
        goto LABEL_198;
      }
      v362 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v359, v360);
LABEL_129:
      v359 = (unint64_t)v362;
      swift_bridgeObjectRelease(v361);
      v363 = *(_QWORD *)(v347 + 6048);
      v156 = __OFADD__(v363, 1);
      v364 = v363 + 1;
      if (!v156)
      {
        *(_QWORD *)(v347 + 6048) = v364;
        swift_bridgeObjectRelease(v437);
        sub_100069A30();
        v116 = v365;
        v361 = (uint64_t)sub_100050960();
        if (!((unint64_t)v361 >> 62))
        {
          v366 = *(_QWORD *)((v361 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_132:
          swift_bridgeObjectRelease(v361);
          v64 = v426;
          (*((void (**)(void (*)(char *, uint64_t), char *, uint64_t, _QWORD))v426 + 2))(v426, v116, v366, 0);

          swift_release_n(v347, 2);
          v367._object = (void *)0x800000010054FA00;
          v367._countAndFlagsBits = v392;
          debugLogFootprint(_:)(v367);
          v368 = v414;
          v369.value._countAndFlagsBits = sub_1000549DC();
          v370 = v369.value._object;
          v165 = v418;
          DIPSignpost.end(workflowID:isBackground:)(v369, (Swift::Bool_optional)2);
          swift_bridgeObjectRelease(v370);
          v166 = v368;
          goto LABEL_41;
        }
LABEL_199:
        if (v361 < 0)
          v387 = v361;
        else
          v387 = v361 & 0xFFFFFFFFFFFFFF8;
        v366 = _CocoaArrayWrapper.endIndex.getter(v387);
        goto LABEL_132;
      }
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    v413[(_QWORD)v428] = 4;
    v371 = defaultLogger()(v348);
    v117 = Logger.logObject.getter(v371);
    v373 = static os_log_type_t.info.getter(v117, v372);
    if (os_log_type_enabled(v117, v373))
    {
      v374 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v374 = 0;
      swift_bridgeObjectRelease(v437);
      _os_log_impl((void *)&_mh_execute_header, v117, v373, " state set to PROOFED", v374, 2u);
      swift_slowDealloc(v374, -1, -1);

      v64(v393, v427);
      goto LABEL_145;
    }
LABEL_144:

    v64(v393, v427);
    swift_bridgeObjectRelease(v437);
LABEL_145:
    if (v414[745])
    {
      v380 = v414[746];
      if (v380)
      {
        if (*(_QWORD *)(v380 + 16) >= 3uLL && !*(_QWORD *)&v116[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__odnator])
        {
          if (qword_10062F4B0 != -1)
            swift_once(&qword_10062F4B0, sub_1001A5E1C);
          v381 = qword_1006702E0;
          swift_retain(qword_1006702E0);
          sub_1001AA4F4();
          swift_release(v381);
        }
      }
    }
    v382._countAndFlagsBits = 0xD000000000000035;
    v382._object = (void *)0x800000010054FAA0;
    v383._countAndFlagsBits = 0x3130353364613635;
    v383._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v383, v382);
    v64 = v426;
    (*((void (**)(void (*)(char *, uint64_t), _QWORD, _QWORD, _QWORD))v426 + 2))(v426, 0, 0, 0);

    v269 = v412;
    v270 = v411;
    v254 = v414;
LABEL_89:
    v271._object = (void *)0x800000010054FA00;
    v271._countAndFlagsBits = v392;
    debugLogFootprint(_:)(v271);
    v272.value._countAndFlagsBits = sub_1000549DC();
    v273 = v272.value._object;
    v274 = v418;
    DIPSignpost.end(workflowID:isBackground:)(v272, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(v273);
    swift_release(v254);
    (*(void (**)(char *, uint64_t))(v270 + 8))(v274, v269);
    goto LABEL_14;
  }
  defaultLogger()(v307);
  v308 = swift_retain_n(v303, 2);
  v309 = Logger.logObject.getter(v308);
  v310 = static os_log_type_t.debug.getter(v309);
  if (!os_log_type_enabled(v309, v310))
  {
    v319 = (_QWORD *)v303;
    swift_release_n(v303, 2);

    v64(v396, v427);
    swift_bridgeObjectRelease(v437);
LABEL_115:
    v333._countAndFlagsBits = 0xD00000000000002ALL;
    v333._object = (void *)0x800000010054FAE0;
    v334._countAndFlagsBits = 0x6364613635613838;
    v334._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v334, v333);
    swift_beginAccess(&v435, &v431, 0, 0);
    v335 = v435;
    v64 = v426;
    v336 = v417;
    if (v435)
    {
      v337 = v435;
      sub_100069A30();
      v339 = v338;

    }
    else
    {
      v339 = 0;
    }
    v340 = v411;
    v341 = (uint64_t)sub_100050960();
    v342 = v341;
    if ((unint64_t)v341 >> 62)
    {
      if (v341 >= 0)
        v341 &= 0xFFFFFFFFFFFFFF8uLL;
      v343 = _CocoaArrayWrapper.endIndex.getter(v341);
    }
    else
    {
      v343 = *(_QWORD *)((v341 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v342);
    (*((void (**)(void (*)(char *, uint64_t), void *, uint64_t, _QWORD))v64 + 2))(v64, v339, v343, 0);

    v344._object = (void *)0x800000010054FA00;
    v344._countAndFlagsBits = v392;
    debugLogFootprint(_:)(v344);
    v345.value._countAndFlagsBits = sub_1000549DC();
    v346 = v345.value._object;
    v165 = v418;
    DIPSignpost.end(workflowID:isBackground:)(v345, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease(v346);
    swift_release(v319);
    v167 = *(void (**)(char *, uint64_t))(v340 + 8);
    goto LABEL_42;
  }
  v311 = v122;
  v312 = swift_slowAlloc(22, -1);
  *(_DWORD *)v312 = 134349312;
  *(_QWORD *)&v313 = swift_beginAccess(&v435, &v436, 0, 0).n128_u64[0];
  if (v435)
  {
    v431 = (unint64_t)objc_msgSend(v435, "page", v313);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v312 + 4);
    *(_WORD *)(v312 + 12) = 2050;
    v314 = (uint64_t)sub_100050960();
    v315 = v314;
    if ((unint64_t)v314 >> 62)
    {
      if (v314 >= 0)
        v314 &= 0xFFFFFFFFFFFFFF8uLL;
      v316 = _CocoaArrayWrapper.endIndex.getter(v314);
    }
    else
    {
      v316 = *(_QWORD *)((v314 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v315);
    v317 = v414;
    swift_release(v414);
    v431 = v316;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v431, &v432, v312 + 14);
    swift_bridgeObjectRelease(v437);
    swift_release(v317);
    _os_log_impl((void *)&_mh_execute_header, v309, v310, "sending page %{public}ld / %{public}ld to client", (uint8_t *)v312, 0x16u);
    v318 = v312;
    v319 = v317;
    swift_slowDealloc(v318, -1, -1);

    v64(v396, v427);
    v122 = v311;
    goto LABEL_115;
  }
  v388 = v426;
  _Block_release(v426);
  _Block_release(v388);
  _Block_release(v388);
  _Block_release(v388);
  _Block_release(v388);
  _Block_release(v388);
  _Block_release(v388);
  swift_release(v414);
  __break(1u);
}

uint64_t sub_10017DB2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  Class isa;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE v44[24];

  v43 = a3;
  v5 = sub_100004828((uint64_t *)&unk_1006364D0);
  v6 = __chkstk_darwin(v5);
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - v8;
  v10 = type metadata accessor for Logger(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError.Code(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPError(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_beginAccess(a2, v44, 0, 0);
  v22 = *a2;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v14 + 104))(v16, enum case for DIPError.Code.internalError(_:), v13, v21);
  swift_bridgeObjectRetain(v22);
  swift_errorRetain(a1);
  v23 = v22;
  v24 = v18;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x800000010054F900, a1, v16, 0, v23, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2176);
  v25 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v26 = swift_allocError(v17, v25, 0, 0);
  v27 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 16);
  v29 = v27(v28, v20, v17);
  defaultLogger()(v29);
  DIPRecordError(_:message:log:)(v26, 0, 0xE000000000000000, v12);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  swift_errorRelease(v26);
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v9, 1, 1, v30);
  v32 = (void *)swift_allocError(v17, v25, 0, 0);
  v27(v33, v20, v17);
  v34 = sub_1004845F0(v32);
  v35 = (uint64_t)v42;
  swift_errorRelease(v32);
  sub_100038B24((uint64_t)v9, v35, (uint64_t *)&unk_1006364D0);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v35, 1, v30) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v30);
  }
  v37 = (void *)_convertErrorToNSError(_:)(v34);
  (*(void (**)(uint64_t, Class, void *))(v43 + 16))(v43, isa, v37);

  swift_errorRelease(v34);
  sub_100008030((uint64_t)v9, (uint64_t *)&unk_1006364D0);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v20, v17);
}

void sub_10017DEB8(unint64_t a1, _BYTE *a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  _BYTE *v52;
  char v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  Swift::String v88;
  unint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  void *v92;
  char *v93;
  id v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  char v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  char v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  void *v147;
  id v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  void (*v153)(void);
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  void (*v163)(void);
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  NSObject *v167;
  uint64_t v168;
  os_log_type_t v169;
  uint8_t *v170;
  uint8_t *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  Swift::String v181;
  _QWORD *v182;
  id v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  NSObject *v203;
  uint64_t v204;
  os_log_type_t v205;
  BOOL v206;
  uint64_t v207;
  uint8_t *v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  Swift::String v213;
  Swift::String v214;
  Class isa;
  uint64_t v216;
  uint64_t v217;
  Swift::String_optional v218;
  void *object;
  char *v220;
  Swift::String v221;
  const void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  void (*v244)(char *, uint64_t);
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  const void *v257;
  uint64_t v258;
  _BYTE *v259;
  void (*v260)(void);
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  __int128 v265;
  __int128 v266;
  unint64_t v267;

  v259 = a2;
  v243 = a1;
  v4 = sub_100004828((uint64_t *)&unk_1006364D0);
  v5 = __chkstk_darwin(v4);
  v232 = (char *)&v223 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v234 = (char *)&v223 - v7;
  v239 = type metadata accessor for UUID(0);
  v233 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v238 = (char *)&v223 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100004828(&qword_100636580);
  v240 = *(_QWORD *)(v242 - 8);
  v9 = __chkstk_darwin(v242);
  v237 = (char *)&v223 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = v10;
  __chkstk_darwin(v9);
  v241 = (char *)&v223 - v11;
  v256 = type metadata accessor for DIPError(0);
  v251 = *(_QWORD *)(v256 - 8);
  __chkstk_darwin(v256);
  v250 = (char *)&v223 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v248 = (uint64_t *)((char *)&v223 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v246 = type metadata accessor for DIPSignpost(0);
  v245 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v252 = (char *)&v223 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v247 = (char *)&v223 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v223 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v223 - v23;
  v25 = type metadata accessor for DIPError.Code(0);
  v253 = *(_QWORD *)(v25 - 8);
  v254 = v25;
  __chkstk_darwin(v25);
  v255 = (char *)&v223 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v258 - 8);
  v28 = __chkstk_darwin(v258);
  v235 = (char *)&v223 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v249 = (char *)&v223 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v223 - v32;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  v257 = a3;
  v34 = _Block_copy(a3);
  v35 = defaultLogger()(v34);
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.info.getter(v36, v37);
  if (os_log_type_enabled(v36, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v38, "coreidvd shareVerificationResult", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  v244 = *(void (**)(char *, uint64_t))(v27 + 8);
  v244(v33, v258);
  v40._countAndFlagsBits = 0xD00000000000002ELL;
  v40._object = (void *)0x800000010054F7F0;
  v41._countAndFlagsBits = 0x3466373737313563;
  v41._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v41, v40);
  v42 = sub_100004828((uint64_t *)&unk_1006325A0);
  v43 = sub_100004828((uint64_t *)&unk_100633440);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(_QWORD *)(v44 + 72);
  v46 = *(unsigned __int8 *)(v44 + 80);
  v47 = (v46 + 32) & ~v46;
  v48 = swift_allocObject(v42, v47 + v45, v46 | 7);
  *(_OWORD *)(v48 + 16) = xmmword_10051FFB0;
  v49 = v48 + v47 + *(int *)(v43 + 48);
  v50 = *(void (**)(void))(v17 + 104);
  v50();
  v51 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  v52 = v259;
  v53 = v259[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *(_QWORD *)(v49 + 24) = &type metadata for DIPState;
  *(_BYTE *)v49 = v53;
  v267 = sub_10011D314(v48);
  if ((sub_100148740() & 1) == 0)
  {
    v67 = v255;
    (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v255, enum case for DIPError.Code.missingEntitlement(_:), v254);
    v68 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v69 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v70 = swift_allocError(v256, v69, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054F5E0, 0, v67, 0, v68, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2182);
LABEL_10:
    v71 = v257;
    _Block_copy(v257);
    sub_10017DB2C(v70, (uint64_t *)&v267, (uint64_t)v71);
    _Block_release(v71);
    swift_bridgeObjectRelease(v267);
    swift_errorRelease(v70);
LABEL_69:
    _Block_release(v71);
    _Block_release(v71);
    _Block_release(v71);
    _Block_release(v71);
    return;
  }
  v54 = v52[v51];
  if (v54 != 4 && v54 != 8)
  {
    v262 = 0;
    v263 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v72._countAndFlagsBits = 0xD000000000000031;
    v72._object = (void *)0x800000010054F850;
    String.append(_:)(v72);
    LOBYTE(v265) = v52[v51];
    _print_unlocked<A, B>(_:_:)(&v265, &v262, &type metadata for DIPState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v73._countAndFlagsBits = 0x657461747320;
    v73._object = (void *)0xE600000000000000;
    String.append(_:)(v73);
    v74 = v262;
    v75 = v263;
    v76 = v255;
    (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v255, enum case for DIPError.Code.restartCurrentTier(_:), v254);
    v77 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v78 = v250;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v74, v75, 0, v76, 0, v77, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2186);
    v79 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v80 = v256;
    v81 = swift_allocError(v256, v79, 0, 0);
    v82 = v251;
    (*(void (**)(uint64_t, char *, uint64_t))(v251 + 16))(v83, v78, v80);
    v71 = v257;
    _Block_copy(v257);
    sub_10017DB2C(v81, (uint64_t *)&v267, (uint64_t)v71);
    _Block_release(v71);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v78, v80);
    swift_bridgeObjectRelease(v267);
    swift_errorRelease(v81);
    goto LABEL_69;
  }
  v55 = *(_QWORD *)&v52[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v55)
  {
    v84 = v255;
    (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v255, enum case for DIPError.Code.unexpectedDaemonState(_:), v254);
    v85 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v70 = swift_allocError(v256, v86, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010054F680, 0, v84, 0, v85, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2191);
    goto LABEL_10;
  }
  v227 = v51;
  ((void (*)(char *, _QWORD, uint64_t))v50)(v24, enum case for DIPError.PropertyKey.inoProviderID(_:), v16);
  v56 = *(_QWORD **)(v55 + 16);
  v57 = v56[8];
  v58 = v56[9];
  v264 = &type metadata for String;
  v262 = v57;
  v263 = v58;
  swift_beginAccess(&v267, &v265, 33, 0);
  swift_bridgeObjectRetain(v58);
  swift_retain(v55);
  sub_10047E318((uint64_t)&v262, (uint64_t)v24);
  ((void (*)(char *, _QWORD, uint64_t))v50)(v24, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v16);
  v60 = v56[2];
  v59 = v56[3];
  v264 = &type metadata for String;
  v262 = v60;
  v263 = v59;
  swift_bridgeObjectRetain(v59);
  sub_10047E318((uint64_t)&v262, (uint64_t)v24);
  ((void (*)(char *, _QWORD, uint64_t))v50)(v22, enum case for DIPError.PropertyKey.spProviderID(_:), v16);
  v231 = v55;
  v61 = *(_QWORD **)(v55 + 24);
  if (v61)
  {
    v63 = v61[8];
    v62 = v61[9];
    v264 = &type metadata for String;
    v262 = v63;
    v263 = v62;
    swift_bridgeObjectRetain(v62);
    sub_10047E318((uint64_t)&v262, (uint64_t)v22);
    v64 = (uint64_t)v247;
    ((void (*)(char *, _QWORD, uint64_t))v50)(v247, enum case for DIPError.PropertyKey.spWorkflowID(_:), v16);
    v65 = v61[2];
    v66 = v61[3];
    swift_bridgeObjectRetain(v66);
  }
  else
  {
    v264 = &type metadata for String;
    v65 = 0x414C494156414E55;
    v66 = 0xEB00000000454C42;
    v262 = 0x414C494156414E55;
    v263 = 0xEB00000000454C42;
    sub_10047E318((uint64_t)&v262, (uint64_t)v22);
    v64 = (uint64_t)v247;
    ((void (*)(char *, _QWORD, uint64_t))v50)(v247, enum case for DIPError.PropertyKey.spWorkflowID(_:), v16);
  }
  v87 = v248;
  v264 = &type metadata for String;
  v262 = v65;
  v263 = v66;
  sub_10047E318((uint64_t)&v262, v64);
  swift_endAccess(&v265);
  v88._countAndFlagsBits = 0xD000000000000015;
  v88._object = (void *)0x800000010054F890;
  debugLogFootprint(_:)(v88);
  static DaemonSignposts.shareVerificationResultTotal.getter();
  DIPSignpost.init(_:)(v87);
  v89 = v56[16];
  v90 = v259;
  if (v89)
  {
    v91 = v56[15];
    ((void (*)(char *, _QWORD, uint64_t))v50)(v24, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v16);
    v264 = &type metadata for String;
    v262 = v91;
    v263 = v89;
    swift_beginAccess(&v267, &v265, 33, 0);
    swift_bridgeObjectRetain(v89);
    sub_10047E318((uint64_t)&v262, (uint64_t)v24);
    swift_endAccess(&v265);
  }
  sub_10016AD10(v231);
  v92 = *(void **)&v90[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__context];
  v71 = v257;
  v93 = v249;
  if (v92 && (v94 = objc_msgSend(v92, "httpHeaders")) != 0)
  {
    v95 = v94;
    v226 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v94, &type metadata for String, &type metadata for String, &protocol witness table for String);

  }
  else
  {
    v226 = 0;
  }
  v96 = (void *)kDISharingOptionHttpHeader;
  *(_QWORD *)&v265 = kDISharingOptionHttpHeader;
  type metadata accessor for DISharingOption(0);
  v98 = v97;
  v99 = sub_100004790(&qword_10062F9B0, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051FBE8);
  v100 = v96;
  v224 = v98;
  v223 = v99;
  AnyHashable.init<A>(_:)(&v262, &v265, v98, v99);
  v101 = v243;
  if (*(_QWORD *)(v243 + 16) && (v102 = sub_1004A85D4((uint64_t)&v262), (v103 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v101 + 56) + 32 * v102, (uint64_t)&v265);
  }
  else
  {
    v265 = 0u;
    v266 = 0u;
  }
  v104 = v226;
  sub_100184D50((uint64_t)&v262);
  if (*((_QWORD *)&v266 + 1))
  {
    v105 = sub_100004828(&qword_1006367E8);
    if (swift_dynamicCast(&v260, &v265, (char *)&type metadata for Any + 8, v105, 6))
      v106 = (uint64_t)v260;
    else
      v106 = 0;
  }
  else
  {
    sub_100008030((uint64_t)&v265, (uint64_t *)&unk_1006371E0);
    v106 = 0;
  }
  v262 = (uint64_t)&_swiftEmptyDictionarySingleton;
  v225 = v106;
  if (v104)
  {
    swift_bridgeObjectRetain(v104);
    sub_10013EA00(v107, &v262, "sp headers from context: %s = %s");
    swift_bridgeObjectRelease(v104);
    v106 = v225;
  }
  if (v106)
  {
    v108 = v106;
    swift_bridgeObjectRetain(v106);
    sub_10013EA00(v108, &v262, "sp headers from share options: %s = %s");
    v230 = 0;
    swift_bridgeObjectRelease(v108);
  }
  else
  {
    v230 = 0;
  }
  v109 = v259;
  v110 = v231;
  v111 = _sSo16DIHttpHeaderNamea8coreidvdE8allCasesSayABGvgZ_0();
  v112 = v111;
  v113 = *(_QWORD *)(v111 + 16);
  if (!v113)
  {
    v248 = &_swiftEmptyDictionarySingleton;
LABEL_54:
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v262);
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v226);
    v260 = (void (*)(void))kDISharingOptionNonce;
    v148 = kDISharingOptionNonce;
    AnyHashable.init<A>(_:)(&v262, &v260, v224, v223);
    v149 = v243;
    if (*(_QWORD *)(v243 + 16) && (v150 = sub_1004A85D4((uint64_t)&v262), (v151 & 1) != 0))
    {
      sub_10002EDBC(*(_QWORD *)(v149 + 56) + 32 * v150, (uint64_t)&v265);
    }
    else
    {
      v265 = 0u;
      v266 = 0u;
    }
    sub_100184D50((uint64_t)&v262);
    if (*((_QWORD *)&v266 + 1))
    {
      if ((swift_dynamicCast(&v260, &v265, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v153 = v260;
        v152 = v261;
        if (String.count.getter(v260, v261) > 64)
        {
          swift_bridgeObjectRelease(v152);
          swift_bridgeObjectRelease(v248);
          v154 = v255;
          (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v255, enum case for DIPError.Code.invalidSPNonce(_:), v254);
          v155 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v156 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v157 = swift_allocError(v256, v156, 0, 0);
          v158 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054F7A0, 0, v154, 0, v155, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2224);
          v230 = v157;
          v159 = swift_willThrow(v158);
LABEL_65:
          v165 = v259;
LABEL_66:
          v166 = defaultLogger()(v159);
          v167 = Logger.logObject.getter(v166);
          v169 = static os_log_type_t.info.getter(v167, v168);
          if (os_log_type_enabled(v167, v169))
          {
            v170 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v170 = 0;
            _os_log_impl((void *)&_mh_execute_header, v167, v169, " state set to SHAREFAILED", v170, 2u);
            v171 = v170;
            v165 = v259;
            swift_slowDealloc(v171, -1, -1);
          }

          v244(v93, v258);
          v172 = v255;
          (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v255, enum case for DIPError.Code.internalError(_:), v254);
          v173 = v230;
          swift_errorRetain(v230);
          v174 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v175 = v250;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v173, v172, 0, v174, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002CLL, 0x800000010054F820, 2248);
          v176 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v177 = v256;
          v178 = swift_allocError(v256, v176, 0, 0);
          v179 = v251;
          (*(void (**)(uint64_t, char *, uint64_t))(v251 + 16))(v180, v175, v177);
          _Block_copy(v71);
          sub_10017DB2C(v178, (uint64_t *)&v267, (uint64_t)v71);
          _Block_release(v71);
          swift_errorRelease(v173);
          (*(void (**)(char *, uint64_t))(v179 + 8))(v175, v177);
          swift_bridgeObjectRelease(v267);
          swift_errorRelease(v178);
          v165[v227] = 8;
          v181._countAndFlagsBits = 0xD000000000000013;
          v181._object = (void *)0x800000010054F8B0;
          debugLogFootprint(_:)(v181);
          swift_release(v231);
          (*(void (**)(char *, uint64_t))(v245 + 8))(v252, v246);
          goto LABEL_69;
        }
        goto LABEL_71;
      }
    }
    else
    {
      sub_100008030((uint64_t)&v265, (uint64_t *)&unk_1006371E0);
    }
    v160 = v110;
    v161 = v248;
    v162 = v230;
    v163 = sub_10014CAA4(v160, 1, (uint64_t)v248);
    v230 = v162;
    if (v162)
    {
      v159 = swift_bridgeObjectRelease(v161);
      goto LABEL_65;
    }
    v153 = v163;
    v152 = v164;
    v109 = v259;
    v110 = v231;
LABEL_71:
    v182 = (_QWORD *)swift_allocObject(&unk_100609538, 48, 7);
    v182[2] = v109;
    v182[3] = v110;
    v182[4] = v153;
    v182[5] = v152;
    swift_retain(v110);
    v183 = v109;
    v184 = v242;
    v185 = v241;
    v247 = (char *)0xD00000000000001ELL;
    v186 = v110;
    v187 = v230;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD00000000000002CLL, 0x800000010054F820, 2233, &unk_1006368A0, v182, v242);
    if (!v187)
    {
      swift_release(v182);
      v188 = v240;
      v189 = v237;
      (*(void (**)(char *, char *, uint64_t))(v240 + 16))(v237, v185, v184);
      v190 = *(unsigned __int8 *)(v188 + 80);
      v191 = (v190 + 24) & ~v190;
      v192 = (v236 + v191 + 7) & 0xFFFFFFFFFFFFFFF8;
      v193 = (v192 + 15) & 0xFFFFFFFFFFFFFFF8;
      v194 = swift_allocObject(&unk_100609560, v193 + 8, v190 | 7);
      v243 = 0x800000010054D670;
      v195 = v183;
      v196 = v194;
      *(_QWORD *)(v194 + 16) = v195;
      (*(void (**)(uint64_t, char *, uint64_t))(v188 + 32))(v194 + v191, v189, v242);
      *(_QWORD *)(v196 + v192) = v186;
      *(_QWORD *)(v196 + v193) = v248;
      swift_retain(v186);
      v197 = v195;
      v198 = v239;
      v199 = v238;
      runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, v247, v243, 0xD00000000000002CLL, 0x800000010054F820, 2236, &unk_1006368B0, v196, v239);
      v200 = swift_release(v196);
      v201 = v235;
      v202 = defaultLogger()(v200);
      v203 = Logger.logObject.getter(v202);
      v205 = static os_log_type_t.info.getter(v203, v204);
      v206 = os_log_type_enabled(v203, v205);
      v71 = v257;
      v207 = v227;
      if (v206)
      {
        v208 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v208 = 0;
        swift_bridgeObjectRelease(v267);
        _os_log_impl((void *)&_mh_execute_header, v203, v205, " state set to SHAREDONE", v208, 2u);
        swift_slowDealloc(v208, -1, -1);

        v244(v201, v258);
      }
      else
      {

        v244(v201, v258);
        swift_bridgeObjectRelease(v267);
      }
      v209 = v259;
      v210 = (uint64_t)v234;
      v211 = v233;
      v212 = (uint64_t)v232;
      v213._countAndFlagsBits = 0xD000000000000027;
      v213._object = (void *)0x800000010054F8D0;
      v214._countAndFlagsBits = 0x3932363265326332;
      v214._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v214, v213);
      (*(void (**)(uint64_t, char *, uint64_t))(v211 + 16))(v210, v199, v198);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v211 + 56))(v210, 0, 1, v198);
      sub_100038B24(v210, v212, (uint64_t *)&unk_1006364D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v212, 1, v198) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v212, v198);
      }
      v216 = v240;
      (*((void (**)(const void *, Class, _QWORD))v71 + 2))(v71, isa, 0);

      sub_100008030(v210, (uint64_t *)&unk_1006364D0);
      (*(void (**)(char *, uint64_t))(v211 + 8))(v199, v198);
      (*(void (**)(char *, uint64_t))(v216 + 8))(v241, v242);
      v209[v207] = 7;
      v217 = v231;
      v218.value._countAndFlagsBits = sub_1000549DC();
      object = v218.value._object;
      v220 = v252;
      DIPSignpost.end(workflowID:isBackground:)(v218, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease(object);
      v221._countAndFlagsBits = 0xD000000000000013;
      v221._object = (void *)0x800000010054F8B0;
      debugLogFootprint(_:)(v221);
      swift_release(v217);
      (*(void (**)(char *, uint64_t))(v245 + 8))(v220, v246);
      goto LABEL_69;
    }
    v230 = v187;
    swift_bridgeObjectRelease(v248);
    v159 = swift_release(v182);
    v71 = v257;
    v165 = v259;
    v93 = v249;
    goto LABEL_66;
  }
  swift_bridgeObjectRetain(v111);
  v114 = 0;
  v248 = &_swiftEmptyDictionarySingleton;
  v229 = v112;
  v228 = v113;
  while (1)
  {
    v115 = *(void **)(v112 + 8 * v114 + 32);
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v118 = v117;
    v119 = v262;
    if (!*(_QWORD *)(v262 + 16))
    {
      swift_bridgeObjectRelease(v117);
      goto LABEL_37;
    }
    v120 = v116;
    v121 = v115;
    v122 = sub_1004A8604(v120, v118);
    if ((v123 & 1) == 0)
    {
      swift_bridgeObjectRelease(v118);

      goto LABEL_37;
    }
    v247 = v121;
    v124 = (uint64_t *)(*(_QWORD *)(v119 + 56) + 16 * v122);
    v125 = *v124;
    v126 = v124[1];
    swift_bridgeObjectRetain(v126);
    swift_bridgeObjectRelease(v118);
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v129 = v128;
    v130 = v248;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v248);
    *(_QWORD *)&v265 = v130;
    v133 = sub_1004A8604(v127, v129);
    v134 = v130[2];
    v135 = (v132 & 1) == 0;
    v136 = v134 + v135;
    if (__OFADD__(v134, v135))
      break;
    v137 = v132;
    if (v130[3] >= v136)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_10012973C();
    }
    else
    {
      sub_100123948(v136, isUniquelyReferenced_nonNull_native);
      v138 = sub_1004A8604(v127, v129);
      if ((v137 & 1) != (v139 & 1))
        goto LABEL_82;
      v133 = v138;
    }
    v140 = (_QWORD *)v265;
    v248 = (_QWORD *)v265;
    if ((v137 & 1) != 0)
    {
      v141 = (_QWORD *)(*(_QWORD *)(v265 + 56) + 16 * v133);
      swift_bridgeObjectRelease(v141[1]);
      *v141 = v125;
      v141[1] = v126;
    }
    else
    {
      *(_QWORD *)(v265 + 8 * (v133 >> 6) + 64) |= 1 << v133;
      v142 = (uint64_t *)(v140[6] + 16 * v133);
      *v142 = v127;
      v142[1] = v129;
      v143 = (_QWORD *)(v140[7] + 16 * v133);
      *v143 = v125;
      v143[1] = v126;
      v144 = v140[2];
      v145 = __OFADD__(v144, 1);
      v146 = v144 + 1;
      if (v145)
        goto LABEL_81;
      v140[2] = v146;
      swift_bridgeObjectRetain(v129);
    }
    v112 = v229;
    v113 = v228;
    v147 = v247;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v129);

LABEL_37:
    if (v113 == ++v114)
    {
      swift_bridgeObjectRelease(v112);
      v71 = v257;
      v109 = v259;
      v110 = v231;
      v93 = v249;
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  v222 = v257;
  _Block_release(v257);
  _Block_release(v222);
  _Block_release(v222);
  _Block_release(v222);
  _Block_release(v222);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10017F744(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v30 = a3;
  v29 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_beginAccess(a2, v31, 0, 0);
  v17 = *a2;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8, v16);
  swift_bridgeObjectRetain(v17);
  swift_errorRetain(a1);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x800000010054F7D0, a1, v11, 0, v17, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2276);
  v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v19 = swift_allocError(v12, v18, 0, 0);
  v20 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 16);
  v22 = v20(v21, v15, v12);
  defaultLogger()(v22);
  DIPRecordError(_:message:log:)(v19, 0, 0xE000000000000000, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v29);
  swift_errorRelease(v19);
  v23 = (void *)swift_allocError(v12, v18, 0, 0);
  v20(v24, v15, v12);
  v25 = sub_1004845F0(v23);
  swift_errorRelease(v23);
  v26 = (void *)_convertErrorToNSError(_:)(v25);
  (*(void (**)(uint64_t, _QWORD, void *))(v30 + 16))(v30, 0, v26);

  swift_errorRelease(v25);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_10017F9E8(uint64_t a1, _BYTE *a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  void (*v49)(char *, uint64_t);
  Swift::String v50;
  Swift::String v51;
  _BOOL8 v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const void *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  Swift::String v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _BYTE *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  _QWORD *v146;
  uint64_t v147;
  _BYTE *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint8_t *v163;
  char *v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const void *v171;
  Swift::String v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void (**v197)(_QWORD, _QWORD, _QWORD);
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  Swift::String v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  char *v207;
  char *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  uint64_t v214;
  os_log_type_t v215;
  uint8_t *v216;
  uint64_t v217;
  char *v218;
  NSString v219;
  uint64_t v220;
  uint64_t v221;
  Swift::String_optional v222;
  void *object;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  Swift::String v229;
  uint64_t v230;
  void (*v231)(char *, uint64_t);
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint8_t *v259;
  char *v260;
  void (**v261)(_QWORD, _QWORD, _QWORD);
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;

  v243 = a1;
  v244 = sub_100004828(&qword_100636580);
  v239 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v242 = (char *)&v230 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v6);
  v235 = (char *)&v230 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for DIPError(0);
  v255 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257);
  v254 = (char *)&v230 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v237 = (char *)&v230 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = type metadata accessor for TiberiusIdentitySharingRequest(0);
  __chkstk_darwin(v236);
  v241 = (uint64_t)&v230 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v12);
  v249 = (char *)&v230 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for DIPSignpost(0);
  v245 = *(_QWORD *)(v246 - 8);
  v14 = __chkstk_darwin(v246);
  v251 = (char *)&v230 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v256 = (char *)&v230 - v16;
  v17 = type metadata accessor for DIPError.PropertyKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v247 = (char *)&v230 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v248 = (char *)&v230 - v22;
  __chkstk_darwin(v21);
  v253 = (char *)&v230 - v23;
  v24 = type metadata accessor for DIPError.Code(0);
  v258 = *(_QWORD *)(v24 - 8);
  v259 = (uint8_t *)v24;
  __chkstk_darwin(v24);
  v260 = (char *)&v230 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v250 = (char *)&v230 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v252 = (char *)&v230 - v31;
  v32 = __chkstk_darwin(v30);
  v234 = (char *)&v230 - v33;
  v34 = __chkstk_darwin(v32);
  v238 = (char *)&v230 - v35;
  v36 = __chkstk_darwin(v34);
  v240 = (char *)&v230 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v230 - v39;
  __chkstk_darwin(v38);
  v42 = (char *)&v230 - v41;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  v261 = (void (**)(_QWORD, _QWORD, _QWORD))a3;
  v43 = _Block_copy(a3);
  v44 = defaultLogger()(v43);
  v45 = Logger.logObject.getter(v44);
  v47 = static os_log_type_t.info.getter(v45, v46);
  if (os_log_type_enabled(v45, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v47, "coreidvd getVerificationResult", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  v49 = *(void (**)(char *, uint64_t))(v27 + 8);
  v49(v42, v26);
  v50._countAndFlagsBits = 0xD00000000000002CLL;
  v50._object = (void *)0x800000010054F5B0;
  v51._countAndFlagsBits = 0x6566643037643566;
  v51._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v51, v50);
  v52 = sub_10016E000();
  if (v52)
  {
    v53 = defaultLogger()(v52);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.debug.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "getVerificationResult called for Tiberius warmup; nothing to do",
        v56,
        2u);
      swift_slowDealloc(v56, -1, -1);
    }

    v49(v40, v26);
    v57 = v261;
    v261[2](v261, 0, 0);
    a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state] = 7;
    goto LABEL_17;
  }
  v58 = sub_100004828((uint64_t *)&unk_1006325A0);
  v59 = sub_100004828((uint64_t *)&unk_100633440);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(_QWORD *)(v60 + 72);
  v62 = *(unsigned __int8 *)(v60 + 80);
  v63 = (v62 + 32) & ~v62;
  v64 = swift_allocObject(v58, v63 + v61, v62 | 7);
  *(_OWORD *)(v64 + 16) = xmmword_10051FFB0;
  v65 = v64 + v63 + *(int *)(v59 + 48);
  v66 = *(void (**)(void))(v18 + 104);
  v66();
  v67 = OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state;
  v68 = a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__state];
  *(_QWORD *)(v65 + 24) = &type metadata for DIPState;
  *(_BYTE *)v65 = v68;
  v269 = sub_10011D314(v64);
  if ((sub_100148740() & 1) == 0)
  {
    v84 = v260;
    (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.missingEntitlement(_:), v259);
    v85 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v87 = swift_allocError(v257, v86, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010054F5E0, 0, v84, 0, v85, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2282);
LABEL_14:
    v57 = v261;
    _Block_copy(v261);
    sub_10017F744(v87, (uint64_t *)&v269, (uint64_t)v57);
    _Block_release(v57);
    swift_bridgeObjectRelease(v269);
    v88 = v87;
LABEL_16:
    swift_errorRelease(v88);
LABEL_17:
    _Block_release(v57);
    _Block_release(v57);
    _Block_release(v57);
    v101 = v57;
    goto LABEL_18;
  }
  v69 = a2[v67];
  if (v69 != 4 && v69 != 8)
  {
    v264 = 0;
    v265 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v89._countAndFlagsBits = 0xD00000000000002FLL;
    v89._object = (void *)0x800000010054F650;
    String.append(_:)(v89);
    LOBYTE(v267) = a2[v67];
    _print_unlocked<A, B>(_:_:)(&v267, &v264, &type metadata for DIPState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v90._countAndFlagsBits = 0x657461747320;
    v90._object = (void *)0xE600000000000000;
    String.append(_:)(v90);
    v91 = v264;
    v92 = v265;
    v93 = v260;
    (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.restartCurrentTier(_:), v259);
    v94 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v95 = v254;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v91, v92, 0, v93, 0, v94, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2286);
    v96 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v97 = v257;
    v98 = swift_allocError(v257, v96, 0, 0);
    v99 = v255;
    (*(void (**)(uint64_t, char *, uint64_t))(v255 + 16))(v100, v95, v97);
    v57 = v261;
    _Block_copy(v261);
    sub_10017F744(v98, (uint64_t *)&v269, (uint64_t)v57);
    _Block_release(v57);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v95, v97);
    swift_bridgeObjectRelease(v269);
    v88 = v98;
    goto LABEL_16;
  }
  v70 = *(_QWORD *)&a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__workflow];
  if (!v70)
  {
    v102 = v260;
    (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.unexpectedDaemonState(_:), v259);
    v103 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v104 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v87 = swift_allocError(v257, v104, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010054F680, 0, v102, 0, v103, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2291);
    goto LABEL_14;
  }
  v231 = v49;
  v71 = (uint64_t)v253;
  ((void (*)(char *, _QWORD, uint64_t))v66)(v253, enum case for DIPError.PropertyKey.inoProviderID(_:), v17);
  v72 = *(_QWORD **)(v70 + 16);
  v73 = v72[8];
  v74 = v72[9];
  v266 = &type metadata for String;
  v264 = v73;
  v265 = v74;
  swift_beginAccess(&v269, &v267, 33, 0);
  swift_bridgeObjectRetain(v74);
  swift_retain(v70);
  sub_10047E318((uint64_t)&v264, v71);
  ((void (*)(uint64_t, _QWORD, uint64_t))v66)(v71, enum case for DIPError.PropertyKey.inoWorkflowID(_:), v17);
  v76 = v72[2];
  v75 = v72[3];
  v266 = &type metadata for String;
  v264 = v76;
  v265 = v75;
  swift_bridgeObjectRetain(v75);
  sub_10047E318((uint64_t)&v264, v71);
  v77 = (uint64_t)v248;
  ((void (*)(char *, _QWORD, uint64_t))v66)(v248, enum case for DIPError.PropertyKey.spProviderID(_:), v17);
  v78 = *(_QWORD **)(v70 + 24);
  v233 = v70;
  v232 = v26;
  if (v78)
  {
    v80 = v78[8];
    v79 = v78[9];
    v266 = &type metadata for String;
    v264 = v80;
    v265 = v79;
    swift_bridgeObjectRetain(v79);
    sub_10047E318((uint64_t)&v264, v77);
    v81 = (uint64_t)v247;
    ((void (*)(char *, _QWORD, uint64_t))v66)(v247, enum case for DIPError.PropertyKey.spWorkflowID(_:), v17);
    v83 = v78[2];
    v82 = v78[3];
    swift_bridgeObjectRetain(v82);
  }
  else
  {
    v266 = &type metadata for String;
    v83 = 0x414C494156414E55;
    v82 = 0xEB00000000454C42;
    v264 = 0x414C494156414E55;
    v265 = 0xEB00000000454C42;
    sub_10047E318((uint64_t)&v264, v77);
    v81 = (uint64_t)v247;
    ((void (*)(char *, _QWORD, uint64_t))v66)(v247, enum case for DIPError.PropertyKey.spWorkflowID(_:), v17);
  }
  v105 = v231;
  v248 = (char *)v67;
  v266 = &type metadata for String;
  v264 = v83;
  v265 = v82;
  sub_10047E318((uint64_t)&v264, v81);
  swift_endAccess(&v267);
  v106._countAndFlagsBits = 0xD00000000000001ALL;
  v106._object = (void *)0x800000010054F6B0;
  debugLogFootprint(_:)(v106);
  v107 = v249;
  static DaemonSignposts.getVerificationResultTotal.getter();
  v108 = DIPSignpost.init(_:)(v107);
  v109 = v72[16];
  if (v109)
  {
    v110 = v72[15];
    v111 = (uint64_t)v253;
    ((void (*)(char *, _QWORD, uint64_t))v66)(v253, enum case for DIPError.PropertyKey.inoLaunchTier(_:), v17);
    v266 = &type metadata for String;
    v264 = v110;
    v265 = v109;
    swift_beginAccess(&v269, &v267, 33, 0);
    swift_bridgeObjectRetain(v109);
    sub_10047E318((uint64_t)&v264, v111);
    v108 = swift_endAccess(&v267);
  }
  static DaemonSignposts.getVerificationResultPrepare.getter(v108);
  v112 = v251;
  v113 = DIPSignpost.init(_:)(v107);
  v114 = a2;
  if (v78 && (*((_BYTE *)v78 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) & 1) == 0)
  {
    v124 = v240;
    v125 = defaultLogger()(v113);
    v126 = Logger.logObject.getter(v125);
    v127 = static os_log_type_t.debug.getter(v126);
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Using Tiberius sharing payload", v128, 2u);
      swift_slowDealloc(v128, -1, -1);
    }

    v105(v124, v232);
    v129 = v241;
    sub_10015B8E8(v233, v241);
    v153 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v153, *(unsigned int *)(v153 + 48), *(unsigned __int16 *)(v153 + 52));
    v154 = JSONEncoder.init()();
    v155 = sub_100004790(&qword_100636890, type metadata accessor for TiberiusIdentitySharingRequest, (uint64_t)&unk_10052B514);
    v174 = dispatch thunk of JSONEncoder.encode<A>(_:)(v129, v236, v155);
    v176 = v175;
    sub_100035DAC(v129, type metadata accessor for TiberiusIdentitySharingRequest);
    goto LABEL_45;
  }
  v115 = (void *)kDISharingOptionNonce;
  v262 = kDISharingOptionNonce;
  type metadata accessor for DISharingOption(0);
  v117 = v116;
  v118 = sub_100004790(&qword_10062F9B0, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051FBE8);
  v119 = v115;
  AnyHashable.init<A>(_:)(&v264, &v262, v117, v118);
  v120 = v243;
  if (*(_QWORD *)(v243 + 16))
  {
    v121 = sub_1004A85D4((uint64_t)&v264);
    v122 = v244;
    if ((v123 & 1) != 0)
    {
      sub_10002EDBC(*(_QWORD *)(v120 + 56) + 32 * v121, (uint64_t)&v267);
    }
    else
    {
      v267 = 0u;
      v268 = 0u;
    }
  }
  else
  {
    v267 = 0u;
    v268 = 0u;
    v122 = v244;
  }
  sub_100184D50((uint64_t)&v264);
  if (!*((_QWORD *)&v268 + 1))
  {
    v130 = sub_100008030((uint64_t)&v267, (uint64_t *)&unk_1006371E0);
    goto LABEL_38;
  }
  v130 = swift_dynamicCast(&v262, &v267, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v130 & 1) == 0)
  {
LABEL_38:
    v132 = 0;
    v131 = 0xE000000000000000;
    goto LABEL_39;
  }
  v132 = v262;
  v131 = v263;
  v130 = String.count.getter(v262, v263);
  if (v130 <= 64)
  {
LABEL_39:
    v142 = defaultLogger()(v130);
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.debug.getter(v143);
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v145 = 0;
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "Using default sharing payload", v145, 2u);
      swift_slowDealloc(v145, -1, -1);
    }

    v105(v250, v232);
    v146 = (_QWORD *)swift_allocObject(&unk_100609510, 48, 7);
    v146[2] = a2;
    v147 = v233;
    v146[3] = v233;
    v146[4] = v132;
    v146[5] = v131;
    swift_retain(v147);
    v148 = a2;
    v149 = v242;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ELL, 0x800000010054D670, 0xD00000000000002ALL, 0x800000010054F620, 2341, &unk_100636880, v146, v122);
    swift_release(v146);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v150 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v150, *(unsigned int *)(v150 + 48), *(unsigned __int16 *)(v150 + 52));
    v154 = JSONEncoder.init()();
    v152 = v149;
    v151 = sub_100099FFC(&qword_100635E48, &qword_100636580, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    v174 = dispatch thunk of JSONEncoder.encode<A>(_:)(v149, v122, v151);
    v176 = v173;
    (*(void (**)(char *, uint64_t))(v239 + 8))(v152, v122);
LABEL_45:
    v177 = swift_release(v154);
    v178 = v237;
    static String.Encoding.utf8.getter(v177);
    v179 = String.init(data:encoding:)(v174, v176, v178);
    v181 = v238;
    if (v180)
    {
      v182 = v179;
      v183 = v180;
      v184 = *(_QWORD *)(v233 + 24);
      if (v184 && (*(_BYTE *)(v184 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) & 1) == 0)
      {
        defaultLogger()(v179);
        v203 = swift_bridgeObjectRetain_n(v183, 2);
        v204 = Logger.logObject.getter(v203);
        v205 = static os_log_type_t.debug.getter(v204);
        if (os_log_type_enabled(v204, v205))
        {
          v206 = (uint8_t *)swift_slowAlloc(12, -1);
          v260 = (char *)swift_slowAlloc(32, -1);
          v264 = (uint64_t)v260;
          *(_DWORD *)v206 = 136315138;
          v259 = v206 + 4;
          swift_bridgeObjectRetain(v183);
          *(_QWORD *)&v267 = sub_1000E3AC8(v182, v183, &v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, (char *)&v267 + 8, v259);
          swift_bridgeObjectRelease_n(v183, 3);
          _os_log_impl((void *)&_mh_execute_header, v204, v205, "Tiberius payload: %s", v206, 0xCu);
          v207 = v260;
          swift_arrayDestroy(v260, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v207, -1, -1);
          swift_slowDealloc(v206, -1, -1);

          v208 = v238;
        }
        else
        {
          swift_bridgeObjectRelease_n(v183, 2);

          v208 = v181;
        }
        v105(v208, v232);
        v185 = 0xD00000000000003BLL;
        v186 = 0x800000010054F760;
        v187 = 0x3938363937346336;
      }
      else
      {
        v185 = 0xD00000000000003ALL;
        v186 = 0x800000010054F720;
        v187 = 0x3233326439326339;
      }
      v209 = 0xE800000000000000;
      logMilestone(tag:description:)(*(Swift::String *)&v187, *(Swift::String *)&v185);
      v210 = v234;
      v212 = defaultLogger()(v211);
      v213 = Logger.logObject.getter(v212);
      v215 = static os_log_type_t.info.getter(v213, v214);
      if (os_log_type_enabled(v213, v215))
      {
        v216 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v216 = 0;
        swift_bridgeObjectRelease(v269);
        _os_log_impl((void *)&_mh_execute_header, v213, v215, " state set to SHAREDONE", v216, 2u);
        swift_slowDealloc(v216, -1, -1);

        v105(v210, v232);
      }
      else
      {

        v105(v210, v232);
        swift_bridgeObjectRelease(v269);
      }
      v197 = v261;
      v217 = v245;
      v218 = v248;
      v219 = String._bridgeToObjectiveC()();
      ((void (**)(_QWORD, NSString, _QWORD))v197)[2](v197, v219, 0);

      swift_bridgeObjectRelease(v183);
      sub_100007F8C(v174, v176);
      v198 = *(void (**)(char *, uint64_t))(v217 + 8);
      v220 = v246;
      v198(v251, v246);
      v218[(_QWORD)a2] = 7;
      v221 = v233;
      v222.value._countAndFlagsBits = sub_1000549DC();
      object = v222.value._object;
      v224 = v256;
      DIPSignpost.end(workflowID:isBackground:)(v222, (Swift::Bool_optional)2);
      v225 = swift_bridgeObjectRelease(object);
      v226 = (uint64_t)v235;
      Date.init()(v225);
      v227 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v227 - 8) + 56))(v226, 0, 1, v227);
      v228 = (uint64_t)&a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate];
      swift_beginAccess(&a2[OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__verificationResultDate], &v264, 33, 0);
      sub_100184E1C(v226, v228, &qword_100633990);
      swift_endAccess(&v264);
      v229._countAndFlagsBits = 0xD000000000000018;
      v229._object = (void *)0x800000010054F6D0;
      debugLogFootprint(_:)(v229);
      swift_release(v221);
      v201 = v224;
      v202 = v220;
    }
    else
    {
      swift_bridgeObjectRelease(v269);
      v188 = v260;
      (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.jwsEncodingFailed(_:), v259);
      v189 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v190 = v254;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010054F6F0, 0, v188, 0, v189, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2350);
      v191 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v192 = v257;
      v193 = swift_allocError(v257, v191, 0, 0);
      v194 = v255;
      (*(void (**)(uint64_t, char *, uint64_t))(v255 + 16))(v195, v190, v192);
      v196 = (void *)_convertErrorToNSError(_:)(v193);
      v197 = v261;
      ((void (**)(_QWORD, _QWORD, void *))v261)[2](v261, 0, v196);

      swift_errorRelease(v193);
      sub_100007F8C(v174, v176);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v190, v192);
      v198 = *(void (**)(char *, uint64_t))(v245 + 8);
      v199 = v246;
      v198(v251, v246);
      v200._countAndFlagsBits = 0xD000000000000018;
      v200._object = (void *)0x800000010054F6D0;
      debugLogFootprint(_:)(v200);
      swift_release(v233);
      v201 = v256;
      v202 = v199;
    }
    v198(v201, v202);
    _Block_release(v197);
    _Block_release(v197);
    _Block_release(v197);
    v101 = v197;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease(v131);
  v133 = v260;
  (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.invalidSPNonce(_:), v259);
  v134 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v135 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v136 = v257;
  v137 = swift_allocError(v257, v135, 0, 0);
  v138 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010054F7A0, 0, v133, 0, v134, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2332);
  swift_willThrow(v138);
  v139 = *(uint64_t (**)(char *, uint64_t))(v245 + 8);
  v140 = v246;
  v141 = v139(v112, v246);
  v156 = v232;
  v157 = v252;
  v158 = defaultLogger()(v141);
  v159 = Logger.logObject.getter(v158);
  v161 = static os_log_type_t.info.getter(v159, v160);
  if (os_log_type_enabled(v159, v161))
  {
    v162 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v162 = 0;
    _os_log_impl((void *)&_mh_execute_header, v159, v161, " state set to SHAREFAILED", v162, 2u);
    v163 = v162;
    v157 = v252;
    swift_slowDealloc(v163, -1, -1);
  }

  v105(v157, v156);
  v164 = v260;
  (*(void (**)(char *, _QWORD, uint8_t *))(v258 + 104))(v260, enum case for DIPError.Code.internalError(_:), v259);
  swift_errorRetain(v137);
  v165 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v166 = v254;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v137, v164, 0, v165, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054F620, 2369);
  v167 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v168 = swift_allocError(v136, v167, 0, 0);
  v169 = v255;
  (*(void (**)(uint64_t, char *, uint64_t))(v255 + 16))(v170, v166, v136);
  v171 = v261;
  _Block_copy(v261);
  sub_10017F744(v168, (uint64_t *)&v269, (uint64_t)v171);
  _Block_release(v171);
  swift_errorRelease(v137);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v166, v136);
  swift_bridgeObjectRelease(v269);
  swift_errorRelease(v168);
  v248[(_QWORD)v114] = 8;
  v172._countAndFlagsBits = 0xD000000000000018;
  v172._object = (void *)0x800000010054F6D0;
  debugLogFootprint(_:)(v172);
  swift_release(v233);
  v139(v256, v140);
  _Block_release(v171);
  _Block_release(v171);
  _Block_release(v171);
  v101 = v171;
LABEL_18:
  _Block_release(v101);
}

void sub_100181430(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  BOOL v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  os_log_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  os_log_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char v174[24];
  char v175[24];
  char v176[24];
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;

  v166 = a4;
  v171 = a3;
  v165 = a2;
  v161 = a1;
  v155 = type metadata accessor for DIPError.Code(0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v156 = (char *)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for DIPError(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for DispatchTime(0);
  v164 = *(_QWORD *)(v167 - 8);
  v6 = __chkstk_darwin(v167);
  v162 = (uint64_t)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v163 = (uint64_t)&v151 - v8;
  v169 = type metadata accessor for Logger(0);
  v168 = *(_QWORD *)(v169 - 8);
  v9 = __chkstk_darwin(v169);
  v11 = (char *)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v172 = (char *)&v151 - v13;
  v14 = __chkstk_darwin(v12);
  v160 = (os_log_t)((char *)&v151 - v15);
  v16 = __chkstk_darwin(v14);
  v153 = (char *)&v151 - v17;
  __chkstk_darwin(v16);
  v152 = (char *)&v151 - v18;
  v19 = type metadata accessor for DeviceInformationProvider(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_allocObject(&unk_100608ED0, 24, 7);
  *(_QWORD *)(v23 + 16) = 0;
  v170 = v23 + 16;
  v184 = 0;
  v185 = 0;
  v182 = 0;
  v183 = 0;
  v181 = 0;
  v24 = dispatch_group_create();
  dispatch_group_enter(v24);
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v25 = (void *)qword_1006707A8;
  v26 = swift_allocObject(&unk_100608EF8, 32, 7);
  *(_QWORD *)(v26 + 16) = v23;
  *(_QWORD *)(v26 + 24) = v24;
  v27 = v25;
  v173 = v23;
  swift_retain(v23);
  v28 = v24;
  sub_10041FE80(v161, (uint64_t)v165, (uint64_t)sub_1001825BC, v26);

  v29 = swift_release(v26);
  v30 = DeviceInformationProvider.init()(v29);
  v31 = DeviceInformationProvider.userAssignedDeviceName.getter(v30);
  v32 = v22;
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v32, v19);
  v184 = v31;
  v185 = v34;
  swift_bridgeObjectRetain(v34);
  dispatch_group_enter(v28);
  v35 = (void *)qword_1006707A8;
  v36 = v28;
  v37 = v35;
  sub_10042574C(0, (uint64_t)v37, &v182, v36);

  v39 = v171;
  if (v171)
  {
    v38 = sub_100257AD4();
    if (v38)
    {
      v40 = (void *)v38;
      v161 = v34;
      v41 = sub_100004828((uint64_t *)&unk_100636410);
      v42 = swift_allocObject(v41, 72, 7);
      v151 = xmmword_10051FFB0;
      *(_OWORD *)(v42 + 16) = xmmword_10051FFB0;
      objc_msgSend(v40, "coordinate");
      *(_QWORD *)(v42 + 56) = &type metadata for Double;
      *(_QWORD *)(v42 + 64) = &protocol witness table for Double;
      *(_QWORD *)(v42 + 32) = v43;
      v44 = String.init(format:_:)(1714564645, 0xE400000000000000, v42);
      v46 = v45;
      v47 = swift_allocObject(v41, 72, 7);
      *(_OWORD *)(v47 + 16) = v151;
      objc_msgSend(v40, "coordinate");
      *(_QWORD *)(v47 + 56) = &type metadata for Double;
      *(_QWORD *)(v47 + 64) = &protocol witness table for Double;
      *(_QWORD *)(v47 + 32) = v48;
      v49 = String.init(format:_:)(1714564645, 0xE400000000000000, v47);
      v51 = v50;
      v178 = 0;
      v52 = __chkstk_darwin(v49);
      *(_QWORD *)&v151 = v52;
      if ((v46 & 0x1000000000000000) != 0 || !(v46 & 0x2000000000000000 | v44 & 0x1000000000000000))
      {
        _StringGuts._slowWithCString<A>(_:)(&v177, sub_1000FBD68);
        v56 = swift_bridgeObjectRelease(v46);
        v53 = v170;
      }
      else
      {
        __chkstk_darwin(v52);
        if ((v46 & 0x2000000000000000) != 0)
        {
          v179 = v44;
          v180 = v46 & 0xFFFFFFFFFFFFFFLL;
          v53 = v170;
          v67 = (v44 > 0x20u || ((0x100003E01uLL >> v44) & 1) == 0)
             && (v66 = (_BYTE *)_swift_stdlib_strtod_clocale(&v179, &v178)) != 0
             && *v66 == 0;
          v34 = v161;
          LOBYTE(v177) = v67;
          v56 = swift_bridgeObjectRelease(v46);
          goto LABEL_22;
        }
        v53 = v170;
        if ((v44 & 0x1000000000000000) != 0)
        {
          v54 = (v46 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v55 = v44 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v54 = _StringObject.sharedUTF8.getter(v44, v46);
        }
        LOBYTE(v177) = sub_100012AD0(v54, v55, (void (*)(uint64_t *__return_ptr))sub_1001070E8) & 1;
        v56 = swift_bridgeObjectRelease(v46);
      }
      v34 = v161;
LABEL_22:
      v64 = v169;
      v68 = v152;
      if ((v177 & 1) != 0)
      {
        v69 = v178;
        v178 = 0;
        v70 = __chkstk_darwin(v56);
        if ((v51 & 0x1000000000000000) != 0 || !(v51 & 0x2000000000000000 | v151 & 0x1000000000000000))
        {
          _StringGuts._slowWithCString<A>(_:)(&v177, sub_100107104);
          v74 = swift_bridgeObjectRelease(v51);
        }
        else
        {
          __chkstk_darwin(v70);
          if ((v51 & 0x2000000000000000) != 0)
          {
            v179 = v71;
            v180 = v51 & 0xFFFFFFFFFFFFFFLL;
            v76 = (v71 > 0x20u || ((0x100003E01uLL >> v71) & 1) == 0)
               && (v75 = (_BYTE *)_swift_stdlib_strtod_clocale(&v179, &v178)) != 0
               && *v75 == 0;
            LOBYTE(v177) = v76;
            v74 = swift_bridgeObjectRelease(v51);
          }
          else
          {
            if ((v71 & 0x1000000000000000) != 0)
            {
              v72 = (v51 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v73 = v71 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v72 = _StringObject.sharedUTF8.getter(v71, v51);
            }
            LOBYTE(v177) = sub_100012AD0(v72, v73, (void (*)(uint64_t *__return_ptr))sub_1000FBD80) & 1;
            v74 = swift_bridgeObjectRelease(v51);
          }
          v34 = v161;
        }
        if ((v177 & 1) != 0)
        {
          v77 = v178;
          swift_bridgeObjectRelease(v181);
          v78 = sub_100004828(&qword_100635068);
          v74 = swift_allocObject(v78, 48, 7);
          *(_OWORD *)(v74 + 16) = xmmword_1005208D0;
          *(_QWORD *)(v74 + 32) = v69;
          *(_QWORD *)(v74 + 40) = v77;
          v181 = v74;
        }
      }
      else
      {
        v74 = swift_bridgeObjectRelease(v51);
      }
      v79 = defaultLogger()(v74);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "got GPS data", v82, 2u);
        swift_slowDealloc(v82, -1, -1);
      }

      v62 = *(void (**)(char *, uint64_t))(v168 + 8);
      v62(v68, v64);
LABEL_42:
      v65 = sub_10025778C();
      goto LABEL_43;
    }
  }
  v57 = defaultLogger()(v38);
  v58 = Logger.logObject.getter(v57);
  v60 = static os_log_type_t.info.getter(v58, v59);
  if (os_log_type_enabled(v58, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v60, "no GPS location available", v61, 2u);
    swift_slowDealloc(v61, -1, -1);
  }

  v62 = *(void (**)(char *, uint64_t))(v168 + 8);
  v63 = v11;
  v64 = v169;
  v65 = ((uint64_t (*)(char *, uint64_t))v62)(v63, v169);
  v53 = v170;
  if (v39)
    goto LABEL_42;
LABEL_43:
  v83 = v162;
  static DispatchTime.now()(v65);
  v84 = v163;
  + infix(_:_:)(v83, 1.0);
  v85 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
  v86 = v167;
  v85(v83, v167);
  v87 = OS_dispatch_group.wait(timeout:)(v84) & 1;
  v85(v84, v86);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v87, 1) & 1) != 0)
  {
    v88 = v156;
    (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v156, enum case for DIPError.Code.timeoutTaskDeviceInfoGroup(_:), v155);
    v89 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v90 = v157;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010054D600, 0, v88, 0, v89, 0xD00000000000004CLL, 0x800000010054D540, 0xD00000000000002ALL, 0x800000010054D640, 3325);
    v91 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v92 = v159;
    v93 = swift_allocError(v159, v91, 0, 0);
    v94 = v158;
    v96 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v158 + 16))(v95, v90, v92);
    v97 = v153;
    defaultLogger()(v96);
    DIPRecordError(_:message:log:)(v93, 0, 0xE000000000000000, v97);
    v62(v97, v64);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v90, v92);
    swift_errorRelease(v93);
  }
  v98 = (id)qword_1006707A8;
  v99 = sub_10041FFC0();
  v101 = v100;
  sub_1001070C4(v99, v100);
  if (v101 == 1)
    sub_1004218D4();
  v102 = sub_10041FFC0();
  v104 = v103;
  v106 = v105;

  v108 = v102;
  v109 = v104;
  v110 = v173;
  v165 = v36;
  if (v104)
  {
    if (v104 == 1)
    {
      v108 = 0;
      v109 = 0;
    }
    else
    {
      v111 = v104;
      v112 = defaultLogger()(v107);
      v113 = Logger.logObject.getter(v112);
      v114 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v113, v114))
      {
        v115 = v106;
        v116 = v102;
        v117 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v117 = 0;
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "got SEID", v117, 2u);
        v118 = v117;
        v102 = v116;
        v106 = v115;
        swift_slowDealloc(v118, -1, -1);
      }

      v107 = ((uint64_t (*)(os_log_t, uint64_t))v62)(v160, v64);
      v108 = v102;
      v104 = v111;
      v109 = v111;
      v53 = v170;
    }
  }
  v167 = v109;
  v164 = v108;
  v171 = v106;
  defaultLogger()(v107);
  v119 = v181;
  swift_bridgeObjectRetain_n(v181, 2);
  swift_retain(v110);
  swift_bridgeObjectRetain(v34);
  v120 = sub_1001825C4(v102, v104);
  v121 = Logger.logObject.getter(v120);
  v122 = static os_log_type_t.debug.getter(v121);
  v123 = v122;
  if (os_log_type_enabled(v121, v122))
  {
    v124 = swift_slowAlloc(52, -1);
    v163 = v104;
    v125 = v124;
    v126 = (_QWORD *)swift_slowAlloc(40, -1);
    *(_DWORD *)v125 = 138413314;
    swift_beginAccess(v53, v175, 0, 0);
    v127 = *(_QWORD *)(v110 + 16) == 0;
    v162 = v102;
    v128 = !v127;
    v129 = v34;
    LODWORD(v161) = v123;
    v130 = objc_allocWithZone((Class)NSNumber);
    v160 = v121;
    v131 = objc_msgSend(v130, "initWithBool:", v128);
    v179 = (uint64_t)v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v125 + 4);
    *v126 = v131;
    swift_release(v110);
    *(_WORD *)(v125 + 12) = 2112;
    v132 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 1);
    v179 = (uint64_t)v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v125 + 14);
    v126[1] = v132;
    swift_bridgeObjectRelease_n(v129, 2);
    *(_WORD *)(v125 + 22) = 2112;
    swift_beginAccess(&v182, v174, 0, 0);
    v133 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v183 != 0);
    v179 = (uint64_t)v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v125 + 24);
    v126[2] = v133;
    *(_WORD *)(v125 + 32) = 2112;
    v134 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v119 != 0);
    v179 = (uint64_t)v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v125 + 34);
    v126[3] = v134;
    swift_bridgeObjectRelease_n(v119, 2);
    *(_WORD *)(v125 + 42) = 2112;
    v135 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v167 != 0);
    v179 = (uint64_t)v135;
    v53 = v170;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v125 + 44);
    v126[4] = v135;
    v136 = v162;
    v137 = v163;
    sub_1001070C4(v162, v163);
    v138 = v160;
    _os_log_impl((void *)&_mh_execute_header, v160, (os_log_type_t)v161, "DeviceInfo: IDS = %@, name = %@, phone = %@, gps = %@, seid = %@", (uint8_t *)v125, 0x34u);
    v139 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v126, 5, v139);
    v140 = v126;
    v141 = v169;
    swift_slowDealloc(v140, -1, -1);
    swift_slowDealloc(v125, -1, -1);

    (*(void (**)(char *, uint64_t))(v168 + 8))(v172, v141);
  }
  else
  {
    swift_bridgeObjectRelease_n(v119, 2);
    swift_bridgeObjectRelease_n(v34, 2);
    swift_release(v110);
    sub_1001070C4(v102, v104);

    v136 = v102;
    v137 = v104;
    v62(v172, v64);
  }
  swift_beginAccess(&v184, &v179, 0, 0);
  v142 = v184;
  v143 = v185;
  swift_beginAccess(&v182, &v178, 0, 0);
  v144 = v182;
  v145 = v183;
  swift_beginAccess(v53, &v177, 0, 0);
  v146 = *(_QWORD *)(v173 + 16);
  swift_beginAccess(&v181, v176, 0, 0);
  v147 = v181;
  v148 = (uint64_t *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  v172 = *(char **)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData);
  v170 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 8);
  v149 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 24);
  v169 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 16);
  v168 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 32);
  v163 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 40);
  v162 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 48);
  v161 = *(_QWORD *)(v166 + OBJC_IVAR____TtC8coreidvd15IDVSessionProxy__collectedAccountAssessmentDeviceData + 56);
  *v148 = v142;
  v148[1] = v143;
  v148[2] = v144;
  v148[3] = v145;
  v150 = v164;
  v148[4] = v147;
  v148[5] = v150;
  v148[6] = v167;
  v148[7] = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v145);
  sub_1001825C4(v136, v137);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v143);
  sub_1001825D8((uint64_t)v172, v170, v169, v149, v168, v163, v162, v161);
  OS_dispatch_semaphore.signal()();
  swift_bridgeObjectRelease(v143);
  swift_bridgeObjectRelease(v145);
  swift_bridgeObjectRelease(v146);
  swift_bridgeObjectRelease(v147);
  sub_1001070C4(v136, v137);
  swift_release(v173);
  swift_bridgeObjectRelease(v145);

}

uint64_t sub_100182590()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001825BC(uint64_t a1)
{
  uint64_t v1;

  sub_10016B194(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1001825C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1001825D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 != 1)
  {
    sub_100182608(result, a2, a3, a4, a5, a6, a7);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_100182608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_100182660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_10063643C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return sub_10016AC7C(a1, v4, v6, v5);
}

_QWORD *sub_1001826CC(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_100182704()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100182738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_10063644C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return sub_10016AA90(a1, v4, v6, v5);
}

uint64_t sub_1001827A4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001827D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)swift_task_alloc(dword_10063645C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001D0A0;
  v4[2] = a1;
  v5 = (_QWORD *)swift_task_alloc(dword_10063A9C4);
  v4[3] = v5;
  *v5 = v4;
  v5[1] = sub_10016AC0C;
  return sub_10028254C(v1 + 16, 0);
}

unint64_t sub_100182850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100636488;
  if (!qword_100636488)
  {
    v1 = sub_100013E24(&qword_100636480);
    sub_100099FFC(&qword_100636490, &qword_100636498, (uint64_t)&unk_100534654);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100636488);
  }
  return result;
}

unint64_t sub_1001828D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006364A0;
  if (!qword_1006364A0)
  {
    v1 = sub_100013E24(&qword_100636480);
    sub_100099FFC(&qword_1006364A8, &qword_100636498, (uint64_t)&unk_10053462C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1006364A0);
  }
  return result;
}

unint64_t sub_100182958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006364C8;
  if (!qword_1006364C8)
  {
    v1 = sub_10001CFF8(255, &qword_1006364C0, NSString_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1006364C8);
  }
  return result;
}

uint64_t sub_1001829B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (uint64_t)(v1 + 2);
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc(dword_100636514);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  return sub_10014838C(a1, v4, v5, v6, v7);
}

uint64_t sub_100182A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

_QWORD *sub_100182A60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[14];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

unint64_t sub_100182B04()
{
  unint64_t result;

  result = qword_100636558;
  if (!qword_100636558)
  {
    result = swift_getWitnessTable(&unk_10052B72C, &type metadata for DataSharingAuthorization);
    atomic_store(result, (unint64_t *)&qword_100636558);
  }
  return result;
}

unint64_t sub_100182B48()
{
  unint64_t result;

  result = qword_100636560;
  if (!qword_100636560)
  {
    result = swift_getWitnessTable(&unk_10052B704, &type metadata for DataSharingAuthorization);
    atomic_store(result, (unint64_t *)&qword_100636560);
  }
  return result;
}

unint64_t sub_100182B8C()
{
  unint64_t result;

  result = qword_100636588;
  if (!qword_100636588)
  {
    result = swift_getWitnessTable(&unk_10052B68C, &type metadata for SharingIdVData);
    atomic_store(result, (unint64_t *)&qword_100636588);
  }
  return result;
}

unint64_t sub_100182BD0()
{
  unint64_t result;

  result = qword_100636590;
  if (!qword_100636590)
  {
    result = swift_getWitnessTable(&unk_10052B664, &type metadata for SharingIdVData);
    atomic_store(result, (unint64_t *)&qword_100636590);
  }
  return result;
}

_QWORD *sub_100182C14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

double sub_100182CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (a8 != 1)
  {
    sub_100182CE4(a1, a2, a3, a4, a5, a6, a7);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a8).n128_u64[0];
  }
  return result;
}

uint64_t sub_100182CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_100182D38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100160C38(*(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(char **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1, *(_QWORD **)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_100182D6C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for RecipientEncryptionCertificate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v0[v6]);
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100182E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for RecipientEncryptionCertificate(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + 16;
  v7 = v1 + v5;
  v8 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)swift_task_alloc(dword_1006365EC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  v9[16] = v7;
  v9[17] = v8;
  v9[14] = a1;
  v9[15] = v6;
  return swift_task_switch(sub_100160AF0, 0, 0);
}

uint64_t sub_100182EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for RecipientEncryptionCertificate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100182F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for RecipientEncryptionCertificate(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)swift_task_alloc(dword_1006365FC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  v9[10] = v7;
  v9[11] = v8;
  v9[8] = a1;
  v9[9] = v6;
  return swift_task_switch(sub_10016098C, 0, 0);
}

unint64_t sub_100182FE4()
{
  unint64_t result;

  result = qword_100636608;
  if (!qword_100636608)
  {
    result = swift_getWitnessTable(&unk_100527C04, &type metadata for AccountAssessmentDeviceData);
    atomic_store(result, (unint64_t *)&qword_100636608);
  }
  return result;
}

unint64_t sub_100183028()
{
  unint64_t result;

  result = qword_100636610;
  if (!qword_100636610)
  {
    result = swift_getWitnessTable(&unk_100527BDC, &type metadata for AccountAssessmentDeviceData);
    atomic_store(result, (unint64_t *)&qword_100636610);
  }
  return result;
}

uint64_t sub_10018306C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001612B8(*(char **)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1, *(void **)(v1 + 72));
}

uint64_t sub_10018309C()
{
  return sub_1001841F0(&qword_100636628);
}

uint64_t sub_1001830A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_100004828(&qword_100636628) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)swift_task_alloc(dword_100636644);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_100161DF4, 0, 0);
}

uint64_t sub_100183148()
{
  return sub_10018430C(&qword_100636628);
}

uint64_t sub_100183154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(sub_100004828(&qword_100636628) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_100636654);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  v9 = (_QWORD *)swift_task_alloc(dword_100639B0C);
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_10001D0A0;
  return sub_100246490(a1, v6, v7);
}

uint64_t sub_100183214()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100183238()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018325C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100183290()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1001832DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1006366A4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D0A0;
  return sub_10015CCB0(a1, a2, v6, v2 + 24);
}

uint64_t sub_10018334C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100183370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1006366B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1006366B0 + dword_1006366B0))(a1, v4);
}

uint64_t sub_1001833E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t sub_10018343C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_release(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

uint64_t sub_100183498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(sub_100004828(&qword_100636688) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 320) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 312));
  v5 = v0 + v3;
  v6 = (int *)type metadata accessor for DIPPregeneratedAssessment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
    v7 = v5 + v6[5];
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[9] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[12] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[14]));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[15] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[16] + 8));
  }
  v9 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v9));
  swift_release(*(_QWORD *)(v0 + v10));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v2 | 7);
}

uint64_t sub_1001836D4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_100004828(&qword_100636688) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 320) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10015D2F4(v0[2], v0[3], v0[4], v0[5], (uint64_t)(v0 + 6), (uint64_t)(v0 + 23), (uint64_t)v0 + v2, *(uint64_t *)((char *)v0 + v3), *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)((char *)v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

_QWORD *sub_100183760(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[14];
  v8 = a1[16];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *sub_1001837F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[14];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100183888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a5 != 1)
  {
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_1001838BC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100183918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a5 != 1)
  {
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

const char *sub_10018394C()
{
  uint64_t v0;

  return sub_10049DAAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

const char *sub_100183968()
{
  uint64_t v0;

  return sub_10049CA44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_100183988()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001839BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10063A894);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100007EE8;
  return sub_10026F398(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100183A3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100183A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100157630(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void *sub_100183A68()
{
  uint64_t v0;

  return sub_1004910F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_100183A84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100154F28(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(char **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1, *(uint64_t **)(v1 + 72), *(void **)(v1 + 80), *(uint64_t **)(v1 + 88));
}

uint64_t sub_100183AC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100183AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1006366F4);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001D0A0;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1001560F4, 0, 0);
}

const char *sub_100183B6C()
{
  uint64_t v0;

  return sub_100493058(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

const char *sub_100183B88()
{
  uint64_t v0;

  return sub_100496E90(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100183BA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100154878(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD **)(v3 + 24), *(_QWORD **)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD **)(v3 + 56), *(unint64_t **)(v3 + 64));
}

uint64_t sub_100183BD4()
{
  return sub_1001841F0((uint64_t *)&unk_1006364E0);
}

uint64_t sub_100183BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_100004828((uint64_t *)&unk_1006364E0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)swift_task_alloc(dword_100636704);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_1001523E8, 0, 0);
}

char *sub_100183C80(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1001524E8(a1, a2, a3, *(_QWORD **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD **)(v3 + 32));
}

uint64_t sub_100183C9C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100152FD4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD **)(v3 + 48), *(_QWORD **)(v3 + 56), *(unint64_t **)(v3 + 64), *(_QWORD **)(v3 + 72));
}

uint64_t sub_100183CD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (uint64_t)(v1 + 2);
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc(dword_100636714);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  return sub_100152218(a1, v4, v5, v6, v7);
}

unint64_t sub_100183D54()
{
  unint64_t result;

  result = qword_100636728;
  if (!qword_100636728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_100636728);
  }
  return result;
}

uint64_t sub_100183D98()
{
  return sub_1001841F0(&qword_100634158);
}

uint64_t sub_100183DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_100004828(&qword_100634158) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)swift_task_alloc(dword_100636734);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_100153DB0, 0, 0);
}

uint64_t sub_100183E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a11);
  }
  return result;
}

_QWORD *sub_100183EA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[8];
  v5 = a1[10];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_QWORD *sub_100183F08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100183F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for RecipientEncryptionCertificate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100184018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for RecipientEncryptionCertificate(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = v1 + v6;
  v11 = *(_QWORD *)(v1 + ((v6 + 47) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_10063674C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10001D0A0;
  v12[13] = v10;
  v12[14] = v11;
  v12[11] = v8;
  v12[12] = v9;
  v12[9] = a1;
  v12[10] = v7;
  return swift_task_switch(sub_100154DAC, 0, 0);
}

unint64_t sub_1001840D0()
{
  unint64_t result;

  result = qword_100636758;
  if (!qword_100636758)
  {
    result = swift_getWitnessTable(&unk_10052B5EC, &type metadata for IdVData);
    atomic_store(result, (unint64_t *)&qword_100636758);
  }
  return result;
}

unint64_t sub_100184114()
{
  unint64_t result;

  result = qword_100636760;
  if (!qword_100636760)
  {
    result = swift_getWitnessTable(&unk_10052B5C4, &type metadata for IdVData);
    atomic_store(result, (unint64_t *)&qword_100636760);
  }
  return result;
}

uint64_t sub_100184158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a9);
  }
  return result;
}

uint64_t sub_1001841B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100155588(*(char **)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1, *(uint64_t **)(v1 + 72));
}

uint64_t sub_1001841E4()
{
  return sub_1001841F0(&qword_100636770);
}

uint64_t sub_1001841F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_100004828(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + v7));
  return swift_deallocObject(v1, v7 + 40, v6);
}

uint64_t sub_100184260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_100004828(&qword_100636770) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)swift_task_alloc(dword_10063678C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_100155E08, 0, 0);
}

uint64_t sub_100184300()
{
  return sub_10018430C(&qword_100636770);
}

uint64_t sub_10018430C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_100004828(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(_QWORD *)(v1 + v7));
  return swift_deallocObject(v1, v7 + 8, v6);
}

uint64_t sub_100184398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(sub_100004828(&qword_100636770) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_10063679C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  return sub_100155F44(a1, v6, v7, v8);
}

uint64_t sub_100184434()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100184480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_1006367B4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001D0A0;
  return sub_10014D5EC(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100184524()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100184568(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = v1[3];
  v5 = v1[4];
  v6 = (uint64_t)(v1 + 5);
  v8 = v1[10];
  v7 = v1[11];
  v9 = (_QWORD *)swift_task_alloc(dword_1006367D4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  v9[10] = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_100635E1C);
  v9[11] = v10;
  *v10 = v9;
  v10[1] = sub_10014B154;
  return sub_100135A58((uint64_t)(v9 + 2), v4, v5, v6, v8, v7);
}

uint64_t sub_100184620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_100184660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_1001846A0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100013E24(&qword_1006367E8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100184700(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000F3404(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_100184718(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000F2E2C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100184734()
{
  uint64_t v0;

  return sub_100147898(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100184740(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (uint64_t)(v1 + 2);
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc(dword_100636824);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  return sub_1001480F0(a1, v4, v5, v6, v7);
}

uint64_t sub_1001847C0()
{
  _QWORD *v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001847F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (uint64_t)(v1 + 2);
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc(dword_100636834);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001D0A0;
  return sub_10014838C(a1, v4, v5, v6, v7);
}

uint64_t sub_100184874()
{
  uint64_t v0;

  return sub_100146068(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100184880()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001848AC()
{
  uint64_t v0;

  return sub_100146574(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001848B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001848D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063684C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1001472C8, 0, 0);
}

uint64_t sub_10018493C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10063685C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10018499C;
  v3[5] = v2;
  return swift_task_switch(sub_1001473DC, 0, 0);
}

uint64_t sub_10018499C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1001849FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

const char *sub_100184A4C()
{
  uint64_t v0;

  return sub_1004A4340(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unint64_t **)(v0 + 40));
}

const char *sub_100184A68()
{
  uint64_t v0;

  return sub_100490A34(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_100184A80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100143E20(a1, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(char **)(v2 + 32), *(_QWORD *)(v2 + 40), *(char **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

_QWORD *sub_100184AB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v10 = a1[14];
  v12 = a1[13];
  v13 = a1[17];
  v14 = a1[18];
  v15 = a1[20];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10008EF5C(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100184B84()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));

  return swift_deallocObject(v0, 200, 7);
}

uint64_t sub_100184C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 192);
  v7 = (_QWORD *)swift_task_alloc(dword_10063686C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return sub_100145A08(a1, v4, v5, v6);
}

_QWORD *sub_100184C7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[14];
  v14 = a1[17];
  v15 = a1[18];
  v10 = a1[20];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100184D50(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100184D88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc(dword_10063687C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  v8 = (_QWORD *)swift_task_alloc(dword_100636394);
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_100007EE8;
  return sub_10015A32C(a1, v4, v6, v5);
}

uint64_t sub_100184E1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004828(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100184E64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100184E98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc(dword_10063689C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  v8 = (_QWORD *)swift_task_alloc(dword_100636394);
  v7[2] = v8;
  *v8 = v7;
  v8[1] = sub_10001D0A0;
  return sub_10015A32C(a1, v4, v6, v5);
}

uint64_t sub_100184F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_100004828(&qword_100636580);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100184FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_100004828(&qword_100636580) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1006368AC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D0A0;
  v11 = (_QWORD *)swift_task_alloc(dword_1006363AC);
  v10[2] = v11;
  *v11 = v10;
  v11[1] = sub_10001D0A0;
  return sub_1001688B8(a1, v7, v8, v9);
}

uint64_t sub_1001850A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001AA410(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

const char *sub_1001850AC()
{
  uint64_t v0;

  return sub_10049BD50(v0);
}

const char *sub_1001850C4()
{
  uint64_t v0;

  return sub_1004A6300(*(_QWORD *)(v0 + 16));
}

void sub_1001850DC()
{
  uint64_t v0;

  sub_10049E818(v0);
}

const char *sub_100185124()
{
  return sub_100184A68();
}

uint64_t sub_100185138(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100185174 + 4 * byte_100525270[a1]))(0x696C616974696E69, 0xEB0000000064657ALL);
}

uint64_t sub_100185174()
{
  return 0x7465536E69676562;
}

unint64_t sub_100185190()
{
  return 0xD000000000000011;
}

uint64_t sub_100185220()
{
  return 0x6F5A6574656C6564;
}

uint64_t sub_100185240()
{
  return 0x6465686361747461;
}

uint64_t sub_10018525C()
{
  return 0x6465686361746564;
}

uint64_t sub_100185274(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100185138(*a1);
  v5 = v4;
  v6 = sub_100185138(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1001852FC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100185138(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10018535C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100185138(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10018539C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100185138(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001853F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100196150(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100185424@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100185138(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *sub_10018544C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSString v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void (*v38)(char *, uint64_t);
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  id v52;
  NSString v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSString v75;
  id v76;
  id v77;
  NSString v78;
  id v79;
  _QWORD *v80;
  unint64_t v81;
  void *v82;
  unint64_t v83;
  _QWORD *v84;
  Swift::String v85;
  _QWORD *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;

  v101 = a4;
  v102 = a6;
  v99 = a5;
  v100 = a3;
  v109 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v108 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v105);
  v106 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v104 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v110 - 8);
  v14 = __chkstk_darwin(v110);
  v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v97 - v18;
  v20 = __chkstk_darwin(v17);
  v98 = (char *)&v97 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v97 - v22;
  v6[6] = dispatch_group_create();
  v24 = (char *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier;
  v25 = type metadata accessor for DIPRetrier(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState;
  *(_QWORD *)((char *)v6 + v26) = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
  v27 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName;
  *(_QWORD *)((char *)v6 + v27) = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs) = &_swiftEmptySetSingleton;
  v28 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID;
  *(_QWORD *)((char *)v6 + v28) = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
  v6[3] = a1;
  v6[4] = a2;
  v103 = v6;
  *((_BYTE *)v6 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state) = 0;
  v29 = (void *)objc_opt_self(NSUserDefaults);
  v30 = objc_msgSend(v29, "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "BOOLForKey:", v31);

  if (v32)
  {
    v34 = defaultLogger()(v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Using CloudKit sandbox container environment due to user defaults setting", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = *(void (**)(char *, uint64_t))(v13 + 8);
    v38(v23, v110);
    v39 = objc_msgSend(v29, "standardUserDefaults");
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v39, "stringForKey:", v40);

    if (!v41)
      goto LABEL_7;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    v113 = (_QWORD *)v42;
    v114 = v44;
    v111 = 16721;
    v112 = 0xE200000000000000;
    v45 = sub_1000994DC();
    v46 = StringProtocol.contains<A>(_:)(&v111, &type metadata for String, &type metadata for String, v45, v45);
    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRelease(v44);
LABEL_7:
      v47 = 2;
      goto LABEL_21;
    }
    v66 = v98;
    defaultLogger()(v46);
    v67 = swift_bridgeObjectRetain(v44);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = (_QWORD *)swift_slowAlloc(32, -1);
      v113 = v71;
      *(_DWORD *)v70 = 136315138;
      swift_bridgeObjectRetain(v44);
      v111 = sub_1000E3AC8(v42, v44, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v70 + 4);
      swift_bridgeObjectRelease_n(v44, 3);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "CloudKit sandbox container in use but server environment name %s doesn't look compatible. Do you need to fix your CloudKit container environment setting?", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v38(v98, v110);
      v47 = 2;
      goto LABEL_21;
    }

    v47 = 2;
    swift_bridgeObjectRelease_n(v44, 2);
    v65 = v66;
    goto LABEL_20;
  }
  v48 = defaultLogger()(v33);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.debug.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Using CloudKit production container environment", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v19, v110);
  v52 = objc_msgSend(v29, "standardUserDefaults");
  v53 = String._bridgeToObjectiveC()();
  v54 = objc_msgSend(v52, "stringForKey:", v53);

  if (!v54)
  {
LABEL_18:
    v47 = 1;
    goto LABEL_21;
  }
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v57 = v56;

  v113 = (_QWORD *)v55;
  v114 = v57;
  v111 = 16721;
  v112 = 0xE200000000000000;
  v58 = sub_1000994DC();
  v59 = StringProtocol.contains<A>(_:)(&v111, &type metadata for String, &type metadata for String, v58, v58);
  if ((v59 & 1) == 0)
  {
    swift_bridgeObjectRelease(v57);
    goto LABEL_18;
  }
  defaultLogger()(v59);
  v60 = swift_bridgeObjectRetain(v57);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.debug.getter(v61);
  if (!os_log_type_enabled(v61, v62))
  {

    swift_bridgeObjectRelease_n(v57, 2);
    v38(v16, v110);
    goto LABEL_18;
  }
  v63 = (uint8_t *)swift_slowAlloc(12, -1);
  v64 = (_QWORD *)swift_slowAlloc(32, -1);
  v113 = v64;
  *(_DWORD *)v63 = 136315138;
  v98 = (char *)(v63 + 4);
  swift_bridgeObjectRetain(v57);
  v111 = sub_1000E3AC8(v55, v57, (uint64_t *)&v113);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v98);
  swift_bridgeObjectRelease_n(v57, 3);
  _os_log_impl((void *)&_mh_execute_header, v61, v62, "CloudKit production container in use but server environment name %s doesn't look compatible. Do you need to fix your CloudKit container environment setting?", v63, 0xCu);
  v47 = 1;
  swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v64, -1, -1);
  swift_slowDealloc(v63, -1, -1);

  v65 = v16;
LABEL_20:
  v38(v65, v110);
LABEL_21:
  v73 = v101;
  v72 = v102;
  v74 = objc_allocWithZone((Class)CKContainerID);
  v75 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v73);
  v76 = objc_msgSend(v74, "initWithContainerIdentifier:environment:", v75, v47);

  v77 = objc_msgSend(objc_allocWithZone((Class)CKContainerOptions), "init");
  if (v72)
  {
    v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v72);
  }
  else
  {
    v78 = 0;
  }
  objc_msgSend(v77, "setApplicationBundleIdentifierOverrideForNetworkAttribution:", v78);

  v79 = objc_msgSend(objc_allocWithZone((Class)CKContainer), "initWithContainerID:options:", v76, v77);
  v80 = v103;
  v103[2] = v79;
  v110 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v113 = 0;
  v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v81 = v114;
  v82 = v76;
  v84 = (_QWORD *)v80[3];
  v83 = v80[4];
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v81);
  v113 = v84;
  v114 = v83;
  v85._countAndFlagsBits = 0xD00000000000001BLL;
  v85._object = (void *)0x8000000100550590;
  String.append(_:)(v85);
  v86 = v113;
  v87 = v114;
  v88 = v104;
  static DispatchQoS.unspecified.getter(v89);
  v113 = _swiftEmptyArrayStorage;
  v90 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v91 = sub_100004828((uint64_t *)&unk_100636400);
  v92 = sub_100025D68((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400);
  v93 = v106;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v91, v92, v105, v90);
  v94 = v108;
  (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v108, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v109);
  v95 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v86, v87, v88, v93, v94, 0);

  v80[5] = v95;
  return v80;
}

void *sub_100185E34()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_100185E40()
{
  return sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100185E4C()
{
  return 0;
}

uint64_t sub_100185E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE v39[24];

  v36 = a3;
  v37 = a5;
  v34 = a2;
  v35 = a4;
  v7 = type metadata accessor for DIPRetrier(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPBackoffStrategy(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100004828(&qword_100636C80);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v34 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v34 - v21;
  *v13 = 0x3FC999999999999ALL;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPBackoffStrategy.exponential(_:), v10);
  v23 = a1;
  v24 = v5;
  DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)(v23, v13, 0, 1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
  sub_1000A1F54((uint64_t)v22, (uint64_t)v20, &qword_100636C80);
  v25 = v5 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier, v39, 33, 0);
  sub_100196AC0((uint64_t)v20, v25);
  swift_endAccess(v39);
  sub_100196B08(v25, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
    return sub_100008030((uint64_t)v17, &qword_100636C80);
  v27 = v38;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v38, v17, v7);
  sub_100008030((uint64_t)v17, &qword_100636C80);
  v28 = (_QWORD *)swift_allocObject(&unk_100609F38, 40, 7);
  v29 = v34;
  v28[2] = v24;
  v28[3] = v29;
  v30 = v36;
  v28[4] = v36;
  v31 = (_QWORD *)swift_allocObject(&unk_100609F60, 40, 7);
  v32 = v35;
  v31[2] = v24;
  v31[3] = v32;
  v33 = v37;
  v31[4] = v37;
  swift_retain_n(v24, 2);
  swift_retain(v30);
  swift_retain(v33);
  DIPRetrier.async(action:completion:)(sub_100196B5C, v28, sub_100196B74, v31);
  swift_release(v28);
  swift_release(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v27, v7);
}

uint64_t sub_100186138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(a4 + 40);
  v18 = (_QWORD *)swift_allocObject(&unk_100609FD8, 56, 7);
  v18[2] = a4;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a5;
  v18[6] = a6;
  aBlock[4] = sub_100196B9C;
  v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609FF0;
  v19 = _Block_copy(aBlock);
  swift_retain(a4);
  swift_retain(a3);
  v20 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100004828((uint64_t *)&unk_1006308D0);
  v23 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release(v29);
}

uint64_t sub_100186348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject(&unk_10060A028, 56, 7);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  swift_retain(a1);
  swift_retain(a3);
  swift_retain(a5);
  sub_100187BB4();
  return swift_release(v10);
}

uint64_t sub_1001863D8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void (*a5)(uint64_t (*)(uint64_t a1), _QWORD *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t *);
  void (*v24)(uint64_t *);
  uint64_t v25;

  v24 = a3;
  v25 = a2;
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DIPError.Code.internalError(_:), v8);
    swift_errorRetain(a1);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100550C80, a1, v11, 0, v16, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002DLL, 0x8000000100550C50, 200);
    v17 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v18 = swift_allocError(v12, v17, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v19, v15, v12);
    swift_retain(a4);
    sub_100196C1C(v18, v25, v24, a4);
    swift_release(a4);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return swift_errorRelease(v18);
  }
  else
  {
    v21 = (_QWORD *)swift_allocObject(&unk_10060A050, 40, 7);
    v23 = v24;
    v22 = v25;
    v21[2] = v25;
    v21[3] = v23;
    v21[4] = a4;
    swift_retain(v22);
    swift_retain(a4);
    a5(sub_100196C10, v21);
    return swift_release(v21);
  }
}

uint64_t sub_10018662C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *);
  uint64_t v26;

  v25 = a3;
  v26 = a4;
  v24 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPRetryResult(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.internalError(_:), v5);
    swift_errorRetain(a1);
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100550F00, a1, v8, 0, v17, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002DLL, 0x8000000100550C50, 210);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v19 = swift_allocError(v9, v18, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v20, v12, v9);
    v21 = v26;
    swift_retain(v26);
    sub_1001987DC(v19, v24, v25, v21);
    swift_release(v21);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return swift_errorRelease(v19);
  }
  else
  {
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DIPRetryResult.stop(_:), v13);
    v25(v16);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_100186888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject(&unk_100609F88, 40, 7);
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_100196B8C;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609FA0;
  v15 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v16 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100004828((uint64_t *)&unk_1006308D0);
  v19 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

uint64_t sub_100186A88(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return a2(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
  swift_errorRetain(a1);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100550C30, a1, v7, 0, v12, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002DLL, 0x8000000100550C50, 225);
  v13 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v14 = swift_allocError(v8, v13, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v15, v11, v8);
  a2(v14);
  swift_errorRelease(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100186C60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *);
  _BYTE v29[24];
  _BYTE v30[24];

  v27 = a4;
  v28 = a3;
  v26 = type metadata accessor for DIPRetryResult(0);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPError(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_projectBox(a2);
  if (a1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain(a1);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x8000000100550ED0, a1, v12, 0, v18, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 290);
    v19 = swift_beginAccess(v17, v29, 1, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v14 + 40))(v17, v16, v13, v19);
  }
  swift_beginAccess(v17, v30, 0, 0);
  v20 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v21 = swift_allocError(v13, v20, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v22, v17, v13);
  *v8 = v21;
  v23 = v26;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPRetryResult.retryWithError(_:), v26);
  v28(v8);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v23);
}

uint64_t sub_100186EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  _QWORD *v23;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v2 + 40);
  v12 = (_QWORD *)swift_allocObject(&unk_100609E48, 40, 7);
  v12[2] = v2;
  v12[3] = a1;
  v12[4] = a2;
  aBlock[4] = sub_100196A44;
  v23 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609E60;
  v13 = _Block_copy(aBlock);
  swift_retain(v2);
  v14 = sub_10002EF2C(a1, a2);
  static DispatchQoS.unspecified.getter(v14);
  v21 = _swiftEmptyArrayStorage;
  v15 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100004828((uint64_t *)&unk_1006308D0);
  v17 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_1001870C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  if (v10 == 7)
    return sub_10018A110(9, a2, a3);
  v12 = (_QWORD *)swift_allocObject(&unk_100609E98, 40, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  if ((v10 - 1) >= 6)
  {
    v23 = (_QWORD *)swift_allocObject(&unk_100609EC0, 40, 7);
    v23[2] = a1;
    v23[3] = a2;
    v23[4] = a3;
    sub_10002EF2C(a2, a3);
    swift_retain(a1);
    sub_10002EF2C(a2, a3);
    swift_retain(a1);
    sub_100188454(7, 10, (uint64_t)sub_100196A64, (uint64_t)v23);
    swift_release(v12);
    return swift_release(v23);
  }
  else
  {
    sub_10002EF2C(a2, a3);
    v13 = swift_retain(a1);
    defaultLogger()(v13);
    v14 = swift_retain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v30 = v28;
      v27 = v17;
      *(_DWORD *)v17 = 136446210;
      v26 = v17 + 4;
      v19 = *(_QWORD *)(a1 + 24);
      v18 = *(_QWORD *)(a1 + 32);
      swift_bridgeObjectRetain(v18);
      v29 = sub_1000E3AC8(v19, v18, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26);
      swift_release(a1);
      swift_bridgeObjectRelease(v18);
      v20 = v16;
      v21 = v27;
      _os_log_impl((void *)&_mh_execute_header, v15, v20, "Container %{public}s is working, waiting for it to finish before deleting", v27, 0xCu);
      v22 = v28;
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_release(a1);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v24 = (_QWORD *)swift_allocObject(&unk_100609EE8, 40, 7);
    v24[2] = a1;
    v24[3] = sub_100196A54;
    v24[4] = v12;
    swift_retain(a1);
    swift_retain(v12);
    sub_10018A110(8, (uint64_t)sub_100196A7C, (uint64_t)v24);
    swift_release(v12);
    return swift_release(v24);
  }
}

uint64_t sub_1001873EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject(&unk_100609F10, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_retain(a1);
  sub_10002EF2C(a2, a3);
  sub_100188454(7, 10, (uint64_t)sub_10019A3C0, (uint64_t)v6);
  return swift_release(v6);
}

uint64_t sub_10018746C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  Swift::String v39;
  void (*v40)(uint64_t);
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  result = __chkstk_darwin(v12);
  v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v54 = v14;
    v55 = result;
    v49[1] = a4;
    v17 = sub_100004828((uint64_t *)&unk_1006325A0);
    v56 = a3;
    v18 = v17;
    v19 = sub_100004828((uint64_t *)&unk_100633440);
    v20 = *(_QWORD *)(v19 - 8);
    v52 = v8;
    v53 = v9;
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v57 = a1;
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject(v18, v23 + 2 * v21, v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_1005208D0;
    v25 = v24 + v23;
    v26 = *(int *)(v19 + 48);
    v51 = v11;
    v27 = v16;
    v28 = (uint64_t *)(v25 + v26);
    v29 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v30 = type metadata accessor for DIPError.PropertyKey(0);
    v31 = *(void (**)(void))(*(_QWORD *)(v30 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v25, v29, v30);
    v33 = *(void **)(a2 + 32);
    v50 = *(_QWORD *)(a2 + 24);
    v32 = v50;
    v28[3] = (uint64_t)&type metadata for String;
    *v28 = v32;
    v28[1] = (uint64_t)v33;
    v34 = v27;
    v35 = v25 + v21 + *(int *)(v19 + 48);
    v31();
    v36 = *(_BYTE *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v35 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v35 = v36;
    v37 = v57;
    swift_bridgeObjectRetain(v33);
    swift_errorRetain(v37);
    v38 = sub_10011D314(v24);
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v59);
    v58 = 0xD000000000000021;
    v59 = 0x8000000100550C00;
    swift_bridgeObjectRetain(v33);
    v39._countAndFlagsBits = v50;
    v40 = v56;
    v39._object = v33;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(v33);
    v41 = v58;
    v42 = v59;
    v43 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v51, enum case for DIPError.Code.internalError(_:), v52);
    swift_errorRetain(v37);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v41, v42, v37, v43, 0, v38, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000015, 0x8000000100550BE0, 333);
    if (v40)
    {
      v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v45 = v55;
      v46 = swift_allocError(v55, v44, 0, 0);
      v47 = v54;
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v48, v34, v45);
      v40(v46);
      swift_errorRelease(v46);
      swift_errorRelease(v37);
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v34, v45);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v55);
      return swift_errorRelease(v37);
    }
  }
  else if (a3)
  {
    return ((uint64_t (*)(_QWORD))a3)(0);
  }
  return result;
}

uint64_t sub_1001877E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(_QWORD);
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v68 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPError(0);
  v16 = __chkstk_darwin(v15);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v63 = v16;
    v65 = v17;
    v61 = v19;
    v20 = sub_100004828((uint64_t *)&unk_1006325A0);
    v67 = a3;
    v21 = v20;
    v22 = sub_100004828((uint64_t *)&unk_100633440);
    v59 = v12;
    v60 = v11;
    v23 = v22;
    v24 = *(_QWORD *)(v22 - 8);
    v25 = *(_QWORD *)(v24 + 72);
    v26 = *(unsigned __int8 *)(v24 + 80);
    v66 = a4;
    v27 = (v26 + 32) & ~v26;
    v28 = swift_allocObject(v21, v27 + 2 * v25, v26 | 7);
    *(_OWORD *)(v28 + 16) = xmmword_1005208D0;
    v64 = v8;
    v29 = v28 + v27;
    v30 = *(int *)(v23 + 48);
    v58 = v14;
    v31 = (uint64_t *)(v28 + v27 + v30);
    v32 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v33 = type metadata accessor for DIPError.PropertyKey(0);
    v62 = v10;
    v34 = *(void (**)(void))(*(_QWORD *)(v33 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v29, v32, v33);
    v36 = *(void **)(a2 + 32);
    v57 = *(_QWORD *)(a2 + 24);
    v35 = v57;
    v31[3] = (uint64_t)&type metadata for String;
    *v31 = v35;
    v31[1] = (uint64_t)v36;
    v37 = v29 + v25 + *(int *)(v23 + 48);
    v34();
    v38 = *(_BYTE *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v37 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v37 = v38;
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(v36);
    v39 = sub_10011D314(v28);
    v69 = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(95);
    v40._countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x8000000100550B70;
    String.append(_:)(v40);
    swift_bridgeObjectRetain(v36);
    v41._countAndFlagsBits = v57;
    v41._object = v36;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v36);
    v42._countAndFlagsBits = 0xD000000000000040;
    v42._object = (void *)0x8000000100550B90;
    String.append(_:)(v42);
    v43 = v69;
    v44 = v70;
    v45 = v58;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, enum case for DIPError.Code.internalError(_:), v60);
    v46 = a1;
    swift_errorRetain(a1);
    v47 = v61;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v43, v44, v46, v45, 0, v39, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000015, 0x8000000100550BE0, 350);
    v48 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v49 = v63;
    v50 = swift_allocError(v63, v48, 0, 0);
    v51 = v65;
    v53 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 16))(v52, v47, v49);
    v54 = v62;
    defaultLogger()(v53);
    DIPRecordError(_:message:log:)(v50, 0, 0xE000000000000000, v54);
    swift_errorRelease(v46);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v54, v68);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v49);
    v55 = v50;
    a3 = v67;
    v16 = swift_errorRelease(v55);
  }
  return a3(v16);
}

void sub_100187BB4()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_100187C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  defaultLogger()(a1);
  v8 = swift_retain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    *(_QWORD *)(v7 - 120) = v3;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v7 - 128) = v5;
    v13 = v12;
    *(_QWORD *)(v7 - 88) = v12;
    *(_QWORD *)(v7 - 112) = v6;
    *(_QWORD *)(v7 - 104) = v2;
    *(_DWORD *)v11 = 136446210;
    v15 = *(_QWORD *)(v1 + 24);
    v14 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v7 - 96) = sub_1000E3AC8(v15, v14, (uint64_t *)(v7 - 88));
    v3 = *(_QWORD *)(v7 - 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 96, v7 - 88, v11 + 4);
    swift_release(v1);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attaching to container %{public}s; setup is already in progress",
      v11,
      0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v16 = v13;
    v5 = *(_QWORD *)(v7 - 128);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 112) + 8))(v4, *(_QWORD *)(v7 - 104));
  }
  else
  {

    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
  }
  return sub_10018A110(8, v5, v3);
}

void sub_100187FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  defaultLogger()(a1);
  v8 = swift_retain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    *(_QWORD *)(v7 - 120) = v4;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v7 - 128) = v5;
    v13 = v12;
    *(_QWORD *)(v7 - 88) = v12;
    *(_QWORD *)(v7 - 112) = v6;
    *(_QWORD *)(v7 - 104) = v3;
    *(_DWORD *)v11 = 136446210;
    v14 = *(_QWORD *)(v1 + 24);
    v15 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v7 - 96) = sub_1000E3AC8(v14, v15, (uint64_t *)(v7 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 96, v7 - 88, v11 + 4);
    swift_release(v1);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attached to container %{public}s; container deletion is in progress",
      v11,
      0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 112) + 8))(v2, *(_QWORD *)(v7 - 104));
  }
  else
  {

    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v3);
  }
  JUMPOUT(0x100187DD0);
}

uint64_t sub_100188138(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v52 = v14;
    v53 = result;
    v46 = a4;
    v17 = sub_100004828((uint64_t *)&unk_1006325A0);
    v18 = sub_100004828((uint64_t *)&unk_100633440);
    v19 = *(_QWORD *)(v18 - 8);
    v51 = v16;
    v49 = v9;
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v17, v22 + 2 * v20, v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_1005208D0;
    v24 = v23 + v22;
    v25 = *(int *)(v18 + 48);
    v48 = v11;
    v26 = (_QWORD *)(v24 + v25);
    v27 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v28 = type metadata accessor for DIPError.PropertyKey(0);
    v50 = a3;
    v29 = *(_QWORD *)(v28 - 8);
    v47 = v8;
    v30 = a1;
    v31 = *(void (**)(void))(v29 + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v24, v27, v28);
    v32 = *(_QWORD *)(a2 + 24);
    v33 = *(_QWORD *)(a2 + 32);
    v26[3] = &type metadata for String;
    *v26 = v32;
    v26[1] = v33;
    v34 = v24 + v20 + *(int *)(v18 + 48);
    v35 = v50;
    v36 = v51;
    v31();
    v37 = v30;
    v38 = *(_BYTE *)(a2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v34 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v34 = v38;
    swift_bridgeObjectRetain(v33);
    swift_errorRetain(v30);
    v39 = sub_10011D314(v23);
    v40 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.internalError(_:), v47);
    swift_errorRetain(v30);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v30, v40, 0, v39, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000013, 0x8000000100550B50, 410);
    if (v35)
    {
      v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v42 = v53;
      v43 = swift_allocError(v53, v41, 0, 0);
      v44 = v52;
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v45, v36, v42);
      v35(v43);
      swift_errorRelease(v43);
      swift_errorRelease(v37);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v36, v42);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v53);
      return swift_errorRelease(v30);
    }
  }
  else if (a3)
  {
    return ((uint64_t (*)(_QWORD))a3)(0);
  }
  return result;
}

void sub_100188454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[11];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v12 = type metadata accessor for Logger(0);
  v5 = __chkstk_darwin(v12);
  v11[10] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for DIPError.Code(0);
  v11[7] = *(_QWORD *)(v7 - 8);
  v11[8] = v7;
  __chkstk_darwin(v7);
  v11[9] = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  v14 = v4;
  __asm { BR              X10 }
}

uint64_t sub_1001885CC()
{
  unsigned __int8 v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1001886E4 + 4 * byte_100525294[v0]))(0x7465536E69676562);
}

uint64_t sub_1001886E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (a1 == 0x7465536E69676562 && v8 == 0xEA00000000007075)
  {
    result = swift_bridgeObjectRelease_n(0xEA00000000007075, 2);
    goto LABEL_5;
  }
  *(_QWORD *)(v12 - 216) = v2;
  *(_QWORD *)(v12 - 208) = v1;
  *(_QWORD *)(v12 - 232) = v4;
  *(_QWORD *)(v12 - 224) = v3;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v8, 0x7465536E69676562, 0xEA00000000007075, 0);
  swift_bridgeObjectRelease(v8);
  result = swift_bridgeObjectRelease(0xEA00000000007075);
  if ((v14 & 1) != 0)
  {
LABEL_5:
    if (v11)
      return v11(0);
    return result;
  }
  if (v9 == 10)
    goto LABEL_12;
  v15 = sub_100185138(*(_BYTE *)(*(_QWORD *)(v12 - 152) + *(_QWORD *)(v12 - 208)));
  v17 = v16;
  v19 = sub_100185138(v9);
  v20 = v18;
  if (v15 == v19 && v17 == v18)
  {
    result = swift_bridgeObjectRelease_n(v17, 2);
    goto LABEL_12;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);
  swift_bridgeObjectRelease(v17);
  result = swift_bridgeObjectRelease(v20);
  if ((v21 & 1) != 0)
  {
LABEL_12:
    defaultLogger()(result);
    v22 = *(_QWORD *)(v12 - 152);
    v23 = swift_retain_n(v22, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(96, -1);
      *(_QWORD *)(v12 - 248) = v27;
      *(_QWORD *)(v12 - 144) = v27;
      *(_DWORD *)v26 = 136446722;
      *(_QWORD *)(v12 - 240) = v11;
      v28 = *(_QWORD *)(v22 + 24);
      v29 = *(_QWORD *)(*(_QWORD *)(v12 - 152) + 32);
      swift_bridgeObjectRetain(v29);
      *(_QWORD *)(v12 - 96) = sub_1000E3AC8(v28, v29, (uint64_t *)(v12 - 144));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 - 96, v12 - 88, v26 + 4);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 12) = 2080;
      v30 = sub_100185138(v5);
      v32 = v31;
      *(_QWORD *)(v12 - 96) = sub_1000E3AC8(v30, v31, (uint64_t *)(v12 - 144));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 - 96, v12 - 88, v26 + 14);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v26 + 22) = 2080;
      v33 = *(_QWORD *)(v12 - 208);
      v34 = sub_100185138(*(_BYTE *)(*(_QWORD *)(v12 - 152) + v33));
      v36 = v35;
      *(_QWORD *)(v12 - 96) = sub_1000E3AC8(v34, v35, (uint64_t *)(v12 - 144));
      v22 = *(_QWORD *)(v12 - 152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 - 96, v12 - 88, v26 + 24);
      swift_release_n(v22, 2);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cloud container %{public}s moving to state %s from state %s", (uint8_t *)v26, 0x20u);
      v37 = *(_QWORD *)(v12 - 248);
      swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v10, *(_QWORD *)(v12 - 168));
    }
    else
    {

      swift_release_n(v22, 2);
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v10, *(_QWORD *)(v12 - 168));
      v33 = *(_QWORD *)(v12 - 208);
    }
    *(_BYTE *)(v22 + v33) = v5;
    __asm { BR              X10 }
  }
  v38 = sub_100004828((uint64_t *)&unk_1006325A0);
  v39 = sub_100004828((uint64_t *)&unk_100633440);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_QWORD *)(v40 + 72);
  v42 = *(unsigned __int8 *)(v40 + 80);
  *(_DWORD *)(v12 - 176) = v9;
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(v38, v43 + 2 * v41, v42 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_1005208D0;
  v45 = v44 + v43;
  v46 = (_QWORD *)(v45 + *(int *)(v39 + 48));
  v47 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
  v48 = type metadata accessor for DIPError.PropertyKey(0);
  *(_QWORD *)(v12 - 240) = v11;
  v49 = *(void (**)(void))(*(_QWORD *)(v48 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v49)(v45, v47, v48);
  v50 = *(_QWORD *)(v12 - 152);
  v51 = *(_QWORD *)(v50 + 24);
  v52 = *(void **)(v50 + 32);
  *(_QWORD *)(v12 - 168) = v51;
  v46[3] = &type metadata for String;
  *v46 = v51;
  v46[1] = v52;
  v53 = v45 + v41 + *(int *)(v39 + 48);
  v49();
  *(_QWORD *)(v53 + 24) = &type metadata for DIPCloudContainerState;
  LODWORD(v46) = *(_DWORD *)(v12 - 176);
  *(_BYTE *)v53 = (_BYTE)v46;
  swift_bridgeObjectRetain(v52);
  v54 = sub_10011D314(v44);
  *(_QWORD *)(v12 - 144) = 0;
  *(_QWORD *)(v12 - 136) = 0xE000000000000000;
  _StringGuts.grow(_:)(75);
  v55 = *(_QWORD *)(v12 - 136);
  *(_QWORD *)(v12 - 144) = *(_QWORD *)(v12 - 144);
  *(_QWORD *)(v12 - 136) = v55;
  v56._countAndFlagsBits = 0xD00000000000001CLL;
  v56._object = (void *)0x8000000100550A00;
  String.append(_:)(v56);
  *(_BYTE *)(v12 - 96) = v5;
  _print_unlocked<A, B>(_:_:)(v12 - 96, v12 - 144, &type metadata for DIPCloudContainerState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v57._countAndFlagsBits = 0x746E6F63206E6920;
  v57._object = (void *)0xEE002072656E6961;
  String.append(_:)(v57);
  swift_bridgeObjectRetain(v52);
  v58._countAndFlagsBits = *(_QWORD *)(v12 - 168);
  v58._object = v52;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v52);
  v59._countAndFlagsBits = 0x676E696D6F63203BLL;
  v59._object = (void *)0xEE00206D6F726620;
  String.append(_:)(v59);
  *(_BYTE *)(v12 - 96) = *(_BYTE *)(*(_QWORD *)(v12 - 152) + *(_QWORD *)(v12 - 208));
  _print_unlocked<A, B>(_:_:)(v12 - 96, v12 - 144, &type metadata for DIPCloudContainerState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v60._countAndFlagsBits = 0x746365707865202CLL;
  v60._object = (void *)0xEB00000000206465;
  String.append(_:)(v60);
  *(_BYTE *)(v12 - 96) = (_BYTE)v46;
  v61 = *(void (**)(uint64_t))(v12 - 240);
  _print_unlocked<A, B>(_:_:)(v12 - 96, v12 - 144, &type metadata for DIPCloudContainerState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v62 = *(_QWORD *)(v12 - 144);
  v63 = *(_QWORD *)(v12 - 136);
  v64 = *(_QWORD *)(v12 - 184);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v12 - 200) + 104))(v64, enum case for DIPError.Code.cloudContainerInvalidStateTransition(_:), *(_QWORD *)(v12 - 192));
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v62, v63, 0, v64, 0, v54, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x80000001005509E0, 447);
  v66 = *(_QWORD *)(v12 - 224);
  v65 = *(_QWORD *)(v12 - 216);
  if (v61)
  {
    v67 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v68 = swift_allocError(v65, v67, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v69, v6, v65);
    v61(v68);
    swift_errorRelease(v68);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v6, v65);
}

void sub_1001893B0(uint64_t a1)
{
  void (*v1)(uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  defaultLogger()(a1);
  v6 = swift_retain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v5 - 144) = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = *(_QWORD *)(*(_QWORD *)(v5 - 152) + 24);
    *(_QWORD *)(v5 - 240) = v4;
    v12 = *(_QWORD *)(*(_QWORD *)(v5 - 152) + 32);
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v5 - 96) = sub_1000E3AC8(v11, v12, (uint64_t *)(v5 - 144));
    v13 = *(_QWORD *)(v5 - 152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v9 + 4);
    swift_release(v13);
    v14 = v12;
    v4 = *(void (**)(_QWORD))(v5 - 240);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Container %{public}s entered attached state", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v15 = *(_QWORD *)(v5 - 176);
  }
  else
  {

    swift_release(v3);
    v15 = v2;
  }
  v1(v15, *(_QWORD *)(v5 - 168));
  if (v4)
    v4(0);
  sub_10018A588(8);
  JUMPOUT(0x100189390);
}

uint64_t sub_100189524(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;

  v13 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return sub_100188454(a6, a7, a3, a4);
  (*(void (**)(char *, _QWORD))(v14 + 104))(v16, enum case for DIPError.Code.internalError(_:));
  swift_errorRetain(a1);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = (void (*)(_QWORD, _QWORD, _QWORD))swift_allocError(v18, v19, 0, 0);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, a1, v16, 0, v17, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x80000001005509E0, a5);
  sub_100189AEC(v20, a3, a4);
  return swift_errorRelease(v20);
}

uint64_t sub_1001896AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;

  v7 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return sub_100189824((uint64_t (*)(_QWORD))a3, a4);
  (*(void (**)(char *, _QWORD))(v8 + 104))(v10, enum case for DIPError.Code.internalError(_:));
  swift_errorRetain(a1);
  v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v12 = type metadata accessor for DIPError(0);
  v13 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v14 = (void (*)(_QWORD, _QWORD, _QWORD))swift_allocError(v12, v13, 0, 0);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, a1, v10, 0, v11, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x80000001005509E0, 522);
  sub_100189AEC(v14, a3, a4);
  return swift_errorRelease(v14);
}

uint64_t sub_100189824(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  char v36[24];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v8);
  v11 = swift_retain(v3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v33 = v6;
    v14 = swift_slowAlloc(12, -1);
    v34 = a2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v39[0] = v16;
    *(_DWORD *)v15 = 136446210;
    v32 = v7;
    v35 = a1;
    v17 = *(_QWORD *)(v3 + 24);
    v18 = *(_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain(v18);
    v37 = sub_1000E3AC8(v17, v18, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 4);
    swift_release(v3);
    v19 = v18;
    a1 = v35;
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Container %{public}s has detached", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  }
  else
  {

    swift_release(v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state) = 9;
  v20 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
  v21 = (unint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, v39, 1, 0);
  v22 = *v21;
  *v21 = v20;
  swift_bridgeObjectRelease(v22);
  v23 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
  v24 = (unint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v37, 1, 0);
  v25 = *v24;
  *v24 = v23;
  swift_bridgeObjectRelease(v25);
  v26 = (uint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v36, 1, 0);
  v27 = *v26;
  *v26 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v27);
  v28 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
  v29 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v28;
  result = swift_bridgeObjectRelease(v29);
  if (a1)
    return a1(0);
  return result;
}

uint64_t sub_100189AEC(void (*a1)(_QWORD, _QWORD, _QWORD), void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char *v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD, _QWORD);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  char *v81;
  uint64_t v82;
  char *v83;
  char v84[24];
  uint64_t v85;
  _BYTE v86[16];
  uint64_t v87[4];

  v72 = a3;
  v80 = a2;
  v77 = a1;
  v3 = type metadata accessor for Logger(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  __chkstk_darwin(v3);
  v83 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v82 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v81 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v70 - v10;
  v12 = sub_100004828((uint64_t *)&unk_1006325A0);
  v13 = sub_100004828((uint64_t *)&unk_100633440);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + 2 * v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1005208D0;
  v19 = (uint64_t *)(v18 + v17 + *(int *)(v13 + 48));
  v20 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
  v21 = type metadata accessor for DIPError.PropertyKey(0);
  v22 = *(void (**)(void))(*(_QWORD *)(v21 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v18 + v17, v20, v21);
  v23 = v74;
  v24 = *(_QWORD *)(v74 + 24);
  v25 = *(_QWORD *)(v74 + 32);
  v19[3] = (uint64_t)&type metadata for String;
  v71 = v24;
  *v19 = v24;
  v19[1] = v25;
  v26 = v11;
  v27 = v23;
  v28 = v18 + v17 + v15;
  v29 = v7;
  v30 = v28 + *(int *)(v13 + 48);
  v22();
  v31 = OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state;
  v32 = *(_BYTE *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(_QWORD *)(v30 + 24) = &type metadata for DIPCloudContainerState;
  *(_BYTE *)v30 = v32;
  swift_bridgeObjectRetain(v25);
  v33 = sub_10011D314(v18);
  v34 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v73, enum case for DIPError.Code.internalError(_:), v76);
  v35 = v77;
  swift_errorRetain(v77);
  v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v34, 0, v33, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001ELL, 0x8000000100550930, 558);
  defaultLogger()(v36);
  v77 = *(void (**)(_QWORD, _QWORD, _QWORD))(v82 + 16);
  v77(v81, v26, v7);
  v37 = swift_retain(v27);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v76 = (uint64_t)v26;
    v41 = v40;
    v42 = swift_slowAlloc(64, -1);
    v75 = v31;
    v43 = v42;
    v87[0] = v42;
    *(_DWORD *)v41 = 136446466;
    swift_bridgeObjectRetain(v25);
    v85 = sub_1000E3AC8(v71, v25, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v41 + 4);
    swift_release(v27);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v41 + 12) = 2080;
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v45 = v81;
    v46 = Error.localizedDescription.getter(v29, v44);
    v48 = v47;
    v85 = sub_1000E3AC8(v46, v47, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v41 + 14);
    swift_bridgeObjectRelease(v48);
    v49 = *(void (**)(char *, uint64_t))(v82 + 8);
    v49(v45, v29);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Container %{public}s entered error state due to error: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    v50 = v43;
    v31 = v75;
    swift_slowDealloc(v50, -1, -1);
    v51 = v41;
    v26 = (char *)v76;
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    swift_release(v27);
    v49 = *(void (**)(char *, uint64_t))(v82 + 8);
    v49(v81, v29);
  }

  (*(void (**)(char *, uint64_t))(v78 + 8))(v83, v79);
  *(_BYTE *)(v27 + v31) = 9;
  v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v53 = swift_allocError(v29, v52, 0, 0);
  v54 = (void (*)(uint64_t, char *, uint64_t))v77;
  v77(v55, v26, v29);
  sub_10018A698(v53);
  swift_errorRelease(v53);
  v56 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
  v57 = (unint64_t *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, v87, 1, 0);
  v58 = *v57;
  *v57 = v56;
  swift_bridgeObjectRelease(v58);
  v59 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
  v60 = (unint64_t *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  swift_beginAccess(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v85, 1, 0);
  v61 = *v60;
  *v60 = v59;
  swift_bridgeObjectRelease(v61);
  v62 = (uint64_t *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
  swift_beginAccess(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v84, 1, 0);
  v63 = *v62;
  *v62 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v63);
  v64 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
  v65 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
  *(_QWORD *)(v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v64;
  swift_bridgeObjectRelease(v65);
  v66 = v80;
  if (v80)
  {
    v67 = swift_allocError(v29, v52, 0, 0);
    v54(v68, v26, v29);
    v66(v67);
    swift_errorRelease(v67);
  }
  return ((uint64_t (*)(char *, uint64_t))v49)(v26, v29);
}

uint64_t sub_10018A110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  char v52[24];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    return result;
  v49 = v10;
  v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, v52, 0, 0);
  v14 = *v13;
  if (!*(_QWORD *)(*v13 + 16))
  {
    swift_retain(a3);
    goto LABEL_6;
  }
  sub_10002EF2C(a2, a3);
  swift_bridgeObjectRetain(v14);
  sub_1004A87AC(a1);
  v16 = v15;
  swift_bridgeObjectRelease(v14);
  if ((v16 & 1) == 0)
  {
LABEL_6:
    swift_beginAccess(v13, v51, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
    v50 = *v13;
    *v13 = 0x8000000000000000;
    sub_100481E74((uint64_t)_swiftEmptyArrayStorage, a1, isUniquelyReferenced_nonNull_native);
    v18 = *v13;
    *v13 = v50;
    swift_bridgeObjectRelease(v18);
    swift_endAccess(v51);
  }
  v19 = swift_allocObject(&unk_100609C68, 32, 7);
  v47 = a2;
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  swift_beginAccess(v13, v51, 33, 0);
  v48 = a3;
  swift_retain(a3);
  v20 = swift_isUniquelyReferenced_nonNull_native(*v13);
  v50 = *v13;
  v21 = (_QWORD *)v50;
  *v13 = 0x8000000000000000;
  v23 = sub_1004A87AC(a1);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    v27 = v22;
    if (v21[3] >= v26)
    {
      if ((v20 & 1) != 0)
      {
        if ((v22 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        sub_10012B3B8();
        if ((v27 & 1) == 0)
          goto LABEL_24;
      }
    }
    else
    {
      sub_100126CCC(v26, v20);
      v28 = sub_1004A87AC(a1);
      if ((v27 & 1) != (v29 & 1))
      {
LABEL_25:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DIPCloudContainerState);
        __break(1u);
        return result;
      }
      v23 = v28;
      if ((v27 & 1) == 0)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    v21 = *(_QWORD **)(*(_QWORD *)(v50 + 56) + 8 * v23);
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) != 0)
      goto LABEL_15;
  }
  v21 = sub_1000E315C(0, v21[2] + 1, 1, v21);
LABEL_15:
  v31 = v21[2];
  v30 = v21[3];
  if (v31 >= v30 >> 1)
    v21 = sub_1000E315C((_QWORD *)(v30 > 1), v31 + 1, 1, v21);
  v21[2] = v31 + 1;
  v32 = &v21[2 * v31];
  v32[4] = sub_1001968C0;
  v32[5] = v19;
  v33 = v50;
  *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v23) = v21;
  *v13 = v33;
  v34 = swift_endAccess(v51);
  defaultLogger()(v34);
  v35 = swift_retain_n(v4, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v51[0] = v39;
    *(_DWORD *)v38 = 136446466;
    v40 = sub_100185138(a1);
    v42 = v41;
    v50 = sub_1000E3AC8(v40, v41, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v38 + 4);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v38 + 12) = 2082;
    v46 = v8;
    v43 = *(_QWORD *)(v4 + 24);
    v44 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain(v44);
    v50 = sub_1000E3AC8(v43, v44, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v38 + 14);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Handler is waiting for state %{public}s in container %{public}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    sub_10002F034(v47, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v12, v46);
  }
  else
  {
    sub_10002F034(v47, v48);

    swift_release_n(v4, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v12, v8);
  }
}

void sub_10018A588(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  char v15[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, v15, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_1004A87AC(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v4);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v9 = (uint64_t *)(v7 + 40);
        do
        {
          v11 = (void (*)(_QWORD *))*(v9 - 1);
          v10 = *v9;
          v14[0] = 0;
          swift_retain(v10);
          v11(v14);
          swift_release(v10);
          v9 += 2;
          --v8;
        }
        while (v8);
      }
      swift_bridgeObjectRelease(v7);
      swift_beginAccess(v3, v14, 33, 0);
      v12 = sub_10047F51C(a1);
      swift_endAccess(v14);
      v13 = v12;
    }
    else
    {
      v13 = v4;
    }
    swift_bridgeObjectRelease(v13);
  }
}

void sub_10018A698(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26[24];

  v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
  swift_beginAccess(v3, v26, 1, 0);
  v4 = *v3;
  v23 = v3;
  v24 = *v3 + 64;
  v5 = 1 << *(_BYTE *)(*v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v9 = 0;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
LABEL_20:
    v15 = *(_QWORD *)(v4 + 56);
    v16 = *(_QWORD *)(v15 + 8 * v11);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v15 + 8 * v11));
      v18 = (uint64_t *)(v16 + 40);
      do
      {
        v20 = (void (*)(uint64_t *))*(v18 - 1);
        v19 = *v18;
        v25 = a1;
        swift_retain(v19);
        v20(&v25);
        swift_release(v19);
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(v16);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v8)
    goto LABEL_24;
  v13 = *(_QWORD *)(v24 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_19;
  v9 = v12 + 1;
  if (v12 + 1 >= v8)
    goto LABEL_24;
  v13 = *(_QWORD *)(v24 + 8 * v9);
  if (v13)
    goto LABEL_19;
  v9 = v12 + 2;
  if (v12 + 2 >= v8)
    goto LABEL_24;
  v13 = *(_QWORD *)(v24 + 8 * v9);
  if (v13)
  {
LABEL_19:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_20;
  }
  v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_24:
    swift_release(v4);
    v21 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
    v22 = *v23;
    *v23 = v21;
    swift_bridgeObjectRelease(v22);
    return;
  }
  v13 = *(_QWORD *)(v24 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_24;
    v13 = *(_QWORD *)(v24 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10018A884(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a3 + 40);
  v16 = (_QWORD *)swift_allocObject(&unk_100609DD0, 56, 7);
  v16[2] = a3;
  v16[3] = a2;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a1;
  aBlock[4] = sub_100196A24;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609DE8;
  v17 = _Block_copy(aBlock);
  swift_retain(a3);
  swift_errorRetain(a2);
  sub_10002EF2C(a4, a5);
  static DispatchQoS.unspecified.getter(a1);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100004828((uint64_t *)&unk_1006308D0);
  v20 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v10, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v23);
  return swift_release(v27);
}

void sub_10018AA9C(_QWORD *a1, void *a2, void (*a3)(uint64_t), uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(void);
  void *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  char v51;
  char *v52;
  uint64_t v53;
  char *v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  Swift::String v71;
  void *v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  void *object;
  Swift::String v77;
  __int128 v78;
  char *v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  char *v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  _OWORD v107[2];
  __int128 v108;
  void *v109;

  v96 = a5;
  v97 = a4;
  v102 = a3;
  v105 = a2;
  v6 = type metadata accessor for DIPError.PropertyKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v94 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for DIPError.Code(0);
  v101 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError(0);
  v99 = *(_QWORD *)(v10 - 8);
  v100 = v10;
  v11 = __chkstk_darwin(v10);
  v93 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v92 = (char *)&v90 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v90 - v16;
  __chkstk_darwin(v15);
  v98 = (char *)&v90 - v18;
  v19 = sub_100004828((uint64_t *)&unk_1006325A0);
  v20 = sub_100004828((uint64_t *)&unk_100633440);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 72);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v19, v24 + 2 * v22, v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_1005208D0;
  v26 = v25 + v24;
  v27 = (_QWORD *)(v26 + *(int *)(v20 + 48));
  v95 = v7;
  v28 = *(void (**)(void))(v7 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v28)(v26, enum case for DIPError.PropertyKey.cloudContainerName(_:), v6);
  v30 = (char *)a1[3];
  v29 = (void *)a1[4];
  v27[3] = &type metadata for String;
  *v27 = v30;
  v27[1] = v29;
  v31 = v105;
  v32 = v26 + v22;
  v33 = v6;
  v34 = *(int *)(v20 + 48);
  v35 = v29;
  v36 = v32 + v34;
  v28();
  v37 = *((_BYTE *)a1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(_QWORD *)(v36 + 24) = &type metadata for DIPCloudContainerState;
  *(_BYTE *)v36 = v37;
  swift_bridgeObjectRetain(v35);
  v38 = sub_10011D314(v25);
  if (!v31)
  {
    v91 = v35;
    v98 = v30;
    v48 = (uint64_t)v94;
    v47 = v95;
    v49 = v93;
    if (v96)
    {
      v105 = v96;
      v50 = objc_msgSend(v105, "accountStatus");
      if (v50 == (id)1)
      {
        v51 = (*(uint64_t (**)(void))(*a1 + 360))();
        v52 = v103;
        v53 = v104;
        if ((v51 & 1) != 0 && (objc_msgSend(v105, "supportsDeviceToDeviceEncryption") & 1) == 0)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v52, enum case for DIPError.Code.cloudkitD2DEncryptionNotSupported(_:), v53);
          v83 = v49;
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100550AF0, 0, v52, 0, v38, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x8000000100550A60, 661);
          v84 = v102;
          if (v102)
          {
            v85 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            v86 = v100;
            v87 = swift_allocError(v100, v85, 0, 0);
            v88 = v99;
            (*(void (**)(uint64_t, char *, uint64_t))(v99 + 16))(v89, v83, v86);
            v84(v87);

            swift_errorRelease(v87);
            (*(void (**)(char *, uint64_t))(v88 + 8))(v83, v86);
            return;
          }
          (*(void (**)(char *, uint64_t))(v99 + 8))(v83, v100);
        }
        else
        {
          swift_bridgeObjectRelease(v38);
          if (v102)
            v102(0);
        }
        goto LABEL_22;
      }
      v66 = v50;
      v67 = v33;
      ((void (*)(uint64_t, _QWORD, uint64_t))v28)(v48, enum case for DIPError.PropertyKey.appleAccountStatus(_:), v33);
      v68 = objc_msgSend(v105, "accountStatus");
      v109 = &type metadata for Int;
      *(_QWORD *)&v108 = v68;
      sub_10000491C(&v108, v107);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
      v106 = v38;
      sub_1004811C4(v107, v48, isUniquelyReferenced_nonNull_native);
      v70 = v106;
      swift_bridgeObjectRelease(0x8000000000000000);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v67);
      *(_QWORD *)&v108 = 0;
      *((_QWORD *)&v108 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(91);
      v71._countAndFlagsBits = 0xD00000000000001ALL;
      v71._object = (void *)0x8000000100550A80;
      String.append(_:)(v71);
      v72 = v91;
      swift_bridgeObjectRetain(v91);
      v73._countAndFlagsBits = (uint64_t)v98;
      v73._object = v72;
      String.append(_:)(v73);
      swift_bridgeObjectRelease(v72);
      v74._countAndFlagsBits = 0xD00000000000002ALL;
      v74._object = (void *)0x8000000100550AA0;
      String.append(_:)(v74);
      *(_QWORD *)&v107[0] = v66;
      v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(object);
      v77._countAndFlagsBits = 0xD000000000000013;
      v77._object = (void *)0x8000000100550AD0;
      String.append(_:)(v77);
      v78 = v108;
      v79 = v103;
      (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v103, enum case for DIPError.Code.invalidAppleAccount(_:), v104);
      v54 = v92;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, *((_QWORD *)&v78 + 1), 0, v79, 0, v70, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x8000000100550A60, 654);
      v80 = v102;
      if (!v102)
      {
        (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v100);
LABEL_22:

        return;
      }
      v81 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v60 = v100;
      v64 = swift_allocError(v100, v81, 0, 0);
      v61 = v99;
      (*(void (**)(uint64_t, char *, uint64_t))(v99 + 16))(v82, v54, v60);
      v80(v64);

    }
    else
    {
      v54 = v17;
      *(_QWORD *)&v108 = 0;
      *((_QWORD *)&v108 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v55._countAndFlagsBits = 0xD00000000000003BLL;
      v55._object = (void *)0x8000000100550A20;
      String.append(_:)(v55);
      v56 = v91;
      swift_bridgeObjectRetain(v91);
      v57._countAndFlagsBits = (uint64_t)v98;
      v57._object = v56;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(v56);
      v58 = v108;
      v59 = v103;
      (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v103, enum case for DIPError.Code.unexpectedDeviceState(_:), v104);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v58, *((_QWORD *)&v58 + 1), 0, v59, 0, v38, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x8000000100550A60, 645);
      v61 = v99;
      v60 = v100;
      v62 = v102;
      if (!v102)
      {
LABEL_17:
        (*(void (**)(char *, uint64_t))(v61 + 8))(v54, v60);
        return;
      }
      v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v64 = swift_allocError(v60, v63, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v65, v17, v60);
      v62(v64);
    }
    swift_errorRelease(v64);
    goto LABEL_17;
  }
  v39 = v103;
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v103, enum case for DIPError.Code.internalError(_:), v104);
  swift_errorRetain(v31);
  v40 = v98;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100550B30, v31, v39, 0, v38, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x8000000100550A60, 640);
  v42 = v99;
  v41 = v100;
  v43 = v102;
  if (v102)
  {
    v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v45 = swift_allocError(v41, v44, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v46, v40, v41);
    v43(v45);
    swift_errorRelease(v45);
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
}

uint64_t sub_10018B37C(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v48 - v12;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v11);
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (v16)
  {
    v50 = v7;
    v51 = v6;
    v52 = a2;
    v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v55, 0, 0);
    v18 = (uint64_t *)(v15 + 40);
    do
    {
      v19 = *v17;
      if (!*(_QWORD *)(*v17 + 16))
        goto LABEL_8;
      v21 = *(v18 - 1);
      v20 = *v18;
      swift_bridgeObjectRetain(*v18);
      swift_bridgeObjectRetain(v19);
      sub_1004A8604(v21, v20);
      LOBYTE(v21) = v22;
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v19);
      if ((v21 & 1) == 0)
      {
LABEL_8:
        swift_bridgeObjectRelease(v15);
        v32 = objc_msgSend((id)objc_opt_self(CKFetchRecordZonesOperation), "fetchAllRecordZonesOperation");
        v33 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), "init");
        objc_msgSend(v33, "setQualityOfService:", 17);
        objc_msgSend(v32, "setConfiguration:", v33);
        v34 = swift_allocObject(&unk_100609740, 24, 7);
        *(_QWORD *)(v34 + 16) = 0;
        v35 = swift_allocObject(&unk_100609B78, 32, 7);
        *(_QWORD *)(v35 + 16) = v3;
        *(_QWORD *)(v35 + 24) = v34;
        swift_retain(v3);
        swift_retain(v34);
        CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter(sub_100196728, v35);
        v36 = (_QWORD *)swift_allocObject(&unk_100609BA0, 48, 7);
        v36[2] = v3;
        v36[3] = v34;
        v37 = v52;
        v36[4] = a1;
        v36[5] = v37;
        swift_retain(v3);
        swift_retain(v34);
        sub_10002EF2C((uint64_t)a1, v37);
        CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter(sub_100196774, v36);
        sub_1001927C0((uint64_t)v32, 0);

        return swift_release(v34);
      }
      v18 += 2;
      --v16;
    }
    while (v16);
    v23 = swift_bridgeObjectRelease(v15);
    defaultLogger()(v23);
    v24 = swift_retain(v3);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v54 = v28;
      *(_DWORD *)v27 = 136446210;
      v49 = a1;
      v29 = *(_QWORD *)(v3 + 24);
      v30 = *(_QWORD *)(v3 + 32);
      swift_bridgeObjectRetain(v30);
      v53 = sub_1000E3AC8(v29, v30, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v27 + 4);
      swift_release(v3);
      v31 = v30;
      a1 = v49;
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not fetching zones for container %{public}s since all zones are cached.", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_release(v3);
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v10, v51);
    if (a1)
      return a1(0);
  }
  else
  {
    v39 = swift_bridgeObjectRelease(v14);
    defaultLogger()(v39);
    v40 = swift_retain(v2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    if (!os_log_type_enabled(v41, v42))
    {

      swift_release(v3);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      if (!a1)
        return result;
      return a1(0);
    }
    v52 = a2;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v50 = v7;
    v45 = v44;
    v55[0] = v44;
    v49 = a1;
    *(_DWORD *)v43 = 136446210;
    v51 = v6;
    v46 = *(_QWORD *)(v3 + 24);
    v47 = *(_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain(v47);
    v54 = sub_1000E3AC8(v46, v47, v55);
    a1 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 4);
    swift_release(v3);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Not fetching zones for container %{public}s since no zones are required.", v43, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v13, v51);
    if (a1)
      return a1(0);
  }
  return result;
}

uint64_t sub_10018B8C4(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a4 + 40);
  v16 = swift_allocObject(&unk_100609C18, 56, 7);
  *(_QWORD *)(v16 + 16) = a2;
  v17 = a3 & 1;
  *(_BYTE *)(v16 + 24) = a3 & 1;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 48) = a5;
  aBlock[4] = sub_100196878;
  v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609C30;
  v18 = _Block_copy(aBlock);
  sub_1000C7950(a2, v17);
  v19 = a1;
  swift_retain(a4);
  v20 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100004828((uint64_t *)&unk_1006308D0);
  v23 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  return swift_release(v30);
}

void sub_10018BAE4(void *a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  uint64_t *v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD v57[3];
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60[3];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v26 = (_QWORD *)(a5 + 16);
    v27 = swift_errorRetain(a1);
    defaultLogger()(v27);
    sub_1000C7950(a1, 1);
    v28 = a3;
    sub_1000C7950(a1, 1);
    v29 = v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(8, -1);
      v54 = v10;
      v35 = (_QWORD *)v34;
      v55 = swift_slowAlloc(32, -1);
      v59 = (uint64_t)v29;
      v60[0] = v55;
      *(_DWORD *)v33 = 138412546;
      v53 = v30;
      v56 = v26;
      v36 = v29;
      v52 = v32;
      v37 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v33 + 4);
      *v35 = v29;

      *(_WORD *)(v33 + 12) = 2080;
      swift_getErrorValue(a1, v58, v57);
      v38 = Error.localizedDescription.getter(v57[1], v57[2]);
      v40 = v39;
      v59 = sub_1000E3AC8(v38, v39, v60);
      v26 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v33 + 14);
      swift_bridgeObjectRelease(v40);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
      v41 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v52, "fetchZones error received for zone ID %@: %s", (uint8_t *)v33, 0x16u);
      v42 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v35, 1, v42);
      swift_slowDealloc(v35, -1, -1);
      v43 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v54);
    }
    else
    {

      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_beginAccess(v26, v60, 1, 0);
    v45 = *v26;
    *v26 = a1;
    swift_errorRelease(v45);
  }
  else
  {
    v14 = a1;
    v15 = objc_msgSend(a3, "zoneName");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = objc_msgSend(a3, "zoneName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
    v24 = static CKRecordZoneID.defaultZoneName.getter();
    v25 = v23;
    if (v20 == v24 && v22 == v23)
    {
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease_n(v22, 2);
LABEL_9:
      sub_1000C7A20(a1, 0);
      return;
    }
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v25);
    if ((v44 & 1) != 0)
    {
      swift_bridgeObjectRelease(v18);
      goto LABEL_9;
    }
    v46 = objc_msgSend(v14, "zoneID");
    v47 = (uint64_t *)(a4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v60, 33, 0);
    if (v46)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v47);
      v59 = *v47;
      *v47 = 0x8000000000000000;
      sub_100481E60((uint64_t)v46, v16, v18, isUniquelyReferenced_nonNull_native);
      v49 = *v47;
      *v47 = v59;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      v50 = (void *)sub_10047F438(v16, v18);
      swift_bridgeObjectRelease(v18);

    }
    swift_endAccess(v60);
    sub_1000C7A20(a1, 0);
  }
}

void sub_10018BF94(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  Class *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  Class isa;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  id v75;
  Class v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  Class v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[3];
  char v96[32];

  v90 = a3;
  v91 = a6;
  LODWORD(v88) = a5;
  v87 = a4;
  v8 = type metadata accessor for DIPError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPError.Code(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v89 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_beginAccess(a1 + 16, v96, 0, 0);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    if (a2)
    {
      v22 = v89;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v17 + 104))(v89, enum case for DIPError.Code.internalError(_:), v16, v20);
      swift_errorRetain(v21);
      swift_errorRetain(v21);
      v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v25 = swift_allocError(v8, v24, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100550770, v21, v22, 0, v23, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000017, 0x8000000100550910, 726);
      a2(v25);
      swift_errorRelease(v21);
      swift_errorRelease(v25);
    }
  }
  else
  {
    v84 = v11;
    v85 = v9;
    v82 = v13;
    v83 = v12;
    v86 = a2;
    if ((v88 & 1) != 0)
    {
      v88 = v8;
      v43 = sub_100004828((uint64_t *)&unk_1006325A0);
      v44 = sub_100004828((uint64_t *)&unk_100633440);
      v45 = *(_QWORD *)(v44 - 8);
      v83 = *(_QWORD *)(v45 + 72);
      v46 = *(unsigned __int8 *)(v45 + 80);
      v47 = (v46 + 32) & ~v46;
      v48 = swift_allocObject(v43, v47 + 2 * v83, v46 | 7);
      *(_OWORD *)(v48 + 16) = xmmword_1005208D0;
      v49 = v48 + v47;
      v50 = (_QWORD *)(v49 + *(int *)(v44 + 48));
      v51 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      v52 = type metadata accessor for DIPError.PropertyKey(0);
      v53 = *(void (**)(void))(*(_QWORD *)(v52 - 8) + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v53)(v49, v51, v52);
      v54 = v91;
      v55 = v91[3];
      v56 = v91[4];
      v50[3] = &type metadata for String;
      *v50 = v55;
      v50[1] = v56;
      v57 = v49 + v83 + *(int *)(v44 + 48);
      v53();
      v58 = *((_BYTE *)v54 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
      *(_QWORD *)(v57 + 24) = &type metadata for DIPCloudContainerState;
      *(_BYTE *)v57 = v58;
      swift_bridgeObjectRetain(v56);
      v59 = v87;
      sub_100196278(v87, 1);
      v60 = sub_10011D314(v48);
      v61 = sub_100193EEC(v59);
      v62 = v89;
      (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v89, enum case for DIPError.Code.internalError(_:), v16);
      v63 = v84;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005508F0, v61, v62, 0, v60, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000017, 0x8000000100550910, 737);
      v64 = v86;
      if (v86)
      {
        v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v66 = v88;
        v67 = swift_allocError(v88, v65, 0, 0);
        v68 = v85;
        (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v69, v63, v66);
        v64(v67);
        sub_100196284(v59, 1);
        swift_errorRelease(v67);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v66);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v63, v88);
        sub_100196284(v59, 1);
      }
    }
    else
    {
      v26 = v15;
      defaultLogger()(v19);
      v27 = v91;
      v28 = swift_retain_n(v91, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.debug.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = (Class *)swift_slowAlloc(8, -1);
        v33 = swift_slowAlloc(32, -1);
        v95[0] = v33;
        *(_DWORD *)v31 = 136446466;
        v34 = v27[3];
        v35 = v91[4];
        swift_bridgeObjectRetain(v35);
        v93 = sub_1000E3AC8(v34, v35, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v31 + 4);
        swift_bridgeObjectRelease(v35);
        *(_WORD *)(v31 + 12) = 2112;
        v36 = (_QWORD *)((char *)v91 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
        swift_beginAccess((char *)v91 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v93, 0, 0);
        v37 = *v36;
        swift_bridgeObjectRetain(v37);
        v39 = sub_1004231BC(v38);
        swift_bridgeObjectRelease(v37);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v41 = v39;
        v27 = v91;
        swift_release(v41);
        v92 = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 14);
        *v32 = isa;
        swift_release_n(v27, 2);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully fetched record zones for container %{public}s: %@", (uint8_t *)v31, 0x16u);
        v42 = sub_100004828(&qword_1006308B0);
        swift_arrayDestroy(v32, 1, v42);
        swift_slowDealloc(v32, -1, -1);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_release_n(v27, 2);
      }
      (*(void (**)(char *, uint64_t))(v82 + 8))(v26, v83);
      v70 = v86;
      v71 = (_QWORD *)((char *)v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
      swift_beginAccess((char *)v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v95, 0, 0);
      v72 = *v71;
      swift_bridgeObjectRetain(v72);
      v74 = sub_1004231BC(v73);
      swift_bridgeObjectRelease(v72);
      v75 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v76 = Array._bridgeToObjectiveC()().super.isa;
      v77 = swift_release(v74);
      (*(void (**)(uint64_t))(*v27 + 328))(v77);
      v79 = v78;
      v80 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v79);
      objc_msgSend(v75, "setObject:forKey:", v76, v80);

      if (v70)
        v70(0);
    }
  }
}

void sub_10018C710(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(_QWORD);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76[9];
  uint64_t v77;
  uint64_t v78;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  v7 = __chkstk_darwin(v6);
  v66 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v65 - v10;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v9);
  v13 = v12;
  if (*(_QWORD *)(v12 + 16))
  {
    v67 = a1;
    v68 = v2;
    v14 = *(_QWORD *)(v12 + 64);
    v71 = a2;
    v72 = v12 + 64;
    v15 = 1 << *(_BYTE *)(v12 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & v14;
    v74 = (uint8_t *)(v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, &v77, 0, 0);
    v18 = 0;
    v73 = (unint64_t)(v15 + 63) >> 6;
    while (1)
    {
      if (v17)
      {
        v19 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v20 = v19 | (v18 << 6);
      }
      else
      {
        v21 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_53:
          __break(1u);
          return;
        }
        if (v21 >= v73)
          goto LABEL_47;
        v22 = *(_QWORD *)(v72 + 8 * v21);
        ++v18;
        if (!v22)
        {
          v18 = v21 + 1;
          if (v21 + 1 >= v73)
            goto LABEL_47;
          v22 = *(_QWORD *)(v72 + 8 * v18);
          if (!v22)
          {
            v18 = v21 + 2;
            if (v21 + 2 >= v73)
              goto LABEL_47;
            v22 = *(_QWORD *)(v72 + 8 * v18);
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v73)
              {
LABEL_47:
                v55 = swift_release(v13);
                v56 = v66;
                defaultLogger()(v55);
                v57 = v68;
                v58 = swift_retain(v68);
                v59 = Logger.logObject.getter(v58);
                v60 = static os_log_type_t.debug.getter(v59);
                if (os_log_type_enabled(v59, v60))
                {
                  v61 = (uint8_t *)swift_slowAlloc(12, -1);
                  v62 = swift_slowAlloc(32, -1);
                  v76[0] = v62;
                  *(_DWORD *)v61 = 136446210;
                  v63 = *(_QWORD *)(v57 + 24);
                  v64 = *(_QWORD *)(v57 + 32);
                  swift_bridgeObjectRetain(v64);
                  v75 = sub_1000E3AC8(v63, v64, v76);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v61 + 4);
                  swift_release(v57);
                  swift_bridgeObjectRelease(v64);
                  _os_log_impl((void *)&_mh_execute_header, v59, v60, "Not fetching subscriptions for container %{public}s since all subscriptions are cached.", v61, 0xCu);
                  swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v62, -1, -1);
                  swift_slowDealloc(v61, -1, -1);

                  (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v70);
                }
                else
                {

                  swift_release(v57);
                  (*(void (**)(char *, uint64_t))(v69 + 8))(v56, v70);
                }
                if (v67)
                  v67(0);
                return;
              }
              v22 = *(_QWORD *)(v72 + 8 * v23);
              if (!v22)
              {
                while (1)
                {
                  v18 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_53;
                  if (v18 >= v73)
                    goto LABEL_47;
                  v22 = *(_QWORD *)(v72 + 8 * v18);
                  ++v23;
                  if (v22)
                    goto LABEL_22;
                }
              }
              v18 = v23;
            }
          }
        }
LABEL_22:
        v17 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v18 << 6);
      }
      v24 = *(_QWORD *)v74;
      if (!*(_QWORD *)(*(_QWORD *)v74 + 16))
      {
        swift_release(v13);
        goto LABEL_45;
      }
      v25 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v20);
      v26 = *v25;
      v27 = v25[1];
      Hasher.init(_seed:)(v76, *(_QWORD *)(v24 + 40));
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v76, v26, v27);
      v28 = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v24 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)(v24 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        goto LABEL_40;
      v31 = *(_QWORD *)(v24 + 48);
      v32 = (_QWORD *)(v31 + 16 * v30);
      v33 = v32[1];
      v34 = *v32 == v26 && v33 == v27;
      if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v32, v33, v26, v27, 0) & 1) == 0)
      {
        v35 = ~v29;
        while (1)
        {
          v30 = (v30 + 1) & v35;
          if (((*(_QWORD *)(v24 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            break;
          v36 = (_QWORD *)(v31 + 16 * v30);
          v37 = v36[1];
          v38 = *v36 == v26 && v37 == v27;
          if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v36, v37, v26, v27, 0) & 1) != 0)
            goto LABEL_6;
        }
LABEL_40:
        swift_release(v13);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v24);
LABEL_45:
        v47 = objc_msgSend((id)objc_opt_self(CKFetchSubscriptionsOperation), "fetchAllSubscriptionsOperation");
        v48 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), "init");
        objc_msgSend(v48, "setQualityOfService:", 17);
        objc_msgSend(v47, "setConfiguration:", v48);
        v49 = swift_allocObject(&unk_100609740, 24, 7);
        *(_QWORD *)(v49 + 16) = 0;
        v50 = swift_allocObject(&unk_100609A88, 32, 7);
        v51 = v68;
        *(_QWORD *)(v50 + 16) = v68;
        *(_QWORD *)(v50 + 24) = v49;
        swift_retain(v51);
        swift_retain(v49);
        CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter(sub_100196620, v50);
        v52 = (_QWORD *)swift_allocObject(&unk_100609AB0, 48, 7);
        v52[2] = v51;
        v52[3] = v49;
        v53 = (uint64_t)v67;
        v54 = v71;
        v52[4] = v67;
        v52[5] = v54;
        swift_retain(v51);
        swift_retain(v49);
        sub_10002EF2C(v53, v54);
        CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter(sub_100196664, v52);
        sub_1001927C0((uint64_t)v47, 0);

        swift_release(v49);
        return;
      }
LABEL_6:
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v24);
    }
  }
  v39 = swift_bridgeObjectRelease(v12);
  defaultLogger()(v39);
  v40 = swift_retain(v2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v71 = a2;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v76[0] = v44;
    *(_DWORD *)v43 = 136446210;
    v74 = v43 + 4;
    v45 = *(_QWORD *)(v3 + 24);
    v46 = *(_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain(v46);
    v77 = sub_1000E3AC8(v45, v46, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v74);
    swift_release(v3);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Not fetching subscriptions for container %{public}s since no subscriptions are required.", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  (*(void (**)(char *, uint64_t))(v69 + 8))(v11, v70);
  if (a1)
    a1(0);
}

uint64_t sub_10018CE48(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  char v36[8];
  uint64_t v37[3];

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v17 = (uint64_t *)(a6 + 16);
    v18 = swift_errorRetain(a1);
    defaultLogger()(v18);
    swift_bridgeObjectRetain(a5);
    sub_1000C7950(a1, 1);
    swift_bridgeObjectRetain(a5);
    v19 = sub_1000C7950(a1, 1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v32 = (uint64_t *)(a6 + 16);
      v23 = v22;
      v31 = swift_slowAlloc(64, -1);
      v37[0] = v31;
      *(_DWORD *)v23 = 136315394;
      swift_bridgeObjectRetain(a5);
      v33 = sub_1000E3AC8(a4, a5, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v23 + 4);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue(a1, v36, v35);
      v24 = Error.localizedDescription.getter(v35[1], v35[2]);
      v26 = v25;
      v33 = sub_1000E3AC8(v24, v25, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v23 + 14);
      swift_bridgeObjectRelease(v26);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "fetch subscriptions error received for subscription ID %s: %s", (uint8_t *)v23, 0x16u);
      v27 = v31;
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v28 = v23;
      v17 = v32;
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_beginAccess(v17, v37, 1, 0);
    v29 = *v17;
    *v17 = (uint64_t)a1;
    return swift_errorRelease(v29);
  }
  else
  {
    swift_beginAccess(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v37, 33, 0);
    swift_bridgeObjectRetain(a5);
    sub_1004E5D2C(&v33, a4, a5);
    swift_endAccess(v37);
    return swift_bridgeObjectRelease(v34);
  }
}

uint64_t sub_10018D130(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v30 = a8;
  v31 = a9;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v19 - 8);
  v34 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a3 + 40);
  v22 = swift_allocObject(a7, 64, 7);
  *(_QWORD *)(v22 + 16) = a4;
  *(_QWORD *)(v22 + 24) = a5;
  *(_QWORD *)(v22 + 32) = a6;
  *(_QWORD *)(v22 + 40) = a1;
  LOBYTE(a7) = a2 & 1;
  *(_BYTE *)(v22 + 48) = a2 & 1;
  *(_QWORD *)(v22 + 56) = a3;
  aBlock[4] = v30;
  v38 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = v31;
  v23 = _Block_copy(aBlock);
  swift_retain(a4);
  sub_10002EF2C(a5, a6);
  sub_100196278(a1, a7);
  v24 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100004828((uint64_t *)&unk_1006308D0);
  v27 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v16, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v18, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
  return swift_release(v38);
}

void sub_10018D35C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  Class isa;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSString v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];
  char v94[32];

  v88 = a3;
  v89 = a6;
  LODWORD(v86) = a5;
  v85 = a4;
  v8 = type metadata accessor for DIPError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPError.Code(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v87 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_beginAccess(a1 + 16, v94, 0, 0);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    if (a2)
    {
      v22 = v87;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v17 + 104))(v87, enum case for DIPError.Code.internalError(_:), v16, v20);
      swift_errorRetain(v21);
      swift_errorRetain(v21);
      v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v25 = swift_allocError(v8, v24, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100550840, v21, v22, 0, v23, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x80000001005508D0, 795);
      a2(v25);
      swift_errorRelease(v21);
      swift_errorRelease(v25);
    }
  }
  else
  {
    v82 = v11;
    v83 = v9;
    v80 = v13;
    v81 = v12;
    v84 = a2;
    if ((v86 & 1) != 0)
    {
      v86 = v8;
      v42 = sub_100004828((uint64_t *)&unk_1006325A0);
      v43 = sub_100004828((uint64_t *)&unk_100633440);
      v44 = *(_QWORD *)(v43 - 8);
      v81 = *(_QWORD *)(v44 + 72);
      v45 = *(unsigned __int8 *)(v44 + 80);
      v46 = (v45 + 32) & ~v45;
      v47 = swift_allocObject(v42, v46 + 2 * v81, v45 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_1005208D0;
      v48 = v47 + v46;
      v49 = (_QWORD *)(v48 + *(int *)(v43 + 48));
      v50 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      v51 = type metadata accessor for DIPError.PropertyKey(0);
      v52 = *(void (**)(void))(*(_QWORD *)(v51 - 8) + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v48, v50, v51);
      v53 = v89;
      v54 = v89[3];
      v55 = v89[4];
      v49[3] = &type metadata for String;
      *v49 = v54;
      v49[1] = v55;
      v56 = v48 + v81 + *(int *)(v43 + 48);
      v52();
      v57 = *((_BYTE *)v53 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
      *(_QWORD *)(v56 + 24) = &type metadata for DIPCloudContainerState;
      *(_BYTE *)v56 = v57;
      swift_bridgeObjectRetain(v55);
      v58 = v85;
      sub_100196278(v85, 1);
      v59 = sub_10011D314(v47);
      v60 = sub_100193EEC(v58);
      v61 = v87;
      (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v87, enum case for DIPError.Code.internalError(_:), v16);
      v62 = v82;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x80000001005508B0, v60, v61, 0, v59, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001FLL, 0x80000001005508D0, 806);
      v63 = v84;
      if (v84)
      {
        v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v65 = v86;
        v66 = swift_allocError(v86, v64, 0, 0);
        v67 = v83;
        (*(void (**)(uint64_t, char *, uint64_t))(v83 + 16))(v68, v62, v65);
        v63(v66);
        sub_100196284(v58, 1);
        swift_errorRelease(v66);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v65);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v62, v86);
        sub_100196284(v58, 1);
      }
    }
    else
    {
      v26 = v15;
      defaultLogger()(v19);
      v27 = v89;
      v28 = swift_retain_n(v89, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.debug.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(64, -1);
        v93[0] = v32;
        *(_DWORD *)v31 = 136446466;
        v33 = v27[3];
        v34 = v89[4];
        swift_bridgeObjectRetain(v34);
        v91 = sub_1000E3AC8(v33, v34, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v31 + 4);
        swift_bridgeObjectRelease(v34);
        *(_WORD *)(v31 + 12) = 2080;
        v35 = (_QWORD *)((char *)v89 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
        swift_beginAccess((char *)v89 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, &v91, 0, 0);
        v36 = *v35;
        v37 = swift_bridgeObjectRetain(v36);
        v38 = Set.description.getter(v37);
        v40 = v39;
        swift_bridgeObjectRelease(v36);
        v41 = v38;
        v27 = v89;
        v90 = sub_1000E3AC8(v41, v40, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v31 + 14);
        swift_release_n(v27, 2);
        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully fetched subscriptions for container self.containerName%{public}s: %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_release_n(v27, 2);
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v26, v81);
      v69 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v70 = (_QWORD *)((char *)v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess((char *)v27 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v93, 0, 0);
      v71 = *v70;
      swift_bridgeObjectRetain(v71);
      v73 = sub_1004232A0(v72);
      swift_bridgeObjectRelease(v71);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v75 = swift_release(v73);
      (*(void (**)(uint64_t))(*v27 + 336))(v75);
      v77 = v76;
      v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v77);
      objc_msgSend(v69, "setObject:forKey:", isa, v78);

      if (v84)
        v84(0);
    }
  }
}

uint64_t sub_10018DAA8(uint8_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Class isa;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v69 - v12;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v11);
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
    v51 = swift_bridgeObjectRelease(v14);
    defaultLogger()(v51);
    v52 = swift_retain(v3);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v71 = v6;
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = swift_slowAlloc(32, -1);
      v70 = v7;
      v57 = v56;
      v80[0] = v56;
      v77 = a2;
      *(_DWORD *)v55 = 136446210;
      v76 = v55 + 4;
      v59 = *(_QWORD *)(v3 + 24);
      v58 = *(_QWORD *)(v3 + 32);
      swift_bridgeObjectRetain(v58);
      v79 = sub_1000E3AC8(v59, v58, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v76);
      swift_release(v3);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "No zones required for container %{public}s; skipping zone creation",
        v55,
        0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v55, -1, -1);

      result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v13, v71);
      if (!a1)
        return result;
    }
    else
    {

      swift_release(v3);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      if (!a1)
        return result;
    }
    return ((uint64_t (*)(_QWORD))a1)(0);
  }
  v74 = v10;
  v70 = v7;
  v71 = v6;
  v76 = a1;
  v77 = a2;
  v17 = swift_allocObject(&unk_100609970, 24, 7);
  v72 = v17;
  *(_QWORD *)(v17 + 16) = _swiftEmptyArrayStorage;
  v18 = (uint64_t *)(v17 + 16);
  v75 = v3;
  v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v80, 0, 0);
  v73 = v15;
  v20 = (uint64_t *)(v15 + 40);
  do
  {
    v21 = *(v20 - 1);
    v22 = *v20;
    v23 = *v19;
    v24 = *(_QWORD *)(*v19 + 16);
    swift_bridgeObjectRetain(*v20);
    if (v24
      && (swift_bridgeObjectRetain(v23),
          sub_1004A8604(v21, v22),
          v26 = v25,
          swift_bridgeObjectRelease(v23),
          (v26 & 1) != 0))
    {
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      v27 = objc_allocWithZone((Class)CKRecordZone);
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      v29 = objc_msgSend(v27, "initWithZoneName:", v28);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      v32 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
      specialized Array._endMutation()(v33);
    }
    v20 += 2;
    --v16;
  }
  while (v16);
  v34 = swift_bridgeObjectRelease(v73);
  v35 = *v18;
  if ((unint64_t)*v18 >> 62)
  {
    if (v35 < 0)
      v68 = *v18;
    else
      v68 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v18);
    v36 = _CocoaArrayWrapper.endIndex.getter(v68);
    v34 = swift_bridgeObjectRelease(v35);
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v38 = v75;
  v37 = v76;
  v39 = v74;
  if (v36)
  {
    v40 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordZonesOperation), "init");
    v41 = v72;
    v42 = *(_QWORD *)(v72 + 16);
    sub_10001CFF8(0, &qword_100636CD8, CKRecordZone_ptr);
    swift_bridgeObjectRetain(v42);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v40, "setRecordZonesToSave:", isa);

    v44 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), "init");
    objc_msgSend(v44, "setQualityOfService:", 17);
    objc_msgSend(v40, "setConfiguration:", v44);
    v45 = swift_allocObject(&unk_1006096F0, 24, 7);
    *(_QWORD *)(v45 + 16) = _swiftEmptyArrayStorage;
    v46 = swift_allocObject(&unk_100609740, 24, 7);
    *(_QWORD *)(v46 + 16) = 0;
    v47 = (_QWORD *)swift_allocObject(&unk_100609998, 40, 7);
    v47[2] = v38;
    v47[3] = v45;
    v47[4] = v46;
    swift_retain(v38);
    swift_retain(v45);
    swift_retain(v46);
    CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter(sub_1001964E8, v47);
    v48 = (_QWORD *)swift_allocObject(&unk_1006099C0, 64, 7);
    v48[2] = v38;
    v48[3] = v46;
    v49 = v77;
    v48[4] = v37;
    v48[5] = v49;
    v48[6] = v45;
    v48[7] = v41;
    swift_retain(v38);
    swift_retain(v45);
    swift_retain(v46);
    sub_10002EF2C((uint64_t)v37, v49);
    swift_retain(v41);
    CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_100196544, v48);
    sub_1001927C0((uint64_t)v40, 0);
    swift_release(v41);

    swift_release(v45);
    v50 = v46;
  }
  else
  {
    defaultLogger()(v34);
    v61 = swift_retain(v38);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v79 = v65;
      *(_DWORD *)v64 = 136446210;
      v76 = v64 + 4;
      v67 = *(_QWORD *)(v38 + 24);
      v66 = *(_QWORD *)(v38 + 32);
      swift_bridgeObjectRetain(v66);
      v78 = sub_1000E3AC8(v67, v66, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v76);
      swift_release(v38);
      swift_bridgeObjectRelease(v66);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "No zones to create for container %{public}s; skipping zone creation",
        v64,
        0xCu);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

      swift_release(v38);
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v71);
    if (v37)
      ((void (*)(_QWORD))v37)(0);
    v50 = v72;
  }
  return swift_release(v50);
}

uint64_t sub_10018E19C(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v15 - 8);
  v29 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(_QWORD *)(a4 + 40);
  v18 = swift_allocObject(&unk_100609A38, 64, 7);
  *(_QWORD *)(v18 + 16) = a2;
  v19 = a3 & 1;
  *(_BYTE *)(v18 + 24) = a3 & 1;
  *(_QWORD *)(v18 + 32) = a4;
  *(_QWORD *)(v18 + 40) = a5;
  *(_QWORD *)(v18 + 48) = a1;
  *(_QWORD *)(v18 + 56) = a6;
  aBlock[4] = sub_100196610;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609A50;
  v20 = _Block_copy(aBlock);
  sub_1000C7950(a2, v19);
  swift_retain(a4);
  swift_retain(a5);
  v21 = a1;
  v22 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v22);
  v31 = _swiftEmptyArrayStorage;
  v23 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100004828((uint64_t *)&unk_1006308D0);
  v25 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  return swift_release(v33);
}

void sub_10018E3C8(void *a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD v63[3];
  _BYTE v64[8];
  uint64_t v65;
  uint64_t v66[3];

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v27 = (_QWORD *)(a6 + 16);
    v28 = swift_errorRetain(a1);
    defaultLogger()(v28);
    sub_1000C7950(a1, 1);
    v29 = a5;
    sub_1000C7950(a1, 1);
    v30 = v29;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(8, -1);
      v60 = v12;
      v36 = (_QWORD *)v35;
      v61 = swift_slowAlloc(32, -1);
      v65 = (uint64_t)v30;
      v66[0] = v61;
      *(_DWORD *)v34 = 138412546;
      v59 = v31;
      v62 = v27;
      v37 = v30;
      v58 = v33;
      v38 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v34 + 4);
      *v36 = v30;

      *(_WORD *)(v34 + 12) = 2080;
      swift_getErrorValue(a1, v64, v63);
      v39 = Error.localizedDescription.getter(v63[1], v63[2]);
      v41 = v40;
      v65 = sub_1000E3AC8(v39, v40, v66);
      v27 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v34 + 14);
      swift_bridgeObjectRelease(v41);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
      v42 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v58, "createZones error received for zone ID %@: %s", (uint8_t *)v34, 0x16u);
      v43 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v36, 1, v43);
      swift_slowDealloc(v36, -1, -1);
      v44 = v61;
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v60);
    }
    else
    {

      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    swift_beginAccess(v27, v66, 1, 0);
    v45 = *v27;
    *v27 = a1;
    swift_errorRelease(v45);
  }
  else
  {
    v16 = (_QWORD *)(a4 + 16);
    v17 = a1;
    v18 = objc_msgSend(v17, "zoneID");
    v19 = objc_msgSend(v18, "zoneName");

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = objc_msgSend(v17, "zoneID");
    v24 = (uint64_t *)(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v66, 33, 0);
    if (v23)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
      v65 = *v24;
      *v24 = 0x8000000000000000;
      sub_100481E60((uint64_t)v23, v20, v22, isUniquelyReferenced_nonNull_native);
      v26 = *v24;
      *v24 = v65;
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v46 = (void *)sub_10047F438(v20, v22);
      swift_bridgeObjectRelease(v22);

    }
    swift_endAccess(v66);
    v47 = objc_msgSend(v17, "zoneID");
    v48 = objc_msgSend(v47, "zoneName");

    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    swift_beginAccess(v16, v66, 33, 0);
    v52 = (_QWORD *)*v16;
    v53 = swift_isUniquelyReferenced_nonNull_native(*v16);
    *v16 = v52;
    if ((v53 & 1) == 0)
    {
      v52 = sub_1000E2358(0, v52[2] + 1, 1, v52);
      *v16 = v52;
    }
    v55 = v52[2];
    v54 = v52[3];
    if (v55 >= v54 >> 1)
    {
      v52 = sub_1000E2358((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
      *v16 = v52;
    }
    v52[2] = v55 + 1;
    v56 = &v52[2 * v55];
    v56[4] = v49;
    v56[5] = v51;
    swift_endAccess(v66);
    sub_1000C7A20(a1, 0);
  }
}

uint64_t sub_10018E89C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v31 = a8;
  v33 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v17 - 8);
  v36 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a3 + 40);
  v20 = swift_allocObject(&unk_1006099E8, 80, 7);
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = a5;
  *(_QWORD *)(v20 + 32) = a6;
  *(_QWORD *)(v20 + 40) = a3;
  *(_QWORD *)(v20 + 48) = a1;
  v21 = a2 & 1;
  *(_BYTE *)(v20 + 56) = a2 & 1;
  *(_QWORD *)(v20 + 64) = a7;
  v22 = a7;
  v23 = v31;
  *(_QWORD *)(v20 + 72) = v31;
  aBlock[4] = sub_1001965B0;
  v40 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609A00;
  v32 = _Block_copy(aBlock);
  swift_retain(a4);
  sub_10002EF2C(a5, a6);
  swift_retain(a3);
  sub_100196278(a1, v21);
  swift_retain(v22);
  v24 = swift_retain(v23);
  static DispatchQoS.unspecified.getter(v24);
  v38 = _swiftEmptyArrayStorage;
  v25 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100004828((uint64_t *)&unk_1006308D0);
  v27 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v33, v25);
  v29 = v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v32);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v28);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v36);
  return swift_release(v40);
}

void sub_10018EAF8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  Class isa;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::String v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  void *object;
  Swift::String v98;
  uint64_t v99;
  Swift::String v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t);
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137[24];
  char v138[24];
  char v139[8];

  v122 = a8;
  v124 = a7;
  LODWORD(v126) = a6;
  v123 = a5;
  v125 = a4;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPError(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v113 - v20;
  v22 = type metadata accessor for DIPError.Code(0);
  v127 = *(_QWORD *)(v22 - 8);
  v128 = v22;
  __chkstk_darwin(v22);
  v129 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_beginAccess(a1 + 16, v139, 0, 0);
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    if (a2)
    {
      v26 = v129;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v127 + 104))(v129, enum case for DIPError.Code.internalError(_:), v128, v24);
      swift_errorRetain(v25);
      swift_errorRetain(v25);
      v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v28 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v29 = swift_allocError(v15, v28, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100550770, v25, v26, 0, v27, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000018, 0x8000000100550860, 870);
      a2(v29);
      swift_errorRelease(v25);
      swift_errorRelease(v29);
    }
  }
  else
  {
    v117 = v19;
    v113 = v21;
    v116 = v14;
    v114 = v12;
    v115 = v11;
    v118 = v16;
    v119 = v15;
    v121 = a3;
    v120 = a2;
    v30 = sub_100004828((uint64_t *)&unk_1006325A0);
    v31 = sub_100004828((uint64_t *)&unk_100633440);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(_QWORD *)(v32 + 72);
    v34 = *(unsigned __int8 *)(v32 + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = swift_allocObject(v30, v35 + 2 * v33, v34 | 7);
    *(_OWORD *)(v36 + 16) = xmmword_1005208D0;
    v37 = v36 + v35;
    v38 = (uint64_t *)(v36 + v35 + *(int *)(v31 + 48));
    v39 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v40 = type metadata accessor for DIPError.PropertyKey(0);
    v41 = *(void (**)(void))(*(_QWORD *)(v40 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v37, v39, v40);
    v42 = v125;
    v44 = *(_QWORD *)(v125 + 24);
    v43 = *(void **)(v125 + 32);
    v38[3] = (uint64_t)&type metadata for String;
    *v38 = v44;
    v38[1] = (uint64_t)v43;
    v45 = v37 + v33 + *(int *)(v31 + 48);
    v41();
    v46 = *(_BYTE *)(v42 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v45 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v45 = v46;
    swift_bridgeObjectRetain(v43);
    v47 = sub_10011D314(v36);
    if ((v126 & 1) != 0)
    {
      v80 = (uint64_t)v123;
      swift_errorRetain(v123);
      v81 = sub_100193EEC(v80);
      v82 = v129;
      (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v129, enum case for DIPError.Code.internalError(_:), v128);
      v83 = (uint64_t)v117;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000014, 0x80000001005507E0, v81, v82, 0, v47, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000018, 0x8000000100550860, 888);
      v84 = v120;
      if (v120)
      {
        v85 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v86 = v119;
        v87 = swift_allocError(v119, v85, 0, 0);
        v88 = v118;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 16))(v89, v83, v86);
        v84(v87);
        sub_100196284(v80, 1);
        swift_errorRelease(v87);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v83, v86);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v83, v119);
        sub_100196284(v80, 1);
      }
    }
    else
    {
      v117 = (char *)v44;
      v123 = v43;
      v48 = v42;
      v49 = v124 + 16;
      v50 = (uint64_t *)(v122 + 16);
      swift_beginAccess(v124 + 16, v138, 0, 0);
      v126 = v49;
      v51 = *(_QWORD *)(*(_QWORD *)v49 + 16);
      swift_beginAccess(v50, v137, 0, 0);
      v52 = *v50;
      if ((unint64_t)*v50 >> 62)
      {
        if (v52 < 0)
          v111 = *v50;
        else
          v111 = v52 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v50);
        v53 = _CocoaArrayWrapper.endIndex.getter(v111);
        swift_bridgeObjectRelease(v52);
      }
      else
      {
        v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v54 = v119;
      v55 = v116;
      if (v51 == v53)
      {
        swift_bridgeObjectRelease(v47);
        v56 = v48;
        v57 = (uint64_t *)(v48 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
        swift_beginAccess(v48 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v133, 0, 0);
        v58 = *v57;
        swift_bridgeObjectRetain(v58);
        v60 = sub_1004231BC(v59);
        swift_bridgeObjectRelease(v58);
        v61 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        isa = Array._bridgeToObjectiveC()().super.isa;
        v63 = swift_release(v60);
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 328))(v63);
        v65 = v64;
        v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v65);
        objc_msgSend(v61, "setObject:forKey:", isa, v66);

        v67 = v124;
        defaultLogger()(v68);
        swift_retain_n(v67, 2);
        v69 = swift_retain(v56);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.debug.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          v72 = swift_slowAlloc(22, -1);
          v73 = swift_slowAlloc(64, -1);
          v135 = v73;
          *(_DWORD *)v72 = 136446466;
          v74 = (unint64_t)v123;
          swift_bridgeObjectRetain(v123);
          v131 = sub_1000E3AC8((uint64_t)v117, v74, &v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v72 + 4);
          swift_release(v56);
          swift_bridgeObjectRelease(v74);
          *(_WORD *)(v72 + 12) = 2082;
          swift_beginAccess(v126, &v131, 0, 0);
          v75 = *(_QWORD *)(v67 + 16);
          swift_bridgeObjectRetain(v75);
          v77 = Array.description.getter(v76, &type metadata for String);
          v79 = v78;
          swift_bridgeObjectRelease(v75);
          v130 = sub_1000E3AC8(v77, v79, &v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v72 + 14);
          swift_release_n(v67, 2);
          swift_bridgeObjectRelease(v79);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Created container %{public}s zones %{public}s", (uint8_t *)v72, 0x16u);
          swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v72, -1, -1);

        }
        else
        {

          swift_release_n(v67, 2);
          swift_release(v56);
        }
        (*(void (**)(char *, uint64_t))(v114 + 8))(v55, v115);
        if (v120)
          v120(0);
      }
      else
      {
        v133 = 0;
        v134 = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        v135 = v133;
        v136 = v134;
        v90._countAndFlagsBits = 0xD00000000000002ALL;
        v90._object = (void *)0x8000000100550880;
        String.append(_:)(v90);
        v91 = v123;
        swift_bridgeObjectRetain(v123);
        v92._countAndFlagsBits = (uint64_t)v117;
        v92._object = v91;
        String.append(_:)(v92);
        swift_bridgeObjectRelease(v91);
        v93._countAndFlagsBits = 0x746365707865203BLL;
        v93._object = (void *)0xED0000203D206465;
        String.append(_:)(v93);
        swift_beginAccess(v50, &v133, 0, 0);
        v94 = *v50;
        if ((unint64_t)*v50 >> 62)
        {
          if (v94 < 0)
            v112 = *v50;
          else
            v112 = v94 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v50);
          v95 = _CocoaArrayWrapper.endIndex.getter(v112);
          swift_bridgeObjectRelease(v94);
        }
        else
        {
          v95 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v131 = v95;
        v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v96._object;
        String.append(_:)(v96);
        swift_bridgeObjectRelease(object);
        v98._countAndFlagsBits = 0x203D20746F67202CLL;
        v98._object = (void *)0xE800000000000000;
        String.append(_:)(v98);
        v99 = v126;
        swift_beginAccess(v126, &v131, 0, 0);
        v130 = *(_QWORD *)(*(_QWORD *)v99 + 16);
        v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v101 = v100._object;
        String.append(_:)(v100);
        swift_bridgeObjectRelease(v101);
        v102 = v135;
        v103 = v136;
        v104 = v129;
        (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v129, enum case for DIPError.Code.cloudkitResponseInconsistent(_:), v128);
        v105 = v113;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v102, v103, 0, v104, 0, v47, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000018, 0x8000000100550860, 879);
        v106 = v120;
        v107 = v118;
        if (v120)
        {
          v108 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v109 = swift_allocError(v54, v108, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v107 + 16))(v110, v105, v54);
          v106(v109);
          swift_errorRelease(v109);
        }
        (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v54);
      }
    }
  }
}

uint64_t sub_10018F648(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t i;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  BOOL v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  BOOL v44;
  unint64_t j;
  unint64_t v46;
  _QWORD *v47;
  void *v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  id v54;
  id v55;
  Swift::String v56;
  CKRecordZoneSubscription v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t result;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  Class isa;
  id v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(void);
  uint64_t v98;
  void *v99;
  uint64_t v100;
  char v101;
  unint64_t v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(_QWORD);
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149[8];
  uint64_t v150;
  char v151[8];

  v4 = v2;
  v135 = a2;
  v136 = a1;
  v129 = type metadata accessor for DIPError.Code(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v130 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DIPError(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v134 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v126 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v125 - v11;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v10);
  v14 = v13;
  if (!*(_QWORD *)(v13 + 16))
  {
    v62 = swift_bridgeObjectRelease(v13);
    defaultLogger()(v62);
    v63 = swift_retain(v2);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.debug.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v147 = v67;
      v125 = v7;
      *(_DWORD *)v66 = 136446210;
      v68 = v4;
      v69 = *(_QWORD *)(v4 + 24);
      v70 = *(_QWORD *)(v4 + 32);
      swift_bridgeObjectRetain(v70);
      v150 = sub_1000E3AC8(v69, v70, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v66 + 4);
      swift_release(v68);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No subscriptions required in container %{public}s; skipping subscription creation",
        v66,
        0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);

      result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v12, v125);
    }
    else
    {

      swift_release(v4);
      result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v12, v7);
    }
    if (v136)
      return ((uint64_t (*)(_QWORD))v136)(0);
    return result;
  }
  v125 = v7;
  v15 = swift_allocObject(&unk_100609858, 24, 7);
  v127 = v15;
  *(_QWORD *)(v15 + 16) = _swiftEmptyArrayStorage;
  v16 = (uint64_t *)(v15 + 16);
  v17 = *(_QWORD *)(v14 + 64);
  v142 = v14 + 64;
  v18 = 1 << *(_BYTE *)(v14 + 32);
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v20 = v19 & v17;
  v21 = v4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName;
  v144 = v4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs;
  swift_beginAccess(v4 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, &v150, 0, 0);
  v140 = v21;
  swift_beginAccess(v21, v149, 0, 0);
  v22 = 0;
  v143 = (unint64_t)(v18 + 63) >> 6;
  v138 = v4;
  v141 = v14;
  v139 = v16;
  if (v20)
    goto LABEL_51;
LABEL_8:
  v23 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v23 >= v143)
  {
LABEL_55:
    v72 = swift_release(v14);
    v22 = *v16;
    v3 = v126;
    if (!((unint64_t)*v16 >> 62))
    {
      if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_74:
        defaultLogger()(v72);
        v118 = swift_retain(v4);
        v119 = Logger.logObject.getter(v118);
        v120 = static os_log_type_t.debug.getter(v119);
        if (os_log_type_enabled(v119, v120))
        {
          v121 = (uint8_t *)swift_slowAlloc(12, -1);
          v122 = swift_slowAlloc(32, -1);
          v147 = v122;
          *(_DWORD *)v121 = 136446210;
          v123 = *(_QWORD *)(v4 + 24);
          v124 = *(_QWORD *)(v4 + 32);
          swift_bridgeObjectRetain(v124);
          v146 = sub_1000E3AC8(v123, v124, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v121 + 4);
          swift_release(v4);
          swift_bridgeObjectRelease(v124);
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "No subscriptions to create in container %{public}s; skipping subscription creation",
            v121,
            0xCu);
          swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v121, -1, -1);

        }
        else
        {

          swift_release(v4);
        }
        (*(void (**)(void *, uint64_t))(v134 + 8))(v3, v125);
        if (v136)
          v136(0);
        v83 = v127;
        return swift_release(v83);
      }
LABEL_57:
      v73 = objc_msgSend(objc_allocWithZone((Class)CKModifySubscriptionsOperation), "init");
      v74 = v127;
      v75 = *(_QWORD *)(v127 + 16);
      sub_10001CFF8(0, &qword_100636CD0, CKSubscription_ptr);
      swift_bridgeObjectRetain(v75);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v75);
      objc_msgSend(v73, "setSubscriptionsToSave:", isa);

      v77 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), "init");
      objc_msgSend(v77, "setQualityOfService:", 17);
      objc_msgSend(v73, "setConfiguration:", v77);
      v78 = swift_allocObject(&unk_100609740, 24, 7);
      *(_QWORD *)(v78 + 16) = 0;
      v79 = swift_allocObject(&unk_100609880, 32, 7);
      *(_QWORD *)(v79 + 16) = v4;
      *(_QWORD *)(v79 + 24) = v78;
      swift_retain(v4);
      swift_retain(v78);
      CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter(sub_10019638C, v79);
      v80 = (_QWORD *)swift_allocObject(&unk_1006098A8, 56, 7);
      v80[2] = v4;
      v80[3] = v78;
      v81 = (uint64_t)v136;
      v82 = v135;
      v80[4] = v136;
      v80[5] = v82;
      v80[6] = v74;
      swift_retain(v4);
      swift_retain(v78);
      sub_10002EF2C(v81, v82);
      swift_retain(v74);
      CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_100196414, v80);
      sub_1001927C0((uint64_t)v73, 0);
      swift_release(v74);

      v83 = v78;
      return swift_release(v83);
    }
LABEL_70:
    if (v22 < 0)
      v116 = v22;
    else
      v116 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v117 = _CocoaArrayWrapper.endIndex.getter(v116);
    v72 = swift_bridgeObjectRelease(v22);
    if (!v117)
      goto LABEL_74;
    goto LABEL_57;
  }
  v24 = *(_QWORD *)(v142 + 8 * v23);
  ++v22;
  if (!v24)
  {
    v22 = v23 + 1;
    if (v23 + 1 >= v143)
      goto LABEL_55;
    v24 = *(_QWORD *)(v142 + 8 * v22);
    if (!v24)
    {
      v22 = v23 + 2;
      if (v23 + 2 >= v143)
        goto LABEL_55;
      v24 = *(_QWORD *)(v142 + 8 * v22);
      if (!v24)
      {
        v25 = v23 + 3;
        if (v25 < v143)
        {
          v24 = *(_QWORD *)(v142 + 8 * v25);
          if (v24)
          {
            v22 = v25;
            goto LABEL_21;
          }
          while (1)
          {
            v22 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_69;
            if (v22 >= v143)
              goto LABEL_55;
            v24 = *(_QWORD *)(v142 + 8 * v22);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        goto LABEL_55;
      }
    }
  }
LABEL_21:
  v20 = (v24 - 1) & v24;
  for (i = __clz(__rbit64(v24)) + (v22 << 6); ; i = v61 | (v22 << 6))
  {
    v27 = 16 * i;
    v28 = (uint64_t *)(*(_QWORD *)(v14 + 48) + v27);
    v29 = *v28;
    v30 = (void *)v28[1];
    v31 = (uint64_t *)(*(_QWORD *)(v14 + 56) + v27);
    v3 = (void *)v31[1];
    v145 = *v31;
    v32 = *(_QWORD *)v144;
    if (*(_QWORD *)(*(_QWORD *)v144 + 16))
    {
      Hasher.init(_seed:)(&v147, *(_QWORD *)(v32 + 40));
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRetain(v32);
      String.hash(into:)(&v147, v29, v30);
      v33 = Hasher._finalize()();
      v34 = -1 << *(_BYTE *)(v32 + 32);
      v35 = v33 & ~v34;
      v36 = v32 + 56;
      if (((*(_QWORD *)(v32 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
      {
        v37 = *(_QWORD *)(v32 + 48);
        v38 = (_QWORD *)(v37 + 16 * v35);
        v39 = (void *)v38[1];
        v40 = *v38 == v29 && v39 == v30;
        if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v38, v39, v29, v30, 0) & 1) != 0)
        {
LABEL_7:
          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v30);
          v4 = v138;
          v14 = v141;
          v16 = v139;
          if (!v20)
            goto LABEL_8;
          goto LABEL_51;
        }
        v137 = ~v34;
        v41 = (v35 + 1) & ~v34;
        if (((*(_QWORD *)(v36 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
        {
          v42 = (_QWORD *)(v37 + 16 * v41);
          v43 = (void *)v42[1];
          v44 = *v42 == v29 && v43 == v30;
          if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v42, v43, v29, v30, 0) & 1) != 0)
            goto LABEL_7;
          for (j = v41 + 1; ; j = v46 + 1)
          {
            v46 = j & v137;
            if (((*(_QWORD *)(v36 + (((j & v137) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v137)) & 1) == 0)
              break;
            v47 = (_QWORD *)(v37 + 16 * v46);
            v48 = (void *)v47[1];
            v49 = *v47 == v29 && v48 == v30;
            if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, v29, v30, 0) & 1) != 0)
              goto LABEL_7;
          }
        }
        swift_bridgeObjectRelease(v32);
        v4 = v138;
      }
      else
      {
        swift_bridgeObjectRelease(v32);
      }
      v14 = v141;
      v16 = v139;
    }
    else
    {
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v3);
    }
    v50 = *(_QWORD **)v140;
    v51 = v145;
    if (!*(_QWORD *)(*(_QWORD *)v140 + 16))
    {
      v84 = v4;
      v85 = v30;
      goto LABEL_60;
    }
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v50);
    v52 = sub_1004A8604(v51, (uint64_t)v3);
    if ((v53 & 1) == 0)
      break;
    v54 = *(id *)(v50[7] + 8 * v52);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease(v50);
    sub_10001CFF8(0, &qword_100636CC8, CKRecordZoneSubscription_ptr);
    v55 = v54;
    v56._countAndFlagsBits = v29;
    v56._object = v30;
    v57.super.super.isa = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v55, v56).super.super.isa;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57.super.super.isa);
    v59 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v58 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v59 >= v58 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
    v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57.super.super.isa);
    specialized Array._endMutation()(v60);

    if (!v20)
      goto LABEL_8;
LABEL_51:
    v61 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
  }
  v84 = v4;
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v3);
  v85 = v50;
LABEL_60:
  swift_bridgeObjectRelease(v85);
  v86 = sub_100004828((uint64_t *)&unk_1006325A0);
  v87 = sub_100004828((uint64_t *)&unk_100633440);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = *(_QWORD *)(v88 + 72);
  v90 = *(unsigned __int8 *)(v88 + 80);
  v91 = (v90 + 32) & ~v90;
  v92 = swift_allocObject(v86, v91 + 2 * v89, v90 | 7);
  *(_OWORD *)(v92 + 16) = xmmword_1005208D0;
  v93 = v92 + v91;
  v94 = (uint64_t *)(v92 + v91 + *(int *)(v87 + 48));
  v95 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
  v96 = type metadata accessor for DIPError.PropertyKey(0);
  v97 = *(void (**)(void))(*(_QWORD *)(v96 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v97)(v93, v95, v96);
  v99 = *(void **)(v84 + 32);
  v144 = *(_QWORD *)(v84 + 24);
  v98 = v144;
  v94[3] = (uint64_t)&type metadata for String;
  *v94 = v98;
  v94[1] = (uint64_t)v99;
  v100 = v93 + v89 + *(int *)(v87 + 48);
  v97();
  v101 = *(_BYTE *)(v84 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
  *(_QWORD *)(v100 + 24) = &type metadata for DIPCloudContainerState;
  *(_BYTE *)v100 = v101;
  swift_bridgeObjectRetain(v99);
  v102 = sub_10011D314(v92);
  v147 = 0;
  v148 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v148);
  v147 = 0xD00000000000001ALL;
  v148 = 0x8000000100550790;
  v103._countAndFlagsBits = v145;
  v103._object = v3;
  String.append(_:)(v103);
  swift_bridgeObjectRelease(v3);
  v104._countAndFlagsBits = 0x746E6F63206E6920;
  v104._object = (void *)0xEE002072656E6961;
  String.append(_:)(v104);
  swift_bridgeObjectRetain(v99);
  v105._countAndFlagsBits = v144;
  v105._object = v99;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v99);
  v106 = v147;
  v107 = v148;
  v108 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v130, enum case for DIPError.Code.unexpectedDaemonState(_:), v129);
  v109 = v131;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v106, v107, 0, v108, 0, v102, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000020, 0x80000001005507B0, 920);
  v110 = v133;
  v111 = v132;
  if (v136)
  {
    v112 = v136;
    v113 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v114 = swift_allocError(v110, v113, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v115, v109, v110);
    v112(v114);
    swift_errorRelease(v114);
  }
  (*(void (**)(char *, uint64_t))(v111 + 8))(v109, v110);
  swift_release(v127);
  v83 = v141;
  return swift_release(v83);
}

uint64_t sub_1001903E4(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v30 = a8;
  v31 = a9;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v19 - 8);
  v34 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a5 + 40);
  v22 = swift_allocObject(a7, 64, 7);
  *(_QWORD *)(v22 + 16) = a3;
  a4 &= 1u;
  *(_BYTE *)(v22 + 24) = a4;
  *(_QWORD *)(v22 + 32) = a5;
  *(_QWORD *)(v22 + 40) = a1;
  *(_QWORD *)(v22 + 48) = a2;
  *(_QWORD *)(v22 + 56) = a6;
  aBlock[4] = v30;
  v38 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = v31;
  v23 = _Block_copy(aBlock);
  sub_1000C7950(a3, a4);
  swift_retain(a5);
  swift_bridgeObjectRetain(a2);
  v24 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100004828((uint64_t *)&unk_1006308D0);
  v27 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v16, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v18, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
  return swift_release(v38);
}

uint64_t sub_10019060C(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  char v40[8];
  uint64_t v41[3];

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v21 = (uint64_t *)(a6 + 16);
    v22 = swift_errorRetain(a1);
    defaultLogger()(v22);
    sub_1000C7950(a1, 1);
    swift_bridgeObjectRetain(a5);
    sub_1000C7950(a1, 1);
    swift_bridgeObjectRetain(a5);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v36 = (uint64_t *)(a6 + 16);
      v27 = v26;
      v35 = swift_slowAlloc(64, -1);
      v41[0] = v35;
      *(_DWORD *)v27 = 136315394;
      swift_bridgeObjectRetain(a5);
      v37 = sub_1000E3AC8(a4, a5, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v27 + 12) = 2080;
      swift_getErrorValue(a1, v40, v39);
      v28 = Error.localizedDescription.getter(v39[1], v39[2]);
      v30 = v29;
      v37 = sub_1000E3AC8(v28, v29, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14);
      swift_bridgeObjectRelease(v30);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "createSubscriptions error received for subscription ID %s: %s", (uint8_t *)v27, 0x16u);
      v31 = v35;
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      v32 = v27;
      v21 = v36;
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      sub_1000C7A20(a1, 1);
      sub_1000C7A20(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_beginAccess(v21, v41, 1, 0);
    v33 = *v21;
    *v21 = (uint64_t)a1;
    return swift_errorRelease(v33);
  }
  else
  {
    v16 = a1;
    v17 = CKSubscription.subscriptionID.getter();
    v19 = v18;
    swift_beginAccess(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v41, 33, 0);
    sub_1004E5D2C(&v37, v17, v19);
    swift_endAccess(v41);
    sub_1000C7A20(a1, 0);
    return swift_bridgeObjectRelease(v38);
  }
}

uint64_t sub_100190910(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v30 = a7;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v15 - 8);
  v34 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a3 + 40);
  v18 = swift_allocObject(&unk_1006098D0, 72, 7);
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  *(_QWORD *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a3;
  v19 = a6;
  *(_QWORD *)(v18 + 48) = a1;
  v20 = a2 & 1;
  *(_BYTE *)(v18 + 56) = a2 & 1;
  v21 = v30;
  *(_QWORD *)(v18 + 64) = v30;
  aBlock[4] = sub_100196488;
  v38 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_1006098E8;
  v22 = _Block_copy(aBlock);
  swift_retain(a4);
  sub_10002EF2C(a5, v19);
  swift_retain(a3);
  sub_100196278(a1, v20);
  v23 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v23);
  v36 = _swiftEmptyArrayStorage;
  v24 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100004828((uint64_t *)&unk_1006308D0);
  v26 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  v27 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v25, v26, v31, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v34);
  return swift_release(v38);
}

void sub_100190B58(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  Class isa;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  Swift::String v92;
  void *object;
  Swift::String v94;
  Swift::String v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130[24];
  char v131[24];
  char v132[24];

  v118 = a7;
  v121 = a6;
  v119 = a5;
  v120 = a4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPError(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v107 - v19;
  v21 = type metadata accessor for DIPError.Code(0);
  v122 = *(_QWORD *)(v21 - 8);
  v123 = v21;
  __chkstk_darwin(v21);
  v124 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_beginAccess(a1 + 16, v132, 0, 0);
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    if (a2)
    {
      v25 = v124;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v122 + 104))(v124, enum case for DIPError.Code.internalError(_:), v123, v23);
      swift_errorRetain(v24);
      swift_errorRetain(v24);
      v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v28 = swift_allocError(v14, v27, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100550840, v24, v25, 0, v26, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000020, 0x80000001005507B0, 956);
      a2(v28);
      swift_errorRelease(v24);
      swift_errorRelease(v28);
    }
  }
  else
  {
    v113 = v18;
    v108 = v20;
    v109 = v13;
    v110 = v11;
    v111 = v10;
    v116 = v15;
    v115 = v14;
    v114 = a3;
    v117 = a2;
    v29 = sub_100004828((uint64_t *)&unk_1006325A0);
    v30 = sub_100004828((uint64_t *)&unk_100633440);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(_QWORD *)(v31 + 72);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v29, v34 + 2 * v32, v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_1005208D0;
    v36 = v35 + v34;
    v37 = (uint64_t *)(v35 + v34 + *(int *)(v30 + 48));
    v38 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v39 = type metadata accessor for DIPError.PropertyKey(0);
    v40 = *(void (**)(void))(*(_QWORD *)(v39 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v40)(v36, v38, v39);
    v41 = v120;
    v42 = *(_QWORD *)(v120 + 24);
    v43 = *(void **)(v120 + 32);
    v37[3] = (uint64_t)&type metadata for String;
    v112 = v42;
    *v37 = v42;
    v37[1] = (uint64_t)v43;
    v44 = v36 + v32 + *(int *)(v30 + 48);
    v40();
    v45 = *(_BYTE *)(v41 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v44 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v44 = v45;
    swift_bridgeObjectRetain(v43);
    v46 = sub_10011D314(v35);
    v47 = v41;
    if ((v121 & 1) != 0)
    {
      v77 = v119;
      swift_errorRetain(v119);
      v78 = sub_100193EEC(v77);
      v79 = v124;
      (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v124, enum case for DIPError.Code.internalError(_:), v123);
      v80 = v113;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000014, 0x80000001005507E0, v78, v79, 0, v46, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000020, 0x80000001005507B0, 974);
      v81 = v117;
      if (v117)
      {
        v82 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v83 = v115;
        v84 = swift_allocError(v115, v82, 0, 0);
        v85 = v116;
        (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v86, v80, v83);
        v81(v84);
        sub_100196284(v77, 1);
        swift_errorRelease(v84);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v80, v83);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v116 + 8))(v80, v115);
        sub_100196284(v77, 1);
      }
    }
    else
    {
      v48 = v43;
      v49 = (uint64_t *)(v118 + 16);
      v50 = (_QWORD *)(v41 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess(v41 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v131, 0, 0);
      v51 = *(_QWORD *)(*v50 + 16);
      swift_beginAccess(v49, v130, 0, 0);
      v52 = *v49;
      if ((unint64_t)*v49 >> 62)
      {
        if (v52 < 0)
          v105 = *v49;
        else
          v105 = v52 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v49);
        v53 = _CocoaArrayWrapper.endIndex.getter(v105);
        swift_bridgeObjectRelease(v52);
      }
      else
      {
        v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v54 = v116;
      if (v51 == v53)
      {
        swift_bridgeObjectRelease(v46);
        v55 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v56 = *v50;
        swift_bridgeObjectRetain(*v50);
        v58 = sub_1004232A0(v57);
        swift_bridgeObjectRelease(v56);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v60 = swift_release(v58);
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 336))(v60);
        v62 = v61;
        v63 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v62);
        objc_msgSend(v55, "setObject:forKey:", isa, v63);

        v64 = v109;
        defaultLogger()(v65);
        v66 = swift_retain_n(v47, 2);
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.debug.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          v69 = swift_slowAlloc(22, -1);
          v124 = (char *)swift_slowAlloc(64, -1);
          v126 = v124;
          *(_DWORD *)v69 = 136446466;
          swift_bridgeObjectRetain(v48);
          v128 = sub_1000E3AC8(v112, (unint64_t)v48, (uint64_t *)&v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v69 + 4);
          swift_bridgeObjectRelease(v48);
          *(_WORD *)(v69 + 12) = 2080;
          v70 = *v50;
          v71 = swift_bridgeObjectRetain(*v50);
          v72 = v47;
          v73 = Set.description.getter(v71);
          v75 = v74;
          swift_bridgeObjectRelease(v70);
          v128 = sub_1000E3AC8(v73, v75, (uint64_t *)&v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v69 + 14);
          swift_release_n(v72, 2);
          swift_bridgeObjectRelease(v75);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Created container %{public}s subscriptions %s", (uint8_t *)v69, 0x16u);
          v76 = v124;
          swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          swift_slowDealloc(v69, -1, -1);

        }
        else
        {

          swift_release_n(v47, 2);
        }
        (*(void (**)(char *, uint64_t))(v110 + 8))(v64, v111);
        if (v117)
          v117(0);
      }
      else
      {
        v126 = 0;
        v127 = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        v128 = (uint64_t)v126;
        v129 = v127;
        v87._countAndFlagsBits = 0xD000000000000030;
        v87._object = (void *)0x8000000100550800;
        String.append(_:)(v87);
        swift_bridgeObjectRetain(v48);
        v88._countAndFlagsBits = v112;
        v88._object = v48;
        String.append(_:)(v88);
        swift_bridgeObjectRelease(v48);
        v89._countAndFlagsBits = 0x746365707865203BLL;
        v89._object = (void *)0xED0000203D206465;
        String.append(_:)(v89);
        swift_beginAccess(v49, &v126, 0, 0);
        v90 = *v49;
        if ((unint64_t)v90 >> 62)
        {
          if (v90 < 0)
            v106 = v90;
          else
            v106 = v90 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v90);
          v91 = _CocoaArrayWrapper.endIndex.getter(v106);
          swift_bridgeObjectRelease(v90);
        }
        else
        {
          v91 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v125 = v91;
        v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v92._object;
        String.append(_:)(v92);
        swift_bridgeObjectRelease(object);
        v94._countAndFlagsBits = 0x203D20746F67202CLL;
        v94._object = (void *)0xE800000000000000;
        String.append(_:)(v94);
        v125 = *(_QWORD *)(*v50 + 16);
        v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v96 = v95._object;
        String.append(_:)(v95);
        swift_bridgeObjectRelease(v96);
        v97 = v128;
        v98 = v129;
        v99 = v124;
        (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v124, enum case for DIPError.Code.cloudkitResponseInconsistent(_:), v123);
        v100 = v108;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v97, v98, 0, v99, 0, v46, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000020, 0x80000001005507B0, 965);
        v101 = v115;
        if (v117)
        {
          v102 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v103 = swift_allocError(v101, v102, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v104, v100, v101);
          v117(v103);
          swift_errorRelease(v103);
        }
        (*(void (**)(char *, uint64_t))(v54 + 8))(v100, v101);
      }
    }
  }
}

uint64_t sub_100191614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  sub_100194BD8();
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 312))();
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v28 = a1;
    v29 = a2;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
    v9 = (void **)(v7 + 40);
    do
    {
      v10 = (uint64_t)*(v9 - 1);
      v11 = *v9;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
      v14 = v13;
      swift_bridgeObjectRetain(v11);
      v15._countAndFlagsBits = v10;
      v15._object = v11;
      v16._countAndFlagsBits = v12;
      v16._object = v14;
      isa = CKRecordZoneID.init(zoneName:ownerName:)(v15, v16).super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(isa);
      v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, isa);
      specialized ContiguousArray._endMutation()(v19);
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v7);
    a1 = v28;
    a2 = v29;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  v20 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordZonesOperation), "init");
  sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  objc_msgSend(v20, "setRecordZoneIDsToDelete:", v21);

  v22 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), "init");
  objc_msgSend(v22, "setQualityOfService:", 17);
  objc_msgSend(v20, "setConfiguration:", v22);
  v23 = swift_allocObject(&unk_1006096F0, 24, 7);
  *(_QWORD *)(v23 + 16) = _swiftEmptyArrayStorage;
  v24 = swift_allocObject(&unk_100609740, 24, 7);
  *(_QWORD *)(v24 + 16) = 0;
  v25 = (_QWORD *)swift_allocObject(&unk_100609768, 40, 7);
  v25[2] = v3;
  v25[3] = v23;
  v25[4] = v24;
  swift_retain(v3);
  swift_retain(v23);
  swift_retain(v24);
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter(sub_1001962B8, v25);
  v26 = (_QWORD *)swift_allocObject(&unk_100609790, 56, 7);
  v26[2] = v3;
  v26[3] = v24;
  v26[4] = a1;
  v26[5] = a2;
  v26[6] = v23;
  swift_retain(v3);
  swift_retain(v23);
  swift_retain(v24);
  sub_10002EF2C(a1, a2);
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_1001962CC, v26);
  sub_1001927C0((uint64_t)v20, 0);

  swift_release(v23);
  return swift_release(v24);
}

uint64_t sub_10019190C(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a4 + 40);
  v18 = swift_allocObject(&unk_100609808, 56, 7);
  *(_QWORD *)(v18 + 16) = a2;
  a3 &= 1u;
  *(_BYTE *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a1;
  *(_QWORD *)(v18 + 48) = a6;
  aBlock[4] = sub_10019637C;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100609820;
  v19 = _Block_copy(aBlock);
  sub_100196278(a2, a3);
  swift_retain(a5);
  v20 = a1;
  v21 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100004828((uint64_t *)&unk_1006308D0);
  v24 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

uint64_t sub_100191B30(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD v50[3];
  char v51[8];
  uint64_t v52;
  uint64_t v53[3];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v25 = (uint64_t *)(a5 + 16);
    v26 = swift_errorRetain(a1);
    defaultLogger()(v26);
    sub_100196278(a1, 1);
    v27 = a4;
    sub_100196278(a1, 1);
    v28 = v27;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(8, -1);
      v47 = v10;
      v34 = (_QWORD *)v33;
      v48 = swift_slowAlloc(32, -1);
      v52 = (uint64_t)v28;
      v53[0] = v48;
      *(_DWORD *)v32 = 138412546;
      v46 = v29;
      v49 = v25;
      v35 = v28;
      v45 = v31;
      v36 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v32 + 4);
      *v34 = v28;

      *(_WORD *)(v32 + 12) = 2080;
      swift_getErrorValue(a1, v51, v50);
      v37 = Error.localizedDescription.getter(v50[1], v50[2]);
      v39 = v38;
      v52 = sub_1000E3AC8(v37, v38, v53);
      v25 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v32 + 14);
      swift_bridgeObjectRelease(v39);
      sub_100196284(a1, 1);
      sub_100196284(a1, 1);
      v40 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v45, "deleteZones error received for zone ID %@: %s", (uint8_t *)v32, 0x16u);
      v41 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v34, 1, v41);
      swift_slowDealloc(v34, -1, -1);
      v42 = v48;
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v47);
    }
    else
    {

      sub_100196284(a1, 1);
      sub_100196284(a1, 1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_beginAccess(v25, v53, 1, 0);
    v43 = *v25;
    *v25 = a1;
    return swift_errorRelease(v43);
  }
  else
  {
    v14 = (_QWORD *)(a3 + 16);
    v15 = objc_msgSend(a4, "zoneName");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    swift_beginAccess(a3 + 16, v53, 33, 0);
    v19 = *(_QWORD **)(a3 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    *(_QWORD *)(a3 + 16) = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v19 = sub_1000E2358(0, v19[2] + 1, 1, v19);
      *v14 = v19;
    }
    v22 = v19[2];
    v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      v19 = sub_1000E2358((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
      *v14 = v19;
    }
    v19[2] = v22 + 1;
    v23 = &v19[2 * v22];
    v23[4] = v16;
    v23[5] = v18;
    return swift_endAccess(v53);
  }
}

uint64_t sub_100191ED8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v29 = a7;
  v30 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v15 - 8);
  v33 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a3 + 40);
  v18 = swift_allocObject(&unk_1006097B8, 72, 7);
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  *(_QWORD *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a1;
  v19 = a2 & 1;
  *(_BYTE *)(v18 + 48) = a2 & 1;
  v20 = v29;
  *(_QWORD *)(v18 + 56) = a3;
  *(_QWORD *)(v18 + 64) = v20;
  aBlock[4] = sub_100196328;
  v37 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_1006097D0;
  v21 = _Block_copy(aBlock);
  swift_retain(a4);
  sub_10002EF2C(a5, a6);
  sub_100196278(a1, v19);
  swift_retain(a3);
  v22 = swift_retain(v20);
  static DispatchQoS.unspecified.getter(v22);
  v35 = _swiftEmptyArrayStorage;
  v23 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100004828((uint64_t *)&unk_1006308D0);
  v25 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  v26 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v30, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
  return swift_release(v37);
}

void sub_100192118(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[32];

  v78 = a7;
  LODWORD(v79) = a5;
  v82 = a3;
  v80 = type metadata accessor for DIPError(0);
  v11 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPError.Code(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v81 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_beginAccess(a1 + 16, v87, 0, 0);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    if (a2)
    {
      v22 = v81;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v18 + 104))(v81, enum case for DIPError.Code.internalError(_:), v17, v20);
      swift_errorRetain(v21);
      swift_errorRetain(v21);
      v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v25 = swift_allocError(v80, v24, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100550770, v21, v22, 0, v23, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000018, 0x8000000100550750, 1021);
      a2(v25);
      swift_errorRelease(v21);
      swift_errorRelease(v25);
    }
  }
  else
  {
    v26 = v78;
    v72 = v14;
    v73 = v13;
    v74 = a4;
    v75 = v11;
    v76 = a6;
    if ((v79 & 1) != 0)
    {
      v44 = sub_100004828((uint64_t *)&unk_1006325A0);
      v45 = sub_100004828((uint64_t *)&unk_100633440);
      v46 = *(_QWORD *)(v45 - 8);
      v78 = *(_QWORD *)(v46 + 72);
      v47 = *(unsigned __int8 *)(v46 + 80);
      v48 = (v47 + 32) & ~v47;
      v49 = swift_allocObject(v44, v48 + 2 * v78, v47 | 7);
      *(_OWORD *)(v49 + 16) = xmmword_1005208D0;
      v50 = v49 + v48;
      v51 = *(int *)(v45 + 48);
      v79 = a2;
      v52 = (_QWORD *)(v50 + v51);
      v53 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
      v54 = type metadata accessor for DIPError.PropertyKey(0);
      v55 = *(void (**)(void))(*(_QWORD *)(v54 - 8) + 104);
      ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v50, v53, v54);
      v56 = v76;
      v57 = *(_QWORD *)(v76 + 24);
      v58 = *(_QWORD *)(v76 + 32);
      v52[3] = &type metadata for String;
      *v52 = v57;
      v52[1] = v58;
      v59 = v50 + v78 + *(int *)(v45 + 48);
      v55();
      v60 = *(_BYTE *)(v56 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
      *(_QWORD *)(v59 + 24) = &type metadata for DIPCloudContainerState;
      *(_BYTE *)v59 = v60;
      v61 = v79;
      swift_bridgeObjectRetain(v58);
      v62 = v74;
      sub_100196278(v74, 1);
      v63 = sub_10011D314(v49);
      v64 = sub_100193EEC(v62);
      v65 = v81;
      (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v81, enum case for DIPError.Code.internalError(_:), v17);
      v66 = v73;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000014, 0x8000000100550730, v64, v65, 0, v63, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000018, 0x8000000100550750, 1034);
      if (v61)
      {
        v67 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v68 = v80;
        v69 = swift_allocError(v80, v67, 0, 0);
        v70 = v75;
        (*(void (**)(uint64_t, char *, uint64_t))(v75 + 16))(v71, v66, v68);
        v61(v69);
        sub_100196284(v62, 1);
        swift_errorRelease(v69);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v66, v68);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v66, v80);
        sub_100196284(v62, 1);
      }
    }
    else
    {
      v27 = v76;
      sub_100194BD8();
      v28 = v16;
      defaultLogger()(v29);
      v30 = v26;
      swift_retain_n(v26, 2);
      v31 = swift_retain(v27);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter(v32);
      v34 = a2;
      if (os_log_type_enabled(v32, v33))
      {
        v35 = swift_slowAlloc(22, -1);
        v36 = swift_slowAlloc(64, -1);
        v86 = v36;
        *(_DWORD *)v35 = 136446466;
        v79 = v34;
        v38 = *(_QWORD *)(v27 + 24);
        v37 = *(_QWORD *)(v27 + 32);
        swift_bridgeObjectRetain(v37);
        v84 = sub_1000E3AC8(v38, v37, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v35 + 4);
        swift_release(v27);
        swift_bridgeObjectRelease(v37);
        *(_WORD *)(v35 + 12) = 2082;
        swift_beginAccess(v26 + 16, &v84, 0, 0);
        v39 = *(_QWORD *)(v26 + 16);
        swift_bridgeObjectRetain(v39);
        v41 = Array.description.getter(v40, &type metadata for String);
        v43 = v42;
        swift_bridgeObjectRelease(v39);
        v83 = sub_1000E3AC8(v41, v43, &v86);
        v34 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v35 + 14);
        swift_release_n(v30, 2);
        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Deleted container %{public}s zones %{public}s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_release_n(v26, 2);
        swift_release(v27);
      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v28, v77);
      if (v34)
        v34(0);
    }
  }
}

void sub_1001927C0(uint64_t a1, char a2)
{
  objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
  __asm { BR              X10 }
}

void sub_100192834()
{
  void *v0;
  id *v1;
  void *v2;
  NSString v3;
  char v4;
  char **v5;
  id v6;

  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEF64616F6C6E776FLL);
  objc_msgSend(v2, "setName:", v3);

  v4 = (*((uint64_t (**)(id))*v1 + 44))(objc_msgSend(v0, "setGroup:", v2));
  v5 = &selRef_publicCloudDatabase;
  if ((v4 & 1) == 0)
    v5 = &selRef_privateCloudDatabase;
  v6 = objc_msgSend(v1[2], *v5);
  objc_msgSend(v6, "addOperation:", v0);

}

uint64_t sub_100192978(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  Swift::String v21;
  Swift::Bool v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  objc_class *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(_QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  objc_class *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[4];
  int v54;
  void (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t aBlock[5];
  uint64_t v68;
  Swift::OpaquePointer_optional v69;
  Swift::OpaquePointer_optional v70;

  v65 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  __chkstk_darwin(v9);
  v62 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  __chkstk_darwin(v11);
  v59 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v13 - 8);
  v57 = v13;
  __chkstk_darwin(v13);
  v15 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for DIPError.Code(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v53[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21._object = (void *)0x8000000100550650;
  v21._countAndFlagsBits = 0xD000000000000028;
  v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DIPError.Code.cloudkitAllRecordsHaveFailedToUpload(_:), v16);
    v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v24 = type metadata accessor for DIPError(0);
    v25 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v26 = swift_allocError(v24, v25, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x207364616F6C7075, 0xEE0064656C696166, 0, v19, 0, v23, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002FLL, 0x8000000100550680, 1143);
    a4(v26, 0);
    return swift_errorRelease(v26);
  }
  else
  {
    v55 = a4;
    sub_10001CFF8(0, &qword_100636CC0, CKModifyRecordsOperation_ptr);
    v69.value._rawValue = (void *)swift_bridgeObjectRetain(a1);
    v69.is_nil = 0;
    isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v69, v70).super.super.super.super.isa;
    -[objc_class setSavePolicy:](isa, "setSavePolicy:", 1);
    -[objc_class setAtomic:](isa, "setAtomic:", 0);
    defaultLogger()(-[objc_class setConfiguration:](isa, "setConfiguration:", a3));
    v29 = isa;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    v32 = a1;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      aBlock[0] = v34;
      *(_DWORD *)v33 = 136315138;
      v54 = a2;
      v35 = CKOperation.operationID.getter();
      v37 = v36;
      v66 = (_QWORD *)sub_1000E3AC8(v35, v36, aBlock);
      LOBYTE(a2) = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock, v33 + 4);

      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "The operation ID for save records is %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v15, v57);
    v38 = v55;
    v39 = v58;
    v40 = *(_QWORD *)(v58 + 40);
    v41 = swift_allocObject(&unk_1006096A0, 57, 7);
    *(_QWORD *)(v41 + 16) = v39;
    *(_QWORD *)(v41 + 24) = v29;
    *(_QWORD *)(v41 + 32) = v38;
    v42 = v65;
    *(_QWORD *)(v41 + 40) = v65;
    *(_QWORD *)(v41 + 48) = v32;
    *(_BYTE *)(v41 + 56) = a2;
    aBlock[4] = (uint64_t)sub_1001961D4;
    v68 = v41;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004AB190;
    aBlock[3] = (uint64_t)&unk_1006096B8;
    v43 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(v32);
    v44 = v29;
    swift_retain(v39);
    v45 = swift_retain(v42);
    v46 = v59;
    static DispatchQoS.unspecified.getter(v45);
    v66 = _swiftEmptyArrayStorage;
    v47 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = sub_100004828((uint64_t *)&unk_1006308D0);
    v49 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
    v50 = v62;
    v51 = v48;
    v52 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v51, v49, v64, v47);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v46, v50, v40, v43);
    _Block_release(v43);

    (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v50, v52);
    (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v46, v61);
    return swift_release(v68);
  }
}

uint64_t sub_100192F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  _QWORD *v13;

  v12 = swift_allocObject(&unk_1006096F0, 24, 7);
  *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
  swift_retain(v12);
  CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_100196224, v12);
  v13 = (_QWORD *)swift_allocObject(&unk_100609718, 56, 7);
  v13[2] = a1;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = v12;
  v13[6] = a5;
  swift_retain(v12);
  swift_retain(a1);
  swift_retain(a4);
  swift_bridgeObjectRetain(a5);
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_10019626C, v13);
  sub_1001927C0(a2, a6);
  return swift_release(v12);
}

uint64_t sub_10019301C(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  if ((a3 & 1) != 0)
  {
    v23 = (_QWORD *)(a4 + 16);
    swift_errorRetain(a2);
    v24 = objc_msgSend(a1, "recordName");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    swift_beginAccess(v23, &v55, 33, 0);
    v28 = (_QWORD *)*v23;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    *v23 = v28;
    v50 = v8;
    v51 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v28 = sub_1000E2358(0, v28[2] + 1, 1, v28);
      *v23 = v28;
    }
    v31 = v28[2];
    v30 = v28[3];
    if (v31 >= v30 >> 1)
    {
      v28 = sub_1000E2358((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
      *v23 = v28;
    }
    v28[2] = v31 + 1;
    v32 = &v28[2 * v31];
    v32[4] = v25;
    v32[5] = v27;
    v33 = swift_endAccess(&v55);
    defaultLogger()(v33);
    sub_1000C7950(a2, 1);
    v34 = a1;
    sub_1000C7950(a2, 1);
    v35 = v34;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v49 = swift_slowAlloc(32, -1);
      v54 = (uint64_t)v35;
      v55 = v49;
      *(_DWORD *)v38 = 138412546;
      v48 = v36;
      v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 4);
      *v39 = v35;

      *(_WORD *)(v38 + 12) = 2080;
      swift_getErrorValue(a2, v53, v52);
      v41 = Error.localizedDescription.getter(v52[1], v52[2]);
      v43 = v42;
      v54 = sub_1000E3AC8(v41, v42, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 14);
      swift_bridgeObjectRelease(v43);
      sub_1000C7A20(a2, 1);
      sub_1000C7A20(a2, 1);
      v44 = v48;
      _os_log_impl((void *)&_mh_execute_header, v48, v37, "Received an error while saving record %@ %s", (uint8_t *)v38, 0x16u);
      v45 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v39, 1, v45);
      swift_slowDealloc(v39, -1, -1);
      v46 = v49;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      sub_1000C7A20(a2, 1);
    }
    else
    {
      sub_1000C7A20(a2, 1);

      sub_1000C7A20(a2, 1);
      sub_1000C7A20(a2, 1);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v12, v50);
  }
  else
  {
    v15 = a2;
    defaultLogger()(v15);
    v16 = v15;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      v51 = v9;
      *(_DWORD *)v19 = 138412290;
      v21 = objc_msgSend(v16, "recordID");
      v55 = (uint64_t)v21;
      v9 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v19 + 4);
      *v20 = v21;
      sub_1000C7A20(a2, 0);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ successfully saved", v19, 0xCu);
      v22 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      sub_1000C7A20(a2, 0);
    }
    else
    {
      sub_1000C7A20(a2, 0);
      sub_1000C7A20(a2, 0);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t sub_10019351C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint8_t *v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  char v112[24];
  uint64_t v113;
  uint64_t v114;
  char v115[24];
  char v116[32];

  v106 = a1;
  v107 = a6;
  v110 = a5;
  v111 = a4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v104 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v105 = (char *)&v103 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v103 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v103 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v103 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v103 - v25;
  v108 = type metadata accessor for DIPError.Code(0);
  v27 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v109 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_leave(*(dispatch_group_t *)(a3 + 48));
  if ((a2 & 1) != 0)
  {
    v55 = sub_100004828((uint64_t *)&unk_1006325A0);
    v56 = sub_100004828((uint64_t *)&unk_100633440);
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(_QWORD *)(v57 + 72);
    v59 = *(unsigned __int8 *)(v57 + 80);
    v60 = (v59 + 32) & ~v59;
    v61 = swift_allocObject(v55, v60 + 2 * v58, v59 | 7);
    *(_OWORD *)(v61 + 16) = xmmword_1005208D0;
    v62 = v61 + v60;
    v63 = (_QWORD *)(v62 + *(int *)(v56 + 48));
    v64 = enum case for DIPError.PropertyKey.cloudContainerName(_:);
    v65 = type metadata accessor for DIPError.PropertyKey(0);
    v66 = *(void (**)(void))(*(_QWORD *)(v65 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v62, v64, v65);
    v67 = *(_QWORD *)(a3 + 24);
    v68 = *(_QWORD *)(a3 + 32);
    v63[3] = &type metadata for String;
    *v63 = v67;
    v63[1] = v68;
    v69 = v62 + v58 + *(int *)(v56 + 48);
    v66();
    v70 = *(_BYTE *)(a3 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_state);
    *(_QWORD *)(v69 + 24) = &type metadata for DIPCloudContainerState;
    *(_BYTE *)v69 = v70;
    v71 = v106;
    sub_100196278(v106, 1);
    swift_bridgeObjectRetain(v68);
    v72 = sub_10011D314(v61);
    v73 = sub_100193EEC(v71);
    v74 = v109;
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v109, enum case for DIPError.Code.internalError(_:), v108);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v77 = swift_allocError(v75, v76, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000014, 0x80000001005506D0, v73, v74, 0, v72, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002FLL, 0x8000000100550680, 1181);
    v111(v77, 0);
    swift_errorRelease(v77);
    return sub_100196284(v71, 1);
  }
  else
  {
    v106 = v27;
    v30 = defaultLogger()(v29);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Received a success from cloudkit, will check if there are any partial upload failures...", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }
    v34 = (_QWORD *)(v107 + 16);

    v35 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v36 = v35(v26, v10);
    v37 = defaultLogger()(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Checking if all files have failed to upload.", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v35(v24, v10);
    swift_beginAccess(v34, v116, 0, 0);
    v42 = *(_QWORD *)(*v34 + 16);
    if ((unint64_t)a7 >> 62)
    {
      if (a7 < 0)
        v102 = a7;
      else
        v102 = a7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a7);
      v43 = _CocoaArrayWrapper.endIndex.getter(v102);
      v41 = swift_bridgeObjectRelease(a7);
    }
    else
    {
      v43 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v44 = v111;
    if (v42 == v43)
    {
      v45 = defaultLogger()(v41);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "All the files have failed to upload.", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      v35(v21, v10);
      v49 = v109;
      (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v109, enum case for DIPError.Code.cloudkitServerUnavailable(_:), v108);
      v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v51 = type metadata accessor for DIPError(0);
      v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v53 = swift_allocError(v51, v52, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x80000001005506B0, 0, v49, 0, v50, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002FLL, 0x8000000100550680, 1190);
      v44(v53, 0);
      return swift_errorRelease(v53);
    }
    else
    {
      v78 = defaultLogger()(v41);
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.debug.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "There has been at least one successful record upload.. Checking if there are any record upload failures", v81, 2u);
        swift_slowDealloc(v81, -1, -1);
      }

      v35(v18, v10);
      swift_beginAccess(v34, v115, 0, 0);
      if (*(_QWORD *)(*v34 + 16))
      {
        defaultLogger()(v82);
        v83 = v107;
        v84 = swift_retain(v107);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.debug.getter(v85);
        if (os_log_type_enabled(v85, v86))
        {
          v87 = v83;
          v88 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v88 = 134217984;
          swift_beginAccess(v34, v112, 0, 0);
          v113 = *(_QWORD *)(*(_QWORD *)(v87 + 16) + 16);
          v44 = v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v88 + 4);
          swift_release(v87);
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "%ld have failed to upload. Returning a partial upload failure error.", v88, 0xCu);
          swift_slowDealloc(v88, -1, -1);

        }
        else
        {

          swift_release(v83);
        }
        v94 = v108;
        v95 = v109;
        v96 = v106;
        v35(v105, v10);
        (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:), v94);
        v97 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v98 = type metadata accessor for DIPError(0);
        v99 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v100 = swift_allocError(v98, v99, 0, 0);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x207364616F6C7075, 0xEE0064656C696166, 0, v95, 0, v97, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000002FLL, 0x8000000100550680, 1199);
        swift_beginAccess(v34, &v113, 0, 0);
        v101 = *v34;
        swift_bridgeObjectRetain(*v34);
        v44(v100 | 0x8000000000000000, v101);
        swift_errorRelease(v100);
        return swift_bridgeObjectRelease(v101);
      }
      else
      {
        v89 = v104;
        v90 = defaultLogger()(v82);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.debug.getter(v91);
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v93 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "All uploads successfully completed", v93, 2u);
          swift_slowDealloc(v93, -1, -1);
        }

        v35(v89, v10);
        return ((uint64_t (*)(unint64_t, _QWORD))v44)(0xF000000000000007, 0);
      }
    }
  }
}

uint64_t sub_100193EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unsigned int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _OWORD v92[4];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  _QWORD v97[3];
  char v98[8];

  v84 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for DIPError(0);
  v5 = *(_QWORD *)(v91 - 8);
  v6 = __chkstk_darwin(v91);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v90 = (char *)&v80 - v9;
  v10 = type metadata accessor for DIPError.PropertyKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPError.Code(0);
  v89 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v82 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v88 = (char *)&v80 - v17;
  v83 = a1;
  v18 = (void *)_convertErrorToNSError(_:)(a1);
  v85 = sub_10011D314((uint64_t)_swiftEmptyArrayStorage);
  v87 = v18;
  v19 = objc_msgSend(v18, "code");
  v86 = v14;
  switch((unint64_t)v19)
  {
    case 1uLL:
    case 0xFuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitInternalError(_:);
      goto LABEL_3;
    case 2uLL:
    case 0x16uLL:
      v48 = v4;
      v49 = objc_msgSend(v87, "userInfo");
      v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
      v53 = v52;
      if (!*(_QWORD *)(v50 + 16) || (v54 = sub_1004A8604(v51, v52), (v55 & 1) == 0))
      {
        v93 = 0u;
        v94 = 0u;
        swift_bridgeObjectRelease(v53);
        swift_bridgeObjectRelease(v50);
        goto LABEL_24;
      }
      sub_10002EDBC(*(_QWORD *)(v50 + 56) + 32 * v54, (uint64_t)&v93);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v50);
      if (!*((_QWORD *)&v94 + 1))
      {
LABEL_24:
        sub_100008030((uint64_t)&v93, (uint64_t *)&unk_1006371E0);
        goto LABEL_25;
      }
      v56 = sub_10001CFF8(0, &qword_100636CB0, NSDictionary_ptr);
      if ((swift_dynamicCast(v92, &v93, (char *)&type metadata for Any + 8, v56, 6) & 1) == 0)
      {
LABEL_25:
        v4 = v48;
        v22 = v88;
        v23 = v83;
        v24 = v82;
        v21 = v89;
        v14 = v86;
        (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for DIPError.Code.internalError(_:), v86);
        goto LABEL_5;
      }
      v57 = *(void **)&v92[0];
      v58 = NSDictionary.makeIterator()();
      NSDictionary.Iterator.next()(v92);
      sub_1000A1F54((uint64_t)v92, (uint64_t)&v93, &qword_100636CB8);
      while (*((_QWORD *)&v94 + 1))
      {
        sub_10000491C(&v95, v92);
        v59 = sub_100004828((uint64_t *)&unk_100633430);
        if (swift_dynamicCast(&v96, v92, (char *)&type metadata for Any + 8, v59, 6))
        {
          v79 = v96;
          swift_bridgeObjectRelease(v85);
          v45 = sub_100193EEC(v79);

          swift_release(v58);
          swift_errorRelease(v79);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v93);
          return v45;
        }
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v93);
        NSDictionary.Iterator.next()(v92);
        sub_1000A1F54((uint64_t)v92, (uint64_t)&v93, &qword_100636CB8);
      }
      swift_release(v58);

      v60 = v89;
      v61 = v88;
      v62 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for DIPError.Code.internalError(_:), v86);
      v21 = v60;
      v4 = v48;
      v14 = v62;
      v22 = v61;
LABEL_4:
      v23 = v83;
      v24 = v82;
LABEL_5:
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v22, v14);
      swift_errorRetain(v23);
      v25 = v90;
      v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x80000001005505B0, v23, v24, 0, v85, 0xD000000000000057, 0x80000001005505D0, 0xD00000000000001ALL, 0x8000000100550630, 1388);
      defaultLogger()(v26);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v25, v91);
      swift_errorRetain(v23);
      v27 = swift_errorRetain(v23);
      v28 = v4;
      v29 = Logger.logObject.getter(v27);
      v30 = static os_log_type_t.debug.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(64, -1);
        v80 = v2;
        v85 = v32;
        *(_QWORD *)&v93 = v32;
        *(_DWORD *)v31 = 136315394;
        swift_getErrorValue(v23, v98, v97);
        v33 = Error.localizedDescription.getter(v97[1], v97[2]);
        v35 = v34;
        *(_QWORD *)&v92[0] = sub_1000E3AC8(v33, v34, (uint64_t *)&v93);
        v36 = v91;
        v81 = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, (char *)v92 + 8, v31 + 4);
        swift_bridgeObjectRelease(v35);
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        *(_WORD *)(v31 + 12) = 2080;
        v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v38 = Error.localizedDescription.getter(v36, v37);
        v40 = v39;
        *(_QWORD *)&v92[0] = sub_1000E3AC8(v38, v39, (uint64_t *)&v93);
        v5 = v81;
        v21 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, (char *)v92 + 8, v31 + 14);
        swift_bridgeObjectRelease(v40);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v36);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Converting CloudKit error [%s] to DIPError [%s]", (uint8_t *)v31, 0x16u);
        v41 = v85;
        swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        v42 = v31;
        v22 = v88;
        swift_slowDealloc(v42, -1, -1);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v28, v84);
      }
      else
      {
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v91);

        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v84);
      }
      v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v44 = v91;
      v45 = swift_allocError(v91, v43, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v46, v90, v44);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v86);
      return v45;
    case 3uLL:
    case 4uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.networkTimeOut(_:);
      goto LABEL_3;
    case 6uLL:
    case 0x17uLL:
      v63 = v14;
      v64 = v4;
      v80 = v2;
      v81 = v5;
      (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for DIPError.Code.cloudkitServerUnavailable(_:), v63);
      v65 = objc_msgSend(v87, "userInfo");
      goto LABEL_27;
    case 7uLL:
      v66 = v14;
      v64 = v4;
      v80 = v2;
      v81 = v5;
      (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for DIPError.Code.cloudkitRateLimited(_:), v66);
      v65 = objc_msgSend(v87, "userInfo");
LABEL_27:
      v67 = v65;
      v68 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorRetryAfterKey);
      v71 = v70;
      if (*(_QWORD *)(v68 + 16) && (v72 = sub_1004A8604(v69, v70), (v73 & 1) != 0))
      {
        sub_10002EDBC(*(_QWORD *)(v68 + 56) + 32 * v72, (uint64_t)&v93);
      }
      else
      {
        v93 = 0u;
        v94 = 0u;
      }
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(v68);
      if (*((_QWORD *)&v94 + 1))
      {
        v74 = sub_10001CFF8(0, &qword_100636CA8, NSNumber_ptr);
        if ((swift_dynamicCast(v92, &v93, (char *)&type metadata for Any + 8, v74, 6) & 1) != 0)
        {
          v75 = *(void **)&v92[0];
          (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v10);
          objc_msgSend(v75, "doubleValue");
          *((_QWORD *)&v94 + 1) = &type metadata for Double;
          *(_QWORD *)&v93 = v76;
          sub_10000491C(&v93, v92);
          v77 = v85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
          v96 = v77;
          sub_1004811C4(v92, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
          v85 = v96;
          swift_bridgeObjectRelease(0x8000000000000000);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

        }
      }
      else
      {
        sub_100008030((uint64_t)&v93, (uint64_t *)&unk_1006371E0);
      }
      v5 = v81;
      v2 = v80;
      v4 = v64;
      v14 = v86;
      v21 = v89;
      v22 = v88;
      goto LABEL_4;
    case 9uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.invalidAppleAccount(_:);
      goto LABEL_3;
    case 0xBuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitRecordDoesNotExist(_:);
      goto LABEL_3;
    case 0xCuLL:
    case 0x18uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.badLogic(_:);
      goto LABEL_3;
    case 0xEuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitServerRecordChanged(_:);
      goto LABEL_3;
    case 0x12uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitIncompatibleVersion(_:);
      goto LABEL_3;
    case 0x14uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitOperationCancelled(_:);
      goto LABEL_3;
    case 0x15uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitChangeTokenExpired(_:);
      goto LABEL_3;
    case 0x1AuLL:
    case 0x1CuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitZoneNotFound(_:);
      goto LABEL_3;
    case 0x20uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitAccountRestricted(_:);
      goto LABEL_3;
    case 0x6EuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitManateeUnavailable(_:);
      goto LABEL_3;
    case 0x6FuLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:);
      goto LABEL_3;
    case 0x70uLL:
      v20 = (unsigned int *)&enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:);
      goto LABEL_3;
    default:
      v20 = (unsigned int *)&enum case for DIPError.Code.internalError(_:);
LABEL_3:
      v21 = v89;
      v22 = v88;
      (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, *v20, v14);
      goto LABEL_4;
  }
}

void sub_100194BD8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;

  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 328))();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "removeObjectForKey:", v5);

  v6 = objc_msgSend(v1, "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 336))();
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v6, "removeObjectForKey:", v9);

  v10 = objc_msgSend(v1, "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 344))();
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v10, "removeObjectForKey:", v13);

}

void sub_100194D14()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  objc_class *v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[4];

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 328))();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend(v1, "arrayForKey:", v4);

  if (!v5)
    return;
  v6 = (char *)&type metadata for Any + 8;
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, (char *)&type metadata for Any + 8);

  v8 = (_QWORD *)sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease(v7);
LABEL_21:
    v33 = (uint64_t *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
    swift_beginAccess(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, v37, 1, 0);
    v34 = *v33;
    *v33 = (uint64_t)v8;
    swift_bridgeObjectRelease(v34);
    return;
  }
  v35 = v7;
  v10 = v7 + 32;
  while (1)
  {
    sub_10002EDBC(v10, (uint64_t)v37);
    if (!swift_dynamicCast(v36, v37, v6, &type metadata for String, 6))
      goto LABEL_6;
    v12 = v36[0];
    v13 = (void *)v36[1];
    sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v16 = v15;
    swift_bridgeObjectRetain(v13);
    v17._countAndFlagsBits = v12;
    v17._object = v13;
    v18._countAndFlagsBits = v14;
    v18._object = v16;
    v19 = CKRecordZoneID.init(zoneName:ownerName:)(v17, v18).super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v37[0] = v8;
    v22 = sub_1004A8604(v12, (uint64_t)v13);
    v23 = v8[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v8[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v8 = (_QWORD *)v37[0];
        if ((v21 & 1) == 0)
          goto LABEL_15;
      }
      else
      {
        sub_10012B208();
        v8 = (_QWORD *)v37[0];
        if ((v26 & 1) == 0)
          goto LABEL_15;
      }
    }
    else
    {
      sub_1001269F0(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_1004A8604(v12, (uint64_t)v13);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_25;
      v22 = v27;
      v8 = (_QWORD *)v37[0];
      if ((v26 & 1) == 0)
      {
LABEL_15:
        v8[(v22 >> 6) + 8] |= 1 << v22;
        v29 = (uint64_t *)(v8[6] + 16 * v22);
        *v29 = v12;
        v29[1] = (uint64_t)v13;
        *(_QWORD *)(v8[7] + 8 * v22) = v19;
        v30 = v8[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_24;
        v8[2] = v32;
        swift_bridgeObjectRetain(v13);
        goto LABEL_5;
      }
    }
    v11 = v8[7];

    *(_QWORD *)(v11 + 8 * v22) = v19;
LABEL_5:

    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000);
    v6 = (char *)&type metadata for Any + 8;
LABEL_6:
    v10 += 32;
    if (!--v9)
    {
      swift_bridgeObjectRelease(v35);
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100195028()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14[4];
  void *v15;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 336))();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend(v2, "arrayForKey:", v5);

  if (v6)
  {
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8);

    v15 = &_swiftEmptySetSingleton;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + 32;
      do
      {
        sub_10002EDBC(v9, (uint64_t)v14);
        if (swift_dynamicCast(v13, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          sub_1004E5D2C(v14, v13[0], v13[1]);
          swift_bridgeObjectRelease(v14[1]);
        }
        v9 += 32;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease(v7);
      v10 = v15;
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      v10 = &_swiftEmptySetSingleton;
    }
    v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
    swift_beginAccess(v11, v14, 1, 0);
    v12 = *v11;
    *v11 = (uint64_t)v10;
    swift_bridgeObjectRelease(v12);
  }
}

void sub_1001951B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t v8;
  int64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  CKRecordZoneID v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  objc_class *v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  NSString *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  char *v87;
  _OWORD *v88;
  uint64_t v89;
  int64_t v90;
  _QWORD v91[2];
  __int128 v92;
  _OWORD v93[2];
  uint64_t v94;
  void *v95;
  char v96;

  v84 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v2 = (uint64_t)&v75 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  (*(void (**)(void))(*(_QWORD *)v0 + 344))();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v3, "dictionaryForKey:", v6);

  if (!v7)
    return;
  v77 = v0;
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v9 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
  v11 = 0;
  v12 = *(_QWORD *)(v8 + 64);
  v82 = v8 + 64;
  v89 = v8;
  v13 = 1 << *(_BYTE *)(v8 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v88 = v93;
  v16 = &v96;
  v80 = CKCurrentUserDefaultName;
  v86 = (unint64_t)(v13 + 63) >> 6;
  v76 = v86 - 1;
  *(_QWORD *)&v10 = 136446210;
  v79 = v10;
  v87 = &v96;
LABEL_5:
  v81 = v9 & 0xC000000000000001;
  v17 = v9 & 0xFFFFFFFFFFFFFF8;
  v85 = v9;
  if (v9 < 0)
    v17 = v9;
  v78 = v17;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v90 = v11;
    v19 = v18 | (v11 << 6);
LABEL_11:
    v20 = *(_QWORD *)(v89 + 56);
    v21 = (_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v19);
    v22 = v21[1];
    *(_QWORD *)&v92 = *v21;
    *((_QWORD *)&v92 + 1) = v22;
    sub_10002EDBC(v20 + 32 * v19, (uint64_t)v88);
    swift_bridgeObjectRetain(v22);
LABEL_18:
    sub_1000A1F54((uint64_t)&v92, (uint64_t)&v94, &qword_100636C88);
    v25 = v95;
    if (!v95)
    {
      swift_release(v89);
      v74 = *(_QWORD *)(v77 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
      *(_QWORD *)(v77 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v85;
      swift_bridgeObjectRelease(v74);
      return;
    }
    v26 = v94;
    sub_10000491C(v16, &v92);
    if (swift_dynamicCast(v91, &v92, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
    {
      v27 = v91[0];
      v28 = v91[1];
      sub_10001CFF8(0, &qword_100636C90, NSKeyedUnarchiver_ptr);
      v29 = sub_10001CFF8(0, &qword_100636C98, CKServerChangeToken_ptr);
      v30 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v29, v27, v28, v29);
      v31 = v2;
      v2 = sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
      v32._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      v32._object = v33;
      v34._countAndFlagsBits = v26;
      v34._object = v25;
      v35.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v34, v32).super.isa;
      if (v30)
      {
        v43 = (_QWORD *)v85;
        if ((v85 & 0xC000000000000001) != 0)
        {
          if (v85 >= 0)
            v43 = (_QWORD *)(v85 & 0xFFFFFFFFFFFFFF8);
          v44 = v30;
          v45 = __CocoaDictionary.count.getter(v43);
          if (__OFADD__(v45, 1))
            goto LABEL_70;
          v43 = (_QWORD *)sub_100195F00((uint64_t)v43, v45 + 1);
        }
        else
        {
          v52 = v30;
        }
        LODWORD(v85) = swift_isUniquelyReferenced_nonNull_native(v43);
        *(_QWORD *)&v92 = v43;
        v54 = sub_1004A8760((uint64_t)v35.super.isa);
        v55 = v43[2];
        v56 = (v53 & 1) == 0;
        v57 = v55 + v56;
        if (__OFADD__(v55, v56))
          goto LABEL_69;
        if (v43[3] >= v57)
        {
          v2 = v31;
          if ((v85 & 1) == 0)
          {
            v73 = v53;
            sub_10012B214();
            LOBYTE(v53) = v73;
          }
        }
        else
        {
          LODWORD(v81) = v53;
          sub_1001269FC(v57, v85);
          v58 = sub_1004A8760((uint64_t)v35.super.isa);
          v59 = v53 & 1;
          LOBYTE(v53) = v81;
          if ((v81 & 1) != v59)
            goto LABEL_73;
          v54 = v58;
          v2 = v31;
        }
        v60 = (_QWORD *)v92;
        v61 = 8 * v54;
        v85 = v92;
        if ((v53 & 1) != 0)
        {
          v62 = *(_QWORD *)(v92 + 56);

          *(_QWORD *)(v62 + v61) = v30;
        }
        else
        {
          *(_QWORD *)(v92 + 8 * (v54 >> 6) + 64) |= 1 << v54;
          *(CKRecordZoneID *)(v60[6] + 8 * v54) = v35;
          *(_QWORD *)(v60[7] + 8 * v54) = v30;
          v63 = v60[2];
          v64 = __OFADD__(v63, 1);
          v65 = v63 + 1;
          if (v64)
            goto LABEL_72;
          v60[2] = v65;
          v66 = v35.super.isa;
        }

        swift_bridgeObjectRelease(0x8000000000000000);
        sub_100007F8C(v27, v28);
        v16 = v87;
        v9 = v85;
        v11 = v90;
        goto LABEL_5;
      }
      v36 = v85;
      v37 = swift_bridgeObjectRetain(v85);
      if (v81)
      {
        v38 = __CocoaDictionary.lookup(_:)(v35.super.isa, v78, v37);
        if (v38)
        {
          swift_unknownObjectRelease(v38);
          v46 = v78;
          v47 = __CocoaDictionary.count.getter(v78);
          v48 = sub_100195F00(v46, v47);
          swift_retain(v48);
          v49 = sub_1004A8760((uint64_t)v35.super.isa);
          v2 = v50;
          swift_release(v48);
          if ((v2 & 1) != 0)
          {

            v51 = *(void **)(*(_QWORD *)(v48 + 56) + 8 * v49);
            sub_1004808C0(v49, v48);

            swift_bridgeObjectRelease(v85);
            sub_100007F8C(v27, v28);
            v9 = v48;
            v2 = v31;
            v16 = v87;
            v11 = v90;
            goto LABEL_5;
          }
          goto LABEL_71;
        }
        v2 = v31;

        swift_bridgeObjectRelease(v85);
      }
      else
      {
        v40 = sub_1004A8760((uint64_t)v35.super.isa);
        v42 = v41;
        swift_bridgeObjectRelease(v36);
        v2 = v31;
        if ((v42 & 1) != 0)
        {
          v67 = v85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
          v69 = v67;
          *(_QWORD *)&v92 = v67;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10012B214();
            v69 = v92;
          }
          v70 = v69;
          v71 = *(_QWORD *)(v69 + 48);
          v85 = 8 * v40;

          v85 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + v85);
          v72 = v40;
          v9 = v70;
          sub_1004808C0(v72, v70);

          swift_bridgeObjectRelease(0x8000000000000000);
          sub_100007F8C(v27, v28);
          v16 = v87;
          v11 = v90;
          goto LABEL_5;
        }

      }
      sub_100007F8C(v27, v28);
      v16 = v87;
      v11 = v90;
    }
    else
    {
      swift_bridgeObjectRelease(v25);
      v11 = v90;
    }
  }
  v23 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_68;
  }
  if (v23 >= v86)
  {
    v90 = v11;
LABEL_17:
    v15 = 0;
    memset(v93, 0, sizeof(v93));
    v92 = 0u;
    goto LABEL_18;
  }
  v24 = *(_QWORD *)(v82 + 8 * v23);
  if (v24)
  {
LABEL_15:
    v15 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v23 << 6);
    v90 = v23;
    goto LABEL_11;
  }
  v39 = v11 + 2;
  if (v11 + 2 >= v86)
  {
LABEL_42:
    v90 = v23;
    goto LABEL_17;
  }
  v24 = *(_QWORD *)(v82 + 8 * v39);
  if (v24)
  {
LABEL_26:
    v23 = v39;
    goto LABEL_15;
  }
  if (v11 + 3 >= v86)
  {
    v90 = v11 + 2;
    goto LABEL_17;
  }
  v24 = *(_QWORD *)(v82 + 8 * (v11 + 3));
  if (v24)
  {
    v23 = v11 + 3;
    goto LABEL_15;
  }
  v39 = v11 + 4;
  if (v11 + 4 >= v86)
  {
    v90 = v11 + 3;
    goto LABEL_17;
  }
  v24 = *(_QWORD *)(v82 + 8 * v39);
  if (v24)
    goto LABEL_26;
  while (1)
  {
    v23 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v23 >= v86)
    {
      v23 = v76;
      goto LABEL_42;
    }
    v24 = *(_QWORD *)(v82 + 8 * v23);
    ++v39;
    if (v24)
      goto LABEL_15;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v2);
  __break(1u);
}

uint64_t sub_100195C00()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_retrier, &qword_100636C80);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID));
  return v0;
}

uint64_t sub_100195C8C()
{
  uint64_t v0;

  sub_100195C00();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100195CB0()
{
  return type metadata accessor for DIPCloudContainer(0);
}

uint64_t type metadata accessor for DIPCloudContainer(uint64_t a1)
{
  uint64_t result;

  result = qword_1006369A8;
  if (!qword_1006369A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DIPCloudContainer);
  return result;
}

void sub_100195CF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1005252F8;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100195D98(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_100525310;
    v4[6] = &value witness table for Builtin.BridgeObject[8];
    v4[7] = &value witness table for Builtin.BridgeObject[8];
    v4[8] = &value witness table for Builtin.BridgeObject[8];
    v4[9] = &value witness table for Builtin.BridgeObject[8];
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

void sub_100195D98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006369B8)
  {
    v2 = type metadata accessor for DIPRetrier(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006369B8);
  }
}

uint64_t storeEnumTagSinglePayload for DIPCloudContainerState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100195E38 + 4 * byte_1005252B7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100195E6C + 4 * byte_1005252B2[v4]))();
}

uint64_t sub_100195E6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100195E7CLL);
  return result;
}

uint64_t sub_100195E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100195E90);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100195E94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195E9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DIPCloudContainerState()
{
  return &type metadata for DIPCloudContainerState;
}

unint64_t sub_100195EBC()
{
  unint64_t result;

  result = qword_100636C78;
  if (!qword_100636C78)
  {
    result = swift_getWitnessTable(&unk_1005253C0, &type metadata for DIPCloudContainerState);
    atomic_store(result, (unint64_t *)&qword_100636C78);
  }
  return result;
}

Swift::Int sub_100195F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_100004828(&qword_100635808);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10001CFF8(0, &qword_100636CA0, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_10001CFF8(0, &qword_100636C98, CKServerChangeToken_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1001269FC(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

unint64_t sub_100196150(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100601160, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_100196198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1001961D4()
{
  uint64_t v0;

  return sub_100192F28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

uint64_t sub_1001961E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001961F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100196200()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100196224(void *a1, void *a2, char a3)
{
  uint64_t v3;

  return sub_10019301C(a1, a2, a3 & 1, v3);
}

uint64_t sub_100196230()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10019626C(uint64_t a1, char a2)
{
  return sub_100196420(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019351C);
}

uint64_t sub_100196278(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_100196284(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_100196290()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001962B8(void *a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  return sub_10019190C(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001962CC(uint64_t a1, char a2)
{
  return sub_100196420(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100191ED8);
}

uint64_t sub_1001962D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  sub_100196284(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100196328()
{
  uint64_t v0;

  sub_100192118(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10019633C()
{
  uint64_t v0;

  sub_100196284(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10019637C()
{
  return sub_100196884((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100191B30);
}

uint64_t sub_10019638C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;

  return sub_1001903E4(a1, a2, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), (uint64_t)&unk_100609920, (uint64_t)sub_1001964A4, (uint64_t)&unk_100609938);
}

uint64_t sub_1001963D0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100196414(uint64_t a1, char a2)
{
  return sub_100196420(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100190910);
}

uint64_t sub_100196420(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_100196438()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100196284(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100196488()
{
  uint64_t v0;

  sub_100190B58(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1001964A4()
{
  return sub_1001966E0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10019060C);
}

uint64_t sub_1001964B4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001964E8(void *a1, void *a2, char a3)
{
  uint64_t *v3;

  return sub_10018E19C(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_1001964F8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100196544(uint64_t a1, char a2)
{
  uint64_t *v2;

  return sub_10018E89C(a1, a2 & 1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100196558()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100196284(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1001965B0()
{
  uint64_t v0;

  sub_10018EAF8(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1001965C8()
{
  uint64_t v0;

  sub_1000C7A20(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100196610()
{
  return sub_1001966E0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018E3C8);
}

uint64_t sub_100196620(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;

  return sub_1001903E4(a1, a2, a3, a4 & 1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), (uint64_t)&unk_100609B28, (uint64_t)sub_1001966D4, (uint64_t)&unk_100609B40);
}

uint64_t sub_100196664(uint64_t a1, char a2)
{
  return sub_100196790(a1, a2, (uint64_t)&unk_100609AD8, (uint64_t)sub_100196684, (uint64_t)&unk_100609AF0);
}

uint64_t sub_100196684()
{
  return sub_100196820((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018D35C);
}

uint64_t sub_100196694()
{
  uint64_t v0;

  sub_1000C7A20(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001966D4()
{
  return sub_1001966E0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018CE48);
}

uint64_t sub_1001966E0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1001966FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100196728(void *a1, void *a2, char a3)
{
  uint64_t v3;

  return sub_10018B8C4(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100196738()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100196774(uint64_t a1, char a2)
{
  return sub_100196790(a1, a2, (uint64_t)&unk_100609BC8, (uint64_t)sub_100196814, (uint64_t)&unk_100609BE0);
}

uint64_t sub_100196790(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_10018D130(a1, a2 & 1, v5[2], v5[3], v5[4], v5[5], a3, a4, a5);
}

uint64_t sub_1001967CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  sub_100196284(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100196814()
{
  return sub_100196820((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018BF94);
}

uint64_t sub_100196820(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100196838()
{
  uint64_t v0;

  sub_1000C7A20(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100196878()
{
  return sub_100196884((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018BAE4);
}

uint64_t sub_100196884(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10019689C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001968C0(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1001968E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001896AC(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001968F8(uint64_t a1)
{
  uint64_t v1;

  return sub_100189524(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), 513, 8, 6);
}

uint64_t sub_100196924(uint64_t a1)
{
  uint64_t v1;

  return sub_100189524(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), 504, 6, 5);
}

uint64_t sub_100196950(uint64_t a1)
{
  uint64_t v1;

  return sub_100189524(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), 495, 5, 4);
}

uint64_t sub_10019697C(uint64_t a1)
{
  uint64_t v1;

  return sub_100189524(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), 486, 4, 3);
}

uint64_t sub_1001969A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100189524(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), 477, 3, 2);
}

uint64_t sub_1001969D4(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10018A884(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001969E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100196A24()
{
  return sub_100196BA8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10018AA9C);
}

uint64_t sub_100196A34(uint64_t a1)
{
  uint64_t v1;

  return sub_100188138(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100196A44()
{
  uint64_t *v0;

  return sub_1001870C8(v0[2], v0[3], v0[4]);
}

uint64_t sub_100196A54()
{
  uint64_t *v0;

  return sub_1001873EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100196A64(uint64_t a1)
{
  uint64_t v1;

  return sub_10018746C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100196A70()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100196A7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001877E4(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100196A8C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100196AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100636C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100196B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100636C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100196B50()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100196B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100186138(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_100196B68()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100196B74(uint64_t a1)
{
  uint64_t *v1;

  return sub_100186888(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100196B80()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100196B8C()
{
  uint64_t v0;

  return sub_100186A88(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_100196B9C()
{
  return sub_100196BA8(sub_100186348);
}

uint64_t sub_100196BA8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100196BC0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100196BF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001863D8(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t (*)(uint64_t), _QWORD *))(v1 + 40));
}

uint64_t sub_100196C04()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100196C10(uint64_t a1)
{
  uint64_t v1;

  return sub_10018662C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100196C1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, char *, uint64_t);
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  void (*v99)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  void (*v109)(uint64_t *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint8_t *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint64_t v149;
  uint8_t *v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, char *, uint64_t);
  uint64_t v156;
  void (*v157)(char *, _QWORD, uint64_t);
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, char *, uint64_t);
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint8_t *v197;
  Swift::String v198;
  Swift::String v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, char *, uint64_t);
  char *v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  unint64_t v219;
  _QWORD *v220;
  void (*v221)(uint64_t *);
  char *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint64_t v226;
  uint8_t *v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void (*v232)(uint64_t, char *, uint64_t);
  uint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t *);
  uint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint8_t *v262;
  uint64_t v263;
  char *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint8_t *v269;
  __int128 v270;
  __int128 v271;
  _BYTE v272[24];
  uint64_t v273;
  char v274[8];

  v256 = a2;
  v7 = type metadata accessor for DIPError.PropertyKey(0);
  v262 = *(uint8_t **)(v7 - 8);
  v263 = v7;
  __chkstk_darwin(v7);
  v261 = (char *)&v246 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = type metadata accessor for Logger(0);
  v257 = *(_QWORD *)(v258 - 8);
  v9 = __chkstk_darwin(v258);
  v251 = (char *)&v246 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v252 = (char *)&v246 - v12;
  v13 = __chkstk_darwin(v11);
  v254 = (char *)&v246 - v14;
  v15 = __chkstk_darwin(v13);
  v253 = (char *)&v246 - v16;
  v17 = __chkstk_darwin(v15);
  v260 = (char *)&v246 - v18;
  __chkstk_darwin(v17);
  v255 = (char *)&v246 - v19;
  v20 = type metadata accessor for DIPRetryResult(0);
  v268 = *(_QWORD *)(v20 - 8);
  v269 = (uint8_t *)v20;
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v246 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for DIPError.Code(0);
  v24 = *(_QWORD *)(v23 - 8);
  v266 = v23;
  v267 = v24;
  v25 = __chkstk_darwin(v23);
  v264 = (char *)&v246 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v246 - v27;
  v29 = sub_100004828(&qword_100636620);
  __chkstk_darwin(v29);
  v31 = (char *)&v246 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DIPError(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v265 = (uint64_t *)((char *)&v246 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = __chkstk_darwin(v34);
  v259 = (char *)&v246 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v246 - v38;
  v40 = swift_allocObject(&unk_10060A078, 32, 7);
  *(_QWORD *)(v40 + 16) = a3;
  *(_QWORD *)(v40 + 24) = a4;
  v41 = a1;
  *(_QWORD *)&v270 = a1;
  v42 = a4;
  v43 = a4;
  v44 = v41;
  swift_retain(v43);
  swift_errorRetain(v44);
  v45 = sub_100004828((uint64_t *)&unk_100633430);
  v46 = swift_dynamicCast(v31, &v270, v45, v32, 6);
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (v46)
  {
    v248 = v42;
    v249 = a3;
    v250 = v40;
    v47(v31, 0, 1, v32);
    v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v39, v31, v32);
    DIPError.code.getter(v48);
    v50 = v266;
    v49 = v267;
    v51 = (*(uint64_t (**)(char *, uint64_t))(v267 + 88))(v28, v266);
    v52 = v32;
    v53 = v39;
    v54 = v268;
    v55 = v269;
    if ((_DWORD)v51 == enum case for DIPError.Code.invalidAppleAccount(_:))
    {
LABEL_3:
      v56 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v57 = swift_allocError(v52, v56, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v58, v39, v52);
      *v22 = v57;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v55);
      v249(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v22, v55);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v52);
LABEL_30:
      v61 = v250;
      return swift_release(v61);
    }
    v247 = v33;
    if ((_DWORD)v51 == enum case for DIPError.Code.networkTimeOut(_:))
    {
LABEL_6:
      v62 = v268;
      v63 = v33;
      v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v65 = swift_allocError(v52, v64, 0, 0);
      v66 = v49;
      v67 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 16);
      v255 = v53;
      v67(v68, v53, v52);
      v69 = v264;
      (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
      v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v71 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100550E90, v65, v69, 0, v70, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 248);
      v72 = DIPError.properties.getter(v71);
      v74 = v262;
      v73 = v263;
      v75 = (uint64_t)v261;
      (*((void (**)(char *, _QWORD, uint64_t))v262 + 13))(v261, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v263);
      if (*(_QWORD *)(v72 + 16))
      {
        v76 = sub_1004A8668(v75);
        v77 = v250;
        if ((v78 & 1) != 0)
        {
          sub_10002EDBC(*(_QWORD *)(v72 + 56) + 32 * v76, (uint64_t)&v270);
        }
        else
        {
          v270 = 0u;
          v271 = 0u;
        }
      }
      else
      {
        v270 = 0u;
        v271 = 0u;
        v77 = v250;
      }
      swift_bridgeObjectRelease(v72);
      (*((void (**)(uint64_t, uint64_t))v74 + 1))(v75, v73);
      if (*((_QWORD *)&v271 + 1))
      {
        if ((swift_dynamicCast(&v273, &v270, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
        {
          v101 = v273;
          v102 = swift_allocError(v52, v64, 0, 0);
          v103 = v265;
          v67(v104, (char *)v265, v52);
          *v22 = v102;
          v22[1] = v101;
          v105 = (unsigned int *)&enum case for DIPRetryResult.retryAfterDelay(_:);
LABEL_24:
          v108 = v269;
          (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v62 + 104))(v22, *v105, v269);
          v249(v22);
          (*(void (**)(uint64_t *, uint8_t *))(v62 + 8))(v22, v108);
          v109 = *(void (**)(uint64_t *, uint64_t))(v247 + 8);
          v109(v103, v52);
          v109((uint64_t *)v255, v52);
          v61 = v77;
          return swift_release(v61);
        }
      }
      else
      {
        sub_100008030((uint64_t)&v270, (uint64_t *)&unk_1006371E0);
      }
      v106 = swift_allocError(v52, v64, 0, 0);
      v103 = v265;
      v67(v107, (char *)v265, v52);
      *v22 = v106;
      v105 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
      goto LABEL_24;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitZoneNotFound(_:))
    {
      v265 = v22;
      v79 = v260;
      defaultLogger()(v51);
      v80 = v256;
      v81 = swift_retain(v256);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v255 = v39;
        v84 = (uint8_t *)swift_slowAlloc(12, -1);
        v85 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v270 = v85;
        *(_DWORD *)v84 = 136446210;
        v86 = *(_QWORD *)(v80 + 24);
        v87 = *(_QWORD *)(v80 + 32);
        swift_bridgeObjectRetain(v87);
        v273 = sub_1000E3AC8(v86, v87, (uint64_t *)&v270);
        v53 = v255;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v84 + 4);
        swift_release(v80);
        v88 = v87;
        v55 = v269;
        swift_bridgeObjectRelease(v88);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Zone is missing in container %{public}s, deleting local caches", v84, 0xCu);
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        swift_slowDealloc(v84, -1, -1);

        (*(void (**)(char *, uint64_t))(v257 + 8))(v260, v258);
      }
      else
      {

        swift_release(v80);
        (*(void (**)(char *, uint64_t))(v257 + 8))(v79, v258);
      }
      v110 = v264;
      v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v112 = swift_allocError(v52, v111, 0, 0);
      v113 = *(void (**)(uint64_t, char *, uint64_t))(v247 + 16);
      v113(v114, v53, v52);
      (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v110, enum case for DIPError.Code.internalError(_:), v266);
      v115 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v116 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100550DE0, v112, v110, 0, v115, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 279);
      sub_100194BD8();
      v117 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
      v118 = (unint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, &v270, 1, 0);
      v119 = *v118;
      *v118 = v117;
      swift_bridgeObjectRelease(v119);
      v120 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
      v121 = (unint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v273, 1, 0);
      v122 = *v121;
      *v121 = v120;
      swift_bridgeObjectRelease(v122);
      v123 = (uint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v272, 1, 0);
      v124 = *v123;
      *v123 = (uint64_t)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v124);
      v125 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
      v126 = *(_QWORD *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
      *(_QWORD *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v125;
      swift_bridgeObjectRelease(v126);
      v127 = swift_allocError(v52, v111, 0, 0);
      v113(v128, v116, v52);
LABEL_27:
      v129 = v265;
      *v265 = v127;
      v130 = v268;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v129, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v129);
      (*(void (**)(uint64_t *, uint8_t *))(v130 + 8))(v129, v55);
      v99 = *(void (**)(char *, uint64_t))(v247 + 8);
      v100 = v116;
      goto LABEL_28;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitServerUnavailable(_:)
      || (_DWORD)v51 == enum case for DIPError.Code.cloudkitRateLimited(_:))
    {
      goto LABEL_6;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitServerRecordChanged(_:))
    {
      v89 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v90 = swift_allocError(v52, v89, 0, 0);
      v265 = v22;
      v91 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
      v91(v92, v53, v52);
      v93 = v264;
      (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
      v94 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v95 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100550E60, v90, v93, 0, v94, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 264);
      v96 = swift_allocError(v52, v89, 0, 0);
      v91(v97, v95, v52);
      v98 = v265;
      *v265 = v96;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v98, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v98);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v98, v55);
      v99 = *(void (**)(char *, uint64_t))(v247 + 8);
LABEL_16:
      v100 = v95;
LABEL_28:
      v99(v100, v52);
      v131 = v53;
      goto LABEL_29;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitChangeTokenExpired(_:))
    {
      v265 = v22;
      v133 = v255;
      defaultLogger()(v51);
      v134 = v256;
      v135 = swift_retain(v256);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v263 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v270 = v263;
        *(_DWORD *)v138 = 136446210;
        v262 = v138 + 4;
        v139 = v55;
        v140 = v53;
        v141 = *(_QWORD *)(v134 + 24);
        v142 = *(_QWORD *)(v134 + 32);
        swift_bridgeObjectRetain(v142);
        v143 = v141;
        v53 = v140;
        v55 = v139;
        v273 = sub_1000E3AC8(v143, v142, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v262);
        swift_release(v134);
        swift_bridgeObjectRelease(v142);
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Change token is expired in container %{public}s, deleting local caches", v138, 0xCu);
        v144 = v263;
        swift_arrayDestroy(v263, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v144, -1, -1);
        swift_slowDealloc(v138, -1, -1);

        (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v258);
      }
      else
      {

        swift_release(v134);
        (*(void (**)(char *, uint64_t))(v257 + 8))(v133, v258);
      }
      v163 = v264;
      v164 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v165 = swift_allocError(v52, v164, 0, 0);
      v166 = *(void (**)(uint64_t, char *, uint64_t))(v247 + 16);
      v166(v167, v53, v52);
      (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v163, enum case for DIPError.Code.internalError(_:), v266);
      v168 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v116 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x8000000100550E20, v165, v163, 0, v168, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 270);
      sub_100194BD8();
      v169 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
      v170 = (unint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, &v270, 1, 0);
      v171 = *v170;
      *v170 = v169;
      swift_bridgeObjectRelease(v171);
      v172 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
      v173 = (unint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v273, 1, 0);
      v174 = *v173;
      *v173 = v172;
      swift_bridgeObjectRelease(v174);
      v175 = (uint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v272, 1, 0);
      v176 = *v175;
      *v175 = (uint64_t)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v176);
      v177 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
      v178 = *(_QWORD *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
      *(_QWORD *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v177;
      swift_bridgeObjectRelease(v178);
      v127 = swift_allocError(v52, v164, 0, 0);
      v166(v179, v116, v52);
      goto LABEL_27;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:))
    {
      v265 = v22;
      v145 = v254;
      v146 = defaultLogger()(v51);
      v147 = Logger.logObject.getter(v146);
      v148 = static os_log_type_t.debug.getter(v147);
      if (os_log_type_enabled(v147, v148))
      {
        v149 = v33;
        v150 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v150 = 0;
        _os_log_impl((void *)&_mh_execute_header, v147, v148, "CloudKit keychain is still being synced", v150, 2u);
        v151 = v150;
        v33 = v149;
        v145 = v254;
        swift_slowDealloc(v151, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v257 + 8))(v145, v258);
      v152 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v153 = swift_allocError(v52, v152, 0, 0);
      v154 = v33;
      v155 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
      v155(v156, v53, v52);
      v157 = *(void (**)(char *, _QWORD, uint64_t))(v49 + 104);
      v158 = v264;
      v157(v264, enum case for DIPError.Code.internalError(_:), v50);
      v159 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v95 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100550D70, v153, v158, 0, v159, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 297);
      v160 = swift_allocError(v52, v152, 0, 0);
      v155(v161, v95, v52);
      v162 = v265;
      *v265 = v160;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v162, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v162);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v162, v55);
      v99 = *(void (**)(char *, uint64_t))(v154 + 8);
      goto LABEL_16;
    }
    if ((_DWORD)v51 != enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:))
    {
      if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitManateeUnavailable(_:))
        goto LABEL_3;
      if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:))
      {
        v265 = v22;
        v192 = v33;
        v193 = v252;
        v194 = defaultLogger()(v51);
        v195 = Logger.logObject.getter(v194);
        v196 = static os_log_type_t.debug.getter(v195);
        if (os_log_type_enabled(v195, v196))
        {
          v197 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v197 = 0;
          _os_log_impl((void *)&_mh_execute_header, v195, v196, "There was a partial uploads failure.", v197, 2u);
          swift_slowDealloc(v197, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v257 + 8))(v193, v258);
        v198._countAndFlagsBits = 0xD000000000000018;
        v198._object = (void *)0x8000000100550D10;
        v199._countAndFlagsBits = 0x3932353561313033;
        v199._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v199, v198);
        v200 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v201 = swift_allocError(v52, v200, 0, 0);
        v202 = *(void (**)(uint64_t, char *, uint64_t))(v192 + 16);
        v203 = v39;
        v202(v204, v39, v52);
        v205 = v264;
        (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v266);
        v206 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v207 = v259;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100550D30, v201, v205, 0, v206, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 302);
        v208 = swift_allocError(v52, v200, 0, 0);
        v202(v209, v207, v52);
        v210 = v265;
        *v265 = v208;
        v212 = v268;
        v211 = v269;
        (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v210, enum case for DIPRetryResult.retryWithError(_:), v269);
        v249(v210);
        (*(void (**)(uint64_t *, uint8_t *))(v212 + 8))(v210, v211);
        v99 = *(void (**)(char *, uint64_t))(v192 + 8);
        v99(v207, v52);
      }
      else
      {
        v221 = v249;
        if ((_DWORD)v51 != enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:))
        {
          v242 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v243 = v28;
          v244 = swift_allocError(v52, v242, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v245, v39, v52);
          *v22 = v244;
          (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v55);
          v221(v22);
          (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v22, v55);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v52);
          (*(void (**)(char *, uint64_t))(v267 + 8))(v243, v266);
          goto LABEL_30;
        }
        v265 = v22;
        v222 = v251;
        v223 = defaultLogger()(v51);
        v224 = Logger.logObject.getter(v223);
        v225 = static os_log_type_t.debug.getter(v224);
        if (os_log_type_enabled(v224, v225))
        {
          v226 = v33;
          v227 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v227 = 0;
          _os_log_impl((void *)&_mh_execute_header, v224, v225, "", v227, 2u);
          v228 = v227;
          v33 = v226;
          swift_slowDealloc(v228, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v257 + 8))(v222, v258);
        v229 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v230 = swift_allocError(v52, v229, 0, 0);
        v231 = v33;
        v232 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
        v203 = v53;
        v232(v233, v53, v52);
        v234 = v264;
        (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v266);
        v235 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v236 = v259;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100550CB0, v230, v234, 0, v235, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 307);
        v237 = swift_allocError(v52, v229, 0, 0);
        v232(v238, v236, v52);
        v239 = v265;
        *v265 = v237;
        v241 = v268;
        v240 = v269;
        (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v239, enum case for DIPRetryResult.stopWithError(_:), v269);
        v221(v239);
        (*(void (**)(uint64_t *, uint8_t *))(v241 + 8))(v239, v240);
        v99 = *(void (**)(char *, uint64_t))(v231 + 8);
        v99(v236, v52);
      }
      v131 = v203;
LABEL_29:
      v99(v131, v52);
      goto LABEL_30;
    }
    v180 = v253;
    defaultLogger()(v51);
    v181 = v256;
    v182 = swift_retain(v256);
    v183 = Logger.logObject.getter(v182);
    v184 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v183, v184))
    {
      v185 = (uint8_t *)swift_slowAlloc(12, -1);
      v186 = swift_slowAlloc(32, -1);
      *(_DWORD *)v185 = 136446210;
      v269 = v185 + 4;
      *(_QWORD *)&v270 = v186;
      v187 = *(_QWORD *)(v181 + 24);
      v188 = *(_QWORD *)(v181 + 32);
      swift_bridgeObjectRetain(v188);
      v189 = v187;
      v53 = v39;
      v273 = sub_1000E3AC8(v189, v188, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v269);
      swift_release(v181);
      v190 = v188;
      v50 = v266;
      swift_bridgeObjectRelease(v190);
      _os_log_impl((void *)&_mh_execute_header, v183, v184, "E2E encryption data in container %{public}s is unrecoverable, wiping container", v185, 0xCu);
      swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v186, -1, -1);
      swift_slowDealloc(v185, -1, -1);

      (*(void (**)(char *, uint64_t))(v257 + 8))(v253, v258);
    }
    else
    {

      swift_release(v181);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v180, v258);
    }
    v191 = v250;
    v213 = swift_allocBox(v52);
    v214 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v215 = swift_allocError(v52, v214, 0, 0);
    v216 = v247;
    (*(void (**)(uint64_t, char *, uint64_t))(v247 + 16))(v217, v53, v52);
    v218 = v264;
    (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
    v219 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100550DA0, v215, v218, 0, v219, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 287);
    v220 = (_QWORD *)swift_allocObject(&unk_10060A0A0, 40, 7);
    v220[2] = v213;
    v220[3] = sub_10002B224;
    v220[4] = v191;
    swift_retain(v213);
    swift_retain(v191);
    sub_100186EC4((uint64_t)sub_1001987D0, (uint64_t)v220);
    swift_release(v220);
    (*(void (**)(char *, uint64_t))(v216 + 8))(v53, v52);
    swift_release(v191);
    v61 = v213;
  }
  else
  {
    v47(v31, 1, 1, v32);
    sub_100008030((uint64_t)v31, &qword_100636620);
    *v22 = v44;
    v60 = v268;
    v59 = v269;
    (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v269);
    swift_errorRetain(v44);
    a3(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v60 + 8))(v22, v59);
    v61 = v40;
  }
  return swift_release(v61);
}

uint64_t sub_1001987C4()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001987D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100186C60(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001987DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, char *, uint64_t);
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  void (*v99)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  void (*v109)(uint64_t *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint8_t *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint64_t v149;
  uint8_t *v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, char *, uint64_t);
  uint64_t v156;
  void (*v157)(char *, _QWORD, uint64_t);
  char *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, char *, uint64_t);
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint8_t *v197;
  Swift::String v198;
  Swift::String v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, char *, uint64_t);
  char *v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  unint64_t v219;
  _QWORD *v220;
  void (*v221)(uint64_t *);
  char *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint64_t v226;
  uint8_t *v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void (*v232)(uint64_t, char *, uint64_t);
  uint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t *);
  uint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint8_t *v262;
  uint64_t v263;
  char *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint8_t *v269;
  __int128 v270;
  __int128 v271;
  _BYTE v272[24];
  uint64_t v273;
  char v274[8];

  v256 = a2;
  v7 = type metadata accessor for DIPError.PropertyKey(0);
  v262 = *(uint8_t **)(v7 - 8);
  v263 = v7;
  __chkstk_darwin(v7);
  v261 = (char *)&v246 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = type metadata accessor for Logger(0);
  v257 = *(_QWORD *)(v258 - 8);
  v9 = __chkstk_darwin(v258);
  v251 = (char *)&v246 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v252 = (char *)&v246 - v12;
  v13 = __chkstk_darwin(v11);
  v254 = (char *)&v246 - v14;
  v15 = __chkstk_darwin(v13);
  v253 = (char *)&v246 - v16;
  v17 = __chkstk_darwin(v15);
  v260 = (char *)&v246 - v18;
  __chkstk_darwin(v17);
  v255 = (char *)&v246 - v19;
  v20 = type metadata accessor for DIPRetryResult(0);
  v268 = *(_QWORD *)(v20 - 8);
  v269 = (uint8_t *)v20;
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v246 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for DIPError.Code(0);
  v24 = *(_QWORD *)(v23 - 8);
  v266 = v23;
  v267 = v24;
  v25 = __chkstk_darwin(v23);
  v264 = (char *)&v246 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v246 - v27;
  v29 = sub_100004828(&qword_100636620);
  __chkstk_darwin(v29);
  v31 = (char *)&v246 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DIPError(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v265 = (uint64_t *)((char *)&v246 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = __chkstk_darwin(v34);
  v259 = (char *)&v246 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v246 - v38;
  v40 = swift_allocObject(&unk_10060A0C8, 32, 7);
  *(_QWORD *)(v40 + 16) = a3;
  *(_QWORD *)(v40 + 24) = a4;
  v41 = a1;
  *(_QWORD *)&v270 = a1;
  v42 = a4;
  v43 = a4;
  v44 = v41;
  swift_retain(v43);
  swift_errorRetain(v44);
  v45 = sub_100004828((uint64_t *)&unk_100633430);
  v46 = swift_dynamicCast(v31, &v270, v45, v32, 6);
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if (v46)
  {
    v248 = v42;
    v249 = a3;
    v250 = v40;
    v47(v31, 0, 1, v32);
    v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v39, v31, v32);
    DIPError.code.getter(v48);
    v50 = v266;
    v49 = v267;
    v51 = (*(uint64_t (**)(char *, uint64_t))(v267 + 88))(v28, v266);
    v52 = v32;
    v53 = v39;
    v54 = v268;
    v55 = v269;
    if ((_DWORD)v51 == enum case for DIPError.Code.invalidAppleAccount(_:))
    {
LABEL_3:
      v56 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v57 = swift_allocError(v52, v56, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v58, v39, v52);
      *v22 = v57;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v55);
      v249(v22);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v22, v55);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v52);
LABEL_30:
      v61 = v250;
      return swift_release(v61);
    }
    v247 = v33;
    if ((_DWORD)v51 == enum case for DIPError.Code.networkTimeOut(_:))
    {
LABEL_6:
      v62 = v268;
      v63 = v33;
      v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v65 = swift_allocError(v52, v64, 0, 0);
      v66 = v49;
      v67 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 16);
      v255 = v53;
      v67(v68, v53, v52);
      v69 = v264;
      (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
      v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v71 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x8000000100550E90, v65, v69, 0, v70, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 248);
      v72 = DIPError.properties.getter(v71);
      v74 = v262;
      v73 = v263;
      v75 = (uint64_t)v261;
      (*((void (**)(char *, _QWORD, uint64_t))v262 + 13))(v261, enum case for DIPError.PropertyKey.serverRetryAfter(_:), v263);
      if (*(_QWORD *)(v72 + 16))
      {
        v76 = sub_1004A8668(v75);
        v77 = v250;
        if ((v78 & 1) != 0)
        {
          sub_10002EDBC(*(_QWORD *)(v72 + 56) + 32 * v76, (uint64_t)&v270);
        }
        else
        {
          v270 = 0u;
          v271 = 0u;
        }
      }
      else
      {
        v270 = 0u;
        v271 = 0u;
        v77 = v250;
      }
      swift_bridgeObjectRelease(v72);
      (*((void (**)(uint64_t, uint64_t))v74 + 1))(v75, v73);
      if (*((_QWORD *)&v271 + 1))
      {
        if ((swift_dynamicCast(&v273, &v270, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
        {
          v101 = v273;
          v102 = swift_allocError(v52, v64, 0, 0);
          v103 = v265;
          v67(v104, (char *)v265, v52);
          *v22 = v102;
          v22[1] = v101;
          v105 = (unsigned int *)&enum case for DIPRetryResult.retryAfterDelay(_:);
LABEL_24:
          v108 = v269;
          (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v62 + 104))(v22, *v105, v269);
          v249(v22);
          (*(void (**)(uint64_t *, uint8_t *))(v62 + 8))(v22, v108);
          v109 = *(void (**)(uint64_t *, uint64_t))(v247 + 8);
          v109(v103, v52);
          v109((uint64_t *)v255, v52);
          v61 = v77;
          return swift_release(v61);
        }
      }
      else
      {
        sub_100008030((uint64_t)&v270, (uint64_t *)&unk_1006371E0);
      }
      v106 = swift_allocError(v52, v64, 0, 0);
      v103 = v265;
      v67(v107, (char *)v265, v52);
      *v22 = v106;
      v105 = (unsigned int *)&enum case for DIPRetryResult.retryWithError(_:);
      goto LABEL_24;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitZoneNotFound(_:))
    {
      v265 = v22;
      v79 = v260;
      defaultLogger()(v51);
      v80 = v256;
      v81 = swift_retain(v256);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v255 = v39;
        v84 = (uint8_t *)swift_slowAlloc(12, -1);
        v85 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v270 = v85;
        *(_DWORD *)v84 = 136446210;
        v86 = *(_QWORD *)(v80 + 24);
        v87 = *(_QWORD *)(v80 + 32);
        swift_bridgeObjectRetain(v87);
        v273 = sub_1000E3AC8(v86, v87, (uint64_t *)&v270);
        v53 = v255;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v84 + 4);
        swift_release(v80);
        v88 = v87;
        v55 = v269;
        swift_bridgeObjectRelease(v88);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Zone is missing in container %{public}s, deleting local caches", v84, 0xCu);
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1, -1);
        swift_slowDealloc(v84, -1, -1);

        (*(void (**)(char *, uint64_t))(v257 + 8))(v260, v258);
      }
      else
      {

        swift_release(v80);
        (*(void (**)(char *, uint64_t))(v257 + 8))(v79, v258);
      }
      v110 = v264;
      v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v112 = swift_allocError(v52, v111, 0, 0);
      v113 = *(void (**)(uint64_t, char *, uint64_t))(v247 + 16);
      v113(v114, v53, v52);
      (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v110, enum case for DIPError.Code.internalError(_:), v266);
      v115 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v116 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100550DE0, v112, v110, 0, v115, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 279);
      sub_100194BD8();
      v117 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
      v118 = (unint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, &v270, 1, 0);
      v119 = *v118;
      *v118 = v117;
      swift_bridgeObjectRelease(v119);
      v120 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
      v121 = (unint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v273, 1, 0);
      v122 = *v121;
      *v121 = v120;
      swift_bridgeObjectRelease(v122);
      v123 = (uint64_t *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v272, 1, 0);
      v124 = *v123;
      *v123 = (uint64_t)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v124);
      v125 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
      v126 = *(_QWORD *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
      *(_QWORD *)(v80 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v125;
      swift_bridgeObjectRelease(v126);
      v127 = swift_allocError(v52, v111, 0, 0);
      v113(v128, v116, v52);
LABEL_27:
      v129 = v265;
      *v265 = v127;
      v130 = v268;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v129, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v129);
      (*(void (**)(uint64_t *, uint8_t *))(v130 + 8))(v129, v55);
      v99 = *(void (**)(char *, uint64_t))(v247 + 8);
      v100 = v116;
      goto LABEL_28;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitServerUnavailable(_:)
      || (_DWORD)v51 == enum case for DIPError.Code.cloudkitRateLimited(_:))
    {
      goto LABEL_6;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitServerRecordChanged(_:))
    {
      v89 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v90 = swift_allocError(v52, v89, 0, 0);
      v265 = v22;
      v91 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
      v91(v92, v53, v52);
      v93 = v264;
      (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
      v94 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v95 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100550E60, v90, v93, 0, v94, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 264);
      v96 = swift_allocError(v52, v89, 0, 0);
      v91(v97, v95, v52);
      v98 = v265;
      *v265 = v96;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v98, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v98);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v98, v55);
      v99 = *(void (**)(char *, uint64_t))(v247 + 8);
LABEL_16:
      v100 = v95;
LABEL_28:
      v99(v100, v52);
      v131 = v53;
      goto LABEL_29;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitChangeTokenExpired(_:))
    {
      v265 = v22;
      v133 = v255;
      defaultLogger()(v51);
      v134 = v256;
      v135 = swift_retain(v256);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v263 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v270 = v263;
        *(_DWORD *)v138 = 136446210;
        v262 = v138 + 4;
        v139 = v55;
        v140 = v53;
        v141 = *(_QWORD *)(v134 + 24);
        v142 = *(_QWORD *)(v134 + 32);
        swift_bridgeObjectRetain(v142);
        v143 = v141;
        v53 = v140;
        v55 = v139;
        v273 = sub_1000E3AC8(v143, v142, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v262);
        swift_release(v134);
        swift_bridgeObjectRelease(v142);
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Change token is expired in container %{public}s, deleting local caches", v138, 0xCu);
        v144 = v263;
        swift_arrayDestroy(v263, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v144, -1, -1);
        swift_slowDealloc(v138, -1, -1);

        (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v258);
      }
      else
      {

        swift_release(v134);
        (*(void (**)(char *, uint64_t))(v257 + 8))(v133, v258);
      }
      v163 = v264;
      v164 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v165 = swift_allocError(v52, v164, 0, 0);
      v166 = *(void (**)(uint64_t, char *, uint64_t))(v247 + 16);
      v166(v167, v53, v52);
      (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v163, enum case for DIPError.Code.internalError(_:), v266);
      v168 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v116 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x8000000100550E20, v165, v163, 0, v168, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 270);
      sub_100194BD8();
      v169 = sub_10011D8A8((uint64_t)_swiftEmptyArrayStorage);
      v170 = (unint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_waitingForState, &v270, 1, 0);
      v171 = *v170;
      *v170 = v169;
      swift_bridgeObjectRelease(v171);
      v172 = sub_10011D9A8((uint64_t)_swiftEmptyArrayStorage);
      v173 = (unint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_zoneIDsByName, &v273, 1, 0);
      v174 = *v173;
      *v173 = v172;
      swift_bridgeObjectRelease(v174);
      v175 = (uint64_t *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs);
      swift_beginAccess(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_subscriptionIDs, v272, 1, 0);
      v176 = *v175;
      *v175 = (uint64_t)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v176);
      v177 = sub_10011D9B4((uint64_t)_swiftEmptyArrayStorage);
      v178 = *(_QWORD *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID);
      *(_QWORD *)(v134 + OBJC_IVAR____TtC8coreidvd17DIPCloudContainer_changeTokensByZoneID) = v177;
      swift_bridgeObjectRelease(v178);
      v127 = swift_allocError(v52, v164, 0, 0);
      v166(v179, v116, v52);
      goto LABEL_27;
    }
    if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitUnsyncedKeychain(_:))
    {
      v265 = v22;
      v145 = v254;
      v146 = defaultLogger()(v51);
      v147 = Logger.logObject.getter(v146);
      v148 = static os_log_type_t.debug.getter(v147);
      if (os_log_type_enabled(v147, v148))
      {
        v149 = v33;
        v150 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v150 = 0;
        _os_log_impl((void *)&_mh_execute_header, v147, v148, "CloudKit keychain is still being synced", v150, 2u);
        v151 = v150;
        v33 = v149;
        v145 = v254;
        swift_slowDealloc(v151, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v257 + 8))(v145, v258);
      v152 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v153 = swift_allocError(v52, v152, 0, 0);
      v154 = v33;
      v155 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
      v155(v156, v53, v52);
      v157 = *(void (**)(char *, _QWORD, uint64_t))(v49 + 104);
      v158 = v264;
      v157(v264, enum case for DIPError.Code.internalError(_:), v50);
      v159 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v95 = v259;
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100550D70, v153, v158, 0, v159, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 297);
      v160 = swift_allocError(v52, v152, 0, 0);
      v155(v161, v95, v52);
      v162 = v265;
      *v265 = v160;
      (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v162, enum case for DIPRetryResult.retryWithError(_:), v55);
      v249(v162);
      (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v162, v55);
      v99 = *(void (**)(char *, uint64_t))(v154 + 8);
      goto LABEL_16;
    }
    if ((_DWORD)v51 != enum case for DIPError.Code.cloudkitMissingManateeIdentity(_:))
    {
      if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitManateeUnavailable(_:))
        goto LABEL_3;
      if ((_DWORD)v51 == enum case for DIPError.Code.cloudkitPartialUploadsFailure(_:))
      {
        v265 = v22;
        v192 = v33;
        v193 = v252;
        v194 = defaultLogger()(v51);
        v195 = Logger.logObject.getter(v194);
        v196 = static os_log_type_t.debug.getter(v195);
        if (os_log_type_enabled(v195, v196))
        {
          v197 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v197 = 0;
          _os_log_impl((void *)&_mh_execute_header, v195, v196, "There was a partial uploads failure.", v197, 2u);
          swift_slowDealloc(v197, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v257 + 8))(v193, v258);
        v198._countAndFlagsBits = 0xD000000000000018;
        v198._object = (void *)0x8000000100550D10;
        v199._countAndFlagsBits = 0x3932353561313033;
        v199._object = (void *)0xE800000000000000;
        logMilestone(tag:description:)(v199, v198);
        v200 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v201 = swift_allocError(v52, v200, 0, 0);
        v202 = *(void (**)(uint64_t, char *, uint64_t))(v192 + 16);
        v203 = v39;
        v202(v204, v39, v52);
        v205 = v264;
        (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v266);
        v206 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v207 = v259;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100550D30, v201, v205, 0, v206, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 302);
        v208 = swift_allocError(v52, v200, 0, 0);
        v202(v209, v207, v52);
        v210 = v265;
        *v265 = v208;
        v212 = v268;
        v211 = v269;
        (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v210, enum case for DIPRetryResult.retryWithError(_:), v269);
        v249(v210);
        (*(void (**)(uint64_t *, uint8_t *))(v212 + 8))(v210, v211);
        v99 = *(void (**)(char *, uint64_t))(v192 + 8);
        v99(v207, v52);
      }
      else
      {
        v221 = v249;
        if ((_DWORD)v51 != enum case for DIPError.Code.cloudkitCancelRequestedByClient(_:))
        {
          v242 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v243 = v28;
          v244 = swift_allocError(v52, v242, 0, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v245, v39, v52);
          *v22 = v244;
          (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v54 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v55);
          v221(v22);
          (*(void (**)(uint64_t *, uint8_t *))(v54 + 8))(v22, v55);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v52);
          (*(void (**)(char *, uint64_t))(v267 + 8))(v243, v266);
          goto LABEL_30;
        }
        v265 = v22;
        v222 = v251;
        v223 = defaultLogger()(v51);
        v224 = Logger.logObject.getter(v223);
        v225 = static os_log_type_t.debug.getter(v224);
        if (os_log_type_enabled(v224, v225))
        {
          v226 = v33;
          v227 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v227 = 0;
          _os_log_impl((void *)&_mh_execute_header, v224, v225, "", v227, 2u);
          v228 = v227;
          v33 = v226;
          swift_slowDealloc(v228, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v257 + 8))(v222, v258);
        v229 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v230 = swift_allocError(v52, v229, 0, 0);
        v231 = v33;
        v232 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 16);
        v203 = v53;
        v232(v233, v53, v52);
        v234 = v264;
        (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v266);
        v235 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v236 = v259;
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100550CB0, v230, v234, 0, v235, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 307);
        v237 = swift_allocError(v52, v229, 0, 0);
        v232(v238, v236, v52);
        v239 = v265;
        *v265 = v237;
        v241 = v268;
        v240 = v269;
        (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v239, enum case for DIPRetryResult.stopWithError(_:), v269);
        v221(v239);
        (*(void (**)(uint64_t *, uint8_t *))(v241 + 8))(v239, v240);
        v99 = *(void (**)(char *, uint64_t))(v231 + 8);
        v99(v236, v52);
      }
      v131 = v203;
LABEL_29:
      v99(v131, v52);
      goto LABEL_30;
    }
    v180 = v253;
    defaultLogger()(v51);
    v181 = v256;
    v182 = swift_retain(v256);
    v183 = Logger.logObject.getter(v182);
    v184 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v183, v184))
    {
      v185 = (uint8_t *)swift_slowAlloc(12, -1);
      v186 = swift_slowAlloc(32, -1);
      *(_DWORD *)v185 = 136446210;
      v269 = v185 + 4;
      *(_QWORD *)&v270 = v186;
      v187 = *(_QWORD *)(v181 + 24);
      v188 = *(_QWORD *)(v181 + 32);
      swift_bridgeObjectRetain(v188);
      v189 = v187;
      v53 = v39;
      v273 = sub_1000E3AC8(v189, v188, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, v274, v269);
      swift_release(v181);
      v190 = v188;
      v50 = v266;
      swift_bridgeObjectRelease(v190);
      _os_log_impl((void *)&_mh_execute_header, v183, v184, "E2E encryption data in container %{public}s is unrecoverable, wiping container", v185, 0xCu);
      swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v186, -1, -1);
      swift_slowDealloc(v185, -1, -1);

      (*(void (**)(char *, uint64_t))(v257 + 8))(v253, v258);
    }
    else
    {

      swift_release(v181);
      (*(void (**)(char *, uint64_t))(v257 + 8))(v180, v258);
    }
    v191 = v250;
    v213 = swift_allocBox(v52);
    v214 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v215 = swift_allocError(v52, v214, 0, 0);
    v216 = v247;
    (*(void (**)(uint64_t, char *, uint64_t))(v247 + 16))(v217, v53, v52);
    v218 = v264;
    (*(void (**)(char *, _QWORD, uint64_t))(v267 + 104))(v264, enum case for DIPError.Code.internalError(_:), v50);
    v219 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100550DA0, v215, v218, 0, v219, 0xD000000000000057, 0x80000001005505D0, 0xD000000000000022, 0x8000000100550CE0, 287);
    v220 = (_QWORD *)swift_allocObject(&unk_10060A0F0, 40, 7);
    v220[2] = v213;
    v220[3] = sub_100027AD4;
    v220[4] = v191;
    swift_retain(v213);
    swift_retain(v191);
    sub_100186EC4((uint64_t)sub_10019A3C4, (uint64_t)v220);
    swift_release(v220);
    (*(void (**)(char *, uint64_t))(v216 + 8))(v53, v52);
    swift_release(v191);
    v61 = v213;
  }
  else
  {
    v47(v31, 1, 1, v32);
    sub_100008030((uint64_t)v31, &qword_100636620);
    *v22 = v44;
    v60 = v268;
    v59 = v269;
    (*(void (**)(uint64_t *, _QWORD, uint8_t *))(v268 + 104))(v22, enum case for DIPRetryResult.stopWithError(_:), v269);
    swift_errorRetain(v44);
    a3(v22);
    (*(void (**)(uint64_t *, uint8_t *))(v60 + 8))(v22, v59);
    v61 = v40;
  }
  return swift_release(v61);
}

uint64_t sub_10019A384()
{
  return sub_10019A390((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10019A390(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10019A450()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_1000352D8(v0, qword_100636CE0);
  *(_QWORD *)sub_1000352C0(v0, (uint64_t)qword_100636CE0) = 5;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

void sub_10019A4B0(char *a1)
{
  sub_1003C2224(*a1);
}

void sub_10019A4BC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10019A518()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0xEE006B636142746ELL);
  swift_bridgeObjectRelease(0xEE006B636142746ELL);
  return Hasher._finalize()();
}

void sub_10019A5B8()
{
  __asm { BR              X10 }
}

uint64_t sub_10019A600(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0xEE006B636142746ELL);
  return swift_bridgeObjectRelease(0xEE006B636142746ELL);
}

void sub_10019A684(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10019A6DC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0xEE006B636142746ELL);
  swift_bridgeObjectRelease(0xEE006B636142746ELL);
  return Hasher._finalize()();
}

unint64_t sub_10019A77C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001A0D48(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019A7A8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10019A7E4 + 4 * byte_10052543F[*v0]))();
}

void sub_10019A7E4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0xEE006B636142746ELL;
}

void sub_10019A7FC(_QWORD *a1@<X8>)
{
  *a1 = 0x6569666C6573;
  a1[1] = 0xE600000000000000;
}

void sub_10019A814(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "livenessVideo");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10019A83C(char *a1@<X8>)
{
  strcpy(a1, "auxiliaryVideo");
  a1[15] = -18;
}

void sub_10019A864(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  os_unfair_lock_s *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSString v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void (**v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  unsigned int v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  os_unfair_lock_s *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSString v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  char *v93;
  __n128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint8_t *v98;
  void (*v99)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  void *object;
  Swift::String v104;
  __int128 v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  os_unfair_lock_s *v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  os_unfair_lock_s *v116;
  uint64_t v117;
  os_unfair_lock_s *v118;
  os_unfair_lock_s *v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  os_unfair_lock_s *v127;
  uint64_t v128;
  os_unfair_lock_s *v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  os_unfair_lock_s *v132;
  os_unfair_lock_s *v133;
  void *v134;
  uint64_t v135;
  __n128 v136;
  char *v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  char *v151;
  char *v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  _QWORD v158[2];
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  os_unfair_lock_s *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  os_unfair_lock_s *v180;
  void (**v181)(char *, uint64_t);
  uint64_t v182;
  _BYTE v183[71];
  char v184;
  _QWORD v185[3];
  id v186[9];
  uint64_t v187;

  v179 = a1;
  v2 = type metadata accessor for URLResourceValues(0);
  v160 = *(_QWORD *)(v2 - 8);
  v161 = v2;
  __chkstk_darwin(v2);
  v159 = (char *)v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100630A48);
  v5 = __chkstk_darwin(v4);
  v176 = (os_unfair_lock_s *)((char *)v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v175 = (char *)v158 - v7;
  v8 = type metadata accessor for Logger(0);
  v181 = *(void (***)(char *, uint64_t))(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v158[1] = (char *)v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v158 - v12;
  v14 = __chkstk_darwin(v11);
  v163 = (char *)v158 - v15;
  v16 = __chkstk_darwin(v14);
  v177 = (char *)v158 - v17;
  v18 = __chkstk_darwin(v16);
  v165 = (char *)v158 - v19;
  v20 = __chkstk_darwin(v18);
  v174 = (char *)v158 - v21;
  __chkstk_darwin(v20);
  v164 = (char *)v158 - v22;
  v23 = type metadata accessor for DIPError.Code(0);
  v172 = *(_QWORD *)(v23 - 8);
  v173 = v23;
  __chkstk_darwin(v23);
  v178 = (char *)v158 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)v158 - v29;
  v31 = __chkstk_darwin(v28);
  v34 = (char *)v158 - v33;
  v35 = *(_QWORD *)(v1 + 40);
  if (v35 >> 60 == 15)
  {
    v36 = v8;
    v37 = v26;
    v38 = defaultLogger()(v31);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "No asset data is set, so there is nothing to write to disk", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v181[1](v13, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v179, 1, 1, v25);
    return;
  }
  v168 = v32;
  v169 = v8;
  v158[0] = v1;
  v42 = *(_QWORD *)(v1 + 32);
  v43 = (void *)objc_opt_self(NSFileManager);
  v166 = v42;
  v162 = v35;
  sub_100022948(v42, v35);
  v44 = (os_unfair_lock_s *)objc_msgSend(v43, "defaultManager");
  v184 = 0;
  static URL.libraryDirectory.getter(v44);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100551170, 1);
  v45 = *(void (**)(char *, uint64_t))(v26 + 8);
  v167 = v25;
  v171 = v45;
  v46 = ((uint64_t (*)(char *, uint64_t))v45)(v30, v25);
  v170 = v34;
  URL.path.getter(v46);
  v48 = v47;
  v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v48);
  LODWORD(v48) = -[os_unfair_lock_s fileExistsAtPath:isDirectory:](v44, "fileExistsAtPath:isDirectory:", v49, &v184);

  if ((_DWORD)v48)
  {
    if ((v184 & 1) != 0)
    {
      v51 = v26;
      v52 = v164;
      v53 = defaultLogger()(v50);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.debug.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "uploads path exists", v56, 2u);
        swift_slowDealloc(v56, -1, -1);
      }

      v181 = (void (**)(char *, uint64_t))v181[1];
      v57 = (id)((uint64_t (*)(char *, uint64_t))v181)(v52, v169);
      v58 = v167;
      v59 = v170;
      goto LABEL_14;
    }
    v186[0] = 0;
    v186[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v101 = swift_bridgeObjectRelease(v186[1]);
    v186[0] = (id)0xD000000000000014;
    v186[1] = (id)0x80000001005511F0;
    v59 = v170;
    v102._countAndFlagsBits = URL.path.getter(v101);
    object = v102._object;
    String.append(_:)(v102);
    swift_bridgeObjectRelease(object);
    v104._countAndFlagsBits = 0xD000000000000019;
    v104._object = (void *)0x8000000100551210;
    String.append(_:)(v104);
    v105 = *(_OWORD *)v186;
    v106 = v178;
    (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v178, enum case for DIPError.Code.cloudkitCannotSaveDataBeforeUploads(_:), v173);
    v107 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v108 = type metadata accessor for DIPError(0);
    v109 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v108, v109, 0, 0);
    v110 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v105, *((_QWORD *)&v105 + 1), 0, v106, 0, v107, 0xD00000000000005BLL, 0x8000000100551190, 0x446F546574697277, 0xED000029286B7369, 83);
LABEL_19:
    swift_willThrow(v110);

    sub_100007F78(v166, v162);
    v171(v59, v167);
    return;
  }
  v51 = v26;
  v60 = v174;
  v61 = defaultLogger()(v50);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "uploads path doesn't exist. Creating the directory...", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }

  v65 = (void (**)(char *, uint64_t))v181[1];
  v66 = ((uint64_t (*)(char *, uint64_t))v65)(v60, v169);
  v59 = v170;
  URL.path.getter(v66);
  v68 = v67;
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  v186[0] = 0;
  v70 = -[os_unfair_lock_s createDirectoryAtPath:withIntermediateDirectories:attributes:error:](v44, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v69, 0, 0, v186);

  v71 = v186[0];
  if (!v70)
  {
    v111 = v186[0];
    _convertNSErrorToError(_:)(v71);

    goto LABEL_19;
  }
  v181 = v65;
  v57 = v186[0];
  v58 = v167;
LABEL_14:
  v72 = URL.path.getter(v57);
  v74 = v73;
  URL.init(fileURLWithPath:)(v72);
  swift_bridgeObjectRelease(v74);
  v75 = v158[0];
  v76 = v168;
  URL.appendingPathComponent(_:)(*(_QWORD *)(v158[0] + 16), *(_QWORD *)(v158[0] + 24));
  v77 = v30;
  v78 = v171;
  v171(v77, v58);
  v79 = (uint64_t)v175;
  v164 = *(char **)(v51 + 16);
  ((void (*)(char *, char *, uint64_t))v164)(v175, v76, v58);
  v174 = *(char **)(v51 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v174)(v79, 0, 1, v58);
  v80 = v176;
  sub_1000A1F54(v79, (uint64_t)v176, &qword_100630A48);
  v81 = v75 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL;
  swift_beginAccess(v75 + OBJC_IVAR____TtC8coreidvd11UploadAsset_assetFileURL, v186, 33, 0);
  sub_1000494F8((uint64_t)v80, v81);
  v82 = swift_endAccess(v186);
  URL.path.getter(v82);
  v84 = v83;
  v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v84);
  LODWORD(v84) = -[os_unfair_lock_s fileExistsAtPath:](v44, "fileExistsAtPath:", v85);

  if ((_DWORD)v84)
  {
    v87 = v165;
    v88 = defaultLogger()(v86);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.debug.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(32, -1);
      v186[0] = (id)v92;
      *(_DWORD *)v91 = 136315138;
      v178 = (char *)(v91 + 4);
      v176 = v44;
      v93 = v168;
      v94 = swift_beginAccess(v168, v185, 0, 0);
      v95 = URL.absoluteString.getter(v94);
      v97 = v96;
      v182 = sub_1000E3AC8(v95, v96, (uint64_t *)v186);
      v58 = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v178);
      swift_bridgeObjectRelease(v97);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Not writing asset to path %s because a file already exists at that path", v91, 0xCu);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      v98 = v91;
      v78 = v171;
      swift_slowDealloc(v98, -1, -1);

      sub_100007F78(v166, v162);
      v99 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v174;
      ((void (*)(char *, uint64_t))v181)(v87, v169);
      v78(v170, v58);
      v100 = v179;
    }
    else
    {

      sub_100007F78(v166, v162);
      ((void (*)(char *, uint64_t))v181)(v87, v169);
      v78(v59, v58);
      v100 = v179;
      v93 = v168;
      v99 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v174;
    }
    v136 = swift_beginAccess(v93, v186, 0, 0);
    ((void (*)(uint64_t, char *, uint64_t, __n128))v164)(v100, v93, v58, v136);
    v99(v100, 0, 1, v58);
    v78(v93, v58);
  }
  else
  {
    v112 = v180;
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v113 = qword_1006702A0;
    v114 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v115 = (uint64_t)&v114[4];
    v116 = v114 + 52;
    os_unfair_lock_lock(v114 + 52);
    sub_100139D14(v115, v113, v186);
    if (v112)
    {
      os_unfair_lock_unlock(v116);
      __break(1u);
      os_unfair_lock_unlock(v112);
      __break(1u);
      os_unfair_lock_unlock(v80);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v116);
      v117 = v187;
      swift_retain(v187);
      sub_10001D410(v186);
      v118 = *(os_unfair_lock_s **)(v117 + 16);
      v119 = v118 + 4;
      v120 = v118 + 6;
      os_unfair_lock_lock(v118 + 6);
      sub_1001DC9CC(v119);
      v176 = v44;
      os_unfair_lock_unlock(v120);
      v121 = swift_release(v117);
      v122 = defaultLogger()(v121);
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.debug.getter(v123);
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v125 = 134217984;
        v126 = qword_1006702A0;
        v127 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
        v128 = (uint64_t)&v127[4];
        v129 = v127 + 52;
        os_unfair_lock_lock(v127 + 52);
        sub_100139D14(v128, v126, v186);
        os_unfair_lock_unlock(v129);
        v130 = v187;
        swift_retain(v187);
        sub_10001D410(v186);
        v131 = *(os_unfair_lock_s **)(v130 + 16);
        v132 = v131 + 4;
        v133 = v131 + 6;
        os_unfair_lock_lock(v131 + 6);
        sub_100003C14(v132, v185);
        os_unfair_lock_unlock(v133);
        v134 = (void *)v185[0];
        swift_release(v130);
        v186[0] = v134;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, &v186[1], v125 + 4);
        _os_log_impl((void *)&_mh_execute_header, v123, v124, "Current upload count: %ld", v125, 0xCu);
        swift_slowDealloc(v125, -1, -1);
        v58 = v167;
      }

      ((void (*)(char *, uint64_t))v181)(v177, v169);
      v135 = Data.write(to:options:)(v168, 0, v166, v162);
      v137 = v163;
      v138 = defaultLogger()(v135);
      v139 = Logger.logObject.getter(v138);
      v140 = static os_log_type_t.debug.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        v142 = (uint8_t *)swift_slowAlloc(12, -1);
        v143 = swift_slowAlloc(32, -1);
        v186[0] = (id)v143;
        *(_DWORD *)v142 = 136315138;
        v180 = (os_unfair_lock_s *)(v142 + 4);
        v144 = v168;
        swift_beginAccess(v168, v185, 0, 0);
        v146 = URL.path.getter(v145);
        v148 = v147;
        v182 = sub_1000E3AC8(v146, v147, (uint64_t *)v186);
        v58 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v180);
        swift_bridgeObjectRelease(v148);
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "Writing the document to fileURL %s", v142, 0xCu);
        swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v143, -1, -1);
        swift_slowDealloc(v142, -1, -1);

        v149 = ((uint64_t (*)(char *, uint64_t))v181)(v163, v169);
        v151 = v170;
        v150 = v171;
      }
      else
      {

        v149 = ((uint64_t (*)(char *, uint64_t))v181)(v137, v169);
        v151 = v170;
        v150 = v171;
        v144 = v168;
      }
      v152 = v159;
      URLResourceValues.init()(v149);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v153 = swift_beginAccess(v144, v186, 33, 0);
      URL.setResourceValues(_:)(v152, v153);
      swift_endAccess(v186);

      sub_100007F78(v166, v162);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v152, v161);
      v150(v151, v58);
      v154 = v179;
      v155 = *(_QWORD *)(v158[0] + 32);
      v156 = *(_QWORD *)(v158[0] + 40);
      *(_OWORD *)(v158[0] + 32) = xmmword_100520790;
      sub_100007F78(v155, v156);
      v157 = v168;
      ((void (*)(uint64_t, char *, uint64_t))v164)(v154, v168, v58);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v174)(v154, 0, 1, v58);
      v150(v157, v58);
    }
  }
}

