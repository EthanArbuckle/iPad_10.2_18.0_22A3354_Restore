BOOL sub_1000031E0(id a1, BMStoreEvent *a2, BOOL *a3)
{
  return 1;
}

void sub_1000032A0(id a1)
{
  dispatch_queue_t v1;

  v1 = dispatch_queue_create("com.apple.coreidvd.dip-bluetooth-manager.queue", 0);
  +[BluetoothManager setSharedInstanceQueue:](BluetoothManager, "setSharedInstanceQueue:", v1);

}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  Swift::String v12;
  id v13;
  BOOL v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v28;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000011, 0x800000010053AC70, 0x6E6F6D656144, 0xE600000000000000);
  setDefaultLogger(_:)(v10);
  v11 = *(void (**)(char *, uint64_t))(v8 + 8);
  v11(v10, v7);
  v12._countAndFlagsBits = 0x6476646965726F63;
  v12._object = (void *)0xE800000000000000;
  setProcessName(_:)(v12);
  byte_100670060 = isInternalBuild()();
  v13 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (v13)
  {
    v15 = v13;
    v16 = objc_msgSend(v13, "effectiveBoolValueForSetting:", MCFeatureDiagnosticsSubmissionAllowed);

    v14 = v16 == 1;
  }
  else
  {
    v14 = 0;
  }
  byte_100670061 = v14;
  qword_100670068 = 0xD000000000000014;
  unk_100670070 = 0x800000010053AC90;
  if ((_set_user_dir_suffix("com.apple.coreidvd") & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v20 = swift_allocError(v18, v19, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010053ACD0, 0, v6, 0, v17, 0xD000000000000041, 0x800000010053ACF0, 0x6476646965726F63, 0xE800000000000000, 33);
    defaultLogger()(v21);
    DIPRecordError(_:message:log:)(v20, 0, 0xE000000000000000, v10);
    v11(v10, v7);
    swift_errorRelease(v20);
  }
  qword_100670078 = (uint64_t)dispatch_group_create();
  qword_100670080 = 0;
  v22 = objc_autoreleasePoolPush();
  v23 = type metadata accessor for DaemonInitializer();
  swift_allocObject(v23, 128, 7);
  v24 = sub_10002B460();
  v25 = qword_100670080;
  qword_100670080 = (uint64_t)v24;
  swift_release(v25);
  objc_autoreleasePoolPop(v22);
  v26 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v26, "run");

  exit(0);
}

uint64_t sub_100003624(uint64_t a1, uint64_t a2)
{
  return sub_1000043D0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100003644(uint64_t a1, uint64_t a2)
{
  return sub_1000043D0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_100003658(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000366C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000036B0()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000036D8(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_100003718@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_10000372C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10000375C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100003770(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_100003784@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

id sub_100003794()
{
  id *v0;

  return *v0;
}

uint64_t sub_10000379C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1000037A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F950, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F4FC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000037E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F950, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F4FC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100003828(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100003868(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F910, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F628);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000038A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F910, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F628);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000038E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_100003928(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100003930@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100003944@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_100003958@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100003984@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000039A8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000039BC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000039D0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000039E4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000039F8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100003A0C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100003A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100003A34(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100003A48(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100003ABC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100003B38@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void sub_100003B78(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_100003B84(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100003B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F990, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051FBA4);
  v3 = sub_100004790(&qword_10062F998, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051FA4C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_100003C14@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100003C20()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(DIIdentityErrorDomain);
}

uint64_t sub_100003C30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100003C70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100003CB0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100003D14()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100003D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

_QWORD *sub_100003D9C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100003DAC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(DIIdentityFatalErrorDomain);
}

uint64_t sub_100003DBC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100003DFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100003E3C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100003EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100003EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100003F4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100106D80();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100003F88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F778, (uint64_t (*)(uint64_t))type metadata accessor for DIHttpHeaderName, (uint64_t)&unk_10051EC28);
  v3 = sub_100004790((unint64_t *)&unk_10062F780, (uint64_t (*)(uint64_t))type metadata accessor for DIHttpHeaderName, (uint64_t)&unk_10051EBC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

BOOL sub_10000400C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004020(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F9E0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10051FE8C);
  v3 = sub_100004790(&qword_10062F9E8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10051F210);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000040A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F9C0, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051FC2C);
  v3 = sub_100004790(&qword_10062F9C8, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051F6CC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F9A0, (uint64_t (*)(uint64_t))type metadata accessor for DIAttributeImageEncoding, (uint64_t)&unk_10051F948);
  v3 = sub_100004790(&qword_10062F9A8, (uint64_t (*)(uint64_t))type metadata accessor for DIAttributeImageEncoding, (uint64_t)&unk_10051F8E8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000041AC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000041D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F9B0, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051FBE8);
  v3 = sub_100004790(&qword_10062F9B8, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051F7D4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000042B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100004308@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000434C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004790(&qword_10062F9D0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10051F384);
  v3 = sub_100004790(&qword_10062F9D8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10051F324);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000043D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000440C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000444C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000044BC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_100004544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100004828((uint64_t *)&unk_100633440);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100004828(&qword_10062F790);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000048D4(v13, (uint64_t)v5);
    result = sub_100004868((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_10000491C(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void type metadata accessor for PDSPushEnvironment(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F728, (uint64_t)&unk_100603120);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F730, (uint64_t)&unk_100603140);
}

void type metadata accessor for NFSecureElementHWType(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F738, (uint64_t)&unk_100603170);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F740, (uint64_t)&unk_100603190);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F748, (uint64_t)&unk_1006031B0);
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F750, (uint64_t)&unk_1006031E0);
}

void type metadata accessor for DIHttpHeaderName(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F758, (uint64_t)&unk_100603210);
}

uint64_t sub_100004764()
{
  return sub_100004790(&qword_10062F760, (uint64_t (*)(uint64_t))type metadata accessor for DIHttpHeaderName, (uint64_t)&unk_10051EB8C);
}

uint64_t sub_100004790(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000047D0()
{
  return sub_100004790(&qword_10062F768, (uint64_t (*)(uint64_t))type metadata accessor for DIHttpHeaderName, (uint64_t)&unk_10051EB60);
}

uint64_t sub_1000047FC()
{
  return sub_100004790(&qword_10062F770, (uint64_t (*)(uint64_t))type metadata accessor for DIHttpHeaderName, (uint64_t)&unk_10051EBFC);
}

uint64_t sub_100004828(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100004868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for DIPError.PropertyKey(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F798, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10000492C(a1, v7);
}

uint64_t sub_1000048D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_100633440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10000491C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10000492C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for DIPError.PropertyKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100004790(&qword_10062F7A0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void type metadata accessor for SecTrust(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7A8, (uint64_t)&unk_100603238);
}

void type metadata accessor for DIUploadContainer(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7B0, (uint64_t)&unk_100603268);
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7B8, (uint64_t)&unk_100603288);
}

void type metadata accessor for DIAttributeImageEncoding(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7C0, (uint64_t)&unk_1006032B0);
}

void type metadata accessor for DISharingOption(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7C8, (uint64_t)&unk_1006032D8);
}

__n128 initializeWithTake for DIPConversation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7D0, (uint64_t)&unk_100603358);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7D8, (uint64_t)&unk_100603380);
}

void type metadata accessor for PKPaymentRequestClientAnalyticsParameters(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7E0, (uint64_t)&unk_1006033B0);
}

uint64_t getEnumTagSinglePayload for ImageDimension(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ImageDimension(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7E8, (uint64_t)&unk_100603430);
}

void type metadata accessor for PKPendingProvisioningStatus(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7F0, (uint64_t)&unk_100603458);
}

void type metadata accessor for DIIdentityFatalError(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F7F8, (uint64_t)&unk_100603478);
}

void type metadata accessor for DIIdentityError(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F800, (uint64_t)&unk_1006034A0);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F808, (uint64_t)&unk_1006034C8);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F810, (uint64_t)&unk_1006034F0);
}

void type metadata accessor for IdentityProofingOptions(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F818, (uint64_t)&unk_100603518);
}

void type metadata accessor for COSEKeyOKPCurve(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F820, (uint64_t)&unk_100603540);
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F828, (uint64_t)&unk_100603560);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F830, (uint64_t)&unk_100603580);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F838, (uint64_t)&unk_1006035A8);
}

uint64_t sub_100004C40()
{
  return sub_100004790(&qword_10062F840, (uint64_t (*)(uint64_t))type metadata accessor for IdentityProofingOptions, (uint64_t)&unk_10051F02C);
}

uint64_t sub_100004C6C()
{
  return sub_100004790(&qword_10062F848, (uint64_t (*)(uint64_t))type metadata accessor for IdentityProofingOptions, (uint64_t)&unk_10051EFF8);
}

uint64_t sub_100004C98()
{
  return sub_100004790(&qword_10062F850, (uint64_t (*)(uint64_t))type metadata accessor for IdentityProofingOptions, (uint64_t)&unk_10051F058);
}

uint64_t sub_100004CC4()
{
  return sub_100004790(&qword_10062F858, (uint64_t (*)(uint64_t))type metadata accessor for IdentityProofingOptions, (uint64_t)&unk_10051F094);
}

uint64_t sub_100004CF0()
{
  return sub_100004790(&qword_10062F860, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10051F1D4);
}

uint64_t sub_100004D1C()
{
  return sub_100004790(&qword_10062F868, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10051F1A8);
}

uint64_t sub_100004D48()
{
  return sub_100004790(&qword_10062F870, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10051F2E8);
}

uint64_t sub_100004D74()
{
  return sub_100004790(&qword_10062F878, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10051F2BC);
}

uint64_t sub_100004DA0()
{
  return sub_100004790(&qword_10062F880, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_10051F358);
}

uint64_t sub_100004DCC()
{
  return sub_100004790(&qword_10062F888, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F414);
}

uint64_t sub_100004DF8()
{
  return sub_100004790(&qword_10062F890, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F440);
}

uint64_t sub_100004E24()
{
  return sub_100004790(&qword_10062F898, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F540);
}

uint64_t sub_100004E50()
{
  return sub_100004790(&qword_10062F8A0, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F56C);
}

uint64_t sub_100004E7C()
{
  return sub_100004790(&qword_10062F8A8, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051F694);
}

uint64_t sub_100004EA8()
{
  return sub_100004790(&qword_10062F8B0, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051F66C);
}

uint64_t sub_100004ED4()
{
  return sub_100004790(&qword_10062F8B8, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051F798);
}

uint64_t sub_100004F00()
{
  return sub_100004790(&qword_10062F8C0, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051F76C);
}

uint64_t sub_100004F2C()
{
  return sub_100004790(&qword_10062F8C8, (uint64_t (*)(uint64_t))type metadata accessor for DIAttributeImageEncoding, (uint64_t)&unk_10051F8AC);
}

uint64_t sub_100004F58()
{
  return sub_100004790(&qword_10062F8D0, (uint64_t (*)(uint64_t))type metadata accessor for DIAttributeImageEncoding, (uint64_t)&unk_10051F880);
}

uint64_t sub_100004F84()
{
  return sub_100004790(&qword_10062F8D8, (uint64_t (*)(uint64_t))type metadata accessor for DIAttributeImageEncoding, (uint64_t)&unk_10051F91C);
}

uint64_t sub_100004FB0()
{
  return sub_100004790(&qword_10062F8E0, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051FA10);
}

uint64_t sub_100004FDC()
{
  return sub_100004790(&qword_10062F8E8, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051F9E4);
}

uint64_t sub_100005008()
{
  return sub_100004790(&qword_10062F8F0, (uint64_t (*)(uint64_t))type metadata accessor for DIUploadContainer, (uint64_t)&unk_10051FB3C);
}

uint64_t sub_100005034()
{
  return sub_100004790(&qword_10062F8F8, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&unk_10051FA80);
}

uint64_t sub_100005060()
{
  return sub_100004790(&qword_10062F900, (uint64_t (*)(uint64_t))type metadata accessor for DISharingOption, (uint64_t)&unk_10051F808);
}

uint64_t sub_10000508C()
{
  return sub_100004790(&qword_10062F908, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051F6FC);
}

uint64_t sub_1000050B8()
{
  return sub_100004790(&qword_10062F910, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F628);
}

uint64_t sub_1000050E4()
{
  return sub_100004790(&qword_10062F918, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F5F4);
}

uint64_t sub_100005110()
{
  return sub_100004790(&qword_10062F920, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051F5B0);
}

uint64_t sub_10000513C()
{
  return sub_100004790(&qword_10062F928, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10051FD14);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F9F8, (uint64_t)&unk_1006035F8);
}

uint64_t sub_10000517C()
{
  return sub_100004790(&qword_10062F930, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10051FCD8);
}

unint64_t sub_1000051AC()
{
  unint64_t result;

  result = qword_10062F938;
  if (!qword_10062F938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10062F938);
  }
  return result;
}

uint64_t sub_1000051F0()
{
  return sub_100004790(&qword_10062F940, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10051FD50);
}

uint64_t sub_10000521C()
{
  return sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
}

uint64_t sub_100005248()
{
  return sub_100004790(&qword_10062F950, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F4FC);
}

uint64_t sub_100005274()
{
  return sub_100004790(&qword_10062F958, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F4C8);
}

uint64_t sub_1000052A0()
{
  return sub_100004790(&qword_10062F960, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051F484);
}

uint64_t sub_1000052CC()
{
  return sub_100004790(&qword_10062F968, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10051FE24);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10000530C(a1, &qword_10062F9F0, (uint64_t)&unk_1006035D8);
}

void sub_10000530C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005350()
{
  return sub_100004790(&qword_10062F970, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10051FDE8);
}

uint64_t sub_10000537C()
{
  return sub_100004790(&qword_10062F978, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10051FE60);
}

uint64_t sub_1000053A8()
{
  return sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
}

uint64_t sub_1000053D4()
{
  return sub_100004790(&qword_10062F988, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10051F244);
}

uint64_t sub_100005448()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v0 = sub_100004828((uint64_t *)&unk_1006371D0);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NWPath(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v17 - v9;
  dispatch thunk of NetworkMonitor.currentPath.getter(v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100006310((uint64_t)v2);
    v11 = 0;
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v10, v2, v3);
    v13 = NWPath.isExpensive.getter(v12);
    v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
    if ((v13 & 1) != 0)
      v11 = 1;
    else
      v11 = NWPath.isConstrained.getter(v14);
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v7, v3);
    v15(v10, v3);
  }
  return v11 & 1;
}

uint64_t sub_1000055A4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_BYTE *)(v3 + 288) = a2;
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = v2;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 104) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 112) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v6);
  v7 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  *(_QWORD *)(v3 + 144) = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v8);
  v9 = sub_100004828((uint64_t *)&unk_1006371D0);
  *(_QWORD *)(v3 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWPath(0);
  *(_QWORD *)(v3 + 176) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 184) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v12);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v12);
  return swift_task_switch(sub_1000056B4, 0, 0);
}

uint64_t sub_1000056B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  dispatch thunk of NetworkMonitor.currentPath.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100006310(*(_QWORD *)(v0 + 168));
    v4 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 32))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
    v13 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v0 + 208) = v13;
    swift_retain(v13);
    v14 = sub_1004585BC();
    swift_release(v14);
    *(_QWORD *)(v0 + 216) = sub_1004585BC();
    v15 = (_QWORD *)swift_task_alloc(dword_10064212C);
    *(_QWORD *)(v0 + 224) = v15;
    *v15 = v0;
    v15[1] = sub_100005834;
    return sub_100457E5C(*(_QWORD *)(v0 + 160), 0xD000000000000024, 0x800000010053AEF0, 0xD000000000000027, 0x800000010053AF20);
  }
}

uint64_t sub_100005834()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000059E8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 216));
    v4 = sub_1000058A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000058A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 208));
  v4 = v1 + *(int *)(v2 + 52);
  *(_QWORD *)(v0 + 240) = *(_QWORD *)v4;
  *(_BYTE *)(v0 + 289) = *(_BYTE *)(v4 + 8);
  sub_100006350(v1);
  v5 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v0 + 248) = v5;
  swift_retain(v5);
  v6 = sub_1004585BC();
  swift_release(v6);
  *(_QWORD *)(v0 + 256) = sub_1004585BC();
  v7 = (_QWORD *)swift_task_alloc(dword_10064212C);
  *(_QWORD *)(v0 + 264) = v7;
  *v7 = v0;
  v7[1] = sub_10000597C;
  return sub_100457E5C(*(_QWORD *)(v0 + 152), 0xD000000000000024, 0x800000010053AEF0, 0xD000000000000027, 0x800000010053AF20);
}

uint64_t sub_10000597C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10000603C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 256));
    v4 = sub_100005C70;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000059E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 216));
  v3 = swift_release(v2);
  defaultLogger()(v3);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v30 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v32 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received an error while fetching the static workflow to get the upload threshold %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  v18 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100005C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 248));
  v3 = v1 + *(int *)(v2 + 56);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(v3 + 8);
  v6 = sub_100006350(v1);
  if (v5)
    v7 = 0;
  else
    v7 = v4;
  v53 = v7;
  v8 = defaultLogger()(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 88);
    if (*(_BYTE *)(v0 + 289))
      v12 = 0;
    else
      v12 = *(_QWORD *)(v0 + 240);
    v13 = swift_slowAlloc(28, -1);
    *(_DWORD *)v13 = 134218496;
    *(_QWORD *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v13 + 4);
    *(_QWORD *)(v0 + 72) = v12;
    *(_WORD *)(v13 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14);
    *(_WORD *)(v13 + 22) = 1024;
    *(_DWORD *)(v0 + 284) = v12 < v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 284, v0 + 288, v13 + 24);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Comparing the uploadSize %lld with the bill shock threshold %ld. isDataGreaterThanBillShockThreshold: %{BOOL}d", (uint8_t *)v13, 0x1Cu);
    swift_slowDealloc(v13, -1, -1);
  }

  v52 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8);
  v14 = v52(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
  v15 = defaultLogger()(v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 88);
    if (*(_BYTE *)(v0 + 289))
      v19 = 0;
    else
      v19 = *(_QWORD *)(v0 + 240);
    v20 = swift_slowAlloc(28, -1);
    *(_DWORD *)v20 = 134218496;
    *(_QWORD *)(v0 + 56) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v20 + 4);
    *(_WORD *)(v20 + 12) = 2048;
    *(_QWORD *)(v0 + 64) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v20 + 14);
    *(_WORD *)(v20 + 22) = 1024;
    *(_DWORD *)(v0 + 280) = v53 < v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 284, v20 + 24);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Comparing the uploadSize %lld with the low data mode threshold %ld. isDataGreaterThanLowDataModeThreshold: %{BOOL}d", (uint8_t *)v20, 0x1Cu);
    swift_slowDealloc(v20, -1, -1);
  }
  v21 = *(unsigned __int8 *)(v0 + 289);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 88);

  if (v21)
    v29 = 0;
  else
    v29 = v22;
  v30 = v52(v27, v28);
  v31 = NWPath.isExpensive.getter(v30);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v23, v25);
  v34 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 176);
  v36 = *(_QWORD *)(v0 + 184);
  if ((v31 & 1) != 0 && v29 < v51)
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v37(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    v37(v33, v35);
    v38 = 1;
  }
  else
  {
    v39 = *(unsigned __int8 *)(v0 + 288);
    v40 = *(_QWORD *)(v0 + 88);
    v41 = NWPath.isConstrained.getter(v32);
    v42 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v42(v34, v35);
    v42(v33, v35);
    v38 = v41 & (v39 ^ 1) & (v53 < v40);
  }
  v43 = *(_QWORD *)(v0 + 192);
  v45 = *(_QWORD *)(v0 + 160);
  v44 = *(_QWORD *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 152);
  v48 = *(_QWORD *)(v0 + 128);
  v47 = *(_QWORD *)(v0 + 136);
  v49 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v38);
}

uint64_t sub_10000603C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 256));
  v3 = swift_release(v2);
  defaultLogger()(v3);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v30 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v32 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v11 = v10;
    *(_QWORD *)(v0 + 48) = sub_1000E3AC8(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received an error while fetching the static workflow to get the upload threshold %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 104);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  v18 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000062C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for IdentityProofingUploadsHelper()
{
  return objc_opt_self(_TtC8coreidvd29IdentityProofingUploadsHelper);
}

uint64_t sub_100006310(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828((uint64_t *)&unk_1006371D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100006350(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10000638C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for COSESignatureValidator(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for DIPCertUsage(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100006458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 20)));
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for DIPCertUsage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t _s8coreidvd24DigitalPresentmentHelperVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000064E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for DIPCertUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t sub_100006580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  sub_10000660C((_QWORD *)(a1 + *(int *)(a3 + 20)), (_QWORD *)(a2 + *(int *)(a3 + 20)));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DIPCertUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

_QWORD *sub_10000660C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_100006774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = type metadata accessor for DIPCertUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_100006808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DIPCertUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000068B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000068BC);
}

uint64_t sub_1000068BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for COSESignatureValidator(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for DIPCertUsage(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100006968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100006974);
}

uint64_t sub_100006974(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for COSESignatureValidator(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for DIPCertUsage(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TrustValidator(uint64_t a1)
{
  uint64_t result;

  result = qword_10062FBF0;
  if (!qword_10062FBF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustValidator);
  return result;
}

uint64_t sub_100006A58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for COSESignatureValidator(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "(";
    result = type metadata accessor for DIPCertUsage(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100006AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v6[4] = a4;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a2;
  v10 = type metadata accessor for DIPError.Code(0);
  v6[6] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[7] = v11;
  v6[8] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int **)(a5 + 8);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  v6[9] = v13;
  *v13 = v6;
  v13[1] = sub_100006B8C;
  return v15(a2, a3, a5);
}

uint64_t sub_100006B8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_100006C00, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100006C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = COSE_Sign1.payload.getter(a1);
  if (v3 >> 60 == 15)
  {
    v4 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v4, enum case for DIPError.Code.coseCannotParseResponse(_:), *(_QWORD *)(v1 + 48));
    v5 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_100007F30();
    swift_allocError(v6, v7, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010053AF50, 0, v4, 0, v5, 0xD000000000000053, 0x800000010053AF80, 0xD000000000000014, 0x800000010053AFE0, 29);
    swift_willThrow(v8);
  }
  else
  {
    v9 = v2;
    v10 = v3;
    v12 = *(_QWORD *)(v1 + 32);
    v11 = *(_QWORD *)(v1 + 40);
    v13 = type metadata accessor for CBORDecoder(0);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v14 = CBORDecoder.init()();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v12, v9, v10, v12, v11);
    swift_release(v14);
    sub_100007F78(v9, v10);
  }
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100006D9C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, _QWORD, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;

  v36 = a4;
  v37 = a3;
  v35 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v33 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v32 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v32 - v15;
  v17 = sub_100004828(&qword_10062FC40);
  __chkstk_darwin(v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for COSESignatureValidator(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1;
  sub_100007FD0(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v24 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
    v24(v16, enum case for DIPError.Code.coseUnknownAlgorithm(_:), v5);
    v24(v14, enum case for DIPError.Code.coseInvalidPublicKey(_:), v5);
    v24(v11, enum case for DIPError.Code.coseMisformattedSignature(_:), v5);
    v25 = v33;
    v24(v33, enum case for DIPError.Code.coseInvalidSignature(_:), v5);
    COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(v16, v14, v11, v25);
    sub_100008030(v34, &qword_10062FC40);
    sub_100008030((uint64_t)v19, &qword_10062FC40);
    v26 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  }
  else
  {
    sub_100008030(v34, &qword_10062FC40);
    v26 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v26(v23, v19, v20);
  }
  v27 = v36;
  v26(v36, v23, v20);
  v28 = type metadata accessor for TrustValidator(0);
  sub_100008018(v35, (uint64_t)&v27[*(int *)(v28 + 20)]);
  v29 = &v27[*(int *)(v28 + 24)];
  v30 = type metadata accessor for DIPCertUsage(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, v37, v30);
}

uint64_t sub_100007038(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[2] = a1;
  v2[3] = v1;
  v4 = type metadata accessor for DIPError.Code(0);
  v2[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(dword_10062FC54);
  v2[7] = v6;
  *v6 = v2;
  v6[1] = sub_1000070B0;
  return sub_1000074E0(a1);
}

uint64_t sub_1000070B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000073C8;
  else
    v5 = sub_10000711C;
  return swift_task_switch(v5, 0, 0);
}

void sub_10000711C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;

  v1 = v0[8];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v22 = v0[8];
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0[8]);
    v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
  {
    v10 = v0[5];
    v9 = v0[6];
    v11 = v0[4];
    swift_bridgeObjectRelease(v0[8]);
    v8 = enum case for DIPError.Code.coseInvalidResponse(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.coseInvalidResponse(_:), v11);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100007F30();
    v7 = swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053B000, 0, v9, 0, v12, 0xD000000000000053, 0x800000010053AF80, 0x65746164696C6176, 0xEC000000293A5F28, 74);
    swift_willThrow(v15);
    goto LABEL_10;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[8]);
    v3 = v0[8];
    goto LABEL_7;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = v0[8];
    v4 = *(id *)(v3 + 32);
LABEL_7:
    v5 = v0[9];
    v6 = v0[2];
    swift_bridgeObjectRelease(v3);
    sub_1000078F0(v6);
    v7 = v5;

    if (!v5)
    {
      swift_task_dealloc(v0[6]);
      v21 = (void (*)(void))v0[1];
      goto LABEL_12;
    }
    v8 = enum case for DIPError.Code.coseInvalidResponse(_:);
LABEL_10:
    v16 = v0[6];
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v0[5] + 104))(v16, v8, v0[4]);
    swift_errorRetain(v7);
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100007F30();
    swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v7, v16, 0, v17, 0xD000000000000053, 0x800000010053AF80, 0x65746164696C6176, 0xEC000000293A5F28, 79);
    swift_willThrow(v20);
    swift_errorRelease(v7);
    swift_task_dealloc(v16);
    v21 = (void (*)(void))v0[1];
LABEL_12:
    v21();
    return;
  }
  __break(1u);
}

uint64_t sub_1000073C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.coseInvalidResponse(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100007F30();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000053, 0x800000010053AF80, 0x65746164696C6176, 0xEC000000293A5F28, 79);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000074E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100007540, 0, 0);
}

uint64_t sub_100007540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = COSE_Sign1.x509Chain.getter();
  if (v1)
  {
    v2 = v1;
    v3 = decodeCertificateChain(fromDER:)();
    *(_QWORD *)(v0 + 56) = v3;
    swift_bridgeObjectRelease(v2);
    v4 = *(_QWORD *)(v0 + 24);
    v5 = type metadata accessor for TrustValidator(0);
    v6 = (_QWORD *)(v4 + *(int *)(v5 + 20));
    v7 = v6[3];
    v8 = v6[4];
    sub_10000806C(v6, v7);
    v9 = v4 + *(int *)(v5 + 24);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)[1]);
    *(_QWORD *)(v0 + 64) = v10;
    *v10 = v0;
    v10[1] = sub_100007710;
    return dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)(v3, v9, v7, v8);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v12, enum case for DIPError.Code.coseInvalidResponse(_:), *(_QWORD *)(v0 + 32));
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100007F30();
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x800000010053B0E0, 0, v12, 0, v13, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001DLL, 0x800000010053B100, 88);
    swift_willThrow(v16);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100007710(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v6 = *(_QWORD *)(*v2 + 56);
  v5 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  if (v1)
  {
    v7 = sub_1000077E0;
  }
  else
  {
    *(_QWORD *)(v4 + 80) = a1;
    v7 = sub_10000778C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10000778C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = SecTrustRef.certificateChain.getter();

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000077E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100007F30();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001DLL, 0x800000010053B100, 96);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000078F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t);
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_10062FC58);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PublicKeyAlgorithm(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = SecCertificateRef.rawECPublicKeyData()(v10);
  if (v14 >> 60 == 15)
  {
    v15 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
    v15(v4, enum case for DIPError.Code.coseInvalidPublicKey(_:), v1);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100007F30();
    v19 = swift_allocError(v17, v18, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010053B030, 0, v4, 0, v16, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001BLL, 0x800000010053B060, 106);
    swift_willThrow(v20);
  }
  else
  {
    v51 = v13;
    v52 = v14;
    v50 = v1;
    SecCertificateRef.publicKeyAlgorithm()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_100008030((uint64_t)v7, &qword_10062FC58);
      v15 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
      v1 = v50;
      v15(v4, enum case for DIPError.Code.coseInvalidPublicKey(_:), v50);
      v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v22 = type metadata accessor for DIPError(0);
      v23 = sub_100007F30();
      v19 = swift_allocError(v22, v23, 0, 0);
      v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010053B080, 0, v4, 0, v21, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001BLL, 0x800000010053B060, 110);
      swift_willThrow(v24);
      sub_100007F78(v51, v52);
    }
    else
    {
      v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
      v26 = COSE_Sign1.payload.getter(v25);
      if (v27 >> 60 == 15)
      {
        v15 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
        v1 = v50;
        v15(v4, enum case for DIPError.Code.coseInvalidResponse(_:), v50);
        v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v29 = type metadata accessor for DIPError(0);
        v30 = sub_100007F30();
        v19 = swift_allocError(v29, v30, 0, 0);
        v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010053B0B0, 0, v4, 0, v28, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001BLL, 0x800000010053B060, 114);
        swift_willThrow(v31);
        sub_100007F78(v51, v52);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      }
      else
      {
        v32 = v26;
        v33 = v27;
        v34 = COSE_Sign1.signature.getter();
        v49 = v33;
        v35 = v34;
        v37 = v36;
        v38 = COSE_Sign1.algorithmIdentifier.getter();
        v47 = v35;
        v48 = v37;
        v39 = v35;
        v40 = v49;
        v54 = v32;
        v41 = v53;
        COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(v39, v37, v51, v52, v12, v38, v32, v49);
        if (!v41)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
          sub_100007F8C(v47, v48);
          sub_100007F78(v54, v40);
          return sub_100007F78(v51, v52);
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        sub_100007F8C(v47, v48);
        sub_100007F78(v54, v40);
        sub_100007F78(v51, v52);
        v15 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
        v19 = v41;
        v1 = v50;
      }
    }
  }
  v15(v4, enum case for DIPError.Code.coseInvalidSignature(_:), v1);
  swift_errorRetain(v19);
  v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v43 = type metadata accessor for DIPError(0);
  v44 = sub_100007F30();
  swift_allocError(v43, v44, 0, 0);
  v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v4, 0, v42, 0xD000000000000053, 0x800000010053AF80, 0xD00000000000001BLL, 0x800000010053B060, 125);
  swift_willThrow(v45);
  return swift_errorRelease(v19);
}

uint64_t sub_100007E9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10062FC4C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100007EE8;
  return sub_100007038(a1);
}

uint64_t sub_100007EE8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_100007F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062F6C0;
  if (!qword_10062F6C0)
  {
    v1 = type metadata accessor for DIPError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DIPError, v1);
    atomic_store(result, (unint64_t *)&qword_10062F6C0);
  }
  return result;
}

uint64_t sub_100007F78(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100007F8C(result, a2);
  return result;
}

uint64_t sub_100007F8C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100007FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10062FC40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008018(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100008030(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004828(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_10000806C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100008090()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100012B60();
  qword_100670088 = result;
  unk_100670090 = v1;
  return result;
}

uint64_t sub_1000080B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  Swift::String v52;
  Swift::Bool v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  Swift::String v59;
  Swift::Bool v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  Swift::String v67;
  Swift::Bool v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  Swift::String v75;
  Swift::Bool v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  Swift::String v83;
  Swift::Bool v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  Swift::String v91;
  Swift::Bool v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  Swift::String v99;
  Swift::Bool v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  Swift::String v107;
  Swift::Bool v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  Swift::String v115;
  Swift::Bool v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  Swift::String v123;
  Swift::Bool v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  Swift::String v131;
  Swift::Bool v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  Swift::String v139;
  Swift::Bool v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  Swift::String v147;
  Swift::Bool v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  Swift::String v155;
  Swift::Bool v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  Swift::String v163;
  Swift::Bool v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  Swift::String v171;
  Swift::Bool v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  Swift::String v179;
  Swift::Bool v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  Swift::String v187;
  Swift::Bool v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  Swift::String v195;
  Swift::Bool v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  Swift::String v203;
  Swift::Bool v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  Swift::String v211;
  Swift::Bool v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  id v218;
  Swift::String v219;
  Swift::Bool v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  id v226;
  Swift::String v227;
  Swift::Bool v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  id v234;
  Swift::String v235;
  Swift::Bool v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  Swift::String v243;
  Swift::Bool v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  id v250;
  Swift::String v251;
  Swift::Bool v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  Swift::String v258;
  Swift::Bool v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  id v265;
  Swift::String v266;
  Swift::Bool v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  id v273;
  Swift::String v274;
  Swift::Bool v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  id v280;
  Swift::String v281;
  Swift::Bool v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  id v287;
  Swift::String v288;
  Swift::Bool v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  id v295;
  Swift::String v296;
  Swift::Bool v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  id v303;
  Swift::String v304;
  Swift::Bool v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  Swift::String v318;
  uint64_t v319;
  __n128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  Swift::String v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  _QWORD v359[2];
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;

  v6 = type metadata accessor for ImageQualitySettings(0);
  v351 = *(_QWORD *)(v6 - 8);
  v352 = v6;
  __chkstk_darwin(v6);
  v350 = (char *)&v337 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_10062FC88);
  __chkstk_darwin(v8);
  v358 = (char *)&v337 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = type metadata accessor for IQACode(0);
  v337 = *(_QWORD *)(v338 - 8);
  __chkstk_darwin(v338);
  v11 = (char *)&v337 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v354 = type metadata accessor for IQCType(0);
  v12 = *(_QWORD *)(v354 - 8);
  __chkstk_darwin(v354);
  v14 = (uint64_t *)((char *)&v337 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for IQComplexSignal(0);
  v356 = *(_QWORD *)(v15 - 8);
  v357 = v15;
  __chkstk_darwin(v15);
  v355 = (uint64_t)&v337 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for Logger(0);
  v343 = *(_QWORD *)(v344 - 8);
  __chkstk_darwin(v344);
  v342 = (char *)&v337 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = type metadata accessor for DIPError.Code(0);
  v339 = *(_QWORD *)(v340 - 8);
  __chkstk_darwin(v340);
  v341 = (char *)&v337 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for IQImageType(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v337 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ImageQualityCriteria(0);
  v348 = *(_QWORD *)(v23 - 8);
  v349 = v23;
  v24 = __chkstk_darwin(v23);
  v346 = (char *)&v337 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v337 - v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  v28 = *(uint64_t (**)(char *, uint64_t))(v20 + 88);
  v353 = v19;
  v29 = v28(v22, v19);
  v347 = a1;
  if (v29 == enum case for IQImageType.frontScan(_:))
  {
    sub_10000AC00(v27);
  }
  else if (v29 == enum case for IQImageType.backScan(_:))
  {
    sub_10000B40C(v27);
  }
  else if (v29 == enum case for IQImageType.idFront(_:))
  {
    sub_10000BB2C(v27);
  }
  else if (v29 == enum case for IQImageType.idBack(_:))
  {
    sub_10000CF9C(v27);
  }
  else if (v29 == enum case for IQImageType.selfie(_:))
  {
    sub_10000E40C(v27);
  }
  else if (v29 == enum case for IQImageType.liveness(_:))
  {
    sub_10000F9A4(v27);
  }
  else
  {
    if (v29 != enum case for IQImageType.passive(_:))
    {
      v363 = 0;
      v364 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v326._countAndFlagsBits = 0xD000000000000033;
      v326._object = (void *)0x800000010053B250;
      String.append(_:)(v326);
      v327 = v353;
      _print_unlocked<A, B>(_:_:)(a1, &v363, v353, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v329 = v363;
      v328 = v364;
      v330 = v341;
      (*(void (**)(char *, _QWORD, uint64_t))(v339 + 104))(v341, enum case for DIPError.Code.unexpectedDaemonState(_:), v340);
      v331 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v332 = type metadata accessor for DIPError(0);
      v333 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v334 = swift_allocError(v332, v333, 0, 0);
      v335 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v329, v328, 0, v330, 0, v331, 0xD000000000000089, 0x800000010053B190, 0xD00000000000001BLL, 0x800000010053B290, 72);
      v336 = v342;
      defaultLogger()(v335);
      DIPRecordError(_:message:log:)(v334, 0, 0xE000000000000000, v336);
      (*(void (**)(char *, uint64_t))(v343 + 8))(v336, v344);
      swift_errorRelease(v334);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v327);
      return 0;
    }
    sub_100010C34(v27);
  }
  v30 = v27;
  v31 = v355;
  sub_100011EC4(a2, a3, v355);
  v32 = sub_100004828(&qword_10062FC90);
  v33 = v356;
  v34 = *(unsigned __int8 *)(v356 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v32, v35 + *(_QWORD *)(v356 + 72), v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10051FFB0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v36 + v35, v31, v357);
  v345 = v30;
  ImageQualityCriteria.complexSignals.setter(v36);
  v362 = a2;
  v37 = swift_bridgeObjectRetain(a2);
  v38 = IQComplexSignal.signals.getter(v37);
  v39 = *(_QWORD *)(v38 + 16);
  v40 = swift_bridgeObjectRelease(v38);
  if (v39)
  {
    v41 = IQComplexSignal.identifier.getter(v40);
    v42 = IQACode.toString.getter(v41);
    v44 = v43;
    (*(void (**)(char *, uint64_t))(v337 + 8))(v11, v338);
    *v14 = v42;
    v14[1] = v44;
    v45 = v354;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for IQCType.complex(_:), v354);
    v46 = (uint64_t)v358;
    (*(void (**)(char *, uint64_t *, uint64_t))(v12 + 32))(v358, v14, v45);
    sub_100012758(0, 0, v46);
  }
  v47 = type metadata accessor for MetricsFlags(0);
  v360 = 0;
  v48 = sub_100004790(&qword_10062FC98, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
  dispatch thunk of OptionSet.init(rawValue:)(&v363, &v360, v47, v48);
  v49 = v363;
  v361 = v363;
  v50 = (void *)objc_opt_self(NSUserDefaults);
  v51 = objc_msgSend(v50, "standardUserDefaults");
  v52._object = (void *)0x800000010053B2B0;
  v52._countAndFlagsBits = 0xD000000000000026;
  v53 = NSUserDefaults.internalBool(forKey:)(v52);

  if (v53)
  {
    v55 = static MetricsFlags.blurriness.getter(v54);
    v363 = v55;
    v359[0] = v49;
    v56 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v49);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v56);
    v57 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v57) & 1) != 0)
    {
      swift_release(v55);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v55;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v56);
    }
  }
  v58 = objc_msgSend(v50, "standardUserDefaults");
  v59._object = (void *)0x800000010053B2E0;
  v59._countAndFlagsBits = 0xD000000000000024;
  v60 = NSUserDefaults.internalBool(forKey:)(v59);

  if (v60)
  {
    v62 = static MetricsFlags.exposure.getter(v61);
    v363 = v62;
    v63 = v361;
    v359[0] = v361;
    v64 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v63);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v64);
    v65 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v65) & 1) != 0)
    {
      swift_release(v62);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v62;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v64);
    }
  }
  v66 = objc_msgSend(v50, "standardUserDefaults");
  v67._countAndFlagsBits = 0xD00000000000002BLL;
  v67._object = (void *)0x800000010053B310;
  v358 = (char *)0xD00000000000002BLL;
  v68 = NSUserDefaults.internalBool(forKey:)(v67);

  if (v68)
  {
    v70 = static MetricsFlags.cardDistortion.getter(v69);
    v363 = v70;
    v71 = v361;
    v359[0] = v361;
    v72 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v71);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v72);
    v73 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v73) & 1) != 0)
    {
      swift_release(v70);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v70;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v72);
    }
  }
  v74 = objc_msgSend(v50, "standardUserDefaults");
  v75._object = (void *)0x800000010053B340;
  v75._countAndFlagsBits = 0xD00000000000002FLL;
  v76 = NSUserDefaults.internalBool(forKey:)(v75);

  if (v76)
  {
    v78 = static MetricsFlags.faceToImageRatio.getter(v77);
    v363 = v78;
    v79 = v361;
    v359[0] = v361;
    v80 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v79);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v80);
    v81 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v81) & 1) != 0)
    {
      swift_release(v78);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v78;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v80);
    }
  }
  v82 = objc_msgSend(v50, "standardUserDefaults");
  v83._object = (void *)0x800000010053B370;
  v83._countAndFlagsBits = 0xD00000000000002FLL;
  v84 = NSUserDefaults.internalBool(forKey:)(v83);

  if (v84)
  {
    v86 = static MetricsFlags.faceCenteredRatio.getter(v85);
    v363 = v86;
    v87 = v361;
    v359[0] = v361;
    v88 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v87);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v88);
    v89 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v89) & 1) != 0)
    {
      swift_release(v86);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v86;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v88);
    }
  }
  v90 = objc_msgSend(v50, "standardUserDefaults");
  v91._object = (void *)0x800000010053B3A0;
  v91._countAndFlagsBits = 0xD000000000000026;
  v92 = NSUserDefaults.internalBool(forKey:)(v91);

  if (v92)
  {
    v94 = static MetricsFlags.headPitch.getter(v93);
    v363 = v94;
    v95 = v361;
    v359[0] = v361;
    v96 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v95);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v96);
    v97 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v97) & 1) != 0)
    {
      swift_release(v94);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v94;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v96);
    }
  }
  v98 = objc_msgSend(v50, "standardUserDefaults");
  v99._countAndFlagsBits = 0xD000000000000025;
  v99._object = (void *)0x800000010053B3D0;
  v354 = 0xD000000000000025;
  v100 = NSUserDefaults.internalBool(forKey:)(v99);

  if (v100)
  {
    v102 = static MetricsFlags.headRoll.getter(v101);
    v363 = v102;
    v103 = v361;
    v359[0] = v361;
    v104 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v103);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v104);
    v105 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v105) & 1) != 0)
    {
      swift_release(v102);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v102;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v104);
    }
  }
  v106 = objc_msgSend(v50, "standardUserDefaults");
  v107._object = (void *)0x800000010053B400;
  v107._countAndFlagsBits = 0xD000000000000024;
  v108 = NSUserDefaults.internalBool(forKey:)(v107);

  if (v108)
  {
    v110 = static MetricsFlags.headYaw.getter(v109);
    v363 = v110;
    v111 = v361;
    v359[0] = v361;
    v112 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v111);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v112);
    v113 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v113) & 1) != 0)
    {
      swift_release(v110);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v110;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v112);
    }
  }
  v114 = objc_msgSend(v50, "standardUserDefaults");
  v115._object = (void *)0x800000010053B430;
  v115._countAndFlagsBits = 0xD00000000000002FLL;
  v116 = NSUserDefaults.internalBool(forKey:)(v115);

  if (v116)
  {
    v118 = static MetricsFlags.blinkingConfidence.getter(v117);
    v363 = v118;
    v119 = v361;
    v359[0] = v361;
    v120 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v119);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v120);
    v121 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v121) & 1) != 0)
    {
      swift_release(v118);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v118;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v120);
    }
  }
  v122 = objc_msgSend(v50, "standardUserDefaults");
  v123._countAndFlagsBits = 0xD000000000000033;
  v123._object = (void *)0x800000010053B460;
  v124 = NSUserDefaults.internalBool(forKey:)(v123);

  if (v124)
  {
    v126 = static MetricsFlags.prescriptionConfidence.getter(v125);
    v363 = v126;
    v127 = v361;
    v359[0] = v361;
    v128 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v127);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v128);
    v129 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v129) & 1) != 0)
    {
      swift_release(v126);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v126;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v128);
    }
  }
  v130 = objc_msgSend(v50, "standardUserDefaults");
  v131._countAndFlagsBits = 0xD000000000000031;
  v131._object = (void *)0x800000010053B4A0;
  v132 = NSUserDefaults.internalBool(forKey:)(v131);

  if (v132)
  {
    v134 = static MetricsFlags.sunglassesConfidence.getter(v133);
    v363 = v134;
    v135 = v361;
    v359[0] = v361;
    v136 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v135);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v136);
    v137 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v137) & 1) != 0)
    {
      swift_release(v134);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v134;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v136);
    }
  }
  v138 = objc_msgSend(v50, "standardUserDefaults");
  v139._object = (void *)0x800000010053B4E0;
  v139._countAndFlagsBits = 0xD00000000000002FLL;
  v140 = NSUserDefaults.internalBool(forKey:)(v139);

  if (v140)
  {
    v142 = static MetricsFlags.facemaskConfidence.getter(v141);
    v363 = v142;
    v143 = v361;
    v359[0] = v361;
    v144 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v143);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v144);
    v145 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v145) & 1) != 0)
    {
      swift_release(v142);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v142;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v144);
    }
  }
  v146 = objc_msgSend(v50, "standardUserDefaults");
  v147._object = (void *)0x800000010053B510;
  v147._countAndFlagsBits = 0xD00000000000002FLL;
  v148 = NSUserDefaults.internalBool(forKey:)(v147);

  if (v148)
  {
    v150 = static MetricsFlags.headgearConfidence.getter(v149);
    v363 = v150;
    v151 = v361;
    v359[0] = v361;
    v152 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v151);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v152);
    v153 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v153) & 1) != 0)
    {
      swift_release(v150);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v150;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v152);
    }
  }
  v154 = objc_msgSend(v50, "standardUserDefaults");
  v155._object = (void *)0x800000010053B540;
  v155._countAndFlagsBits = (uint64_t)v358;
  v156 = NSUserDefaults.internalBool(forKey:)(v155);

  if (v156)
  {
    v158 = static MetricsFlags.faceConfidence.getter(v157);
    v363 = v158;
    v159 = v361;
    v359[0] = v361;
    v160 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v159);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v160);
    v161 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v161) & 1) != 0)
    {
      swift_release(v158);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v158;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v160);
    }
  }
  v162 = objc_msgSend(v50, "standardUserDefaults");
  v163._object = (void *)0x800000010053B570;
  v163._countAndFlagsBits = 0xD000000000000028;
  v164 = NSUserDefaults.internalBool(forKey:)(v163);

  if (v164)
  {
    v166 = static MetricsFlags.captureTime.getter(v165);
    v363 = v166;
    v167 = v361;
    v359[0] = v361;
    v168 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v167);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v168);
    v169 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v169) & 1) != 0)
    {
      swift_release(v166);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v166;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v168);
    }
  }
  v170 = objc_msgSend(v50, "standardUserDefaults");
  v171._countAndFlagsBits = 0xD000000000000030;
  v171._object = (void *)0x800000010053B5A0;
  v172 = NSUserDefaults.internalBool(forKey:)(v171);

  if (v172)
  {
    v174 = static MetricsFlags.faceCaptureQuality.getter(v173);
    v363 = v174;
    v175 = v361;
    v359[0] = v361;
    v176 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v175);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v176);
    v177 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v177) & 1) != 0)
    {
      swift_release(v174);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v174;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v176);
    }
  }
  v178 = objc_msgSend(v50, "standardUserDefaults");
  v179._object = (void *)0x800000010053B5E0;
  v179._countAndFlagsBits = 0xD000000000000029;
  v180 = NSUserDefaults.internalBool(forKey:)(v179);

  if (v180)
  {
    v182 = static MetricsFlags.documentSize.getter(v181);
    v363 = v182;
    v183 = v361;
    v359[0] = v361;
    v184 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v183);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v184);
    v185 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v185) & 1) != 0)
    {
      swift_release(v182);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v182;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v184);
    }
  }
  v186 = objc_msgSend(v50, "standardUserDefaults");
  v187._object = (void *)0x800000010053B610;
  v187._countAndFlagsBits = 0xD00000000000002DLL;
  v188 = NSUserDefaults.internalBool(forKey:)(v187);

  if (v188)
  {
    v190 = static MetricsFlags.documentRotation.getter(v189);
    v363 = v190;
    v191 = v361;
    v359[0] = v361;
    v192 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v191);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v192);
    v193 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v193) & 1) != 0)
    {
      swift_release(v190);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v190;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v192);
    }
  }
  v194 = objc_msgSend(v50, "standardUserDefaults");
  v195._object = (void *)0x800000010053B640;
  v195._countAndFlagsBits = 0xD000000000000029;
  v196 = NSUserDefaults.internalBool(forKey:)(v195);

  if (v196)
  {
    v198 = static MetricsFlags.documentSkew.getter(v197);
    v363 = v198;
    v199 = v361;
    v359[0] = v361;
    v200 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v199);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v200);
    v201 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v201) & 1) != 0)
    {
      swift_release(v198);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v198;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v200);
    }
  }
  v202 = objc_msgSend(v50, "standardUserDefaults");
  v203._object = (void *)0x800000010053B670;
  v203._countAndFlagsBits = 0xD000000000000028;
  v204 = NSUserDefaults.internalBool(forKey:)(v203);

  if (v204)
  {
    v206 = static MetricsFlags.targetDrift.getter(v205);
    v363 = v206;
    v207 = v361;
    v359[0] = v361;
    v208 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v207);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v208);
    v209 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v209) & 1) != 0)
    {
      swift_release(v206);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v206;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v208);
    }
  }
  v210 = objc_msgSend(v50, "standardUserDefaults");
  v211._object = (void *)0x800000010053B6A0;
  v211._countAndFlagsBits = v354;
  v212 = NSUserDefaults.internalBool(forKey:)(v211);

  if (v212)
  {
    v214 = static MetricsFlags.numFaces.getter(v213);
    v363 = v214;
    v215 = v361;
    v359[0] = v361;
    v216 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v215);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v216);
    v217 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v217) & 1) != 0)
    {
      swift_release(v214);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v214;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v216);
    }
  }
  v218 = objc_msgSend(v50, "standardUserDefaults");
  v219._object = (void *)0x800000010053B6D0;
  v219._countAndFlagsBits = v354;
  v220 = NSUserDefaults.internalBool(forKey:)(v219);

  if (v220)
  {
    v222 = static MetricsFlags.luxLevel.getter(v221);
    v363 = v222;
    v223 = v361;
    v359[0] = v361;
    v224 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v223);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v224);
    v225 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v225) & 1) != 0)
    {
      swift_release(v222);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v222;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v224);
    }
  }
  v226 = objc_msgSend(v50, "standardUserDefaults");
  v227._object = (void *)0x800000010053B700;
  v227._countAndFlagsBits = (uint64_t)v358;
  v228 = NSUserDefaults.internalBool(forKey:)(v227);

  if (v228)
  {
    v230 = static MetricsFlags.pdf417Detected.getter(v229);
    v363 = v230;
    v231 = v361;
    v359[0] = v361;
    v232 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v231);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v232);
    v233 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v233) & 1) != 0)
    {
      swift_release(v230);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v230;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v232);
    }
  }
  v234 = objc_msgSend(v50, "standardUserDefaults");
  v235._countAndFlagsBits = 0xD00000000000002ELL;
  v235._object = (void *)0x800000010053B730;
  v354 = 0xD00000000000002ELL;
  v236 = NSUserDefaults.internalBool(forKey:)(v235);

  if (v236)
  {
    v238 = static MetricsFlags.isAAMVACompliant.getter(v237);
    v363 = v238;
    v239 = v361;
    v359[0] = v361;
    v240 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v239);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v240);
    v241 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v241) & 1) != 0)
    {
      swift_release(v238);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v238;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v240);
    }
  }
  v242 = objc_msgSend(v50, "standardUserDefaults");
  v243._object = (void *)0x800000010053B760;
  v243._countAndFlagsBits = 0xD00000000000002CLL;
  v244 = NSUserDefaults.internalBool(forKey:)(v243);

  if (v244)
  {
    v246 = static MetricsFlags.isAutoCaptured.getter(v245);
    v363 = v246;
    v247 = v361;
    v359[0] = v361;
    v248 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v247);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v248);
    v249 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v249) & 1) != 0)
    {
      swift_release(v246);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v246;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v248);
    }
  }
  v250 = objc_msgSend(v50, "standardUserDefaults");
  v251._object = (void *)0x800000010053B790;
  v251._countAndFlagsBits = 0xD000000000000026;
  v252 = NSUserDefaults.internalBool(forKey:)(v251);

  if (v252)
  {
    v253 = static MetricsFlags.issuerNumber.getter();
    v363 = v253;
    v254 = v361;
    v359[0] = v361;
    v255 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v254);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v255);
    v256 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v256) & 1) != 0)
    {
      swift_release(v253);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v253;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v255);
    }
  }
  v257 = objc_msgSend(v50, "standardUserDefaults");
  v258._object = (void *)0x800000010053B7C0;
  v258._countAndFlagsBits = 0xD00000000000002DLL;
  v259 = NSUserDefaults.internalBool(forKey:)(v258);

  if (v259)
  {
    v261 = static MetricsFlags.originalVertices.getter(v260);
    v363 = v261;
    v262 = v361;
    v359[0] = v361;
    v263 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v262);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v263);
    v264 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v264) & 1) != 0)
    {
      swift_release(v261);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v261;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v263);
    }
  }
  v265 = objc_msgSend(v50, "standardUserDefaults");
  v266._object = (void *)0x800000010053B7F0;
  v266._countAndFlagsBits = (uint64_t)v358;
  v267 = NSUserDefaults.internalBool(forKey:)(v266);

  if (v267)
  {
    v269 = static MetricsFlags.targetVertices.getter(v268);
    v363 = v269;
    v270 = v361;
    v359[0] = v361;
    v271 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v270);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v271);
    v272 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v272) & 1) != 0)
    {
      swift_release(v269);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v269;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v271);
    }
  }
  v273 = objc_msgSend(v50, "standardUserDefaults");
  v274._object = (void *)0x800000010053B820;
  v274._countAndFlagsBits = 0xD00000000000002DLL;
  v275 = NSUserDefaults.internalBool(forKey:)(v274);

  if (v275)
  {
    v276 = static MetricsFlags.rectangleCorners.getter();
    v363 = v276;
    v277 = v361;
    v359[0] = v361;
    v278 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v277);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v278);
    v279 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v279) & 1) != 0)
    {
      swift_release(v276);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v276;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v278);
    }
  }
  v280 = objc_msgSend(v50, "standardUserDefaults");
  v281._object = (void *)0x800000010053B850;
  v281._countAndFlagsBits = 0xD00000000000002CLL;
  v282 = NSUserDefaults.internalBool(forKey:)(v281);

  if (v282)
  {
    v283 = static MetricsFlags.documentCorners.getter();
    v363 = v283;
    v284 = v361;
    v359[0] = v361;
    v285 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v284);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v285);
    v286 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v286) & 1) != 0)
    {
      swift_release(v283);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v283;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v285);
    }
  }
  v287 = objc_msgSend(v50, "standardUserDefaults");
  v288._countAndFlagsBits = 0xD000000000000027;
  v288._object = (void *)0x800000010053B880;
  v289 = NSUserDefaults.internalBool(forKey:)(v288);

  if (v289)
  {
    v291 = static MetricsFlags.fuzzyMatch.getter(v290);
    v363 = v291;
    v292 = v361;
    v359[0] = v361;
    v293 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v292);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v293);
    v294 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v294) & 1) != 0)
    {
      swift_release(v291);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v291;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v293);
    }
  }
  v295 = objc_msgSend(v50, "standardUserDefaults");
  v296._countAndFlagsBits = 0xD00000000000002ALL;
  v296._object = (void *)0x800000010053B8B0;
  v297 = NSUserDefaults.internalBool(forKey:)(v296);

  if (v297)
  {
    v299 = static MetricsFlags.livenessChute.getter(v298);
    v363 = v299;
    v300 = v361;
    v359[0] = v361;
    v301 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v300);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v301);
    v302 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v302) & 1) != 0)
    {
      swift_release(v299);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v299;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v301);
    }
  }
  v303 = objc_msgSend(v50, "standardUserDefaults");
  v304._object = (void *)0x800000010053B8E0;
  v304._countAndFlagsBits = 0xD00000000000002CLL;
  v305 = NSUserDefaults.internalBool(forKey:)(v304);

  v308 = v349;
  v307 = v350;
  v309 = v348;
  if (v305)
  {
    v310 = static MetricsFlags.isFlashEnabled.getter(v306);
    v363 = v310;
    v311 = v361;
    v359[0] = v361;
    v312 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    swift_retain(v311);
    dispatch thunk of SetAlgebra.intersection(_:)(&v360, &v363, v47, v312);
    v313 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v360, &v363, v47, v313) & 1) != 0)
    {
      swift_release(v310);
      swift_release(v360);
    }
    else
    {
      swift_release(v360);
      v359[0] = v310;
      dispatch thunk of SetAlgebra.formUnion(_:)(v359, v47, v312);
    }
  }
  v315 = v345;
  v314 = v346;
  (*(void (**)(char *, _QWORD *, uint64_t))(v309 + 16))(v346, v345, v308);
  v317 = v361;
  v316 = v362;
  v363 = 0;
  v364 = 0xE000000000000000;
  swift_retain(v361);
  v318._countAndFlagsBits = 0x6C616E7265746E69;
  v318._object = (void *)0xE90000000000002DLL;
  String.append(_:)(v318);
  _print_unlocked<A, B>(_:_:)(v347, &v363, v353, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)(v314, v316, v317, v363, v364);
  v319 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v319, *(unsigned int *)(v319 + 48), *(unsigned __int16 *)(v319 + 52));
  v321 = JSONEncoder.init()(v320);
  v322 = sub_100004790(&qword_10062FCA0, (uint64_t (*)(uint64_t))&type metadata accessor for ImageQualitySettings, (uint64_t)&protocol conformance descriptor for ImageQualitySettings);
  v323 = v352;
  v324 = dispatch thunk of JSONEncoder.encode<A>(_:)(v307, v352, v322);
  swift_release(v321);
  (*(void (**)(char *, uint64_t))(v351 + 8))(v307, v323);
  swift_release(v361);
  (*(void (**)(uint64_t, uint64_t))(v356 + 8))(v355, v357);
  (*(void (**)(_QWORD *, uint64_t))(v309 + 8))(v315, v308);
  return v324;
}

uint64_t sub_10000AC00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  Swift::String v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  Swift::String v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  Swift::String v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  int v74;

  BYTE2(v74) = 2;
  LOWORD(v74) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v74,
    0,
    0,
    0,
    0);
  type metadata accessor for MetricsFlags(0);
  v1 = static MetricsFlags.documentSize.getter();
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4._object = (void *)0x800000010053B940;
  v4._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"nternal Image Quality Settings", v4);
  v6 = v5;

  if ((v6 & 0x100000000) != 0)
  {
    swift_release(v1);
    goto LABEL_6;
  }
  v7 = objc_msgSend(v2, "standardUserDefaults");
  v8._object = (void *)0x800000010053B980;
  v8._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-size", v8);
  v10 = v9;
  swift_release(v1);

  if ((v10 & 0x100000000) != 0)
  {
LABEL_6:
    v12 = 0;
    v13 = 0;
    v14 = 1;
    goto LABEL_7;
  }
  v11.n128_u32[0] = v6;
  if (*(float *)&v6 <= *(float *)&v10)
  {
    v14 = 0;
    v12 = v6;
    v13 = v10;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
  }
LABEL_7:
  ImageQualityCriteria.minDocumentSize.setter(v12 | ((unint64_t)v14 << 32), v11);
  v15 = ImageQualityCriteria.maxDocumentSize.setter(v13 | ((unint64_t)v14 << 32));
  v16 = static MetricsFlags.documentRotation.getter(v15);
  v17 = objc_msgSend(v2, "standardUserDefaults");
  v18._object = (void *)0x800000010053B9C0;
  v18._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-size", v18);
  v20 = v19;

  if ((v20 & 0x100000000) != 0)
  {
    swift_release(v16);
LABEL_12:
    v27 = 0;
    v28 = 0;
    v26 = 1;
    goto LABEL_14;
  }
  v21 = objc_msgSend(v2, "standardUserDefaults");
  v22._object = (void *)0x800000010053BA00;
  v22._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-rotation", v22);
  v24 = v23;
  swift_release(v16);

  if ((v24 & 0x100000000) == 0)
  {
    v25.n128_u32[0] = v20;
    if (*(float *)&v20 <= *(float *)&v24)
    {
      v26 = 0;
      v27 = v20;
      v28 = v24;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  v27 = 0;
  v28 = 0;
  v26 = 1;
LABEL_14:
  ImageQualityCriteria.minDocumentRotation.setter(v27 | ((unint64_t)v26 << 32), v25);
  v29 = ImageQualityCriteria.maxDocumentRotation.setter(v28 | ((unint64_t)v26 << 32));
  v30 = static MetricsFlags.documentSkew.getter(v29);
  v31 = objc_msgSend(v2, "standardUserDefaults");
  v32._object = (void *)0x800000010053BA40;
  v32._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-rotation", v32);
  v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release(v30);
  }
  else
  {
    v35 = objc_msgSend(v2, "standardUserDefaults");
    v36._object = (void *)0x800000010053BA80;
    v36._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-document-skew", v36);
    v38 = v37;
    swift_release(v30);

    if ((v38 & 0x100000000) == 0)
    {
      v39.n128_u32[0] = v34;
      if (*(float *)&v34 <= *(float *)&v38)
      {
        v40 = 0;
        v41 = v34;
        v42 = v38;
        goto LABEL_20;
      }
    }
  }
  v41 = 0;
  v42 = 0;
  v40 = 1;
LABEL_20:
  ImageQualityCriteria.minDocumentSkew.setter(v41 | ((unint64_t)v40 << 32), v39);
  ImageQualityCriteria.maxDocumentSkew.setter(v42 | ((unint64_t)v40 << 32));
  v43 = objc_msgSend(v2, "standardUserDefaults");
  v44._object = (void *)0x800000010053BAC0;
  v44._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-document-skew", v44);
  v46 = v45;

  ImageQualityCriteria.maxLeftDrift.setter(v46 | ((HIDWORD(v46) & 1) << 32));
  v47 = objc_msgSend(v2, "standardUserDefaults");
  v48._countAndFlagsBits = 0xD000000000000030;
  v48._object = (void *)0x800000010053BAF0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-left-drift", v48);
  v50 = v49;

  ImageQualityCriteria.maxRightDrift.setter(v50 | ((HIDWORD(v50) & 1) << 32));
  v51 = objc_msgSend(v2, "standardUserDefaults");
  v52._countAndFlagsBits = 0xD00000000000002DLL;
  v52._object = (void *)0x800000010053BB30;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-right-drift", v52);
  v54 = v53;

  ImageQualityCriteria.maxUpDrift.setter(v54 | ((HIDWORD(v54) & 1) << 32));
  v55 = objc_msgSend(v2, "standardUserDefaults");
  v56._object = (void *)0x800000010053BB60;
  v56._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-up-drift", v56);
  v58 = v57;

  v59 = ImageQualityCriteria.maxDownDrift.setter(v58 | ((HIDWORD(v58) & 1) << 32));
  v60 = static MetricsFlags.faceToImageRatio.getter(v59);
  v61 = objc_msgSend(v2, "standardUserDefaults");
  v62._object = (void *)0x800000010053BB90;
  v62._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-scan.check-down-drift", v62);
  v64 = v63;

  if ((v64 & 0x100000000) != 0)
  {
    swift_release(v60);
LABEL_25:
    v71 = 0;
    v72 = 0;
    v70 = 1;
    goto LABEL_26;
  }
  v65 = objc_msgSend(v2, "standardUserDefaults");
  v66._object = (void *)0x800000010053BBD0;
  v66._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-min-face-to-image-ratio", v66);
  v68 = v67;
  swift_release(v60);

  if ((v68 & 0x100000000) != 0)
    goto LABEL_25;
  v69.n128_u32[0] = v64;
  if (*(float *)&v64 > *(float *)&v68)
    goto LABEL_25;
  v70 = 0;
  v71 = v64;
  v72 = v68;
LABEL_26:
  ImageQualityCriteria.minFaceToImageRatio.setter(v71 | ((unint64_t)v70 << 32), v69);
  return ImageQualityCriteria.maxFaceToImageRatio.setter(v72 | ((unint64_t)v70 << 32));
}

uint64_t sub_10000B40C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  Swift::String v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  Swift::String v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  Swift::String v56;
  unint64_t v57;
  unint64_t v58;
  int v60;

  BYTE2(v60) = 2;
  LOWORD(v60) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v60,
    0,
    0,
    0,
    0);
  type metadata accessor for MetricsFlags(0);
  v1 = static MetricsFlags.documentSize.getter();
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4._object = (void *)0x800000010053BC10;
  v4._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"heck-max-face-to-image-ratio", v4);
  v6 = v5;

  if ((v6 & 0x100000000) != 0)
  {
    swift_release(v1);
    goto LABEL_6;
  }
  v7 = objc_msgSend(v2, "standardUserDefaults");
  v8._object = (void *)0x800000010053BC50;
  v8._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-size", v8);
  v10 = v9;
  swift_release(v1);

  if ((v10 & 0x100000000) != 0)
  {
LABEL_6:
    v12 = 0;
    v13 = 0;
    v14 = 1;
    goto LABEL_7;
  }
  v11.n128_u32[0] = v6;
  if (*(float *)&v6 <= *(float *)&v10)
  {
    v14 = 0;
    v12 = v6;
    v13 = v10;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
  }
LABEL_7:
  ImageQualityCriteria.minDocumentSize.setter(v12 | ((unint64_t)v14 << 32), v11);
  v15 = ImageQualityCriteria.maxDocumentSize.setter(v13 | ((unint64_t)v14 << 32));
  v16 = static MetricsFlags.documentRotation.getter(v15);
  v17 = objc_msgSend(v2, "standardUserDefaults");
  v18._object = (void *)0x800000010053BC90;
  v18._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-size", v18);
  v20 = v19;

  if ((v20 & 0x100000000) != 0)
  {
    swift_release(v16);
LABEL_12:
    v27 = 0;
    v28 = 0;
    v26 = 1;
    goto LABEL_14;
  }
  v21 = objc_msgSend(v2, "standardUserDefaults");
  v22._object = (void *)0x800000010053BCD0;
  v22._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-rotation", v22);
  v24 = v23;
  swift_release(v16);

  if ((v24 & 0x100000000) == 0)
  {
    v25.n128_u32[0] = v20;
    if (*(float *)&v20 <= *(float *)&v24)
    {
      v26 = 0;
      v27 = v20;
      v28 = v24;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  v27 = 0;
  v28 = 0;
  v26 = 1;
LABEL_14:
  ImageQualityCriteria.minDocumentRotation.setter(v27 | ((unint64_t)v26 << 32), v25);
  v29 = ImageQualityCriteria.maxDocumentRotation.setter(v28 | ((unint64_t)v26 << 32));
  v30 = static MetricsFlags.documentSkew.getter(v29);
  v31 = objc_msgSend(v2, "standardUserDefaults");
  v32._object = (void *)0x800000010053BD10;
  v32._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-rotation", v32);
  v34 = v33;

  if ((v34 & 0x100000000) != 0)
  {
    swift_release(v30);
LABEL_19:
    v41 = 0;
    v42 = 0;
    v40 = 1;
    goto LABEL_20;
  }
  v35 = objc_msgSend(v2, "standardUserDefaults");
  v36._object = (void *)0x800000010053BD50;
  v36._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-min-document-skew", v36);
  v38 = v37;
  swift_release(v30);

  if ((v38 & 0x100000000) != 0)
    goto LABEL_19;
  v39.n128_u32[0] = v34;
  if (*(float *)&v34 > *(float *)&v38)
    goto LABEL_19;
  v40 = 0;
  v41 = v34;
  v42 = v38;
LABEL_20:
  ImageQualityCriteria.minDocumentSkew.setter(v41 | ((unint64_t)v40 << 32), v39);
  ImageQualityCriteria.maxDocumentSkew.setter(v42 | ((unint64_t)v40 << 32));
  v43 = objc_msgSend(v2, "standardUserDefaults");
  v44._object = (void *)0x800000010053BD90;
  v44._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"eck-max-document-skew", v44);
  v46 = v45;

  ImageQualityCriteria.maxLeftDrift.setter(v46 | ((HIDWORD(v46) & 1) << 32));
  v47 = objc_msgSend(v2, "standardUserDefaults");
  v48._countAndFlagsBits = 0xD00000000000002FLL;
  v48._object = (void *)0x800000010053BDC0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-left-drift", v48);
  v50 = v49;

  ImageQualityCriteria.maxRightDrift.setter(v50 | ((HIDWORD(v50) & 1) << 32));
  v51 = objc_msgSend(v2, "standardUserDefaults");
  v52._countAndFlagsBits = 0xD00000000000002CLL;
  v52._object = (void *)0x800000010053BDF0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-right-drift", v52);
  v54 = v53;

  ImageQualityCriteria.maxUpDrift.setter(v54 | ((HIDWORD(v54) & 1) << 32));
  v55 = objc_msgSend(v2, "standardUserDefaults");
  v56._object = (void *)0x800000010053BE20;
  v56._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-up-drift", v56);
  v58 = v57;

  return ImageQualityCriteria.maxDownDrift.setter(v58 | ((HIDWORD(v58) & 1) << 32));
}

void sub_10000BB2C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  Swift::String v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  Swift::String v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  __n128 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  Swift::String v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  Swift::String v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  Swift::String v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  Swift::String v193;
  Swift::Int value;
  Swift::Bool is_nil;
  id v196;
  Swift::String v197;
  Swift::Int v198;
  Swift::Bool v199;
  _BOOL8 v200;
  Swift::Int v201;
  Swift::Int v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  Swift::String v206;
  Swift::Int v207;
  Swift::Bool v208;
  id v209;
  Swift::String v210;
  Swift::Int v211;
  Swift::Bool v212;
  _BOOL8 v213;
  Swift::Int v214;
  Swift::Int v215;
  id v216;
  Swift::String v217;
  Swift::String_optional v218;
  uint64_t v219;
  id v220;
  Swift::String v221;
  Swift::String_optional v222;
  uint64_t v223;
  id v224;
  Swift::String v225;
  Swift::String_optional v226;
  __n128 v227;
  int v228;
  Swift::Int_optional v229;
  Swift::Int_optional v230;
  Swift::Int_optional v231;
  Swift::Int_optional v232;

  BYTE2(v228) = 2;
  LOWORD(v228) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v228,
    0,
    0,
    0,
    0);
  v1 = type metadata accessor for MetricsFlags(0);
  v2 = static MetricsFlags.blurriness.getter(v1);
  v3 = (void *)objc_opt_self(NSUserDefaults);
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5._object = (void *)0x800000010053BE50;
  v5._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-scan.check-down-drift", v5);
  v7 = v6;

  if ((v7 & 0x100000000) != 0)
  {
    swift_release(v2);
  }
  else
  {
    v8 = objc_msgSend(v3, "standardUserDefaults");
    v9._object = (void *)0x800000010053BE90;
    v9._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blurriness", v9);
    v11 = v10;
    swift_release(v2);

    if ((v11 & 0x100000000) == 0)
    {
      v12.n128_u32[0] = v7;
      if (*(float *)&v7 <= *(float *)&v11)
      {
        v13 = 0;
        goto LABEL_7;
      }
    }
  }
  LODWORD(v7) = 0;
  LODWORD(v11) = 0;
  v13 = 1;
LABEL_7:
  ImageQualityCriteria.minBlurriness.setter(v7 | ((unint64_t)v13 << 32), v12);
  v14 = ImageQualityCriteria.maxBlurriness.setter(v11 | ((unint64_t)v13 << 32));
  v15 = static MetricsFlags.exposure.getter(v14);
  v16 = objc_msgSend(v3, "standardUserDefaults");
  v17._object = (void *)0x800000010053BED0;
  v17._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blurriness", v17);
  v19 = v18;

  if ((v19 & 0x100000000) != 0)
  {
    swift_release(v15);
  }
  else
  {
    v20 = objc_msgSend(v3, "standardUserDefaults");
    v21._object = (void *)0x800000010053BF00;
    v21._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-min-exposure", v21);
    v23 = v22;
    swift_release(v15);

    if ((v23 & 0x100000000) == 0)
    {
      v24.n128_u32[0] = v19;
      if (*(float *)&v19 <= *(float *)&v23)
      {
        v25 = 0;
        goto LABEL_13;
      }
    }
  }
  LODWORD(v19) = 0;
  LODWORD(v23) = 0;
  v25 = 1;
LABEL_13:
  ImageQualityCriteria.minExposure.setter(v19 | ((unint64_t)v25 << 32), v24);
  v26 = ImageQualityCriteria.maxExposure.setter(v23 | ((unint64_t)v25 << 32));
  v27 = static MetricsFlags.cardDistortion.getter(v26);
  v28 = objc_msgSend(v3, "standardUserDefaults");
  v29._object = (void *)0x800000010053BF30;
  v29._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-max-exposure", v29);
  v31 = v30;

  if ((v31 & 0x100000000) != 0)
  {
    swift_release(v27);
    goto LABEL_18;
  }
  v32 = objc_msgSend(v3, "standardUserDefaults");
  v33._object = (void *)0x800000010053BF70;
  v33._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-card-distortion", v33);
  v35 = v34;
  swift_release(v27);

  if ((v35 & 0x100000000) != 0)
  {
LABEL_18:
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
    goto LABEL_19;
  }
  if (*(float *)&v31 <= *(float *)&v35)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
  }
LABEL_19:
  ImageQualityCriteria.minCardDistortion.setter(v31 | ((unint64_t)v36 << 32));
  v37 = ImageQualityCriteria.maxCardDistortion.setter(v35 | ((unint64_t)v36 << 32));
  v38 = static MetricsFlags.faceToImageRatio.getter(v37);
  v39 = objc_msgSend(v3, "standardUserDefaults");
  v40._object = (void *)0x800000010053BFB0;
  v40._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-card-distortion", v40);
  v42 = v41;

  if ((v42 & 0x100000000) != 0)
  {
    swift_release(v38);
    goto LABEL_24;
  }
  v43 = objc_msgSend(v3, "standardUserDefaults");
  v44._object = (void *)0x800000010053BFF0;
  v44._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-to-image-ratio", v44);
  v46 = v45;
  swift_release(v38);

  if ((v46 & 0x100000000) != 0)
  {
LABEL_24:
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
    goto LABEL_25;
  }
  v47.n128_u32[0] = v42;
  if (*(float *)&v42 <= *(float *)&v46)
  {
    v48 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
  }
LABEL_25:
  ImageQualityCriteria.minFaceToImageRatio.setter(v42 | ((unint64_t)v48 << 32), v47);
  v49 = ImageQualityCriteria.maxFaceToImageRatio.setter(v46 | ((unint64_t)v48 << 32));
  v50 = static MetricsFlags.faceCenteredRatio.getter(v49);
  v51 = objc_msgSend(v3, "standardUserDefaults");
  v52._object = (void *)0x800000010053C030;
  v52._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-to-image-ratio", v52);
  v54 = v53;

  if ((v54 & 0x100000000) != 0)
  {
    swift_release(v50);
    goto LABEL_30;
  }
  v55 = objc_msgSend(v3, "standardUserDefaults");
  v56._object = (void *)0x800000010053C070;
  v56._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-centered-ratio", v56);
  v58 = v57;
  swift_release(v50);

  if ((v58 & 0x100000000) != 0)
  {
LABEL_30:
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
    goto LABEL_31;
  }
  v59.n128_u32[0] = v54;
  if (*(float *)&v54 <= *(float *)&v58)
  {
    v60 = 0;
  }
  else
  {
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
  }
LABEL_31:
  ImageQualityCriteria.minFaceCenteredRatio.setter(v54 | ((unint64_t)v60 << 32), v59);
  v61 = ImageQualityCriteria.maxFaceCenteredRatio.setter(v58 | ((unint64_t)v60 << 32));
  v62 = static MetricsFlags.headPitch.getter(v61);
  v63 = objc_msgSend(v3, "standardUserDefaults");
  v64._object = (void *)0x800000010053C0B0;
  v64._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-centered-ratio", v64);
  v66 = v65;

  if ((v66 & 0x100000000) != 0)
  {
    swift_release(v62);
  }
  else
  {
    v67 = objc_msgSend(v3, "standardUserDefaults");
    v68._object = (void *)0x800000010053C0F0;
    v68._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-pitch", v68);
    v70 = v69;
    swift_release(v62);

    if ((v70 & 0x100000000) == 0)
    {
      v71.n128_u32[0] = v66;
      if (*(float *)&v66 <= *(float *)&v70)
      {
        v72 = 0;
        goto LABEL_37;
      }
    }
  }
  LODWORD(v66) = 0;
  LODWORD(v70) = 0;
  v72 = 1;
LABEL_37:
  ImageQualityCriteria.minHeadPitch.setter(v66 | ((unint64_t)v72 << 32), v71);
  v73 = ImageQualityCriteria.maxHeadPitch.setter(v70 | ((unint64_t)v72 << 32));
  v74 = static MetricsFlags.headRoll.getter(v73);
  v75 = objc_msgSend(v3, "standardUserDefaults");
  v76._object = (void *)0x800000010053C130;
  v76._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-pitch", v76);
  v78 = v77;

  if ((v78 & 0x100000000) != 0)
  {
    swift_release(v74);
    goto LABEL_42;
  }
  v79 = objc_msgSend(v3, "standardUserDefaults");
  v80._object = (void *)0x800000010053C170;
  v80._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-roll", v80);
  v82 = v81;
  swift_release(v74);

  if ((v82 & 0x100000000) != 0)
  {
LABEL_42:
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
    goto LABEL_43;
  }
  v83.n128_u32[0] = v78;
  if (*(float *)&v78 <= *(float *)&v82)
  {
    v84 = 0;
  }
  else
  {
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
  }
LABEL_43:
  ImageQualityCriteria.minHeadRoll.setter(v78 | ((unint64_t)v84 << 32), v83);
  v85 = ImageQualityCriteria.maxHeadRoll.setter(v82 | ((unint64_t)v84 << 32));
  v86 = static MetricsFlags.headYaw.getter(v85);
  v87 = objc_msgSend(v3, "standardUserDefaults");
  v88._object = (void *)0x800000010053C1B0;
  v88._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-roll", v88);
  v90 = v89;

  if ((v90 & 0x100000000) != 0)
  {
    swift_release(v86);
  }
  else
  {
    v91 = objc_msgSend(v3, "standardUserDefaults");
    v92._object = (void *)0x800000010053C1E0;
    v92._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-min-head-yaw", v92);
    v94 = v93;
    swift_release(v86);

    if ((v94 & 0x100000000) == 0)
    {
      v95.n128_u32[0] = v90;
      if (*(float *)&v90 <= *(float *)&v94)
      {
        v96 = 0;
        goto LABEL_49;
      }
    }
  }
  LODWORD(v90) = 0;
  LODWORD(v94) = 0;
  v96 = 1;
LABEL_49:
  ImageQualityCriteria.minHeadYaw.setter(v90 | ((unint64_t)v96 << 32), v95);
  v97 = ImageQualityCriteria.maxHeadYaw.setter(v94 | ((unint64_t)v96 << 32));
  v98 = static MetricsFlags.blinkingConfidence.getter(v97);
  v99 = objc_msgSend(v3, "standardUserDefaults");
  v100._object = (void *)0x800000010053C210;
  v100._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-max-head-yaw", v100);
  v102 = v101;

  if ((v102 & 0x100000000) != 0)
  {
    swift_release(v98);
  }
  else
  {
    v103 = objc_msgSend(v3, "standardUserDefaults");
    v104._object = (void *)0x800000010053C250;
    v104._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blinking-confidence", v104);
    v106 = v105;
    swift_release(v98);

    if ((v106 & 0x100000000) == 0)
    {
      v107.n128_u32[0] = v102;
      if (*(float *)&v102 <= *(float *)&v106)
      {
        v108 = 0;
        goto LABEL_55;
      }
    }
  }
  LODWORD(v102) = 0;
  LODWORD(v106) = 0;
  v108 = 1;
LABEL_55:
  ImageQualityCriteria.minBlinkingConfidence.setter(v102 | ((unint64_t)v108 << 32), v107);
  v109 = ImageQualityCriteria.maxBlinkingConfidence.setter(v106 | ((unint64_t)v108 << 32));
  v110 = static MetricsFlags.prescriptionConfidence.getter(v109);
  v111 = objc_msgSend(v3, "standardUserDefaults");
  v112._object = (void *)0x800000010053C290;
  v112._countAndFlagsBits = 0xD00000000000003ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blinking-confidence", v112);
  v114 = v113;

  if ((v114 & 0x100000000) != 0)
  {
    swift_release(v110);
  }
  else
  {
    v115 = objc_msgSend(v3, "standardUserDefaults");
    v116._object = (void *)0x800000010053C2D0;
    v116._countAndFlagsBits = 0xD00000000000003ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-prescription-confidence", v116);
    v118 = v117;
    swift_release(v110);

    if ((v118 & 0x100000000) == 0)
    {
      v119.n128_u32[0] = v114;
      if (*(float *)&v114 <= *(float *)&v118)
      {
        v120 = 0;
        goto LABEL_61;
      }
    }
  }
  LODWORD(v114) = 0;
  LODWORD(v118) = 0;
  v120 = 1;
LABEL_61:
  ImageQualityCriteria.minPrescriptionConfidence.setter(v114 | ((unint64_t)v120 << 32), v119);
  v121 = ImageQualityCriteria.maxPrescriptionConfidence.setter(v118 | ((unint64_t)v120 << 32));
  v122 = static MetricsFlags.sunglassesConfidence.getter(v121);
  v123 = objc_msgSend(v3, "standardUserDefaults");
  v124._object = (void *)0x800000010053C310;
  v124._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-prescription-confidence", v124);
  v126 = v125;

  if ((v126 & 0x100000000) != 0)
  {
    swift_release(v122);
    v132 = 0;
    v133 = 0;
    v134 = 1;
  }
  else
  {
    v127 = objc_msgSend(v3, "standardUserDefaults");
    v128._object = (void *)0x800000010053C350;
    v128._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-sunglasses-confidence", v128);
    v130 = v129;
    swift_release(v122);

    if ((v130 & 0x100000000) != 0)
    {
      v132 = 0;
      v133 = 0;
      v134 = 1;
    }
    else
    {
      v131.n128_u32[0] = v126;
      if (*(float *)&v126 <= *(float *)&v130)
      {
        v134 = 0;
        v132 = v126;
        v133 = v130;
      }
      else
      {
        v132 = 0;
        v133 = 0;
        v134 = 1;
      }
    }
  }
  ImageQualityCriteria.minSunglassesConfidence.setter(v132 | ((unint64_t)v134 << 32), v131);
  v135 = ImageQualityCriteria.maxSunglassesConfidence.setter(v133 | ((unint64_t)v134 << 32));
  v136 = static MetricsFlags.facemaskConfidence.getter(v135);
  v137 = objc_msgSend(v3, "standardUserDefaults");
  v138._object = (void *)0x800000010053C390;
  v138._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-sunglasses-confidence", v138);
  v140 = v139;

  if ((v140 & 0x100000000) != 0)
  {
    swift_release(v136);
  }
  else
  {
    v141 = objc_msgSend(v3, "standardUserDefaults");
    v142._object = (void *)0x800000010053C3D0;
    v142._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-facemask-confidence", v142);
    v144 = v143;
    swift_release(v136);

    if ((v144 & 0x100000000) == 0)
    {
      v145.n128_u32[0] = v140;
      if (*(float *)&v140 <= *(float *)&v144)
      {
        v146 = 0;
        v147 = v140;
        v148 = v144;
        goto LABEL_78;
      }
    }
  }
  v147 = 0;
  v148 = 0;
  v146 = 1;
LABEL_78:
  ImageQualityCriteria.minFacemaskConfidence.setter(v147 | ((unint64_t)v146 << 32), v145);
  v149 = ImageQualityCriteria.maxFacemaskConfidence.setter(v148 | ((unint64_t)v146 << 32));
  v150 = static MetricsFlags.headgearConfidence.getter(v149);
  v151 = objc_msgSend(v3, "standardUserDefaults");
  v152._object = (void *)0x800000010053C410;
  v152._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-facemask-confidence", v152);
  v154 = v153;

  if ((v154 & 0x100000000) != 0)
  {
    swift_release(v150);
  }
  else
  {
    v155 = objc_msgSend(v3, "standardUserDefaults");
    v156._object = (void *)0x800000010053C450;
    v156._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-headgear-confidence", v156);
    v158 = v157;
    swift_release(v150);

    if ((v158 & 0x100000000) == 0)
    {
      v159.n128_u32[0] = v154;
      if (*(float *)&v154 <= *(float *)&v158)
      {
        v160 = 0;
        v161 = v154;
        v162 = v158;
        goto LABEL_84;
      }
    }
  }
  v161 = 0;
  v162 = 0;
  v160 = 1;
LABEL_84:
  ImageQualityCriteria.minHeadgearConfidence.setter(v161 | ((unint64_t)v160 << 32), v159);
  v163 = ImageQualityCriteria.maxHeadgearConfidence.setter(v162 | ((unint64_t)v160 << 32));
  v164 = static MetricsFlags.faceConfidence.getter(v163);
  v165 = objc_msgSend(v3, "standardUserDefaults");
  v166._object = (void *)0x800000010053C490;
  v166._countAndFlagsBits = 0xD000000000000036;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-headgear-confidence", v166);
  v168 = v167;

  if ((v168 & 0x100000000) != 0)
  {
    swift_release(v164);
  }
  else
  {
    v169 = objc_msgSend(v3, "standardUserDefaults");
    v170._object = (void *)0x800000010053C4D0;
    v170._countAndFlagsBits = 0xD000000000000036;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-confidence", v170);
    v172 = v171;
    swift_release(v164);

    if ((v172 & 0x100000000) == 0 && *(float *)&v168 <= *(float *)&v172)
    {
      v173 = 0;
      v174 = v168;
      v175 = v172;
      goto LABEL_90;
    }
  }
  v174 = 0;
  v175 = 0;
  v173 = 1;
LABEL_90:
  ImageQualityCriteria.minFaceConfidence.setter(v174 | ((unint64_t)v173 << 32));
  v176 = ImageQualityCriteria.maxFaceConfidence.setter(v175 | ((unint64_t)v173 << 32));
  v177 = static MetricsFlags.faceCaptureQuality.getter(v176);
  v178 = objc_msgSend(v3, "standardUserDefaults");
  v179._object = (void *)0x800000010053C510;
  v179._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-confidence", v179);
  v181 = v180;

  if ((v181 & 0x100000000) != 0)
  {
    swift_release(v177);
  }
  else
  {
    v182 = objc_msgSend(v3, "standardUserDefaults");
    v183._object = (void *)0x800000010053C550;
    v183._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-capture-quality", v183);
    v185 = v184;
    swift_release(v177);

    if ((v185 & 0x100000000) == 0)
    {
      v186.n128_u32[0] = v181;
      if (*(float *)&v181 <= *(float *)&v185)
      {
        v187 = 0;
        v188 = v181;
        v189 = v185;
        goto LABEL_96;
      }
    }
  }
  v188 = 0;
  v189 = 0;
  v187 = 1;
LABEL_96:
  ImageQualityCriteria.minFaceCaptureQuality.setter(v188 | ((unint64_t)v187 << 32), v186);
  v190 = ImageQualityCriteria.maxFaceCaptureQuality.setter(v189 | ((unint64_t)v187 << 32));
  v191 = static MetricsFlags.numFaces.getter(v190);
  v192 = objc_msgSend(v3, "standardUserDefaults");
  v193._object = (void *)0x800000010053C590;
  v193._countAndFlagsBits = 0xD000000000000030;
  v229 = NSUserDefaults.internalInt(forKey:)(v193);
  value = v229.value;
  is_nil = v229.is_nil;

  if (is_nil)
  {
    swift_release(v191);
    goto LABEL_105;
  }
  v196 = objc_msgSend(v3, "standardUserDefaults");
  v197._object = (void *)0x800000010053C5D0;
  v197._countAndFlagsBits = 0xD000000000000030;
  v230 = NSUserDefaults.internalInt(forKey:)(v197);
  v198 = v230.value;
  v199 = v230.is_nil;
  swift_release(v191);

  if (v199)
  {
LABEL_105:
    v201 = 0;
    v202 = 0;
    v200 = 1;
    goto LABEL_106;
  }
  v200 = v198 < value;
  if (v198 >= value)
    v201 = value;
  else
    v201 = 0;
  if (v198 >= value)
    v202 = v198;
  else
    v202 = 0;
LABEL_106:
  ImageQualityCriteria.minNumFaces.setter(v201, v200);
  v203 = ImageQualityCriteria.maxNumFaces.setter(v202, v200);
  v204 = static MetricsFlags.luxLevel.getter(v203);
  v205 = objc_msgSend(v3, "standardUserDefaults");
  v206._object = (void *)0x800000010053C610;
  v206._countAndFlagsBits = 0xD000000000000030;
  v231 = NSUserDefaults.internalInt(forKey:)(v206);
  v207 = v231.value;
  v208 = v231.is_nil;

  if (v208)
  {
    swift_release(v204);
    goto LABEL_115;
  }
  v209 = objc_msgSend(v3, "standardUserDefaults");
  v210._object = (void *)0x800000010053C650;
  v210._countAndFlagsBits = 0xD000000000000030;
  v232 = NSUserDefaults.internalInt(forKey:)(v210);
  v211 = v232.value;
  v212 = v232.is_nil;
  swift_release(v204);

  if (v212)
  {
LABEL_115:
    v214 = 0;
    v215 = 0;
    v213 = 1;
    goto LABEL_116;
  }
  v213 = v211 < v207;
  if (v211 >= v207)
    v214 = v207;
  else
    v214 = 0;
  if (v211 >= v207)
    v215 = v211;
  else
    v215 = 0;
LABEL_116:
  ImageQualityCriteria.minLuxLevel.setter(v214, v213);
  ImageQualityCriteria.maxLuxLevel.setter(v215, v213);
  v216 = objc_msgSend(v3, "standardUserDefaults");
  v217._countAndFlagsBits = 0xD000000000000032;
  v217._object = (void *)0x800000010053C690;
  v218 = NSUserDefaults.internalString(forKey:)(v217);

  v219 = sub_1000134FC(v218.value._countAndFlagsBits, (uint64_t)v218.value._object);
  swift_bridgeObjectRelease(v218.value._object);
  ImageQualityCriteria.pdf417Detected.setter(v219);
  v220 = objc_msgSend(v3, "standardUserDefaults");
  v221._countAndFlagsBits = 0xD000000000000035;
  v221._object = (void *)0x800000010053C6D0;
  v222 = NSUserDefaults.internalString(forKey:)(v221);

  v223 = sub_1000134FC(v222.value._countAndFlagsBits, (uint64_t)v222.value._object);
  swift_bridgeObjectRelease(v222.value._object);
  ImageQualityCriteria.isAAMVACompliant.setter(v223);
  v224 = objc_msgSend(v3, "standardUserDefaults");
  v225._countAndFlagsBits = 0xD00000000000002DLL;
  v225._object = (void *)0x800000010053C710;
  v226 = NSUserDefaults.internalString(forKey:)(v225);

  if (v226.value._object)
    ImageQualityCriteria.issuerNumber.setter(v226.value._countAndFlagsBits, v226.value._object, v227);
}

void sub_10000CF9C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  Swift::String v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  Swift::String v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  __n128 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  Swift::String v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  Swift::String v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  Swift::String v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  Swift::String v193;
  Swift::Int value;
  Swift::Bool is_nil;
  id v196;
  Swift::String v197;
  Swift::Int v198;
  Swift::Bool v199;
  _BOOL8 v200;
  Swift::Int v201;
  Swift::Int v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  Swift::String v206;
  Swift::Int v207;
  Swift::Bool v208;
  id v209;
  Swift::String v210;
  Swift::Int v211;
  Swift::Bool v212;
  _BOOL8 v213;
  Swift::Int v214;
  Swift::Int v215;
  id v216;
  Swift::String v217;
  Swift::String_optional v218;
  uint64_t v219;
  id v220;
  Swift::String v221;
  Swift::String_optional v222;
  uint64_t v223;
  id v224;
  Swift::String v225;
  Swift::String_optional v226;
  __n128 v227;
  int v228;
  Swift::Int_optional v229;
  Swift::Int_optional v230;
  Swift::Int_optional v231;
  Swift::Int_optional v232;

  BYTE2(v228) = 2;
  LOWORD(v228) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v228,
    0,
    0,
    0,
    0);
  v1 = type metadata accessor for MetricsFlags(0);
  v2 = static MetricsFlags.blurriness.getter(v1);
  v3 = (void *)objc_opt_self(NSUserDefaults);
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5._object = (void *)0x800000010053C740;
  v5._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.front-id.check-issuer-num", v5);
  v7 = v6;

  if ((v7 & 0x100000000) != 0)
  {
    swift_release(v2);
  }
  else
  {
    v8 = objc_msgSend(v3, "standardUserDefaults");
    v9._object = (void *)0x800000010053C780;
    v9._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blurriness", v9);
    v11 = v10;
    swift_release(v2);

    if ((v11 & 0x100000000) == 0)
    {
      v12.n128_u32[0] = v7;
      if (*(float *)&v7 <= *(float *)&v11)
      {
        v13 = 0;
        goto LABEL_7;
      }
    }
  }
  LODWORD(v7) = 0;
  LODWORD(v11) = 0;
  v13 = 1;
LABEL_7:
  ImageQualityCriteria.minBlurriness.setter(v7 | ((unint64_t)v13 << 32), v12);
  v14 = ImageQualityCriteria.maxBlurriness.setter(v11 | ((unint64_t)v13 << 32));
  v15 = static MetricsFlags.exposure.getter(v14);
  v16 = objc_msgSend(v3, "standardUserDefaults");
  v17._object = (void *)0x800000010053C7C0;
  v17._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blurriness", v17);
  v19 = v18;

  if ((v19 & 0x100000000) != 0)
  {
    swift_release(v15);
  }
  else
  {
    v20 = objc_msgSend(v3, "standardUserDefaults");
    v21._object = (void *)0x800000010053C7F0;
    v21._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-exposure", v21);
    v23 = v22;
    swift_release(v15);

    if ((v23 & 0x100000000) == 0)
    {
      v24.n128_u32[0] = v19;
      if (*(float *)&v19 <= *(float *)&v23)
      {
        v25 = 0;
        goto LABEL_13;
      }
    }
  }
  LODWORD(v19) = 0;
  LODWORD(v23) = 0;
  v25 = 1;
LABEL_13:
  ImageQualityCriteria.minExposure.setter(v19 | ((unint64_t)v25 << 32), v24);
  v26 = ImageQualityCriteria.maxExposure.setter(v23 | ((unint64_t)v25 << 32));
  v27 = static MetricsFlags.cardDistortion.getter(v26);
  v28 = objc_msgSend(v3, "standardUserDefaults");
  v29._object = (void *)0x800000010053C820;
  v29._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-exposure", v29);
  v31 = v30;

  if ((v31 & 0x100000000) != 0)
  {
    swift_release(v27);
    goto LABEL_18;
  }
  v32 = objc_msgSend(v3, "standardUserDefaults");
  v33._object = (void *)0x800000010053C860;
  v33._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-card-distortion", v33);
  v35 = v34;
  swift_release(v27);

  if ((v35 & 0x100000000) != 0)
  {
LABEL_18:
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
    goto LABEL_19;
  }
  if (*(float *)&v31 <= *(float *)&v35)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
  }
LABEL_19:
  ImageQualityCriteria.minCardDistortion.setter(v31 | ((unint64_t)v36 << 32));
  v37 = ImageQualityCriteria.maxCardDistortion.setter(v35 | ((unint64_t)v36 << 32));
  v38 = static MetricsFlags.faceToImageRatio.getter(v37);
  v39 = objc_msgSend(v3, "standardUserDefaults");
  v40._object = (void *)0x800000010053C8A0;
  v40._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-card-distortion", v40);
  v42 = v41;

  if ((v42 & 0x100000000) != 0)
  {
    swift_release(v38);
    goto LABEL_24;
  }
  v43 = objc_msgSend(v3, "standardUserDefaults");
  v44._object = (void *)0x800000010053C8E0;
  v44._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-to-image-ratio", v44);
  v46 = v45;
  swift_release(v38);

  if ((v46 & 0x100000000) != 0)
  {
LABEL_24:
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
    goto LABEL_25;
  }
  v47.n128_u32[0] = v42;
  if (*(float *)&v42 <= *(float *)&v46)
  {
    v48 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
  }
LABEL_25:
  ImageQualityCriteria.minFaceToImageRatio.setter(v42 | ((unint64_t)v48 << 32), v47);
  v49 = ImageQualityCriteria.maxFaceToImageRatio.setter(v46 | ((unint64_t)v48 << 32));
  v50 = static MetricsFlags.faceCenteredRatio.getter(v49);
  v51 = objc_msgSend(v3, "standardUserDefaults");
  v52._object = (void *)0x800000010053C920;
  v52._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-to-image-ratio", v52);
  v54 = v53;

  if ((v54 & 0x100000000) != 0)
  {
    swift_release(v50);
    goto LABEL_30;
  }
  v55 = objc_msgSend(v3, "standardUserDefaults");
  v56._object = (void *)0x800000010053C960;
  v56._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-centered-ratio", v56);
  v58 = v57;
  swift_release(v50);

  if ((v58 & 0x100000000) != 0)
  {
LABEL_30:
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
    goto LABEL_31;
  }
  v59.n128_u32[0] = v54;
  if (*(float *)&v54 <= *(float *)&v58)
  {
    v60 = 0;
  }
  else
  {
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
  }
LABEL_31:
  ImageQualityCriteria.minFaceCenteredRatio.setter(v54 | ((unint64_t)v60 << 32), v59);
  v61 = ImageQualityCriteria.maxFaceCenteredRatio.setter(v58 | ((unint64_t)v60 << 32));
  v62 = static MetricsFlags.headPitch.getter(v61);
  v63 = objc_msgSend(v3, "standardUserDefaults");
  v64._object = (void *)0x800000010053C9A0;
  v64._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-centered-ratio", v64);
  v66 = v65;

  if ((v66 & 0x100000000) != 0)
  {
    swift_release(v62);
  }
  else
  {
    v67 = objc_msgSend(v3, "standardUserDefaults");
    v68._object = (void *)0x800000010053C9E0;
    v68._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-head-pitch", v68);
    v70 = v69;
    swift_release(v62);

    if ((v70 & 0x100000000) == 0)
    {
      v71.n128_u32[0] = v66;
      if (*(float *)&v66 <= *(float *)&v70)
      {
        v72 = 0;
        goto LABEL_37;
      }
    }
  }
  LODWORD(v66) = 0;
  LODWORD(v70) = 0;
  v72 = 1;
LABEL_37:
  ImageQualityCriteria.minHeadPitch.setter(v66 | ((unint64_t)v72 << 32), v71);
  v73 = ImageQualityCriteria.maxHeadPitch.setter(v70 | ((unint64_t)v72 << 32));
  v74 = static MetricsFlags.headRoll.getter(v73);
  v75 = objc_msgSend(v3, "standardUserDefaults");
  v76._object = (void *)0x800000010053CA20;
  v76._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-head-pitch", v76);
  v78 = v77;

  if ((v78 & 0x100000000) != 0)
  {
    swift_release(v74);
    goto LABEL_42;
  }
  v79 = objc_msgSend(v3, "standardUserDefaults");
  v80._object = (void *)0x800000010053CA50;
  v80._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-head-roll", v80);
  v82 = v81;
  swift_release(v74);

  if ((v82 & 0x100000000) != 0)
  {
LABEL_42:
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
    goto LABEL_43;
  }
  v83.n128_u32[0] = v78;
  if (*(float *)&v78 <= *(float *)&v82)
  {
    v84 = 0;
  }
  else
  {
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
  }
LABEL_43:
  ImageQualityCriteria.minHeadRoll.setter(v78 | ((unint64_t)v84 << 32), v83);
  v85 = ImageQualityCriteria.maxHeadRoll.setter(v82 | ((unint64_t)v84 << 32));
  v86 = static MetricsFlags.headYaw.getter(v85);
  v87 = objc_msgSend(v3, "standardUserDefaults");
  v88._object = (void *)0x800000010053CA80;
  v88._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-head-roll", v88);
  v90 = v89;

  if ((v90 & 0x100000000) != 0)
  {
    swift_release(v86);
  }
  else
  {
    v91 = objc_msgSend(v3, "standardUserDefaults");
    v92._object = (void *)0x800000010053CAB0;
    v92._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-min-head-yaw", v92);
    v94 = v93;
    swift_release(v86);

    if ((v94 & 0x100000000) == 0)
    {
      v95.n128_u32[0] = v90;
      if (*(float *)&v90 <= *(float *)&v94)
      {
        v96 = 0;
        goto LABEL_49;
      }
    }
  }
  LODWORD(v90) = 0;
  LODWORD(v94) = 0;
  v96 = 1;
LABEL_49:
  ImageQualityCriteria.minHeadYaw.setter(v90 | ((unint64_t)v96 << 32), v95);
  v97 = ImageQualityCriteria.maxHeadYaw.setter(v94 | ((unint64_t)v96 << 32));
  v98 = static MetricsFlags.blinkingConfidence.getter(v97);
  v99 = objc_msgSend(v3, "standardUserDefaults");
  v100._object = (void *)0x800000010053CAE0;
  v100._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-max-head-yaw", v100);
  v102 = v101;

  if ((v102 & 0x100000000) != 0)
  {
    swift_release(v98);
  }
  else
  {
    v103 = objc_msgSend(v3, "standardUserDefaults");
    v104._object = (void *)0x800000010053CB20;
    v104._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blinking-confidence", v104);
    v106 = v105;
    swift_release(v98);

    if ((v106 & 0x100000000) == 0)
    {
      v107.n128_u32[0] = v102;
      if (*(float *)&v102 <= *(float *)&v106)
      {
        v108 = 0;
        goto LABEL_55;
      }
    }
  }
  LODWORD(v102) = 0;
  LODWORD(v106) = 0;
  v108 = 1;
LABEL_55:
  ImageQualityCriteria.minBlinkingConfidence.setter(v102 | ((unint64_t)v108 << 32), v107);
  v109 = ImageQualityCriteria.maxBlinkingConfidence.setter(v106 | ((unint64_t)v108 << 32));
  v110 = static MetricsFlags.prescriptionConfidence.getter(v109);
  v111 = objc_msgSend(v3, "standardUserDefaults");
  v112._object = (void *)0x800000010053CB60;
  v112._countAndFlagsBits = 0xD00000000000003DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blinking-confidence", v112);
  v114 = v113;

  if ((v114 & 0x100000000) != 0)
  {
    swift_release(v110);
  }
  else
  {
    v115 = objc_msgSend(v3, "standardUserDefaults");
    v116._object = (void *)0x800000010053CBA0;
    v116._countAndFlagsBits = 0xD00000000000003DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-prescription-confidence", v116);
    v118 = v117;
    swift_release(v110);

    if ((v118 & 0x100000000) == 0)
    {
      v119.n128_u32[0] = v114;
      if (*(float *)&v114 <= *(float *)&v118)
      {
        v120 = 0;
        goto LABEL_61;
      }
    }
  }
  LODWORD(v114) = 0;
  LODWORD(v118) = 0;
  v120 = 1;
LABEL_61:
  ImageQualityCriteria.minPrescriptionConfidence.setter(v114 | ((unint64_t)v120 << 32), v119);
  v121 = ImageQualityCriteria.maxPrescriptionConfidence.setter(v118 | ((unint64_t)v120 << 32));
  v122 = static MetricsFlags.sunglassesConfidence.getter(v121);
  v123 = objc_msgSend(v3, "standardUserDefaults");
  v124._object = (void *)0x800000010053CBE0;
  v124._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-prescription-confidence", v124);
  v126 = v125;

  if ((v126 & 0x100000000) != 0)
  {
    swift_release(v122);
    v132 = 0;
    v133 = 0;
    v134 = 1;
  }
  else
  {
    v127 = objc_msgSend(v3, "standardUserDefaults");
    v128._object = (void *)0x800000010053CC20;
    v128._countAndFlagsBits = 0xD00000000000003BLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-sunglasses-confidence", v128);
    v130 = v129;
    swift_release(v122);

    if ((v130 & 0x100000000) != 0)
    {
      v132 = 0;
      v133 = 0;
      v134 = 1;
    }
    else
    {
      v131.n128_u32[0] = v126;
      if (*(float *)&v126 <= *(float *)&v130)
      {
        v134 = 0;
        v132 = v126;
        v133 = v130;
      }
      else
      {
        v132 = 0;
        v133 = 0;
        v134 = 1;
      }
    }
  }
  ImageQualityCriteria.minSunglassesConfidence.setter(v132 | ((unint64_t)v134 << 32), v131);
  v135 = ImageQualityCriteria.maxSunglassesConfidence.setter(v133 | ((unint64_t)v134 << 32));
  v136 = static MetricsFlags.facemaskConfidence.getter(v135);
  v137 = objc_msgSend(v3, "standardUserDefaults");
  v138._object = (void *)0x800000010053CC60;
  v138._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-sunglasses-confidence", v138);
  v140 = v139;

  if ((v140 & 0x100000000) != 0)
  {
    swift_release(v136);
  }
  else
  {
    v141 = objc_msgSend(v3, "standardUserDefaults");
    v142._object = (void *)0x800000010053CCA0;
    v142._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-facemask-confidence", v142);
    v144 = v143;
    swift_release(v136);

    if ((v144 & 0x100000000) == 0)
    {
      v145.n128_u32[0] = v140;
      if (*(float *)&v140 <= *(float *)&v144)
      {
        v146 = 0;
        v147 = v140;
        v148 = v144;
        goto LABEL_78;
      }
    }
  }
  v147 = 0;
  v148 = 0;
  v146 = 1;
LABEL_78:
  ImageQualityCriteria.minFacemaskConfidence.setter(v147 | ((unint64_t)v146 << 32), v145);
  v149 = ImageQualityCriteria.maxFacemaskConfidence.setter(v148 | ((unint64_t)v146 << 32));
  v150 = static MetricsFlags.headgearConfidence.getter(v149);
  v151 = objc_msgSend(v3, "standardUserDefaults");
  v152._object = (void *)0x800000010053CCE0;
  v152._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-facemask-confidence", v152);
  v154 = v153;

  if ((v154 & 0x100000000) != 0)
  {
    swift_release(v150);
  }
  else
  {
    v155 = objc_msgSend(v3, "standardUserDefaults");
    v156._object = (void *)0x800000010053CD20;
    v156._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-headgear-confidence", v156);
    v158 = v157;
    swift_release(v150);

    if ((v158 & 0x100000000) == 0)
    {
      v159.n128_u32[0] = v154;
      if (*(float *)&v154 <= *(float *)&v158)
      {
        v160 = 0;
        v161 = v154;
        v162 = v158;
        goto LABEL_84;
      }
    }
  }
  v161 = 0;
  v162 = 0;
  v160 = 1;
LABEL_84:
  ImageQualityCriteria.minHeadgearConfidence.setter(v161 | ((unint64_t)v160 << 32), v159);
  v163 = ImageQualityCriteria.maxHeadgearConfidence.setter(v162 | ((unint64_t)v160 << 32));
  v164 = static MetricsFlags.faceConfidence.getter(v163);
  v165 = objc_msgSend(v3, "standardUserDefaults");
  v166._object = (void *)0x800000010053CD60;
  v166._countAndFlagsBits = 0xD000000000000035;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-headgear-confidence", v166);
  v168 = v167;

  if ((v168 & 0x100000000) != 0)
  {
    swift_release(v164);
  }
  else
  {
    v169 = objc_msgSend(v3, "standardUserDefaults");
    v170._object = (void *)0x800000010053CDA0;
    v170._countAndFlagsBits = 0xD000000000000035;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-confidence", v170);
    v172 = v171;
    swift_release(v164);

    if ((v172 & 0x100000000) == 0 && *(float *)&v168 <= *(float *)&v172)
    {
      v173 = 0;
      v174 = v168;
      v175 = v172;
      goto LABEL_90;
    }
  }
  v174 = 0;
  v175 = 0;
  v173 = 1;
LABEL_90:
  ImageQualityCriteria.minFaceConfidence.setter(v174 | ((unint64_t)v173 << 32));
  v176 = ImageQualityCriteria.maxFaceConfidence.setter(v175 | ((unint64_t)v173 << 32));
  v177 = static MetricsFlags.faceCaptureQuality.getter(v176);
  v178 = objc_msgSend(v3, "standardUserDefaults");
  v179._object = (void *)0x800000010053CDE0;
  v179._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-confidence", v179);
  v181 = v180;

  if ((v181 & 0x100000000) != 0)
  {
    swift_release(v177);
  }
  else
  {
    v182 = objc_msgSend(v3, "standardUserDefaults");
    v183._object = (void *)0x800000010053CE20;
    v183._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-capture-quality", v183);
    v185 = v184;
    swift_release(v177);

    if ((v185 & 0x100000000) == 0)
    {
      v186.n128_u32[0] = v181;
      if (*(float *)&v181 <= *(float *)&v185)
      {
        v187 = 0;
        v188 = v181;
        v189 = v185;
        goto LABEL_96;
      }
    }
  }
  v188 = 0;
  v189 = 0;
  v187 = 1;
LABEL_96:
  ImageQualityCriteria.minFaceCaptureQuality.setter(v188 | ((unint64_t)v187 << 32), v186);
  v190 = ImageQualityCriteria.maxFaceCaptureQuality.setter(v189 | ((unint64_t)v187 << 32));
  v191 = static MetricsFlags.numFaces.getter(v190);
  v192 = objc_msgSend(v3, "standardUserDefaults");
  v193._object = (void *)0x800000010053CE60;
  v193._countAndFlagsBits = 0xD00000000000002FLL;
  v229 = NSUserDefaults.internalInt(forKey:)(v193);
  value = v229.value;
  is_nil = v229.is_nil;

  if (is_nil)
  {
    swift_release(v191);
    goto LABEL_105;
  }
  v196 = objc_msgSend(v3, "standardUserDefaults");
  v197._object = (void *)0x800000010053CE90;
  v197._countAndFlagsBits = 0xD00000000000002FLL;
  v230 = NSUserDefaults.internalInt(forKey:)(v197);
  v198 = v230.value;
  v199 = v230.is_nil;
  swift_release(v191);

  if (v199)
  {
LABEL_105:
    v201 = 0;
    v202 = 0;
    v200 = 1;
    goto LABEL_106;
  }
  v200 = v198 < value;
  if (v198 >= value)
    v201 = value;
  else
    v201 = 0;
  if (v198 >= value)
    v202 = v198;
  else
    v202 = 0;
LABEL_106:
  ImageQualityCriteria.minNumFaces.setter(v201, v200);
  v203 = ImageQualityCriteria.maxNumFaces.setter(v202, v200);
  v204 = static MetricsFlags.luxLevel.getter(v203);
  v205 = objc_msgSend(v3, "standardUserDefaults");
  v206._object = (void *)0x800000010053CEC0;
  v206._countAndFlagsBits = 0xD00000000000002FLL;
  v231 = NSUserDefaults.internalInt(forKey:)(v206);
  v207 = v231.value;
  v208 = v231.is_nil;

  if (v208)
  {
    swift_release(v204);
    goto LABEL_115;
  }
  v209 = objc_msgSend(v3, "standardUserDefaults");
  v210._object = (void *)0x800000010053CEF0;
  v210._countAndFlagsBits = 0xD00000000000002FLL;
  v232 = NSUserDefaults.internalInt(forKey:)(v210);
  v211 = v232.value;
  v212 = v232.is_nil;
  swift_release(v204);

  if (v212)
  {
LABEL_115:
    v214 = 0;
    v215 = 0;
    v213 = 1;
    goto LABEL_116;
  }
  v213 = v211 < v207;
  if (v211 >= v207)
    v214 = v207;
  else
    v214 = 0;
  if (v211 >= v207)
    v215 = v211;
  else
    v215 = 0;
LABEL_116:
  ImageQualityCriteria.minLuxLevel.setter(v214, v213);
  ImageQualityCriteria.maxLuxLevel.setter(v215, v213);
  v216 = objc_msgSend(v3, "standardUserDefaults");
  v217._countAndFlagsBits = 0xD000000000000031;
  v217._object = (void *)0x800000010053CF20;
  v218 = NSUserDefaults.internalString(forKey:)(v217);

  v219 = sub_1000134FC(v218.value._countAndFlagsBits, (uint64_t)v218.value._object);
  swift_bridgeObjectRelease(v218.value._object);
  ImageQualityCriteria.pdf417Detected.setter(v219);
  v220 = objc_msgSend(v3, "standardUserDefaults");
  v221._countAndFlagsBits = 0xD000000000000034;
  v221._object = (void *)0x800000010053CF60;
  v222 = NSUserDefaults.internalString(forKey:)(v221);

  v223 = sub_1000134FC(v222.value._countAndFlagsBits, (uint64_t)v222.value._object);
  swift_bridgeObjectRelease(v222.value._object);
  ImageQualityCriteria.isAAMVACompliant.setter(v223);
  v224 = objc_msgSend(v3, "standardUserDefaults");
  v225._countAndFlagsBits = 0xD00000000000002CLL;
  v225._object = (void *)0x800000010053CFA0;
  v226 = NSUserDefaults.internalString(forKey:)(v225);

  if (v226.value._object)
    ImageQualityCriteria.issuerNumber.setter(v226.value._countAndFlagsBits, v226.value._object, v227);
}

void sub_10000E40C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  Swift::String v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  unsigned __int8 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  Swift::String v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  __n128 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  Swift::String v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  Swift::String v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  Swift::String v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  Swift::String v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  Swift::String v191;
  unint64_t v192;
  unint64_t v193;
  id v194;
  Swift::String v195;
  unint64_t v196;
  unint64_t v197;
  id v198;
  Swift::String v199;
  unint64_t v200;
  unint64_t v201;
  id v202;
  Swift::String v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  Swift::String v209;
  Swift::Int value;
  Swift::Bool is_nil;
  id v212;
  Swift::String v213;
  Swift::Int v214;
  Swift::Bool v215;
  _BOOL8 v216;
  Swift::Int v217;
  Swift::Int v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  Swift::String v222;
  Swift::Int v223;
  Swift::Bool v224;
  id v225;
  Swift::String v226;
  Swift::Int v227;
  Swift::Bool v228;
  _BOOL8 v229;
  Swift::Int v230;
  Swift::Int v231;
  id v232;
  Swift::String v233;
  Swift::String_optional v234;
  uint64_t v235;
  id v236;
  Swift::String v237;
  Swift::String_optional v238;
  uint64_t v239;
  id v240;
  Swift::String v241;
  Swift::String_optional v242;
  __n128 v243;
  int v244;
  Swift::Int_optional v245;
  Swift::Int_optional v246;
  Swift::Int_optional v247;
  Swift::Int_optional v248;

  BYTE2(v244) = 2;
  LOWORD(v244) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v244,
    0,
    0,
    0,
    0);
  v1 = type metadata accessor for MetricsFlags(0);
  v2 = static MetricsFlags.blurriness.getter(v1);
  v3 = (void *)objc_opt_self(NSUserDefaults);
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5._object = (void *)0x800000010053CFD0;
  v5._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.back-id.check-issuer-num", v5);
  v7 = v6;

  if ((v7 & 0x100000000) != 0)
  {
    swift_release(v2);
  }
  else
  {
    v8 = objc_msgSend(v3, "standardUserDefaults");
    v9._object = (void *)0x800000010053D000;
    v9._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-blurriness", v9);
    v11 = v10;
    swift_release(v2);

    if ((v11 & 0x100000000) == 0)
    {
      v12.n128_u32[0] = v7;
      if (*(float *)&v7 <= *(float *)&v11)
      {
        v13 = 0;
        goto LABEL_7;
      }
    }
  }
  LODWORD(v7) = 0;
  LODWORD(v11) = 0;
  v13 = 1;
LABEL_7:
  ImageQualityCriteria.minBlurriness.setter(v7 | ((unint64_t)v13 << 32), v12);
  v14 = ImageQualityCriteria.maxBlurriness.setter(v11 | ((unint64_t)v13 << 32));
  v15 = static MetricsFlags.exposure.getter(v14);
  v16 = objc_msgSend(v3, "standardUserDefaults");
  v17._object = (void *)0x800000010053D030;
  v17._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-blurriness", v17);
  v19 = v18;

  if ((v19 & 0x100000000) != 0)
  {
    swift_release(v15);
  }
  else
  {
    v20 = objc_msgSend(v3, "standardUserDefaults");
    v21._object = (void *)0x800000010053D060;
    v21._countAndFlagsBits = 0xD00000000000002DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-exposure", v21);
    v23 = v22;
    swift_release(v15);

    if ((v23 & 0x100000000) == 0)
    {
      v24.n128_u32[0] = v19;
      if (*(float *)&v19 <= *(float *)&v23)
      {
        v25 = 0;
        goto LABEL_13;
      }
    }
  }
  LODWORD(v19) = 0;
  LODWORD(v23) = 0;
  v25 = 1;
LABEL_13:
  ImageQualityCriteria.minExposure.setter(v19 | ((unint64_t)v25 << 32), v24);
  v26 = ImageQualityCriteria.maxExposure.setter(v23 | ((unint64_t)v25 << 32));
  v27 = static MetricsFlags.cardDistortion.getter(v26);
  v28 = objc_msgSend(v3, "standardUserDefaults");
  v29._object = (void *)0x800000010053D090;
  v29._countAndFlagsBits = 0xD000000000000034;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-exposure", v29);
  v31 = v30;

  if ((v31 & 0x100000000) != 0)
  {
    swift_release(v27);
    goto LABEL_18;
  }
  v32 = objc_msgSend(v3, "standardUserDefaults");
  v33._object = (void *)0x800000010053D0D0;
  v33._countAndFlagsBits = 0xD000000000000034;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-card-distortion", v33);
  v35 = v34;
  swift_release(v27);

  if ((v35 & 0x100000000) != 0)
  {
LABEL_18:
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
    goto LABEL_19;
  }
  if (*(float *)&v31 <= *(float *)&v35)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    LODWORD(v35) = 0;
    v36 = 1;
  }
LABEL_19:
  ImageQualityCriteria.minCardDistortion.setter(v31 | ((unint64_t)v36 << 32));
  v37 = ImageQualityCriteria.maxCardDistortion.setter(v35 | ((unint64_t)v36 << 32));
  v38 = static MetricsFlags.faceToImageRatio.getter(v37);
  v39 = objc_msgSend(v3, "standardUserDefaults");
  v40._object = (void *)0x800000010053D110;
  v40._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-card-distortion", v40);
  v42 = v41;

  if ((v42 & 0x100000000) != 0)
  {
    swift_release(v38);
    goto LABEL_24;
  }
  v43 = objc_msgSend(v3, "standardUserDefaults");
  v44._object = (void *)0x800000010053D150;
  v44._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-to-image-ratio", v44);
  v46 = v45;
  swift_release(v38);

  if ((v46 & 0x100000000) != 0)
  {
LABEL_24:
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
    goto LABEL_25;
  }
  v47.n128_u32[0] = v42;
  if (*(float *)&v42 <= *(float *)&v46)
  {
    v48 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
  }
LABEL_25:
  ImageQualityCriteria.minFaceToImageRatio.setter(v42 | ((unint64_t)v48 << 32), v47);
  v49 = ImageQualityCriteria.maxFaceToImageRatio.setter(v46 | ((unint64_t)v48 << 32));
  v50 = static MetricsFlags.faceCenteredRatio.getter(v49);
  v51 = objc_msgSend(v3, "standardUserDefaults");
  v52._object = (void *)0x800000010053D190;
  v52._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-to-image-ratio", v52);
  v54 = v53;

  if ((v54 & 0x100000000) != 0)
  {
    swift_release(v50);
    goto LABEL_30;
  }
  v55 = objc_msgSend(v3, "standardUserDefaults");
  v56._object = (void *)0x800000010053D1D0;
  v56._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-centered-ratio", v56);
  v58 = v57;
  swift_release(v50);

  if ((v58 & 0x100000000) != 0)
  {
LABEL_30:
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
    goto LABEL_31;
  }
  v59.n128_u32[0] = v54;
  if (*(float *)&v54 <= *(float *)&v58)
  {
    v60 = 0;
  }
  else
  {
    LODWORD(v54) = 0;
    LODWORD(v58) = 0;
    v60 = 1;
  }
LABEL_31:
  ImageQualityCriteria.minFaceCenteredRatio.setter(v54 | ((unint64_t)v60 << 32), v59);
  v61 = ImageQualityCriteria.maxFaceCenteredRatio.setter(v58 | ((unint64_t)v60 << 32));
  v62 = static MetricsFlags.headPitch.getter(v61);
  v63 = objc_msgSend(v3, "standardUserDefaults");
  v64._object = (void *)0x800000010053D210;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-centered-ratio", v64);
  v66 = v65;

  if ((v66 & 0x100000000) != 0)
  {
    swift_release(v62);
  }
  else
  {
    v67 = objc_msgSend(v3, "standardUserDefaults");
    v68._object = (void *)0x800000010053D240;
    v68._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-pitch", v68);
    v70 = v69;
    swift_release(v62);

    if ((v70 & 0x100000000) == 0)
    {
      v71.n128_u32[0] = v66;
      if (*(float *)&v66 <= *(float *)&v70)
      {
        v72 = 0;
        goto LABEL_37;
      }
    }
  }
  LODWORD(v66) = 0;
  LODWORD(v70) = 0;
  v72 = 1;
LABEL_37:
  ImageQualityCriteria.minHeadPitch.setter(v66 | ((unint64_t)v72 << 32), v71);
  v73 = ImageQualityCriteria.maxHeadPitch.setter(v70 | ((unint64_t)v72 << 32));
  v74 = static MetricsFlags.headRoll.getter(v73);
  v75 = objc_msgSend(v3, "standardUserDefaults");
  v76._object = (void *)0x800000010053D270;
  v76._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-pitch", v76);
  v78 = v77;

  if ((v78 & 0x100000000) != 0)
  {
    swift_release(v74);
    goto LABEL_42;
  }
  v79 = objc_msgSend(v3, "standardUserDefaults");
  v80._object = (void *)0x800000010053D2A0;
  v80._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-roll", v80);
  v82 = v81;
  swift_release(v74);

  if ((v82 & 0x100000000) != 0)
  {
LABEL_42:
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
    goto LABEL_43;
  }
  v83.n128_u32[0] = v78;
  if (*(float *)&v78 <= *(float *)&v82)
  {
    v84 = 0;
  }
  else
  {
    LODWORD(v78) = 0;
    LODWORD(v82) = 0;
    v84 = 1;
  }
LABEL_43:
  ImageQualityCriteria.minHeadRoll.setter(v78 | ((unint64_t)v84 << 32), v83);
  v85 = ImageQualityCriteria.maxHeadRoll.setter(v82 | ((unint64_t)v84 << 32));
  v86 = static MetricsFlags.headYaw.getter(v85);
  v87 = objc_msgSend(v3, "standardUserDefaults");
  v88._object = (void *)0x800000010053D2D0;
  v88._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-roll", v88);
  v90 = v89;

  if ((v90 & 0x100000000) != 0)
  {
    swift_release(v86);
  }
  else
  {
    v91 = objc_msgSend(v3, "standardUserDefaults");
    v92._object = (void *)0x800000010053D300;
    v92._countAndFlagsBits = 0xD00000000000002DLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-min-head-yaw", v92);
    v94 = v93;
    swift_release(v86);

    if ((v94 & 0x100000000) == 0)
    {
      v95.n128_u32[0] = v90;
      if (*(float *)&v90 <= *(float *)&v94)
      {
        v96 = 0;
        goto LABEL_49;
      }
    }
  }
  LODWORD(v90) = 0;
  LODWORD(v94) = 0;
  v96 = 1;
LABEL_49:
  ImageQualityCriteria.minHeadYaw.setter(v90 | ((unint64_t)v96 << 32), v95);
  v97 = ImageQualityCriteria.maxHeadYaw.setter(v94 | ((unint64_t)v96 << 32));
  v98 = static MetricsFlags.blinkingConfidence.getter(v97);
  v99 = objc_msgSend(v3, "standardUserDefaults");
  v100._object = (void *)0x800000010053D330;
  v100._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-max-head-yaw", v100);
  v102 = v101;

  if ((v102 & 0x100000000) != 0)
  {
    swift_release(v98);
  }
  else
  {
    v103 = objc_msgSend(v3, "standardUserDefaults");
    v104._object = (void *)0x800000010053D370;
    v104._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-blinking-confidence", v104);
    v106 = v105;
    swift_release(v98);

    if ((v106 & 0x100000000) == 0)
    {
      v107.n128_u32[0] = v102;
      if (*(float *)&v102 <= *(float *)&v106)
      {
        v108 = 0;
        goto LABEL_55;
      }
    }
  }
  LODWORD(v102) = 0;
  LODWORD(v106) = 0;
  v108 = 1;
LABEL_55:
  ImageQualityCriteria.minBlinkingConfidence.setter(v102 | ((unint64_t)v108 << 32), v107);
  v109 = ImageQualityCriteria.maxBlinkingConfidence.setter(v106 | ((unint64_t)v108 << 32));
  v110 = static MetricsFlags.prescriptionConfidence.getter(v109);
  v111 = objc_msgSend(v3, "standardUserDefaults");
  v112._object = (void *)0x800000010053D3B0;
  v112._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-blinking-confidence", v112);
  v114 = v113;

  if ((v114 & 0x100000000) != 0)
  {
    swift_release(v110);
  }
  else
  {
    v115 = objc_msgSend(v3, "standardUserDefaults");
    v116._object = (void *)0x800000010053D3F0;
    v116._countAndFlagsBits = 0xD00000000000003CLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-prescription-confidence", v116);
    v118 = v117;
    swift_release(v110);

    if ((v118 & 0x100000000) == 0)
    {
      v119.n128_u32[0] = v114;
      if (*(float *)&v114 <= *(float *)&v118)
      {
        v120 = 0;
        goto LABEL_61;
      }
    }
  }
  LODWORD(v114) = 0;
  LODWORD(v118) = 0;
  v120 = 1;
LABEL_61:
  ImageQualityCriteria.minPrescriptionConfidence.setter(v114 | ((unint64_t)v120 << 32), v119);
  v121 = ImageQualityCriteria.maxPrescriptionConfidence.setter(v118 | ((unint64_t)v120 << 32));
  v122 = static MetricsFlags.sunglassesConfidence.getter(v121);
  v123 = objc_msgSend(v3, "standardUserDefaults");
  v124._object = (void *)0x800000010053D430;
  v124._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-prescription-confidence", v124);
  v126 = v125;

  if ((v126 & 0x100000000) != 0)
  {
    swift_release(v122);
LABEL_66:
    v133 = 0;
    v134 = 0;
    v132 = 1;
    goto LABEL_68;
  }
  v127 = objc_msgSend(v3, "standardUserDefaults");
  v128._object = (void *)0x800000010053D470;
  v128._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-sunglasses-confidence", v128);
  v130 = v129;
  swift_release(v122);

  if ((v130 & 0x100000000) == 0)
  {
    v131.n128_u32[0] = v126;
    if (*(float *)&v126 <= *(float *)&v130)
    {
      v132 = 0;
      v133 = v126;
      v134 = v130;
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  v133 = 0;
  v134 = 0;
  v132 = 1;
LABEL_68:
  ImageQualityCriteria.minSunglassesConfidence.setter(v133 | ((unint64_t)v132 << 32), v131);
  v135 = ImageQualityCriteria.maxSunglassesConfidence.setter(v134 | ((unint64_t)v132 << 32));
  v136 = static MetricsFlags.facemaskConfidence.getter(v135);
  v137 = objc_msgSend(v3, "standardUserDefaults");
  v138._object = (void *)0x800000010053D4B0;
  v138._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-sunglasses-confidence", v138);
  v140 = v139;

  if ((v140 & 0x100000000) != 0)
  {
    swift_release(v136);
  }
  else
  {
    v141 = objc_msgSend(v3, "standardUserDefaults");
    v142._object = (void *)0x800000010053D4F0;
    v142._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-facemask-confidence", v142);
    v144 = v143;
    swift_release(v136);

    if ((v144 & 0x100000000) == 0)
    {
      v145.n128_u32[0] = v140;
      if (*(float *)&v140 <= *(float *)&v144)
      {
        v146 = 0;
        v147 = v140;
        v148 = v144;
        goto LABEL_74;
      }
    }
  }
  v147 = 0;
  v148 = 0;
  v146 = 1;
LABEL_74:
  ImageQualityCriteria.minFacemaskConfidence.setter(v147 | ((unint64_t)v146 << 32), v145);
  v149 = ImageQualityCriteria.maxFacemaskConfidence.setter(v148 | ((unint64_t)v146 << 32));
  v150 = static MetricsFlags.headgearConfidence.getter(v149);
  v151 = objc_msgSend(v3, "standardUserDefaults");
  v152._object = (void *)0x800000010053D530;
  v152._countAndFlagsBits = 0xD000000000000038;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-facemask-confidence", v152);
  v154 = v153;

  if ((v154 & 0x100000000) != 0)
  {
    swift_release(v150);
  }
  else
  {
    v155 = objc_msgSend(v3, "standardUserDefaults");
    v156._object = (void *)0x800000010053D570;
    v156._countAndFlagsBits = 0xD000000000000038;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-headgear-confidence", v156);
    v158 = v157;
    swift_release(v150);

    if ((v158 & 0x100000000) == 0)
    {
      v159.n128_u32[0] = v154;
      if (*(float *)&v154 <= *(float *)&v158)
      {
        v160 = 0;
        v161 = v154;
        v162 = v158;
        goto LABEL_80;
      }
    }
  }
  v161 = 0;
  v162 = 0;
  v160 = 1;
LABEL_80:
  ImageQualityCriteria.minHeadgearConfidence.setter(v161 | ((unint64_t)v160 << 32), v159);
  v163 = ImageQualityCriteria.maxHeadgearConfidence.setter(v162 | ((unint64_t)v160 << 32));
  v164 = static MetricsFlags.faceConfidence.getter(v163);
  v165 = objc_msgSend(v3, "standardUserDefaults");
  v166._object = (void *)0x800000010053D5B0;
  v166._countAndFlagsBits = 0xD000000000000034;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-headgear-confidence", v166);
  v168 = v167;

  if ((v168 & 0x100000000) != 0)
  {
    swift_release(v164);
  }
  else
  {
    v169 = objc_msgSend(v3, "standardUserDefaults");
    v170._object = (void *)0x800000010053D5F0;
    v170._countAndFlagsBits = 0xD000000000000034;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-confidence", v170);
    v172 = v171;
    swift_release(v164);

    if ((v172 & 0x100000000) == 0 && *(float *)&v168 <= *(float *)&v172)
    {
      v173 = 0;
      v174 = v168;
      v175 = v172;
      goto LABEL_86;
    }
  }
  v174 = 0;
  v175 = 0;
  v173 = 1;
LABEL_86:
  ImageQualityCriteria.minFaceConfidence.setter(v174 | ((unint64_t)v173 << 32));
  v176 = ImageQualityCriteria.maxFaceConfidence.setter(v175 | ((unint64_t)v173 << 32));
  v177 = static MetricsFlags.faceCaptureQuality.getter(v176);
  v178 = objc_msgSend(v3, "standardUserDefaults");
  v179._object = (void *)0x800000010053D630;
  v179._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-confidence", v179);
  v181 = v180;

  if ((v181 & 0x100000000) != 0)
  {
    swift_release(v177);
  }
  else
  {
    v182 = objc_msgSend(v3, "standardUserDefaults");
    v183._object = (void *)0x800000010053D670;
    v183._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-min-face-capture-quality", v183);
    v185 = v184;
    swift_release(v177);

    if ((v185 & 0x100000000) == 0)
    {
      v186.n128_u32[0] = v181;
      if (*(float *)&v181 <= *(float *)&v185)
      {
        v187 = 0;
        v188 = v181;
        v189 = v185;
        goto LABEL_92;
      }
    }
  }
  v188 = 0;
  v189 = 0;
  v187 = 1;
LABEL_92:
  ImageQualityCriteria.minFaceCaptureQuality.setter(v188 | ((unint64_t)v187 << 32), v186);
  ImageQualityCriteria.maxFaceCaptureQuality.setter(v189 | ((unint64_t)v187 << 32));
  v190 = objc_msgSend(v3, "standardUserDefaults");
  v191._object = (void *)0x800000010053D6B0;
  v191._countAndFlagsBits = 0xD00000000000002BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"-max-face-capture-quality", v191);
  v193 = v192;

  ImageQualityCriteria.maxLeftDrift.setter(v193 | ((HIDWORD(v193) & 1) << 32));
  v194 = objc_msgSend(v3, "standardUserDefaults");
  v195._countAndFlagsBits = 0xD00000000000002CLL;
  v195._object = (void *)0x800000010053D6E0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-left-drift", v195);
  v197 = v196;

  ImageQualityCriteria.maxRightDrift.setter(v197 | ((HIDWORD(v197) & 1) << 32));
  v198 = objc_msgSend(v3, "standardUserDefaults");
  v199._countAndFlagsBits = 0xD000000000000029;
  v199._object = (void *)0x800000010053D710;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-right-drift", v199);
  v201 = v200;

  ImageQualityCriteria.maxUpDrift.setter(v201 | ((HIDWORD(v201) & 1) << 32));
  v202 = objc_msgSend(v3, "standardUserDefaults");
  v203._object = (void *)0x800000010053D740;
  v203._countAndFlagsBits = 0xD00000000000002BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-up-drift", v203);
  v205 = v204;

  v206 = ImageQualityCriteria.maxDownDrift.setter(v205 | ((HIDWORD(v205) & 1) << 32));
  v207 = static MetricsFlags.numFaces.getter(v206);
  v208 = objc_msgSend(v3, "standardUserDefaults");
  v209._object = (void *)0x800000010053D770;
  v209._countAndFlagsBits = 0xD00000000000002ELL;
  v245 = NSUserDefaults.internalInt(forKey:)(v209);
  value = v245.value;
  is_nil = v245.is_nil;

  if (is_nil)
  {
    swift_release(v207);
    v217 = 0;
    v218 = 0;
    v216 = 1;
  }
  else
  {
    v212 = objc_msgSend(v3, "standardUserDefaults");
    v213._object = (void *)0x800000010053D7A0;
    v213._countAndFlagsBits = 0xD00000000000002ELL;
    v246 = NSUserDefaults.internalInt(forKey:)(v213);
    v214 = v246.value;
    v215 = v246.is_nil;
    swift_release(v207);

    if (v215)
    {
      v217 = 0;
      v218 = 0;
      v216 = 1;
    }
    else
    {
      v216 = v214 < value;
      if (v214 >= value)
        v217 = value;
      else
        v217 = 0;
      if (v214 >= value)
        v218 = v214;
      else
        v218 = 0;
    }
  }
  ImageQualityCriteria.minNumFaces.setter(v217, v216);
  v219 = ImageQualityCriteria.maxNumFaces.setter(v218, v216);
  v220 = static MetricsFlags.luxLevel.getter(v219);
  v221 = objc_msgSend(v3, "standardUserDefaults");
  v222._object = (void *)0x800000010053D7D0;
  v222._countAndFlagsBits = 0xD00000000000002ELL;
  v247 = NSUserDefaults.internalInt(forKey:)(v222);
  v223 = v247.value;
  v224 = v247.is_nil;

  if (v224)
  {
    swift_release(v220);
    goto LABEL_111;
  }
  v225 = objc_msgSend(v3, "standardUserDefaults");
  v226._object = (void *)0x800000010053D800;
  v226._countAndFlagsBits = 0xD00000000000002ELL;
  v248 = NSUserDefaults.internalInt(forKey:)(v226);
  v227 = v248.value;
  v228 = v248.is_nil;
  swift_release(v220);

  if (v228)
  {
LABEL_111:
    v230 = 0;
    v231 = 0;
    v229 = 1;
    goto LABEL_112;
  }
  v229 = v227 < v223;
  if (v227 >= v223)
    v230 = v223;
  else
    v230 = 0;
  if (v227 >= v223)
    v231 = v227;
  else
    v231 = 0;
LABEL_112:
  ImageQualityCriteria.minLuxLevel.setter(v230, v229);
  ImageQualityCriteria.maxLuxLevel.setter(v231, v229);
  v232 = objc_msgSend(v3, "standardUserDefaults");
  v233._countAndFlagsBits = 0xD000000000000030;
  v233._object = (void *)0x800000010053D830;
  v234 = NSUserDefaults.internalString(forKey:)(v233);

  v235 = sub_1000134FC(v234.value._countAndFlagsBits, (uint64_t)v234.value._object);
  swift_bridgeObjectRelease(v234.value._object);
  ImageQualityCriteria.pdf417Detected.setter(v235);
  v236 = objc_msgSend(v3, "standardUserDefaults");
  v237._countAndFlagsBits = 0xD000000000000033;
  v237._object = (void *)0x800000010053D870;
  v238 = NSUserDefaults.internalString(forKey:)(v237);

  v239 = sub_1000134FC(v238.value._countAndFlagsBits, (uint64_t)v238.value._object);
  swift_bridgeObjectRelease(v238.value._object);
  ImageQualityCriteria.isAAMVACompliant.setter(v239);
  v240 = objc_msgSend(v3, "standardUserDefaults");
  v241._object = (void *)0x800000010053D8B0;
  v241._countAndFlagsBits = 0xD00000000000002BLL;
  v242 = NSUserDefaults.internalString(forKey:)(v241);

  if (v242.value._object)
    ImageQualityCriteria.issuerNumber.setter(v242.value._countAndFlagsBits, v242.value._object, v243);
}

uint64_t sub_10000F9A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  Swift::String v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  Swift::String v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  unsigned __int8 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  __n128 v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  Swift::String v168;
  unint64_t v169;
  unint64_t v170;
  id v171;
  Swift::String v172;
  unint64_t v173;
  unint64_t v174;
  id v175;
  Swift::String v176;
  unint64_t v177;
  unint64_t v178;
  id v179;
  Swift::String v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  Swift::String v186;
  Swift::Int value;
  Swift::Bool is_nil;
  id v189;
  Swift::String v190;
  Swift::Int v191;
  Swift::Bool v192;
  _BOOL8 v193;
  Swift::Int v194;
  Swift::Int v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  Swift::String v199;
  Swift::Int v200;
  Swift::Bool v201;
  id v202;
  Swift::String v203;
  Swift::Int v204;
  Swift::Bool v205;
  _BOOL8 v206;
  Swift::Int v207;
  Swift::Int v208;
  int v210;
  Swift::Int_optional v211;
  Swift::Int_optional v212;
  Swift::Int_optional v213;
  Swift::Int_optional v214;

  BYTE2(v210) = 2;
  LOWORD(v210) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v210,
    0,
    0,
    0,
    0);
  type metadata accessor for MetricsFlags(0);
  v1 = static MetricsFlags.blurriness.getter();
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4._object = (void *)0x800000010053D8E0;
  v4._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.selfie.check-issuer-num", v4);
  v6 = v5;

  if ((v6 & 0x100000000) != 0)
  {
    swift_release(v1);
  }
  else
  {
    v7 = objc_msgSend(v2, "standardUserDefaults");
    v8._object = (void *)0x800000010053D920;
    v8._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blurriness", v8);
    v10 = v9;
    swift_release(v1);

    if ((v10 & 0x100000000) == 0)
    {
      v11.n128_u32[0] = v6;
      if (*(float *)&v6 <= *(float *)&v10)
      {
        v12 = 0;
        goto LABEL_7;
      }
    }
  }
  LODWORD(v6) = 0;
  LODWORD(v10) = 0;
  v12 = 1;
LABEL_7:
  ImageQualityCriteria.minBlurriness.setter(v6 | ((unint64_t)v12 << 32), v11);
  v13 = ImageQualityCriteria.maxBlurriness.setter(v10 | ((unint64_t)v12 << 32));
  v14 = static MetricsFlags.exposure.getter(v13);
  v15 = objc_msgSend(v2, "standardUserDefaults");
  v16._object = (void *)0x800000010053D960;
  v16._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blurriness", v16);
  v18 = v17;

  if ((v18 & 0x100000000) != 0)
  {
    swift_release(v14);
    goto LABEL_12;
  }
  v19 = objc_msgSend(v2, "standardUserDefaults");
  v20._object = (void *)0x800000010053D990;
  v20._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-min-exposure", v20);
  v22 = v21;
  swift_release(v14);

  if ((v22 & 0x100000000) != 0)
  {
LABEL_12:
    LODWORD(v18) = 0;
    LODWORD(v22) = 0;
    v24 = 1;
    goto LABEL_13;
  }
  v23.n128_u32[0] = v18;
  if (*(float *)&v18 <= *(float *)&v22)
  {
    v24 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v22) = 0;
    v24 = 1;
  }
LABEL_13:
  ImageQualityCriteria.minExposure.setter(v18 | ((unint64_t)v24 << 32), v23);
  v25 = ImageQualityCriteria.maxExposure.setter(v22 | ((unint64_t)v24 << 32));
  v26 = static MetricsFlags.faceToImageRatio.getter(v25);
  v27 = objc_msgSend(v2, "standardUserDefaults");
  v28._object = (void *)0x800000010053D9C0;
  v28._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-max-exposure", v28);
  v30 = v29;

  if ((v30 & 0x100000000) != 0)
  {
    swift_release(v26);
    goto LABEL_18;
  }
  v31 = objc_msgSend(v2, "standardUserDefaults");
  v32._object = (void *)0x800000010053DA00;
  v32._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-to-image-ratio", v32);
  v34 = v33;
  swift_release(v26);

  if ((v34 & 0x100000000) != 0)
  {
LABEL_18:
    LODWORD(v30) = 0;
    LODWORD(v34) = 0;
    v36 = 1;
    goto LABEL_19;
  }
  v35.n128_u32[0] = v30;
  if (*(float *)&v30 <= *(float *)&v34)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v30) = 0;
    LODWORD(v34) = 0;
    v36 = 1;
  }
LABEL_19:
  ImageQualityCriteria.minFaceToImageRatio.setter(v30 | ((unint64_t)v36 << 32), v35);
  v37 = ImageQualityCriteria.maxFaceToImageRatio.setter(v34 | ((unint64_t)v36 << 32));
  v38 = static MetricsFlags.faceCenteredRatio.getter(v37);
  v39 = objc_msgSend(v2, "standardUserDefaults");
  v40._object = (void *)0x800000010053DA40;
  v40._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-to-image-ratio", v40);
  v42 = v41;

  if ((v42 & 0x100000000) != 0)
  {
    swift_release(v38);
    goto LABEL_24;
  }
  v43 = objc_msgSend(v2, "standardUserDefaults");
  v44._object = (void *)0x800000010053DA80;
  v44._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-centered-ratio", v44);
  v46 = v45;
  swift_release(v38);

  if ((v46 & 0x100000000) != 0)
  {
LABEL_24:
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
    goto LABEL_25;
  }
  v47.n128_u32[0] = v42;
  if (*(float *)&v42 <= *(float *)&v46)
  {
    v48 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
  }
LABEL_25:
  ImageQualityCriteria.minFaceCenteredRatio.setter(v42 | ((unint64_t)v48 << 32), v47);
  v49 = ImageQualityCriteria.maxFaceCenteredRatio.setter(v46 | ((unint64_t)v48 << 32));
  v50 = static MetricsFlags.headPitch.getter(v49);
  v51 = objc_msgSend(v2, "standardUserDefaults");
  v52._object = (void *)0x800000010053DAC0;
  v52._countAndFlagsBits = 0xD000000000000031;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-centered-ratio", v52);
  v54 = v53;

  if ((v54 & 0x100000000) != 0)
  {
    swift_release(v50);
  }
  else
  {
    v55 = objc_msgSend(v2, "standardUserDefaults");
    v56._object = (void *)0x800000010053DB00;
    v56._countAndFlagsBits = 0xD000000000000031;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-pitch", v56);
    v58 = v57;
    swift_release(v50);

    if ((v58 & 0x100000000) == 0)
    {
      v59.n128_u32[0] = v54;
      if (*(float *)&v54 <= *(float *)&v58)
      {
        v60 = 0;
        goto LABEL_31;
      }
    }
  }
  LODWORD(v54) = 0;
  LODWORD(v58) = 0;
  v60 = 1;
LABEL_31:
  ImageQualityCriteria.minHeadPitch.setter(v54 | ((unint64_t)v60 << 32), v59);
  v61 = ImageQualityCriteria.maxHeadPitch.setter(v58 | ((unint64_t)v60 << 32));
  v62 = static MetricsFlags.headRoll.getter(v61);
  v63 = objc_msgSend(v2, "standardUserDefaults");
  v64._object = (void *)0x800000010053DB40;
  v64._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-pitch", v64);
  v66 = v65;

  if ((v66 & 0x100000000) != 0)
  {
    swift_release(v62);
    goto LABEL_36;
  }
  v67 = objc_msgSend(v2, "standardUserDefaults");
  v68._object = (void *)0x800000010053DB80;
  v68._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-head-roll", v68);
  v70 = v69;
  swift_release(v62);

  if ((v70 & 0x100000000) != 0)
  {
LABEL_36:
    LODWORD(v66) = 0;
    LODWORD(v70) = 0;
    v72 = 1;
    goto LABEL_37;
  }
  v71.n128_u32[0] = v66;
  if (*(float *)&v66 <= *(float *)&v70)
  {
    v72 = 0;
  }
  else
  {
    LODWORD(v66) = 0;
    LODWORD(v70) = 0;
    v72 = 1;
  }
LABEL_37:
  ImageQualityCriteria.minHeadRoll.setter(v66 | ((unint64_t)v72 << 32), v71);
  v73 = ImageQualityCriteria.maxHeadRoll.setter(v70 | ((unint64_t)v72 << 32));
  v74 = static MetricsFlags.headYaw.getter(v73);
  v75 = objc_msgSend(v2, "standardUserDefaults");
  v76._object = (void *)0x800000010053DBC0;
  v76._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-head-roll", v76);
  v78 = v77;

  if ((v78 & 0x100000000) != 0)
  {
    swift_release(v74);
  }
  else
  {
    v79 = objc_msgSend(v2, "standardUserDefaults");
    v80._object = (void *)0x800000010053DBF0;
    v80._countAndFlagsBits = 0xD00000000000002FLL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-min-head-yaw", v80);
    v82 = v81;
    swift_release(v74);

    if ((v82 & 0x100000000) == 0)
    {
      v83.n128_u32[0] = v78;
      if (*(float *)&v78 <= *(float *)&v82)
      {
        v84 = 0;
        goto LABEL_43;
      }
    }
  }
  LODWORD(v78) = 0;
  LODWORD(v82) = 0;
  v84 = 1;
LABEL_43:
  ImageQualityCriteria.minHeadYaw.setter(v78 | ((unint64_t)v84 << 32), v83);
  v85 = ImageQualityCriteria.maxHeadYaw.setter(v82 | ((unint64_t)v84 << 32));
  v86 = static MetricsFlags.blinkingConfidence.getter(v85);
  v87 = objc_msgSend(v2, "standardUserDefaults");
  v88._object = (void *)0x800000010053DC20;
  v88._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-max-head-yaw", v88);
  v90 = v89;

  if ((v90 & 0x100000000) != 0)
  {
    swift_release(v86);
  }
  else
  {
    v91 = objc_msgSend(v2, "standardUserDefaults");
    v92._object = (void *)0x800000010053DC60;
    v92._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-blinking-confidence", v92);
    v94 = v93;
    swift_release(v86);

    if ((v94 & 0x100000000) == 0)
    {
      v95.n128_u32[0] = v90;
      if (*(float *)&v90 <= *(float *)&v94)
      {
        v96 = 0;
        goto LABEL_49;
      }
    }
  }
  LODWORD(v90) = 0;
  LODWORD(v94) = 0;
  v96 = 1;
LABEL_49:
  ImageQualityCriteria.minBlinkingConfidence.setter(v90 | ((unint64_t)v96 << 32), v95);
  v97 = ImageQualityCriteria.maxBlinkingConfidence.setter(v94 | ((unint64_t)v96 << 32));
  v98 = static MetricsFlags.prescriptionConfidence.getter(v97);
  v99 = objc_msgSend(v2, "standardUserDefaults");
  v100._object = (void *)0x800000010053DCA0;
  v100._countAndFlagsBits = 0xD00000000000003ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-blinking-confidence", v100);
  v102 = v101;

  if ((v102 & 0x100000000) != 0)
  {
    swift_release(v98);
LABEL_54:
    v109 = 0;
    v110 = 0;
    v108 = 1;
    goto LABEL_56;
  }
  v103 = objc_msgSend(v2, "standardUserDefaults");
  v104._object = (void *)0x800000010053DCE0;
  v104._countAndFlagsBits = 0xD00000000000003ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-prescription-confidence", v104);
  v106 = v105;
  swift_release(v98);

  if ((v106 & 0x100000000) == 0)
  {
    v107.n128_u32[0] = v102;
    if (*(float *)&v102 <= *(float *)&v106)
    {
      v108 = 0;
      v109 = v102;
      v110 = v106;
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  v109 = 0;
  v110 = 0;
  v108 = 1;
LABEL_56:
  ImageQualityCriteria.minPrescriptionConfidence.setter(v109 | ((unint64_t)v108 << 32), v107);
  v111 = ImageQualityCriteria.maxPrescriptionConfidence.setter(v110 | ((unint64_t)v108 << 32));
  v112 = static MetricsFlags.sunglassesConfidence.getter(v111);
  v113 = objc_msgSend(v2, "standardUserDefaults");
  v114._object = (void *)0x800000010053DD20;
  v114._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-prescription-confidence", v114);
  v116 = v115;

  if ((v116 & 0x100000000) != 0)
  {
    swift_release(v112);
LABEL_61:
    v123 = 0;
    v124 = 0;
    v122 = 1;
    goto LABEL_63;
  }
  v117 = objc_msgSend(v2, "standardUserDefaults");
  v118._object = (void *)0x800000010053DD60;
  v118._countAndFlagsBits = 0xD00000000000003CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-sunglasses-confidence", v118);
  v120 = v119;
  swift_release(v112);

  if ((v120 & 0x100000000) == 0)
  {
    v121.n128_u32[0] = v116;
    if (*(float *)&v116 <= *(float *)&v120)
    {
      v122 = 0;
      v123 = v116;
      v124 = v120;
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  v123 = 0;
  v124 = 0;
  v122 = 1;
LABEL_63:
  ImageQualityCriteria.minSunglassesConfidence.setter(v123 | ((unint64_t)v122 << 32), v121);
  v125 = ImageQualityCriteria.maxSunglassesConfidence.setter(v124 | ((unint64_t)v122 << 32));
  v126 = static MetricsFlags.facemaskConfidence.getter(v125);
  v127 = objc_msgSend(v2, "standardUserDefaults");
  v128._object = (void *)0x800000010053DDA0;
  v128._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-sunglasses-confidence", v128);
  v130 = v129;

  if ((v130 & 0x100000000) != 0)
  {
    swift_release(v126);
  }
  else
  {
    v131 = objc_msgSend(v2, "standardUserDefaults");
    v132._object = (void *)0x800000010053DDE0;
    v132._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-facemask-confidence", v132);
    v134 = v133;
    swift_release(v126);

    if ((v134 & 0x100000000) == 0)
    {
      v135.n128_u32[0] = v130;
      if (*(float *)&v130 <= *(float *)&v134)
      {
        v136 = 0;
        v137 = v130;
        v138 = v134;
        goto LABEL_69;
      }
    }
  }
  v137 = 0;
  v138 = 0;
  v136 = 1;
LABEL_69:
  ImageQualityCriteria.minFacemaskConfidence.setter(v137 | ((unint64_t)v136 << 32), v135);
  v139 = ImageQualityCriteria.maxFacemaskConfidence.setter(v138 | ((unint64_t)v136 << 32));
  v140 = static MetricsFlags.headgearConfidence.getter(v139);
  v141 = objc_msgSend(v2, "standardUserDefaults");
  v142._object = (void *)0x800000010053DE20;
  v142._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-facemask-confidence", v142);
  v144 = v143;

  if ((v144 & 0x100000000) != 0)
  {
    swift_release(v140);
  }
  else
  {
    v145 = objc_msgSend(v2, "standardUserDefaults");
    v146._object = (void *)0x800000010053DE60;
    v146._countAndFlagsBits = 0xD00000000000003ALL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-headgear-confidence", v146);
    v148 = v147;
    swift_release(v140);

    if ((v148 & 0x100000000) == 0)
    {
      v149.n128_u32[0] = v144;
      if (*(float *)&v144 <= *(float *)&v148)
      {
        v150 = 0;
        v151 = v144;
        v152 = v148;
        goto LABEL_75;
      }
    }
  }
  v151 = 0;
  v152 = 0;
  v150 = 1;
LABEL_75:
  ImageQualityCriteria.minHeadgearConfidence.setter(v151 | ((unint64_t)v150 << 32), v149);
  v153 = ImageQualityCriteria.maxHeadgearConfidence.setter(v152 | ((unint64_t)v150 << 32));
  v154 = static MetricsFlags.faceCaptureQuality.getter(v153);
  v155 = objc_msgSend(v2, "standardUserDefaults");
  v156._object = (void *)0x800000010053DEA0;
  v156._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-headgear-confidence", v156);
  v158 = v157;

  if ((v158 & 0x100000000) != 0)
  {
    swift_release(v154);
LABEL_80:
    v165 = 0;
    v166 = 0;
    v164 = 1;
    goto LABEL_82;
  }
  v159 = objc_msgSend(v2, "standardUserDefaults");
  v160._object = (void *)0x800000010053DEE0;
  v160._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-min-face-capture-quality", v160);
  v162 = v161;
  swift_release(v154);

  if ((v162 & 0x100000000) == 0)
  {
    v163.n128_u32[0] = v158;
    if (*(float *)&v158 <= *(float *)&v162)
    {
      v164 = 0;
      v165 = v158;
      v166 = v162;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  v165 = 0;
  v166 = 0;
  v164 = 1;
LABEL_82:
  ImageQualityCriteria.minFaceCaptureQuality.setter(v165 | ((unint64_t)v164 << 32), v163);
  ImageQualityCriteria.maxFaceCaptureQuality.setter(v166 | ((unint64_t)v164 << 32));
  v167 = objc_msgSend(v2, "standardUserDefaults");
  v168._object = (void *)0x800000010053DF20;
  v168._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ck-max-face-capture-quality", v168);
  v170 = v169;

  ImageQualityCriteria.maxLeftDrift.setter(v170 | ((HIDWORD(v170) & 1) << 32));
  v171 = objc_msgSend(v2, "standardUserDefaults");
  v172._countAndFlagsBits = 0xD00000000000002ELL;
  v172._object = (void *)0x800000010053DF50;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-left-drift", v172);
  v174 = v173;

  ImageQualityCriteria.maxRightDrift.setter(v174 | ((HIDWORD(v174) & 1) << 32));
  v175 = objc_msgSend(v2, "standardUserDefaults");
  v176._countAndFlagsBits = 0xD00000000000002BLL;
  v176._object = (void *)0x800000010053DF80;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-right-drift", v176);
  v178 = v177;

  ImageQualityCriteria.maxUpDrift.setter(v178 | ((HIDWORD(v178) & 1) << 32));
  v179 = objc_msgSend(v2, "standardUserDefaults");
  v180._object = (void *)0x800000010053DFB0;
  v180._countAndFlagsBits = 0xD00000000000002DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.liveness.check-up-drift", v180);
  v182 = v181;

  v183 = ImageQualityCriteria.maxDownDrift.setter(v182 | ((HIDWORD(v182) & 1) << 32));
  v184 = static MetricsFlags.numFaces.getter(v183);
  v185 = objc_msgSend(v2, "standardUserDefaults");
  v186._object = (void *)0x800000010053DFE0;
  v186._countAndFlagsBits = 0xD000000000000030;
  v211 = NSUserDefaults.internalInt(forKey:)(v186);
  value = v211.value;
  is_nil = v211.is_nil;

  if (is_nil)
  {
    swift_release(v184);
    v194 = 0;
    v195 = 0;
    v193 = 1;
  }
  else
  {
    v189 = objc_msgSend(v2, "standardUserDefaults");
    v190._object = (void *)0x800000010053E020;
    v190._countAndFlagsBits = 0xD000000000000030;
    v212 = NSUserDefaults.internalInt(forKey:)(v190);
    v191 = v212.value;
    v192 = v212.is_nil;
    swift_release(v184);

    if (v192)
    {
      v194 = 0;
      v195 = 0;
      v193 = 1;
    }
    else
    {
      v193 = v191 < value;
      if (v191 >= value)
        v194 = value;
      else
        v194 = 0;
      if (v191 >= value)
        v195 = v191;
      else
        v195 = 0;
    }
  }
  ImageQualityCriteria.minNumFaces.setter(v194, v193);
  v196 = ImageQualityCriteria.maxNumFaces.setter(v195, v193);
  v197 = static MetricsFlags.luxLevel.getter(v196);
  v198 = objc_msgSend(v2, "standardUserDefaults");
  v199._object = (void *)0x800000010053E060;
  v199._countAndFlagsBits = 0xD000000000000030;
  v213 = NSUserDefaults.internalInt(forKey:)(v199);
  v200 = v213.value;
  v201 = v213.is_nil;

  if (v201)
  {
    swift_release(v197);
    goto LABEL_101;
  }
  v202 = objc_msgSend(v2, "standardUserDefaults");
  v203._object = (void *)0x800000010053E0A0;
  v203._countAndFlagsBits = 0xD000000000000030;
  v214 = NSUserDefaults.internalInt(forKey:)(v203);
  v204 = v214.value;
  v205 = v214.is_nil;
  swift_release(v197);

  if (v205)
  {
LABEL_101:
    v207 = 0;
    v208 = 0;
    v206 = 1;
    goto LABEL_102;
  }
  v206 = v204 < v200;
  if (v204 >= v200)
    v207 = v200;
  else
    v207 = 0;
  if (v204 >= v200)
    v208 = v204;
  else
    v208 = 0;
LABEL_102:
  ImageQualityCriteria.minLuxLevel.setter(v207, v206);
  return ImageQualityCriteria.maxLuxLevel.setter(v208, v206);
}

uint64_t sub_100010C34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  Swift::String v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  Swift::String v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  Swift::String v146;
  uint64_t v147;
  uint64_t v148;
  __n128 v149;
  unsigned __int8 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  Swift::String v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  __n128 v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  Swift::String v168;
  unint64_t v169;
  unint64_t v170;
  id v171;
  Swift::String v172;
  unint64_t v173;
  unint64_t v174;
  id v175;
  Swift::String v176;
  unint64_t v177;
  unint64_t v178;
  id v179;
  Swift::String v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  Swift::String v186;
  Swift::Int value;
  Swift::Bool is_nil;
  id v189;
  Swift::String v190;
  Swift::Int v191;
  Swift::Bool v192;
  _BOOL8 v193;
  Swift::Int v194;
  Swift::Int v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  Swift::String v199;
  Swift::Int v200;
  Swift::Bool v201;
  id v202;
  Swift::String v203;
  Swift::Int v204;
  Swift::Bool v205;
  _BOOL8 v206;
  Swift::Int v207;
  Swift::Int v208;
  int v210;
  Swift::Int_optional v211;
  Swift::Int_optional v212;
  Swift::Int_optional v213;
  Swift::Int_optional v214;

  BYTE2(v210) = 2;
  LOWORD(v210) = 513;
  ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)(a1, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000, 0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0x100000000,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    v210,
    0,
    0,
    0,
    0);
  type metadata accessor for MetricsFlags(0);
  v1 = static MetricsFlags.blurriness.getter();
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4._object = (void *)0x800000010053E290;
  v4._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"internalComplexSignal", v4);
  v6 = v5;

  if ((v6 & 0x100000000) != 0)
  {
    swift_release(v1);
  }
  else
  {
    v7 = objc_msgSend(v2, "standardUserDefaults");
    v8._object = (void *)0x800000010053E2D0;
    v8._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blurriness", v8);
    v10 = v9;
    swift_release(v1);

    if ((v10 & 0x100000000) == 0)
    {
      v11.n128_u32[0] = v6;
      if (*(float *)&v6 <= *(float *)&v10)
      {
        v12 = 0;
        goto LABEL_7;
      }
    }
  }
  LODWORD(v6) = 0;
  LODWORD(v10) = 0;
  v12 = 1;
LABEL_7:
  ImageQualityCriteria.minBlurriness.setter(v6 | ((unint64_t)v12 << 32), v11);
  v13 = ImageQualityCriteria.maxBlurriness.setter(v10 | ((unint64_t)v12 << 32));
  v14 = static MetricsFlags.exposure.getter(v13);
  v15 = objc_msgSend(v2, "standardUserDefaults");
  v16._object = (void *)0x800000010053E310;
  v16._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blurriness", v16);
  v18 = v17;

  if ((v18 & 0x100000000) != 0)
  {
    swift_release(v14);
    goto LABEL_12;
  }
  v19 = objc_msgSend(v2, "standardUserDefaults");
  v20._object = (void *)0x800000010053E340;
  v20._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-exposure", v20);
  v22 = v21;
  swift_release(v14);

  if ((v22 & 0x100000000) != 0)
  {
LABEL_12:
    LODWORD(v18) = 0;
    LODWORD(v22) = 0;
    v24 = 1;
    goto LABEL_13;
  }
  v23.n128_u32[0] = v18;
  if (*(float *)&v18 <= *(float *)&v22)
  {
    v24 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    LODWORD(v22) = 0;
    v24 = 1;
  }
LABEL_13:
  ImageQualityCriteria.minExposure.setter(v18 | ((unint64_t)v24 << 32), v23);
  v25 = ImageQualityCriteria.maxExposure.setter(v22 | ((unint64_t)v24 << 32));
  v26 = static MetricsFlags.faceToImageRatio.getter(v25);
  v27 = objc_msgSend(v2, "standardUserDefaults");
  v28._object = (void *)0x800000010053E370;
  v28._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-exposure", v28);
  v30 = v29;

  if ((v30 & 0x100000000) != 0)
  {
    swift_release(v26);
    goto LABEL_18;
  }
  v31 = objc_msgSend(v2, "standardUserDefaults");
  v32._object = (void *)0x800000010053E3B0;
  v32._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-to-image-ratio", v32);
  v34 = v33;
  swift_release(v26);

  if ((v34 & 0x100000000) != 0)
  {
LABEL_18:
    LODWORD(v30) = 0;
    LODWORD(v34) = 0;
    v36 = 1;
    goto LABEL_19;
  }
  v35.n128_u32[0] = v30;
  if (*(float *)&v30 <= *(float *)&v34)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v30) = 0;
    LODWORD(v34) = 0;
    v36 = 1;
  }
LABEL_19:
  ImageQualityCriteria.minFaceToImageRatio.setter(v30 | ((unint64_t)v36 << 32), v35);
  v37 = ImageQualityCriteria.maxFaceToImageRatio.setter(v34 | ((unint64_t)v36 << 32));
  v38 = static MetricsFlags.faceCenteredRatio.getter(v37);
  v39 = objc_msgSend(v2, "standardUserDefaults");
  v40._object = (void *)0x800000010053E3F0;
  v40._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-to-image-ratio", v40);
  v42 = v41;

  if ((v42 & 0x100000000) != 0)
  {
    swift_release(v38);
    goto LABEL_24;
  }
  v43 = objc_msgSend(v2, "standardUserDefaults");
  v44._object = (void *)0x800000010053E430;
  v44._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-centered-ratio", v44);
  v46 = v45;
  swift_release(v38);

  if ((v46 & 0x100000000) != 0)
  {
LABEL_24:
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
    goto LABEL_25;
  }
  v47.n128_u32[0] = v42;
  if (*(float *)&v42 <= *(float *)&v46)
  {
    v48 = 0;
  }
  else
  {
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
    v48 = 1;
  }
LABEL_25:
  ImageQualityCriteria.minFaceCenteredRatio.setter(v42 | ((unint64_t)v48 << 32), v47);
  v49 = ImageQualityCriteria.maxFaceCenteredRatio.setter(v46 | ((unint64_t)v48 << 32));
  v50 = static MetricsFlags.headPitch.getter(v49);
  v51 = objc_msgSend(v2, "standardUserDefaults");
  v52._object = (void *)0x800000010053E470;
  v52._countAndFlagsBits = 0xD000000000000030;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-centered-ratio", v52);
  v54 = v53;

  if ((v54 & 0x100000000) != 0)
  {
    swift_release(v50);
  }
  else
  {
    v55 = objc_msgSend(v2, "standardUserDefaults");
    v56._object = (void *)0x800000010053E4B0;
    v56._countAndFlagsBits = 0xD000000000000030;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-head-pitch", v56);
    v58 = v57;
    swift_release(v50);

    if ((v58 & 0x100000000) == 0)
    {
      v59.n128_u32[0] = v54;
      if (*(float *)&v54 <= *(float *)&v58)
      {
        v60 = 0;
        goto LABEL_31;
      }
    }
  }
  LODWORD(v54) = 0;
  LODWORD(v58) = 0;
  v60 = 1;
LABEL_31:
  ImageQualityCriteria.minHeadPitch.setter(v54 | ((unint64_t)v60 << 32), v59);
  v61 = ImageQualityCriteria.maxHeadPitch.setter(v58 | ((unint64_t)v60 << 32));
  v62 = static MetricsFlags.headRoll.getter(v61);
  v63 = objc_msgSend(v2, "standardUserDefaults");
  v64._object = (void *)0x800000010053E4F0;
  v64._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-head-pitch", v64);
  v66 = v65;

  if ((v66 & 0x100000000) != 0)
  {
    swift_release(v62);
    goto LABEL_36;
  }
  v67 = objc_msgSend(v2, "standardUserDefaults");
  v68._object = (void *)0x800000010053E520;
  v68._countAndFlagsBits = 0xD00000000000002FLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-head-roll", v68);
  v70 = v69;
  swift_release(v62);

  if ((v70 & 0x100000000) != 0)
  {
LABEL_36:
    LODWORD(v66) = 0;
    LODWORD(v70) = 0;
    v72 = 1;
    goto LABEL_37;
  }
  v71.n128_u32[0] = v66;
  if (*(float *)&v66 <= *(float *)&v70)
  {
    v72 = 0;
  }
  else
  {
    LODWORD(v66) = 0;
    LODWORD(v70) = 0;
    v72 = 1;
  }
LABEL_37:
  ImageQualityCriteria.minHeadRoll.setter(v66 | ((unint64_t)v72 << 32), v71);
  v73 = ImageQualityCriteria.maxHeadRoll.setter(v70 | ((unint64_t)v72 << 32));
  v74 = static MetricsFlags.headYaw.getter(v73);
  v75 = objc_msgSend(v2, "standardUserDefaults");
  v76._object = (void *)0x800000010053E550;
  v76._countAndFlagsBits = 0xD00000000000002ELL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-head-roll", v76);
  v78 = v77;

  if ((v78 & 0x100000000) != 0)
  {
    swift_release(v74);
  }
  else
  {
    v79 = objc_msgSend(v2, "standardUserDefaults");
    v80._object = (void *)0x800000010053E580;
    v80._countAndFlagsBits = 0xD00000000000002ELL;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-min-head-yaw", v80);
    v82 = v81;
    swift_release(v74);

    if ((v82 & 0x100000000) == 0)
    {
      v83.n128_u32[0] = v78;
      if (*(float *)&v78 <= *(float *)&v82)
      {
        v84 = 0;
        goto LABEL_43;
      }
    }
  }
  LODWORD(v78) = 0;
  LODWORD(v82) = 0;
  v84 = 1;
LABEL_43:
  ImageQualityCriteria.minHeadYaw.setter(v78 | ((unint64_t)v84 << 32), v83);
  v85 = ImageQualityCriteria.maxHeadYaw.setter(v82 | ((unint64_t)v84 << 32));
  v86 = static MetricsFlags.blinkingConfidence.getter(v85);
  v87 = objc_msgSend(v2, "standardUserDefaults");
  v88._object = (void *)0x800000010053E5B0;
  v88._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-max-head-yaw", v88);
  v90 = v89;

  if ((v90 & 0x100000000) != 0)
  {
    swift_release(v86);
  }
  else
  {
    v91 = objc_msgSend(v2, "standardUserDefaults");
    v92._object = (void *)0x800000010053E5F0;
    v92._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-blinking-confidence", v92);
    v94 = v93;
    swift_release(v86);

    if ((v94 & 0x100000000) == 0)
    {
      v95.n128_u32[0] = v90;
      if (*(float *)&v90 <= *(float *)&v94)
      {
        v96 = 0;
        goto LABEL_49;
      }
    }
  }
  LODWORD(v90) = 0;
  LODWORD(v94) = 0;
  v96 = 1;
LABEL_49:
  ImageQualityCriteria.minBlinkingConfidence.setter(v90 | ((unint64_t)v96 << 32), v95);
  v97 = ImageQualityCriteria.maxBlinkingConfidence.setter(v94 | ((unint64_t)v96 << 32));
  v98 = static MetricsFlags.prescriptionConfidence.getter(v97);
  v99 = objc_msgSend(v2, "standardUserDefaults");
  v100._object = (void *)0x800000010053E630;
  v100._countAndFlagsBits = 0xD00000000000003DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-blinking-confidence", v100);
  v102 = v101;

  if ((v102 & 0x100000000) != 0)
  {
    swift_release(v98);
LABEL_54:
    v109 = 0;
    v110 = 0;
    v108 = 1;
    goto LABEL_56;
  }
  v103 = objc_msgSend(v2, "standardUserDefaults");
  v104._object = (void *)0x800000010053E670;
  v104._countAndFlagsBits = 0xD00000000000003DLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-prescription-confidence", v104);
  v106 = v105;
  swift_release(v98);

  if ((v106 & 0x100000000) == 0)
  {
    v107.n128_u32[0] = v102;
    if (*(float *)&v102 <= *(float *)&v106)
    {
      v108 = 0;
      v109 = v102;
      v110 = v106;
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  v109 = 0;
  v110 = 0;
  v108 = 1;
LABEL_56:
  ImageQualityCriteria.minPrescriptionConfidence.setter(v109 | ((unint64_t)v108 << 32), v107);
  v111 = ImageQualityCriteria.maxPrescriptionConfidence.setter(v110 | ((unint64_t)v108 << 32));
  v112 = static MetricsFlags.sunglassesConfidence.getter(v111);
  v113 = objc_msgSend(v2, "standardUserDefaults");
  v114._object = (void *)0x800000010053E6B0;
  v114._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-prescription-confidence", v114);
  v116 = v115;

  if ((v116 & 0x100000000) != 0)
  {
    swift_release(v112);
LABEL_61:
    v123 = 0;
    v124 = 0;
    v122 = 1;
    goto LABEL_63;
  }
  v117 = objc_msgSend(v2, "standardUserDefaults");
  v118._object = (void *)0x800000010053E6F0;
  v118._countAndFlagsBits = 0xD00000000000003BLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-sunglasses-confidence", v118);
  v120 = v119;
  swift_release(v112);

  if ((v120 & 0x100000000) == 0)
  {
    v121.n128_u32[0] = v116;
    if (*(float *)&v116 <= *(float *)&v120)
    {
      v122 = 0;
      v123 = v116;
      v124 = v120;
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  v123 = 0;
  v124 = 0;
  v122 = 1;
LABEL_63:
  ImageQualityCriteria.minSunglassesConfidence.setter(v123 | ((unint64_t)v122 << 32), v121);
  v125 = ImageQualityCriteria.maxSunglassesConfidence.setter(v124 | ((unint64_t)v122 << 32));
  v126 = static MetricsFlags.facemaskConfidence.getter(v125);
  v127 = objc_msgSend(v2, "standardUserDefaults");
  v128._object = (void *)0x800000010053E730;
  v128._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-sunglasses-confidence", v128);
  v130 = v129;

  if ((v130 & 0x100000000) != 0)
  {
    swift_release(v126);
  }
  else
  {
    v131 = objc_msgSend(v2, "standardUserDefaults");
    v132._object = (void *)0x800000010053E770;
    v132._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-facemask-confidence", v132);
    v134 = v133;
    swift_release(v126);

    if ((v134 & 0x100000000) == 0)
    {
      v135.n128_u32[0] = v130;
      if (*(float *)&v130 <= *(float *)&v134)
      {
        v136 = 0;
        v137 = v130;
        v138 = v134;
        goto LABEL_69;
      }
    }
  }
  v137 = 0;
  v138 = 0;
  v136 = 1;
LABEL_69:
  ImageQualityCriteria.minFacemaskConfidence.setter(v137 | ((unint64_t)v136 << 32), v135);
  v139 = ImageQualityCriteria.maxFacemaskConfidence.setter(v138 | ((unint64_t)v136 << 32));
  v140 = static MetricsFlags.headgearConfidence.getter(v139);
  v141 = objc_msgSend(v2, "standardUserDefaults");
  v142._object = (void *)0x800000010053E7B0;
  v142._countAndFlagsBits = 0xD000000000000039;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-facemask-confidence", v142);
  v144 = v143;

  if ((v144 & 0x100000000) != 0)
  {
    swift_release(v140);
  }
  else
  {
    v145 = objc_msgSend(v2, "standardUserDefaults");
    v146._object = (void *)0x800000010053E7F0;
    v146._countAndFlagsBits = 0xD000000000000039;
    NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-headgear-confidence", v146);
    v148 = v147;
    swift_release(v140);

    if ((v148 & 0x100000000) == 0)
    {
      v149.n128_u32[0] = v144;
      if (*(float *)&v144 <= *(float *)&v148)
      {
        v150 = 0;
        v151 = v144;
        v152 = v148;
        goto LABEL_75;
      }
    }
  }
  v151 = 0;
  v152 = 0;
  v150 = 1;
LABEL_75:
  ImageQualityCriteria.minHeadgearConfidence.setter(v151 | ((unint64_t)v150 << 32), v149);
  v153 = ImageQualityCriteria.maxHeadgearConfidence.setter(v152 | ((unint64_t)v150 << 32));
  v154 = static MetricsFlags.faceCaptureQuality.getter(v153);
  v155 = objc_msgSend(v2, "standardUserDefaults");
  v156._object = (void *)0x800000010053E830;
  v156._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-headgear-confidence", v156);
  v158 = v157;

  if ((v158 & 0x100000000) != 0)
  {
    swift_release(v154);
LABEL_80:
    v165 = 0;
    v166 = 0;
    v164 = 1;
    goto LABEL_82;
  }
  v159 = objc_msgSend(v2, "standardUserDefaults");
  v160._object = (void *)0x800000010053E870;
  v160._countAndFlagsBits = 0xD00000000000003ALL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-min-face-capture-quality", v160);
  v162 = v161;
  swift_release(v154);

  if ((v162 & 0x100000000) == 0)
  {
    v163.n128_u32[0] = v158;
    if (*(float *)&v158 <= *(float *)&v162)
    {
      v164 = 0;
      v165 = v158;
      v166 = v162;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  v165 = 0;
  v166 = 0;
  v164 = 1;
LABEL_82:
  ImageQualityCriteria.minFaceCaptureQuality.setter(v165 | ((unint64_t)v164 << 32), v163);
  ImageQualityCriteria.maxFaceCaptureQuality.setter(v166 | ((unint64_t)v164 << 32));
  v167 = objc_msgSend(v2, "standardUserDefaults");
  v168._object = (void *)0x800000010053E8B0;
  v168._countAndFlagsBits = 0xD00000000000002CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"k-max-face-capture-quality", v168);
  v170 = v169;

  ImageQualityCriteria.maxLeftDrift.setter(v170 | ((HIDWORD(v170) & 1) << 32));
  v171 = objc_msgSend(v2, "standardUserDefaults");
  v172._countAndFlagsBits = 0xD00000000000002DLL;
  v172._object = (void *)0x800000010053E8E0;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-left-drift", v172);
  v174 = v173;

  ImageQualityCriteria.maxRightDrift.setter(v174 | ((HIDWORD(v174) & 1) << 32));
  v175 = objc_msgSend(v2, "standardUserDefaults");
  v176._countAndFlagsBits = 0xD00000000000002ALL;
  v176._object = (void *)0x800000010053E910;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-right-drift", v176);
  v178 = v177;

  ImageQualityCriteria.maxUpDrift.setter(v178 | ((HIDWORD(v178) & 1) << 32));
  v179 = objc_msgSend(v2, "standardUserDefaults");
  v180._object = (void *)0x800000010053E940;
  v180._countAndFlagsBits = 0xD00000000000002CLL;
  NSUserDefaults.internalFloat(forKey:)((Swift::Float_optional *)"ity.passive.check-up-drift", v180);
  v182 = v181;

  v183 = ImageQualityCriteria.maxDownDrift.setter(v182 | ((HIDWORD(v182) & 1) << 32));
  v184 = static MetricsFlags.numFaces.getter(v183);
  v185 = objc_msgSend(v2, "standardUserDefaults");
  v186._object = (void *)0x800000010053E970;
  v186._countAndFlagsBits = 0xD00000000000002FLL;
  v211 = NSUserDefaults.internalInt(forKey:)(v186);
  value = v211.value;
  is_nil = v211.is_nil;

  if (is_nil)
  {
    swift_release(v184);
    v194 = 0;
    v195 = 0;
    v193 = 1;
  }
  else
  {
    v189 = objc_msgSend(v2, "standardUserDefaults");
    v190._object = (void *)0x800000010053E9A0;
    v190._countAndFlagsBits = 0xD00000000000002FLL;
    v212 = NSUserDefaults.internalInt(forKey:)(v190);
    v191 = v212.value;
    v192 = v212.is_nil;
    swift_release(v184);

    if (v192)
    {
      v194 = 0;
      v195 = 0;
      v193 = 1;
    }
    else
    {
      v193 = v191 < value;
      if (v191 >= value)
        v194 = value;
      else
        v194 = 0;
      if (v191 >= value)
        v195 = v191;
      else
        v195 = 0;
    }
  }
  ImageQualityCriteria.minNumFaces.setter(v194, v193);
  v196 = ImageQualityCriteria.maxNumFaces.setter(v195, v193);
  v197 = static MetricsFlags.luxLevel.getter(v196);
  v198 = objc_msgSend(v2, "standardUserDefaults");
  v199._object = (void *)0x800000010053E9D0;
  v199._countAndFlagsBits = 0xD00000000000002FLL;
  v213 = NSUserDefaults.internalInt(forKey:)(v199);
  v200 = v213.value;
  v201 = v213.is_nil;

  if (v201)
  {
    swift_release(v197);
    goto LABEL_101;
  }
  v202 = objc_msgSend(v2, "standardUserDefaults");
  v203._object = (void *)0x800000010053EA00;
  v203._countAndFlagsBits = 0xD00000000000002FLL;
  v214 = NSUserDefaults.internalInt(forKey:)(v203);
  v204 = v214.value;
  v205 = v214.is_nil;
  swift_release(v197);

  if (v205)
  {
LABEL_101:
    v207 = 0;
    v208 = 0;
    v206 = 1;
    goto LABEL_102;
  }
  v206 = v204 < v200;
  if (v204 >= v200)
    v207 = v200;
  else
    v207 = 0;
  if (v204 >= v200)
    v208 = v204;
  else
    v208 = 0;
LABEL_102:
  ImageQualityCriteria.minLuxLevel.setter(v207, v206);
  return ImageQualityCriteria.maxLuxLevel.setter(v208, v206);
}

uint64_t sub_100011EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v43 = a3;
  v5 = type metadata accessor for IQACode(0);
  v41 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v42 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100004828(&qword_10062FCB8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = type metadata accessor for IQSignal(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v37 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v40 = (char *)&v36 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v36 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v36 - v22;
  v38 = a1;
  v39 = a2;
  sub_10001243C(0xD000000000000029, (void *)0x800000010053E150, 0xD000000000000028, (void *)0x800000010053E180, 0xD000000000000027, (void *)0x800000010053E1B0, (uint64_t)v12);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v24(v12, 1, v13) == 1)
  {
    sub_100008030((uint64_t)v12, &qword_10062FCB8);
    v25 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    v36 = v5;
    v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v23, v12, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v21, v23, v13);
    v25 = (char *)sub_1000E1FE8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
      v25 = (char *)sub_1000E1FE8(v27 > 1, v28 + 1, 1, (unint64_t)v25);
    *((_QWORD *)v25 + 2) = v28 + 1;
    v26(&v25[((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v28], v21, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
    v5 = v36;
  }
  sub_10001243C(0xD000000000000029, (void *)0x800000010053E1E0, 0xD000000000000028, (void *)0x800000010053E210, 0xD000000000000027, (void *)0x800000010053E240, (uint64_t)v10);
  if (v24(v10, 1, v13) == 1)
  {
    sub_100008030((uint64_t)v10, &qword_10062FCB8);
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v30 = v40;
    v29(v40, v10, v13);
    v31 = v37;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v37, v30, v13);
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      v25 = (char *)sub_1000E1FE8(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
    v33 = *((_QWORD *)v25 + 2);
    v32 = *((_QWORD *)v25 + 3);
    if (v33 >= v32 >> 1)
      v25 = (char *)sub_1000E1FE8(v32 > 1, v33 + 1, 1, (unint64_t)v25);
    *((_QWORD *)v25 + 2) = v33 + 1;
    v29(&v25[((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v33], v31, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v13);
  }
  v34 = v42;
  *v42 = 0xD000000000000015;
  v34[1] = 0x800000010053E270;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v41 + 104))(v34, enum case for IQACode.complex(_:), v5);
  return IQComplexSignal.init(identifier:priority:signals:)(v34, 0, v25);
}

BOOL sub_100012324(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2;
  v12 = a2;
  v10 = *v2;
  v5 = type metadata accessor for MetricsFlags(0);
  v6 = sub_100004790(&qword_10062FCA8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
  swift_retain(v10);
  dispatch thunk of SetAlgebra.intersection(_:)(&v11, &v12, v5, v6);
  v7 = sub_100004790(&qword_10062FCB0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
  v8 = dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, v5, v7);
  if ((v8 & 1) != 0)
  {
    v3 = v11;
  }
  else
  {
    swift_release(v11);
    v10 = v3;
    swift_retain_n(v3, 2);
    dispatch thunk of SetAlgebra.formUnion(_:)(&v10, v5, v6);
  }
  *a1 = v3;
  return (v8 & 1) == 0;
}

uint64_t sub_10001243C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String_optional v29;
  id v30;
  Swift::String_optional v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::Float_optional *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;

  v48._countAndFlagsBits = a5;
  v48._object = a6;
  v51._countAndFlagsBits = a3;
  v51._object = a4;
  v52 = a7;
  v9 = type metadata accessor for IQComparator(0);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v10 = __chkstk_darwin(v9);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v45 - v15;
  v17 = type metadata accessor for IQCType(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v46 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v45 - v22);
  __chkstk_darwin(v21);
  v25 = (char *)&v45 - v24;
  v26 = (void *)objc_opt_self(NSUserDefaults);
  v27 = objc_msgSend(v26, "standardUserDefaults");
  v28._countAndFlagsBits = a1;
  v28._object = a2;
  v29 = NSUserDefaults.internalString(forKey:)(v28);

  if (v29.value._object)
  {
    sub_1003F561C(v29.value._countAndFlagsBits, v29.value._object, v23);
    swift_bridgeObjectRelease(v29.value._object);
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))(v25, v23, v17);
    v30 = objc_msgSend(v26, "standardUserDefaults");
    v31 = NSUserDefaults.internalString(forKey:)(v51);

    if (v31.value._object)
    {
      sub_1003F61B4(v31.value._countAndFlagsBits, v31.value._object, (uint64_t)v14);
      swift_bridgeObjectRelease(v31.value._object);
      v33 = v49;
      v32 = v50;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v16, v14, v50);
      v34 = objc_msgSend(v26, "standardUserDefaults");
      NSUserDefaults.internalFloat(forKey:)(v35, v48);
      v37 = v36;

      if ((v37 & 0x100000000) == 0)
      {
        v38 = *(float *)&v37;
        v39 = v46;
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v25, v17);
        v40 = v47;
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v47, v16, v32);
        v41 = v52;
        IQSignal.init(type:comparator:threshold:)(v39, v40, v38);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v32);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
        v42 = type metadata accessor for IQSignal(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 0, 1, v42);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v32);
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  }
  v44 = type metadata accessor for IQSignal(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v52, 1, 1, v44);
}

uint64_t sub_100012758(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1000E1FFC(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for IQCType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  return sub_100008030(a3, &qword_10062FC88);
}

char *sub_10001292C(uint64_t a1, int64_t a2, _OWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  _OWORD *v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1000E2498(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = &v5[14 * a1 + 4];
  result = (char *)swift_arrayDestroy(v14, v8, &type metadata for Page);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 7);
    v19 = (char *)&v5[14 * a2 + 4];
    if (v14 + 7 != (_OWORD *)v19 || result >= &v19[112 * v18])
      result = (char *)memmove(result, v19, 112 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = a3[5];
      v14[4] = a3[4];
      v14[5] = v22;
      v14[6] = a3[6];
      v23 = a3[1];
      *v14 = *a3;
      v14[1] = v23;
      v24 = a3[3];
      v14[2] = a3[2];
      v14[3] = v24;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v25 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v25, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100012AD0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_100012B24@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_100012B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v69;

  v0 = sub_100004828(&qword_10062FCC0);
  v1 = type metadata accessor for IQCType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v69 = swift_allocObject(v0, v5 + 26 * v3, v4 | 7);
  *(_OWORD *)(v69 + 16) = xmmword_10051FFC0;
  v6 = v69 + v5;
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v7(v6, enum case for IQCType.pdf417Detected(_:), v1);
  v7(v6 + v3, enum case for IQCType.isAAMVACompliant(_:), v1);
  v7(v6 + 2 * v3, enum case for IQCType.issuerNumber(_:), v1);
  v7(v6 + 3 * v3, enum case for IQCType.blurriness(_:), v1);
  v7(v6 + 4 * v3, enum case for IQCType.exposure(_:), v1);
  v7(v6 + 5 * v3, enum case for IQCType.documentSize(_:), v1);
  v7(v6 + 6 * v3, enum case for IQCType.documentRotation(_:), v1);
  v7(v6 + 7 * v3, enum case for IQCType.documentSkew(_:), v1);
  v7(v6 + 8 * v3, enum case for IQCType.numFaces(_:), v1);
  v7(v6 + 9 * v3, enum case for IQCType.luxLevel(_:), v1);
  v7(v6 + 10 * v3, enum case for IQCType.faceCenteredRatio(_:), v1);
  v7(v6 + 11 * v3, enum case for IQCType.faceToImageRatio(_:), v1);
  v7(v6 + 12 * v3, enum case for IQCType.leftDrift(_:), v1);
  v7(v6 + 13 * v3, enum case for IQCType.rightDrift(_:), v1);
  v7(v6 + 14 * v3, enum case for IQCType.upDrift(_:), v1);
  v7(v6 + 15 * v3, enum case for IQCType.downDrift(_:), v1);
  v7(v6 + 16 * v3, enum case for IQCType.facemaskConfidence(_:), v1);
  v7(v6 + 17 * v3, enum case for IQCType.headgearConfidence(_:), v1);
  v7(v6 + 18 * v3, enum case for IQCType.sunglassesConfidence(_:), v1);
  v7(v6 + 19 * v3, enum case for IQCType.prescriptionConfidence(_:), v1);
  v7(v6 + 20 * v3, enum case for IQCType.blinkingConfidence(_:), v1);
  v7(v6 + 21 * v3, enum case for IQCType.faceCaptureQuality(_:), v1);
  v7(v6 + 22 * v3, enum case for IQCType.headPitch(_:), v1);
  v7(v6 + 23 * v3, enum case for IQCType.headRoll(_:), v1);
  v7(v6 + 24 * v3, enum case for IQCType.headYaw(_:), v1);
  v7(v6 + 25 * v3, enum case for IQCType.cardDistortion(_:), v1);
  v8 = sub_100004828(&qword_10062FCC8);
  v9 = sub_100004828(&qword_10062FCD0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v8, v13 + 25 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_10051FFD0;
  v15 = (_QWORD *)(v14 + v13);
  v16 = v14 + v13 + *(int *)(v9 + 48);
  *v15 = 0xD000000000000031;
  v15[1] = 0x800000010053EA60;
  v17 = enum case for IQACode.blurrinessHigh(_:);
  v18 = type metadata accessor for IQACode(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104);
  v19(v16, v17, v18);
  v20 = (_QWORD *)(v14 + v13 + v11);
  v21 = (char *)v20 + *(int *)(v9 + 48);
  *v20 = 0xD00000000000002ELL;
  v20[1] = 0x800000010053EAA0;
  v19((uint64_t)v21, enum case for IQACode.exposureLow(_:), v18);
  v22 = (_QWORD *)(v14 + v13 + 2 * v11);
  v23 = (char *)v22 + *(int *)(v9 + 48);
  *v22 = 0xD00000000000002FLL;
  v22[1] = 0x800000010053EAD0;
  v19((uint64_t)v23, enum case for IQACode.exposureHigh(_:), v18);
  v24 = (_QWORD *)(v14 + v13 + 3 * v11);
  v25 = (char *)v24 + *(int *)(v9 + 48);
  *v24 = 0xD000000000000036;
  v24[1] = 0x800000010053EB00;
  v19((uint64_t)v25, enum case for IQACode.faceToImageRatioLow(_:), v18);
  v26 = (_QWORD *)(v14 + v13 + 4 * v11);
  v27 = (char *)v26 + *(int *)(v9 + 48);
  *v26 = 0xD000000000000037;
  v26[1] = 0x800000010053EB40;
  v19((uint64_t)v27, enum case for IQACode.faceToImageRatioHigh(_:), v18);
  v28 = (_QWORD *)(v14 + v13 + 5 * v11);
  v29 = (char *)v28 + *(int *)(v9 + 48);
  *v28 = 0xD00000000000002FLL;
  v28[1] = 0x800000010053EB80;
  v19((uint64_t)v29, enum case for IQACode.headPitchLow(_:), v18);
  v30 = (_QWORD *)(v14 + v13 + 6 * v11);
  v31 = (char *)v30 + *(int *)(v9 + 48);
  *v30 = 0xD000000000000030;
  v30[1] = 0x800000010053EBB0;
  v19((uint64_t)v31, enum case for IQACode.headPitchHigh(_:), v18);
  v32 = (_QWORD *)(v14 + v13 + 7 * v11);
  v33 = (char *)v32 + *(int *)(v9 + 48);
  *v32 = 0xD00000000000002ELL;
  v32[1] = 0x800000010053EBF0;
  v19((uint64_t)v33, enum case for IQACode.headRollLow(_:), v18);
  v34 = (_QWORD *)(v14 + v13 + 8 * v11);
  v35 = (char *)v34 + *(int *)(v9 + 48);
  *v34 = 0xD00000000000002FLL;
  v34[1] = 0x800000010053EC20;
  v19((uint64_t)v35, enum case for IQACode.headRollHigh(_:), v18);
  v36 = (_QWORD *)(v14 + v13 + 9 * v11);
  v37 = (char *)v36 + *(int *)(v9 + 48);
  *v36 = 0xD00000000000002DLL;
  v36[1] = 0x800000010053EC50;
  v19((uint64_t)v37, enum case for IQACode.headYawLow(_:), v18);
  v38 = (_QWORD *)(v14 + v13 + 10 * v11);
  v39 = (char *)v38 + *(int *)(v9 + 48);
  *v38 = 0xD00000000000002ELL;
  v38[1] = 0x800000010053EC80;
  v19((uint64_t)v39, enum case for IQACode.headYawHigh(_:), v18);
  v40 = (_QWORD *)(v14 + v13 + 11 * v11);
  v41 = (char *)v40 + *(int *)(v9 + 48);
  *v40 = 0xD000000000000039;
  v40[1] = 0x800000010053ECB0;
  v19((uint64_t)v41, enum case for IQACode.blinkingConfidenceHigh(_:), v18);
  v42 = (_QWORD *)(v14 + v13 + 12 * v11);
  v43 = (char *)v42 + *(int *)(v9 + 48);
  *v42 = 0xD00000000000003DLL;
  v42[1] = 0x800000010053ECF0;
  v19((uint64_t)v43, enum case for IQACode.prescriptionConfidenceHigh(_:), v18);
  v44 = (_QWORD *)(v14 + v13 + 13 * v11);
  v45 = (char *)v44 + *(int *)(v9 + 48);
  *v44 = 0xD00000000000003BLL;
  v44[1] = 0x800000010053ED30;
  v19((uint64_t)v45, enum case for IQACode.sunglassesConfidenceHigh(_:), v18);
  v46 = (_QWORD *)(v14 + v13 + 14 * v11);
  v47 = (char *)v46 + *(int *)(v9 + 48);
  *v46 = 0xD000000000000039;
  v46[1] = 0x800000010053ED70;
  v19((uint64_t)v47, enum case for IQACode.facemaskConfidenceHigh(_:), v18);
  v48 = (_QWORD *)(v14 + v13 + 15 * v11);
  v49 = (char *)v48 + *(int *)(v9 + 48);
  *v48 = 0xD000000000000039;
  v48[1] = 0x800000010053EDB0;
  v19((uint64_t)v49, enum case for IQACode.headgearConfidenceHigh(_:), v18);
  v50 = (_QWORD *)(v14 + v13 + 16 * v11);
  v51 = (char *)v50 + *(int *)(v9 + 48);
  *v50 = 0xD000000000000038;
  v50[1] = 0x800000010053EDF0;
  v19((uint64_t)v51, enum case for IQACode.faceCaptureQualityLow(_:), v18);
  v52 = (_QWORD *)(v14 + v13 + 17 * v11);
  v53 = (char *)v52 + *(int *)(v9 + 48);
  *v52 = 0xD000000000000033;
  v52[1] = 0x800000010053EE30;
  v19((uint64_t)v53, enum case for IQACode.targetTooFarLeft(_:), v18);
  v54 = (_QWORD *)(v14 + v13 + 18 * v11);
  v55 = (char *)v54 + *(int *)(v9 + 48);
  *v54 = 0xD000000000000034;
  v54[1] = 0x800000010053EE70;
  v19((uint64_t)v55, enum case for IQACode.targetTooFarRight(_:), v18);
  v56 = (_QWORD *)(v14 + v13 + 19 * v11);
  v57 = (char *)v56 + *(int *)(v9 + 48);
  *v56 = 0xD000000000000031;
  v56[1] = 0x800000010053EEB0;
  v19((uint64_t)v57, enum case for IQACode.targetTooFarUp(_:), v18);
  v58 = (_QWORD *)(v14 + v13 + 20 * v11);
  v59 = (char *)v58 + *(int *)(v9 + 48);
  *v58 = 0xD000000000000033;
  v58[1] = 0x800000010053EEF0;
  v19((uint64_t)v59, enum case for IQACode.targetTooFarDown(_:), v18);
  v60 = (_QWORD *)(v14 + v13 + 21 * v11);
  v61 = (char *)v60 + *(int *)(v9 + 48);
  *v60 = 0xD00000000000002ELL;
  v60[1] = 0x800000010053EF30;
  v19((uint64_t)v61, enum case for IQACode.numFacesLow(_:), v18);
  v62 = (_QWORD *)(v14 + v13 + 22 * v11);
  v63 = (char *)v62 + *(int *)(v9 + 48);
  *v62 = 0xD00000000000002FLL;
  v62[1] = 0x800000010053EF60;
  v19((uint64_t)v63, enum case for IQACode.numFacesHigh(_:), v18);
  v64 = (_QWORD *)(v14 + v13 + 23 * v11);
  v65 = (char *)v64 + *(int *)(v9 + 48);
  *v64 = 0xD00000000000002ELL;
  v64[1] = 0x800000010053EF90;
  v19((uint64_t)v65, enum case for IQACode.luxLevelLow(_:), v18);
  v66 = (_QWORD *)(v14 + v13 + 24 * v11);
  v67 = (char *)v66 + *(int *)(v9 + 48);
  *v66 = 0xD00000000000002FLL;
  v66[1] = 0x800000010053EFC0;
  v19((uint64_t)v67, enum case for IQACode.luxLevelHigh(_:), v18);
  sub_10011D4B0(v14);
  return v69;
}

uint64_t sub_1000134FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  if (!a2)
    return 2;
  if (a1 == 116 && a2 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(116, 0xE100000000000000, a1, a2, 0) & 1) != 0)
  {
    return 1;
  }
  if (a1 == 102 && a2 == 0xE100000000000000)
    return 0;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(102, 0xE100000000000000, a1, a2, 0);
  result = 0;
  if ((v5 & 1) == 0)
    return 2;
  return result;
}

void sub_10001359C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *p_countAndFlagsBits;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void (*v40)(char *, char *, uint64_t);
  id v41;
  Swift::String v42;
  unint64_t v43;
  id v44;
  Swift::String v45;
  Swift::String_optional v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  Swift::String_optional *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  int64_t v69;
  _QWORD *v70;
  unint64_t v71;

  v3 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  __chkstk_darwin(v3);
  v59 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v58 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IQACode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v55 = (Swift::String_optional *)((char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v68 = (char *)&v54 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - v13;
  v15 = sub_100004828(&qword_10062FC60);
  v16 = __chkstk_darwin(v15);
  v18 = (int64_t *)((char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  p_countAndFlagsBits = (int64_t *)((char *)&v54 - v19);
  v21 = *(_QWORD *)(a1 + 64);
  v62 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v63 = (unint64_t)(v22 + 63) >> 6;
  v54 = v63 - 1;
  v65 = a1;
  swift_bridgeObjectRetain(a1);
  v69 = 0;
  v25 = _swiftEmptyArrayStorage;
  v66 = v18;
  v67 = v14;
  v64 = v8;
  while (1)
  {
    v70 = v25;
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v69 << 6);
LABEL_8:
      v28 = *(_QWORD *)(v65 + 56);
      v29 = (_QWORD *)(*(_QWORD *)(v65 + 48) + 16 * v27);
      v30 = v29[1];
      *v18 = *v29;
      v18[1] = v30;
      v31 = v28 + *(_QWORD *)(v8 + 72) * v27;
      v32 = sub_100004828(&qword_10062FC68);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v18 + *(int *)(v32 + 48), v31, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v18, 0, 1, v32);
      swift_bridgeObjectRetain(v30);
      goto LABEL_27;
    }
    v33 = v69 + 1;
    if (__OFADD__(v69, 1))
    {
      __break(1u);
LABEL_42:
      v1 = sub_1000E221C(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
LABEL_36:
      v48 = *(_QWORD *)(v1 + 16);
      v47 = *(_QWORD *)(v1 + 24);
      if (v48 >= v47 >> 1)
        v1 = sub_1000E221C(v47 > 1, v48 + 1, 1, v1);
      *(_QWORD *)(v1 + 16) = v48 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v8 + 32))(v1+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v48, p_countAndFlagsBits, v7);
      goto LABEL_40;
    }
    if (v33 < v63)
    {
      v34 = *(_QWORD *)(v62 + 8 * v33);
      if (v34)
        goto LABEL_12;
      v35 = v69 + 2;
      ++v69;
      if (v33 + 1 < v63)
      {
        v34 = *(_QWORD *)(v62 + 8 * v35);
        if (v34)
          goto LABEL_15;
        v69 = v33 + 1;
        if (v33 + 2 < v63)
        {
          v34 = *(_QWORD *)(v62 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          v35 = v33 + 3;
          v69 = v33 + 2;
          if (v33 + 3 < v63)
            break;
        }
      }
    }
LABEL_26:
    v36 = sub_100004828(&qword_10062FC68);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v18, 1, 1, v36);
    v24 = 0;
LABEL_27:
    sub_100013D60((uint64_t)v18, (uint64_t)p_countAndFlagsBits);
    v37 = sub_100004828(&qword_10062FC68);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(p_countAndFlagsBits, 1, v37) == 1)
    {
      swift_release(v65);
      v44 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v45._countAndFlagsBits = 0xD000000000000035;
      v45._object = (void *)0x800000010053B120;
      v46 = NSUserDefaults.internalString(forKey:)(v45);

      if (v46.value._object)
      {
        p_countAndFlagsBits = &v55->value._countAndFlagsBits;
        *v55 = v46;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 104))(p_countAndFlagsBits, enum case for IQACode.complex(_:), v7);
        v1 = (unint64_t)v70;
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) != 0)
          goto LABEL_36;
        goto LABEL_42;
      }
      v1 = (unint64_t)v70;
LABEL_40:
      v49 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
      v51 = JSONEncoder.init()(v50);
      v71 = v1;
      v52 = sub_100004828(&qword_10062FC70);
      v53 = sub_100013DA8();
      dispatch thunk of JSONEncoder.encode<A>(_:)(&v71, v52, v53);
      swift_release(v51);
      swift_bridgeObjectRelease(v1);
      return;
    }
    v38 = *p_countAndFlagsBits;
    v39 = (void *)p_countAndFlagsBits[1];
    v40 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v40(v14, (char *)p_countAndFlagsBits + *(int *)(v37 + 48), v7);
    v41 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v42._countAndFlagsBits = v38;
    v42._object = v39;
    v1 = NSUserDefaults.internalBool(forKey:)(v42);

    swift_bridgeObjectRelease(v39);
    if ((v1 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v68, v14, v7);
      v25 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
        v25 = (_QWORD *)sub_1000E221C(0, v25[2] + 1, 1, (unint64_t)v25);
      v1 = v25[2];
      v43 = v25[3];
      if (v1 >= v43 >> 1)
        v25 = (_QWORD *)sub_1000E221C(v43 > 1, v1 + 1, 1, (unint64_t)v25);
      v25[2] = v1 + 1;
      v8 = v64;
      v40((char *)v25+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v64 + 72) * v1, v68, v7);
    }
    else
    {
      v25 = v70;
    }
    v14 = v67;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v67, v7);
    v18 = v66;
  }
  v34 = *(_QWORD *)(v62 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v33 = v35;
LABEL_12:
    v24 = (v34 - 1) & v34;
    v27 = __clz(__rbit64(v34)) + (v33 << 6);
    v69 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v33 >= v63)
    {
      v69 = v54;
      goto LABEL_26;
    }
    v34 = *(_QWORD *)(v62 + 8 * v33);
    ++v35;
    if (v34)
      goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_100013D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10062FC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100013DA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062FC78;
  if (!qword_10062FC78)
  {
    v1 = sub_100013E24(&qword_10062FC70);
    sub_100004790(&qword_10062FC80, (uint64_t (*)(uint64_t))&type metadata accessor for IQACode, (uint64_t)&protocol conformance descriptor for IQACode);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10062FC78);
  }
  return result;
}

uint64_t sub_100013E24(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

float sub_100013E68()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  uint64_t v3;
  _BYTE *v4;
  char v5;
  float result;
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD v10[3];
  uint64_t v11;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1._object = (void *)0x800000010053EA30;
  v1._countAndFlagsBits = 0xD000000000000027;
  v2 = NSUserDefaults.internalString(forKey:)(v1);

  if (!v2.value._object)
    return 0.0;
  *(_DWORD *)((char *)&v11 + 1) = 0;
  __chkstk_darwin(v3);
  if (((uint64_t)v2.value._object & 0x1000000000000000) != 0
    || !((uint64_t)v2.value._object & 0x2000000000000000 | v2.value._countAndFlagsBits & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(&v11, sub_10001403C);
    swift_bridgeObjectRelease(v2.value._object);
    if ((v11 & 1) != 0)
      goto LABEL_8;
    return 0.0;
  }
  if (((uint64_t)v2.value._object & 0x2000000000000000) != 0)
  {
    v10[0] = v2.value._countAndFlagsBits;
    v10[1] = (uint64_t)v2.value._object & 0xFFFFFFFFFFFFFFLL;
    v7 = LOBYTE(v2.value._countAndFlagsBits) > 0x20u
      || ((1 << SLOBYTE(v2.value._countAndFlagsBits)) & 0x100003E01) == 0;
    if (v7 && (v8 = (unsigned __int8 *)_swift_stdlib_strtof_clocale(v10, (char *)&v11 + 1)) != 0)
    {
      v9 = *v8;
      swift_bridgeObjectRelease(v2.value._object);
      if (!v9)
        goto LABEL_8;
    }
    else
    {
      swift_bridgeObjectRelease(v2.value._object);
    }
    return 0.0;
  }
  if ((v2.value._countAndFlagsBits & 0x1000000000000000) != 0)
    v4 = (_BYTE *)(((uint64_t)v2.value._object & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v4 = (_BYTE *)_StringObject.sharedUTF8.getter(v2.value._countAndFlagsBits, v2.value._object);
  sub_10001403C(v4, (BOOL *)v10);
  v5 = v10[0];
  swift_bridgeObjectRelease(v2.value._object);
  if ((v5 & 1) == 0)
    return 0.0;
LABEL_8:
  result = *(float *)((char *)&v11 + 1);
  if (*(float *)((char *)&v11 + 1) < 0.0 || *(float *)((char *)&v11 + 1) > 1.0)
    return 0.0;
  return result;
}

_BYTE *sub_10001403C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

Swift::Int sub_1000140A8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100424FD4(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100014110(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100014110(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  _QWORD *v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v88 = 0;
      v89 = *a1;
      v90 = 1;
      while (1)
      {
        v91 = *(_QWORD *)(v89 + 16 * v90 + 8);
        v92 = v88;
        do
        {
          v93 = v89 + v92;
          if (v91 >= *(_QWORD *)(v89 + v92 + 8))
            break;
          if (!v89)
            goto LABEL_142;
          v94 = *(_QWORD *)(v93 + 16);
          *(_OWORD *)(v93 + 16) = *(_OWORD *)v93;
          *(_QWORD *)v93 = v94;
          *(_QWORD *)(v93 + 8) = v91;
          v92 -= 16;
        }
        while (v92 != -16);
        ++v90;
        v88 += 16;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_100004828(&qword_10062FCD8);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v103 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v102 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v104 = v6;
  v105 = v3;
  v106 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 16 * v11 + 8);
      v17 = *(_QWORD *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (uint64_t *)(v102 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 2;
          v20 = v21;
          if (v16 < v17 == v21 >= v19)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v22 = 16 * v11;
          v23 = 16 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = v12 + v22;
              v27 = *(_QWORD *)(v12 + v23);
              v28 = *(_QWORD *)(v12 + v23 + 8);
              *(_OWORD *)(v12 + v23) = *(_OWORD *)(v12 + v22 - 16);
              *(_QWORD *)(v26 - 16) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v25;
            v22 -= 16;
            v23 += 16;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v29 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v29 >= v3)
          v29 = v3;
        if (v29 < v15)
          goto LABEL_141;
        if (v11 != v29)
        {
          v30 = (_QWORD *)(v12 + 16 * v11);
          do
          {
            v31 = *(_QWORD *)(v12 + 16 * v11 + 8);
            v32 = v15;
            v33 = v30;
            do
            {
              if (v31 >= *(v33 - 1))
                break;
              if (!v12)
                goto LABEL_143;
              v34 = *v33;
              *(_OWORD *)v33 = *((_OWORD *)v33 - 1);
              *(v33 - 1) = v31;
              *(v33 - 2) = v34;
              v33 -= 2;
              ++v32;
            }
            while (v11 != v32);
            ++v11;
            v30 += 2;
          }
          while (v11 != v29);
          v11 = v29;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_100424114(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v36 = *((_QWORD *)v13 + 2);
    v35 = *((_QWORD *)v13 + 3);
    v14 = v36 + 1;
    v12 = v106;
    if (v36 >= v35 >> 1)
    {
      v85 = sub_100424114((char *)(v35 > 1), v36 + 1, 1, v13);
      v12 = v106;
      v13 = v85;
    }
    *((_QWORD *)v13 + 2) = v14;
    v37 = v13 + 32;
    v38 = &v13[16 * v36 + 32];
    *(_QWORD *)v38 = v15;
    *((_QWORD *)v38 + 1) = v11;
    if (v36)
      break;
    v14 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v11 >= v105)
    {
      v10 = v103;
LABEL_104:
      v87 = v13;
      v103 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v95 = *v101;
      while (1)
      {
        v96 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v95)
          goto LABEL_146;
        v86 = v87;
        v97 = *(_QWORD *)&v87[16 * v96 + 32];
        v98 = *(_QWORD *)&v87[16 * v14 + 24];
        sub_1000147D8((char *)(v95 + 16 * v97), (char *)(v95 + 16 * *(_QWORD *)&v87[16 * v14 + 16]), v95 + 16 * v98, __dst);
        if (v1)
          goto LABEL_94;
        if (v98 < v97)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = sub_10042446C((uint64_t)v86);
        if (v96 >= *((_QWORD *)v86 + 2))
          goto LABEL_135;
        v99 = &v86[16 * v96 + 32];
        *(_QWORD *)v99 = v97;
        *((_QWORD *)v99 + 1) = v98;
        v100 = *((_QWORD *)v86 + 2);
        if (v14 > v100)
          goto LABEL_136;
        memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v100 - v14));
        v87 = v86;
        *((_QWORD *)v86 + 2) = v100 - 1;
        v14 = v100 - 1;
        if (v100 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v39 = v14 - 1;
    if (v14 >= 4)
    {
      v44 = &v37[16 * v14];
      v45 = *((_QWORD *)v44 - 8);
      v46 = *((_QWORD *)v44 - 7);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_121;
      v49 = *((_QWORD *)v44 - 6);
      v48 = *((_QWORD *)v44 - 5);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_122;
      v51 = v14 - 2;
      v52 = &v37[16 * v14 - 32];
      v54 = *(_QWORD *)v52;
      v53 = *((_QWORD *)v52 + 1);
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_124;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_127;
      if (v56 >= v47)
      {
        v74 = &v37[16 * v39];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_131;
        v67 = v42 < v77;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v68 = *((_QWORD *)v13 + 4);
        v69 = *((_QWORD *)v13 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_77;
      }
      v41 = *((_QWORD *)v13 + 4);
      v40 = *((_QWORD *)v13 + 5);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_123;
    v51 = v14 - 2;
    v57 = &v37[16 * v14 - 32];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_126;
    v63 = &v37[16 * v39];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_129;
    if (__OFADD__(v61, v66))
      goto LABEL_130;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_83:
      if (v67)
        v39 = v51;
      goto LABEL_85;
    }
LABEL_77:
    if ((v62 & 1) != 0)
      goto LABEL_125;
    v70 = &v37[16 * v39];
    v72 = *(_QWORD *)v70;
    v71 = *((_QWORD *)v70 + 1);
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_128;
    if (v73 < v61)
      goto LABEL_15;
LABEL_85:
    v78 = v39 - 1;
    if (v39 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v79 = v13;
    v80 = &v37[16 * v78];
    v81 = *(_QWORD *)v80;
    v82 = &v37[16 * v39];
    v83 = *((_QWORD *)v82 + 1);
    sub_1000147D8((char *)(v12 + 16 * *(_QWORD *)v80), (char *)(v12 + 16 * *(_QWORD *)v82), v12 + 16 * v83, __dst);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_118;
    if (v39 > *((_QWORD *)v79 + 2))
      goto LABEL_119;
    *(_QWORD *)v80 = v81;
    *(_QWORD *)&v37[16 * v78 + 8] = v83;
    v84 = *((_QWORD *)v79 + 2);
    if (v39 >= v84)
      goto LABEL_120;
    v13 = v79;
    v14 = v84 - 1;
    memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
    *((_QWORD *)v79 + 2) = v84 - 1;
    v12 = v106;
    if (v84 <= 2)
      goto LABEL_15;
  }
  v86 = v79;
LABEL_94:
  v87 = v86;
LABEL_95:
  swift_bridgeObjectRelease(v87);
  v103[2] = 0;
  return swift_bridgeObjectRelease(v103);
}

uint64_t sub_1000147D8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char *v23;
  const void *v24;
  char *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[16 * v13];
      v23 = v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (char *)(a3 - 16);
        do
        {
          v20 = v19 + 16;
          if (*((_QWORD *)v18 - 1) >= *((_QWORD *)v6 - 1))
          {
            v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 16;
            if (v21 <= v7)
              break;
          }
          v19 -= 16;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_10042420C((void **)&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 1) >= *((_QWORD *)v15 + 1))
        {
          v4 = v15 + 16;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          v16 = v6 + 16;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100014A60()
{
  unint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::Int value;
  Swift::Bool is_nil;
  id v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  id v9;
  Swift::String v10;
  Swift::Int v11;
  Swift::Bool v12;
  id v13;
  id v14;
  char v15;
  id v16;
  Swift::String v17;
  Swift::Int v18;
  Swift::Bool v19;
  id v20;
  id v21;
  char v22;
  id v23;
  Swift::String v24;
  Swift::Int v25;
  Swift::Bool v26;
  id v27;
  id v28;
  char v29;
  id v30;
  Swift::String v31;
  Swift::Int v32;
  Swift::Bool v33;
  id v34;
  id v35;
  char v36;
  id v37;
  Swift::String v38;
  Swift::Int v39;
  Swift::Bool v40;
  id v41;
  id v42;
  char v43;
  id v44;
  Swift::String v45;
  Swift::Int v46;
  Swift::Bool v47;
  id v48;
  id v49;
  char v50;
  id v51;
  Swift::String v52;
  Swift::Int v53;
  Swift::Bool v54;
  id v55;
  id v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  void **v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  Swift::Int_optional v69;
  Swift::Int_optional v70;
  Swift::Int_optional v71;
  Swift::Int_optional v72;
  Swift::Int_optional v73;
  Swift::Int_optional v74;
  Swift::Int_optional v75;
  Swift::Int_optional v76;

  v0 = sub_10011D668((uint64_t)_swiftEmptyArrayStorage);
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  v3._object = (void *)0x800000010053F530;
  v69 = NSUserDefaults.internalInt(forKey:)(v3);
  value = v69.value;
  is_nil = v69.is_nil;

  if (!is_nil)
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v7 = (id)IdentityGesture.init(gesture:type:)(0, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(value, v7, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v9 = objc_msgSend(v1, "standardUserDefaults");
  v10._countAndFlagsBits = 0xD00000000000001ELL;
  v10._object = (void *)0x800000010053F550;
  v70 = NSUserDefaults.internalInt(forKey:)(v10);
  v11 = v70.value;
  v12 = v70.is_nil;

  if (!v12)
  {
    v13 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v14 = (id)IdentityGesture.init(gesture:type:)(1, 0);
    v15 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v11, v14, v15);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v16 = objc_msgSend(v1, "standardUserDefaults");
  v17._countAndFlagsBits = 0xD00000000000001CLL;
  v17._object = (void *)0x800000010053F570;
  v71 = NSUserDefaults.internalInt(forKey:)(v17);
  v18 = v71.value;
  v19 = v71.is_nil;

  if (!v19)
  {
    v20 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v21 = (id)IdentityGesture.init(gesture:type:)(2, 0);
    v22 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v18, v21, v22);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v23 = objc_msgSend(v1, "standardUserDefaults");
  v24._countAndFlagsBits = 0xD00000000000001ELL;
  v24._object = (void *)0x800000010053F590;
  v72 = NSUserDefaults.internalInt(forKey:)(v24);
  v25 = v72.value;
  v26 = v72.is_nil;

  if (!v26)
  {
    v27 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v28 = (id)IdentityGesture.init(gesture:type:)(3, 0);
    v29 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v25, v28, v29);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v30 = objc_msgSend(v1, "standardUserDefaults");
  v31._object = (void *)0x800000010053F5B0;
  v31._countAndFlagsBits = 0xD00000000000001ALL;
  v73 = NSUserDefaults.internalInt(forKey:)(v31);
  v32 = v73.value;
  v33 = v73.is_nil;

  if (!v33)
  {
    v34 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v35 = (id)IdentityGesture.init(gesture:type:)(4, 1);
    v36 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v32, v35, v36);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v37 = objc_msgSend(v1, "standardUserDefaults");
  v38._object = (void *)0x800000010053F5D0;
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  v74 = NSUserDefaults.internalInt(forKey:)(v38);
  v39 = v74.value;
  v40 = v74.is_nil;

  if (!v40)
  {
    v41 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v42 = (id)IdentityGesture.init(gesture:type:)(5, 1);
    v43 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v39, v42, v43);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v44 = objc_msgSend(v1, "standardUserDefaults");
  v45._countAndFlagsBits = 0xD00000000000001FLL;
  v45._object = (void *)0x800000010053F5F0;
  v75 = NSUserDefaults.internalInt(forKey:)(v45);
  v46 = v75.value;
  v47 = v75.is_nil;

  if (!v47)
  {
    v48 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v49 = (id)IdentityGesture.init(gesture:type:)(8, 1);
    v50 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v46, v49, v50);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v51 = objc_msgSend(v1, "standardUserDefaults");
  v52._countAndFlagsBits = 0xD000000000000023;
  v52._object = (void *)0x800000010053F610;
  v76 = NSUserDefaults.internalInt(forKey:)(v52);
  v53 = v76.value;
  v54 = v76.is_nil;

  if (!v54)
  {
    v55 = objc_allocWithZone((Class)type metadata accessor for IdentityGesture(0));
    v56 = (id)IdentityGesture.init(gesture:type:)(9, 1);
    v57 = swift_isUniquelyReferenced_nonNull_native(v0);
    v68 = (_QWORD *)v0;
    sub_100480DA8(v53, v56, v57);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  swift_bridgeObjectRetain_n(v0, 2);
  v58 = sub_100422FC4(v0);
  swift_bridgeObjectRelease(v0);
  v68 = v58;
  sub_1000140A8(&v68);
  swift_bridgeObjectRelease(v0);
  v59 = v68;
  v60 = v68[2];
  v61 = _swiftEmptyArrayStorage;
  if (v60)
  {
    v68 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v60);
    v62 = (void **)(v59 + 4);
    do
    {
      v63 = *v62;
      v62 += 2;
      v64 = v63;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v64);
      v65 = v68[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v65);
      v66 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v64);
      specialized ContiguousArray._endMutation()(v66);
      --v60;
    }
    while (v60);
    v61 = v68;
  }
  swift_release(v59);
  swift_bridgeObjectRelease(v0);
  return v61;
}

uint64_t sub_10001505C()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  id v4;
  Swift::String v5;
  Swift::Int value;
  Swift::Bool is_nil;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::Int v11;
  Swift::Bool v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::Int v16;
  Swift::Bool v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::Int v21;
  Swift::Bool v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::Int v26;
  Swift::Bool v27;
  uint64_t v28;
  id v29;
  Swift::String v30;
  Swift::Int v31;
  Swift::Bool v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::Int v36;
  Swift::Bool v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  Swift::Int v41;
  Swift::Bool v42;
  uint64_t v43;
  id v44;
  Swift::String v45;
  Swift::Int v46;
  Swift::Bool v47;
  uint64_t v48;
  id v49;
  Swift::String v50;
  Swift::Int v51;
  Swift::Bool v52;
  uint64_t v53;
  id v54;
  Swift::String v55;
  Swift::Int v56;
  Swift::Bool v57;
  uint64_t v58;
  id v59;
  Swift::String v60;
  Swift::Int v61;
  Swift::Bool v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  Swift::String v66;
  Swift::Int v67;
  Swift::Bool v68;
  uint64_t v69;
  id v70;
  Swift::String v71;
  Swift::Int v72;
  Swift::Bool v73;
  id v74;
  Swift::String v75;
  Swift::Bool v76;
  id v77;
  Swift::String v78;
  Swift::Bool v79;
  id v80;
  Swift::String v81;
  Swift::Bool v82;
  id v83;
  Swift::String v84;
  Swift::Bool v85;
  id v86;
  Swift::String v87;
  Swift::Bool v88;
  id v89;
  uint64_t v90;
  id v91;
  Swift::String v92;
  Swift::Bool v93;
  id v94;
  Swift::String v95;
  Swift::Int v96;
  Swift::Bool v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  Swift::Int v101;
  Swift::Bool v102;
  uint64_t v103;
  id v104;
  Swift::String v105;
  Swift::Int v106;
  Swift::Bool v107;
  uint64_t v108;
  id v109;
  Swift::String v110;
  Swift::Int v111;
  Swift::Bool v112;
  id v113;
  Swift::String v114;
  Swift::Int v115;
  Swift::Bool v116;
  id v117;
  Swift::String v118;
  Swift::Bool v119;
  id v120;
  Swift::String v121;
  Swift::Bool v122;
  id v123;
  Swift::String v124;
  Swift::Bool v125;
  id v126;
  Swift::String v127;
  Swift::Bool v128;
  id v129;
  uint64_t v130;
  id v131;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t forKey_8;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  Swift::Int_optional v151;
  Swift::Int_optional v152;
  Swift::Int_optional v153;
  Swift::Int_optional v154;
  Swift::Int_optional v155;
  Swift::Int_optional v156;
  Swift::Int_optional v157;
  Swift::Int_optional v158;
  Swift::Int_optional v159;
  Swift::Int_optional v160;
  Swift::Int_optional v161;
  Swift::Int_optional v162;
  Swift::Int_optional v163;
  Swift::Int_optional v164;
  Swift::Int_optional v165;
  Swift::Int_optional v166;
  Swift::Int_optional v167;
  Swift::Int_optional v168;
  Swift::Int_optional v169;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2._object = (void *)0x800000010053EFF0;
  v2._countAndFlagsBits = 0xD000000000000025;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v150 = sub_100014A60();
    v4 = objc_msgSend(v0, "standardUserDefaults");
    v5._countAndFlagsBits = 0xD00000000000001ELL;
    v5._object = (void *)0x800000010053F1E0;
    v151 = NSUserDefaults.internalInt(forKey:)(v5);
    value = v151.value;
    is_nil = v151.is_nil;

    v8 = 3;
    if (!is_nil)
      v8 = value;
    v148 = v8;
    v9 = objc_msgSend(v0, "standardUserDefaults");
    v10._object = (void *)0x800000010053F200;
    v10._countAndFlagsBits = 0xD000000000000022;
    v152 = NSUserDefaults.internalInt(forKey:)(v10);
    v11 = v152.value;
    v12 = v152.is_nil;

    v13 = 5;
    if (!v12)
      v13 = v11;
    v146 = v13;
    v14 = objc_msgSend(v0, "standardUserDefaults");
    v15._countAndFlagsBits = 0xD000000000000029;
    v15._object = (void *)0x800000010053F230;
    v153 = NSUserDefaults.internalInt(forKey:)(v15);
    v16 = v153.value;
    v17 = v153.is_nil;

    v18 = 50;
    if (!v17)
      v18 = v16;
    v144 = v18;
    v19 = objc_msgSend(v0, "standardUserDefaults");
    v20._countAndFlagsBits = 0xD00000000000001CLL;
    v20._object = (void *)0x800000010053F260;
    v154 = NSUserDefaults.internalInt(forKey:)(v20);
    v21 = v154.value;
    v22 = v154.is_nil;

    v23 = 10;
    if (!v22)
      v23 = v21;
    v143 = v23;
    v24 = objc_msgSend(v0, "standardUserDefaults");
    v25._countAndFlagsBits = 0xD00000000000002ALL;
    v25._object = (void *)0x800000010053F280;
    v155 = NSUserDefaults.internalInt(forKey:)(v25);
    v26 = v155.value;
    v27 = v155.is_nil;

    v28 = 100;
    if (!v27)
      v28 = v26;
    forKey_8 = v28;
    v29 = objc_msgSend(v0, "standardUserDefaults");
    v30._object = (void *)0x800000010053F2B0;
    v30._countAndFlagsBits = 0xD000000000000022;
    v156 = NSUserDefaults.internalInt(forKey:)(v30);
    v31 = v156.value;
    v32 = v156.is_nil;

    if (v32)
      v33 = 1;
    else
      v33 = v31;
    v141 = v33;
    v34 = objc_msgSend(v0, "standardUserDefaults");
    v35._object = (void *)0x800000010053F2E0;
    v35._countAndFlagsBits = 0xD000000000000025;
    v157 = NSUserDefaults.internalInt(forKey:)(v35);
    v36 = v157.value;
    v37 = v157.is_nil;

    if (v37)
      v38 = 300;
    else
      v38 = v36;
    v140 = v38;
    v39 = objc_msgSend(v0, "standardUserDefaults");
    v40._countAndFlagsBits = 0xD000000000000028;
    v40._object = (void *)0x800000010053F310;
    v158 = NSUserDefaults.internalInt(forKey:)(v40);
    v41 = v158.value;
    v42 = v158.is_nil;

    v43 = 30;
    if (!v42)
      v43 = v41;
    v139 = v43;
    v44 = objc_msgSend(v0, "standardUserDefaults");
    v45._object = (void *)0x800000010053F340;
    v45._countAndFlagsBits = 0xD000000000000025;
    v159 = NSUserDefaults.internalInt(forKey:)(v45);
    v46 = v159.value;
    v47 = v159.is_nil;

    if (v47)
      v48 = 300;
    else
      v48 = v46;
    v138 = v48;
    v49 = objc_msgSend(v0, "standardUserDefaults");
    v50._countAndFlagsBits = 0xD000000000000023;
    v50._object = (void *)0x800000010053F370;
    v160 = NSUserDefaults.internalInt(forKey:)(v50);
    v51 = v160.value;
    v52 = v160.is_nil;

    if (v52)
      v53 = 2000;
    else
      v53 = v51;
    v137 = v53;
    v54 = objc_msgSend(v0, "standardUserDefaults");
    v55._object = (void *)0x800000010053F3A0;
    v55._countAndFlagsBits = 0xD000000000000026;
    v161 = NSUserDefaults.internalInt(forKey:)(v55);
    v56 = v161.value;
    v57 = v161.is_nil;

    if (v57)
      v58 = 2000;
    else
      v58 = v56;
    v136 = v58;
    v59 = objc_msgSend(v0, "standardUserDefaults");
    v60._countAndFlagsBits = 0xD000000000000024;
    v60._object = (void *)0x800000010053F3D0;
    v162 = NSUserDefaults.internalInt(forKey:)(v60);
    v61 = v162.value;
    v62 = v162.is_nil;

    v63 = 1000;
    if (v62)
      v64 = 1000;
    else
      v64 = v61;
    v135 = v64;
    v65 = objc_msgSend(v0, "standardUserDefaults");
    v66._object = (void *)0x800000010053F400;
    v66._countAndFlagsBits = 0xD000000000000030;
    v163 = NSUserDefaults.internalInt(forKey:)(v66);
    v67 = v163.value;
    v68 = v163.is_nil;

    if (v68)
      v69 = 3000;
    else
      v69 = v67;
    v70 = objc_msgSend(v0, "standardUserDefaults");
    v71._object = (void *)0x800000010053F440;
    v71._countAndFlagsBits = 0xD000000000000030;
    v164 = NSUserDefaults.internalInt(forKey:)(v71);
    v72 = v164.value;
    v73 = v164.is_nil;

    if (!v73)
      v63 = v72;
    v74 = objc_msgSend(v0, "standardUserDefaults");
    v75._object = (void *)0x800000010053F480;
    v75._countAndFlagsBits = 0xD00000000000001ELL;
    v76 = NSUserDefaults.internalBool(forKey:)(v75);

    v77 = objc_msgSend(v0, "standardUserDefaults");
    v78._countAndFlagsBits = 0xD000000000000020;
    v78._object = (void *)0x800000010053F4A0;
    v79 = NSUserDefaults.internalBool(forKey:)(v78);

    v80 = objc_msgSend(v0, "standardUserDefaults");
    v81._object = (void *)0x800000010053F4D0;
    v81._countAndFlagsBits = 0xD000000000000022;
    v82 = NSUserDefaults.internalBool(forKey:)(v81);

    v83 = objc_msgSend(v0, "standardUserDefaults");
    v84._object = (void *)0x800000010053F500;
    v84._countAndFlagsBits = 0xD000000000000026;
    v85 = NSUserDefaults.internalBool(forKey:)(v84);

    v86 = objc_msgSend(v0, "standardUserDefaults");
    v87._countAndFlagsBits = 0xD000000000000021;
    v87._object = (void *)0x800000010053F1B0;
    v88 = NSUserDefaults.internalBool(forKey:)(v87);

    v89 = objc_allocWithZone((Class)type metadata accessor for IdentityActiveLivenessConfig(0));
    BYTE4(v134) = !v88;
    BYTE3(v134) = v85;
    BYTE2(v134) = v82;
    BYTE1(v134) = v79;
    LOBYTE(v134) = v76;
    v90 = IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)(v150, v148, v146, v144, v143, forKey_8, v141, v140, v139, v138, v137, v136, v135, v69, v63, v134);
  }
  else
  {
    v90 = 0;
  }
  v91 = objc_msgSend(v0, "standardUserDefaults");
  v92._countAndFlagsBits = 0xD000000000000026;
  v92._object = (void *)0x800000010053F020;
  v93 = NSUserDefaults.internalBool(forKey:)(v92);

  if (v93)
  {
    v94 = objc_msgSend(v0, "standardUserDefaults");
    v95._countAndFlagsBits = 0xD000000000000023;
    v95._object = (void *)0x800000010053F050;
    v165 = NSUserDefaults.internalInt(forKey:)(v95);
    v96 = v165.value;
    v97 = v165.is_nil;

    if (v97)
      v98 = 1;
    else
      v98 = v96;
    v149 = v98;
    v99 = objc_msgSend(v0, "standardUserDefaults");
    v100._countAndFlagsBits = 0xD00000000000001ELL;
    v100._object = (void *)0x800000010053F080;
    v166 = NSUserDefaults.internalInt(forKey:)(v100);
    v101 = v166.value;
    v102 = v166.is_nil;

    v103 = 300;
    if (!v102)
      v103 = v101;
    v147 = v103;
    v104 = objc_msgSend(v0, "standardUserDefaults");
    v105._countAndFlagsBits = 0xD000000000000029;
    v105._object = (void *)0x800000010053F0A0;
    v167 = NSUserDefaults.internalInt(forKey:)(v105);
    v106 = v167.value;
    v107 = v167.is_nil;

    v108 = 30;
    if (!v107)
      v108 = v106;
    v145 = v108;
    v109 = objc_msgSend(v0, "standardUserDefaults");
    v110._countAndFlagsBits = 0xD000000000000028;
    v110._object = (void *)0x800000010053F0D0;
    v168 = NSUserDefaults.internalInt(forKey:)(v110);
    v111 = v168.value;
    v112 = v168.is_nil;

    if (v112)
      v111 = 150;
    v113 = objc_msgSend(v0, "standardUserDefaults");
    v114._countAndFlagsBits = 0xD00000000000002CLL;
    v114._object = (void *)0x800000010053F100;
    v169 = NSUserDefaults.internalInt(forKey:)(v114);
    v115 = v169.value;
    v116 = v169.is_nil;

    if (v116)
      v115 = 146;
    v117 = objc_msgSend(v0, "standardUserDefaults");
    v118._countAndFlagsBits = 0xD00000000000001FLL;
    v118._object = (void *)0x800000010053F130;
    v119 = NSUserDefaults.internalBool(forKey:)(v118);

    v120 = objc_msgSend(v0, "standardUserDefaults");
    v121._object = (void *)0x800000010053F150;
    v121._countAndFlagsBits = 0xD000000000000021;
    v122 = NSUserDefaults.internalBool(forKey:)(v121);

    v123 = objc_msgSend(v0, "standardUserDefaults");
    v124._object = (void *)0x800000010053F180;
    v124._countAndFlagsBits = 0xD000000000000025;
    v125 = NSUserDefaults.internalBool(forKey:)(v124);

    v126 = objc_msgSend(v0, "standardUserDefaults");
    v127._object = (void *)0x800000010053F1B0;
    v127._countAndFlagsBits = 0xD000000000000021;
    v128 = NSUserDefaults.internalBool(forKey:)(v127);

    v129 = objc_allocWithZone((Class)type metadata accessor for IdentityPassiveLivenessConfig(0));
    LOBYTE(v133) = !v128;
    v130 = IdentityPassiveLivenessConfig.init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)(v149, v147, v145, v111, v115, v119, v122, v125, v133);
  }
  else
  {
    v130 = 0;
  }
  v131 = objc_allocWithZone((Class)type metadata accessor for IdentityLivenessConfig(0));
  return IdentityLivenessConfig.init(active:passive:)(v90, v130);
}

void sub_100015A08()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(id *)(v1 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  objc_msgSend(v2, "invalidateSession");

  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  *(_QWORD *)(v1 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
}

uint64_t sub_100015A78(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015ADC, 0, 0);
}

uint64_t sub_100015ADC()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = v3;
  os_unfair_lock_unlock(v2);
  if (v3)
  {
    v5 = swift_allocObject(&unk_100603898, 24, 7);
    *(_QWORD *)(v0 + 64) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    v6 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
    v7 = v4;
    v8 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v0 + 72) = v8;
    *v8 = v0;
    v8[1] = sub_100015CB0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v8, &unk_10062FEA8, v5, (char *)&type metadata for () + 8, *(double *)(v0 + 16));
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v10, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
    v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v12, v13, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010053F770, 0, v10, 0, v11, 0xD000000000000045, 0x800000010053F7A0, 0xD00000000000001DLL, 0x800000010053F7F0, 48);
    swift_willThrow(v14);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100015CB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100015D58;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_100015D1C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100015D1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015D58()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015D98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[19] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[21] = v4;
  v2[22] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015DF8, 0, 0);
}

uint64_t sub_100015DF8()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[19];
  v0[2] = v0;
  v0[3] = sub_100015E84;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100454F88;
  v4[3] = &unk_1006038B0;
  v4[4] = v3;
  objc_msgSend(v2, "deleteGlobalAuthACLWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100015E84()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 184) = v1;
  if (v1)
    v2 = sub_100015F18;
  else
    v2 = sub_100015EE4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100015EE4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 176);
  v3 = *(_QWORD *)(v1 + 184);
  v4 = *(_QWORD *)(v1 + 160);
  v5 = *(_QWORD *)(v1 + 168);
  swift_willThrow(a1);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_getErrorValue(v3, v1 + 144, v1 + 120);
  v6._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for DIPError.Code.unableToDeleteGlobalAuthACLInWatch(_:), v4);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x800000010053F830, 0, v2, 0, v8, 0xD000000000000045, 0x800000010053F7A0, 0xD00000000000001DLL, 0x800000010053F7F0, 54);
  swift_willThrow(v11);
  swift_errorRelease(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for NPKSession()
{
  return objc_opt_self(_TtC8coreidvd10NPKSession);
}

uint64_t sub_1000160E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[19] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[20] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[21] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v4);
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  return swift_task_switch(sub_100016168, 0, 0);
}

uint64_t sub_100016168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  v3 = *(_QWORD *)(v1 + v2);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (os_unfair_lock_s *)(v4 + 24);
  swift_retain(v3);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  v6 = *(void **)(v4 + 16);
  *(_QWORD *)(v0 + 216) = v6;
  v7 = v6;
  os_unfair_lock_unlock(v5);
  swift_release(v3);
  if (v6 && objc_msgSend(v7, "status") != (id)1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 208));
    v26 = *(_QWORD *)(v25 + 16);
    v27 = (os_unfair_lock_s *)(v26 + 24);
    swift_retain(v25);
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
    v28 = *(void **)(v26 + 16);
    v29 = *(void **)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 176);
    v32 = *(_QWORD *)(v0 + 184);
    v34 = v28;
    os_unfair_lock_unlock(v27);
    swift_release(v25);

    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void *))(v0 + 8))(v28);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + v2);
    v9 = *(_QWORD *)(v8 + 24);
    v10 = swift_task_alloc(32);
    *(_BYTE *)(v10 + 16) = 0;
    swift_retain(v8);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 20));
    *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    swift_release(v8);
    v11 = swift_task_dealloc(v10);
    if (v6)
    {
      v12 = v7;
      if (objc_msgSend(v12, "status") == (id)1)
      {
        defaultLogger()(1);
        v13 = v12;
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.debug.getter(v14);
        v16 = os_log_type_enabled(v14, v15);
        v17 = *(_QWORD *)(v0 + 200);
        v18 = *(_QWORD *)(v0 + 160);
        v19 = *(_QWORD *)(v0 + 168);
        if (v16)
        {
          v50 = *(_QWORD *)(v0 + 160);
          v49 = *(_QWORD *)(v0 + 200);
          v20 = (uint8_t *)swift_slowAlloc(12, -1);
          v48 = swift_slowAlloc(32, -1);
          v51 = v48;
          *(_DWORD *)v20 = 136446210;
          v21 = objc_msgSend(v13, "deviceID");
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v24 = v23;

          *(_QWORD *)(v0 + 144) = sub_1000E3AC8(v22, v24, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v20 + 4);
          swift_bridgeObjectRelease(v24);

          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Connection with watch invalidated with pairingID: %{public}s", v20, 0xCu);
          swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v49, v50);
        }
        else
        {

          v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        }
      }
      else
      {

      }
    }
    v36 = defaultLogger()(v11);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Trying to establish session with watch", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }
    v40 = v0 + 16;
    v41 = *(_QWORD *)(v0 + 192);
    v42 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 168);

    v44 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    *(_QWORD *)(v0 + 224) = v44;
    v44(v41, v42);
    v45 = (void *)objc_opt_self(NPKIDVRemoteDeviceSession);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000165C4;
    v46 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v47 = (_QWORD *)(v0 + 80);
    v47[1] = 0x40000000;
    v47[2] = sub_100016AF8;
    v47[3] = &unk_100603AA0;
    v47[4] = v46;
    objc_msgSend(v45, "sessionForDeviceID:completion:", 0, v47);
    return swift_continuation_await(v40);
  }
}

uint64_t sub_1000165C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 232) = v1;
  if (v1)
    v2 = sub_1000168D8;
  else
    v2 = sub_100016624;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100016624(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;

  v2 = *(void **)(v1 + 120);
  defaultLogger()(a1);
  v3 = v2;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v33 = *(_QWORD *)(v1 + 184);
    v34 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
    v32 = *(_QWORD *)(v1 + 160);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v35 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = objc_msgSend(v3, "deviceID");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v9, v11, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v6 + 4);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully established session with watch with pairingID: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v34(v33, v32);
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
    v13 = *(_QWORD *)(v1 + 184);
    v14 = *(_QWORD *)(v1 + 160);

    v12(v13, v14);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + *(_QWORD *)(v1 + 208));
  v16 = *(_QWORD *)(v15 + 16);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v3;
  v18 = v3;
  swift_retain(v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  v19 = *(void **)(v17 + 16);

  *(_QWORD *)(v16 + 16) = v19;
  v20 = v19;
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));

  swift_release(v15);
  swift_task_dealloc(v17);
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + *(_QWORD *)(v1 + 208));
  v22 = *(_QWORD *)(v21 + 16);
  v23 = (os_unfair_lock_s *)(v22 + 24);
  swift_retain(v21);
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 24));
  v24 = *(void **)(v22 + 16);
  v25 = *(void **)(v1 + 216);
  v27 = *(_QWORD *)(v1 + 192);
  v26 = *(_QWORD *)(v1 + 200);
  v29 = *(_QWORD *)(v1 + 176);
  v28 = *(_QWORD *)(v1 + 184);
  v30 = v24;
  os_unfair_lock_unlock(v23);
  swift_release(v21);

  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void *))(v1 + 8))(v24);
}

uint64_t sub_1000168D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v2 = *(_QWORD *)(v1 + 232);
  v3 = swift_willThrow(a1);
  defaultLogger()(v3);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v1 + 232);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v1 + 128) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to establish session with watch: %@", v8, 0xCu);
    v11 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 232);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  (*(void (**)(_QWORD, _QWORD))(v1 + 224))(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 160));
  v13 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + *(_QWORD *)(v1 + 208));
  v14 = *(_QWORD *)(v13 + 16);
  v15 = (os_unfair_lock_s *)(v14 + 24);
  swift_retain(v13);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v16 = *(void **)(v14 + 16);
  v17 = *(void **)(v1 + 216);
  v19 = *(_QWORD *)(v1 + 192);
  v18 = *(_QWORD *)(v1 + 200);
  v21 = *(_QWORD *)(v1 + 176);
  v20 = *(_QWORD *)(v1 + 184);
  v22 = v16;
  os_unfair_lock_unlock(v15);
  swift_release(v13);

  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void *))(v1 + 8))(v16);
}

NSObject *sub_100016AFC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  objc_class *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  id v38;
  NSObject *v39;
  NSString v40;
  objc_class *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  NSObject *v48;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  objc_super v56;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v52 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v54 - 8);
  v11 = __chkstk_darwin(v54);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  v16 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  v17 = type metadata accessor for NPKSession();
  v18 = swift_allocObject(v17, 32, 7);
  v19 = sub_100004828(&qword_10062FF28);
  v20 = swift_allocObject(v19, 28, 7);
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v18 + 16) = v20;
  v21 = sub_100004828((uint64_t *)&unk_10062FF30);
  v22 = swift_allocObject(v21, 24, 7);
  *(_DWORD *)(v22 + 20) = 0;
  *(_BYTE *)(v22 + 16) = 0;
  *(_QWORD *)&v0[v16] = v18;
  *(_QWORD *)(v18 + 24) = v22;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_service] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_kIDVWatchSessionTimeout] = 0x4014000000000000;
  v23 = &v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_DIPWatchErrorDomain];
  *(_QWORD *)v23 = 0xD000000000000025;
  *((_QWORD *)v23 + 1) = 0x800000010053FBF0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_partitions] = &off_1005FFBD0;
  v24 = &v0[OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate];
  *((_QWORD *)v24 + 1) = 0;
  swift_unknownObjectWeakInit(v24, 0);
  v25 = (objc_class *)type metadata accessor for DIPWatch();
  v56.receiver = v0;
  v56.super_class = v25;
  v51 = objc_msgSendSuper2(&v56, "init");
  v26 = defaultLogger()(v51);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "DIPWatch init called", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = *(void (**)(char *, uint64_t))(v10 + 8);
  v31 = v15;
  v32 = v54;
  v30(v31, v54);
  v33 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v33);
  v55 = _swiftEmptyArrayStorage;
  v34 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v35 = sub_100004828((uint64_t *)&unk_100636400);
  v36 = sub_10001D030();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v35, v36, v4, v34);
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v53);
  v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x800000010053FC20, v9, v6, v3, 0);
  v38 = objc_allocWithZone((Class)NPKIDVRemoteDeviceService);
  v39 = v51;
  v40 = String._bridgeToObjectiveC()();
  v41 = (objc_class *)objc_msgSend(v38, "initWithServiceName:delegate:callbackQueue:", v40, v39, v37);

  v42 = *(Class *)((char *)&v39->isa + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
  *(Class *)((char *)&v39->isa + OBJC_IVAR____TtC8coreidvd8DIPWatch_service) = v41;

  v44 = defaultLogger()(v43);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Successfully registered NPKIDVRemoteDeviceService xpc listener", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
    v48 = v37;
    v37 = v39;
  }
  else
  {
    v48 = v45;
    v45 = v39;
  }

  v30(v13, v32);
  return v39;
}

id sub_100016FC4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  objc_class *v14;
  objc_super v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "DIPWatch deinit", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession];
  swift_retain(v11);
  sub_100015A08();
  swift_release(v11);
  v12 = &v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate];
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakAssign(v12, 0);
  v13 = *(void **)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_service];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8coreidvd8DIPWatch_service] = 0;

  v14 = (objc_class *)type metadata accessor for DIPWatch();
  v16.receiver = v1;
  v16.super_class = v14;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t sub_1000171B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v2[13] = v8;
  *v8 = v2;
  v8[1] = sub_100017258;
  return sub_1000160E0();
}

uint64_t sub_100017258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000172B4, 0, 0);
}

uint64_t sub_1000172B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t type;
  uint64_t v41;
  uint64_t v42;

  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 40);
    defaultLogger()(a1);
    swift_bridgeObjectRetain_n(v3, 2);
    v4 = v2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v1 + 96);
    v9 = *(_QWORD *)(v1 + 72);
    v10 = *(_QWORD *)(v1 + 80);
    if (v7)
    {
      v36 = *(_QWORD *)(v1 + 40);
      v37 = *(_QWORD *)(v1 + 32);
      type = v6;
      v11 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v42 = v39;
      *(_DWORD *)v11 = 136446466;
      v41 = v9;
      v12 = objc_msgSend(v4, "deviceID");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v38 = v10;
      v15 = v14;

      *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v13, v15, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v11 + 4);
      swift_bridgeObjectRelease(v15);

      *(_WORD *)(v11 + 12) = 2082;
      if (v36)
        v16 = v37;
      else
        v16 = 7104878;
      if (v36)
        v17 = v3;
      else
        v17 = 0xE300000000000000;
      swift_bridgeObjectRetain(v3);
      *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v16, v17, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v11 + 14);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease_n(v3, 2);
      _os_log_impl((void *)&_mh_execute_header, v5, type, "Trying to fetch credential preflight status for watch with pairingID: %{public}s, proofingMinWatchOSVersion: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v8, v41);
    }
    else
    {

      swift_bridgeObjectRelease_n(v3, 2);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    v31 = *(_QWORD *)(v1 + 32);
    v30 = *(_QWORD *)(v1 + 40);
    v32 = (_QWORD *)swift_allocObject(&unk_100603A70, 40, 7);
    *(_QWORD *)(v1 + 120) = v32;
    v32[2] = v4;
    v32[3] = v31;
    v32[4] = v30;
    v33 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
    v34 = v4;
    swift_bridgeObjectRetain(v3);
    v35 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v1 + 128) = v35;
    *v35 = v1;
    v35[1] = sub_1000176F4;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v1 + 144, &unk_10062FF20, v32, &type metadata for Bool, 5.0);
  }
  else
  {
    v19 = *(_QWORD *)(v1 + 80);
    v18 = *(_QWORD *)(v1 + 88);
    v21 = *(_QWORD *)(v1 + 64);
    v20 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v21, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v1 + 48));
    v22 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010053FB00, 0, v21, 0, v22, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000023, 0x800000010053FB40, 114);
    defaultLogger()(v26);
    DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_errorRelease(v25);
    v27 = *(_QWORD *)(v1 + 88);
    v28 = *(_QWORD *)(v1 + 64);
    swift_task_dealloc(*(_QWORD *)(v1 + 96));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_1000176F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000177C0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 120));
    v4 = sub_100017760;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100017760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000177C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 120));

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100017824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[23] = a3;
  v4[24] = a4;
  v4[21] = a1;
  v4[22] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[25] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[26] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v7);
  v4[28] = swift_task_alloc(v7);
  v4[29] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000178A4, 0, 0);
}

uint64_t sub_1000178A4()
{
  _QWORD *v0;
  NSString v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  if (v0[24])
    v1 = String._bridgeToObjectiveC()();
  else
    v1 = 0;
  v2 = v0 + 2;
  v0[30] = v1;
  v3 = (void *)v0[22];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100017968;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100016AF8;
  v5[3] = &unk_100603A88;
  v5[4] = v4;
  objc_msgSend(v3, "credentialPreflightStatusForType:minOSVersion:completion:", 1, v1, v5);
  return swift_continuation_await(v2);
}

uint64_t sub_100017968()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 248) = v1;
  if (v1)
    v2 = sub_100017F1C;
  else
    v2 = sub_1000179C8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000179C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = v0 + 160;
  v1 = *(void **)(v0 + 120);

  v2 = (uint64_t)objc_msgSend(v1, "provisionedPassesCount");
  v50 = v0 + 144;
  if (v2 <= 0 && (v2 = (uint64_t)objc_msgSend(v1, "preflightSuccessful"), (v2 & 1) != 0))
  {
    v3 = *(void **)(v0 + 176);
    defaultLogger()(v2);
    v4 = v1;
    v5 = v3;
    v6 = v4;
    v7 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.debug.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 200);
    v47 = *(_QWORD *)(v0 + 208);
    v12 = *(void **)(v0 + 176);
    if (v9)
    {
      v45 = *(_QWORD *)(v0 + 224);
      v13 = swift_slowAlloc(28, -1);
      v41 = swift_slowAlloc(32, -1);
      v51 = v41;
      *(_DWORD *)v13 = 136446722;
      v14 = objc_msgSend(v12, "deviceID");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v43 = v11;
      v17 = v16;

      *(_QWORD *)(v0 + 160) = sub_1000E3AC8(v15, v17, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v0 + 168, v13 + 4);
      swift_bridgeObjectRelease(v17);

      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v17) = objc_msgSend(v6, "preflightSuccessful");

      *(_DWORD *)(v0 + 256) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 260, v13 + 14);

      *(_WORD *)(v13 + 18) = 2048;
      v18 = objc_msgSend(v6, "provisionedPassesCount");

      *(_QWORD *)(v0 + 144) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v0 + 152, v13 + 20);

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Credential preflight check successful for watch with pairingID: %{public}s, preflight status: %{BOOL}d, provisionedPass count: %ld", (uint8_t *)v13, 0x1Cu);
      v19 = 1;
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v43);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v10, v11);
      v19 = 1;
    }
  }
  else
  {
    v20 = *(void **)(v0 + 176);
    defaultLogger()(v2);
    v21 = v1;
    v22 = v20;
    v23 = v21;
    v24 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.debug.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 200);
    v29 = *(void **)(v0 + 176);
    if (v26)
    {
      v46 = *(_QWORD *)(v0 + 208);
      v48 = *(_QWORD *)(v0 + 232);
      v30 = swift_slowAlloc(28, -1);
      v42 = swift_slowAlloc(32, -1);
      v51 = v42;
      *(_DWORD *)v30 = 136446722;
      v31 = objc_msgSend(v29, "deviceID");
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v44 = v28;
      v34 = v33;

      *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v32, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v50, v30 + 4);
      swift_bridgeObjectRelease(v34);

      *(_WORD *)(v30 + 12) = 1024;
      LODWORD(v34) = objc_msgSend(v23, "preflightSuccessful");

      *(_DWORD *)(v0 + 260) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 260, v0 + 264, v30 + 14);

      *(_WORD *)(v30 + 18) = 2048;
      v35 = objc_msgSend(v23, "provisionedPassesCount");

      *(_QWORD *)(v0 + 152) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v49, v30 + 20);

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Credential preflight check failed for watch with pairingID: %{public}s, preflight status: %{BOOL}d, provisionedPass count: %ld", (uint8_t *)v30, 0x1Cu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v44);
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 208);

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v27, v28);
    }
    v19 = 0;
  }
  v38 = *(_QWORD *)(v0 + 224);
  v37 = *(_QWORD *)(v0 + 232);
  v39 = *(_QWORD *)(v0 + 216);
  **(_BYTE **)(v0 + 168) = v19;
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(void **)(v1 + 240);
  v2 = *(_QWORD *)(v1 + 248);
  swift_willThrow(a1);

  defaultLogger()(v4);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v1 + 248);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138543362;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v1 + 128) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v9 + 4);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error occurred in fetching credential preflight status for watch: %{public}@", v9, 0xCu);
    v12 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 248);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 208) + 8))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 200));
  v15 = *(_QWORD *)(v1 + 224);
  v14 = *(_QWORD *)(v1 + 232);
  v16 = *(_QWORD *)(v1 + 216);
  **(_BYTE **)(v1 + 168) = 0;
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000180F8(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100018184()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1[6] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[11] = v5;
  v1[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[15] = swift_task_alloc(v8);
  v1[16] = swift_task_alloc(v8);
  v1[17] = swift_task_alloc(v8);
  v1[18] = swift_task_alloc(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[19] = v9;
  *v9 = v1;
  v9[1] = sub_10001826C;
  return sub_1000160E0();
}

uint64_t sub_10001826C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000182C8, 0, 0);
}

uint64_t sub_1000182C8(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v2 = (void *)v1[20];
  if (!v2)
  {
    v15 = defaultLogger()(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "DIPWatch configureIfNeeded no session set", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v19 = v1[16];
    v20 = v1[13];
    v21 = v1[14];
    v22 = v1[12];
    v50 = v1[11];
    v24 = v1[9];
    v23 = v1[10];
    v25 = v1[7];
    v26 = v1[8];

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v24, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v25);
    v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010053F770, 0, v24, 0, v27, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000013, 0x800000010053FA90, 138);
    v28 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v29 = swift_allocError(v23, v28, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v30, v22, v23);
    v31 = _convertErrorToNSError(_:)(v29);
    swift_willThrow(v31);
    swift_errorRelease(v29);
    v32 = v1[17];
    v34 = v1[15];
    v33 = v1[16];
    v35 = v1[12];
    v36 = v1[9];
    swift_task_dealloc(v1[18]);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    v14 = (uint64_t (*)(void))v1[1];
    return v14();
  }
  v3 = v1[6];
  v4 = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  v1[21] = OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession;
  v5 = *(_QWORD *)(v3 + v4);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = (os_unfair_lock_s *)(v6 + 20);
  swift_retain(v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  LOBYTE(v6) = *(_BYTE *)(v6 + 16);
  os_unfair_lock_unlock(v7);
  v8 = swift_release(v5);
  if ((v6 & 1) != 0)
  {

    v9 = v1[17];
    v11 = v1[15];
    v10 = v1[16];
    v12 = v1[12];
    v13 = v1[9];
    swift_task_dealloc(v1[18]);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    v14 = (uint64_t (*)(void))v1[1];
    return v14();
  }
  v38 = defaultLogger()(v8);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "DIPWatch configure needed", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }
  v42 = v1[18];
  v43 = v1[13];
  v44 = v1[14];
  v45 = v1[6];

  v46 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v1[22] = v46;
  v46(v42, v43);
  v47 = *(_QWORD *)(v45 + OBJC_IVAR____TtC8coreidvd8DIPWatch_partitions);
  v48 = swift_task_alloc(32);
  v1[23] = v48;
  *(_QWORD *)(v48 + 16) = v2;
  *(_QWORD *)(v48 + 24) = v47;
  v49 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v1[24] = v49;
  *v49 = v1;
  v49[1] = sub_1000186B0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000186B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100018888;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 184));
    v4 = sub_10001871C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001871C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = defaultLogger()();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DIPWatch configureWithPartition completed successfully", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  v7 = *(void **)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 48);

  v5(v8, v9);
  v11 = *(_QWORD *)(v10 + v6);
  v12 = *(_QWORD *)(v11 + 24);
  v13 = swift_task_alloc(32);
  *(_BYTE *)(v13 + 16) = 1;
  swift_retain(v11);
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 20));
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 20));
  swift_release(v11);

  swift_task_dealloc(v13);
  v14 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = swift_task_dealloc(*(_QWORD *)(v0 + 184));
  defaultLogger()(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 200);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DIPWatch configureWithPartition returned error %@", v7, 0xCu);
    v10 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v12 = *(_QWORD *)(v0 + 200);
  v30 = *(void **)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  _StringGuts.grow(_:)(49);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v17._countAndFlagsBits = 0xD00000000000002FLL;
  v17._object = (void *)0x800000010053FAD0;
  String.append(_:)(v17);
  *(_QWORD *)(v0 + 32) = v12;
  v18 = sub_100004828((uint64_t *)&unk_100633430);
  _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16, v18, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v19 = *(_QWORD *)(v0 + 16);
  v20 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v13, enum case for DIPError.Code.internalError(_:), v15);
  v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v14, v22, 0, 0);
  v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v19, v20, 0, v13, 0, v21, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000013, 0x800000010053FA90, 152);
  swift_willThrow(v23);
  swift_errorRelease(v12);

  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 128);
  v27 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018BBC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  char *v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  char *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  void *v99;
  uint64_t result;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  void *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v5 = v4;
  v121 = a2;
  v114 = a1;
  v8 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v8);
  v119 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v108 - v16;
  v18 = __chkstk_darwin(v15);
  v118 = (char *)&v108 - v19;
  v20 = __chkstk_darwin(v18);
  v117 = (char *)&v108 - v21;
  v22 = __chkstk_darwin(v20);
  v116 = (char *)&v108 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v108 - v25;
  v27 = defaultLogger()(v24);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v115 = v17;
    v30 = swift_slowAlloc(12, -1);
    v113 = a4;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc(32, -1);
    v110 = v11;
    v33 = v32;
    v123 = v32;
    v120 = (char *)v10;
    *(_DWORD *)v31 = 136446210;
    v109 = v31 + 4;
    v34 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents(v121);
    v111 = a3;
    v112 = v5;
    v35 = v14;
    v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

    v37 = Array.description.getter(v36, &type metadata for String);
    v39 = v38;
    v40 = v36;
    v14 = v35;
    swift_bridgeObjectRelease(v40);
    v41 = v37;
    v17 = v115;
    v122 = sub_1000E3AC8(v41, v39, &v123);
    v10 = (uint64_t)v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v109);
    v42 = v39;
    a3 = v111;
    v5 = v112;
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "DIPWatch event received: %{public}s", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v43 = v31;
    a4 = v113;
    swift_slowDealloc(v43, -1, -1);

    v44 = *(uint64_t (**)(char *, uint64_t))(v110 + 8);
  }
  else
  {

    v44 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  }
  v45 = v44(v26, v10);
  v46 = v121;
  switch(v121)
  {
    case 1:
      v47 = v117;
      defaultLogger()(v45);
      v48 = swift_bridgeObjectRetain_n(a4, 2);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.debug.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v120 = (char *)v10;
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v123 = v52;
        *(_DWORD *)v51 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_1000E3AC8(a3, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v51 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidBecomeActive event for watch with pairingID: %s", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

        v53 = v117;
        v54 = (uint64_t)v120;
      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
        v53 = v47;
        v54 = v10;
      }
      v44(v53, v54);
      v95 = type metadata accessor for TaskPriority(0);
      v96 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v119, 1, 1, v95);
      v97 = (_QWORD *)swift_allocObject(&unk_100603978, 56, 7);
      v97[2] = 0;
      v97[3] = 0;
      v97[4] = v5;
      v97[5] = a3;
      v97[6] = a4;
      swift_bridgeObjectRetain(a4);
      v98 = v5;
      v99 = &unk_10062FEE0;
      goto LABEL_22;
    case 4:
      v63 = type metadata accessor for TaskPriority(0);
      v64 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v119, 1, 1, v63);
      v65 = (_QWORD *)swift_allocObject(&unk_1006039A0, 64, 7);
      v65[2] = 0;
      v65[3] = 0;
      v65[4] = v5;
      v65[5] = a3;
      v66 = v114;
      v65[6] = a4;
      v65[7] = v66;
      swift_bridgeObjectRetain(a4);
      v67 = v5;
      v68 = v66;
      v69 = sub_1001075D4(v64, (uint64_t)&unk_10062FEF0, (uint64_t)v65);
      goto LABEL_28;
    case 8:
      v70 = v116;
      defaultLogger()(v45);
      v71 = swift_bridgeObjectRetain_n(a4, 2);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.debug.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v120 = (char *)v10;
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v123 = v75;
        *(_DWORD *)v74 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_1000E3AC8(a3, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v74 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "DIPWatch received NPKIDVRemoteDeviceServiceEventRequirePrearmCredential event, trying to prearm watch with pairingID: %s", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        v76 = v116;
        v77 = (uint64_t)v120;
      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
        v76 = v70;
        v77 = v10;
      }
      v44(v76, v77);
      v101 = type metadata accessor for TaskPriority(0);
      v96 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v119, 1, 1, v101);
      v97 = (_QWORD *)swift_allocObject(&unk_1006039C8, 56, 7);
      v97[2] = 0;
      v97[3] = 0;
      v97[4] = v5;
      v97[5] = a3;
      v97[6] = a4;
      swift_bridgeObjectRetain(a4);
      v102 = v5;
      v99 = &unk_10062FF00;
LABEL_22:
      v69 = sub_100107718(v96, (uint64_t)v99, (uint64_t)v97);
      goto LABEL_28;
    case 16:
      v78 = v118;
      defaultLogger()(v45);
      v79 = swift_bridgeObjectRetain_n(a4, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.debug.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        v120 = (char *)v10;
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = swift_slowAlloc(32, -1);
        v123 = v83;
        *(_DWORD *)v82 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_1000E3AC8(a3, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v82 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "DIPWatch received NPKIDVRemoteDeviceServiceEventShouldBeDisarmed event for watch with pairingID: %s, trying to unregister for phone lock notifications", v82, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v82, -1, -1);

        v84 = v118;
        v85 = (uint64_t)v120;
      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
        v84 = v78;
        v85 = v10;
      }
      v44(v84, v85);
      result = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate]);
      if (result)
      {
        v103 = result;
        sub_1003B17B4(a3, a4);
        return swift_unknownObjectRelease(v103);
      }
      return result;
    case 32:
      defaultLogger()(v45);
      v86 = swift_bridgeObjectRetain_n(a4, 2);
      v87 = Logger.logObject.getter(v86);
      v88 = v17;
      v89 = static os_log_type_t.debug.getter(v87);
      if (os_log_type_enabled(v87, v89))
      {
        v120 = (char *)v10;
        v90 = swift_slowAlloc(12, -1);
        v115 = v88;
        v91 = (uint8_t *)v90;
        v92 = swift_slowAlloc(32, -1);
        v123 = v92;
        *(_DWORD *)v91 = 136315138;
        swift_bridgeObjectRetain(a4);
        v122 = sub_1000E3AC8(a3, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v91 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v87, v89, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidDeletePass event for watch with pairingID: %s", v91, 0xCu);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v91, -1, -1);

        v93 = v115;
        v94 = (uint64_t)v120;
      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
        v93 = v88;
        v94 = v10;
      }
      v44(v93, v94);
      v104 = type metadata accessor for TaskPriority(0);
      v105 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v119, 1, 1, v104);
      v106 = (_QWORD *)swift_allocObject(&unk_100603950, 56, 7);
      v106[2] = 0;
      v106[3] = 0;
      v106[4] = v5;
      v106[5] = a3;
      v106[6] = a4;
      swift_bridgeObjectRetain(a4);
      v107 = v5;
      v69 = sub_10012E044(v105, (uint64_t)&unk_10062FED0, (uint64_t)v106);
LABEL_28:
      result = swift_release(v69);
      break;
    default:
      defaultLogger()(v45);
      v55 = swift_bridgeObjectRetain_n(a4, 2);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.debug.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = v46;
        v59 = swift_slowAlloc(22, -1);
        v60 = swift_slowAlloc(32, -1);
        v120 = v14;
        v61 = v60;
        v123 = v60;
        *(_DWORD *)v59 = 136315394;
        swift_bridgeObjectRetain(a4);
        v122 = sub_1000E3AC8(a3, a4, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v59 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v59 + 12) = 2048;
        v122 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v59 + 14);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "DIPWatch received unknown event for watch with pairingID: %s, ignoring event: %lu", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        v62 = v120;
      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
        v62 = v14;
      }
      result = v44(v62, v10);
      break;
  }
  return result;
}

uint64_t sub_1000197BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch(sub_1000197D8, 0, 0);
}

uint64_t sub_1000197D8()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
  {
    v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10063EE30 + dword_10063EE30);
    v2 = (_QWORD *)swift_task_alloc(unk_10063EE34);
    *(_QWORD *)(v0 + 56) = v2;
    *v2 = v0;
    v2[1] = sub_100019878;
    return v4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100019878()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10001D0B4, 0, 0);
}

uint64_t sub_1000198D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  v8 = type metadata accessor for Logger(0);
  v7[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[25] = swift_task_alloc(v10);
  v7[26] = swift_task_alloc(v10);
  v7[27] = swift_task_alloc(v10);
  v7[28] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v7[29] = v11;
  *v11 = v7;
  v11[1] = sub_100019974;
  return sub_1000160E0();
}

uint64_t sub_100019974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000199D0, 0, 0);
}

uint64_t sub_1000199D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 240);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 168);
    defaultLogger()(a1);
    v4 = swift_bridgeObjectRetain_n(v3, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v1 + 216);
    v9 = *(_QWORD *)(v1 + 184);
    v10 = *(_QWORD *)(v1 + 192);
    v11 = *(_QWORD *)(v1 + 168);
    if (v7)
    {
      v39 = *(_QWORD *)(v1 + 216);
      v12 = *(_QWORD *)(v1 + 160);
      v38 = *(_QWORD *)(v1 + 192);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = v9;
      v14 = swift_slowAlloc(32, -1);
      v40 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)(v1 + 144) = sub_1000E3AC8(v12, v11, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v13 + 4);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "DIPWatch received NPKIDVRemoteDeviceServiceEventDidUnpair event, trying to remove proofing session for watch with pairingID: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      v15 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v15(v39, v37);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 168), 2);

      v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v15(v8, v9);
    }
    *(_QWORD *)(v1 + 248) = v15;
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v1 + 152) + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate);
    if (Strong)
    {
      v28 = Strong;
      sub_1003B1DB4(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168));
      swift_unknownObjectRelease(v28);
    }
    v29 = v1 + 16;
    v30 = *(void **)(v1 + 176);
    v31 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents(63);
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String);

    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    v34 = NPKIDVRemoteDeviceServiceEventsFromStringsArray(isa);

    *(_QWORD *)(v1 + 56) = v1 + 120;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_100019D58;
    v35 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v36 = (_QWORD *)(v1 + 80);
    v36[1] = 0x40000000;
    v36[2] = sub_10001A8E0;
    v36[3] = &unk_1006039E0;
    v36[4] = v35;
    objc_msgSend(v30, "unregisterFromEvents:withSession:completion:", v34, v2, v36);
    return swift_continuation_await(v29);
  }
  else
  {
    v16 = defaultLogger()(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "DIPWatch no session set", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v20 = *(_QWORD *)(v1 + 224);
    v21 = *(_QWORD *)(v1 + 184);
    v22 = *(_QWORD *)(v1 + 192);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    v23 = *(_QWORD *)(v1 + 216);
    v25 = *(_QWORD *)(v1 + 200);
    v24 = *(_QWORD *)(v1 + 208);
    swift_task_dealloc(*(_QWORD *)(v1 + 224));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100019D58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_100019ED0;
  else
    v2 = sub_100019DB8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100019DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = defaultLogger()();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v0 + 136) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v5 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully unregistered from following watch events %lu", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(void **)(v0 + 240);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 184);

  v6(v8, v9);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 256);
  v3 = swift_willThrow(a1);
  defaultLogger()(v3);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v1 + 256);
    v8 = *(void **)(v1 + 240);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v1 + 128) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v9 + 4);
    *v10 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error occurred in unregistering from watch events %@", v9, 0xCu);
    v12 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 256);

    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  (*(void (**)(_QWORD, _QWORD))(v1 + 248))(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 184));
  v14 = *(_QWORD *)(v1 + 216);
  v16 = *(_QWORD *)(v1 + 200);
  v15 = *(_QWORD *)(v1 + 208);
  swift_task_dealloc(*(_QWORD *)(v1 + 224));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10001A0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch(sub_10001A0D0, 0, 0);
}

uint64_t sub_10001A0D0()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
  {
    v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10063EE38 + dword_10063EE38);
    v2 = (_QWORD *)swift_task_alloc(unk_10063EE3C);
    *(_QWORD *)(v0 + 56) = v2;
    *v2 = v0;
    v2[1] = sub_10001A170;
    return v4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001A170()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10001A1CC, 0, 0);
}

uint64_t sub_10001A1CC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 48) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[20] = v8;
  v6[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v6[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[23] = v10;
  v6[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v6[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[26] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[27] = swift_task_alloc(v13);
  v6[28] = swift_task_alloc(v13);
  v14 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v6[29] = v14;
  *v14 = v6;
  v14[1] = sub_10001A2C0;
  return sub_1000160E0();
}

uint64_t sub_10001A2C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001A31C, 0, 0);
}

uint64_t sub_10001A31C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void **)(v1 + 240);
  if (v2)
  {
    v3 = v1 + 16;
    *(_QWORD *)(v1 + 56) = v1 + 120;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_10001A494;
    v4 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v1 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_10001A8E0;
    v5[3] = &unk_1006039F8;
    v5[4] = v4;
    objc_msgSend(v2, "provisionedCredentialCountForType:completion:", 1, v5);
    return swift_continuation_await(v3);
  }
  else
  {
    v7 = defaultLogger()(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "DIPWatch no session set", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(_QWORD *)(v1 + 224);
    v12 = *(_QWORD *)(v1 + 200);
    v13 = *(_QWORD *)(v1 + 208);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v14 = *(_QWORD *)(v1 + 216);
    v15 = *(_QWORD *)(v1 + 192);
    v16 = *(_QWORD *)(v1 + 168);
    swift_task_dealloc(*(_QWORD *)(v1 + 224));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001A494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 248) = v1;
  if (v1)
    v2 = sub_10001A864;
  else
    v2 = sub_10001A4F4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001A4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  if (*(_QWORD *)(v0 + 120)
    || (Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 128) + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate),
        (*(_QWORD *)(v0 + 256) = Strong) == 0))
  {

    v1 = *(_QWORD *)(v0 + 216);
    v2 = *(_QWORD *)(v0 + 192);
    v3 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10063EE48 + dword_10063EE48);
    v6 = (_QWORD *)swift_task_alloc(unk_10063EE4C);
    *(_QWORD *)(v0 + 264) = v6;
    *v6 = v0;
    v6[1] = sub_10001A5CC;
    return v7(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  }
}

uint64_t sub_10001A5CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10001A69C;
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 256));
    v4 = sub_10001A638;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001A638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A69C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(void **)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 256));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.unableToDeletePrearmTrustKey(_:), v9);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010053FA10, 0, v7, 0, v10, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000041, 0x800000010053FA40, 203);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v12 = swift_allocError(v5, v11, 0, 0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v13, v4, v5);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v12, 0, 0xE000000000000000, v3);

  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v3, v20);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_errorRelease(v12);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A864()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  swift_willThrow();

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A8E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t type metadata accessor for DIPWatch()
{
  return objc_opt_self(_TtC8coreidvd8DIPWatch);
}

uint64_t sub_10001A9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[22] = v6;
  v4[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[25] = v8;
  v4[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE54);
  v4[27] = v9;
  *v9 = v4;
  v9[1] = sub_10001AA90;
  return sub_100018184();
}

uint64_t sub_10001AA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10001AEE0;
  else
    v3 = sub_10001AAF4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10001AAF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DIPWatch createCredentialInPartition called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[25];
  v6 = v1[26];
  v8 = v1[24];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[29] = v9;
  *v9 = v1;
  v9[1] = sub_10001ABD4;
  return sub_1000160E0();
}

uint64_t sub_10001ABD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001AC30, 0, 0);
}

uint64_t sub_10001AC30()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 240);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = *(_QWORD *)(v0 + 152);
    v4 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 248) = v4;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10001AE14;
    v5 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v6 = (_QWORD *)(v0 + 80);
    v6[1] = 0x40000000;
    v6[2] = sub_1003A4D14;
    v6[3] = &unk_100603928;
    v6[4] = v5;
    objc_msgSend(v1, "createCredentialInPartition:options:completion:", v4, v3, v6);
    return swift_continuation_await(v2);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 168));
    v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053F860, 0, v8, 0, v9, 0xD000000000000045, 0x800000010053F7A0, 0xD00000000000001DLL, 0x800000010053F990, 219);
    v13 = swift_willThrow(v12);
    v14 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 184);
    swift_willThrow(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001AE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_10001AF3C;
  else
    v2 = sub_10001AE74;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001AE74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);

  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v5);
}

uint64_t sub_10001AEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  swift_willThrow();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AF3C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 248);
  v2 = *(void **)(v0 + 240);
  swift_willThrow();

  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  swift_willThrow();
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[22] = v7;
  v3[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10062FE54);
  v3[24] = v8;
  *v8 = v3;
  v8[1] = sub_10001B048;
  return sub_100018184();
}

uint64_t sub_10001B048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10001B474;
  else
    v3 = sub_10001B0AC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10001B0AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DIPWatch deleteCredential called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[22];
  v6 = v1[23];
  v8 = v1[21];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[26] = v9;
  *v9 = v1;
  v9[1] = sub_10001B18C;
  return sub_1000160E0();
}

uint64_t sub_10001B18C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001B1E8, 0, 0);
}

uint64_t sub_10001B1E8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 216);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 224) = v3;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10001B3BC;
    v4 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_100454F88;
    v5[3] = &unk_100603910;
    v5[4] = v4;
    objc_msgSend(v1, "deleteCredential:completion:", v3, v5);
    return swift_continuation_await(v2);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053F860, 0, v7, 0, v8, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000014, 0x800000010053F970, 232);
    v12 = swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001B3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 232) = v1;
  if (v1)
    v2 = sub_10001B4D0;
  else
    v2 = sub_10001B41C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B41C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  swift_willThrow();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B4D0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 216);
  swift_willThrow();

  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  swift_willThrow();
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10062FE54);
  v3[25] = v8;
  *v8 = v3;
  v8[1] = sub_10001B5DC;
  return sub_100018184();
}

uint64_t sub_10001B5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10001BA18;
  else
    v3 = sub_10001B640;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10001B640(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DIPWatch generateKeySigningKeyForCredential called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[23];
  v6 = v1[24];
  v8 = v1[22];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[27] = v9;
  *v9 = v1;
  v9[1] = sub_10001B720;
  return sub_1000160E0();
}

uint64_t sub_10001B720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001B77C, 0, 0);
}

uint64_t sub_10001B77C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 224);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 232) = v3;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10001B958;
    v4 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_1000180F8;
    v5[3] = &unk_1006038F8;
    v5[4] = v4;
    objc_msgSend(v1, "generateKeySigningKeyForCredential:completion:", v3, v5);
    return swift_continuation_await(v2);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053F860, 0, v7, 0, v8, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000025, 0x800000010053F940, 245);
    v12 = swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 168);
    swift_willThrow(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001B958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 240) = v1;
  if (v1)
    v2 = sub_10001BA74;
  else
    v2 = sub_10001B9B8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B9B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);

  v4 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_10001BA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  swift_willThrow();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001BA74()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 224);
  swift_willThrow();

  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  swift_willThrow();
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10062FE54);
  v3[25] = v8;
  *v8 = v3;
  v8[1] = sub_10001BB80;
  return sub_100018184();
}

uint64_t sub_10001BB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10001D0B0;
  else
    v3 = sub_10001BBE4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10001BBE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DIPWatch generateDeviceEncryptionKeyForCredential called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[23];
  v6 = v1[24];
  v8 = v1[22];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[27] = v9;
  *v9 = v1;
  v9[1] = sub_10001BCC4;
  return sub_1000160E0();
}

uint64_t sub_10001BCC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001BD20, 0, 0);
}

uint64_t sub_10001BD20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 224);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 232) = v3;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10001BF04;
    v4 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_1000180F8;
    v5[3] = &unk_1006038E0;
    v5[4] = v4;
    objc_msgSend(v1, "generateDeviceEncryptionKeyForCredential:completion:", v3, v5);
    return swift_continuation_await(v2);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053F860, 0, v7, 0, v8, 0xD000000000000045, 0x800000010053F7A0, 0xD00000000000002BLL, 0x800000010053F8E0, 258);
    v12 = swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 168);
    swift_willThrow(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001BF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 240) = v1;
  if (v1)
    v2 = sub_10001D0A8;
  else
    v2 = sub_10001D0A4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001BF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v3[25] = v8;
  *v8 = v3;
  v8[1] = sub_10001C000;
  return sub_1000160E0();
}

uint64_t sub_10001C000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001C05C, 0, 0);
}

uint64_t sub_10001C05C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 208);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = *(_QWORD *)(v0 + 144);
    v4 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 216) = v4;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10001C278;
    v5 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v6 = (_QWORD *)(v0 + 80);
    v6[1] = 0x40000000;
    v6[2] = sub_10001C3D8;
    v6[3] = &unk_1006038C8;
    v6[4] = v5;
    objc_msgSend(v1, "generatePresentmentKeysForCredential:numKeys:completion:", v4, v3, v6);
    return swift_continuation_await(v2);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 192);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 176));
    v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v12 = swift_allocError(v10, v11, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x800000010053F860, 0, v8, 0, v9, 0xD000000000000045, 0x800000010053F7A0, 0xD00000000000002FLL, 0x800000010053F890, 283);
    v14 = swift_willThrow(v13);
    v15 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    defaultLogger()(v14);
    DIPRecordError(_:message:log:)(v12, 0, 0xE000000000000000, v16);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    swift_willThrow(v19);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001C278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 224) = v1;
  if (v1)
    v2 = sub_10001C338;
  else
    v2 = sub_10001C2D8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001C2D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);

  v4 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_10001C338()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 216);
  v2 = *(void **)(v0 + 208);
  ((void (*)(void))swift_willThrow)();

  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  defaultLogger()();
  DIPRecordError(_:message:log:)(v3, 0, 0xE000000000000000, v5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_willThrow(v8);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C3D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_10001CFF8(0, (unint64_t *)&qword_10062FEB0, DCCredentialCryptoKey_ptr);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_10001C480(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_100004828(&qword_10062FF10);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100603A20, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10001CF08;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001CA28;
  aBlock[3] = &unk_100603A38;
  v11 = _Block_copy(aBlock);
  swift_release(v13);
  objc_msgSend(a2, "configureWithPartition:ackHandler:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_10001C5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v45 - v14;
  if (a1)
  {
    v16 = swift_errorRetain(a1);
    defaultLogger()(v16);
    swift_errorRetain(a1);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v48 = v4;
      v20 = swift_slowAlloc(12, -1);
      v46 = v9;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc(8, -1);
      v49 = v7;
      v45 = (_QWORD *)v22;
      v47 = a2;
      *(_DWORD *)v21 = 138412290;
      swift_errorRetain(a1);
      v23 = _swift_stdlib_bridgeErrorToNSError(a1);
      v51 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4);
      v24 = v45;
      *v45 = v23;
      v4 = v48;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "DIPWatch configureWithPartition returned error %@", v21, 0xCu);
      v25 = sub_100004828(&qword_1006308B0);
      swift_arrayDestroy(v24, 1, v25);
      v26 = v24;
      v7 = v49;
      swift_slowDealloc(v26, -1, -1);
      v27 = v21;
      v9 = v46;
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v51 = 0;
    v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v36._countAndFlagsBits = 0xD00000000000002FLL;
    v36._object = (void *)0x800000010053FAD0;
    String.append(_:)(v36);
    v50 = a1;
    v37 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v50, &v51, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v38 = v51;
    v39 = v52;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v4);
    v40 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v41 = type metadata accessor for DIPError(0);
    v42 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v43 = swift_allocError(v41, v42, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v38, v39, 0, v7, 0, v40, 0xD000000000000045, 0x800000010053F7A0, 0xD000000000000019, 0x800000010053FAB0, 312);
    v51 = v43;
    v44 = sub_100004828(&qword_10062FF10);
    CheckedContinuation.resume(throwing:)(&v51, v44);
    return swift_errorRelease(a1);
  }
  else
  {
    v28 = defaultLogger()(v13);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      v31 = v9;
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "DIPWatch configureWithPartition completed successfully", v32, 2u);
      v33 = v32;
      v9 = v31;
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v34 = sub_100004828(&qword_10062FF10);
    return CheckedContinuation.resume(returning:)(v34, v34);
  }
}

void sub_10001CA28(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_10001CA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10062FE74);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0AC;
  return sub_10001BAE4(a1, a2);
}

uint64_t sub_10001CADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10062FE7C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001CB44;
  return sub_10001BF64(a1, a2, a3);
}

uint64_t sub_10001CB44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10001CB98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001CBBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10062FEA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return sub_100015D98(a1, v4);
}

uint64_t sub_10001CC18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10062FECC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  return sub_10001A1E8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10001CC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc(dword_10062FEDC);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100007EE8;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_10001A0D0, 0, 0);
}

uint64_t sub_10001CD1C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001CD58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10062FEEC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D0A0;
  return sub_1000198D4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10001CDE8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001CE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc(dword_10062FEFC);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001D0A0;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1000197D8, 0, 0);
}

void sub_10001CE9C(uint64_t a1)
{
  uint64_t v1;

  sub_10001C480(a1, *(void **)(v1 + 16));
}

uint64_t sub_10001CEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100004828(&qword_10062FF10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001CF08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100004828(&qword_10062FF10) - 8) + 80);
  return sub_10001C5D0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10001CF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001CF58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001CF60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001CF8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10062FF1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return sub_100017824(a1, v4, v5, v6);
}

uint64_t sub_10001CFF8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10001D030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062FF50;
  if (!qword_10062FF50)
  {
    v1 = sub_100013E24((uint64_t *)&unk_100636400);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10062FF50);
  }
  return result;
}

uint64_t sub_10001D07C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

ValueMetadata *_s35MobileDocumentReaderDeletionUtilityOMa()
{
  return &_s35MobileDocumentReaderDeletionUtilityON;
}

uint64_t sub_10001D0C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_10062FF68 + dword_10062FF68);
  v1 = (_QWORD *)swift_task_alloc(unk_10062FF6C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return v3();
}

uint64_t sub_10001D120()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Logger(0);
  v0[39] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[40] = v2;
  v0[41] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001D17C, 0, 0);
}

uint64_t sub_10001D17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  _QWORD *v18;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MobileDocumentReaderDeletionUtility attempting to delete data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 320);
  v6 = *(_QWORD *)(v1 + 328);
  v8 = *(_QWORD *)(v1 + 312);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = type metadata accessor for SESKeystore(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = SESKeystore.init()();
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v11 = qword_1006702A0;
  v12 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v13 = (uint64_t)&v12[4];
  v14 = v12 + 52;
  os_unfair_lock_lock(v12 + 52);
  sub_100139D14(v13, v11, (_OWORD *)(v1 + 16));
  os_unfair_lock_unlock(v14);
  v15 = *(_QWORD *)(v1 + 72);
  swift_retain(v15);
  sub_10001D410((_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 296) = type metadata accessor for MobileDocumentReaderDataContainer();
  *(_QWORD *)(v1 + 304) = sub_10001D444();
  *(_QWORD *)(v1 + 272) = v15;
  v16 = type metadata accessor for MobileDocumentReaderAuthenticationStorage();
  inited = swift_initStackObject(v16, v1 + 208);
  *(_QWORD *)(v1 + 336) = inited;
  *(_QWORD *)(inited + 16) = v10;
  sub_100008018((__int128 *)(v1 + 272), inited + 24);
  v18 = (_QWORD *)swift_task_alloc(dword_100634A54);
  *(_QWORD *)(v1 + 344) = v18;
  *v18 = v1;
  v18[1] = sub_10001D364;
  return sub_1000F5DE0();
}

uint64_t sub_10001D364()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  return swift_task_switch(sub_10001D3B8, 0, 0);
}

uint64_t sub_10001D3B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  swift_setDeallocating(v2);
  swift_release(*(_QWORD *)(v2 + 16));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v2 + 24));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_10001D410(_QWORD *a1)
{
  destroy for Environment(a1);
  return a1;
}

unint64_t sub_10001D444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10062FF70;
  if (!qword_10062FF70)
  {
    v1 = type metadata accessor for MobileDocumentReaderDataContainer();
    result = swift_getWitnessTable(&unk_100535988, v1);
    atomic_store(result, (unint64_t *)&qword_10062FF70);
  }
  return result;
}

_QWORD *sub_10001D48C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *result;

  v0 = sub_10001D4D0();
  v1 = type metadata accessor for IdentityBiomeBackgroundActivityProvider();
  swift_allocObject(v1, 40, 7);
  result = sub_10001D670((uint64_t)v0);
  qword_100670098 = (uint64_t)result;
  return result;
}

_QWORD *sub_10001D4D0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;
  _QWORD v20[5];

  v0 = type metadata accessor for IdentityBMUserProofingStreamWrapper();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = (id)BiomeLibrary();
  v3 = objc_msgSend(v2, "WalletPaymentsCommerce");
  swift_unknownObjectRelease(v2);
  v4 = objc_msgSend(v3, "UserProofing");
  swift_unknownObjectRelease(v3);
  v5 = objc_msgSend(v4, "Result");
  swift_unknownObjectRelease(v4);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = type metadata accessor for BMUserProofingEventFactory();
  v7 = swift_allocObject(v6, 16, 7);
  v8 = objc_msgSend(objc_allocWithZone((Class)IdentityProofingBiomeDataDeletionManager), "init");
  v20[3] = v0;
  v20[4] = &off_100608318;
  v20[0] = v1;
  v9 = type metadata accessor for IdentityProofingBiomeManager();
  v10 = (_QWORD *)swift_allocObject(v9, 80, 7);
  v11 = sub_10001E624((uint64_t)v20, v0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  v18 = v0;
  v19 = &off_100608318;
  *(_QWORD *)&v17 = v15;
  v10[9] = 90;
  sub_100008018(&v17, (uint64_t)(v10 + 2));
  v10[7] = v7;
  v10[8] = v8;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v20);
  return v10;
}

_QWORD *sub_10001D670(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0xD000000000000018;
  v2[3] = 0x800000010053FD10;
  v9 = defaultLogger()(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "IdentityBiomeBackgroundActivityProvider initialized", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v2[4] = a1;
  return v2;
}

uint64_t sub_10001D78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v3[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[19] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v8);
  v3[21] = swift_task_alloc(v8);
  v3[22] = swift_task_alloc(v8);
  return swift_task_switch(sub_10001D834, 0, 0);
}

uint64_t sub_10001D834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  _QWORD *v47;

  v1 = os_transaction_create("IdentityBiomeBackgroundActivityProvider");
  *(_QWORD *)(v0 + 184) = v1;
  v2 = type metadata accessor for DIPAccountManager(0);
  static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 16), v2);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  sub_10000806C((_QWORD *)(v0 + 16), v3);
  v5 = dispatch thunk of DIPAccountManagerProtocol.primaryAppleAccount()(v3, v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 56), v7);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    sub_10000806C((_QWORD *)(v0 + 56), v8);
    v21 = dispatch thunk of DIPAccountManagerProtocol.isHSA2Enabled(account:)(v6, v8, v9);
    v22 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 56));
    if ((v21 & 1) != 0)
    {

      v23 = type metadata accessor for IdentityProofingDataContext();
      swift_allocObject(v23, 24, 7);
      sub_1000D6044();
      *(_QWORD *)(v0 + 192) = v24;
      v35 = v24;
      v37 = *(_QWORD *)(v0 + 128);
      v36 = *(_QWORD *)(v0 + 136);
      v38 = *(_QWORD *)(v0 + 120);
      v40 = *(_QWORD *)(v0 + 96);
      v39 = *(_QWORD *)(v0 + 104);
      v41 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 32);
      v42 = (_QWORD *)swift_allocObject(&unk_100603B10, 48, 7);
      *(_QWORD *)(v0 + 200) = v42;
      v42[2] = v35;
      v42[3] = v40;
      v42[4] = v39;
      v42[5] = v41;
      v43 = swift_allocObject(&unk_100603B38, 32, 7);
      *(_QWORD *)(v0 + 208) = v43;
      *(_QWORD *)(v43 + 16) = sub_10001E58C;
      *(_QWORD *)(v43 + 24) = v42;
      v44 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
      v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 104);
      swift_retain(v41);
      swift_retain(v35);
      swift_retain(v39);
      v45(v36, v44, v38);
      v46 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
      swift_retain(v42);
      v47 = (_QWORD *)swift_task_alloc(v46);
      *(_QWORD *)(v0 + 216) = v47;
      *v47 = v0;
      v47[1] = sub_10001DC50;
      return NSManagedObjectContext.perform<A>(schedule:_:)();
    }
    v25 = defaultLogger()(v22);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Skipping biome background activity because account is not HSA2", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 168);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);

    v18 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v19 = v29;
    v20 = v30;
  }
  else
  {
    v10 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
    v11 = defaultLogger()(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Skipping biome background activity because user is not logged in", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 152);

    v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v19 = v15;
    v20 = v16;
  }
  v18(v19, v20);
  swift_unknownObjectRelease(v1);
  v32 = *(_QWORD *)(v0 + 168);
  v33 = *(_QWORD *)(v0 + 160);
  v34 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DC50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
    swift_release(v4);
    v5 = sub_10001DD64;
  }
  else
  {
    v6 = v2[25];
    (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10001DCFC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001DCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_unknownObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 200));
  v2 = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  defaultLogger()(v2);
  DIPRecordError(_:message:log:)(v3, 0, 0xE000000000000000, v5);
  swift_errorRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_unknownObjectRelease(v4);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10001DE20(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  _QWORD *v27;
  _BYTE *v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _BYTE *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void (*v47)(_BYTE *, uint64_t);
  _BYTE *v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_BYTE *, uint64_t);
  _BYTE *v60;
  _BYTE *v61;
  char v62;
  id v63;
  id v64;
  _BYTE *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  id v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  char v88;
  _BYTE v89[12];
  unsigned int v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  id v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  void (*v101)(void);
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  Swift::String v106;

  v104 = a4;
  v101 = a2;
  v102 = a3;
  v4 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v4);
  v99 = &v89[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v100 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v103 = *(_QWORD **)(v100 - 8);
  v6 = __chkstk_darwin(v100);
  v8 = &v89[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v89[-v9];
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v89[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13);
  v18 = &v89[-v17];
  v19 = __chkstk_darwin(v16);
  v21 = &v89[-v20];
  __chkstk_darwin(v19);
  v23 = &v89[-v22];
  v24 = v105;
  v25 = (void *)sub_1000D828C();
  if (!v24)
  {
    v26 = v23;
    v92 = v15;
    v93 = v21;
    v96 = v8;
    v97 = v12;
    v105 = 0;
    v91 = v18;
    v95 = v10;
    v27 = v103;
    v98 = v11;
    if (v25)
    {
      v94 = v25;
      v28 = v95;
      v101();
      v29 = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
      v30 = v27;
      v31 = (_QWORD *)v27[13];
      v32 = v96;
      v33 = v100;
      ((void (*)(_BYTE *, _QWORD, uint64_t))v31)(v96, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v100);
      v34 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v28, v32);
      v35 = (void (*)(_BYTE *, uint64_t))v30[1];
      v35(v32, v33);
      v36 = ((uint64_t (*)(_BYTE *, uint64_t))v35)(v28, v33);
      if ((v34 & 1) != 0)
        goto LABEL_14;
      v90 = v29;
      v103 = v31;
      v42 = v93;
      v43 = defaultLogger()(v36);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.debug.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Successfully fetched proofing biome data", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      v47 = *(void (**)(_BYTE *, uint64_t))(v97 + 8);
      v48 = v42;
      v49 = v98;
      v47(v48, v98);
      v50 = objc_msgSend(v94, "optInDate");
      if (v50)
      {
        v51 = v50;
        v52 = (uint64_t)v99;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v50);

        v53 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
      }
      else
      {
        v54 = type metadata accessor for Date(0);
        v52 = (uint64_t)v99;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v99, 1, 1, v54);
      }
      v55 = v105;
      v56 = sub_1000CFC30(v52);
      v57 = sub_10001E5E4(v52);
      if (v55)
        goto LABEL_14;
      if ((v56 & 1) != 0)
      {
        sub_1000CE914();

        return;
      }
      v58 = v33;
      v105 = 0;
      v59 = v35;
      v60 = v95;
      ((void (*)(uint64_t))v101)(v57);
      v61 = v96;
      ((void (*)(_BYTE *, _QWORD, uint64_t))v103)(v96, v90, v58);
      v62 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v60, v61);
      v59(v61, v58);
      v59(v60, v58);
      if ((v62 & 1) != 0)
      {
LABEL_14:

        return;
      }
      v63 = v94;
      v64 = objc_msgSend(v94, "isDonated");
      if ((v64 & 1) != 0)
      {
        v65 = v92;
        v66 = defaultLogger()(v64);
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.debug.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "The biome data has already been donated.", v69, 2u);
          swift_slowDealloc(v69, -1, -1);
        }
LABEL_21:

        v47(v65, v49);
        return;
      }
      v70 = objc_msgSend(v63, "proofingSessionID");
      if (!v70)
      {
        v65 = v91;
        v81 = defaultLogger()(0);
        v67 = Logger.logObject.getter(v81);
        v82 = static os_log_type_t.debug.getter(v67);
        if (os_log_type_enabled(v67, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v82, "Proofing Session ID doesn't exist in the proofing biome meta data. Exiting...", v83, 2u);
          swift_slowDealloc(v83, -1, -1);
        }
        goto LABEL_21;
      }
      v71 = v70;
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v74 = v73;

      v75 = objc_msgSend(v63, "proofingDecision");
      if (v75)
      {
        v76 = v75;
        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v79 = v78;

        v106._countAndFlagsBits = v77;
        v106._object = v79;
        v80 = sub_1003D0724(v106);
        if (v80 == 6)
        {
          swift_bridgeObjectRelease(v74);
          goto LABEL_14;
        }
        v84 = v80;
        v85 = v95;
        v101();
        v86 = v96;
        v87 = v100;
        ((void (*)(_BYTE *, _QWORD, uint64_t))v103)(v96, v90, v100);
        v88 = static DIPBackgroundDeferralStatus.== infix(_:_:)(v85, v86);
        v59(v86, v87);
        v59(v85, v87);
        if ((v88 & 1) == 0)
          sub_1000CDA74(v72, v74, v84);

        swift_bridgeObjectRelease(v74);
      }
      else
      {
        swift_bridgeObjectRelease(v74);

      }
    }
    else
    {
      v37 = v26;
      v38 = defaultLogger()(0);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "No proofing biome data exists. Exiting...", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v37, v98);
    }
  }
}

uint64_t sub_10001E50C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for IdentityBiomeBackgroundActivityProvider()
{
  return objc_opt_self(_TtC8coreidvd39IdentityBiomeBackgroundActivityProvider);
}

uint64_t sub_10001E558()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10001E58C()
{
  uint64_t v0;

  sub_10001DE20(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10001E5A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001E5CC()
{
  uint64_t v0;

  return sub_10038E424(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10001E5E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100633990);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001E624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10001E64C()
{
  return 1;
}

Swift::Int sub_10001E654()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10001E694()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10001E6B8(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10001E6F4()
{
  return 0x6574707972636E65;
}

uint64_t sub_10001E718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464)
  {
    result = swift_bridgeObjectRelease(0xED00006174614464);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED00006174614464, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10001E7D0()
{
  return 0;
}

void sub_10001E7DC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10001E7E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022CE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001E810(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100022CE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001E838@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v18 = a2;
  v20 = sub_100004828(&qword_100630278);
  v17 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v19 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100630350);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocUploadHandler.DocUploadResult(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_100022CE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DocUploadHandler.DocUploadResult.CodingKeys, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    sub_100022D24(&qword_100630358, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageWithKeyWrap<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v11, v19, v20);
    sub_100022D68((uint64_t)v11, v18);
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
}

uint64_t sub_10001E9F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001E838(a1, a2);
}

uint64_t sub_10001EA0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_100004828(&qword_100630338);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000806C(a1, v8);
  v10 = sub_100022CE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DocUploadHandler.DocUploadResult.CodingKeys, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys, v10, v8, v9);
  sub_100004828(&qword_100630278);
  sub_100022D24(&qword_100630348, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageWithKeyWrap<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_BYTE *sub_10001EB18@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10001EB28(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  return specialized Array._endMutation()(v7);
}

uint64_t sub_10001EBA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;

  v3 = *a1;
  swift_retain(a2);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = sub_100020878(v4, a2);
  v7 = v6;
  swift_bridgeObjectRelease(v3);
  result = swift_release(a2);
  if ((v7 & 1) == 0)
  {
    v9 = sub_10041F718(v5);
    return swift_release(v9);
  }
  return result;
}

void sub_10001EC1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;

  v2 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*a1, 2);
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease_n(v2, 2);
    return;
  }
LABEL_13:
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v2, 3);
  v3 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v2);
  if (!v3)
    goto LABEL_11;
LABEL_3:
  v4 = 4;
  while (1)
  {
    v5 = v4 - 4;
    if ((v2 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_12;
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8 * v4);
      swift_retain(v6);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    v8 = *(_QWORD *)(v6 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
    *(_BYTE *)(v8 + 16) = 1;
    v9 = (os_unfair_lock_s *)(v8 + 20);
    if (v1)
      break;
    os_unfair_lock_unlock(v9);
    swift_release(v6);
    ++v4;
    if (v7 == v3)
      goto LABEL_11;
  }
  os_unfair_lock_unlock(v9);
  __break(1u);
}

uint64_t sub_10001ED44(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  sub_100020E3C(a1, a2, a3, a4, a5, a6);
  return swift_release(a5);
}

void sub_10001ED68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "DocUploadHandler.cancelPendingUploads: Signaling cancel.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 16) + 16);
  v13 = (uint64_t *)&v12[4];
  v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_10001EC1C(v13);
  os_unfair_lock_unlock(v14);
}

uint64_t sub_10001EE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  v71 = a6;
  v72 = a7;
  v69 = a2;
  v70 = a5;
  v65 = a3;
  v66 = a4;
  v68 = a1;
  v79 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
  v77 = *(_QWORD *)(v79 - 8);
  v67 = *(_QWORD *)(v77 + 64);
  __chkstk_darwin(v79);
  v78 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EncryptedMessageEntity(0);
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  v64 = *(_QWORD *)(v75 + 64);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v11;
  v12 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPSignpost(0);
  v19 = *(_QWORD *)(v18 - 8);
  v74 = v18;
  v20 = *(_QWORD *)(v19 + 64);
  v21 = v19;
  v22 = __chkstk_darwin(v18);
  v58 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v58 - v24;
  static DaemonSignposts.uploadAssetsCloudKitRequest.getter(v23);
  v63 = v25;
  DIPSignpost.init(_:)(v17);
  v26 = type metadata accessor for DocUploadHandler.UploadRequestToken();
  v27 = swift_allocObject(v26, 24, 7);
  v28 = sub_100004828((uint64_t *)&unk_10062FF30);
  v29 = swift_allocObject(v28, 24, 7);
  *(_DWORD *)(v29 + 20) = 0;
  *(_BYTE *)(v29 + 16) = 0;
  *(_QWORD *)(v27 + 16) = v29;
  v60 = v27;
  v30 = *(os_unfair_lock_s **)(*(_QWORD *)(v7 + 16) + 16);
  v31 = v30 + 4;
  v32 = v30 + 6;
  os_unfair_lock_lock(v30 + 6);
  sub_10001EB28(v31, v27);
  os_unfair_lock_unlock(v32);
  v62 = v14;
  static TaskPriority.userInitiated.getter();
  v33 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 0, 1, v33);
  v73 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v18);
  v34 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v11, v65, v76);
  v35 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v78, v66, v79);
  v36 = *(unsigned __int8 *)(v21 + 80);
  v37 = (v36 + 48) & ~v36;
  v38 = (v20 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(unsigned __int8 *)(v34 + 80);
  v41 = (v40 + v39 + 8) & ~v40;
  v42 = (v64 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(unsigned __int8 *)(v35 + 80);
  v44 = (v43 + v42 + 8) & ~v43;
  v45 = (v67 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v46 = (char *)swift_allocObject(&unk_100603BC8, v45 + 16, v36 | v40 | v43 | 7);
  *((_QWORD *)v46 + 2) = 0;
  *((_QWORD *)v46 + 3) = 0;
  v48 = v60;
  v47 = v61;
  *((_QWORD *)v46 + 4) = v61;
  *((_QWORD *)v46 + 5) = v48;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v46[v37], v58, v74);
  v50 = v68;
  v49 = v69;
  *(_QWORD *)&v46[v38] = v68;
  *(_QWORD *)&v46[v39] = v49;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v46[v41], v59, v76);
  v51 = v70;
  *(_QWORD *)&v46[v42] = v70;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(&v46[v44], v78, v79);
  v52 = &v46[v45];
  v53 = v72;
  *(_QWORD *)v52 = v71;
  *((_QWORD *)v52 + 1) = v53;
  swift_retain(v47);
  swift_retain(v48);
  swift_retain(v50);
  v54 = v51;
  swift_retain(v53);
  v55 = (uint64_t)v62;
  v56 = sub_10001FEEC((uint64_t)v62, (uint64_t)&unk_100630268, (uint64_t)v46);
  swift_release(v56);
  swift_release(v48);
  sub_100008030(v55, &qword_10062FEC0);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v63, v74);
}

uint64_t sub_10001F28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)(v8 + 232) = v18;
  *(_OWORD *)(v8 + 216) = v17;
  *(_OWORD *)(v8 + 200) = v16;
  *(_QWORD *)(v8 + 184) = a7;
  *(_QWORD *)(v8 + 192) = a8;
  *(_QWORD *)(v8 + 168) = a5;
  *(_QWORD *)(v8 + 176) = a6;
  *(_QWORD *)(v8 + 160) = a4;
  v9 = type metadata accessor for DocUploadHandler.DocUploadResult(0);
  *(_QWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_100630278);
  *(_QWORD *)(v8 + 256) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 264) = v11;
  *(_QWORD *)(v8 + 272) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 280) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 288) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 296) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 304) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 312) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 320) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 328) = swift_task_alloc(v14);
  return swift_task_switch(sub_10001F38C, 0, 0);
}

uint64_t sub_10001F38C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, char, char, uint64_t);

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DocUploadHandler.startUploadTask: Saving assets to CloudKit.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[41];
  v7 = v1[35];
  v8 = v1[36];
  v9 = v1[23];
  v10 = v1[21];

  v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[42] = v11;
  v11(v6, v7);
  swift_beginAccess(v9 + 16, v1 + 12, 0, 0);
  v12 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain(v12);
  v14 = sub_100422FE0(v13);
  v1[43] = v14;
  swift_bridgeObjectRelease(v12);
  v15 = type metadata accessor for DocUploadHandler.UploadRequestToken();
  v1[2] = v10;
  v1[5] = v15;
  v1[6] = &off_100603B50;
  v16 = unk_100630284;
  v19 = (uint64_t (*)(uint64_t, uint64_t, char, char, uint64_t))((char *)&dword_100630280 + dword_100630280);
  swift_retain(v10);
  v17 = (_QWORD *)swift_task_alloc(v16);
  v1[44] = v17;
  *v17 = v1;
  v17[1] = sub_10001F508;
  return v19((uint64_t)v14, v1[24], 1, 1, (uint64_t)(v1 + 2));
}

uint64_t sub_10001F508()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 344));
  if (v0)
  {
    v4 = sub_10001FC20;
  }
  else
  {
    sub_100008030(v2 + 16, (uint64_t *)&unk_1006371C0);
    v4 = sub_10001F590;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001F590()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(_QWORD, unint64_t, uint64_t);
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t *v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint8_t *v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, unint64_t, _QWORD);
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;

  v83 = (_QWORD *)(v0 + 56);
  v1._object = (void *)0x8000000100540020;
  v2._countAndFlagsBits = 0x3532616566656666;
  v2._object = (void *)0xE800000000000000;
  v1._countAndFlagsBits = 0xD00000000000003BLL;
  logMilestone(tag:description:)(v2, v1);
  v4 = defaultLogger()(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DocUploadHandler.startUploadTask: Creating encrypted message.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v80 = *(_QWORD *)(v0 + 360);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 200);

  v8(v9, v10);
  v15 = type metadata accessor for TopekaHPKEEncryptor();
  v16 = swift_allocObject(v15, 16, 7);
  *(_QWORD *)(v0 + 80) = v15;
  *(_QWORD *)(v0 + 88) = &off_1006153D8;
  *(_QWORD *)(v0 + 56) = v16;
  v17 = v12;
  v18 = v80;
  sub_10038A438(0, v14, v13, v17, v83, v11);
  if (v80)
  {
    v19 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v83);
    defaultLogger()(v19);
    swift_errorRetain(v80);
    v40 = swift_errorRetain(v80);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v45 = *(_QWORD *)(v0 + 296);
    v46 = *(_QWORD *)(v0 + 280);
    if (v43)
    {
      v81 = *(_QWORD *)(v0 + 280);
      v84 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      v78 = *(_QWORD *)(v0 + 296);
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v86 = v48;
      *(_DWORD *)v47 = 136315138;
      swift_getErrorValue(v18, v0 + 144, v0 + 120);
      v49 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
      v51 = v50;
      *(_QWORD *)(v0 + 152) = sub_1000E3AC8(v49, v50, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v47 + 4);
      swift_bridgeObjectRelease(v51);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "DocUploadHandler.startUploadTask: Failed Either Saving or creating Encrypted Message, calling completion callback with error: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      v84(v78, v81);
    }
    else
    {
      swift_errorRelease(v80);
      swift_errorRelease(v80);

      v44(v45, v46);
    }
    v52 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 224);
    swift_errorRetain(v18);
    v52(0, 0xF000000000000000, v18);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 272);
    v23 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 256);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v83);
    v24._countAndFlagsBits = 0xD00000000000003FLL;
    v24._object = (void *)0x8000000100540060;
    v25._countAndFlagsBits = 0x3436323964633733;
    v25._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v25, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v20, v22);
    v26 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v27 = JSONEncoder.init()();
    v28 = defaultLogger()(v27);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "DocUploadHandler.startUploadTask: Attemping to encode results into JSON.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v33 = *(_QWORD *)(v0 + 312);
    v34 = *(_QWORD *)(v0 + 280);
    v36 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 248);

    v32(v33, v34);
    v37 = sub_100004790(&qword_100630288, type metadata accessor for DocUploadHandler.DocUploadResult, (uint64_t)&unk_1005201C0);
    v38 = dispatch thunk of JSONEncoder.encode<A>(_:)(v35, v36, v37);
    v65 = v38;
    v66 = v39;
    v67 = defaultLogger()(v38);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter(v68);
    if (os_log_type_enabled(v68, (os_log_type_t)v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "DocUploadHandler.startUploadTask: Success: Calling completion callback with encoded JSON.", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }
    v71 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v72 = *(_QWORD *)(v0 + 304);
    v73 = *(_QWORD *)(v0 + 280);
    v82 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 272);
    v77 = *(_QWORD *)(v0 + 248);
    v79 = *(_QWORD *)(v0 + 264);
    v74 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 224);

    v71(v72, v73);
    v75._countAndFlagsBits = 0xD000000000000048;
    v75._object = (void *)0x80000001005400A0;
    v76._countAndFlagsBits = 0x6530636335323062;
    v76._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v76, v75);
    sub_100022948(v65, v66);
    v74(v65, v66, 0);
    sub_100007F8C(v65, v66);
    swift_release(v27);
    sub_100007F8C(v65, v66);
    sub_10002290C(v77);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v85, v82);
  }
  v53 = *(_QWORD *)(v0 + 168);
  v54 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16) + 16);
  v55 = (uint64_t *)&v54[4];
  v56 = v54 + 6;
  os_unfair_lock_lock(v54 + 6);
  sub_10001EBA0(v55, v53);
  os_unfair_lock_unlock(v56);
  v58 = *(_QWORD *)(v0 + 320);
  v57 = *(_QWORD *)(v0 + 328);
  v60 = *(_QWORD *)(v0 + 304);
  v59 = *(_QWORD *)(v0 + 312);
  v61 = *(_QWORD *)(v0 + 296);
  v62 = *(_QWORD *)(v0 + 272);
  v63 = *(_QWORD *)(v0 + 248);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001FC20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, unint64_t, uint64_t);
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = sub_100008030(v0 + 16, (uint64_t *)&unk_1006371C0);
  v2 = *(_QWORD *)(v0 + 360);
  defaultLogger()(v1);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v28 = *(_QWORD *)(v0 + 296);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v27 = *(_QWORD *)(v0 + 280);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v30 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v2, v0 + 144, v0 + 120);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v10 = v9;
    *(_QWORD *)(v0 + 152) = sub_1000E3AC8(v8, v9, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v6 + 4);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DocUploadHandler.startUploadTask: Failed Either Saving or creating Encrypted Message, calling completion callback with error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v29(v28, v27);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 280);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

    v11(v12, v13);
  }
  v14 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 224);
  swift_errorRetain(v2);
  v14(0, 0xF000000000000000, v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16) + 16);
  v17 = (uint64_t *)&v16[4];
  v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  sub_10001EBA0(v17, v15);
  os_unfair_lock_unlock(v18);
  v20 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 248);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001FEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022628(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100008030((uint64_t)v8, &qword_10062FEC0);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_100603BF0, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_100630270, v20);
}

uint64_t sub_10002007C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a3;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v34 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v35 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100630258);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_bridgeObjectRetain(a2);
  EncryptedMessageEntity.init(rawValue:)(a1, a2, v14);
  v15 = type metadata accessor for EncryptedMessageEntity(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v32, v13, v15);
  v30 = a1;
  v31 = v9;
  v32 = v8;
  v33 = v6;
  v17 = sub_100008030((uint64_t)v13, &qword_100630258);
  defaultLogger()(v17);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v38 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    v36 = sub_1000E3AC8(v30, a2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "DocUploadHandler.mapRecipientString: Failure mapping recipient string (%s) to an entity.", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v32);
  v24 = v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v34, enum case for DIPError.Code.docUploadUnrecognizedRecipient(_:), v5);
  v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for DIPError(0);
  v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v26, v27, 0, 0);
  v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v24, 0, v25, 0xD000000000000057, 0x800000010053FEC0, 0xD000000000000016, 0x8000000100540000, 247);
  return swift_willThrow(v28);
}

uint64_t sub_100020408@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for DIPError.Code(0);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100630250);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v35 = v6;
    v36 = v8;
    swift_bridgeObjectRetain_n(a2, 2);
    HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)(a1, a2);
    v15 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      v17 = sub_100008030((uint64_t)v14, &qword_100630250);
      defaultLogger()(v17);
      swift_bridgeObjectRetain(a2);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v41 = v22;
        *(_DWORD *)v21 = 136315138;
        v34 = v21 + 4;
        swift_bridgeObjectRetain(a2);
        v39 = sub_1000E3AC8(a1, a2, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v34);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "DocUploadHandler.mapEncryptionVersionString: Failure mapping encryption string (%s) to an algorithm identifier.", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v38);
      v26 = v35;
      v27 = v36;
      v28._countAndFlagsBits = 0xD00000000000004BLL;
      v28._object = (void *)0x800000010053FF90;
      v29._countAndFlagsBits = 0x6537383763616665;
      v29._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v29, v28);
      (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v27, enum case for DIPError.Code.docUploadUnrecognizedEncryptionAlgorithm(_:), v26);
      v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v27, 0, v30, 0xD000000000000057, 0x800000010053FEC0, 0xD00000000000001ELL, 0x800000010053FFE0, 262);
      return swift_willThrow(v33);
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, v15);
    }
  }
  else
  {
    v23 = enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_KW_v1(_:);
    v24 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a3, v23, v24);
  }
}

uint64_t sub_1000207F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DocUploadHandler()
{
  return objc_opt_self(_TtC8coreidvd16DocUploadHandler);
}

uint64_t type metadata accessor for DocUploadHandler.UploadRequestToken()
{
  return objc_opt_self(_TtCC8coreidvd16DocUploadHandler18UploadRequestToken);
}

uint64_t type metadata accessor for DocUploadHandler.UploadRequestTracker()
{
  return objc_opt_self(_TtCC8coreidvd16DocUploadHandler20UploadRequestTracker);
}

uint64_t sub_100020878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

void sub_100020964(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  id v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  id v51;
  uint64_t v52;

  v4 = v3;
  v50 = a3;
  v49 = a2;
  v6 = type metadata accessor for DIPError.Code(0);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  __chkstk_darwin(v6);
  v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(void (**)(char *, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v48 = v8;
  if (v18)
  {
    v43 = v9;
    v19 = swift_slowAlloc(18, -1);
    *(_DWORD *)v19 = 134218240;
    v20 = (unint64_t)a1 >> 62;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v42 = a1;
      else
        v42 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v21 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(a1);
    v51 = (id)v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v19 + 4);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v51) = v50 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 4, v19 + 14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DocUploadHandler.prepareAssetsForUpload: Preparing %ld for upload with base64 encoding set to : %{BOOL}d", (uint8_t *)v19, 0x12u);
    swift_slowDealloc(v19, -1, -1);

    v8 = v48;
    v9 = v43;
  }
  else
  {
    v20 = (unint64_t)a1 >> 62;

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v22 = (void (*)(char *, uint64_t))*((_QWORD *)v9 + 1);
  v22(v14, v8);
  if (!v20)
  {
    v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v23)
      goto LABEL_8;
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_22:
  if (a1 < 0)
    v41 = a1;
  else
    v41 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v23 = _CocoaArrayWrapper.endIndex.getter(v41);
  if (!v23)
    goto LABEL_16;
LABEL_8:
  v43 = v22;
  v24 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v25 = (void (*)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, a1);
    else
      v25 = (void (*)(char *, uint64_t))*(id *)(a1 + 8 * v24);
    v22 = v25;
    v26 = v24 - 3;
    if (__OFADD__(v24 - 4, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    v27 = objc_msgSend(v25, "type");
    if ((unint64_t)v27 > 3)
      break;
    sub_100388A3C((void (*)(_QWORD, _QWORD, _QWORD))v22, v50 & 1, (uint64_t)v27);

    if (!v4)
    {
      ++v24;
      if (v26 != v23)
        continue;
    }
    goto LABEL_16;
  }
  v28 = swift_bridgeObjectRelease(a1);
  v29 = v47;
  defaultLogger()(v28);
  v30 = v22;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v33 = 134217984;
    v51 = -[NSObject type](v30, "type");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v33 + 4);

    _os_log_impl((void *)&_mh_execute_header, v31, v32, "DocUploadHandler.prepareAssetsForUpload: Couldn't map DIAssetType (%ld) to UploadAsset.AssetType", v33, 0xCu);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {

    v31 = v30;
  }
  v34 = v45;
  v35 = v46;
  v36 = v44;

  v43(v29, v48);
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v35, enum case for DIPError.Code.docUploadUnrecognizedAssetType(_:), v34);
  v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v38 = type metadata accessor for DIPError(0);
  v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v38, v39, 0, 0);
  v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v35, 0, v37, 0xD000000000000057, 0x800000010053FEC0, 0xD00000000000003BLL, 0x800000010053FF50, 229);
  swift_willThrow(v40);

}

uint64_t sub_100020E3C(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  Swift::String v75;
  Swift::String v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  id v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  void (*v150)(_QWORD, unint64_t, uint64_t);
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  id v165;
  int v166;
  Swift::String v167;
  Swift::String v168;
  id v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t (**v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  void (*isa)(char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  id v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  void (*v215)(_QWORD, unint64_t, uint64_t);
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  unint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(char *, uint64_t);
  __int128 v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  _QWORD v224[3];
  char v225[8];

  v185 = a3;
  v210 = a2;
  v217 = a1;
  v189 = type metadata accessor for HPKESuiteKwV1(0);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v187 = (char *)&v182 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for DIPOIDVerifier(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v192 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for DIPCertUsage(0);
  v196 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v197 = (char *)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
  v202 = *(_QWORD *)(v198 - 8);
  v12 = __chkstk_darwin(v198);
  v193 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v203 = (uint64_t)&v182 - v14;
  v212 = type metadata accessor for EncryptedMessageEntity(0);
  v204 = *(NSObject **)(v212 - 8);
  v15 = __chkstk_darwin(v212);
  v201 = (char *)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v209 = (uint64_t)&v182 - v17;
  isa = (void (*)(char *, uint64_t))type metadata accessor for DIPError.Code(0);
  v18 = *((_QWORD *)isa - 1);
  __chkstk_darwin(isa);
  v20 = (char *)&v182 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for DIPSignpost(0);
  v206 = *(_QWORD *)(v207 - 8);
  v24 = __chkstk_darwin(v207);
  v184 = (char *)&v182 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = v25;
  __chkstk_darwin(v24);
  v211 = (char *)&v182 - v26;
  v218 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v218 - 8);
  v28 = __chkstk_darwin(v218);
  v186 = (char *)&v182 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v194 = (char *)&v182 - v31;
  v32 = __chkstk_darwin(v30);
  v200 = (char *)&v182 - v33;
  v34 = __chkstk_darwin(v32);
  v199 = (char *)&v182 - v35;
  v36 = __chkstk_darwin(v34);
  v208 = (char *)&v182 - v37;
  v38 = __chkstk_darwin(v36);
  v213 = (char *)&v182 - v39;
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v182 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v182 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v182 - v46;
  v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_allocObject(&unk_100603B78, 40, 7);
  v215 = a4;
  v216 = v48;
  *((_QWORD *)v48 + 2) = a4;
  *((_QWORD *)v48 + 3) = a5;
  *((_QWORD *)v48 + 4) = a6;
  v214 = a5;
  v49 = swift_retain(a5);
  v50 = defaultLogger()(v49);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.debug.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "DocUploadHandler.uploadAssets: entered.", v53, 2u);
    swift_slowDealloc(v53, -1, -1);
  }

  v54 = v218;
  v219 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v55 = v219(v47, v218);
  v56 = v217;
  if (v217 >> 62)
  {
    if ((v217 & 0x8000000000000000) != 0)
      v181 = v217;
    else
      v181 = v217 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v217);
    v57 = _CocoaArrayWrapper.endIndex.getter(v181);
    v55 = swift_bridgeObjectRelease(v56);
  }
  else
  {
    v57 = *(_QWORD *)((v217 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v57)
  {
    static DaemonSignposts.uploadAssetsAPI.getter(v55);
    v58 = DIPSignpost.init(_:)(v23);
    v59 = defaultLogger()(v58);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.debug.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "DocUploadHandler.uploadAssets: Mapping recipient string to EncryptedMessageEntity", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

    v219(v42, v54);
    v63 = v210;
    v64 = objc_msgSend(v210, "recipient");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v68 = v209;
    sub_10002007C(v65, v67, v209);
    v69 = v212;
    v70 = v208;
    v83 = swift_bridgeObjectRelease(v67);
    defaultLogger()(v83);
    v84 = v204;
    v85 = v201;
    v86 = ((uint64_t (*)(char *, uint64_t, uint64_t))v204[2].isa)(v201, v68, v69);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.debug.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v220 = v90;
      *(_DWORD *)v89 = 136315138;
      v91 = EncryptedMessageEntity.rawValue.getter();
      v93 = v92;
      v223 = sub_1000E3AC8(v91, v92, (uint64_t *)&v220);
      v94 = v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v89 + 4);
      swift_bridgeObjectRelease(v93);
      isa = (void (*)(char *, uint64_t))v204[1].isa;
      isa(v85, v69);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "DocUploadHandler.uploadAssets: recipientString mapped to %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      v95 = v90;
      v63 = v210;
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      v96 = v218;
      v97 = v94(v208, v218);
    }
    else
    {
      isa = (void (*)(char *, uint64_t))v84[1].isa;
      isa(v85, v69);

      v96 = v218;
      v97 = v219(v70, v218);
    }
    v98 = v200;
    v99 = v199;
    v100 = defaultLogger()(v97);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.debug.getter(v101);
    if (os_log_type_enabled(v101, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "DocUploadHandler.uploadAssets: Mapping encryptionVersion string to HPKEEncryptionParamsAlgorithmIdentifier", v103, 2u);
      swift_slowDealloc(v103, -1, -1);
    }

    v219(v99, v96);
    v104 = objc_msgSend(v63, "encryptionVersion");
    if (v104)
    {
      v105 = v104;
      v106 = v212;
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v109 = v108;

    }
    else
    {
      v106 = v212;
      v107 = 0;
      v109 = 0;
    }
    v110 = v202;
    v111 = v203;
    sub_100020408(v107, v109, v203);
    v112 = swift_bridgeObjectRelease(v109);
    defaultLogger()(v112);
    v113 = v193;
    v114 = v198;
    v115 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 16))(v193, v111, v198);
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.debug.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      v204 = v116;
      v118 = (uint8_t *)swift_slowAlloc(12, -1);
      v119 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v220 = v119;
      *(_DWORD *)v118 = 136315138;
      v120 = HPKEEncryptionParamsAlgorithmIdentifier.rawValue.getter();
      v122 = v121;
      v223 = sub_1000E3AC8(v120, v121, (uint64_t *)&v220);
      v106 = v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v118 + 4);
      swift_bridgeObjectRelease(v122);
      v123 = v203;
      v208 = *(char **)(v202 + 8);
      ((void (*)(char *, uint64_t))v208)(v113, v198);
      v124 = v204;
      _os_log_impl((void *)&_mh_execute_header, v204, v117, "DocUploadHandler.uploadAssets: Encryption Version maps to %s", v118, 0xCu);
      swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
      v125 = v119;
      v96 = v218;
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v118, -1, -1);

      v126 = v219(v98, v96);
    }
    else
    {
      v208 = *(char **)(v110 + 8);
      ((void (*)(char *, uint64_t))v208)(v113, v114);

      v126 = v219(v98, v96);
      v123 = v203;
    }
    v127 = v194;
    v128 = defaultLogger()(v126);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.debug.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "DocUploadHandler.uploadAssets: Transforming certificate chain.", v131, 2u);
      swift_slowDealloc(v131, -1, -1);
    }

    v219(v127, v96);
    v132 = objc_msgSend(v210, "certificateChain");
    v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v132, &type metadata for Data);

    v134 = v197;
    v135 = v195;
    (*(void (**)(char *, _QWORD, uint64_t))(v196 + 104))(v197, enum case for DIPCertUsage.inoEncryption(_:), v195);
    v136 = decodeCertificateChain(fromDER:)(v133);
    v137 = v192;
    DIPOIDVerifier.init()(v136);
    v204 = DIPOIDVerifier.verifyChain(_:forUsage:)(v136, v134);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v137, v191);
    swift_bridgeObjectRelease(v136);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v134, v135);
    swift_bridgeObjectRelease(v133);
    v154 = v187;
    HPKESuiteKwV1.init(pkISm:info:)(0, 0xF000000000000000, 0, 0xC000000000000000);
    v155 = v189;
    v221 = v189;
    v222 = &protocol witness table for HPKESuiteKwV1;
    v156 = sub_100022234(&v220);
    (*(void (**)(_QWORD *, char *, uint64_t))(v188 + 16))(v156, v154, v155);
    v157 = type metadata accessor for CloudKitUploadBuilder();
    v158 = swift_allocObject(v157, 72, 7);
    *(_QWORD *)(v158 + 16) = sub_10011D880((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v158 + 24) = sub_10011D88C((uint64_t)_swiftEmptyArrayStorage);
    v159 = sub_100008018(&v220, v158 + 32);
    v160 = v186;
    v161 = defaultLogger()(v159);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.debug.getter(v162);
    if (os_log_type_enabled(v162, v163))
    {
      v164 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v164 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "DocUploadHandler.uploadAssets: Creating upload assets.", v164, 2u);
      swift_slowDealloc(v164, -1, -1);
    }

    v219(v160, v218);
    v165 = v210;
    v166 = objc_msgSend(v210, "base64EncodingEnabled");
    sub_100020964(v217, v158, v166);
    v167._countAndFlagsBits = 0xD000000000000039;
    v167._object = (void *)0x800000010053FE40;
    v168._countAndFlagsBits = 0x6230383239373539;
    v168._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v168, v167);
    v169 = objc_msgSend(v165, "container");
    v170 = v206;
    v171 = v184;
    v172 = v207;
    (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v184, v211, v207);
    v173 = *(unsigned __int8 *)(v170 + 80);
    v174 = (v173 + 16) & ~v173;
    v175 = (v183 + v174 + 7) & 0xFFFFFFFFFFFFFFF8;
    v176 = swift_allocObject(&unk_100603BA0, v175 + 16, v173 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v170 + 32))(v176 + v174, v171, v172);
    v177 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + v175);
    v151 = v216;
    *v177 = sub_100022228;
    v177[1] = v151;
    swift_retain(v151);
    v178 = (uint64_t)v169;
    v179 = v209;
    v180 = v204;
    sub_10001EE90(v158, v178, v209, v123, v204, (uint64_t)sub_1000222E8, v176);
    swift_release(v158);

    swift_release(v176);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v187, v189);
    ((void (*)(uint64_t, uint64_t))v208)(v123, v198);
    isa((char *)v179, v106);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v211, v172);
  }
  else
  {
    v71 = defaultLogger()(v55);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "DocUploadHandler.uploadAssets: assets array is empty, throwing error.", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    v219(v45, v54);
    v75._countAndFlagsBits = 0xD000000000000031;
    v75._object = (void *)0x800000010053FE80;
    v76._countAndFlagsBits = 0x3238616232623337;
    v76._object = (void *)0xE800000000000000;
    logMilestone(tag:description:)(v76, v75);
    (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v18 + 104))(v20, enum case for DIPError.Code.docUploadNoAssetsProvided(_:), isa);
    v77 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v78 = type metadata accessor for DIPError(0);
    v79 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v80 = swift_allocError(v78, v79, 0, 0);
    v81 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v20, 0, v77, 0xD000000000000057, 0x800000010053FEC0, 0xD00000000000002FLL, 0x800000010053FF20, 85);
    v82 = swift_willThrow(v81);
    v138 = v213;
    defaultLogger()(v82);
    swift_errorRetain(v80);
    v139 = swift_errorRetain(v80);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(12, -1);
      v143 = v54;
      v144 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v220 = v144;
      *(_DWORD *)v142 = 136315138;
      swift_getErrorValue(v80, v225, v224);
      v145 = Error.localizedDescription.getter(v224[1], v224[2]);
      v147 = v146;
      v223 = sub_1000E3AC8(v145, v146, (uint64_t *)&v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v142 + 4);
      swift_bridgeObjectRelease(v147);
      swift_errorRelease(v80);
      swift_errorRelease(v80);
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "DocUploadHandler.uploadAssets: Failed: Calling completion callback with error: %s", v142, 0xCu);
      swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1, -1);
      swift_slowDealloc(v142, -1, -1);

      v148 = v138;
      v149 = v143;
    }
    else
    {
      swift_errorRelease(v80);
      swift_errorRelease(v80);

      v148 = v138;
      v149 = v54;
    }
    v219(v148, v149);
    v150 = v215;
    v151 = v216;
    swift_errorRetain(v80);
    v152 = sub_1000F14F0(v80, 0xD00000000000002BLL, 0x800000010053FE10, 103);
    v150(0, 0xF000000000000000, v152);
    swift_errorRelease(v152);
    swift_errorRelease(v80);
    swift_errorRelease(v80);
  }
  return swift_release(v151);
}

uint64_t sub_100022204()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100022228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000F0B90(a1, a2, a3, *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

_QWORD *sub_100022234(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100022270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DIPSignpost(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000222E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v7 = type metadata accessor for DIPSignpost(0);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3
                                                           + ((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64)
                                                             + ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
                                                             + 7) & 0xFFFFFFFFFFFFFFF8));
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return v8(a1, a2, a3);
}

uint64_t sub_100022378()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for DIPSignpost(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v14 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = type metadata accessor for EncryptedMessageEntity(0);
  v4 = *(_QWORD *)(v16 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
  v8 = *(_QWORD *)(v13 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + v7 + 8) & ~v9;
  v15 = v2 | v5 | v9 | 7;
  v11 = (*(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v1 + 8))(&v0[v3], v17);
  swift_release(*(_QWORD *)&v0[v14]);
  (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v6], v16);

  (*(void (**)(char *, uint64_t))(v8 + 8))(&v0[v10], v13);
  swift_release(*(_QWORD *)&v0[v11 + 8]);
  return swift_deallocObject(v0, v11 + 16, v15);
}

uint64_t sub_1000224D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(type metadata accessor for DIPSignpost(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for EncryptedMessageEntity(0);
  type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
  v13 = v1[3];
  v14 = v1[2];
  v7 = v1[5];
  v12 = v1[4];
  v8 = *(_QWORD *)((char *)v1 + v5);
  v9 = *(_QWORD *)((char *)v1 + v6);
  v10 = (_QWORD *)swift_task_alloc(dword_100630264);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100007EE8;
  return sub_10001F28C(a1, v14, v13, v12, v7, (uint64_t)v1 + v4, v8, v9);
}

uint64_t sub_100022628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10062FEC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022670()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063512C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100635128 + dword_100635128))(a1, v4);
}

uint64_t type metadata accessor for DocUploadHandler.DocUploadResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1006302E8;
  if (!qword_1006302E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DocUploadHandler.DocUploadResult);
  return result;
}

uint64_t sub_100022740(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a5;
  *(_BYTE *)(v5 + 73) = a4;
  *(_BYTE *)(v5 + 72) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100022764, 0, 0);
}

uint64_t sub_100022764()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 73);
  v3 = *(_BYTE *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = sub_1001A0C70(*(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 40) = v5;
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v3;
  *(_BYTE *)(v6 + 33) = v2;
  *(_QWORD *)(v6 + 40) = v1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = sub_100022830;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100022830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000228D0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_10002289C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002289C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000228D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002290C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocUploadHandler.DocUploadResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022948(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002298C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001A0818(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(unsigned __int8 *)(v1 + 33), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000229A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000229E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100630278);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100022A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100022B44);
}

uint64_t sub_100022B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100022B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100022B90);
}

uint64_t sub_100022B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630278);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_100022BD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100022C3C(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_100022C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1006302F8)
  {
    v2 = type metadata accessor for ProofingData(255);
    v3 = sub_100004790(&qword_100630300, type metadata accessor for ProofingData, (uint64_t)&unk_10052BA74);
    v4 = sub_100004790((unint64_t *)&unk_100630308, type metadata accessor for ProofingData, (uint64_t)&unk_10052BA4C);
    v5 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1006302F8);
  }
}

unint64_t sub_100022CE0()
{
  unint64_t result;

  result = qword_100630340;
  if (!qword_100630340)
  {
    result = swift_getWitnessTable(&unk_1005202AC, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100630340);
  }
  return result;
}

uint64_t sub_100022D24(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100013E24(&qword_100630278);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocUploadHandler.DocUploadResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DocUploadHandler.DocUploadResult.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DocUploadHandler.DocUploadResult.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100022E40 + 4 * byte_100520100[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100022E60 + 4 * byte_100520105[v4]))();
}

_BYTE *sub_100022E40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100022E60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100022E68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100022E70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100022E78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100022E80(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100022E8C()
{
  return 0;
}

ValueMetadata *type metadata accessor for DocUploadHandler.DocUploadResult.CodingKeys()
{
  return &type metadata for DocUploadHandler.DocUploadResult.CodingKeys;
}

unint64_t sub_100022EAC()
{
  unint64_t result;

  result = qword_100630360;
  if (!qword_100630360)
  {
    result = swift_getWitnessTable(&unk_100520284, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100630360);
  }
  return result;
}

unint64_t sub_100022EF4()
{
  unint64_t result;

  result = qword_100630368;
  if (!qword_100630368)
  {
    result = swift_getWitnessTable(&unk_1005201F4, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100630368);
  }
  return result;
}

unint64_t sub_100022F3C()
{
  unint64_t result;

  result = qword_100630370;
  if (!qword_100630370)
  {
    result = swift_getWitnessTable(&unk_10052021C, &type metadata for DocUploadHandler.DocUploadResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100630370);
  }
  return result;
}

uint64_t sub_100022F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t updated;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[5];

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000257E0();
  static DispatchQoS.unspecified.getter(v12);
  v48[0] = _swiftEmptyArrayStorage;
  v13 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_100004828((uint64_t *)&unk_100636400);
  v15 = sub_100025D68((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400);
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x80000001005401E0, v11, v8, v5, 0);
  if (qword_10062F4A0 != -1)
    swift_once(&qword_10062F4A0, sub_10019C540);
  v16 = qword_1006702B0;
  v17 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = 0;
  v19 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v19 + 16) = 0;
  v21 = v43;
  v20 = v44;
  v22 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v41, enum case for DispatchQoS.QoSClass.default(_:), v44);
  swift_retain(v16);
  v23 = static OS_dispatch_queue.global(qos:)(v22);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
  v24 = sub_1004F5D80(0, v19, v23);
  v25 = type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  v26 = swift_allocObject(v25, 24, 7);
  *(_QWORD *)(v26 + 16) = 3600;
  v27 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  v28 = swift_allocObject(v27, 16, 7);
  v29 = type metadata accessor for IdentityProofingWorkflowProvider();
  v30 = swift_allocObject(v29, 24, 7);
  *(_QWORD *)(v30 + 16) = v28;
  v31 = type metadata accessor for IdentityProofingUploadsHelper();
  v32 = swift_allocObject(v31, 32, 7);
  type metadata accessor for NetworkMonitor(0);
  *(_QWORD *)(v32 + 16) = static NetworkMonitor.shared.getter();
  *(_QWORD *)(v32 + 24) = v30;
  v48[3] = v17;
  v48[4] = &off_10060A3B0;
  v48[0] = v18;
  updated = type metadata accessor for IdentityProofingUpdateManager();
  v34 = (_QWORD *)swift_allocObject(updated, 96, 7);
  v35 = sub_10001E624((uint64_t)v48, v17);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v41 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  v39 = *v37;
  v46 = v17;
  v47 = &off_10060A3B0;
  *(_QWORD *)&v45 = v39;
  v34[2] = v42;
  v34[3] = v16;
  sub_100008018(&v45, (uint64_t)(v34 + 4));
  v34[9] = v24;
  v34[10] = v26;
  v34[11] = v32;
  swift_retain(v18);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v48);
  result = swift_release(v18);
  qword_1006700A0 = (uint64_t)v34;
  return result;
}

uint64_t sub_100023380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v10 = v9;
  v32 = a5;
  v33 = a8;
  v34 = a7;
  v31 = a6 & 1;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = &v30[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v18 - 8);
  v36 = v18;
  __chkstk_darwin(v18);
  v20 = &v30[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = *(void **)(v10 + 16);
  v22 = swift_allocObject(&unk_100603E58, 82, 7);
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  *(_QWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = a1;
  *(_QWORD *)(v22 + 48) = a2;
  *(_QWORD *)(v22 + 56) = v10;
  *(_QWORD *)(v22 + 64) = v33;
  *(_QWORD *)(v22 + 72) = a9;
  *(_BYTE *)(v22 + 80) = v31;
  *(_BYTE *)(v22 + 81) = v34;
  aBlock[4] = sub_100025D14;
  v40 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100603E70;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(v10);
  swift_retain(a9);
  v24 = v21;
  swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(v25);
  v38 = _swiftEmptyArrayStorage;
  v26 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100004828((uint64_t *)&unk_1006308D0);
  v28 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v27, v28, v15, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v17, v23);
  _Block_release(v23);

  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v17, v15);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v20, v36);
  return swift_release(v40);
}

uint64_t sub_1000235D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v17, 24, 7);
  sub_1000D6044();
  v19 = v18;
  v20 = swift_allocObject(&unk_100603EA8, 90, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = v19;
  *(_QWORD *)(v20 + 40) = a3;
  *(_QWORD *)(v20 + 48) = a4;
  *(_QWORD *)(v20 + 56) = a5;
  *(_QWORD *)(v20 + 64) = a6;
  *(_QWORD *)(v20 + 72) = a7;
  *(_QWORD *)(v20 + 80) = a8;
  *(_BYTE *)(v20 + 88) = a9 & 1;
  *(_BYTE *)(v20 + 89) = a10 & 1;
  swift_bridgeObjectRetain(a5);
  swift_retain(a6);
  swift_retain(a8);
  swift_bridgeObjectRetain(a2);
  swift_retain(v19);
  sub_1000D6570((uint64_t)sub_100025DEC, v20);
  swift_release(v19);
  return swift_release(v20);
}

void sub_100023740(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t), uint64_t a9, char a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  id v93;
  void *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v12 = v11;
  v135 = a8;
  v137 = a7;
  v18 = sub_100004828(&qword_100633990);
  v19 = __chkstk_darwin(v18);
  v128 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v130 = (char *)&v123 - v21;
  v22 = type metadata accessor for Date(0);
  v133 = *(_QWORD *)(v22 - 8);
  v134 = v22;
  v23 = __chkstk_darwin(v22);
  v129 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v132 = (char *)&v123 - v26;
  __chkstk_darwin(v25);
  v131 = (char *)&v123 - v27;
  v136 = type metadata accessor for Logger(0);
  v28 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v30 = (char *)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DIPError.Code(0);
  v138 = *(_QWORD *)(v31 - 8);
  v139 = v31;
  __chkstk_darwin(v31);
  v140 = (uint64_t)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1000D6B28(a1, (uint64_t)a2, a4);
    if (v11)
      return;
    a2 = v33;
  }
  if (a6)
  {
    sub_1000D7010(a5, a6, a4);
    v35 = v34;

    if (v11)
      return;
    a2 = v35;
  }
  if (!a2)
  {
    v45 = v140;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v140, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v139);
    v46 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v47 = type metadata accessor for DIPError(0);
    v48 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v47, v48, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100540350, 0, v45, 0, v46, 0xD000000000000072, 0x8000000100540370, 0xD000000000000056, 0x80000001005403F0, 74);
    swift_willThrow(v49);
    return;
  }
  v127 = a4;
  v36 = a2;
  v37 = sub_100025B3C(v36);
  if (!v37)
    goto LABEL_65;
  v38 = v37;
  v125 = a9;
  v126 = v36;
  defaultLogger()(v37);
  v39 = swift_bridgeObjectRetain_n(v38, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = v11;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v43 = 134217984;
    if ((unint64_t)v38 >> 62)
    {
      if (v38 >= 0)
        v108 = v38 & 0xFFFFFFFFFFFFFF8;
      else
        v108 = v38;
      swift_bridgeObjectRetain(v38);
      v44 = _CocoaArrayWrapper.endIndex.getter(v108);
      swift_bridgeObjectRelease(v38);
    }
    else
    {
      v44 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v38);
    v141 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v43 + 4);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "the asset count is %ld", v43, 0xCu);
    swift_slowDealloc(v43, -1, -1);

    v12 = v42;
  }
  else
  {

    swift_bridgeObjectRelease_n(v38, 2);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v136);
  v50 = v137;
  v51 = *(_QWORD *)(v137 + 24);
  swift_retain(v51);
  v52 = v126;
  sub_10019CEF0((uint64_t)objc_msgSend(v126, "cloudKitUploadsMaxRetryCount"));
  swift_release(v51);
  v53 = *(_QWORD *)(v50 + 24);
  swift_retain(v53);
  sub_1001A0F44(v38);
  v55 = v54;
  v57 = v56;
  swift_release(v53);
  v58 = objc_msgSend(v52, "workflowID");
  v59 = v127;
  if (!v58)
  {
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v55);
    v69 = v140;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v140, enum case for DIPError.Code.workflowIdDoesNotExist(_:), v139);
    v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v71, v72, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100540450, 0, v69, 0, v70, 0xD000000000000072, 0x8000000100540370, 0xD000000000000056, 0x80000001005403F0, 91);
LABEL_22:
    swift_willThrow(v73);
    goto LABEL_23;
  }
  v60 = v58;
  v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v62 = v61;

  v63 = objc_msgSend(v52, "proofingSessionID");
  if (!v63)
  {
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v55);
    v74 = v140;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v140, enum case for DIPError.Code.proofingSessionIDUnavailable(_:), v139);
    v75 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v76 = type metadata accessor for DIPError(0);
    v77 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v76, v77, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100540470, 0, v74, 0, v75, 0xD000000000000072, 0x8000000100540370, 0xD000000000000056, 0x80000001005403F0, 95);
    goto LABEL_22;
  }
  v64 = v63;
  v139 = v62;
  v140 = v55;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v67 = v66;

  if ((objc_msgSend(v52, "didNotifyOnUploadsCompletion") & 1) != 0)
  {
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v140);
    v68 = *(_QWORD *)(v50 + 72);
    swift_retain(v68);
    sub_100393B5C(v65, v67, v59);
    swift_release(v68);
    swift_bridgeObjectRelease(v67);
LABEL_19:
    v135(0);
LABEL_23:

    return;
  }
  v124 = v65;
  v138 = v67;
  if (*(_QWORD *)(v57 + 16))
  {
    swift_bridgeObjectRelease(v38);
    v78 = v140;
    v79 = v138;
    sub_1000246B0(v140, a10 & 1, a11 & 1, v124, v138);
    if (v12)
    {
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v139);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v78);
      goto LABEL_23;
    }
    v93 = objc_msgSend(v52, "createdAt");
    if (v93)
    {
      v94 = v93;
      v95 = v132;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v93);

      v96 = v133;
      v97 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
      v98 = (uint64_t)v128;
      v99 = v95;
      v100 = v134;
      v97(v128, v99, v134);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v98, 0, 1, v100);
      v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v98, 1, v100);
      v102 = v129;
      if ((_DWORD)v101 != 1)
      {
        v97(v129, (char *)v98, v100);
LABEL_47:
        v103 = objc_msgSend(v52, "manualCheckInterval");
        v104 = v57;
        v105 = v139;
        v106 = v57;
        v107 = v138;
        sub_100024374(v104, v136, v139, v124, v138, v127, v102, (uint64_t)v103);
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(v140);
        swift_bridgeObjectRelease(v107);
        swift_bridgeObjectRelease(v105);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v102, v100);
        goto LABEL_19;
      }
    }
    else
    {
      v96 = v133;
      v100 = v134;
      v98 = (uint64_t)v128;
      v101 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v128, 1, 1, v134);
      v102 = v129;
    }
    Date.init()(v101);
    sub_100008030(v98, &qword_100633990);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v140);
  if ((unint64_t)v38 >> 62)
  {
    if (v38 >= 0)
      v109 = v38 & 0xFFFFFFFFFFFFFF8;
    else
      v109 = v38;
    swift_bridgeObjectRetain(v38);
    v140 = _CocoaArrayWrapper.endIndex.getter(v109);
    if (v140)
      goto LABEL_29;
LABEL_56:
    v81 = _swiftEmptyArrayStorage;
    goto LABEL_57;
  }
  v140 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v38);
  if (!v140)
    goto LABEL_56;
LABEL_29:
  if (v140 < 1)
  {
    __break(1u);
    return;
  }
  v80 = 0;
  v81 = _swiftEmptyArrayStorage;
  do
  {
    v82 = v12;
    if ((v38 & 0xC000000000000001) != 0)
      v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v80, v38);
    else
      v83 = *(id *)(v38 + 8 * v80 + 32);
    v84 = v83;
    v85 = objc_msgSend(v83, "recordUUID");
    if (v85)
    {
      v86 = v85;
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v89 = v88;

      if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
        v81 = sub_1000E2358(0, v81[2] + 1, 1, v81);
      v91 = v81[2];
      v90 = v81[3];
      if (v91 >= v90 >> 1)
        v81 = sub_1000E2358((_QWORD *)(v90 > 1), v91 + 1, 1, v81);
      v81[2] = v91 + 1;
      v92 = &v81[2 * v91];
      v92[4] = v87;
      v92[5] = v89;
    }
    else
    {

    }
    ++v80;
    v12 = v82;
  }
  while (v140 != v80);
LABEL_57:
  swift_bridgeObjectRelease_n(v38, 2);
  v110 = objc_msgSend(v126, "createdAt");
  if (v110)
  {
    v111 = v110;
    v112 = v132;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

    v113 = v133;
    v114 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
    v115 = (uint64_t)v130;
    v116 = v112;
    v117 = v134;
    v114(v130, v116, v134);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v113 + 56))(v115, 0, 1, v117);
    v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v115, 1, v117);
    v119 = v131;
    if ((_DWORD)v118 != 1)
    {
      v114(v131, (char *)v115, v117);
      goto LABEL_62;
    }
  }
  else
  {
    v113 = v133;
    v117 = v134;
    v115 = (uint64_t)v130;
    v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v130, 1, 1, v134);
    v119 = v131;
  }
  Date.init()(v118);
  sub_100008030(v115, &qword_100633990);
LABEL_62:
  v36 = v126;
  v120 = objc_msgSend(v126, "manualCheckInterval");
  v122 = v138;
  v121 = v139;
  sub_100024374((uint64_t)v81, v136, v139, v124, v138, v127, v119, (uint64_t)v120);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v119, v117);
    swift_bridgeObjectRelease(v122);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v121);
    v37 = 0;
LABEL_65:
    v135(v37);
    goto LABEL_66;
  }
  (*(void (**)(char *, uint64_t))(v113 + 8))(v119, v117);
  swift_bridgeObjectRelease(v122);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v121);
LABEL_66:

}

void sub_100024374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a8;
  v9 = v8;
  v34 = a6;
  v35 = a7;
  v32 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject(&unk_100603E30, 64, 7);
  v18[2] = v9;
  v18[3] = a4;
  v33 = a4;
  v18[4] = a5;
  v18[5] = a2;
  v18[6] = a3;
  v18[7] = a1;
  swift_retain(v9);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a1);
  v19 = v37;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000002CLL, 0x8000000100540260, 0xD000000000000064, 0x80000001005402E0, 147, &unk_100630530, v18, (char *)&type metadata for () + 8);
  v20 = swift_release(v18);
  if (!v19)
  {
    v37 = a5;
    v21 = v32;
    v22 = defaultLogger()(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Action Notification request complete, will attempt to delete the upload assets meta data.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v21);
    v26 = *(_QWORD *)(v9 + 72);
    swift_retain(v26);
    sub_100393B5C(v33, v37, v34);
    swift_release(v26);
    v27 = type metadata accessor for IdentityManagementSessionDelegate();
    v28 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v29 = String._bridgeToObjectiveC()();
    v38 = v27;
    v30 = sub_100004828((uint64_t *)&unk_10063E570);
    v31 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v38, v30);
    objc_msgSend(v28, "postNotificationName:object:", v29, v31);

    swift_unknownObjectRelease(v31);
    sub_1004F2574(v35, v36);
  }
}

uint64_t sub_100024624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v14;

  v14 = (_QWORD *)swift_task_alloc(dword_1006303AC);
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = sub_100007EE8;
  v14[11] = a7;
  v14[12] = a2;
  v14[9] = a5;
  v14[10] = a6;
  v14[7] = a3;
  v14[8] = a4;
  return swift_task_switch(sub_10002558C, 0, 0);
}

void sub_1000246B0(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  dispatch_semaphore_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  _OWORD v38[2];
  uint64_t v39;
  int v40;

  v36 = a5;
  v34 = a4;
  v40 = a3;
  v8 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_100603D68, 24, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)(v11 + 16);
  v13 = dispatch_semaphore_create(0);
  v35 = v5;
  v14 = *(_QWORD *)(v5 + 24);
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v15 = swift_allocObject(&unk_100603D90, 32, 7);
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v11;
  sub_1000258B8((uint64_t)v38, (uint64_t)v37);
  v16 = swift_allocObject(&unk_100603DB8, 75, 7);
  sub_10002593C((uint64_t)v37, v16 + 16);
  *(_QWORD *)(v16 + 56) = a1;
  *(_QWORD *)(v16 + 64) = v14;
  *(_BYTE *)(v16 + 72) = a2;
  *(_WORD *)(v16 + 73) = v40;
  v17 = swift_allocObject(&unk_100603DE0, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_1000258B0;
  *(_QWORD *)(v17 + 24) = v15;
  swift_retain_n(v14, 2);
  v18 = v13;
  v19 = v11;
  v20 = v18;
  swift_retain(v19);
  swift_bridgeObjectRetain(a1);
  swift_retain(v15);
  sub_100185E58(3, (uint64_t)sub_100025984, v16, (uint64_t)sub_1000259C0, v17);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  sub_100008030((uint64_t)v38, (uint64_t *)&unk_1006371C0);
  OS_dispatch_semaphore.wait()();
  swift_beginAccess(v12, v38, 0, 0);
  if (*v12)
  {
    v21 = swift_errorRetain(*v12);
    v22 = defaultLogger()(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "error has occurred during uploads. Will check if status update is required...", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
    v26 = (_QWORD *)swift_allocObject(&unk_100603E08, 40, 7);
    v28 = v34;
    v27 = v35;
    v26[2] = v35;
    v26[3] = v28;
    v29 = v36;
    v26[4] = v36;
    swift_retain(v27);
    swift_bridgeObjectRetain(v29);
    runAsyncAndBlock<A>(file:function:line:_:)("yProofingUpdateManager.swift", 0xD00000000000002CLL, 0x8000000100540260, 0xD00000000000004CLL, 0x8000000100540290, 203, &unk_100630520, v26, (char *)&type metadata for () + 8);
    v30 = swift_release(v26);
    swift_willThrow(v30);
    swift_release(v19);

  }
  else
  {
    swift_release(v19);

  }
}

Swift::Int sub_1000249F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE v17[24];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    swift_beginAccess(a3 + 16, v17, 1, 0);
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v10);
  }
  else
  {
    v11 = defaultLogger()(v7);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Asset uploads successfully complete", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_100024B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1006303A4);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_10001D0A0;
  return sub_100024B98(a3, a4);
}

uint64_t sub_100024B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v6);
  v3[15] = swift_task_alloc(v6);
  v3[16] = swift_task_alloc(v6);
  v3[17] = swift_task_alloc(v6);
  return swift_task_switch(sub_100024C24, 0, 0);
}

void sub_100024C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v1, 24, 7);
  sub_1000D6044();
  *(_QWORD *)(v0 + 144) = v2;
  v3 = v2;
  sub_1000D69B0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  *(_QWORD *)(v0 + 152) = 0;
  v8 = v4;
  if (!v4)
  {
LABEL_15:
    v17 = *(_QWORD *)(v0 + 80);
    defaultLogger()(v4);
    v18 = swift_bridgeObjectRetain_n(v17, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 80);
    if (v21)
    {
      v28 = *(_QWORD *)(v0 + 72);
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = v23;
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v0 + 56) = sub_1000E3AC8(v28, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v26 + 4);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Proofing session doesn't exist for %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
      swift_release(v3);

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v29);
    }
    else
    {
      swift_release(v3);
      swift_bridgeObjectRelease_n(v25, 2);

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    v5 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0)
      v15 = v4 & 0xFFFFFFFFFFFFFF8;
    else
      v15 = v4;
    swift_bridgeObjectRetain(v4);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v8);
    if (v16)
      goto LABEL_6;
    goto LABEL_14;
  }
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_14:
    v4 = swift_bridgeObjectRelease(v8);
    goto LABEL_15;
  }
LABEL_6:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v8 + 32);
LABEL_9:
    v10 = v9;
    *(_QWORD *)(v0 + 160) = v9;
    v11 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease(v8);
    v12 = *(_QWORD *)(v11 + 88);
    *(_QWORD *)(v0 + 168) = v12;
    swift_retain(v12);
    v13 = objc_msgSend(v10, "totalUploadAssetsFileSizeInBytes");
    LOBYTE(v10) = objc_msgSend(v10, "canUploadOnExpensiveNetwork");
    v14 = (_QWORD *)swift_task_alloc(dword_10062FAEC);
    *(_QWORD *)(v0 + 176) = v14;
    *v14 = v0;
    v14[1] = sub_1000250E4;
    sub_1000055A4((uint64_t)v13, (char)v10);
    return;
  }
  __break(1u);
}

uint64_t sub_1000250E4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_BYTE *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100025148, 0, 0);
}

uint64_t sub_100025148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int64_optional v50;

  if (*(_BYTE *)(v1 + 184) != 1)
  {
    v18 = defaultLogger()(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No update needed as the device is not waiting for wifi to upload the documents", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v22 = *(void **)(v1 + 160);
    v23 = *(_QWORD *)(v1 + 144);
    v24 = *(_QWORD *)(v1 + 128);
    v12 = *(_QWORD *)(v1 + 96);
    v25 = *(_QWORD *)(v1 + 104);

    swift_release(v23);
    v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v27 = v24;
    goto LABEL_12;
  }
  v2 = *(_QWORD *)(v1 + 152);
  v50.value = IdentityProofingActionStatus.rawValue.getter(9);
  v50.is_nil = 0;
  StoredProofingSession.update(proofingActionStatus:)(v50);
  v3 = sub_1000D6288();
  if (v2)
  {
    v4 = *(_QWORD *)(v1 + 144);

    v5 = swift_release(v4);
    defaultLogger()(v5);
    swift_errorRetain(v2);
    v6 = swift_errorRetain(v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v11 = *(_QWORD *)(v1 + 104);
    v10 = *(_QWORD *)(v1 + 112);
    v12 = *(_QWORD *)(v1 + 96);
    if (v9)
    {
      v47 = *(_QWORD *)(v1 + 96);
      v48 = *(_QWORD *)(v1 + 112);
      v46 = *(_QWORD *)(v1 + 104);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v49 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_getErrorValue(v2, v1 + 40, v1 + 16);
      v15 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
      v17 = v16;
      *(_QWORD *)(v1 + 48) = sub_1000E3AC8(v15, v16, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v13 + 4);
      swift_bridgeObjectRelease(v17);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "received an error while updaing the proofing action status %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v2);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      goto LABEL_13;
    }
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

    v26 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v27 = v10;
LABEL_12:
    v26(v27, v12);
    goto LABEL_13;
  }
  v28 = defaultLogger()(v3);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully updated the proofing action status to wait for wifi", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }
  v32 = *(void **)(v1 + 160);
  v34 = *(_QWORD *)(v1 + 136);
  v33 = *(_QWORD *)(v1 + 144);
  v35 = *(_QWORD *)(v1 + 96);
  v36 = *(_QWORD *)(v1 + 104);

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  v37 = type metadata accessor for IdentityManagementSessionDelegate();
  v38 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v39 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v1 + 64) = v37;
  v40 = sub_100004828((uint64_t *)&unk_10063E570);
  v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v1 + 64, v40);
  objc_msgSend(v38, "postNotificationName:object:", v39, v41);
  swift_unknownObjectRelease(v41);

  swift_release(v33);
LABEL_13:
  v42 = *(_QWORD *)(v1 + 128);
  v44 = *(_QWORD *)(v1 + 112);
  v43 = *(_QWORD *)(v1 + 120);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002556C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  return swift_task_switch(sub_10002558C, 0, 0);
}

uint64_t sub_10002558C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[11];
  v2 = v0[10];
  v3 = v0[8];
  sub_10002581C(v0[12] + 32, (uint64_t)(v0 + 2));
  sub_10000806C(v0 + 2, v0[5]);
  v4 = sub_100004828(&qword_100630510);
  v5 = swift_allocObject(v4, 88, 7);
  v0[13] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_10051FFB0;
  strcpy((char *)(v5 + 32), "UPLOAD_RECORD");
  *(_WORD *)(v5 + 46) = -4864;
  *(_OWORD *)(v5 + 48) = xmmword_100520300;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = v1;
  v6 = dword_1006372CC;
  swift_bridgeObjectRetain(v1);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[14] = v7;
  *v7 = v0;
  v7[1] = sub_100025694;
  return sub_1001A2B74(v5, v0[9], v2, v0[7], v3);
}

uint64_t sub_100025694()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100025734;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 104));
    v4 = sub_100025700;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100025700()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100025734()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100025774()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for IdentityProofingUpdateManager()
{
  return objc_opt_self(_TtC8coreidvd29IdentityProofingUpdateManager);
}

unint64_t sub_1000257E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006308C0;
  if (!qword_1006308C0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1006308C0);
  }
  return result;
}

uint64_t sub_10002581C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100025860()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100025884()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_1000258B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000249F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000258B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006371C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025900()
{
  _QWORD *v0;

  if (v0[5])
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 75, 7);
}

uint64_t sub_10002593C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006371C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025984(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_10019D3AC(a1, a2, v2 + 16, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), *(_BYTE *)(v2 + 73), *(unsigned __int8 *)(v2 + 74));
}

uint64_t sub_10002599C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000259C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001A0644(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000259C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000259F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc(dword_10063051C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100007EE8;
  v5 = (_QWORD *)swift_task_alloc(dword_1006303A4);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10001D0A0;
  return sub_100024B98(v2, v3);
}

uint64_t sub_100025A74()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100025AB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10063052C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100007EE8;
  return sub_100024624(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100025B3C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "uploadAssets");
  if (v6)
  {
    v7 = v6;
    sub_10045A180(v7);
    v9 = v8;

    v10 = (uint64_t)sub_1004589E4(v9);
    swift_release(v9);
    if (v10)
    {
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0)
          v17 = v10 & 0xFFFFFFFFFFFFFF8;
        else
          v17 = v10;
        swift_bridgeObjectRetain(v10);
        v18 = _CocoaArrayWrapper.endIndex.getter(v17);

        swift_bridgeObjectRelease(v10);
        if (v18 > 0)
          return v10;
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);

        if (v11 > 0)
          return v10;
      }
      v6 = (id)swift_bridgeObjectRelease(v10);
    }
    else
    {

    }
  }
  v12 = defaultLogger()(v6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "No assets exists to be uploaded.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t sub_100025CD8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 82, 7);
}

uint64_t sub_100025D14()
{
  uint64_t v0;

  return sub_1000235D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80), *(_BYTE *)(v0 + 81));
}

uint64_t sub_100025D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100025D60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100025D68(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100013E24(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100025DA8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 90, 7);
}

void sub_100025DEC()
{
  uint64_t v0;

  sub_100023740(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void (**)(uint64_t))(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), *(_BYTE *)(v0 + 89));
}

Swift::Void __swiftcall StoredProofingSession.update(proofingActionStatus:)(Swift::Int64_optional proofingActionStatus)
{
  void *v1;
  void *v2;
  Swift::Bool is_nil;
  Swift::Int64 value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v2 = v1;
  is_nil = proofingActionStatus.is_nil;
  value = proofingActionStatus.value;
  v5 = objc_msgSend(v1, "managedObjectContext");
  if (v5)
  {
    v6 = v5;
    v7 = swift_allocObject(&unk_100603EF0, 33, 7);
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = value;
    *(_BYTE *)(v7 + 32) = is_nil;
    v8 = swift_allocObject(&unk_100603F18, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_100027A7C;
    *(_QWORD *)(v8 + 24) = v7;
    v12[4] = sub_100027AD4;
    v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100026DC8;
    v12[3] = &unk_100603F30;
    v9 = _Block_copy(v12);
    v10 = v13;
    v11 = v2;
    swift_retain(v8);
    swift_release(v10);
    objc_msgSend(v6, "performBlockAndWait:", v9);

    _Block_release(v9);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 93, 132, 51, 1);
    swift_release(v7);
    swift_release(v8);
    if ((v6 & 1) != 0)
      __break(1u);
  }
}

void *StoredProofingSession.entityName.unsafeMutableAddressor()
{
  return &static StoredProofingSession.entityName;
}

uint64_t static StoredProofingSession.entityName.getter()
{
  return 0x676E69666F6F7250;
}

id StoredProofingSession.update(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:cloudKitUploadsMaxRetryCount:idType:learnMoreURLString:shouldScheduleUploads:connectToWifiReminderInDays:shouldShowNotificationOnWatch:canUploadOnExpensiveNetwork:totalUploadAssetsFileSizeInBytes:provisioningRetryTimeout:provisioningAttemptDate:didNotifyOnUploadsCompletion:hasUserConsentToShareBiomeData:productIdentifier:didAttemptComboProofing:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,unsigned __int8 a36,unsigned __int8 a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned __int8 a41,unsigned __int8 a42,uint64_t a43,uint64_t a44,unsigned __int8 a45,uint64_t a46,unint64_t a47)
{
  void *v47;
  void *v48;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  id result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD aBlock[5];
  uint64_t v161;

  v48 = v47;
  v159 = a4;
  v151 = a1;
  v152 = a3;
  v54 = sub_100004828(&qword_100633990);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(_QWORD *)(v55 + 64);
  v57 = __chkstk_darwin(v54);
  __chkstk_darwin(v57);
  v59 = (char *)&v100 - v58;
  result = objc_msgSend(v48, "managedObjectContext");
  if (result)
  {
    v148 = a46;
    v149 = a47;
    v147 = a45;
    v145 = a43;
    v146 = a44;
    v144 = a42;
    v143 = a41;
    v119 = a5;
    v128 = a39;
    v142 = a38;
    v141 = a37;
    v140 = a36;
    v139 = a35;
    v138 = a34;
    v137 = a33;
    v135 = a32;
    v134 = a31;
    v133 = a30;
    v132 = a29;
    v131 = a28;
    v136 = a27;
    v130 = a26;
    v127 = a25;
    v126 = a24;
    v123 = a23;
    v122 = a22;
    v158 = a21;
    v121 = a20;
    v157 = a19;
    v120 = a18;
    v156 = a17;
    v118 = a16;
    v150 = result;
    v115 = a14;
    v155 = a13;
    v114 = a12;
    v154 = a11;
    v113 = a10;
    v153 = a9;
    sub_100027B0C(a15, (uint64_t)v59);
    sub_100027B0C(a40, (uint64_t)&v100 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
    v61 = *(unsigned __int8 *)(v55 + 80);
    v129 = a6;
    v102 = a8;
    v62 = (v61 + 136) & ~v61;
    v125 = a2;
    v104 = (v56 + 7 + v62) & 0xFFFFFFFFFFFFFFF8;
    v63 = (v61 + v104 + 16) & ~v61;
    v106 = (v56 + 7 + v63) & 0xFFFFFFFFFFFFFFF8;
    v101 = a7;
    v105 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
    v103 = (uint64_t)&v100 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    v64 = (v105 + 23) & 0xFFFFFFFFFFFFFFF8;
    v107 = (v64 + 23) & 0xFFFFFFFFFFFFFFF8;
    v109 = (v64 + 39) & 0xFFFFFFFFFFFFFFF8;
    v110 = (v109 + 23) & 0xFFFFFFFFFFFFFFF8;
    v108 = (v110 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (v108 + 15) & 0xFFFFFFFFFFFFFFF8;
    v111 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
    v112 = (v65 + 47) & 0xFFFFFFFFFFFFFFF8;
    v124 = v48;
    v66 = (v112 + 19) & 0xFFFFFFFFFFFFFFF8;
    v116 = (v66 + 17) & 0xFFFFFFFFFFFFFFF8;
    v117 = (v66 + 41) & 0xFFFFFFFFFFFFFFF8;
    v67 = (_QWORD *)swift_allocObject(&unk_100603F68, v117 + 16, v61 | 7);
    v68 = v151;
    v67[2] = v48;
    v67[3] = v68;
    v69 = v152;
    v67[4] = a2;
    v67[5] = v69;
    v70 = v119;
    v67[6] = v159;
    v67[7] = v70;
    v71 = v101;
    v67[8] = a6;
    v67[9] = v71;
    v72 = v153;
    v67[10] = v102;
    v67[11] = v72;
    v73 = v154;
    v67[12] = v113;
    v67[13] = v73;
    v74 = v155;
    v67[14] = v114;
    v67[15] = v74;
    v67[16] = v115;
    sub_100027D88((uint64_t)v59, (uint64_t)v67 + v62);
    v75 = (_QWORD *)((char *)v67 + v104);
    v76 = v156;
    *v75 = v118;
    v75[1] = v76;
    sub_100027D88(v103, (uint64_t)v67 + v63);
    *(_QWORD *)((char *)v67 + v106) = v128;
    v77 = (_QWORD *)((char *)v67 + v105);
    v78 = v157;
    *v77 = v120;
    v77[1] = v78;
    v79 = (_QWORD *)((char *)v67 + v64);
    v80 = v158;
    *v79 = v121;
    v79[1] = v80;
    v81 = (char *)v67 + v107;
    *(_QWORD *)v81 = v122;
    v81[8] = v123 & 1;
    v82 = (_QWORD *)((char *)v67 + v109);
    v83 = v127;
    *v82 = v126;
    v82[1] = v83;
    v84 = v130;
    *(_QWORD *)((char *)v67 + v110) = v130;
    *(_QWORD *)((char *)v67 + v108) = v131;
    v85 = (_QWORD *)((char *)v67 + v65);
    v86 = v133;
    *v85 = v132;
    v85[1] = v86;
    v87 = (char *)v67 + v111;
    v88 = v135;
    *(_QWORD *)v87 = v134;
    *((_QWORD *)v87 + 1) = v88;
    v87[16] = v137 & 1;
    v89 = (char *)v67 + v112;
    *(_QWORD *)v89 = v138;
    v89[8] = v139 & 1;
    v89[9] = v136 & 1;
    v89[10] = v140 & 1;
    v89[11] = v141 & 1;
    v90 = (char *)v67 + v66;
    *(_QWORD *)v90 = v142;
    v90[8] = v143 & 1;
    v90[9] = v144 & 1;
    v91 = (char *)v67 + v116;
    v92 = v146;
    *(_QWORD *)v91 = v145;
    *((_QWORD *)v91 + 1) = v92;
    v91[16] = v147 & 1;
    v93 = (_QWORD *)((char *)v67 + v117);
    v95 = v148;
    v94 = v149;
    *v93 = v148;
    v93[1] = v94;
    v96 = swift_allocObject(&unk_100603F90, 32, 7);
    *(_QWORD *)(v96 + 16) = sub_100027DD0;
    *(_QWORD *)(v96 + 24) = v67;
    aBlock[4] = sub_10002B224;
    v161 = v96;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100603FA8;
    v97 = _Block_copy(aBlock);
    v152 = v161;
    swift_bridgeObjectRetain(v92);
    v98 = v124;
    swift_bridgeObjectRetain(v125);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v157);
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v88);
    sub_100028034(v95, v94);
    swift_retain(v96);
    swift_release(v152);
    v99 = v150;
    objc_msgSend(v150, "performBlockAndWait:", v97);

    _Block_release(v97);
    LOBYTE(v99) = swift_isEscapingClosureAtFileLocation(v96, "", 93, 47, 51, 1);
    swift_release(v67);
    result = (id)swift_release(v96);
    if ((v99 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_10002672C(void *a1, uint64_t a2, NSString a3, uint64_t a4, NSString a5, uint64_t a6, NSString a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35,uint64_t a36,char a37,char a38,char a39,char a40,uint64_t a41,unsigned __int8 a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,unsigned __int8 a46,uint64_t a47,unint64_t a48)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  NSString v59;
  NSString v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(_BYTE *, uint64_t, uint64_t);
  Class isa;
  NSString v66;
  Class v67;
  NSString v68;
  NSString v70;
  NSString v71;
  NSString v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  Class v76;
  id v77;
  NSString v78;
  NSString v80;
  Class v81;
  _BYTE v82[4];
  int v83;
  int v84;
  int v85;
  uint64_t v86;

  v53 = sub_100004828(&qword_100633990);
  v54 = __chkstk_darwin(v53);
  v56 = &v82[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v54);
  v58 = &v82[-v57];
  if (a3)
    a3 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setState:", a3);

  if (a5)
    a5 = String._bridgeToObjectiveC()();
  v59 = a10;
  objc_msgSend(a1, "setCountry:", a5);

  if (a7)
    a7 = String._bridgeToObjectiveC()();
  v60 = a12;
  objc_msgSend(a1, "setCredentialIdentifier:", a7);

  objc_msgSend(a1, "setTarget:", IdentityTarget.rawValue.getter(a8));
  if (a10)
    v59 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setWorkflowID:", v59);

  if (a12)
    v60 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProofingSessionID:", v60);

  if (a14)
    v61 = String._bridgeToObjectiveC()();
  else
    v61 = 0;
  objc_msgSend(a1, "setPairingID:", v61);

  objc_msgSend(a1, "setManualCheckInterval:", a15);
  sub_100027B0C(a16, (uint64_t)v58);
  v62 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v63 + 48);
  isa = 0;
  if (v64(v58, 1, v62) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v58, v62);
  }
  objc_msgSend(a1, "setCreatedAt:", isa);

  if (a18)
    v66 = String._bridgeToObjectiveC()();
  else
    v66 = 0;
  objc_msgSend(a1, "setProvisioningCredentialID:", v66);

  sub_100027B0C(a19, (uint64_t)v56);
  if (v64(v56, 1, v62) == 1)
  {
    v67 = 0;
  }
  else
  {
    v67 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v56, v62);
  }
  objc_msgSend(a1, "setProvisioningAttemptDate:", v67);

  objc_msgSend(a1, "setProvisioningRetryTimeout:", a20);
  if (a22)
    v68 = String._bridgeToObjectiveC()();
  else
    v68 = 0;
  objc_msgSend(a1, "setProvisioningTargetInstanceID:", v68);

  if (a24)
    v70 = String._bridgeToObjectiveC()();
  else
    v70 = 0;
  objc_msgSend(a1, "setPartnerSchemeID:", v70);

  if ((a26 & 1) != 0)
    a25 = IdentityProofingActionStatus.rawValue.getter(3);
  objc_msgSend(a1, "setProofingActionStatus:", a25);
  if (a28)
    v71 = String._bridgeToObjectiveC()();
  else
    v71 = 0;
  v86 = a41;
  v72 = a34;
  objc_msgSend(a1, "setLastExecutedActionIdentifier:", v71);

  if (a29)
    v73 = a29;
  else
    v73 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a29);
  v74 = sub_1003BE0A4((uint64_t)v73);
  swift_bridgeObjectRelease(v73);
  v75 = objc_allocWithZone((Class)NSSet);
  v76 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v74);
  v77 = objc_msgSend(v75, "initWithArray:", v76);

  objc_msgSend(a1, "setUploadAssets:", v77);
  objc_msgSend(a1, "setCloudKitUploadsMaxRetryCount:", a30);
  if (a32)
    v78 = String._bridgeToObjectiveC()();
  else
    v78 = 0;
  v85 = a43;
  v83 = a42;
  objc_msgSend(a1, "setIdType:", v78);

  if (a34)
    v72 = String._bridgeToObjectiveC()();
  v84 = a46;
  objc_msgSend(a1, "setLearnMoreURLString:", v72);

  objc_msgSend(a1, "setShouldScheduleUploads:", a35 & 1);
  if ((a37 & 1) != 0)
    a36 = 2;
  objc_msgSend(a1, "setConnectToWifiReminderInDays:", a36);
  objc_msgSend(a1, "setDidShowWifiReminderAlert:", a38 & 1);
  objc_msgSend(a1, "setShouldShowNotificationOnWatch:", a39 & 1);
  objc_msgSend(a1, "setCanUploadOnExpensiveNetwork:", a40 & 1);
  objc_msgSend(a1, "setTotalUploadAssetsFileSizeInBytes:", v86);
  objc_msgSend(a1, "setDidNotifyOnUploadsCompletion:", v83 & 1);
  objc_msgSend(a1, "setHasUserConsentToShareBiomeData:", v85 & 1);
  if (a45)
    v80 = String._bridgeToObjectiveC()();
  else
    v80 = 0;
  objc_msgSend(a1, "setProductIdentifier:", v80);

  objc_msgSend(a1, "setDidAttemptComboProofing:", v84 & 1);
  if (a48 >> 60 == 15)
    v81 = 0;
  else
    v81 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setSupplementalProvisioningData:", v81);

}

uint64_t sub_100026DA8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100026DC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id StoredProofingSession.update(provisioningCredentialIdentifier:targetInstanceIdentifier:partnerSchemeIdentifier:serverAttestedProvisioningData:issuerCurrentCredentialCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  id result;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v10 = v9;
  result = objc_msgSend(v10, "managedObjectContext");
  if (result)
  {
    v20 = result;
    v21 = (_QWORD *)swift_allocObject(&unk_100603FE0, 96, 7);
    v22 = a8;
    v29 = a8;
    v23 = a6;
    v24 = v21;
    v21[2] = v10;
    v21[3] = a1;
    v21[4] = a2;
    v21[5] = a3;
    v21[6] = a4;
    v21[7] = a5;
    v21[8] = v23;
    v21[9] = a7;
    v21[10] = v22;
    v21[11] = a9;
    v25 = swift_allocObject(&unk_100604008, 32, 7);
    *(_QWORD *)(v25 + 16) = sub_10002809C;
    *(_QWORD *)(v25 + 24) = v24;
    aBlock[4] = sub_10002B224;
    v31 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100604020;
    v26 = _Block_copy(aBlock);
    v27 = v31;
    v28 = v10;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v23);
    sub_100028034(a7, v29);
    swift_retain(v25);
    swift_release(v27);
    objc_msgSend(v20, "performBlockAndWait:", v26);

    _Block_release(v26);
    LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v25, "", 93, 87, 51, 1);
    swift_release(v24);
    result = (id)swift_release(v25);
    if ((v26 & 1) != 0)
      __break(1u);
  }
  return result;
}

id sub_100026FB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  NSString v11;
  NSString v12;
  NSString v13;
  Class isa;

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProvisioningCredentialID:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProvisioningTargetInstanceID:", v12);

  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPartnerSchemeID:", v13);

  if (a9 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setServerAttestedProvisioningData:", isa);

  return objc_msgSend(a1, "setIssuerCurrentCredentialCapacity:", a10);
}

Swift::Void __swiftcall StoredProofingSession.update(shouldShowNotificationOnWatch:)(Swift::Bool shouldShowNotificationOnWatch)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604058, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = shouldShowNotificationOnWatch;
    v7 = swift_allocObject(&unk_100604080, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_1000280E0;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604098;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 97, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id StoredProofingSession.update(provisioningAttemptDate:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  result = objc_msgSend(v1, "managedObjectContext");
  if (result)
  {
    v7 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
    v8 = *(unsigned __int8 *)(v4 + 80);
    v9 = (v8 + 24) & ~v8;
    v10 = swift_allocObject(&unk_1006040D0, v9 + v5, v8 | 7);
    *(_QWORD *)(v10 + 16) = v1;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    v11 = swift_allocObject(&unk_1006040F8, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_100028108;
    *(_QWORD *)(v11 + 24) = v10;
    aBlock[4] = sub_10002B224;
    v16 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100604110;
    v12 = _Block_copy(aBlock);
    v13 = v16;
    v14 = v1;
    swift_retain(v11);
    swift_release(v13);
    objc_msgSend(v7, "performBlockAndWait:", v12);

    _Block_release(v12);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v11, "", 93, 103, 51, 1);
    swift_release(v10);
    result = (id)swift_release(v11);
    if ((v7 & 1) != 0)
      __break(1u);
  }
  return result;
}

Swift::Void __swiftcall StoredProofingSession.update(canUploadOnExpensiveNetwork:)(Swift::Bool canUploadOnExpensiveNetwork)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604148, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = canUploadOnExpensiveNetwork;
    v7 = swift_allocObject(&unk_100604170, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100028124;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604188;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 109, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id StoredProofingSession.update(_:proofingSessionID:manualCheckInterval:createdAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v28 = a5;
  v12 = sub_100004828(&qword_100633990);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v6, "managedObjectContext");
  if (result)
  {
    v17 = result;
    sub_100027B0C(a6, (uint64_t)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v18 = *(unsigned __int8 *)(v13 + 80);
    v19 = (v18 + 64) & ~v18;
    v20 = (_QWORD *)swift_allocObject(&unk_1006041C0, v19 + v14, v18 | 7);
    v20[2] = v6;
    v20[3] = a1;
    v21 = a2;
    v20[4] = a2;
    v20[5] = a3;
    v22 = v28;
    v20[6] = a4;
    v20[7] = v22;
    sub_100027D88((uint64_t)v15, (uint64_t)v20 + v19);
    v23 = swift_allocObject(&unk_1006041E8, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_1000281F8;
    *(_QWORD *)(v23 + 24) = v20;
    aBlock[4] = sub_10002B224;
    v30 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100604200;
    v24 = _Block_copy(aBlock);
    v25 = v30;
    v26 = v6;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(a4);
    swift_retain(v23);
    swift_release(v25);
    objc_msgSend(v17, "performBlockAndWait:", v24);

    _Block_release(v24);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v23, "", 93, 115, 51, 1);
    swift_release(v20);
    result = (id)swift_release(v23);
    if ((v19 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_100027728(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;

  v10 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setWorkflowID:", v13);

  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProofingSessionID:", v14);

  objc_msgSend(a1, "setManualCheckInterval:", a6);
  sub_100027B0C(a7, (uint64_t)v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  }
  objc_msgSend(a1, "setCreatedAt:", isa);

}

Swift::Void __swiftcall StoredProofingSession.update(_:_:_:)(Swift::String_optional a1, Swift::String_optional a2, Swift::String_optional a3)
{
  void *v3;
  void *v4;
  void *object;
  uint64_t countAndFlagsBits;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[5];
  uint64_t v20;

  v4 = v3;
  object = a3.value._object;
  countAndFlagsBits = a3.value._countAndFlagsBits;
  v7 = a2.value._object;
  v8 = a2.value._countAndFlagsBits;
  v9 = a1.value._object;
  v10 = a1.value._countAndFlagsBits;
  v11 = objc_msgSend(v4, "managedObjectContext");
  if (v11)
  {
    v12 = v11;
    v13 = (_QWORD *)swift_allocObject(&unk_100604238, 72, 7);
    v13[2] = v4;
    v13[3] = v10;
    v13[4] = v9;
    v13[5] = v8;
    v13[6] = v7;
    v13[7] = countAndFlagsBits;
    v13[8] = object;
    v14 = swift_allocObject(&unk_100604260, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10002824C;
    *(_QWORD *)(v14 + 24) = v13;
    v19[4] = sub_10002B224;
    v20 = v14;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_100026DC8;
    v19[3] = &unk_100604278;
    v15 = _Block_copy(v19);
    v16 = v20;
    swift_bridgeObjectRetain(object);
    swift_retain(v14);
    v17 = v4;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v7);
    swift_release(v16);
    objc_msgSend(v12, "performBlockAndWait:", v15);

    _Block_release(v15);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 93, 124, 51, 1);
    swift_release(v13);
    swift_release(v14);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

id sub_100027A18(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    a2 = IdentityProofingActionStatus.rawValue.getter(3);
  return objc_msgSend(a1, "setProofingActionStatus:", a2);
}

uint64_t sub_100027A58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

id sub_100027A7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 16);
  if (*(_BYTE *)(v0 + 32) == 1)
    v2 = IdentityProofingActionStatus.rawValue.getter(3);
  else
    v2 = *(_QWORD *)(v0 + 24);
  return objc_msgSend(v1, "setProofingActionStatus:", v2);
}

uint64_t sub_100027AC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100027AD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100027AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100027B04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100027B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100633990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v1 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 136) & ~v2;
  v4 = *(_QWORD *)(v1 + 64) + 7;
  v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v2 + v5 + 16) & ~v2;
  v19 = (((v4 + v6) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 17;
  v17 = v8 + 41;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  v10 = v0 + v3;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v18 = v9 & 0xFFFFFFFFFFFFFFF8;
  v14 = v17 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  if (!v13(v0 + v6, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v6, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v19 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v20 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v21 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v22));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v18 + 8));
  v15 = *(_QWORD *)(v0 + v14 + 8);
  if (v15 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + v14), v15);
  return swift_deallocObject(v0, v14 + 16, v2 | 7);
}

uint64_t sub_100027D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100633990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100027DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 136) & ~v2;
  v4 = *(_QWORD *)(v1 + 64) + 7;
  v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v2 + v5 + 16) & ~v2;
  v7 = (v4 + v6) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)(v0 + 80);
  v15 = *(_OWORD *)(v0 + 96);
  v16 = *(_OWORD *)(v0 + 112);
  v17 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 19) & 0xFFFFFFFFFFFFFFF8;
  v19 = (uint64_t *)(v0 + v5);
  v20 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + 41) & 0xFFFFFFFFFFFFFFF8;
  v22 = v0 + ((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = v0 + v17;
  v24 = v0 + v18;
  v25 = v0 + v20;
  sub_10002672C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSString *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSString *)(v0 + 48), *(_QWORD *)(v0 + 56), *(NSString *)(v0 + 64), *(_QWORD *)(v0 + 72), v14, *((void **)&v14 + 1), v15, *((void **)&v15 + 1), v16, *((uint64_t *)&v16 + 1), *(_QWORD *)(v0 + 128), v0 + v3, *v19, v19[1], v0 + v6,
    *(_QWORD *)(v0 + v7),
    *(_QWORD *)(v0 + v8),
    *(_QWORD *)(v0 + v8 + 8),
    *(_QWORD *)(v0 + v9),
    *(_QWORD *)(v0 + v9 + 8),
    *(_QWORD *)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8)),
    *(_BYTE *)(v0 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8),
    *(_QWORD *)(v0 + v10),
    *(_QWORD *)(v0 + v10 + 8),
    *(_QWORD **)(v0 + v11),
    *(_QWORD *)(v0 + v12),
    *(_QWORD *)(v0 + v13),
    *(_QWORD *)(v0 + v13 + 8),
    *(_QWORD *)v22,
    *(void **)(v22 + 8),
    *(_BYTE *)(v22 + 16),
    *(_QWORD *)v23,
    *(_BYTE *)(v23 + 8),
    *(_BYTE *)(v23 + 9),
    *(_BYTE *)(v23 + 10),
    *(_BYTE *)(v23 + 11),
    *(_QWORD *)v24,
    *(_BYTE *)(v24 + 8),
    *(_BYTE *)(v24 + 9),
    *(_QWORD *)v25,
    *(_QWORD *)(v25 + 8),
    *(_BYTE *)(v25 + 16),
    *(_QWORD *)(v0 + v21),
    *(_QWORD *)(v0 + v21 + 8));
}

uint64_t sub_100028024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028034(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100022948(result, a2);
  return result;
}

uint64_t sub_100028048()
{
  uint64_t v0;
  unint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 80);
  if (v1 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 72), v1);
  return swift_deallocObject(v0, 96, 7);
}

id sub_10002809C()
{
  uint64_t v0;

  return sub_100026FB4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1000280D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000280E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setShouldShowNotificationOnWatch:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000280F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100028108()
{
  sub_10002A664((SEL *)&selRef_setProvisioningAttemptDate_);
}

uint64_t sub_100028114()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100028124()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setCanUploadOnExpensiveNetwork:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100028138()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100004828(&qword_100633990) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 64) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1000281F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 80);
  sub_100027728(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v0 + ((v1 + 64) & ~v1));
}

uint64_t sub_100028234()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028244()
{
  return sub_100029DC8(72);
}

void sub_10002824C()
{
  sub_100029E2C((SEL *)&selRef_setProvisioningCredentialID_, (SEL *)&selRef_setProvisioningTargetInstanceID_, (SEL *)&selRef_setPartnerSchemeID_);
}

uint64_t sub_100028268()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(extendedReviewURLString:)(Swift::String_optional extendedReviewURLString)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[5];
  uint64_t v13;

  object = extendedReviewURLString.value._object;
  countAndFlagsBits = extendedReviewURLString.value._countAndFlagsBits;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = (_QWORD *)swift_allocObject(&unk_1006042B0, 40, 7);
    v6[2] = v1;
    v6[3] = countAndFlagsBits;
    v6[4] = object;
    v7 = swift_allocObject(&unk_1006042D8, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_1000283E0;
    *(_QWORD *)(v7 + 24) = v6;
    v12[4] = sub_10002B224;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100026DC8;
    v12[3] = &unk_1006042F0;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_bridgeObjectRetain(object);
    swift_retain(v7);
    v10 = v1;
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 93, 138, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_1000283E0()
{
  uint64_t v0;

  sub_100028578(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSString *)(v0 + 32), (SEL *)&selRef_setExtendedReviewURLString_);
}

uint64_t sub_100028404()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(lastExecutedActionIdentifier:)(Swift::String_optional lastExecutedActionIdentifier)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[5];
  uint64_t v13;

  object = lastExecutedActionIdentifier.value._object;
  countAndFlagsBits = lastExecutedActionIdentifier.value._countAndFlagsBits;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = (_QWORD *)swift_allocObject(&unk_100604328, 40, 7);
    v6[2] = v1;
    v6[3] = countAndFlagsBits;
    v6[4] = object;
    v7 = swift_allocObject(&unk_100604350, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_1000285CC;
    *(_QWORD *)(v7 + 24) = v6;
    v12[4] = sub_10002B224;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100026DC8;
    v12[3] = &unk_100604368;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_bridgeObjectRetain(object);
    swift_retain(v7);
    v10 = v1;
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 93, 144, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_100028578(id a1, uint64_t a2, NSString a3, SEL *a4)
{
  id v6;

  if (a3)
    a3 = String._bridgeToObjectiveC()();
  v6 = a3;
  objc_msgSend(a1, *a4);

}

void sub_1000285CC()
{
  uint64_t v0;

  sub_100028578(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSString *)(v0 + 32), (SEL *)&selRef_setLastExecutedActionIdentifier_);
}

uint64_t sub_1000285F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(uploadAssets:)(Swift::OpaquePointer_optional uploadAssets)
{
  void *v1;
  void *v2;
  void *rawValue;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = v1;
  rawValue = uploadAssets.value._rawValue;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    __chkstk_darwin(v4);
    v7[2] = rawValue;
    v7[3] = v2;
    v6 = sub_100004828((uint64_t *)&unk_100642580);
    NSManagedObjectContext.performAndWait<A>(_:)(&v8, sub_1000287BC, v7, v6);

  }
}

void sub_1000286AC(id a1@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
    goto LABEL_9;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 >= 0)
      v10 = a2 & 0xFFFFFFFFFFFFFF8;
    else
      v10 = a2;
    swift_bridgeObjectRetain(a2);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a2);
    if (v11 >= 1)
      goto LABEL_4;
LABEL_9:
    objc_msgSend(a1, "setUploadAssets:", 0);
    goto LABEL_10;
  }
  if (*(uint64_t *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
    goto LABEL_9;
LABEL_4:
  v6 = sub_1003BE0A4(a2);
  v7 = objc_allocWithZone((Class)NSSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend(v7, "initWithArray:", isa);

  objc_msgSend(a1, "setUploadAssets:", v9);
LABEL_10:
  *a3 = 0;
}

void sub_1000287BC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1000286AC(*(id *)(v1 + 24), *(_QWORD *)(v1 + 16), a1);
}

Swift::Void __swiftcall StoredProofingSession.update(idType:)(Swift::String idType)
{
  void *v1;
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v2 = v1;
  object = idType._object;
  countAndFlagsBits = idType._countAndFlagsBits;
  v5 = objc_msgSend(v1, "managedObjectContext");
  if (v5)
  {
    v6 = v5;
    v7 = (_QWORD *)swift_allocObject(&unk_1006043A0, 40, 7);
    v7[2] = v2;
    v7[3] = countAndFlagsBits;
    v7[4] = object;
    v8 = swift_allocObject(&unk_1006043C8, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_10002896C;
    *(_QWORD *)(v8 + 24) = v7;
    v12[4] = sub_10002B224;
    v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100026DC8;
    v12[3] = &unk_1006043E0;
    v9 = _Block_copy(v12);
    v10 = v13;
    v11 = v2;
    swift_bridgeObjectRetain(object);
    swift_retain(v8);
    swift_release(v10);
    objc_msgSend(v6, "performBlockAndWait:", v9);

    _Block_release(v9);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 93, 160, 51, 1);
    swift_release(v7);
    swift_release(v8);
    if ((v6 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_100028940()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10002896C()
{
  sub_1000293E0((uint64_t (*)(_QWORD, _QWORD))&String._bridgeToObjectiveC(), (SEL *)&selRef_setIdType_);
}

uint64_t sub_100028980()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id StoredProofingSession.update(state:proofingSessionID:pairingID:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  id result;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  _QWORD v23[5];
  uint64_t v24;

  v8 = v7;
  result = objc_msgSend(v7, "managedObjectContext");
  if (result)
  {
    v17 = result;
    v18 = (_QWORD *)swift_allocObject(&unk_100604418, 80, 7);
    v18[2] = v8;
    v18[3] = a1;
    v18[4] = a2;
    v18[5] = a3;
    v18[6] = a4;
    v18[7] = a5;
    v18[8] = a6;
    v18[9] = a7;
    v19 = swift_allocObject(&unk_100604440, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_100028C0C;
    *(_QWORD *)(v19 + 24) = v18;
    v23[4] = sub_10002B224;
    v24 = v19;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_100026DC8;
    v23[3] = &unk_100604458;
    v20 = _Block_copy(v23);
    v21 = v24;
    v22 = v8;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_retain(v19);
    swift_release(v21);
    objc_msgSend(v17, "performBlockAndWait:", v20);

    _Block_release(v20);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v19, "", 93, 166, 51, 1);
    swift_release(v18);
    result = (id)swift_release(v19);
    if ((v17 & 1) != 0)
      __break(1u);
  }
  return result;
}

id sub_100028B2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSString v10;
  NSString v11;
  NSString v12;

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setState:", v10);

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProofingSessionID:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPairingID:", v12);

  return objc_msgSend(a1, "setTarget:", IdentityTarget.rawValue.getter(a8));
}

uint64_t sub_100028C04()
{
  return sub_100029DC8(80);
}

id sub_100028C0C()
{
  uint64_t v0;

  return sub_100028B2C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100028C20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(shouldScheduleUploads:)(Swift::Bool shouldScheduleUploads)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604490, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = shouldScheduleUploads;
    v7 = swift_allocObject(&unk_1006044B8, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100028DAC;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_1006044D0;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 175, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_100028D88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_100028DAC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setShouldScheduleUploads:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100028DC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(didShowWifiReminderAlert:)(Swift::Bool didShowWifiReminderAlert)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604508, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = didShowWifiReminderAlert;
    v7 = swift_allocObject(&unk_100604530, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100028F28;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604548;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 181, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_100028F28()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setDidShowWifiReminderAlert:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100028F3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(didNotifyOnUploadsCompletion:)(Swift::Bool didNotifyOnUploadsCompletion)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604580, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = didNotifyOnUploadsCompletion;
    v7 = swift_allocObject(&unk_1006045A8, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_1000290B8;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_1006045C0;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 187, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_1000290A4(void *a1, char a2)
{
  return objc_msgSend(a1, "setDidNotifyOnUploadsCompletion:", a2 & 1);
}

id sub_1000290B8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setDidNotifyOnUploadsCompletion:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000290CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(hasUserConsentToShareBiomeData:)(Swift::Bool hasUserConsentToShareBiomeData)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_1006045F8, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = hasUserConsentToShareBiomeData;
    v7 = swift_allocObject(&unk_100604620, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100029234;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604638;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 193, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_100029234()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setHasUserConsentToShareBiomeData:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100029248()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id StoredProofingSession.update(serverAttestedProvisioningData:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  id result;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = v2;
  result = objc_msgSend(v2, "managedObjectContext");
  if (result)
  {
    v7 = result;
    v8 = (_QWORD *)swift_allocObject(&unk_100604670, 40, 7);
    v8[2] = v3;
    v8[3] = a1;
    v8[4] = a2;
    v9 = swift_allocObject(&unk_100604698, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_1000293CC;
    *(_QWORD *)(v9 + 24) = v8;
    v13[4] = sub_10002B224;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100026DC8;
    v13[3] = &unk_1006046B0;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = v3;
    sub_100022948(a1, a2);
    swift_retain(v9);
    swift_release(v11);
    objc_msgSend(v7, "performBlockAndWait:", v10);

    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 93, 199, 51, 1);
    swift_release(v8);
    result = (id)swift_release(v9);
    if ((v7 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_1000293C4()
{
  return sub_10002990C(40);
}

void sub_1000293CC()
{
  sub_1000293E0((uint64_t (*)(_QWORD, _QWORD))&Data._bridgeToObjectiveC(), (SEL *)&selRef_setServerAttestedProvisioningData_);
}

void sub_1000293E0(uint64_t (*a1)(_QWORD, _QWORD), SEL *a2)
{
  _QWORD *v2;
  void *v4;
  id v5;

  v4 = (void *)v2[2];
  v5 = (id)a1(v2[3], v2[4]);
  objc_msgSend(v4, *a2, v5);

}

uint64_t sub_100029434()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingSession.update(issuerCurrentCredentialCapacity:)(Swift::Int issuerCurrentCredentialCapacity)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_1006046E8, 32, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_QWORD *)(v6 + 24) = issuerCurrentCredentialCapacity;
    v7 = swift_allocObject(&unk_100604710, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_1000295B8;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604728;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 205, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_100029594()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000295B8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setIssuerCurrentCredentialCapacity:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000295C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

const char *StoredPrearmTrust.entityName.unsafeMutableAddressor()
{
  return "PrearmTrust";
}

uint64_t static StoredPrearmTrust.entityName.getter()
{
  return 0x72546D7261657250;
}

uint64_t StoredPrearmTrust.Version.init(rawValue:)(__int16 a1)
{
  if ((a1 & 0xFFFC) != 0)
    return 3;
  else
    return 0x2010003u >> (8 * a1);
}

uint64_t StoredPrearmTrust.Version.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL sub_100029634(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100029648()
{
  unsigned __int8 *v0;
  __int16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10002968C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1000296B8(uint64_t a1)
{
  unsigned __int8 *v1;
  __int16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000296F8@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2;
  char v3;

  v2 = *result;
  if (v2 >= 4)
    v3 = 3;
  else
    v3 = 0x2010003u >> (8 * v2);
  *a2 = v3;
  return result;
}

void sub_100029720(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

id StoredPrearmTrust.update(keyBlob:version:)(uint64_t a1, unint64_t a2, __int16 a3)
{
  void *v3;
  void *v4;
  id result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;

  v4 = v3;
  result = objc_msgSend(v3, "managedObjectContext");
  if (result)
  {
    v9 = result;
    v10 = swift_allocObject(&unk_100604760, 42, 7);
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = a1;
    *(_QWORD *)(v10 + 32) = a2;
    *(_WORD *)(v10 + 40) = a3;
    v11 = swift_allocObject(&unk_100604788, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_100029944;
    *(_QWORD *)(v11 + 24) = v10;
    v15[4] = sub_10002B224;
    v16 = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_100026DC8;
    v15[3] = &unk_1006047A0;
    v12 = _Block_copy(v15);
    v13 = v16;
    v14 = v4;
    sub_100022948(a1, a2);
    swift_retain(v11);
    swift_release(v13);
    objc_msgSend(v9, "performBlockAndWait:", v12);

    _Block_release(v12);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 93, 230, 51, 1);
    swift_release(v10);
    result = (id)swift_release(v11);
    if ((v9 & 1) != 0)
      __break(1u);
  }
  return result;
}

id sub_1000298A4(void *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setKeyBlob:", isa);

  return objc_msgSend(a1, "setVersion:", a4);
}

uint64_t sub_100029904()
{
  return sub_10002990C(42);
}

uint64_t sub_10002990C(uint64_t a1)
{
  uint64_t v1;

  sub_100007F8C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

id sub_100029944()
{
  uint64_t v0;

  return sub_1000298A4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_WORD *)(v0 + 40));
}

uint64_t sub_100029954()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredPrearmTrust.update(requiresDeletion:)(Swift::Bool requiresDeletion)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_1006047D8, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = requiresDeletion;
    v7 = swift_allocObject(&unk_100604800, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100029ABC;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604818;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 247, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_100029ABC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setRequiresDeletion:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100029AD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

const char *StoredUploadAsset.entityName.unsafeMutableAddressor()
{
  return "UploadAsset";
}

uint64_t static StoredUploadAsset.entityName.getter()
{
  return 0x734164616F6C7055;
}

Swift::Void __swiftcall StoredUploadAsset.update(assetFileURL:assetType:recordUUID:)(Swift::String_optional assetFileURL, Swift::String_optional assetType, Swift::String_optional recordUUID)
{
  void *v3;
  void *v4;
  void *object;
  uint64_t countAndFlagsBits;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[5];
  uint64_t v20;

  v4 = v3;
  object = recordUUID.value._object;
  countAndFlagsBits = recordUUID.value._countAndFlagsBits;
  v7 = assetType.value._object;
  v8 = assetType.value._countAndFlagsBits;
  v9 = assetFileURL.value._object;
  v10 = assetFileURL.value._countAndFlagsBits;
  v11 = objc_msgSend(v4, "managedObjectContext");
  if (v11)
  {
    v12 = v11;
    v13 = (_QWORD *)swift_allocObject(&unk_100604850, 72, 7);
    v13[2] = v4;
    v13[3] = v10;
    v13[4] = v9;
    v13[5] = v8;
    v13[6] = v7;
    v13[7] = countAndFlagsBits;
    v13[8] = object;
    v14 = swift_allocObject(&unk_100604878, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_100029E10;
    *(_QWORD *)(v14 + 24) = v13;
    v19[4] = sub_10002B224;
    v20 = v14;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_100026DC8;
    v19[3] = &unk_100604890;
    v15 = _Block_copy(v19);
    v16 = v20;
    swift_bridgeObjectRetain(object);
    swift_retain(v14);
    v17 = v4;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v7);
    swift_release(v16);
    objc_msgSend(v12, "performBlockAndWait:", v15);

    _Block_release(v15);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 93, 265, 51, 1);
    swift_release(v13);
    swift_release(v14);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_100029CA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  sub_100029CDC(a1, a2, a3, a4, a5, a6, a7, (SEL *)&selRef_setAssetFileURL_, (SEL *)&selRef_setAssetType_, (SEL *)&selRef_setRecordUUID_);
}

void sub_100029CDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7, SEL *a8, SEL *a9, SEL *a10)
{
  NSString v14;
  NSString v15;
  id v16;

  if (a3)
    v14 = String._bridgeToObjectiveC()();
  else
    v14 = 0;
  objc_msgSend(a1, *a8, v14);

  if (a5)
    a5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, *a9, a5);

  if (a7)
    v15 = String._bridgeToObjectiveC()();
  else
    v15 = 0;
  v16 = v15;
  objc_msgSend(a1, *a10);

}

uint64_t sub_100029DC0()
{
  return sub_100029DC8(72);
}

uint64_t sub_100029DC8(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  return swift_deallocObject(v1, a1, 7);
}

void sub_100029E10()
{
  sub_100029E2C((SEL *)&selRef_setAssetFileURL_, (SEL *)&selRef_setAssetType_, (SEL *)&selRef_setRecordUUID_);
}

void sub_100029E2C(SEL *a1, SEL *a2, SEL *a3)
{
  uint64_t v3;

  sub_100029CDC(*(void **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(NSString *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), a1, a2, a3);
}

uint64_t sub_100029E68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *StoredProofingBiomeData.entityName.unsafeMutableAddressor()
{
  return &static StoredProofingBiomeData.entityName;
}

unint64_t static StoredProofingBiomeData.entityName.getter()
{
  return 0xD000000000000011;
}

Swift::Void __swiftcall StoredProofingBiomeData.update(proofingSessionID:proofingDecision:isDonated:)(Swift::String_optional proofingSessionID, Swift::String_optional proofingDecision, Swift::Bool isDonated)
{
  void *v3;
  void *v4;
  void *object;
  uint64_t countAndFlagsBits;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD v17[5];
  uint64_t v18;

  v4 = v3;
  object = proofingDecision.value._object;
  countAndFlagsBits = proofingDecision.value._countAndFlagsBits;
  v8 = proofingSessionID.value._object;
  v9 = proofingSessionID.value._countAndFlagsBits;
  v10 = objc_msgSend(v3, "managedObjectContext");
  if (v10)
  {
    v11 = v10;
    v12 = swift_allocObject(&unk_1006048C8, 57, 7);
    *(_QWORD *)(v12 + 16) = v4;
    *(_QWORD *)(v12 + 24) = v9;
    *(_QWORD *)(v12 + 32) = v8;
    *(_QWORD *)(v12 + 40) = countAndFlagsBits;
    *(_QWORD *)(v12 + 48) = object;
    *(_BYTE *)(v12 + 56) = isDonated;
    v13 = swift_allocObject(&unk_1006048F0, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_10002A104;
    *(_QWORD *)(v13 + 24) = v12;
    v17[4] = sub_10002B224;
    v18 = v13;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100026DC8;
    v17[3] = &unk_100604908;
    v14 = _Block_copy(v17);
    v15 = v18;
    swift_bridgeObjectRetain(object);
    swift_retain(v13);
    v16 = v4;
    swift_bridgeObjectRetain(v8);
    swift_release(v15);
    objc_msgSend(v11, "performBlockAndWait:", v14);

    _Block_release(v14);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v13, "", 93, 277, 51, 1);
    swift_release(v12);
    swift_release(v13);
    if ((v11 & 1) != 0)
      __break(1u);
  }
}

id sub_10002A028(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, char a6)
{
  NSString v9;

  if (a3)
    v9 = String._bridgeToObjectiveC()();
  else
    v9 = 0;
  objc_msgSend(a1, "setProofingSessionID:", v9);

  if (a5)
    a5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setProofingDecision:", a5);

  return objc_msgSend(a1, "setIsDonated:", a6 & 1);
}

uint64_t sub_10002A0D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 57, 7);
}

id sub_10002A104()
{
  uint64_t v0;

  return sub_10002A028(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(NSString *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

uint64_t sub_10002A118()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingBiomeData.update(isDonated:)(Swift::Bool isDonated)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_100604940, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = isDonated;
    v7 = swift_allocObject(&unk_100604968, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_10002A280;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_100604980;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 285, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_10002A280()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setIsDonated:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10002A294()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Void __swiftcall StoredProofingBiomeData.update(optInStatus:)(Swift::Bool optInStatus)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v2 = v1;
  v4 = objc_msgSend(v1, "managedObjectContext");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_1006049B8, 25, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_BYTE *)(v6 + 24) = optInStatus;
    v7 = swift_allocObject(&unk_1006049E0, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_10002A3FC;
    *(_QWORD *)(v7 + 24) = v6;
    v11[4] = sub_10002B224;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100026DC8;
    v11[3] = &unk_1006049F8;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = v2;
    swift_retain(v7);
    swift_release(v9);
    objc_msgSend(v5, "performBlockAndWait:", v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 93, 291, 51, 1);
    swift_release(v6);
    swift_release(v7);
    if ((v5 & 1) != 0)
      __break(1u);
  }
}

id sub_10002A3FC()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setOptInStatus:", *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10002A410()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id StoredProofingBiomeData.update(optInDate:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  result = objc_msgSend(v1, "managedObjectContext");
  if (result)
  {
    v7 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
    v8 = *(unsigned __int8 *)(v4 + 80);
    v9 = (v8 + 24) & ~v8;
    v10 = swift_allocObject(&unk_100604A30, v9 + v5, v8 | 7);
    *(_QWORD *)(v10 + 16) = v1;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    v11 = swift_allocObject(&unk_100604A58, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_10002A658;
    *(_QWORD *)(v11 + 24) = v10;
    aBlock[4] = sub_10002B224;
    v16 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100604A70;
    v12 = _Block_copy(aBlock);
    v13 = v16;
    v14 = v1;
    swift_retain(v11);
    swift_release(v13);
    objc_msgSend(v7, "performBlockAndWait:", v12);

    _Block_release(v12);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v11, "", 93, 297, 51, 1);
    swift_release(v10);
    result = (id)swift_release(v11);
    if ((v7 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10002A5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002A658()
{
  sub_10002A664((SEL *)&selRef_setOptInDate_);
}

void sub_10002A664(SEL *a1)
{
  uint64_t v1;
  void *v3;
  Class isa;

  type metadata accessor for Date(0);
  v3 = *(void **)(v1 + 16);
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, *a1, isa);

}

uint64_t sub_10002A6CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id StoredProofingBiomeData.update(proofingSessionID:credentialIdentifier:optInDate:optInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  _BYTE v26[12];
  int v27;
  id v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v29 = a3;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  result = objc_msgSend(v6, "managedObjectContext");
  if (result)
  {
    v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16);
    v28 = result;
    v16(&v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a5, v12);
    v17 = *(unsigned __int8 *)(v13 + 80);
    v27 = a6;
    v18 = (v17 + 57) & ~v17;
    v19 = swift_allocObject(&unk_100604AA8, v18 + v14, v17 | 7);
    *(_QWORD *)(v19 + 16) = v6;
    *(_QWORD *)(v19 + 24) = a1;
    v20 = v29;
    *(_QWORD *)(v19 + 32) = a2;
    *(_QWORD *)(v19 + 40) = v20;
    *(_QWORD *)(v19 + 48) = a4;
    *(_BYTE *)(v19 + 56) = v27 & 1;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(v19 + v18, &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
    v21 = swift_allocObject(&unk_100604AD0, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_10002AA40;
    *(_QWORD *)(v21 + 24) = v19;
    aBlock[4] = sub_10002B224;
    v31 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100026DC8;
    aBlock[3] = &unk_100604AE8;
    v22 = _Block_copy(aBlock);
    v23 = v31;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_retain(v21);
    v24 = v6;
    swift_release(v23);
    v25 = v28;
    objc_msgSend(v28, "performBlockAndWait:", v22);

    _Block_release(v22);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v21, "", 93, 303, 51, 1);
    swift_release(v19);
    result = (id)swift_release(v21);
    if ((v22 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_10002A8E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  NSString v8;
  NSString v9;
  Class isa;

  if (a3)
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  objc_msgSend(a1, "setProofingSessionID:", v8);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setCredentialIdentifier:", v9);

  objc_msgSend(a1, "setOptInStatus:", a6 & 1);
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setOptInDate:", isa);

}

uint64_t sub_10002A9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 57) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002AA40()
{
  uint64_t v0;

  type metadata accessor for Date(0);
  sub_10002A8E8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

uint64_t sub_10002AA7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *StoredRandomizedBackgroundActivity.entityName.unsafeMutableAddressor()
{
  return &static StoredRandomizedBackgroundActivity.entityName;
}

unint64_t static StoredRandomizedBackgroundActivity.entityName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t StoredRandomizedBackgroundActivity.update(lastAttemptAt:lastSuccessfulAttemptAt:nextAttemptAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  Class isa;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v38;
  Class v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  v4 = v3;
  v41 = a3;
  v42 = a2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v40 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100633990);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v40 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v40 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v40 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v40 - v22;
  v43 = v4;
  v24 = objc_msgSend(v4, "lastAttemptAt");
  if (v24)
  {
    v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v21, 0, 1, v6);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v26(v21, 1, 1, v6);
  }
  v27 = sub_10002ADFC();
  optionalMax<A>(_:_:)(a1, v21, v6, v27);
  sub_10001E5E4((uint64_t)v21);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v28(v23, 1, v6) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
  }
  v30 = v43;
  objc_msgSend(v43, "setLastAttemptAt:", isa);

  v31 = v30;
  v32 = objc_msgSend(v30, "lastSuccessfulAttemptAt");
  if (v32)
  {
    v33 = v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  v26(v15, v34, 1, v6);
  optionalMax<A>(_:_:)(v42, v15, v6, v27);
  sub_10001E5E4((uint64_t)v15);
  if (v28(v18, 1, v6) == 1)
  {
    v35 = 0;
  }
  else
  {
    v35 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  v36 = v41;
  objc_msgSend(v31, "setLastSuccessfulAttemptAt:", v35);

  sub_100027B0C(v36, (uint64_t)v12);
  if (v28(v12, 1, v6) == 1)
    return sub_10001E5E4((uint64_t)v12);
  v38 = v40;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v40, v12, v6);
  v39 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v31, "setNextAttemptAt:", v39);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v38, v6);
}

unint64_t sub_10002ADFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100630538;
  if (!qword_100630538)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100630538);
  }
  return result;
}

unint64_t sub_10002AE48()
{
  unint64_t result;

  result = qword_100630540;
  if (!qword_100630540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoredPrearmTrust.Version, &type metadata for StoredPrearmTrust.Version);
    atomic_store(result, (unint64_t *)&qword_100630540);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for IDVDataSource(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s7VersionOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7VersionOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10002AF74 + 4 * byte_100520395[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002AFA8 + 4 * asc_100520390[v4]))();
}

uint64_t sub_10002AFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002AFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002AFB8);
  return result;
}

uint64_t sub_10002AFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002AFCCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10002AFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002AFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002AFE4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10002AFEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for StoredPrearmTrust.Version()
{
  return &type metadata for StoredPrearmTrust.Version;
}

uint64_t initializeBufferWithCopyOfBuffer for PrearmTrustWrapper(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for PrearmTrustWrapper(uint64_t *a1)
{
  sub_100007F8C(*a1, a1[1]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100022948(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100022948(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100007F8C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PrearmTrustWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100007F8C(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrearmTrustWrapper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrearmTrustWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrearmTrustWrapper()
{
  return &type metadata for PrearmTrustWrapper;
}

uint64_t sub_10002B310()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  __int128 v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  if (qword_10062F500 != -1)
    swift_once(&qword_10062F500, sub_1003723C4);
  v0 = qword_100670388;
  v1 = objc_allocWithZone((Class)DCBiometricStore);
  swift_bridgeObjectRetain(v0);
  v11 = &type metadata for IDCredBiometricStore;
  v12 = &off_100617380;
  *(_QWORD *)&v10 = objc_msgSend(v1, "init");
  v2 = type metadata accessor for DigitalPresentmentCredentialManager();
  v3 = swift_allocObject(v2, 104, 7);
  *(_QWORD *)(v3 + 16) = v0;
  sub_10002F1A4((uint64_t)v13, (uint64_t)&v5);
  if (v6)
  {
    sub_100008030((uint64_t)v13, &qword_100630908);
    sub_100008018(&v5, (uint64_t)&v7);
  }
  else
  {
    swift_bridgeObjectRetain(v0);
    sub_100008030((uint64_t)&v5, &qword_100630908);
    v8 = &type metadata for IDCredCredentialStore;
    v9 = &off_1006070F8;
    *(_QWORD *)&v7 = v0;
    sub_100008030((uint64_t)v13, &qword_100630908);
  }
  sub_100008018(&v7, v3 + 24);
  sub_100008018(&v10, v3 + 64);
  return v3;
}

_QWORD *sub_10002B460()
{
  _OWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  _QWORD v43[6];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CVConfigurationProvider(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v36 - v19;
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  v0[1] = 0u;
  FeatureFlagProvider.init()(v18);
  v21 = sub_10002B310();
  v22 = type metadata accessor for DIPBackgroundActivityManager(0);
  v23 = static DIPBackgroundActivityManager.sharedInstance.getter(v22);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  sub_100386658((uint64_t)v41, (uint64_t)v43);
  sub_10002F044((uint64_t)v20, (uint64_t)v17);
  sub_10002F088((uint64_t)v43, (uint64_t)v41);
  v24 = sub_10002D67C((uint64_t)v17, v21, v23, v41);
  sub_10002F0C4((uint64_t)v43);
  sub_10002F0F8((uint64_t)v20);
  v1[12] = v24;
  v25 = sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v25);
  v43[0] = _swiftEmptyArrayStorage;
  v26 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v27 = sub_100004828((uint64_t *)&unk_100636400);
  v28 = sub_100025D68((unint64_t *)&qword_10062FF50, (uint64_t *)&unk_100636400);
  dispatch thunk of SetAlgebra.init<A>(_:)(v43, v27, v28, v8, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v38);
  v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x8000000100540830, v13, v10, v7, 0);
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = v29;
  v30 = defaultLogger()(v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Entering Daemon initializer group", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v40);
  dispatch_group_enter((dispatch_group_t)qword_100670078);
  v34 = os_transaction_create("DaemonInit");
  sub_10002B804();
  swift_unknownObjectRelease(v34);
  return v1;
}

void sub_10002B804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v17[5];
  _OWORD v18[12];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BBD0();
  sub_10002C4D8();
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v5 = qword_1006702A0;
  v6 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v7 = (uint64_t)&v6[4];
  v8 = v6 + 52;
  os_unfair_lock_lock(v6 + 52);
  sub_100139D14(v7, v5, v18);
  if (v0)
  {
    os_unfair_lock_unlock(v8);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v8);
    sub_10002581C((uint64_t)v18, (uint64_t)v17);
    sub_10001D410(v18);
    sub_10000806C(v17, v17[3]);
    sub_100107C68();
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v17);
    sub_10002CD80();
    if ((byte_100670060 & 1) != 0)
      sub_10002D51C();
    sub_10002DC68();
    sub_10002C164();
    v9._object = (void *)0x8000000100540860;
    v10._countAndFlagsBits = 0x3230366538633331;
    v10._object = (void *)0xE800000000000000;
    v9._countAndFlagsBits = 0xD000000000000012;
    logMilestone(tag:description:)(v10, v9);
    dispatch_group_leave((dispatch_group_t)qword_100670078);
    v12 = defaultLogger()(v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Leaving Daemon initializer group", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t sub_10002BA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Deinit called from DaemonInitializer", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_release(*(_QWORD *)(v1 + 96));

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 112));
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 120));
  return v1;
}

uint64_t sub_10002BB90()
{
  uint64_t v0;

  sub_10002BA28();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for DaemonInitializer()
{
  return objc_opt_self(_TtC8coreidvd17DaemonInitializer);
}

void (__cdecl *sub_10002BBD0())(int)
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  void *v30;
  void (__cdecl *v31)(int);
  void (__cdecl *result)(int);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **aBlock;
  uint64_t v39;
  void *v40;
  void *v41;
  void (*v42)();
  uint64_t v43;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Setting up System listeners", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (qword_10062F468 != -1)
    swift_once(&qword_10062F468, sub_1000B68BC);
  sub_1000B6700(qword_100670230, *(uint64_t *)algn_100670238, qword_100670240, unk_100670248);
  v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DIPSystemNotificationListener()), "init");
  v18 = (void *)v1[3];
  v1[3] = v17;

  v19 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v20 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v42 = sub_10002BFB4;
  v43 = 0;
  aBlock = _NSConcreteStackBlock;
  v39 = 1107296256;
  v40 = sub_10039EA80;
  v41 = &unk_100604D98;
  v21 = _Block_copy(&aBlock);
  v22 = objc_msgSend(v19, "addObserverForName:object:queue:usingBlock:", NSCurrentLocaleDidChangeNotification, 0, v20, v21);
  _Block_release(v21);
  swift_unknownObjectRelease(v22);

  sub_10001CFF8(0, (unint64_t *)&unk_1006308F8, OS_dispatch_source_ptr);
  v23 = (void *)v1[13];
  v24 = v23;
  v25 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, v23);

  v26 = v1[14];
  v1[14] = v25;
  v27 = swift_unknownObjectRelease(v26);
  v28 = v1[14];
  if (v28)
  {
    ObjectType = swift_getObjectType(v1[14]);
    v42 = sub_10002C08C;
    v43 = 0;
    aBlock = _NSConcreteStackBlock;
    v39 = 1107296256;
    v40 = sub_1004AB190;
    v41 = &unk_100604DC0;
    v30 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v28);
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
    sub_1000508A8();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v7, v4, v30, ObjectType);
    _Block_release(v30);
    swift_unknownObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v37);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v35);
  }
  v31 = (void (__cdecl *)(int))SIG_IGN.getter(v27);
  result = signal(15, v31);
  v33 = v1[14];
  if (v33)
  {
    swift_getObjectType(v1[14]);
    swift_unknownObjectRetain(v33);
    OS_dispatch_source.resume()();
    return (void (__cdecl *)(int))swift_unknownObjectRelease(v33);
  }
  return result;
}

void sub_10002BFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Locale changed. stopping daemon", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  exit(0);
}

void sub_10002C08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SIGTERM received; shutting down", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  exit(0);
}

uint64_t *sub_10002C164()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(char *, uint64_t);
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  char *v38;
  void *v39;
  uint64_t v41[18];
  __int128 v42;
  _BYTE v43[144];
  __int128 v44;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v41 - v8;
  v10 = defaultLogger()(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Setting up IDV listeners", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v9, v2);
  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IDVServiceListener()), "init");
  v16 = (void *)v1[2];
  v1[2] = v15;

  v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IdentityManagementListener()), "init");
  v18 = (void *)v1[4];
  v1[4] = v17;

  v20 = v1[4];
  if (v20)
  {
    v21 = *(void **)(v20 + OBJC_IVAR____TtC8coreidvd26IdentityManagementListener_watchSessionManager);
    v19 = v21;
  }
  else
  {
    v21 = 0;
  }
  v22 = defaultLogger()(v19);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "DaemonInitializer setting watch", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v14(v6, v2);
  v26 = (void *)v1[5];
  v1[5] = v21;

  v27 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IdentityProofingDataSharingListener()), "init");
  v28 = (void *)v1[8];
  v1[8] = v27;

  v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IdentityProvisioningListener()), "init");
  v30 = (void *)v1[6];
  v1[6] = v29;

  v31 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IdentityProofingListener()), "init");
  v32 = (void *)v1[7];
  v1[7] = v31;

  v33 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DIDocUploadSessionListener()), "init");
  v34 = (void *)v1[9];
  v1[9] = v33;

  v35 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MobileDocumentReaderListener()), "init");
  v36 = (void *)v1[11];
  v1[11] = v35;

  memset(v41, 0, sizeof(v41));
  *(_QWORD *)&v42 = sub_10002EDF8;
  *((_QWORD *)&v42 + 1) = v1;
  v44 = v42;
  memset(v43, 0, sizeof(v43));
  v37 = objc_allocWithZone((Class)type metadata accessor for DigitalPresentmentListener());
  swift_retain(v1);
  sub_10002EE34(v41);
  v38 = sub_1003B9E6C((uint64_t)v43);
  v39 = (void *)v1[10];
  v1[10] = v38;

  if (qword_10062F5E0 != -1)
    swift_once(&qword_10062F5E0, sub_1004F2EDC);
  sub_1004F4AE4();
  return sub_10002EF3C(v41);
}

void sub_10002C4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  char *v20;
  uint8_t *v21;
  uint8_t *v22;
  dispatch_group_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  dispatch_group_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD);
  void (*v39)(_QWORD, _QWORD);
  void *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  dispatch_group_t v60;
  NSObject *v61;
  void (*v62)(_QWORD, _QWORD);
  uint64_t v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  dispatch_group_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void **aBlock;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  void *v83;
  uint64_t (*v84)();
  uint64_t v85;

  v69 = type metadata accessor for DispatchWorkItemFlags(0);
  v77 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v68 = (char *)&v67 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v75 = v2;
    v19 = v1;
    v20 = v4;
    v21 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Performing daemon launch tasks", v18, 2u);
    v22 = v21;
    v4 = v20;
    v1 = v19;
    v2 = v75;
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v23 = dispatch_group_create();
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  v24 = static OS_dispatch_queue.Attributes.concurrent.getter();
  v25 = v6;
  static DispatchQoS.unspecified.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  v72 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000017, 0x80000001005407B0, v6, v9, v4, 0);
  v84 = (uint64_t (*)())sub_10002CCBC;
  v85 = 0;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604CA8;
  v26 = _Block_copy(&aBlock);
  v27 = v23;
  v28 = v23;
  static DispatchQoS.unspecified.getter(v28);
  v79 = _swiftEmptyArrayStorage;
  v29 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100004828((uint64_t *)&unk_1006308D0);
  v71 = v30;
  v31 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  v32 = v68;
  v33 = v30;
  v75 = v31;
  v34 = v69;
  v73 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v33, v31, v69, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v27, v25, v32, v26);
  _Block_release(v26);

  v77 = *(_QWORD *)(v77 + 8);
  ((void (*)(char *, uint64_t))v77)(v32, v34);
  v74 = *(_QWORD *)(v74 + 8);
  ((void (*)(char *, uint64_t))v74)(v25, v78);
  v84 = sub_10002CD54;
  v85 = 0;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604CD0;
  v35 = _Block_copy(&aBlock);
  v36 = v28;
  static DispatchQoS.unspecified.getter(v36);
  v79 = _swiftEmptyArrayStorage;
  v37 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v71, v31, v34, v29);
  v70 = v27;
  OS_dispatch_queue.async(group:qos:flags:execute:)(v27, v25, v32, v35);
  _Block_release(v35);

  v38 = (void (*)(_QWORD, _QWORD))v77;
  ((void (*)(char *, uint64_t))v77)(v32, v34);
  v39 = (void (*)(_QWORD, _QWORD))v74;
  ((void (*)(char *, uint64_t))v74)(v25, v78);
  v84 = sub_10002CD58;
  v85 = 0;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604CF8;
  v40 = _Block_copy(&aBlock);
  v41 = v36;
  static DispatchQoS.unspecified.getter(v41);
  v79 = _swiftEmptyArrayStorage;
  v42 = v37;
  v43 = v75;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v42, v75, v34, v73);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v27, v25, v32, v40);
  _Block_release(v40);

  v44 = v41;
  v38(v32, v34);
  v45 = v25;
  v39(v25, v78);
  v46 = v76;
  v84 = sub_10002DC5C;
  v85 = v76;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604D20;
  v47 = _Block_copy(&aBlock);
  v48 = v44;
  v49 = swift_retain(v46);
  static DispatchQoS.unspecified.getter(v49);
  v79 = _swiftEmptyArrayStorage;
  v50 = v71;
  v51 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v71, v43, v34, v73);
  v52 = v25;
  v53 = (void *)v72;
  OS_dispatch_queue.async(group:qos:flags:execute:)(v70, v52, v32, v47);
  _Block_release(v47);

  v54 = v48;
  ((void (*)(char *, uint64_t))v77)(v32, v34);
  v55 = v78;
  ((void (*)(char *, uint64_t))v74)(v45, v78);
  swift_release(v85);
  v56 = v76;
  v84 = sub_10002DC60;
  v85 = v76;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604D48;
  v57 = _Block_copy(&aBlock);
  v58 = v54;
  v59 = swift_retain(v56);
  static DispatchQoS.unspecified.getter(v59);
  v79 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v50, v75, v34, v51);
  v60 = v70;
  OS_dispatch_queue.async(group:qos:flags:execute:)(v70, v45, v32, v57);
  _Block_release(v57);

  v61 = v58;
  ((void (*)(char *, uint64_t))v77)(v32, v34);
  v62 = (void (*)(_QWORD, _QWORD))v74;
  ((void (*)(char *, uint64_t))v74)(v45, v55);
  swift_release(v85);
  v63 = v76;
  v84 = sub_10002DC64;
  v85 = v76;
  aBlock = _NSConcreteStackBlock;
  v81 = 1107296256;
  v82 = sub_1004AB190;
  v83 = &unk_100604D70;
  v64 = _Block_copy(&aBlock);
  v65 = v61;
  v66 = swift_retain(v63);
  static DispatchQoS.unspecified.getter(v66);
  v79 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v71, v75, v34, v73);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v60, v45, v32, v64);
  _Block_release(v64);

  ((void (*)(char *, uint64_t))v77)(v32, v34);
  v62(v45, v55);
  swift_release(v85);
  OS_dispatch_group.wait()();

}

_QWORD *sub_10002CCBC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  _OWORD v5[12];

  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v0 = qword_1006702A0;
  v1 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v2 = (uint64_t)&v1[4];
  v3 = v1 + 52;
  os_unfair_lock_lock(v1 + 52);
  sub_100139D14(v2, v0, v5);
  os_unfair_lock_unlock(v3);
  return sub_10001D410(v5);
}

uint64_t sub_10002CD58()
{
  uint64_t v0;

  type metadata accessor for NetworkMonitor(0);
  v0 = static NetworkMonitor.shared.getter();
  return swift_release(v0);
}

uint64_t sub_10002CD80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v45 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Registering background activities", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10016F0D4();
  v19 = type metadata accessor for DIPBackgroundActivityManager(0);
  v20 = static DIPBackgroundActivityManager.sharedInstance.getter(v19);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000017, 0x8000000100540720, &unk_100633E08, 0);
  v21 = swift_release(v20);
  v41 = v19;
  v22 = static DIPBackgroundActivityManager.sharedInstance.getter(v21);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000018, 0x8000000100540740, &unk_100634CB0, 0);
  swift_release(v22);
  v23 = *(_QWORD **)(v1 + 96);
  v25 = v23[23];
  v24 = v23[24];
  sub_10000806C(v23 + 20, v25);
  swift_retain(v23);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(0xD00000000000001ELL, 0x8000000100540760, &unk_1006308B8, v23, v25, v24);
  v26 = v23[23];
  v27 = v23[24];
  sub_10000806C(v23 + 20, v26);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(0xD00000000000001FLL, 0x8000000100540780, &unk_1006308B8, v23, v26, v27);
  swift_release(v23);
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v6);
  v28 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  aBlock[4] = sub_10002D224;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100604C80;
  v29 = _Block_copy(aBlock);
  v30 = v42;
  static DispatchQoS.unspecified.getter(v29);
  v48 = _swiftEmptyArrayStorage;
  v31 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100004828((uint64_t *)&unk_1006308D0);
  v33 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  v34 = v45;
  v35 = v32;
  v36 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v35, v33, v47, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v34, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v36);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
  if (qword_10062F438 != -1)
    swift_once(&qword_10062F438, sub_10001D48C);
  v37 = qword_100670098;
  v38 = swift_retain(qword_100670098);
  v39 = static DIPBackgroundActivityManager.sharedInstance.getter(v38);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(*(_QWORD *)(v37 + 16), *(_QWORD *)(v37 + 24), &unk_1006308E0, v37);
  swift_release(v37);
  return swift_release(v39);
}

uint64_t sub_10002D224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = (id)qword_100670078;
  static DispatchTime.now()();
  + infix(_:_:)(v8, 10.0);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  LOBYTE(v8) = OS_dispatch_group.wait(timeout:)(v10);

  v12(v10, v4);
  v13 = static DispatchTimeoutResult.== infix(_:_:)(v8 & 1, 1);
  if ((v13 & 1) != 0)
  {
    v14 = defaultLogger()(v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Timed out waiting for the daemon to be initialized, proceeding to enable push", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  if (qword_10062F538 != -1)
    swift_once(&qword_10062F538, sub_1003A0698);
  return sub_1003A0B4C();
}

uint64_t sub_10002D40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t result;
  uint64_t v10;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting Managers with Delegates", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_10062F560 != -1)
    return swift_once(&qword_10062F560, sub_10041FF94);
  return result;
}

void sub_10002D51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Swift::String v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7._object = (void *)0x80000001005406E0;
  v7._countAndFlagsBits = 0xD000000000000015;
  v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    v10 = defaultLogger()(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Forcing dirty flag on due to user defaults settings", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v14 = os_transaction_create("AlwaysDirtyUserDefaultSetting");
    v15 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v14;
    swift_unknownObjectRelease(v15);
  }
}

uint64_t sub_10002D67C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _QWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  ValueWitnessTable *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v30 = type metadata accessor for CVConfigurationProvider(0);
  v31 = &off_10060CC68;
  v8 = sub_100022234(v29);
  sub_10002F134(a1, (uint64_t)v8);
  v28[3] = &type metadata for RandomizedBackgroundActivityRunnerFactory;
  v28[4] = &off_1006082E0;
  v27[3] = &type metadata for CVRequestProvider;
  v27[4] = &off_100614EE0;
  v9 = (_OWORD *)swift_allocObject(&unk_100604E20, 64, 7);
  v27[0] = v9;
  v10 = a4[1];
  v9[1] = *a4;
  v9[2] = v10;
  v9[3] = a4[2];
  v11 = type metadata accessor for CVBackgroundActivity();
  v12 = swift_allocObject(v11, 280, 15);
  v13 = sub_10001E624((uint64_t)v29, v30);
  __chkstk_darwin(v13);
  v15 = (char *)&v27[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = sub_10001E624((uint64_t)v28, (uint64_t)&type metadata for RandomizedBackgroundActivityRunnerFactory);
  __chkstk_darwin(v17);
  (*(void (**)(void))(v18 + 16))();
  v19 = sub_10001E624((uint64_t)v27, (uint64_t)&type metadata for CVRequestProvider);
  __chkstk_darwin(v19);
  v21 = (_OWORD *)((char *)&v27[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  ((void (*)(uint64_t, uint64_t))v22->initializeWithCopy)((uint64_t)v21, v23);
  v24 = sub_10002D870((uint64_t)v15, a2, a3, v21, v12);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v27);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v28);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v29);
  return v24;
}

uint64_t sub_10002D870(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;
  __int128 v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  void *v26;

  v25 = type metadata accessor for DIPBackgroundActivityManager(0);
  v26 = &protocol witness table for DIPBackgroundActivityManager;
  *(_QWORD *)&v24 = a3;
  v22 = type metadata accessor for CVConfigurationProvider(0);
  v23 = &off_10060CC68;
  v10 = sub_100022234(&v21);
  sub_10002F134(a1, (uint64_t)v10);
  v19 = &type metadata for RandomizedBackgroundActivityRunnerFactory;
  v20 = &off_1006082E0;
  v16 = &type metadata for CVRequestProvider;
  v17 = &off_100614EE0;
  v11 = (_OWORD *)swift_allocObject(&unk_100604E20, 64, 7);
  *(_QWORD *)&v15 = v11;
  v12 = a4[1];
  v11[1] = *a4;
  v11[2] = v12;
  v11[3] = a4[2];
  swift_defaultActor_initialize(a5, v13);
  sub_100008018(&v21, a5 + 112);
  *(_QWORD *)(a5 + 152) = a2;
  sub_100008018(&v18, a5 + 200);
  sub_100008018(&v24, a5 + 160);
  sub_100008018(&v15, a5 + 240);
  return a5;
}

uint64_t sub_10002D984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v4);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v12 = *(void **)(v1 + 40);
    if (v12)
    {
      v17 = v10 + 12;
      v18 = v2;
      v19 = v12;
      v13 = v12;
      v14 = v10 + 4;
      v2 = v18;
    }
    else
    {
      v19 = 0;
      v14 = v10 + 4;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14);
    *v11 = v12;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "DaemonInitializer getting watch = %@", v10, 0xCu);
    v15 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v11, 1, v15);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return *(_QWORD *)(v1 + 40);
}

uint64_t sub_10002DB84()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100640EEC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100007EE8;
  return sub_100427BC0();
}

uint64_t sub_10002DBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002DBF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002DBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10063002C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10001D0A0;
  return sub_10001D78C(a1, a2, v2);
}

uint64_t sub_10002DC68()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_10002D40C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004AB190;
  aBlock[3] = &unk_100604DE8;
  v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100004828((uint64_t *)&unk_1006308D0);
  v15 = sub_100025D68(&qword_100632390, (uint64_t *)&unk_1006308D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v0, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v2, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10002DEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v41 - v5;
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8 = objc_msgSend(v7, "infoDictionary");

  if (!v8)
  {
    v24 = defaultLogger()(v9);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "coreidvd started", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
    v29 = v4;
    return v28(v29, v0);
  }
  v10 = 0x6E776F6E6B6E75;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (*(_QWORD *)(v11 + 16)
    && (v12 = sub_1004A8604(0x656C646E75424643, 0xEF6E6F6973726556), (v13 & 1) != 0)
    && (sub_10002EDBC(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v47),
        swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v14 = v45;
    v15 = v46;
  }
  else
  {
    v15 = 0xE700000000000000;
    v14 = 0x6E776F6E6B6E75;
  }
  v44 = v14;
  if (*(_QWORD *)(v11 + 16)
    && (v16 = sub_1004A8604(0x6F6674616C505444, 0xEF646C6975426D72), (v17 & 1) != 0)
    && (sub_10002EDBC(*(_QWORD *)(v11 + 56) + 32 * v16, (uint64_t)&v47),
        swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v18 = v45;
    v19 = v46;
  }
  else
  {
    v19 = 0xE700000000000000;
    v18 = 0x6E776F6E6B6E75;
  }
  v43 = v18;
  if (*(_QWORD *)(v11 + 16) && (v20 = sub_1004A8604(0x6975424B44535444, 0xEA0000000000646CLL), (v21 & 1) != 0))
  {
    sub_10002EDBC(*(_QWORD *)(v11 + 56) + 32 * v20, (uint64_t)&v47);
  }
  else
  {
    v47 = 0u;
    v48 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  if (*((_QWORD *)&v48 + 1))
  {
    v22 = swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((_DWORD)v22)
    {
      v10 = v45;
      v23 = v46;
      goto LABEL_24;
    }
  }
  else
  {
    v22 = sub_100008030((uint64_t)&v47, (uint64_t *)&unk_1006371E0);
  }
  v23 = 0xE700000000000000;
LABEL_24:
  defaultLogger()(v22);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v31, v32))
  {

    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    v28 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
    v29 = v6;
    return v28(v29, v0);
  }
  v33 = swift_slowAlloc(42, -1);
  v41 = v10;
  v34 = v33;
  v35 = swift_slowAlloc(128, -1);
  v42 = v0;
  v36 = v35;
  *(_QWORD *)&v47 = v35;
  *(_DWORD *)v34 = 136446978;
  swift_bridgeObjectRetain(v15);
  v37 = sub_1000E3AC8(v44, v15, (uint64_t *)&v47);
  v44 = v1;
  v45 = v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v34 + 4);
  swift_bridgeObjectRelease_n(v15, 3);
  *(_WORD *)(v34 + 12) = 2082;
  swift_bridgeObjectRetain(v19);
  v45 = sub_1000E3AC8(v43, v19, (uint64_t *)&v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v34 + 14);
  swift_bridgeObjectRelease_n(v19, 3);
  *(_WORD *)(v34 + 22) = 2082;
  swift_bridgeObjectRetain(v23);
  v45 = sub_1000E3AC8(v41, v23, (uint64_t *)&v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v34 + 24);
  swift_bridgeObjectRelease_n(v23, 3);
  *(_WORD *)(v34 + 32) = 2082;
  if (byte_100670061)
    v38 = 1702195828;
  else
    v38 = 0x65736C6166;
  if (byte_100670061)
    v39 = 0xE400000000000000;
  else
    v39 = 0xE500000000000000;
  v45 = sub_1000E3AC8(v38, v39, (uint64_t *)&v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v34 + 34);
  swift_bridgeObjectRelease(v39);
  _os_log_impl((void *)&_mh_execute_header, v31, v32, "coreidvd started. version = %{public}s, platform version = %{public}s, sdk version = %{public}s, diagnostics = %{public}s", (uint8_t *)v34, 0x2Au);
  swift_arrayDestroy(v36, 4, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v36, -1, -1);
  swift_slowDealloc(v34, -1, -1);

  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v6, v42);
}

void sub_10002E430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v43 - v5;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006308F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Locale.current.getter(v12);
  Locale.region.getter(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v16 = type metadata accessor for Locale.Region(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) == 1)
  {
    sub_100008030((uint64_t)v14, &qword_1006308F0);
    return;
  }
  v46 = v1;
  v18 = Locale.Region.identifier.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
  v21 = (void *)objc_opt_self(NSUserDefaults);
  v22 = objc_msgSend(v21, "standardUserDefaults");
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "stringForKey:", v23);

  if (v24)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

    if (v18 == v26 && v20 == v28)
    {
      swift_bridgeObjectRelease(v20);
LABEL_8:
      v30 = swift_bridgeObjectRelease(v20);
      v31 = defaultLogger()(v30);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Device region has not changed since last launch", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v0);
      return;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v26, v28, 0);
    v25 = swift_bridgeObjectRelease(v28);
    if ((v29 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v18;
  defaultLogger()(v25);
  v35 = swift_bridgeObjectRetain_n(v20, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v48 = v39;
    v44 = v0;
    *(_DWORD *)v38 = 136446210;
    swift_bridgeObjectRetain(v20);
    v47 = sub_1000E3AC8(v45, v20, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v38 + 4);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Detected new device region; region is now %{public}s",
      v38,
      0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v44);
  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v0);
  }
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  objc_msgSend((id)qword_100670810, "removeAllCachedResponses");
  v40 = objc_msgSend(v21, "standardUserDefaults");
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v40, "setObject:forKey:", v41, v42);

}

void sub_10002E920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  NSString v30;
  NSString v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v38 - v5;
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8 = objc_msgSend(v7, "infoDictionary");

  if (!v8)
    return;
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v9 + 16) || (v10 = sub_1004A8604(0x656C646E75424643, 0xEF6E6F6973726556), (v11 & 1) == 0))
  {
    v41 = 0u;
    v42 = 0u;
    swift_bridgeObjectRelease(v9);
    goto LABEL_11;
  }
  sub_10002EDBC(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v41);
  swift_bridgeObjectRelease(v9);
  if (!*((_QWORD *)&v42 + 1))
  {
LABEL_11:
    sub_100008030((uint64_t)&v41, (uint64_t *)&unk_1006371E0);
    v39 = 0;
    v14 = 0;
    goto LABEL_12;
  }
  v12 = swift_dynamicCast(v40, &v41, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v13 = v40[0];
  if (!v12)
    v13 = 0;
  v39 = v13;
  if (v12)
    v14 = v40[1];
  else
    v14 = 0;
LABEL_12:
  v15 = (void *)objc_opt_self(NSUserDefaults);
  v16 = objc_msgSend(v15, "standardUserDefaults");
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "stringForKey:", v17);

  if (!v18)
  {
    if (v14)
      goto LABEL_25;
    v22 = 0;
LABEL_23:
    v19 = swift_bridgeObjectRelease(v22);
    v24 = 1;
    goto LABEL_26;
  }
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  if (!v14)
    goto LABEL_23;
  if (!v22)
  {
LABEL_25:
    v24 = 0;
    goto LABEL_26;
  }
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    v19 = swift_bridgeObjectRelease(v22);
    goto LABEL_25;
  }
  if (v39 == v20 && v14 == v22)
  {
    swift_bridgeObjectRelease(v14);
LABEL_36:
    v33 = swift_bridgeObjectRelease(v22);
    v34 = defaultLogger()(v33);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Daemon version has not changed since last launch", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    return;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v14, v20, v22, 0);
  v19 = swift_bridgeObjectRelease(v22);
  v24 = 0;
  v22 = v14;
  if ((v32 & 1) != 0)
    goto LABEL_36;
LABEL_26:
  v25 = defaultLogger()(v19);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Detected version change since last launch", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  objc_msgSend((id)qword_100670810, "removeAllCachedResponses");
  v29 = objc_msgSend(v15, "standardUserDefaults");
  if ((v24 & 1) != 0)
  {
    v30 = 0;
  }
  else
  {
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setObject:forKey:", v30, v31);

  swift_unknownObjectRelease(v30);
}

uint64_t sub_10002EDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002EDF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 96);
  a1[3] = type metadata accessor for CVBackgroundActivity();
  a1[4] = &off_100617610;
  *a1 = v3;
  return swift_retain(v3);
}

uint64_t *sub_10002EE34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  v17 = a1[17];
  v20 = a1[18];
  v18 = a1[16];
  v19 = a1[19];
  sub_10002EF2C(*a1, a1[1]);
  sub_10002EF2C(v2, v3);
  sub_10002EF2C(v4, v5);
  sub_10002EF2C(v6, v7);
  sub_10002EF2C(v8, v9);
  sub_10002EF2C(v10, v12);
  sub_10002EF2C(v14, v13);
  sub_10002EF2C(v16, v15);
  sub_10002EF2C(v18, v17);
  sub_10002EF2C(v20, v19);
  return a1;
}

uint64_t sub_10002EF2C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t *sub_10002EF3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  v17 = a1[17];
  v20 = a1[18];
  v18 = a1[16];
  v19 = a1[19];
  sub_10002F034(*a1, a1[1]);
  sub_10002F034(v2, v3);
  sub_10002F034(v4, v5);
  sub_10002F034(v6, v7);
  sub_10002F034(v8, v9);
  sub_10002F034(v10, v12);
  sub_10002F034(v14, v13);
  sub_10002F034(v16, v15);
  sub_10002F034(v18, v17);
  sub_10002F034(v20, v19);
  return a1;
}

uint64_t sub_10002F034(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10002F044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CVConfigurationProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F088(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FairPlayProvisioner(a2, a1);
  return a2;
}

uint64_t sub_10002F0C4(uint64_t a1)
{
  destroy for FairPlayProvisioner(a1);
  return a1;
}

uint64_t sub_10002F0F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CVConfigurationProvider(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002F134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CVConfigurationProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F178()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10002F1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630908);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F234()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_1000352D8(v3, qword_100630910);
  v4 = sub_1000352C0(v3, (uint64_t)qword_100630910);
  URL.init(string:)(0xD00000000000001BLL, 0x8000000100540B30);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

id sub_10002F314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  objc_class *v19;
  id v20;
  objc_super v22;

  v7 = type metadata accessor for DIPHTTPSession.Configuration(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  v13 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT];
  *(_QWORD *)v13 = 0x726F5F646E65732FLL;
  *((_QWORD *)v13 + 1) = 0xE900000000000064;
  v14 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT];
  *(_QWORD *)v14 = 0x746F5F646E65732FLL;
  *((_QWORD *)v14 + 1) = 0xE900000000000064;
  v15 = &v3[OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_LABEL_ENDPOINT];
  *(_QWORD *)v15 = 0x6C6F5F646E65732FLL;
  *((_QWORD *)v15 + 1) = 0xE900000000000064;
  sub_100035DE8(a3, (uint64_t)&v22 - v11, type metadata accessor for DIPHTTPSession.Configuration);
  v16 = &v3[OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  sub_100035DE8((uint64_t)v12, (uint64_t)v10, type metadata accessor for DIPHTTPSession.Configuration);
  v17 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = v3;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8coreidvd13DIPWebService_httpSession] = sub_1004E0CF4((uint64_t)v10);

  v19 = (objc_class *)type metadata accessor for DIPWebService();
  v22.receiver = v18;
  v22.super_class = v19;
  v20 = objc_msgSendSuper2(&v22, "init");
  sub_100035DAC((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  sub_100035DAC(a3, type metadata accessor for DIPHTTPSession.Configuration);
  return v20;
}

uint64_t sub_10002F4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8[175] = v7;
  v8[174] = a7;
  v8[173] = a6;
  v8[172] = a5;
  v8[171] = a4;
  v8[170] = a3;
  v8[169] = a2;
  v8[168] = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  v8[176] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[177] = v10;
  v8[178] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  v8[179] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  v8[180] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[181] = v13;
  v8[182] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002F58C, 0, 0);
}

uint64_t sub_10002F58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  _QWORD *v24;
  os_unfair_lock_s *v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 1432);
  v2 = *(_QWORD *)(v0 + 1384);
  v3 = *(_QWORD *)(v0 + 1352);
  v4 = *(_QWORD *)(v0 + 1344);
  static DaemonSignposts.ordRequest.getter();
  DIPSignpost.init(_:)(v1);
  v5 = sub_100004828(&qword_100630AA8);
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v6 + 32) = 0x692D656C646E7562;
  *(_QWORD *)(v6 + 40) = 0xE900000000000064;
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = v3;
  swift_bridgeObjectRetain(v3);
  v7 = sub_10011DC20(v6);
  if (v2)
  {
    v8 = *(_QWORD *)(v0 + 1384);
    v9 = *(_QWORD *)(v0 + 1376);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kDIHttpHeaderDIPGSToken);
    v12 = v11;
    swift_bridgeObjectRetain(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    sub_100481050(v9, v8, v10, v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v12);
  }
  *(_QWORD *)(v0 + 1464) = v7;
  v14 = *(_QWORD *)(v0 + 1368);
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 1360);
    v16 = *(_QWORD *)(v0 + 1368);
LABEL_5:
    *(_QWORD *)(v0 + 1480) = v16;
    *(_QWORD *)(v0 + 1472) = v15;
    v17 = *(_QWORD *)(v0 + 1400);
    v18 = *(_QWORD *)(v0 + 1392);
    *(_QWORD *)(v0 + 1336) = type metadata accessor for ORDRequest(0);
    v19 = sub_100022234((_QWORD *)(v0 + 1312));
    sub_100035DE8(v18, (uint64_t)v19, type metadata accessor for ORDRequest);
    v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT);
    v21 = *(void **)(v17 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT + 8);
    swift_bridgeObjectRetain(v16);
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    *(_QWORD *)(v0 + 1488) = v16;
    v23 = dword_10063097C;
    swift_bridgeObjectRetain(v14);
    v24 = (_QWORD *)swift_task_alloc(v23);
    *(_QWORD *)(v0 + 1496) = v24;
    *v24 = v0;
    v24[1] = sub_10002FB54;
    return sub_100030AE8(v0 + 1312, v15, v16, v7);
  }
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v26 = *(os_unfair_lock_s **)(qword_100670320 + 56);
  v27 = (uint64_t)&v26[4];
  v28 = v26 + 112;
  os_unfair_lock_lock(v26 + 112);
  sub_1002355D8(v27, v0 + 16);
  os_unfair_lock_unlock(v28);
  sub_100035A14(v0 + 16, v0 + 880);
  sub_100035A14(v0 + 880, v0 + 448);
  if (sub_100035A5C(v0 + 448) != 1)
  {
    v14 = *(_QWORD *)(v0 + 1368);
    sub_100035A74((_QWORD *)(v0 + 480));
    sub_100035B1C(v0 + 880);
    v15 = *(_QWORD *)(v0 + 624);
    v16 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRetain(v16);
    sub_100035CC0((_QWORD *)(v0 + 480));
    goto LABEL_5;
  }
  v29 = *(_QWORD *)(v0 + 1424);
  v30 = *(_QWORD *)(v0 + 1416);
  v31 = *(_QWORD *)(v0 + 1408);
  swift_bridgeObjectRelease(v7);
  v60 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
  v60(v29, enum case for DIPError.Code.unexpectedDaemonState(_:), v31);
  v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v58 = type metadata accessor for DIPError(0);
  v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v33 = swift_allocError(v58, v57, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x8000000100540CD0, 0, v29, 0, v32, 0xD000000000000058, 0x8000000100540990, 0xD00000000000003DLL, 0x8000000100540D70, 67);
  swift_willThrow(v34);
  v53 = enum case for DIPError.Code.internalError(_:);
  v54 = *(_QWORD *)(v0 + 1448);
  v55 = *(_QWORD *)(v0 + 1440);
  v56 = *(_QWORD *)(v0 + 1456);
  v59 = *(_QWORD *)(v0 + 1432);
  v35 = *(_QWORD *)(v0 + 1424);
  v36 = *(_QWORD *)(v0 + 1408);
  v37 = *(_QWORD *)(v0 + 1400);
  v38 = sub_100004828((uint64_t *)&unk_1006325A0);
  v39 = sub_100004828((uint64_t *)&unk_100633440);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_QWORD *)(v40 + 72);
  v42 = *(unsigned __int8 *)(v40 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(v38, v43 + v41, v42 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_10051FFB0;
  v45 = v44 + v43;
  v46 = (_QWORD *)(v45 + *(int *)(v39 + 48));
  v47 = enum case for DIPError.PropertyKey.conversationID(_:);
  v48 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v45, v47, v48);
  v49 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v50 = *(_QWORD *)(v37 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v46[3] = &type metadata for String;
  *v46 = v49;
  v46[1] = v50;
  swift_errorRetain(v33);
  swift_bridgeObjectRetain(v50);
  v51 = sub_10011D314(v44);
  v60(v35, v53, v36);
  swift_allocError(v58, v57, 0, 0);
  v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x8000000100540DB0, v33, v35, 0, v51, 0xD000000000000058, 0x8000000100540990, 0xD00000000000003DLL, 0x8000000100540D70, 77);
  swift_willThrow(v52);
  swift_errorRelease(v33);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v59);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FB54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1496);
  *(_QWORD *)(*(_QWORD *)v1 + 1504) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10002FCA4;
  }
  else
  {
    v5 = v2 + 164;
    v6 = v2[186];
    v7 = v2[185];
    v8 = v2[183];
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v5);
    v4 = sub_10002FBEC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002FBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)(v0 + 1456);
  v2 = *(_QWORD *)(v0 + 1448);
  v3 = *(_QWORD *)(v0 + 1440);
  v4 = *(_QWORD *)(v0 + 1432);
  v5 = *(_QWORD *)(v0 + 1424);
  v6._object = (void *)0x8000000100540DD0;
  v7._countAndFlagsBits = 0x6462386637643638;
  v7._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = 0xD000000000000014;
  logMilestone(tag:description:)(v7, v6);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  unsigned int v43;
  uint64_t v44;
  void (*v45)(uint64_t);

  v1 = *(_QWORD *)(v0 + 1504);
  v2 = *(_QWORD *)(v0 + 1488);
  v3 = *(_QWORD *)(v0 + 1480);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1424);
  v44 = *(_QWORD *)(v0 + 1416);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1464));
  swift_bridgeObjectRelease(v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1312));
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.serverURL(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  v42 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v42)(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = v4;
  v14[1] = v3;
  swift_errorRetain(v1);
  v17 = sub_10011D314(v12);
  v43 = enum case for DIPError.Code.internalError(_:);
  v45 = *(void (**)(uint64_t))(v44 + 104);
  v45(v5);
  v40 = type metadata accessor for DIPError(0);
  v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v18 = swift_allocError(v40, v39, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v17, 0xD000000000000058, 0x8000000100540990, 0xD00000000000003DLL, 0x8000000100540D70, 72);
  swift_willThrow(v19);
  swift_errorRelease(v1);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = *(_QWORD *)(v0 + 1440);
  v38 = *(_QWORD *)(v0 + 1456);
  v41 = *(_QWORD *)(v0 + 1432);
  v20 = *(_QWORD *)(v0 + 1424);
  v21 = *(_QWORD *)(v0 + 1408);
  v22 = *(_QWORD *)(v0 + 1400);
  v23 = sub_100004828((uint64_t *)&unk_1006325A0);
  v24 = sub_100004828((uint64_t *)&unk_100633440);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_10051FFB0;
  v30 = (_QWORD *)(v29 + v28 + *(int *)(v24 + 48));
  v42();
  v31 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v32 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v30[3] = &type metadata for String;
  *v30 = v31;
  v30[1] = v32;
  swift_errorRetain(v18);
  swift_bridgeObjectRetain(v32);
  v33 = sub_10011D314(v29);
  ((void (*)(uint64_t, _QWORD, uint64_t))v45)(v20, v43, v21);
  swift_allocError(v40, v39, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000017, 0x8000000100540DB0, v18, v20, 0, v33, 0xD000000000000058, 0x8000000100540990, 0xD00000000000003DLL, 0x8000000100540D70, 77);
  swift_willThrow(v34);
  swift_errorRelease(v18);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v41);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[171] = v3;
  v4[170] = a3;
  v4[169] = a2;
  v4[168] = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[172] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[173] = v6;
  v4[174] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  v4[175] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost(0);
  v4[176] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[177] = v9;
  v4[178] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003010C, 0, 0);
}

uint64_t sub_10003010C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  _QWORD *v13;
  os_unfair_lock_s *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 1400);
  v2 = *(_QWORD *)(v0 + 1360);
  static DaemonSignposts.otdRequest.getter();
  DIPSignpost.init(_:)(v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 1360);
    v4 = *(_QWORD *)(v0 + 1352);
    v5 = v3;
LABEL_3:
    *(_QWORD *)(v0 + 1440) = v5;
    *(_QWORD *)(v0 + 1432) = v4;
    v6 = *(_QWORD *)(v0 + 1368);
    v7 = *(_QWORD *)(v0 + 1344);
    *(_QWORD *)(v0 + 1336) = type metadata accessor for OTDRequest(0);
    v8 = sub_100022234((_QWORD *)(v0 + 1312));
    sub_100035DE8(v7, (uint64_t)v8, type metadata accessor for OTDRequest);
    v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT);
    v10 = *(void **)(v6 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT + 8);
    swift_bridgeObjectRetain(v5);
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    String.append(_:)(v11);
    *(_QWORD *)(v0 + 1448) = v5;
    v12 = dword_10063097C;
    swift_bridgeObjectRetain(v3);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 1456) = v13;
    *v13 = v0;
    v13[1] = sub_1000305F8;
    return sub_100030AE8(v0 + 1312, v4, v5, 0);
  }
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v15 = *(os_unfair_lock_s **)(qword_100670320 + 56);
  v16 = (uint64_t)&v15[4];
  v17 = v15 + 112;
  os_unfair_lock_lock(v15 + 112);
  sub_1002355D8(v16, v0 + 16);
  os_unfair_lock_unlock(v17);
  sub_100035A14(v0 + 16, v0 + 880);
  sub_100035A14(v0 + 880, v0 + 448);
  if (sub_100035A5C(v0 + 448) != 1)
  {
    v3 = *(_QWORD *)(v0 + 1360);
    sub_100035A74((_QWORD *)(v0 + 480));
    sub_100035B1C(v0 + 880);
    v4 = *(_QWORD *)(v0 + 624);
    v5 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRetain(v5);
    sub_100035CC0((_QWORD *)(v0 + 480));
    goto LABEL_3;
  }
  v18 = *(_QWORD *)(v0 + 1392);
  v47 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 1384) + 104);
  v47(v18, enum case for DIPError.Code.serverUnavailable(_:), *(_QWORD *)(v0 + 1376));
  v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v45 = type metadata accessor for DIPError(0);
  v44 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v45, v44, 0, 0);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x8000000100540CD0, 0, v18, 0, v19, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001ELL, 0x8000000100540D10, 91);
  swift_willThrow(v21);
  v40 = enum case for DIPError.Code.internalError(_:);
  v41 = *(_QWORD *)(v0 + 1416);
  v42 = *(_QWORD *)(v0 + 1408);
  v43 = *(_QWORD *)(v0 + 1424);
  v46 = *(_QWORD *)(v0 + 1400);
  v22 = *(_QWORD *)(v0 + 1392);
  v23 = *(_QWORD *)(v0 + 1376);
  v24 = *(_QWORD *)(v0 + 1368);
  v25 = sub_100004828((uint64_t *)&unk_1006325A0);
  v26 = sub_100004828((uint64_t *)&unk_100633440);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v25, v30 + v28, v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_10051FFB0;
  v32 = v31 + v30;
  v33 = (_QWORD *)(v32 + *(int *)(v26 + 48));
  v34 = enum case for DIPError.PropertyKey.conversationID(_:);
  v35 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32, v34, v35);
  v36 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v37 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v33[3] = &type metadata for String;
  *v33 = v36;
  v33[1] = v37;
  swift_errorRetain(v20);
  swift_bridgeObjectRetain(v37);
  v38 = sub_10011D314(v31);
  v47(v22, v40, v23);
  swift_allocError(v45, v44, 0, 0);
  v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100540D30, v20, v22, 0, v38, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001ELL, 0x8000000100540D10, 101);
  swift_willThrow(v39);
  swift_errorRelease(v20);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v46);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000305F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1456);
  *(_QWORD *)(*(_QWORD *)v1 + 1464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10003073C;
  }
  else
  {
    v5 = v2[181];
    swift_bridgeObjectRelease(v2[180]);
    swift_bridgeObjectRelease(v5);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2 + 164);
    v4 = sub_100030684;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100030684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)(v0 + 1424);
  v2 = *(_QWORD *)(v0 + 1416);
  v3 = *(_QWORD *)(v0 + 1408);
  v4 = *(_QWORD *)(v0 + 1400);
  v5 = *(_QWORD *)(v0 + 1392);
  v6._object = (void *)0x8000000100540D50;
  v7._countAndFlagsBits = 0x3135306333336665;
  v7._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = 0xD000000000000014;
  logMilestone(tag:description:)(v7, v6);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003073C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  unsigned int v42;
  uint64_t v43;
  void (*v44)(uint64_t);

  v1 = *(_QWORD *)(v0 + 1464);
  v2 = *(_QWORD *)(v0 + 1440);
  v3 = *(_QWORD *)(v0 + 1432);
  v39 = *(_QWORD *)(v0 + 1392);
  v43 = *(_QWORD *)(v0 + 1384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1448));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 1312));
  v4 = sub_100004828((uint64_t *)&unk_1006325A0);
  v5 = sub_100004828((uint64_t *)&unk_100633440);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10051FFB0;
  v11 = v10 + v9;
  v12 = (_QWORD *)(v11 + *(int *)(v5 + 48));
  v13 = enum case for DIPError.PropertyKey.serverURL(_:);
  v14 = type metadata accessor for DIPError.PropertyKey(0);
  v41 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v11, v13, v14);
  v12[3] = &type metadata for String;
  *v12 = v3;
  v12[1] = v2;
  swift_errorRetain(v1);
  v15 = sub_10011D314(v10);
  v42 = enum case for DIPError.Code.internalError(_:);
  v44 = *(void (**)(uint64_t))(v43 + 104);
  v44(v39);
  v38 = type metadata accessor for DIPError(0);
  v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v16 = swift_allocError(v38, v37, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v39, 0, v15, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001ELL, 0x8000000100540D10, 96);
  swift_willThrow(v17);
  swift_errorRelease(v1);
  v34 = *(_QWORD *)(v0 + 1416);
  v35 = *(_QWORD *)(v0 + 1408);
  v36 = *(_QWORD *)(v0 + 1424);
  v40 = *(_QWORD *)(v0 + 1400);
  v18 = *(_QWORD *)(v0 + 1392);
  v19 = *(_QWORD *)(v0 + 1376);
  v20 = *(_QWORD *)(v0 + 1368);
  v21 = sub_100004828((uint64_t *)&unk_1006325A0);
  v22 = sub_100004828((uint64_t *)&unk_100633440);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v21, v26 + v24, v25 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_10051FFB0;
  v28 = (_QWORD *)(v27 + v26 + *(int *)(v22 + 48));
  v41();
  v29 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v30 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v28[3] = &type metadata for String;
  *v28 = v29;
  v28[1] = v30;
  swift_errorRetain(v16);
  swift_bridgeObjectRetain(v30);
  v31 = sub_10011D314(v27);
  ((void (*)(uint64_t, _QWORD, uint64_t))v44)(v18, v42, v19);
  swift_allocError(v38, v37, 0, 0);
  v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100540D30, v16, v18, 0, v31, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001ELL, 0x8000000100540D10, 101);
  swift_willThrow(v32);
  swift_errorRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v40);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5[39] = a4;
  v5[40] = v4;
  v5[37] = a2;
  v5[38] = a3;
  v5[36] = a1;
  v6 = type metadata accessor for URLRequest(0);
  v5[41] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[42] = v7;
  v5[43] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100630A48);
  v5[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v5[45] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[46] = v10;
  v5[47] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v5[48] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[49] = v12;
  v5[50] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OTDRequest(0);
  v5[51] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[52] = swift_task_alloc(v14);
  v5[53] = swift_task_alloc(v14);
  v15 = type metadata accessor for ORDRequest(0);
  v5[54] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[55] = swift_task_alloc(v16);
  v5[56] = swift_task_alloc(v16);
  v17 = type metadata accessor for Logger(0);
  v5[57] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[58] = v18;
  v5[59] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100030C54, 0, 0);
}

uint64_t sub_100030C54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String_optional v78;
  Swift::String v79;
  _QWORD *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t DynamicType;
  Swift::String v90;
  void *object;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t, char, char);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;

  v2 = (_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 288);
  defaultLogger()(a1);
  v4 = sub_10002EDBC(v3, v1 + 16);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.info.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v139 = *(_QWORD *)(v1 + 464);
    v140 = *(_QWORD *)(v1 + 456);
    v141 = *(_QWORD *)(v1 + 472);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v145 = swift_slowAlloc(32, -1);
    v9 = v145;
    *(_DWORD *)v8 = 136446210;
    v10 = *(_QWORD *)(v1 + 40);
    v11 = sub_10000806C((_QWORD *)(v1 + 16), v10);
    *(_QWORD *)(v1 + 272) = swift_getDynamicType(v11, v10, 1);
    v12 = sub_100004828(&qword_100630AA0);
    v13 = String.init<A>(describing:)(v1 + 272, v12);
    v15 = v14;
    *(_QWORD *)(v1 + 280) = sub_1000E3AC8(v13, v14, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 280, v1 + 288, v8 + 4);
    swift_bridgeObjectRelease(v15);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 16));
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "coreidvd: sendPostRequest of type %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v16 = v9;
    v2 = (_QWORD *)(v1 + 48);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v141, v140);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 464);
    v17 = *(_QWORD *)(v1 + 472);
    v19 = *(_QWORD *)(v1 + 456);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 16));

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v20 = *(_QWORD *)(v1 + 448);
  v21 = *(_QWORD *)(v1 + 432);
  sub_10002EDBC(*(_QWORD *)(v1 + 288), (uint64_t)v2);
  if (swift_dynamicCast(v20, v2, (char *)&type metadata for Any + 8, v21, 0))
  {
    v23 = *(_QWORD *)(v1 + 432);
    v22 = *(_QWORD *)(v1 + 440);
    v24 = *(_QWORD *)(v1 + 288);
    v25 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v26 = JSONEncoder.init()();
    sub_10002EDBC(v24, v1 + 240);
    swift_dynamicCast(v22, v1 + 240, (char *)&type metadata for Any + 8, v23, 7);
    v27 = type metadata accessor for ORDRequest;
    v28 = sub_100004790(&qword_100630A98, type metadata accessor for ORDRequest, (uint64_t)&unk_100527C7C);
    v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(v22, v23, v28);
    v31 = v30;
    v33 = *(_QWORD *)(v1 + 440);
    v32 = *(_QWORD *)(v1 + 448);
LABEL_8:
    swift_release(v26);
    sub_100035DAC(v33, v27);
    sub_100035DAC(v32, v27);
    goto LABEL_9;
  }
  if (swift_dynamicCast(*(_QWORD *)(v1 + 424), v2, (char *)&type metadata for Any + 8, *(_QWORD *)(v1 + 408), 0))
  {
    v35 = *(_QWORD *)(v1 + 408);
    v34 = *(_QWORD *)(v1 + 416);
    v36 = *(_QWORD *)(v1 + 288);
    v37 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v26 = JSONEncoder.init()();
    sub_10002EDBC(v36, v1 + 208);
    swift_dynamicCast(v34, v1 + 208, (char *)&type metadata for Any + 8, v35, 7);
    v27 = type metadata accessor for OTDRequest;
    v38 = sub_100004790(&qword_100630A90, type metadata accessor for OTDRequest, (uint64_t)&unk_100527D1C);
    v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(v34, v35, v38);
    v31 = v39;
    v33 = *(_QWORD *)(v1 + 416);
    v32 = *(_QWORD *)(v1 + 424);
    goto LABEL_8;
  }
  v65 = v2;
  if (!swift_dynamicCast(v1 + 80, v2, (char *)&type metadata for Any + 8, &type metadata for OLDRequest, 0))
  {
    v83 = *(_QWORD *)(v1 + 392);
    v82 = *(_QWORD *)(v1 + 400);
    v84 = *(_QWORD *)(v1 + 384);
    v85 = *(_QWORD *)(v1 + 304);
    v143 = *(_QWORD *)(v1 + 296);
    v145 = 0;
    v86 = *(_QWORD **)(v1 + 288);
    v146 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v146);
    v145 = 0xD000000000000015;
    v146 = 0x8000000100540C30;
    v87 = v86[3];
    v88 = sub_10000806C(v86, v87);
    DynamicType = swift_getDynamicType(v88, v87, 1);
    v90._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
    object = v90._object;
    String.append(_:)(v90);
    swift_bridgeObjectRelease(object);
    v92 = v145;
    v93 = v146;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v83 + 104))(v82, enum case for DIPError.Code.badLogic(_:), v84);
    v94 = sub_100004828((uint64_t *)&unk_1006325A0);
    v95 = sub_100004828((uint64_t *)&unk_100633440);
    v96 = *(_QWORD *)(v95 - 8);
    v97 = *(_QWORD *)(v96 + 72);
    v98 = *(unsigned __int8 *)(v96 + 80);
    v99 = (v98 + 32) & ~v98;
    v100 = swift_allocObject(v94, v99 + v97, v98 | 7);
    *(_OWORD *)(v100 + 16) = xmmword_10051FFB0;
    v101 = v100 + v99;
    v102 = (_QWORD *)(v101 + *(int *)(v95 + 48));
    v103 = enum case for DIPError.PropertyKey.serverURL(_:);
    v104 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 104))(v101, v103, v104);
    v102[3] = &type metadata for String;
    *v102 = v143;
    v102[1] = v85;
    swift_bridgeObjectRetain(v85);
    v105 = sub_10011D314(v100);
    v106 = type metadata accessor for DIPError(0);
    v107 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v108 = swift_allocError(v106, v107, 0, 0);
    v109 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v92, v93, 0, v82, 0, v105, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001CLL, 0x8000000100540C50, 145);
    swift_willThrow(v109);
    v110 = v65;
    v112 = *(_QWORD *)(v1 + 392);
    v111 = *(_QWORD *)(v1 + 400);
    v144 = *(_QWORD *)(v1 + 384);
    v114 = *(_QWORD *)(v1 + 296);
    v113 = *(_QWORD *)(v1 + 304);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v110);
    v115 = sub_100004828((uint64_t *)&unk_1006325A0);
    v116 = sub_100004828((uint64_t *)&unk_100633440);
    v117 = *(_QWORD *)(v116 - 8);
    v118 = *(_QWORD *)(v117 + 72);
    v119 = *(unsigned __int8 *)(v117 + 80);
    v120 = (v119 + 32) & ~v119;
    v121 = swift_allocObject(v115, v120 + v118, v119 | 7);
    *(_OWORD *)(v121 + 16) = xmmword_10051FFB0;
    v122 = v121 + v120;
    v123 = (_QWORD *)(v122 + *(int *)(v116 + 48));
    v124 = enum case for DIPError.PropertyKey.serverURL(_:);
    v125 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 104))(v122, v124, v125);
    v123[3] = &type metadata for String;
    *v123 = v114;
    v123[1] = v113;
    swift_bridgeObjectRetain(v113);
    swift_errorRetain(v108);
    v126 = sub_10011D314(v121);
    v127 = v111;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v112 + 104))(v111, enum case for DIPError.Code.internalError(_:), v144);
    v128 = type metadata accessor for DIPError(0);
    v129 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v128, v129, 0, 0);
    v130 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100540C70, v108, v127, 0, v126, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001CLL, 0x8000000100540C50, 149);
    swift_willThrow(v130);
    swift_errorRelease(v108);
    goto LABEL_15;
  }
  v66 = *(_QWORD *)(v1 + 288);
  v67 = *(_QWORD *)(v1 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
  swift_bridgeObjectRelease(v67);
  v68 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v69 = JSONEncoder.init()();
  sub_10002EDBC(v66, v1 + 112);
  swift_dynamicCast(v1 + 144, v1 + 112, (char *)&type metadata for Any + 8, &type metadata for OLDRequest, 7);
  v70 = *(_QWORD *)(v1 + 152);
  v71 = *(_QWORD *)(v1 + 160);
  v72 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 176) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 184) = v70;
  *(_QWORD *)(v1 + 192) = v71;
  *(_QWORD *)(v1 + 200) = v72;
  v73 = sub_100035D68();
  v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1 + 176, &type metadata for OLDRequest, v73);
  v31 = v74;
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v72);
  swift_release(v69);
  v2 = v65;
LABEL_9:
  v40 = *(_QWORD *)(v1 + 360);
  v41 = *(_QWORD *)(v1 + 368);
  v42 = *(_QWORD *)(v1 + 352);
  v44 = *(_QWORD *)(v1 + 296);
  v43 = *(_QWORD *)(v1 + 304);
  *(_QWORD *)(v1 + 480) = v31;
  *(_QWORD *)(v1 + 488) = v29;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v2);
  URL.init(string:)(v44, v43);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v40) != 1)
  {
    v75 = *(_QWORD *)(v1 + 376);
    v76 = *(_QWORD *)(v1 + 344);
    v77 = *(_QWORD *)(v1 + 312);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 368) + 32))(v75, *(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360));
    sub_100022948(v29, v31);
    sub_1004E1380(v75, v77, 0, 0, v76);
    URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
    v78.value._countAndFlagsBits = 0xD000000000000010;
    v78.value._object = (void *)0x8000000100540CB0;
    v79._countAndFlagsBits = 0x2D746E65746E6F43;
    v79._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(v78, v79);
    URLRequest.httpBody.setter(v29, v31);
    v142 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
    v80 = (_QWORD *)swift_task_alloc(unk_100643F74);
    *(_QWORD *)(v1 + 496) = v80;
    *v80 = v1;
    v80[1] = sub_100031804;
    return v142(*(_QWORD *)(v1 + 344), (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  }
  v46 = *(_QWORD *)(v1 + 392);
  v45 = *(_QWORD *)(v1 + 400);
  v47 = *(_QWORD *)(v1 + 384);
  v49 = *(_QWORD *)(v1 + 296);
  v48 = *(_QWORD *)(v1 + 304);
  sub_100008030(*(_QWORD *)(v1 + 352), &qword_100630A48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v45, enum case for DIPError.Code.badLogic(_:), v47);
  v50 = sub_100004828((uint64_t *)&unk_1006325A0);
  v51 = sub_100004828((uint64_t *)&unk_100633440);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(_QWORD *)(v52 + 72);
  v54 = *(unsigned __int8 *)(v52 + 80);
  v55 = (v54 + 32) & ~v54;
  v56 = swift_allocObject(v50, v55 + v53, v54 | 7);
  *(_OWORD *)(v56 + 16) = xmmword_10051FFB0;
  v57 = v56 + v55;
  v58 = (_QWORD *)(v57 + *(int *)(v51 + 48));
  v59 = enum case for DIPError.PropertyKey.serverURL(_:);
  v60 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v57, v59, v60);
  v58[3] = &type metadata for String;
  *v58 = v49;
  v58[1] = v48;
  swift_bridgeObjectRetain(v48);
  v61 = sub_10011D314(v56);
  v62 = type metadata accessor for DIPError(0);
  v63 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v62, v63, 0, 0);
  v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000013, 0x8000000100540C90, 0, v45, 0, v61, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001CLL, 0x8000000100540C50, 153);
  swift_willThrow(v64);
  sub_100007F8C(v29, v31);
LABEL_15:
  v132 = *(_QWORD *)(v1 + 440);
  v131 = *(_QWORD *)(v1 + 448);
  v134 = *(_QWORD *)(v1 + 416);
  v133 = *(_QWORD *)(v1 + 424);
  v135 = *(_QWORD *)(v1 + 400);
  v136 = *(_QWORD *)(v1 + 376);
  v138 = *(_QWORD *)(v1 + 344);
  v137 = *(_QWORD *)(v1 + 352);
  swift_task_dealloc(*(_QWORD *)(v1 + 472));
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100031804(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)();

  v8 = *(_QWORD *)(*(_QWORD *)v4 + 496);
  *(_QWORD *)(*(_QWORD *)v4 + 504) = v3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9 = sub_100031974;
  }
  else
  {
    sub_100007F8C(a1, a2);

    v9 = sub_10003188C;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10003188C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 328);
  sub_100007F8C(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 480));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v5);
  swift_task_dealloc(v14);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 328);
  sub_100007F8C(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 480));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v8 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031A54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_ORD_ENDPOINT + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_TRAIN_ENDPOINT + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8coreidvd23DIPAssessmentWebService_DUA_LABEL_ENDPOINT
                                             + 8));
}

id sub_100031A9C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DIPAssessmentWebService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DIPAssessmentWebService()
{
  return objc_opt_self(_TtC8coreidvd23DIPAssessmentWebService);
}

uint64_t sub_100031B40()
{
  int *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_1000352D8((uint64_t)v0, qword_1006700A8);
  v1 = (_QWORD *)sub_1000352C0((uint64_t)v0, (uint64_t)qword_1006700A8);
  v2 = (_QWORD *)((char *)v1 + v0[6]);
  *v2 = 0x3FE0000000000000;
  v3 = enum case for DIPBackoffStrategy.exponential(_:);
  v4 = type metadata accessor for DIPBackoffStrategy(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  *v1 = 0x4024000000000000;
  v1[1] = 3;
  *((_BYTE *)v1 + v0[7]) = 0;
  *((_BYTE *)v1 + v0[8]) = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_100031BFC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v3 + 240) = a2;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v2;
  v4 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v3 + 64) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 72) = v5;
  *(_QWORD *)(v3 + 80) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v3 + 88) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 96) = v7;
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 112) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 120) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v3 + 160) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 168) = v13;
  *(_QWORD *)(v3 + 176) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100031D14, 0, 0);
}

uint64_t sub_100031D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, char, char);

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  static DaemonSignposts.getProfileRequest.getter();
  DIPSignpost.init(_:)(v1);
  sub_100032A58(v3);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v0 + 184) = v9;
  v9(v3, v5);
  sub_100032BCC(v2, v8, v4);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 16);
  *(_QWORD *)(v0 + 192) = v13;
  v13(v11, v10, v12);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v11, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v16 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v14 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 200) = v14;
  *v14 = v0;
  v14[1] = sub_100031F00;
  return v16(*(_QWORD *)(v0 + 104), (uint64_t)_swiftEmptyArrayStorage, *(_BYTE *)(v0 + 240), 0);
}

uint64_t sub_100031F00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 200);
  *(_QWORD *)(v6 + 208) = a1;
  *(_QWORD *)(v6 + 216) = a2;
  *(_BYTE *)(v6 + 241) = a4;
  *(_QWORD *)(v6 + 224) = a3;
  *(_QWORD *)(v6 + 232) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_100032650;
  else
    v8 = sub_100031F74;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100031F74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  Class isa;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  Class v57;
  Class v58;
  id v59;
  void *v60;
  Class v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  uint64_t v97;

  v2 = *(void **)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_100022948(v4, v3);
  v6 = JSONDecoder.init()(v2);
  v7 = sub_10003527C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for GetProfileResponse, v4, v3, &type metadata for GetProfileResponse, v7);
  v8 = *(unsigned __int8 *)(v0 + 241);
  if (v1)
  {
    v9 = v1;
    v10 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 208);

    sub_100007F8C(v11, v10);
    swift_release(v6);
    if (v8)
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v12 = (void *)qword_100670810;
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v12, "removeCachedResponseForRequest:", isa);

    }
    v15 = *(_QWORD *)(v0 + 216);
    v14 = *(void **)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 80);
    v94 = enum case for DIPError.Code.internalError(_:);
    v96 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 72) + 104);
    v96(v17);
    swift_errorRetain(v9);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = type metadata accessor for DIPError(0);
    v84 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v19 = swift_allocError(v86, v84, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v17, 0, v18, 0xD000000000000058, 0x8000000100540990, 0xD00000000000002BLL, 0x80000001005409F0, 236);
    swift_willThrow(v20);

    sub_100007F8C(v16, v15);
    swift_errorRelease(v9);
    v82 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v88 = *(_QWORD *)(v0 + 168);
    v90 = *(_QWORD *)(v0 + 160);
    v80 = *(_QWORD *)(v0 + 128);
    v81 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 112);
    v77 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 80);
    v78 = *(_QWORD *)(v0 + 88);
    v79 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 64);
    v25 = sub_100004828((uint64_t *)&unk_1006325A0);
    v26 = sub_100004828((uint64_t *)&unk_100633440);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(_QWORD *)(v27 + 72);
    v29 = *(unsigned __int8 *)(v27 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v25, v30 + v28, v29 | 7);
    *(_OWORD *)(v31 + 16) = xmmword_10051FFB0;
    v32 = v31 + v30;
    v33 = (_QWORD *)(v32 + *(int *)(v26 + 48));
    v34 = enum case for DIPError.PropertyKey.conversationID(_:);
    v35 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32, v34, v35);
    v36 = *(_QWORD *)(v24 + 48);
    v37 = *(_QWORD *)(v24 + 56);
    v33[3] = &type metadata for String;
    *v33 = v36;
    v33[1] = v37;
    swift_errorRetain(v19);
    swift_bridgeObjectRetain(v37);
    v38 = sub_10011D314(v31);
    ((void (*)(uint64_t, _QWORD, uint64_t))v96)(v22, v94, v23);
    swift_allocError(v86, v84, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100540A20, v19, v22, 0, v38, 0xD000000000000058, 0x8000000100540990, 0xD00000000000002BLL, 0x80000001005409F0, 239);
    swift_willThrow(v39);
    swift_errorRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v78);
    v82(v80, v21);
    v82(v81, v21);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v92, v90);
    v41 = *(_QWORD *)(v0 + 144);
    v40 = *(_QWORD *)(v0 + 152);
    v43 = *(_QWORD *)(v0 + 128);
    v42 = *(_QWORD *)(v0 + 136);
    v44 = *(_QWORD *)(v0 + 104);
    v45 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_release(v6);
    v95 = *(_QWORD *)(v0 + 24);
    v97 = *(_QWORD *)(v0 + 16);
    if (v8)
    {
      v47 = *(_QWORD *)(v0 + 216);
      v48 = *(_QWORD *)(v0 + 208);

      sub_100007F8C(v48, v47);
      v49._countAndFlagsBits = 0xD000000000000025;
      v49._object = (void *)0x8000000100540A70;
      v50._countAndFlagsBits = 0x3465353336353365;
      v50._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v50, v49);
    }
    else
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v51 = *(_QWORD *)(v0 + 216);
      v52 = *(void **)(v0 + 224);
      v53 = *(_QWORD *)(v0 + 208);
      v54 = qword_100670810;
      v55 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_100022948(v53, v51);
      v56 = v52;
      v57 = Data._bridgeToObjectiveC()().super.isa;
      v58 = (Class)objc_msgSend(v55, "initWithResponse:data:", v56, v57);
      sub_100007F8C(v53, v51);

      v59 = sub_10044D3C8(v58, 0);
      if (v59)
      {
        v60 = v59;
        v61 = URLRequest._bridgeToObjectiveC()().super.isa;
        v62 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 32) = v54;
        *(_QWORD *)(v0 + 40) = v62;
        objc_msgSendSuper2((objc_super *)(v0 + 32), "storeCachedResponse:forRequest:", v60, v61);

        v58 = v61;
      }
      v64 = *(_QWORD *)(v0 + 216);
      v63 = *(void **)(v0 + 224);
      v65 = *(_QWORD *)(v0 + 208);

      sub_100007F8C(v65, v64);
      v66._countAndFlagsBits = 0xD000000000000027;
      v66._object = (void *)0x8000000100540A40;
      v67._countAndFlagsBits = 0x6565626362666539;
      v67._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v67, v66);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    v68 = *(_QWORD *)(v0 + 216);
    v69 = *(_QWORD *)(v0 + 208);
    v70 = *(_QWORD *)(v0 + 176);
    v71 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v85 = *(_QWORD *)(v0 + 168);
    v87 = *(_QWORD *)(v0 + 160);
    v89 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 144);
    v72 = *(_QWORD *)(v0 + 128);
    v73 = *(_QWORD *)(v0 + 104);
    v74 = *(_QWORD *)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 88);
    v76 = *(_QWORD *)(v0 + 96);
    v91 = *(_QWORD *)(v0 + 136);
    v93 = *(_QWORD *)(v0 + 80);

    sub_100007F8C(v69, v68);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v73, v75);
    v71(v72, v74);
    v71(v83, v74);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v70, v87);
    swift_task_dealloc(v70);
    swift_task_dealloc(v89);
    swift_task_dealloc(v83);
    swift_task_dealloc(v91);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v97, v95);
  }
}

uint64_t sub_100032650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD *, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t);
  void (*v57)(void);

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v54 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 192);
  v55 = *(_QWORD *)(v0 + 72);
  v5 = sub_100004828((uint64_t *)&unk_1006325A0);
  v6 = sub_100004828((uint64_t *)&unk_100633440);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  v12 = v11 + v10;
  v13 = (_QWORD *)(v11 + v10 + *(int *)(v6 + 48));
  v14 = enum case for DIPError.PropertyKey.serverURL(_:);
  v15 = type metadata accessor for DIPError.PropertyKey(0);
  v57 = *(void (**)(void))(*(_QWORD *)(v15 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v12, v14, v15);
  v13[3] = v3;
  v16 = sub_100022234(v13);
  v54(v16, v2, v3);
  swift_errorRetain(v1);
  v17 = sub_10011D314(v11);
  LODWORD(v54) = enum case for DIPError.Code.internalError(_:);
  v56 = *(void (**)(uint64_t))(v55 + 104);
  v56(v4);
  v48 = type metadata accessor for DIPError(0);
  v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v18 = swift_allocError(v48, v47, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v17, 0xD000000000000058, 0x8000000100540990, 0xD00000000000002BLL, 0x80000001005409F0, 217);
  swift_willThrow(v19);
  swift_errorRelease(v1);
  v50 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  v51 = *(_QWORD *)(v0 + 168);
  v52 = *(_QWORD *)(v0 + 160);
  v53 = *(_QWORD *)(v0 + 176);
  v49 = *(_QWORD *)(v0 + 144);
  v45 = *(_QWORD *)(v0 + 112);
  v46 = *(_QWORD *)(v0 + 128);
  v42 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 80);
  v43 = *(_QWORD *)(v0 + 88);
  v44 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v23 = sub_100004828((uint64_t *)&unk_1006325A0);
  v24 = sub_100004828((uint64_t *)&unk_100633440);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_10051FFB0;
  v30 = (_QWORD *)(v29 + v28 + *(int *)(v24 + 48));
  v57();
  v31 = *(_QWORD *)(v22 + 48);
  v32 = *(_QWORD *)(v22 + 56);
  v30[3] = &type metadata for String;
  *v30 = v31;
  v30[1] = v32;
  swift_errorRetain(v18);
  swift_bridgeObjectRetain(v32);
  v33 = sub_10011D314(v29);
  ((void (*)(uint64_t, _QWORD, uint64_t))v56)(v20, v54, v21);
  swift_allocError(v48, v47, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100540A20, v18, v20, 0, v33, 0xD000000000000058, 0x8000000100540990, 0xD00000000000002BLL, 0x80000001005409F0, 239);
  swift_willThrow(v34);
  swift_errorRelease(v18);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v43);
  v50(v46, v45);
  v50(v49, v45);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
  v35 = *(_QWORD *)(v0 + 144);
  v36 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 128);
  v37 = *(_QWORD *)(v0 + 136);
  v39 = *(_QWORD *)(v0 + 104);
  v40 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032A58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_100004828(&qword_100630A48);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)static DIPFeatures.sharedInstance.getter(v3);
  if (v6
    && (v7 = v6,
        v8 = objc_msgSend(v6, "getStaticAssessmentURL"),
        swift_unknownObjectRelease(v7),
        v8))
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    URL.init(string:)(v9, v11);
    swift_bridgeObjectRelease(v11);
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12);
    if ((_DWORD)result == 1)
      __break(1u);
    else
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v5, v12);
  }
  else
  {
    if (qword_10062F448 != -1)
      swift_once(&qword_10062F448, sub_10002F234);
    v15 = type metadata accessor for URL(0);
    v16 = sub_1000352C0(v15, (uint64_t)qword_100630910);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, v16, v15);
  }
  return result;
}

uint64_t sub_100032BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];

  v32[0] = a3;
  v32[3] = a2;
  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100630A50);
  __chkstk_darwin(v11);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100008030((uint64_t)v13, &qword_100630A50);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.badLogic(_:), v4);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100540AA0, 0, v7, 0, v18, 0xD000000000000058, 0x8000000100540990, 0xD000000000000023, 0x8000000100540AD0, 298);
    return swift_willThrow(v21);
  }
  else
  {
    v23 = v7;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v24 = sub_100283100();
    v25 = URLComponents.queryItems.setter(v24);
    URLComponents.url.getter(v25);
    v26 = type metadata accessor for URL(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v26) == 1)
    {
      sub_100008030((uint64_t)v10, &qword_100630A48);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v23, enum case for DIPError.Code.badLogic(_:), v4);
      v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v29 = type metadata accessor for DIPError(0);
      v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v29, v30, 0, 0);
      v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100540B00, 0, v23, 0, v28, 0xD000000000000058, 0x8000000100540990, 0xD000000000000023, 0x8000000100540AD0, 302);
      swift_willThrow(v31);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v27 + 32))(v32[0], v10, v26);
    }
  }
}

uint64_t sub_100032FB0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v2 + 48) = v1;
  *(_BYTE *)(v2 + 224) = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v2 + 56) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 72) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v2 + 80) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 88) = v6;
  *(_QWORD *)(v2 + 96) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  *(_QWORD *)(v2 + 104) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 112) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 128) = swift_task_alloc(v9);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v2 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v2 + 144) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v2 + 152) = v12;
  *(_QWORD *)(v2 + 160) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000330BC, 0, 0);
}

uint64_t sub_1000330BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  char *v11;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 48);
  static DaemonSignposts.getSTSRequest.getter();
  DIPSignpost.init(_:)(v1);
  sub_100032A58(v3);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 168) = v7;
  v7(v3, v5);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 176) = v8;
  v8(v3, v2, v5);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v3, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v11 = (char *)&dword_100643F70 + dword_100643F70;
  v9 = (_QWORD *)swift_task_alloc(unk_100643F74);
  *(_QWORD *)(v0 + 184) = v9;
  *v9 = v0;
  v9[1] = sub_1000331F0;
  return ((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD))v11)(*(_QWORD *)(v0 + 96), _swiftEmptyArrayStorage, *(unsigned __int8 *)(v0 + 224), 0);
}

uint64_t sub_1000331F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 184);
  *(_QWORD *)(v6 + 192) = a1;
  *(_QWORD *)(v6 + 200) = a2;
  *(_BYTE *)(v6 + 225) = a4;
  *(_QWORD *)(v6 + 208) = a3;
  *(_QWORD *)(v6 + 216) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_1000339E8;
  else
    v8 = sub_100033264;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100033264()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  Class v58;
  Class v59;
  id v60;
  void *v61;
  Class v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(void);
  uint64_t v103;
  uint64_t v104;

  v2 = *(void **)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_100022948(v4, v3);
  v6 = JSONDecoder.init()(v2);
  v7 = sub_1000358E8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for GetSTSResponse, v4, v3, &type metadata for GetSTSResponse, v7);
  v8 = *(unsigned __int8 *)(v0 + 225);
  if (v1)
  {
    v9 = v1;
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 192);

    sub_100007F8C(v11, v10);
    swift_release(v6);
    if (v8)
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v12 = (void *)qword_100670810;
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v12, "removeCachedResponseForRequest:", isa);

    }
    v93 = *(void **)(v0 + 208);
    v96 = *(_QWORD *)(v0 + 192);
    v99 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 72);
    v88 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 176);
    v90 = *(_QWORD *)(v0 + 64);
    v17 = sub_100004828((uint64_t *)&unk_1006325A0);
    v18 = sub_100004828((uint64_t *)&unk_100633440);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v17, v22 + v20, v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_10051FFB0;
    v24 = v23 + v22;
    v25 = (_QWORD *)(v23 + v22 + *(int *)(v18 + 48));
    v26 = enum case for DIPError.PropertyKey.serverURL(_:);
    v27 = type metadata accessor for DIPError.PropertyKey(0);
    v102 = *(void (**)(void))(*(_QWORD *)(v27 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v102)(v24, v26, v27);
    v25[3] = v15;
    v28 = sub_100022234(v25);
    v88(v28, v14, v15);
    swift_errorRetain(v9);
    v29 = sub_10011D314(v23);
    LODWORD(v88) = enum case for DIPError.Code.internalError(_:);
    v91 = *(void (**)(uint64_t))(v90 + 104);
    v91(v16);
    v87 = type metadata accessor for DIPError(0);
    v86 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v30 = swift_allocError(v87, v86, 0, 0);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v9, v16, 0, v29, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001FLL, 0x8000000100540B90, 276);
    swift_willThrow(v31);

    sub_100007F8C(v96, v99);
    swift_errorRelease(v9);
    v94 = *(_QWORD *)(v0 + 160);
    v83 = *(_QWORD *)(v0 + 152);
    v84 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v85 = *(_QWORD *)(v0 + 144);
    v97 = *(_QWORD *)(v0 + 136);
    v82 = *(_QWORD *)(v0 + 128);
    v100 = *(_QWORD *)(v0 + 120);
    v80 = *(_QWORD *)(v0 + 96);
    v81 = *(_QWORD *)(v0 + 104);
    v32 = *(_QWORD *)(v0 + 72);
    v78 = *(_QWORD *)(v0 + 88);
    v79 = *(_QWORD *)(v0 + 80);
    v34 = *(_QWORD *)(v0 + 48);
    v33 = *(_QWORD *)(v0 + 56);
    v35 = sub_100004828((uint64_t *)&unk_1006325A0);
    v36 = sub_100004828((uint64_t *)&unk_100633440);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(_QWORD *)(v37 + 72);
    v39 = *(unsigned __int8 *)(v37 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject(v35, v40 + v38, v39 | 7);
    *(_OWORD *)(v41 + 16) = xmmword_10051FFB0;
    v42 = (_QWORD *)(v41 + v40 + *(int *)(v36 + 48));
    v102();
    v43 = *(_QWORD *)(v34 + 48);
    v44 = *(_QWORD *)(v34 + 56);
    v42[3] = &type metadata for String;
    *v42 = v43;
    v42[1] = v44;
    swift_errorRetain(v30);
    swift_bridgeObjectRetain(v44);
    v45 = sub_10011D314(v41);
    ((void (*)(uint64_t, _QWORD, uint64_t))v91)(v32, v88, v33);
    swift_allocError(v87, v86, 0, 0);
    v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x2073747320746547, 0xEE0064656C696166, v30, v32, 0, v45, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001FLL, 0x8000000100540B90, 279);
    swift_willThrow(v46);
    swift_errorRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v80, v79);
    v84(v82, v81);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v94, v85);
    swift_task_dealloc(v94);
    swift_task_dealloc(v97);
    swift_task_dealloc(v82);
    swift_task_dealloc(v100);
    swift_task_dealloc(v80);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_release(v6);
    v103 = *(_QWORD *)(v0 + 24);
    v104 = *(_QWORD *)(v0 + 16);
    if (v8)
    {
      v48 = *(_QWORD *)(v0 + 200);
      v49 = *(_QWORD *)(v0 + 192);

      sub_100007F8C(v49, v48);
      v50._countAndFlagsBits = 0xD000000000000016;
      v50._object = (void *)0x8000000100540BD0;
      v51._countAndFlagsBits = 0x6437623761323661;
      v51._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v51, v50);
    }
    else
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v52 = *(_QWORD *)(v0 + 200);
      v53 = *(void **)(v0 + 208);
      v54 = *(_QWORD *)(v0 + 192);
      v55 = qword_100670810;
      v56 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_100022948(v54, v52);
      v57 = v53;
      v58 = Data._bridgeToObjectiveC()().super.isa;
      v59 = (Class)objc_msgSend(v56, "initWithResponse:data:", v57, v58);
      sub_100007F8C(v54, v52);

      v60 = sub_10044D3C8(v59, 0);
      if (v60)
      {
        v61 = v60;
        v62 = URLRequest._bridgeToObjectiveC()().super.isa;
        v63 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 32) = v55;
        *(_QWORD *)(v0 + 40) = v63;
        objc_msgSendSuper2((objc_super *)(v0 + 32), "storeCachedResponse:forRequest:", v61, v62);

        v59 = v62;
      }
      v65 = *(_QWORD *)(v0 + 200);
      v64 = *(void **)(v0 + 208);
      v66 = *(_QWORD *)(v0 + 192);

      sub_100007F8C(v66, v65);
      v67._countAndFlagsBits = 0xD000000000000018;
      v67._object = (void *)0x8000000100540BB0;
      v68._countAndFlagsBits = 0x3032326230323266;
      v68._object = (void *)0xE800000000000000;
      logMilestone(tag:description:)(v68, v67);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    }
    v69 = *(_QWORD *)(v0 + 200);
    v70 = *(_QWORD *)(v0 + 192);
    v71 = *(_QWORD *)(v0 + 160);
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v89 = *(_QWORD *)(v0 + 152);
    v92 = *(_QWORD *)(v0 + 144);
    v73 = *(_QWORD *)(v0 + 128);
    v95 = *(_QWORD *)(v0 + 136);
    v75 = *(_QWORD *)(v0 + 96);
    v74 = *(_QWORD *)(v0 + 104);
    v77 = *(_QWORD *)(v0 + 80);
    v76 = *(_QWORD *)(v0 + 88);
    v98 = *(_QWORD *)(v0 + 120);
    v101 = *(_QWORD *)(v0 + 72);

    sub_100007F8C(v70, v69);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    v72(v73, v74);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v71, v92);
    swift_task_dealloc(v71);
    swift_task_dealloc(v95);
    swift_task_dealloc(v73);
    swift_task_dealloc(v98);
    swift_task_dealloc(v75);
    swift_task_dealloc(v101);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v104, v103);
  }
}

uint64_t sub_1000339E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  void (*v52)(void);

  v1 = *(_QWORD *)(v0 + 216);
  v48 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 176);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v49 = *(_QWORD *)(v0 + 64);
  v5 = sub_100004828((uint64_t *)&unk_1006325A0);
  v6 = sub_100004828((uint64_t *)&unk_100633440);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_10051FFB0;
  v12 = v11 + v10;
  v13 = (_QWORD *)(v11 + v10 + *(int *)(v6 + 48));
  v14 = enum case for DIPError.PropertyKey.serverURL(_:);
  v15 = type metadata accessor for DIPError.PropertyKey(0);
  v52 = *(void (**)(void))(*(_QWORD *)(v15 - 8) + 104);
  ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v12, v14, v15);
  v13[3] = v3;
  v16 = sub_100022234(v13);
  v48(v16, v2, v3);
  swift_errorRetain(v1);
  v17 = sub_10011D314(v11);
  LODWORD(v48) = enum case for DIPError.Code.internalError(_:);
  v50 = *(void (**)(uint64_t))(v49 + 104);
  v50(v4);
  v42 = type metadata accessor for DIPError(0);
  v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v18 = swift_allocError(v42, v41, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v17, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001FLL, 0x8000000100540B90, 257);
  swift_willThrow(v19);
  swift_errorRelease(v1);
  v43 = *(_QWORD *)(v0 + 152);
  v44 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v45 = *(_QWORD *)(v0 + 144);
  v46 = *(_QWORD *)(v0 + 160);
  v47 = *(_QWORD *)(v0 + 136);
  v40 = *(_QWORD *)(v0 + 128);
  v51 = *(_QWORD *)(v0 + 120);
  v39 = *(_QWORD *)(v0 + 104);
  v36 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);
  v38 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 56);
  v23 = sub_100004828((uint64_t *)&unk_1006325A0);
  v24 = sub_100004828((uint64_t *)&unk_100633440);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v23, v28 + v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_10051FFB0;
  v30 = (_QWORD *)(v29 + v28 + *(int *)(v24 + 48));
  v52();
  v31 = *(_QWORD *)(v22 + 48);
  v32 = *(_QWORD *)(v22 + 56);
  v30[3] = &type metadata for String;
  *v30 = v31;
  v30[1] = v32;
  swift_errorRetain(v18);
  swift_bridgeObjectRetain(v32);
  v33 = sub_10011D314(v29);
  ((void (*)(uint64_t, _QWORD, uint64_t))v50)(v20, v48, v21);
  swift_allocError(v42, v41, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x2073747320746547, 0xEE0064656C696166, v18, v20, 0, v33, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001FLL, 0x8000000100540B90, 279);
  swift_willThrow(v34);
  swift_errorRelease(v18);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  v44(v40, v39);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v40);
  swift_task_dealloc(v51);
  swift_task_dealloc(v38);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033DE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = sub_100004828(&qword_100630A48);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v10 = type metadata accessor for Date(0);
  v2[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[16] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v12);
  v2[18] = swift_task_alloc(v12);
  v2[19] = swift_task_alloc(v12);
  return swift_task_switch(sub_100033F20, 0, 0);
}

uint64_t sub_100033F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD);
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 88);
  v49 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 24);
  v45 = *(_QWORD *)(v1 + 80);
  v47 = *(_QWORD *)(v1 + 16);
  Date.init()(a1);
  static Date.- infix(_:_:)(v2, 80000.0);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 160) = v9;
  v10 = v9(v2, v5);
  Date.init()(v10);
  static Date.+ infix(_:_:)(v2, 120000.0);
  v9(v2, v5);
  sub_100032A58(v6);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v1 + 168) = v11;
  v11(v6, v45);
  sub_100032BCC(v4, v47, v49);
  v12 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 88);
  v14 = *(_QWORD *)(v1 + 72);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v14, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
  {
    v15 = sub_100008030(*(_QWORD *)(v1 + 72), &qword_100630A48);
    v16 = defaultLogger()(v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to construct profile url for cache refresh", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v20 = *(_QWORD *)(v1 + 40);

    v21 = *(void (**)(uint64_t, _QWORD))(v20 + 8);
    v22 = *(void (**)(uint64_t, uint64_t))(v1 + 160);
    v23 = *(void (**)(uint64_t, uint64_t))(v1 + 168);
    v24 = *(_QWORD *)(v1 + 144);
    v25 = *(_QWORD *)(v1 + 152);
    v26 = *(_QWORD *)(v1 + 136);
    v28 = *(_QWORD *)(v1 + 112);
    v27 = *(_QWORD *)(v1 + 120);
    v43 = *(_QWORD *)(v1 + 104);
    v44 = *(_QWORD *)(v1 + 96);
    v29 = *(_QWORD *)(v1 + 80);
    v46 = *(_QWORD *)(v1 + 72);
    v48 = *(_QWORD *)(v1 + 64);
    v30 = *(_QWORD *)(v1 + 48);
    v50 = *(_QWORD *)(v1 + 56);
    v21(v30, *(_QWORD *)(v1 + 32));
    v23(v28, v29);
    v22(v26, v27);
    v22(v25, v27);
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 32))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v33 = *(_QWORD *)(v1 + 128);
    v32 = *(_QWORD *)(v1 + 136);
    v34 = *(_QWORD *)(v1 + 120);
    v36 = *(_QWORD *)(v1 + 56);
    v35 = *(_QWORD *)(v1 + 64);
    v38 = *(_QWORD **)(v1 + 16);
    v37 = *(_QWORD *)(v1 + 24);
    v39 = qword_100670810;
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v40(v35, *(_QWORD *)(v1 + 152), v34);
    v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
    v41(v35, 0, 1, v34);
    v40(v36, v32, v34);
    v41(v36, 0, 1, v34);
    swift_retain(v37);
    sub_10003592C(v38);
    v51 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100641F78
                                                                                             + dword_100641F78);
    v42 = (_QWORD *)swift_task_alloc(unk_100641F7C);
    *(_QWORD *)(v1 + 176) = v42;
    *v42 = v1;
    v42[1] = sub_1000342F0;
    return v51(*(_QWORD *)(v1 + 96), 0, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56), v39, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
  }
}

uint64_t sub_1000342F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v4 = *(_QWORD **)(*(_QWORD *)v0 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  sub_1000359A0(v4);
  swift_release(v3);
  sub_100008030(v1, &qword_100633990);
  sub_100008030(v2, &qword_100633990);
  return swift_task_switch(sub_100034384, 0, 0);
}

uint64_t sub_100034384()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 48);
  v2(v8, v9);
  v2(v7, v9);
  v1(v5, v6);
  v1(v3, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v8);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003447C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_100034548, 0, 0);
}

uint64_t sub_100034548(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t **v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Refreshing profile cache", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = v1[14];
  v8 = v1[10];
  v9 = v1[11];

  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v1[15] = (uint64_t)v10;
  v10(v7, v8);
  v11 = (uint64_t **)swift_task_alloc(dword_100630A3C);
  v1[16] = (uint64_t)v11;
  *v11 = v1;
  v11[1] = (uint64_t *)sub_100034634;
  return sub_100031BFC(v1[3], 1);
}

uint64_t sub_100034634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 128);
  *(_QWORD *)(*(_QWORD *)v3 + 136) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_100034798;
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    v6 = sub_1000346A4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000346A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing configuration cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 80);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100034798()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100540BF0, v1, v8, 0, v9, 0xD000000000000058, 0x8000000100540990, 0xD00000000000001DLL, 0x8000000100540C10, 324);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v6, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v4, v6);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v3);
  swift_errorRelease(v1);
  v2(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034950()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[2] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100633990) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[3] = swift_task_alloc(v2);
  v1[4] = swift_task_alloc(v2);
  v3 = type metadata accessor for URL(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v5);
  v1[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for Date(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  v1[13] = swift_task_alloc(v8);
  return swift_task_switch(sub_100034A38, 0, 0);
}

uint64_t sub_100034A38(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v1[12];
  v4 = v1[10];
  v3 = v1[11];
  v5 = v1[9];
  v7 = v1[6];
  v6 = v1[7];
  v24 = v1[5];
  v8 = v1[2];
  Date.init()(a1);
  static Date.- infix(_:_:)(v2, 80000.0);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v1[14] = v9;
  v10 = v9(v2, v5);
  Date.init()(v10);
  static Date.+ infix(_:_:)(v3, 120000.0);
  v9(v3, v5);
  sub_100032A58(v6);
  URL.appendingPathComponent(_:)(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v1[15] = v11;
  v11(v6, v24);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v12 = v1[12];
  v13 = v1[9];
  v14 = v1[10];
  v16 = v1[3];
  v15 = v1[4];
  v17 = v1[2];
  v18 = qword_100670810;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v19(v15, v1[13], v13);
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v20(v15, 0, 1, v13);
  v19(v16, v12, v13);
  v20(v16, 0, 1, v13);
  v21 = unk_100641F74;
  v25 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100641F70
                                                                                  + dword_100641F70);
  swift_retain(v17);
  v22 = (_QWORD *)swift_task_alloc(v21);
  v1[16] = v22;
  *v22 = v1;
  v22[1] = sub_100034C08;
  return v25(v1[8], 0, v1[4], v1[3], v18, v1[2]);
}

uint64_t sub_100034C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release(v3);
  sub_100008030(v1, &qword_100633990);
  sub_100008030(v2, &qword_100633990);
  return swift_task_switch(sub_100034C94, 0, 0);
}

uint64_t sub_100034C94()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD))(v0 + 120))(v6, *(_QWORD *)(v0 + 40));
  v1(v2, v5);
  v1(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034D50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[2] = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  v1[13] = swift_task_alloc(v8);
  return swift_task_switch(sub_100034E1C, 0, 0);
}

uint64_t sub_100034E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Refreshing sts cache", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = v1[13];
  v8 = v1[9];
  v9 = v1[10];

  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v1[14] = v10;
  v10(v7, v8);
  v11 = (_QWORD *)swift_task_alloc(dword_100630A6C);
  v1[15] = v11;
  *v11 = v1;
  v11[1] = sub_100034F04;
  return sub_100032FB0(1);
}

uint64_t sub_100034F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  *(_QWORD *)(*(_QWORD *)v3 + 128) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_100035068;
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    v6 = sub_100034F74;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100034F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done refreshing sts cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
  v7 = *(_QWORD *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 72);

  v6(v7, v8);
  v9 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 64);
  v12 = *(_QWORD *)(v1 + 40);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100035068()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100540B50, v1, v8, 0, v9, 0xD000000000000058, 0x8000000100540990, 0xD000000000000011, 0x8000000100540B70, 343);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v6, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v4, v6);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v3);
  swift_errorRelease(v1);
  v2(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035220()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for DIPAssessmentStaticWebService()
{
  return objc_opt_self(_TtC8coreidvd29DIPAssessmentStaticWebService);
}

unint64_t sub_10003527C()
{
  unint64_t result;

  result = qword_100630A40;
  if (!qword_100630A40)
  {
    result = swift_getWitnessTable(&unk_10052BBDC, &type metadata for GetProfileResponse);
    atomic_store(result, (unint64_t *)&qword_100630A40);
  }
  return result;
}

uint64_t sub_1000352C0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_1000352D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

id sub_100035318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  __int128 v17;
  id v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[6];
  _BYTE v41[432];
  _BYTE v42[432];
  _OWORD v43[27];
  _OWORD v44[23];

  v35 = a3;
  v36 = a4;
  v38 = a1;
  v39 = a2;
  v4 = type metadata accessor for DIPBackoffStrategy(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v9 = __chkstk_darwin(v8);
  v37 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v13 = qword_1006702A0;
  v14 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v15 = (uint64_t)&v14[4];
  v16 = v14 + 52;
  os_unfair_lock_lock(v14 + 52);
  sub_100139D14(v15, v13, v43);
  os_unfair_lock_unlock(v16);
  v17 = v43[11];
  sub_10002EF2C(*(uint64_t *)&v43[11], *((uint64_t *)&v43[11] + 1));
  sub_10001D410(v43);
  if ((_QWORD)v17)
  {
    v18 = (id)((uint64_t (*)(uint64_t, uint64_t))v17)(v38, v39);
    sub_10002F034(v17, *((uint64_t *)&v17 + 1));
  }
  else
  {
    v19 = qword_1006702A0;
    v20 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v21 = (uint64_t)&v20[4];
    v22 = v20 + 52;
    os_unfair_lock_lock(v20 + 52);
    sub_100139D14(v21, v19, v44);
    os_unfair_lock_unlock(v22);
    sub_10002581C((uint64_t)v44, (uint64_t)v40);
    sub_10001D410(v44);
    sub_10000806C(v40, v40[3]);
    sub_10010866C((uint64_t)v41);
    sub_100035A14((uint64_t)v41, (uint64_t)v42);
    if (sub_100035A5C((uint64_t)v42) == 1)
    {
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v40);
      if (qword_10062F5D0 != -1)
        swift_once(&qword_10062F5D0, sub_1004E0C20);
      v23 = sub_1000352C0((uint64_t)v8, (uint64_t)qword_100670860);
      sub_100035DE8(v23, (uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
    }
    else
    {
      memcpy(v43, v42, sizeof(v43));
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v40);
      memcpy(v44, &v43[2], 0x169uLL);
      sub_100035A74(v44);
      sub_100035B1C((uint64_t)v41);
      sub_100035CC0(v44);
      v24 = (uint64_t *)&v44[11];
      if (BYTE8(v44[11]))
        v24 = (uint64_t *)v44 + 1;
      v25 = *v24;
      v26 = &v44[12];
      if (BYTE8(v44[12]))
        v26 = &v44[1];
      v27 = *(_QWORD *)v26;
      v28 = &v44[13];
      if (BYTE8(v44[13]))
        v28 = (_QWORD *)&v44[1] + 1;
      *v7 = *v28;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPBackoffStrategy.exponential(_:), v4);
      *(_QWORD *)v12 = v25;
      *((_QWORD *)v12 + 1) = v27;
      (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 32))(&v12[v8[6]], v7, v4);
      v12[v8[7]] = 1;
      v12[v8[8]] = 1;
      v12[v8[9]] = 0;
      v29 = &v12[v8[10]];
      v30 = v36;
      *(_QWORD *)v29 = v35;
      *((_QWORD *)v29 + 1) = v30;
      swift_bridgeObjectRetain(v30);
    }
    v31 = v37;
    sub_100035DE8((uint64_t)v12, v37, type metadata accessor for DIPHTTPSession.Configuration);
    v32 = objc_allocWithZone((Class)type metadata accessor for DIPAssessmentWebService());
    v33 = v39;
    swift_bridgeObjectRetain(v39);
    v18 = sub_10002F314(v38, v33, v31);
    sub_100035DAC((uint64_t)v12, type metadata accessor for DIPHTTPSession.Configuration);
  }
  return v18;
}

_QWORD *sub_1000356BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char *v19;
  char v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v32 = a1;
  v33 = a2;
  v5 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v30 - v12);
  if (qword_10062F450 != -1)
    swift_once(&qword_10062F450, sub_100031B40);
  v14 = (_QWORD *)sub_1000352C0((uint64_t)v5, (uint64_t)qword_1006700A8);
  v15 = v14[1];
  v16 = v5[6];
  v17 = *((_BYTE *)v14 + v5[7]);
  v18 = *((_BYTE *)v14 + v5[8]);
  v19 = (char *)v14 + v16;
  v20 = *((_BYTE *)v14 + v5[9]);
  *v13 = *v14;
  v13[1] = v15;
  v21 = (char *)v13 + v16;
  v22 = type metadata accessor for DIPBackoffStrategy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v19, v22);
  *((_BYTE *)v13 + v5[7]) = v17;
  *((_BYTE *)v13 + v5[8]) = v18;
  *((_BYTE *)v13 + v5[9]) = v20;
  v23 = (_QWORD *)((char *)v13 + v5[10]);
  *v23 = v31;
  v23[1] = a4;
  sub_100035DE8((uint64_t)v13, (uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  v24 = type metadata accessor for DIPAssessmentStaticWebService();
  v25 = (_QWORD *)swift_allocObject(v24, 72, 7);
  v25[2] = 1937011503;
  v25[3] = 0xE400000000000000;
  v25[4] = 0x656C69666F72702FLL;
  v25[5] = 0xE800000000000000;
  v26 = v33;
  v25[6] = v32;
  v25[7] = v26;
  sub_100035DE8((uint64_t)v11, (uint64_t)v8, type metadata accessor for DIPHTTPSession.Configuration);
  v27 = type metadata accessor for DIPHTTPSession(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v26);
  v28 = sub_1004E0CF4((uint64_t)v8);
  sub_100035DAC((uint64_t)v11, type metadata accessor for DIPHTTPSession.Configuration);
  v25[8] = v28;
  sub_100035DAC((uint64_t)v13, type metadata accessor for DIPHTTPSession.Configuration);
  return v25;
}

unint64_t sub_1000358E8()
{
  unint64_t result;

  result = qword_100630A70;
  if (!qword_100630A70)
  {
    result = swift_getWitnessTable(&unk_10052BBB4, &type metadata for GetSTSResponse);
    atomic_store(result, &qword_100630A70);
  }
  return result;
}

_QWORD *sub_10003592C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_1000359A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100035A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100632330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035A5C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100035A74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[19];
  v8 = a1[31];
  v9 = a1[33];
  swift_bridgeObjectRetain(a1[35]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100035B1C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = *(_OWORD *)(a1 + 384);
  v14 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_100035BBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    *(_QWORD *)(a1 + 416),
    *(_QWORD *)(a1 + 424));
  return a1;
}

uint64_t sub_100035BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a16);
    swift_bridgeObjectRelease(a24);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a18);
    swift_bridgeObjectRelease(a36);
    swift_bridgeObjectRelease(a38);
    swift_bridgeObjectRelease(a40);
    swift_bridgeObjectRelease(a51);
    swift_bridgeObjectRelease(a52);
    swift_bridgeObjectRelease(a53);
    return swift_bridgeObjectRelease(a54);
  }
  return result;
}

_QWORD *sub_100035CC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[31];
  v8 = a1[33];
  v9 = a1[35];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_100035D68()
{
  unint64_t result;

  result = qword_100630A88;
  if (!qword_100630A88)
  {
    result = swift_getWitnessTable(&unk_10052B474, &type metadata for OLDRequest);
    atomic_store(result, (unint64_t *)&qword_100630A88);
  }
  return result;
}

uint64_t sub_100035DAC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100035DE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100035E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, _QWORD *, uint64_t);
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __n128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  char *v123;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int (*v214)(char *, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  unsigned int v230;
  char *v231;
  char *v232;
  char *v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unsigned int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  int v263;
  int64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  char *v269;
  char *v270;
  _QWORD *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  char v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;

  v239 = type metadata accessor for Logger(0);
  v238 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v244 = (char *)&v193 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v236 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v235 = (char *)&v193 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004828(&qword_100630AB0);
  __chkstk_darwin(v3);
  v245 = (char *)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100630AB8);
  __chkstk_darwin(v5);
  v242 = (uint64_t)&v193 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630AC0);
  v8 = __chkstk_darwin(v7);
  v225 = (uint64_t)&v193 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v243 = (uint64_t)&v193 - v10;
  v261 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement(0);
  v260 = *(_QWORD *)(v261 - 8);
  v11 = __chkstk_darwin(v261);
  v224 = (char *)&v193 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v234 = (uint64_t *)((char *)&v193 - v14);
  v15 = __chkstk_darwin(v13);
  v219 = (char *)&v193 - v16;
  v17 = __chkstk_darwin(v15);
  v220 = (char *)&v193 - v18;
  v19 = __chkstk_darwin(v17);
  v221 = (char *)&v193 - v20;
  v21 = __chkstk_darwin(v19);
  v222 = (char *)&v193 - v22;
  v23 = __chkstk_darwin(v21);
  v223 = (char *)&v193 - v24;
  v25 = __chkstk_darwin(v23);
  v226 = (char *)&v193 - v26;
  v27 = __chkstk_darwin(v25);
  v227 = (char *)&v193 - v28;
  v29 = __chkstk_darwin(v27);
  v229 = (char *)&v193 - v30;
  v31 = __chkstk_darwin(v29);
  v228 = (char *)&v193 - v32;
  v33 = __chkstk_darwin(v31);
  v231 = (char *)&v193 - v34;
  v35 = __chkstk_darwin(v33);
  v232 = (char *)&v193 - v36;
  __chkstk_darwin(v35);
  v233 = (char *)&v193 - v37;
  v38 = sub_100004828(&qword_100630AC8);
  __chkstk_darwin(v38);
  v274 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventRetention(0);
  v41 = *(_QWORD *)(v40 - 8);
  v281 = v40;
  v282 = v41;
  __chkstk_darwin(v40);
  v280 = (char *)&v193 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for IdentityIntentToStore(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v279 = (char *)&v193 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v284 = (char *)&v193 - v47;
  v278 = type metadata accessor for IdentityElement(0);
  v285 = *(_QWORD *)(v278 - 8);
  v48 = __chkstk_darwin(v278);
  v273 = (char *)&v193 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v270 = (char *)&v193 - v50;
  v51 = sub_100004828(&qword_100630AD0);
  v52 = __chkstk_darwin(v51);
  v269 = (char *)&v193 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v277 = (uint64_t)&v193 - v54;
  v55 = sub_100004828(&qword_100630AD8);
  v56 = __chkstk_darwin(v55);
  v240 = (uint64_t)&v193 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v59 = (char *)&v193 - v58;
  v60 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v241 = (uint64_t)&v193 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004828(&qword_100630AE0);
  __chkstk_darwin(v63);
  v65 = (uint64_t *)((char *)&v193 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(0);
  v67 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v69 = (char *)&v193 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037BCC(v65);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66) == 1)
  {
    sub_100008030((uint64_t)v65, &qword_100630AE0);
    return;
  }
  v215 = v67;
  v70 = *(void (**)(char *, _QWORD *, uint64_t))(v67 + 32);
  v216 = v66;
  v70(v69, v65, v66);
  v212 = type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  v71 = *(int *)(v212 + 28);
  v218 = v0;
  v213 = v0 + v71;
  sub_100038B24(v0 + v71, (uint64_t)v59, &qword_100630AD8);
  v214 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  v72 = v214(v59, 1, v60);
  v217 = v69;
  if (v72 != 1)
  {
    v74 = v241;
    sub_100038AE0((uint64_t)v59, v241, type metadata accessor for ValidatedDigitalPresentmentRequest);
    v211 = v60;
    v75 = *(_QWORD *)(v74 + *(int *)(v60 + 20));
    v76 = *(_QWORD *)(v75 + 64);
    v246 = v75 + 64;
    v77 = 1 << *(_BYTE *)(v75 + 32);
    v78 = -1;
    if (v77 < 64)
      v78 = ~(-1 << v77);
    v79 = v78 & v76;
    v276 = enum case for IdentityIntentToStore.mayStoreForDays(_:);
    v80 = (unint64_t)(v77 + 63) >> 6;
    v268 = enum case for IdentityIntentToStore.willNotStore(_:);
    v248 = enum case for IdentityIntentToStore.mayStore(_:);
    v230 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.mayStoreIndefinitely(_:);
    v247 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.willNotStore(_:);
    v266 = enum case for IdentityElement.ageIsOver(_:);
    v267 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventRetention.mayStore(_:);
    v265 = enum case for IdentityElement.givenName(_:);
    v263 = enum case for IdentityElement.familyName(_:);
    v259 = enum case for IdentityElement.sex(_:);
    v258 = enum case for IdentityElement.portrait(_:);
    v257 = enum case for IdentityElement.address(_:);
    v256 = enum case for IdentityElement.issuingAuthority(_:);
    v255 = enum case for IdentityElement.documentDHSComplianceStatus(_:);
    v254 = enum case for IdentityElement.documentIssueDate(_:);
    v253 = enum case for IdentityElement.documentExpirationDate(_:);
    v252 = enum case for IdentityElement.documentNumber(_:);
    v251 = enum case for IdentityElement.drivingPrivileges(_:);
    v250 = enum case for IdentityElement.age(_:);
    v249 = enum case for IdentityElement.dateOfBirth(_:);
    v197 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.dateOfBirth(_:);
    v198 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.age(_:);
    v199 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.drivingPrivileges(_:);
    v200 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentNumber(_:);
    v201 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentExpirationDate(_:);
    v202 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentIssueDate(_:);
    v203 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.documentDHSComplianceStatus(_:);
    v204 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.issuingAuthority(_:);
    v205 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.address(_:);
    v206 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.portrait(_:);
    v207 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.sex(_:);
    v208 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.familyName(_:);
    v209 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.givenName(_:);
    v210 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventElement.ageAtLeast(_:);
    v194 = v80 - 1;
    v81 = swift_bridgeObjectRetain(v75);
    v82 = 0;
    v264 = v80;
    v196 = v80 - 5;
    v272 = v83;
    v195 = v83 + 104;
    v271 = _swiftEmptyArrayStorage;
    v84 = &qword_100630AE8;
    v85 = v274;
    v86 = v278;
    v88 = (uint64_t)v269;
    v87 = v270;
    while (!v79)
    {
      v94 = v82 + 1;
      if (__OFADD__(v82, 1))
      {
        __break(1u);
        return;
      }
      if (v94 >= v264)
      {
        v96 = v82;
      }
      else
      {
        v95 = *(_QWORD *)(v246 + 8 * v94);
        if (v95)
          goto LABEL_15;
        v96 = v82 + 1;
        if ((uint64_t)(v82 + 2) < v264)
        {
          v95 = *(_QWORD *)(v246 + 8 * (v82 + 2));
          if (v95)
          {
            v94 = v82 + 2;
            goto LABEL_15;
          }
          v96 = v82 + 2;
          if ((uint64_t)(v82 + 3) < v264)
          {
            v95 = *(_QWORD *)(v246 + 8 * (v82 + 3));
            if (v95)
            {
              v94 = v82 + 3;
LABEL_15:
              v79 = (v95 - 1) & v95;
              v90 = __clz(__rbit64(v95)) + (v94 << 6);
              v283 = v94;
LABEL_11:
              v91 = v272;
              (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v285 + 16))(v88, *(_QWORD *)(v272 + 48) + *(_QWORD *)(v285 + 72) * v90, v86, v81);
              v92 = *(_QWORD *)(v91 + 56) + *(_QWORD *)(v44 + 72) * v90;
              v93 = sub_100004828(v84);
              (*(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16))(v88 + *(int *)(v93 + 48), v92, v43);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v88, 0, 1, v93);
              v85 = v274;
              goto LABEL_18;
            }
            v94 = v82 + 4;
            v96 = v82 + 3;
            if ((uint64_t)(v82 + 4) < v264)
            {
              v95 = *(_QWORD *)(v246 + 8 * v94);
              if (v95)
                goto LABEL_15;
              while (v196 != v82)
              {
                v95 = *(_QWORD *)(v195 + 8 * v82++);
                if (v95)
                {
                  v94 = v82 + 4;
                  goto LABEL_15;
                }
              }
              v96 = v194;
            }
          }
        }
      }
      v97 = sub_100004828(v84);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v88, 1, 1, v97);
      v79 = 0;
      v283 = v96;
LABEL_18:
      v98 = v84;
      v99 = v277;
      sub_100038A98(v88, v277);
      v100 = v98;
      v101 = sub_100004828(v98);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 48))(v99, 1, v101) == 1)
      {
        v73 = v211;
        swift_release(v272);
        sub_100035DAC(v241, type metadata accessor for ValidatedDigitalPresentmentRequest);
        goto LABEL_127;
      }
      v102 = v99 + *(int *)(v101 + 48);
      (*(void (**)(char *, uint64_t, uint64_t))(v285 + 32))(v87, v99, v86);
      v103 = v284;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v284, v102, v43);
      v104 = v279;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v279, v103, v43);
      v105 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v104, v43);
      if (v105 == v276)
      {
        (*(void (**)(char *, uint64_t))(v44 + 96))(v104, v43);
        *v85 = *(_QWORD *)v104;
        v106 = v281;
        v107 = v282;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v282 + 104))(v85, v267, v281);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v85, 0, 1, v106);
        v84 = v100;
      }
      else
      {
        v106 = v281;
        v84 = v100;
        if (v105 == v268)
        {
          v107 = v282;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v282 + 104))(v85, v247, v281);
        }
        else
        {
          v107 = v282;
          if (v105 != v248)
          {
            (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v282 + 56))(v85, 1, 1, v281);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v279, v43);
            goto LABEL_27;
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v282 + 104))(v85, v230, v281);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v85, 0, 1, v106);
      }
LABEL_27:
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v107 + 48))(v85, 1, v106) == 1)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v284, v43);
        v86 = v278;
        (*(void (**)(char *, uint64_t))(v285 + 8))(v87, v278);
        sub_100008030((uint64_t)v85, &qword_100630AC8);
        v82 = v283;
      }
      else
      {
        (*(void (**)(char *, _QWORD *, uint64_t))(v107 + 32))(v280, v85, v106);
        v108 = v285;
        v109 = v87;
        v110 = v273;
        v86 = v278;
        (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v273, v109, v278);
        v111 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v110, v86);
        if (v111 == v266)
        {
          v113 = v273;
          (*(void (**)(char *, uint64_t))(v285 + 96))(v273, v86);
          v114 = *(_QWORD *)v113;
          v115 = sub_100004828(&qword_100630AF0);
          v116 = v234;
          v117 = (char *)v234 + *(int *)(v115 + 48);
          *v234 = v114;
          (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v117, v280, v281);
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v260 + 104))(v116, v210, v261);
          if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
            v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
          v88 = (uint64_t)v269;
          v87 = v270;
          v119 = v271[2];
          v118 = v271[3];
          v120 = v119 + 1;
          v85 = v274;
          if (v119 >= v118 >> 1)
            v271 = (_QWORD *)sub_1000E2464(v118 > 1, v119 + 1, 1, (unint64_t)v271);
          v121 = (uint64_t *)&v275;
LABEL_119:
          v160 = *(v121 - 32);
          v161 = v271;
          v271[2] = v120;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v260 + 32))((unint64_t)v161+ ((*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80))+ *(_QWORD *)(v260 + 72) * v119, v160, v261);
          (*(void (**)(char *, uint64_t))(v282 + 8))(v280, v281);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v284, v43);
          (*(void (**)(char *, uint64_t))(v285 + 8))(v87, v86);
          v82 = v283;
        }
        else
        {
          if (v111 == v265)
          {
            v122 = v106;
            v123 = v233;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v233, v280, v122);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v123, v209, v261);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v271);
            v88 = (uint64_t)v269;
            v87 = v270;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v125 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v125 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v125 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v274;
            goto LABEL_119;
          }
          v88 = (uint64_t)v269;
          v87 = v270;
          if (v111 == v263)
          {
            v126 = v106;
            v127 = v232;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v232, v280, v126);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v127, v208, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v128 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v128 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v128 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v273;
            goto LABEL_119;
          }
          if (v111 == v259)
          {
            v129 = v106;
            v130 = v231;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v231, v280, v129);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v130, v207, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v131 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v131 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v131 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = &v272;
            goto LABEL_119;
          }
          if (v111 == v258)
          {
            v132 = v106;
            v133 = v229;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v229, v280, v132);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v133, v206, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v134 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v134 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v134 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v270;
            goto LABEL_119;
          }
          if (v111 == v257)
          {
            v135 = v106;
            v136 = v228;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v228, v280, v135);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v136, v205, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v137 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v137 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v137 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v269;
            goto LABEL_119;
          }
          if (v111 == v256)
          {
            v138 = v106;
            v139 = v227;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v227, v280, v138);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v139, v204, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v140 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v140 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v140 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v267;
            goto LABEL_119;
          }
          if (v111 == v255)
          {
            v141 = v106;
            v142 = v226;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v226, v280, v141);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v142, v203, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v143 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v143 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v143 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v265;
            goto LABEL_119;
          }
          if (v111 == v254)
          {
            v144 = v106;
            v145 = v224;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v224, v280, v144);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v145, v202, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v146 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v146 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v146 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v262;
            goto LABEL_119;
          }
          if (v111 == v253)
          {
            v147 = v106;
            v148 = v223;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v223, v280, v147);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v148, v201, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v149 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v149 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v149 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = &v261;
            goto LABEL_119;
          }
          if (v111 == v252)
          {
            v150 = v106;
            v151 = v222;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v222, v280, v150);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v151, v200, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v152 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v152 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v152 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = &v260;
            goto LABEL_119;
          }
          if (v111 == v251)
          {
            v153 = v106;
            v154 = v221;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v221, v280, v153);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v154, v199, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v155 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v155 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v155 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v258;
            goto LABEL_119;
          }
          if (v111 == v250)
          {
            v156 = v220;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v220, v280, v281);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v156, v198, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v157 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v157 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v157 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v256;
            goto LABEL_119;
          }
          if (v111 == v249)
          {
            v158 = v219;
            (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v219, v280, v281);
            (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v158, v197, v261);
            if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
              v271 = (_QWORD *)sub_1000E2464(0, v271[2] + 1, 1, (unint64_t)v271);
            v119 = v271[2];
            v159 = v271[3];
            v120 = v119 + 1;
            if (v119 >= v159 >> 1)
              v271 = (_QWORD *)sub_1000E2464(v159 > 1, v119 + 1, 1, (unint64_t)v271);
            v121 = (uint64_t *)&v254;
            goto LABEL_119;
          }
          (*(void (**)(char *, uint64_t))(v282 + 8))(v280, v281);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v284, v43);
          v112 = *(void (**)(char *, uint64_t))(v285 + 8);
          v112(v87, v86);
          v112(v273, v86);
          v82 = v283;
        }
      }
    }
    v89 = __clz(__rbit64(v79));
    v79 &= v79 - 1;
    v283 = v82;
    v90 = v89 | (v82 << 6);
    goto LABEL_11;
  }
  v73 = v60;
  sub_100008030((uint64_t)v59, &qword_100630AD8);
  v271 = _swiftEmptyArrayStorage;
LABEL_127:
  v162 = v218;
  v163 = v242;
  v164 = sub_100038B24(v218, v242, &qword_100630AB8);
  __chkstk_darwin(v164);
  v192 = v162;
  v165 = v243;
  sub_1000380A0((void (*)(char *, uint64_t *))sub_100038084, (uint64_t)(&v193 - 4), v243);
  v166 = (uint64_t)v245;
  sub_100008030(v163, &qword_100630AB8);
  v167 = v225;
  sub_100038B24(v165, v225, &qword_100630AC0);
  v168 = type metadata accessor for BundleRecord(0);
  v169 = *(_QWORD *)(v168 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168) == 1)
  {
    sub_100008030(v165, &qword_100630AC0);
    sub_100008030(v167, &qword_100630AC0);
    v285 = 0;
    v170 = 0;
  }
  else
  {
    v285 = BundleRecord.bundleIdentifier.getter();
    v170 = v171;
    sub_100008030(v165, &qword_100630AC0);
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v167, v168);
  }
  v172 = v240;
  v173 = v73;
  v174 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v214;
  v175 = v212;
  sub_100038B24(v213, v240, &qword_100630AD8);
  if (v174(v172, 1, v173) == 1)
  {
    sub_100008030(v172, &qword_100630AD8);
    v176 = 0;
    v177 = 0;
  }
  else
  {
    v178 = (uint64_t *)(v172 + *(int *)(v173 + 32));
    v176 = *v178;
    v177 = v178[1];
    swift_bridgeObjectRetain(v177);
    sub_100035DAC(v172, type metadata accessor for ValidatedDigitalPresentmentRequest);
  }
  v179 = v175;
  sub_100038B24(v162 + *(int *)(v175 + 24), v166, &qword_100630AB0);
  v180 = type metadata accessor for IdentityDocumentDescriptor(0);
  v181 = *(_QWORD *)(v180 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v166, 1, v180) == 1)
  {
    sub_100008030(v166, &qword_100630AB0);
    v182 = 0;
    v183 = 0;
  }
  else
  {
    v184 = v235;
    IdentityDocumentDescriptor.documentType.getter();
    v185 = (*(uint64_t (**)(uint64_t, uint64_t))(v181 + 8))(v166, v180);
    v182 = DigitalPresentmentDocumentType.description.getter(v185);
    v183 = v186;
    (*(void (**)(char *, uint64_t))(v236 + 8))(v184, v237);
  }
  v187 = v216;
  v188 = v215;
  type metadata accessor for DaemonAnalytics(0);
  LOBYTE(v192) = *(_BYTE *)(v162 + *(int *)(v179 + 36));
  v189 = v176;
  v190 = v217;
  v191 = v271;
  static DaemonAnalytics.sendDigitalPresentmentRequestDocumentEvent(merchantID:bundleID:documentType:outcome:elements:isTestMDL:)(v189, v177, v285, v170, v182, v183, v217, v271, v192);
  swift_bridgeObjectRelease(v191);
  swift_bridgeObjectRelease(v183);
  swift_bridgeObjectRelease(v177);
  swift_bridgeObjectRelease(v170);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v190, v187);
}

uint64_t sub_100037BCC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[8];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_1006335E0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v39 - v11;
  v13 = sub_100004828(&qword_100630AD8);
  __chkstk_darwin(v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  if (*(_BYTE *)(v1 + v16[5]) == 1)
  {
    v17 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.success(_:);
    v18 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v19 + 104))(a1, v17, v18);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
  }
  v21 = *(_QWORD *)(v1 + v16[8]);
  if (v21)
  {
    sub_100038B24(v1 + v16[7], (uint64_t)v15, &qword_100630AD8);
    v22 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v15, 1, v22);
    swift_errorRetain(v21);
    sub_100008030((uint64_t)v15, &qword_100630AD8);
    if (v23 == 1)
    {
      *a1 = v21;
      v24 = enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.validationFailed(_:);
      v25 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(0);
      v26 = *(_QWORD *)(v25 - 8);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 104))(a1, v24, v25);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
    }
    swift_getErrorValue(v21, v40, v39);
    Error.dipErrorCode.getter(v39[1], v39[2]);
    v32 = type metadata accessor for DIPError.Code(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v12, 1, v32) != 1)
    {
      sub_100038B24((uint64_t)v12, (uint64_t)v10, &qword_1006335E0);
      v34 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v10, v32);
      if (v34 == enum case for DIPError.Code.digitalPresentmentUserCancelled(_:))
      {
        swift_errorRelease(v21);
        v35 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.userCancelled(_:);
LABEL_17:
        v36 = *v35;
        v37 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(0);
        v38 = *(_QWORD *)(v37 - 8);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v38 + 104))(a1, v36, v37);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(a1, 0, 1, v37);
        return sub_100008030((uint64_t)v12, &qword_1006335E0);
      }
      if (v34 == enum case for DIPError.Code.digitalPresentmentAppCancelled(_:))
      {
        swift_errorRelease(v21);
        v35 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.appCancelled(_:);
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v32);
    }
    *a1 = v21;
    v35 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.presentmentFailed(_:);
    goto LABEL_17;
  }
  v27 = defaultLogger()(v16);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "DigitalPresentmentRequestDocumentAnalyticsRecorder didPresentSuccessfully is false but no error is set", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v31 = type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a1, 1, 1, v31);
}

uint64_t type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100630C10, (uint64_t)&nominal type descriptor for DigitalPresentmentRequestDocumentAnalyticsRecorder);
}

uint64_t sub_100037FF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v6 = type metadata accessor for DigitalPresentmentRequestDocumentAnalyticsRecorder(0);
  v7 = sub_10000806C((_QWORD *)(a2 + *(int *)(v6 + 40)), *(_QWORD *)(a2 + *(int *)(v6 + 40) + 24));
  v8 = AuditToken.wrapped.getter(v7);
  result = dispatch thunk of BundleRecordFetching.record(withAuditToken:)(v8);
  if (v3)
    *a3 = v3;
  return result;
}

uint64_t sub_100038084(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_100037FF4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1000380A0@<X0>(void (*a1)(char *, uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v5 = v3;
  v18[1] = a2;
  v8 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100630AB8);
  __chkstk_darwin(v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100038B24(v5, (uint64_t)v14, &qword_100630AB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    v15 = type metadata accessor for BundleRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
  }
  else
  {
    sub_100038AE0((uint64_t)v14, (uint64_t)v11, type metadata accessor for DigitalPresentmentCallingClientConfig);
    a1(v11, &v19);
    result = sub_100035DAC((uint64_t)v11, type metadata accessor for DigitalPresentmentCallingClientConfig);
    if (!v4)
    {
      v17 = type metadata accessor for BundleRecord(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 0, 1, v17);
    }
  }
  return result;
}

uint64_t sub_100038228()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t CanRequestDocumentOutcome;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t CanRequestDocumentAnalyticsRecorder;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v1 = type metadata accessor for Logger(0);
  v72 = *(_QWORD *)(v1 - 8);
  v73 = v1;
  v2 = __chkstk_darwin(v1);
  v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v71 = (char *)&v57 - v4;
  v5 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  __chkstk_darwin(v5);
  v69 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630AB8);
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_100630AC0);
  v10 = __chkstk_darwin(v9);
  v63 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v57 - v12;
  v13 = sub_100004828(&qword_100630AF8);
  __chkstk_darwin(v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanRequestDocumentOutcome = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome(0);
  v17 = *(_QWORD *)(CanRequestDocumentOutcome - 8);
  __chkstk_darwin(CanRequestDocumentOutcome);
  v70 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004828(&qword_100630AB0);
  __chkstk_darwin(v19);
  v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for IdentityDocumentDescriptor(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanRequestDocumentAnalyticsRecorder = type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  sub_100038B24((uint64_t)&v0[*(int *)(CanRequestDocumentAnalyticsRecorder + 20)], (uint64_t)v21, &qword_100630AB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v27 = sub_100008030((uint64_t)v21, &qword_100630AB0);
    v28 = v71;
    v29 = defaultLogger()(v27);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "DigitalPresentmentCanRequestDocumentAnalyticsRecorder descriptor not set", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v28, v73);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    sub_100038820((uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, CanRequestDocumentOutcome) == 1)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      return sub_100008030((uint64_t)v15, &qword_100630AF8);
    }
    else
    {
      v34 = v0;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v70, v15, CanRequestDocumentOutcome);
      v35 = (uint64_t)&v0[*(int *)(CanRequestDocumentAnalyticsRecorder + 24)];
      v36 = v67;
      v37 = sub_100038B24(v35, v67, &qword_100630AB8);
      __chkstk_darwin(v37);
      *(&v57 - 2) = (uint64_t)v34;
      v38 = v68;
      sub_1000380A0((void (*)(char *, uint64_t *))sub_100038BB0, (uint64_t)(&v57 - 4), v68);
      v61 = v17;
      v62 = CanRequestDocumentOutcome;
      v59 = v25;
      v60 = v22;
      v58 = v34;
      sub_100008030(v36, &qword_100630AB8);
      v39 = v63;
      sub_100038B24(v38, v63, &qword_100630AC0);
      v40 = type metadata accessor for BundleRecord(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) == 1)
      {
        sub_100008030(v38, &qword_100630AC0);
        sub_100008030(v39, &qword_100630AC0);
        v42 = 0;
        v43 = 0;
      }
      else
      {
        v54 = BundleRecord.bundleIdentifier.getter();
        v55 = v38;
        v42 = v54;
        v43 = v56;
        sub_100008030(v55, &qword_100630AC0);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
      }
      v45 = v65;
      v44 = v66;
      v46 = type metadata accessor for DaemonAnalytics(0);
      v47 = v69;
      v48 = v59;
      v49 = IdentityDocumentDescriptor.documentType.getter(v46);
      v50 = DigitalPresentmentDocumentType.description.getter(v49);
      v52 = v51;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
      v53 = v70;
      static DaemonAnalytics.sendDigitalPresentmentCanRequestDocumentEvent(outcome:bundleID:documentType:isTestMDL:)(v70, v42, v43, v50, v52, *v58);
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v43);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v53, v62);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v48, v60);
    }
  }
}

uint64_t sub_100038820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *CanRequestDocumentAnalyticsRecorder;
  unsigned int *v8;
  uint64_t v9;
  uint64_t CanRequestDocumentOutcome;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanRequestDocumentAnalyticsRecorder = (int *)type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  if (*(_BYTE *)(v1 + CanRequestDocumentAnalyticsRecorder[10]) == 1)
  {
    v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.success(_:);
LABEL_9:
    v9 = *v8;
    CanRequestDocumentOutcome = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome(0);
    v11 = *(_QWORD *)(CanRequestDocumentOutcome - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104))(a1, v9, CanRequestDocumentOutcome);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, CanRequestDocumentOutcome);
  }
  if (*(_BYTE *)(v1 + CanRequestDocumentAnalyticsRecorder[7]) == 1)
  {
    v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.missingDocument(_:);
    goto LABEL_9;
  }
  if (*(_BYTE *)(v1 + CanRequestDocumentAnalyticsRecorder[8]) == 1)
  {
    v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.missingEntitlement(_:);
    goto LABEL_9;
  }
  if (*(_BYTE *)(v1 + CanRequestDocumentAnalyticsRecorder[9]) == 1)
  {
    v8 = (unsigned int *)&enum case for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.notLoggedInWithPasscode(_:);
    goto LABEL_9;
  }
  v13 = defaultLogger()(CanRequestDocumentAnalyticsRecorder);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "DigitalPresentmentCanRequestDocumentAnalyticsRecorder inconsistent outcome", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v17 = type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 1, 1, v17);
}

uint64_t sub_100038A08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t CanRequestDocumentAnalyticsRecorder;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  CanRequestDocumentAnalyticsRecorder = type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(0);
  v7 = sub_10000806C((_QWORD *)(a2 + *(int *)(CanRequestDocumentAnalyticsRecorder + 44)), *(_QWORD *)(a2 + *(int *)(CanRequestDocumentAnalyticsRecorder + 44) + 24));
  v8 = AuditToken.wrapped.getter(v7);
  result = dispatch thunk of BundleRecordFetching.record(withAuditToken:)(v8);
  if (v3)
    *a3 = v3;
  return result;
}

uint64_t sub_100038A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038AE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100038B24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004828(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_100630B58, (uint64_t)&nominal type descriptor for DigitalPresentmentCanRequestDocumentAnalyticsRecorder);
}

uint64_t sub_100038B7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100038BB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_100038A08(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_100038BCC(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for IdentityDocumentDescriptor(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100004828(&qword_100630AB0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_100004828(&qword_100630AB8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for AuditToken(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, v16, v20);
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      v21 = *(int *)(v17 + 24);
      v22 = &v15[v21];
      v23 = &v16[v21];
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v25;
      v26 = *((_QWORD *)v23 + 2);
      *((_QWORD *)v22 + 2) = v26;
      v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v18 + 56);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      v28 = swift_bridgeObjectRetain(v26);
      v27(v15, 0, 1, v17, v28);
    }
    v29 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v29) = *((_BYTE *)a2 + v29);
    v30 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    v31 = a3[11];
    v32 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)v4 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
  }
  return v4;
}

uint64_t sub_100038DDC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for IdentityDocumentDescriptor(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for AuditToken(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    v10 = (_QWORD *)(v7 + *(int *)(v8 + 24));
    swift_bridgeObjectRelease(*v10);
    swift_bridgeObjectRelease(v10[1]);
    swift_bridgeObjectRelease(v10[2]);
  }
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + a2[11]));
}

_BYTE *sub_100038EC0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for IdentityDocumentDescriptor(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100004828(&qword_100630AB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100004828(&qword_100630AB8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for AuditToken(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v13, v14, v18);
    v13[*(int *)(v15 + 20)] = v14[*(int *)(v15 + 20)];
    v19 = *(int *)(v15 + 24);
    v20 = &v13[v19];
    v21 = &v14[v19];
    v22 = *(_QWORD *)v21;
    v23 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v23;
    v24 = *((_QWORD *)v21 + 2);
    *((_QWORD *)v20 + 2) = v24;
    v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v16 + 56);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v26 = swift_bridgeObjectRetain(v24);
    v25(v13, 0, 1, v15, v26);
  }
  v27 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v27] = a2[v27];
  v28 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v28] = a2[v28];
  v29 = a3[11];
  v30 = *(_OWORD *)&a2[v29 + 24];
  *(_OWORD *)&a1[v29 + 24] = v30;
  (**(void (***)(void))(v30 - 8))();
  return a1;
}

_BYTE *sub_1000390A4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_BYTE *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for IdentityDocumentDescriptor(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100004828(&qword_100630AB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      v34 = type metadata accessor for AuditToken(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v16, v17, v34);
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      v35 = *(int *)(v18 + 24);
      v36 = (uint64_t *)&v16[v35];
      v37 = (uint64_t *)&v17[v35];
      v38 = *v37;
      v39 = *(_QWORD *)&v16[v35];
      *v36 = *v37;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v39);
      v40 = v37[1];
      v41 = v36[1];
      v36[1] = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      v42 = v37[2];
      v43 = v36[2];
      v36[2] = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease(v43);
      goto LABEL_13;
    }
    sub_100035DAC((uint64_t)v16, type metadata accessor for DigitalPresentmentCallingClientConfig);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v32 = sub_100004828(&qword_100630AB8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v23 = type metadata accessor for AuditToken(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v16, v17, v23);
  v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
  v24 = *(int *)(v18 + 24);
  v25 = (uint64_t *)&v16[v24];
  v26 = (uint64_t *)&v17[v24];
  v27 = *v26;
  *v25 = *v26;
  v28 = v26[1];
  v25[1] = v28;
  v29 = v26[2];
  v25[2] = v29;
  v30 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v19 + 56);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  v31 = swift_bridgeObjectRetain(v29);
  v30(v16, 0, 1, v18, v31);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  sub_10000660C(&a1[a3[11]], &a2[a3[11]]);
  return a1;
}

_BYTE *sub_100039380(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  __int128 v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for IdentityDocumentDescriptor(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100004828(&qword_100630AB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100004828(&qword_100630AB8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for AuditToken(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, v14, v18);
    v13[*(int *)(v15 + 20)] = v14[*(int *)(v15 + 20)];
    v19 = *(int *)(v15 + 24);
    v20 = &v13[v19];
    v21 = &v14[v19];
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v22 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v22] = a2[v22];
  v23 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v23] = a2[v23];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  return a1;
}

_BYTE *sub_100039548(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_BYTE *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for IdentityDocumentDescriptor(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100004828(&qword_100630AB0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      v35 = type metadata accessor for AuditToken(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v16, v17, v35);
      v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
      v36 = *(int *)(v18 + 24);
      v37 = (uint64_t *)&v16[v36];
      v38 = (uint64_t *)&v17[v36];
      v39 = *v37;
      *v37 = *v38;
      swift_bridgeObjectRelease(v39);
      v40 = v37[1];
      v37[1] = v38[1];
      swift_bridgeObjectRelease(v40);
      v41 = v37[2];
      v37[2] = v38[2];
      swift_bridgeObjectRelease(v41);
      goto LABEL_13;
    }
    sub_100035DAC((uint64_t)v16, type metadata accessor for DigitalPresentmentCallingClientConfig);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v27 = sub_100004828(&qword_100630AB8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  v23 = type metadata accessor for AuditToken(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v16, v17, v23);
  v16[*(int *)(v18 + 20)] = v17[*(int *)(v18 + 20)];
  v24 = *(int *)(v18 + 24);
  v25 = &v16[v24];
  v26 = &v17[v24];
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_13:
  v28 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v28] = a2[v28];
  v29 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v29] = a2[v29];
  v30 = a3[11];
  v31 = &a1[v30];
  v32 = &a2[v30];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&a1[v30]);
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  return a1;
}

uint64_t sub_1000397FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039808);
}

uint64_t sub_100039808(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_100004828(&qword_100630AB0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100004828(&qword_100630AB8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[11] + 24);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1000398B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000398C4);
}

uint64_t sub_1000398C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100004828(&qword_100630AB0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100004828(&qword_100630AB8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11] + 24) = (a2 - 1);
  return result;
}

void sub_100039970(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_1005205E8;
  sub_10003B6E4(319, &qword_100630B68, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityDocumentDescriptor);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003B6E4(319, (unint64_t *)&unk_100630B70, type metadata accessor for DigitalPresentmentCallingClientConfig);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1005205E8;
      v6[4] = &unk_1005205E8;
      v6[5] = &unk_1005205E8;
      v6[6] = &unk_1005205E8;
      v6[7] = &unk_100520600;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t *sub_100039A30(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v69;
  char *__dst;
  uint64_t v71;
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t, __n128);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004828(&qword_100630AB8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for AuditToken(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *((_BYTE *)a1 + *(int *)(v7 + 20)) = *((_BYTE *)a2 + *(int *)(v7 + 20));
      v12 = *(int *)(v7 + 24);
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = *v14;
      v16 = v14[1];
      *v13 = *v14;
      v13[1] = v16;
      v17 = v14[2];
      v13[2] = v17;
      v18 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t, __n128))(v8 + 56);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v19 = swift_bridgeObjectRetain(v17);
      v18(a1, 0, 1, v7, v19);
    }
    v20 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for IdentityDocumentDescriptor(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_100004828(&qword_100630AB0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = a3[7];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
    v30 = *((_QWORD *)v29 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_100004828(&qword_100630AD8);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v71 = v30;
      v32 = type metadata accessor for ISO18013KnownDocTypes(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v27, v28, v32);
      v33 = v29[5];
      v34 = *(_QWORD *)&v28[v33];
      *(_QWORD *)&v27[v33] = v34;
      v35 = v29[6];
      v72 = &v27[v35];
      v36 = &v28[v35];
      v37 = type metadata accessor for Locale.Region(0);
      v38 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v37 - 8) + 16);
      v39 = swift_bridgeObjectRetain(v34);
      v38(v72, v36, v37, v39);
      v40 = v29[7];
      v41 = (uint64_t *)&v27[v40];
      v42 = (uint64_t *)&v28[v40];
      v43 = *v42;
      v44 = v42[1];
      sub_100022948(*v42, v44);
      *v41 = v43;
      v41[1] = v44;
      v45 = v29[8];
      v46 = &v27[v45];
      v47 = &v28[v45];
      v48 = *((_QWORD *)v47 + 1);
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_QWORD *)v46 + 1) = v48;
      v49 = v29[9];
      v50 = &v27[v49];
      v51 = &v28[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v53 = v29[10];
      __dst = &v27[v53];
      v54 = &v28[v53];
      v55 = type metadata accessor for URL(0);
      v69 = *(_QWORD *)(v55 - 8);
      v73 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v69 + 48);
      swift_bridgeObjectRetain(v48);
      v56 = swift_bridgeObjectRetain(v52);
      if (v73(v54, 1, v55, v56))
      {
        v57 = sub_100004828(&qword_100630A48);
        memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(__dst, v54, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v55);
      }
      v58 = v29[11];
      v59 = &v27[v58];
      v60 = &v28[v58];
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      v62 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v71 + 56);
      v63 = swift_bridgeObjectRetain(v61);
      v62(v27, 0, 1, v29, v63);
    }
    v64 = a3[8];
    v65 = *(uint64_t *)((char *)a2 + v64);
    swift_errorRetain(v65);
    *(uint64_t *)((char *)a1 + v64) = v65;
    v66 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v67 = *(_OWORD *)((char *)a2 + v66 + 24);
    *(_OWORD *)((char *)a1 + v66 + 24) = v67;
    (**(void (***)(void))(v67 - 8))();
  }
  return a1;
}

uint64_t sub_100039E24(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for AuditToken(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    v6 = (_QWORD *)(a1 + *(int *)(v4 + 24));
    swift_bridgeObjectRelease(*v6);
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[2]);
  }
  v7 = a1 + a2[6];
  v8 = type metadata accessor for IdentityDocumentDescriptor(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = a1 + a2[7];
  v11 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[5]));
    v13 = v10 + v11[6];
    v14 = type metadata accessor for Locale.Region(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    sub_100007F8C(*(_QWORD *)(v10 + v11[7]), *(_QWORD *)(v10 + v11[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[9] + 8));
    v15 = v10 + v11[10];
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[11] + 8));
  }
  swift_errorRelease(*(_QWORD *)(a1 + a2[8]));
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(a1 + a2[10]));
}

char *sub_10003A010(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v69;
  char *__dst;
  uint64_t v71;
  int *v72;

  v6 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100630AB8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for AuditToken(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
    v10 = *(int *)(v6 + 24);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *(_QWORD *)v12;
    v14 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v14;
    v15 = *((_QWORD *)v12 + 2);
    *((_QWORD *)v11 + 2) = v15;
    v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v17 = swift_bridgeObjectRetain(v15);
    v16(a1, 0, 1, v6, v17);
  }
  v18 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for IdentityDocumentDescriptor(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_100004828(&qword_100630AB0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v28 = *((_QWORD *)v27 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_100004828(&qword_100630AD8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v71 = v28;
    v72 = a3;
    v30 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v25, v26, v30);
    v31 = v27[5];
    v32 = *(_QWORD *)&v26[v31];
    *(_QWORD *)&v25[v31] = v32;
    v33 = v27[6];
    v34 = &v25[v33];
    v35 = &v26[v33];
    v36 = type metadata accessor for Locale.Region(0);
    v37 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
    v38 = swift_bridgeObjectRetain(v32);
    v37(v34, v35, v36, v38);
    v39 = v27[7];
    v40 = (uint64_t *)&v25[v39];
    v41 = (uint64_t *)&v26[v39];
    v42 = *v41;
    v43 = v41[1];
    sub_100022948(*v41, v43);
    *v40 = v42;
    v40[1] = v43;
    v44 = v27[8];
    v45 = &v25[v44];
    v46 = &v26[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v48 = v27[9];
    v49 = &v25[v48];
    v50 = &v26[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v52 = v27[10];
    __dst = &v25[v52];
    v53 = &v26[v52];
    v54 = type metadata accessor for URL(0);
    v69 = *(_QWORD *)(v54 - 8);
    v55 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v69 + 48);
    swift_bridgeObjectRetain(v47);
    v56 = swift_bridgeObjectRetain(v51);
    if (v55(v53, 1, v54, v56))
    {
      v57 = sub_100004828(&qword_100630A48);
      memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(__dst, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v54);
    }
    v58 = v27[11];
    v59 = &v25[v58];
    v60 = &v26[v58];
    v61 = *((_QWORD *)v60 + 1);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *((_QWORD *)v59 + 1) = v61;
    v62 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v71 + 56);
    v63 = swift_bridgeObjectRetain(v61);
    v62(v25, 0, 1, v27, v63);
    a3 = v72;
  }
  v64 = a3[8];
  v65 = *(_QWORD *)&a2[v64];
  swift_errorRetain(v65);
  *(_QWORD *)&a1[v64] = v65;
  v66 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v67 = *(_OWORD *)&a2[v66 + 24];
  *(_OWORD *)&a1[v66 + 24] = v67;
  (**(void (***)(void))(v67 - 8))();
  return a1;
}

_BYTE *sub_10003A3D0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  _QWORD *v34;
  uint64_t (*v35)(char *, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  int v108;
  size_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void (*v115)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  char *__dst;
  char *__dsta;
  _QWORD *__src;
  int *v130;
  int *v131;

  v6 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for AuditToken(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
      v12 = *(int *)(v6 + 24);
      v13 = (uint64_t *)&a1[v12];
      v14 = (uint64_t *)&a2[v12];
      v15 = *v14;
      *v13 = *v14;
      v16 = v14[1];
      v13[1] = v16;
      v17 = v14[2];
      v13[2] = v17;
      v18 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v19 = swift_bridgeObjectRetain(v17);
      v18(a1, 0, 1, v6, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_100035DAC((uint64_t)a1, type metadata accessor for DigitalPresentmentCallingClientConfig);
LABEL_6:
    v20 = sub_100004828(&qword_100630AB8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v67 = type metadata accessor for AuditToken(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v67 - 8) + 24))(a1, a2, v67);
  a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
  v68 = *(int *)(v6 + 24);
  v69 = &a1[v68];
  v70 = &a2[v68];
  v71 = *(_QWORD *)&a2[v68];
  v72 = *(_QWORD *)&a1[v68];
  *(_QWORD *)&a1[v68] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = *((_QWORD *)v70 + 1);
  v74 = *((_QWORD *)v69 + 1);
  *((_QWORD *)v69 + 1) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v75 = *((_QWORD *)v70 + 2);
  v76 = *((_QWORD *)v69 + 2);
  *((_QWORD *)v69 + 2) = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for IdentityDocumentDescriptor(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v29 = sub_100004828(&qword_100630AB0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  v30 = a3[7];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v34 = (_QWORD *)*((_QWORD *)v33 - 1);
  v35 = (uint64_t (*)(char *, uint64_t, int *))v34[6];
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      sub_100035DAC((uint64_t)v31, type metadata accessor for ValidatedDigitalPresentmentRequest);
      goto LABEL_19;
    }
    v131 = a3;
    v77 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v31, v32, v77);
    v78 = v33[5];
    v79 = *(_QWORD *)&v32[v78];
    v80 = *(_QWORD *)&v31[v78];
    *(_QWORD *)&v31[v78] = v79;
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRelease(v80);
    v81 = v33[6];
    v82 = &v31[v81];
    v83 = &v32[v81];
    v84 = type metadata accessor for Locale.Region(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
    v85 = v33[7];
    v86 = (uint64_t *)&v31[v85];
    v87 = (uint64_t *)&v32[v85];
    v88 = *v87;
    v89 = v87[1];
    sub_100022948(*v87, v89);
    v90 = *v86;
    v91 = v86[1];
    *v86 = v88;
    v86[1] = v89;
    sub_100007F8C(v90, v91);
    v92 = v33[8];
    v93 = &v31[v92];
    v94 = &v32[v92];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v95 = *((_QWORD *)v94 + 1);
    v96 = *((_QWORD *)v93 + 1);
    *((_QWORD *)v93 + 1) = v95;
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRelease(v96);
    v97 = v33[9];
    v98 = &v31[v97];
    v99 = &v32[v97];
    *(_QWORD *)v98 = *(_QWORD *)v99;
    v100 = *((_QWORD *)v99 + 1);
    v101 = *((_QWORD *)v98 + 1);
    *((_QWORD *)v98 + 1) = v100;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRelease(v101);
    v102 = v33[10];
    v103 = &v31[v102];
    v104 = &v32[v102];
    v105 = type metadata accessor for URL(0);
    v106 = *(_QWORD *)(v105 - 8);
    v107 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
    __dsta = v103;
    LODWORD(v103) = v107(v103, 1, v105);
    v108 = v107(v104, 1, v105);
    if ((_DWORD)v103)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dsta, v104, v105);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v105);
        goto LABEL_32;
      }
      v109 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64);
      v110 = __dsta;
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 24))(__dsta, v104, v105);
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v106 + 8))(__dsta, v105);
      v109 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64);
      v110 = __dsta;
    }
    memcpy(v110, v104, v109);
LABEL_32:
    v117 = v33[11];
    v118 = &v31[v117];
    v119 = &v32[v117];
    *(_QWORD *)v118 = *(_QWORD *)v119;
    v120 = *((_QWORD *)v119 + 1);
    v121 = *((_QWORD *)v118 + 1);
    *((_QWORD *)v118 + 1) = v120;
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRelease(v121);
    a3 = v131;
    goto LABEL_33;
  }
  if (v37)
  {
LABEL_19:
    v66 = sub_100004828(&qword_100630AD8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_33;
  }
  __src = v34;
  v130 = a3;
  v38 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v31, v32, v38);
  v39 = v33[5];
  v40 = *(_QWORD *)&v32[v39];
  *(_QWORD *)&v31[v39] = v40;
  v41 = v33[6];
  v42 = &v31[v41];
  v43 = &v32[v41];
  v44 = type metadata accessor for Locale.Region(0);
  v45 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v44 - 8) + 16);
  v46 = swift_bridgeObjectRetain(v40);
  v45(v42, v43, v44, v46);
  v47 = v33[7];
  v48 = (uint64_t *)&v31[v47];
  v49 = (uint64_t *)&v32[v47];
  v50 = *v49;
  v51 = v49[1];
  sub_100022948(*v49, v51);
  *v48 = v50;
  v48[1] = v51;
  v52 = v33[8];
  v53 = &v31[v52];
  v54 = &v32[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v53 + 1) = v55;
  v56 = v33[9];
  v57 = &v31[v56];
  v58 = &v32[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  *((_QWORD *)v57 + 1) = v59;
  v60 = v33[10];
  __dst = &v31[v60];
  v61 = &v32[v60];
  v62 = type metadata accessor for URL(0);
  v126 = *(_QWORD *)(v62 - 8);
  v63 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v126 + 48);
  swift_bridgeObjectRetain(v55);
  v64 = swift_bridgeObjectRetain(v59);
  if (v63(v61, 1, v62, v64))
  {
    v65 = sub_100004828(&qword_100630A48);
    memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v126 + 16))(__dst, v61, v62);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(__dst, 0, 1, v62);
  }
  a3 = v130;
  v111 = v33[11];
  v112 = &v31[v111];
  v113 = &v32[v111];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v114 = *((_QWORD *)v113 + 1);
  *((_QWORD *)v112 + 1) = v114;
  v115 = (void (*)(char *, _QWORD, uint64_t, int *, __n128))__src[7];
  v116 = swift_bridgeObjectRetain(v114);
  v115(v31, 0, 1, v33, v116);
LABEL_33:
  v122 = a3[8];
  v123 = *(_QWORD *)&a1[v122];
  v124 = *(_QWORD *)&a2[v122];
  swift_errorRetain(v124);
  *(_QWORD *)&a1[v122] = v124;
  swift_errorRelease(v123);
  a1[a3[9]] = a2[a3[9]];
  sub_10000660C(&a1[a3[10]], &a2[a3[10]]);
  return a1;
}

char *sub_10003AAD8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *__dst;

  v6 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100630AB8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for AuditToken(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
    v10 = *(int *)(v6 + 24);
    v11 = &a1[v10];
    v12 = &a2[v10];
    *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for IdentityDocumentDescriptor(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100004828(&qword_100630AB0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_100004828(&qword_100630AD8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
    *(_QWORD *)&v20[v22[5]] = *(_QWORD *)&v21[v22[5]];
    v26 = v22[6];
    v27 = &v20[v26];
    v28 = &v21[v26];
    v29 = type metadata accessor for Locale.Region(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    *(_OWORD *)&v20[v22[7]] = *(_OWORD *)&v21[v22[7]];
    *(_OWORD *)&v20[v22[8]] = *(_OWORD *)&v21[v22[8]];
    *(_OWORD *)&v20[v22[9]] = *(_OWORD *)&v21[v22[9]];
    v30 = v22[10];
    __dst = &v20[v30];
    v31 = &v21[v30];
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100004828(&qword_100630A48);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    *(_OWORD *)&v20[v22[11]] = *(_OWORD *)&v21[v22[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v35 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v35] = a2[v35];
  v36 = a3[10];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *((_OWORD *)v38 + 1);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *((_OWORD *)v37 + 1) = v39;
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  return a1;
}

_BYTE *sub_10003AE10(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  int v78;
  size_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v94;
  char *__dst;
  char *__dsta;

  v6 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for AuditToken(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
      v12 = *(int *)(v6 + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_100035DAC((uint64_t)a1, type metadata accessor for DigitalPresentmentCallingClientConfig);
LABEL_6:
    v15 = sub_100004828(&qword_100630AB8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v44 = type metadata accessor for AuditToken(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(a1, a2, v44);
  a1[*(int *)(v6 + 20)] = a2[*(int *)(v6 + 20)];
  v45 = *(int *)(v6 + 24);
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)&a1[v45];
  *(_QWORD *)&a1[v45] = *(_QWORD *)&a2[v45];
  swift_bridgeObjectRelease(v48);
  v49 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_bridgeObjectRelease(v49);
  v50 = *((_QWORD *)v46 + 2);
  *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
  swift_bridgeObjectRelease(v50);
LABEL_7:
  v16 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for IdentityDocumentDescriptor(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    v24 = sub_100004828(&qword_100630AB0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  v25 = a3[7];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v29 = *((_QWORD *)v28 - 1);
  v30 = *(uint64_t (**)(char *, uint64_t, int *))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_100035DAC((uint64_t)v26, type metadata accessor for ValidatedDigitalPresentmentRequest);
      goto LABEL_19;
    }
    v51 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v26, v27, v51);
    v52 = v28[5];
    v53 = *(_QWORD *)&v26[v52];
    *(_QWORD *)&v26[v52] = *(_QWORD *)&v27[v52];
    swift_bridgeObjectRelease(v53);
    v54 = v28[6];
    v55 = &v26[v54];
    v56 = &v27[v54];
    v57 = type metadata accessor for Locale.Region(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
    v58 = v28[7];
    v59 = *(_QWORD *)&v26[v58];
    v60 = *(_QWORD *)&v26[v58 + 8];
    *(_OWORD *)&v26[v58] = *(_OWORD *)&v27[v58];
    sub_100007F8C(v59, v60);
    v61 = v28[8];
    v62 = &v26[v61];
    v63 = &v27[v61];
    v65 = *(_QWORD *)v63;
    v64 = *((_QWORD *)v63 + 1);
    v66 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v62 = v65;
    *((_QWORD *)v62 + 1) = v64;
    swift_bridgeObjectRelease(v66);
    v67 = v28[9];
    v68 = &v26[v67];
    v69 = &v27[v67];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v72 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v68 = v71;
    *((_QWORD *)v68 + 1) = v70;
    swift_bridgeObjectRelease(v72);
    v73 = v28[10];
    v74 = &v26[v73];
    v75 = &v27[v73];
    v76 = type metadata accessor for URL(0);
    v94 = *(_QWORD *)(v76 - 8);
    v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
    __dsta = v74;
    LODWORD(v74) = v77(v74, 1, v76);
    v78 = v77(v75, 1, v76);
    if ((_DWORD)v74)
    {
      if (!v78)
      {
        (*(void (**)(char *, char *, uint64_t))(v94 + 32))(__dsta, v75, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(__dsta, 0, 1, v76);
        goto LABEL_32;
      }
      v79 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64);
      v80 = __dsta;
    }
    else
    {
      if (!v78)
      {
        (*(void (**)(char *, char *, uint64_t))(v94 + 40))(__dsta, v75, v76);
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v94 + 8))(__dsta, v76);
      v79 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64);
      v80 = __dsta;
    }
    memcpy(v80, v75, v79);
LABEL_32:
    v81 = v28[11];
    v82 = &v26[v81];
    v83 = &v27[v81];
    v85 = *(_QWORD *)v83;
    v84 = *((_QWORD *)v83 + 1);
    v86 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v82 = v85;
    *((_QWORD *)v82 + 1) = v84;
    swift_bridgeObjectRelease(v86);
    goto LABEL_33;
  }
  if (v32)
  {
LABEL_19:
    v43 = sub_100004828(&qword_100630AD8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_33;
  }
  v33 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v26, v27, v33);
  *(_QWORD *)&v26[v28[5]] = *(_QWORD *)&v27[v28[5]];
  v34 = v28[6];
  v35 = &v26[v34];
  v36 = &v27[v34];
  v37 = type metadata accessor for Locale.Region(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  *(_OWORD *)&v26[v28[7]] = *(_OWORD *)&v27[v28[7]];
  *(_OWORD *)&v26[v28[8]] = *(_OWORD *)&v27[v28[8]];
  *(_OWORD *)&v26[v28[9]] = *(_OWORD *)&v27[v28[9]];
  v38 = v28[10];
  __dst = &v26[v38];
  v39 = &v27[v38];
  v40 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_100004828(&qword_100630A48);
    memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(__dst, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
  }
  *(_OWORD *)&v26[v28[11]] = *(_OWORD *)&v27[v28[11]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
LABEL_33:
  v87 = a3[8];
  v88 = *(_QWORD *)&a1[v87];
  *(_QWORD *)&a1[v87] = *(_QWORD *)&a2[v87];
  swift_errorRelease(v88);
  v89 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v90 = &a1[v89];
  v91 = &a2[v89];
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&a1[v89]);
  v92 = *((_OWORD *)v91 + 1);
  *(_OWORD *)v90 = *(_OWORD *)v91;
  *((_OWORD *)v90 + 1) = v92;
  *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
  return a1;
}

uint64_t sub_10003B42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B438);
}

uint64_t sub_10003B438(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_100004828(&qword_100630AB8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100004828(&qword_100630AB0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100004828(&qword_100630AD8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[10] + 24);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_10003B514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B520);
}

uint64_t sub_10003B520(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_100004828(&qword_100630AB8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100004828(&qword_100630AB0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100004828(&qword_100630AD8);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[10] + 24) = (a2 - 1);
  return result;
}

void sub_10003B5F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  sub_10003B6E4(319, (unint64_t *)&unk_100630B70, type metadata accessor for DigitalPresentmentCallingClientConfig);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_1005205E8;
    sub_10003B6E4(319, &qword_100630B68, (uint64_t (*)(uint64_t))&type metadata accessor for IdentityDocumentDescriptor);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10003B6E4(319, (unint64_t *)&unk_100630C20, type metadata accessor for ValidatedDigitalPresentmentRequest);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = "\b";
        v8[5] = &unk_1005205E8;
        v8[6] = &unk_100520600;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_10003B6E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void destroy for IdentityWatchProvisioningProvider(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(a1 + 96), v2);
  v3 = *(_QWORD *)(a1 + 120);
  if (v3 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(a1 + 112), v3);

}

uint64_t initializeWithCopy for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = (uint64_t *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_100022948(*v9, v10);
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v10;
  }
  v12 = (uint64_t *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_100022948(*v12, *(_QWORD *)(a2 + 120));
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v13;
  }
  v15 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v15;
  v16 = v15;
  return a1;
}

uint64_t assignWithCopy for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v14;
  v15 = (uint64_t *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) >> 60 == 15)
  {
    if (v16 >> 60 != 15)
    {
      v17 = *v15;
      sub_100022948(*v15, *(_QWORD *)(a2 + 104));
      *(_QWORD *)(a1 + 96) = v17;
      *(_QWORD *)(a1 + 104) = v16;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
    sub_10003BAAC(a1 + 96);
LABEL_6:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v15;
    goto LABEL_8;
  }
  v18 = *v15;
  sub_100022948(*v15, *(_QWORD *)(a2 + 104));
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v16;
  sub_100007F8C(v19, v20);
LABEL_8:
  v21 = (uint64_t *)(a2 + 112);
  v22 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      v24 = *v21;
      sub_100022948(*v21, *(_QWORD *)(a2 + 120));
      v25 = *(_QWORD *)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 112) = v24;
      *(_QWORD *)(a1 + 120) = v22;
      sub_100007F8C(v25, v26);
      goto LABEL_15;
    }
    sub_10003BAAC(a1 + 112);
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v21;
    goto LABEL_15;
  }
  v23 = *v21;
  sub_100022948(*v21, *(_QWORD *)(a2 + 120));
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v22;
LABEL_15:
  v27 = *(void **)(a2 + 128);
  v28 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v27;
  v29 = v27;

  return a1;
}

uint64_t sub_10003BAAC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for IdentityWatchProvisioningProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v14 = (_OWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  if (v15 >> 60 == 15)
    goto LABEL_4;
  v16 = *(_QWORD *)(a2 + 104);
  if (v16 >> 60 == 15)
  {
    sub_10003BAAC(a1 + 96);
LABEL_4:
    *(_OWORD *)(a1 + 96) = *v14;
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v14;
  *(_QWORD *)(a1 + 104) = v16;
  sub_100007F8C(v17, v15);
LABEL_6:
  v18 = (_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 120);
  if (v19 >> 60 != 15)
  {
    v20 = *(_QWORD *)(a2 + 120);
    if (v20 >> 60 != 15)
    {
      v21 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = *v18;
      *(_QWORD *)(a1 + 120) = v20;
      sub_100007F8C(v21, v19);
      goto LABEL_11;
    }
    sub_10003BAAC(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v18;
LABEL_11:
  v22 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityWatchProvisioningProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityWatchProvisioningProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityWatchProvisioningProvider()
{
  return &type metadata for IdentityWatchProvisioningProvider;
}

uint64_t sub_10003BD00()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10003BD2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_10003BD58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_10003BD84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_10003BDB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t sub_10003BDDC()
{
  return 2;
}

uint64_t sub_10003BDE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  sub_100028034(v1, *(_QWORD *)(v0 + 120));
  return v1;
}

uint64_t sub_10003BE14()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100111D08((uint64_t)&off_1005FFF88);
  qword_100630C68 = result;
  unk_100630C70 = v1;
  return result;
}

uint64_t sub_10003BE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Swift::String v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v9._object = (void *)0x8000000100541B80;
  v9._countAndFlagsBits = 0xD000000000000033;
  v10 = NSUserDefaults.internalBool(forKey:)(v9);

  if (v10)
  {
    defaultLogger()(v11);
    v12 = swift_bridgeObjectRetain_n(a1, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v32 = v2;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v34[0] = v31;
      *(_DWORD *)v15 = 136315138;
      type metadata accessor for SecCertificate(0);
      v17 = Array<A>.base64EncodedStrings()(v16);
      if (v17)
        v18 = (_QWORD *)v17;
      else
        v18 = _swiftEmptyArrayStorage;
      v29 = v15 + 4;
      v19 = Array.description.getter(v18, &type metadata for String);
      v30 = v4;
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease(v18);
      v33 = sub_1000E3AC8(v20, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v29);
      swift_bridgeObjectRelease_n(a1, 2);
      v23 = v22;
      v2 = v32;
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ISO18013IssuerAuthenticator trusting IACA roots: %s", v15, 0xCu);
      v24 = v31;
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  v25 = v2 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier, v34, 33, 0);
  v26 = *(_QWORD *)(v25 + 24);
  v27 = *(_QWORD *)(v25 + 32);
  sub_10001E624(v25, v26);
  dispatch thunk of OIDVerifying.setTrustedRoots(_:)(a1, v26, v27);
  return swift_endAccess(v34);
}

uint64_t sub_10003C0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_100004828(&qword_100630DD0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v4[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v4[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[15] = v10;
  v4[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013MobileSecurityObject(0);
  v4[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[18] = v12;
  v4[19] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v4[20] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[21] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v15);
  v4[23] = swift_task_alloc(v15);
  v4[24] = swift_task_alloc(v15);
  v16 = type metadata accessor for COSE_Sign1(0);
  v4[25] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[26] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v18);
  v4[28] = swift_task_alloc(v18);
  v19 = type metadata accessor for ISO18013Response.Document(0);
  v4[29] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[30] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[31] = swift_task_alloc(v21);
  v4[32] = swift_task_alloc(v21);
  v22 = type metadata accessor for Logger(0);
  v4[33] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[34] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[35] = swift_task_alloc(v24);
  v4[36] = swift_task_alloc(v24);
  v4[37] = swift_task_alloc(v24);
  v25 = sub_100004828(&qword_100630DE0);
  v4[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ISO18013KnownDocTypes(0);
  v4[39] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v4[40] = v27;
  v4[41] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003C314, v3, 0);
}

uint64_t sub_10003C314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  id v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140[3];

  v2 = *(_QWORD *)(v1 + 312);
  v3 = *(_QWORD *)(v1 + 320);
  v4 = *(_QWORD *)(v1 + 304);
  v5 = ISO18013Response.Document.docType.getter(a1);
  ISO18013KnownDocTypes.init(rawValue:)(v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    v7 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 88);
    sub_100008030(*(_QWORD *)(v1 + 304), &qword_100630DE0);
    _StringGuts.grow(_:)(28);
    v9 = swift_bridgeObjectRelease(0xE000000000000000);
    v140[0] = 0xD00000000000001ALL;
    v140[1] = 0x80000001005412E0;
    v10._countAndFlagsBits = ISO18013Response.Document.docType.getter(v9);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v8);
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x80000001005412E0, 0, v6, 0, v12, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 87);
    swift_willThrow(v15);
LABEL_3:
    v17 = *(_QWORD *)(v1 + 296);
    v16 = *(_QWORD *)(v1 + 304);
    v19 = *(_QWORD *)(v1 + 280);
    v18 = *(_QWORD *)(v1 + 288);
    v21 = *(_QWORD *)(v1 + 248);
    v20 = *(_QWORD *)(v1 + 256);
    v22 = *(_QWORD *)(v1 + 216);
    v23 = *(_QWORD *)(v1 + 224);
    v24 = *(_QWORD *)(v1 + 192);
    v117 = *(_QWORD *)(v1 + 184);
    v120 = *(_QWORD *)(v1 + 176);
    v124 = *(_QWORD *)(v1 + 152);
    v129 = *(_QWORD *)(v1 + 128);
    v132 = *(_QWORD *)(v1 + 104);
    v136 = *(_QWORD *)(v1 + 80);
    swift_task_dealloc(*(_QWORD *)(v1 + 328));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v124);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v136);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v26 = *(_QWORD *)(v1 + 256);
  v27 = *(_QWORD *)(v1 + 232);
  v28 = *(_QWORD *)(v1 + 240);
  v29 = *(_QWORD *)(v1 + 40);
  v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 320) + 32))(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
  defaultLogger()(v30);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  *(_QWORD *)(v1 + 336) = v31;
  v32 = v31(v26, v29, v27);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v36 = *(_QWORD *)(v1 + 296);
  v37 = *(_QWORD *)(v1 + 264);
  v38 = *(_QWORD *)(v1 + 272);
  v39 = *(_QWORD *)(v1 + 256);
  v40 = *(_QWORD *)(v1 + 240);
  if (v35)
  {
    v125 = *(_QWORD *)(v1 + 232);
    v137 = *(_QWORD *)(v1 + 296);
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v133 = v38;
    v42 = swift_slowAlloc(32, -1);
    v140[0] = v42;
    *(_DWORD *)v41 = 136315138;
    v43 = ISO18013Response.Document.docType.getter(v42);
    v45 = v44;
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v43, v44, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v41 + 4);
    swift_bridgeObjectRelease(v45);
    v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v39, v125);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "ISO18013IssuerAuthenticator begins validating document with type %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v47 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8);
    v48 = v47(v137, v37);
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 232));

    v47 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
    v48 = v47(v36, v37);
  }
  *(_QWORD *)(v1 + 344) = v47;
  *(_QWORD *)(v1 + 352) = v46;
  v49 = *(_QWORD *)(v1 + 192);
  v50 = *(_QWORD *)(v1 + 160);
  v51 = *(_QWORD *)(v1 + 168);
  v52 = ISO18013Response.Document.issuerSigned.getter(v48);
  ISO18013Response.IssuerSigned.issuerAuth.getter(v52);
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8);
  *(_QWORD *)(v1 + 360) = v53;
  v54 = v53(v49, v50);
  v55 = COSE_Sign1.x509Chain.getter(v54);
  *(_QWORD *)(v1 + 368) = v55;
  if (v55)
  {
    v56 = v55;
    v57 = (_QWORD *)swift_task_alloc(dword_100630CDC);
    *(_QWORD *)(v1 + 376) = v57;
    *v57 = v1;
    v57[1] = sub_10003CCEC;
    return sub_10003DF3C(v56, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 328));
  }
  else
  {
    v58 = *(_QWORD *)(v1 + 224);
    v60 = *(_QWORD *)(v1 + 200);
    v59 = *(_QWORD *)(v1 + 208);
    v61 = *(_QWORD *)(v1 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 96) + 104))(v61, enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), *(_QWORD *)(v1 + 88));
    v62 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v63 = type metadata accessor for DIPError(0);
    v130 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v134 = v63;
    v64 = swift_allocError(v63, v130, 0, 0);
    v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100541680, 0, v61, 0, v62, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 97);
    v138 = v64;
    swift_willThrow(v65);
    v66 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v66(v58, v60);
    v67 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v68._countAndFlagsBits = 0xD000000000000036;
    v68._object = (void *)0x80000001005416B0;
    LOBYTE(v64) = NSUserDefaults.internalBool(forKey:)(v68);

    if ((v64 & 1) == 0)
    {
      v89 = *(_QWORD *)(v1 + 328);
      v122 = *(_QWORD *)(v1 + 320);
      v127 = *(_QWORD *)(v1 + 312);
      v90 = *(_QWORD *)(v1 + 104);
      v116 = *(_QWORD *)(v1 + 96);
      v118 = *(_QWORD *)(v1 + 88);
      v91 = sub_100004828((uint64_t *)&unk_1006325A0);
      v92 = sub_100004828((uint64_t *)&unk_100633440);
      v93 = *(_QWORD *)(v92 - 8);
      v94 = *(_QWORD *)(v93 + 72);
      v95 = *(unsigned __int8 *)(v93 + 80);
      v96 = (v95 + 32) & ~v95;
      v97 = swift_allocObject(v91, v96 + v94, v95 | 7);
      *(_OWORD *)(v97 + 16) = xmmword_10051FFB0;
      v98 = v97 + v96;
      v99 = (_QWORD *)(v98 + *(int *)(v92 + 48));
      v100 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
      v101 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v98, v100, v101);
      v99[3] = sub_100004828((uint64_t *)&unk_100633630);
      *v99 = _swiftEmptyArrayStorage;
      swift_errorRetain(v138);
      v102 = sub_10011D314(v97);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v116 + 104))(v90, enum case for DIPError.Code.internalError(_:), v118);
      swift_allocError(v134, v130, 0, 0);
      v103 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004FLL, 0x80000001005416F0, v138, v90, 0, v102, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 131);
      swift_willThrow(v103);
      swift_errorRelease(v138);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v89, v127);
      goto LABEL_3;
    }
    v70 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 344);
    v71 = *(_QWORD *)(v1 + 280);
    v72 = *(_QWORD *)(v1 + 264);
    v73 = *(_QWORD *)(v1 + 216);
    v121 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 360);
    v126 = *(_QWORD *)(v1 + 200);
    v74 = *(_QWORD *)(v1 + 176);
    v75 = *(_QWORD *)(v1 + 160);
    v76 = *(_QWORD *)(v1 + 64);
    defaultLogger()(v69);
    DIPLogError(_:message:log:)(v138, 0xD000000000000064, 0x8000000100541740, v71);
    v77 = v70(v71, v72);
    v78 = ISO18013Response.Document.issuerSigned.getter(v77);
    ISO18013Response.IssuerSigned.issuerAuth.getter(v78);
    v79 = v121(v74, v75);
    v80 = COSE_Sign1.payload.getter(v79);
    v82 = v81;
    v66(v73, v126);
    if (v82 >> 60 == 15)
      v83 = 0;
    else
      v83 = v80;
    if (v82 >> 60 == 15)
      v84 = 0xC000000000000000;
    else
      v84 = v82;
    v85 = sub_10004157C();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v76, v83, v84, v76, v85);
    v86 = *(_QWORD *)(v1 + 320);
    v87 = *(_QWORD *)(v1 + 328);
    v88 = *(_QWORD *)(v1 + 312);
    v105 = *(_QWORD *)(v1 + 72);
    v104 = *(_QWORD *)(v1 + 80);
    v106 = *(_QWORD *)(v1 + 64);
    CBOREncodedCBOR.value.getter(v106);
    sub_100007F8C(v83, v84);
    swift_errorRelease(v138);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
    v108 = *(_QWORD *)(v1 + 296);
    v107 = *(_QWORD *)(v1 + 304);
    v110 = *(_QWORD *)(v1 + 280);
    v109 = *(_QWORD *)(v1 + 288);
    v112 = *(_QWORD *)(v1 + 248);
    v111 = *(_QWORD *)(v1 + 256);
    v113 = *(_QWORD *)(v1 + 216);
    v114 = *(_QWORD *)(v1 + 224);
    v115 = *(_QWORD *)(v1 + 192);
    v119 = *(_QWORD *)(v1 + 184);
    v123 = *(_QWORD *)(v1 + 176);
    v128 = *(_QWORD *)(v1 + 152);
    v131 = *(_QWORD *)(v1 + 128);
    v135 = *(_QWORD *)(v1 + 104);
    v139 = *(_QWORD *)(v1 + 80);
    swift_task_dealloc(*(_QWORD *)(v1 + 328));
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v119);
    swift_task_dealloc(v123);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v135);
    swift_task_dealloc(v139);
    return (*(uint64_t (**)(_QWORD *))(v1 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10003CCEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 376);
  v3[48] = a1;
  v3[49] = v1;
  swift_task_dealloc(v4);
  v5 = v3[46];
  v6 = v3[7];
  swift_bridgeObjectRelease(v5);
  if (v1)
    v7 = sub_10003D9A8;
  else
    v7 = sub_10003CD64;
  return swift_task_switch(v7, v6, 0);
}

void sub_10003CD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  Swift::Bool v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  BOOL v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v1 = *(_QWORD *)(v0 + 384);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v134 = *(_QWORD *)(v0 + 384);
    else
      v134 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 384));
    v2 = _CocoaArrayWrapper.endIndex.getter(v134);
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 384));
  }
  if (!v2)
  {
    v11 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 384));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), v16);
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v9 = swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x80000001005417D0, 0, v14, 0, v17, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 103);
    swift_willThrow(v20);
    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
    goto LABEL_11;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 384));
    v3 = *(_QWORD *)(v0 + 384);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v0 + 384);
    v4 = *(id *)(v3 + 32);
LABEL_7:
    v5 = *(_QWORD *)(v0 + 392);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease(v3);
    v8 = sub_10003FEF0(v6, v7);
    v9 = v5;
    if (!v5)
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      v22 = *(_QWORD *)(v0 + 184);
      v24 = *(_QWORD *)(v0 + 152);
      v23 = *(_QWORD *)(v0 + 160);
      v25 = ISO18013Response.Document.issuerSigned.getter(v8);
      v26 = ISO18013Response.IssuerSigned.namespaces.getter(v25);
      v21(v22, v23);
      sub_100041D28(v26, v24);
      v91 = swift_bridgeObjectRelease(v26);
      v92 = ISO18013Response.Document.docType.getter(v91);
      v94 = v93;
      v96 = ISO18013MobileSecurityObject.docType.getter();
      v97 = v95;
      if (v92 == v96 && v94 == v95)
      {
        v98 = swift_bridgeObjectRelease_n(v94, 2);
      }
      else
      {
        v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v96, v95, 0);
        swift_bridgeObjectRelease(v97);
        v98 = swift_bridgeObjectRelease(v94);
        if ((v99 & 1) == 0)
        {
          v163 = *(_QWORD *)(v0 + 224);
          v104 = *(_QWORD *)(v0 + 208);
          v158 = *(_QWORD *)(v0 + 200);
          v105 = *(_QWORD *)(v0 + 144);
          v106 = *(_QWORD *)(v0 + 152);
          v107 = *(_QWORD *)(v0 + 136);
          v108 = *(_QWORD *)(v0 + 104);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v108, enum case for DIPError.Code.documentReaderMismatchedDocType(_:), *(_QWORD *)(v0 + 88));
          v109 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v110 = type metadata accessor for DIPError(0);
          v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v112 = swift_allocError(v110, v111, 0, 0);
          v113 = v109;
          v9 = v112;
          v114 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001005417B0, 0, v108, 0, v113, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 114);
          swift_willThrow(v114);

          (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v106, v107);
          v10 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
          v10(v163, v158);
          goto LABEL_11;
        }
      }
      v100 = *(_QWORD *)(v0 + 128);
      ISO18013MobileSecurityObject.validityInfo.getter(v98);
      sub_100040708(v100, (char *)v4);
      v101 = *(_QWORD *)(v0 + 152);
      v102 = *(_QWORD *)(v0 + 40);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      v103 = sub_100043414(v102, v101, (uint64_t)v4);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
      v116 = *(_QWORD *)(v0 + 248);
      v117 = *(_QWORD *)(v0 + 232);
      v118 = *(_QWORD *)(v0 + 40);
      defaultLogger()(v103);
      v119 = v115(v116, v118, v117);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.debug.getter(v120);
      v122 = os_log_type_enabled(v120, v121);
      v123 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
      v125 = *(_QWORD *)(v0 + 320);
      v124 = *(_QWORD *)(v0 + 328);
      v126 = *(_QWORD *)(v0 + 312);
      v156 = *(_QWORD *)(v0 + 264);
      v159 = *(_QWORD *)(v0 + 288);
      v127 = *(_QWORD *)(v0 + 248);
      v128 = *(_QWORD *)(v0 + 224);
      v144 = *(_QWORD *)(v0 + 232);
      v148 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
      v152 = *(_QWORD *)(v0 + 208);
      v164 = *(_QWORD *)(v0 + 200);
      if (v122)
      {
        v140 = *(_QWORD *)(v0 + 328);
        v136 = *(_QWORD *)(v0 + 224);
        v129 = (uint8_t *)swift_slowAlloc(12, -1);
        v135 = v125;
        v130 = swift_slowAlloc(32, -1);
        v165 = v130;
        *(_DWORD *)v129 = 136315138;
        v131 = ISO18013Response.Document.docType.getter(v130);
        v133 = v132;
        *(_QWORD *)(v0 + 16) = sub_1000E3AC8(v131, v132, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v129 + 4);
        swift_bridgeObjectRelease(v133);
        v148(v127, v144);
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "ISO18013IssuerAuthenticator successfully validated document with type %s", v129, 0xCu);
        swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v130, -1, -1);
        swift_slowDealloc(v129, -1, -1);

        v123(v159, v156);
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v136, v164);
        (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v140, v126);
      }
      else
      {

        v148(v127, v144);
        v123(v159, v156);
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v128, v164);
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v124, v126);
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
      v157 = *(_QWORD *)(v0 + 384);
LABEL_20:
      v83 = *(_QWORD *)(v0 + 296);
      v82 = *(_QWORD *)(v0 + 304);
      v85 = *(_QWORD *)(v0 + 280);
      v84 = *(_QWORD *)(v0 + 288);
      v87 = *(_QWORD *)(v0 + 248);
      v86 = *(_QWORD *)(v0 + 256);
      v88 = *(_QWORD *)(v0 + 216);
      v89 = *(_QWORD *)(v0 + 224);
      v90 = *(_QWORD *)(v0 + 192);
      v139 = *(_QWORD *)(v0 + 184);
      v143 = *(_QWORD *)(v0 + 176);
      v147 = *(_QWORD *)(v0 + 152);
      v151 = *(_QWORD *)(v0 + 128);
      v155 = *(_QWORD *)(v0 + 104);
      v162 = *(_QWORD *)(v0 + 80);
      swift_task_dealloc(*(_QWORD *)(v0 + 328));
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v139);
      swift_task_dealloc(v143);
      swift_task_dealloc(v147);
      swift_task_dealloc(v151);
      swift_task_dealloc(v155);
      swift_task_dealloc(v162);
      (*(void (**)(uint64_t))(v0 + 8))(v157);
      return;
    }
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
    v10(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));

LABEL_11:
    v160 = v9;
    v27 = *(_QWORD *)(v0 + 384);
    v28 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v29._countAndFlagsBits = 0xD000000000000036;
    v29._object = (void *)0x80000001005416B0;
    v30 = NSUserDefaults.internalBool(forKey:)(v29);

    if (!v30)
    {
      v51 = *(_QWORD *)(v0 + 320);
      v149 = *(_QWORD *)(v0 + 312);
      v153 = *(_QWORD *)(v0 + 328);
      v53 = *(_QWORD *)(v0 + 96);
      v52 = *(_QWORD *)(v0 + 104);
      v54 = *(_QWORD *)(v0 + 88);
      v55 = sub_100004828((uint64_t *)&unk_1006325A0);
      v56 = sub_100004828((uint64_t *)&unk_100633440);
      v57 = *(_QWORD *)(v56 - 8);
      v58 = *(_QWORD *)(v57 + 72);
      v59 = *(unsigned __int8 *)(v57 + 80);
      v60 = (v59 + 32) & ~v59;
      v61 = swift_allocObject(v55, v60 + v58, v59 | 7);
      *(_OWORD *)(v61 + 16) = xmmword_10051FFB0;
      v62 = v61 + v60;
      v63 = (_QWORD *)(v62 + *(int *)(v56 + 48));
      v64 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
      v65 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v62, v64, v65);
      v63[3] = sub_100004828((uint64_t *)&unk_100633630);
      *v63 = v27;
      swift_errorRetain(v160);
      v66 = sub_10011D314(v61);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v52, enum case for DIPError.Code.internalError(_:), v54);
      v67 = type metadata accessor for DIPError(0);
      v68 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v67, v68, 0, 0);
      v69 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004FLL, 0x80000001005416F0, v160, v52, 0, v66, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 131);
      swift_willThrow(v69);
      swift_errorRelease(v160);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v153, v149);
      v71 = *(_QWORD *)(v0 + 296);
      v70 = *(_QWORD *)(v0 + 304);
      v73 = *(_QWORD *)(v0 + 280);
      v72 = *(_QWORD *)(v0 + 288);
      v75 = *(_QWORD *)(v0 + 248);
      v74 = *(_QWORD *)(v0 + 256);
      v76 = *(_QWORD *)(v0 + 216);
      v77 = *(_QWORD *)(v0 + 224);
      v78 = *(_QWORD *)(v0 + 192);
      v138 = *(_QWORD *)(v0 + 184);
      v142 = *(_QWORD *)(v0 + 176);
      v146 = *(_QWORD *)(v0 + 152);
      v150 = *(_QWORD *)(v0 + 128);
      v154 = *(_QWORD *)(v0 + 104);
      v161 = *(_QWORD *)(v0 + 80);
      swift_task_dealloc(*(_QWORD *)(v0 + 328));
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v77);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v138);
      swift_task_dealloc(v142);
      swift_task_dealloc(v146);
      swift_task_dealloc(v150);
      swift_task_dealloc(v154);
      swift_task_dealloc(v161);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v157 = v27;
    v137 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 360);
    v32 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 344);
    v33 = *(_QWORD *)(v0 + 280);
    v34 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 216);
    v141 = *(_QWORD *)(v0 + 200);
    v145 = v10;
    v36 = *(_QWORD *)(v0 + 176);
    v37 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 64);
    defaultLogger()(v31);
    DIPLogError(_:message:log:)(v160, 0xD000000000000064, 0x8000000100541740, v33);
    v39 = v32(v33, v34);
    v40 = ISO18013Response.Document.issuerSigned.getter(v39);
    ISO18013Response.IssuerSigned.issuerAuth.getter(v40);
    v41 = v137(v36, v37);
    v42 = COSE_Sign1.payload.getter(v41);
    v44 = v43;
    v145(v35, v141);
    if (v44 >> 60 == 15)
      v45 = 0;
    else
      v45 = v42;
    if (v44 >> 60 == 15)
      v46 = 0xC000000000000000;
    else
      v46 = v44;
    v47 = sub_10004157C();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v38, v45, v46, v38, v47);
    v48 = *(_QWORD *)(v0 + 320);
    v49 = *(_QWORD *)(v0 + 328);
    v50 = *(_QWORD *)(v0 + 312);
    v80 = *(_QWORD *)(v0 + 72);
    v79 = *(_QWORD *)(v0 + 80);
    v81 = *(_QWORD *)(v0 + 64);
    CBOREncodedCBOR.value.getter(v81);
    sub_100007F8C(v45, v46);
    swift_errorRelease(v160);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_10003D9A8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
  v1(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
  v80 = *(_QWORD *)(v0 + 392);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3._countAndFlagsBits = 0xD000000000000036;
  v3._object = (void *)0x80000001005416B0;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (v4)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 344);
    v7 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 216);
    v70 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 360);
    v73 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 64);
    defaultLogger()(v5);
    DIPLogError(_:message:log:)(v80, 0xD000000000000064, 0x8000000100541740, v7);
    v13 = v6(v7, v8);
    v14 = ISO18013Response.Document.issuerSigned.getter(v13);
    ISO18013Response.IssuerSigned.issuerAuth.getter(v14);
    v15 = v70(v10, v11);
    v16 = COSE_Sign1.payload.getter(v15);
    v18 = v17;
    v1(v9, v73);
    if (v18 >> 60 == 15)
      v19 = 0;
    else
      v19 = v16;
    if (v18 >> 60 == 15)
      v20 = 0xC000000000000000;
    else
      v20 = v18;
    v21 = sub_10004157C();
    dispatch thunk of CBORDecoder.decode<A>(_:from:)(v12, v19, v20, v12, v21);
    v22 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 312);
    v55 = *(_QWORD *)(v0 + 72);
    v54 = *(_QWORD *)(v0 + 80);
    v56 = *(_QWORD *)(v0 + 64);
    CBOREncodedCBOR.value.getter(v56);
    sub_100007F8C(v19, v20);
    swift_errorRelease(v80);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    v58 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 304);
    v60 = *(_QWORD *)(v0 + 280);
    v59 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD *)(v0 + 248);
    v61 = *(_QWORD *)(v0 + 256);
    v63 = *(_QWORD *)(v0 + 216);
    v64 = *(_QWORD *)(v0 + 224);
    v65 = *(_QWORD *)(v0 + 192);
    v69 = *(_QWORD *)(v0 + 184);
    v72 = *(_QWORD *)(v0 + 176);
    v75 = *(_QWORD *)(v0 + 152);
    v78 = *(_QWORD *)(v0 + 128);
    v79 = *(_QWORD *)(v0 + 104);
    v82 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v69);
    swift_task_dealloc(v72);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 320);
    v76 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 312);
    v28 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 88);
    v30 = sub_100004828((uint64_t *)&unk_1006325A0);
    v31 = sub_100004828((uint64_t *)&unk_100633440);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(_QWORD *)(v32 + 72);
    v34 = *(unsigned __int8 *)(v32 + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = swift_allocObject(v30, v35 + v33, v34 | 7);
    *(_OWORD *)(v36 + 16) = xmmword_10051FFB0;
    v37 = v36 + v35;
    v38 = (_QWORD *)(v37 + *(int *)(v31 + 48));
    v39 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
    v40 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v37, v39, v40);
    v38[3] = sub_100004828((uint64_t *)&unk_100633630);
    *v38 = _swiftEmptyArrayStorage;
    swift_errorRetain(v80);
    v41 = sub_10011D314(v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for DIPError.Code.internalError(_:), v29);
    v42 = type metadata accessor for DIPError(0);
    v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v42, v43, 0, 0);
    v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004FLL, 0x80000001005416F0, v80, v27, 0, v41, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002DLL, 0x8000000100541650, 131);
    swift_willThrow(v44);
    swift_errorRelease(v80);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v76, v26);
    v46 = *(_QWORD *)(v0 + 296);
    v45 = *(_QWORD *)(v0 + 304);
    v48 = *(_QWORD *)(v0 + 280);
    v47 = *(_QWORD *)(v0 + 288);
    v50 = *(_QWORD *)(v0 + 248);
    v49 = *(_QWORD *)(v0 + 256);
    v51 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 192);
    v67 = *(_QWORD *)(v0 + 184);
    v68 = *(_QWORD *)(v0 + 176);
    v71 = *(_QWORD *)(v0 + 152);
    v74 = *(_QWORD *)(v0 + 128);
    v77 = *(_QWORD *)(v0 + 104);
    v81 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v74);
    swift_task_dealloc(v77);
    swift_task_dealloc(v81);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003DF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v5);
  v4[23] = swift_task_alloc(v5);
  v6 = type metadata accessor for DIPError.Code(0);
  v4[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[25] = v7;
  v4[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013KnownDocTypes(0);
  v4[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[28] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v10);
  v4[30] = swift_task_alloc(v10);
  v4[31] = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPCertUsage(0);
  v4[32] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[33] = v12;
  v4[34] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v4[35] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[36] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v15);
  v4[38] = swift_task_alloc(v15);
  v4[39] = swift_task_alloc(v15);
  return swift_task_switch(sub_10003E084, v3, 0);
}

uint64_t sub_10003E084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  void *object;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  *(_QWORD *)(v0 + 128) = _swiftEmptyArrayStorage;
  v1 = decodeCertificateChain(fromDER:)(*(_QWORD *)(v0 + 144));
  v22 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 280);
  v24 = *(_QWORD *)(v0 + 288);
  v25 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 224);
  v28 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 128) = v1;
  defaultLogger()(v1);
  v29 = swift_task_alloc(32);
  *(_QWORD *)(v29 + 16) = v0 + 128;
  Logger.cryptoParam(_:)(sub_1000415C8, v29);
  swift_task_dealloc(v29);
  v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  *(_QWORD *)(v0 + 320) = v30;
  v30(v22, v23);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  *(_QWORD *)(v0 + 328) = v31;
  v31(v25, v28, v26);
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 88);
  *(_QWORD *)(v0 + 336) = v32;
  v33 = v32(v25, v26);
  v34 = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  *(_DWORD *)(v0 + 376) = enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:);
  if (v33 == v34)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 104))(*(_QWORD *)(v0 + 272), enum case for DIPCertUsage.iso18013IssuerAuth(_:), *(_QWORD *)(v0 + 256));
LABEL_5:
    v35 = *(_QWORD *)(v0 + 168) + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier;
    swift_beginAccess(v35, v0 + 56, 0, 0);
    sub_10002581C(v35, v0 + 16);
    v36 = *(_QWORD *)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 48);
    sub_10000806C((_QWORD *)(v0 + 16), v36);
    v38 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 344) = v38;
    v39 = async function pointer to dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)[1];
    swift_bridgeObjectRetain(v38);
    v40 = (_QWORD *)swift_task_alloc(v39);
    *(_QWORD *)(v0 + 352) = v40;
    *v40 = v0;
    v40[1] = sub_10003E5EC;
    return dispatch thunk of OIDVerifying.verifyChain(_:forUsage:)(v38, *(_QWORD *)(v0 + 272), v36, v37);
  }
  if (v33 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    static DIPCertUsage.japanNationalIDCardIssuerAuth.getter();
    goto LABEL_5;
  }
  v63 = *(_QWORD *)(v0 + 248);
  v42 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 224);
  v44 = *(_QWORD *)(v0 + 200);
  v45 = *(_QWORD *)(v0 + 208);
  v46 = *(_QWORD *)(v0 + 192);
  _StringGuts.grow(_:)(28);
  v47 = swift_bridgeObjectRelease(0xE000000000000000);
  v48._countAndFlagsBits = ISO18013KnownDocTypes.rawValue.getter(v47);
  object = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v45, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v46);
  v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v51 = type metadata accessor for DIPError(0);
  v52 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v53 = swift_allocError(v51, v52, 0, 0);
  v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x80000001005412E0, 0, v45, 0, v50, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 162);
  swift_willThrow(v54);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v63, v42);
  v2 = *(_QWORD *)(v0 + 312);
  v55 = *(_QWORD *)(v0 + 304);
  v56 = *(_QWORD *)(v0 + 296);
  v57 = *(_QWORD *)(v0 + 272);
  v58 = *(_QWORD *)(v0 + 248);
  v59 = *(_QWORD *)(v0 + 240);
  v60 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v61 = *(_QWORD *)(v0 + 184);
  v62 = *(_QWORD *)(v0 + 176);
  v6 = sub_100004828((uint64_t *)&unk_1006325A0);
  v7 = sub_100004828((uint64_t *)&unk_100633440);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10051FFB0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v17 = *(_QWORD *)(v0 + 128);
  v14[3] = sub_100004828((uint64_t *)&unk_100633630);
  *v14 = v17;
  swift_errorRetain(v53);
  swift_bridgeObjectRetain(v17);
  v18 = sub_10011D314(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v4, enum case for DIPError.Code.internalError(_:), v5);
  v19 = type metadata accessor for DIPError(0);
  v20 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v19, v20, 0, 0);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100541240, v53, v4, 0, v18, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 241);
  swift_willThrow(v21);
  swift_errorRelease(v53);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v4);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E5EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[21];
    v6 = sub_10003F8D0;
  }
  else
  {
    v7 = v3[21];
    swift_bridgeObjectRelease(v3[43]);
    v6 = sub_10003E668;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10003E668()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *, uint64_t);
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  id v19;
  void *v20;
  void *object;
  uint64_t v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(os_log_t, os_log_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char v82;
  int v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  os_log_t v139;
  os_log_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  void *v145;
  uint64_t (*v146)(uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  os_log_t logc;
  os_log_t logd;
  os_log_t loge;
  void *v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219[3];

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(void (**)(char *, uint64_t))(v0 + 152);
  v3 = *(id *)(v0 + 360);
  v4 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v5 = (void *)SecTrustRef.certificateChain.getter(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  *(_QWORD *)(v0 + 128) = v5;
  swift_bridgeObjectRetain(v5);
  sub_1000415D0(v6, v2);
  v7 = *(void **)(v0 + 360);
  if (v1)
  {
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 256);
    v188 = v1;
    swift_bridgeObjectRelease(v5);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
LABEL_69:
    v166 = *(_QWORD *)(v0 + 304);
    v167 = *(_QWORD *)(v0 + 312);
    v192 = *(_QWORD *)(v0 + 296);
    v195 = *(_QWORD *)(v0 + 272);
    v199 = *(_QWORD *)(v0 + 248);
    v203 = *(_QWORD *)(v0 + 240);
    v169 = *(_QWORD *)(v0 + 200);
    v168 = *(_QWORD *)(v0 + 208);
    v170 = *(_QWORD *)(v0 + 192);
    v209 = *(_QWORD *)(v0 + 232);
    loge = *(os_log_t *)(v0 + 184);
    v218 = *(_QWORD *)(v0 + 176);
    v171 = sub_100004828((uint64_t *)&unk_1006325A0);
    v172 = sub_100004828((uint64_t *)&unk_100633440);
    v173 = *(_QWORD *)(v172 - 8);
    v174 = *(_QWORD *)(v173 + 72);
    v175 = *(unsigned __int8 *)(v173 + 80);
    v176 = (v175 + 32) & ~v175;
    v177 = swift_allocObject(v171, v176 + v174, v175 | 7);
    *(_OWORD *)(v177 + 16) = xmmword_10051FFB0;
    v178 = v177 + v176;
    v179 = (_QWORD *)(v178 + *(int *)(v172 + 48));
    v180 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
    v181 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v181 - 8) + 104))(v178, v180, v181);
    v182 = *(_QWORD *)(v0 + 128);
    v179[3] = sub_100004828((uint64_t *)&unk_100633630);
    *v179 = v182;
    swift_errorRetain(v188);
    swift_bridgeObjectRetain(v182);
    v183 = sub_10011D314(v177);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v169 + 104))(v168, enum case for DIPError.Code.internalError(_:), v170);
    v184 = type metadata accessor for DIPError(0);
    v185 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v184, v185, 0, 0);
    v186 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100541240, v188, v168, 0, v183, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 241);
    swift_willThrow(v186);
    swift_errorRelease(v188);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v167);
    swift_task_dealloc(v166);
    swift_task_dealloc(v192);
    swift_task_dealloc(v195);
    swift_task_dealloc(v199);
    swift_task_dealloc(v203);
    swift_task_dealloc(v209);
    swift_task_dealloc(v168);
    swift_task_dealloc(loge);
    swift_task_dealloc(v218);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = swift_bridgeObjectRelease(v5);
  v12 = SecTrustRef.certificateChain.getter(v11);
  v13 = v12;
  if (!((unint64_t)v12 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_58:
    v155 = *(void **)(v0 + 360);
    v5 = v155;
LABEL_66:
    v157 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v159 = *(_QWORD *)(v0 + 200);
    v158 = *(_QWORD *)(v0 + 208);
    v160 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease(v13);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v159 + 104))(v158, enum case for DIPError.Code.documentReaderMissingIssuerCertificateChain(_:), v160);
    v161 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v162 = type metadata accessor for DIPError(0);
    v163 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v164 = swift_allocError(v162, v163, 0, 0);
    v165 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000050, 0x8000000100541530, 0, v158, 0, v161, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 188);
    v188 = v164;
    swift_willThrow(v165);

    v54 = *(void (**)(os_log_t, os_log_t))(v157 + 8);
    goto LABEL_67;
  }
  if (v12 >= 0)
    v12 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v12))
    goto LABEL_58;
LABEL_5:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
  }
  else
  {
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_61;
    }
    v14 = *(id *)(v13 + 32);
  }
  v5 = v14;
  v15 = swift_bridgeObjectRelease(v13);
  v13 = SecTrustRef.certificateChain.getter(v15);
  if (!((unint64_t)v13 >> 62))
  {
    v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_10;
    goto LABEL_65;
  }
LABEL_61:
  if (v13 < 0)
    v156 = v13;
  else
    v156 = v13 & 0xFFFFFFFFFFFFFF8;
  v16 = _CocoaArrayWrapper.endIndex.getter(v156);
  if (!v16)
  {
LABEL_65:

    v155 = *(void **)(v0 + 360);
    goto LABEL_66;
  }
LABEL_10:
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else if ((v13 & 0xC000000000000001) == 0)
  {
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v18 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v19 = *(id *)(v13 + 8 * v18 + 32);
      goto LABEL_15;
    }
    __break(1u);
LABEL_74:
    swift_once(&qword_10062F458, sub_10003BE14);
    goto LABEL_42;
  }
  v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v13);
LABEL_15:
  v20 = v19;
  swift_bridgeObjectRelease(v13);
  object = SecCertificateRef.commonName()().value._object;
  v22 = swift_bridgeObjectRelease(object);
  if (!object)
  {
    v24 = *(void **)(v0 + 360);
    v204 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v34 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 208);
    v35 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.documentReaderDocSignerMissingCommonName(_:), v35);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v37, v38, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x8000000100541340, 0, v33, 0, v36, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 192);
    goto LABEL_26;
  }
  if ((SecCertificateRef.keyUsage.getter(v22) & 1) == 0)
  {
    v24 = *(void **)(v0 + 360);
    v204 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.documentReaderDocSignerInvalidKeyUsage(_:), v27);
    v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000041, 0x8000000100541380, 0, v25, 0, v28, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 196);
LABEL_26:
    v188 = v31;
    swift_willThrow(v32);

LABEL_27:
    v54 = *(void (**)(os_log_t, os_log_t))(v204 + 8);
LABEL_67:
    v140 = log;
    v139 = v217;
    goto LABEL_68;
  }
  v39 = SecCertificateRef.countryName.getter(v23);
  if (!v40)
  {
    v24 = *(void **)(v0 + 360);
    v204 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 200);
    v48 = *(_QWORD *)(v0 + 208);
    v50 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), v50);
    v51 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v52 = type metadata accessor for DIPError(0);
    v53 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v52, v53, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x80000001005413D0, 0, v48, 0, v51, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 200);
    goto LABEL_26;
  }
  v41 = v39;
  v42 = v40;
  if (String.count.getter() != 2)
  {
    v24 = *(void **)(v0 + 360);
    v204 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v55 = *(_QWORD *)(v0 + 200);
    v56 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease(v42);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v56, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), v57);
    v58 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v59 = type metadata accessor for DIPError(0);
    v60 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v61 = swift_allocError(v59, v60, 0, 0);
    v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100541410, 0, v56, 0, v58, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 207);
    v188 = v61;
    swift_willThrow(v62);

    goto LABEL_27;
  }
  v44 = SecCertificateRef.countryName.getter(v43);
  if (!v45)
  {
    v63 = v20;
    v64 = *(void **)(v0 + 360);
    swift_bridgeObjectRelease(v42);
LABEL_37:

    v73 = *(void **)(v0 + 360);
    v74 = *(_QWORD *)(v0 + 264);
    log = *(os_log_t *)(v0 + 256);
    v217 = *(NSObject **)(v0 + 272);
    v75 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(v75, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), *(_QWORD *)(v0 + 192));
    v76 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v77 = type metadata accessor for DIPError(0);
    v78 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v79 = swift_allocError(v77, v78, 0, 0);
    v80 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x8000000100541450, 0, v75, 0, v76, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 211);
    v188 = v79;
    swift_willThrow(v80);

    v54 = *(void (**)(os_log_t, os_log_t))(v74 + 8);
    goto LABEL_67;
  }
  v46 = v45;
  if (v41 == v44 && v42 == v45)
  {
    swift_bridgeObjectRelease(v45);
    v47 = swift_bridgeObjectRelease(v42);
    goto LABEL_31;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v44, v45, 0);
  swift_bridgeObjectRelease(v46);
  v47 = swift_bridgeObjectRelease(v42);
  if ((v65 & 1) == 0)
  {
    v63 = v20;
    v64 = *(void **)(v0 + 360);
    goto LABEL_37;
  }
LABEL_31:
  v216 = v20;
  v66 = SecCertificateRef.stateOrProvinceName.getter(v47);
  if (!v67)
    goto LABEL_40;
  v68 = v66;
  v69 = v67;
  v70 = SecCertificateRef.stateOrProvinceName.getter(v66);
  if (!v71)
  {
    v81 = *(void **)(v0 + 360);
    swift_bridgeObjectRelease(v69);
LABEL_49:

    v131 = *(void **)(v0 + 360);
    v132 = *(_QWORD *)(v0 + 264);
    v205 = *(NSObject **)(v0 + 256);
    loga = *(os_log_t *)(v0 + 272);
    v133 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(v133, enum case for DIPError.Code.documentReaderDocSignerInconsistentWithRoot(_:), *(_QWORD *)(v0 + 192));
    v134 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v135 = type metadata accessor for DIPError(0);
    v136 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v137 = swift_allocError(v135, v136, 0, 0);
    v138 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000041, 0x80000001005414E0, 0, v133, 0, v134, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 218);
    v188 = v137;
    swift_willThrow(v138);

    v54 = *(void (**)(os_log_t, os_log_t))(v132 + 8);
    goto LABEL_50;
  }
  v72 = v71;
  if (v70 == v68 && v71 == v69)
  {
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v72);
    goto LABEL_40;
  }
  v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v68, v69, 0);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v72);
  if ((v82 & 1) == 0)
  {
    v81 = *(void **)(v0 + 360);
    goto LABEL_49;
  }
LABEL_40:
  v83 = *(_DWORD *)(v0 + 376);
  v84 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 336);
  v85 = *(_QWORD *)(v0 + 240);
  v86 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 328))(v85, *(_QWORD *)(v0 + 160), v86);
  v87 = v84(v85, v86);
  if ((_DWORD)v87 != v83)
  {
    if ((_DWORD)v87 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      v190 = *(void **)(v0 + 360);
      v193 = *(_QWORD *)(v0 + 264);
      v207 = *(_QWORD *)(v0 + 272);
      logc = *(os_log_t *)(v0 + 240);
      v118 = *(_QWORD *)(v0 + 216);
      v197 = *(_QWORD *)(v0 + 256);
      v201 = *(_QWORD *)(v0 + 224);
      v120 = *(_QWORD *)(v0 + 200);
      v119 = *(_QWORD *)(v0 + 208);
      v121 = *(_QWORD *)(v0 + 192);
      v122 = *(_QWORD *)(v0 + 160);

      v219[0] = 0;
      v219[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = 0xE000000000000000;
      v123._countAndFlagsBits = 0xD00000000000001ALL;
      v123._object = (void *)0x80000001005412E0;
      String.append(_:)(v123);
      _print_unlocked<A, B>(_:_:)(v122, v0 + 104, v118, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v124 = *(_QWORD *)(v0 + 104);
      v125 = *(_QWORD *)(v0 + 112);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v120 + 104))(v119, enum case for DIPError.Code.documentReaderUnknownDocumentType(_:), v121);
      v126 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v127 = type metadata accessor for DIPError(0);
      v128 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v129 = swift_allocError(v127, v128, 0, 0);
      v130 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v124, v125, 0, v119, 0, v126, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 235);
      v188 = v129;
      swift_willThrow(v130);

      (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v207, v197);
      (*(void (**)(os_log_t, uint64_t))(v201 + 8))(logc, v118);
      goto LABEL_69;
    }
    v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
    v100 = *(_QWORD *)(v0 + 232);
    v101 = *(_QWORD *)(v0 + 216);
    v102 = *(_QWORD *)(v0 + 160);
    defaultLogger()(v87);
    v103 = v99(v100, v102, v101);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.debug.getter(v104);
    logb = v104;
    v106 = os_log_type_enabled(v104, v105);
    v107 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 320);
    v108 = *(_QWORD *)(v0 + 304);
    v109 = *(_QWORD *)(v0 + 280);
    v111 = *(_QWORD *)(v0 + 224);
    v110 = *(_QWORD *)(v0 + 232);
    if (v106)
    {
      v196 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 320);
      v112 = *(_QWORD *)(v0 + 216);
      v206 = *(_QWORD *)(v0 + 280);
      v113 = (uint8_t *)swift_slowAlloc(12, -1);
      v200 = v108;
      v114 = swift_slowAlloc(32, -1);
      v219[0] = v114;
      *(_DWORD *)v113 = 136315138;
      v115 = ISO18013KnownDocTypes.rawValue.getter(v114);
      v117 = v116;
      *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v115, v116, v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v113 + 4);
      swift_bridgeObjectRelease(v117);
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
      _os_log_impl((void *)&_mh_execute_header, logb, v105, "No document signer OID defined for %s.", v113, 0xCu);
      swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v113, -1, -1);

      v88 = v196(v200, v206);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v111 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));

      v88 = v107(v108, v109);
    }
    goto LABEL_52;
  }
  if (qword_10062F458 != -1)
    goto LABEL_74;
LABEL_42:
  v88 = SecCertificateRef.hasOID(oid:)(qword_100630C68, unk_100630C70);
  if ((v88 & 1) == 0)
  {
    v89 = *(void **)(v0 + 360);
    v90 = *(_QWORD *)(v0 + 264);
    v205 = *(NSObject **)(v0 + 256);
    loga = *(os_log_t *)(v0 + 272);
    v92 = *(_QWORD *)(v0 + 200);
    v91 = *(_QWORD *)(v0 + 208);
    v93 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v92 + 104))(v91, enum case for DIPError.Code.documentReaderDocSignerMissingOID(_:), v93);
    v94 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v95 = type metadata accessor for DIPError(0);
    v96 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v97 = swift_allocError(v95, v96, 0, 0);
    v98 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x8000000100541490, 0, v91, 0, v94, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 225);
    v188 = v97;
    swift_willThrow(v98);

    v54 = *(void (**)(os_log_t, os_log_t))(v90 + 8);
LABEL_50:
    v140 = v205;
    v139 = loga;
LABEL_68:
    v54(v139, v140);
    goto LABEL_69;
  }
LABEL_52:
  v141 = defaultLogger()(v88);
  v142 = Logger.logObject.getter(v141);
  v143 = static os_log_type_t.debug.getter(v142);
  if (os_log_type_enabled(v142, v143))
  {
    v144 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v144 = 0;
    _os_log_impl((void *)&_mh_execute_header, v142, v143, "ISO18013IssuerAuthenticator successfully validated document signer certificate chain.", v144, 2u);
    swift_slowDealloc(v144, -1, -1);
  }
  v145 = *(void **)(v0 + 360);
  v146 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 320);
  v147 = *(_QWORD *)(v0 + 296);
  v189 = *(_QWORD *)(v0 + 312);
  v191 = *(_QWORD *)(v0 + 304);
  v148 = *(_QWORD *)(v0 + 272);
  v149 = *(_QWORD *)(v0 + 280);
  v150 = *(_QWORD *)(v0 + 264);
  v187 = *(_QWORD *)(v0 + 256);
  v194 = *(_QWORD *)(v0 + 248);
  v198 = *(_QWORD *)(v0 + 240);
  v202 = *(_QWORD *)(v0 + 232);
  v208 = *(_QWORD *)(v0 + 208);
  v151 = *(_QWORD *)(v0 + 176);
  logd = *(os_log_t *)(v0 + 184);

  v152 = v146(v147, v149);
  v153 = SecTrustRef.certificateChain.getter(v152);

  (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v148, v187);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v189);
  swift_task_dealloc(v191);
  swift_task_dealloc(v147);
  swift_task_dealloc(v148);
  swift_task_dealloc(v194);
  swift_task_dealloc(v198);
  swift_task_dealloc(v202);
  swift_task_dealloc(v208);
  swift_task_dealloc(logd);
  swift_task_dealloc(v151);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v153);
}

uint64_t sub_10003F8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 344));
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  swift_getErrorValue(v1, v0 + 120, v0 + 80);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    goto LABEL_5;
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 176);
  sub_100038B24(*(_QWORD *)(v0 + 184), v7, &qword_1006335E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v7, v5) != enum case for DIPError.Code.untrustedCertificate(_:))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 192));
LABEL_5:
    v18 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 208);
    v53 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(v21, enum case for DIPError.Code.documentReaderFailedToVerifyIssuerChain(_:), *(_QWORD *)(v0 + 192));
    swift_errorRetain(v18);
    v22 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v57 = v23;
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100541300, v18, v21, 1, v22, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 174);
    v58 = v25;
    swift_willThrow(v26);
    swift_errorRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v53, v20);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 208);
  v55 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(v12, enum case for DIPError.Code.documentReaderUntrustedIssuer(_:), *(_QWORD *)(v0 + 192));
  swift_errorRetain(v8);
  v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v14 = type metadata accessor for DIPError(0);
  v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v57 = v14;
  v16 = swift_allocError(v14, v15, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x8000000100541320, v8, v12, 1, v13, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 172);
  v58 = v16;
  swift_willThrow(v17);
  swift_errorRelease(v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
LABEL_6:
  sub_100008030(v55, &qword_1006335E0);
  v46 = *(_QWORD *)(v0 + 312);
  v47 = *(_QWORD *)(v0 + 304);
  v48 = *(_QWORD *)(v0 + 296);
  v49 = *(_QWORD *)(v0 + 272);
  v50 = *(_QWORD *)(v0 + 248);
  v51 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 192);
  v52 = *(_QWORD *)(v0 + 232);
  v54 = *(_QWORD *)(v0 + 184);
  v56 = *(_QWORD *)(v0 + 176);
  v30 = sub_100004828((uint64_t *)&unk_1006325A0);
  v31 = sub_100004828((uint64_t *)&unk_100633440);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = *(unsigned __int8 *)(v32 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v30, v35 + v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10051FFB0;
  v37 = v36 + v35;
  v38 = (_QWORD *)(v37 + *(int *)(v31 + 48));
  v39 = enum case for DIPError.PropertyKey.issuerCertificateChain(_:);
  v40 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v37, v39, v40);
  v41 = *(_QWORD *)(v0 + 128);
  v38[3] = sub_100004828((uint64_t *)&unk_100633630);
  *v38 = v41;
  swift_errorRetain(v58);
  swift_bridgeObjectRetain(v41);
  v42 = sub_10011D314(v36);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v28, enum case for DIPError.Code.internalError(_:), v29);
  type metadata accessor for DIPError(0);
  v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v57, v43, 0, 0);
  v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000048, 0x8000000100541240, v58, v28, 0, v42, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000004CLL, 0x8000000100541290, 241);
  swift_willThrow(v44);
  swift_errorRelease(v58);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v28);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FE1C(uint64_t *a1)
{
  Swift::String v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::String v7;
  void *object;

  _StringGuts.grow(_:)(54);
  v2._object = (void *)0x8000000100541610;
  v2._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v2);
  v3 = *a1;
  type metadata accessor for SecCertificate(0);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = Array<A>.base64EncodedStrings()(v4);
  swift_bridgeObjectRelease(v3);
  if (v5)
    v6 = (_QWORD *)v5;
  else
    v6 = _swiftEmptyArrayStorage;
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_10003FEF0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;

  v82 = a1;
  v80 = a2;
  v84 = type metadata accessor for DIPError.Code(0);
  v85 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004828(&qword_100630DD0);
  v4 = *(_QWORD *)(v3 - 8);
  v78 = v3;
  v79 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_10062FC58);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PublicKeyAlgorithm(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = SecCertificateRef.rawECPublicKeyData()(v16);
  if (v20 >> 60 == 15)
  {
    v21 = v85;
    v22 = v83;
    v23 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v83, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v84);
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x8000000100541110, 0, v22, 0, v24, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000003ELL, 0x8000000100541150, 286);
    swift_willThrow(v28);
LABEL_12:
    (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v22, enum case for DIPError.Code.internalError(_:), v23);
    swift_errorRetain(v27);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v64, v65, 0, 0);
    v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x8000000100541190, v27, v22, 0, v63, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000003ELL, 0x8000000100541150, 310);
    swift_willThrow(v66);
    return swift_errorRelease(v27);
  }
  v71 = v10;
  v72 = v8;
  v73 = v7;
  v74 = v6;
  v75 = v18;
  v76 = v19;
  v77 = v20;
  SecCertificateRef.publicKeyAlgorithm()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100008030((uint64_t)v13, &qword_10062FC58);
    v21 = v85;
    v22 = v83;
    v23 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v83, enum case for DIPError.Code.documentReaderInvalidIssuerAuthCerts(_:), v84);
    v29 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v27 = swift_allocError(v30, v31, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x80000001005411D0, 0, v22, 0, v29, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000003ELL, 0x8000000100541150, 290);
    swift_willThrow(v32);
    sub_100007F78(v76, v77);
    goto LABEL_12;
  }
  v33 = v75;
  v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v75, v13, v14);
  v35 = COSE_Sign1.payload.getter(v34);
  if (v36 >> 60 == 15)
  {
    v21 = v85;
    v22 = v83;
    v23 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v83, enum case for DIPError.Code.documentReaderMisformattedIssuerAuthStructure(_:), v84);
    v82 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v27 = swift_allocError(v37, v38, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100541210, 0, v22, 0, v82, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000003ELL, 0x8000000100541150, 294);
    swift_willThrow(v39);
    sub_100007F78(v76, v77);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v75, v14);
    goto LABEL_12;
  }
  v40 = v36;
  v69 = v15;
  v70 = v14;
  v41 = v35;
  v42 = COSE_Sign1.signature.getter();
  v44 = v43;
  v45 = COSE_Sign1.algorithmIdentifier.getter();
  v82 = v44;
  v46 = v44;
  v47 = v76;
  v48 = v77;
  v49 = v81;
  COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(v42, v46, v76, v77, v33, v45, v41, v40);
  v27 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v33, v70);
    sub_100007F8C(v42, v82);
    sub_100007F78(v41, v40);
    sub_100007F78(v47, v48);
    v22 = v83;
    v23 = v84;
    v21 = v85;
    goto LABEL_12;
  }
  v50 = v41;
  v51 = v40;
  v52 = sub_100007F8C(v42, v82);
  v53 = v71;
  v54 = defaultLogger()(v52);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.debug.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "ISO18013IssuerAuthenticator successfully validated signature of IssuerAuth", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v72 + 8))(v53, v73);
  v58 = sub_10004157C();
  v59 = v74;
  v60 = v78;
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v78, v50, v51, v78, v58);
  v61 = v75;
  v62 = v79;
  CBOREncodedCBOR.value.getter(v60);
  sub_100007F78(v50, v51);
  sub_100007F78(v76, v77);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v61, v70);
}

uint64_t sub_100040708(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;

  v63 = a2;
  v62 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v5 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v61 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v60 - v10;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v14);
  v64 = a1;
  Logger.sensitive(_:)(sub_100041574);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v18 = ISO18013MobileSecurityObject.ValidityInfo.signed.getter(v17);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  if (!SecCertificateIsValid(v63, v19))
  {
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v39 = v62;
    v31(v5, enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:), v62);
    v40 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v41 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v41, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100540E60, 0, v5, 0, v40, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000031, 0x8000000100540F30, 357);
    v33 = v5;
    v32 = v39;
    goto LABEL_8;
  }
  v21 = v60[2];
  v60[0] = v3;
  v63 = v5;
  v22 = ((uint64_t (*)(void))ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter)();
  v23 = v61;
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(v22);
  v24 = static Date.< infix(_:_:)(v11, v23);
  v20(v23, v6);
  v25 = ((uint64_t (*)(char *, uint64_t))v20)(v11, v6);
  if ((v24 & 1) == 0)
  {
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v60[0] + 104);
    v32 = v62;
    v33 = v63;
    v31(v63, enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:), v62);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v43, 0, 0);
    v44 = 0xD00000000000002ELL;
    v59 = 361;
    v45 = "IssuerAuth validity info interval is not valid";
LABEL_7:
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, (unint64_t)(v45 - 32) | 0x8000000000000000, 0, v33, 0, v42, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000031, 0x8000000100540F30, v59);
    goto LABEL_8;
  }
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter(v25);
  v26 = v21 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_dateProvider;
  v28 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_dateProvider);
  v27 = *(_QWORD *)(v26 + 8);
  v29 = v61;
  dispatch thunk of static DateProvider.now.getter(v28, v27);
  sub_100004790((unint64_t *)&qword_100630538, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v30 = dispatch thunk of static Comparable.< infix(_:_:)(v29, v11, v6);
  v20(v29, v6);
  v20(v11, v6);
  if ((v30 & 1) != 0)
  {
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v60[0] + 104);
    v32 = v62;
    v33 = v63;
    v31(v63, enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:), v62);
    v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v36, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100541050, 0, v33, 0, v34, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000031, 0x8000000100540F30, 365);
LABEL_8:
    swift_willThrow(v38);
    v31(v33, enum case for DIPError.Code.internalError(_:), v32);
    swift_errorRetain(v37);
    v46 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for DIPError(0);
    v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v35, v47, 0, 0);
    v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100540F70, v37, v33, 0, v46, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000031, 0x8000000100540F30, 376);
    swift_willThrow(v48);
    return swift_errorRelease(v37);
  }
  v50 = dispatch thunk of static DateProvider.now.getter(v28, v27);
  v51 = v61;
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(v50);
  v52 = dispatch thunk of static Comparable.< infix(_:_:)(v51, v11, v6);
  v20(v51, v6);
  v53 = ((uint64_t (*)(char *, uint64_t))v20)(v11, v6);
  if ((v52 & 1) != 0)
  {
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v60[0] + 104);
    v32 = v62;
    v33 = v63;
    v31(v63, enum case for DIPError.Code.documentReaderExpiredIssuerAuth(_:), v62);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v54 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v54, 0, 0);
    v44 = 0xD000000000000023;
    v59 = 369;
    v45 = "IssuerAuth validity info is expired";
    goto LABEL_7;
  }
  v55 = ISO18013MobileSecurityObject.ValidityInfo.signed.getter(v53);
  v56 = v61;
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter(v55);
  v57 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v11, v6);
  v20(v56, v6);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v11, v6);
  if ((v57 & 1) != 0)
  {
    v31 = *(void (**)(char *, _QWORD, uint64_t))(v60[0] + 104);
    v32 = v62;
    v33 = v63;
    v31(v63, enum case for DIPError.Code.documentReaderMSOValidityInfoValidationFailed(_:), v62);
    v42 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v58 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v58, 0, 0);
    v44 = 0xD000000000000032;
    v59 = 373;
    v45 = "MSO validFrom timestamp is before signed timestamp";
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100040F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  void (*v8)(char *, uint64_t);
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  _QWORD v16[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(100);
  v4._countAndFlagsBits = 0xD000000000000035;
  v4._object = (void *)0x8000000100541090;
  String.append(_:)(v4);
  ISO18013MobileSecurityObject.ValidityInfo.signed.getter();
  v5 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v9._object = (void *)0x80000001005410D0;
  v9._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v9);
  ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v8(v3, v0);
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x80000001005410F0;
  String.append(_:)(v12);
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter();
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v8(v3, v0);
  return v16[0];
}

uint64_t sub_1000410CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  _QWORD v17[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v8._countAndFlagsBits = 0xD000000000000027;
  v8._object = (void *)0x8000000100541990;
  String.append(_:)(v8);
  v9 = sub_100004790((unint64_t *)&qword_100633310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._object = (void *)0x80000001005419C0;
  v12._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v12);
  v13 = ISO18013MobileSecurityObject.validityInfo.getter();
  ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v9);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v17[0];
}

uint64_t sub_100041284(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  _StringGuts.grow(_:)(90);
  v4._object = (void *)0x80000001005419E0;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._object = (void *)0x8000000100541A10;
  v6._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v6);
  v7 = SecCertificateRef.countryName.getter();
  if (v8)
  {
    v9 = v8;
  }
  else
  {
    v7 = 7104878;
    v9 = 0xE300000000000000;
  }
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v9);
  return 0;
}

uint64_t sub_10004135C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(103);
  v8._object = (void *)0x8000000100541A40;
  v8._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD000000000000033;
  v10._object = (void *)0x8000000100541A80;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  return 0;
}

uint64_t sub_100041420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_signatureValidator;
  v2 = type metadata accessor for COSESignatureValidator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0
                                                       + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_oidVerifier));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd27ISO18013IssuerAuthenticator_decoder));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10004148C()
{
  return type metadata accessor for ISO18013IssuerAuthenticator(0);
}

uint64_t type metadata accessor for ISO18013IssuerAuthenticator(uint64_t a1)
{
  uint64_t result;

  result = qword_100630CC0;
  if (!qword_100630CC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ISO18013IssuerAuthenticator);
  return result;
}

uint64_t sub_1000414D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for COSESignatureValidator(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100520718;
    v4[3] = &unk_100520730;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100041568()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100041574()
{
  return sub_100040F04();
}

unint64_t sub_10004157C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100630DD8;
  if (!qword_100630DD8)
  {
    v1 = sub_100013E24(&qword_100630DD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for CBOREncodedCBOR<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100630DD8);
  }
  return result;
}

uint64_t sub_1000415C8()
{
  uint64_t v0;

  return sub_10003FE1C(*(uint64_t **)(v0 + 16));
}

void sub_1000415D0(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  void *v33;
  unint64_t v34;
  id v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *object;
  uint64_t countAndFlagsBits;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  Swift::String v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v84 = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v80 = *(_QWORD *)(v3 - 8);
  v81 = v3;
  __chkstk_darwin(v3);
  v79 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v76 - v11;
  v13 = __chkstk_darwin(v10);
  v78 = (char *)&v76 - v14;
  v15 = __chkstk_darwin(v13);
  v82 = (char *)&v76 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v76 - v18;
  v20 = defaultLogger()(v17);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = v5;
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v23, "ISO18013IssuerAuthenticator performing revocation check against provided issuer revocation list.", v25, 2u);
    v26 = v25;
    v5 = v24;
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v28 = v27(v19, v5);
  if (!v84)
  {
    v46 = defaultLogger()(v28);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "ISO18013IssuerAuthenticator issuer revocation list is missing. Skipping manual revocation check.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    v44 = v9;
    goto LABEL_43;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v29)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_36:
  if (a1 < 0)
    v70 = a1;
  else
    v70 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v29 = _CocoaArrayWrapper.endIndex.getter(v70);
  if (!v29)
  {
LABEL_40:
    v71 = swift_bridgeObjectRelease(a1);
    v72 = defaultLogger()(v71);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.debug.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "ISO18013IssuerAuthenticator rootCertificate is missing. Skipping manual revocation check.", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    v44 = v12;
LABEL_43:
    v45 = v5;
LABEL_44:
    v27(v44, v45);
    return;
  }
LABEL_6:
  v30 = v29 - 1;
  if (__OFSUB__(v29, 1))
    goto LABEL_47;
  v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if ((v30 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v30 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v12 = (char *)*(id *)(a1 + 32 + 8 * v30);
      swift_bridgeObjectRelease(a1);
      v31 = *(void **)(a1 + 32);
      swift_bridgeObjectRetain(a1);
      v32 = v31;
      goto LABEL_11;
    }
    __break(1u);
    return;
  }
LABEL_48:
  v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain(a1);
  v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_11:
  v33 = v32;
  if ((sub_10010C348((uint64_t)v32, (uint64_t)v12, (uint64_t)v84) & 1) == 0)
  {
    v77 = v5;

    if (v29 != 1)
    {
      v5 = 5;
      do
      {
        v34 = v5 - 4;
        if (v23)
        {
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
        }
        else
        {
          if (v34 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          v35 = *(id *)(a1 + 8 * v5);
        }
        v33 = v35;
        v36 = __OFADD__(v34, 1);
        v37 = v5 - 3;
        if (v36)
        {
          __break(1u);
          goto LABEL_36;
        }
        if ((sub_10010C348((uint64_t)v35, (uint64_t)v12, (uint64_t)v84) & 1) != 0)
        {
          v5 = v77;
          goto LABEL_28;
        }

        ++v5;
      }
      while (v37 != v29);
    }
    v38 = swift_bridgeObjectRelease(a1);
    v39 = v78;
    v40 = defaultLogger()(v38);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "ISO18013IssuerAuthenticator issuerRevocationList does not contain the existing certificate chain. Continuing.", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    v44 = v39;
    v45 = v77;
    goto LABEL_44;
  }
LABEL_28:
  v50 = swift_bridgeObjectRelease(a1);
  v51 = v82;
  defaultLogger()(v50);
  v52 = v33;
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v84 = (void (*)(char *, uint64_t))v27;
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v78 = (char *)v56;
    v87 = v56;
    *(_DWORD *)v55 = 136315138;
    v83 = v52;
    v57 = SecCertificateRef.serialNumber.getter(v56);
    if (v58 >> 60 == 15)
    {
      object = (void *)0xE300000000000000;
      countAndFlagsBits = 7104878;
    }
    else
    {
      v62 = v57;
      v63 = v58;
      v64 = Data.base16EncodedString()();
      countAndFlagsBits = v64._countAndFlagsBits;
      object = v64._object;
      sub_100007F78(v62, v63);
    }
    v61 = v79;
    v85 = sub_1000E3AC8(countAndFlagsBits, (unint64_t)object, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v55 + 4);
    v52 = v83;

    swift_bridgeObjectRelease(object);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "ISO18103IssuerAuthenticator received revoked serial number %s", v55, 0xCu);
    v65 = v78;
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    v84(v82, v5);
  }
  else
  {

    v27(v51, v5);
    v61 = v79;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v61, enum case for DIPError.Code.documentReaderCertificateRevoked(_:), v81);
  v66 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v67 = type metadata accessor for DIPError(0);
  v68 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v67, v68, 0, 0);
  v69 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100541590, 0, v61, 0, v66, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000044, 0x80000001005415C0, 269);
  swift_willThrow(v69);

}

uint64_t sub_100041D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  __int128 v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  unint64_t i;
  BOOL v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  void (*v103)(_BYTE *, _QWORD, uint64_t);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[24];
  char *v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t (*v130)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(_BYTE *, uint64_t);
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  void (*v142)(_BYTE *, uint64_t);
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t __s1;

  v128 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v129 = &v113[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v144 = *(_QWORD *)(v5 - 8);
  v145 = v5;
  __chkstk_darwin(v5);
  v143 = &v113[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100004828(&qword_100630DE8);
  v137 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = &v113[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v113[-v11];
  v147 = type metadata accessor for Logger(0);
  v132 = *(_QWORD *)(v147 - 8);
  v13 = __chkstk_darwin(v147);
  v15 = &v113[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13);
  v148 = &v113[-v17];
  __chkstk_darwin(v16);
  v126 = &v113[-v18];
  v19 = sub_100004828(&qword_100630DF0);
  __chkstk_darwin(v19);
  v21 = &v113[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for ISO18013DigestAlgorithm(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v141 = &v113[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v25)
  {
    v135 = v10;
    v125 = v3;
    v27 = v25;
    v28 = swift_bridgeObjectRetain(v25);
    v123 = a2;
    v29 = ISO18013MobileSecurityObject.digestAlgorithm.getter(v28);
    ISO18013DigestAlgorithm.init(rawValue:)(v29);
    v30 = v22;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    {
      swift_bridgeObjectRelease(v27);
      sub_100008030((uint64_t)v21, &qword_100630DF0);
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v125 + 104);
      v32 = v129;
      v33 = v128;
      v31(v129, enum case for DIPError.Code.documentReaderInvalidDigestAlgorithm(_:), v128);
      v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v35 = type metadata accessor for DIPError(0);
      v36 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v37 = swift_allocError(v35, v36, 0, 0);
      v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100541AC0, 0, v32, 0, v34, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002ALL, 0x8000000100541AE0, 323);
      swift_willThrow(v38);
      v31(v32, enum case for DIPError.Code.internalError(_:), v33);
    }
    else
    {
      v116 = v23;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 32))(v141, v21, v22);
      v45 = 0;
      v46 = *(_QWORD *)(v27 + 64);
      v118 = v27 + 64;
      v47 = 1 << *(_BYTE *)(v27 + 32);
      v48 = -1;
      if (v47 < 64)
        v48 = ~(-1 << v47);
      v49 = v48 & v46;
      v119 = (unint64_t)(v47 + 63) >> 6;
      *(_QWORD *)&v44 = 136315138;
      v115 = v44;
      v114 = (char *)&type metadata for Any + 8;
      *(_QWORD *)&v44 = 134217984;
      v124 = v44;
      v133 = v7;
      v138 = v12;
      v122 = v22;
      v50 = v135;
      v51 = v126;
      v117 = v27;
      if (!v49)
        goto LABEL_11;
LABEL_10:
      v120 = (v49 - 1) & v49;
      v121 = v45;
      for (i = __clz(__rbit64(v49)) | (v45 << 6); ; i = __clz(__rbit64(v55)) + (v54 << 6))
      {
        v57 = *(_QWORD *)(v27 + 56);
        v58 = v27;
        v59 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
        v61 = *v59;
        v60 = v59[1];
        v62 = *(_QWORD *)(v57 + 8 * i);
        swift_bridgeObjectRetain(v60);
        v127 = v62;
        v63 = swift_bridgeObjectRetain(v62);
        v64 = ISO18013MobileSecurityObject.valueDigests.getter(v63);
        if (*(_QWORD *)(v64 + 16))
        {
          swift_bridgeObjectRetain(v60);
          v65 = sub_1004A8604(v61, v60);
          if ((v66 & 1) != 0)
            swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v65));
          else
            v67 = 0;
          v136 = v67;
          swift_bridgeObjectRelease(v60);
        }
        else
        {
          v136 = 0;
        }
        v68 = swift_bridgeObjectRelease(v64);
        defaultLogger()(v68);
        swift_bridgeObjectRetain(v60);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.debug.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          v72 = swift_slowAlloc(12, -1);
          v73 = swift_slowAlloc(32, -1);
          __s1 = v73;
          *(_DWORD *)v72 = v115;
          swift_bridgeObjectRetain(v60);
          *(_QWORD *)(v72 + 4) = sub_1000E3AC8(v61, v60, &__s1);
          swift_bridgeObjectRelease_n(v60, 3);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "ISO18013IssuerAuthenticator comparing digests for namespace %s", (uint8_t *)v72, 0xCu);
          swift_arrayDestroy(v73, 1, v114);
          v74 = v73;
          v50 = v135;
          swift_slowDealloc(v74, -1, -1);
          v75 = v72;
          v12 = v138;
          swift_slowDealloc(v75, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v60, 2);
        }
        v134 = *(void (**)(_BYTE *, uint64_t))(v132 + 8);
        v134(v51, v147);
        v76 = *(_QWORD *)(v127 + 16);
        v77 = v136;
        if (v76)
          break;
        swift_bridgeObjectRelease(v127);
        swift_bridgeObjectRelease(v77);
        v30 = v122;
        v45 = v121;
        v49 = v120;
        v27 = v58;
        if (v120)
          goto LABEL_10;
LABEL_11:
        v53 = __OFADD__(v45, 1);
        v54 = v45 + 1;
        if (v53)
        {
          __break(1u);
          JUMPOUT(0x100043350);
        }
        if (v54 >= v119)
          goto LABEL_52;
        v55 = *(_QWORD *)(v118 + 8 * v54);
        if (!v55)
        {
          v56 = v54 + 1;
          if (v54 + 1 >= v119)
            goto LABEL_52;
          v55 = *(_QWORD *)(v118 + 8 * v56);
          if (!v55)
          {
            v56 = v54 + 2;
            if (v54 + 2 >= v119)
              goto LABEL_52;
            v55 = *(_QWORD *)(v118 + 8 * v56);
            if (!v55)
            {
              v56 = v54 + 3;
              if (v54 + 3 >= v119)
                goto LABEL_52;
              v55 = *(_QWORD *)(v118 + 8 * v56);
              if (!v55)
              {
                while (1)
                {
                  v54 = v56 + 1;
                  if (__OFADD__(v56, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x100043388);
                  }
                  if (v54 >= v119)
                    break;
                  v55 = *(_QWORD *)(v118 + 8 * v54);
                  ++v56;
                  if (v55)
                    goto LABEL_21;
                }
LABEL_52:
                swift_release(v27);
                return (*(uint64_t (**)(_BYTE *, uint64_t))(v116 + 8))(v141, v30);
              }
            }
          }
          v54 = v56;
        }
LABEL_21:
        v120 = (v55 - 1) & v55;
        v121 = v54;
      }
      v78 = (_BYTE *)(v127
                    + ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80)));
      v131 = *(_QWORD *)(v137 + 72);
      v80 = v149;
      v130 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v137 + 16);
      v79 = v130;
      v140 = v76;
      v130(v12, v78, v7);
      v81 = CBOREncodedCBOR.dataValue.getter(v7);
      v83 = v82;
      v84 = computeISO18013Digest(algorithm:data:)(v141, v81, v82);
      v149 = v80;
      if (v80)
      {
        sub_100007F8C(v81, v83);
        swift_bridgeObjectRelease(v77);
        (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v12, v7);
        swift_release(v117);
        swift_bridgeObjectRelease(v127);
        (*(void (**)(_BYTE *, uint64_t))(v116 + 8))(v141, v122);
        v37 = v149;
        v32 = v129;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v125 + 104))(v129, enum case for DIPError.Code.internalError(_:), v128);
      }
      else
      {
        v86 = v85;
        v139 = v78;
        v146 = v84;
        v87 = sub_100007F8C(v81, v83);
        defaultLogger()(v87);
        v88 = v79(v50, v12, v7);
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.debug.getter(v89);
        v91 = v86;
        if (os_log_type_enabled(v89, v90))
        {
          v92 = swift_slowAlloc(12, -1);
          *(_DWORD *)v92 = v124;
          v93 = v143;
          v94 = CBOREncodedCBOR.value.getter(v7);
          v95 = ISO18013IssuerSignedItem.digestID.getter(v94);
          (*(void (**)(_BYTE *, uint64_t))(v144 + 8))(v93, v145);
          v142 = *(void (**)(_BYTE *, uint64_t))(v137 + 8);
          v142(v50, v7);
          *(_QWORD *)(v92 + 4) = v95;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "ISO18013IssuerAuthenticator comparing digests for digestID %lu", (uint8_t *)v92, 0xCu);
          swift_slowDealloc(v92, -1, -1);
        }
        else
        {
          v142 = *(void (**)(_BYTE *, uint64_t))(v137 + 8);
          v142(v50, v7);
        }

        v134(v148, v147);
        v96 = v136;
        if (v136)
        {
          swift_bridgeObjectRetain(v136);
          v97 = v143;
          v98 = CBOREncodedCBOR.value.getter(v7);
          v99 = ISO18013IssuerSignedItem.digestID.getter(v98);
          (*(void (**)(_BYTE *, uint64_t))(v144 + 8))(v97, v145);
          if (v99 < 0)
          {
            __break(1u);
            JUMPOUT(0x10004333CLL);
          }
          v100 = v91;
          if (*(_QWORD *)(v96 + 16))
          {
            v101 = sub_1004A8730(v99);
            if ((v102 & 1) != 0)
            {
              sub_100022948(*(_QWORD *)(*(_QWORD *)(v96 + 56) + 16 * v101), *(_QWORD *)(*(_QWORD *)(v96 + 56) + 16 * v101 + 8));
              swift_bridgeObjectRelease(v96);
              __asm { BR              X10 }
            }
          }
          swift_bridgeObjectRelease(v127);
          swift_bridgeObjectRelease_n(v96, 2);
        }
        else
        {
          swift_bridgeObjectRelease(v127);
          v100 = v91;
        }
        v103 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v125 + 104);
        v32 = v129;
        v104 = v128;
        v103(v129, enum case for DIPError.Code.documentReaderDocSignerInvalidDigest(_:), v128);
        v105 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v106 = type metadata accessor for DIPError(0);
        v107 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v37 = swift_allocError(v106, v107, 0, 0);
        v108 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100541B50, 0, v32, 0, v105, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002ALL, 0x8000000100541AE0, 336);
        swift_willThrow(v108);
        sub_100007F8C(v146, v100);
        v142(v138, v133);
        swift_release(v117);
        (*(void (**)(_BYTE *, uint64_t))(v116 + 8))(v141, v122);
        v103(v32, enum case for DIPError.Code.internalError(_:), v104);
      }
    }
    swift_errorRetain(v37);
    v109 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v110 = type metadata accessor for DIPError(0);
    v111 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v110, v111, 0, 0);
    v112 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100541B10, v37, v32, 0, v109, 0xD000000000000075, 0x8000000100540EB0, 0xD00000000000002ALL, 0x8000000100541AE0, 344);
    swift_willThrow(v112);
    return swift_errorRelease(v37);
  }
  else
  {
    v39 = defaultLogger()(v24);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "ISO18013IssuerAuthenticator found nil issuer signed namespaces. Skipping digests check as there is nothing to compare.", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v132 + 8))(v15, v147);
  }
}

uint64_t sub_100043414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, _QWORD, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, _QWORD, uint64_t);
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185[8];
  uint64_t v186;

  v178 = a3;
  v176 = a2;
  v167 = type metadata accessor for DIPError.Code(0);
  v165 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v166 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v161 = (char *)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for Date(0);
  v175 = *(_QWORD *)(v181 - 8);
  v6 = __chkstk_darwin(v181);
  v160 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v177 = (char *)&v153 - v8;
  v154 = type metadata accessor for ISO18013Response.Document(0);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v156 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v170 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v168 = (char *)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v169 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v12 = (char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for ISO18013KnownDocTypes(0);
  v13 = *(_QWORD *)(v182 - 8);
  v14 = __chkstk_darwin(v182);
  v157 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v153 - v16;
  v18 = sub_100004828(&qword_100633990);
  v19 = __chkstk_darwin(v18);
  v174 = (uint64_t)&v153 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v183 = (uint64_t)&v153 - v21;
  v22 = type metadata accessor for Logger(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v159 = (char *)&v153 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v158 = (char *)&v153 - v27;
  v28 = __chkstk_darwin(v26);
  v164 = (char *)&v153 - v29;
  v30 = __chkstk_darwin(v28);
  v155 = (char *)&v153 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v153 - v33;
  v35 = defaultLogger()(v32);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    v180 = v23;
    v39 = v13;
    v40 = a1;
    v41 = v22;
    v42 = v38;
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "ISO18013IssuerAuthenticator begin validating consistency of response.", v38, 2u);
    v43 = v42;
    v22 = v41;
    a1 = v40;
    v13 = v39;
    v23 = v180;
    swift_slowDealloc(v43, -1, -1);
  }

  v179 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
  v180 = v22;
  v44 = v179(v34, v22);
  v173 = a1;
  v45 = ISO18013Response.Document.docType.getter(v44);
  v47 = v46;
  v48 = v13;
  v49 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104);
  v50 = v182;
  v51 = v49(v17, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v182);
  v52 = ISO18013KnownDocTypes.rawValue.getter(v51);
  v54 = v53;
  v55 = *(void (**)(char *, uint64_t))(v48 + 8);
  v55(v17, v50);
  if (v52 == v45 && v54 == v47)
  {
    swift_bridgeObjectRelease(v47);
LABEL_7:
    v57 = swift_bridgeObjectRelease(v47);
    ISO18013Response.Document.issuerSigned.getter(v57);
    v58 = v170;
    v59 = *(void (**)(char *, _QWORD, uint64_t))(v170 + 104);
    v60 = (uint64_t)v168;
    v61 = v172;
    v59(v168, enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:), v172);
    sub_100258F28(v60, v183);
    v62 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v62(v60, v61);
    v63 = *(uint64_t (**)(char *, uint64_t))(v169 + 8);
    v64 = v171;
    v65 = v63(v12, v171);
    ISO18013Response.Document.issuerSigned.getter(v65);
    v59((char *)v60, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v61);
    v170 = sub_100258F34(v60);
    v182 = v66;
    v62(v60, v61);
    v67 = v63(v12, v64);
    ISO18013Response.Document.issuerSigned.getter(v67);
    v59((char *)v60, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v61);
    v173 = sub_100258F34(v60);
    v69 = v68;
    v70 = v61;
    v71 = v183;
    v62(v60, v70);
    v63(v12, v64);
    v72 = v181;
    v73 = v177;
    v74 = v175;
    goto LABEL_8;
  }
  v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v45, v47, 0);
  swift_bridgeObjectRelease(v54);
  if ((v56 & 1) != 0)
    goto LABEL_7;
  v89 = v157;
  v90 = v182;
  v91 = v49(v157, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v182);
  v92 = ISO18013KnownDocTypes.rawValue.getter(v91);
  v94 = v93;
  v55(v89, v90);
  v71 = v183;
  if (v92 == v45 && v94 == v47)
  {
    swift_bridgeObjectRelease_n(v47, 2);
    v72 = v181;
LABEL_36:
    v74 = v175;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 56))(v71, 1, 1, v72);
    v173 = 0;
    v69 = 0;
    v170 = 0;
    v182 = 0;
    v73 = v177;
LABEL_8:
    v75 = v174;
    sub_100038B24(v71, v174, &qword_100633990);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v75, 1, v72) == 1)
    {
      v76 = sub_100008030(v75, &qword_100633990);
      v77 = v182;
      if (v182)
        goto LABEL_10;
    }
    else
    {
      v82 = v69;
      v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 32))(v73, v75, v72);
      v84 = v161;
      v85 = ISO18013MobileSecurityObject.validityInfo.getter(v83);
      v86 = v160;
      ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter(v85);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v84, v163);
      LOBYTE(v84) = static Date.< infix(_:_:)(v73, v86);
      v87 = *(void (**)(char *, uint64_t))(v74 + 8);
      v87(v86, v72);
      if ((v84 & 1) == 0)
      {
        swift_bridgeObjectRelease(v82);
        v95 = swift_bridgeObjectRelease(v182);
        v96 = v164;
        v97 = defaultLogger()(v95);
        __chkstk_darwin(v97);
        Logger.sensitive(_:)(sub_100044498);
        v179(v96, v180);
        v98 = v166;
        v99 = *(void (**)(char *, _QWORD, uint64_t))(v165 + 104);
        v100 = v167;
        v99(v166, enum case for DIPError.Code.documentReaderDocSignerIssueDateInconsistent(_:), v167);
        v101 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v102 = type metadata accessor for DIPError(0);
        v103 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v104 = swift_allocError(v102, v103, 0, 0);
        v105 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100541960, 0, v98, 0, v101, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000036, 0x8000000100541880, 413);
        swift_willThrow(v105);
        sub_100008030(v183, &qword_100633990);
        v87(v73, v181);
LABEL_34:
        v99(v98, enum case for DIPError.Code.internalError(_:), v100);
        swift_errorRetain(v104);
        v124 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for DIPError(0);
        v125 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v102, v125, 0, 0);
        v126 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000042, 0x80000001005418C0, v104, v98, 0, v124, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000036, 0x8000000100541880, 436);
        swift_willThrow(v126);
        return swift_errorRelease(v104);
      }
      v76 = ((uint64_t (*)(char *, uint64_t))v87)(v73, v72);
      v69 = v82;
      v77 = v182;
      if (v182)
      {
LABEL_10:
        v78 = swift_bridgeObjectRetain(v77);
        v79 = SecCertificateRef.countryName.getter(v78);
        if (v80)
        {
          v81 = v80;
          if (v170 == v79 && v77 == v80)
          {
            swift_bridgeObjectRelease_n(v77, 2);
            v77 = v81;
            goto LABEL_24;
          }
          v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v170, v77, v79, v80, 0);
          swift_bridgeObjectRelease(v77);
          swift_bridgeObjectRelease(v81);
          if ((v106 & 1) != 0)
          {
LABEL_24:
            v76 = swift_bridgeObjectRelease(v77);
            v88 = (void (*)(char *, uint64_t))v179;
            if (!v69)
            {
LABEL_39:
              v130 = v159;
              v131 = defaultLogger()(v76);
              v132 = Logger.logObject.getter(v131);
              v133 = static os_log_type_t.debug.getter(v132);
              if (os_log_type_enabled(v132, v133))
              {
                v134 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v134 = 0;
                _os_log_impl((void *)&_mh_execute_header, v132, v133, "ISO18013IssuerAuthenticator successfully validated consistency of response.", v134, 2u);
                swift_slowDealloc(v134, -1, -1);
              }

              v88(v130, v180);
              return sub_100008030(v71, &qword_100633990);
            }
            goto LABEL_25;
          }
        }
        else
        {
          swift_bridgeObjectRelease(v77);
        }
        v116 = swift_bridgeObjectRelease(v69);
        v117 = v164;
        v118 = defaultLogger()(v116);
        __chkstk_darwin(v118);
        Logger.sensitive(_:)(sub_10004448C);
        swift_bridgeObjectRelease(v77);
        v179(v117, v180);
        v98 = v166;
        v99 = *(void (**)(char *, _QWORD, uint64_t))(v165 + 104);
        v119 = v71;
        v100 = v167;
        v99(v166, enum case for DIPError.Code.documentReaderDocSignerCountryInconsistent(_:), v167);
        v120 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v102 = type metadata accessor for DIPError(0);
        v121 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v104 = swift_allocError(v102, v121, 0, 0);
        v122 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000045, 0x8000000100541910, 0, v98, 0, v120, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000036, 0x8000000100541880, 421);
        swift_willThrow(v122);
        v123 = v119;
LABEL_33:
        sub_100008030(v123, &qword_100633990);
        goto LABEL_34;
      }
    }
    v88 = (void (*)(char *, uint64_t))v179;
    if (!v69)
      goto LABEL_39;
LABEL_25:
    v107 = SecCertificateRef.stateOrProvinceName.getter(v76);
    if (!v108)
    {
      v110 = v69;
      goto LABEL_38;
    }
    v109 = v107;
    v110 = v108;
    v111 = defaultLogger()(v107);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.debug.getter(v112);
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v114 = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "ISO18013IssuerAuthenticator performing issuing jurisdiction consistency check.", v114, 2u);
      swift_slowDealloc(v114, -1, -1);
    }

    v88(v158, v180);
    v100 = v167;
    if (v173 == v109 && v69 == v110
      || (v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v173, v69, v109, v110, 0), (v115 & 1) != 0))
    {
      swift_bridgeObjectRelease(v69);
      v71 = v183;
LABEL_38:
      v76 = swift_bridgeObjectRelease(v110);
      goto LABEL_39;
    }
    v148 = v164;
    v149 = defaultLogger()(v115);
    __chkstk_darwin(v149);
    Logger.sensitive(_:)(sub_100044480);
    swift_bridgeObjectRelease(v110);
    swift_bridgeObjectRelease(v69);
    v88(v148, v180);
    v98 = v166;
    v99 = *(void (**)(char *, _QWORD, uint64_t))(v165 + 104);
    v99(v166, enum case for DIPError.Code.documentReaderDocSignerIssuingJurisdictionInconsistent(_:), v100);
    v150 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v102 = type metadata accessor for DIPError(0);
    v151 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v104 = swift_allocError(v102, v151, 0, 0);
    v152 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000052, 0x8000000100541820, 0, v98, 0, v150, 0xD000000000000075, 0x8000000100540EB0, 0xD000000000000036, 0x8000000100541880, 430);
    swift_willThrow(v152);
    v123 = v183;
    goto LABEL_33;
  }
  v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v45, v47, 0);
  swift_bridgeObjectRelease(v47);
  v129 = swift_bridgeObjectRelease(v94);
  v72 = v181;
  if ((v128 & 1) != 0)
    goto LABEL_36;
  v135 = v155;
  defaultLogger()(v129);
  v136 = v153;
  v137 = v156;
  v138 = v154;
  v139 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 16))(v156, v173, v154);
  v140 = Logger.logObject.getter(v139);
  v141 = static os_log_type_t.debug.getter(v140);
  if (os_log_type_enabled(v140, v141))
  {
    v142 = (uint8_t *)swift_slowAlloc(12, -1);
    v143 = swift_slowAlloc(32, -1);
    v186 = v143;
    *(_DWORD *)v142 = 136315138;
    v144 = ISO18013Response.Document.docType.getter(v143);
    v146 = v145;
    v184 = sub_1000E3AC8(v144, v145, &v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v142 + 4);
    swift_bridgeObjectRelease(v146);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v156, v138);
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "ISO18013IssuerAuthenticator skipping consistency check on document with type %s", v142, 0xCu);
    swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1, -1);
    swift_slowDealloc(v142, -1, -1);

    v147 = v155;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v138);

    v147 = v135;
  }
  return v179(v147, v180);
}

uint64_t sub_100044480()
{
  uint64_t v0;

  return sub_10004135C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10004448C()
{
  uint64_t v0;

  return sub_100041284(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100044498()
{
  return sub_1000410CC();
}

unint64_t sub_1000444A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  Swift::String v64;
  Swift::Bool v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint8_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(char *, uint64_t);
  void (*v99)(char *, uint64_t);
  _BOOL8 v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  os_log_type_t v108;
  _DWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  Class isa;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  Swift::String v119;
  _QWORD *v120;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD v129[2];
  void (*v130)(char *, uint64_t, uint64_t);
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  char *v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[2];
  uint64_t v164;
  unint64_t v165;

  v153 = a3;
  v155 = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v157 = *(_QWORD *)(v3 - 8);
  v158 = v3;
  __chkstk_darwin(v3);
  v159 = (char *)v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100630A48);
  v6 = __chkstk_darwin(v5);
  v133 = (char *)v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v137 = (char *)v129 - v9;
  v10 = __chkstk_darwin(v8);
  v140 = (char *)v129 - v11;
  __chkstk_darwin(v10);
  v139 = (char *)v129 - v12;
  v13 = sub_100004828(&qword_100630F80);
  __chkstk_darwin(v13);
  v143 = (char *)v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v156 = sub_100004828(&qword_100630FA8);
  v141 = *(_QWORD *)(v156 - 8);
  v15 = __chkstk_darwin(v156);
  v147 = (char *)v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v160 = (char *)v129 - v17;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v134 = (char *)v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v136 = (char *)v129 - v23;
  v24 = __chkstk_darwin(v22);
  v145 = (char *)v129 - v25;
  v26 = __chkstk_darwin(v24);
  v144 = (char *)v129 - v27;
  v28 = __chkstk_darwin(v26);
  v148 = (char *)v129 - v29;
  v30 = __chkstk_darwin(v28);
  v142 = (char *)v129 - v31;
  v32 = __chkstk_darwin(v30);
  v149 = (char *)v129 - v33;
  v34 = __chkstk_darwin(v32);
  v138 = (char *)v129 - v35;
  v36 = __chkstk_darwin(v34);
  v146 = (char *)v129 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)v129 - v39;
  v41 = __chkstk_darwin(v38);
  v43 = (char *)v129 - v42;
  v44 = defaultLogger()(v41);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v161 = v18;
  if (v47)
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "encrypting and saving item to CloudKit", v48, 2u);
    v49 = v48;
    v18 = v161;
    swift_slowDealloc(v49, -1, -1);
  }

  v50 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  v51 = v50(v43, v18);
  v52 = IdentityDocument.image.getter(v51);
  if (v53 >> 60 != 15)
  {
    v62 = v53;
    v152 = v52;
    v63 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v64._countAndFlagsBits = 0xD00000000000001ALL;
    v64._object = (void *)0x8000000100541E70;
    v65 = NSUserDefaults.internalBool(forKey:)(v64);

    v67 = v160;
    v151 = v62;
    v68 = v156;
    if (v65)
    {
      v66 = static DIPFeatures.sharedInstance.getter(v66);
      if (v66)
      {
        Data._bridgeToObjectiveC()();
        __asm { BR              X10 }
      }
    }
    v69 = defaultLogger()(v66);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.debug.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Starting to encrypt images", v72, 2u);
      v73 = v72;
      v18 = v161;
      swift_slowDealloc(v73, -1, -1);
    }

    v50(v40, v18);
    v74 = &v67[*(int *)(v68 + 48)];
    v75 = v153[3];
    v76 = v153[4];
    sub_10000806C(v153, v75);
    v135 = (void (*)(char *, uint64_t))v50;
    v77 = v152;
    v78 = Data.base64EncodedData(options:)(0, v152, v62);
    v80 = v79;
    v163[0] = v78;
    v163[1] = v79;
    v81 = sub_100049540();
    v82 = sub_100049584();
    v83 = v154;
    dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)(v67, v74, v163, &type metadata for Data, v81, v82, v75, v76);
    v60 = v83;
    if (v83)
    {
      sub_100007F8C(v78, v80);
      sub_100007F78(v77, v151);
      v54 = v158;
      v56 = v159;
      v55 = v157;
      goto LABEL_24;
    }
    v154 = (uint64_t)v74;
    v129[1] = 0;
    v84 = sub_100007F8C(v78, v80);
    v85 = v146;
    v86 = defaultLogger()(v84);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.debug.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Images encryption complete", v89, 2u);
      swift_slowDealloc(v89, -1, -1);
    }

    v90 = v135;
    v135(v85, v161);
    v91 = v147;
    v92 = &v147[*(int *)(v156 + 48)];
    v93 = sub_100004828(&qword_100630F90);
    v94 = *(_QWORD *)(v93 - 8);
    v132 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
    v132(v91, v160, v93);
    v95 = type metadata accessor for AEADKey(0);
    v96 = *(_QWORD *)(v95 - 8);
    v130 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
    v130(v92, v154, v95);
    v164 = SealedMessage.data.getter(v93);
    v165 = v97;
    v98 = *(void (**)(char *, uint64_t))(v94 + 8);
    v146 = (char *)v93;
    v98(v91, v93);
    v99 = *(void (**)(char *, uint64_t))(v96 + 8);
    v131 = v95;
    v99(v92, v95);
    v100 = shouldIncludeUnencryptedData()();
    v101 = v151;
    v102 = v155;
    v103 = v150;
    if (v100)
    {
      v104 = v138;
      v105 = defaultLogger()(v100);
      v106 = Logger.logObject.getter(v105);
      v108 = static os_log_type_t.info.getter(v106, v107);
      if (os_log_type_enabled(v106, v108))
      {
        v109 = (_DWORD *)swift_slowAlloc(12, -1);
        v163[0] = swift_slowAlloc(32, -1);
        *v109 = 136446210;
        __asm { BR              X10 }
      }

      v90(v104, v161);
      v110 = v164;
      v111 = v165;
      v164 = v152;
      v165 = v101;
      sub_100022948(v152, v101);
      sub_100007F8C(v110, v111);
    }
    v112 = v164;
    v113 = v165;
    sub_100022948(v164, v165);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100007F8C(v112, v113);
    v115 = (id)DigestSha256(isa);

    if (v115)
    {
      v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

      sub_100022948(v116, v118);
      v119 = Data.base64EncodedString(options:)(0);
      sub_100007F8C(v116, v118);
      v120 = (_QWORD *)(v103 + 24);
      swift_beginAccess(v103 + 24, v163, 33, 0);
      if (v119._object)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v120);
        v162 = *v120;
        *v120 = 0x8000000000000000;
        sub_100481594(v119._countAndFlagsBits, (uint64_t)v119._object, v102, isUniquelyReferenced_nonNull_native);
        v122 = *v120;
        *v120 = v162;
        goto LABEL_23;
      }
    }
    else
    {
      swift_beginAccess(v103 + 24, v163, 33, 0);
    }
    sub_10047F000(v102);
    v122 = v123;
LABEL_23:
    swift_bridgeObjectRelease(v122);
    swift_endAccess(v163);
    __asm { BR              X12 }
  }
  v55 = v157;
  v54 = v158;
  v56 = v159;
  (*(void (**)(char *, _QWORD, uint64_t))(v157 + 104))(v159, enum case for DIPError.Code.invalidStoredData(_:), v158);
  v57 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v58 = type metadata accessor for DIPError(0);
  v59 = sub_100007F30();
  v60 = swift_allocError(v58, v59, 0, 0);
  v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100541E20, 0, v56, 0, v57, 0xD000000000000080, 0x8000000100541CC0, 0xD000000000000027, 0x8000000100541E40, 33);
  swift_willThrow(v61);
LABEL_24:
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v56, enum case for DIPError.Code.internalError(_:), v54);
  swift_errorRetain(v60);
  v124 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v125 = type metadata accessor for DIPError(0);
  v126 = sub_100007F30();
  swift_allocError(v125, v126, 0, 0);
  v127 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v60, v56, 0, v124, 0xD000000000000080, 0x8000000100541CC0, 0xD000000000000027, 0x8000000100541E40, 90);
  swift_willThrow(v127);
  swift_errorRelease(v60);
  return v124;
}

void sub_100045D40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;

  *(_QWORD *)(v4 - 400) = 0xEE006B636142746ELL;
  v5 = *(_QWORD *)(v4 - 400);
  *(_QWORD *)(v4 - 72) = sub_1000E3AC8(a1, v5, (uint64_t *)(v4 - 152));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 72, v4 - 64, v2 + 4);
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(v2 + 12) = 2080;
  v6 = *(_QWORD *)(v4 - 440);
  sub_1000495C8(v3, v6);
  v7 = *(_QWORD *)(v4 - 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v1) == 1)
  {
    sub_100008030(v6, &qword_100630A48);
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  else
  {
    v11 = v6;
    v9 = URL.absoluteString.getter(v8);
    v10 = v12;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v1);
  }
  v13 = *(_QWORD *)(v4 - 240);
  *(_QWORD *)(v4 - 72) = sub_1000E3AC8(v9, v10, (uint64_t *)(v4 - 152));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 72, v4 - 64, v2 + 14);
  swift_bridgeObjectRelease(v10);
  sub_100008030(*(_QWORD *)(v4 - 408), &qword_100630A48);
  v14 = *(NSObject **)(v4 - 224);
  _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)*(_DWORD *)(v4 - 232), "Successfully persisted assetData to disk for assetType: %s at path: %s", (uint8_t *)v2, 0x16u);
  swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v2, -1, -1);

  JUMPOUT(0x100045F64);
}

void sub_100045D78()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 400) = 0xE600000000000000;
  JUMPOUT(0x100045DE0);
}

void sub_100045D94()
{
  JUMPOUT(0x100045DD8);
}

void sub_100045DB8()
{
  JUMPOUT(0x100045DD4);
}

void sub_100045F88(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v5 = defaultLogger()(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "This should never happen.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_100007F78(*(_QWORD *)(v4 - 288), *(_QWORD *)(v4 - 296));
  sub_100007F78(*(_QWORD *)(v4 - 328), *(_QWORD *)(v4 - 280));
  v2(*(_QWORD *)(v4 - 432), *(_QWORD *)(v4 - 208));
  sub_100008030(v3, &qword_100630A48);
  sub_100008030(v1, &qword_100630FA8);
  sub_100007F8C(*(_QWORD *)(v4 - 104), *(_QWORD *)(v4 - 96));
  JUMPOUT(0x100045C64);
}

uint64_t sub_10004621C(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  _DWORD *v52;
  void (*v53)(char *, uint64_t);
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  id v63;
  id v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Swift::String v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_unfair_lock_s *v82;
  uint64_t v83;
  os_unfair_lock_s *v84;
  uint64_t (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  os_unfair_lock_s *v90;
  os_unfair_lock_s *v91;
  os_unfair_lock_s *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  os_unfair_lock_s *v99;
  uint64_t v100;
  os_unfair_lock_s *v101;
  uint64_t v102;
  os_unfair_lock_s *v103;
  os_unfair_lock_s *v104;
  os_unfair_lock_s *v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t);
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  _DWORD *v119;
  void (*v120)(char *, uint64_t);
  id v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  _BOOL4 v133;
  _DWORD *v134;
  Class isa;
  id v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  Swift::String v140;
  _QWORD *v141;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  id v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;

  v187 = a3;
  v193 = a2;
  v192 = a1;
  v190 = type metadata accessor for DIPError.Code(0);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v191 = (char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100630F80);
  __chkstk_darwin(v4);
  v152 = (char *)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100004828(&qword_100630F88);
  v6 = __chkstk_darwin(v150);
  v151 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v162 = (char *)&v145 - v8;
  v161 = type metadata accessor for AEADKey(0);
  v167 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for UUID(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100004828(&qword_100630F90);
  v166 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v158 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v12);
  v168 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v173 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v171 = (char *)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v177 = (char *)&v145 - v17;
  v165 = type metadata accessor for DIPFileUploadCryptor.Result(0);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v178 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPFileUploadCryptor.Options(0);
  v175 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v145 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for AES.GCM.Nonce(0);
  *((_QWORD *)&v184 + 1) = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  *(_QWORD *)&v184 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SymmetricKeySize(0);
  __chkstk_darwin(v23);
  v181 = (unint64_t)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for SymmetricKey(0);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v180 = (uint64_t)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v157 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v163 = (char *)&v145 - v31;
  v32 = __chkstk_darwin(v30);
  v154 = (char *)&v145 - v33;
  v34 = __chkstk_darwin(v32);
  v153 = (char *)&v145 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v145 - v37;
  v39 = __chkstk_darwin(v36);
  v156 = (char *)&v145 - v40;
  v41 = __chkstk_darwin(v39);
  v170 = (char *)&v145 - v42;
  v43 = __chkstk_darwin(v41);
  v169 = (char *)&v145 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v145 - v46;
  v48 = defaultLogger()(v45);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.debug.getter(v49);
  v51 = os_log_type_enabled(v49, v50);
  v188 = v26;
  v174 = v14;
  v176 = v19;
  v179 = v21;
  v155 = v38;
  if (v51)
  {
    v146 = (void (*)(char *, uint64_t))v27;
    v52 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)&v194 = swift_slowAlloc(32, -1);
    *v52 = 136315138;
    __asm { BR              X10 }
  }

  v53 = *(void (**)(char *, uint64_t))(v27 + 8);
  v53(v47, v26);
  v54 = v193;
  if (!v192)
  {
    *(_QWORD *)&v194 = 0;
    *((_QWORD *)&v194 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v71._object = (void *)0x8000000100541DA0;
    v71._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v71);
    __asm { BR              X10 }
  }
  v146 = v53;
  v192 = v192;
  v55 = v181;
  static SymmetricKeySize.bits128.getter();
  v56 = v180;
  SymmetricKey.init(size:)(v55);
  v57 = v186;
  SymmetricKey.withUnsafeBytes<A>(_:)(&v194, sub_10004876C, 0, &type metadata for Data);
  v58 = (*(uint64_t (**)(uint64_t, unint64_t))(v182 + 8))(v56, v183);
  v59 = v194;
  v60 = v184;
  AES.GCM.Nonce.init()(v58);
  AES.GCM.Nonce.withUnsafeBytes<A>(_:)(&v194, sub_10004876C, 0, &type metadata for Data);
  v61 = v57;
  (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)&v184 + 1) + 8))(v60, v185);
  v62 = v194;
  v63 = objc_msgSend(objc_allocWithZone((Class)NSUUID), "init");
  v64 = objc_msgSend(v63, "UUIDString");

  v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v66 = v65;

  v67 = v187[3];
  v68 = v187[4];
  sub_10000806C(v187, v67);
  v69 = dispatch thunk of IdentityKey.getIdentityPublicKeyData()(v67, v68);
  if (!v57)
  {
    v72 = v69;
    v73 = v70;
    swift_bridgeObjectRetain(v66);
    sub_100022948(v59, *((unint64_t *)&v59 + 1));
    sub_100022948(v62, *((unint64_t *)&v62 + 1));
    sub_100022948(v72, v73);
    v74 = v179;
    v183 = *((_QWORD *)&v59 + 1);
    DIPFileUploadCryptor.Options.init(eraseInputFileData:copyDataForInternalDiagnostics:uuid:key:nonce:publicKey:)(1, 1, v186, v66, v59, *((_QWORD *)&v59 + 1), v62, *((_QWORD *)&v62 + 1), v72, v73);
    v75 = static DIPFileUploadCryptor.encryptFileHandle(_:withOptions:)(v192, v74);
    v187 = v66;
    v180 = v72;
    v181 = v73;
    v184 = v62;
    v185 = v59;
    v77 = v177;
    v78 = DIPFileUploadCryptor.Result.encryptedFileURL.getter(v75);
    v79 = (uint64_t)v168;
    DIPFileUploadCryptor.Result.internalDiagnosticsURL.getter(v78);
    v80 = v172 + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL;
    swift_beginAccess(v172 + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL, &v194, 33, 0);
    sub_1000494F8(v79, v80);
    swift_endAccess(&v194);
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v81 = qword_1006702A0;
    v82 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v83 = (uint64_t)&v82[4];
    v84 = v82 + 52;
    os_unfair_lock_lock(v82 + 52);
    sub_100139D14(v83, v81, &v194);
    v85 = (uint64_t (*)(char *, uint64_t))v146;
    v86 = v174;
    v87 = v171;
    v88 = v170;
    os_unfair_lock_unlock(v84);
    v89 = v195;
    swift_retain(v195);
    sub_10001D410(&v194);
    v90 = *(os_unfair_lock_s **)(v89 + 16);
    v91 = v90 + 4;
    v92 = v90 + 6;
    os_unfair_lock_lock(v90 + 6);
    sub_1001DC9CC(v91);
    os_unfair_lock_unlock(v92);
    v93 = swift_release(v89);
    v94 = defaultLogger()(v93);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.debug.getter(v95);
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v97 = 134217984;
      v98 = qword_1006702A0;
      v99 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
      v100 = (uint64_t)&v99[4];
      v101 = v99 + 52;
      os_unfair_lock_lock(v99 + 52);
      sub_100139D14(v100, v98, &v194);
      os_unfair_lock_unlock(v101);
      v102 = v195;
      swift_retain(v195);
      sub_10001D410(&v194);
      v103 = *(os_unfair_lock_s **)(v102 + 16);
      v104 = v103 + 4;
      v105 = v103 + 6;
      os_unfair_lock_lock(v103 + 6);
      sub_100003C14(v104, &v196);
      v182 = 0;
      os_unfair_lock_unlock(v105);
      v106 = v196;
      swift_release(v102);
      *(_QWORD *)&v194 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, (char *)&v194 + 8, v97 + 4);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Current upload count: %ld", v97, 0xCu);
      swift_slowDealloc(v97, -1, -1);
      v86 = v174;
      v77 = v177;
      v107 = (uint64_t (*)(char *, uint64_t))v146;
      v87 = v171;
      v88 = v170;
    }
    else
    {
      v182 = 0;
      v107 = v85;
    }

    v113 = v188;
    v114 = v107(v169, v188);
    defaultLogger()(v114);
    v115 = v173;
    v169 = *(char **)(v173 + 16);
    v116 = ((uint64_t (*)(char *, char *, uint64_t))v169)(v87, v77, v86);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.debug.getter(v117);
    if (os_log_type_enabled(v117, v118))
    {
      v119 = (_DWORD *)swift_slowAlloc(22, -1);
      *(_QWORD *)&v194 = swift_slowAlloc(64, -1);
      *v119 = 136315394;
      __asm { BR              X10 }
    }
    v120 = *(void (**)(char *, uint64_t))(v115 + 8);
    v120(v87, v86);

    v107(v88, v113);
    v121 = v192;
    v122 = v182;
    v123 = Data.init(contentsOf:options:)(v77, 8);
    v125 = v179;
    v126 = v187;
    if (v122)
    {

      sub_100007F8C(v180, v181);
      sub_100007F8C(v184, *((unint64_t *)&v184 + 1));
      sub_100007F8C(v185, v183);
      swift_bridgeObjectRelease(v126);
      v120(v77, v86);
      (*(void (**)(char *, uint64_t))(v164 + 8))(v178, v165);
      (*(void (**)(char *, uint64_t))(v175 + 8))(v125, v176);
      v61 = v122;
      goto LABEL_8;
    }
    v127 = v123;
    v128 = v124;
    v129 = v156;
    defaultLogger()(v123);
    sub_100022948(v127, v128);
    v130 = sub_100022948(v127, v128);
    v131 = Logger.logObject.getter(v130);
    v132 = static os_log_type_t.debug.getter(v131);
    v133 = os_log_type_enabled(v131, v132);
    v182 = v127;
    v171 = (char *)v128;
    v190 = v128 >> 62;
    if (v133)
    {
      v134 = (_DWORD *)swift_slowAlloc(12, -1);
      *(_QWORD *)&v194 = swift_slowAlloc(32, -1);
      *v134 = 136446210;
      __asm { BR              X10 }
    }
    sub_100007F8C(v127, v128);
    sub_100007F8C(v127, v128);

    v146(v129, v188);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v136 = (id)DigestSha256(isa);

    if (v136)
    {
      v137 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v136);
      v139 = v138;

      sub_100022948(v137, v139);
      v140 = Data.base64EncodedString(options:)(0);
      sub_100007F8C(v137, v139);
      v141 = (_QWORD *)(v172 + 24);
      swift_beginAccess(v172 + 24, &v194, 33, 0);
      if (v140._object)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v141);
        v196 = *v141;
        *v141 = 0x8000000000000000;
        sub_100481594(v140._countAndFlagsBits, (uint64_t)v140._object, v193, isUniquelyReferenced_nonNull_native);
        v143 = *v141;
        *v141 = v196;
        swift_bridgeObjectRelease(v143);
        goto LABEL_25;
      }
    }
    else
    {
      swift_beginAccess(v172 + 24, &v194, 33, 0);
      v139 = 0xF000000000000000;
    }
    sub_10047F000(v193);
    swift_bridgeObjectRelease(v144);
LABEL_25:
    v191 = (char *)v139;
    swift_endAccess(&v194);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease(v66);
  sub_100007F8C(v62, *((unint64_t *)&v62 + 1));
  sub_100007F8C(v59, *((unint64_t *)&v59 + 1));

LABEL_8:
  v76 = v191;
  (*(void (**)(char *, _QWORD, uint64_t))(v189 + 104))(v191, enum case for DIPError.Code.internalError(_:), v190);
  swift_errorRetain(v61);
  v108 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v109 = type metadata accessor for DIPError(0);
  v110 = sub_100007F30();
  swift_allocError(v109, v110, 0, 0);
  v111 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v61, v76, 0, v108, 0xD000000000000080, 0x8000000100541CC0, 0xD000000000000038, 0x8000000100541DE0, 150);
  swift_willThrow(v111);
  swift_errorRelease(v61);
  return v61;
}

uint64_t sub_10004876C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100048780(a1, a2, a3);
}

uint64_t sub_100048780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  v4 = sub_10000806C(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_100111B50(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_100111C10((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_100111C88((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_100048848(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = v4;
  *(_BYTE *)(v5 + 201) = a3;
  *(_BYTE *)(v5 + 200) = a2;
  *(_QWORD *)(v5 + 56) = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v5 + 80) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 88) = v7;
  *(_QWORD *)(v5 + 96) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v5 + 104) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 112) = v9;
  *(_QWORD *)(v5 + 120) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 128) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 136) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 144) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 152) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 160) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 168) = swift_task_alloc(v12);
  return swift_task_switch(sub_10004892C, 0, 0);
}

void sub_10004892C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v2 = *(_QWORD *)(v1 + 56);
  if (!((unint64_t)v2 >> 62))
  {
    if (*(uint64_t *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      goto LABEL_3;
LABEL_29:
    v3 = (uint64_t *)(v1 + 144);
    v26 = defaultLogger()(a1);
    v5 = Logger.logObject.getter(v26);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "No assets to upload, exiting";
      goto LABEL_31;
    }
LABEL_32:
    v27 = *v3;
    v28 = *(_QWORD *)(v1 + 128);
    v29 = *(_QWORD *)(v1 + 136);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    v30 = *(_QWORD *)(v1 + 160);
    v32 = *(_QWORD *)(v1 + 144);
    v31 = *(_QWORD *)(v1 + 152);
    v33 = *(_QWORD *)(v1 + 120);
    v34 = *(_QWORD *)(v1 + 96);
    swift_task_dealloc(*(_QWORD *)(v1 + 168));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    (*(void (**)(void))(v1 + 8))();
    return;
  }
  if (v2 < 0)
    v24 = *(_QWORD *)(v1 + 56);
  else
    v24 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 56));
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  a1 = swift_bridgeObjectRelease(v2);
  if (v25 < 1)
    goto LABEL_29;
LABEL_3:
  if (qword_10062F4A0 != -1)
    a1 = swift_once(&qword_10062F4A0, sub_10019C540);
  if (*(_BYTE *)(v1 + 201) == 1)
  {
    v3 = (uint64_t *)(v1 + 168);
    v4 = defaultLogger()(a1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "User has opted out of uploading data on expensive network";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
      swift_slowDealloc(v7, -1, -1);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  v9 = qword_1006702B0;
  v10 = *(NSObject **)(v1 + 64);
  if (v10)
    dispatch_group_enter(v10);
  v11 = *(_QWORD *)(v1 + 56);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v13 = *(_QWORD *)(v1 + 56);
    else
      v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (!v12)
      goto LABEL_24;
  }
  else
  {
    v12 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (!v12)
    {
LABEL_24:
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
      v20 = *(_BYTE *)(v1 + 200);
      v21 = *(_QWORD *)(v1 + 56);
      *(_OWORD *)(v1 + 32) = 0u;
      *(_QWORD *)(v1 + 48) = 0;
      *(_OWORD *)(v1 + 16) = 0u;
      v22 = swift_task_alloc(48);
      *(_QWORD *)(v1 + 176) = v22;
      *(_QWORD *)(v22 + 16) = v9;
      *(_QWORD *)(v22 + 24) = v21;
      *(_BYTE *)(v22 + 32) = 1;
      *(_BYTE *)(v22 + 33) = v20;
      *(_QWORD *)(v22 + 40) = v1 + 16;
      v23 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v1 + 184) = v23;
      *v23 = v1;
      v23[1] = sub_100048CB0;
      withCheckedThrowingContinuation<A>(isolation:function:_:)(v23, 0, 0, 0xD00000000000003FLL, 0x80000001005400F0, sub_10002298C, v22, (char *)&type metadata for () + 8);
      return;
    }
  }
  if (v12 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v14 = 0;
      do
      {
        v15 = *(unsigned __int8 *)(v1 + 200);
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14++, *(_QWORD *)(v1 + 56));
        v35[0] = v16;
        sub_10004908C(v35, v15, 0);
        swift_unknownObjectRelease(v16);
      }
      while (v12 != v14);
    }
    else
    {
      v17 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 32);
      do
      {
        v18 = *(unsigned __int8 *)(v1 + 200);
        v19 = *v17++;
        v35[0] = v19;
        sub_10004908C(v35, v18, 0);
        --v12;
      }
      while (v12);
    }
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t sub_100048CB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100048E44;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 176));
    v4 = sub_100048D1C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100048D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_100008030(v0 + 16, (uint64_t *)&unk_1006371C0);
  v2 = defaultLogger()(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Upload has successfully completed!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (v9)
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 64));
  v10 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  sub_100008030(v0 + 16, (uint64_t *)&unk_1006371C0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.internalError(_:), v8);
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100541CA0, v1, v5, 0, v9, 0xD000000000000080, 0x8000000100541CC0, 0xD000000000000049, 0x8000000100541D50, 211);
  v10 = sub_100007F30();
  v11 = swift_allocError(v4, v10, 0, 0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v14 = v12(v13, v3, v4);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v2);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v26);
  swift_errorRelease(v11);
  v15 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v1;
  swift_errorRetain(v1);
  swift_errorRelease(v15);
  swift_allocError(v4, v10, 0, 0);
  v17 = v12(v16, v3, v4);
  swift_willThrow(v17);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v3, v4);
  if (v27)
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 64));
  v18 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004908C(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  defaultLogger()(v9);
  v13 = swift_retain_n(v12, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v19[2] = a2;
    v19[3] = a3;
    v20 = v8;
    v21 = v7;
    v16 = (_DWORD *)swift_slowAlloc(24, -1);
    v23 = swift_slowAlloc(32, -1);
    *v16 = 136446722;
    v17 = *(unsigned __int8 *)(v12 + 48);
    v22 = v3;
    __asm { BR              X10 }
  }

  swift_release_n(v12, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100049380()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_errorRelease(v0[5]);
  sub_100008030((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingAssetUploadManager_livenessFlowInternalDiagnosticsVideoURL, &qword_100630A48);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000493D8()
{
  return type metadata accessor for IdentityProofingAssetUploadManager(0);
}

uint64_t type metadata accessor for IdentityProofingAssetUploadManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100630E20;
  if (!qword_100630E20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityProofingAssetUploadManager);
  return result;
}

void sub_10004941C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = "\b";
  sub_1000494A4(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1000494A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100630E38)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100630E38);
  }
}

uint64_t sub_1000494F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100049540()
{
  unint64_t result;

  result = qword_100630F98;
  if (!qword_100630F98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100630F98);
  }
  return result;
}

unint64_t sub_100049584()
{
  unint64_t result;

  result = qword_100630FA0;
  if (!qword_100630FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100630FA0);
  }
  return result;
}

uint64_t sub_1000495C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6[22] = a5;
  v6[23] = v5;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[25] = v8;
  v6[26] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[27] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[28] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[29] = swift_task_alloc(v11);
  v6[30] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000496B0, 0, 0);
}

uint64_t sub_1000496B0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1[22];
  v3 = v1[20];
  defaultLogger()(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v25 = v1[28];
    v26 = v1[27];
    v27 = v1[30];
    v7 = v1[21];
    v8 = v1[22];
    v10 = v1[19];
    v9 = v1[20];
    v11 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v28 = v24;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    v1[16] = sub_1000E3AC8(v10, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17, v11 + 4);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    if (v8)
      v12 = v7;
    else
      v12 = 0;
    if (v8)
      v13 = v2;
    else
      v13 = 0xE000000000000000;
    swift_bridgeObjectRetain(v2);
    v1[17] = sub_1000E3AC8(v12, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v11 + 14);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "hasDocumentCredential: docType %s region %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v14 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v14(v27, v26);
  }
  else
  {
    v15 = v1[30];
    v16 = v1[27];
    v17 = v1[28];
    swift_bridgeObjectRelease_n(v1[20], 2);
    swift_bridgeObjectRelease_n(v2, 2);

    v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  v1[31] = v14;
  v18 = (_QWORD *)v1[23];
  v19 = sub_10000806C(v18 + 3, v18[6]);
  v20 = v18[2];
  v1[32] = v20;
  v21 = *v19;
  v22 = (_QWORD *)swift_task_alloc(dword_100632A9C);
  v1[33] = v22;
  *v22 = v1;
  v22[1] = sub_100049928;
  return sub_1000A369C(v20, v1[19], v1[20], v1[21], v1[22], v21);
}

uint64_t sub_100049928(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v2 + 264);
  v4 = *v2;
  *(_QWORD *)(v4 + 272) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1000499C8, 0, 0);
  v5 = *(_QWORD *)(v4 + 232);
  v6 = *(_QWORD *)(v4 + 208);
  swift_task_dealloc(*(_QWORD *)(v4 + 240));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
}

void sub_1000499C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class isa;
  id v22;
  NSString v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 280) = v2;
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    v3 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 288) = v3;
      v5 = *(_QWORD *)(v0 + 256);
      if (v3 >= *(_QWORD *)(v5 + 16))
        break;
      if (*(_QWORD *)(*(_QWORD *)(v0 + 272) + 16))
      {
        v6 = v5 + 16 * v3;
        v7 = *(_QWORD *)(v6 + 40);
        v8 = *(_QWORD *)(v6 + 32);
        swift_bridgeObjectRetain(v7);
        v9 = sub_1004A8604(v8, v7);
        if ((v10 & 1) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 272) + 56) + 8 * v9);
          *(_QWORD *)(v0 + 296) = v11;
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRelease(v7);
          v12 = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v0 + 304) = v12;
          if (v12)
          {
            v16 = v0 + 16;
            *(_QWORD *)(v0 + 312) = 0;
            v17 = *(_QWORD *)(v0 + 184);
            v18 = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 40);
            *(_QWORD *)(v0 + 320) = v18;
            v19 = *sub_10000806C((_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 48));
            swift_bridgeObjectRetain(v18);
            v20 = objc_allocWithZone((Class)DCCredentialStore);
            swift_bridgeObjectRetain(v19);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v19);
            v22 = objc_msgSend(v20, "initWithPartitions:", isa);
            *(_QWORD *)(v0 + 328) = v22;

            v23 = String._bridgeToObjectiveC()();
            *(_QWORD *)(v0 + 336) = v23;
            *(_QWORD *)(v0 + 56) = v0 + 120;
            *(_QWORD *)(v0 + 16) = v0;
            *(_QWORD *)(v0 + 24) = sub_100049C1C;
            v24 = swift_continuation_init(v0 + 16, 1);
            *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
            v25 = (_QWORD *)(v0 + 80);
            v25[1] = 0x40000000;
            v25[2] = sub_1000180F8;
            v25[3] = &unk_100604FB0;
            v25[4] = v24;
            objc_msgSend(v22, "propertiesOfCredential:completion:", v23, v25);
            swift_continuation_await(v16);
            return;
          }
          v4 = v11;
        }
        else
        {
          v4 = v7;
        }
        swift_bridgeObjectRelease(v4);
      }
      v3 = *(_QWORD *)(v0 + 288) + 1;
      if (v3 == *(_QWORD *)(v0 + 280))
      {
        v13 = *(_QWORD *)(v0 + 272);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 272);
LABEL_13:
    swift_bridgeObjectRelease(v13);
    v14 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    (*(void (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100049C1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 344) = v1;
  if (v1)
    v2 = sub_10004A108;
  else
    v2 = sub_100049C7C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100049C7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class isa;
  id v39;
  NSString v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(void **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 320);

  v3 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 352) = v3;

  swift_bridgeObjectRelease(v2);
  switch((unint64_t)objc_msgSend(v3, "credentialState"))
  {
    case 0uLL:
      v4 = 0xD000000000000027;
      v5 = 0x8000000100542110;
      v6 = 0x3961636436363565;
      goto LABEL_9;
    case 1uLL:
      v4 = 0xD00000000000002ALL;
      v5 = 0x8000000100542140;
      v6 = 0x6132343336333437;
      goto LABEL_9;
    case 2uLL:
      v7 = objc_msgSend(v3, "options");
      v8 = objc_msgSend(v7, "presentmentAuthPolicy");

      if (v8 != (id)2 || objc_msgSend(v3, "hasUsablePresentmentAuthPolicy"))
      {
        if ((sub_10004B7D8(*(_QWORD *)(v0 + 144)) & 1) != 0)
        {
          v9 = (_QWORD *)swift_task_alloc(dword_1006310B4);
          *(_QWORD *)(v0 + 360) = v9;
          *v9 = v0;
          v9[1] = sub_10004A294;
          v10 = *(_QWORD *)(v0 + 184);
          v9[17] = v3;
          v9[18] = v10;
          return swift_task_switch(sub_10004A6F0, 0, 0);
        }
        v28 = *(void **)(v0 + 352);
        v29 = *(_QWORD *)(v0 + 296);
        v30 = *(_QWORD *)(v0 + 272);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v29);
        v31._object = (void *)0x8000000100542170;
        v32._countAndFlagsBits = 0x3461313037376433;
        v32._object = (void *)0xE800000000000000;
        v31._countAndFlagsBits = 0xD000000000000026;
        logMilestone(tag:description:)(v32, v31);

        v25 = 1;
        goto LABEL_21;
      }
      v4 = 0xD000000000000046;
      v5 = 0x80000001005421A0;
      v6 = 0x3237336231333930;
LABEL_9:
      v12 = 0xE800000000000000;
      logMilestone(tag:description:)(*(Swift::String *)&v6, *(Swift::String *)&v4);
LABEL_10:

      v13 = *(_QWORD *)(v0 + 312) + 1;
      if (v13 != *(_QWORD *)(v0 + 304))
        goto LABEL_24;
      v14 = *(_QWORD *)(v0 + 296);
      while (2)
      {
        while (2)
        {
          swift_bridgeObjectRelease(v14);
          do
          {
            v15 = *(_QWORD *)(v0 + 288) + 1;
            if (v15 == *(_QWORD *)(v0 + 280))
            {
              v24 = *(_QWORD *)(v0 + 272);
              swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
              swift_bridgeObjectRelease(v24);
              v25 = 0;
LABEL_21:
              v26 = *(_QWORD *)(v0 + 232);
              v27 = *(_QWORD *)(v0 + 208);
              swift_task_dealloc(*(_QWORD *)(v0 + 240));
              swift_task_dealloc(v26);
              swift_task_dealloc(v27);
              return (*(uint64_t (**)(uint64_t))(v0 + 8))(v25);
            }
            *(_QWORD *)(v0 + 288) = v15;
            v16 = *(_QWORD *)(v0 + 256);
            if (v15 >= *(_QWORD *)(v16 + 16))
            {
              __break(1u);
              JUMPOUT(0x10004A0F8);
            }
          }
          while (!*(_QWORD *)(*(_QWORD *)(v0 + 272) + 16));
          v17 = v16 + 16 * v15;
          v18 = *(_QWORD *)(v17 + 40);
          v19 = *(_QWORD *)(v17 + 32);
          swift_bridgeObjectRetain(v18);
          v20 = sub_1004A8604(v19, v18);
          if ((v21 & 1) == 0)
          {
            v14 = v18;
            continue;
          }
          break;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 272) + 56) + 8 * v20);
        *(_QWORD *)(v0 + 296) = v22;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRelease(v18);
        v23 = *(_QWORD *)(v22 + 16);
        *(_QWORD *)(v0 + 304) = v23;
        if (!v23)
        {
          v14 = v22;
          continue;
        }
        break;
      }
      v13 = 0;
LABEL_24:
      v33 = v0 + 16;
      *(_QWORD *)(v0 + 312) = v13;
      v34 = *(_QWORD *)(v0 + 184);
      v35 = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 16 * v13 + 40);
      *(_QWORD *)(v0 + 320) = v35;
      v36 = *sub_10000806C((_QWORD *)(v34 + 24), *(_QWORD *)(v34 + 48));
      swift_bridgeObjectRetain(v35);
      v37 = objc_allocWithZone((Class)DCCredentialStore);
      swift_bridgeObjectRetain(v36);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v36);
      v39 = objc_msgSend(v37, "initWithPartitions:", isa);
      *(_QWORD *)(v0 + 328) = v39;

      v40 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 336) = v40;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100049C1C;
      v41 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v42 = (_QWORD *)(v0 + 80);
      v42[1] = 0x40000000;
      v42[2] = sub_1000180F8;
      v42[3] = &unk_100604FB0;
      v42[4] = v41;
      objc_msgSend(v39, "propertiesOfCredential:completion:", v40, v42);
      return swift_continuation_await(v33);
    case 3uLL:
      v4 = 0xD000000000000029;
      v5 = 0x80000001005420E0;
      v6 = 0x6236626235616361;
      goto LABEL_9;
    default:
      goto LABEL_10;
  }
}

uint64_t sub_10004A108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *(void **)(v1 + 336);
  v2 = *(_QWORD *)(v1 + 344);
  v5 = *(_QWORD *)(v1 + 320);
  v4 = *(void **)(v1 + 328);
  v6 = *(_QWORD *)(v1 + 272);
  v17 = *(_QWORD *)(v1 + 296);
  v18 = *(_QWORD *)(v1 + 256);
  v7 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 208);
  v9 = *(_QWORD *)(v1 + 192);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v2);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100007F30();
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v10, 0xD000000000000055, 0x8000000100541FC0, 0x69747265706F7270, 0xEF293A666F287365, 126);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  v14 = *(_QWORD *)(v1 + 232);
  v15 = *(_QWORD *)(v1 + 208);
  swift_task_dealloc(*(_QWORD *)(v1 + 240));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_10004A294(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 360);
  *(_QWORD *)(*v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 296);
    v7 = *(_QWORD *)(v4 + 256);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 272));
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    v8 = sub_10004A67C;
  }
  else
  {
    *(_BYTE *)(v4 + 376) = a1 & 1;
    v8 = sub_10004A32C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_10004A32C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Class isa;
  id v37;
  NSString v38;
  uint64_t v39;
  _QWORD *v40;

  v2 = *(unsigned __int8 *)(v1 + 376);
  if ((v2 & 1) != 0)
  {
    v3 = defaultLogger()(a1);
    v4 = Logger.logObject.getter(v3);
    v6 = static os_log_type_t.info.getter(v4, v5);
    if (os_log_type_enabled(v4, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v6, "DigitalPresentmentCredentialManager hasDocumentCredential: Biometrics are disabled for Apple Pay & Wallet and calling client is a 1st party biometrics disabled special case", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    v9 = *(_QWORD *)(v1 + 232);
    v10 = *(_QWORD *)(v1 + 216);

    v8(v9, v10);
    v11 = *(_QWORD *)(v1 + 312) + 1;
    if (v11 == *(_QWORD *)(v1 + 304))
    {
      v12 = *(_QWORD *)(v1 + 296);
      while (2)
      {
        while (2)
        {
          result = swift_bridgeObjectRelease(v12);
          do
          {
            v14 = *(_QWORD *)(v1 + 288) + 1;
            if (v14 == *(_QWORD *)(v1 + 280))
            {
              v28 = *(_QWORD *)(v1 + 272);
              swift_bridgeObjectRelease(*(_QWORD *)(v1 + 256));
              swift_bridgeObjectRelease(v28);
              goto LABEL_16;
            }
            *(_QWORD *)(v1 + 288) = v14;
            v15 = *(_QWORD *)(v1 + 256);
            if (v14 >= *(_QWORD *)(v15 + 16))
            {
              __break(1u);
              return result;
            }
          }
          while (!*(_QWORD *)(*(_QWORD *)(v1 + 272) + 16));
          v16 = v15 + 16 * v14;
          v17 = *(_QWORD *)(v16 + 40);
          v18 = *(_QWORD *)(v16 + 32);
          swift_bridgeObjectRetain(v17);
          v19 = sub_1004A8604(v18, v17);
          if ((v20 & 1) == 0)
          {
            v12 = v17;
            continue;
          }
          break;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 272) + 56) + 8 * v19);
        *(_QWORD *)(v1 + 296) = v21;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRelease(v17);
        v22 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v1 + 304) = v22;
        if (!v22)
        {
          v12 = v21;
          continue;
        }
        break;
      }
      v11 = 0;
    }
    v31 = v1 + 16;
    *(_QWORD *)(v1 + 312) = v11;
    v32 = *(_QWORD *)(v1 + 184);
    v33 = *(_QWORD *)(*(_QWORD *)(v1 + 296) + 16 * v11 + 40);
    *(_QWORD *)(v1 + 320) = v33;
    v34 = *sub_10000806C((_QWORD *)(v32 + 24), *(_QWORD *)(v32 + 48));
    swift_bridgeObjectRetain(v33);
    v35 = objc_allocWithZone((Class)DCCredentialStore);
    swift_bridgeObjectRetain(v34);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34);
    v37 = objc_msgSend(v35, "initWithPartitions:", isa);
    *(_QWORD *)(v1 + 328) = v37;

    v38 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v1 + 336) = v38;
    *(_QWORD *)(v1 + 56) = v1 + 120;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_100049C1C;
    v39 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v40 = (_QWORD *)(v1 + 80);
    v40[1] = 0x40000000;
    v40[2] = sub_1000180F8;
    v40[3] = &unk_100604FB0;
    v40[4] = v39;
    objc_msgSend(v37, "propertiesOfCredential:completion:", v38, v40);
    return swift_continuation_await(v31);
  }
  else
  {
    v23 = *(void **)(v1 + 352);
    v24 = *(_QWORD *)(v1 + 296);
    v25 = *(_QWORD *)(v1 + 272);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 256));
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v24);
    v26._object = (void *)0x8000000100542170;
    v27._countAndFlagsBits = 0x3461313037376433;
    v27._object = (void *)0xE800000000000000;
    v26._countAndFlagsBits = 0xD000000000000026;
    logMilestone(tag:description:)(v27, v26);

LABEL_16:
    v29 = *(_QWORD *)(v1 + 232);
    v30 = *(_QWORD *)(v1 + 208);
    swift_task_dealloc(*(_QWORD *)(v1 + 240));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(v2 ^ 1u);
  }
}

uint64_t sub_10004A67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10004A6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch(sub_10004A6F0, 0, 0);
}

uint64_t sub_10004A6F0()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = objc_msgSend(*(id *)(v0 + 136), "options");
  v2 = objc_msgSend(v1, "presentmentAuthPolicy");

  if (v2 != (id)2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v3 = *(_QWORD **)(v0 + 144);
  v4 = v3[11];
  v5 = v3[12];
  sub_10000806C(v3 + 8, v4);
  v6 = *(int **)(v5 + 8);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 152) = v7;
  *v7 = v0;
  v7[1] = sub_10004A7C4;
  return v9(v4, v5);
}

uint64_t sub_10004A7C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 152);
  v4 = *v2;
  *(_QWORD *)(v4 + 160) = a1;
  *(_QWORD *)(v4 + 168) = v1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(0);
  else
    return swift_task_switch(sub_10004A83C, 0, 0);
}

uint64_t sub_10004A83C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  char v16;

  v1 = *(void **)(v0 + 160);
  if (!v1)
  {
    v10 = 0;
LABEL_6:
    v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v9 = v10 & 1;
    return v8(v9);
  }
  v2 = *(_QWORD *)(v0 + 168);
  type metadata accessor for SecAccessControl(0);
  v3 = objc_msgSend(v1, "aclData");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = (void *)static SecAccessControlRef.fromData(_:)(v4, v6);
  sub_100007F8C(v4, v6);
  if (!v2)
  {
    v11 = objc_allocWithZone((Class)LAContext);
    v12 = v7;
    v13 = objc_msgSend(v11, "init");
    *(_QWORD *)(v0 + 120) = sub_10004BBDC();
    *(_QWORD *)(v0 + 128) = &off_100619EF0;
    *(_QWORD *)(v0 + 96) = v13;
    v14 = type metadata accessor for DigitalPresentmentLocalAuthenticationManager();
    inited = swift_initStackObject(v14, v0 + 16);
    *(_BYTE *)(inited + 64) = 4;
    *(_QWORD *)(inited + 72) = 0;
    sub_100008018((__int128 *)(v0 + 96), inited + 16);
    *(_QWORD *)(inited + 56) = v12;
    v16 = sub_10046654C();

    swift_setDeallocating(inited);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(inited + 16));

    swift_bridgeObjectRelease(*(_QWORD *)(inited + 72));
    v10 = v16 ^ 1;
    goto LABEL_6;
  }

  v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v9 = 0;
  return v8(v9);
}

uint64_t sub_10004A9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a3;
  v4[6] = v3;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AA44, 0, 0);
}

uint64_t sub_10004AA44()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;

  v1 = (_QWORD *)v0[6];
  v2 = sub_10000806C(v1 + 3, v1[6]);
  v3 = v1[2];
  v4 = *v2;
  v5 = (uint64_t **)swift_task_alloc(dword_100632A94);
  v0[13] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_10004AAAC;
  return sub_1000A3A6C(v3, v0[4], v0[5], v4);
}

uint64_t sub_10004AAAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10004AD88;
  else
    v5 = sub_10004AB18;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004AB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  swift_bridgeObjectRetain_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v1 + 112);
    v22 = *(_QWORD *)(v1 + 88);
    v23 = *(_QWORD *)(v1 + 80);
    v24 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 40);
    v20 = *(_QWORD *)(v1 + 32);
    v9 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v25 = v21;
    *(_DWORD *)v9 = 136315394;
    v10 = swift_bridgeObjectRetain(v7);
    v11 = Set.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v11, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v7, 2);
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v20, v8, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v9 + 14);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "activeRegionsForDocType returning activeRegions %s for docType %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 88);
    v14 = *(_QWORD *)(v1 + 96);
    v16 = *(_QWORD *)(v1 + 80);
    v17 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 112), 2);
    swift_bridgeObjectRelease_n(v17, 2);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v18 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 112));
}

uint64_t sub_10004AD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100007F30();
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD00000000000007ALL, 0x8000000100542020, 0xD000000000000035, 0x80000001005420A0, 98);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AF08, 0, 0);
}

uint64_t sub_10004AF08()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;

  v2 = v0[17];
  v1 = (_QWORD *)v0[18];
  v3 = sub_10000806C(v1 + 3, v1[6]);
  v4 = v1[2];
  v0[22] = v4;
  v5 = *v3;
  v6 = (uint64_t **)swift_task_alloc(dword_100632A8C);
  v0[23] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_10004AF80;
  return sub_1000A3024(v4, v0[16], v2, v5);
}

uint64_t sub_10004AF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 184);
  v4 = *v2;
  *(_QWORD *)(v4 + 192) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10004AFFC, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 168));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_10004AFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class isa;
  id v21;
  NSString v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 200) = v2;
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    v3 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 208) = v3;
      v5 = *(_QWORD *)(v0 + 176);
      if (v3 >= *(_QWORD *)(v5 + 16))
        break;
      if (*(_QWORD *)(*(_QWORD *)(v0 + 192) + 16))
      {
        v6 = v5 + 16 * v3;
        v7 = *(_QWORD *)(v6 + 40);
        v8 = *(_QWORD *)(v6 + 32);
        swift_bridgeObjectRetain(v7);
        v9 = sub_1004A8604(v8, v7);
        if ((v10 & 1) != 0)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 192) + 56) + 8 * v9);
          *(_QWORD *)(v0 + 216) = v11;
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRelease(v7);
          v12 = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v0 + 224) = v12;
          if (v12)
          {
            v14 = v0 + 16;
            *(_QWORD *)(v0 + 232) = 0;
            *(_QWORD *)(v0 + 240) = _swiftEmptyArrayStorage;
            v15 = *(_QWORD *)(v0 + 216);
            v16 = *(_QWORD *)(v0 + 144);
            *(_QWORD *)(v0 + 248) = *(_QWORD *)(v15 + 32);
            v17 = *(_QWORD *)(v15 + 40);
            *(_QWORD *)(v0 + 256) = v17;
            v18 = *sub_10000806C((_QWORD *)(v16 + 24), *(_QWORD *)(v16 + 48));
            swift_bridgeObjectRetain(v17);
            v19 = objc_allocWithZone((Class)DCCredentialStore);
            swift_bridgeObjectRetain(v18);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v18);
            v21 = objc_msgSend(v19, "initWithPartitions:", isa);
            *(_QWORD *)(v0 + 264) = v21;

            v22 = String._bridgeToObjectiveC()();
            *(_QWORD *)(v0 + 272) = v22;
            *(_QWORD *)(v0 + 56) = v0 + 120;
            *(_QWORD *)(v0 + 16) = v0;
            *(_QWORD *)(v0 + 24) = sub_10004B24C;
            v23 = swift_continuation_init(v0 + 16, 1);
            *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
            v24 = (_QWORD *)(v0 + 80);
            v24[1] = 0x40000000;
            v24[2] = sub_1000180F8;
            v24[3] = &unk_100604F98;
            v24[4] = v23;
            objc_msgSend(v21, "propertiesOfCredential:completion:", v22, v24);
            swift_continuation_await(v14);
            return;
          }
          v4 = v11;
        }
        else
        {
          v4 = v7;
        }
        swift_bridgeObjectRelease(v4);
      }
      v3 = *(_QWORD *)(v0 + 208) + 1;
      if (v3 == *(_QWORD *)(v0 + 200))
      {
        v13 = *(_QWORD *)(v0 + 192);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 192);
LABEL_13:
    swift_bridgeObjectRelease(v13);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    (*(void (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10004B24C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 280) = v1;
  if (v1)
    v2 = sub_10004B5F0;
  else
    v2 = sub_10004B2AC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004B2AC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  id v4;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class isa;
  id v31;
  NSString v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;

  v1 = *(void **)(v0 + 272);

  v2 = *(_QWORD **)(v0 + 120);
  if (objc_msgSend(v2, "credentialState") == (id)2
    && ((v3 = objc_msgSend(v2, "options"),
         v4 = objc_msgSend(v3, "presentmentAuthPolicy"),
         v3,
         v4 != (id)2)
     || (objc_msgSend(v2, "hasUsablePresentmentAuthPolicy") & 1) != 0))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 240));
    v6 = *(_QWORD **)(v0 + 240);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_24:
      v6 = sub_1000E2358(0, v6[2] + 1, 1, v6);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_1000E2358((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v10 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 256);
    v6[2] = v8 + 1;
    v11 = &v6[2 * v8];
    v11[4] = v10;
    v11[5] = v9;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
    v6 = *(_QWORD **)(v0 + 240);
  }
  v13 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);

  if (v12 + 1 == v13)
  {
    v14 = *(_QWORD **)(v0 + 216);
    while (2)
    {
      while (2)
      {
        swift_bridgeObjectRelease(v14);
        do
        {
          v15 = *(_QWORD *)(v0 + 208) + 1;
          if (v15 == *(_QWORD *)(v0 + 200))
          {
            v36 = *(_QWORD *)(v0 + 192);
            swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
            swift_bridgeObjectRelease(v36);
            swift_task_dealloc(*(_QWORD *)(v0 + 168));
            return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v6);
          }
          *(_QWORD *)(v0 + 208) = v15;
          v16 = *(_QWORD *)(v0 + 176);
          if (v15 >= *(_QWORD *)(v16 + 16))
          {
            __break(1u);
            goto LABEL_24;
          }
          v2 = *(_QWORD **)(v0 + 192);
        }
        while (!v2[2]);
        v17 = v16 + 16 * v15;
        v18 = *(_QWORD *)(v17 + 40);
        v19 = *(_QWORD *)(v17 + 32);
        swift_bridgeObjectRetain(v18);
        v20 = sub_1004A8604(v19, v18);
        if ((v21 & 1) == 0)
        {
          v14 = (_QWORD *)v18;
          continue;
        }
        break;
      }
      v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v0 + 192) + 56) + 8 * v20);
      *(_QWORD *)(v0 + 216) = v2;
      swift_bridgeObjectRetain(v2);
      swift_bridgeObjectRelease(v18);
      v22 = v2[2];
      *(_QWORD *)(v0 + 224) = v22;
      if (!v22)
      {
        v14 = v2;
        continue;
      }
      break;
    }
    v23 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 232) + 1;
  }
  v24 = v0 + 16;
  *(_QWORD *)(v0 + 232) = v23;
  *(_QWORD *)(v0 + 240) = v6;
  v25 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 216) + 16 * v23;
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v26 + 32);
  v27 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v0 + 256) = v27;
  v28 = *sub_10000806C((_QWORD *)(v25 + 24), *(_QWORD *)(v25 + 48));
  swift_bridgeObjectRetain(v27);
  v29 = objc_allocWithZone((Class)DCCredentialStore);
  swift_bridgeObjectRetain(v28);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  v31 = objc_msgSend(v29, "initWithPartitions:", isa);
  *(_QWORD *)(v0 + 264) = v31;

  v32 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 272) = v32;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10004B24C;
  v33 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v34 = (_QWORD *)(v0 + 80);
  v34[1] = 0x40000000;
  v34[2] = sub_1000180F8;
  v34[3] = &unk_100604F98;
  v34[4] = v33;
  objc_msgSend(v31, "propertiesOfCredential:completion:", v32, v34);
  return swift_continuation_await(v24);
}

uint64_t sub_10004B5F0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void **)(v1 + 272);
  v3 = *(_QWORD *)(v1 + 280);
  v5 = *(_QWORD *)(v1 + 256);
  v4 = *(void **)(v1 + 264);
  v15 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 168);
  v16 = *(_QWORD *)(v1 + 176);
  v17 = *(_QWORD *)(v1 + 240);
  v9 = *(_QWORD *)(v1 + 152);
  v8 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v3);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100007F30();
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v7, 0, v10, 0xD000000000000055, 0x8000000100541FC0, 0x69747265706F7270, 0xEF293A666F287365, 126);
  swift_willThrow(v13);
  swift_errorRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10004B770()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 3);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 8);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for DigitalPresentmentCredentialManager()
{
  return objc_opt_self(_TtC8coreidvd35DigitalPresentmentCredentialManager);
}

void sub_10004B7C4()
{
  off_100630FB0 = &off_1005FFFB0;
}

uint64_t sub_10004B7D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(a1 + *(int *)(v3 + 20));
  sub_10004BC18(a1, (uint64_t)v5);
  if (v6 == 1)
  {
    v7 = *(_QWORD *)&v5[*(int *)(v2 + 24) + 16];
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + 32;
      v33 = *(_QWORD *)&v5[*(int *)(v2 + 24) + 16];
      swift_bridgeObjectRetain_n(v7, 2);
      v10 = 0;
      while (1)
      {
        v11 = (uint64_t *)(v9 + 16 * v10);
        v13 = *v11;
        v12 = v11[1];
        v14 = qword_10062F460;
        swift_bridgeObjectRetain(v12);
        if (v14 != -1)
          swift_once(&qword_10062F460, sub_10004B7C4);
        v15 = off_100630FB0;
        v16 = *((_QWORD *)off_100630FB0 + 2);
        if (v16)
        {
          v17 = *((_QWORD *)off_100630FB0 + 4);
          v18 = *((_QWORD *)off_100630FB0 + 5);
          v19 = v17 == v13 && v18 == v12;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v13, v12, 0) & 1) != 0)
          {
LABEL_30:
            v31 = v33;
            swift_bridgeObjectRelease(v33);
            v30 = 1;
LABEL_31:
            swift_bridgeObjectRelease(v12);
            swift_bridgeObjectRelease(v31);
            goto LABEL_32;
          }
          if (v16 != 1)
          {
            v20 = v15[6];
            v21 = v15[7];
            if (v20 == v13 && v21 == v12)
              goto LABEL_30;
            result = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v13, v12, 0);
            if ((result & 1) != 0)
              goto LABEL_30;
            if (v16 != 2)
            {
              v24 = v15 + 9;
              v25 = 2;
              while (1)
              {
                v26 = v25 + 1;
                if (__OFADD__(v25, 1))
                  break;
                v27 = *(v24 - 1);
                v28 = *v24;
                if (v27 == v13 && v28 == v12)
                  goto LABEL_30;
                result = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v13, v12, 0);
                if ((result & 1) != 0)
                  goto LABEL_30;
                v24 += 2;
                ++v25;
                if (v26 == v16)
                  goto LABEL_4;
              }
              __break(1u);
              return result;
            }
          }
        }
LABEL_4:
        ++v10;
        swift_bridgeObjectRelease(v12);
        if (v10 == v8)
        {
          v30 = 0;
          v31 = v33;
          v12 = v33;
          goto LABEL_31;
        }
      }
    }
  }
  v30 = 0;
LABEL_32:
  sub_10004BC5C((uint64_t)v5);
  return v30;
}

uint64_t sub_10004B9E0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;
  __int128 v14;
  ValueMetadata *v15;
  _UNKNOWN **v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19[4];
  uint64_t (*v20)(uint64_t);
  uint64_t v21;

  sub_10004BB30(a1, (uint64_t)v19);
  if (sub_10004BB78(v19) == 1 || (v3 = v20) == 0)
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    v15 = &type metadata for IDCredBiometricStore;
    v16 = &off_100617380;
    *(_QWORD *)&v14 = objc_msgSend(objc_allocWithZone((Class)DCBiometricStore), "init", swift_bridgeObjectRetain(a2).n128_f64[0]);
    v7 = type metadata accessor for DigitalPresentmentCredentialManager();
    v6 = swift_allocObject(v7, 104, 7);
    *(_QWORD *)(v6 + 16) = a2;
    sub_10002F1A4((uint64_t)v17, (uint64_t)&v9);
    if (v10)
    {
      sub_10004BB9C((uint64_t)v17);
      sub_100008018(&v9, (uint64_t)&v11);
    }
    else
    {
      swift_bridgeObjectRetain(a2);
      sub_10004BB9C((uint64_t)&v9);
      v12 = &type metadata for IDCredCredentialStore;
      v13 = &off_1006070F8;
      *(_QWORD *)&v11 = a2;
      sub_10004BB9C((uint64_t)v17);
    }
    sub_100008018(&v11, v6 + 24);
    sub_100008018(&v14, v6 + 64);
  }
  else
  {
    v4 = v21;
    v5 = swift_retain(v21);
    v6 = v3(v5);
    sub_10002F034((uint64_t)v3, v4);
  }
  return v6;
}

uint64_t sub_10004BB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_1006310A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004BB78(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_10004BB9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100630908);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10004BBDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006310B8;
  if (!qword_1006310B8)
  {
    v1 = objc_opt_self(LAContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1006310B8);
  }
  return result;
}

uint64_t sub_10004BC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004BC5C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10004BC98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  objc_class *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_super v20;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0;
  machServiceIdentityProofingXPC.getter();
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSXPCListener);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithMachServiceName:", v9);

  *(_QWORD *)&v5[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener] = v10;
  v11 = (objc_class *)type metadata accessor for IdentityProofingListener();
  v20.receiver = v5;
  v20.super_class = v11;
  v12 = (char *)objc_msgSendSuper2(&v20, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = defaultLogger()(objc_msgSend(v13, "resume"));
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Identity Proofing XPC listener has started", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

id sub_10004BE6C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Identity Proofing XPC listener is tearing down", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8coreidvd24IdentityProofingListener_xpcListener], "invalidate");
  v11 = (objc_class *)type metadata accessor for IdentityProofingListener();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_10004BFC8()
{
  return sub_10004BFE0("Identity Proofing connection invalidated");
}

uint64_t sub_10004BFD4()
{
  return sub_10004BFE0("Identity Proofing connection interrupted");
}

uint64_t sub_10004BFE0(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t type metadata accessor for IdentityProofingListener()
{
  return objc_opt_self(_TtC8coreidvd24IdentityProofingListener);
}

void sub_10004C14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t Strong;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v7);
  v10 = v0;
  v11 = swift_retain_n(v0, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = swift_slowAlloc(12, -1);
    v43 = v14;
    v16 = (uint8_t *)v15;
    v44 = swift_slowAlloc(32, -1);
    v51 = v44;
    v46 = v3;
    *(_DWORD *)v16 = 136315138;
    v41 = v16 + 4;
    v42 = v16;
    Strong = swift_unknownObjectWeakLoadStrong(v10 + 16);
    v45 = v6;
    v18 = v2;
    v19 = v5;
    v20 = (void *)Strong;
    v49 = Strong;
    v21 = sub_100004828(&qword_10063F270);
    v22 = Optional.debugDescription.getter(v21);
    v47 = v1;
    v24 = v23;

    v5 = v19;
    v2 = v18;
    v25 = v22;
    v26 = v10;
    v49 = sub_1000E3AC8(v25, v24, &v51);
    v3 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v41);
    swift_release_n(v10, 2);
    swift_bridgeObjectRelease(v24);
    v27 = v42;
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v43, "Checking connection %s", v42, 0xCu);
    v28 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v45);
  }
  else
  {

    v26 = v10;
    swift_release_n(v10, 2);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v6);
  }
  v29 = swift_unknownObjectWeakLoadStrong(v26 + 16);
  if (v29)
  {
    v30 = (void *)v29;
    v31._countAndFlagsBits = 0xD000000000000024;
    v31._object = (void *)0x8000000100542370;
    if (!NSXPCConnection.isEntitled(_:)(v31))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
      v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v33 = type metadata accessor for DIPError(0);
      v34 = sub_100007F30();
      swift_allocError(v33, v34, 0, 0);
      v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x80000001005423A0, 0, v5, 0, v32, 0xD00000000000005FLL, 0x80000001005422F0, 0xD000000000000012, 0x8000000100542350, 69);
      swift_willThrow(v35);
    }

  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_100007F30();
    swift_allocError(v37, v38, 0, 0);
    v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x80000001005422B0, 0, v5, 0, v36, 0xD00000000000005FLL, 0x80000001005422F0, 0xD000000000000012, 0x8000000100542350, 66);
    swift_willThrow(v39);
  }
}

uint64_t sub_10004C588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v5[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[13] = v7;
  v5[14] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004C5F0, 0, 0);
}

uint64_t sub_10004C5F0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  sub_10004C14C();
  v1 = qword_100670080;
  if (qword_100670080)
  {
    swift_retain(qword_100670080);
    v2 = (void *)sub_10002D984();
    v3 = v2;
    swift_release(v1);
  }
  else
  {
    v2 = 0;
  }
  v5 = v0[13];
  v4 = v0[14];
  v6 = v0[12];
  v7 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v8 = swift_allocObject(v7, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  sub_1000257E0();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DispatchQoS.QoSClass.default(_:), v6);
  v9 = static OS_dispatch_queue.global(qos:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = sub_1004F5D80(v2, v8, v9);
  v0[15] = v10;
  v11 = swift_allocObject(v7, 24, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v0[5] = v7;
  v0[6] = &off_10060A3B0;
  v0[2] = v11;
  v12 = type metadata accessor for IdentityProofingActionNotificationProvider();
  v13 = (_QWORD *)swift_allocObject(v12, 80, 7);
  v0[16] = v13;
  v14 = sub_10001E624((uint64_t)(v0 + 2), v7);
  v15 = *(_QWORD *)(v7 - 8);
  v16 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v16, v14, v7);
  v17 = *v16;
  v13[5] = v7;
  v13[6] = &off_10060A3B0;
  v13[2] = v17;
  v18 = type metadata accessor for IdentityProofingDatabaseProvider();
  v19 = swift_allocObject(v18, 16, 7);
  v13[8] = 0;
  v13[9] = v19;
  v13[7] = 0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 2);
  swift_task_dealloc(v16);
  v20 = type metadata accessor for IdentityProofingCancellationProvider();
  v21 = swift_allocObject(v20, 32, 7);
  v0[17] = v21;
  *(_QWORD *)(v21 + 16) = v10;
  *(_QWORD *)(v21 + 24) = v13;
  v22 = dword_100635AEC;
  swift_retain(v10);
  swift_retain(v13);
  v23 = (_QWORD *)swift_task_alloc(v22);
  v0[18] = v23;
  *v23 = v0;
  v23[1] = sub_10004C840;
  return sub_10012E870(v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_10004C840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004C8FC;
  else
    v3 = sub_10004C8A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004C8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v1);
  swift_release(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v1);
  swift_release(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004CA88(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_10063117C;
  swift_retain(a4);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_10004CB3C;
  return sub_10004C588(v8, v10, v11, v13);
}

uint64_t sub_10004CB3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(v2);
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  v7 = *(_QWORD *)(v6 + 24);
  if (v0)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004CBFC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for IdentityProofingSessionProxy()
{
  return objc_opt_self(_TtC8coreidvd28IdentityProofingSessionProxy);
}

uint64_t sub_10004CC48()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004CC84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10063122C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))((char *)&dword_100631228 + dword_100631228))(v2, v3, v5, v4);
}

uint64_t sub_10004CD04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004CD30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100643694);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100643690 + dword_100643690))(a1, v4, v5, v6);
}

uint64_t sub_10004CDB4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t result;
  void *v24;
  void *v25;
  void **aBlock;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&aBlock - v8;
  defaultLogger()(v7);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    LODWORD(aBlock) = -[NSObject processIdentifier](v10, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v13 + 4);

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "IdentityProofingListener connection received from %d", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v9, v2);
  type metadata accessor for DIIdentityProofingXPCInterface(0);
  v15 = (void *)static DIIdentityProofingXPCInterface.interface()();
  -[NSObject setExportedInterface:](v10, "setExportedInterface:", v15);

  v16 = type metadata accessor for IdentityProofingSessionProxy();
  v17 = swift_allocObject(v16, 32, 7);
  swift_unknownObjectWeakInit(v17 + 16, 0);
  v18 = v10;
  v19 = defaultLogger()(v18);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Creating IdentityProofingSessionProxy", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v14(v6, v2);
  swift_unknownObjectWeakAssign(v17 + 16, v18);
  result = os_transaction_create("IdentityProofingSessionProxy");
  if (result)
  {
    *(_QWORD *)(v17 + 24) = result;

    -[NSObject setExportedObject:](v18, "setExportedObject:", v17);
    swift_release(v17);
    v30 = sub_10004BFC8;
    v31 = 0;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1004AB190;
    v29 = &unk_100605048;
    v24 = _Block_copy(&aBlock);
    -[NSObject setInvalidationHandler:](v18, "setInvalidationHandler:", v24);
    _Block_release(v24);
    v30 = sub_10004BFD4;
    v31 = 0;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1004AB190;
    v29 = &unk_100605070;
    v25 = _Block_copy(&aBlock);
    -[NSObject setInterruptionHandler:](v18, "setInterruptionHandler:", v25);
    _Block_release(v25);
    -[NSObject resume](v18, "resume");
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004D10C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D11C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10004D12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, _QWORD, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void (*v95)(char *, uint64_t);
  _QWORD *v96;
  uint64_t v97;
  uint8_t *v98;
  uint8_t *v99;
  _QWORD *v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;

  v2 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  v103 = v2;
  v104 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IdentityElement(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v97 - v15);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)&v97 - v15, a1, v10);
  v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 88))(v16, v10);
  if ((_DWORD)v18 == enum case for IdentityElement.ageIsOver(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v16, v10);
    v19 = *v16;
    v20 = sub_100004828(&qword_100640CA0);
    v21 = (_QWORD *)swift_allocObject(v20, 48, 7);
    *((_OWORD *)v21 + 1) = xmmword_10051FFB0;
    v21[4] = static ISO18013_5_1_ElementIdentifier.ageOver(nn:)(v19);
    v21[5] = v22;
    return v21;
  }
  if ((_DWORD)v18 == enum case for IdentityElement.givenName(_:))
  {
    v23 = sub_100004828(&qword_100631260);
    v24 = v104;
    v25 = *(unsigned __int8 *)(v104 + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = (_QWORD *)swift_allocObject(v23, v26 + *(_QWORD *)(v104 + 72), v25 | 7);
    *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
    v28 = (char *)v27 + v26;
    v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.givenName(_:);
LABEL_11:
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v28, *v29, v103);
    goto LABEL_12;
  }
  if ((_DWORD)v18 == enum case for IdentityElement.familyName(_:))
  {
    v30 = sub_100004828(&qword_100631260);
    v24 = v104;
    v31 = *(unsigned __int8 *)(v104 + 80);
    v32 = (v31 + 32) & ~v31;
    v27 = (_QWORD *)swift_allocObject(v30, v32 + *(_QWORD *)(v104 + 72), v31 | 7);
    *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
    v28 = (char *)v27 + v32;
    v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.familyName(_:);
    goto LABEL_11;
  }
  if ((_DWORD)v18 == enum case for IdentityElement.sex(_:))
  {
    v33 = sub_100004828(&qword_100631260);
    v24 = v104;
    v34 = *(unsigned __int8 *)(v104 + 80);
    v35 = (v34 + 32) & ~v34;
    v27 = (_QWORD *)swift_allocObject(v33, v35 + *(_QWORD *)(v104 + 72), v34 | 7);
    *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
    v28 = (char *)v27 + v35;
    v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.sex(_:);
    goto LABEL_11;
  }
  if ((_DWORD)v18 == enum case for IdentityElement.portrait(_:))
  {
    v36 = sub_100004828(&qword_100631260);
    v24 = v104;
    v37 = *(unsigned __int8 *)(v104 + 80);
    v38 = (v37 + 32) & ~v37;
    v27 = (_QWORD *)swift_allocObject(v36, v38 + *(_QWORD *)(v104 + 72), v37 | 7);
    *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
    v28 = (char *)v27 + v38;
    v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.portrait(_:);
    goto LABEL_11;
  }
  if ((_DWORD)v18 == enum case for IdentityElement.address(_:))
  {
    v53 = sub_100004828(&qword_100631260);
    v54 = v104;
    v55 = *(_QWORD *)(v104 + 72);
    v56 = *(unsigned __int8 *)(v104 + 80);
    v57 = (v56 + 32) & ~v56;
    v27 = (_QWORD *)swift_allocObject(v53, v57 + 5 * v55, v56 | 7);
    *((_OWORD *)v27 + 1) = xmmword_1005208C0;
    v58 = (char *)v27 + v57;
    v59 = *(void (**)(char *, _QWORD, uint64_t))(v54 + 104);
    v60 = v103;
    v59(v58, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v103);
    v59(&v58[v55], enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v60);
    v59(&v58[2 * v55], enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v60);
    v59(&v58[3 * v55], enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v60);
    v59(&v58[4 * v55], enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v60);
  }
  else if ((_DWORD)v18 == enum case for IdentityElement.issuingAuthority(_:))
  {
    v61 = sub_100004828(&qword_100631260);
    v62 = v104;
    v63 = *(_QWORD *)(v104 + 72);
    v64 = *(unsigned __int8 *)(v104 + 80);
    v65 = (v64 + 32) & ~v64;
    v27 = (_QWORD *)swift_allocObject(v61, v65 + 4 * v63, v64 | 7);
    *((_OWORD *)v27 + 1) = xmmword_1005208B0;
    v66 = (char *)v27 + v65;
    v67 = *(void (**)(char *, _QWORD, uint64_t))(v62 + 104);
    v68 = v103;
    v67(v66, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v103);
    v67(&v66[v63], enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v68);
    v67(&v66[2 * v63], enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v68);
    v67(&v66[3 * v63], enum case for ISO18013_5_1_ElementIdentifier.unDistinguishingSign(_:), v68);
  }
  else
  {
    if ((_DWORD)v18 != enum case for IdentityElement.documentDHSComplianceStatus(_:))
    {
      if ((_DWORD)v18 == enum case for IdentityElement.documentIssueDate(_:))
      {
        v69 = sub_100004828(&qword_100631260);
        v24 = v104;
        v70 = *(unsigned __int8 *)(v104 + 80);
        v71 = (v70 + 32) & ~v70;
        v27 = (_QWORD *)swift_allocObject(v69, v71 + *(_QWORD *)(v104 + 72), v70 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v71;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:);
        goto LABEL_11;
      }
      if ((_DWORD)v18 == enum case for IdentityElement.documentExpirationDate(_:))
      {
        v72 = sub_100004828(&qword_100631260);
        v24 = v104;
        v73 = *(unsigned __int8 *)(v104 + 80);
        v74 = (v73 + 32) & ~v73;
        v27 = (_QWORD *)swift_allocObject(v72, v74 + *(_QWORD *)(v104 + 72), v73 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v74;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:);
        goto LABEL_11;
      }
      if ((_DWORD)v18 == enum case for IdentityElement.documentNumber(_:))
      {
        v75 = sub_100004828(&qword_100631260);
        v24 = v104;
        v76 = *(unsigned __int8 *)(v104 + 80);
        v77 = (v76 + 32) & ~v76;
        v27 = (_QWORD *)swift_allocObject(v75, v77 + *(_QWORD *)(v104 + 72), v76 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v77;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:);
        goto LABEL_11;
      }
      if ((_DWORD)v18 == enum case for IdentityElement.drivingPrivileges(_:))
      {
        v78 = sub_100004828(&qword_100631260);
        v24 = v104;
        v79 = *(unsigned __int8 *)(v104 + 80);
        v80 = (v79 + 32) & ~v79;
        v27 = (_QWORD *)swift_allocObject(v78, v80 + *(_QWORD *)(v104 + 72), v79 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v80;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:);
        goto LABEL_11;
      }
      if ((_DWORD)v18 == enum case for IdentityElement.age(_:))
      {
        v81 = sub_100004828(&qword_100631260);
        v24 = v104;
        v82 = *(unsigned __int8 *)(v104 + 80);
        v83 = (v82 + 32) & ~v82;
        v27 = (_QWORD *)swift_allocObject(v81, v83 + *(_QWORD *)(v104 + 72), v82 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v83;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:);
        goto LABEL_11;
      }
      if ((_DWORD)v18 == enum case for IdentityElement.dateOfBirth(_:))
      {
        v84 = sub_100004828(&qword_100631260);
        v24 = v104;
        v85 = *(unsigned __int8 *)(v104 + 80);
        v86 = (v85 + 32) & ~v85;
        v27 = (_QWORD *)swift_allocObject(v84, v86 + *(_QWORD *)(v104 + 72), v85 | 7);
        *((_OWORD *)v27 + 1) = xmmword_10051FFB0;
        v28 = (char *)v27 + v86;
        v29 = (unsigned int *)&enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:);
        goto LABEL_11;
      }
      v102 = v7;
      defaultLogger()(v18);
      v87 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v14, a1, v10);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.debug.getter(v88);
      v101 = v89;
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v100 = (_QWORD *)swift_slowAlloc(32, -1);
        v106 = v100;
        *(_DWORD *)v90 = 136315138;
        v99 = v90 + 12;
        v98 = v90 + 4;
        v91 = sub_10004EAD0();
        v92 = dispatch thunk of CustomStringConvertible.description.getter(v10, v91);
        v94 = v93;
        v105 = sub_1000E3AC8(v92, v93, (uint64_t *)&v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v98);
        swift_bridgeObjectRelease(v94);
        v95 = *(void (**)(char *, uint64_t))(v11 + 8);
        v95(v14, v10);
        _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v101, "unknown element %s", v90, 0xCu);
        v96 = v100;
        swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v90, -1, -1);
      }
      else
      {
        v95 = *(void (**)(char *, uint64_t))(v11 + 8);
        v95(v14, v10);
      }

      ((void (*)(char *, uint64_t))v102[1])(v9, v6);
      v95((char *)v16, v10);
    }
    v27 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  v39 = v27[2];
  if (v39)
  {
    v106 = _swiftEmptyArrayStorage;
    sub_1000E419C(0, v39, 0);
    v40 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    v102 = v27;
    v41 = (char *)v27 + v40;
    v42 = *(_QWORD *)(v104 + 72);
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v104 + 16);
    do
    {
      v44 = v103;
      v45 = v43(v5, v41, v103);
      v46 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v45);
      v48 = v47;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v5, v44);
      v21 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
      {
        sub_1000E419C(0, v21[2] + 1, 1);
        v21 = v106;
      }
      v50 = v21[2];
      v49 = v21[3];
      if (v50 >= v49 >> 1)
      {
        sub_1000E419C(v49 > 1, v50 + 1, 1);
        v21 = v106;
      }
      v21[2] = v50 + 1;
      v51 = &v21[2 * v50];
      v51[4] = v46;
      v51[5] = v48;
      v41 += v42;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease(v102);
  }
  else
  {
    swift_bridgeObjectRelease(v27);
    return _swiftEmptyArrayStorage;
  }
  return v21;
}

_QWORD *sub_10004DADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int *v43;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint64_t v72;
  uint8_t *v73;
  _QWORD *v74;
  uint8_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  _DWORD *v82;
  int v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  v2 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  v88 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v86 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IdentityElement(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v81 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v81 - v14, a1, v9);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v15, v9);
  v18 = _swiftEmptyArrayStorage;
  if ((_DWORD)v17 != enum case for IdentityElement.ageIsOver(_:))
  {
    if ((_DWORD)v17 == enum case for IdentityElement.givenName(_:))
    {
      v19 = sub_100004828(&qword_100631258);
      v20 = v88;
      v21 = *(_QWORD *)(v88 + 72);
      v22 = *(unsigned __int8 *)(v88 + 80);
      v23 = (v22 + 32) & ~v22;
      v24 = swift_allocObject(v19, v23 + 4 * v21, v22 | 7);
      *(_OWORD *)(v24 + 16) = xmmword_1005208B0;
      v25 = v24 + v23;
      v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
      v27 = v87;
      v26(v25, enum case for ISO18013_AAMVA_ElementIdentifier.givenNameTruncation(_:), v87);
      v26(v25 + v21, enum case for ISO18013_AAMVA_ElementIdentifier.akaGivenName(_:), v27);
      v26(v25 + 2 * v21, enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:), v27);
      v18 = (_QWORD *)v24;
      v26(v25 + 3 * v21, enum case for ISO18013_AAMVA_ElementIdentifier.akaSuffix(_:), v27);
      goto LABEL_25;
    }
    if ((_DWORD)v17 == enum case for IdentityElement.familyName(_:))
    {
      v28 = sub_100004828(&qword_100631258);
      v29 = v88;
      v30 = *(_QWORD *)(v88 + 72);
      v31 = *(unsigned __int8 *)(v88 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject(v28, v32 + 2 * v30, v31 | 7);
      *(_OWORD *)(v33 + 16) = xmmword_1005208D0;
      v34 = v33 + v32;
      v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104);
      v36 = v87;
      v35(v34, enum case for ISO18013_AAMVA_ElementIdentifier.familyNameTruncation(_:), v87);
      v37 = v36;
      v18 = (_QWORD *)v33;
      v35(v34 + v30, enum case for ISO18013_AAMVA_ElementIdentifier.akaFamilyName(_:), v37);
      goto LABEL_25;
    }
    if ((_DWORD)v17 == enum case for IdentityElement.sex(_:))
    {
      v38 = sub_100004828(&qword_100631258);
      v39 = v88;
      v40 = *(unsigned __int8 *)(v88 + 80);
      v41 = (v40 + 32) & ~v40;
      v18 = (_QWORD *)swift_allocObject(v38, v41 + *(_QWORD *)(v88 + 72), v40 | 7);
      *((_OWORD *)v18 + 1) = xmmword_10051FFB0;
      v42 = (char *)v18 + v41;
      v43 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:);
LABEL_24:
      (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v42, *v43, v87);
      goto LABEL_25;
    }
    if ((_DWORD)v17 == enum case for IdentityElement.portrait(_:)
      || (_DWORD)v17 == enum case for IdentityElement.address(_:)
      || (_DWORD)v17 == enum case for IdentityElement.issuingAuthority(_:))
    {
LABEL_16:
      v18 = _swiftEmptyArrayStorage;
      goto LABEL_25;
    }
    if ((_DWORD)v17 == enum case for IdentityElement.documentDHSComplianceStatus(_:))
    {
      v46 = sub_100004828(&qword_100631258);
      v39 = v88;
      v47 = *(unsigned __int8 *)(v88 + 80);
      v48 = (v47 + 32) & ~v47;
      v18 = (_QWORD *)swift_allocObject(v46, v48 + *(_QWORD *)(v88 + 72), v47 | 7);
      *((_OWORD *)v18 + 1) = xmmword_10051FFB0;
      v42 = (char *)v18 + v48;
      v43 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:);
      goto LABEL_24;
    }
    v18 = _swiftEmptyArrayStorage;
    if ((_DWORD)v17 != enum case for IdentityElement.documentIssueDate(_:)
      && (_DWORD)v17 != enum case for IdentityElement.documentExpirationDate(_:)
      && (_DWORD)v17 != enum case for IdentityElement.documentNumber(_:))
    {
      if ((_DWORD)v17 == enum case for IdentityElement.drivingPrivileges(_:))
      {
        v49 = sub_100004828(&qword_100631258);
        v39 = v88;
        v50 = *(unsigned __int8 *)(v88 + 80);
        v51 = (v50 + 32) & ~v50;
        v18 = (_QWORD *)swift_allocObject(v49, v51 + *(_QWORD *)(v88 + 72), v50 | 7);
        *((_OWORD *)v18 + 1) = xmmword_10051FFB0;
        v42 = (char *)v18 + v51;
        v43 = (unsigned int *)&enum case for ISO18013_AAMVA_ElementIdentifier.domesticDrivingPrivileges(_:);
        goto LABEL_24;
      }
      if ((_DWORD)v17 != enum case for IdentityElement.age(_:)
        && (_DWORD)v17 != enum case for IdentityElement.dateOfBirth(_:))
      {
        v67 = v8;
        defaultLogger()(v17);
        v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v16)(v13, a1, v9);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.debug.getter(v69);
        v71 = v70;
        if (os_log_type_enabled(v69, v70))
        {
          v85 = v6;
          v72 = swift_slowAlloc(12, -1);
          v83 = v71;
          v73 = (uint8_t *)v72;
          v74 = (_QWORD *)swift_slowAlloc(32, -1);
          v90 = v74;
          v84 = v67;
          *(_DWORD *)v73 = 136315138;
          v82 = v73 + 4;
          v75 = v73;
          v76 = sub_10004EAD0();
          v77 = dispatch thunk of CustomStringConvertible.description.getter(v9, v76);
          v79 = v78;
          v89 = sub_1000E3AC8(v77, v78, (uint64_t *)&v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v82);
          swift_bridgeObjectRelease(v79);
          v80 = *(void (**)(char *, uint64_t))(v10 + 8);
          v80(v13, v9);
          _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v83, "unknown element %s", v75, 0xCu);
          swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1, -1);
          swift_slowDealloc(v75, -1, -1);

          ((void (*)(char *, uint64_t))v86[1])(v84, v85);
        }
        else
        {
          v80 = *(void (**)(char *, uint64_t))(v10 + 8);
          v80(v13, v9);

          ((void (*)(char *, uint64_t))v86[1])(v67, v6);
        }
        v80(v15, v9);
        goto LABEL_16;
      }
    }
  }
LABEL_25:
  v52 = v18[2];
  if (v52)
  {
    v90 = _swiftEmptyArrayStorage;
    sub_1000E419C(0, v52, 0);
    v53 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    v86 = v18;
    v54 = (char *)v18 + v53;
    v55 = *(_QWORD *)(v88 + 72);
    v56 = *(uint64_t (**)(char *, char *, uint64_t))(v88 + 16);
    do
    {
      v57 = v87;
      v58 = v56(v5, v54, v87);
      v59 = ISO18013_AAMVA_ElementIdentifier.rawValue.getter(v58);
      v61 = v60;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v5, v57);
      v62 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
      {
        sub_1000E419C(0, v62[2] + 1, 1);
        v62 = v90;
      }
      v64 = v62[2];
      v63 = v62[3];
      if (v64 >= v63 >> 1)
      {
        sub_1000E419C(v63 > 1, v64 + 1, 1);
        v62 = v90;
      }
      v62[2] = v64 + 1;
      v65 = &v62[2 * v64];
      v65[4] = v59;
      v65[5] = v61;
      v54 += v55;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease(v86);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    return _swiftEmptyArrayStorage;
  }
  return v62;
}

uint64_t sub_10004E224(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *);
  char *v74;
  int64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  int v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  char *v83;
  _QWORD *v84;

  v73 = a2;
  v3 = type metadata accessor for IdentityIntentToStore(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v83 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v82 = (char *)&v67 - v7;
  v8 = type metadata accessor for IdentityElement(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v78 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100630AD0);
  v12 = __chkstk_darwin(v11);
  v74 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v67 - v14;
  v16 = (_QWORD *)sub_10011DD40((uint64_t)_swiftEmptyArrayStorage);
  v17 = *(_QWORD *)(a1 + 64);
  v68 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v79 = v19 & v17;
  v80 = enum case for IdentityIntentToStore.willNotStore(_:);
  v69 = (unint64_t)(v18 + 63) >> 6;
  v70 = a1;
  v67 = v69 - 1;
  v20 = swift_bridgeObjectRetain(a1);
  v75 = 0;
  v76 = v15;
  v71 = v9;
  v72 = v8;
  while (1)
  {
    if (v79)
    {
      v21 = __clz(__rbit64(v79));
      v79 &= v79 - 1;
      v22 = v21 | (v75 << 6);
LABEL_7:
      v23 = v70;
      v24 = (uint64_t)v74;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v74, *(_QWORD *)(v70 + 48) + *(_QWORD *)(v9 + 72) * v22, v8, v20);
      v25 = *(_QWORD *)(v23 + 56) + *(_QWORD *)(v4 + 72) * v22;
      v26 = sub_100004828(&qword_100630AE8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v24 + *(int *)(v26 + 48), v25, v3);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v24, 0, 1, v26);
      v15 = v76;
      goto LABEL_26;
    }
    v27 = v75 + 1;
    if (__OFADD__(v75, 1))
      goto LABEL_61;
    v24 = (uint64_t)v74;
    if (v27 < v69)
    {
      v28 = *(_QWORD *)(v68 + 8 * v27);
      if (v28)
        goto LABEL_11;
      v29 = v75 + 2;
      ++v75;
      if (v27 + 1 < v69)
      {
        v28 = *(_QWORD *)(v68 + 8 * v29);
        if (v28)
          goto LABEL_14;
        v75 = v27 + 1;
        if (v27 + 2 < v69)
        {
          v28 = *(_QWORD *)(v68 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_11;
          }
          v29 = v27 + 3;
          v75 = v27 + 2;
          if (v27 + 3 < v69)
          {
            v28 = *(_QWORD *)(v68 + 8 * v29);
            if (v28)
            {
LABEL_14:
              v27 = v29;
LABEL_11:
              v79 = (v28 - 1) & v28;
              v22 = __clz(__rbit64(v28)) + (v27 << 6);
              v75 = v27;
              goto LABEL_7;
            }
            while (1)
            {
              v27 = v29 + 1;
              if (__OFADD__(v29, 1))
                goto LABEL_62;
              if (v27 >= v69)
                break;
              v28 = *(_QWORD *)(v68 + 8 * v27);
              ++v29;
              if (v28)
                goto LABEL_11;
            }
            v75 = v67;
          }
        }
      }
    }
    v30 = sub_100004828(&qword_100630AE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v24, 1, 1, v30);
    v79 = 0;
LABEL_26:
    sub_100038A98(v24, (uint64_t)v15);
    v31 = sub_100004828(&qword_100630AE8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v15, 1, v31) == 1)
    {
      swift_release(v70);
      return (uint64_t)v16;
    }
    v32 = &v15[*(int *)(v31 + 48)];
    v33 = v15;
    v34 = v78;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v78, v33, v8);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v82, v32, v3);
    v35 = v73(v34);
    v36 = *(_QWORD *)(v35 + 16);
    v77 = v35;
    if (v36)
      break;
LABEL_4:
    swift_bridgeObjectRelease(v77);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v82, v3);
    v9 = v71;
    v8 = v72;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v78, v72);
    v15 = v76;
  }
  v81 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v37 = (uint64_t *)(v35 + 40);
  while (1)
  {
    v39 = *(v37 - 1);
    v38 = *v37;
    v40 = v83;
    v81(v83, v82, v3);
    v41 = v4;
    LODWORD(v40) = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v40, v3);
    swift_bridgeObjectRetain(v38);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    if ((_DWORD)v40 != v80)
    {
      v84 = v16;
      v52 = sub_1004A8604(v39, v38);
      v53 = v16[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_58;
      v56 = v51;
      if (v16[3] < v55)
      {
        sub_100124B90(v55, isUniquelyReferenced_nonNull_native);
        v57 = sub_1004A8604(v39, v38);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_63;
        v52 = v57;
        v16 = v84;
        if ((v56 & 1) == 0)
          goto LABEL_42;
LABEL_50:
        *(_BYTE *)(v16[7] + v52) = 1;
LABEL_51:
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(0x8000000000000000);
        v4 = v41;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v83, v3);
        goto LABEL_31;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v16 = v84;
        if ((v51 & 1) != 0)
          goto LABEL_50;
      }
      else
      {
        sub_10012A094();
        v16 = v84;
        if ((v56 & 1) != 0)
          goto LABEL_50;
      }
LABEL_42:
      v16[(v52 >> 6) + 8] |= 1 << v52;
      v59 = (uint64_t *)(v16[6] + 16 * v52);
      *v59 = v39;
      v59[1] = v38;
      *(_BYTE *)(v16[7] + v52) = 1;
      v60 = v16[2];
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_59;
      v16[2] = v62;
      swift_bridgeObjectRetain(v38);
      goto LABEL_51;
    }
    v84 = v16;
    v44 = sub_1004A8604(v39, v38);
    v45 = v16[2];
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
      break;
    v48 = v43;
    if (v16[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v16 = v84;
        if ((v43 & 1) == 0)
          goto LABEL_46;
      }
      else
      {
        sub_10012A094();
        v16 = v84;
        if ((v48 & 1) == 0)
          goto LABEL_46;
      }
    }
    else
    {
      sub_100124B90(v47, isUniquelyReferenced_nonNull_native);
      v49 = sub_1004A8604(v39, v38);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_63;
      v44 = v49;
      v16 = v84;
      if ((v48 & 1) == 0)
      {
LABEL_46:
        v16[(v44 >> 6) + 8] |= 1 << v44;
        v63 = (uint64_t *)(v16[6] + 16 * v44);
        *v63 = v39;
        v63[1] = v38;
        *(_BYTE *)(v16[7] + v44) = 0;
        v64 = v16[2];
        v61 = __OFADD__(v64, 1);
        v65 = v64 + 1;
        if (v61)
          goto LABEL_60;
        v16[2] = v65;
        swift_bridgeObjectRetain(v38);
        goto LABEL_30;
      }
    }
    *(_BYTE *)(v16[7] + v44) = 0;
LABEL_30:
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(0x8000000000000000);
    v4 = v41;
LABEL_31:
    v37 += 2;
    if (!--v36)
      goto LABEL_4;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10004E8F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;

  v2 = type metadata accessor for ISO18013KnownNamespaces(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10011DE50((uint64_t)_swiftEmptyArrayStorage);
  v7 = *(int *)(type metadata accessor for ValidatedDigitalPresentmentRequest(0) + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = sub_10004E224(v8, (uint64_t (*)(char *))sub_10004D12C);
  v10 = v9;
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v2);
    v12 = ISO18013KnownNamespaces.rawValue.getter(v11);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v25 = v6;
    sub_1004816D0(v10, v12, v14, isUniquelyReferenced_nonNull_native);
    v6 = v25;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0x8000000000000000);
    v8 = *(_QWORD *)(a1 + v7);
  }
  else
  {
    swift_bridgeObjectRelease(v9);
  }
  v16 = sub_10004E224(v8, (uint64_t (*)(char *))sub_10004DADC);
  v17 = v16;
  if (*(_QWORD *)(v16 + 16))
  {
    v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ISO18013KnownNamespaces.iso18013_5_1_aamva(_:), v2);
    v19 = ISO18013KnownNamespaces.rawValue.getter(v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v22 = swift_isUniquelyReferenced_nonNull_native(v6);
    v25 = v6;
    sub_1004816D0(v17, v19, v21, v22);
    v6 = v25;
    swift_bridgeObjectRelease(v21);
    v16 = 0x8000000000000000;
  }
  swift_bridgeObjectRelease(v16);
  return v6;
}

unint64_t sub_10004EAD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100631250;
  if (!qword_100631250)
  {
    v1 = type metadata accessor for IdentityElement(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IdentityElement, v1);
    atomic_store(result, (unint64_t *)&qword_100631250);
  }
  return result;
}

uint64_t sub_10004EB18()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  void *v22;
  char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  void *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD aBlock[5];
  uint64_t v73;
  char *v74;

  v1 = v0;
  v2 = (_QWORD *)type metadata accessor for DIPError.Code(0);
  v65 = *(v2 - 1);
  v66 = v2;
  __chkstk_darwin(v2);
  v68 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v60 - v8;
  v10 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost(0);
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  v14 = *(_QWORD *)(v70 + 64);
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v60 - v17;
  static DaemonSignposts.requestDocumentSheet.getter(v16);
  v69 = v18;
  DIPSignpost.init(_:)(v12);
  v19 = v74;
  v20 = sub_10004F050();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v69, v71);
  v22 = v20;
  v62 = v14;
  v63 = v4;
  v64 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v7;
  v24 = v67;
  v23 = v68;
  v61 = v1;
  v25 = objc_msgSend(objc_allocWithZone((Class)PKPaymentAuthorizationCoordinator), "initWithPaymentRequest:", v20);
  if (!v25)
  {
    (*(void (**)(char *, _QWORD, id))(v65 + 104))(v23, enum case for DIPError.Code.dpAuthorizationCoordinatorCreateFailure(_:), v66);
    v55 = v22;
    v56 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v57, v58, 0, 0);
    v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000059, 0x8000000100542580, 0, v23, 0, v56, 0xD000000000000074, 0x8000000100542500, 0x28746E6573657270, 0xE900000000000029, 48);
    swift_willThrow(v59);

    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v69, v71);
  }
  v26 = v25;
  v68 = 0;
  v66 = v22;
  v27 = defaultLogger()(v25);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "DigitalPresentmentUIPresenter.present: Created PKPaymentAuthorizedCoordinator.", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v31 = *(void (**)(char *, uint64_t))(v63 + 8);
  v31(v9, v24);
  v32 = v61;
  objc_msgSend(v26, "_setPrivateDelegate:", *(_QWORD *)&v61[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_privateDelegate]);
  v33 = *(void **)&v32[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator];
  *(_QWORD *)&v32[OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator] = v26;
  v34 = v26;

  v35 = v74;
  v37 = defaultLogger()(v36);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v62;
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "DigitalPresentmentUIPresenter.present: Calling coordinator.present()", v42, 2u);
    v43 = v42;
    v35 = v74;
    swift_slowDealloc(v43, -1, -1);
  }

  v31(v35, v24);
  v45 = v69;
  v44 = v70;
  v46 = v64;
  v47 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v64, v69, v71);
  v48 = *(unsigned __int8 *)(v44 + 80);
  v49 = (v48 + 16) & ~v48;
  v50 = (v41 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = swift_allocObject(&unk_1006050F8, v50 + 8, v48 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v51 + v49, v46, v47);
  *(_QWORD *)(v51 + v50) = v32;
  aBlock[4] = sub_100050508;
  v73 = v51;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004FE74;
  aBlock[3] = &unk_100605110;
  v52 = _Block_copy(aBlock);
  v53 = v73;
  v54 = v32;
  swift_release(v53);
  objc_msgSend(v34, "presentWithCompletion:", v52);
  _Block_release(v52);

  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v47);
}

_QWORD *sub_10004F050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  Class v46;
  id v47;
  unsigned __int8 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, _QWORD *);
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD *);
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, _QWORD, _QWORD *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD *);
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  NSString v77;
  unint64_t v78;
  Class v79;
  id v81[2];
  uint8_t *v82;
  os_log_t v83;
  uint8_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;

  v2 = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID(0);
  v98 = *(v7 - 1);
  __chkstk_darwin(v7);
  v9 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  __chkstk_darwin(v10);
  v99 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = v0;
  v12 = v0 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_context;
  v13 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  v14 = (uint64_t *)(v12 + *(int *)(v13 + 60));
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.dpExternalizedContextNil(_:), v3);
    v16 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000052, 0x80000001005425F0, 0, v6, 0, v16, 0xD000000000000074, 0x8000000100542500, 0xD000000000000016, 0x8000000100542650, 74);
    swift_willThrow(v19);
    return v7;
  }
  v20 = v13;
  v88 = v4;
  v89 = v3;
  v90 = v7;
  v91 = v9;
  v95 = v12;
  v21 = *v14;
  v22 = objc_allocWithZone((Class)PKPaymentRequest);
  sub_100022948(v21, v15);
  v7 = objc_msgSend(v22, "init");
  v92 = v21;
  v93 = v15;
  v23 = v95;
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v7, "setExternalizedContext:", isa);

  objc_msgSend(v7, "setRequestType:", 13);
  objc_msgSend(v7, "setConfirmationStyle:", 1);
  v25 = v23 + *(int *)(v20 + 28);
  v26 = *(_QWORD *)(v25 + 56);
  v27 = v20;
  if (v26 >> 60 == 15)
  {
    v28 = v6;
  }
  else
  {
    v29 = *(_QWORD *)(v25 + 48);
    type metadata accessor for SecAccessControl(0);
    sub_100022948(v29, v26);
    v30 = static SecAccessControlRef.fromData(_:)(v29, v26);
    v87 = v1;
    if (v1)
    {
      sub_100007F78(v29, v26);

      sub_100007F78(v92, v93);
      return v7;
    }
    v31 = (void *)v30;
    objc_msgSend(v7, "setAccesssControlRef:", v30);

    defaultLogger()(v32);
    v33 = v7;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    v86 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      v83 = v34;
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v85 = swift_slowAlloc(32, -1);
      v102 = v85;
      v84 = v36;
      *(_DWORD *)v36 = 136315138;
      v81[1] = v36 + 12;
      v82 = v36 + 4;
      v81[0] = objc_msgSend(v33, "accesssControlRef");
      v100 = v81[0];
      v37 = sub_100004828(&qword_1006312D8);
      v38 = Optional.debugDescription.getter(v37);
      v40 = v39;

      v100 = (id)sub_1000E3AC8(v38, v40, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v82);

      swift_bridgeObjectRelease(v40);
      v34 = v83;
      v41 = v84;
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v86, "DigitalPresentmentUIPresenter SecAccessControl = %s", v84, 0xCu);
      v42 = v85;
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {

    }
    sub_100007F78(v29, v26);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v97);
    v28 = v6;
    v2 = v87;
  }
  v43 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setClientViewSourceIdentifier:", v43);

  v44 = static DigitalPresentmentClientSourceDictionaryHelper.createDictionary(displayConfiguration:)(v23 + *(int *)(v27 + 52));
  if (v2)
  {
LABEL_12:

    sub_100007F78(v92, v93);
    return v7;
  }
  v45 = v44;
  v46 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  objc_msgSend(v7, "setClientViewSourceParameter:", v46);

  objc_msgSend(v7, "setPaymentContentItems:", 0);
  v47 = objc_msgSend(v7, "accesssControlRef");

  if (!v47)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v28, enum case for DIPError.Code.dpAccesssControlRefNil(_:), v89);
    v65 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v66 = type metadata accessor for DIPError(0);
    v67 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v66, v67, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000005ELL, 0x8000000100542690, 0, v28, 0, v65, 0xD000000000000074, 0x8000000100542500, 0xD000000000000016, 0x8000000100542650, 90);
    swift_willThrow(v68);
    goto LABEL_12;
  }
  v48 = sub_1004665F4();
  v49 = v48;
  sub_10004FEB0(v48);
  v51 = v50;
  v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  objc_msgSend(v7, "setLocalizedConfirmationTitle:", v52);

  v53 = v91;
  v54 = v98;
  if (v49 == 1)
  {
    v55 = *(void (**)(char *, _QWORD, _QWORD *))(v98 + 104);
    v56 = v90;
    v55(v91, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentTouchIDRetryText(_:), v90);
    static DigitalPresentmentDisplayConfiguration.getString(_:)(v53);
    v58 = v57;
    v59 = *(void (**)(char *, _QWORD *))(v98 + 8);
    v59(v91, v56);
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    objc_msgSend(v7, "setLocalizedBiometricRetryMessage:", v60);

    v55(v91, enum case for DigitalPresentmentDisplayConfiguration.StringID.digitalPresentmentUnboundFingerprintText(_:), v56);
    static DigitalPresentmentDisplayConfiguration.getString(_:)(v91);
    v62 = v61;
    v59(v91, v56);
    v53 = v91;
    v63 = String._bridgeToObjectiveC()();
    v64 = v62;
    v54 = v98;
    swift_bridgeObjectRelease(v64);
  }
  else
  {
    objc_msgSend(v7, "setLocalizedBiometricRetryMessage:", 0);
    v63 = 0;
    v56 = v90;
  }
  objc_msgSend(v7, "setLocalizedUnboundBiometricMessage:", v63);

  v69 = *(void (**)(char *, _QWORD, _QWORD *))(v54 + 104);
  v69(v53, enum case for DigitalPresentmentDisplayConfiguration.StringID.presentmentAuthenticationFailedTitleText(_:), v56);
  static DigitalPresentmentDisplayConfiguration.getString(_:)(v53);
  v70 = v54;
  v72 = v71;
  v73 = *(void (**)(char *, _QWORD *))(v70 + 8);
  v73(v53, v56);
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v72);
  objc_msgSend(v7, "setLocalizedErrorMessage:", v74);

  v69(v53, enum case for DigitalPresentmentDisplayConfiguration.StringID.presentmentSecurelyPresentingTitleText(_:), v56);
  static DigitalPresentmentDisplayConfiguration.getString(_:)(v53);
  v76 = v75;
  v73(v53, v56);
  v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
  objc_msgSend(v7, "setLocalizedAuthorizingTitle:", v77);

  objc_msgSend(v7, "setDisablePasscodeFallback:", 1);
  v78 = sub_100372258(v95);
  type metadata accessor for PKPaymentRequestClientAnalyticsParameters(0);
  sub_100004790(&qword_10062F9C0, (uint64_t (*)(uint64_t))type metadata accessor for PKPaymentRequestClientAnalyticsParameters, (uint64_t)&unk_10051FC2C);
  v79 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v78);
  objc_msgSend(v7, "setClientAnalyticsParameters:", v79);

  sub_100007F78(v92, v93);
  return v7;
}

void sub_10004F9A0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 67109120;
    v25 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "DigitalPresentmentUIPresenter.present: Callback invoked with result=%{BOOL}d", v16, 8u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v18 = v17(v12, v5);
  if ((a1 & 1) == 0)
  {
    v19 = defaultLogger()(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 67109120;
      v26 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22 + 4);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "DigitalPresentmentUIPresenter.present: Invocation to display presentment sheet called completion with result=%{BOOL}d, canceling", v22, 8u);
      swift_slowDealloc(v22, -1, -1);
    }

    v17(v9, v5);
    v23 = *(void **)(a3 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
    *(_QWORD *)(a3 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator) = 0;

    sub_10004FBE0();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
}

uint64_t sub_10004FBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;

  v1 = v0;
  v2 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v31 - v11;
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "DigitalPresentmentUIPresenter cancel invoked.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v18 = v17(v12, v5);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_uiResultPromise);
  v20 = defaultLogger()(v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "DigitalPresentmentUIPresenter dismiss invoked.", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v17(v9, v5);
  v24 = *(void **)(v1 + OBJC_IVAR____TtC8coreidvd29DigitalPresentmentUIPresenter_authCoordinator);
  if (v24)
    objc_msgSend(v24, "dismissWithCompletion:", 0);
  v25._object = (void *)0x80000001005424C0;
  v26._countAndFlagsBits = 0x3665663035323264;
  v26._object = (void *)0xE800000000000000;
  v25._countAndFlagsBits = 0xD000000000000015;
  logMilestone(tag:description:)(v26, v25);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v4, 1, 1, v27);
  v28 = (_QWORD *)swift_allocObject(&unk_1006050D0, 40, 7);
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = v19;
  swift_retain(v19);
  v29 = sub_1001075D4((uint64_t)v4, (uint64_t)&unk_1006312C8, (uint64_t)v28);
  return swift_release(v29);
}

uint64_t sub_10004FE74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_10004FEB0(char a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DigitalPresentmentDisplayConfiguration.StringID(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_10004FF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for DigitalPresentmentDisplayConfiguration.StringID.faceIDConfirmationTitleText(_:), v0);
  v3 = static DigitalPresentmentDisplayConfiguration.getString(_:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return v3;
}

uint64_t sub_10005000C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005006C, 0, 0);
}

uint64_t sub_10005006C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[5];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[4] + 104))(v1, enum case for DIPError.Code.digitalPresentmentAppCancelled(_:), v0[3]);
  v2 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v3 = type metadata accessor for DIPError(0);
  v4 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v0[6] = swift_allocError(v3, v4, 0, 0);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x80000001005424E0, 0, v1, 0, v2, 0xD000000000000074, 0x8000000100542500, 0x29286C65636E6163, 0xE800000000000000, 179);
  v5 = sub_100004828(&qword_1006312D0);
  v6 = sub_100050448();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  return swift_task_switch(sub_1000501B8, v7, v8);
}

uint64_t sub_1000501B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  dispatch thunk of AsyncPromise.fail(error:)(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100050234()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000502D0()
{
  return type metadata accessor for DigitalPresentmentUIPresenter(0);
}

uint64_t type metadata accessor for DigitalPresentmentUIPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_1006312B0;
  if (!qword_1006312B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentUIPresenter);
  return result;
}

uint64_t sub_100050314(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for DigitalPresentmentFlow.Context(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100520928;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000503B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000503DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1006312C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100007EE8;
  return sub_10005000C(a1, v4, v5, v6);
}

unint64_t sub_100050448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100633610;
  if (!qword_100633610)
  {
    v1 = sub_100013E24(&qword_1006312D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for AsyncPromise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100633610);
  }
  return result;
}

uint64_t sub_100050494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DIPSignpost(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100050508(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for DIPSignpost(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10004F9A0(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100050558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100050568(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100050570(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DigitalPresentmentFlow.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000505AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int64_t v34;
  _QWORD *v36;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v6 << 6);
    }
    else
    {
      v11 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_38;
      if (v11 >= v34)
        return swift_release(a1);
      v12 = *(_QWORD *)(v33 + 8 * v11);
      ++v6;
      if (!v12)
      {
        v6 = v11 + 1;
        if (v11 + 1 >= v34)
          return swift_release(a1);
        v12 = *(_QWORD *)(v33 + 8 * v6);
        if (!v12)
        {
          v6 = v11 + 2;
          if (v11 + 2 >= v34)
            return swift_release(a1);
          v12 = *(_QWORD *)(v33 + 8 * v6);
          if (!v12)
          {
            v6 = v11 + 3;
            if (v11 + 3 >= v34)
              return swift_release(a1);
            v12 = *(_QWORD *)(v33 + 8 * v6);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v34)
                return swift_release(a1);
              v12 = *(_QWORD *)(v33 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v6 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_39;
                  if (v6 >= v34)
                    return swift_release(a1);
                  v12 = *(_QWORD *)(v33 + 8 * v6);
                  ++v13;
                  if (v12)
                    goto LABEL_23;
                }
              }
              v6 = v13;
            }
          }
        }
      }
LABEL_23:
      v5 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v6 << 6);
    }
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain_n(v15, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v18 = *a2;
    v36 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v20 = sub_1004A8604(v16, v15);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (*(_QWORD *)(v18 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v27 = v36;
        if ((v19 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10012A46C();
        v27 = v36;
        if ((v24 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100125364(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_1004A8604(v16, v15);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_40;
      v20 = v25;
      v27 = v36;
      if ((v24 & 1) != 0)
      {
LABEL_4:
        v7 = v27[7];
        swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8 * v20));
        *(_QWORD *)(v7 + 8 * v20) = &_swiftEmptySetSingleton;
        goto LABEL_5;
      }
    }
    v27[(v20 >> 6) + 8] |= 1 << v20;
    v28 = (uint64_t *)(v27[6] + 16 * v20);
    *v28 = v16;
    v28[1] = v15;
    *(_QWORD *)(v27[7] + 8 * v20) = &_swiftEmptySetSingleton;
    v29 = v27[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_37;
    v27[2] = v31;
    swift_bridgeObjectRetain(v15);
LABEL_5:
    v8 = *a2;
    *a2 = v27;
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v8);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000508A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100093620((unint64_t *)&unk_100632380, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100004828((uint64_t *)&unk_1006308D0);
  v3 = sub_100099FFC(&qword_100632390, (uint64_t *)&unk_1006308D0, (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void *sub_100050960()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 6016);
  if (v1)
  {
    v2 = *(void **)(v0 + 6016);
  }
  else
  {
    v2 = &_swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 6016) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1000509A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3[3156] = v2;
  v3[3155] = a2;
  v3[3154] = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v3[3157] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3158] = v5;
  v3[3159] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v3[3160] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3161] = v7;
  v3[3162] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v3[3163] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[3164] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[3165] = swift_task_alloc(v10);
  v3[3166] = swift_task_alloc(v10);
  v11 = type metadata accessor for DispatchTime(0);
  v3[3167] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[3168] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[3169] = swift_task_alloc(v13);
  v3[3170] = swift_task_alloc(v13);
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v3[3171] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[3172] = v15;
  v3[3173] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_100632300);
  v3[3174] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v3[3175] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[3176] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[3177] = swift_task_alloc(v19);
  v3[3178] = swift_task_alloc(v19);
  v20 = sub_100004828(&qword_100632308);
  v3[3179] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004828(&qword_100632310);
  v3[3180] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[3181] = v22;
  v3[3182] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DIPError.Code(0);
  v3[3183] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[3184] = v24;
  v3[3185] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100632318) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[3186] = swift_task_alloc(v25);
  v3[3187] = swift_task_alloc(v25);
  v26 = sub_100004828((uint64_t *)&unk_100632320);
  v3[3188] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v3[3189] = v27;
  v3[3190] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100050C00, 0, 0);
}

uint64_t sub_100050C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;

  v1 = *(_QWORD *)(v0 + 25512);
  v2 = *(_QWORD *)(v0 + 25504);
  v3 = *(_QWORD *)(v0 + 25496);
  v4 = *(_QWORD *)(v0 + 25248);
  v5 = *(_QWORD *)(v0 + 25232);
  sub_10008FDC8((_OWORD *)(v0 + 16));
  sub_1000A1F54(v0 + 16, v4 + 32, &qword_1006322D8);
  *(_OWORD *)(v4 + 6016) = 0u;
  *(_OWORD *)(v4 + 6032) = 0u;
  *(_OWORD *)(v4 + 6041) = 0u;
  *(_QWORD *)(v4 + 6064) = sub_10011DE78((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 6072) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 6080) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 6088) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  v6 = v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow;
  sub_100038B24(v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, v3, &qword_100632318);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  v8 = v7(v3, 1, v2);
  *(_DWORD *)(v0 + 5932) = v8;
  if (v8 == 1)
  {
    v9 = *(_QWORD *)(v0 + 25496);
    v10 = *(_QWORD *)(v0 + 25480);
    v11 = *(_QWORD *)(v0 + 25472);
    v12 = *(_QWORD *)(v0 + 25464);
    v13 = *(_QWORD *)(v0 + 25232);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 25240));
    sub_100008030(v9, &qword_100632318);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v12);
    v14 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000036, 0x8000000100542B10, 0, v10, 0, v14, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000001DLL, 0x8000000100542BB0, 64);
    swift_willThrow(v17);
    swift_release(v13);
    LODWORD(v15) = *(_DWORD *)(v0 + 5932);
    sub_1000A1F54(*(_QWORD *)(v0 + 25248) + 32, v0 + 17776, &qword_1006322D8);
    sub_100093660(v0 + 17776, sub_10008FDDC);
    if ((_DWORD)v15 != 1)
    {
      v18 = *(_QWORD **)(v0 + 25248);
      swift_bridgeObjectRelease(v18[745]);
      swift_bridgeObjectRelease(v18[746]);
      swift_bridgeObjectRelease(v18[747]);
      swift_bridgeObjectRelease(v18[750]);
    }
    v19 = *(_QWORD **)(v0 + 25248);
    swift_bridgeObjectRelease(v19[752]);
    swift_unknownObjectRelease(v19[753]);
    swift_bridgeObjectRelease(v19[758]);
    swift_bridgeObjectRelease(v19[759]);
    swift_bridgeObjectRelease(v19[760]);
    swift_bridgeObjectRelease(v19[761]);
    v20 = type metadata accessor for LegacySynthesizedWorkflows();
    swift_deallocPartialClassInstance(v19, v20, 6096, 7);
    v21 = *(_QWORD *)(v0 + 25496);
    v22 = *(_QWORD *)(v0 + 25488);
    v23 = *(_QWORD *)(v0 + 25480);
    v24 = *(_QWORD *)(v0 + 25456);
    v25 = *(_QWORD *)(v0 + 25432);
    v26 = *(_QWORD *)(v0 + 25424);
    v27 = *(_QWORD *)(v0 + 25416);
    v28 = *(_QWORD *)(v0 + 25392);
    v29 = *(_QWORD *)(v0 + 25384);
    v96 = *(_QWORD *)(v0 + 25360);
    v99 = *(_QWORD *)(v0 + 25352);
    v102 = *(_QWORD *)(v0 + 25328);
    v104 = *(_QWORD *)(v0 + 25320);
    v105 = *(_QWORD *)(v0 + 25296);
    v107 = *(_QWORD *)(v0 + 25272);
    swift_task_dealloc(*(_QWORD *)(v0 + 25520));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v96);
    swift_task_dealloc(v99);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v106 = v6;
    v108 = v7;
    v100 = v0 + 5936;
    v103 = v4 + 32;
    v31 = *(_QWORD *)(v0 + 25520);
    v32 = *(_QWORD *)(v0 + 25512);
    v97 = v0 + 11856;
    v33 = *(_QWORD *)(v0 + 25504);
    v34 = *(_QWORD *)(v0 + 25448);
    v35 = *(_QWORD *)(v0 + 25440);
    v36 = *(_QWORD *)(v0 + 25432);
    v37 = *(_QWORD *)(v0 + 25248);
    v38 = *(_QWORD *)(v0 + 25232);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 32))(v31, *(_QWORD *)(v0 + 25496), v33);
    JWSSignedJSON.payload.getter(v33);
    v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v39(v31, v33);
    v109 = v37;
    *(_QWORD *)(v37 + 16) = *(_QWORD *)(v0 + 25176);
    sub_100038B24(v38 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_spWorkflow, v36, &qword_100632308);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
    {
      v40 = *(_QWORD *)(v0 + 25248);
      v41 = sub_100008030(*(_QWORD *)(v0 + 25432), &qword_100632308);
      *(_QWORD *)(v40 + 24) = 0;
      v42 = defaultLogger()(v41);
      v43 = Logger.logObject.getter(v42);
      v45 = static os_log_type_t.info.getter(v43, v44);
      if (os_log_type_enabled(v43, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v45, "missing SP Workflow in WorkflowRecommendationResponse", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }
      v47 = *(_QWORD *)(v0 + 25424);
      v48 = *(_QWORD *)(v0 + 25408);
      v49 = *(_QWORD *)(v0 + 25400);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    }
    else
    {
      v50 = *(_QWORD *)(v0 + 25456);
      v51 = *(_QWORD *)(v0 + 25448);
      v52 = *(_QWORD *)(v0 + 25440);
      v53 = *(_QWORD *)(v0 + 25248);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 32))(v50, *(_QWORD *)(v0 + 25432), v52);
      JWSSignedJSON.payload.getter(v52);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      *(_QWORD *)(v53 + 24) = *(_QWORD *)(v0 + 25224);
    }
    v54 = *(_QWORD *)(v0 + 25248);
    v55 = *(_QWORD *)(v0 + 25232);
    sub_1000A1F54(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_imageQualityCriteria, v100, &qword_1006322D8);
    sub_1000A1F54(v103, v97, &qword_1006322D8);
    sub_1000A1F54(v100, v103, &qword_1006322D8);
    sub_100093660(v100, sub_10009637C);
    sub_100093660(v97, sub_10008FDDC);
    v56 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile + 8);
    *(_QWORD *)(v54 + 5952) = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentProfile);
    *(_QWORD *)(v54 + 5960) = v56;
    v57 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentGUIDs);
    *(_QWORD *)(v54 + 5968) = v57;
    v58 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL + 8);
    *(_QWORD *)(v54 + 5992) = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_assessmentBaseURL);
    *(_QWORD *)(v54 + 6000) = v58;
    *(_BYTE *)(v54 + 6008) = 0;
    v59 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    v60 = _swiftEmptyArrayStorage;
    if (v59)
      v60 = *(_QWORD **)(v55 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    *(_QWORD *)(v54 + 5976) = v60;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
    defaultLogger()(v61);
    v62 = swift_retain_n(v54, 2);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.debug.getter(v63);
    v65 = os_log_type_enabled(v63, v64);
    v66 = *(_QWORD *)(v0 + 25416);
    v67 = *(_QWORD *)(v0 + 25408);
    v68 = *(_QWORD *)(v0 + 25400);
    v69 = *(_QWORD *)(v0 + 25248);
    if (v65)
    {
      v101 = *(_QWORD *)(v0 + 25416);
      v98 = *(_QWORD *)(v0 + 25408);
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v95 = v68;
      v71 = swift_slowAlloc(32, -1);
      v110 = v71;
      *(_DWORD *)v70 = 136315138;
      v72 = *(_QWORD *)(v54 + 5976);
      swift_bridgeObjectRetain(v72);
      v74 = Array.description.getter(v73, &type metadata for String);
      v76 = v75;
      swift_bridgeObjectRelease(v72);
      *(_QWORD *)(v0 + 25216) = sub_1000E3AC8(v74, v76, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25216, v0 + 25224, v70 + 4);
      swift_bridgeObjectRelease(v76);
      swift_release_n(v69, 2);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "received nonces: %s", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v101, v95);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 25248), 2);

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    }
    v77 = *(_QWORD *)(v0 + 25504);
    v78 = *(_QWORD *)(v0 + 25488);
    sub_100038B24(v106, v78, &qword_100632318);
    if (v108(v78, 1, v77) == 1)
    {
      sub_100008030(*(_QWORD *)(v0 + 25488), &qword_100632318);
      v79 = 0;
    }
    else
    {
      v80 = *(_QWORD *)(v0 + 25504);
      v81 = *(_QWORD *)(v0 + 25488);
      JWSSignedJSON.payload.getter(v80);
      v82 = *(_QWORD *)(v0 + 25192);
      v39(v81, v80);
      v83 = *(_QWORD *)(v82 + 64);
      v84 = *(_QWORD *)(v82 + 72);
      swift_bridgeObjectRetain(v84);
      swift_release(v82);
      *(_QWORD *)(v0 + 25136) = v83;
      *(_QWORD *)(v0 + 25144) = v84;
      *(_QWORD *)(v0 + 25152) = 0x61746E6567616DLL;
      *(_QWORD *)(v0 + 25160) = 0xE700000000000000;
      v85 = sub_1000994DC();
      v79 = StringProtocol.contains<A>(_:)(v0 + 25152, &type metadata for String, &type metadata for String, v85, v85);
      swift_bridgeObjectRelease(v84);
    }
    *(_BYTE *)(v0 + 5929) = v79 & 1;
    v86 = *(_QWORD *)(v0 + 25240);
    v87 = *(_QWORD *)(v109 + 16);
    v88 = *(_QWORD *)(v87 + 176);
    if (v86)
    {
      if (*(_QWORD *)(v88 + 16))
      {
        swift_bridgeObjectRetain_n(v88, 2);
        swift_bridgeObjectRetain(v86);
        v89 = sub_1004EACD4(v88);
        swift_bridgeObjectRelease(v88);
        v90 = sub_10006A10C(v86, v89);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v86);
        if (*(_QWORD *)(v90 + 16))
        {
          swift_bridgeObjectRelease(v86);
          swift_bridgeObjectRelease(v88);
          v88 = v90;
        }
        else
        {
          swift_bridgeObjectRelease(v90);
          swift_bridgeObjectRelease(v86);
        }
      }
      else
      {
        v88 = *(_QWORD *)(v0 + 25240);
      }
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v87 + 176));
    }
    *(_QWORD *)(v0 + 25536) = v88;
    *(_QWORD *)(v0 + 25528) = 0;
    if (qword_10062F4C0 != -1)
      swift_once(&qword_10062F4C0, sub_1002354CC);
    v91 = (v79 & 1) == 0;
    if ((v79 & 1) != 0)
      v92 = 0x8000000100542BF0;
    else
      v92 = 0;
    if (v91)
      v93 = 0;
    else
      v93 = 0xD000000000000025;
    v94 = (_QWORD *)swift_task_alloc(dword_10063997C);
    *(_QWORD *)(v0 + 25544) = v94;
    *v94 = v0;
    v94[1] = sub_10005166C;
    return sub_100233BB8(v0 + 24128, v93, v92, v88, 1);
  }
}

uint64_t sub_10005166C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 25536);
  v2 = *(unsigned __int8 *)(*(_QWORD *)v0 + 5929);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 25544));
  swift_bridgeObjectRelease(v1);
  if (v2)
    v3 = 0x8000000100542BF0;
  else
    v3 = 0;
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_1000516F0, 0, 0);
}

uint64_t sub_1000516F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  __int128 v43;
  uint64_t v44;

  sub_1000A1F54(v0 + 24128, v0 + 23696, &qword_100632330);
  if (sub_100035A5C(v0 + 23696) != 1)
  {
    memcpy((void *)(v0 + 24560), (const void *)(v0 + 23696), 0x1B0uLL);
    sub_1000A1F54(v0 + 24960, v0 + 25200, &qword_100632338);
    sub_1000A1F54(v0 + 25200, v0 + 25208, &qword_100632338);
    if (*(_QWORD *)(v0 + 25208))
    {
      v1 = *(_QWORD *)(v0 + 25392);
      sub_100038B24(*(_QWORD *)(v0 + 25232) + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, v1, &qword_100632300);
      v2 = sub_100004828((uint64_t *)&unk_100632340);
      v3 = *(_QWORD *)(v2 - 8);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
      v5 = *(_QWORD *)(v0 + 25392);
      v6 = *(_QWORD *)(v0 + 25248);
      if (v4 == 1)
      {
        sub_100035B1C(v0 + 24128);
        sub_100008030(v5, &qword_100632300);
        *(_QWORD *)(v6 + 5984) = _swiftEmptyArrayStorage;
      }
      else
      {
        JWSSignedJSON.payload.getter(v2);
        v27 = *(_QWORD *)(v0 + 25184);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
        *(_QWORD *)(v6 + 5984) = v27;
        v28 = *(_QWORD *)(v27 + 16);
        if (v28)
        {
          swift_bridgeObjectRetain(v27);
          v41 = v27;
          v29 = (_QWORD *)(v27 + 64);
          do
          {
            v30 = *(_QWORD *)(v0 + 25248);
            v31 = *v29;
            v32 = *(v29 - 3);
            v42[0] = *(v29 - 4);
            v42[1] = v32;
            v43 = *((_OWORD *)v29 - 1);
            v44 = v31;
            v33 = v43;
            swift_bridgeObjectRetain(v31);
            swift_bridgeObjectRetain(v32);
            swift_bridgeObjectRetain(v33);
            sub_1000524F8(v42, v30, v0 + 24560);
            swift_bridgeObjectRelease(v32);
            swift_bridgeObjectRelease(v33);
            swift_bridgeObjectRelease(v31);
            v29 += 5;
            --v28;
          }
          while (v28);
          sub_100035B1C(v0 + 24128);
          swift_bridgeObjectRelease(v41);
        }
        else
        {
          sub_100035B1C(v0 + 24128);
        }
      }
      v34 = (_QWORD *)swift_task_alloc(dword_1006313D4);
      *(_QWORD *)(v0 + 25552) = v34;
      *v34 = v0;
      v34[1] = sub_100051BFC;
      return sub_1000543E4();
    }
    sub_100035B1C(v0 + 24128);
  }
  v7 = *(_QWORD *)(v0 + 25480);
  v8 = *(_QWORD *)(v0 + 25248);
  v9 = *(_QWORD *)(v0 + 25232);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 25472) + 104))(v7, enum case for DIPError.Code.missingAttributeConfig(_:), *(_QWORD *)(v0 + 25464));
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100542BD0, 0, v7, 0, v10, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000001DLL, 0x8000000100542BB0, 91);
  swift_willThrow(v13);
  swift_release(v9);
  swift_release(*(_QWORD *)(v8 + 16));
  swift_release(*(_QWORD *)(v8 + 24));
  LODWORD(v11) = *(_DWORD *)(v0 + 5932);
  sub_1000A1F54(*(_QWORD *)(v0 + 25248) + 32, v0 + 17776, &qword_1006322D8);
  sub_100093660(v0 + 17776, sub_10008FDDC);
  if ((_DWORD)v11 != 1)
  {
    v14 = *(_QWORD **)(v0 + 25248);
    swift_bridgeObjectRelease(v14[745]);
    swift_bridgeObjectRelease(v14[746]);
    swift_bridgeObjectRelease(v14[747]);
    swift_bridgeObjectRelease(v14[750]);
  }
  v15 = *(_QWORD **)(v0 + 25248);
  swift_bridgeObjectRelease(v15[752]);
  swift_unknownObjectRelease(v15[753]);
  swift_bridgeObjectRelease(v15[758]);
  swift_bridgeObjectRelease(v15[759]);
  swift_bridgeObjectRelease(v15[760]);
  swift_bridgeObjectRelease(v15[761]);
  v16 = type metadata accessor for LegacySynthesizedWorkflows();
  swift_deallocPartialClassInstance(v15, v16, 6096, 7);
  v17 = *(_QWORD *)(v0 + 25496);
  v18 = *(_QWORD *)(v0 + 25488);
  v19 = *(_QWORD *)(v0 + 25480);
  v20 = *(_QWORD *)(v0 + 25456);
  v21 = *(_QWORD *)(v0 + 25432);
  v22 = *(_QWORD *)(v0 + 25424);
  v23 = *(_QWORD *)(v0 + 25416);
  v24 = *(_QWORD *)(v0 + 25392);
  v25 = *(_QWORD *)(v0 + 25384);
  v35 = *(_QWORD *)(v0 + 25360);
  v36 = *(_QWORD *)(v0 + 25352);
  v37 = *(_QWORD *)(v0 + 25328);
  v38 = *(_QWORD *)(v0 + 25320);
  v39 = *(_QWORD *)(v0 + 25296);
  v40 = *(_QWORD *)(v0 + 25272);
  swift_task_dealloc(*(_QWORD *)(v0 + 25520));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 25552);
  *(_QWORD *)(*v2 + 25560) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000523C8;
  }
  else
  {
    *(_QWORD *)(v4 + 25568) = a1;
    v6 = sub_100051C70;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100051C70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t ObjectType;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v1 = *(_QWORD *)(v0 + 25560);
  v2 = *(_QWORD **)(v0 + 25248);
  v3 = v2 + 760;
  v4 = v2[752];
  v2[752] = *(_QWORD *)(v0 + 25568);
  swift_bridgeObjectRelease(v4);
  v5 = v2[2];
  swift_beginAccess(v3, v0 + 25040, 33, 0);
  v6 = swift_retain(v5);
  sub_10006AB14(v6, v3);
  v7 = *(_QWORD *)(v0 + 25248);
  if (v1)
  {
    v8 = *(_QWORD *)(v0 + 25232);
    swift_endAccess(v0 + 25040);
    swift_release(v8);
    swift_release(v5);
    swift_release(v7);
    v9 = *(_QWORD *)(v0 + 25496);
    v10 = *(_QWORD *)(v0 + 25488);
    v11 = *(_QWORD *)(v0 + 25480);
    v12 = *(_QWORD *)(v0 + 25456);
    v13 = *(_QWORD *)(v0 + 25432);
    v14 = *(_QWORD *)(v0 + 25424);
    v15 = *(_QWORD *)(v0 + 25416);
    v16 = *(_QWORD *)(v0 + 25392);
    v17 = *(_QWORD *)(v0 + 25384);
    v70 = *(_QWORD *)(v0 + 25360);
    v73 = *(_QWORD *)(v0 + 25352);
    v76 = *(_QWORD *)(v0 + 25328);
    v80 = *(_QWORD *)(v0 + 25320);
    v85 = *(_QWORD *)(v0 + 25296);
    v89 = *(_QWORD *)(v0 + 25272);
    swift_task_dealloc(*(_QWORD *)(v0 + 25520));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v70);
    swift_task_dealloc(v73);
    swift_task_dealloc(v76);
    swift_task_dealloc(v80);
    swift_task_dealloc(v85);
    swift_task_dealloc(v89);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_endAccess(v0 + 25040);
    swift_release(v5);
    v19 = *(_QWORD *)(v7 + 24);
    if (v19)
    {
      v20 = (_QWORD *)(*(_QWORD *)(v0 + 25248) + 6088);
      swift_beginAccess(v20, v0 + 25112, 33, 0);
      v21 = swift_retain(v19);
      sub_10006AB14(v21, v20);
      swift_endAccess(v0 + 25112);
      swift_release(v19);
    }
    v22 = *(_QWORD *)(v0 + 25384);
    v90 = v0 + 25064;
    v23 = *(_QWORD *)(v0 + 25368);
    v24 = *(_QWORD *)(v0 + 25352);
    v81 = *(_QWORD *)(v0 + 25344);
    v86 = *(_QWORD *)(v0 + 25336);
    v25 = *(_QWORD **)(v0 + 25328);
    v68 = (uint64_t *)(*(_QWORD *)(v0 + 25248) + 6024);
    v69 = *(_QWORD *)(v0 + 25376);
    v71 = *(_QWORD *)(v0 + 25304);
    v74 = *(_QWORD *)(v0 + 25312);
    sub_10001CFF8(0, (unint64_t *)&unk_1006308F8, OS_dispatch_source_ptr);
    *(_QWORD *)(v0 + 25168) = _swiftEmptyArrayStorage;
    v26 = sub_100093620(&qword_100632350, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
    v27 = sub_100004828(&qword_100632358);
    v28 = sub_100099FFC((unint64_t *)&unk_100632360, &qword_100632358, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 25168, v27, v28, v23, v26);
    sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
    v29 = (void *)static OS_dispatch_queue.main.getter();
    v30 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v22, v29);

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v22, v23);
    swift_beginAccess(v68, v0 + 25088, 1, 0);
    v31 = *v68;
    *v68 = v30;
    v32 = swift_unknownObjectRelease(v31);
    static DispatchTime.now()(v32);
    *v25 = 600;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v74 + 104))(v25, enum case for DispatchTimeInterval.seconds(_:), v71);
    + infix(_:_:)(v24, v25);
    v33 = *(void (**)(_QWORD *, uint64_t))(v74 + 8);
    v33(v25, v71);
    v34 = v86;
    v87 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v87(v24, v34);
    v35 = *v68;
    if (*v68)
    {
      v36 = *(_QWORD **)(v0 + 25328);
      v37 = *(_QWORD **)(v0 + 25320);
      v38 = *(_QWORD *)(v0 + 25304);
      v77 = *(_QWORD *)(v0 + 25360);
      v82 = *(_QWORD *)(v0 + 25248);
      ObjectType = swift_getObjectType(v35);
      v40 = enum case for DispatchTimeInterval.never(_:);
      v41 = type metadata accessor for DispatchTimeInterval(0);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104);
      v42((uint64_t)v36, v40, v41);
      *v37 = 0;
      v42((uint64_t)v37, enum case for DispatchTimeInterval.nanoseconds(_:), v41);
      swift_unknownObjectRetain(v35);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v77, v36, v37, ObjectType);
      swift_unknownObjectRelease(v35);
      v33(v37, v38);
      v33(v36, v38);
      v43 = *(_QWORD *)(v82 + 6024);
      if (v43)
      {
        v44 = *(_QWORD *)(v0 + 25296);
        v78 = *(_QWORD *)(v0 + 25288);
        v83 = *(_QWORD *)(v0 + 25280);
        v45 = *(_QWORD *)(v0 + 25272);
        v46 = *(_QWORD *)(v0 + 25264);
        v47 = *(_QWORD *)(v0 + 25256);
        v48 = *(_QWORD *)(v0 + 25248);
        v49 = swift_getObjectType(v43);
        v50 = swift_allocObject(&unk_100605D20, 24, 7);
        swift_weakInit(v50 + 16, v48);
        *(_QWORD *)(v0 + 25024) = sub_1000994AC;
        *(_QWORD *)(v0 + 25032) = v50;
        *(_QWORD *)(v0 + 24992) = _NSConcreteStackBlock;
        *(_QWORD *)(v0 + 25000) = 1107296256;
        *(_QWORD *)(v0 + 25008) = sub_1004AB190;
        *(_QWORD *)(v0 + 25016) = &unk_100605D38;
        v51 = _Block_copy((const void *)(v0 + 24992));
        swift_unknownObjectRetain(v43);
        v52 = swift_retain(v50);
        static DispatchQoS.unspecified.getter(v52);
        sub_1000508A8();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)(v44, v45, v51, v49);
        _Block_release(v51);
        swift_unknownObjectRelease(v43);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v44, v83);
        swift_release(*(_QWORD *)(v0 + 25032));
        swift_release(v50);
      }
    }
    v53 = *(_QWORD *)(v0 + 25248);
    v54 = swift_beginAccess(v53 + 6024, v90, 32, 0);
    v55 = *(_QWORD *)(v53 + 6024);
    v56 = *(_QWORD *)(v0 + 25360);
    v57 = *(_QWORD *)(v0 + 25336);
    v58 = *(_QWORD *)(v0 + 25232);
    if (v55)
    {
      swift_endAccess(v90);
      swift_getObjectType(v55);
      swift_unknownObjectRetain(v55);
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease(v55);
      swift_release(v58);
      v87(v56, v57);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD, __n128))v87)(*(_QWORD *)(v0 + 25360), *(_QWORD *)(v0 + 25336), v54);
      swift_endAccess(v90);
      swift_release(v58);
    }
    v59 = *(_QWORD *)(v0 + 25496);
    v60 = *(_QWORD *)(v0 + 25488);
    v61 = *(_QWORD *)(v0 + 25480);
    v62 = *(_QWORD *)(v0 + 25456);
    v63 = *(_QWORD *)(v0 + 25432);
    v64 = *(_QWORD *)(v0 + 25424);
    v65 = *(_QWORD *)(v0 + 25416);
    v66 = *(_QWORD *)(v0 + 25392);
    v67 = *(_QWORD *)(v0 + 25384);
    v72 = *(_QWORD *)(v0 + 25360);
    v75 = *(_QWORD *)(v0 + 25352);
    v79 = *(_QWORD *)(v0 + 25328);
    v84 = *(_QWORD *)(v0 + 25320);
    v88 = *(_QWORD *)(v0 + 25296);
    v91 = *(_QWORD *)(v0 + 25272);
    swift_task_dealloc(*(_QWORD *)(v0 + 25520));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v72);
    swift_task_dealloc(v75);
    swift_task_dealloc(v79);
    swift_task_dealloc(v84);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 25248));
  }
}

uint64_t sub_1000523C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 25248);
  swift_release(*(_QWORD *)(v0 + 25232));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 25496);
  v3 = *(_QWORD *)(v0 + 25488);
  v4 = *(_QWORD *)(v0 + 25480);
  v5 = *(_QWORD *)(v0 + 25456);
  v6 = *(_QWORD *)(v0 + 25432);
  v7 = *(_QWORD *)(v0 + 25424);
  v8 = *(_QWORD *)(v0 + 25416);
  v9 = *(_QWORD *)(v0 + 25392);
  v10 = *(_QWORD *)(v0 + 25384);
  v12 = *(_QWORD *)(v0 + 25360);
  v13 = *(_QWORD *)(v0 + 25352);
  v14 = *(_QWORD *)(v0 + 25328);
  v15 = *(_QWORD *)(v0 + 25320);
  v16 = *(_QWORD *)(v0 + 25296);
  v17 = *(_QWORD *)(v0 + 25272);
  swift_task_dealloc(*(_QWORD *)(v0 + 25520));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000524F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[8];
  uint64_t v29;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a1[2];
  v7 = a1[3];
  v8 = a1[4];
  if (!v6 || !v6[2])
  {
    if (!v8)
    {
      swift_beginAccess(a2 + 6064, v27, 33, 0);
      swift_bridgeObjectRetain(v4);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 6064));
      v29 = *(_QWORD *)(a2 + 6064);
      *(_QWORD *)(a2 + 6064) = 0x8000000000000000;
      v12 = 0;
      v13 = 0xE000000000000000;
      goto LABEL_10;
    }
    sub_1000A1F54(a3 + 408, (uint64_t)v28, &qword_100632378);
    sub_1000A1F54((uint64_t)v28, (uint64_t)&v29, &qword_100632378);
    v14 = v29;
    if (v29 && *(_QWORD *)(v29 + 16))
    {
      swift_bridgeObjectRetain(v8);
      v15 = sub_1004A8604(v7, v8);
      if ((v16 & 1) != 0)
      {
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v15);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRelease(v8);
        swift_beginAccess(a2 + 6064, v27, 33, 0);
        swift_bridgeObjectRetain(v4);
        v20 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 6064));
        v26 = *(_QWORD *)(a2 + 6064);
        *(_QWORD *)(a2 + 6064) = 0x8000000000000000;
        v21 = v18;
        v22 = v19;
LABEL_13:
        sub_1004816F8(v21, v22, 0, 0xE000000000000000, v5, v4, v20);
        v23 = v26;
        goto LABEL_14;
      }
      swift_bridgeObjectRelease(v8);
    }
    swift_beginAccess(a2 + 6064, v27, 33, 0);
    swift_bridgeObjectRetain(v4);
    v20 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 6064));
    v26 = *(_QWORD *)(a2 + 6064);
    *(_QWORD *)(a2 + 6064) = 0x8000000000000000;
    v21 = 0;
    v22 = 0xE000000000000000;
    goto LABEL_13;
  }
  v9 = v6[4];
  v10 = v6[5];
  swift_beginAccess(a2 + 6064, v27, 33, 0);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 6064));
  v29 = *(_QWORD *)(a2 + 6064);
  *(_QWORD *)(a2 + 6064) = 0x8000000000000000;
  v12 = v9;
  v13 = v10;
LABEL_10:
  sub_1004816F8(v12, v13, 0, 0xE000000000000000, v5, v4, isUniquelyReferenced_nonNull_native);
  v23 = v29;
LABEL_14:
  v24 = *(_QWORD *)(a2 + 6064);
  *(_QWORD *)(a2 + 6064) = v23;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v24);
  return swift_endAccess(v27);
}

uint64_t sub_100052754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4[1681] = v3;
  v4[1680] = a3;
  v4[1679] = a2;
  v4[1678] = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[1682] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[1683] = v6;
  v4[1684] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[1685] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[1686] = v8;
  v4[1687] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v4[1688] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[1689] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[1690] = swift_task_alloc(v11);
  v4[1691] = swift_task_alloc(v11);
  v12 = type metadata accessor for DispatchTime(0);
  v4[1692] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[1693] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[1694] = swift_task_alloc(v14);
  v4[1695] = swift_task_alloc(v14);
  v15 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v4[1696] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[1697] = v16;
  v4[1698] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_100632300);
  v4[1699] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DIPError.Code(0);
  v4[1700] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[1701] = v19;
  v4[1702] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004828(&qword_100632318);
  v4[1703] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004828((uint64_t *)&unk_100632320);
  v4[1704] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[1705] = v22;
  v4[1706] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005291C, 0, 0);
}

uint64_t sub_10005291C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 13640);
  v2 = *(_QWORD *)(v0 + 13632);
  v3 = *(_QWORD *)(v0 + 13624);
  v4 = *(_QWORD *)(v0 + 13448);
  v5 = *(_QWORD *)(v0 + 13432);
  sub_10008FDC8((_OWORD *)(v0 + 16));
  sub_1000A1F54(v0 + 16, v4 + 32, &qword_1006322D8);
  *(_OWORD *)(v4 + 6016) = 0u;
  *(_OWORD *)(v4 + 6032) = 0u;
  *(_OWORD *)(v4 + 6041) = 0u;
  *(_QWORD *)(v4 + 6064) = sub_10011DE78((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 6072) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 6080) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 6088) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  *(_BYTE *)(v4 + 6056) = 1;
  sub_100038B24(v5 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_inoWorkflow, v3, &qword_100632318);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  *(_DWORD *)(v0 + 5932) = v6;
  v7 = *(_QWORD *)(v0 + 13440);
  if (v6 == 1)
  {
    v8 = *(_QWORD *)(v0 + 13624);
    v9 = *(_QWORD *)(v0 + 13616);
    v10 = *(_QWORD *)(v0 + 13608);
    v11 = *(_QWORD *)(v0 + 13600);
    v12 = *(_QWORD *)(v0 + 13424);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 13440));
    sub_100008030(v8, &qword_100632318);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.serverResponseInconsistent(_:), v11);
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100542C20, 0, v9, 0, v13, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000002ALL, 0x8000000100542C50, 153);
    swift_willThrow(v16);
    swift_release(v12);
    LODWORD(v14) = *(_DWORD *)(v0 + 5932);
    v17 = *(_QWORD *)(v0 + 13448);
    swift_release(*(_QWORD *)(v0 + 13432));
    sub_1000A1F54(v17 + 32, v0 + 5936, &qword_1006322D8);
    sub_100093660(v0 + 5936, sub_10008FDDC);
    if ((_DWORD)v14 != 1)
    {
      v18 = *(_QWORD **)(v0 + 13448);
      swift_bridgeObjectRelease(v18[745]);
      swift_bridgeObjectRelease(v18[746]);
      swift_bridgeObjectRelease(v18[747]);
      swift_bridgeObjectRelease(v18[750]);
    }
    v19 = *(_QWORD **)(v0 + 13448);
    swift_bridgeObjectRelease(v19[752]);
    swift_unknownObjectRelease(v19[753]);
    swift_bridgeObjectRelease(v19[758]);
    swift_bridgeObjectRelease(v19[759]);
    swift_bridgeObjectRelease(v19[760]);
    swift_bridgeObjectRelease(v19[761]);
    v20 = type metadata accessor for LegacySynthesizedWorkflows();
    swift_deallocPartialClassInstance(v19, v20, 6096, 7);
    v21 = *(_QWORD *)(v0 + 13624);
    v22 = *(_QWORD *)(v0 + 13616);
    v23 = *(_QWORD *)(v0 + 13592);
    v24 = *(_QWORD *)(v0 + 13584);
    v25 = *(_QWORD *)(v0 + 13560);
    v26 = *(_QWORD *)(v0 + 13552);
    v27 = *(_QWORD *)(v0 + 13528);
    v28 = *(_QWORD *)(v0 + 13520);
    v29 = *(_QWORD *)(v0 + 13496);
    v50 = *(_QWORD *)(v0 + 13472);
    swift_task_dealloc(*(_QWORD *)(v0 + 13648));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 13648);
    v32 = *(_QWORD *)(v0 + 13640);
    v33 = *(_QWORD *)(v0 + 13632);
    v34 = *(_QWORD *)(v0 + 13448);
    v35 = *(_QWORD *)(v0 + 13432);
    v36 = *(_QWORD **)(v0 + 13424);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 32))(v31, *(_QWORD *)(v0 + 13624), v33);
    JWSSignedJSON.payload.getter(v33);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    v37 = *(_QWORD *)(v0 + 13392);
    *(_BYTE *)(v34 + 6008) = 0;
    *(_QWORD *)(v34 + 16) = v37;
    v38 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    if (v38)
      v39 = *(_QWORD **)(v35 + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_nonces);
    else
      v39 = _swiftEmptyArrayStorage;
    *(_QWORD *)(v34 + 5976) = v39;
    *(_QWORD *)(v34 + 6032) = 0;
    *(_QWORD *)(v34 + 6048) = 0;
    v40 = v36[3];
    *(_QWORD *)(v34 + 24) = v40;
    v41 = v36[745];
    *(_QWORD *)(v34 + 5952) = v36[744];
    *(_QWORD *)(v34 + 5960) = v41;
    v42 = v36[746];
    *(_QWORD *)(v34 + 5968) = v42;
    v43 = v36[750];
    *(_QWORD *)(v34 + 5992) = v36[749];
    *(_QWORD *)(v34 + 6000) = v43;
    *(_QWORD *)(v34 + 6040) = v36[755];
    v44 = *(_QWORD *)(v37 + 176);
    if (v7)
    {
      v45 = *(_QWORD *)(v0 + 13440);
      v46 = *(_QWORD *)(v44 + 16);
      swift_bridgeObjectRetain(v38);
      if (v46)
      {
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain_n(v44, 2);
        swift_retain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        v47 = sub_1004EACD4(v44);
        swift_bridgeObjectRelease(v44);
        v48 = sub_10006A10C(v45, v47);
        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v45);
        if (*(_QWORD *)(v48 + 16))
        {
          swift_bridgeObjectRelease(v45);
          swift_bridgeObjectRelease(v44);
          v44 = v48;
        }
        else
        {
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v45);
        }
      }
      else
      {
        swift_retain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        v44 = v45;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v44);
      swift_retain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
    }
    *(_QWORD *)(v0 + 13656) = v44;
    if (qword_10062F4C0 != -1)
      swift_once(&qword_10062F4C0, sub_1002354CC);
    v49 = (_QWORD *)swift_task_alloc(dword_10063997C);
    *(_QWORD *)(v0 + 13664) = v49;
    *v49 = v0;
    v49[1] = sub_100052EF4;
    return sub_100233BB8(v0 + 11856, 0, 0, v44, 1);
  }
}

uint64_t sub_100052EF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 13656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 13664));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100052F54, 0, 0);
}

void sub_100052F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;

  sub_1000A1F54(v0 + 11856, v0 + 12288, &qword_100632330);
  if (sub_100035A5C(v0 + 12288) == 1)
    goto LABEL_6;
  memcpy((void *)(v0 + 12720), (const void *)(v0 + 12288), 0x1B0uLL);
  sub_1000A1F54(v0 + 13120, v0 + 13376, &qword_100632338);
  sub_1000A1F54(v0 + 13376, v0 + 13384, &qword_100632338);
  if (!*(_QWORD *)(v0 + 13384))
  {
    sub_100035B1C(v0 + 11856);
LABEL_6:
    v9 = *(_QWORD *)(v0 + 13616);
    v10 = *(_QWORD *)(v0 + 13448);
    v11 = *(_QWORD *)(v0 + 13432);
    v12 = *(_QWORD *)(v0 + 13424);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 13608) + 104))(v9, enum case for DIPError.Code.missingAttributeConfig(_:), *(_QWORD *)(v0 + 13600));
    v13 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v14, v15, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000015, 0x8000000100542BD0, 0, v9, 0, v13, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000002ALL, 0x8000000100542C50, 177);
    swift_willThrow(v16);
    swift_release(v11);
    swift_release(v12);
    swift_release(*(_QWORD *)(v10 + 16));
    LODWORD(v14) = *(_DWORD *)(v0 + 5932);
    v17 = *(_QWORD *)(v0 + 13448);
    swift_release(*(_QWORD *)(v10 + 24));
    sub_1000A1F54(v17 + 32, v0 + 5936, &qword_1006322D8);
    sub_100093660(v0 + 5936, sub_10008FDDC);
    if ((_DWORD)v14 != 1)
    {
      v18 = *(_QWORD **)(v0 + 13448);
      swift_bridgeObjectRelease(v18[745]);
      swift_bridgeObjectRelease(v18[746]);
      swift_bridgeObjectRelease(v18[747]);
      swift_bridgeObjectRelease(v18[750]);
    }
    v19 = *(_QWORD **)(v0 + 13448);
    swift_bridgeObjectRelease(v19[752]);
    swift_unknownObjectRelease(v19[753]);
    swift_bridgeObjectRelease(v19[758]);
    swift_bridgeObjectRelease(v19[759]);
    swift_bridgeObjectRelease(v19[760]);
    swift_bridgeObjectRelease(v19[761]);
    v20 = type metadata accessor for LegacySynthesizedWorkflows();
    swift_deallocPartialClassInstance(v19, v20, 6096, 7);
    v21 = *(_QWORD *)(v0 + 13624);
    v22 = *(_QWORD *)(v0 + 13616);
    v23 = *(_QWORD *)(v0 + 13592);
    v24 = *(_QWORD *)(v0 + 13584);
    v25 = *(_QWORD *)(v0 + 13560);
    v26 = *(_QWORD *)(v0 + 13552);
    v27 = *(_QWORD *)(v0 + 13528);
    v28 = *(_QWORD *)(v0 + 13520);
    v29 = *(_QWORD *)(v0 + 13496);
    v97 = *(_QWORD *)(v0 + 13472);
    swift_task_dealloc(*(_QWORD *)(v0 + 13648));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v97);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v1 = *(_QWORD *)(v0 + 13592);
  sub_100038B24(*(_QWORD *)(v0 + 13432) + OBJC_IVAR____TtC8coreidvd21LegacyWorkflowPackage_persoWorkflow, v1, &qword_100632300);
  v2 = sub_100004828((uint64_t *)&unk_100632340);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 13592);
  v6 = *(_QWORD *)(v0 + 13448);
  if (v4 == 1)
  {
    v7 = *(_QWORD *)(v0 + 13424);
    sub_100035B1C(v0 + 11856);
    sub_100008030(v5, &qword_100632300);
    v8 = *(_QWORD *)(v7 + 5984);
    *(_QWORD *)(v6 + 5984) = v8;
    swift_bridgeObjectRetain(v8);
LABEL_48:
    v87 = (_QWORD *)swift_task_alloc(dword_1006313D4);
    *(_QWORD *)(v0 + 13672) = v87;
    *v87 = v0;
    v87[1] = sub_100053860;
    sub_1000543E4();
    return;
  }
  v89 = v0 + 11856;
  JWSSignedJSON.payload.getter(v2);
  v30 = *(_QWORD *)(v0 + 13400);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v6 + 5984) = v30;
  v31 = *(_QWORD *)(v30 + 16);
  if (!v31)
  {
    sub_100035B1C(v89);
    goto LABEL_48;
  }
  v96 = v0 + 13224;
  v91 = v0 + 13248;
  v93 = v0 + 13368;
  v92 = (uint64_t *)(v0 + 13408);
  swift_bridgeObjectRetain_n(v30, 2);
  v88 = v30;
  v32 = (uint64_t *)(v30 + 64);
  while (1)
  {
    v34 = *(v32 - 3);
    v99 = *(v32 - 4);
    v36 = (_QWORD *)*(v32 - 2);
    v35 = *(v32 - 1);
    v37 = *v32;
    if (v36)
    {
      if (v36[2])
        break;
    }
    if (v37)
    {
      sub_1000A1F54(v0 + 13128, v93, &qword_100632378);
      sub_1000A1F54(v93, (uint64_t)v92, &qword_100632378);
      v53 = *v92;
      if (!*v92 || !*(_QWORD *)(v53 + 16))
        goto LABEL_13;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain_n(v37, 2);
      swift_bridgeObjectRetain(v34);
      v54 = sub_1004A8604(v35, v37);
      if ((v55 & 1) != 0)
      {
        v98 = v36;
        v56 = v34;
        v57 = *(_QWORD *)(v0 + 13448);
        v58 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 16 * v54);
        v90 = *v58;
        v95 = v58[1];
        swift_bridgeObjectRetain(v95);
        v40 = v37;
        swift_bridgeObjectRelease(v37);
        swift_beginAccess(v57 + 6064, v91, 33, 0);
        swift_bridgeObjectRetain(v56);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v57 + 6064));
        v60 = *(_QWORD **)(v57 + 6064);
        *(_QWORD *)(v57 + 6064) = 0x8000000000000000;
        v62 = sub_1004A8604(v99, v56);
        v63 = v60[2];
        v64 = (v61 & 1) == 0;
        v65 = v63 + v64;
        if (__OFADD__(v63, v64))
          goto LABEL_52;
        v66 = v61;
        if (v60[3] >= v65)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v61 & 1) == 0)
              goto LABEL_43;
          }
          else
          {
            sub_10012A478();
            if ((v66 & 1) == 0)
              goto LABEL_43;
          }
        }
        else
        {
          sub_100125370(v65, isUniquelyReferenced_nonNull_native);
          v67 = sub_1004A8604(v99, v56);
          if ((v66 & 1) != (v68 & 1))
          {
LABEL_49:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            return;
          }
          v62 = v67;
          if ((v66 & 1) == 0)
          {
LABEL_43:
            v60[(v62 >> 6) + 8] |= 1 << v62;
            v81 = (uint64_t *)(v60[6] + 16 * v62);
            *v81 = v99;
            v81[1] = v56;
            v82 = (_QWORD *)(v60[7] + 32 * v62);
            *v82 = v90;
            v82[1] = v95;
            v82[2] = 0;
            v82[3] = 0xE000000000000000;
            v83 = v60[2];
            v76 = __OFADD__(v83, 1);
            v84 = v83 + 1;
            if (v76)
              goto LABEL_53;
            v60[2] = v84;
            swift_bridgeObjectRetain(v56);
LABEL_45:
            v85 = *(_QWORD *)(v0 + 13448);
            v86 = *(_QWORD *)(v85 + 6064);
            *(_QWORD *)(v85 + 6064) = v60;
            swift_bridgeObjectRelease(v86);
            swift_bridgeObjectRelease(v56);
            swift_endAccess(v91);
            v80 = v56;
LABEL_41:
            swift_bridgeObjectRelease(v80);
            swift_bridgeObjectRelease(v98);
            v33 = (_QWORD *)v40;
            goto LABEL_12;
          }
        }
        v71 = (_QWORD *)(v60[7] + 32 * v62);
        v72 = v71[3];
        swift_bridgeObjectRelease(v71[1]);
        swift_bridgeObjectRelease(v72);
        *v71 = v90;
        v71[1] = v95;
        v71[2] = 0;
        v71[3] = 0xE000000000000000;
        goto LABEL_45;
      }
      swift_bridgeObjectRelease_n(v37, 2);
      swift_bridgeObjectRelease(v34);
      v33 = v36;
    }
    else
    {
      v33 = 0;
    }
LABEL_12:
    swift_bridgeObjectRelease(v33);
LABEL_13:
    v32 += 5;
    if (!--v31)
    {
      swift_bridgeObjectRelease(v88);
      sub_100035B1C(v89);
      swift_bridgeObjectRelease(v88);
      goto LABEL_48;
    }
  }
  v38 = *(_QWORD *)(v0 + 13448);
  v39 = v36[5];
  v94 = v36[4];
  swift_beginAccess(v38 + 6064, v96, 33, 0);
  v40 = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v39);
  v41 = *(_QWORD *)(v38 + 6064);
  swift_bridgeObjectRetain_n(v34, 2);
  v98 = v36;
  swift_bridgeObjectRetain(v36);
  v42 = swift_isUniquelyReferenced_nonNull_native(v41);
  v43 = *(_QWORD **)(v38 + 6064);
  *(_QWORD *)(v38 + 6064) = 0x8000000000000000;
  v44 = v34;
  v46 = sub_1004A8604(v99, v34);
  v47 = v43[2];
  v48 = (v45 & 1) == 0;
  v49 = v47 + v48;
  if (!__OFADD__(v47, v48))
  {
    v50 = v45;
    if (v43[3] < v49)
    {
      sub_100125370(v49, v42);
      v51 = sub_1004A8604(v99, v44);
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_49;
      v46 = v51;
      if ((v50 & 1) == 0)
        goto LABEL_38;
LABEL_32:
      v69 = (_QWORD *)(v43[7] + 32 * v46);
      v70 = v69[3];
      swift_bridgeObjectRelease(v69[1]);
      swift_bridgeObjectRelease(v70);
      *v69 = v94;
      v69[1] = v39;
      v69[2] = 0;
      v69[3] = 0xE000000000000000;
LABEL_40:
      v78 = *(_QWORD *)(v0 + 13448);
      v79 = *(_QWORD *)(v78 + 6064);
      *(_QWORD *)(v78 + 6064) = v43;
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v44);
      swift_endAccess(v96);
      v80 = v44;
      goto LABEL_41;
    }
    if ((v42 & 1) != 0)
    {
      if ((v45 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      sub_10012A478();
      if ((v50 & 1) != 0)
        goto LABEL_32;
    }
LABEL_38:
    v43[(v46 >> 6) + 8] |= 1 << v46;
    v73 = (uint64_t *)(v43[6] + 16 * v46);
    *v73 = v99;
    v73[1] = v44;
    v74 = (_QWORD *)(v43[7] + 32 * v46);
    *v74 = v94;
    v74[1] = v39;
    v74[2] = 0;
    v74[3] = 0xE000000000000000;
    v75 = v43[2];
    v76 = __OFADD__(v75, 1);
    v77 = v75 + 1;
    if (v76)
      goto LABEL_51;
    v43[2] = v77;
    swift_bridgeObjectRetain(v44);
    goto LABEL_40;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

uint64_t sub_100053860(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 13672);
  *(_QWORD *)(*v2 + 13680) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100053FC4;
  }
  else
  {
    *(_QWORD *)(v4 + 13688) = a1;
    v6 = sub_1000538D4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000538D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 13680);
  v2 = *(_QWORD **)(v0 + 13448);
  v3 = v2[752];
  v2[752] = *(_QWORD *)(v0 + 13688);
  swift_bridgeObjectRelease(v3);
  v4 = v2[2];
  swift_beginAccess(v2 + 760, v0 + 13200, 33, 0);
  v5 = swift_retain(v4);
  sub_10006AB14(v5, v2 + 760);
  if (v1)
  {
    v6 = *(_QWORD *)(v0 + 13448);
    v7 = *(_QWORD *)(v0 + 13432);
    v8 = *(_QWORD *)(v0 + 13424);
    swift_endAccess(v0 + 13200);
    swift_release(v7);
    swift_release(v8);
    swift_release(v4);
    swift_release(v6);
    v9 = *(_QWORD *)(v0 + 13624);
    v10 = *(_QWORD *)(v0 + 13616);
    v11 = *(_QWORD *)(v0 + 13592);
    v12 = *(_QWORD *)(v0 + 13584);
    v13 = *(_QWORD *)(v0 + 13560);
    v14 = *(_QWORD *)(v0 + 13552);
    v15 = *(_QWORD *)(v0 + 13528);
    v16 = *(_QWORD *)(v0 + 13520);
    v77 = *(_QWORD *)(v0 + 13496);
    v80 = *(_QWORD *)(v0 + 13472);
    swift_task_dealloc(*(_QWORD *)(v0 + 13648));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v77);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v67 = *(_QWORD *)(v0 + 13584);
    v81 = v0 + 13272;
    v68 = *(_QWORD *)(v0 + 13576);
    v66 = *(_QWORD *)(v0 + 13568);
    v74 = *(_QWORD *)(v0 + 13544);
    v78 = *(_QWORD *)(v0 + 13536);
    v18 = *(_QWORD **)(v0 + 13528);
    v69 = *(_QWORD *)(v0 + 13552);
    v70 = *(_QWORD *)(v0 + 13512);
    v71 = *(_QWORD *)(v0 + 13504);
    v19 = *(_QWORD *)(v0 + 13448);
    v20 = *(_QWORD *)(v0 + 13424);
    swift_endAccess(v0 + 13200);
    swift_release(v4);
    swift_beginAccess(v20 + 6088, v0 + 13320, 0, 0);
    v21 = *(_QWORD *)(v20 + 6088);
    swift_beginAccess(v19 + 6088, v0 + 13344, 1, 0);
    v22 = *(_QWORD *)(v19 + 6088);
    *(_QWORD *)(v19 + 6088) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v22);
    sub_10001CFF8(0, (unint64_t *)&unk_1006308F8, OS_dispatch_source_ptr);
    *(_QWORD *)(v0 + 13416) = _swiftEmptyArrayStorage;
    v23 = sub_100093620(&qword_100632350, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
    v24 = sub_100004828(&qword_100632358);
    v25 = sub_100099FFC((unint64_t *)&unk_100632360, &qword_100632358, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 13416, v24, v25, v66, v23);
    sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v67, v26);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v66);
    swift_beginAccess(v19 + 6024, v0 + 13296, 1, 0);
    v28 = *(_QWORD *)(v19 + 6024);
    *(_QWORD *)(v19 + 6024) = v27;
    v29 = swift_unknownObjectRelease(v28);
    static DispatchTime.now()(v29);
    *v18 = 600;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v70 + 104))(v18, enum case for DispatchTimeInterval.seconds(_:), v71);
    + infix(_:_:)(v69, v18);
    v30 = *(void (**)(_QWORD *, uint64_t))(v70 + 8);
    v30(v18, v71);
    v31 = v78;
    v79 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v79(v69, v31);
    v32 = *(_QWORD *)(v19 + 6024);
    if (v32)
    {
      v33 = *(_QWORD **)(v0 + 13528);
      v34 = *(_QWORD **)(v0 + 13520);
      v35 = *(_QWORD *)(v0 + 13504);
      v72 = *(_QWORD *)(v0 + 13560);
      v75 = *(_QWORD *)(v0 + 13448);
      ObjectType = swift_getObjectType(v32);
      v37 = enum case for DispatchTimeInterval.never(_:);
      v38 = type metadata accessor for DispatchTimeInterval(0);
      v39 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104);
      v39(v33, v37, v38);
      *v34 = 0;
      v39(v34, enum case for DispatchTimeInterval.nanoseconds(_:), v38);
      swift_unknownObjectRetain(v32);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v72, v33, v34, ObjectType);
      swift_unknownObjectRelease(v32);
      v30(v34, v35);
      v30(v33, v35);
      v40 = *(_QWORD *)(v75 + 6024);
      if (v40)
      {
        v41 = *(_QWORD *)(v0 + 13496);
        v73 = *(_QWORD *)(v0 + 13488);
        v76 = *(_QWORD *)(v0 + 13480);
        v42 = *(_QWORD *)(v0 + 13472);
        v43 = *(_QWORD *)(v0 + 13464);
        v44 = *(_QWORD *)(v0 + 13456);
        v45 = *(_QWORD *)(v0 + 13448);
        v46 = swift_getObjectType(v40);
        v47 = swift_allocObject(&unk_100605D20, 24, 7);
        swift_weakInit(v47 + 16, v45);
        *(_QWORD *)(v0 + 13184) = sub_1000994AC;
        *(_QWORD *)(v0 + 13192) = v47;
        *(_QWORD *)(v0 + 13152) = _NSConcreteStackBlock;
        *(_QWORD *)(v0 + 13160) = 1107296256;
        *(_QWORD *)(v0 + 13168) = sub_1004AB190;
        *(_QWORD *)(v0 + 13176) = &unk_100605D60;
        v48 = _Block_copy((const void *)(v0 + 13152));
        swift_unknownObjectRetain(v40);
        v49 = swift_retain(v47);
        static DispatchQoS.unspecified.getter(v49);
        sub_1000508A8();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)(v41, v42, v48, v46);
        _Block_release(v48);
        swift_unknownObjectRelease(v40);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v41, v76);
        swift_release(*(_QWORD *)(v0 + 13192));
        swift_release(v47);
      }
    }
    v50 = *(_QWORD *)(v0 + 13448);
    v51 = swift_beginAccess(v50 + 6024, v81, 32, 0);
    v52 = *(_QWORD *)(v50 + 6024);
    v53 = *(_QWORD *)(v0 + 13560);
    v54 = *(_QWORD *)(v0 + 13536);
    v55 = *(_QWORD *)(v0 + 13432);
    v56 = *(_QWORD *)(v0 + 13424);
    if (v52)
    {
      swift_endAccess(v81);
      swift_getObjectType(v52);
      swift_unknownObjectRetain(v52);
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease(v52);
      swift_release(v55);
      swift_release(v56);
      v79(v53, v54);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD, __n128))v79)(*(_QWORD *)(v0 + 13560), *(_QWORD *)(v0 + 13536), v51);
      swift_endAccess(v81);
      swift_release(v55);
      swift_release(v56);
    }
    v57 = *(_QWORD *)(v0 + 13624);
    v58 = *(_QWORD *)(v0 + 13616);
    v59 = *(_QWORD *)(v0 + 13592);
    v60 = *(_QWORD *)(v0 + 13584);
    v61 = *(_QWORD *)(v0 + 13560);
    v62 = *(_QWORD *)(v0 + 13552);
    v63 = *(_QWORD *)(v0 + 13528);
    v64 = *(_QWORD *)(v0 + 13520);
    v65 = *(_QWORD *)(v0 + 13496);
    v82 = *(_QWORD *)(v0 + 13472);
    swift_task_dealloc(*(_QWORD *)(v0 + 13648));
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 13448));
  }
}

uint64_t sub_100053FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 13448);
  v2 = *(_QWORD *)(v0 + 13424);
  swift_release(*(_QWORD *)(v0 + 13432));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 13624);
  v4 = *(_QWORD *)(v0 + 13616);
  v5 = *(_QWORD *)(v0 + 13592);
  v6 = *(_QWORD *)(v0 + 13584);
  v7 = *(_QWORD *)(v0 + 13560);
  v8 = *(_QWORD *)(v0 + 13552);
  v9 = *(_QWORD *)(v0 + 13528);
  v10 = *(_QWORD *)(v0 + 13520);
  v11 = *(_QWORD *)(v0 + 13496);
  v13 = *(_QWORD *)(v0 + 13472);
  swift_task_dealloc(*(_QWORD *)(v0 + 13648));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000540B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[740];
  _BYTE v23[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + 753;
  swift_beginAccess(v0 + 753, v23, 0, 0);
  v11 = v0[753];
  if (v11)
  {
    ObjectType = swift_getObjectType(v11);
    v21 = v2;
    v13 = ObjectType;
    v22[4] = nullsub_7;
    v22[5] = 0;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    v22[2] = sub_1004AB190;
    v22[3] = &unk_100605DB0;
    v14 = _Block_copy(v22);
    v20 = v6;
    v15 = v3;
    v16 = v14;
    v17 = swift_unknownObjectRetain(v11);
    static DispatchQoS.unspecified.getter(v17);
    sub_1000508A8();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v5, v16, v13);
    _Block_release(v16);
    swift_unknownObjectRelease(v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v21);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
    v18 = *v10;
    if (*v10)
    {
      swift_getObjectType(*v10);
      swift_unknownObjectRetain(v18);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v18);
    }
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  sub_1000A1F54((uint64_t)(v1 + 4), (uint64_t)v22, &qword_1006322D8);
  sub_100093660(v22, sub_10008FDDC);
  swift_bridgeObjectRelease(v1[745]);
  swift_bridgeObjectRelease(v1[746]);
  swift_bridgeObjectRelease(v1[747]);
  swift_bridgeObjectRelease(v1[748]);
  swift_bridgeObjectRelease(v1[750]);
  swift_bridgeObjectRelease(v1[752]);
  swift_unknownObjectRelease(v1[753]);
  swift_bridgeObjectRelease(v1[758]);
  swift_bridgeObjectRelease(v1[759]);
  swift_bridgeObjectRelease(v1[760]);
  swift_bridgeObjectRelease(v1[761]);
  return v1;
}

uint64_t sub_100054320()
{
  uint64_t v0;

  sub_1000540B8();
  return swift_deallocClassInstance(v0, 6096, 7);
}

void (*sub_100054340(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100069CB8(v6, a2, a3);
  return sub_1000543AC;
}

void sub_1000543AC(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

uint64_t sub_1000543E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[8] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100054444, 0, 0);
}

uint64_t sub_100054444()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  if (*(_BYTE *)(v1 + 6056) == 1)
  {
    v2 = *(_QWORD **)(v1 + 16);
    v3 = *(_QWORD **)((char *)v2 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination);
    *(_QWORD *)(v0 + 96) = v3;
    if (!v3)
    {
      v14 = *(_QWORD *)(v0 + 88);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v14, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 72));
      v15 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v16 = type metadata accessor for DIPError(0);
      v17 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v16, v17, 0, 0);
      v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100542F10, 0, v14, 0, v15, 0xD000000000000051, 0x8000000100542B50, 0x6C75706F70657270, 0xED00002928657461, 279);
      swift_willThrow(v18);
      swift_task_dealloc(*(_QWORD *)(v0 + 88));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v4 = *(_QWORD **)((char *)v2 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    *(_QWORD *)(v0 + 104) = v4;
    v5 = v2[20];
    v6 = v2[21];
    *(_QWORD *)(v0 + 112) = v6;
    v7 = v2[22];
    *(_QWORD *)(v0 + 120) = v7;
    swift_beginAccess(v1 + 6064, v0 + 40, 0, 0);
    v8 = *(_QWORD *)(v1 + 6064);
    *(_QWORD *)(v0 + 128) = v8;
    v9 = *(_QWORD *)(v1 + 6072);
    *(_QWORD *)(v0 + 136) = v9;
    v10 = unk_10063257C;
    v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100632578
                                                                                       + dword_100632578);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 144) = v11;
    v12 = sub_100054774;
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 24);
    if (v13)
    {
      v4 = *(_QWORD **)(v13 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
      v3 = *(_QWORD **)(v13 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v3);
    }
    else
    {
      v3 = _swiftEmptyArrayStorage;
      v4 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v0 + 160) = v3;
    *(_QWORD *)(v0 + 168) = v4;
    v20 = *(_QWORD **)(v1 + 16);
    v5 = v20[20];
    v6 = v20[21];
    *(_QWORD *)(v0 + 176) = v6;
    v7 = v20[22];
    *(_QWORD *)(v0 + 184) = v7;
    swift_beginAccess(v1 + 6064, v0 + 16, 0, 0);
    v8 = *(_QWORD *)(v1 + 6064);
    *(_QWORD *)(v0 + 192) = v8;
    v21 = *(_QWORD *)(v1 + 6072);
    *(_QWORD *)(v0 + 200) = v21;
    v22 = unk_10063257C;
    v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100632578
                                                                                       + dword_100632578);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v21);
    v11 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v0 + 208) = v11;
    v12 = sub_1000548CC;
  }
  *v11 = v0;
  v11[1] = v12;
  return v23((uint64_t)v4, (uint64_t)v3, v5, v6, v7, v8);
}

uint64_t sub_100054774(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*v2 + 144);
  v5 = *v2;
  *(_QWORD *)(v5 + 152) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100054850, 0, 0);
  v7 = *(_QWORD *)(v5 + 128);
  v9 = *(_QWORD *)(v5 + 112);
  v8 = *(_QWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 96);
  v10 = *(_QWORD *)(v5 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 136));
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  swift_task_dealloc(*(_QWORD *)(v5 + 88));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_100054850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000548CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 192);
  v7 = *(_QWORD *)(v5 + 200);
  v8 = *(_QWORD *)(v5 + 176);
  v9 = *(_QWORD *)(v5 + 184);
  v10 = *(_QWORD *)(v5 + 160);
  v11 = *(_QWORD *)(v5 + 168);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 200));
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v11);
    swift_task_dealloc(*(_QWORD *)(v5 + 88));
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 168));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    swift_task_dealloc(*(_QWORD *)(v5 + 88));
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_1000549DC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  v2._countAndFlagsBits = 45;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + 24);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 16);
    v4 = *(void **)(v3 + 24);
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    v4 = (void *)0xEB00000000454C42;
    v5 = 0x414C494156414E55;
  }
  v6._countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v4);
  return v8;
}

uint64_t sub_100054A78@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates);
  v37 = a1;
  if (!v14 || !*(_QWORD *)(v14 + 16))
  {
    v21 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
LABEL_8:
    sub_100008030((uint64_t)v13, &qword_1006322E0);
    v35 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v36);
    v35 = 0xD00000000000002DLL;
    v36 = 0x8000000100542EB0;
    v23._countAndFlagsBits = v37;
    v23._object = a2;
    String.append(_:)(v23);
    v24 = v35;
    v25 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v7);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v24, v25, 0, v10, 0, v26, 0xD000000000000051, 0x8000000100542B50, 0xD000000000000022, 0x8000000100542EE0, 326);
    return swift_willThrow(v29);
  }
  v34 = a3;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(a2);
  v15 = sub_1004A8604(a1, (uint64_t)a2);
  if ((v16 & 1) != 0)
  {
    v17 = v15;
    v32 = *(_QWORD *)(v14 + 56);
    v18 = type metadata accessor for RecipientEncryptionCertificate(0);
    v33 = v7;
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v13, v32 + *(_QWORD *)(v19 + 72) * v17, v18);
    v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56);
    v7 = v33;
    v20(v13, 0, 1, v18);
  }
  else
  {
    v18 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v14);
  type metadata accessor for RecipientEncryptionCertificate(0);
  v22 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v18) == 1)
    goto LABEL_8;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v34, v13, v18);
}

uint64_t sub_100054D9C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v3 + 24);
  if (!v14
    || (v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates)) == 0
    || !*(_QWORD *)(v15 + 16))
  {
    v22 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 1, 1, v22);
LABEL_7:
    sub_100008030((uint64_t)v13, &qword_1006322E0);
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(v37);
    v36 = 0xD00000000000002CLL;
    v37 = 0x8000000100542E50;
    v23._countAndFlagsBits = a1;
    v23._object = a2;
    String.append(_:)(v23);
    v24 = v36;
    v25 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DIPError.Code.serverResponseInconsistent(_:), v7);
    v26 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v24, v25, 0, v10, 0, v26, 0xD000000000000051, 0x8000000100542B50, 0xD000000000000021, 0x8000000100542E80, 333);
    return swift_willThrow(v29);
  }
  v38 = a3;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(a2);
  v16 = sub_1004A8604(a1, (uint64_t)a2);
  if ((v17 & 1) != 0)
  {
    v18 = *(_QWORD *)(v15 + 56);
    v33 = v16;
    v34 = v18;
    v19 = type metadata accessor for RecipientEncryptionCertificate(0);
    v35 = a1;
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v13, v34 + *(_QWORD *)(v20 + 72) * v33, v19);
    v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
    a1 = v35;
    v21(v13, 0, 1, v19);
  }
  else
  {
    v19 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v15);
  type metadata accessor for RecipientEncryptionCertificate(0);
  v31 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v13, 1, v19) == 1)
    goto LABEL_7;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v38, v13, v19);
}

_QWORD *sub_1000550B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields));
  v4 = v3 - 1;
  v5 = 32;
  v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    v7 = *(_OWORD *)(v2 + v5 + 16);
    v34 = *(_OWORD *)(v2 + v5);
    v35 = v7;
    v8 = *(_OWORD *)(v2 + v5 + 32);
    v9 = *(_OWORD *)(v2 + v5 + 48);
    v10 = *(_OWORD *)(v2 + v5 + 80);
    v38 = *(_OWORD *)(v2 + v5 + 64);
    v39 = v10;
    v36 = v8;
    v37 = v9;
    v11 = *(_OWORD *)(v2 + v5 + 96);
    v12 = *(_OWORD *)(v2 + v5 + 112);
    v13 = *(_OWORD *)(v2 + v5 + 128);
    v43 = *(_QWORD *)(v2 + v5 + 144);
    v41 = v12;
    v42 = v13;
    v40 = v11;
    if ((BYTE8(v37) & 1) != 0)
    {
      sub_100099520(&v34);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
      v44 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000E41B8(0, v6[2] + 1, 1);
        v6 = v44;
      }
      v16 = v6[2];
      v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000E41B8(v15 > 1, v16 + 1, 1);
        v6 = v44;
      }
      v6[2] = v16 + 1;
      v17 = &v6[19 * v16];
      v18 = v35;
      *((_OWORD *)v17 + 2) = v34;
      *((_OWORD *)v17 + 3) = v18;
      v19 = v36;
      v20 = v37;
      v21 = v39;
      *((_OWORD *)v17 + 6) = v38;
      *((_OWORD *)v17 + 7) = v21;
      *((_OWORD *)v17 + 4) = v19;
      *((_OWORD *)v17 + 5) = v20;
      v22 = v40;
      v23 = v41;
      v24 = v42;
      v17[22] = v43;
      *((_OWORD *)v17 + 9) = v23;
      *((_OWORD *)v17 + 10) = v24;
      *((_OWORD *)v17 + 8) = v22;
    }
    if (!v4)
      break;
    --v4;
    v5 += 152;
  }
  swift_bridgeObjectRelease(v2);
  v25 = v6[2];
  if (!v25)
  {
    swift_release(v6);
    return _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v34 = _swiftEmptyArrayStorage;
  sub_1000E419C(0, v25, 0);
  v26 = v34;
  v27 = v6 + 5;
  do
  {
    v29 = *(v27 - 1);
    v28 = *v27;
    *(_QWORD *)&v34 = v26;
    v30 = *(_QWORD *)(v26 + 16);
    v31 = *(_QWORD *)(v26 + 24);
    swift_bridgeObjectRetain(v28);
    if (v30 >= v31 >> 1)
    {
      sub_1000E419C(v31 > 1, v30 + 1, 1);
      v26 = v34;
    }
    v27 += 19;
    *(_QWORD *)(v26 + 16) = v30 + 1;
    v32 = v26 + 16 * v30;
    *(_QWORD *)(v32 + 32) = v29;
    *(_QWORD *)(v32 + 40) = v28;
    --v25;
  }
  while (v25);
  swift_release(v6);
  return (_QWORD *)v26;
}

_QWORD *sub_1000552C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = sub_100004828(&qword_1006322F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HardwareAttestationType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  if (v9)
  {
    v10 = *(_QWORD **)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  }
  else
  {
    sub_100038B24(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, (uint64_t)v3, &qword_1006322F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_100008030((uint64_t)v3, &qword_1006322F0);
      v10 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v11(v7, v3, v4);
      v12 = sub_100004828(&qword_100632570);
      v13 = *(_QWORD *)(v5 + 72);
      v14 = *(unsigned __int8 *)(v5 + 80);
      v15 = (v14 + 32) & ~v14;
      v10 = (_QWORD *)swift_allocObject(v12, v15 + v13, v14 | 7);
      *((_OWORD *)v10 + 1) = xmmword_10051FFB0;
      v11((char *)v10 + v15, v7, v4);
    }
  }
  swift_bridgeObjectRetain(v9);
  return v10;
}

_QWORD *sub_10005543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = sub_100004828(&qword_1006322F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HardwareAttestationType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + 24);
  if (!v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
LABEL_6:
    sub_100008030((uint64_t)v3, &qword_1006322F0);
    return _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
  if (!v9)
  {
    sub_100038B24(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, (uint64_t)v3, &qword_1006322F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      v10 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v10(v7, v3, v4);
      v11 = sub_100004828(&qword_100632570);
      v12 = *(unsigned __int8 *)(v5 + 80);
      v13 = (v12 + 32) & ~v12;
      v9 = swift_allocObject(v11, v13 + *(_QWORD *)(v5 + 72), v12 | 7);
      *(_OWORD *)(v9 + 16) = xmmword_10051FFB0;
      v10((char *)(v9 + v13), v7, v4);
      return (_QWORD *)v9;
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v8 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes));
  return (_QWORD *)v9;
}

_QWORD *sub_1000555CC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    sub_1000E419C(0, v2, 0);
    v3 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v6 >= v7 >> 1)
        sub_1000E419C(v7 > 1, v6 + 1, 1);
      v3 += 19;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      v8 = &_swiftEmptyArrayStorage[2 * v6];
      v8[4] = v5;
      v8[5] = v4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000556BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Swift::String v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7._object = (void *)0x8000000100542E20;
  v7._countAndFlagsBits = 0xD000000000000028;
  v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    v10 = defaultLogger()(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "INTERNAL SETTING switched to FORCE AssessmentServer Data", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 1;
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 24);
    if (v15)
      return *(_BYTE *)(v15 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) & 1;
    else
      return 0;
  }
}

uint64_t sub_100055820()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  Swift::Bool v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3._object = (void *)0x8000000100542E00;
  v3._countAndFlagsBits = 0xD000000000000019;
  v4 = NSUserDefaults.internalBool(forKey:)(v3);

  if (!v4)
  {
    v5 = *(_QWORD *)(v1 + 24);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof);
      if (v6 != 2)
        return v6 & 1;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields);
    if (v7)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFF8;
      if ((unint64_t)v7 >> 62)
        goto LABEL_34;
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v7);
      for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v24))
      {
        if ((v7 & 0xC000000000000001) != 0)
        {
          v10 = 0;
          while (1)
          {
            v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
            v12 = v10 + 1;
            if (__OFADD__(v10, 1))
              break;
            v13 = v11;
            v14 = *(_QWORD *)(v11 + 24);
            if (v14)
            {
              v15 = *(_QWORD *)(v11 + 16);
              if (v15 == 0x746E656D75636F64 && v14 == 0xE800000000000000)
              {
                swift_bridgeObjectRelease(v7);
                swift_unknownObjectRelease(v13);
                return 0;
              }
              v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, 0x746E656D75636F64, 0xE800000000000000, 0);
              swift_unknownObjectRelease(v13);
              if ((v17 & 1) != 0)
                goto LABEL_29;
            }
            else
            {
              swift_unknownObjectRelease(v11);
            }
            ++v10;
            if (v12 == v9)
              goto LABEL_38;
          }
          __break(1u);
        }
        else
        {
          v19 = 0;
          while (1)
          {
            v20 = v19 + 1;
            if (__OFADD__(v19, 1))
              break;
            v8 = *(_QWORD *)(v7 + 8 * v19 + 32);
            v21 = *(_QWORD *)(v8 + 24);
            if (v21)
            {
              v22 = *(_QWORD *)(v8 + 16);
              v23 = v22 == 0x746E656D75636F64 && v21 == 0xE800000000000000;
              if (v23
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0x746E656D75636F64, 0xE800000000000000, 0) & 1) != 0)
              {
LABEL_29:
                swift_bridgeObjectRelease(v7);
                return 0;
              }
            }
            ++v19;
            if (v20 == v9)
              goto LABEL_38;
          }
        }
        __break(1u);
LABEL_34:
        if (v7 >= 0)
          v24 = v8;
        else
          v24 = v7;
        swift_bridgeObjectRetain(v7);
      }
LABEL_38:
      swift_bridgeObjectRelease(v7);
    }
  }
  return 1;
}

uint64_t sub_100055A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v17 - v5;
  if ((*(_BYTE *)(v0 + 6008) & 1) != 0)
    return sub_100399CBC(0x14uLL);
  v7 = *(_QWORD *)(v0 + 6032);
  v8 = *(_QWORD *)(v0 + 5976);
  if (v7 >= *(_QWORD *)(v8 + 16))
  {
    v12 = defaultLogger()(result);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "no more fresh nonces to use", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    return 0;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v7 + 1;
    v10 = v8 + 16 * v7;
    v16 = *(_QWORD *)(v10 + 32);
    v11 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v0 + 6032) = v9;
    swift_bridgeObjectRetain(v11);
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100055D34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, uint64_t);
  void (*v25)(_QWORD *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[5];
  uint64_t v51;
  char v52[24];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  __chkstk_darwin(v5);
  v43 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTimeInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v41 - v12);
  v49 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v49 - 8);
  v15 = __chkstk_darwin(v49);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v20 = v1[747];
  v1[747] = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v20);
  v1[754] = 0;
  v21 = v1 + 753;
  swift_beginAccess(v1 + 753, v52, 0, 0);
  v42 = v1;
  v23 = v1[753];
  if (v23)
  {
    swift_getObjectType(v23);
    swift_unknownObjectRetain(v23);
    OS_dispatch_source.suspend()();
    v22 = swift_unknownObjectRelease(v23);
  }
  static DispatchTime.now()(v22);
  *v13 = 600;
  v24 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104);
  v24(v13, enum case for DispatchTimeInterval.seconds(_:), v7);
  + infix(_:_:)(v17, v13);
  v25 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v25(v13, v7);
  v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v17, v49);
  v27 = *v21;
  if (*v21)
  {
    ObjectType = swift_getObjectType(*v21);
    v24(v13, enum case for DispatchTimeInterval.never(_:), v7);
    *v11 = 0;
    v24(v11, enum case for DispatchTimeInterval.nanoseconds(_:), v7);
    swift_unknownObjectRetain(v27);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v19, v13, v11, ObjectType);
    swift_unknownObjectRelease(v27);
    v25(v11, v7);
    v25(v13, v7);
    v29 = *v21;
    if (*v21)
    {
      v30 = swift_getObjectType(*v21);
      v31 = swift_allocObject(&unk_100605D20, 24, 7);
      v32 = v19;
      v33 = v42;
      swift_weakInit(v31 + 16, v42);
      aBlock[4] = sub_1000994AC;
      v51 = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004AB190;
      aBlock[3] = &unk_100605D88;
      v34 = _Block_copy(aBlock);
      swift_unknownObjectRetain(v29);
      v35 = swift_retain(v31);
      v36 = v43;
      static DispatchQoS.unspecified.getter(v35);
      v37 = v46;
      sub_1000508A8();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v36, v37, v34, v30);
      _Block_release(v34);
      swift_unknownObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v48);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v45);
      v38 = v51;
      swift_release(v31);
      swift_release(v38);
      v39 = v33[753];
      v19 = v32;
      if (v39)
      {
        swift_getObjectType(v39);
        swift_unknownObjectRetain(v39);
        v19 = v32;
        OS_dispatch_source.resume()();
        swift_unknownObjectRelease(v39);
      }
    }
  }
  return ((uint64_t (*)(char *, uint64_t))v26)(v19, v49);
}

uint64_t sub_10005612C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(_QWORD *)(result + 5976);
    *(_QWORD *)(result + 5976) = &_swiftEmptyArrayStorage;
    swift_release(result);
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

void sub_10005618C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = *(_QWORD *)(v1 + 5968);
  if (v3 && (v4 = *(_QWORD *)(v1 + 6040), v4 < *(_QWORD *)(v3 + 16)))
  {
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      v5 = v3 + 16 * v4;
      v6 = *(_QWORD *)(v5 + 40);
      v12[0] = *(_QWORD *)(v5 + 32);
      v12[1] = v6;
      swift_bridgeObjectRetain(v6);
      v7 = String.init<A>(_:)(v12, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
      *(_QWORD *)(a1 + 24) = &type metadata for String;
      *(_QWORD *)(a1 + 32) = &off_10060B728;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      v9 = *(_QWORD *)(v1 + 6040);
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        *(_QWORD *)(v1 + 6040) = v11;
        return;
      }
    }
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t sub_100056240(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005627C + 4 * byte_100520960[a1]))(0x7265566C65646F6DLL, 0xEC0000006E6F6973);
}

uint64_t sub_10005627C()
{
  return 0x616353746E6F7266;
}

uint64_t sub_100056298()
{
  return 0x6E6163536B636162;
}

uint64_t sub_1000562B0()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1000562E4()
{
  return 0x6569666C6573;
}

uint64_t sub_1000562F8()
{
  return 0x7373656E6576696CLL;
}

uint64_t sub_100056310()
{
  return 0x65766973736170;
}

unint64_t sub_100056328()
{
  return 0xD000000000000015;
}

uint64_t sub_100056344()
{
  return 0x7461726F6C707865;
}

uint64_t sub_100056364()
{
  return 0x6953726566667562;
}

uint64_t sub_100056380()
{
  return 0x646E695772756C62;
}

uint64_t sub_10005639C()
{
  return 0x72466E6163536469;
}

uint64_t sub_1000563C0()
{
  return 0x6172466F65646976;
}

uint64_t sub_1000563EC()
{
  unsigned __int8 *v0;

  return sub_100056240(*v0);
}

uint64_t sub_1000563F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006AE98(a1, a2);
  *a3 = result;
  return result;
}

void sub_100056418(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100056424(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000569AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005644C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000569AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IQModel.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE v29[832];
  _BYTE v30[832];
  _BYTE v31[832];
  _BYTE v32[832];
  _BYTE v33[832];
  _BYTE v34[832];
  _BYTE v35[832];
  _BYTE v36[840];
  _BYTE v37[8];

  v3 = v1;
  v5 = sub_100004828(&qword_1006312E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000569AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQModel.CodingKeys, &type metadata for IQModel.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v29[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v29, v5);
  if (!v2)
  {
    sub_1000A1F54((uint64_t)(v3 + 2), (uint64_t)v36, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v36, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 1;
    v14 = sub_1000569F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 106), (uint64_t)v35, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v35, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 210), (uint64_t)v34, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v34, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 314), (uint64_t)v33, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v33, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 418), (uint64_t)v32, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v32, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 522), (uint64_t)v31, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v31, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 626), (uint64_t)v30, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v30, (uint64_t)v29, &qword_1006312F0);
    BYTE4(v28) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, &type metadata for IQCriteria, v14);
    sub_1000A1F54((uint64_t)(v3 + 730), (uint64_t)v37, (uint64_t *)&unk_100631300);
    sub_1000A1F54((uint64_t)v37, (uint64_t)v29, (uint64_t *)&unk_100631300);
    BYTE4(v28) = 8;
    v15 = sub_100004828(&qword_1006368D0);
    v16 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, (char *)&v28 + 4, v5, v15, v16);
    v17 = *((unsigned int *)v3 + 1462);
    v18 = *((_BYTE *)v3 + 5852);
    v29[0] = 9;
    BYTE4(v28) = v18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17 | ((unint64_t)v18 << 32), v29, v5);
    v19 = v3[732];
    v20 = *((unsigned __int8 *)v3 + 5864);
    v29[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v29, v5);
    v21 = v3[734];
    v22 = *((unsigned __int8 *)v3 + 5880);
    v29[0] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v29, v5);
    v23 = v3[736];
    v24 = *((unsigned __int8 *)v3 + 5896);
    v29[0] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v29, v5);
    v25 = v3[738];
    v26 = *((unsigned __int8 *)v3 + 5912);
    v29[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v29, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000569AC()
{
  unint64_t result;

  result = qword_1006312E8;
  if (!qword_1006312E8)
  {
    result = swift_getWitnessTable(&unk_100521988, &type metadata for IQModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006312E8);
  }
  return result;
}

unint64_t sub_1000569F0()
{
  unint64_t result;

  result = qword_1006312F8;
  if (!qword_1006312F8)
  {
    result = swift_getWitnessTable(&unk_100521960, &type metadata for IQCriteria);
    atomic_store(result, (unint64_t *)&qword_1006312F8);
  }
  return result;
}

void *IQModel.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[5920];

  result = sub_10006B4F8(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x1719uLL);
  return result;
}

uint64_t sub_100056A9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100056AD4 + 4 * byte_10052096E[a1]))(0x656E697272756C62, 0xEA00000000007373);
}

uint64_t sub_100056AD4()
{
  return 0x657275736F707865;
}

uint64_t sub_100056AEC()
{
  return 0x7473694464726163;
}

unint64_t sub_100056B10()
{
  return 0xD000000000000010;
}

uint64_t sub_100056D9C()
{
  return 0x6556746567726174;
}

uint64_t sub_100056DC0()
{
  return 0x74614D797A7A7566;
}

uint64_t sub_100056DE4()
{
  return 0x7373656E6576696CLL;
}

uint64_t sub_100056E08()
{
  return 0x456873616C467369;
}

uint64_t sub_100056E2C()
{
  return 0x6F7779654B72636FLL;
}

uint64_t sub_100056E4C()
{
  return 0x5378656C706D6F63;
}

uint64_t sub_100056E70(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _BYTE v28[32];
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[32];
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[32];
  _BYTE v37[32];
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];
  _BYTE v41[32];
  _BYTE v42[32];
  _BYTE v43[32];
  _BYTE v44[32];
  _BYTE v45[32];
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[40];
  _BYTE v56[8];

  v3 = v1;
  v5 = sub_100004828(&qword_100632058);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D4AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQCriteria.CodingKeys, &type metadata for IQCriteria.CodingKeys, v11, v9, v10);
  sub_1000A1F54((uint64_t)v3, (uint64_t)v55, &qword_100632068);
  sub_1000A1F54((uint64_t)v55, (uint64_t)v28, &qword_100632068);
  v27 = 0;
  v12 = sub_10008D4F0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
  if (!v2)
  {
    sub_1000A1F54((uint64_t)(v3 + 32), (uint64_t)v54, &qword_100632068);
    sub_1000A1F54((uint64_t)v54, (uint64_t)v28, &qword_100632068);
    v27 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 64), (uint64_t)v53, &qword_100632068);
    sub_1000A1F54((uint64_t)v53, (uint64_t)v28, &qword_100632068);
    v27 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 96), (uint64_t)v52, &qword_100632068);
    sub_1000A1F54((uint64_t)v52, (uint64_t)v28, &qword_100632068);
    v27 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 128), (uint64_t)v51, &qword_100632068);
    sub_1000A1F54((uint64_t)v51, (uint64_t)v28, &qword_100632068);
    v27 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 160), (uint64_t)v50, &qword_100632068);
    sub_1000A1F54((uint64_t)v50, (uint64_t)v28, &qword_100632068);
    v27 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 192), (uint64_t)v49, &qword_100632068);
    sub_1000A1F54((uint64_t)v49, (uint64_t)v28, &qword_100632068);
    v27 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 224), (uint64_t)v48, &qword_100632068);
    sub_1000A1F54((uint64_t)v48, (uint64_t)v28, &qword_100632068);
    v27 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 256), (uint64_t)v47, &qword_100632068);
    sub_1000A1F54((uint64_t)v47, (uint64_t)v28, &qword_100632068);
    v27 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 288), (uint64_t)v46, &qword_100632068);
    sub_1000A1F54((uint64_t)v46, (uint64_t)v28, &qword_100632068);
    v27 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 320), (uint64_t)v45, &qword_100632068);
    sub_1000A1F54((uint64_t)v45, (uint64_t)v28, &qword_100632068);
    v27 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 352), (uint64_t)v44, &qword_100632068);
    sub_1000A1F54((uint64_t)v44, (uint64_t)v28, &qword_100632068);
    v27 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 384), (uint64_t)v43, &qword_100632068);
    sub_1000A1F54((uint64_t)v43, (uint64_t)v28, &qword_100632068);
    v27 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 416), (uint64_t)v42, &qword_100632068);
    sub_1000A1F54((uint64_t)v42, (uint64_t)v28, &qword_100632068);
    v27 = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 448), (uint64_t)v41, &qword_100632068);
    sub_1000A1F54((uint64_t)v41, (uint64_t)v28, &qword_100632068);
    v27 = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 480), (uint64_t)v40, &qword_100632068);
    sub_1000A1F54((uint64_t)v40, (uint64_t)v28, &qword_100632068);
    v27 = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 512), (uint64_t)v39, &qword_100632068);
    sub_1000A1F54((uint64_t)v39, (uint64_t)v28, &qword_100632068);
    v27 = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 544), (uint64_t)v38, &qword_100632068);
    sub_1000A1F54((uint64_t)v38, (uint64_t)v28, &qword_100632068);
    v27 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 576), (uint64_t)v37, &qword_100632068);
    sub_1000A1F54((uint64_t)v37, (uint64_t)v28, &qword_100632068);
    v27 = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 608), (uint64_t)v36, &qword_100632068);
    sub_1000A1F54((uint64_t)v36, (uint64_t)v28, &qword_100632068);
    v27 = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 640), (uint64_t)v35, &qword_100632068);
    sub_1000A1F54((uint64_t)v35, (uint64_t)v28, &qword_100632068);
    v27 = 20;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 672), (uint64_t)v34, &qword_100632068);
    sub_1000A1F54((uint64_t)v34, (uint64_t)v28, &qword_100632068);
    v27 = 21;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 704), (uint64_t)v33, &qword_100632068);
    sub_1000A1F54((uint64_t)v33, (uint64_t)v28, &qword_100632068);
    v27 = 22;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 736), (uint64_t)v32, &qword_100632068);
    sub_1000A1F54((uint64_t)v32, (uint64_t)v28, &qword_100632068);
    v27 = 23;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQRangeProperties, v12);
    sub_1000A1F54((uint64_t)(v3 + 768), (uint64_t)v31, &qword_100632078);
    sub_1000A1F54((uint64_t)v31, (uint64_t)v28, &qword_100632078);
    v27 = 24;
    v13 = sub_10008D534();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQBoolProperties, v13);
    sub_1000A1F54((uint64_t)(v3 + 792), (uint64_t)v30, &qword_100632078);
    sub_1000A1F54((uint64_t)v30, (uint64_t)v28, &qword_100632078);
    v27 = 25;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, &type metadata for IQBoolProperties, v13);
    v14 = v3[809];
    v28[0] = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v28, v5);
    v15 = v3[810];
    v28[0] = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v28, v5);
    v16 = v3[811];
    v28[0] = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v28, v5);
    v17 = v3[812];
    v28[0] = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v28, v5);
    v18 = v3[813];
    v28[0] = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v28, v5);
    v19 = v3[814];
    v28[0] = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v28, v5);
    v20 = v3[815];
    v28[0] = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v28, v5);
    sub_1000A1F54((uint64_t)(v3 + 816), (uint64_t)v56, (uint64_t *)&unk_100631300);
    sub_1000A1F54((uint64_t)v56, (uint64_t)v28, (uint64_t *)&unk_100631300);
    v27 = 33;
    v21 = sub_100004828(&qword_1006368D0);
    v22 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, v21, v22);
    sub_1000A1F54((uint64_t)(v3 + 824), (uint64_t)&v29, &qword_100632088);
    sub_1000A1F54((uint64_t)&v29, (uint64_t)v28, &qword_100632088);
    v27 = 34;
    v23 = sub_100004828(&qword_100632090);
    v24 = sub_1000A1F98(&qword_100632098, &qword_100632090, (void (*)(void))sub_10008D578, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v27, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100057AD8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;

  HIDWORD(v20) = a5;
  v21 = a3;
  v9 = sub_100004828(&qword_100632208);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_10008DF38();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQRangeProperties.CodingKeys, &type metadata for IQRangeProperties.CodingKeys, v15, v14, v13);
  v25 = a2;
  v24 = 0;
  v16 = sub_100004828(&qword_1006321F8);
  v17 = sub_10008F400(&qword_100632210, &qword_1006321F8, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v25, &v24, v9, v16, v17);
  if (!v5)
  {
    v23 = 1;
    v18 = BYTE4(v20);
    KeyedEncodingContainer.encode(_:forKey:)(v21 & 1, &v23, v9);
    v22 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a4, v18 & 1, &v22, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100057C6C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100004828(&qword_1006328C8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_1000A1D34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQBoolProperties.CodingKeys, &type metadata for IQBoolProperties.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, &v21, v8);
  if (!v4)
  {
    v15 = v18;
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v20, v8);
    v19 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v15 & 1, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100057DBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v19 = a5;
  v20 = a4;
  v9 = sub_100004828(&qword_1006328D8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_1000A1D78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQComplexProperties.CodingKeys, &type metadata for IQComplexProperties.CodingKeys, v15, v14, v13);
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v24, v9);
  if (!v5)
  {
    v16 = v19;
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v23, v9);
    v21 = v16;
    v22 = 2;
    sub_100004828(&qword_1006328E8);
    sub_1000A1F98(&qword_1006328F0, &qword_1006328E8, (void (*)(void))sub_1000A1DBC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100057F4C(_QWORD *a1)
{
  float *v1;
  uint64_t v2;
  float *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100004828(&qword_100632A28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000A2A74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IQSignalProperties.CodingKeys, &type metadata for IQSignalProperties.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)v3;
  v13 = *((_QWORD *)v3 + 1);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v20, v5);
    v16 = v3[8];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v19, v5, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100058088(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000580C0 + 4 * byte_100520991[a1]))(0xD000000000000011, 0x80000001005432A0);
}

uint64_t sub_1000580C0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100058128(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  _BYTE v23[2];
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_100004828(&qword_100632900);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000A1E00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ImageFormat.CodingKeys, &type metadata for ImageFormat.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, &v27, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v26, v5);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v25, v5);
    v24 = *((_QWORD *)v3 + 6);
    v23[1] = 3;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
    v18 = v3[7];
    v23[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v5, v18);
    v19 = *((_QWORD *)v3 + 8);
    v22 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100058320(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _OWORD v21[4];
  uint64_t v22;
  _BYTE v23[8];

  v3 = v1;
  v5 = sub_100004828(&qword_1006320A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D5BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DocumentConfig.CodingKeys, &type metadata for DocumentConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v21[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    v14 = *((_OWORD *)v3 + 4);
    v21[2] = *((_OWORD *)v3 + 3);
    v21[3] = v14;
    v22 = v3[10];
    v15 = *((_OWORD *)v3 + 2);
    v21[0] = *((_OWORD *)v3 + 1);
    v21[1] = v15;
    v20 = 1;
    sub_10008D600();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21);
    sub_1000A1F54((uint64_t)(v3 + 11), (uint64_t)v23, (uint64_t *)&unk_100631300);
    sub_1000A1F54((uint64_t)v23, (uint64_t)v21, (uint64_t *)&unk_100631300);
    v20 = 2;
    v16 = sub_100004828(&qword_1006368D0);
    v17 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000584E8(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[5913];

  memcpy(v4, v1, sizeof(v4));
  return IQModel.encode(to:)(a1);
}

void sub_100058550()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_100058578()
{
  unsigned __int8 *v0;

  return sub_100056A9C(*v0);
}

uint64_t sub_100058580@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006C5F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000585A4(_BYTE *a1@<X8>)
{
  *a1 = 35;
}

uint64_t sub_1000585B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D4AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000585D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D4AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100058600@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[832];

  result = sub_10006D51C(a1, (uint64_t)v5);
  if (!v2)
    return memcpy(a2, v5, 0x340uLL);
  return result;
}

uint64_t sub_100058650(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[832];

  memcpy(v4, v1, sizeof(v4));
  return sub_100056E70(a1);
}

uint64_t sub_1000586A0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x636974796C616E61;
  if (*v0 != 1)
    v1 = 0x797469726F697270;
  if (*v0)
    return v1;
  else
    return 0x65676E6172;
}

uint64_t sub_1000586FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100070C44(a1, a2);
  *a3 = result;
  return result;
}

void sub_100058720(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10005872C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DF38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058754(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DF38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005877C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  uint64_t v6;
  char v7;

  result = sub_100070D9C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1000587B8(_QWORD *a1)
{
  uint64_t v1;

  return sub_100057AD8(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1000587DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x636974796C616E61;
  if (*v0 != 1)
    v1 = 0x797469726F697270;
  if (*v0)
    return v1;
  else
    return 0x65756C6176;
}

uint64_t sub_100058838@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100070FA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005885C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1D34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1D34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000588AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000710FC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_BYTE *)(a2 + 1) = BYTE1(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1000588E8(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_100057C6C(a1, v2 | *v1, *((_QWORD *)v1 + 1), v1[16]);
}

uint64_t sub_100058924()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x797469726F697270;
  if (*v0 != 1)
    v1 = 0x736C616E676973;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_100058984@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100071288(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000589A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1D78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000589D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1D78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000589F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000713E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100058A24(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100057DBC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100058A40()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74617261706D6F63;
  if (*v0 != 1)
    v1 = 0x6C6F687365726874;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_100058A9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100071600(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100058AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2A74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2A74();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100058B10@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  sub_10007175C(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100058B54(_QWORD *a1)
{
  return sub_100057F4C(a1);
}

uint64_t sub_100058B68()
{
  unsigned __int8 *v0;

  return sub_100058088(*v0);
}

uint64_t sub_100058B70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100071984(a1, a2);
  *a3 = result;
  return result;
}

void sub_100058B94(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100058BA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1E00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058BC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1E00();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100058BF0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100071BE4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100058C40(_QWORD *a1)
{
  return sub_100058128(a1);
}

uint64_t sub_100058C54()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x726F466567616D69;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_100058CB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100071FF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100058CD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D5BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058D00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D5BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100058D28@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_100072150(a1, (uint64_t *)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100058D70(_QWORD *a1)
{
  return sub_100058320(a1);
}

uint64_t sub_100058DB0(char *a1, char *a2)
{
  return sub_1003C2180(*a1, *a2);
}

Swift::Int sub_100058DBC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x676E6972616873;
  else
    v2 = 0x676E69666F6F7270;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100058E3C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x676E6972616873;
  else
    v2 = 0x676E69666F6F7270;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100058E98(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x676E6972616873;
  else
    v3 = 0x676E69666F6F7270;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100058F14@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1005FFFE0;
  return sub_10005D5D8(v2, a1, a2);
}

void sub_100058F20(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E69666F6F7270;
  if (*v1)
    v2 = 0x676E6972616873;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100058F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008DEF4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100058FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008DEF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100059008()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x65756C6176;
}

uint64_t sub_100059044@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000724A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100059068(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100059074(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D864();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005909C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D864();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000590C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t sub_1000590E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_100004828((uint64_t *)&unk_100632560);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D864();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ServerEndPoint.CodingKeys, &type metadata for ServerEndPoint.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v18, v5);
  if (!v2)
  {
    v14 = *(unsigned __int8 *)(v3 + 32);
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000591FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = sub_100004828(&qword_100632158);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D864();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ServerEndPoint.CodingKeys, &type metadata for ServerEndPoint.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v14 = type metadata accessor for ServerEndPoint();
    swift_deallocPartialClassInstance(v1, v14, 33, 7);
  }
  else
  {
    v19 = 0;
    *(_QWORD *)(v1 + 16) = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    *(_QWORD *)(v1 + 24) = v12;
    v18 = 1;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v5, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)(v3 + 32) = v16 & 1;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v3;
}

uint64_t sub_100059380(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000593A8 + 4 * byte_100520997[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1000593A8()
{
  return 0x65756C6176;
}

unint64_t sub_1000593BC()
{
  return 0xD000000000000013;
}

unint64_t sub_1000593E4()
{
  return 0xD000000000000015;
}

uint64_t sub_100059404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005AE38(a1, type metadata accessor for ServerEndPoint, 33, (uint64_t (*)(uint64_t))sub_1000591FC, a2);
}

uint64_t sub_10005942C(_QWORD *a1)
{
  return sub_1000590E8(a1);
}

uint64_t sub_10005944C()
{
  unsigned __int8 *v0;

  return sub_100059380(*v0);
}

uint64_t sub_100059454@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100072588(a1, a2);
  *a3 = result;
  return result;
}

void sub_100059478(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100059484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D8A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000594AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D8A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000594D4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm;
  v2 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate
                                      + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100059548(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[2];
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100004828(&qword_100632550);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 5];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D8A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserInputValidationURL.CodingKeys, &type metadata for UserInputValidationURL.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + 32);
    v15 = *(_QWORD *)(v3 + 40);
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v24, v5);
    v16 = *(unsigned __int8 *)(v3 + 48);
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v23, v5);
    v17 = v3 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm;
    v22[1] = 3;
    type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
    sub_100093620(&qword_100632558, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for EncryptionParamsAlgorithmIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17);
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
    v22[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v22, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100059720(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v3 = type metadata accessor for EncryptionParamsAlgorithmIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100004828(&qword_100632168);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  v34 = a1;
  sub_10000806C(a1, v11);
  v12 = sub_10008D8A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserInputValidationURL.CodingKeys, &type metadata for UserInputValidationURL.CodingKeys, v12, v11, v10);
  if (v1)
  {
    v19 = v35;
    v16 = v34;
    v17 = type metadata accessor for UserInputValidationURL(0);
    swift_deallocPartialClassInstance(v19, v17, *(unsigned int *)(*(_QWORD *)v19 + 48), *(unsigned __int16 *)(*(_QWORD *)v19 + 52));
    v29 = v16;
  }
  else
  {
    v31 = v6;
    v32 = v4;
    v13 = v7;
    v40 = 0;
    v14 = v33;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v33);
    v19 = v35;
    *(_QWORD *)(v35 + 16) = v15;
    *(_QWORD *)(v19 + 24) = v20;
    v39 = 1;
    *(_QWORD *)(v19 + 32) = KeyedDecodingContainer.decode(_:forKey:)(&v39, v14);
    *(_QWORD *)(v19 + 40) = v21;
    v38 = 2;
    *(_BYTE *)(v19 + 48) = KeyedDecodingContainer.decode(_:forKey:)(&v38, v14, v22) & 1;
    v37 = 3;
    v23 = sub_100093620(&qword_100632178, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptionParamsAlgorithmIdentifier, (uint64_t)&protocol conformance descriptor for EncryptionParamsAlgorithmIdentifier);
    v24 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v3, &v37, v14, v3, v23);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v32 + 32))(v19 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionAlgorithm, v24, v3);
    v36 = 4;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v33);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v33);
    v28 = (uint64_t *)(v19 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
    *v28 = v25;
    v28[1] = v27;
    v29 = v34;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v29);
  return v19;
}

uint64_t sub_100059A60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_100004828(&qword_1006321D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_10008DE6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AcceptedVerifiedClaim.CodingKeys, &type metadata for AcceptedVerifiedClaim.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100059B88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for UserInputValidationURL(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_100059720(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_100059BE0(_QWORD *a1)
{
  return sub_100059548(a1);
}

void sub_100059C00(char *a1)
{
  sub_1003C1D28(*a1);
}

void sub_100059C0C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_100059C50()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64496F6962, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_100059CB4()
{
  __asm { BR              X10 }
}

uint64_t sub_100059CE8(uint64_t a1)
{
  String.hash(into:)(a1, 0x64496F6962, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100059D38(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100059D78()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64496F6962, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100059DDC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100072768(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100059E08()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100059E30 + 4 * byte_1005209A8[*v0]))();
}

void sub_100059E30(_QWORD *a1@<X8>)
{
  *a1 = 0x64496F6962;
  a1[1] = 0xE500000000000000;
}

void sub_100059E48(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F6373736170;
  a1[1] = 0xE800000000000000;
}

void sub_100059E64(_QWORD *a1@<X8>)
{
  *a1 = 7958113;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_100059E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008DEB0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100059ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008DEB0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100059F20()
{
  _BYTE *v0;

  if (*v0)
    return 0x6954746567726174;
  else
    return 0x72656469766F7270;
}

uint64_t sub_100059F60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000727B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100059F84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DE6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100059FAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DE6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100059FD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000728B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10005A000(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100059A60(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10005A01C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003C0E14(*a1, *a2);
}

Swift::Int sub_10005A028()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB00000000644965;
  v3 = 0x7475626972747461;
  if (v1 != 1)
  {
    v3 = 25705;
    v2 = 0xE200000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x74615070756F7267;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE900000000000068;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10005A0C8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000644965;
  v3 = 0x7475626972747461;
  if (*v1 != 1)
  {
    v3 = 25705;
    v2 = 0xE200000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x74615070756F7267;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE900000000000068;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10005A144(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB00000000644965;
  v4 = 0x7475626972747461;
  if (v2 != 1)
  {
    v4 = 25705;
    v3 = 0xE200000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x74615070756F7267;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE900000000000068;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10005A1E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100072A5C(*a1);
  *a2 = result;
  return result;
}

void sub_10005A20C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000068;
  v4 = 0xEB00000000644965;
  v5 = 0x7475626972747461;
  if (v2 != 1)
  {
    v5 = 25705;
    v4 = 0xE200000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x74615070756F7267;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10005A26C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 25705;
  if (*v0)
    return v1;
  else
    return 0x74615070756F7267;
}

unint64_t sub_10005A2C8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100072A5C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005A2EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D8EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005A314(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D8EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10005A33C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100004828(&qword_100632180);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D8EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for VerifiedClaimField.CodingKeys, &type metadata for VerifiedClaimField.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v14 = type metadata accessor for VerifiedClaimField();
    swift_deallocPartialClassInstance(v1, v14, 64, 7);
  }
  else
  {
    v22 = 0;
    v1[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v1[3] = v12;
    v21 = 1;
    v1[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v5);
    v1[5] = v13;
    v20 = 2;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v20, v5);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[6] = v16;
    v3[7] = v18;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v3;
}

uint64_t sub_10005A508()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10005A53C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100004828(&qword_100632548);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D8EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for VerifiedClaimField.CodingKeys, &type metadata for VerifiedClaimField.CodingKeys, v11, v9, v10);
  v12 = v3[2];
  v13 = v3[3];
  v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[4];
    v15 = v3[5];
    v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[6];
    v17 = v3[7];
    v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005A678(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_100004828(&qword_100632910);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000806C(a1, v11);
  v13 = sub_1000A1E44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ImageDimension.CodingKeys, &type metadata for ImageDimension.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v7);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10005A794(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005A7CC + 4 * byte_1005209AC[a1]))(0xD000000000000014, 0x8000000100543260);
}

uint64_t sub_10005A7CC()
{
  return 0x6F697463656C6573;
}

uint64_t sub_10005A7E8()
{
  return 0x676E69646F636E65;
}

uint64_t sub_10005A844()
{
  return 0x656E696C6576696CLL;
}

uint64_t sub_10005A860()
{
  return 0x6B6174655278616DLL;
}

uint64_t sub_10005A884()
{
  return 0x656C616373;
}

uint64_t sub_10005A898()
{
  return 0x74756F656D6974;
}

uint64_t sub_10005A8B0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  char v28;

  v3 = v1;
  v5 = sub_100004828(&qword_1006320C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D644();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CameraImage.CodingKeys, &type metadata for CameraImage.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v27, v5);
  if (!v2)
  {
    *(_QWORD *)&v27 = v3[2];
    v28 = 1;
    sub_100004828(&qword_1006320D0);
    sub_10008F400(&qword_1006320D8, &qword_1006320D0, (uint64_t)&protocol witness table for UInt, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27);
    v14 = v3[3];
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v27, v5);
    v27 = *((_OWORD *)v3 + 2);
    v28 = 3;
    sub_10008D688();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27);
    v27 = *((_OWORD *)v3 + 3);
    v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27);
    v15 = v3[8];
    v16 = *((unsigned __int8 *)v3 + 72);
    LOBYTE(v27) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v27, v5);
    v17 = v3[10];
    v18 = *((unsigned __int8 *)v3 + 88);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v27, v5);
    v19 = *((unsigned __int8 *)v3 + 89);
    LOBYTE(v27) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v27, v5);
    v20 = v3[12];
    v21 = *((unsigned __int8 *)v3 + 104);
    LOBYTE(v27) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v27, v5);
    v22 = v3[14];
    v23 = *((unsigned __int8 *)v3 + 120);
    LOBYTE(v27) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v27, v5);
    v24 = v3[16];
    v25 = *((unsigned __int8 *)v3 + 136);
    LOBYTE(v27) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005ABB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v17 = a4;
  v8 = sub_100004828(&qword_1006320E8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_10008D6CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DataNodeProofInfo.CodingKeys, &type metadata for DataNodeProofInfo.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v19, v8);
  if (!v4)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v17, &v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10005ACDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005AD04 + 4 * byte_1005209B7[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10005AD04()
{
  return 0x6465726975716572;
}

unint64_t sub_10005AD1C()
{
  return 0xD000000000000015;
}

unint64_t sub_10005ADA0()
{
  return 0xD00000000000001DLL;
}

void sub_10005ADB8()
{
  JUMPOUT(0x10005ADCCLL);
}

uint64_t sub_10005ADD8()
{
  return 0x736567616D69;
}

uint64_t sub_10005ADEC()
{
  return 0x65646F4E61746164;
}

uint64_t sub_10005AE10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005AE38(a1, type metadata accessor for VerifiedClaimField, 64, (uint64_t (*)(uint64_t))sub_10005A33C, a2);
}

uint64_t sub_10005AE38@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = a2();
  v11 = swift_allocObject(v10, a3, 7);
  result = a4(a1);
  if (!v5)
    *a5 = v11;
  return result;
}

uint64_t sub_10005AE9C(_QWORD *a1)
{
  return sub_10005A53C(a1);
}

BOOL sub_10005AEBC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10005AED4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6874646977;
  else
    return 0x746867696568;
}

uint64_t sub_10005AF08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100072AA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005AF2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1E44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005AF54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1E44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005AF7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100072B84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10005AFA4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10005A678(a1, *v1, v1[1]);
}

uint64_t sub_10005AFBC()
{
  unsigned __int8 *v0;

  return sub_10005A794(*v0);
}

uint64_t sub_10005AFC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100072CD4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005AFE8(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_10005AFF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D644();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005B01C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D644();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10005B044@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_10007314C(a1, v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 121) = *(_OWORD *)((char *)v9 + 9);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10005B09C(_QWORD *a1)
{
  return sub_10005A8B0(a1);
}

uint64_t sub_10005B0B0()
{
  _BYTE *v0;

  if (*v0)
    return 0x74615070756F7267;
  else
    return 0x6564756C636E69;
}

uint64_t sub_10005B0F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100073774(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005B114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D6CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005B13C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D6CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005B164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100073870(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10005B194(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_10005ABB4(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t sub_10005B1B0()
{
  unsigned __int8 *v0;

  return sub_10005ACDC(*v0);
}

uint64_t sub_10005B1B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000739C4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005B1DC(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_10005B1E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C4E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005B210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C4E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserInputField.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE v34[31];
  char v35;
  _BYTE v36[24];
  _BYTE v37[8];
  _BYTE v38[8];

  v3 = v1;
  v5 = sub_100004828(&qword_100631318);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10006C4E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UserInputField.CodingKeys, &type metadata for UserInputField.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v34[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v34, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    v34[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v34, v5);
    v15 = v3[3];
    v16 = v3[4];
    v34[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v34, v5);
    v17 = v3[5];
    v18 = v3[6];
    v34[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v34, v5);
    v19 = *((unsigned __int8 *)v3 + 56);
    v34[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v34, v5);
    v20 = *((unsigned __int8 *)v3 + 57);
    v34[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v34, v5);
    v21 = v3[8];
    v22 = v3[9];
    v34[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v34, v5);
    v23 = v3[10];
    v24 = v3[11];
    v34[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v34, v5);
    v25 = v3[12];
    v26 = v3[13];
    v34[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, v34, v5);
    sub_1000A1F54((uint64_t)(v3 + 14), (uint64_t)v38, &qword_100631328);
    sub_1000A1F54((uint64_t)v38, (uint64_t)v34, &qword_100631328);
    v35 = 9;
    v27 = sub_100004828(&qword_100631330);
    v28 = sub_1000A1F98(&qword_100631338, &qword_100631330, (void (*)(void))sub_10006C524, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, &v35, v5, v27, v28);
    sub_1000A1F54((uint64_t)(v3 + 15), (uint64_t)v37, &qword_100631348);
    sub_1000A1F54((uint64_t)v37, (uint64_t)v34, &qword_100631348);
    v35 = 10;
    v29 = sub_100004828(&qword_100631350);
    v30 = sub_1000A1F98(&qword_100631358, &qword_100631350, (void (*)(void))sub_10006C568, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, &v35, v5, v29, v30);
    sub_1000A1F54((uint64_t)(v3 + 16), (uint64_t)v36, &qword_100631368);
    sub_1000A1F54((uint64_t)v36, (uint64_t)v34, &qword_100631368);
    v35 = 11;
    v31 = sub_10006C5AC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, &v35, v5, &type metadata for DataNodeProofInfo, v31);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

double UserInputField.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  sub_100073E74(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_QWORD *)(a2 + 144) = v10;
    v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = *(double *)v9;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_10005B64C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_100004828(&qword_1006321B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008DE28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareableAttribute.CodingKeys, &type metadata for ShareableAttribute.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v20, v5);
    v16 = *((unsigned __int8 *)v3 + 32);
    v19 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005B788(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005B7B4 + 4 * byte_1005209C3[a1]))(1701273968, 0xE400000000000000);
}

uint64_t sub_10005B7B4()
{
  return 0x656C746974;
}

uint64_t sub_10005B7C8()
{
  return 0x656C746954627573;
}

uint64_t sub_10005B7E0()
{
  return 0x73646C656966;
}

uint64_t sub_10005B7F4()
{
  return 0x736C6562616CLL;
}

uint64_t sub_10005B808()
{
  return 0x6C6562616CLL;
}

uint64_t sub_10005B81C()
{
  return 0x6570795465676170;
}

uint64_t sub_10005B834()
{
  return 0x6E6F6974706163;
}

uint64_t sub_10005B84C()
{
  return 0x7373416567616D69;
}

uint64_t sub_10005B86C(_QWORD *a1)
{
  return UserInputField.encode(to:)(a1);
}

uint64_t sub_10005B8C4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 0x656D737365737361;
  if (*v0)
    return v1;
  else
    return 0x74615070756F7267;
}

uint64_t sub_10005B930@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007479C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005B954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DE28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005B97C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DE28();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10005B9A4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_100074920(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10005B9E8(_QWORD *a1)
{
  return sub_10005B64C(a1);
}

uint64_t sub_10005B9FC()
{
  unsigned __int8 *v0;

  return sub_10005B788(*v0);
}

uint64_t sub_10005BA04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100074B40(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005BA28(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10005BA34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074714();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005BA5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100074714();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _BYTE v31[8];
  _BYTE v32[8];

  v3 = v1;
  v5 = sub_100004828(&qword_100631378);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100074714();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Page.CodingKeys, &type metadata for Page.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v30) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v30, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    LOBYTE(v30) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v30, v5);
    v15 = v3[3];
    v16 = v3[4];
    LOBYTE(v30) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v30, v5);
    v30 = v3[5];
    v29 = 3;
    v17 = sub_100004828(&qword_1006368D0);
    v18 = sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30);
    sub_1000A1F54((uint64_t)(v3 + 6), (uint64_t)v32, &qword_100631388);
    sub_1000A1F54((uint64_t)v32, (uint64_t)&v30, &qword_100631388);
    v29 = 4;
    v19 = sub_100004828(&qword_100631390);
    v20 = sub_1000A1F98(&qword_100631398, &qword_100631390, (void (*)(void))sub_100074758, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
    v21 = v3[7];
    v22 = v3[8];
    LOBYTE(v30) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v30, v5);
    v23 = v3[9];
    v24 = v3[10];
    LOBYTE(v30) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v30, v5);
    v25 = v3[11];
    v26 = v3[12];
    LOBYTE(v30) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v30, v5);
    sub_1000A1F54((uint64_t)(v3 + 13), (uint64_t)v31, (uint64_t *)&unk_100631300);
    sub_1000A1F54((uint64_t)v31, (uint64_t)&v30, (uint64_t *)&unk_100631300);
    v29 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v30, &v29, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 Page.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_100074ED4(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10005BDE4(_QWORD *a1)
{
  return Page.encode(to:)(a1);
}

uint64_t Page.debugDescription.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  void *v35;

  _StringGuts.grow(_:)(87);
  v1._countAndFlagsBits = 0x203A65676170;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x20656C7469740ALL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  v5 = v0[1];
  v6 = (void *)v0[2];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x6C7469746275730ALL;
  v8._object = (void *)0xEA00000000002065;
  String.append(_:)(v8);
  v9 = v0[3];
  v10 = (void *)v0[4];
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x2073646C6569660ALL;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  v13 = v0[5];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = Array.description.getter(v13, &type metadata for String);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0x20736C6562616C0ALL;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17 = v0[6];
  if (v17)
    v18 = (void *)v0[6];
  else
    v18 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v17);
  v19._countAndFlagsBits = Array.description.getter(v18, &type metadata for Label);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0x707954656761700ALL;
  v21._object = (void *)0xEA00000000002065;
  String.append(_:)(v21);
  v22 = v0[10];
  if (v22)
    v23 = v0[9];
  else
    v23 = 0;
  if (v22)
    v24 = (void *)v0[10];
  else
    v24 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v22);
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0x6E6F69747061630ALL;
  v26._object = (void *)0xE900000000000020;
  String.append(_:)(v26);
  v27 = v0[12];
  if (v27)
    v28 = v0[11];
  else
    v28 = 0;
  if (v27)
    v29 = (void *)v0[12];
  else
    v29 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 0x73416567616D690ALL;
  v31._object = (void *)0xED00002073746573;
  String.append(_:)(v31);
  v32 = v0[13];
  if (v32)
    v33 = (void *)v0[13];
  else
    v33 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v32);
  v34._countAndFlagsBits = Array.description.getter(v33, &type metadata for String);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v35);
  return 0;
}

uint64_t sub_10005C108(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005C144 + 4 * byte_1005209CC[a1]))(0xD00000000000001ALL, 0x8000000100543300);
}

unint64_t sub_10005C144()
{
  return 0xD000000000000014;
}

uint64_t sub_10005C160()
{
  return 0x664F7265626D756ELL;
}

uint64_t sub_10005C184()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_10005C19C(_QWORD *a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v11 = sub_100004828(&qword_1006321A0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10000806C(a1, v15);
  v17 = sub_10008DDE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Connectivity.CodingKeys, &type metadata for Connectivity.CodingKeys, v17, v15, v16);
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v11, a3);
  if (!v5)
  {
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v11, a4);
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a2, &v21, v11);
    v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v20, v11, a5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10005C318(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;
  char v26;
  char v27;

  v7 = v4;
  v9 = sub_100004828(a2);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000806C(a1, v13);
  v15 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  v16 = *v7;
  v17 = v7[1];
  v27 = 0;
  v18 = v24[1];
  KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v27, v9);
  if (!v18)
  {
    v19 = v7[2];
    v20 = v7[3];
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v26, v9);
    v21 = v7[4];
    v22 = v7[5];
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v25, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10005C45C(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[2];
  char v19;

  v17 = a4;
  v7 = a2 & 1;
  v8 = sub_100004828(&qword_100632928);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v12);
  v14 = sub_1000A1ECC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AlternativeLabel.CodingKeys, &type metadata for AlternativeLabel.CodingKeys, v14, v12, v13);
  v19 = v7;
  v18[1] = 0;
  sub_10008D7DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v4)
  {
    v18[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v17, v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10005C598(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  _BYTE v26[48];
  _BYTE v27[15];
  char v28;
  _BYTE v29[48];
  _BYTE v30[48];

  v3 = v1;
  v5 = sub_100004828(&qword_1006320F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D710();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Label.CodingKeys, &type metadata for Label.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v26[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v26, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v26[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v26, v5);
    v16 = v3[4];
    v17 = v3[5];
    v26[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v26, v5);
    sub_1000A1F54((uint64_t)(v3 + 6), (uint64_t)v30, &qword_100632108);
    sub_1000A1F54((uint64_t)v30, (uint64_t)v26, &qword_100632108);
    v25 = 3;
    v18 = sub_10008D754();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &type metadata for LabelDetail, v18);
    sub_1000A1F54((uint64_t)(v3 + 12), (uint64_t)v29, &qword_100632118);
    sub_1000A1F54((uint64_t)v29, (uint64_t)v26, &qword_100632118);
    v25 = 4;
    v19 = sub_10008D798();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &type metadata for BusinessChatDetail, v19);
    sub_1000A1F54((uint64_t)(v3 + 18), (uint64_t)&v28, &qword_100632128);
    sub_1000A1F54((uint64_t)&v28, (uint64_t)v26, &qword_100632128);
    v25 = 5;
    v20 = sub_10008D7DC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &type metadata for LabelCondition, v20);
    sub_1000A1F54((uint64_t)(v3 + 19), (uint64_t)v27, &qword_100632138);
    sub_1000A1F54((uint64_t)v27, (uint64_t)v26, &qword_100632138);
    v25 = 6;
    v21 = sub_100004828(&qword_100632140);
    v22 = sub_1000A1F98(&qword_100632148, &qword_100632140, (void (*)(void))sub_10008D820, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005C880(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_100004828(&qword_100632988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000A1F10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EncryptionCertificateInStringFormat.CodingKeys, &type metadata for EncryptionCertificateInStringFormat.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v22, v5);
    v16 = (char *)v3 + *(int *)(type metadata accessor for EncryptionCertificateInStringFormat(0) + 24);
    v21 = 2;
    v17 = type metadata accessor for EncryptedMessageEntity(0);
    v18 = sub_100093620(&qword_100632990, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity, (uint64_t)&protocol conformance descriptor for EncryptedMessageEntity);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v21, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005CA00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __n128 v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  char v32;

  v27 = a2;
  v4 = sub_100004828(&qword_100630258);
  __chkstk_darwin(v4);
  v6 = (_QWORD **)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100004828(&qword_100632938);
  v7 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  __chkstk_darwin(v10);
  v12 = (_QWORD **)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[3];
  v13 = a1[4];
  v29 = a1;
  sub_10000806C(a1, v14);
  v15 = sub_1000A1F10();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EncryptionCertificateInStringFormat.CodingKeys, &type metadata for EncryptionCertificateInStringFormat.CodingKeys, v15, v14, v13);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(v29);
  v16 = v7;
  v26 = v6;
  v32 = 0;
  v17 = v28;
  v18 = (uint64_t)v12;
  *v12 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v28);
  v12[1] = v19;
  v31 = 1;
  v12[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v17);
  v12[3] = v20;
  v21 = type metadata accessor for EncryptedMessageEntity(0);
  v30 = 2;
  v22 = sub_100093620(&qword_100632948, 255, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedMessageEntity, (uint64_t)&protocol conformance descriptor for EncryptedMessageEntity);
  v23 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, v21, &v30, v17, v21, v22, v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  sub_1000A1F54((uint64_t)v23, v18 + *(int *)(v10 + 24), &qword_100630258);
  sub_100099960(v18, v27);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v29);
  return sub_1000999A4(v18);
}

uint64_t sub_10005CC9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005CCC4 + 4 * byte_1005209D0[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10005CCC4()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10005CCDC()
{
  return 0x4E79616C70736964;
}

uint64_t sub_10005CCFC()
{
  return 0x72656469766F7270;
}

uint64_t sub_10005CD1C()
{
  return 0x617A696E6167726FLL;
}

uint64_t sub_10005CD3C()
{
  return 0x7972747375646E69;
}

uint64_t sub_10005CD54()
{
  return 1701869940;
}

uint64_t sub_10005CD64()
{
  return 0x695468636E75616CLL;
}

unint64_t sub_10005CD90()
{
  return 0xD000000000000010;
}

uint64_t sub_10005CDAC()
{
  return 0x6574726F70707573;
}

unint64_t sub_10005CDD0()
{
  return 0xD000000000000012;
}

uint64_t sub_10005CEA0()
{
  return 0x4155656C62616E65;
}

uint64_t sub_10005CEBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005CEE4 + 4 * byte_1005209E3[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10005CEE4()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10005CEFC()
{
  return 0x4E79616C70736964;
}

uint64_t sub_10005CF1C()
{
  return 0x72656469766F7270;
}

uint64_t sub_10005CF3C()
{
  return 0x617A696E6167726FLL;
}

uint64_t sub_10005CF5C()
{
  return 0x7972747375646E69;
}

uint64_t sub_10005CF74()
{
  return 1701869940;
}

uint64_t sub_10005CF84()
{
  return 0x695468636E75616CLL;
}

unint64_t sub_10005CFB0()
{
  return 0xD000000000000010;
}

uint64_t sub_10005CFCC()
{
  return 0x6574726F70707573;
}

unint64_t sub_10005CFF0()
{
  return 0xD000000000000012;
}

uint64_t sub_10005D0C0()
{
  return 0x4155656C62616E65;
}

uint64_t sub_10005D0E0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C746954627573;
  if (*v0 != 1)
    v1 = 2036625250;
  if (*v0)
    return v1;
  else
    return 0x656C746974;
}

uint64_t sub_10005D130@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008D930(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008F2D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D17C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008F2D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10005D1A4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10005D3E4(a1, &qword_100632260, (uint64_t (*)(void))sub_10008F2D0, (uint64_t)&type metadata for LabelDetail.CodingKeys, a2);
}

uint64_t sub_10005D1D0(_QWORD *a1)
{
  return sub_10005C318(a1, &qword_100632270, (uint64_t (*)(void))sub_10008F2D0, (uint64_t)&type metadata for LabelDetail.CodingKeys);
}

uint64_t sub_10005D1FC()
{
  unsigned __int8 *v0;

  return sub_10005C108(*v0);
}

uint64_t sub_10005D204@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008DA6C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005D228(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10005D234(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DDE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D25C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008DDE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005D284@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008DC34(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10005D2B4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10005C19C(a1, *(_QWORD *)(v1 + 16), *(double *)v1, *(double *)(v1 + 8), *(double *)(v1 + 24));
}

uint64_t sub_10005D2D4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0x614E746E65746E69;
  if (*v0)
    return v1;
  else
    return 0x69546E6F74747562;
}

uint64_t sub_10005D344@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008DF7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D368(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008F28C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D390(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008F28C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10005D3B8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10005D3E4(a1, &qword_100632248, (uint64_t (*)(void))sub_10008F28C, (uint64_t)&type metadata for BusinessChatDetail.CodingKeys, a2);
}

double sub_10005D3E4@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;

  sub_10008E0F8(a1, a2, a3, a4, (uint64_t *)v9);
  if (!v5)
  {
    v8 = v9[1];
    *a5 = v9[0];
    a5[1] = v8;
    result = *(double *)&v10;
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10005D430(_QWORD *a1)
{
  return sub_10005C318(a1, &qword_100632258, (uint64_t (*)(void))sub_10008F28C, (uint64_t)&type metadata for BusinessChatDetail.CodingKeys);
}

uint64_t sub_10005D45C(char *a1, char *a2)
{
  return sub_1003C1E5C(*a1, *a2);
}

Swift::Int sub_10005D468()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x4D49536C617564;
  else
    v2 = 0x4953656C676E6973;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE90000000000004DLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10005D4EC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x4D49536C617564;
  else
    v2 = 0x4953656C676E6973;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE90000000000004DLL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10005D54C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x4D49536C617564;
  else
    v3 = 0x4953656C676E6973;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE90000000000004DLL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10005D5CC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100600118;
  return sub_10005D5D8(v2, a1, a2);
}

uint64_t sub_10005D5D8@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_10005D630(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x4953656C676E6973;
  if (*v1)
    v2 = 0x4D49536C617564;
  v3 = 0xE90000000000004DLL;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10005D674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A1E88();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005D6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A1E88();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10005D71C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E65746E6F63;
  else
    return 0x6F697469646E6F63;
}

uint64_t sub_10005D75C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008E334(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1ECC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D7A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1ECC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005D7D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10008E430(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10005D800(_QWORD *a1)
{
  uint64_t v1;

  return sub_10005C45C(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_10005D81C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005D840 + 4 * byte_1005209F6[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10005D840()
{
  return 0x746E65746E6F63;
}

uint64_t sub_10005D858()
{
  return 0x69546E6F74747562;
}

uint64_t sub_10005D878()
{
  return 0x6C6961746564;
}

uint64_t sub_10005D88C()
{
  return 0x7373656E69737562;
}

uint64_t sub_10005D8AC()
{
  return 0x6F697469646E6F63;
}

uint64_t sub_10005D8C8()
{
  return 7629921;
}

uint64_t sub_10005D8D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10008E59C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005D8FC(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10005D908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D930(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008D710();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10005D958@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  sub_10008E88C(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_10005D9B0(_QWORD *a1)
{
  return sub_10005C598(a1);
}

Swift::Int sub_10005DA00()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10005DA44(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10005DA84()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E696E676973;
  if (*v0 != 1)
    v1 = 0x6E65697069636572;
  if (*v0)
    return v1;
  else
    return 0x656572674179656BLL;
}

uint64_t sub_10005DAEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100092EEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005DB10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1F10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005DB38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A1F10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005DB60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005CA00(a1, a2);
}

uint64_t sub_10005DB74(_QWORD *a1)
{
  return sub_10005C880(a1);
}

uint64_t sub_10005DB88(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10005CC9C);
}

Swift::Int sub_10005DB94(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_10005CC9C);
}

uint64_t sub_10005DBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10005CC9C);
}

Swift::Int sub_10005DBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10005CC9C);
}

uint64_t sub_10005DBB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100093064(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10005DBE4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005CC9C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005DC0C()
{
  unsigned __int8 *v0;

  return sub_10005CEBC(*v0);
}

uint64_t sub_10005DC14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100093064(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005DC38(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10005DC44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000999E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005DC6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000999E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005DC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, char a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  *(_QWORD *)(v25 + 32) = a3;
  *(_QWORD *)(v25 + 40) = a4;
  *(_QWORD *)(v25 + 48) = a5;
  *(_QWORD *)(v25 + 56) = a6;
  *(_QWORD *)(v25 + 64) = a7;
  *(_QWORD *)(v25 + 72) = a8;
  *(_OWORD *)(v25 + 80) = a9;
  *(_QWORD *)(v25 + 96) = a10;
  *(_QWORD *)(v25 + 104) = a11;
  *(_BYTE *)(v25 + 112) = a12 & 1;
  *(_OWORD *)(v25 + 120) = a13;
  *(_OWORD *)(v25 + 136) = a14;
  *(_OWORD *)(v25 + 152) = a15;
  *(_OWORD *)(v25 + 168) = a16;
  *(_QWORD *)(v25 + 184) = a17;
  *(_QWORD *)(v25 + 192) = a18;
  v26 = v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType;
  *(_BYTE *)(v25 + 200) = a19;
  sub_1000A1F54(a20, v26, &qword_1006322F0);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = a21;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = a22;
  v27 = (_QWORD *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
  *v27 = a23;
  v27[1] = a24;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = a25;
  return v25;
}

uint64_t sub_10005DD7C(uint64_t a1)
{
  return sub_100061710(a1, (void (*)(uint64_t))sub_10005DD98);
}

uint64_t sub_10005DD98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD *v54;
  char v55;

  v3 = sub_100004828(&qword_1006322F0);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004828(&qword_100632480);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000806C(a1, v10);
  v12 = sub_1000999E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyWorkflow.CodingKeys, &type metadata for LegacyWorkflow.CodingKeys, v12, v10, v11);
  if (v1)
  {
    v13 = v53;
    v23 = type metadata accessor for LegacyWorkflow(0);
    swift_deallocPartialClassInstance(v13, v23, *(unsigned int *)(*(_QWORD *)v13 + 48), *(unsigned __int16 *)(*(_QWORD *)v13 + 52));
  }
  else
  {
    LOBYTE(v54) = 0;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    v15 = v53;
    *(_QWORD *)(v53 + 16) = v14;
    *(_QWORD *)(v15 + 24) = v16;
    LOBYTE(v54) = 1;
    *(_QWORD *)(v15 + 32) = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 40) = v17;
    LOBYTE(v54) = 2;
    *(_QWORD *)(v15 + 48) = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 56) = v18;
    LOBYTE(v54) = 3;
    *(_QWORD *)(v15 + 64) = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 72) = v19;
    LOBYTE(v54) = 4;
    *(_QWORD *)(v15 + 80) = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 88) = v20;
    LOBYTE(v54) = 5;
    *(_QWORD *)(v15 + 96) = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 104) = v21;
    v55 = 6;
    v22 = sub_100099A24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for WorkflowType, &v55, v6, &type metadata for WorkflowType, v22);
    *(_BYTE *)(v15 + 112) = (_BYTE)v54;
    LOBYTE(v54) = 7;
    *(_QWORD *)(v15 + 120) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v6);
    *(_QWORD *)(v15 + 128) = v25;
    LOBYTE(v54) = 8;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    v52[1] = 0;
    v27 = v53;
    *(_QWORD *)(v53 + 136) = v26;
    *(_QWORD *)(v27 + 144) = v28;
    v29 = sub_100004828(&qword_1006368D0);
    v55 = 9;
    v30 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, v29, &v55, v6, v29, v30);
    *(_QWORD *)(v53 + 152) = v54;
    LOBYTE(v54) = 10;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    v32 = v53;
    *(_QWORD *)(v53 + 160) = v31;
    *(_QWORD *)(v32 + 168) = v33;
    v55 = 11;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, v29, &v55, v6, v29, v30);
    *(_QWORD *)(v53 + 176) = v54;
    LOBYTE(v54) = 12;
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v6);
    v35 = v53;
    *(_QWORD *)(v53 + 184) = v34;
    *(_QWORD *)(v35 + 192) = v36;
    v55 = 13;
    v37 = sub_100099A68();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for UserConsentType, &v55, v6, &type metadata for UserConsentType, v37);
    *(_BYTE *)(v53 + 200) = (_BYTE)v54;
    v38 = type metadata accessor for HardwareAttestationType(0);
    LOBYTE(v54) = 14;
    v39 = sub_100093620(&qword_1006324A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v38, &v54, v6, v38, v39, v40);
    sub_1000A1F54((uint64_t)v5, v53 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_1006322F0);
    v41 = sub_100004828(&qword_1006324A8);
    v55 = 15;
    v42 = sub_100099AAC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, v41, &v55, v6, v41, v42, v43);
    *(_QWORD *)(v53 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes) = v54;
    v44 = sub_100004828(&qword_1006324B8);
    v55 = 16;
    v45 = sub_1000A1F98(&qword_1006324C0, &qword_1006324B8, (void (*)(void))sub_100099B2C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v54, v44, &v55, v6, v44, v45, v46);
    v47 = v54;
    if (!v54)
      v47 = _swiftEmptyArrayStorage;
    *(_QWORD *)(v53 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields) = v47;
    LOBYTE(v54) = 17;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v6);
    v49 = (uint64_t *)(v53 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
    *v49 = v48;
    v49[1] = v50;
    LOBYTE(v54) = 18;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v13 = v53;
    *(_BYTE *)(v53 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM) = v51;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v13;
}

_QWORD *sub_10005E8F4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[22]);
  swift_bridgeObjectRelease(v0[24]);
  sub_100008030((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType, &qword_1006322F0);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate
                                      + 8));
  return v0;
}

uint64_t sub_10005E9B4()
{
  return sub_100063C8C((void (*)(void))sub_10005E8F4);
}

uint64_t sub_10005E9C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;

  v3 = v1;
  v5 = sub_100004828(&qword_100632510);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000999E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyWorkflow.CodingKeys, &type metadata for LegacyWorkflow.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  LOBYTE(v41) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v41, v5);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + 32);
    v15 = *(_QWORD *)(v3 + 40);
    LOBYTE(v41) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v41, v5);
    v16 = *(_QWORD *)(v3 + 48);
    v17 = *(_QWORD *)(v3 + 56);
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v41, v5);
    v18 = *(_QWORD *)(v3 + 64);
    v19 = *(_QWORD *)(v3 + 72);
    LOBYTE(v41) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v41, v5);
    v20 = *(_QWORD *)(v3 + 80);
    v21 = *(_QWORD *)(v3 + 88);
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v41, v5);
    v22 = *(_QWORD *)(v3 + 96);
    v23 = *(_QWORD *)(v3 + 104);
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v41, v5);
    LOBYTE(v41) = *(_BYTE *)(v3 + 112);
    v42 = 6;
    sub_100099CB8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
    v24 = *(_QWORD *)(v3 + 120);
    v25 = *(_QWORD *)(v3 + 128);
    LOBYTE(v41) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v41, v5);
    v26 = *(_QWORD *)(v3 + 136);
    v27 = *(_QWORD *)(v3 + 144);
    LOBYTE(v41) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v41, v5);
    v41 = *(_QWORD *)(v3 + 152);
    v42 = 9;
    sub_100004828(&qword_1006368D0);
    sub_10008F400((unint64_t *)&qword_100631310, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
    v28 = *(_QWORD *)(v3 + 160);
    v29 = *(_QWORD *)(v3 + 168);
    LOBYTE(v41) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v41, v5);
    v41 = *(_QWORD *)(v3 + 176);
    v42 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
    v30 = *(_QWORD *)(v3 + 184);
    v31 = *(_QWORD *)(v3 + 192);
    LOBYTE(v41) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v41, v5);
    LOBYTE(v41) = *(_BYTE *)(v3 + 200);
    v42 = 13;
    sub_100099CFC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
    v32 = v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationType;
    LOBYTE(v41) = 14;
    v33 = type metadata accessor for HardwareAttestationType(0);
    v34 = sub_100093620(&qword_100632528, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HardwareAttestationType, (uint64_t)&protocol conformance descriptor for HardwareAttestationType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v41, v5, v33, v34);
    v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_hardwareAttestationTypes);
    v42 = 15;
    v35 = sub_100004828(&qword_1006324A8);
    v36 = sub_100099D40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v42, v5, v35, v36);
    v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
    v42 = 16;
    sub_100004828(&qword_1006324B8);
    sub_1000A1F98(&qword_100632538, &qword_1006324B8, (void (*)(void))sub_100099DC0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41);
    v37 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
    v38 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8);
    LOBYTE(v41) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v41, v5);
    v39 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_enableUAM);
    LOBYTE(v41) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, &v41, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005EED0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005EF10 + 4 * byte_1005209FD[a1]))(0x746163696C707061, 0xEE004C43416E6F69);
}

unint64_t sub_10005EF10()
{
  return 0xD000000000000016;
}

uint64_t sub_10005F0B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005F0F0 + 4 * byte_100520A0F[a1]))(0x746163696C707061, 0xEE004C43416E6F69);
}

unint64_t sub_10005F0F0()
{
  return 0xD000000000000016;
}

uint64_t sub_10005F290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 248))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_10005F2BC(_QWORD *a1)
{
  return sub_10005E9C0(a1);
}

uint64_t sub_10005F2DC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10005EED0);
}

Swift::Int sub_10005F2E8(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_10005EED0);
}

uint64_t sub_10005F2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10005EED0);
}

Swift::Int sub_10005F300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10005EED0);
}

uint64_t sub_10005F30C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10009325C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10005F338@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005EED0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005F360()
{
  unsigned __int8 *v0;

  return sub_10005F0B0(*v0);
}

uint64_t sub_10005F368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009325C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005F38C(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_10005F398(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099B70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F3C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099B70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F3E8(uint64_t a1)
{
  return sub_100061710(a1, (void (*)(uint64_t))sub_10005F404);
}

uint64_t sub_10005F404(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  _QWORD *rawValue;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  __n128 v78;
  void *v79;
  void (*v80)(char *, _QWORD, uint64_t);
  char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  void *v87;
  char *v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  id v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  Swift::OpaquePointer v131[6];
  char v132;

  v3 = (_QWORD *)type metadata accessor for DIPError.Code(0);
  v121 = *(v3 - 1);
  v122 = v3;
  __chkstk_darwin(v3);
  v126 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EncryptedMessageEntity(0);
  v118 = *(_QWORD *)(v5 - 8);
  v119 = v5;
  __chkstk_darwin(v5);
  v120 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RecipientEncryptionCertificate(0);
  v124 = *(_QWORD *)(v7 - 8);
  v125 = v7;
  __chkstk_darwin(v7);
  v123 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DIPCertUsage(0);
  v115 = *(_QWORD *)(v117 - 8);
  v9 = __chkstk_darwin(v117);
  v116 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v114 = (char *)&v105 - v11;
  v127 = type metadata accessor for DIPOIDVerifier(0);
  v12 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100004828(&qword_1006324D0);
  v15 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  v130 = a1;
  sub_10000806C(a1, v18);
  v20 = sub_100099B70();
  swift_retain(v1);
  v21 = v20;
  v22 = v129;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacyINOWorkflow.CodingKeys, &type metadata for LegacyINOWorkflow.CodingKeys, v21, v18, v19);
  if (!v22)
  {
    v112 = v12;
    v129 = v1;
    v113 = v14;
    v24 = v15;
    v25 = sub_100004828(&qword_1006368D0);
    v132 = 0;
    v26 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v27 = v128;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v131, v25, &v132, v128, v25, v26);
    v111 = v26;
    v30 = v129;
    *(Swift::OpaquePointer *)(v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL) = v131[0];
    v31 = sub_100004828(&qword_100632408);
    v132 = 1;
    v32 = sub_1000A1F98(&qword_100632410, &qword_100632408, (void (*)(void))sub_1000997B4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v31, &v132, v27, v31, v32, v33);
    *(Swift::OpaquePointer *)(v30 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims) = v131[0];
    v34 = sub_100004828(&qword_1006324E0);
    v132 = 2;
    v35 = sub_100099BB4();
    v110 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v34, &v132, v27, v34, v35, v36);
    rawValue = v131[0]._rawValue;
    if (!v131[0]._rawValue)
      rawValue = _swiftEmptyArrayStorage;
    *(_QWORD *)(v30 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields) = rawValue;
    LOBYTE(v131[0]._rawValue) = 3;
    *(_BYTE *)(v30 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimDataConsistency) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v27);
    LOBYTE(v131[0]._rawValue) = 5;
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v27);
    v40 = v39;
    v108 = v38;
    v109 = v25;
    LOBYTE(v131[0]._rawValue) = 6;
    v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v27);
    v107 = v41;
    v42 = sub_100004828(&qword_100632438);
    v132 = 7;
    v43 = sub_10009983C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v42, &v132, v27, v42, v43, v44);
    v105 = v131[0]._rawValue;
    v45 = sub_100004828(&qword_1006323F0);
    v132 = 9;
    v46 = sub_1000A1F98(&qword_1006323F8, &qword_1006323F0, (void (*)(void))sub_100099770, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v45, &v132, v27, v45, v46, v47);
    *(Swift::OpaquePointer *)(v30 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination) = v131[0];
    v48 = sub_100004828(&qword_1006324F8);
    v132 = 10;
    v49 = sub_100099C30();
    v50 = v128;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v48, &v132, v128, v48, v49, v51);
    v52 = v40;
    *(Swift::OpaquePointer *)(v30 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI) = v131[0];
    LOBYTE(v131[0]._rawValue) = 11;
    v53 = v50;
    v54 = v17;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    v56 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_cloudkitRetry;
    *(_QWORD *)v56 = v55;
    *(_BYTE *)(v56 + 8) = v57 & 1;
    LOBYTE(v131[0]._rawValue) = 12;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    v59 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_connectToWifiReminderInDays;
    *(_QWORD *)v59 = v58;
    *(_BYTE *)(v59 + 8) = v60 & 1;
    LOBYTE(v131[0]._rawValue) = 13;
    v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    v62 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_provisioningRetryTimeoutInDays;
    *(_QWORD *)v62 = v61;
    *(_BYTE *)(v62 + 8) = v63 & 1;
    LOBYTE(v131[0]._rawValue) = 14;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    v65 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteIncompleteCredentialAfterDays;
    *(_QWORD *)v65 = v64;
    *(_BYTE *)(v65 + 8) = v66 & 1;
    LOBYTE(v131[0]._rawValue) = 15;
    v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    v68 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_deleteInactiveKeysAfterDays;
    *(_QWORD *)v68 = v67;
    *(_BYTE *)(v68 + 8) = v69 & 1;
    LOBYTE(v131[0]._rawValue) = 16;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    *(_BYTE *)(v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_base64EncodeImage) = (v70 == 2) | v70 & 1;
    LOBYTE(v131[0]._rawValue) = 17;
    v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    *(_BYTE *)(v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_isBiomeFedStatsEnabled) = v71;
    LOBYTE(v131[0]._rawValue) = 4;
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v131, v50);
    if (v73)
    {
      v74 = sub_1004E04F4(v72, v73);
      v76 = v75 & 1;
    }
    else
    {
      v74 = 0;
      v76 = 1;
    }
    v77 = v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_claimTTL;
    *(_QWORD *)v77 = v74;
    *(_BYTE *)(v77 + 8) = v76;
    v78.n128_f64[0] = DIPOIDVerifier.init()();
    v132 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v131, v109, &v132, v50, v109, v111, v78);
    v79 = v131[0]._rawValue;
    if (v131[0]._rawValue)
    {
      DIPOIDVerifier.setIntermediates(fromBase64DER:)(v131[0]);
      swift_bridgeObjectRelease(v79);
    }
    if (v52)
    {
      if (v107)
      {
        swift_bridgeObjectRelease(v105);
        v80 = *(void (**)(char *, _QWORD, uint64_t))(v115 + 104);
        v81 = v114;
        v80(v114, enum case for DIPCertUsage.inoEncryption(_:), v117);
        v83 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v108, v52, v81);
        v84 = v117;
        v115 = *(_QWORD *)(v115 + 8);
        ((void (*)(char *, uint64_t))v115)(v114, v117);
        swift_bridgeObjectRelease(v52);
        v85 = v116;
        v80(v116, enum case for DIPCertUsage.inoSigning(_:), v84);
        v87 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v106, v107, v85);
        ((void (*)(char *, uint64_t))v115)(v116, v117);
        swift_bridgeObjectRelease(v107);
        v88 = v120;
        (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v120, enum case for EncryptedMessageEntity.ino(_:), v119);
        v89 = v83;
        v122 = v89;
        v126 = v87;
        v90 = v123;
        RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)(v89, v87, v88);
        v91 = sub_100004828(&qword_100632460);
        v92 = sub_100004828(&qword_100632468);
        v93 = *(_QWORD *)(v92 - 8);
        v94 = *(_QWORD *)(v93 + 72);
        v95 = *(unsigned __int8 *)(v93 + 80);
        v96 = (v95 + 32) & ~v95;
        v97 = swift_allocObject(v91, v96 + v94, v95 | 7);
        *(_OWORD *)(v97 + 16) = xmmword_10051FFB0;
        v98 = (_QWORD *)(v97 + v96);
        v99 = v97 + v96 + *(int *)(v92 + 48);
        *v98 = 0x746C7561666564;
        v98[1] = 0xE700000000000000;
        v101 = v124;
        v100 = v125;
        (*(void (**)(uint64_t, char *, uint64_t))(v124 + 16))(v99, v90, v125);
        v102 = sub_10011E064(v97);

        (*(void (**)(char *, uint64_t))(v101 + 8))(v90, v100);
LABEL_20:
        v103 = v129;
        *(_QWORD *)(v129 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates) = v102;
        swift_release(v103);
        sub_10002581C((uint64_t)v130, (uint64_t)v131);
        sub_10005DD98(v131);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v54, v53);
        v104 = *(void (**)(char *, uint64_t))(v112 + 8);
        v23 = v129;
        swift_retain(v129);
        v104(v113, v127);
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v130);
        swift_release(v23);
        return v23;
      }
      v82 = v52;
    }
    else
    {
      v82 = v107;
    }
    swift_bridgeObjectRelease(v82);
    if (v105)
    {
      sub_100060DFC((uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t)v105, (uint64_t)v113, (void (*)(uint64_t *, char *, uint64_t, __n128))sub_1000603BC);
      v102 = v86;
      swift_bridgeObjectRelease(v105);
    }
    else
    {
      v102 = 0;
    }
    goto LABEL_20;
  }
  swift_release(v1);
  v23 = v1;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v130);
  v28 = type metadata accessor for LegacyINOWorkflow(0);
  swift_deallocPartialClassInstance(v23, v28, *(unsigned int *)(*(_QWORD *)v23 + 48), *(unsigned __int16 *)(*(_QWORD *)v23 + 52));
  return v23;
}

uint64_t sub_1000603BC(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (*v48)(char *, _QWORD, uint64_t);
  char *v49;
  int v50;
  void (*v51)(char *, _QWORD, uint64_t);
  Swift::String *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  Swift::String *v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  Swift::String *v86;
  void (*v87)(char *, _QWORD, uint64_t);
  char *v88;
  void (*v89)(char *, _QWORD, uint64_t);
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  Swift::String *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  void (*v108)(char *, _QWORD, uint64_t);
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t, uint64_t);
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  Swift::String *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;

  v132 = a3;
  v116 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v119 = *(_QWORD *)(v4 - 8);
  v120 = v4;
  __chkstk_darwin(v4);
  v121 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EncryptedMessageEntity(0);
  v130 = *(_QWORD *)(v6 - 8);
  v131 = v6;
  __chkstk_darwin(v6);
  v114 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v8);
  v115 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for DIPOIDVerifier(0);
  v127 = *(_QWORD *)(v138 - 8);
  v10 = __chkstk_darwin(v138);
  v117 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v126 = (char *)&v109 - v12;
  v13 = sub_100004828(&qword_100630258);
  v14 = __chkstk_darwin(v13);
  v113 = (uint64_t)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v109 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v109 - v19;
  v21 = sub_100004828((uint64_t *)&unk_100632470);
  v22 = __chkstk_darwin(v21);
  v112 = (uint64_t *)((char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __chkstk_darwin(v22);
  v111 = (uint64_t *)((char *)&v109 - v25);
  v26 = __chkstk_darwin(v24);
  v118 = (uint64_t *)((char *)&v109 - v27);
  v28 = __chkstk_darwin(v26);
  v124 = (uint64_t *)((char *)&v109 - v29);
  __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v109 - v30);
  v32 = type metadata accessor for DIPCertUsage(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v109 - v37;
  v134 = v21;
  v39 = *(int *)(v21 + 48);
  v40 = (uint64_t)v31 + v39;
  v41 = (uint64_t)a2 + v39;
  countAndFlagsBits = a2->_countAndFlagsBits;
  object = a2->_object;
  v129 = a2;
  v44 = v131;
  *v31 = countAndFlagsBits;
  v31[1] = (uint64_t)object;
  v125 = v41;
  sub_100099960(v41, v40);
  v109 = type metadata accessor for EncryptionCertificateInStringFormat(0);
  sub_100038B24(v40 + *(int *)(v109 + 24), (uint64_t)v20, &qword_100630258);
  v45 = v40;
  v46 = v130;
  sub_1000999A4(v45);
  v110 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v47 = v110(v20, 1, v44);
  v133 = v33;
  v135 = v36;
  v122 = v32;
  if (v47 == 1)
    goto LABEL_2;
  v49 = v38;
  sub_100038B24((uint64_t)v20, (uint64_t)v18, &qword_100630258);
  v50 = (*(uint64_t (**)(char *, uint64_t))(v46 + 88))(v18, v44);
  if (v50 == enum case for EncryptedMessageEntity.idvServer(_:))
  {
    v51 = *(void (**)(char *, _QWORD, uint64_t))(v133 + 104);
    v51(v38, enum case for DIPCertUsage.inoEncryption(_:), v32);
    v51(v135, enum case for DIPCertUsage.inoSigning(_:), v32);
    sub_100008030((uint64_t)v20, &qword_100630258);
    goto LABEL_5;
  }
  v85 = v32;
  v86 = v129;
  v54 = v134;
  if (v50 == enum case for EncryptedMessageEntity.ino(_:))
  {
    v87 = *(void (**)(char *, _QWORD, uint64_t))(v133 + 104);
    v87(v49, enum case for DIPCertUsage.inoEncryption(_:), v85);
    v87(v135, enum case for DIPCertUsage.inoSigning(_:), v85);
    sub_100008030((uint64_t)v20, &qword_100630258);
    v53 = v132;
    v52 = v86;
  }
  else
  {
    v88 = v18;
    v53 = v132;
    if (v50 == enum case for EncryptedMessageEntity.athena(_:)
      || v50 == enum case for EncryptedMessageEntity.assessor(_:))
    {
      sub_100008030((uint64_t)v20, &qword_100630258);
      v108 = *(void (**)(char *, _QWORD, uint64_t))(v133 + 104);
      v108(v49, enum case for DIPCertUsage.accountAssessmentServerEncryption(_:), v85);
      v108(v135, enum case for DIPCertUsage.accountAssessmentServerSigning(_:), v85);
      v52 = v86;
    }
    else
    {
      if (v50 != enum case for EncryptedMessageEntity.issuer(_:))
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v88, v44);
        v32 = v85;
        v38 = v49;
        v33 = v133;
        v36 = v135;
LABEL_2:
        v48 = *(void (**)(char *, _QWORD, uint64_t))(v33 + 104);
        v48(v38, enum case for DIPCertUsage.inoEncryption(_:), v32);
        v48(v36, enum case for DIPCertUsage.inoSigning(_:), v32);
        sub_100008030((uint64_t)v20, &qword_100630258);
        v49 = v38;
LABEL_5:
        v52 = v129;
        v53 = v132;
        v54 = v134;
        goto LABEL_6;
      }
      v89 = *(void (**)(char *, _QWORD, uint64_t))(v133 + 104);
      v89(v49, enum case for DIPCertUsage.identityEncryptionExternal(_:), v85);
      v89(v135, enum case for DIPCertUsage.inoSigning(_:), v85);
      sub_100008030((uint64_t)v20, &qword_100630258);
      v52 = v86;
    }
  }
LABEL_6:
  v55 = v126;
  v56 = v127;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
  v57(v126, v53, v138);
  v58 = v124;
  v59 = v125;
  v60 = (uint64_t *)((char *)v124 + *(int *)(v54 + 48));
  v61 = v52->_object;
  *v124 = v52->_countAndFlagsBits;
  v58[1] = (uint64_t)v61;
  sub_100099960(v59, (uint64_t)v60);
  v63 = *v60;
  v62 = v60[1];
  swift_bridgeObjectRetain(v62);
  sub_1000999A4((uint64_t)v60);
  v64 = v128;
  v65 = (Swift::String *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v63, v62, v49);
  v123 = v49;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v138);
    swift_bridgeObjectRelease(v62);
    v136 = 0;
    v137 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v66._object = (void *)0x8000000100542DC0;
    v66._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v66);
    String.append(_:)(*v52);
    v67 = v136;
    v68 = v137;
    v69 = v121;
    (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v121, enum case for DIPError.Code.internalError(_:), v120);
    swift_errorRetain(v64);
    v70 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v71, v72, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v67, v68, v64, v69, 0, v70, 0xD000000000000051, 0x8000000100542B50, 0x6F72662874696E69, 0xEB00000000293A6DLL, 1274);
    swift_willThrow(v73);
    swift_errorRelease(v64);
    v74 = *(void (**)(char *, uint64_t))(v133 + 8);
    v75 = v122;
    v74(v135, v122);
    return ((uint64_t (*)(char *, uint64_t))v74)(v123, v75);
  }
  else
  {
    v128 = v57;
    v129 = v65;
    v77 = *(void (**)(char *, uint64_t))(v56 + 8);
    v78 = v138;
    v77(v55, v138);
    swift_bridgeObjectRelease(v62);
    v79 = v118;
    v80 = (uint64_t)v118 + *(int *)(v134 + 48);
    v81 = v52->_object;
    *v118 = v52->_countAndFlagsBits;
    v79[1] = (uint64_t)v81;
    sub_100099960(v59, v80);
    v82 = *(_QWORD *)(v80 + 16);
    v83 = *(_QWORD *)(v80 + 24);
    swift_bridgeObjectRetain(v83);
    sub_1000999A4(v80);
    if (v83)
    {
      v84 = v117;
      v128(v117, v132, v78);
      v90 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v82, v83, v135);
      v77(v84, v78);
      swift_bridgeObjectRelease(v83);
    }
    else
    {
      v90 = 0;
    }
    v91 = v134;
    v92 = *(int *)(v134 + 48);
    v93 = v111;
    v94 = (uint64_t)v111 + v92;
    v95 = v52->_countAndFlagsBits;
    v96 = (uint64_t)v52->_object;
    *v111 = v52->_countAndFlagsBits;
    v93[1] = v96;
    sub_100099960(v59, (uint64_t)v93 + v92);
    v97 = *(int *)(v91 + 48);
    v98 = v112;
    v99 = (uint64_t)v112 + v97;
    *v112 = v95;
    v98[1] = v96;
    sub_100099960(v59, (uint64_t)v98 + v97);
    v100 = v113;
    sub_100038B24(v99 + *(int *)(v109 + 24), v113, &qword_100630258);
    swift_bridgeObjectRetain(v96);
    sub_1000999A4(v99);
    v101 = v131;
    if (v110((char *)v100, 1, v131) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v130 + 104))(v114, enum case for EncryptedMessageEntity.ino(_:), v101);
      sub_100008030(v100, &qword_100630258);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v114, v100, v101);
    }
    v102 = v90;
    v103 = v129;
    v104 = (uint64_t)v115;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)();
    v105 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v104, 0, 1, v105);
    sub_10047E548(v104, v95, v96);

    v106 = *(void (**)(char *, uint64_t))(v133 + 8);
    v107 = v122;
    v106(v135, v122);
    v106(v123, v107);
    return sub_1000999A4(v94);
  }
}

void sub_100060DFC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, char *, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *, char *, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;

  v31 = a3;
  v32 = a4;
  v30 = sub_100004828((uint64_t *)&unk_100632470);
  v7 = __chkstk_darwin(v30);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v28 - v10);
  v34 = a1;
  v12 = *(_QWORD *)(a2 + 64);
  v28 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v29 = (unint64_t)(v13 + 63) >> 6;
  v33 = a2;
  swift_bridgeObjectRetain(a2);
  v16 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    v22 = *(_QWORD *)(v33 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v24 = *v23;
    v25 = v23[1];
    v26 = type metadata accessor for EncryptionCertificateInStringFormat(0);
    sub_100099960(v22 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * i, (uint64_t)v11 + *(int *)(v30 + 48));
    *v11 = v24;
    v11[1] = v25;
    sub_1000A1F54((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_100632470);
    v27 = swift_bridgeObjectRetain(v25);
    v32(&v34, v9, v31, v27);
    if (v4)
    {
      swift_bridgeObjectRelease(v34);
      sub_100008030((uint64_t)v9, (uint64_t *)&unk_100632470);
      swift_release(v33);
      return;
    }
    sub_100008030((uint64_t)v9, (uint64_t *)&unk_100632470);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v29)
      goto LABEL_26;
    v20 = *(_QWORD *)(v28 + 8 * v16);
    if (!v20)
      break;
LABEL_17:
    v15 = (v20 - 1) & v20;
  }
  v21 = v16 + 1;
  if (v16 + 1 >= v29)
    goto LABEL_26;
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v16 + 2;
  if (v16 + 2 >= v29)
    goto LABEL_26;
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v16 + 3;
  if (v16 + 3 >= v29)
    goto LABEL_26;
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v16 + 4;
  if (v16 + 4 >= v29)
  {
LABEL_26:
    swift_release(v33);
    return;
  }
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
  {
LABEL_16:
    v16 = v21;
    goto LABEL_17;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v29)
      goto LABEL_26;
    v20 = *(_QWORD *)(v28 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000610A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI));
}

uint64_t sub_10006110C()
{
  uint64_t v0;

  sub_10005E8F4();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_applicationACL));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_acceptedVerifiedClaims));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_verifiedClaimFields));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_pagination));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_unorderedUI));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100061190(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000611C4 + 4 * byte_100520A21[a1]))(0x4C525565636E6F6ELL, 0xE800000000000000);
}

uint64_t sub_1000611C4()
{
  return 0x55676E6972616873;
}

unint64_t sub_1000611E0()
{
  return 0xD000000000000010;
}

uint64_t sub_100061458(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100061464(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100061190);
}

uint64_t sub_100061464(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_1000614F0(uint64_t a1, uint64_t a2)
{
  return sub_1000614FC(a1, a2, (uint64_t (*)(uint64_t))sub_100061190);
}

Swift::Int sub_1000614FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10, 0);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_100061560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006156C(a1, a2, a3, (uint64_t (*)(_QWORD))sub_100061190);
}

uint64_t sub_10006156C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_1000615AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000615B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100061190);
}

Swift::Int sub_1000615B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

uint64_t sub_100061618@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000A2040(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100061644@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100061190(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006166C()
{
  unsigned __int8 *v0;

  return sub_100061190(*v0);
}

uint64_t sub_100061674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A2040(a1, a2);
  *a3 = result;
  return result;
}

void sub_100061698(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_1000616A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099668();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000616CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100099668();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000616F4(uint64_t a1)
{
  return sub_100061710(a1, (void (*)(uint64_t))sub_100061760);
}

uint64_t sub_100061710(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  a2(a1);
  return v5;
}

uint64_t sub_100061760(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __n128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __n128 v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  __n128 v80;
  char v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  char v95;
  __n128 v96;
  uint64_t v97;
  void (*v98)(char *, _QWORD, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char *v119;
  id v120;
  id v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, _QWORD, uint64_t);
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _OWORD v207[2];
  char v208;
  uint64_t v209;
  char v210;

  v3 = type metadata accessor for DIPError.Code(0);
  v200 = *(_QWORD *)(v3 - 8);
  v201 = v3;
  __chkstk_darwin(v3);
  v202 = (char *)&v173 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v5);
  v196 = (uint64_t)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for EncryptedMessageEntity(0);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v192 = (char *)&v173 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RecipientEncryptionCertificate(0);
  v194 = *(_QWORD *)(v8 - 8);
  v195 = v8;
  __chkstk_darwin(v8);
  v188 = (char *)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPCertUsage(0);
  v198 = *(_QWORD *)(v10 - 8);
  v199 = v10;
  v11 = __chkstk_darwin(v10);
  v197 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v190 = (char *)&v173 - v14;
  v15 = __chkstk_darwin(v13);
  v189 = (char *)&v173 - v16;
  v17 = __chkstk_darwin(v15);
  v187 = (char *)&v173 - v18;
  __chkstk_darwin(v17);
  v186 = (char *)&v173 - v19;
  v203 = type metadata accessor for DIPOIDVerifier(0);
  v20 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v22 = (char *)&v173 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100004828(&qword_1006323A8);
  v23 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v25 = (char *)&v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1[3];
  v27 = a1[4];
  v206 = a1;
  sub_10000806C(a1, v26);
  v28 = sub_100099668();
  v29 = v1;
  swift_retain(v1);
  v30 = v28;
  v31 = v205;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacySPWorkflow.CodingKeys, &type metadata for LegacySPWorkflow.CodingKeys, v30, v26, v27);
  if (v31)
  {
    swift_release(v1);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v206);
LABEL_4:
    v37 = type metadata accessor for LegacySPWorkflow(0);
    swift_deallocPartialClassInstance(v29, v37, *(unsigned int *)(*(_QWORD *)v29 + 48), *(unsigned __int16 *)(*(_QWORD *)v29 + 52));
    return v29;
  }
  v183 = v20;
  v184 = v22;
  v205 = v1;
  v185 = v23;
  v32 = type metadata accessor for ServerEndPoint();
  v210 = 0;
  v34 = sub_100093620(&qword_1006323B8, v33, (uint64_t (*)(uint64_t))type metadata accessor for ServerEndPoint, (uint64_t)&unk_1005217F8);
  v35 = v204;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, v32, &v210, v204, v32, v34, v36);
  v39 = v205;
  *(_QWORD *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL) = *(_QWORD *)&v207[0];
  v210 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, v32, &v210, v35, v32, v34, v40);
  v41 = v35;
  v42 = v25;
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL) = *(_QWORD *)&v207[0];
  LOBYTE(v207[0]) = 2;
  v182 = 0;
  *(_BYTE *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_allowUrlOverride) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v41);
  v43 = sub_100004828(&qword_1006323C0);
  v210 = 3;
  v44 = sub_1000996AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v207, v43, &v210, v41, v43, v44);
  v45 = v41;
  v47 = OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs;
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs) = *(_QWORD *)&v207[0];
  v48 = sub_100004828(&qword_1006323D8);
  v210 = 4;
  v49 = sub_1000A1F98(&qword_1006323E0, &qword_1006323D8, (void (*)(void))sub_10009972C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v207, v48, &v210, v45, v48, v49);
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes) = *(_QWORD *)&v207[0];
  v50 = sub_100004828(&qword_1006323F0);
  v210 = 5;
  v51 = sub_1000A1F98(&qword_1006323F8, &qword_1006323F0, (void (*)(void))sub_100099770, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v207, v50, &v210, v45, v50, v51);
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination) = *(_QWORD *)&v207[0];
  v52 = sub_100004828(&qword_100632408);
  v210 = 6;
  v53 = sub_1000A1F98(&qword_100632410, &qword_100632408, (void (*)(void))sub_1000997B4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v207, v52, &v210, v45, v52, v53);
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims) = *(_QWORD *)&v207[0];
  v54 = sub_100004828(&qword_1006368D0);
  v210 = 7;
  v55 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v207, v54, &v210, v45, v54, v55);
  *(_QWORD *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL) = *(_QWORD *)&v207[0];
  LOBYTE(v207[0]) = 8;
  v57 = v55;
  *(_BYTE *)(v39 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareAccountAssessment) = KeyedDecodingContainer.decode(_:forKey:)(v207, v45, v56) & 1;
  LOBYTE(v207[0]) = 9;
  v58 = v45;
  v59 = v42;
  v61 = KeyedDecodingContainer.decode(_:forKey:)(v207, v58, v60);
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareINOAssessment) = v61 & 1;
  v62 = sub_100004828(&qword_100632420);
  v210 = 10;
  v63 = sub_1000A1F98(&qword_100632428, &qword_100632420, (void (*)(void))sub_1000997F8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, v62, &v210, v204, v62, v63, v64);
  v65 = v204;
  *(_QWORD *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD) = *(_QWORD *)&v207[0];
  LOBYTE(v207[0]) = 13;
  v180 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v65);
  v181 = v66;
  LOBYTE(v207[0]) = 14;
  v178 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v179 = v67;
  LOBYTE(v207[0]) = 17;
  v176 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v177 = v68;
  LOBYTE(v207[0]) = 18;
  v175 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v70 = v69;
  v71 = sub_100004828(&qword_100632438);
  v210 = 19;
  v72 = sub_10009983C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, v71, &v210, v204, v71, v72, v73);
  v174 = *(_QWORD *)&v207[0];
  LOBYTE(v207[0]) = 11;
  v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v75 = v204;
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeEncryptedTSID) = v74;
  LOBYTE(v207[0]) = 12;
  v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v75);
  v77 = v204;
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_includeFGuid) = v76;
  LOBYTE(v207[0]) = 15;
  v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v77);
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentDeviceData) = v78;
  v210 = 16;
  v79 = sub_1000998D8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, &type metadata for Connectivity, &v210, v204, &type metadata for Connectivity, v79, v80);
  v81 = v208;
  v82 = v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_connectivity;
  v83 = v207[1];
  *(_OWORD *)v82 = v207[0];
  *(_OWORD *)(v82 + 16) = v83;
  *(_BYTE *)(v82 + 32) = v81;
  v210 = 20;
  v84 = sub_10009991C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, &type metadata for SharingFormat, &v210, v204, &type metadata for SharingFormat, v84, v85);
  v86 = v204;
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingFormat) = v207[0];
  LOBYTE(v207[0]) = 22;
  v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v86);
  v88 = (uint64_t *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName);
  *v88 = v87;
  v88[1] = v89;
  LOBYTE(v207[0]) = 23;
  v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v91 = v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_dsdValidityInSeconds;
  *(_QWORD *)v91 = v90;
  *(_BYTE *)(v91 + 8) = v92 & 1;
  LOBYTE(v207[0]) = 24;
  v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v204);
  v94 = v204;
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_useExternalGSToken) = v93;
  LOBYTE(v207[0]) = 25;
  v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v207, v94);
  *(_BYTE *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_assessBeforeProof) = v95;
  v96.n128_f64[0] = DIPOIDVerifier.init()();
  v210 = 21;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v207, v54, &v210, v204, v54, v57, v96);
  v173 = 0;
  v97 = *(_QWORD *)&v207[0];
  if (*(_QWORD *)&v207[0])
  {
    DIPOIDVerifier.setIntermediates(fromBase64DER:)(*(Swift::OpaquePointer *)&v207[0]);
    swift_bridgeObjectRelease(v97);
  }
  if (!v177)
  {
    v102 = v70;
    goto LABEL_23;
  }
  if (!v70)
  {
    v102 = v177;
LABEL_23:
    swift_bridgeObjectRelease(v102);
    if (v174)
    {
      v103 = v173;
      sub_100060DFC((uint64_t)&_swiftEmptyDictionarySingleton, v174, (uint64_t)v184, (void (*)(uint64_t *, char *, uint64_t, __n128))sub_1000633D4);
      v173 = v103;
      if (v103)
      {
        swift_bridgeObjectRelease(v174);
        v29 = v205;
        swift_release(v205);
        swift_bridgeObjectRelease(v179);
        swift_bridgeObjectRelease(v181);
        (*(void (**)(char *, uint64_t))(v185 + 8))(v59, v204);
        (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v203);
        LODWORD(v204) = 0;
        LODWORD(v203) = 0;
LABEL_14:
        LODWORD(v202) = 1;
        v46 = v182;
LABEL_6:
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v206);
        swift_release(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL));
        if (!v46)
          swift_release(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL));
        swift_bridgeObjectRelease(*(_QWORD *)(v29
                                            + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs));
        swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes));
        swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination));
        swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims));
        swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL));
        if ((v204 & 1) != 0)
        {
          sub_100008030(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_1006322E0);
          if ((v203 & 1) == 0)
          {
LABEL_12:
            swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD));
            if ((v202 & 1) != 0)
              swift_bridgeObjectRelease(*(_QWORD *)(v29
                                                  + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName
                                                  + 8));
            goto LABEL_4;
          }
        }
        else if (!(_DWORD)v203)
        {
          goto LABEL_12;
        }
        swift_bridgeObjectRelease(*(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates));
        goto LABEL_12;
      }
      v105 = v104;
      swift_bridgeObjectRelease(v174);
    }
    else
    {
      v105 = 0;
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRelease(v174);
  v98 = *(void (**)(char *, _QWORD, uint64_t))(v198 + 104);
  v99 = v186;
  v98(v186, enum case for DIPCertUsage.spEncryption(_:), v199);
  v100 = v173;
  v101 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v176, v177, v99);
  v173 = v100;
  if (v100)
  {
    swift_release(v205);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v177);
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease(v181);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v186, v199);
LABEL_29:
    v112 = v202;
    (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.internalError(_:), v201);
    v113 = v173;
    swift_errorRetain(v173);
    v114 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v115 = type metadata accessor for DIPError(0);
    v116 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v115, v116, 0, 0);
    v117 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000035, 0x8000000100542D00, v113, v112, 0, v114, 0xD000000000000051, 0x8000000100542B50, 0x6F72662874696E69, 0xEB00000000293A6DLL, 1433);
    swift_willThrow(v117);
    swift_errorRelease(v113);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v59, v204);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v203);
    LODWORD(v204) = 0;
    LODWORD(v203) = 0;
LABEL_54:
    LODWORD(v202) = 1;
    v46 = v182;
    v29 = v205;
    goto LABEL_6;
  }
  v106 = (void *)v101;
  v107 = v199;
  v108 = *(void (**)(char *, uint64_t))(v198 + 8);
  v108(v186, v199);
  swift_bridgeObjectRelease(v177);
  v109 = v187;
  v98(v187, enum case for DIPCertUsage.spSigning(_:), v107);
  v110 = v173;
  v111 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v175, v70, v109);
  v173 = v110;
  if (v110)
  {
    swift_release(v205);

    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease(v181);
    v108(v187, v199);
    goto LABEL_29;
  }
  v118 = (void *)v111;
  v108(v187, v199);
  swift_bridgeObjectRelease(v70);
  v119 = v192;
  (*(void (**)(char *, _QWORD, uint64_t))(v191 + 104))(v192, enum case for EncryptedMessageEntity.sp(_:), v193);
  v120 = v106;
  v121 = v118;
  v122 = v188;
  RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)(v120, v118, v119);
  v123 = sub_100004828(&qword_100632460);
  v124 = sub_100004828(&qword_100632468);
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(_QWORD *)(v125 + 72);
  v127 = *(unsigned __int8 *)(v125 + 80);
  v128 = (v127 + 32) & ~v127;
  v129 = swift_allocObject(v123, v128 + v126, v127 | 7);
  *(_OWORD *)(v129 + 16) = xmmword_10051FFB0;
  v130 = (_QWORD *)(v129 + v128);
  v131 = v129 + v128 + *(int *)(v124 + 48);
  *v130 = 0x746C7561666564;
  v130[1] = 0xE700000000000000;
  v133 = v194;
  v132 = v195;
  (*(void (**)(uint64_t, char *, uint64_t))(v194 + 16))(v131, v122, v195);
  v105 = sub_10011E064(v129);

  (*(void (**)(char *, uint64_t))(v133 + 8))(v122, v132);
LABEL_32:
  *(_QWORD *)(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates) = v105;
  if (!v181)
  {
    v138 = (uint64_t *)&v208;
LABEL_38:
    swift_bridgeObjectRelease(*(v138 - 32));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, 1, 1, v195);
    goto LABEL_39;
  }
  if (!v179)
  {
    v138 = &v209;
    goto LABEL_38;
  }
  v134 = *(void (**)(char *, _QWORD, uint64_t))(v198 + 104);
  v135 = v189;
  v134(v189, enum case for DIPCertUsage.accountAssessmentServerEncryption(_:), v199);
  v136 = v173;
  v137 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v180, v181, v135);
  v173 = v136;
  if (v136)
  {
    swift_release(v205);
    swift_bridgeObjectRelease(v179);
    swift_bridgeObjectRelease(v181);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v189, v199);
LABEL_53:
    v161 = v202;
    (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.internalError(_:), v201);
    v162 = v173;
    swift_errorRetain(v173);
    v163 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v164 = type metadata accessor for DIPError(0);
    v165 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v164, v165, 0, 0);
    v166 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x8000000100542CC0, v162, v161, 0, v163, 0xD000000000000051, 0x8000000100542B50, 0x6F72662874696E69, 0xEB00000000293A6DLL, 1458);
    swift_willThrow(v166);
    swift_errorRelease(v162);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v59, v204);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v203);
    LODWORD(v204) = 0;
    LODWORD(v203) = 1;
    goto LABEL_54;
  }
  v155 = (void *)v137;
  v156 = v199;
  v157 = *(void (**)(char *, uint64_t))(v198 + 8);
  v157(v189, v199);
  swift_bridgeObjectRelease(v181);
  v158 = v190;
  v134(v190, enum case for DIPCertUsage.accountAssessmentServerSigning(_:), v156);
  v159 = v173;
  v160 = DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v178, v179, v158);
  v173 = v159;
  if (v159)
  {
    swift_release(v205);

    swift_bridgeObjectRelease(v179);
    v157(v190, v199);
    goto LABEL_53;
  }
  v167 = v160;
  v157(v190, v199);
  swift_bridgeObjectRelease(v179);
  v168 = v192;
  (*(void (**)(char *, _QWORD, uint64_t))(v191 + 104))(v192, enum case for EncryptedMessageEntity.athena(_:), v193);
  v169 = v196;
  RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)(v155, v167, v168);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v169, 0, 1, v195);
  sub_1000A1F54(v169, v205 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_1006322E0);
LABEL_39:
  v196 = *(_QWORD *)(v205 + v47);
  if ((unint64_t)v196 >> 62)
    goto LABEL_57;
  v139 = *(_QWORD *)((v196 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v196, 2);
  for (; v139; v139 = _CocoaArrayWrapper.endIndex.getter(v170))
  {
    v140 = v197;
    v141 = v196 & 0xC000000000000001;
    LODWORD(v195) = enum case for DIPCertUsage.spInputValidationEncryption(_:);
    v142 = 4;
    while (1)
    {
      if (v141)
      {
        v143 = specialized _ArrayBuffer._getElementSlowPath(_:)(v142 - 4, v196);
      }
      else
      {
        v143 = *(_QWORD *)(v196 + 8 * v142);
        swift_retain(v143);
      }
      v144 = v142 - 3;
      if (__OFADD__(v142 - 4, 1))
        break;
      v145 = *(_QWORD *)(v143 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate + 8);
      if (v145)
      {
        v146 = *(_QWORD *)(v143 + OBJC_IVAR____TtC8coreidvd22UserInputValidationURL_encryptionCertificate);
        (*(void (**)(char *, _QWORD, uint64_t))(v198 + 104))(v140, v195, v199);
        v147 = v173;
        v148 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v146, v145, v140);
        v173 = v147;
        if (v147)
        {
          (*(void (**)(char *, uint64_t))(v198 + 8))(v197, v199);
          v149 = v202;
          (*(void (**)(char *, _QWORD, uint64_t))(v200 + 104))(v202, enum case for DIPError.Code.internalError(_:), v201);
          v150 = v173;
          swift_errorRetain(v173);
          v151 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
          v152 = type metadata accessor for DIPError(0);
          v153 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v152, v153, 0, 0);
          v154 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x8000000100542C80, v150, v149, 0, v151, 0xD000000000000051, 0x8000000100542B50, 0x6F72662874696E69, 0xEB00000000293A6DLL, 1471);
          swift_willThrow(v154);
          swift_errorRelease(v150);
          v29 = v205;
          swift_release(v205);
          swift_bridgeObjectRelease_n(v196, 2);
          swift_release(v143);
          (*(void (**)(char *, uint64_t))(v185 + 8))(v59, v204);
          (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v203);
          LODWORD(v204) = 1;
          LODWORD(v203) = 1;
          goto LABEL_14;
        }

        (*(void (**)(char *, uint64_t))(v198 + 8))(v197, v199);
      }
      swift_release(v143);
      ++v142;
      if (v144 == v139)
        goto LABEL_61;
    }
    __break(1u);
LABEL_57:
    if (v196 < 0)
      v170 = v196;
    else
      v170 = v196 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v196, 2);
  }
LABEL_61:
  swift_release(v205);
  swift_bridgeObjectRelease_n(v196, 2);
  sub_10002581C((uint64_t)v206, (uint64_t)v207);
  v171 = v173;
  sub_10005DD98(v207);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v59, v204);
  if (v171)
  {
    (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v203);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v206);
    return v205;
  }
  else
  {
    v172 = *(void (**)(char *, uint64_t))(v183 + 8);
    v29 = v205;
    swift_retain(v205);
    v172(v184, v203);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v206);
    swift_release(v29);
  }
  return v29;
}

uint64_t sub_1000633D4(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  id v43;
  void *v44;
  uint64_t v45;
  char *v46;
  Swift::String *v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  id v106;
  Swift::String *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;

  v97 = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v103 = *(_QWORD *)(v5 - 8);
  v104 = v5;
  __chkstk_darwin(v5);
  v105 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630258);
  __chkstk_darwin(v7);
  v94 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EncryptedMessageEntity(0);
  v92 = *(_QWORD *)(v9 - 8);
  v93 = v9;
  __chkstk_darwin(v9);
  v95 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_1006322E0);
  __chkstk_darwin(v11);
  v96 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DIPCertUsage(0);
  v13 = *(_QWORD *)(v111 - 8);
  v14 = __chkstk_darwin(v111);
  v99 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v88 - v16;
  v18 = sub_100004828((uint64_t *)&unk_100632470);
  v19 = __chkstk_darwin(v18);
  v91 = (uint64_t *)((char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v19);
  v90 = (uint64_t *)((char *)&v88 - v22);
  v23 = __chkstk_darwin(v21);
  v101 = (uint64_t *)((char *)&v88 - v24);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v88 - v25);
  v27 = type metadata accessor for DIPOIDVerifier(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v98 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)&v88 - v31;
  v33 = *(void (**)(char *, uint64_t))(v28 + 16);
  v100 = a3;
  v108 = v34;
  v33((char *)&v88 - v31, a3);
  v102 = v18;
  v35 = *(int *)(v18 + 48);
  v36 = (uint64_t *)((char *)v26 + v35);
  v37 = (uint64_t)a2 + v35;
  countAndFlagsBits = a2->_countAndFlagsBits;
  object = a2->_object;
  v107 = a2;
  *v26 = countAndFlagsBits;
  v26[1] = (uint64_t)object;
  sub_100099960(v37, (uint64_t)v36);
  v41 = *v36;
  v40 = v36[1];
  swift_bridgeObjectRetain(v40);
  sub_1000999A4((uint64_t)v36);
  v42 = *(void (**)(char *, _QWORD, uint64_t))(v13 + 104);
  v42(v17, enum case for DIPCertUsage.spEncryption(_:), v111);
  v43 = v106;
  v44 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v41, v40, v17);
  if (v43)
  {
    swift_bridgeObjectRelease(v40);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v111);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v108);
    v45 = v104;
    v46 = v105;
    v47 = v107;
    v48 = v103;
    v109 = 0;
    v110 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v49._object = (void *)0x8000000100542D40;
    v49._countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v49);
    String.append(_:)(*v47);
    v50 = v109;
    v51 = v110;
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v46, enum case for DIPError.Code.internalError(_:), v45);
    swift_errorRetain(v43);
    v52 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v53 = type metadata accessor for DIPError(0);
    v54 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v53, v54, 0, 0);
    v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v51, v43, v46, 0, v52, 0xD000000000000051, 0x8000000100542B50, 0x6F72662874696E69, 0xEB00000000293A6DLL, 1447);
    swift_willThrow(v55);
    return swift_errorRelease(v43);
  }
  else
  {
    v89 = (void (*)(char *, uint64_t, uint64_t))v33;
    v106 = v44;
    swift_bridgeObjectRelease(v40);
    v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v17, v111);
    v58 = *(void (**)(char *, uint64_t))(v28 + 8);
    v58(v32, v108);
    v59 = v101;
    v60 = v102;
    v61 = (uint64_t)v101 + *(int *)(v102 + 48);
    v62 = v107->_object;
    *v101 = v107->_countAndFlagsBits;
    v59[1] = (uint64_t)v62;
    sub_100099960(v37, v61);
    v63 = *(_QWORD *)(v61 + 16);
    v64 = *(_QWORD *)(v61 + 24);
    swift_bridgeObjectRetain(v64);
    sub_1000999A4(v61);
    v65 = v60;
    v88 = v37;
    if (v64)
    {
      v66 = v98;
      v89(v98, v100, v108);
      v67 = v99;
      v42(v99, enum case for DIPCertUsage.spSigning(_:), v111);
      v68 = (void *)DIPOIDVerifier.verifyLeaf(fromBase64DER:forUsage:)(v63, v64, v67);
      swift_bridgeObjectRelease(v64);
      v57(v67, v111);
      v58(v66, v108);
    }
    else
    {
      v68 = 0;
    }
    v69 = v90;
    v70 = (uint64_t)v90 + *(int *)(v65 + 48);
    v72 = v107->_countAndFlagsBits;
    v71 = (uint64_t)v107->_object;
    *v90 = v107->_countAndFlagsBits;
    v69[1] = v71;
    v73 = v88;
    v111 = v70;
    sub_100099960(v88, v70);
    v74 = *(int *)(v65 + 48);
    v75 = v91;
    v76 = (uint64_t)v91 + v74;
    *v91 = v72;
    v75[1] = v71;
    sub_100099960(v73, (uint64_t)v75 + v74);
    v77 = type metadata accessor for EncryptionCertificateInStringFormat(0);
    v78 = v94;
    sub_100038B24(v76 + *(int *)(v77 + 24), v94, &qword_100630258);
    swift_bridgeObjectRetain(v71);
    sub_1000999A4(v76);
    v79 = v92;
    v80 = v93;
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v78, 1, v93);
    v82 = v95;
    v83 = (uint64_t)v96;
    if (v81 == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v95, enum case for EncryptedMessageEntity.sp(_:), v80);
      sub_100008030(v78, &qword_100630258);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v95, v78, v80);
    }
    v84 = v82;
    v85 = v68;
    v86 = v106;
    RecipientEncryptionCertificate.init(keyAgreement:signing:recipient:)(v86, v68, v84);
    v87 = type metadata accessor for RecipientEncryptionCertificate(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v83, 0, 1, v87);
    sub_10047E548(v83, v72, v71);

    return sub_1000999A4(v111);
  }
}

uint64_t sub_100063AE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_1006322E0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName
                                             + 8));
}

uint64_t sub_100063BAC()
{
  uint64_t v0;

  sub_10005E8F4();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_nonceURL));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_sharingURL));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userInputFieldValidationURLs));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_shareableAttributes));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_pagination));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_acceptedVerifiedClaims));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_applicationACL));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_accountAssessmentCertificate, &qword_1006322E0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_consumableDSD));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_userAuthorizationBundleName + 8));
  return v0;
}

uint64_t sub_100063C80()
{
  return sub_100063C8C((void (*)(void))sub_100063BAC);
}

uint64_t sub_100063C8C(void (*a1)(void))
{
  uint64_t v1;

  a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_100063CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a2;
  *a2 = a1;
  swift_bridgeObjectRetain(a1);
  result = swift_bridgeObjectRelease(v8);
  if (*a2 && *(_QWORD *)(*a2 + 16))
  {
    v10 = defaultLogger()(result);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "got PhoneNumber", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_100063DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v8 + 408) = a8;
  *(_QWORD *)(v8 + 416) = v14;
  *(_QWORD *)(v8 + 392) = a6;
  *(_QWORD *)(v8 + 400) = a7;
  *(_QWORD *)(v8 + 376) = a4;
  *(_QWORD *)(v8 + 384) = a5;
  *(_QWORD *)(v8 + 360) = a1;
  *(_QWORD *)(v8 + 368) = a3;
  v10 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 424) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 432) = v11;
  *(_QWORD *)(v8 + 440) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v8 + 448) = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v8 + 464) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 472) = v12;
  *(_OWORD *)(v8 + 480) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 496) = *(_QWORD *)(a2 + 48);
  return swift_task_switch(sub_100063E5C, 0, 0);
}

void sub_100063E5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int64_t j;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(void);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  _OWORD v162[11];

  v1 = v0;
  v2 = v0[61];
  v0[44] = _swiftEmptyArrayStorage;
  v3 = sub_10011E080((uint64_t)_swiftEmptyArrayStorage);
  v4 = *(_QWORD *)(v2 + 16);
  v0[63] = v4;
  v158 = v0;
  v155 = v3;
  if (v4)
  {
    v5 = v0[61];
    v7 = *(_QWORD *)(v5 + 32);
    v6 = *(void **)(v5 + 40);
    v8 = *(_QWORD *)(v1[46] + 16);
    swift_bridgeObjectRetain(v6);
    if (v8)
    {
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v5);
      v9 = sub_1004A8604(v7, (uint64_t)v6);
      if ((v10 & 1) != 0)
      {
        v11 = v158 + 22;
        v12 = v158[50];
        v13 = v158[46];
        v158[65] = 1;
        v158[64] = v155;
        v14 = *(_QWORD *)(v13 + 56) + 152 * v9;
        v15 = *(_OWORD *)(v14 + 16);
        *((_OWORD *)v158 + 11) = *(_OWORD *)v14;
        *((_OWORD *)v158 + 12) = v15;
        v16 = *(_OWORD *)(v14 + 80);
        v18 = *(_OWORD *)(v14 + 32);
        v17 = *(_OWORD *)(v14 + 48);
        *((_OWORD *)v158 + 15) = *(_OWORD *)(v14 + 64);
        *((_OWORD *)v158 + 16) = v16;
        *((_OWORD *)v158 + 13) = v18;
        *((_OWORD *)v158 + 14) = v17;
        v19 = *(_OWORD *)(v14 + 96);
        v20 = *(_OWORD *)(v14 + 112);
        v21 = *(_OWORD *)(v14 + 128);
        v158[40] = *(_QWORD *)(v14 + 144);
        *((_OWORD *)v158 + 18) = v20;
        *((_OWORD *)v158 + 19) = v21;
        *((_OWORD *)v158 + 17) = v19;
        sub_100099520(v158 + 22);
        swift_bridgeObjectRelease(v6);
        if (*(_QWORD *)(v12 + 16))
        {
          swift_bridgeObjectRetain(v6);
          v22 = sub_1004A8604(v7, (uint64_t)v6);
          v23 = v158[50];
          if ((v24 & 1) != 0)
          {
            v25 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 32 * v22);
            v26 = *v25;
            v27 = v25[1];
            swift_bridgeObjectRetain(v27);
          }
          else
          {
            v26 = 0;
            v27 = 0;
          }
          swift_bridgeObjectRelease(v6);
          if (*(_QWORD *)(v23 + 16))
          {
            v117 = sub_1004A8604(v7, (uint64_t)v6);
            if ((v118 & 1) != 0)
            {
              v119 = *(_QWORD *)(v158[50] + 56) + 32 * v117;
              v120 = *(_QWORD *)(v119 + 16);
              v121 = *(_QWORD *)(v119 + 24);
              swift_bridgeObjectRetain(v121);
              goto LABEL_64;
            }
          }
        }
        else
        {
          v27 = 0;
          v26 = 0;
        }
        v120 = 0;
        v121 = 0;
LABEL_64:
        v158[67] = v121;
        v158[66] = v27;
        swift_bridgeObjectRelease(v6);
        v122 = v158[22];
        v123 = v158[23];
        v158[68] = v122;
        v158[69] = v123;
        if (v122 == 0xD000000000000010 && v123 == 0x800000010053A860
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v122, v123, 0xD000000000000010, 0x800000010053A860, 0) & 1) != 0)
        {
          v125 = v158[48];
          v124 = v158[49];
          v126 = sub_10001CFF8(0, &qword_1006325C0, DIAttributeDocument_ptr);
          sub_100099520(v11);
          v127 = dword_1006325CC;
          swift_bridgeObjectRetain(v125);
          swift_bridgeObjectRetain(v124);
          v128 = swift_task_alloc(v127);
          v158[70] = v128;
          *(_QWORD *)v128 = v158;
          *(_QWORD *)(v128 + 8) = sub_1000649E8;
          v129 = v158[47];
          v130 = *((_OWORD *)v158 + 24);
          *(_QWORD *)(v128 + 536) = v126;
          *(_OWORD *)(v128 + 520) = v130;
          *(_QWORD *)(v128 + 504) = v11;
          *(_QWORD *)(v128 + 512) = v129;
          swift_task_switch(sub_100066DF0, 0, 0);
        }
        else
        {
          v131 = (_QWORD *)swift_task_alloc(dword_1006325B4);
          v158[71] = v131;
          *v131 = v158;
          v131[1] = sub_100064AA0;
          sub_1000672D4((uint64_t)v11, v26, v27, v120, v121, v158[49]);
        }
        return;
      }
      v1 = v158;
      v54 = v158[61];
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v54);
    }
    v55 = v1[54];
    v56 = v1[55];
    v57 = v1[53];
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)&v162[0] = 0xD000000000000016;
    *((_QWORD *)&v162[0] + 1) = 0x8000000100542FA0;
    v58._countAndFlagsBits = v7;
    v58._object = v6;
    String.append(_:)(v58);
    v59._countAndFlagsBits = 0xD000000000000013;
    v59._object = (void *)0x8000000100542FC0;
    String.append(_:)(v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v56, enum case for DIPError.Code.unknownAttribute(_:), v57);
    v60 = sub_100004828((uint64_t *)&unk_1006325A0);
    v61 = sub_100004828((uint64_t *)&unk_100633440);
    v62 = *(_QWORD *)(v61 - 8);
    v63 = *(_QWORD *)(v62 + 72);
    v64 = *(unsigned __int8 *)(v62 + 80);
    v65 = (v64 + 32) & ~v64;
    v66 = swift_allocObject(v60, v65 + v63, v64 | 7);
    *(_OWORD *)(v66 + 16) = xmmword_10051FFB0;
    v67 = v66 + v65;
    v68 = (uint64_t *)(v67 + *(int *)(v61 + 48));
    v69 = enum case for DIPError.PropertyKey.attributeID(_:);
    v70 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v67, v69, v70);
    v68[3] = (uint64_t)&type metadata for String;
    *v68 = v7;
    v68[1] = (uint64_t)v6;
    v71 = sub_10011D314(v66);
    v72 = type metadata accessor for DIPError(0);
    v73 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v72, v73, 0, 0);
    v74 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100542FA0, 0, v56, 0, v71, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000001FLL, 0x8000000100542F80, 1501);
    swift_willThrow(v74);
    swift_bridgeObjectRelease(v155);
    v144 = v1[55];
    swift_bridgeObjectRelease(v1[44]);
    swift_task_dealloc(v144);
    v145 = (void (*)(void))v1[1];
LABEL_78:
    v145();
    return;
  }
  v153 = (uint64_t)(v0 + 41);
  v154 = (uint64_t)(v0 + 43);
  v28 = v0[62];
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v30 = v1 + 2;
      swift_bridgeObjectRetain(v1[62]);
      v31 = *(_OWORD *)(v28 + 48);
      *((_OWORD *)v1 + 1) = *(_OWORD *)(v28 + 32);
      *((_OWORD *)v1 + 2) = v31;
      v32 = *(_OWORD *)(v28 + 64);
      v33 = *(_OWORD *)(v28 + 80);
      v34 = *(_OWORD *)(v28 + 112);
      *((_OWORD *)v1 + 5) = *(_OWORD *)(v28 + 96);
      *((_OWORD *)v1 + 6) = v34;
      *((_OWORD *)v1 + 3) = v32;
      *((_OWORD *)v1 + 4) = v33;
      v35 = *(_OWORD *)(v28 + 128);
      v36 = *(_OWORD *)(v28 + 144);
      v37 = *(_OWORD *)(v28 + 176);
      *((_OWORD *)v1 + 9) = *(_OWORD *)(v28 + 160);
      *((_OWORD *)v1 + 10) = v37;
      *((_OWORD *)v1 + 7) = v35;
      *((_OWORD *)v1 + 8) = v36;
      v38 = v29 - 1;
      for (i = 192; ; i += 160)
      {
        v40 = v158[51];
        v41 = (_QWORD *)v158[52];
        v42 = *((_OWORD *)v1 + 8);
        v162[6] = *((_OWORD *)v1 + 7);
        v162[7] = v42;
        v43 = *((_OWORD *)v1 + 10);
        v162[8] = *((_OWORD *)v1 + 9);
        v162[9] = v43;
        v44 = *((_OWORD *)v1 + 4);
        v162[2] = *((_OWORD *)v1 + 3);
        v162[3] = v44;
        v45 = *((_OWORD *)v1 + 6);
        v162[4] = *((_OWORD *)v1 + 5);
        v162[5] = v45;
        v46 = *((_OWORD *)v1 + 2);
        v162[0] = *v30;
        v162[1] = v46;
        sub_10008F0E4(v1 + 2);
        sub_10006598C(v162, v40, v41, v1 + 44);
        sub_10008F1B8(v1 + 2);
        if (!v38)
          break;
        v47 = *(_OWORD *)(v28 + i + 16);
        *v30 = *(_OWORD *)(v28 + i);
        *((_OWORD *)v1 + 2) = v47;
        v48 = *(_OWORD *)(v28 + i + 32);
        v49 = *(_OWORD *)(v28 + i + 48);
        v50 = *(_OWORD *)(v28 + i + 80);
        *((_OWORD *)v1 + 5) = *(_OWORD *)(v28 + i + 64);
        *((_OWORD *)v1 + 6) = v50;
        *((_OWORD *)v1 + 3) = v48;
        *((_OWORD *)v1 + 4) = v49;
        v51 = *(_OWORD *)(v28 + i + 96);
        v52 = *(_OWORD *)(v28 + i + 112);
        v53 = *(_OWORD *)(v28 + i + 144);
        *((_OWORD *)v1 + 9) = *(_OWORD *)(v28 + i + 128);
        *((_OWORD *)v1 + 10) = v53;
        *((_OWORD *)v1 + 7) = v51;
        *((_OWORD *)v1 + 8) = v52;
        --v38;
      }
      swift_bridgeObjectRelease(v28);
      v1 = v158;
    }
  }
  v152 = v1 + 42;
  v75 = v1[50];
  v76 = (_QWORD *)sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v156 = v75 + 64;
  v77 = -1;
  v78 = -1 << *(_BYTE *)(v75 + 32);
  if (-v78 < 64)
    v77 = ~(-1 << -(char)v78);
  v79 = v77 & *(_QWORD *)(v75 + 64);
  v157 = (unint64_t)(63 - v78) >> 6;
  v159 = v75;
  swift_bridgeObjectRetain(v75);
  for (j = 0; ; j = v160)
  {
    if (v79)
    {
      v82 = __clz(__rbit64(v79));
      v79 &= v79 - 1;
      v160 = j;
      v83 = v82 | (j << 6);
    }
    else
    {
      v84 = __OFADD__(j, 1);
      v85 = j + 1;
      if (v84)
        goto LABEL_81;
      if (v85 >= v157)
      {
LABEL_53:
        v107 = v158[51];
        swift_release(v158[50]);
        sub_1000A1F54(v107 + 408, v154, &qword_100632378);
        sub_1000A1F54(v154, v153, &qword_100632378);
        v108 = v158[41];
        if (v108 && *(_QWORD *)(v108 + 16))
        {
          v109 = v158[57];
          v110 = v158[58];
          swift_bridgeObjectRetain(v110);
          v111 = sub_1004A8604(v109, v110);
          v112 = v158[58];
          if ((v113 & 1) != 0)
          {
            v114 = (uint64_t *)(*(_QWORD *)(v108 + 56) + 16 * v111);
            v116 = *v114;
            v115 = v114[1];
            swift_bridgeObjectRetain(v115);
            swift_bridgeObjectRelease(v112);
LABEL_71:
            v132 = sub_100066624(v116, v115, (uint64_t)v76);
            v134 = v133;
            swift_bridgeObjectRelease(v115);
            sub_1000A1F54(v154, (uint64_t)v152, &qword_100632378);
            v135 = *v152;
            if (*v152 && *(_QWORD *)(v135 + 16))
            {
              v136 = v158[59];
              v137 = v158[60];
              swift_bridgeObjectRetain(v137);
              v138 = sub_1004A8604(v136, v137);
              v139 = v158[60];
              if ((v140 & 1) != 0)
              {
                v141 = (uint64_t *)(*(_QWORD *)(v135 + 56) + 16 * v138);
                v143 = *v141;
                v142 = v141[1];
                swift_bridgeObjectRetain(v142);
                swift_bridgeObjectRelease(v139);
LABEL_77:
                v146 = sub_100066624(v143, v142, (uint64_t)v76);
                v148 = v147;
                v149 = v158[56];
                v161 = v158[55];
                v150 = (id *)v158[45];
                swift_bridgeObjectRelease(v76);
                swift_bridgeObjectRelease(v142);
                sub_10001CFF8(0, &qword_100632590, DIPage_ptr);
                v151 = v158[44];
                swift_bridgeObjectRetain(v151);
                swift_bridgeObjectRetain(v155);
                *v150 = sub_100066C40(v151, v132, v134, v146, v148, v149, v155);
                swift_bridgeObjectRelease(v155);
                swift_bridgeObjectRelease(v158[44]);
                swift_task_dealloc(v161);
                v145 = (void (*)(void))v158[1];
                goto LABEL_78;
              }
              swift_bridgeObjectRelease(v158[60]);
            }
            v143 = v158[59];
            v142 = v158[60];
            swift_bridgeObjectRetain(v142);
            goto LABEL_77;
          }
          swift_bridgeObjectRelease(v158[58]);
        }
        v116 = v158[57];
        v115 = v158[58];
        swift_bridgeObjectRetain(v115);
        goto LABEL_71;
      }
      v86 = *(_QWORD *)(v156 + 8 * v85);
      if (!v86)
      {
        v87 = v85 + 1;
        if (v85 + 1 >= v157)
          goto LABEL_53;
        v86 = *(_QWORD *)(v156 + 8 * v87);
        if (!v86)
        {
          v87 = v85 + 2;
          if (v85 + 2 >= v157)
            goto LABEL_53;
          v86 = *(_QWORD *)(v156 + 8 * v87);
          if (!v86)
          {
            v87 = v85 + 3;
            if (v85 + 3 >= v157)
              goto LABEL_53;
            v86 = *(_QWORD *)(v156 + 8 * v87);
            if (!v86)
            {
              v87 = v85 + 4;
              if (v85 + 4 >= v157)
                goto LABEL_53;
              v86 = *(_QWORD *)(v156 + 8 * v87);
              if (!v86)
              {
                v87 = v85 + 5;
                if (v85 + 5 >= v157)
                  goto LABEL_53;
                v86 = *(_QWORD *)(v156 + 8 * v87);
                if (!v86)
                {
                  while (1)
                  {
                    v85 = v87 + 1;
                    if (__OFADD__(v87, 1))
                      goto LABEL_82;
                    if (v85 >= v157)
                      goto LABEL_53;
                    v86 = *(_QWORD *)(v156 + 8 * v85);
                    ++v87;
                    if (v86)
                      goto LABEL_37;
                  }
                }
              }
            }
          }
        }
        v85 = v87;
      }
LABEL_37:
      v79 = (v86 - 1) & v86;
      v160 = v85;
      v83 = __clz(__rbit64(v86)) + (v85 << 6);
    }
    v88 = (uint64_t *)(*(_QWORD *)(v159 + 48) + 16 * v83);
    v89 = *v88;
    v90 = v88[1];
    v91 = (uint64_t *)(*(_QWORD *)(v159 + 56) + 32 * v83);
    v92 = *v91;
    v93 = v91[1];
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v93);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
    *(_QWORD *)&v162[0] = v76;
    v96 = sub_1004A8604(v89, v90);
    v97 = v76[2];
    v98 = (v95 & 1) == 0;
    v99 = v97 + v98;
    if (__OFADD__(v97, v98))
      break;
    v100 = v95;
    if (v76[3] >= v99)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v95 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        sub_10012973C();
        v76 = *(_QWORD **)&v162[0];
        if ((v100 & 1) != 0)
          goto LABEL_19;
      }
    }
    else
    {
      sub_100123948(v99, isUniquelyReferenced_nonNull_native);
      v76 = *(_QWORD **)&v162[0];
      v101 = sub_1004A8604(v89, v90);
      if ((v100 & 1) != (v102 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        return;
      }
      v96 = v101;
      if ((v100 & 1) != 0)
      {
LABEL_19:
        v81 = (_QWORD *)(v76[7] + 16 * v96);
        swift_bridgeObjectRelease(v81[1]);
        *v81 = v92;
        v81[1] = v93;
        goto LABEL_20;
      }
    }
    v76[(v96 >> 6) + 8] |= 1 << v96;
    v103 = (uint64_t *)(v76[6] + 16 * v96);
    *v103 = v89;
    v103[1] = v90;
    v104 = (_QWORD *)(v76[7] + 16 * v96);
    *v104 = v92;
    v104[1] = v93;
    v105 = v76[2];
    v84 = __OFADD__(v105, 1);
    v106 = v105 + 1;
    if (v84)
      goto LABEL_80;
    v76[2] = v106;
    swift_bridgeObjectRetain(v90);
LABEL_20:
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v90);
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
}

uint64_t sub_1000649E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 560));
  if (v1)
  {
    v4[74] = v1;
    v5 = v4[67];
    v6 = v4[66];
    swift_bridgeObjectRelease(v4[61]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    sub_1000995C4(v4 + 22);
    v7 = sub_100065944;
  }
  else
  {
    v4[72] = 0;
    v8 = v4[66];
    swift_bridgeObjectRelease(v4[67]);
    swift_bridgeObjectRelease(v8);
    v4[73] = a1;
    v7 = sub_100064B58;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100064AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 568));
  if (v1)
  {
    v4[74] = v1;
    v5 = v4[67];
    v6 = v4[66];
    swift_bridgeObjectRelease(v4[61]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    sub_1000995C4(v4 + 22);
    v7 = sub_100065944;
  }
  else
  {
    v4[72] = 0;
    v8 = v4[66];
    swift_bridgeObjectRelease(v4[67]);
    swift_bridgeObjectRelease(v8);
    v4[73] = a1;
    v7 = sub_100064B58;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100064B58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t i;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t j;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id *v168;
  uint64_t v169;
  uint64_t (*v170)(void);
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD v184[11];

  v2 = v0 + 176;
  v3 = (_QWORD *)(v0 + 352);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v0 + 584));
  v4 = v0;
  v5 = *(_QWORD *)(v0 + 352) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD **)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  v179 = v4;
  if ((unint64_t)v7 >= v6 >> 1)
    goto LABEL_100;
  while (1)
  {
    v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, *(_QWORD *)(v4 + 584));
    specialized Array._endMutation()(v8);
    v9 = *(_QWORD *)(v179 + 224);
    if (v9)
    {
      v10 = *(_QWORD *)(v179 + 216);
      v11 = *(_QWORD *)(v179 + 512);
      v12 = *(_QWORD *)(v11 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v179 + 224));
      if (v12)
      {
        swift_bridgeObjectRetain(v9);
        v13 = sub_1004A8604(v10, v9);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(v179 + 552);
          v1 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v179 + 512) + 56) + 8 * v13);
          swift_bridgeObjectRetain(v1);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRetain(v15);
          if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
            goto LABEL_103;
          goto LABEL_6;
        }
        swift_bridgeObjectRelease(v9);
        v27 = (_QWORD *)v179;
        v11 = *(_QWORD *)(v179 + 512);
      }
      else
      {
        v27 = (_QWORD *)v179;
      }
      v28 = (void *)v27[73];
      v29 = v27[69];
      v30 = v27[68];
      v31 = sub_100004828(&qword_100640CA0);
      v1 = (_QWORD *)swift_allocObject(v31, 48, 7);
      *((_OWORD *)v1 + 1) = xmmword_10051FFB0;
      v1[4] = v30;
      v1[5] = v29;
      swift_bridgeObjectRetain(v29);
      sub_1000995C4((_QWORD *)v2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      *(_QWORD *)&v184[0] = v11;
      sub_100481890((uint64_t)v1, v10, v9, isUniquelyReferenced_nonNull_native);
      v25 = *(_QWORD *)&v184[0];
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v9);

LABEL_13:
      v26 = (_QWORD *)v179;
    }
    else
    {

      sub_1000995C4((_QWORD *)v2);
      v26 = (_QWORD *)v179;
      v25 = *(_QWORD *)(v179 + 512);
    }
    v10 = v26[65];
    v7 = (_QWORD *)v26[61];
    v175 = v25;
    if (v10 != v26[63])
      break;
    v173 = (uint64_t)(v26 + 41);
    v174 = (uint64_t)(v26 + 43);
    swift_bridgeObjectRelease(v7);
    v33 = v179;
    v34 = *(_QWORD *)(v179 + 576);
    v35 = *(_QWORD *)(v179 + 496);
    if (v35 && (v7 = *(_QWORD **)(v35 + 16)) != 0)
    {
      v1 = (_QWORD *)(v179 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v179 + 496));
      v36 = *(_OWORD *)(v35 + 48);
      *(_OWORD *)(v179 + 16) = *(_OWORD *)(v35 + 32);
      *(_OWORD *)(v179 + 32) = v36;
      v37 = *(_OWORD *)(v35 + 64);
      v38 = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      *(_OWORD *)(v179 + 80) = *(_OWORD *)(v35 + 96);
      *(_OWORD *)(v179 + 96) = v39;
      *(_OWORD *)(v179 + 48) = v37;
      *(_OWORD *)(v179 + 64) = v38;
      v40 = *(_OWORD *)(v35 + 128);
      v41 = *(_OWORD *)(v35 + 144);
      v42 = *(_OWORD *)(v35 + 176);
      *(_OWORD *)(v179 + 144) = *(_OWORD *)(v35 + 160);
      *(_OWORD *)(v179 + 160) = v42;
      *(_OWORD *)(v179 + 112) = v40;
      *(_OWORD *)(v179 + 128) = v41;
      v9 = (unint64_t)v7 - 1;
      for (i = 192; ; i += 160)
      {
        v10 = *(_QWORD *)(v179 + 408);
        v7 = *(_QWORD **)(v179 + 416);
        v44 = *(_OWORD *)(v179 + 128);
        v184[6] = *(_OWORD *)(v179 + 112);
        v184[7] = v44;
        v45 = *(_OWORD *)(v179 + 160);
        v184[8] = *(_OWORD *)(v179 + 144);
        v184[9] = v45;
        v46 = *(_OWORD *)(v179 + 64);
        v184[2] = *(_OWORD *)(v179 + 48);
        v184[3] = v46;
        v47 = *(_OWORD *)(v179 + 96);
        v184[4] = *(_OWORD *)(v179 + 80);
        v184[5] = v47;
        v48 = *(_OWORD *)(v179 + 32);
        v184[0] = *(_OWORD *)v1;
        v184[1] = v48;
        sub_10008F0E4(v1);
        sub_10006598C(v184, v10, v7, v3);
        sub_10008F1B8(v1);
        if (!v9)
          break;
        v49 = *(_OWORD *)(v35 + i + 16);
        *(_OWORD *)v1 = *(_OWORD *)(v35 + i);
        *(_OWORD *)(v179 + 32) = v49;
        v50 = *(_OWORD *)(v35 + i + 32);
        v51 = *(_OWORD *)(v35 + i + 48);
        v52 = *(_OWORD *)(v35 + i + 80);
        *(_OWORD *)(v179 + 80) = *(_OWORD *)(v35 + i + 64);
        *(_OWORD *)(v179 + 96) = v52;
        *(_OWORD *)(v179 + 48) = v50;
        *(_OWORD *)(v179 + 64) = v51;
        v53 = *(_OWORD *)(v35 + i + 96);
        v54 = *(_OWORD *)(v35 + i + 112);
        v55 = *(_OWORD *)(v35 + i + 144);
        *(_OWORD *)(v179 + 144) = *(_OWORD *)(v35 + i + 128);
        *(_OWORD *)(v179 + 160) = v55;
        *(_OWORD *)(v179 + 112) = v53;
        *(_OWORD *)(v179 + 128) = v54;
        --v9;
      }
      v178 = v34;
      swift_bridgeObjectRelease(v35);
      v33 = v179;
    }
    else
    {
      v178 = *(_QWORD *)(v179 + 576);
    }
    v172 = (uint64_t *)(v33 + 336);
    v78 = *(_QWORD *)(v33 + 400);
    v3 = (_QWORD *)sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
    v176 = v78 + 64;
    v79 = -1;
    v80 = -1 << *(_BYTE *)(v78 + 32);
    if (-v80 < 64)
      v79 = ~(-1 << -(char)v80);
    v2 = v79 & *(_QWORD *)(v78 + 64);
    v177 = (unint64_t)(63 - v80) >> 6;
    v180 = v78;
    swift_bridgeObjectRetain(v78);
    for (j = 0; ; j = v181)
    {
      if (v2)
      {
        v83 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        v181 = j;
        v84 = v83 | (j << 6);
      }
      else
      {
        v85 = __OFADD__(j, 1);
        v86 = j + 1;
        if (v85)
          goto LABEL_99;
        v2 = v178;
        if (v86 >= v177)
        {
LABEL_65:
          v102 = *(_QWORD *)(v179 + 408);
          swift_release(*(_QWORD *)(v179 + 400));
          sub_1000A1F54(v102 + 408, v174, &qword_100632378);
          sub_1000A1F54(v174, v173, &qword_100632378);
          v103 = v179;
          v104 = *(_QWORD *)(v179 + 328);
          if (v104 && *(_QWORD *)(v104 + 16))
          {
            v105 = *(_QWORD *)(v179 + 456);
            v106 = *(_QWORD *)(v179 + 464);
            swift_bridgeObjectRetain(v106);
            v107 = sub_1004A8604(v105, v106);
            v108 = *(_QWORD *)(v179 + 464);
            if ((v109 & 1) != 0)
            {
              v110 = (uint64_t *)(*(_QWORD *)(v104 + 56) + 16 * v107);
              v112 = *v110;
              v111 = v110[1];
              swift_bridgeObjectRetain(v111);
              swift_bridgeObjectRelease(v108);
              v2 = v178;
              goto LABEL_75;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(v179 + 464));
            v103 = v179;
            v2 = v178;
          }
          v112 = *(_QWORD *)(v103 + 456);
          v111 = *(_QWORD *)(v103 + 464);
          swift_bridgeObjectRetain(v111);
LABEL_75:
          v135 = sub_100066624(v112, v111, (uint64_t)v3);
          if (v2)
          {
            swift_bridgeObjectRelease(v3);
            swift_bridgeObjectRelease(v111);
            v26 = (_QWORD *)v179;
            goto LABEL_95;
          }
          v137 = v135;
          v138 = v136;
          swift_bridgeObjectRelease(v111);
          sub_1000A1F54(v174, (uint64_t)v172, &qword_100632378);
          v139 = *v172;
          if (*v172 && *(_QWORD *)(v139 + 16))
          {
            v140 = *(_QWORD *)(v179 + 472);
            v141 = *(_QWORD *)(v179 + 480);
            swift_bridgeObjectRetain(v141);
            v142 = sub_1004A8604(v140, v141);
            v143 = *(_QWORD *)(v179 + 480);
            if ((v144 & 1) != 0)
            {
              v145 = (uint64_t *)(*(_QWORD *)(v139 + 56) + 16 * v142);
              v147 = *v145;
              v146 = v145[1];
              swift_bridgeObjectRetain(v146);
              swift_bridgeObjectRelease(v143);
LABEL_94:
              v164 = sub_100066624(v147, v146, (uint64_t)v3);
              v166 = v165;
              v167 = *(_QWORD *)(v179 + 448);
              v183 = *(_QWORD *)(v179 + 440);
              v168 = *(id **)(v179 + 360);
              swift_bridgeObjectRelease(v3);
              swift_bridgeObjectRelease(v146);
              sub_10001CFF8(0, &qword_100632590, DIPage_ptr);
              v169 = *(_QWORD *)(v179 + 352);
              swift_bridgeObjectRetain(v169);
              swift_bridgeObjectRetain(v175);
              *v168 = sub_100066C40(v169, v137, v138, v164, v166, v167, v175);
              swift_bridgeObjectRelease(v175);
              swift_bridgeObjectRelease(*(_QWORD *)(v179 + 352));
              swift_task_dealloc(v183);
              v170 = *(uint64_t (**)(void))(v179 + 8);
              return v170();
            }
            swift_bridgeObjectRelease(*(_QWORD *)(v179 + 480));
          }
          v147 = *(_QWORD *)(v179 + 472);
          v146 = *(_QWORD *)(v179 + 480);
          swift_bridgeObjectRetain(v146);
          goto LABEL_94;
        }
        v87 = *(_QWORD *)(v176 + 8 * v86);
        if (!v87)
        {
          v88 = v86 + 1;
          if (v86 + 1 >= v177)
            goto LABEL_65;
          v87 = *(_QWORD *)(v176 + 8 * v88);
          if (!v87)
          {
            v88 = v86 + 2;
            if (v86 + 2 >= v177)
              goto LABEL_65;
            v87 = *(_QWORD *)(v176 + 8 * v88);
            if (!v87)
            {
              v88 = v86 + 3;
              if (v86 + 3 >= v177)
                goto LABEL_65;
              v87 = *(_QWORD *)(v176 + 8 * v88);
              if (!v87)
              {
                v88 = v86 + 4;
                if (v86 + 4 >= v177)
                  goto LABEL_65;
                v87 = *(_QWORD *)(v176 + 8 * v88);
                if (!v87)
                {
                  v88 = v86 + 5;
                  if (v86 + 5 >= v177)
                    goto LABEL_65;
                  v87 = *(_QWORD *)(v176 + 8 * v88);
                  if (!v87)
                  {
                    while (1)
                    {
                      v86 = v88 + 1;
                      if (__OFADD__(v88, 1))
                        break;
                      if (v86 >= v177)
                        goto LABEL_65;
                      v87 = *(_QWORD *)(v176 + 8 * v86);
                      ++v88;
                      if (v87)
                        goto LABEL_49;
                    }
LABEL_102:
                    __break(1u);
LABEL_103:
                    v1 = sub_1000E2358(0, v1[2] + 1, 1, v1);
LABEL_6:
                    v17 = v1[2];
                    v16 = v1[3];
                    v18 = v179;
                    if (v17 >= v16 >> 1)
                    {
                      v171 = sub_1000E2358((_QWORD *)(v16 > 1), v17 + 1, 1, v1);
                      v18 = v179;
                      v1 = v171;
                    }
                    v19 = *(void **)(v18 + 584);
                    v20 = *(_QWORD *)(v18 + 552);
                    v21 = *(_QWORD *)(v179 + 544);
                    v22 = *(_QWORD *)(v179 + 512);
                    v1[2] = v17 + 1;
                    v23 = &v1[2 * v17];
                    v23[4] = v21;
                    v23[5] = v20;
                    sub_1000995C4((_QWORD *)v2);
                    v24 = swift_isUniquelyReferenced_nonNull_native(v22);
                    *(_QWORD *)&v184[0] = v22;
                    sub_100481890((uint64_t)v1, v10, v9, v24);
                    v25 = *(_QWORD *)&v184[0];
                    swift_bridgeObjectRelease(0x8000000000000000);
                    swift_bridgeObjectRelease(v9);

                    goto LABEL_13;
                  }
                }
              }
            }
          }
          v86 = v88;
        }
LABEL_49:
        v2 = (v87 - 1) & v87;
        v181 = v86;
        v84 = __clz(__rbit64(v87)) + (v86 << 6);
      }
      v89 = (uint64_t *)(*(_QWORD *)(v180 + 48) + 16 * v84);
      v90 = *v89;
      v91 = v89[1];
      v92 = *(_QWORD *)(v180 + 56) + 32 * v84;
      v7 = *(_QWORD **)v92;
      v1 = *(_QWORD **)(v92 + 8);
      swift_bridgeObjectRetain(v91);
      swift_bridgeObjectRetain(v1);
      v93 = swift_isUniquelyReferenced_nonNull_native(v3);
      *(_QWORD *)&v184[0] = v3;
      v9 = sub_1004A8604(v90, v91);
      v6 = v3[2];
      v95 = (v94 & 1) == 0;
      v96 = v6 + v95;
      if (__OFADD__(v6, v95))
        break;
      v10 = v94;
      if (v3[3] >= v96)
      {
        if ((v93 & 1) != 0)
        {
          if ((v94 & 1) != 0)
            goto LABEL_31;
        }
        else
        {
          sub_10012973C();
          v3 = *(_QWORD **)&v184[0];
          if ((v10 & 1) != 0)
            goto LABEL_31;
        }
      }
      else
      {
        sub_100123948(v96, v93);
        v3 = *(_QWORD **)&v184[0];
        v97 = sub_1004A8604(v90, v91);
        if ((v10 & 1) != (v98 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v9 = v97;
        if ((v10 & 1) != 0)
        {
LABEL_31:
          v82 = (_QWORD *)(v3[7] + 16 * v9);
          swift_bridgeObjectRelease(v82[1]);
          *v82 = v7;
          v82[1] = v1;
          goto LABEL_32;
        }
      }
      v3[(v9 >> 6) + 8] |= 1 << v9;
      v99 = (uint64_t *)(v3[6] + 16 * v9);
      *v99 = v90;
      v99[1] = v91;
      v100 = (_QWORD *)(v3[7] + 16 * v9);
      *v100 = v7;
      v100[1] = v1;
      v101 = v3[2];
      v85 = __OFADD__(v101, 1);
      v6 = v101 + 1;
      if (v85)
        goto LABEL_98;
      v3[2] = v6;
      swift_bridgeObjectRetain(v91);
LABEL_32:
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v91);
    }
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, (char *)v7 + 1, 1);
    v4 = v179;
  }
  if (v10 >= v7[2])
  {
    __break(1u);
    goto LABEL_102;
  }
  v56 = &v7[2 * v10];
  v58 = v56[4];
  v57 = (void *)v56[5];
  v59 = *(_QWORD *)(v26[46] + 16);
  swift_bridgeObjectRetain(v57);
  if (!v59)
  {
LABEL_71:
    swift_bridgeObjectRelease(v7);
    v114 = v26[54];
    v115 = v26[55];
    v116 = v26[53];
    *(_QWORD *)&v184[0] = 0;
    *((_QWORD *)&v184[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(*((_QWORD *)&v184[0] + 1));
    *(_QWORD *)&v184[0] = 0xD000000000000016;
    *((_QWORD *)&v184[0] + 1) = 0x8000000100542FA0;
    v117._countAndFlagsBits = v58;
    v117._object = v57;
    String.append(_:)(v117);
    v118._countAndFlagsBits = 0xD000000000000013;
    v118._object = (void *)0x8000000100542FC0;
    String.append(_:)(v118);
    v119 = *((_QWORD *)&v184[0] + 1);
    v182 = *(_QWORD *)&v184[0];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v114 + 104))(v115, enum case for DIPError.Code.unknownAttribute(_:), v116);
    v120 = sub_100004828((uint64_t *)&unk_1006325A0);
    v121 = sub_100004828((uint64_t *)&unk_100633440);
    v122 = *(_QWORD *)(v121 - 8);
    v123 = *(_QWORD *)(v122 + 72);
    v124 = *(unsigned __int8 *)(v122 + 80);
    v125 = (v124 + 32) & ~v124;
    v126 = swift_allocObject(v120, v125 + v123, v124 | 7);
    *(_OWORD *)(v126 + 16) = xmmword_10051FFB0;
    v127 = v126 + v125;
    v128 = (uint64_t *)(v127 + *(int *)(v121 + 48));
    v129 = enum case for DIPError.PropertyKey.attributeID(_:);
    v130 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 104))(v127, v129, v130);
    v128[3] = (uint64_t)&type metadata for String;
    *v128 = v58;
    v128[1] = (uint64_t)v57;
    v131 = sub_10011D314(v126);
    v132 = type metadata accessor for DIPError(0);
    v133 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v132, v133, 0, 0);
    v134 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v182, v119, 0, v115, 0, v131, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000001FLL, 0x8000000100542F80, 1501);
    swift_willThrow(v134);
LABEL_95:
    swift_bridgeObjectRelease(v175);
    v163 = v26[55];
    swift_bridgeObjectRelease(v26[44]);
    swift_task_dealloc(v163);
    v170 = (uint64_t (*)(void))v26[1];
    return v170();
  }
  swift_bridgeObjectRetain(v57);
  v60 = sub_1004A8604(v58, (uint64_t)v57);
  if ((v61 & 1) == 0)
  {
    v26 = (_QWORD *)v179;
    v7 = *(_QWORD **)(v179 + 488);
    swift_bridgeObjectRelease(v57);
    goto LABEL_71;
  }
  v62 = (_QWORD *)v179;
  *(_QWORD *)(v179 + 520) = v10 + 1;
  *(_QWORD *)(v179 + 512) = v25;
  v63 = *(_QWORD *)(v179 + 400);
  v64 = *(_QWORD *)(*(_QWORD *)(v179 + 368) + 56) + 152 * v60;
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v2 = *(_OWORD *)v64;
  *(_OWORD *)(v2 + 16) = v65;
  v66 = *(_OWORD *)(v64 + 80);
  v68 = *(_OWORD *)(v64 + 32);
  v67 = *(_OWORD *)(v64 + 48);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)(v64 + 64);
  *(_OWORD *)(v2 + 80) = v66;
  *(_OWORD *)(v2 + 32) = v68;
  *(_OWORD *)(v2 + 48) = v67;
  v70 = *(_OWORD *)(v64 + 112);
  v69 = *(_OWORD *)(v64 + 128);
  v71 = *(_OWORD *)(v64 + 96);
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(v64 + 144);
  *(_OWORD *)(v2 + 112) = v70;
  *(_OWORD *)(v2 + 128) = v69;
  *(_OWORD *)(v2 + 96) = v71;
  sub_100099520((_QWORD *)v2);
  swift_bridgeObjectRelease(v57);
  if (!*(_QWORD *)(v63 + 16))
  {
    v77 = 0;
    v76 = 0;
LABEL_85:
    v151 = 0;
    v152 = 0;
    goto LABEL_87;
  }
  swift_bridgeObjectRetain(v57);
  v72 = sub_1004A8604(v58, (uint64_t)v57);
  v73 = *(_QWORD *)(v179 + 400);
  if ((v74 & 1) != 0)
  {
    v75 = (uint64_t *)(*(_QWORD *)(v73 + 56) + 32 * v72);
    v76 = *v75;
    v77 = v75[1];
    swift_bridgeObjectRetain(v77);
  }
  else
  {
    v76 = 0;
    v77 = 0;
  }
  swift_bridgeObjectRelease(v57);
  if (!*(_QWORD *)(v73 + 16))
  {
    v151 = 0;
    v152 = 0;
    v62 = (_QWORD *)v179;
    goto LABEL_87;
  }
  v62 = (_QWORD *)v179;
  v148 = sub_1004A8604(v58, (uint64_t)v57);
  if ((v149 & 1) == 0)
    goto LABEL_85;
  v150 = *(_QWORD *)(*(_QWORD *)(v179 + 400) + 56) + 32 * v148;
  v151 = *(_QWORD *)(v150 + 16);
  v152 = *(_QWORD *)(v150 + 24);
  swift_bridgeObjectRetain(v152);
LABEL_87:
  v62[67] = v152;
  v62[66] = v77;
  swift_bridgeObjectRelease(v57);
  v153 = v62[22];
  v154 = v62[23];
  v62[68] = v153;
  v62[69] = v154;
  if (v153 == 0xD000000000000010 && v154 == 0x800000010053A860
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v153, v154, 0xD000000000000010, 0x800000010053A860, 0) & 1) != 0)
  {
    v156 = *(_QWORD *)(v179 + 384);
    v155 = *(_QWORD *)(v179 + 392);
    v157 = sub_10001CFF8(0, &qword_1006325C0, DIAttributeDocument_ptr);
    sub_100099520((_QWORD *)v2);
    v158 = dword_1006325CC;
    swift_bridgeObjectRetain(v156);
    swift_bridgeObjectRetain(v155);
    v159 = swift_task_alloc(v158);
    *(_QWORD *)(v179 + 560) = v159;
    *(_QWORD *)v159 = v179;
    *(_QWORD *)(v159 + 8) = sub_1000649E8;
    v160 = *(_QWORD *)(v179 + 376);
    v161 = *(_OWORD *)(v179 + 384);
    *(_QWORD *)(v159 + 536) = v157;
    *(_OWORD *)(v159 + 520) = v161;
    *(_QWORD *)(v159 + 504) = v2;
    *(_QWORD *)(v159 + 512) = v160;
    return swift_task_switch(sub_100066DF0, 0, 0);
  }
  else
  {
    v162 = (_QWORD *)swift_task_alloc(dword_1006325B4);
    *(_QWORD *)(v179 + 568) = v162;
    *v162 = v179;
    v162[1] = sub_100064AA0;
    return sub_1000672D4(v2, v76, v77, v151, v152, *(_QWORD *)(v179 + 392));
  }
}

uint64_t sub_100065944()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 512));
  v1 = *(_QWORD *)(v0 + 440);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006598C(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  NSString v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __objc2_prop *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  NSString v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  NSString v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  NSString v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  NSString v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  NSString v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  NSString v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  NSString v117;
  id v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148[8];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v141 = a4;
  v126 = type metadata accessor for Logger(0);
  v125 = *(_QWORD *)(v126 - 8);
  v7 = __chkstk_darwin(v126);
  v9 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v124 = (char *)&v122 - v10;
  v12 = a1[2];
  v11 = a1[3];
  v13 = a1[5];
  v128 = a1[4];
  v129 = a1[6];
  v137 = a1[7];
  v130 = a1[8];
  v135 = a1[9];
  v131 = a1[10];
  v14 = a1[11];
  v136 = a1[12];
  v15 = a1[13];
  v138 = v14;
  v139 = v15;
  v132 = a1[14];
  v140 = a1[15];
  v133 = a1[16];
  v134 = a1[17];
  v127 = (_QWORD *)a1[19];
  v16 = objc_msgSend(objc_allocWithZone((Class)DIAttributeLabel), "init");
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setIdentifier:", v17);

  sub_1000A1F54(a2 + 408, (uint64_t)v148, &qword_100632378);
  sub_1000A1F54((uint64_t)v148, (uint64_t)&v154, &qword_100632378);
  v18 = v154;
  if (v154 && *(_QWORD *)(v154 + 16))
  {
    swift_bridgeObjectRetain(v11);
    v19 = sub_1004A8604(v12, v11);
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v19 + 8);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v11);
      v11 = v21;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease(v11);
  }
  swift_bridgeObjectRetain(v11);
LABEL_7:
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v16, "setDefaultValue:", v22);

  v23 = objc_msgSend(v16, "defaultValue");
  if (!v23)
    goto LABEL_33;
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v27 = v26;

  v146 = v25;
  v147 = v27;
  v144 = 0xD000000000000012;
  v145 = 0x8000000100542FE0;
  v28 = sub_1000994DC();
  if ((StringProtocol.contains<A>(_:)(&v144, &type metadata for String, &type metadata for String, v28, v28) & 1) == 0)
  {
    swift_bridgeObjectRelease(v27);
    goto LABEL_33;
  }
  v29 = (_QWORD *)*a3;
  if (!v29 || (v30 = v29[2]) == 0)
  {
    swift_bridgeObjectRelease(v27);
LABEL_84:

    return;
  }
  if (v30 == 1 || !v127 || !v127[2])
  {
    v146 = v25;
    v147 = v27;
    v144 = 0xD000000000000012;
    v145 = 0x8000000100542FE0;
    v38 = v29[5];
    v142 = v29[4];
    v143 = v38;
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v144, &v142, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v28, v28, v28);
    v40 = v39;
    swift_bridgeObjectRelease(v27);
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    objc_msgSend(v16, "setDefaultValue:", v41);

    v43 = defaultLogger()(v42);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "replaced 1 phone numbers", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v125 + 8))(v9, v126);
LABEL_33:
    v69 = v140;
    v68 = v141;
    v71 = v138;
    v70 = v139;
    v72 = v137;
    if (v13)
    {
      sub_1000A1F54((uint64_t)v148, (uint64_t)&v146, &qword_100632378);
      v73 = v146;
      if (v146)
      {
        v74 = *(_QWORD *)(v146 + 16);
        swift_bridgeObjectRetain(v13);
        v75 = v128;
        if (v74)
        {
          swift_bridgeObjectRetain(v13);
          v76 = sub_1004A8604(v75, v13);
          if ((v77 & 1) != 0)
          {
            v78 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + 16 * v76 + 8);
            swift_bridgeObjectRetain(v78);
            swift_bridgeObjectRelease_n(v13, 2);
            v13 = v78;
          }
          else
          {
            swift_bridgeObjectRelease(v13);
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain(v13);
      }
      v79 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v13);
      objc_msgSend(v16, "setButtonTitle:", v79);

    }
    if (!v72)
    {
LABEL_61:
      if (!v70)
      {
LABEL_81:
        v118 = v16;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v118);
        v120 = *(_QWORD *)((*v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v119 = *(_QWORD *)((*v68 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v120 >= v119 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1);
        v121 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v118);
        specialized Array._endMutation()(v121);
        goto LABEL_84;
      }
      sub_1000A1F54((uint64_t)v148, (uint64_t)&v151, &qword_100632378);
      v99 = v151;
      v100 = v134;
      if (v151 && *(_QWORD *)(v151 + 16))
      {
        swift_bridgeObjectRetain(v70);
        v101 = sub_1004A8604(v136, v70);
        if ((v102 & 1) != 0)
        {
          v103 = (uint64_t *)(*(_QWORD *)(v99 + 56) + 16 * v101);
          v104 = v103[1];
          v136 = *v103;
          swift_bridgeObjectRetain(v104);
          swift_bridgeObjectRelease(v70);
          v70 = v104;
LABEL_68:
          v105 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v70);
          objc_msgSend(v16, "setBusinessChatButtonTitle:", v105);

          sub_1000A1F54((uint64_t)v148, (uint64_t)&v150, &qword_100632378);
          v106 = v150;
          v107 = v132;
          if (v150 && *(_QWORD *)(v150 + 16))
          {
            swift_bridgeObjectRetain(v69);
            v108 = sub_1004A8604(v107, v69);
            if ((v109 & 1) != 0)
            {
              v110 = *(_QWORD *)(*(_QWORD *)(v106 + 56) + 16 * v108 + 8);
              swift_bridgeObjectRetain(v110);
              swift_bridgeObjectRelease(v69);
              v69 = v110;
LABEL_74:
              v111 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v69);
              objc_msgSend(v16, "setBusinessChatIdentifier:", v111);

              sub_1000A1F54((uint64_t)v148, (uint64_t)&v149, &qword_100632378);
              v112 = v149;
              v113 = v133;
              if (v149 && *(_QWORD *)(v149 + 16))
              {
                swift_bridgeObjectRetain(v100);
                v114 = sub_1004A8604(v113, v100);
                if ((v115 & 1) != 0)
                {
                  v116 = *(_QWORD *)(*(_QWORD *)(v112 + 56) + 16 * v114 + 8);
                  swift_bridgeObjectRetain(v116);
                  swift_bridgeObjectRelease(v100);
                  v100 = v116;
LABEL_80:
                  v117 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v100);
                  objc_msgSend(v16, "setBusinessChatIntentName:", v117);

                  goto LABEL_81;
                }
                swift_bridgeObjectRelease(v100);
              }
              swift_bridgeObjectRetain(v100);
              goto LABEL_80;
            }
            swift_bridgeObjectRelease(v69);
          }
          swift_bridgeObjectRetain(v69);
          goto LABEL_74;
        }
        swift_bridgeObjectRelease(v70);
      }
      swift_bridgeObjectRetain(v70);
      goto LABEL_68;
    }
    sub_1000A1F54((uint64_t)v148, (uint64_t)&v144, &qword_100632378);
    v80 = v144;
    v81 = v129;
    if (v144 && *(_QWORD *)(v144 + 16))
    {
      swift_bridgeObjectRetain(v72);
      v82 = sub_1004A8604(v81, v72);
      if ((v83 & 1) != 0)
      {
        v84 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 16 * v82 + 8);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRelease(v72);
        v72 = v84;
LABEL_48:
        v85 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v72);
        objc_msgSend(v16, "setDetailTitle:", v85);

        sub_1000A1F54((uint64_t)v148, (uint64_t)&v142, &qword_100632378);
        v86 = v142;
        v87 = v130;
        if (v142 && *(_QWORD *)(v142 + 16))
        {
          v88 = v135;
          swift_bridgeObjectRetain(v135);
          v89 = sub_1004A8604(v87, v88);
          if ((v90 & 1) != 0)
          {
            v91 = *(_QWORD *)(*(_QWORD *)(v86 + 56) + 16 * v89 + 8);
            swift_bridgeObjectRetain(v91);
            swift_bridgeObjectRelease(v88);
LABEL_54:
            v92 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v91);
            objc_msgSend(v16, "setDetailSubtitle:", v92);

            sub_1000A1F54((uint64_t)v148, (uint64_t)&v152, &qword_100632378);
            v93 = v152;
            v94 = v131;
            if (v152 && *(_QWORD *)(v152 + 16))
            {
              swift_bridgeObjectRetain(v71);
              v95 = sub_1004A8604(v94, v71);
              if ((v96 & 1) != 0)
              {
                v97 = *(_QWORD *)(*(_QWORD *)(v93 + 56) + 16 * v95 + 8);
                swift_bridgeObjectRetain(v97);
                swift_bridgeObjectRelease(v71);
                v71 = v97;
LABEL_60:
                v98 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v71);
                objc_msgSend(v16, "setDetailBody:", v98);

                goto LABEL_61;
              }
              swift_bridgeObjectRelease(v71);
            }
            swift_bridgeObjectRetain(v71);
            goto LABEL_60;
          }
          swift_bridgeObjectRelease(v88);
        }
        v91 = v135;
        swift_bridgeObjectRetain(v135);
        goto LABEL_54;
      }
      swift_bridgeObjectRelease(v72);
    }
    swift_bridgeObjectRetain(v72);
    goto LABEL_48;
  }
  v31 = v127[6];
  v123 = v127[5];
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v27);
  sub_1000A1F54((uint64_t)v148, (uint64_t)&v153, &qword_100632378);
  v32 = v153;
  if (v153)
  {
    v33 = &stru_10062A000;
    if (*(_QWORD *)(v153 + 16))
    {
      swift_bridgeObjectRetain(v31);
      v34 = sub_1004A8604(v123, v31);
      v35 = v31;
      if ((v36 & 1) != 0)
      {
        v37 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v34);
        v35 = v37[1];
        v123 = *v37;
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRelease(v31);
      }
      swift_bridgeObjectRelease(v31);
      v31 = v35;
    }
  }
  else
  {
    v33 = &stru_10062A000;
  }
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v16, v33[212].attr, v47);

  v48 = v29[2];
  if (v48)
  {
    if (v48 != 1)
    {
      v49 = v29[5];
      v123 = v29[4];
      v50 = v29[7];
      v127 = (_QWORD *)v29[6];
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRelease(v29);
      v51 = objc_msgSend(v16, "defaultValue");
      v52 = v51;
      if (v51)
      {
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v55 = v54;

        v146 = v53;
        v147 = v55;
        v144 = 0xD000000000000012;
        v145 = 0x8000000100542FE0;
        v142 = v123;
        v143 = v49;
        v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v144, &v142, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v28, v28, v28);
        v58 = v57;
        swift_bridgeObjectRelease(v55);
        v146 = v56;
        v147 = v58;
        v144 = 0xD000000000000014;
        v145 = 0x8000000100543000;
        v142 = (uint64_t)v127;
        v143 = v50;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v144, &v142, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v28, v28, v28);
        v60 = v59;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v49);
        v61 = v58;
        v33 = &stru_10062A000;
        swift_bridgeObjectRelease(v61);
        v52 = String._bridgeToObjectiveC()();
        v49 = v60;
      }
      else
      {
        swift_bridgeObjectRelease(v50);
      }
      swift_bridgeObjectRelease(v49);
      objc_msgSend(v16, v33[212].attr, v52);

      v62 = v124;
      v64 = defaultLogger()(v63);
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.debug.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "replaced 2 phone numbers", v67, 2u);
        swift_slowDealloc(v67, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v125 + 8))(v62, v126);
      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100066624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, unint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  _QWORD v73[2];
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v72 = a3;
  v64 = type metadata accessor for DIPError.Code(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v65 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004828(&qword_1006325D8);
  v6 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v71 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_1006325E0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v62 - v13;
  v15 = sub_100004828(&qword_1006325E8);
  Regex.init(_regexString:version:)(0xD00000000000001ELL, 0x8000000100543020, 1, v15);
  Regex.ignoresCase(_:)(1, v8);
  v66 = *(void (**)(char *, uint64_t))(v9 + 8);
  v66(v12, v8);
  *(_QWORD *)&v79 = a1;
  *((_QWORD *)&v79 + 1) = a2;
  v16 = sub_100099FB8();
  v17 = sub_100099FFC(&qword_1006325F8, &qword_1006325E0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v18 = swift_bridgeObjectRetain(a2);
  v67 = v14;
  v68 = v8;
  v19 = BidirectionalCollection<>.matches<A, B>(of:)(v14, &type metadata for String, v15, v8, v16, v17, v18);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v62 = v19;
    v22 = v19 + v21;
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v69 = *(_QWORD *)(v6 + 72);
    v70 = v23;
    v24 = v82;
    v25 = v71;
    v26 = v72;
    while (1)
    {
      v72 = v20;
      v70(v25, v22, v24);
      KeyPath = swift_getKeyPath(&unk_1005219D8);
      Regex.Match.subscript.getter(&v79, KeyPath, v24);
      swift_release(KeyPath);
      v28 = v81;
      v29 = static String._fromSubstring(_:)(v79, *((_QWORD *)&v79 + 1), v80, v81);
      v31 = v30;
      swift_bridgeObjectRelease(v28);
      if (!*(_QWORD *)(v26 + 16))
      {
        v43 = v62;
        goto LABEL_10;
      }
      swift_bridgeObjectRetain(v31);
      v32 = sub_1004A8604(v29, (uint64_t)v31);
      if ((v33 & 1) == 0)
        break;
      v34 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v32);
      v35 = *v34;
      v36 = v34[1];
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease_n(v31, 2);
      v77 = a1;
      v78 = a2;
      v37 = swift_getKeyPath(&unk_1005219F8);
      v38 = v71;
      Regex.Match.subscript.getter(&v79, v37, v82);
      swift_release(v37);
      v39 = v81;
      v74 = v79;
      v75 = v80;
      v76 = v81;
      v73[0] = v35;
      v73[1] = v36;
      v24 = v82;
      v40 = sub_1000994DC();
      v41 = sub_10009A03C();
      v25 = v38;
      a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, v73, 0, 0, 0, 1, &type metadata for String, &type metadata for Substring, &type metadata for String, v40, v41, v40);
      a2 = v42;
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v78);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v24);
      swift_bridgeObjectRelease(v36);
      v22 += v69;
      v20 = v72 - 1;
      if (v72 == 1)
      {
        v19 = v62;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(a2);
    a2 = v62;
    v43 = (uint64_t)v31;
LABEL_10:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v43);
    *(_QWORD *)&v79 = 0;
    *((_QWORD *)&v79 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(*((_QWORD *)&v79 + 1));
    *(_QWORD *)&v79 = 0xD000000000000015;
    *((_QWORD *)&v79 + 1) = 0x8000000100543040;
    v44._countAndFlagsBits = v29;
    v44._object = v31;
    String.append(_:)(v44);
    v45._countAndFlagsBits = 0x656874206E692029;
    v45._object = (void *)0xEF676E6972747320;
    String.append(_:)(v45);
    v72 = *((_QWORD *)&v79 + 1);
    v82 = v79;
    v46 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for DIPError.Code.unknownAttribute(_:), v64);
    v47 = sub_100004828((uint64_t *)&unk_1006325A0);
    v48 = sub_100004828((uint64_t *)&unk_100633440);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(_QWORD *)(v49 + 72);
    v51 = *(unsigned __int8 *)(v49 + 80);
    v52 = (v51 + 32) & ~v51;
    v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
    *(_OWORD *)(v53 + 16) = xmmword_10051FFB0;
    v54 = v53 + v52;
    v55 = (uint64_t *)(v53 + v52 + *(int *)(v48 + 48));
    a1 = enum case for DIPError.PropertyKey.attributeID(_:);
    v56 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v54, a1, v56);
    v55[3] = (uint64_t)&type metadata for String;
    *v55 = v29;
    v55[1] = (uint64_t)v31;
    v57 = sub_10011D314(v53);
    v58 = type metadata accessor for DIPError(0);
    v59 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v58, v59, 0, 0);
    v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v82, v72, 0, v46, 0, v57, 0xD000000000000051, 0x8000000100542B50, 0xD000000000000019, 0x8000000100543060, 1589);
    swift_willThrow(v60);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v71, v24);
    v66(v67, v68);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v19);
    v66(v67, v68);
  }
  return a1;
}

id sub_100066C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  id v13;
  id v14;
  Class isa;
  NSString v16;
  NSString v17;
  Class v18;

  v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)), "init");
  sub_10001CFF8(0, &qword_1006323A0, DIAttribute_ptr);
  v14 = v13;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(v14, "setAttributes:", isa);

  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  objc_msgSend(v14, "setTitle:", v16);

  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  objc_msgSend(v14, "setSubTitle:", v17);

  objc_msgSend(v14, "setPage:", a6);
  sub_100004828(&qword_1006368D0);
  v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  objc_msgSend(v14, "setServerValidationGroup:", v18);

  return v14;
}

uint64_t sub_100066DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[67] = v4;
  v5[66] = a4;
  v5[65] = a3;
  v5[63] = a1;
  v5[64] = a2;
  return swift_task_switch(sub_100066DF0, 0, 0);
}

uint64_t sub_100066DF0()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[60] = _swiftEmptyArrayStorage;
  v0[61] = 0;
  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v1 = (_QWORD *)swift_task_alloc(dword_10063997C);
  v0[68] = v1;
  *v1 = v0;
  v1[1] = sub_100066E8C;
  return sub_100233BB8((uint64_t)(v0 + 2), 0, 0, v0[66], 1);
}

uint64_t sub_100066E8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100066EEC, 0, 0);
}

uint64_t sub_100066EEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  Class isa;
  id v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44[13];

  v1 = (_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v2 + 112);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v39 = (_QWORD *)(v0 + 488);
      swift_bridgeObjectRetain(v3);
      v38 = v3;
      v5 = (uint64_t *)(v3 + 64);
      v41 = v0 + 16;
      v42 = (_QWORD *)(v0 + 480);
      v40 = v0;
      do
      {
        v43 = *(_QWORD *)(v0 + 520);
        v6 = *(_QWORD *)(v0 + 512);
        v7 = v5[6];
        v8 = v5[7];
        v9 = v5[5];
        v11 = v5[3];
        v10 = v5[4];
        v13 = v5[1];
        v12 = v5[2];
        v15 = *(v5 - 1);
        v14 = *v5;
        v17 = *(v5 - 3);
        v16 = *(v5 - 2);
        v44[0] = *(v5 - 4);
        v44[1] = v17;
        v44[2] = v16;
        v44[3] = v15;
        v44[4] = v14;
        v44[5] = v13;
        v44[6] = v12;
        v44[7] = v11;
        v44[8] = v10;
        v44[9] = v9;
        v44[10] = v7;
        v44[11] = v8;
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v10);
        sub_100068C9C(v44, v41, v39, v42, v6, v43);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v10);
        v0 = v40;
        swift_bridgeObjectRelease(v8);
        v5 += 12;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease(*(_QWORD *)(v40 + 520));
      sub_100035B1C(v41);
      v18 = *(_QWORD *)(v40 + 480);
      v1 = v42;
      v3 = v38;
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 520);
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + 112));
      swift_bridgeObjectRelease(v19);
      sub_100035B1C(v0 + 16);
      v18 = (uint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 520));
    sub_100035B1C(v0 + 16);
    v18 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (!((unint64_t)v18 >> 62))
  {
    v20 = *(id *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    if (v20)
      goto LABEL_11;
LABEL_21:
    swift_bridgeObjectRelease(v18);
    goto LABEL_22;
  }
  if (v18 < 0)
    v28 = v18;
  else
    v28 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v20 = (id)_CocoaArrayWrapper.endIndex.getter(v28);
  if (!v20)
    goto LABEL_21;
LABEL_11:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    v21 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v21)
    {
      __break(1u);
      goto LABEL_25;
    }
    v22 = *(id *)(v18 + 32);
  }
  v23 = v22;
  swift_bridgeObjectRelease(v18);
  v24 = objc_msgSend(v23, "mutableCopy");

  _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 448), v24);
  swift_unknownObjectRelease(v24);
  v25 = sub_10001CFF8(0, &qword_1006325D0, DIAttributeDocumentScanRequirements_ptr);
  if ((swift_dynamicCast(v0 + 496, v0 + 448, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
  {
    v26 = *(void **)(v0 + 496);
    objc_msgSend(v26, "setType:", DIAttributeIdentityDocumentTypeUnknown);
    v20 = v26;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v18 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 < v21 >> 1)
    {
LABEL_16:
      v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v20);
      specialized Array._endMutation()(v27);

      goto LABEL_22;
    }
LABEL_25:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v18 + 1, 1);
    goto LABEL_16;
  }
LABEL_22:
  v29 = *(_QWORD **)(v0 + 504);
  v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 536)));
  v31 = *(_QWORD *)(v0 + 480);
  sub_10001CFF8(0, &qword_1006325D0, DIAttributeDocumentScanRequirements_ptr);
  swift_bridgeObjectRetain(v31);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  v33 = objc_msgSend(v30, "initWithAcceptableDocs:", isa);

  v34 = *(_QWORD *)(v0 + 488);
  v35 = v33;
  objc_msgSend(v35, "setAcceptableDocTypes:", v34);
  v36 = String._bridgeToObjectiveC()();
  sub_1000995C4(v29);
  objc_msgSend(v35, "setSubmissionKey:", v36);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
  return (*(uint64_t (**)(id))(v0 + 8))(v35);
}

uint64_t sub_1000672D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[229] = a6;
  v6[228] = a5;
  v6[227] = a4;
  v6[226] = a3;
  v6[225] = a2;
  v6[224] = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[230] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[231] = v8;
  v6[232] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v6[233] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[234] = v10;
  v6[235] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828(&qword_100633990);
  v6[236] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100067394, 0, 0);
}

uint64_t sub_100067394()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v1 = (_QWORD *)swift_task_alloc(dword_10063997C);
  *(_QWORD *)(v0 + 1896) = v1;
  *v1 = v0;
  v1[1] = sub_100067424;
  return sub_100233BB8(v0 + 16, 0, 0, *(_QWORD *)(v0 + 1832), 1);
}

uint64_t sub_100067424()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1896));
  return swift_task_switch(sub_100067478, 0, 0);
}

uint64_t sub_100067478()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_1000A1F54(v0 + 16, v0 + 880, &qword_100632330);
  if (sub_100035A5C(v0 + 880) == 1)
  {
    v1 = *(_QWORD *)(v0 + 1856);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1848) + 104))(v1, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 1840));
    v2 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v3 = type metadata accessor for DIPError(0);
    v4 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v3, v4, 0, 0);
    v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x8000000100542F40, 0, v1, 0, v2, 0xD000000000000051, 0x8000000100542B50, 0xD000000000000021, 0x8000000100543080, 1626);
  }
  else
  {
    memcpy((void *)(v0 + 448), (const void *)(v0 + 880), 0x1B0uLL);
    sub_1000A1F54(v0 + 848, v0 + 1776, &qword_100632338);
    sub_1000A1F54(v0 + 1776, v0 + 1784, &qword_100632338);
    v6 = *(_QWORD *)(v0 + 1784);
    if (v6 && *(_QWORD *)(v6 + 16))
    {
      v7 = *(uint64_t **)(v0 + 1792);
      v8 = *v7;
      v9 = v7[1];
      swift_bridgeObjectRetain(v9);
      v10 = sub_1004A8604(v8, v9);
      if ((v11 & 1) != 0)
      {
        v12 = *(_QWORD *)(v6 + 56) + 152 * v10;
        v13 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)(v0 + 1312) = *(_OWORD *)v12;
        *(_OWORD *)(v0 + 1328) = v13;
        v14 = *(_OWORD *)(v12 + 32);
        v15 = *(_OWORD *)(v12 + 48);
        v16 = *(_OWORD *)(v12 + 80);
        *(_OWORD *)(v0 + 1376) = *(_OWORD *)(v12 + 64);
        *(_OWORD *)(v0 + 1392) = v16;
        *(_OWORD *)(v0 + 1344) = v14;
        *(_OWORD *)(v0 + 1360) = v15;
        v17 = *(_OWORD *)(v12 + 96);
        v18 = *(_OWORD *)(v12 + 112);
        v19 = *(_OWORD *)(v12 + 128);
        *(_QWORD *)(v0 + 1456) = *(_QWORD *)(v12 + 144);
        *(_OWORD *)(v0 + 1424) = v18;
        *(_OWORD *)(v0 + 1440) = v19;
        *(_OWORD *)(v0 + 1408) = v17;
        sub_100099EA8((_QWORD *)(v0 + 1312));
        swift_bridgeObjectRelease(v9);
        objc_msgSend(objc_allocWithZone((Class)DIAttribute), "init");
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease(v9);
    }
    v20 = *(_QWORD *)(v0 + 1856);
    v21 = *(_QWORD *)(v0 + 1848);
    v22 = *(_QWORD *)(v0 + 1840);
    v23 = *(uint64_t **)(v0 + 1792);
    sub_100035B1C(v0 + 16);
    _StringGuts.grow(_:)(57);
    v24._countAndFlagsBits = 0xD000000000000025;
    v24._object = (void *)0x80000001005430B0;
    String.append(_:)(v24);
    v26 = *v23;
    v25 = (void *)v23[1];
    swift_bridgeObjectRetain(v25);
    v27._countAndFlagsBits = v26;
    v27._object = v25;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v25);
    v28._countAndFlagsBits = 0xD000000000000012;
    v28._object = (void *)0x80000001005430E0;
    String.append(_:)(v28);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v20, enum case for DIPError.Code.unexpectedDaemonState(_:), v22);
    v29 = sub_100004828((uint64_t *)&unk_1006325A0);
    v30 = sub_100004828((uint64_t *)&unk_100633440);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(_QWORD *)(v31 + 72);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v29, v34 + v32, v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_10051FFB0;
    v36 = v35 + v34;
    v37 = (uint64_t *)(v36 + *(int *)(v30 + 48));
    v38 = enum case for DIPError.PropertyKey.attributeID(_:);
    v39 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v36, v38, v39);
    v37[3] = (uint64_t)&type metadata for String;
    *v37 = v26;
    v37[1] = (uint64_t)v25;
    swift_bridgeObjectRetain(v25);
    v40 = sub_10011D314(v35);
    v41 = type metadata accessor for DIPError(0);
    v42 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v41, v42, 0, 0);
    v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v20, 0, v40, 0xD000000000000051, 0x8000000100542B50, 0xD000000000000021, 0x8000000100543080, 1629);
  }
  v43 = *(_QWORD *)(v0 + 1888);
  v44 = *(_QWORD *)(v0 + 1880);
  v45 = *(_QWORD *)(v0 + 1856);
  swift_willThrow(v5);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 *a22,uint64_t a23,uint64_t a24,id a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  Class *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  NSString v40;
  NSString v41;
  id v42;
  uint64_t v43;
  NSString v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v56;

  sub_100035B1C(v27);
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, 7369839, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(0xE400000000000000);
  v35 = (Class *)DIAttributeText_ptr;
  if ((v34 & 1) != 0)
    v35 = (Class *)DIAttributeSMSOTP_ptr;
  v56 = (id)v28[224];
  v36 = objc_msgSend(objc_allocWithZone(*v35), "init");
  objc_msgSend(v36, "setMinLength:", v28[175]);
  objc_msgSend(v36, "setMaxLength:", v28[176]);
  objc_msgSend(v36, "setIsSecureText:", *a22);
  objc_msgSend(v36, "setIsSecureVisibleText:", a22[1]);
  objc_msgSend(v36, "setIsNumeric:", a22[2]);
  v37 = v28[172];
  if (v37)
    v38 = v28[172];
  else
    v38 = 0xE000000000000000;
  v39 = v36;
  swift_bridgeObjectRetain(v37);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v39, "setSubmissionFormat:", v40);

  sub_1000A1F54((uint64_t)v56 + 24, v29, (uint64_t *)&unk_100632610);
  sub_1000A1F54(v29, v30, (uint64_t *)&unk_100632610);
  v41 = (NSString)v28[219];
  v42 = v39;
  if (v41)
    v41 = String._bridgeToObjectiveC()();
  v43 = v28[224];
  objc_msgSend(v39, "setClientValidationRegex:", v41);

  sub_1000A1F54(v43 + 40, v31, (uint64_t *)&unk_100632610);
  sub_1000A1F54(v31, v32, (uint64_t *)&unk_100632610);
  v44 = (NSString)v28[221];
  v45 = v39;
  if (v44)
    v44 = String._bridgeToObjectiveC()();
  v46 = (NSString)v28[226];
  objc_msgSend(v39, "setServerValidationURL:", v44);

  if (v46)
    v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "setDefaultValue:", v46);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_100068164 + *((int *)qword_100068868 + v33)))(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void sub_10006805C()
{
  uint64_t v0;

  sub_100035B1C(v0);
  JUMPOUT(0x100068304);
}

void sub_100068178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;

  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656B636970, 0xE600000000000000, 7369839, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(0xE600000000000000);
  if ((v26 & 1) == 0)
    goto LABEL_7;
  v27 = *(_QWORD *)(v25 + 1456);
  v28 = v27 ? *(_QWORD *)(v25 + 1456) : 0xE800000000000000;
  v29 = a25;
  swift_bridgeObjectRetain(v27);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v29, "setSupportingData:", v30);

  v31 = objc_opt_self(DIAttributeSMSOTP);
  v32 = swift_dynamicCastObjCClass(v29, v31);
  if (v32)
  {
    v33 = (void *)v32;
    v34 = *(_QWORD *)(v25 + 1440);
    v35 = v29;
    objc_msgSend(v33, "setValidityInSeconds:", v34);

  }
  else
  {
LABEL_7:

  }
  JUMPOUT(0x1000684D4);
}

void sub_100068324()
{
  uint64_t v0;
  char v1;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)(1702125924, v0, 7369839, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v0);
  if ((v1 & 1) == 0)
    JUMPOUT(0x100068454);
  JUMPOUT(0x10006838CLL);
}

void sub_100068344()
{
  JUMPOUT(0x100068354);
}

void sub_100068384()
{
  swift_bridgeObjectRelease(0xE300000000000000);
  JUMPOUT(0x10006838CLL);
}

void sub_100068880(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  double v18;
  id v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v28;
  int v29;
  id v30;
  Class isa;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(double *)(a2 + 64);
  v45 = *(unsigned __int8 *)(a2 + 72);
  v11 = *(double *)(a2 + 80);
  v12 = *(unsigned __int8 *)(a2 + 88);
  v44 = *(_QWORD *)(a2 + 96);
  v42 = *(_BYTE *)(a2 + 89);
  v43 = *(unsigned __int8 *)(a2 + 104);
  v40 = *(_QWORD *)(a2 + 112);
  v41 = *(_QWORD *)a2;
  v39 = *(unsigned __int8 *)(a2 + 120);
  v13 = (char *)objc_msgSend(objc_allocWithZone((Class)DIAttributeImageCaptureRequirements), "init");
  v14 = v13;
  if (*(_QWORD *)(v4 + 16))
    v15 = *(_QWORD *)(v4 + 32);
  else
    v15 = 1;
  objc_msgSend(v13, "setSelection:", v15);
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  objc_msgSend(v14, "setMinHeight:", v8);
  if (v9 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(v14, "setMinWidth:", v9);
  if (v7 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  objc_msgSend(v14, "setPreferredHeight:", v7);
  if (v6 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  objc_msgSend(v14, "setPreferredWidth:", v6);
  if (v12)
    v11 = 1.0;
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v11);
  objc_msgSend(v14, "setMaximumCompressionRatio:", v17);

  if (v45)
    v18 = 1.0;
  else
    v18 = v10;
  v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v18);
  objc_msgSend(v14, "setCompressionRatio:", v19);

  if (v5 == 2)
  {
    v27 = sub_100004828((uint64_t *)&unk_100636900);
    v25 = swift_allocObject(v27, 40, 7);
    *(_OWORD *)(v25 + 16) = xmmword_10051FFB0;
    v28 = (void *)DIAttributeImageEncodingPNG;
    *(_QWORD *)(v25 + 32) = DIAttributeImageEncodingPNG;
    v20 = v44;
    v21 = v42;
    v29 = v43;
    v22 = v41;
  }
  else
  {
    v20 = v44;
    v21 = v42;
    v22 = v41;
    v23 = sub_100004828((uint64_t *)&unk_100636900);
    v24 = swift_allocObject(v23, 40, 7);
    v25 = v24;
    *(_OWORD *)(v24 + 16) = xmmword_10051FFB0;
    if (v5 == 1)
      v26 = (void **)&DIAttributeImageEncodingJPEG;
    else
      v26 = (void **)&DIAttributeImageEncodingUnknown;
    v28 = *v26;
    *(_QWORD *)(v24 + 32) = *v26;
    v29 = v43;
  }
  type metadata accessor for DIAttributeImageEncoding(0);
  v30 = v28;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v14, "setSupportedEncoding:", isa);

  if (a3 && *(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(v3);
    v32 = sub_1004A8604(v22, v3);
    if ((v33 & 1) != 0)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v32 + 8);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v3);
      v3 = v34;
      goto LABEL_25;
    }
    swift_bridgeObjectRelease(v3);
  }
  swift_bridgeObjectRetain(v3);
LABEL_25:
  v8 = (unint64_t)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v14, "setUserMessage:", v8);

  objc_msgSend(v14, "setLiveliness:", v21 & 1);
  v16 = 0x7FFFFFFFLL;
  if (v29)
    v35 = 0x7FFFFFFFLL;
  else
    v35 = v20;
  if (v35 < 0)
    goto LABEL_39;
  objc_msgSend(v14, "setTimeout:");
  v16 = v40;
  if (v39)
    v36 = 0;
  else
    v36 = v40;
  if ((v36 & 0x8000000000000000) != 0)
    goto LABEL_40;
  objc_msgSend(v14, "setMaxRetakeCount:");
  v8 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v14 = *(char **)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v16 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)v14 >= v16 >> 1)
LABEL_41:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v14 + 1, 1);
  v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v8);
  specialized Array._endMutation()(v37);

}

void sub_100068C9C(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void (**v59)(_QWORD, _QWORD);
  NSString v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  NSString v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  id v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  Class isa;
  uint64_t v122;
  char *v123;
  void *object;
  id v125;
  NSString v126;
  id v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  Class v131;
  uint64_t v132;
  _QWORD *v133;
  __objc2_prop *v134;
  _QWORD *v135;
  uint64_t v137;
  double v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  BOOL v147;
  NSString v148;
  id v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  void (**v175)(_QWORD, _QWORD);
  uint64_t v176;
  void *v177;
  uint64_t v178;
  char *v179;
  id v180;
  uint64_t v181;
  id v182[3];
  uint64_t v183;
  unint64_t v184;
  _OWORD v185[9];
  uint64_t v186;
  _BYTE v187[432];
  _BYTE v188[432];
  char v189[8];
  uint64_t v190;

  v166 = a5;
  v167 = a6;
  v168 = a4;
  v169 = a3;
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v175 = *(void (***)(_QWORD, _QWORD))(v12 - 8);
  v176 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[1];
  v16 = a1[2];
  v17 = (void *)a1[3];
  v173 = *a1;
  v174 = (char *)v16;
  v18 = a1[4];
  v19 = (void *)a1[5];
  v171 = a1[6];
  v172 = v18;
  v20 = a1[7];
  v179 = (char *)a1[8];
  v180 = v19;
  v21 = *((double *)a1 + 9);
  v170 = a1[10];
  v22 = a1[11];
  v23 = v15;
  v177 = (void *)v20;
  v178 = v22;
  sub_1000A1F54(a2, (uint64_t)v187, &qword_100632330);
  v24 = sub_100035A5C((uint64_t)v187);
  if ((_DWORD)v24 == 1
    || (memcpy(v188, v187, sizeof(v188)),
        sub_1000A1F54((uint64_t)&v188[400], (uint64_t)v189, &qword_100632338),
        v24 = sub_1000A1F54((uint64_t)v189, (uint64_t)&v190, &qword_100632338),
        (v25 = v190) == 0)
    || !*(_QWORD *)(v190 + 16))
  {
LABEL_9:
    defaultLogger()(v24);
    v46 = v178;
    swift_bridgeObjectRetain(v178);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v17);
    v47 = v180;
    swift_bridgeObjectRetain(v180);
    v48 = v177;
    swift_bridgeObjectRetain(v177);
    v49 = v179;
    swift_bridgeObjectRetain(v179);
    v51 = Logger.logObject.getter(v50);
    v53 = static os_log_type_t.info.getter(v51, v52);
    v174 = v14;
    v54 = v53;
    if (os_log_type_enabled(v51, v53))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v172 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v185[0] = v172;
      *(_DWORD *)v55 = 136446210;
      swift_bridgeObjectRetain(v23);
      v181 = sub_1000E3AC8(v173, v23, (uint64_t *)v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182, v55 + 4);
      swift_bridgeObjectRelease(v178);
      swift_bridgeObjectRelease(v179);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v180);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease_n(v23, 2);
      _os_log_impl((void *)&_mh_execute_header, v51, v54, "no configuration found for attribute type %{public}s", v55, 0xCu);
      v56 = v172;
      swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v46);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v23);
    }
    ((void (**)(char *, uint64_t))v175)[1](v174, v176);
    return;
  }
  swift_bridgeObjectRetain(v23);
  v26 = sub_1004A8604(v173, v23);
  if ((v27 & 1) == 0)
  {
    v24 = swift_bridgeObjectRelease(v23);
    goto LABEL_9;
  }
  v176 = v8;
  v28 = *(_QWORD *)(v25 + 56) + 152 * v26;
  v29 = *(_OWORD *)(v28 + 16);
  v185[0] = *(_OWORD *)v28;
  v185[1] = v29;
  v30 = *(_OWORD *)(v28 + 80);
  v32 = *(_OWORD *)(v28 + 32);
  v31 = *(_OWORD *)(v28 + 48);
  v185[4] = *(_OWORD *)(v28 + 64);
  v185[5] = v30;
  v185[2] = v32;
  v185[3] = v31;
  v33 = *(_OWORD *)(v28 + 96);
  v34 = *(_OWORD *)(v28 + 112);
  v35 = *(_OWORD *)(v28 + 128);
  v186 = *(_QWORD *)(v28 + 144);
  v185[7] = v34;
  v185[8] = v35;
  v185[6] = v33;
  sub_100099EA8(v185);
  swift_bridgeObjectRelease(v23);
  v36 = objc_allocWithZone((Class)DIAttributeDocumentScanRequirements);
  v37 = objc_msgSend(v36, "init", v166, v167);
  v38 = String._bridgeToObjectiveC()();
  objc_msgSend(v37, "setType:", v38);

  v175 = (void (**)(_QWORD, _QWORD))v37;
  v39 = objc_msgSend(v37, "type");
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(DIAttributeIdentityDocumentTypeDriverLicense);
  v42 = v41;
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v45 = v43;
  if (v40 == v44 && v42 == v43)
  {
    swift_bridgeObjectRelease_n(v42, 2);
LABEL_14:

    v58 = 2;
    goto LABEL_15;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v44, v43, 0);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v45);
  if ((v57 & 1) != 0)
    goto LABEL_14;
  v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(DIAttributeIdentityDocumentTypePassport);
  v154 = v153;
  v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v157 = v155;
  if (v152 == v156 && v154 == v155)
  {
    swift_bridgeObjectRelease_n(v154, 2);
LABEL_72:

    v58 = 8;
    goto LABEL_15;
  }
  v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v152, v154, v156, v155, 0);
  swift_bridgeObjectRelease(v154);
  swift_bridgeObjectRelease(v157);
  if ((v158 & 1) != 0)
    goto LABEL_72;
  v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(DIAttributeIdentityDocumentTypeStateID);
  v161 = v160;
  v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v164 = v162;
  if (v159 == v163 && v161 == v162)
  {

    swift_bridgeObjectRelease_n(v161, 2);
  }
  else
  {
    v165 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v161, v163, v162, 0);

    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v164);
    if ((v165 & 1) == 0)
      goto LABEL_16;
  }
  v58 = 4;
LABEL_15:
  *v169 |= v58;
LABEL_16:
  v59 = v175;
  v60 = String._bridgeToObjectiveC()();
  sub_100099F30(v185);
  objc_msgSend(v59, "setUserMessage:", v60);
  v175 = v59;

  v181 = (uint64_t)v174;
  v182[0] = v17;
  v61 = swift_bridgeObjectRetain(v17);
  static CharacterSet.whitespaces.getter(v61);
  v62 = sub_1000994DC();
  v63 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v62);
  v65 = v64;
  v66 = *(void (**)(char *, uint64_t))(v9 + 8);
  v67 = v176;
  v66(v11, v176);
  swift_bridgeObjectRelease(v182[0]);
  v181 = v63;
  v182[0] = v65;
  v183 = 120;
  v184 = 0xE100000000000000;
  v68 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v62, v62);
  swift_bridgeObjectRelease(v65);
  if (v68[2] < 2uLL)
  {
    swift_bridgeObjectRelease(v68);
    v71 = v175;
  }
  else
  {
    v69 = v68[4];
    v70 = v68[5];
    v71 = v175;
    v72 = v175;
    swift_bridgeObjectRetain(v70);
    v73 = sub_1004E04F4(v69, v70);
    if ((v74 & 1) != 0)
      v75 = 1280;
    else
      v75 = v73;
    objc_msgSend(v72, "setMinHeight:", v75);

    v76 = v68[2];
    if (v76 < 2)
    {
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    v77 = v68[6];
    v78 = v68[7];
    v79 = v72;
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRelease(v68);
    v80 = sub_1004E04F4(v77, v78);
    if ((v81 & 1) != 0)
      v82 = 720;
    else
      v82 = v80;
    objc_msgSend(v79, "setMinWidth:", v82);

    v67 = v176;
  }
  v181 = v172;
  v182[0] = v180;
  v83 = swift_bridgeObjectRetain(v180);
  static CharacterSet.whitespaces.getter(v83);
  v84 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v62);
  v86 = v85;
  v66(v11, v67);
  swift_bridgeObjectRelease(v182[0]);
  v181 = v84;
  v182[0] = v86;
  v183 = 120;
  v184 = 0xE100000000000000;
  v87 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v62, v62);
  swift_bridgeObjectRelease(v86);
  if (v87[2] < 2uLL)
  {
    swift_bridgeObjectRelease(v87);
  }
  else
  {
    v88 = v87[4];
    v89 = v87[5];
    v72 = v71;
    swift_bridgeObjectRetain(v89);
    v90 = sub_1004E04F4(v88, v89);
    if ((v91 & 1) != 0)
      v92 = 1920;
    else
      v92 = v90;
    objc_msgSend(v72, "setPreferredHeight:", v92);

    v76 = v87[2];
    if (v76 < 2)
      goto LABEL_80;
    v93 = v87[6];
    v94 = v87[7];
    v95 = v72;
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRelease(v87);
    v96 = sub_1004E04F4(v93, v94);
    if ((v97 & 1) != 0)
      v98 = 1080;
    else
      v98 = v96;
    objc_msgSend(v95, "setPreferredWidth:", v98);

    v67 = v176;
  }
  v181 = v171;
  v182[0] = v177;
  v99 = swift_bridgeObjectRetain(v177);
  static CharacterSet.whitespaces.getter(v99);
  v100 = StringProtocol.trimmingCharacters(in:)(v11, &type metadata for String, v62);
  v102 = v101;
  v66(v11, v67);
  swift_bridgeObjectRelease(v182[0]);
  v181 = v100;
  v182[0] = v102;
  v183 = 58;
  v184 = 0xE100000000000000;
  v103 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v183, &type metadata for String, &type metadata for String, v62, v62);
  swift_bridgeObjectRelease(v102);
  if (v103[2] < 2uLL)
  {
    swift_bridgeObjectRelease(v103);
    v108 = v179;
  }
  else
  {
    v62 = v103[4];
    v104 = v103[5];
    v72 = v71;
    swift_bridgeObjectRetain(v104);
    v105 = sub_1004E04F4(v62, v104);
    if ((v106 & 1) != 0)
      v107 = 4;
    else
      v107 = v105;
    objc_msgSend(v72, "setRatioHeight:", v107);

    v76 = v103[2];
    v108 = v179;
    if (v76 < 2)
      goto LABEL_81;
    v109 = v103[6];
    v110 = v103[7];
    v111 = v72;
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRelease(v103);
    v112 = sub_1004E04F4(v109, v110);
    if ((v113 & 1) != 0)
      v114 = 3;
    else
      v114 = v112;
    objc_msgSend(v111, "setRatioWidth:", v114);

  }
  v115 = objc_allocWithZone((Class)NSNumber);
  v116 = v71;
  v117 = objc_msgSend(v115, "initWithDouble:", v21);
  objc_msgSend(v116, "setMaximumCompressionRatio:", v117);

  objc_msgSend(v116, "setMinBorderPadding:", v170);
  type metadata accessor for DIAttributeImageEncoding(0);
  v119 = v118;
  v120 = v116;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v120, "setSupportedEncoding:", isa);
  v180 = v120;

  v122 = *((_QWORD *)v108 + 2);
  if (v122)
  {
    swift_bridgeObjectRetain(v108);
    v123 = v108 + 40;
    do
    {
      object = String.lowercased()()._object;
      v125 = v180;
      v126 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v127 = objc_msgSend(v125, "supportedEncoding");
      v128 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v127, v119);

      if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0)
        v128 = sub_1000E2484(0, v128[2] + 1, 1, v128);
      v130 = v128[2];
      v129 = v128[3];
      if (v130 >= v129 >> 1)
        v128 = sub_1000E2484((_QWORD *)(v129 > 1), v130 + 1, 1, v128);
      v123 += 16;
      v128[2] = v130 + 1;
      v128[v130 + 4] = v126;
      v131 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v128);
      objc_msgSend(v125, "setSupportedEncoding:", v131);

      --v122;
    }
    while (v122);
    swift_bridgeObjectRelease(v179);
  }
  if (!v178)
  {
    v148 = String._bridgeToObjectiveC()();
    v149 = v180;
    objc_msgSend(v180, "setCountryCode:", v148);

    v72 = v149;
    v150 = v168;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
    v62 = *(_QWORD *)((*v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v76 = *(_QWORD *)((*v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v62 < v76 >> 1)
    {
LABEL_66:
      v151 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v72);
      specialized Array._endMutation()(v151);

      return;
    }
LABEL_82:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v62 + 1, 1);
    goto LABEL_66;
  }
  v132 = *(_QWORD *)(v178 + 16);
  if (v132)
  {
    v133 = (_QWORD *)(v178 + 40);
    swift_bridgeObjectRetain(v178);
    v62 = 1;
    v134 = &stru_10062A000;
    v179 = (char *)&type metadata for Any + 8;
    v135 = v168;
    do
    {
      v72 = (NSString)*(v133 - 1);
      v137 = *v133;
      *(_QWORD *)&v138 = swift_bridgeObjectRetain(*v133).n128_u64[0];
      v139 = objc_msgSend(v180, v134[203].name, v138);
      _bridgeAnyObjectToAny(_:)(&v181, v139);
      swift_unknownObjectRelease(v139);
      v140 = sub_10001CFF8(0, &qword_1006325D0, DIAttributeDocumentScanRequirements_ptr);
      if (swift_dynamicCast(&v183, &v181, v179, v140, 6))
      {
        v141 = v132;
        v142 = (void *)v183;
        v72 = String._bridgeToObjectiveC()();
        objc_msgSend(v142, "setCountryCode:", v72);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v143);
        v145 = *(_QWORD *)((*v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v144 = *(_QWORD *)((*v135 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v145 >= v144 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v144 > 1, v145 + 1, 1);
        v146 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v145, v142);
        specialized Array._endMutation()(v146);
        swift_bridgeObjectRelease(v137);
        v132 = v141;
        v147 = v141 == v62;
        v134 = &stru_10062A000;
        if (v147)
        {
LABEL_64:

          swift_bridgeObjectRelease(v178);
          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v137);
        if (v132 == v62)
          goto LABEL_64;
      }
      v133 += 2;
    }
    while (!__OFADD__(v62++, 1));
    __break(1u);
    goto LABEL_79;
  }

}

void sub_100069A30()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  NSString v22;
  NSString v23;

  v1 = v0;
  v2 = objc_msgSend(v0, "attributes");
  v3 = sub_10001CFF8(0, &qword_1006323A0, DIAttribute_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v4);
    v13 = objc_msgSend(v1, "title");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

    v16 = objc_msgSend(v1, "subTitle");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v17;

    v19 = objc_msgSend(v1, "page");
    v20 = objc_allocWithZone((Class)DIPage);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(_swiftEmptyArrayStorage);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v20, "initWithAttributes:title:subTitle:page:", isa, v22, v23, v19);

    return;
  }
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_17;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v9 = *(id *)(v4 + 8 * i + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, "holdLocally");
      if ((v11 & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v7 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
        v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v10);
        specialized ContiguousArray._endMutation()(v8);
      }
    }
    goto LABEL_17;
  }
  __break(1u);
}

void (*sub_100069CB8(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_100069F00(v7);
  v7[10] = sub_100069D98(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100069D48;
}

void sub_100069D48(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100069D98(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_1004A8604(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_100069EC4;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10012A46C();
      goto LABEL_7;
    }
    sub_100125364(v16, a4 & 1);
    v20 = sub_1004A8604(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100069EC4(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100069F2C(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_100069F00(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100069F20;
}

uint64_t sub_100069F20(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

double sub_100069F2C(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  double result;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_100482D08(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
    sub_100480120(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t sub_100069FC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  _OWORD v8[370];
  _BYTE v9[5920];

  v6 = a3 & 1;
  sub_10008FDC8(v8);
  sub_1000A1F54((uint64_t)v8, v3 + 32, &qword_1006322D8);
  *(_OWORD *)(v3 + 6016) = 0u;
  *(_OWORD *)(v3 + 6032) = 0u;
  *(_OWORD *)(v3 + 6041) = 0u;
  *(_QWORD *)(v3 + 6064) = sub_10011DE78((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + 6072) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 6080) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + 6088) = sub_10011DE84((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  sub_1000A1F54(v3 + 32, (uint64_t)v9, &qword_1006322D8);
  sub_1000A1F54((uint64_t)v8, v3 + 32, &qword_1006322D8);
  swift_retain(a1);
  swift_retain(a2);
  sub_100093660(v9, sub_10008FDDC);
  *(_QWORD *)(v3 + 5952) = 0;
  *(_OWORD *)(v3 + 5960) = 0u;
  *(_OWORD *)(v3 + 5992) = 0u;
  *(_QWORD *)(v3 + 5976) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 5984) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v3 + 6008) = v6;
  return v3;
}

uint64_t sub_10006A10C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[9];
  _QWORD *v30;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v27 = result + 32;
    v5 = a2 + 56;
    v6 = _swiftEmptyArrayStorage;
    v28 = *(_QWORD *)(result + 16);
    while (1)
    {
      v26 = v6;
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      v8 = v4;
      while (1)
      {
        if (v8 == v7)
        {
          __break(1u);
          return result;
        }
        v4 = v8 + 1;
        if (*(_QWORD *)(a2 + 16))
          break;
LABEL_8:
        v8 = v4;
        if (v4 == v2)
          return (uint64_t)v26;
      }
      v9 = (uint64_t *)(v27 + 16 * v8);
      v11 = *v9;
      v10 = v9[1];
      Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
      swift_bridgeObjectRetain(v10);
      String.hash(into:)(v29, v11, v10);
      v12 = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(a2 + 32);
      v14 = v12 & ~v13;
      if (((*(_QWORD *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_7;
      v15 = *(_QWORD *)(a2 + 48);
      v16 = (_QWORD *)(v15 + 16 * v14);
      v17 = v16[1];
      v18 = *v16 == v11 && v17 == v10;
      if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v11, v10, 0) & 1) == 0)
        break;
LABEL_24:
      v6 = v26;
      result = swift_isUniquelyReferenced_nonNull_native(v26);
      v30 = v26;
      if ((result & 1) == 0)
      {
        result = sub_1000E419C(0, v26[2] + 1, 1);
        v6 = v30;
      }
      v24 = v6[2];
      v23 = v6[3];
      if (v24 >= v23 >> 1)
      {
        result = sub_1000E419C(v23 > 1, v24 + 1, 1);
        v6 = v30;
      }
      v6[2] = v24 + 1;
      v25 = &v6[2 * v24];
      v25[4] = v11;
      v25[5] = v10;
      v2 = v28;
      if (v4 == v28)
        return (uint64_t)v6;
    }
    v19 = ~v13;
    while (1)
    {
      v14 = (v14 + 1) & v19;
      if (((*(_QWORD *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        break;
      v20 = (_QWORD *)(v15 + 16 * v14);
      v21 = v20[1];
      v22 = *v20 == v11 && v21 == v10;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v11, v10, 0) & 1) != 0)
        goto LABEL_24;
    }
LABEL_7:
    result = swift_bridgeObjectRelease(v10);
    v2 = v28;
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10006A320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[209] = a6;
  v6[208] = a5;
  v6[207] = a4;
  v6[206] = a3;
  v6[205] = a2;
  v6[204] = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[210] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[211] = v8;
  v6[212] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006A394, 0, 0);
}

uint64_t sub_10006A394()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_10062F4C0 != -1)
    swift_once(&qword_10062F4C0, sub_1002354CC);
  v1 = (_QWORD *)swift_task_alloc(dword_10063997C);
  *(_QWORD *)(v0 + 1704) = v1;
  *v1 = v0;
  v1[1] = sub_10006A424;
  return sub_100233BB8(v0 + 880, 0, 0, *(_QWORD *)(v0 + 1664), 1);
}

uint64_t sub_10006A424()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1704));
  return swift_task_switch(sub_10006A478, 0, 0);
}

uint64_t sub_10006A478()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;

  sub_1000A1F54(v0 + 880, v0 + 448, &qword_100632330);
  if (sub_100035A5C(v0 + 448) == 1)
  {
    v1 = *(_QWORD *)(v0 + 1696);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1688) + 104))(v1, enum case for DIPError.Code.unexpectedDaemonState(_:), *(_QWORD *)(v0 + 1680));
    v2 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v3 = type metadata accessor for DIPError(0);
    v4 = sub_100093620((unint64_t *)&qword_10062F6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v3, v4, 0, 0);
    v5 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x8000000100542F40, 0, v1, 0, v2, 0xD000000000000051, 0x8000000100542B50, 0xD00000000000001FLL, 0x8000000100542F80, 1482);
    swift_willThrow(v5);
    swift_task_dealloc(*(_QWORD *)(v0 + 1696));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v7 = v0 + 16;
  isUniquelyReferenced_nonNull_native = v0 + 1624;
  memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
  *(_QWORD *)(v0 + 1624) = 0;
  if (qword_10062F560 != -1)
    goto LABEL_24;
LABEL_4:
  v9 = *(_QWORD *)(v0 + 1632);
  v10 = (id)qword_1006707A8;
  sub_10041F7F8(0, (uint64_t)v10, (uint64_t *)isUniquelyReferenced_nonNull_native);

  v11 = (_QWORD *)sub_10011DE90((uint64_t)_swiftEmptyArrayStorage);
  v12 = *(_QWORD *)(v9 + 16);
  v75 = isUniquelyReferenced_nonNull_native;
  if (v12)
  {
    v74 = v7;
    v76 = v0 + 1312;
    v13 = v0 + 1464;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1632));
    v15 = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v0 + 1464) = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v0 + 1480) = v15;
    v16 = *(_OWORD *)(v14 + 64);
    v17 = *(_OWORD *)(v14 + 80);
    v18 = *(_OWORD *)(v14 + 112);
    *(_OWORD *)(v0 + 1528) = *(_OWORD *)(v14 + 96);
    *(_OWORD *)(v0 + 1544) = v18;
    *(_OWORD *)(v0 + 1496) = v16;
    *(_OWORD *)(v0 + 1512) = v17;
    v19 = *(_OWORD *)(v14 + 128);
    v20 = *(_OWORD *)(v14 + 144);
    v21 = *(_OWORD *)(v14 + 160);
    *(_QWORD *)(v0 + 1608) = *(_QWORD *)(v14 + 176);
    *(_OWORD *)(v0 + 1576) = v20;
    *(_OWORD *)(v0 + 1592) = v21;
    *(_OWORD *)(v0 + 1560) = v19;
    v22 = v14 + 184;
    v77 = v0;
    for (i = v12 - 1; ; --i)
    {
      v7 = *(_QWORD *)(v0 + 1472);
      v23 = *(_QWORD *)(v0 + 1464);
      sub_100099520((_QWORD *)v13);
      swift_bridgeObjectRetain(v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      v25 = sub_1004A8604(v23, v7);
      v26 = v11[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        swift_once(&qword_10062F560, sub_10041FF94);
        goto LABEL_4;
      }
      v29 = v24;
      if (v11[3] >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v24 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          sub_10012A248();
          if ((v29 & 1) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        sub_100124EA4(v28, isUniquelyReferenced_nonNull_native);
        v30 = sub_1004A8604(v23, v7);
        if ((v29 & 1) != (v31 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v25 = v30;
        if ((v29 & 1) != 0)
        {
LABEL_13:
          v32 = v11[7] + 152 * v25;
          v33 = *(_OWORD *)(v32 + 16);
          *(_OWORD *)v76 = *(_OWORD *)v32;
          *(_OWORD *)(v76 + 16) = v33;
          v34 = *(_OWORD *)(v32 + 80);
          v36 = *(_OWORD *)(v32 + 32);
          v35 = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v76 + 64) = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v76 + 80) = v34;
          *(_OWORD *)(v76 + 32) = v36;
          *(_OWORD *)(v76 + 48) = v35;
          v38 = *(_OWORD *)(v32 + 112);
          v37 = *(_OWORD *)(v32 + 128);
          v39 = *(_OWORD *)(v32 + 96);
          *(_QWORD *)(v76 + 144) = *(_QWORD *)(v32 + 144);
          *(_OWORD *)(v76 + 112) = v38;
          *(_OWORD *)(v76 + 128) = v37;
          *(_OWORD *)(v76 + 96) = v39;
          sub_1000995C4((_QWORD *)v76);
          v40 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)v32 = *(_OWORD *)v13;
          *(_OWORD *)(v32 + 16) = v40;
          v41 = *(_OWORD *)(v13 + 80);
          v43 = *(_OWORD *)(v13 + 32);
          v42 = *(_OWORD *)(v13 + 48);
          *(_OWORD *)(v32 + 64) = *(_OWORD *)(v13 + 64);
          *(_OWORD *)(v32 + 80) = v41;
          *(_OWORD *)(v32 + 32) = v43;
          *(_OWORD *)(v32 + 48) = v42;
          v45 = *(_OWORD *)(v13 + 112);
          v44 = *(_OWORD *)(v13 + 128);
          v46 = *(_OWORD *)(v13 + 96);
          *(_QWORD *)(v32 + 144) = *(_QWORD *)(v13 + 144);
          *(_OWORD *)(v32 + 112) = v45;
          *(_OWORD *)(v32 + 128) = v44;
          *(_OWORD *)(v32 + 96) = v46;
          goto LABEL_17;
        }
      }
      v11[(v25 >> 6) + 8] |= 1 << v25;
      v47 = (uint64_t *)(v11[6] + 16 * v25);
      *v47 = v23;
      v47[1] = v7;
      v48 = v11[7] + 152 * v25;
      v49 = *(_QWORD *)(v13 + 144);
      v51 = *(_OWORD *)(v13 + 112);
      v50 = *(_OWORD *)(v13 + 128);
      *(_OWORD *)(v48 + 96) = *(_OWORD *)(v13 + 96);
      *(_OWORD *)(v48 + 112) = v51;
      *(_OWORD *)(v48 + 128) = v50;
      *(_QWORD *)(v48 + 144) = v49;
      v53 = *(_OWORD *)(v13 + 64);
      v52 = *(_OWORD *)(v13 + 80);
      v54 = *(_OWORD *)(v13 + 48);
      *(_OWORD *)(v48 + 32) = *(_OWORD *)(v13 + 32);
      *(_OWORD *)(v48 + 48) = v54;
      *(_OWORD *)(v48 + 64) = v53;
      *(_OWORD *)(v48 + 80) = v52;
      v55 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v48 = *(_OWORD *)v13;
      *(_OWORD *)(v48 + 16) = v55;
      v56 = v11[2];
      v57 = __OFADD__(v56, 1);
      v58 = v56 + 1;
      if (v57)
        goto LABEL_23;
      v11[2] = v58;
      swift_bridgeObjectRetain(v7);
LABEL_17:
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v7);
      v0 = v77;
      if (!i)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v77 + 1632));
        v7 = v74;
        break;
      }
      v59 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v22;
      *(_OWORD *)(v13 + 16) = v59;
      v60 = *(_OWORD *)(v22 + 32);
      v61 = *(_OWORD *)(v22 + 48);
      v62 = *(_OWORD *)(v22 + 80);
      *(_OWORD *)(v13 + 64) = *(_OWORD *)(v22 + 64);
      *(_OWORD *)(v13 + 80) = v62;
      *(_OWORD *)(v13 + 32) = v60;
      *(_OWORD *)(v13 + 48) = v61;
      v63 = *(_OWORD *)(v22 + 96);
      v64 = *(_OWORD *)(v22 + 112);
      v65 = *(_OWORD *)(v22 + 128);
      *(_QWORD *)(v13 + 144) = *(_QWORD *)(v22 + 144);
      *(_OWORD *)(v13 + 112) = v64;
      *(_OWORD *)(v13 + 128) = v65;
      *(_OWORD *)(v13 + 96) = v63;
      v22 += 152;
    }
  }
  *(_QWORD *)(v0 + 1712) = v11;
  v66 = *(_QWORD *)(v0 + 1672);
  v67 = *(_QWORD *)(v0 + 1648);
  *(_QWORD *)(v0 + 1616) = *(_QWORD *)(v0 + 1640);
  v68 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 1720) = v68;
  v69 = *(_OWORD *)(v0 + 1656);
  *(_QWORD *)(v68 + 16) = v11;
  *(_QWORD *)(v68 + 24) = v67;
  *(_OWORD *)(v68 + 32) = v69;
  *(_QWORD *)(v68 + 48) = v66;
  *(_QWORD *)(v68 + 56) = v7;
  *(_QWORD *)(v68 + 64) = v75;
  v70 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 1728) = v70;
  v71 = sub_100004828(&qword_1006323F0);
  v72 = sub_10001CFF8(0, &qword_100632590, DIPage_ptr);
  v73 = sub_100099FFC(&qword_100632598, &qword_1006323F0, (uint64_t)&protocol conformance descriptor for [A]);
  *v70 = v0;
  v70[1] = sub_10006A9E0;
  return Sequence.asyncMap<A>(_:)(&unk_100632588, v68, v71, v72, v73);
}

uint64_t sub_10006A9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1728);
  *(_QWORD *)(*(_QWORD *)v2 + 1736) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10006AAB8;
  }
  else
  {
    v7 = v4[215];
    swift_bridgeObjectRelease(v4[214]);
    v4[218] = a1;
    sub_100035B1C((uint64_t)(v4 + 110));
    swift_task_dealloc(v7);
    v6 = sub_10006AA74;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006AA74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1696);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1624));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1744));
}

uint64_t sub_10006AAB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1720);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1712));
  sub_100035B1C(v0 + 880);
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1624));
  swift_task_dealloc(*(_QWORD *)(v0 + 1696));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006AB14(uint64_t a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *);
  _QWORD *v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39[4];
  uint64_t v40[2];
  _OWORD v41[5];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E6972616873, 0xE700000000000000, 0x676E69666F6F7270, 0xE800000000000000, 0);
    swift_bridgeObjectRelease(0xE700000000000000);
    if ((v4 & 1) == 0)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
      v5 = type metadata accessor for LegacySPWorkflow(0);
      v6 = swift_dynamicCastClass(a1, v5);
      if (v6)
      {
        v7 = &OBJC_IVAR____TtC8coreidvd16LegacySPWorkflow_recipientCertificates;
LABEL_8:
        v9 = *(_QWORD *)(v6 + *v7);
        swift_bridgeObjectRetain(v9);
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease(0xE800000000000000);
  }
  v8 = type metadata accessor for LegacyINOWorkflow(0);
  v6 = swift_dynamicCastClass(a1, v8);
  if (v6)
  {
    v7 = &OBJC_IVAR____TtC8coreidvd17LegacyINOWorkflow_recipientCertificates;
    goto LABEL_8;
  }
LABEL_9:
  v9 = 0;
LABEL_10:
  v47 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate + 8);
  if (v47)
  {
    if (v9)
    {
      v38 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_defaultEncryptionCertificate);
      sub_1000505AC(v9, a2);
      result = swift_bridgeObjectRelease(v9);
      v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
      v12 = *(_QWORD *)(v11 + 16);
      if (!v12)
        return result;
      swift_bridgeObjectRetain(v11);
      v13 = v12 - 1;
      for (i = 32; ; i += 152)
      {
        v15 = *(_OWORD *)(v11 + i + 16);
        v41[0] = *(_OWORD *)(v11 + i);
        v41[1] = v15;
        v16 = *(_OWORD *)(v11 + i + 32);
        v17 = *(_OWORD *)(v11 + i + 48);
        v18 = *(_OWORD *)(v11 + i + 80);
        v41[4] = *(_OWORD *)(v11 + i + 64);
        v42 = v18;
        v41[2] = v16;
        v41[3] = v17;
        v19 = *(_OWORD *)(v11 + i + 96);
        v20 = *(_OWORD *)(v11 + i + 112);
        v21 = *(_OWORD *)(v11 + i + 128);
        v46 = *(_QWORD *)(v11 + i + 144);
        v44 = v20;
        v45 = v21;
        v43 = v19;
        v22 = v41[0];
        v23 = *((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
          break;
        v23 = *((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
        {
          v24 = v42;
          goto LABEL_18;
        }
        sub_100099520(v41);
        v23 = v47;
        swift_bridgeObjectRetain(v47);
        v25 = v38;
LABEL_19:
        v26 = sub_100054340(v39, v25, v23);
        if (*v27)
        {
          swift_bridgeObjectRetain(*((_QWORD *)&v22 + 1));
          sub_1004E5D2C(v40, v22, *((uint64_t *)&v22 + 1));
          ((void (*)(uint64_t *, _QWORD))v26)(v39, 0);
          swift_bridgeObjectRelease(v23);
          v28 = v40[1];
        }
        else
        {
          ((void (*)(uint64_t *, _QWORD))v26)(v39, 0);
          v28 = v23;
        }
        swift_bridgeObjectRelease(v28);
        sub_1000995C4(v41);
        if (!v13)
          return swift_bridgeObjectRelease(v11);
        --v13;
      }
      v24 = v43;
LABEL_18:
      sub_100099520(v41);
      swift_bridgeObjectRetain(v23);
      v25 = v24;
      goto LABEL_19;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v9);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  *(_QWORD *)&v41[0] = *a2;
  *a2 = 0x8000000000000000;
  sub_1004816E4((uint64_t)&_swiftEmptySetSingleton, 0x746C7561666564, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  v30 = *a2;
  *a2 = *(_QWORD *)&v41[0];
  result = swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields);
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8coreidvd14LegacyWorkflow_userInputFields));
    v33 = (uint64_t *)(v31 + 40);
    do
    {
      v34 = *(v33 - 1);
      v35 = *v33;
      v36 = sub_100054340(v41, 0x746C7561666564, 0xE700000000000000);
      if (*v37)
      {
        swift_bridgeObjectRetain(v35);
        sub_1004E5D2C(v39, v34, v35);
        ((void (*)(_OWORD *, _QWORD))v36)(v41, 0);
        swift_bridgeObjectRelease(v39[1]);
      }
      else
      {
        ((void (*)(_OWORD *, _QWORD))v36)(v41, 0);
      }
      v33 += 19;
      --v32;
    }
    while (v32);
    return swift_bridgeObjectRelease(v31);
  }
  return result;
}

uint64_t sub_10006AE98(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x7265566C65646F6DLL && a2 == 0xEC0000006E6F6973)
  {
    v5 = 0xEC0000006E6F6973;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265566C65646F6DLL, 0xEC0000006E6F6973, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x616353746E6F7266 && a2 == 0xE90000000000006ELL)
  {
    v7 = 0xE90000000000006ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616353746E6F7266, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6163536B636162 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6163536B636162, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xED0000746E6F7246)
  {
    v9 = 0xED0000746E6F7246;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D75636F64, 0xED0000746E6F7246, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xEC0000006B636142)
  {
    v10 = 0xEC0000006B636142;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D75636F64, 0xEC0000006B636142, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6569666C6573 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6569666C6573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x7373656E6576696CLL && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7373656E6576696CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x65766973736170 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766973736170, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000015)
  {
    v14 = 0x8000000100542A50;
    if (a2 == 0x8000000100542A50)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100542A50, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x7461726F6C707865 && a2 == 0xEB000000006E6F69)
  {
    v15 = 0xEB000000006E6F69;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461726F6C707865, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x6953726566667562 && a2 == 0xEA0000000000657ALL)
  {
    v16 = 0xEA0000000000657ALL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6953726566667562, 0xEA0000000000657ALL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x646E695772756C62 && a2 == 0xEA0000000000776FLL)
  {
    v17 = 0xEA0000000000776FLL;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E695772756C62, 0xEA0000000000776FLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x72466E6163536469 && a2 == 0xEF65746152656D61)
  {
    v18 = 0xEF65746152656D61;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72466E6163536469, 0xEF65746152656D61, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x6172466F65646976 && a2 == 0xEE0065746152656DLL)
  {
    swift_bridgeObjectRelease(0xEE0065746152656DLL);
    return 13;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6172466F65646976, 0xEE0065746152656DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

void *sub_10006B4F8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  void *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  _QWORD v56[740];
  _BYTE v57[5913];
  char v58;
  _BYTE v59[839];
  char v60;
  _QWORD v61[104];
  _BYTE v62[839];
  char v63;
  _QWORD v64[104];
  _BYTE v65[839];
  char v66;
  _QWORD v67[104];
  _BYTE v68[839];
  char v69;
  _QWORD v70[104];
  _BYTE v71[839];
  char v72;
  _QWORD v73[104];
  _BYTE v74[839];
  char v75;
  _QWORD v76[104];
  _BYTE v77[839];
  char v78;
  _QWORD v79[104];
  _QWORD v80[741];
  uint64_t v81;

  v5 = sub_100004828(&qword_100632678);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v55 = a1;
  sub_10000806C(a1, v9);
  v11 = sub_1000569AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQModel.CodingKeys, &type metadata for IQModel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v81 = v2;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v54 = a2;
    v57[0] = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57, v5);
    v17 = v16;
    v80[0] = v12;
    v80[1] = v16;
    v78 = 1;
    v18 = v12;
    v19 = sub_10009A190();
    v20 = swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v79, &type metadata for IQCriteria, &v78, v5, &type metadata for IQCriteria, v19, v20);
    v52 = v18;
    v53 = v17;
    sub_1000A1F54((uint64_t)v79, (uint64_t)v77, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v77, (uint64_t)&v80[2], &qword_1006312F0);
    v75 = 2;
    sub_10009A1D4(v77, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v76, &type metadata for IQCriteria, &v75, v5, &type metadata for IQCriteria, v19, v21);
    sub_1000A1F54((uint64_t)v76, (uint64_t)v74, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v74, (uint64_t)&v80[106], &qword_1006312F0);
    v72 = 3;
    sub_10009A1D4(v74, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v73, &type metadata for IQCriteria, &v72, v5, &type metadata for IQCriteria, v19, v22);
    sub_1000A1F54((uint64_t)v73, (uint64_t)v71, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v71, (uint64_t)&v80[210], &qword_1006312F0);
    v69 = 4;
    sub_10009A1D4(v71, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v70, &type metadata for IQCriteria, &v69, v5, &type metadata for IQCriteria, v19, v23);
    sub_1000A1F54((uint64_t)v70, (uint64_t)v68, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v68, (uint64_t)&v80[314], &qword_1006312F0);
    v66 = 5;
    sub_10009A1D4(v68, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v67, &type metadata for IQCriteria, &v66, v5, &type metadata for IQCriteria, v19, v24);
    sub_1000A1F54((uint64_t)v67, (uint64_t)v65, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v65, (uint64_t)&v80[418], &qword_1006312F0);
    v63 = 6;
    sub_10009A1D4(v65, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v64, &type metadata for IQCriteria, &v63, v5, &type metadata for IQCriteria, v19, v25);
    sub_1000A1F54((uint64_t)v64, (uint64_t)v62, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v62, (uint64_t)&v80[522], &qword_1006312F0);
    v60 = 7;
    sub_10009A1D4(v62, sub_100099054);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v61, &type metadata for IQCriteria, &v60, v5, &type metadata for IQCriteria, v19, v26);
    sub_1000A1F54((uint64_t)v61, (uint64_t)v59, &qword_1006312F0);
    sub_1000A1F54((uint64_t)v59, (uint64_t)&v80[626], &qword_1006312F0);
    v27 = sub_100004828(&qword_1006368D0);
    LOBYTE(v56[0]) = 8;
    sub_10009A1D4(v59, sub_100099054);
    v28 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v57, v27, v56, v5, v27, v28, v29);
    v81 = 0;
    v30 = *(_QWORD *)v57;
    v80[730] = *(_QWORD *)v57;
    v57[0] = 9;
    v31 = swift_bridgeObjectRetain(v80[730]);
    v32 = v81;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57, v5, v31);
    v81 = v32;
    if (!v32)
    {
      v34 = v33;
      LODWORD(v80[731]) = v33;
      v49 = HIDWORD(v33) & 1;
      BYTE4(v80[731]) = BYTE4(v33) & 1;
      v57[0] = 10;
      v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57, v5);
      v50 = v35;
      v81 = 0;
      v80[732] = v51;
      LOBYTE(v80[733]) = v35 & 1;
      v57[0] = 11;
      v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57, v5);
      v47 = v36;
      v81 = 0;
      v80[734] = v48;
      LOBYTE(v80[735]) = v36 & 1;
      v57[0] = 12;
      v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v57, v5);
      v81 = 0;
      v80[736] = v46;
      v45 = v37 & 1;
      LOBYTE(v80[737]) = v37 & 1;
      v58 = 13;
      v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v58, v5);
      v81 = 0;
      v39 = v38;
      v41 = v40;
      v44 = (char *)&v56[731] + 4;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v80[738] = v39;
      LOBYTE(v80[739]) = v41 & 1;
      v42 = v53;
      v56[0] = v52;
      v56[1] = v53;
      sub_1000A1F54((uint64_t)v77, (uint64_t)&v56[2], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v74, (uint64_t)&v56[106], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v71, (uint64_t)&v56[210], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v68, (uint64_t)&v56[314], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v65, (uint64_t)&v56[418], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v62, (uint64_t)&v56[522], &qword_1006312F0);
      sub_1000A1F54((uint64_t)v59, (uint64_t)&v56[626], &qword_1006312F0);
      v56[730] = v30;
      LODWORD(v56[731]) = v34;
      v43 = v44;
      *v44 = v49;
      v56[732] = v51;
      v43[12] = v50 & 1;
      v56[734] = v48;
      v43[28] = v47 & 1;
      v56[736] = v46;
      v43[44] = v45;
      v56[738] = v39;
      v43[60] = v41 & 1;
      sub_10009A39C(v56);
      swift_bridgeObjectRelease(v30);
      sub_10009A1D4(v59, sub_100092AB4);
      sub_10009A1D4(v62, sub_100092AB4);
      sub_10009A1D4(v65, sub_100092AB4);
      sub_10009A1D4(v68, sub_100092AB4);
      sub_10009A1D4(v71, sub_100092AB4);
      sub_10009A1D4(v74, sub_100092AB4);
      sub_10009A1D4(v77, sub_100092AB4);
      swift_bridgeObjectRelease(v42);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
      memcpy(v57, v80, sizeof(v57));
      sub_10009CCB8(v57);
      return memcpy(v54, v56, 0x1719uLL);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v30);
    sub_10009A1D4(v59, sub_100092AB4);
    sub_10009A1D4(v62, sub_100092AB4);
    sub_10009A1D4(v65, sub_100092AB4);
    sub_10009A1D4(v68, sub_100092AB4);
    sub_10009A1D4(v71, sub_100092AB4);
    sub_10009A1D4(v74, sub_100092AB4);
    sub_10009A1D4(v77, sub_100092AB4);
    swift_bridgeObjectRelease(v53);
    v14 = 511;
    v13 = 1;
  }
  result = (void *)_s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
  if ((v14 & 1) != 0)
  {
    result = (void *)swift_bridgeObjectRelease(v80[1]);
    if ((v14 & 2) != 0)
      goto LABEL_19;
LABEL_8:
    if ((v14 & 4) != 0)
      goto LABEL_20;
LABEL_9:
    if (((v14 >> 3) & 1) == 0)
      goto LABEL_21;
LABEL_10:
    sub_1000A1F54((uint64_t)&v80[210], (uint64_t)v57, &qword_1006312F0);
    result = (void *)sub_10009A1D4(v57, sub_100092AB4);
    if (((v14 >> 4) & 1) != 0)
      goto LABEL_22;
LABEL_11:
    if (((v14 >> 5) & 1) == 0)
      goto LABEL_23;
LABEL_12:
    sub_1000A1F54((uint64_t)&v80[418], (uint64_t)v57, &qword_1006312F0);
    result = (void *)sub_10009A1D4(v57, sub_100092AB4);
    if (((v14 >> 6) & 1) != 0)
      goto LABEL_24;
LABEL_13:
    if (((v14 >> 7) & 1) == 0)
      goto LABEL_25;
    goto LABEL_14;
  }
  if ((v14 & 2) == 0)
    goto LABEL_8;
LABEL_19:
  sub_1000A1F54((uint64_t)&v80[2], (uint64_t)v57, &qword_1006312F0);
  result = (void *)sub_10009A1D4(v57, sub_100092AB4);
  if (((v14 >> 2) & 1) == 0)
    goto LABEL_9;
LABEL_20:
  sub_1000A1F54((uint64_t)&v80[106], (uint64_t)v57, &qword_1006312F0);
  result = (void *)sub_10009A1D4(v57, sub_100092AB4);
  if (((v14 >> 3) & 1) != 0)
    goto LABEL_10;
LABEL_21:
  if (((v14 >> 4) & 1) == 0)
    goto LABEL_11;
LABEL_22:
  sub_1000A1F54((uint64_t)&v80[314], (uint64_t)v57, &qword_1006312F0);
  result = (void *)sub_10009A1D4(v57, sub_100092AB4);
  if (((v14 >> 5) & 1) != 0)
    goto LABEL_12;
LABEL_23:
  if (((v14 >> 6) & 1) == 0)
    goto LABEL_13;
LABEL_24:
  sub_1000A1F54((uint64_t)&v80[522], (uint64_t)v57, &qword_1006312F0);
  result = (void *)sub_10009A1D4(v57, sub_100092AB4);
  if (((v14 >> 7) & 1) == 0)
  {
LABEL_25:
    if (!v13)
      return result;
    return (void *)swift_bridgeObjectRelease(v80[730]);
  }
LABEL_14:
  sub_1000A1F54((uint64_t)&v80[626], (uint64_t)v57, &qword_1006312F0);
  result = (void *)sub_10009A1D4(v57, sub_100092AB4);
  if ((v13 & 1) != 0)
    return (void *)swift_bridgeObjectRelease(v80[730]);
  return result;
}

unint64_t sub_10006C4E0()
{
  unint64_t result;

  result = qword_100631320;
  if (!qword_100631320)
  {
    result = swift_getWitnessTable(&unk_100521910, &type metadata for UserInputField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100631320);
  }
  return result;
}

unint64_t sub_10006C524()
{
  unint64_t result;

  result = qword_100631340;
  if (!qword_100631340)
  {
    result = swift_getWitnessTable(&unk_1005218E8, &type metadata for DocumentConfig);
    atomic_store(result, (unint64_t *)&qword_100631340);
  }
  return result;
}

unint64_t sub_10006C568()
{
  unint64_t result;

  result = qword_100631360;
  if (!qword_100631360)
  {
    result = swift_getWitnessTable(&unk_1005218C0, &type metadata for CameraImage);
    atomic_store(result, (unint64_t *)&qword_100631360);
  }
  return result;
}

unint64_t sub_10006C5AC()
{
  unint64_t result;

  result = qword_100631370;
  if (!qword_100631370)
  {
    result = swift_getWitnessTable(&unk_100521898, &type metadata for DataNodeProofInfo);
    atomic_store(result, (unint64_t *)&qword_100631370);
  }
  return result;
}

uint64_t sub_10006C5F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;

  if (a1 == 0x656E697272756C62 && a2 == 0xEA00000000007373)
  {
    v5 = 0xEA00000000007373;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E697272756C62, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657275736F707865 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657275736F707865, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7473694464726163 && a2 == 0xEE006E6F6974726FLL)
  {
    v8 = 0xEE006E6F6974726FLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7473694464726163, 0xEE006E6F6974726FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100543100;
    if (a2 == 0x8000000100543100)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100543100, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100543120)
  {
    v10 = 0x8000000100543120;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100543120, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6374695064616568 && a2 == 0xE900000000000068)
  {
    v11 = 0xE900000000000068;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6374695064616568, 0xE900000000000068, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6C6C6F5264616568 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C6F5264616568, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x77615964616568 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x77615964616568, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x73656361466D756ELL && a2 == 0xE800000000000000)
  {
    v14 = 0xE800000000000000;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656361466D756ELL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x65676E615278756CLL && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E615278756CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000012)
  {
    v16 = 0x8000000100543140;
    if (a2 == 0x8000000100543140)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100543140, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100543160)
  {
    v17 = 0x8000000100543160;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100543160, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100543180)
  {
    v18 = 0x8000000100543180;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100543180, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0xD000000000000012)
  {
    v19 = 0x80000001005431A0;
    if (a2 == 0x80000001005431A0)
      goto LABEL_83;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001005431A0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if (a1 == 0xD000000000000012)
  {
    v20 = 0x80000001005431C0;
    if (a2 == 0x80000001005431C0)
      goto LABEL_88;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001005431C0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_88:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0x666E6F4365636166 && a2 == 0xEE0065636E656469)
  {
    v21 = 0xEE0065636E656469;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E6F4365636166, 0xEE0065636E656469, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_94;
  }
  if (a1 == 0x75516569666C6573 && a2 == 0xED00007974696C61)
  {
    v22 = 0xED00007974696C61;
LABEL_100:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x75516569666C6573, 0xED00007974696C61, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_100;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xEC000000657A6953)
  {
    v23 = 0xEC000000657A6953;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D75636F64, 0xEC000000657A6953, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_106;
  }
  if (a1 == 0xD000000000000010)
  {
    v24 = 0x80000001005431E0;
    if (a2 == 0x80000001005431E0)
      goto LABEL_111;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001005431E0, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if (a1 == 0x746E656D75636F64 && a2 == 0xEC00000077656B53)
  {
    v25 = 0xEC00000077656B53;
LABEL_117:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D75636F64, 0xEC00000077656B53, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_117;
  }
  if (a1 == 0x666972447466656CLL && a2 == 0xE900000000000074)
  {
    v26 = 0xE900000000000074;
LABEL_123:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666972447466656CLL, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_123;
  }
  if (a1 == 0x6972447468676972 && a2 == 0xEA00000000007466)
  {
    v27 = 0xEA00000000007466;
LABEL_129:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6972447468676972, 0xEA00000000007466, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_129;
  }
  if (a1 == 0x74666972447075 && a2 == 0xE700000000000000)
  {
    v28 = 0xE700000000000000;
LABEL_135:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74666972447075, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_135;
  }
  if (a1 == 0x666972446E776F64 && a2 == 0xE900000000000074)
  {
    v29 = 0xE900000000000074;
LABEL_141:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666972446E776F64, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_141;
  }
  if (a1 == 0x6544373134666470 && a2 == 0xEE00646574636574)
  {
    v30 = 0xEE00646574636574;
LABEL_147:
    swift_bridgeObjectRelease(v30);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6544373134666470, 0xEE00646574636574, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_147;
  }
  if (a1 == 0xD000000000000010)
  {
    v31 = 0x8000000100543200;
    if (a2 == 0x8000000100543200)
      goto LABEL_152;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100543200, a1, a2, 0) & 1) != 0)
  {
    v31 = a2;
LABEL_152:
    swift_bridgeObjectRelease(v31);
    return 25;
  }
  if (a1 == 0x61436F7475417369 && a2 == 0xEE00646572757470)
  {
    v32 = 0xEE00646572757470;
LABEL_158:
    swift_bridgeObjectRelease(v32);
    return 26;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61436F7475417369, 0xEE00646572757470, a1, a2, 0) & 1) != 0)
  {
    v32 = a2;
    goto LABEL_158;
  }
  if (a1 == 0x5465727574706163 && a2 == 0xEB00000000656D69)
  {
    v33 = 0xEB00000000656D69;
LABEL_164:
    swift_bridgeObjectRelease(v33);
    return 27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5465727574706163, 0xEB00000000656D69, a1, a2, 0) & 1) != 0)
  {
    v33 = a2;
    goto LABEL_164;
  }
  if (a1 == 0xD000000000000010)
  {
    v34 = 0x8000000100543220;
    if (a2 == 0x8000000100543220)
      goto LABEL_169;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100543220, a1, a2, 0) & 1) != 0)
  {
    v34 = a2;
LABEL_169:
    swift_bridgeObjectRelease(v34);
    return 28;
  }
  if (a1 == 0x6556746567726174 && a2 == 0xEE00736563697472)
  {
    v35 = 0xEE00736563697472;
LABEL_175:
    swift_bridgeObjectRelease(v35);
    return 29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556746567726174, 0xEE00736563697472, a1, a2, 0) & 1) != 0)
  {
    v35 = a2;
    goto LABEL_175;
  }
  if (a1 == 0x74614D797A7A7566 && a2 == 0xED0000676E696863)
  {
    v36 = 0xED0000676E696863;
LABEL_181:
    swift_bridgeObjectRelease(v36);
    return 30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74614D797A7A7566, 0xED0000676E696863, a1, a2, 0) & 1) != 0)
  {
    v36 = a2;
    goto LABEL_181;
  }
  if (a1 == 0x7373656E6576696CLL && a2 == 0xED00006574756843)
  {
    v37 = 0xED00006574756843;
LABEL_187:
    swift_bridgeObjectRelease(v37);
    return 31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7373656E6576696CLL, 0xED00006574756843, a1, a2, 0) & 1) != 0)
  {
    v37 = a2;
    goto LABEL_187;
  }
  if (a1 == 0x456873616C467369 && a2 == 0xEE0064656C62616ELL)
  {
    v38 = 0xEE0064656C62616ELL;
LABEL_193:
    swift_bridgeObjectRelease(v38);
    return 32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x456873616C467369, 0xEE0064656C62616ELL, a1, a2, 0) & 1) != 0)
  {
    v38 = a2;
    goto LABEL_193;
  }
  if (a1 == 0x6F7779654B72636FLL && a2 == 0xEB00000000736472)
  {
    v39 = 0xEB00000000736472;
LABEL_199:
    swift_bridgeObjectRelease(v39);
    return 33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F7779654B72636FLL, 0xEB00000000736472, a1, a2, 0) & 1) != 0)
  {
    v39 = a2;
    goto LABEL_199;
  }
  if (a1 == 0x5378656C706D6F63 && a2 == 0xEE00736C616E6769)
  {
    swift_bridgeObjectRelease(0xEE00736C616E6769);
    return 34;
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5378656C706D6F63, 0xEE00736C616E6769, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v40 & 1) != 0)
      return 34;
    else
      return 35;
  }
}

void *sub_10006D51C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  __n128 v81;
  unint64_t v82;
  uint64_t v83;
  __n128 v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *result;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234[104];
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int8 v238;
  _BYTE v239[7];
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  _BYTE v244[7];
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  _BYTE v249[7];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  _BYTE v254[7];
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  _BYTE v259[7];
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  _BYTE v264[7];
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  _BYTE v269[7];
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  _BYTE v274[7];
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  _BYTE v279[7];
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  _BYTE v284[7];
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  _BYTE v289[7];
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  _BYTE v294[7];
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  _BYTE v299[7];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  _BYTE v304[7];
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  _BYTE v309[7];
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  _BYTE v314[7];
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  _BYTE v319[7];
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  _BYTE v324[7];
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  _BYTE v329[7];
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  _BYTE v334[7];
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  _BYTE v339[7];
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  _BYTE v344[7];
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  _BYTE v349[7];
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  _BYTE v354[7];
  uint64_t v355;
  uint64_t v356;
  char v357;
  _BYTE v358[7];
  uint64_t v359;
  uint64_t v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  _BYTE v373[7];
  _BYTE v374[7];
  _BYTE v375[7];
  _BYTE v376[7];
  _BYTE v377[7];
  _BYTE v378[7];
  _BYTE v379[7];
  _BYTE v380[7];
  _BYTE v381[7];
  _BYTE v382[7];
  _BYTE v383[7];
  _BYTE v384[7];
  _BYTE v385[7];
  _BYTE v386[7];
  _BYTE v387[7];
  _BYTE v388[7];
  _BYTE v389[7];
  _BYTE v390[7];
  _BYTE v391[7];
  _BYTE v392[7];
  _BYTE v393[7];
  _BYTE v394[7];
  _BYTE v395[7];
  _BYTE v396[7];
  _DWORD v397[3];
  uint64_t v398;

  v233 = sub_100004828(&qword_1006322B0);
  v5 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v7 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000806C(a1, v8);
  v10 = sub_10008D4AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQCriteria.CodingKeys, &type metadata for IQCriteria.CodingKeys, v10, v8, v9);
  if (v2)
  {
    v398 = v2;
    LODWORD(v233) = 0;
    v14 = 0;
  }
  else
  {
    v232 = v5;
    LOBYTE(v234[0]) = 0;
    v11 = sub_10008F46C();
    v12 = v233;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v11, v13);
    v229 = a2;
    v231 = (uint64_t)a1;
    v24 = v235;
    v25 = v236;
    v26 = v237;
    v27 = v11;
    LODWORD(v11) = v238;
    LOBYTE(v234[0]) = 1;
    sub_10008F4B0(v235);
    v230 = v27;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v27, v28);
    v145 = v11;
    v143 = v25;
    v144 = v26;
    v146 = v24;
    v29 = v235;
    v30 = v236;
    v31 = v237;
    LODWORD(v24) = v238;
    LOBYTE(v234[0]) = 2;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v32);
    v139 = v24;
    v140 = v31;
    v141 = v29;
    v142 = v30;
    v33 = v236;
    v34 = v237;
    LODWORD(v30) = v238;
    LOBYTE(v234[0]) = 3;
    v138 = v235;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v35);
    v137 = v30;
    v135 = v33;
    v136 = v34;
    v36 = v235;
    v37 = v236;
    v38 = v237;
    LODWORD(v33) = v238;
    LOBYTE(v234[0]) = 4;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v39);
    v217 = v33;
    v133 = v37;
    v134 = v38;
    v132 = v36;
    v40 = v235;
    v41 = v236;
    v42 = v237;
    LODWORD(v36) = v238;
    LOBYTE(v234[0]) = 5;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v43);
    v131 = v36;
    v129 = v41;
    v130 = v42;
    v128 = v40;
    v44 = v235;
    v45 = v236;
    v46 = v237;
    LODWORD(v41) = v238;
    LOBYTE(v234[0]) = 6;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v47);
    v216 = v41;
    v215 = v46;
    v214 = v45;
    v213 = v44;
    v48 = v235;
    v49 = v236;
    v50 = v237;
    LODWORD(v46) = v238;
    LOBYTE(v234[0]) = 7;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v51);
    v127 = v46;
    v125 = v49;
    v126 = v50;
    v124 = v48;
    LOBYTE(v234[0]) = 8;
    v209 = v235;
    v210 = v236;
    v211 = v237;
    v212 = v238;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v52);
    LOBYTE(v234[0]) = 9;
    v205 = v235;
    v206 = v236;
    v207 = v237;
    v208 = v238;
    sub_10008F4B0(v235);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v12, &type metadata for IQRangeProperties, v230, v53);
    v398 = 0;
    LOBYTE(v234[0]) = 10;
    v123 = v235;
    v202 = v236;
    v203 = v237;
    v204 = v238;
    sub_10008F4B0(v235);
    v54 = v398;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v55);
    v398 = v54;
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
      sub_10008F45C(v123);
      sub_10008F45C(v205);
      sub_10008F45C(v209);
      sub_10008F45C(v124);
      sub_10008F45C(v213);
      sub_10008F45C(v128);
      sub_10008F45C(v132);
      sub_10008F45C(v138);
      sub_10008F45C(v141);
      sub_10008F45C(v146);
      LODWORD(v233) = 0;
      v14 = 1023;
    }
    else
    {
      LOBYTE(v234[0]) = 11;
      v198 = v235;
      v199 = v236;
      v200 = v237;
      v201 = v238;
      sub_10008F4B0(v235);
      v56 = v398;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v57);
      v398 = v56;
      if (v56)
      {
        (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
        sub_10008F45C(v198);
        sub_10008F45C(v123);
        sub_10008F45C(v205);
        sub_10008F45C(v209);
        sub_10008F45C(v124);
        sub_10008F45C(v213);
        sub_10008F45C(v128);
        sub_10008F45C(v132);
        sub_10008F45C(v138);
        sub_10008F45C(v141);
        sub_10008F45C(v146);
        LODWORD(v233) = 0;
        v14 = 2047;
      }
      else
      {
        LOBYTE(v234[0]) = 12;
        v194 = v235;
        v195 = v236;
        v196 = v237;
        v197 = v238;
        sub_10008F4B0(v235);
        v58 = v398;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v59);
        v398 = v58;
        if (v58)
        {
          (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
          sub_10008F45C(v194);
          sub_10008F45C(v198);
          sub_10008F45C(v123);
          sub_10008F45C(v205);
          sub_10008F45C(v209);
          sub_10008F45C(v124);
          sub_10008F45C(v213);
          sub_10008F45C(v128);
          sub_10008F45C(v132);
          sub_10008F45C(v138);
          sub_10008F45C(v141);
          sub_10008F45C(v146);
          LODWORD(v233) = 0;
          v14 = 4095;
        }
        else
        {
          LOBYTE(v234[0]) = 13;
          v122 = v235;
          v191 = v236;
          v192 = v237;
          v193 = v238;
          sub_10008F4B0(v235);
          v60 = v398;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v61);
          v398 = v60;
          if (v60)
          {
            (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
            sub_10008F45C(v122);
            sub_10008F45C(v194);
            sub_10008F45C(v198);
            sub_10008F45C(v123);
            sub_10008F45C(v205);
            sub_10008F45C(v209);
            sub_10008F45C(v124);
            sub_10008F45C(v213);
            sub_10008F45C(v128);
            sub_10008F45C(v132);
            sub_10008F45C(v138);
            sub_10008F45C(v141);
            sub_10008F45C(v146);
            LODWORD(v233) = 0;
            v14 = 0x1FFFLL;
          }
          else
          {
            LOBYTE(v234[0]) = 14;
            v187 = v235;
            v188 = v236;
            v189 = v237;
            v190 = v238;
            sub_10008F4B0(v235);
            v62 = v398;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v63);
            v398 = v62;
            if (v62)
            {
              (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
              sub_10008F45C(v187);
              sub_10008F45C(v122);
              sub_10008F45C(v194);
              sub_10008F45C(v198);
              sub_10008F45C(v123);
              sub_10008F45C(v205);
              sub_10008F45C(v209);
              sub_10008F45C(v124);
              sub_10008F45C(v213);
              sub_10008F45C(v128);
              sub_10008F45C(v132);
              sub_10008F45C(v138);
              sub_10008F45C(v141);
              sub_10008F45C(v146);
              LODWORD(v233) = 0;
              v14 = 0x3FFFLL;
            }
            else
            {
              LOBYTE(v234[0]) = 15;
              v183 = v235;
              v184 = v236;
              v185 = v237;
              v186 = v238;
              sub_10008F4B0(v235);
              v64 = v398;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v65);
              v398 = v64;
              if (v64)
              {
                (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                sub_10008F45C(v183);
                sub_10008F45C(v187);
                sub_10008F45C(v122);
                sub_10008F45C(v194);
                sub_10008F45C(v198);
                sub_10008F45C(v123);
                sub_10008F45C(v205);
                sub_10008F45C(v209);
                sub_10008F45C(v124);
                sub_10008F45C(v213);
                sub_10008F45C(v128);
                sub_10008F45C(v132);
                sub_10008F45C(v138);
                sub_10008F45C(v141);
                sub_10008F45C(v146);
                LODWORD(v233) = 0;
                v14 = 0x7FFFLL;
              }
              else
              {
                LOBYTE(v234[0]) = 16;
                v179 = v235;
                v180 = v236;
                v181 = v237;
                v182 = v238;
                sub_10008F4B0(v235);
                v66 = v398;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v67);
                v398 = v66;
                if (v66)
                {
                  (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                  sub_10008F45C(v179);
                  sub_10008F45C(v183);
                  sub_10008F45C(v187);
                  sub_10008F45C(v122);
                  sub_10008F45C(v194);
                  sub_10008F45C(v198);
                  sub_10008F45C(v123);
                  sub_10008F45C(v205);
                  sub_10008F45C(v209);
                  sub_10008F45C(v124);
                  sub_10008F45C(v213);
                  sub_10008F45C(v128);
                  sub_10008F45C(v132);
                  sub_10008F45C(v138);
                  sub_10008F45C(v141);
                  sub_10008F45C(v146);
                  LODWORD(v233) = 0;
                  v14 = 0xFFFFLL;
                }
                else
                {
                  LOBYTE(v234[0]) = 17;
                  v175 = v235;
                  v176 = v236;
                  v177 = v237;
                  v178 = v238;
                  sub_10008F4B0(v235);
                  v68 = v398;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v69);
                  v398 = v68;
                  if (v68)
                  {
                    (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                    sub_10008F45C(v175);
                    sub_10008F45C(v179);
                    sub_10008F45C(v183);
                    sub_10008F45C(v187);
                    sub_10008F45C(v122);
                    sub_10008F45C(v194);
                    sub_10008F45C(v198);
                    sub_10008F45C(v123);
                    sub_10008F45C(v205);
                    sub_10008F45C(v209);
                    sub_10008F45C(v124);
                    sub_10008F45C(v213);
                    sub_10008F45C(v128);
                    sub_10008F45C(v132);
                    sub_10008F45C(v138);
                    sub_10008F45C(v141);
                    sub_10008F45C(v146);
                    LODWORD(v233) = 0;
                    v14 = 0x1FFFFLL;
                  }
                  else
                  {
                    LOBYTE(v234[0]) = 18;
                    v171 = v235;
                    v172 = v236;
                    v173 = v237;
                    v174 = v238;
                    sub_10008F4B0(v235);
                    v70 = v398;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v71);
                    v398 = v70;
                    if (v70)
                    {
                      (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                      sub_10008F45C(v171);
                      sub_10008F45C(v175);
                      sub_10008F45C(v179);
                      sub_10008F45C(v183);
                      sub_10008F45C(v187);
                      sub_10008F45C(v122);
                      sub_10008F45C(v194);
                      sub_10008F45C(v198);
                      sub_10008F45C(v123);
                      sub_10008F45C(v205);
                      sub_10008F45C(v209);
                      sub_10008F45C(v124);
                      sub_10008F45C(v213);
                      sub_10008F45C(v128);
                      sub_10008F45C(v132);
                      sub_10008F45C(v138);
                      sub_10008F45C(v141);
                      sub_10008F45C(v146);
                      LODWORD(v233) = 0;
                      v14 = 0x3FFFFLL;
                    }
                    else
                    {
                      LOBYTE(v234[0]) = 19;
                      v167 = v235;
                      v168 = v236;
                      v169 = v237;
                      v170 = v238;
                      sub_10008F4B0(v235);
                      v72 = v398;
                      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v73);
                      v398 = v72;
                      if (v72)
                      {
                        (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                        sub_10008F45C(v167);
                        sub_10008F45C(v171);
                        sub_10008F45C(v175);
                        sub_10008F45C(v179);
                        sub_10008F45C(v183);
                        sub_10008F45C(v187);
                        sub_10008F45C(v122);
                        sub_10008F45C(v194);
                        sub_10008F45C(v198);
                        sub_10008F45C(v123);
                        sub_10008F45C(v205);
                        sub_10008F45C(v209);
                        sub_10008F45C(v124);
                        sub_10008F45C(v213);
                        sub_10008F45C(v128);
                        sub_10008F45C(v132);
                        sub_10008F45C(v138);
                        sub_10008F45C(v141);
                        sub_10008F45C(v146);
                        LODWORD(v233) = 0;
                        v14 = 0x7FFFFLL;
                      }
                      else
                      {
                        LOBYTE(v234[0]) = 20;
                        v162 = v235;
                        v164 = v236;
                        v165 = v237;
                        v166 = v238;
                        sub_10008F4B0(v235);
                        v74 = v398;
                        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v75);
                        v398 = v74;
                        if (v74)
                        {
                          (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                          sub_10008F45C(v162);
                          sub_10008F45C(v167);
                          sub_10008F45C(v171);
                          sub_10008F45C(v175);
                          sub_10008F45C(v179);
                          sub_10008F45C(v183);
                          sub_10008F45C(v187);
                          sub_10008F45C(v122);
                          sub_10008F45C(v194);
                          sub_10008F45C(v198);
                          sub_10008F45C(v123);
                          sub_10008F45C(v205);
                          sub_10008F45C(v209);
                          sub_10008F45C(v124);
                          sub_10008F45C(v213);
                          sub_10008F45C(v128);
                          sub_10008F45C(v132);
                          sub_10008F45C(v138);
                          sub_10008F45C(v141);
                          sub_10008F45C(v146);
                          LODWORD(v233) = 0;
                          v14 = 0xFFFFFLL;
                        }
                        else
                        {
                          LOBYTE(v234[0]) = 21;
                          v153 = v235;
                          v155 = v236;
                          v157 = v237;
                          v159 = v238;
                          sub_10008F4B0(v235);
                          v76 = v398;
                          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v77);
                          v398 = v76;
                          if (v76)
                          {
                            (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                            sub_10008F45C(v153);
                            sub_10008F45C(v162);
                            sub_10008F45C(v167);
                            sub_10008F45C(v171);
                            sub_10008F45C(v175);
                            sub_10008F45C(v179);
                            sub_10008F45C(v183);
                            sub_10008F45C(v187);
                            sub_10008F45C(v122);
                            sub_10008F45C(v194);
                            sub_10008F45C(v198);
                            sub_10008F45C(v123);
                            sub_10008F45C(v205);
                            sub_10008F45C(v209);
                            sub_10008F45C(v124);
                            sub_10008F45C(v213);
                            sub_10008F45C(v128);
                            sub_10008F45C(v132);
                            sub_10008F45C(v138);
                            sub_10008F45C(v141);
                            sub_10008F45C(v146);
                            LODWORD(v233) = 0;
                            v14 = 0x1FFFFFLL;
                          }
                          else
                          {
                            LOBYTE(v234[0]) = 22;
                            v158 = v235;
                            v160 = v236;
                            v161 = v237;
                            v163 = v238;
                            sub_10008F4B0(v235);
                            v78 = v398;
                            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v79);
                            v398 = v78;
                            if (v78)
                            {
                              (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                              sub_10008F45C(v158);
                              sub_10008F45C(v153);
                              sub_10008F45C(v162);
                              sub_10008F45C(v167);
                              sub_10008F45C(v171);
                              sub_10008F45C(v175);
                              sub_10008F45C(v179);
                              sub_10008F45C(v183);
                              sub_10008F45C(v187);
                              sub_10008F45C(v122);
                              sub_10008F45C(v194);
                              sub_10008F45C(v198);
                              sub_10008F45C(v123);
                              sub_10008F45C(v205);
                              sub_10008F45C(v209);
                              sub_10008F45C(v124);
                              sub_10008F45C(v213);
                              sub_10008F45C(v128);
                              sub_10008F45C(v132);
                              sub_10008F45C(v138);
                              sub_10008F45C(v141);
                              sub_10008F45C(v146);
                              LODWORD(v233) = 0;
                              v14 = 0x3FFFFFLL;
                            }
                            else
                            {
                              LOBYTE(v234[0]) = 23;
                              v121 = v235;
                              v152 = v236;
                              v154 = v237;
                              v156 = v238;
                              sub_10008F4B0(v235);
                              v80 = v398;
                              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQRangeProperties, v234, v233, &type metadata for IQRangeProperties, v230, v81);
                              v398 = v80;
                              if (v80)
                              {
                                (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                                sub_10008F45C(v121);
                                sub_10008F45C(v158);
                                sub_10008F45C(v153);
                                sub_10008F45C(v162);
                                sub_10008F45C(v167);
                                sub_10008F45C(v171);
                                sub_10008F45C(v175);
                                sub_10008F45C(v179);
                                sub_10008F45C(v183);
                                sub_10008F45C(v187);
                                sub_10008F45C(v122);
                                sub_10008F45C(v194);
                                sub_10008F45C(v198);
                                sub_10008F45C(v123);
                                sub_10008F45C(v205);
                                sub_10008F45C(v209);
                                sub_10008F45C(v124);
                                sub_10008F45C(v213);
                                sub_10008F45C(v128);
                                sub_10008F45C(v132);
                                sub_10008F45C(v138);
                                sub_10008F45C(v141);
                                sub_10008F45C(v146);
                                LODWORD(v233) = 0;
                                v14 = 0x7FFFFFLL;
                              }
                              else
                              {
                                LOBYTE(v234[0]) = 24;
                                v148 = v235;
                                v149 = v236;
                                v150 = v237;
                                v151 = v238;
                                sub_10008F4B0(v235);
                                v82 = sub_10008F4C0();
                                v83 = v398;
                                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQBoolProperties, v234, v233, &type metadata for IQBoolProperties, v82, v84);
                                v398 = v83;
                                if (!v83)
                                {
                                  v86 = v235;
                                  v87 = v236;
                                  v88 = v237;
                                  LOBYTE(v234[0]) = 25;
                                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, &type metadata for IQBoolProperties, v234, v233, &type metadata for IQBoolProperties, v82, v85);
                                  v398 = 0;
                                  v230 = v235;
                                  v89 = v236;
                                  v90 = v237;
                                  LOBYTE(v235) = 26;
                                  v91 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  v92 = v91;
                                  LOBYTE(v235) = 27;
                                  LODWORD(v228) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  LOBYTE(v235) = 28;
                                  LODWORD(v227) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  LOBYTE(v235) = 29;
                                  LODWORD(v226) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  LOBYTE(v235) = 30;
                                  LODWORD(v225) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  LOBYTE(v235) = 31;
                                  LODWORD(v224) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  LOBYTE(v235) = 32;
                                  LODWORD(v223) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v235, v233);
                                  v398 = 0;
                                  v93 = sub_100004828(&qword_1006368D0);
                                  LOBYTE(v234[0]) = 33;
                                  v94 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
                                  v95 = v398;
                                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v235, v93, v234, v233, v93, v94, v96);
                                  v398 = v95;
                                  if (v95)
                                  {
                                    (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                                    sub_10008F45C(v148);
                                    sub_10008F45C(v121);
                                    sub_10008F45C(v158);
                                    sub_10008F45C(v153);
                                    sub_10008F45C(v162);
                                    sub_10008F45C(v167);
                                    sub_10008F45C(v171);
                                    sub_10008F45C(v175);
                                    sub_10008F45C(v179);
                                    sub_10008F45C(v183);
                                    sub_10008F45C(v187);
                                    sub_10008F45C(v122);
                                    sub_10008F45C(v194);
                                    sub_10008F45C(v198);
                                    sub_10008F45C(v123);
                                    sub_10008F45C(v205);
                                    sub_10008F45C(v209);
                                    sub_10008F45C(v124);
                                    sub_10008F45C(v213);
                                    sub_10008F45C(v128);
                                    sub_10008F45C(v132);
                                    sub_10008F45C(v138);
                                    sub_10008F45C(v141);
                                    sub_10008F45C(v146);
                                    v97 = 0;
                                  }
                                  else
                                  {
                                    v107 = v235;
                                    v222 = sub_100004828(&qword_100632090);
                                    v371 = 34;
                                    v108 = sub_1000A1F98(&qword_1006322C8, &qword_100632090, (void (*)(void))sub_10008F504, (uint64_t)&protocol conformance descriptor for <A> [A]);
                                    v147 = v107;
                                    v109 = swift_bridgeObjectRetain(v107);
                                    v110 = v108;
                                    v111 = v398;
                                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v372, v222, &v371, v233, v222, v110, v109);
                                    v398 = v111;
                                    if (!v111)
                                    {
                                      (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                                      v233 = v372;
                                      v234[0] = v146;
                                      v234[1] = v143;
                                      v234[2] = v144;
                                      LOBYTE(v234[3]) = v145;
                                      v234[4] = v141;
                                      v234[5] = v142;
                                      v234[6] = v140;
                                      LOBYTE(v234[7]) = v139;
                                      v234[8] = v138;
                                      v234[9] = v135;
                                      v234[10] = v136;
                                      LOBYTE(v234[11]) = v137;
                                      v234[12] = v132;
                                      v234[13] = v133;
                                      v234[14] = v134;
                                      LOBYTE(v234[15]) = v217;
                                      v234[16] = v128;
                                      v234[17] = v129;
                                      v234[18] = v130;
                                      LOBYTE(v234[19]) = v131;
                                      v234[20] = v213;
                                      v234[21] = v214;
                                      v234[22] = v215;
                                      LOBYTE(v234[23]) = v216;
                                      v234[24] = v124;
                                      v234[25] = v125;
                                      v234[26] = v126;
                                      LOBYTE(v234[27]) = v127;
                                      v234[28] = v209;
                                      v234[29] = v210;
                                      v234[30] = v211;
                                      LOBYTE(v234[31]) = v212;
                                      v234[32] = v205;
                                      v234[33] = v206;
                                      v234[34] = v207;
                                      LOBYTE(v234[35]) = v208;
                                      v234[36] = v123;
                                      v234[37] = v202;
                                      v234[38] = v203;
                                      LOBYTE(v234[39]) = v204;
                                      v234[40] = v198;
                                      v234[41] = v199;
                                      v234[42] = v200;
                                      LOBYTE(v234[43]) = v201;
                                      v234[44] = v194;
                                      v234[45] = v195;
                                      v234[46] = v196;
                                      LOBYTE(v234[47]) = v197;
                                      v234[48] = v122;
                                      v234[49] = v191;
                                      v234[50] = v192;
                                      LOBYTE(v234[51]) = v193;
                                      v234[52] = v187;
                                      v234[53] = v188;
                                      v234[54] = v189;
                                      LOBYTE(v234[55]) = v190;
                                      v234[56] = v183;
                                      v234[57] = v184;
                                      v234[58] = v185;
                                      LOBYTE(v234[59]) = v186;
                                      v234[60] = v179;
                                      v234[61] = v180;
                                      v234[62] = v181;
                                      LOBYTE(v234[63]) = v182;
                                      v234[64] = v175;
                                      v234[65] = v176;
                                      v234[66] = v177;
                                      LOBYTE(v234[67]) = v178;
                                      v234[68] = v171;
                                      v234[69] = v172;
                                      v234[70] = v173;
                                      LOBYTE(v234[71]) = v174;
                                      v234[72] = v167;
                                      v234[73] = v168;
                                      v234[74] = v169;
                                      LOBYTE(v234[75]) = v170;
                                      v234[76] = v162;
                                      v234[77] = v164;
                                      v234[78] = v165;
                                      LOBYTE(v234[79]) = v166;
                                      v234[80] = v153;
                                      v234[81] = v155;
                                      v234[82] = v157;
                                      LOBYTE(v234[83]) = v159;
                                      v234[84] = v158;
                                      v234[85] = v160;
                                      v234[86] = v161;
                                      LOBYTE(v234[87]) = v163;
                                      v234[88] = v121;
                                      v234[89] = v152;
                                      v234[90] = v154;
                                      LOBYTE(v234[91]) = v156;
                                      v112 = v148;
                                      v234[92] = v148;
                                      v234[93] = v149;
                                      v234[94] = v150;
                                      LOBYTE(v234[95]) = v151;
                                      v221 = v86;
                                      v234[96] = v86;
                                      v234[97] = v87;
                                      LOBYTE(v234[98]) = v88;
                                      v234[99] = v230;
                                      v219 = v89;
                                      v234[100] = v89;
                                      LODWORD(v220) = v90;
                                      LOBYTE(v234[101]) = v90;
                                      LODWORD(v218) = v92;
                                      BYTE1(v234[101]) = v92;
                                      BYTE2(v234[101]) = v228;
                                      BYTE3(v234[101]) = v227;
                                      BYTE4(v234[101]) = v226;
                                      BYTE5(v234[101]) = v225;
                                      BYTE6(v234[101]) = v224;
                                      HIBYTE(v234[101]) = v223;
                                      v113 = v147;
                                      v234[102] = v147;
                                      v234[103] = v372;
                                      sub_10008F548(v234);
                                      swift_bridgeObjectRelease(v113);
                                      sub_10008F45C(v112);
                                      sub_10008F45C(v121);
                                      sub_10008F45C(v158);
                                      sub_10008F45C(v153);
                                      sub_10008F45C(v162);
                                      sub_10008F45C(v167);
                                      sub_10008F45C(v171);
                                      sub_10008F45C(v175);
                                      sub_10008F45C(v179);
                                      sub_10008F45C(v183);
                                      sub_10008F45C(v187);
                                      sub_10008F45C(v122);
                                      sub_10008F45C(v194);
                                      sub_10008F45C(v198);
                                      sub_10008F45C(v123);
                                      sub_10008F45C(v205);
                                      sub_10008F45C(v209);
                                      sub_10008F45C(v124);
                                      sub_10008F45C(v213);
                                      sub_10008F45C(v128);
                                      sub_10008F45C(v132);
                                      sub_10008F45C(v138);
                                      v114 = v142;
                                      v115 = v139;
                                      sub_10008F45C(v141);
                                      v116 = v146;
                                      v118 = v143;
                                      v117 = v144;
                                      v119 = v145;
                                      sub_10008F45C(v146);
                                      v232 = (uint64_t)v334;
                                      _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)v231);
                                      v235 = v116;
                                      v236 = v118;
                                      v237 = v117;
                                      v238 = v119;
                                      v240 = v141;
                                      v241 = v114;
                                      v242 = v140;
                                      v243 = v115;
                                      v245 = v138;
                                      v246 = v135;
                                      v247 = v136;
                                      v248 = v137;
                                      v250 = v132;
                                      v251 = v133;
                                      v252 = v134;
                                      v253 = v217;
                                      v255 = v128;
                                      v256 = v129;
                                      v257 = v130;
                                      v258 = v131;
                                      v260 = v213;
                                      v261 = v214;
                                      v262 = v215;
                                      v263 = v216;
                                      v265 = v124;
                                      v266 = v125;
                                      v267 = v126;
                                      v268 = v127;
                                      v270 = v209;
                                      v271 = v210;
                                      v272 = v211;
                                      v273 = v212;
                                      v275 = v205;
                                      v276 = v206;
                                      v277 = v207;
                                      v278 = v208;
                                      v280 = v123;
                                      v281 = v202;
                                      v282 = v203;
                                      v283 = v204;
                                      v285 = v198;
                                      v286 = v199;
                                      v287 = v200;
                                      v288 = v201;
                                      v290 = v194;
                                      v291 = v195;
                                      v292 = v196;
                                      v293 = v197;
                                      v295 = v122;
                                      v296 = v191;
                                      v297 = v192;
                                      v298 = v193;
                                      v300 = v187;
                                      v301 = v188;
                                      v302 = v189;
                                      v303 = v190;
                                      v305 = v183;
                                      v306 = v184;
                                      v307 = v185;
                                      v308 = v186;
                                      v310 = v179;
                                      v311 = v180;
                                      v312 = v181;
                                      v313 = v182;
                                      v315 = v175;
                                      v316 = v176;
                                      v317 = v177;
                                      v318 = v178;
                                      v320 = v171;
                                      v321 = v172;
                                      v322 = v173;
                                      v323 = v174;
                                      v325 = v167;
                                      v326 = v168;
                                      v327 = v169;
                                      v328 = v170;
                                      v330 = v162;
                                      v331 = v164;
                                      v332 = v165;
                                      v333 = v166;
                                      v335 = v153;
                                      v336 = v155;
                                      v337 = v157;
                                      v338 = v159;
                                      *(_DWORD *)v239 = v397[0];
                                      *(_DWORD *)v244 = *(_DWORD *)v396;
                                      *(_DWORD *)v249 = *(_DWORD *)v395;
                                      *(_DWORD *)v254 = *(_DWORD *)v394;
                                      *(_DWORD *)&v259[3] = *(_DWORD *)&v393[3];
                                      *(_DWORD *)v259 = *(_DWORD *)v393;
                                      *(_DWORD *)&v264[3] = *(_DWORD *)&v392[3];
                                      *(_DWORD *)v264 = *(_DWORD *)v392;
                                      *(_DWORD *)&v269[3] = *(_DWORD *)&v391[3];
                                      *(_DWORD *)v269 = *(_DWORD *)v391;
                                      *(_DWORD *)&v274[3] = *(_DWORD *)&v390[3];
                                      *(_DWORD *)v274 = *(_DWORD *)v390;
                                      *(_DWORD *)v279 = *(_DWORD *)v389;
                                      *(_DWORD *)v284 = *(_DWORD *)v388;
                                      *(_DWORD *)v289 = *(_DWORD *)v387;
                                      *(_DWORD *)v294 = *(_DWORD *)v386;
                                      *(_DWORD *)v299 = *(_DWORD *)v385;
                                      *(_DWORD *)v304 = *(_DWORD *)v384;
                                      *(_DWORD *)v309 = *(_DWORD *)v383;
                                      *(_DWORD *)v314 = *(_DWORD *)v382;
                                      *(_DWORD *)v319 = *(_DWORD *)v381;
                                      *(_DWORD *)v324 = *(_DWORD *)v380;
                                      *(_DWORD *)v329 = *(_DWORD *)v379;
                                      *(_DWORD *)v232 = *(_DWORD *)v378;
                                      *(_DWORD *)&v239[3] = *(_DWORD *)((char *)v397 + 3);
                                      *(_DWORD *)v339 = *(_DWORD *)v377;
                                      *(_DWORD *)&v244[3] = *(_DWORD *)&v396[3];
                                      *(_DWORD *)&v249[3] = *(_DWORD *)&v395[3];
                                      *(_DWORD *)&v254[3] = *(_DWORD *)&v394[3];
                                      *(_DWORD *)&v279[3] = *(_DWORD *)&v389[3];
                                      *(_DWORD *)&v284[3] = *(_DWORD *)&v388[3];
                                      *(_DWORD *)&v289[3] = *(_DWORD *)&v387[3];
                                      *(_DWORD *)&v294[3] = *(_DWORD *)&v386[3];
                                      *(_DWORD *)&v299[3] = *(_DWORD *)&v385[3];
                                      *(_DWORD *)&v304[3] = *(_DWORD *)&v384[3];
                                      *(_DWORD *)&v309[3] = *(_DWORD *)&v383[3];
                                      *(_DWORD *)&v314[3] = *(_DWORD *)&v382[3];
                                      *(_DWORD *)&v319[3] = *(_DWORD *)&v381[3];
                                      *(_DWORD *)&v324[3] = *(_DWORD *)&v380[3];
                                      *(_DWORD *)&v329[3] = *(_DWORD *)&v379[3];
                                      *(_DWORD *)&v334[3] = *(_DWORD *)&v378[3];
                                      *(_DWORD *)&v339[3] = *(_DWORD *)&v377[3];
                                      v340 = v158;
                                      v341 = v160;
                                      v342 = v161;
                                      v343 = v163;
                                      *(_DWORD *)v344 = *(_DWORD *)v376;
                                      *(_DWORD *)&v344[3] = *(_DWORD *)&v376[3];
                                      v345 = v121;
                                      v346 = v152;
                                      v347 = v154;
                                      v348 = v156;
                                      *(_DWORD *)v349 = *(_DWORD *)v375;
                                      *(_DWORD *)&v349[3] = *(_DWORD *)&v375[3];
                                      v350 = v148;
                                      v351 = v149;
                                      v352 = v150;
                                      v353 = v151;
                                      *(_DWORD *)v354 = *(_DWORD *)v374;
                                      *(_DWORD *)&v354[3] = *(_DWORD *)&v374[3];
                                      v355 = v221;
                                      v356 = v87;
                                      v357 = v88;
                                      *(_DWORD *)v358 = *(_DWORD *)v373;
                                      *(_DWORD *)&v358[3] = *(_DWORD *)&v373[3];
                                      v359 = v230;
                                      v360 = v219;
                                      v361 = v220;
                                      v362 = v218;
                                      v363 = v228;
                                      v364 = v227;
                                      v365 = v226;
                                      v366 = v225;
                                      v367 = v224;
                                      v368 = v223;
                                      v369 = v147;
                                      v370 = v233;
                                      sub_10008F988(&v235);
                                      return memcpy((void *)v229, v234, 0x340uLL);
                                    }
                                    (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                                    swift_bridgeObjectRelease(v147);
                                    sub_10008F45C(v148);
                                    sub_10008F45C(v121);
                                    sub_10008F45C(v158);
                                    sub_10008F45C(v153);
                                    sub_10008F45C(v162);
                                    sub_10008F45C(v167);
                                    sub_10008F45C(v171);
                                    sub_10008F45C(v175);
                                    sub_10008F45C(v179);
                                    sub_10008F45C(v183);
                                    sub_10008F45C(v187);
                                    sub_10008F45C(v122);
                                    sub_10008F45C(v194);
                                    sub_10008F45C(v198);
                                    sub_10008F45C(v123);
                                    sub_10008F45C(v205);
                                    sub_10008F45C(v209);
                                    sub_10008F45C(v124);
                                    sub_10008F45C(v213);
                                    sub_10008F45C(v128);
                                    sub_10008F45C(v132);
                                    sub_10008F45C(v138);
                                    sub_10008F45C(v141);
                                    sub_10008F45C(v146);
                                    v97 = 1;
                                  }
                                  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)v231);
                                  LODWORD(v17) = 1;
                                  LODWORD(v18) = 1;
                                  LODWORD(v19) = 1;
                                  LODWORD(v20) = 1;
                                  LODWORD(v21) = 1;
                                  LODWORD(v22) = 1;
                                  LODWORD(v23) = 1;
                                  v218 = 1;
                                  v219 = 1;
                                  v220 = 1;
                                  v221 = 1;
                                  v222 = 1;
                                  v223 = 1;
                                  v224 = 1;
                                  v225 = 1;
                                  v226 = 1;
                                  v227 = 1;
                                  v228 = 1;
                                  v229 = 1;
                                  v230 = 1;
                                  v231 = 1;
                                  v232 = 1;
                                  LODWORD(v233) = 1;
                                  v15 = v97;
                                  goto LABEL_45;
                                }
                                (*(void (**)(char *, uint64_t))(v232 + 8))(v7, v233);
                                sub_10008F45C(v148);
                                sub_10008F45C(v121);
                                sub_10008F45C(v158);
                                sub_10008F45C(v153);
                                sub_10008F45C(v162);
                                sub_10008F45C(v167);
                                sub_10008F45C(v171);
                                sub_10008F45C(v175);
                                sub_10008F45C(v179);
                                sub_10008F45C(v183);
                                sub_10008F45C(v187);
                                sub_10008F45C(v122);
                                sub_10008F45C(v194);
                                sub_10008F45C(v198);
                                sub_10008F45C(v123);
                                sub_10008F45C(v205);
                                sub_10008F45C(v209);
                                sub_10008F45C(v124);
                                sub_10008F45C(v213);
                                sub_10008F45C(v128);
                                sub_10008F45C(v132);
                                sub_10008F45C(v138);
                                sub_10008F45C(v141);
                                sub_10008F45C(v146);
                                LODWORD(v233) = 1;
                                v14 = 0xFFFFFFLL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    a1 = (_QWORD *)v231;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v15 = 0;
  v16 = 0;
  v17 = (v14 >> 1) & 1;
  v18 = (v14 >> 2) & 1;
  v19 = (v14 >> 3) & 1;
  v20 = (v14 >> 4) & 1;
  v21 = (v14 >> 5) & 1;
  v22 = (v14 >> 6) & 1;
  v23 = (v14 >> 7) & 1;
  v218 = (v14 >> 8) & 1;
  v219 = (v14 >> 9) & 1;
  v220 = (v14 >> 10) & 1;
  v221 = (v14 >> 11) & 1;
  v222 = (v14 >> 12) & 1;
  v223 = (v14 >> 13) & 1;
  v224 = (v14 >> 14) & 1;
  v225 = (v14 >> 15) & 1;
  v226 = (v14 >> 16) & 1;
  v227 = (v14 >> 17) & 1;
  v228 = (v14 >> 18) & 1;
  v229 = (v14 >> 19) & 1;
  v230 = (v14 >> 20) & 1;
  v231 = (v14 >> 21) & 1;
  v232 = (v14 >> 22) & 1;
  if ((v14 & 1) == 0)
  {
    if ((_DWORD)v17)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_45:
  v98 = v17;
  v99 = v15;
  sub_10008F45C(v146);
  v100 = v98;
  v16 = v99;
  if (v100)
  {
LABEL_6:
    sub_10008F45C(v141);
    if (!(_DWORD)v18)
      goto LABEL_7;
    goto LABEL_47;
  }
LABEL_46:
  if (!(_DWORD)v18)
  {
LABEL_7:
    if ((_DWORD)v19)
      goto LABEL_8;
LABEL_48:
    if (!(_DWORD)v20)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_47:
  sub_10008F45C(v138);
  if (!(_DWORD)v19)
    goto LABEL_48;
LABEL_8:
  sub_10008F45C(v132);
  if ((_DWORD)v20)
LABEL_49:
    sub_10008F45C(v128);
LABEL_50:
  v101 = v205;
  if ((_DWORD)v21)
    sub_10008F45C(v213);
  if ((_DWORD)v22)
    sub_10008F45C(v124);
  if ((_DWORD)v23)
    sub_10008F45C(v209);
  if ((_DWORD)v218)
    sub_10008F45C(v101);
  if ((_DWORD)v219)
    sub_10008F45C(v123);
  v102 = v194;
  if ((_DWORD)v220)
    sub_10008F45C(v198);
  if ((_DWORD)v221)
    sub_10008F45C(v102);
  if ((_DWORD)v222)
    sub_10008F45C(v122);
  if ((_DWORD)v223)
    sub_10008F45C(v187);
  v103 = v179;
  if ((_DWORD)v224)
    sub_10008F45C(v183);
  if ((_DWORD)v225)
    sub_10008F45C(v103);
  if ((_DWORD)v226)
    sub_10008F45C(v175);
  v104 = v167;
  if ((_DWORD)v227)
    sub_10008F45C(v171);
  if ((_DWORD)v228)
    sub_10008F45C(v104);
  if ((_DWORD)v229)
    sub_10008F45C(v162);
  v105 = v158;
  if ((_DWORD)v230)
  {
    sub_10008F45C(v153);
    if (!(_DWORD)v231)
      goto LABEL_82;
LABEL_90:
    sub_10008F45C(v105);
    if (!(_DWORD)v232)
      goto LABEL_84;
    goto LABEL_83;
  }
  if ((_DWORD)v231)
    goto LABEL_90;
LABEL_82:
  if ((_DWORD)v232)
LABEL_83:
    sub_10008F45C(v121);
LABEL_84:
  if ((_DWORD)v233)
    sub_10008F45C(v148);
  result = (void *)v147;
  if (v16)
    return (void *)swift_bridgeObjectRelease(v147);
  return result;
}

uint64_t sub_100070C44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x636974796C616E61 && a2 == 0xE900000000000073)
  {
    v7 = 0xE900000000000073;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636974796C616E61, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100070D9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v3 = sub_100004828(&qword_1006321E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_10008DF38();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQRangeProperties.CodingKeys, &type metadata for IQRangeProperties.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v10 = sub_100004828(&qword_1006321F8);
    v18 = 0;
    v11 = sub_10008F400(&qword_100632200, &qword_1006321F8, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v19, v10, &v18, v3, v10, v11, v12);
    v7 = v19;
    v17 = 1;
    v14 = swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v3, v14);
    v16 = 2;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

uint64_t sub_100070FA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x636974796C616E61 && a2 == 0xE900000000000073)
  {
    v7 = 0xE900000000000073;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636974796C616E61, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000710FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __n128 v11;
  char v12;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v3 = sub_100004828(&qword_100632968);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_1000A1D34();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQBoolProperties.CodingKeys, &type metadata for IQBoolProperties.CodingKeys, v9, v7, v8);
  if (v1)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v18 = 0;
  v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v18, v3);
  v17 = 1;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3, v11);
  v16 = 2;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  if ((v12 & 1) != 0)
    v14 = 256;
  else
    v14 = 0;
  return v14 & 0xFFFFFF00 | v10;
}

uint64_t sub_100071288(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x736C616E676973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736C616E676973, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000713E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = sub_100004828(&qword_100632970);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_1000A1D78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQComplexProperties.CodingKeys, &type metadata for IQComplexProperties.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v21 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v3);
    v12 = v11;
    v20 = 1;
    v13 = swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v20, v3, v13);
    v14 = sub_100004828(&qword_1006328E8);
    v19 = 2;
    v15 = sub_1000A1F98(&qword_100632978, &qword_1006328E8, (void (*)(void))sub_1000A1FFC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v14, &v19, v3, v14, v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v16 = v18;
    swift_bridgeObjectRetain(v18);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

uint64_t sub_100071600(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74617261706D6F63 && a2 == 0xEA0000000000726FLL)
  {
    v7 = 0xEA0000000000726FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617261706D6F63, 0xEA0000000000726FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease(0xE900000000000064);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F687365726874, 0xE900000000000064, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10007175C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;

  v5 = sub_100004828(&qword_100632A38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000A2A74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IQSignalProperties.CodingKeys, &type metadata for IQSignalProperties.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v28 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v14 = v13;
  v25 = v12;
  v27 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v17 = v16;
  v23 = v15;
  v26 = 2;
  v18 = swift_bridgeObjectRetain(v16);
  v24 = v17;
  KeyedDecodingContainer.decode(_:forKey:)(&v26, v5, v18);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v21 = v24;
  swift_bridgeObjectRelease(v24);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 24) = v21;
  *(_DWORD *)(a2 + 32) = v20;
  return result;
}

uint64_t sub_100071984(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001005432A0;
    if (a2 == 0x80000001005432A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001005432A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100543360)
  {
    v6 = 0x8000000100543360;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100543360, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6F697461526975 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697461526975, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x676E69646F636E65 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69646F636E65, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001005432E0)
  {
    v9 = 0x80000001005432E0;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001005432E0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100543380)
  {
    swift_bridgeObjectRelease(0x8000000100543380);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100543380, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100071BE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;

  v5 = sub_100004828(&qword_100632960);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_1000A1E00();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ImageFormat.CodingKeys, &type metadata for ImageFormat.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v41 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
  v14 = v13;
  v40 = 1;
  swift_bridgeObjectRetain(v13);
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
  v32 = v12;
  v39 = 2;
  v33 = v15;
  swift_bridgeObjectRetain(v15);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
  v34 = v17;
  v29 = v16;
  v18 = sub_100004828(&qword_1006368D0);
  v37 = 3;
  v19 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v34);
  v30 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v38, v18, &v37, v5, v18, v19);
  v20 = v38;
  v36 = 4;
  v21 = swift_bridgeObjectRetain(v38);
  KeyedDecodingContainer.decode(_:forKey:)(&v36, v5, v21);
  v23 = v22.n128_u64[0];
  v35 = 5;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_bridgeObjectRelease(v20);
  v25 = v34;
  swift_bridgeObjectRelease(v34);
  v26 = v33;
  swift_bridgeObjectRelease(v33);
  result = swift_bridgeObjectRelease(v14);
  *a2 = v32;
  a2[1] = v14;
  a2[2] = v31;
  a2[3] = v26;
  a2[4] = v29;
  a2[5] = v25;
  a2[6] = v20;
  a2[7] = v23;
  a2[8] = v24;
  return result;
}

uint64_t sub_100071FF8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726F466567616D69 && a2 == 0xEB0000000074616DLL)
  {
    v7 = 0xEB0000000074616DLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F466567616D69, 0xEB0000000074616DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100543240)
  {
    swift_bridgeObjectRelease(0x8000000100543240);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100543240, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100072150@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v5 = sub_100004828(&qword_100632298);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008D5BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DocumentConfig.CodingKeys, &type metadata for DocumentConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  LOBYTE(v38[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v38, v5);
  v14 = v13;
  v36 = v12;
  v37 = 1;
  v15 = sub_10008F3BC();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, &type metadata for ImageFormat, &v37, v5, &type metadata for ImageFormat, v15);
  v16 = v38[1];
  v17 = v38[3];
  v29 = v38[2];
  v30 = v38[0];
  v34 = v38[6];
  v35 = v38[5];
  v18 = v38[7];
  v27 = v38[8];
  v28 = v38[4];
  v31 = sub_100004828(&qword_1006368D0);
  v37 = 2;
  v19 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v33 = v16;
  swift_bridgeObjectRetain(v16);
  v32 = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v35);
  v20 = swift_bridgeObjectRetain(v34);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, v31, &v37, v5, v31, v19, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v38[0];
  swift_bridgeObjectRetain(v38[0]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_bridgeObjectRelease(v21);
  v22 = v34;
  swift_bridgeObjectRelease(v34);
  v23 = v35;
  swift_bridgeObjectRelease(v35);
  v24 = v32;
  swift_bridgeObjectRelease(v32);
  v25 = v33;
  swift_bridgeObjectRelease(v33);
  result = swift_bridgeObjectRelease(v14);
  *a2 = v36;
  a2[1] = v14;
  a2[2] = v30;
  a2[3] = v25;
  a2[4] = v29;
  a2[5] = v24;
  a2[6] = v28;
  a2[7] = v23;
  a2[8] = v22;
  a2[9] = v18;
  a2[10] = v27;
  a2[11] = v21;
  return result;
}

uint64_t sub_1000724A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100542880)
  {
    swift_bridgeObjectRelease(0x8000000100542880);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100542880, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100072588(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100542880;
    if (a2 == 0x8000000100542880)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100542880, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x80000001005428D0;
    if (a2 == 0x80000001005428D0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001005428D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001005428F0)
  {
    swift_bridgeObjectRelease(0x80000001005428F0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001005428F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_100072768(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1000727B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449)
  {
    v5 = 0xEA00000000006449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656469766F7270, 0xEA00000000006449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6954746567726174 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease(0xEA00000000007265);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6954746567726174, 0xEA00000000007265, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000728B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_100004828(&qword_1006321C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_10008DE6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AcceptedVerifiedClaim.CodingKeys, &type metadata for AcceptedVerifiedClaim.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_100072A5C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006000B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100072AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100072B84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  char v13;

  v3 = sub_100004828(&qword_100632958);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_1000A1E44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ImageDimension.CodingKeys, &type metadata for ImageDimension.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v13 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    v12 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v7;
}

uint64_t sub_100072CD4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x8000000100543260;
    if (a2 == 0x8000000100543260)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100543260, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6F697463656C6573 && a2 == 0xE90000000000006ELL)
  {
    v6 = 0xE90000000000006ELL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F697463656C6573, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x676E69646F636E65 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69646F636E65, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x8000000100543280;
    if (a2 == 0x8000000100543280)
      goto LABEL_22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100543280, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001005432A0)
  {
    v9 = 0x80000001005432A0;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001005432A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001005432C0)
  {
    v10 = 0x80000001005432C0;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001005432C0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001005432E0)
  {
    v11 = 0x80000001005432E0;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001005432E0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0x656E696C6576696CLL && a2 == 0xEA00000000007373)
  {
    v12 = 0xEA00000000007373;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C6576696CLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756F656D6974, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_52;
  }
  if (a1 == 0x6B6174655278616DLL && a2 == 0xEE00746E756F4365)
  {
    v14 = 0xEE00746E756F4365;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6174655278616DLL, 0xEE00746E756F4365, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_58;
  }
  if (a1 == 0x656C616373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 10;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C616373, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10007314C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  uint64_t v76;
  char v77;
  char v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  char v82;
  _BYTE v83[7];
  uint64_t v84;
  char v85;
  _BYTE v86[7];
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  _BYTE v91[7];
  char v92;
  _BYTE v93[7];
  char v94;
  int v95;
  __int16 v96;
  char v97;
  _BYTE v98[7];
  char v99;
  uint64_t v100;

  v100 = sub_100004828(&qword_100632280);
  v5 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000806C(a1, v8);
  v10 = sub_10008D644();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CameraImage.CodingKeys, &type metadata for CameraImage.CodingKeys, v10, v8, v9);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v56 = v5;
  LOBYTE(v65) = 0;
  v11 = v100;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v100);
  v14 = v13;
  v55 = v12;
  v15 = sub_100004828(&qword_1006320D0);
  LOBYTE(v57) = 1;
  v16 = sub_10008F400(&qword_100632288, &qword_1006320D0, (uint64_t)&protocol witness table for UInt, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, v15, &v57, v11, v15, v16);
  v54 = v14;
  v17 = v65;
  LOBYTE(v65) = 2;
  swift_bridgeObjectRetain(v17);
  v52 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v11);
  v53 = v17;
  LOBYTE(v57) = 3;
  v18 = sub_10008F314();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for ImageDimension, &v57, v11, &type metadata for ImageDimension, v18);
  v51 = v65;
  v19 = v18;
  v20 = v66;
  LOBYTE(v57) = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for ImageDimension, &v57, v11, &type metadata for ImageDimension, v19);
  v49 = v65;
  v50 = v20;
  v21 = v66;
  LOBYTE(v65) = 5;
  v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v11);
  v48 = v21;
  v99 = v22 & 1;
  LOBYTE(v65) = 6;
  LOBYTE(v21) = v22;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v11);
  v46 = v24;
  v97 = v24 & 1;
  LOBYTE(v65) = 7;
  v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v11);
  v45 = v23;
  LOBYTE(v65) = 8;
  v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v11);
  v42 = v25;
  v94 = v25 & 1;
  LOBYTE(v65) = 9;
  v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v65, v11);
  v40 = v27 & 1;
  v92 = v27 & 1;
  v89 = 10;
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v89, v100);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v100);
  v30 = v29 & 1;
  v90 = v29 & 1;
  v31 = v54;
  *(_QWORD *)&v57 = v55;
  *((_QWORD *)&v57 + 1) = v54;
  v32 = v53;
  *(_QWORD *)&v58 = v53;
  *((_QWORD *)&v58 + 1) = v52;
  *(_QWORD *)&v59 = v51;
  *((_QWORD *)&v59 + 1) = v50;
  *(_QWORD *)&v60 = v49;
  *((_QWORD *)&v60 + 1) = v48;
  *(_QWORD *)&v61 = v47;
  BYTE8(v61) = v21 & 1;
  *(_QWORD *)&v62 = v45;
  BYTE8(v62) = v46 & 1;
  LOBYTE(v23) = v44;
  BYTE9(v62) = v44;
  v33 = v43;
  *(_QWORD *)&v63 = v43;
  BYTE8(v63) = v42 & 1;
  *(_QWORD *)&v64[0] = v26;
  BYTE8(v64[0]) = v40;
  *(_QWORD *)&v64[1] = v41;
  BYTE8(v64[1]) = v30;
  sub_10008F358((uint64_t)&v57);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v32);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v65 = v55;
  v66 = v31;
  v67 = v32;
  v68 = v52;
  v69 = v51;
  v70 = v50;
  v71 = v49;
  v72 = v48;
  v73 = v47;
  v74 = v99;
  *(_DWORD *)v75 = *(_DWORD *)v98;
  *(_DWORD *)&v75[3] = *(_DWORD *)&v98[3];
  v76 = v45;
  v77 = v97;
  v78 = v23;
  v79 = v95;
  v80 = v96;
  v81 = v33;
  v82 = v94;
  *(_DWORD *)v83 = *(_DWORD *)v93;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v93[3];
  v84 = v26;
  v85 = v92;
  *(_DWORD *)&v86[3] = *(_DWORD *)&v91[3];
  *(_DWORD *)v86 = *(_DWORD *)v91;
  v87 = v41;
  v88 = v90;
  result = sub_10008F38C((uint64_t)&v65);
  v35 = v64[0];
  a2[6] = v63;
  a2[7] = v35;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v64 + 9);
  v36 = v60;
  a2[2] = v59;
  a2[3] = v36;
  v37 = v62;
  a2[4] = v61;
  a2[5] = v37;
  v38 = v58;
  *a2 = v57;
  a2[1] = v38;
  return result;
}

uint64_t sub_100073774(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6564756C636E69 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6564756C636E69, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74615070756F7267 && a2 == 0xE900000000000068)
  {
    swift_bridgeObjectRelease(0xE900000000000068);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74615070756F7267, 0xE900000000000068, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100073870(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v12;
  char v13;
  char v14;

  v3 = sub_100004828(&qword_100632278);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000806C(a1, v7);
  v9 = sub_10008D6CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DataNodeProofInfo.CodingKeys, &type metadata for DataNodeProofInfo.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v14 = 0;
    LOBYTE(v7) = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3, v10);
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v7 & 1;
}

uint64_t sub_1000739C4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x8000000100542A70;
    if (a2 == 0x8000000100542A70)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100542A70, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x8000000100542A90;
    if (a2 == 0x8000000100542A90)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100542A90, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100542AB0)
  {
    v10 = 0x8000000100542AB0;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100542AB0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x6E65646469487369 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65646469487369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x72456E4F65646F63 && a2 == 0xEB00000000726F72)
  {
    v12 = 0xEB00000000726F72;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72456E4F65646F63, 0xEB00000000726F72, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000015)
  {
    v13 = 0x80000001005428F0;
    if (a2 == 0x80000001005428F0)
      goto LABEL_47;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001005428F0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100542AD0)
  {
    v14 = 0x8000000100542AD0;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100542AD0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100542AF0)
  {
    v15 = 0x8000000100542AF0;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100542AF0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0x736567616D69 && a2 == 0xE600000000000000)
  {
    v16 = 0xE600000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736567616D69, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x65646F4E61746164 && a2 == 0xED0000666F6F7250)
  {
    swift_bridgeObjectRelease(0xED0000666F6F7250);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4E61746164, 0xED0000666F6F7250, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

_QWORD *sub_100073E74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *result;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[2];
  char v77;
  _BYTE v78[7];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  __int16 v102;
  _DWORD v103[3];
  _QWORD *v104;

  v5 = sub_100004828(&qword_100632648);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v104 = a1;
  sub_10000806C(a1, v9);
  v11 = sub_10006C4E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserInputField.CodingKeys, &type metadata for UserInputField.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)_s8coreidvd24DigitalPresentmentHelperVwxx_0(v104);
  LOBYTE(v76[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v76, v5);
  v14 = v13;
  LOBYTE(v76[0]) = 1;
  v15 = swift_bridgeObjectRetain(v13);
  LODWORD(v63) = KeyedDecodingContainer.decode(_:forKey:)(v76, v5, v15);
  LOBYTE(v76[0]) = 2;
  v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  v62 = v12;
  LOBYTE(v76[0]) = 3;
  v17 = v16;
  swift_bridgeObjectRetain(v16);
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  v65 = v17;
  v60 = v18;
  LOBYTE(v76[0]) = 4;
  v20 = v19;
  swift_bridgeObjectRetain(v19);
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  v64 = v20;
  v59 = v21;
  LOBYTE(v76[0]) = 5;
  v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  LOBYTE(v76[0]) = 6;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  v24 = v23;
  v56 = v22;
  LOBYTE(v76[0]) = 7;
  swift_bridgeObjectRetain(v23);
  v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  LOBYTE(v76[0]) = 8;
  v57 = v25;
  swift_bridgeObjectRetain(v25);
  v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v76, v5);
  v55 = v26;
  v51 = v24;
  v27 = sub_100004828(&qword_100631330);
  LOBYTE(v66) = 9;
  v28 = sub_1000A1F98(&qword_100632650, &qword_100631330, (void (*)(void))sub_10009A0C4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v29 = swift_bridgeObjectRetain(v55);
  v50 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v76, v27, &v66, v5, v27, v28, v29);
  v30 = v76[0];
  v31 = sub_100004828(&qword_100631350);
  LOBYTE(v66) = 10;
  v32 = sub_1000A1F98(&qword_100632660, &qword_100631350, (void (*)(void))sub_10009A108, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v52 = v30;
  v33 = swift_bridgeObjectRetain(v30);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v76, v31, &v66, v5, v31, v32, v33);
  v34 = v76[0];
  v98 = 11;
  v35 = sub_10009A14C();
  v36 = swift_bridgeObjectRetain(v34);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v99, &type metadata for DataNodeProofInfo, &v98, v5, &type metadata for DataNodeProofInfo, v35, v36);
  LOBYTE(v30) = v63 & 1;
  HIDWORD(v48) = v63 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v63 = v99;
  v49 = v100;
  v50 = *((_QWORD *)&v99 + 1);
  *(_QWORD *)&v66 = v62;
  *((_QWORD *)&v66 + 1) = v14;
  LOBYTE(v67) = v30;
  v37 = v64;
  v38 = v65;
  *((_QWORD *)&v67 + 1) = v61;
  *(_QWORD *)&v68 = v65;
  *((_QWORD *)&v68 + 1) = v60;
  *(_QWORD *)&v69 = v64;
  BYTE8(v69) = v59;
  BYTE9(v69) = v58;
  v39 = v57;
  v40 = v51;
  *(_QWORD *)&v70 = v56;
  *((_QWORD *)&v70 + 1) = v51;
  *(_QWORD *)&v71 = v54;
  *((_QWORD *)&v71 + 1) = v57;
  *(_QWORD *)&v72 = v53;
  *((_QWORD *)&v72 + 1) = v55;
  *(_QWORD *)&v73 = v52;
  *((_QWORD *)&v73 + 1) = v34;
  v74 = v99;
  v75 = v100;
  sub_100099520(&v66);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v39);
  v41 = v55;
  swift_bridgeObjectRelease(v55);
  v42 = v52;
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v34);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v104);
  v76[0] = v62;
  v76[1] = v14;
  v77 = BYTE4(v48);
  *(_DWORD *)v78 = v103[0];
  *(_DWORD *)&v78[3] = *(_DWORD *)((char *)v103 + 3);
  v79 = v61;
  v80 = v65;
  v81 = v60;
  v82 = v37;
  v83 = v59;
  v84 = v58;
  v85 = v101;
  v86 = v102;
  v87 = v56;
  v88 = v51;
  v89 = v54;
  v90 = v39;
  v91 = v53;
  v92 = v41;
  v93 = v42;
  v94 = v34;
  v95 = v63;
  v96 = v50;
  v97 = v49;
  result = sub_1000995C4(v76);
  v44 = v73;
  *(_OWORD *)(a2 + 96) = v72;
  *(_OWORD *)(a2 + 112) = v44;
  *(_OWORD *)(a2 + 128) = v74;
  *(_QWORD *)(a2 + 144) = v75;
  v45 = v69;
  *(_OWORD *)(a2 + 32) = v68;
  *(_OWORD *)(a2 + 48) = v45;
  v46 = v71;
  *(_OWORD *)(a2 + 64) = v70;
  *(_OWORD *)(a2 + 80) = v46;
  v47 = v67;
  *(_OWORD *)a2 = v66;
  *(_OWORD *)(a2 + 16) = v47;
  return result;
}

unint64_t sub_100074714()
{
  unint64_t result;

  result = qword_100631380;
  if (!qword_100631380)
  {
    result = swift_getWitnessTable(&unk_100521848, &type metadata for Page.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100631380);
  }
  return result;
}

unint64_t sub_100074758()
{
  unint64_t result;

  result = qword_1006313A0;
  if (!qword_1006313A0)
  {
    result = swift_getWitnessTable(&unk_100521820, &type metadata for Label);
    atomic_store(result, (unint64_t *)&qword_1006313A0);
  }
  return result;
}

uint64_t sub_10007479C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x74615070756F7267 && a2 == 0xE900000000000068)
  {
    v5 = 0xE900000000000068;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74615070756F7267, 0xE900000000000068, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7475626972747461 && a2 == 0xEB00000000644965)
  {
    v7 = 0xEB00000000644965;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461, 0xEB00000000644965, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656D737365737361 && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000746ELL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D737365737361, 0xEA0000000000746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100074920@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v5 = sub_100004828(&qword_1006321A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10008DE28();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareableAttribute.CodingKeys, &type metadata for ShareableAttribute.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v26 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v14 = v13;
  v23 = v12;
  v25 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v5);
  v17 = v16;
  v21 = v15;
  v24 = 2;
  swift_bridgeObjectRetain(v16);
  v22 = v17;
  LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v18 = v22;
  swift_bridgeObjectRelease(v22);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_100074B40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701273968, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746954627573 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746954627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x73646C656966 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73646C656966, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x736C6562616CLL && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C6562616CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6570795465676170 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795465676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x6E6F6974706163 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6974706163, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x7373416567616D69 && a2 == 0xEB00000000737465)
  {
    swift_bridgeObjectRelease(0xEB00000000737465);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7373416567616D69, 0xEB00000000737465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_100074ED4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v5 = sub_100004828(&qword_100632630);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100074714();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Page.CodingKeys, &type metadata for Page.CodingKeys, v11, v9, v10);
  if (v2)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  LOBYTE(v60) = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5, v12);
  LOBYTE(v60) = 1;
  v56 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5);
  LOBYTE(v60) = 2;
  v15 = v14;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v5);
  v58 = v15;
  v54 = v16;
  v18 = v17;
  v19 = sub_100004828(&qword_1006368D0);
  v59 = 3;
  v20 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v57 = v18;
  swift_bridgeObjectRetain(v18);
  v55 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v19, &v59, v5, v19, v20);
  v52 = v19;
  v21 = v60;
  v22 = sub_100004828(&qword_100631390);
  v59 = 4;
  v23 = sub_1000A1F98(&qword_100632638, &qword_100631390, (void (*)(void))sub_10009A080, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v53 = v21;
  v24 = swift_bridgeObjectRetain(v21);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v60, v22, &v59, v5, v22, v23, v24);
  v25 = v60;
  LOBYTE(v60) = 5;
  swift_bridgeObjectRetain(v25);
  v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
  v50 = v26;
  v51 = v25;
  LOBYTE(v60) = 6;
  swift_bridgeObjectRetain(v26);
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
  v29 = v28;
  v47 = v27;
  v48 = v13;
  v30 = v50;
  LOBYTE(v60) = 7;
  swift_bridgeObjectRetain(v28);
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v5);
  v46 = v31;
  v59 = 8;
  v32 = swift_bridgeObjectRetain(v31);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v60, v52, &v59, v5, v52, v55, v32);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v33 = v60;
  swift_bridgeObjectRetain(v60);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v30);
  v34 = v51;
  swift_bridgeObjectRelease(v51);
  v35 = v53;
  swift_bridgeObjectRelease(v53);
  v36 = v57;
  swift_bridgeObjectRelease(v57);
  v37 = v58;
  result = swift_bridgeObjectRelease(v58);
  v39 = v56;
  *a2 = v48;
  a2[1] = v39;
  v40 = v54;
  a2[2] = v37;
  a2[3] = v40;
  a2[4] = v36;
  a2[5] = v35;
  v41 = v49;
  a2[6] = v34;
  a2[7] = v41;
  v42 = v47;
  a2[8] = v30;
  a2[9] = v42;
  v43 = v45;
  a2[10] = v29;
  a2[11] = v43;
  a2[12] = v46;
  a2[13] = v33;
  return result;
}

uint64_t type metadata accessor for LegacySynthesizedWorkflows()
{
  return objc_opt_self(_TtC8coreidvd26LegacySynthesizedWorkflows);
}

uint64_t destroy for IQModel(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  swift_bridgeObjectRelease(a1[1]);
  if (a1[104] != 1)
  {
    v2 = a1[2];
    if (v2 != 1)
      swift_bridgeObjectRelease(v2);
    v3 = a1[6];
    if (v3 != 1)
      swift_bridgeObjectRelease(v3);
    v4 = a1[10];
    if (v4 != 1)
      swift_bridgeObjectRelease(v4);
    v5 = a1[14];
    if (v5 != 1)
      swift_bridgeObjectRelease(v5);
    v6 = a1[18];
    if (v6 != 1)
      swift_bridgeObjectRelease(v6);
    v7 = a1[22];
    if (v7 != 1)
      swift_bridgeObjectRelease(v7);
    v8 = a1[26];
    if (v8 != 1)
      swift_bridgeObjectRelease(v8);
    v9 = a1[30];
    if (v9 != 1)
      swift_bridgeObjectRelease(v9);
    v10 = a1[34];
    if (v10 != 1)
      swift_bridgeObjectRelease(v10);
    v11 = a1[38];
    if (v11 != 1)
      swift_bridgeObjectRelease(v11);
    v12 = a1[42];
    if (v12 != 1)
      swift_bridgeObjectRelease(v12);
    v13 = a1[46];
    if (v13 != 1)
      swift_bridgeObjectRelease(v13);
    v14 = a1[50];
    if (v14 != 1)
      swift_bridgeObjectRelease(v14);
    v15 = a1[54];
    if (v15 != 1)
      swift_bridgeObjectRelease(v15);
    v16 = a1[58];
    if (v16 != 1)
      swift_bridgeObjectRelease(v16);
    v17 = a1[62];
    if (v17 != 1)
      swift_bridgeObjectRelease(v17);
    v18 = a1[66];
    if (v18 != 1)
      swift_bridgeObjectRelease(v18);
    v19 = a1[70];
    if (v19 != 1)
      swift_bridgeObjectRelease(v19);
    v20 = a1[74];
    if (v20 != 1)
      swift_bridgeObjectRelease(v20);
    v21 = a1[78];
    if (v21 != 1)
      swift_bridgeObjectRelease(v21);
    v22 = a1[82];
    if (v22 != 1)
      swift_bridgeObjectRelease(v22);
    v23 = a1[86];
    if (v23 != 1)
      swift_bridgeObjectRelease(v23);
    v24 = a1[90];
    if (v24 != 1)
      swift_bridgeObjectRelease(v24);
    v25 = a1[94];
    if (v25 != 1)
      swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(a1[104]);
    swift_bridgeObjectRelease(a1[105]);
  }
  if (a1[208] != 1)
  {
    v26 = a1[106];
    if (v26 != 1)
      swift_bridgeObjectRelease(v26);
    v27 = a1[110];
    if (v27 != 1)
      swift_bridgeObjectRelease(v27);
    v28 = a1[114];
    if (v28 != 1)
      swift_bridgeObjectRelease(v28);
    v29 = a1[118];
    if (v29 != 1)
      swift_bridgeObjectRelease(v29);
    v30 = a1[122];
    if (v30 != 1)
      swift_bridgeObjectRelease(v30);
    v31 = a1[126];
    if (v31 != 1)
      swift_bridgeObjectRelease(v31);
    v32 = a1[130];
    if (v32 != 1)
      swift_bridgeObjectRelease(v32);
    v33 = a1[134];
    if (v33 != 1)
      swift_bridgeObjectRelease(v33);
    v34 = a1[138];
    if (v34 != 1)
      swift_bridgeObjectRelease(v34);
    v35 = a1[142];
    if (v35 != 1)
      swift_bridgeObjectRelease(v35);
    v36 = a1[146];
    if (v36 != 1)
      swift_bridgeObjectRelease(v36);
    v37 = a1[150];
    if (v37 != 1)
      swift_bridgeObjectRelease(v37);
    v38 = a1[154];
    if (v38 != 1)
      swift_bridgeObjectRelease(v38);
    v39 = a1[158];
    if (v39 != 1)
      swift_bridgeObjectRelease(v39);
    v40 = a1[162];
    if (v40 != 1)
      swift_bridgeObjectRelease(v40);
    v41 = a1[166];
    if (v41 != 1)
      swift_bridgeObjectRelease(v41);
    v42 = a1[170];
    if (v42 != 1)
      swift_bridgeObjectRelease(v42);
    v43 = a1[174];
    if (v43 != 1)
      swift_bridgeObjectRelease(v43);
    v44 = a1[178];
    if (v44 != 1)
      swift_bridgeObjectRelease(v44);
    v45 = a1[182];
    if (v45 != 1)
      swift_bridgeObjectRelease(v45);
    v46 = a1[186];
    if (v46 != 1)
      swift_bridgeObjectRelease(v46);
    v47 = a1[190];
    if (v47 != 1)
      swift_bridgeObjectRelease(v47);
    v48 = a1[194];
    if (v48 != 1)
      swift_bridgeObjectRelease(v48);
    v49 = a1[198];
    if (v49 != 1)
      swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(a1[208]);
    swift_bridgeObjectRelease(a1[209]);
  }
  if (a1[312] != 1)
  {
    v50 = a1[210];
    if (v50 != 1)
      swift_bridgeObjectRelease(v50);
    v51 = a1[214];
    if (v51 != 1)
      swift_bridgeObjectRelease(v51);
    v52 = a1[218];
    if (v52 != 1)
      swift_bridgeObjectRelease(v52);
    v53 = a1[222];
    if (v53 != 1)
      swift_bridgeObjectRelease(v53);
    v54 = a1[226];
    if (v54 != 1)
      swift_bridgeObjectRelease(v54);
    v55 = a1[230];
    if (v55 != 1)
      swift_bridgeObjectRelease(v55);
    v56 = a1[234];
    if (v56 != 1)
      swift_bridgeObjectRelease(v56);
    v57 = a1[238];
    if (v57 != 1)
      swift_bridgeObjectRelease(v57);
    v58 = a1[242];
    if (v58 != 1)
      swift_bridgeObjectRelease(v58);
    v59 = a1[246];
    if (v59 != 1)
      swift_bridgeObjectRelease(v59);
    v60 = a1[250];
    if (v60 != 1)
      swift_bridgeObjectRelease(v60);
    v61 = a1[254];
    if (v61 != 1)
      swift_bridgeObjectRelease(v61);
    v62 = a1[258];
    if (v62 != 1)
      swift_bridgeObjectRelease(v62);
    v63 = a1[262];
    if (v63 != 1)
      swift_bridgeObjectRelease(v63);
    v64 = a1[266];
    if (v64 != 1)
      swift_bridgeObjectRelease(v64);
    v65 = a1[270];
    if (v65 != 1)
      swift_bridgeObjectRelease(v65);
    v66 = a1[274];
    if (v66 != 1)
      swift_bridgeObjectRelease(v66);
    v67 = a1[278];
    if (v67 != 1)
      swift_bridgeObjectRelease(v67);
    v68 = a1[282];
    if (v68 != 1)
      swift_bridgeObjectRelease(v68);
    v69 = a1[286];
    if (v69 != 1)
      swift_bridgeObjectRelease(v69);
    v70 = a1[290];
    if (v70 != 1)
      swift_bridgeObjectRelease(v70);
    v71 = a1[294];
    if (v71 != 1)
      swift_bridgeObjectRelease(v71);
    v72 = a1[298];
    if (v72 != 1)
      swift_bridgeObjectRelease(v72);
    v73 = a1[302];
    if (v73 != 1)
      swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(a1[312]);
    swift_bridgeObjectRelease(a1[313]);
  }
  if (a1[416] != 1)
  {
    v74 = a1[314];
    if (v74 != 1)
      swift_bridgeObjectRelease(v74);
    v75 = a1[318];
    if (v75 != 1)
      swift_bridgeObjectRelease(v75);
    v76 = a1[322];
    if (v76 != 1)
      swift_bridgeObjectRelease(v76);
    v77 = a1[326];
    if (v77 != 1)
      swift_bridgeObjectRelease(v77);
    v78 = a1[330];
    if (v78 != 1)
      swift_bridgeObjectRelease(v78);
    v79 = a1[334];
    if (v79 != 1)
      swift_bridgeObjectRelease(v79);
    v80 = a1[338];
    if (v80 != 1)
      swift_bridgeObjectRelease(v80);
    v81 = a1[342];
    if (v81 != 1)
      swift_bridgeObjectRelease(v81);
    v82 = a1[346];
    if (v82 != 1)
      swift_bridgeObjectRelease(v82);
    v83 = a1[350];
    if (v83 != 1)
      swift_bridgeObjectRelease(v83);
    v84 = a1[354];
    if (v84 != 1)
      swift_bridgeObjectRelease(v84);
    v85 = a1[358];
    if (v85 != 1)
      swift_bridgeObjectRelease(v85);
    v86 = a1[362];
    if (v86 != 1)
      swift_bridgeObjectRelease(v86);
    v87 = a1[366];
    if (v87 != 1)
      swift_bridgeObjectRelease(v87);
    v88 = a1[370];
    if (v88 != 1)
      swift_bridgeObjectRelease(v88);
    v89 = a1[374];
    if (v89 != 1)
      swift_bridgeObjectRelease(v89);
    v90 = a1[378];
    if (v90 != 1)
      swift_bridgeObjectRelease(v90);
    v91 = a1[382];
    if (v91 != 1)
      swift_bridgeObjectRelease(v91);
    v92 = a1[386];
    if (v92 != 1)
      swift_bridgeObjectRelease(v92);
    v93 = a1[390];
    if (v93 != 1)
      swift_bridgeObjectRelease(v93);
    v94 = a1[394];
    if (v94 != 1)
      swift_bridgeObjectRelease(v94);
    v95 = a1[398];
    if (v95 != 1)
      swift_bridgeObjectRelease(v95);
    v96 = a1[402];
    if (v96 != 1)
      swift_bridgeObjectRelease(v96);
    v97 = a1[406];
    if (v97 != 1)
      swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(a1[416]);
    swift_bridgeObjectRelease(a1[417]);
  }
  if (a1[520] != 1)
  {
    v98 = a1[418];
    if (v98 != 1)
      swift_bridgeObjectRelease(v98);
    v99 = a1[422];
    if (v99 != 1)
      swift_bridgeObjectRelease(v99);
    v100 = a1[426];
    if (v100 != 1)
      swift_bridgeObjectRelease(v100);
    v101 = a1[430];
    if (v101 != 1)
      swift_bridgeObjectRelease(v101);
    v102 = a1[434];
    if (v102 != 1)
      swift_bridgeObjectRelease(v102);
    v103 = a1[438];
    if (v103 != 1)
      swift_bridgeObjectRelease(v103);
    v104 = a1[442];
    if (v104 != 1)
      swift_bridgeObjectRelease(v104);
    v105 = a1[446];
    if (v105 != 1)
      swift_bridgeObjectRelease(v105);
    v106 = a1[450];
    if (v106 != 1)
      swift_bridgeObjectRelease(v106);
    v107 = a1[454];
    if (v107 != 1)
      swift_bridgeObjectRelease(v107);
    v108 = a1[458];
    if (v108 != 1)
      swift_bridgeObjectRelease(v108);
    v109 = a1[462];
    if (v109 != 1)
      swift_bridgeObjectRelease(v109);
    v110 = a1[466];
    if (v110 != 1)
      swift_bridgeObjectRelease(v110);
    v111 = a1[470];
    if (v111 != 1)
      swift_bridgeObjectRelease(v111);
    v112 = a1[474];
    if (v112 != 1)
      swift_bridgeObjectRelease(v112);
    v113 = a1[478];
    if (v113 != 1)
      swift_bridgeObjectRelease(v113);
    v114 = a1[482];
    if (v114 != 1)
      swift_bridgeObjectRelease(v114);
    v115 = a1[486];
    if (v115 != 1)
      swift_bridgeObjectRelease(v115);
    v116 = a1[490];
    if (v116 != 1)
      swift_bridgeObjectRelease(v116);
    v117 = a1[494];
    if (v117 != 1)
      swift_bridgeObjectRelease(v117);
    v118 = a1[498];
    if (v118 != 1)
      swift_bridgeObjectRelease(v118);
    v119 = a1[502];
    if (v119 != 1)
      swift_bridgeObjectRelease(v119);
    v120 = a1[506];
    if (v120 != 1)
      swift_bridgeObjectRelease(v120);
    v121 = a1[510];
    if (v121 != 1)
      swift_bridgeObjectRelease(v121);
    swift_bridgeObjectRelease(a1[520]);
    swift_bridgeObjectRelease(a1[521]);
  }
  if (a1[624] != 1)
  {
    v122 = a1[522];
    if (v122 != 1)
      swift_bridgeObjectRelease(v122);
    v123 = a1[526];
    if (v123 != 1)
      swift_bridgeObjectRelease(v123);
    v124 = a1[530];
    if (v124 != 1)
      swift_bridgeObjectRelease(v124);
    v125 = a1[534];
    if (v125 != 1)
      swift_bridgeObjectRelease(v125);
    v126 = a1[538];
    if (v126 != 1)
      swift_bridgeObjectRelease(v126);
    v127 = a1[542];
    if (v127 != 1)
      swift_bridgeObjectRelease(v127);
    v128 = a1[546];
    if (v128 != 1)
      swift_bridgeObjectRelease(v128);
    v129 = a1[550];
    if (v129 != 1)
      swift_bridgeObjectRelease(v129);
    v130 = a1[554];
    if (v130 != 1)
      swift_bridgeObjectRelease(v130);
    v131 = a1[558];
    if (v131 != 1)
      swift_bridgeObjectRelease(v131);
    v132 = a1[562];
    if (v132 != 1)
      swift_bridgeObjectRelease(v132);
    v133 = a1[566];
    if (v133 != 1)
      swift_bridgeObjectRelease(v133);
    v134 = a1[570];
    if (v134 != 1)
      swift_bridgeObjectRelease(v134);
    v135 = a1[574];
    if (v135 != 1)
      swift_bridgeObjectRelease(v135);
    v136 = a1[578];
    if (v136 != 1)
      swift_bridgeObjectRelease(v136);
    v137 = a1[582];
    if (v137 != 1)
      swift_bridgeObjectRelease(v137);
    v138 = a1[586];
    if (v138 != 1)
      swift_bridgeObjectRelease(v138);
    v139 = a1[590];
    if (v139 != 1)
      swift_bridgeObjectRelease(v139);
    v140 = a1[594];
    if (v140 != 1)
      swift_bridgeObjectRelease(v140);
    v141 = a1[598];
    if (v141 != 1)
      swift_bridgeObjectRelease(v141);
    v142 = a1[602];
    if (v142 != 1)
      swift_bridgeObjectRelease(v142);
    v143 = a1[606];
    if (v143 != 1)
      swift_bridgeObjectRelease(v143);
    v144 = a1[610];
    if (v144 != 1)
      swift_bridgeObjectRelease(v144);
    v145 = a1[614];
    if (v145 != 1)
      swift_bridgeObjectRelease(v145);
    swift_bridgeObjectRelease(a1[624]);
    swift_bridgeObjectRelease(a1[625]);
  }
  if (a1[728] != 1)
  {
    v146 = a1[626];
    if (v146 != 1)
      swift_bridgeObjectRelease(v146);
    v147 = a1[630];
    if (v147 != 1)
      swift_bridgeObjectRelease(v147);
    v148 = a1[634];
    if (v148 != 1)
      swift_bridgeObjectRelease(v148);
    v149 = a1[638];
    if (v149 != 1)
      swift_bridgeObjectRelease(v149);
    v150 = a1[642];
    if (v150 != 1)
      swift_bridgeObjectRelease(v150);
    v151 = a1[646];
    if (v151 != 1)
      swift_bridgeObjectRelease(v151);
    v152 = a1[650];
    if (v152 != 1)
      swift_bridgeObjectRelease(v152);
    v153 = a1[654];
    if (v153 != 1)
      swift_bridgeObjectRelease(v153);
    v154 = a1[658];
    if (v154 != 1)
      swift_bridgeObjectRelease(v154);
    v155 = a1[662];
    if (v155 != 1)
      swift_bridgeObjectRelease(v155);
    v156 = a1[666];
    if (v156 != 1)
      swift_bridgeObjectRelease(v156);
    v157 = a1[670];
    if (v157 != 1)
      swift_bridgeObjectRelease(v157);
    v158 = a1[674];
    if (v158 != 1)
      swift_bridgeObjectRelease(v158);
    v159 = a1[678];
    if (v159 != 1)
      swift_bridgeObjectRelease(v159);
    v160 = a1[682];
    if (v160 != 1)
      swift_bridgeObjectRelease(v160);
    v161 = a1[686];
    if (v161 != 1)
      swift_bridgeObjectRelease(v161);
    v162 = a1[690];
    if (v162 != 1)
      swift_bridgeObjectRelease(v162);
    v163 = a1[694];
    if (v163 != 1)
      swift_bridgeObjectRelease(v163);
    v164 = a1[698];
    if (v164 != 1)
      swift_bridgeObjectRelease(v164);
    v165 = a1[702];
    if (v165 != 1)
      swift_bridgeObjectRelease(v165);
    v166 = a1[706];
    if (v166 != 1)
      swift_bridgeObjectRelease(v166);
    v167 = a1[710];
    if (v167 != 1)
      swift_bridgeObjectRelease(v167);
    v168 = a1[714];
    if (v168 != 1)
      swift_bridgeObjectRelease(v168);
    v169 = a1[718];
    if (v169 != 1)
      swift_bridgeObjectRelease(v169);
    swift_bridgeObjectRelease(a1[728]);
    swift_bridgeObjectRelease(a1[729]);
  }
  return swift_bridgeObjectRelease(a1[730]);
}

uint64_t initializeWithCopy for IQModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

  v4 = a1 + 825;
  v5 = a2 + 825;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (uint64_t *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 832);
  swift_bridgeObjectRetain(v6);
  if (v8 == 1)
  {
    memcpy((void *)(a1 + 16), v7, 0x340uLL);
  }
  else
  {
    v9 = *v7;
    if (*v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v7 + 9);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v9;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      swift_bridgeObjectRetain(v9);
    }
    v10 = *(_QWORD *)(a2 + 48);
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      swift_bridgeObjectRetain(v10);
    }
    v11 = *(_QWORD *)(a2 + 80);
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v11;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      swift_bridgeObjectRetain(v11);
    }
    v12 = *(_QWORD *)(a2 + 112);
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    }
    else
    {
      *(_QWORD *)(a1 + 112) = v12;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      swift_bridgeObjectRetain(v12);
    }
    v13 = *(_QWORD *)(a2 + 144);
    if (v13 == 1)
    {
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    }
    else
    {
      *(_QWORD *)(a1 + 144) = v13;
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      swift_bridgeObjectRetain(v13);
    }
    v14 = *(_QWORD *)(a2 + 176);
    if (v14 == 1)
    {
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
    }
    else
    {
      *(_QWORD *)(a1 + 176) = v14;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      swift_bridgeObjectRetain(v14);
    }
    v15 = *(_QWORD *)(a2 + 208);
    if (v15 == 1)
    {
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    }
    else
    {
      *(_QWORD *)(a1 + 208) = v15;
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      swift_bridgeObjectRetain(v15);
    }
    v16 = *(_QWORD *)(a2 + 240);
    if (v16 == 1)
    {
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    }
    else
    {
      *(_QWORD *)(a1 + 240) = v16;
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      swift_bridgeObjectRetain(v16);
    }
    v17 = *(_QWORD *)(a2 + 272);
    if (v17 == 1)
    {
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    }
    else
    {
      *(_QWORD *)(a1 + 272) = v17;
      *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
      swift_bridgeObjectRetain(v17);
    }
    v18 = *(_QWORD *)(a2 + 304);
    if (v18 == 1)
    {
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
    }
    else
    {
      *(_QWORD *)(a1 + 304) = v18;
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      swift_bridgeObjectRetain(v18);
    }
    v19 = *(_QWORD *)(a2 + 336);
    if (v19 == 1)
    {
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
    }
    else
    {
      *(_QWORD *)(a1 + 336) = v19;
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
      swift_bridgeObjectRetain(v19);
    }
    v20 = *(_QWORD *)(a2 + 368);
    if (v20 == 1)
    {
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
    }
    else
    {
      *(_QWORD *)(a1 + 368) = v20;
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      swift_bridgeObjectRetain(v20);
    }
    v21 = *(_QWORD *)(a2 + 400);
    if (v21 == 1)
    {
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
    }
    else
    {
      *(_QWORD *)(a1 + 400) = v21;
      *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
      swift_bridgeObjectRetain(v21);
    }
    v22 = *(_QWORD *)(a2 + 432);
    if (v22 == 1)
    {
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
    }
    else
    {
      *(_QWORD *)(a1 + 432) = v22;
      *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      swift_bridgeObjectRetain(v22);
    }
    v23 = *(_QWORD *)(a2 + 464);
    if (v23 == 1)
    {
      *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
    }
    else
    {
      *(_QWORD *)(a1 + 464) = v23;
      *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      swift_bridgeObjectRetain(v23);
    }
    v24 = *(_QWORD *)(a2 + 496);
    if (v24 == 1)
    {
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
    }
    else
    {
      *(_QWORD *)(a1 + 496) = v24;
      *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
      swift_bridgeObjectRetain(v24);
    }
    v25 = *(_QWORD *)(a2 + 528);
    if (v25 == 1)
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
    }
    else
    {
      *(_QWORD *)(a1 + 528) = v25;
      *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
      swift_bridgeObjectRetain(v25);
    }
    v26 = *(_QWORD *)(a2 + 560);
    if (v26 == 1)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
    }
    else
    {
      *(_QWORD *)(a1 + 560) = v26;
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
      swift_bridgeObjectRetain(v26);
    }
    v27 = *(_QWORD *)(a2 + 592);
    if (v27 == 1)
    {
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    }
    else
    {
      *(_QWORD *)(a1 + 592) = v27;
      *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
      swift_bridgeObjectRetain(v27);
    }
    v28 = *(_QWORD *)(a2 + 624);
    if (v28 == 1)
    {
      *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
    }
    else
    {
      *(_QWORD *)(a1 + 624) = v28;
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
      *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
      swift_bridgeObjectRetain(v28);
    }
    v29 = *(_QWORD *)(a2 + 656);
    if (v29 == 1)
    {
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
    }
    else
    {
      *(_QWORD *)(a1 + 656) = v29;
      *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
      *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
      *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(a2 + 688);
    if (v30 == 1)
    {
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
    }
    else
    {
      *(_QWORD *)(a1 + 688) = v30;
      *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
      *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
      *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
      swift_bridgeObjectRetain(v30);
    }
    v31 = *(_QWORD *)(a2 + 720);
    if (v31 == 1)
    {
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
    }
    else
    {
      *(_QWORD *)(a1 + 720) = v31;
      *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
      *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
      *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
      swift_bridgeObjectRetain(v31);
    }
    v32 = *(_QWORD *)(a2 + 752);
    if (v32 == 1)
    {
      *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
      *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
    }
    else
    {
      *(_QWORD *)(a1 + 752) = v32;
      *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
      *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
      swift_bridgeObjectRetain(v32);
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
    *(_BYTE *)(a1 + 824) = *(_BYTE *)(a2 + 824);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
    *(_DWORD *)v4 = *(_DWORD *)v5;
    *(_WORD *)(a1 + 829) = *(_WORD *)(a2 + 829);
    *(_BYTE *)(a1 + 831) = *(_BYTE *)(a2 + 831);
    *(_QWORD *)(a1 + 832) = v8;
    v33 = *(_QWORD *)(a2 + 840);
    *(_QWORD *)(a1 + 840) = v33;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v33);
  }
  v34 = (_OWORD *)(a1 + 848);
  v35 = (uint64_t *)(a2 + 848);
  v36 = *(_QWORD *)(a2 + 1664);
  if (v36 == 1)
  {
    memcpy(v34, v35, 0x340uLL);
  }
  else
  {
    v37 = *v35;
    if (*v35 == 1)
    {
      *v34 = *(_OWORD *)v35;
      *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
    }
    else
    {
      *(_QWORD *)(a1 + 848) = v37;
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 872);
      swift_bridgeObjectRetain(v37);
    }
    v38 = *(_QWORD *)(a2 + 880);
    if (v38 == 1)
    {
      *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
    }
    else
    {
      *(_QWORD *)(a1 + 880) = v38;
      *(_BYTE *)(a1 + 888) = *(_BYTE *)(a2 + 888);
      *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
      *(_BYTE *)(a1 + 904) = *(_BYTE *)(a2 + 904);
      swift_bridgeObjectRetain(v38);
    }
    v39 = *(_QWORD *)(a2 + 912);
    if (v39 == 1)
    {
      *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
      *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
    }
    else
    {
      *(_QWORD *)(a1 + 912) = v39;
      *(_BYTE *)(a1 + 920) = *(_BYTE *)(a2 + 920);
      *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
      *(_BYTE *)(a1 + 936) = *(_BYTE *)(a2 + 936);
      swift_bridgeObjectRetain(v39);
    }
    v40 = *(_QWORD *)(a2 + 944);
    if (v40 == 1)
    {
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    }
    else
    {
      *(_QWORD *)(a1 + 944) = v40;
      *(_BYTE *)(a1 + 952) = *(_BYTE *)(a2 + 952);
      *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
      *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
      swift_bridgeObjectRetain(v40);
    }
    v41 = *(_QWORD *)(a2 + 976);
    if (v41 == 1)
    {
      *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
      *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
    }
    else
    {
      *(_QWORD *)(a1 + 976) = v41;
      *(_BYTE *)(a1 + 984) = *(_BYTE *)(a2 + 984);
      *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
      *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a2 + 1000);
      swift_bridgeObjectRetain(v41);
    }
    v42 = *(_QWORD *)(a2 + 1008);
    if (v42 == 1)
    {
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
    }
    else
    {
      *(_QWORD *)(a1 + 1008) = v42;
      *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 1016);
      *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
      *(_BYTE *)(a1 + 1032) = *(_BYTE *)(a2 + 1032);
      swift_bridgeObjectRetain(v42);
    }
    v43 = *(_QWORD *)(a2 + 1040);
    if (v43 == 1)
    {
      *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
    }
    else
    {
      *(_QWORD *)(a1 + 1040) = v43;
      *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
      *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
      *(_BYTE *)(a1 + 1064) = *(_BYTE *)(a2 + 1064);
      swift_bridgeObjectRetain(v43);
    }
    v44 = *(_QWORD *)(a2 + 1072);
    if (v44 == 1)
    {
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
      *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
    }
    else
    {
      *(_QWORD *)(a1 + 1072) = v44;
      *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a2 + 1080);
      *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
      *(_BYTE *)(a1 + 1096) = *(_BYTE *)(a2 + 1096);
      swift_bridgeObjectRetain(v44);
    }
    v45 = *(_QWORD *)(a2 + 1104);
    if (v45 == 1)
    {
      *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
      *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
    }
    else
    {
      *(_QWORD *)(a1 + 1104) = v45;
      *(_BYTE *)(a1 + 1112) = *(_BYTE *)(a2 + 1112);
      *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
      *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
      swift_bridgeObjectRetain(v45);
    }
    v46 = *(_QWORD *)(a2 + 1136);
    if (v46 == 1)
    {
      *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
      *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
    }
    else
    {
      *(_QWORD *)(a1 + 1136) = v46;
      *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
      *(_BYTE *)(a1 + 1160) = *(_BYTE *)(a2 + 1160);
      swift_bridgeObjectRetain(v46);
    }
    v47 = *(_QWORD *)(a2 + 1168);
    if (v47 == 1)
    {
      *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
      *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
    }
    else
    {
      *(_QWORD *)(a1 + 1168) = v47;
      *(_BYTE *)(a1 + 1176) = *(_BYTE *)(a2 + 1176);
      *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 1184);
      *(_BYTE *)(a1 + 1192) = *(_BYTE *)(a2 + 1192);
      swift_bridgeObjectRetain(v47);
    }
    v48 = *(_QWORD *)(a2 + 1200);
    if (v48 == 1)
    {
      *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
      *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
    }
    else
    {
      *(_QWORD *)(a1 + 1200) = v48;
      *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 1208);
      *(_QWORD *)(a1 + 1216) = *(_QWORD *)(a2 + 1216);
      *(_BYTE *)(a1 + 1224) = *(_BYTE *)(a2 + 1224);
      swift_bridgeObjectRetain(v48);
    }
    v49 = *(_QWORD *)(a2 + 1232);
    if (v49 == 1)
    {
      *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
      *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
    }
    else
    {
      *(_QWORD *)(a1 + 1232) = v49;
      *(_BYTE *)(a1 + 1240) = *(_BYTE *)(a2 + 1240);
      *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a2 + 1248);
      *(_BYTE *)(a1 + 1256) = *(_BYTE *)(a2 + 1256);
      swift_bridgeObjectRetain(v49);
    }
    v50 = *(_QWORD *)(a2 + 1264);
    if (v50 == 1)
    {
      *(_OWORD *)(a1 + 1264) = *(_OWORD *)(a2 + 1264);
      *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
    }
    else
    {
      *(_QWORD *)(a1 + 1264) = v50;
      *(_BYTE *)(a1 + 1272) = *(_BYTE *)(a2 + 1272);
      *(_QWORD *)(a1 + 1280) = *(_QWORD *)(a2 + 1280);
      *(_BYTE *)(a1 + 1288) = *(_BYTE *)(a2 + 1288);
      swift_bridgeObjectRetain(v50);
    }
    v51 = *(_QWORD *)(a2 + 1296);
    if (v51 == 1)
    {
      *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a2 + 1296);
      *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
    }
    else
    {
      *(_QWORD *)(a1 + 1296) = v51;
      *(_BYTE *)(a1 + 1304) = *(_BYTE *)(a2 + 1304);
      *(_QWORD *)(a1 + 1312) = *(_QWORD *)(a2 + 1312);
      *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
      swift_bridgeObjectRetain(v51);
    }
    v52 = *(_QWORD *)(a2 + 1328);
    if (v52 == 1)
    {
      *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
      *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
    }
    else
    {
      *(_QWORD *)(a1 + 1328) = v52;
      *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
      *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a2 + 1344);
      *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
      swift_bridgeObjectRetain(v52);
    }
    v53 = *(_QWORD *)(a2 + 1360);
    if (v53 == 1)
    {
      *(_OWORD *)(a1 + 1360) = *(_OWORD *)(a2 + 1360);
      *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
    }
    else
    {
      *(_QWORD *)(a1 + 1360) = v53;
      *(_BYTE *)(a1 + 1368) = *(_BYTE *)(a2 + 1368);
      *(_QWORD *)(a1 + 1376) = *(_QWORD *)(a2 + 1376);
      *(_BYTE *)(a1 + 1384) = *(_BYTE *)(a2 + 1384);
      swift_bridgeObjectRetain(v53);
    }
    v54 = *(_QWORD *)(a2 + 1392);
    if (v54 == 1)
    {
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
    }
    else
    {
      *(_QWORD *)(a1 + 1392) = v54;
      *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
      *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
      *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
      swift_bridgeObjectRetain(v54);
    }
    v55 = *(_QWORD *)(a2 + 1424);
    if (v55 == 1)
    {
      *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 1424);
      *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
    }
    else
    {
      *(_QWORD *)(a1 + 1424) = v55;
      *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
      *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a2 + 1440);
      *(_BYTE *)(a1 + 1448) = *(_BYTE *)(a2 + 1448);
      swift_bridgeObjectRetain(v55);
    }
    v56 = *(_QWORD *)(a2 + 1456);
    if (v56 == 1)
    {
      *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
    }
    else
    {
      *(_QWORD *)(a1 + 1456) = v56;
      *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
      *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
      *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
      swift_bridgeObjectRetain(v56);
    }
    v57 = *(_QWORD *)(a2 + 1488);
    if (v57 == 1)
    {
      *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a2 + 1488);
      *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
    }
    else
    {
      *(_QWORD *)(a1 + 1488) = v57;
      *(_BYTE *)(a1 + 1496) = *(_BYTE *)(a2 + 1496);
      *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
      *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
      swift_bridgeObjectRetain(v57);
    }
    v58 = *(_QWORD *)(a2 + 1520);
    if (v58 == 1)
    {
      *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
      *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
    }
    else
    {
      *(_QWORD *)(a1 + 1520) = v58;
      *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
      *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 1536);
      *(_BYTE *)(a1 + 1544) = *(_BYTE *)(a2 + 1544);
      swift_bridgeObjectRetain(v58);
    }
    v59 = *(_QWORD *)(a2 + 1552);
    if (v59 == 1)
    {
      *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
      *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
    }
    else
    {
      *(_QWORD *)(a1 + 1552) = v59;
      *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a2 + 1560);
      *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a2 + 1568);
      *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
      swift_bridgeObjectRetain(v59);
    }
    v60 = *(_QWORD *)(a2 + 1584);
    if (v60 == 1)
    {
      *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a2 + 1584);
      *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
    }
    else
    {
      *(_QWORD *)(a1 + 1584) = v60;
      *(_BYTE *)(a1 + 1592) = *(_BYTE *)(a2 + 1592);
      *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
      *(_BYTE *)(a1 + 1608) = *(_BYTE *)(a2 + 1608);
      swift_bridgeObjectRetain(v60);
    }
    *(_OWORD *)(a1 + 1616) = *(_OWORD *)(a2 + 1616);
    *(_BYTE *)(a1 + 1632) = *(_BYTE *)(a2 + 1632);
    *(_BYTE *)(a1 + 1656) = *(_BYTE *)(a2 + 1656);
    *(_OWORD *)(a1 + 1640) = *(_OWORD *)(a2 + 1640);
    *(_DWORD *)(v4 + 832) = *(_DWORD *)(v5 + 832);
    *(_WORD *)(a1 + 1661) = *(_WORD *)(a2 + 1661);
    *(_BYTE *)(a1 + 1663) = *(_BYTE *)(a2 + 1663);
    *(_QWORD *)(a1 + 1664) = v36;
    v61 = *(_QWORD *)(a2 + 1672);
    *(_QWORD *)(a1 + 1672) = v61;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v61);
  }
  v62 = (_OWORD *)(a1 + 1680);
  v63 = (uint64_t *)(a2 + 1680);
  v64 = *(_QWORD *)(a2 + 2496);
  if (v64 == 1)
  {
    memcpy(v62, v63, 0x340uLL);
  }
  else
  {
    v65 = *v63;
    if (*v63 == 1)
    {
      *v62 = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
    }
    else
    {
      *(_QWORD *)(a1 + 1680) = v65;
      *(_BYTE *)(a1 + 1688) = *(_BYTE *)(a2 + 1688);
      *(_QWORD *)(a1 + 1696) = *(_QWORD *)(a2 + 1696);
      *(_BYTE *)(a1 + 1704) = *(_BYTE *)(a2 + 1704);
      swift_bridgeObjectRetain(v65);
    }
    v66 = *(_QWORD *)(a2 + 1712);
    if (v66 == 1)
    {
      *(_OWORD *)(a1 + 1712) = *(_OWORD *)(a2 + 1712);
      *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
    }
    else
    {
      *(_QWORD *)(a1 + 1712) = v66;
      *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 1720);
      *(_QWORD *)(a1 + 1728) = *(_QWORD *)(a2 + 1728);
      *(_BYTE *)(a1 + 1736) = *(_BYTE *)(a2 + 1736);
      swift_bridgeObjectRetain(v66);
    }
    v67 = *(_QWORD *)(a2 + 1744);
    if (v67 == 1)
    {
      *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
      *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
    }
    else
    {
      *(_QWORD *)(a1 + 1744) = v67;
      *(_BYTE *)(a1 + 1752) = *(_BYTE *)(a2 + 1752);
      *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a2 + 1760);
      *(_BYTE *)(a1 + 1768) = *(_BYTE *)(a2 + 1768);
      swift_bridgeObjectRetain(v67);
    }
    v68 = *(_QWORD *)(a2 + 1776);
    if (v68 == 1)
    {
      *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
      *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
    }
    else
    {
      *(_QWORD *)(a1 + 1776) = v68;
      *(_BYTE *)(a1 + 1784) = *(_BYTE *)(a2 + 1784);
      *(_QWORD *)(a1 + 1792) = *(_QWORD *)(a2 + 1792);
      *(_BYTE *)(a1 + 1800) = *(_BYTE *)(a2 + 1800);
      swift_bridgeObjectRetain(v68);
    }
    v69 = *(_QWORD *)(a2 + 1808);
    if (v69 == 1)
    {
      *(_OWORD *)(a1 + 1808) = *(_OWORD *)(a2 + 1808);
      *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
    }
    else
    {
      *(_QWORD *)(a1 + 1808) = v69;
      *(_BYTE *)(a1 + 1816) = *(_BYTE *)(a2 + 1816);
      *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
      *(_BYTE *)(a1 + 1832) = *(_BYTE *)(a2 + 1832);
      swift_bridgeObjectRetain(v69);
    }
    v70 = *(_QWORD *)(a2 + 1840);
    if (v70 == 1)
    {
      *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
      *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
    }
    else
    {
      *(_QWORD *)(a1 + 1840) = v70;
      *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a2 + 1848);
      *(_QWORD *)(a1 + 1856) = *(_QWORD *)(a2 + 1856);
      *(_BYTE *)(a1 + 1864) = *(_BYTE *)(a2 + 1864);
      swift_bridgeObjectRetain(v70);
    }
    v71 = *(_QWORD *)(a2 + 1872);
    if (v71 == 1)
    {
      *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a2 + 1872);
      *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
    }
    else
    {
      *(_QWORD *)(a1 + 1872) = v71;
      *(_BYTE *)(a1 + 1880) = *(_BYTE *)(a2 + 1880);
      *(_QWORD *)(a1 + 1888) = *(_QWORD *)(a2 + 1888);
      *(_BYTE *)(a1 + 1896) = *(_BYTE *)(a2 + 1896);
      swift_bridgeObjectRetain(v71);
    }
    v72 = *(_QWORD *)(a2 + 1904);
    if (v72 == 1)
    {
      *(_OWORD *)(a1 + 1904) = *(_OWORD *)(a2 + 1904);
      *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
    }
    else
    {
      *(_QWORD *)(a1 + 1904) = v72;
      *(_BYTE *)(a1 + 1912) = *(_BYTE *)(a2 + 1912);
      *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a2 + 1920);
      *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
      swift_bridgeObjectRetain(v72);
    }
    v73 = *(_QWORD *)(a2 + 1936);
    if (v73 == 1)
    {
      *(_OWORD *)(a1 + 1936) = *(_OWORD *)(a2 + 1936);
      *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
    }
    else
    {
      *(_QWORD *)(a1 + 1936) = v73;
      *(_BYTE *)(a1 + 1944) = *(_BYTE *)(a2 + 1944);
      *(_QWORD *)(a1 + 1952) = *(_QWORD *)(a2 + 1952);
      *(_BYTE *)(a1 + 1960) = *(_BYTE *)(a2 + 1960);
      swift_bridgeObjectRetain(v73);
    }
    v74 = *(_QWORD *)(a2 + 1968);
    if (v74 == 1)
    {
      *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a2 + 1968);
      *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
    }
    else
    {
      *(_QWORD *)(a1 + 1968) = v74;
      *(_BYTE *)(a1 + 1976) = *(_BYTE *)(a2 + 1976);
      *(_QWORD *)(a1 + 1984) = *(_QWORD *)(a2 + 1984);
      *(_BYTE *)(a1 + 1992) = *(_BYTE *)(a2 + 1992);
      swift_bridgeObjectRetain(v74);
    }
    v75 = *(_QWORD *)(a2 + 2000);
    if (v75 == 1)
    {
      *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
      *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
    }
    else
    {
      *(_QWORD *)(a1 + 2000) = v75;
      *(_BYTE *)(a1 + 2008) = *(_BYTE *)(a2 + 2008);
      *(_QWORD *)(a1 + 2016) = *(_QWORD *)(a2 + 2016);
      *(_BYTE *)(a1 + 2024) = *(_BYTE *)(a2 + 2024);
      swift_bridgeObjectRetain(v75);
    }
    v76 = *(_QWORD *)(a2 + 2032);
    if (v76 == 1)
    {
      *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a2 + 2032);
      *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
    }
    else
    {
      *(_QWORD *)(a1 + 2032) = v76;
      *(_BYTE *)(a1 + 2040) = *(_BYTE *)(a2 + 2040);
      *(_QWORD *)(a1 + 2048) = *(_QWORD *)(a2 + 2048);
      *(_BYTE *)(a1 + 2056) = *(_BYTE *)(a2 + 2056);
      swift_bridgeObjectRetain(v76);
    }
    v77 = *(_QWORD *)(a2 + 2064);
    if (v77 == 1)
    {
      *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a2 + 2064);
      *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
    }
    else
    {
      *(_QWORD *)(a1 + 2064) = v77;
      *(_BYTE *)(a1 + 2072) = *(_BYTE *)(a2 + 2072);
      *(_QWORD *)(a1 + 2080) = *(_QWORD *)(a2 + 2080);
      *(_BYTE *)(a1 + 2088) = *(_BYTE *)(a2 + 2088);
      swift_bridgeObjectRetain(v77);
    }
    v78 = *(_QWORD *)(a2 + 2096);
    if (v78 == 1)
    {
      *(_OWORD *)(a1 + 2096) = *(_OWORD *)(a2 + 2096);
      *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
    }
    else
    {
      *(_QWORD *)(a1 + 2096) = v78;
      *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
      *(_QWORD *)(a1 + 2112) = *(_QWORD *)(a2 + 2112);
      *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
      swift_bridgeObjectRetain(v78);
    }
    v79 = *(_QWORD *)(a2 + 2128);
    if (v79 == 1)
    {
      *(_OWORD *)(a1 + 2128) = *(_OWORD *)(a2 + 2128);
      *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
    }
    else
    {
      *(_QWORD *)(a1 + 2128) = v79;
      *(_BYTE *)(a1 + 2136) = *(_BYTE *)(a2 + 2136);
      *(_QWORD *)(a1 + 2144) = *(_QWORD *)(a2 + 2144);
      *(_BYTE *)(a1 + 2152) = *(_BYTE *)(a2 + 2152);
      swift_bridgeObjectRetain(v79);
    }
    v80 = *(_QWORD *)(a2 + 2160);
    if (v80 == 1)
    {
      *(_OWORD *)(a1 + 2160) = *(_OWORD *)(a2 + 2160);
      *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
    }
    else
    {
      *(_QWORD *)(a1 + 2160) = v80;
      *(_BYTE *)(a1 + 2168) = *(_BYTE *)(a2 + 2168);
      *(_QWORD *)(a1 + 2176) = *(_QWORD *)(a2 + 2176);
      *(_BYTE *)(a1 + 2184) = *(_BYTE *)(a2 + 2184);
      swift_bridgeObjectRetain(v80);
    }
    v81 = *(_QWORD *)(a2 + 2192);
    if (v81 == 1)
    {
      *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a2 + 2192);
      *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
    }
    else
    {
      *(_QWORD *)(a1 + 2192) = v81;
      *(_BYTE *)(a1 + 2200) = *(_BYTE *)(a2 + 2200);
      *(_QWORD *)(a1 + 2208) = *(_QWORD *)(a2 + 2208);
      *(_BYTE *)(a1 + 2216) = *(_BYTE *)(a2 + 2216);
      swift_bridgeObjectRetain(v81);
    }
    v82 = *(_QWORD *)(a2 + 2224);
    if (v82 == 1)
    {
      *(_OWORD *)(a1 + 2224) = *(_OWORD *)(a2 + 2224);
      *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
    }
    else
    {
      *(_QWORD *)(a1 + 2224) = v82;
      *(_BYTE *)(a1 + 2232) = *(_BYTE *)(a2 + 2232);
      *(_QWORD *)(a1 + 2240) = *(_QWORD *)(a2 + 2240);
      *(_BYTE *)(a1 + 2248) = *(_BYTE *)(a2 + 2248);
      swift_bridgeObjectRetain(v82);
    }
    v83 = *(_QWORD *)(a2 + 2256);
    if (v83 == 1)
    {
      *(_OWORD *)(a1 + 2256) = *(_OWORD *)(a2 + 2256);
      *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
    }
    else
    {
      *(_QWORD *)(a1 + 2256) = v83;
      *(_BYTE *)(a1 + 2264) = *(_BYTE *)(a2 + 2264);
      *(_QWORD *)(a1 + 2272) = *(_QWORD *)(a2 + 2272);
      *(_BYTE *)(a1 + 2280) = *(_BYTE *)(a2 + 2280);
      swift_bridgeObjectRetain(v83);
    }
    v84 = *(_QWORD *)(a2 + 2288);
    if (v84 == 1)
    {
      *(_OWORD *)(a1 + 2288) = *(_OWORD *)(a2 + 2288);
      *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
    }
    else
    {
      *(_QWORD *)(a1 + 2288) = v84;
      *(_BYTE *)(a1 + 2296) = *(_BYTE *)(a2 + 2296);
      *(_QWORD *)(a1 + 2304) = *(_QWORD *)(a2 + 2304);
      *(_BYTE *)(a1 + 2312) = *(_BYTE *)(a2 + 2312);
      swift_bridgeObjectRetain(v84);
    }
    v85 = *(_QWORD *)(a2 + 2320);
    if (v85 == 1)
    {
      *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a2 + 2320);
      *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
    }
    else
    {
      *(_QWORD *)(a1 + 2320) = v85;
      *(_BYTE *)(a1 + 2328) = *(_BYTE *)(a2 + 2328);
      *(_QWORD *)(a1 + 2336) = *(_QWORD *)(a2 + 2336);
      *(_BYTE *)(a1 + 2344) = *(_BYTE *)(a2 + 2344);
      swift_bridgeObjectRetain(v85);
    }
    v86 = *(_QWORD *)(a2 + 2352);
    if (v86 == 1)
    {
      *(_OWORD *)(a1 + 2352) = *(_OWORD *)(a2 + 2352);
      *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
    }
    else
    {
      *(_QWORD *)(a1 + 2352) = v86;
      *(_BYTE *)(a1 + 2360) = *(_BYTE *)(a2 + 2360);
      *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
      *(_BYTE *)(a1 + 2376) = *(_BYTE *)(a2 + 2376);
      swift_bridgeObjectRetain(v86);
    }
    v87 = *(_QWORD *)(a2 + 2384);
    if (v87 == 1)
    {
      *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a2 + 2384);
      *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
    }
    else
    {
      *(_QWORD *)(a1 + 2384) = v87;
      *(_BYTE *)(a1 + 2392) = *(_BYTE *)(a2 + 2392);
      *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a2 + 2400);
      *(_BYTE *)(a1 + 2408) = *(_BYTE *)(a2 + 2408);
      swift_bridgeObjectRetain(v87);
    }
    v88 = *(_QWORD *)(a2 + 2416);
    if (v88 == 1)
    {
      *(_OWORD *)(a1 + 2416) = *(_OWORD *)(a2 + 2416);
      *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
    }
    else
    {
      *(_QWORD *)(a1 + 2416) = v88;
      *(_BYTE *)(a1 + 2424) = *(_BYTE *)(a2 + 2424);
      *(_QWORD *)(a1 + 2432) = *(_QWORD *)(a2 + 2432);
      *(_BYTE *)(a1 + 2440) = *(_BYTE *)(a2 + 2440);
      swift_bridgeObjectRetain(v88);
    }
    *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a2 + 2448);
    *(_BYTE *)(a1 + 2464) = *(_BYTE *)(a2 + 2464);
    *(_BYTE *)(a1 + 2488) = *(_BYTE *)(a2 + 2488);
    *(_OWORD *)(a1 + 2472) = *(_OWORD *)(a2 + 2472);
    *(_DWORD *)(v4 + 1664) = *(_DWORD *)(v5 + 1664);
    *(_WORD *)(a1 + 2493) = *(_WORD *)(a2 + 2493);
    *(_BYTE *)(a1 + 2495) = *(_BYTE *)(a2 + 2495);
    *(_QWORD *)(a1 + 2496) = v64;
    v89 = *(_QWORD *)(a2 + 2504);
    *(_QWORD *)(a1 + 2504) = v89;
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v89);
  }
  v90 = (_OWORD *)(a1 + 2512);
  v91 = (uint64_t *)(a2 + 2512);
  v92 = *(_QWORD *)(a2 + 3328);
  if (v92 == 1)
  {
    memcpy(v90, v91, 0x340uLL);
  }
  else
  {
    v93 = *v91;
    if (*v91 == 1)
    {
      *v90 = *(_OWORD *)v91;
      *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
    }
    else
    {
      *(_QWORD *)(a1 + 2512) = v93;
      *(_BYTE *)(a1 + 2520) = *(_BYTE *)(a2 + 2520);
      *(_QWORD *)(a1 + 2528) = *(_QWORD *)(a2 + 2528);
      *(_BYTE *)(a1 + 2536) = *(_BYTE *)(a2 + 2536);
      swift_bridgeObjectRetain(v93);
    }
    v94 = *(_QWORD *)(a2 + 2544);
    if (v94 == 1)
    {
      *(_OWORD *)(a1 + 2544) = *(_OWORD *)(a2 + 2544);
      *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
    }
    else
    {
      *(_QWORD *)(a1 + 2544) = v94;
      *(_BYTE *)(a1 + 2552) = *(_BYTE *)(a2 + 2552);
      *(_QWORD *)(a1 + 2560) = *(_QWORD *)(a2 + 2560);
      *(_BYTE *)(a1 + 2568) = *(_BYTE *)(a2 + 2568);
      swift_bridgeObjectRetain(v94);
    }
    v95 = *(_QWORD *)(a2 + 2576);
    if (v95 == 1)
    {
      *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a2 + 2576);
      *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
    }
    else
    {
      *(_QWORD *)(a1 + 2576) = v95;
      *(_BYTE *)(a1 + 2584) = *(_BYTE *)(a2 + 2584);
      *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a2 + 2592);
      *(_BYTE *)(a1 + 2600) = *(_BYTE *)(a2 + 2600);
      swift_bridgeObjectRetain(v95);
    }
    v96 = *(_QWORD *)(a2 + 2608);
    if (v96 == 1)
    {
      *(_OWORD *)(a1 + 2608) = *(_OWORD *)(a2 + 2608);
      *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
    }
    else
    {
      *(_QWORD *)(a1 + 2608) = v96;
      *(_BYTE *)(a1 + 2616) = *(_BYTE *)(a2 + 2616);
      *(_QWORD *)(a1 + 2624) = *(_QWORD *)(a2 + 2624);
      *(_BYTE *)(a1 + 2632) = *(_BYTE *)(a2 + 2632);
      swift_bridgeObjectRetain(v96);
    }
    v97 = *(_QWORD *)(a2 + 2640);
    if (v97 == 1)
    {
      *(_OWORD *)(a1 + 2640) = *(_OWORD *)(a2 + 2640);
      *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
    }
    else
    {
      *(_QWORD *)(a1 + 2640) = v97;
      *(_BYTE *)(a1 + 2648) = *(_BYTE *)(a2 + 2648);
      *(_QWORD *)(a1 + 2656) = *(_QWORD *)(a2 + 2656);
      *(_BYTE *)(a1 + 2664) = *(_BYTE *)(a2 + 2664);
      swift_bridgeObjectRetain(v97);
    }
    v98 = *(_QWORD *)(a2 + 2672);
    if (v98 == 1)
    {
      *(_OWORD *)(a1 + 2672) = *(_OWORD *)(a2 + 2672);
      *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
    }
    else
    {
      *(_QWORD *)(a1 + 2672) = v98;
      *(_BYTE *)(a1 + 2680) = *(_BYTE *)(a2 + 2680);
      *(_QWORD *)(a1 + 2688) = *(_QWORD *)(a2 + 2688);
      *(_BYTE *)(a1 + 2696) = *(_BYTE *)(a2 + 2696);
      swift_bridgeObjectRetain(v98);
    }
    v99 = *(_QWORD *)(a2 + 2704);
    if (v99 == 1)
    {
      *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 2704);
      *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
    }
    else
    {
      *(_QWORD *)(a1 + 2704) = v99;
      *(_BYTE *)(a1 + 2712) = *(_BYTE *)(a2 + 2712);
      *(_QWORD *)(a1 + 2720) = *(_QWORD *)(a2 + 2720);
      *(_BYTE *)(a1 + 2728) = *(_BYTE *)(a2 + 2728);
      swift_bridgeObjectRetain(v99);
    }
    v100 = *(_QWORD *)(a2 + 2736);
    if (v100 == 1)
    {
      *(_OWORD *)(a1 + 2736) = *(_OWORD *)(a2 + 2736);
      *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
    }
    else
    {
      *(_QWORD *)(a1 + 2736) = v100;
      *(_BYTE *)(a1 + 2744) = *(_BYTE *)(a2 + 2744);
      *(_QWORD *)(a1 + 2752) = *(_QWORD *)(a2 + 2752);
      *(_BYTE *)(a1 + 2760) = *(_BYTE *)(a2 + 2760);
      swift_bridgeObjectRetain(v100);
    }
    v101 = *(_QWORD *)(a2 + 2768);
    if (v101 == 1)
    {
      *(_OWORD *)(a1 + 2768) = *(_OWORD *)(a2 + 2768);
      *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
    }
    else
    {
      *(_QWORD *)(a1 + 2768) = v101;
      *(_BYTE *)(a1 + 2776) = *(_BYTE *)(a2 + 2776);
      *(_QWORD *)(a1 + 2784) = *(_QWORD *)(a2 + 2784);
      *(_BYTE *)(a1 + 2792) = *(_BYTE *)(a2 + 2792);
      swift_bridgeObjectRetain(v101);
    }
    v102 = *(_QWORD *)(a2 + 2800);
    if (v102 == 1)
    {
      *(_OWORD *)(a1 + 2800) = *(_OWORD *)(a2 + 2800);
      *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
    }
    else
    {
      *(_QWORD *)(a1 + 2800) = v102;
      *(_BYTE *)(a1 + 2808) = *(_BYTE *)(a2 + 2808);
      *(_QWORD *)(a1 + 2816) = *(_QWORD *)(a2 + 2816);
      *(_BYTE *)(a1 + 2824) = *(_BYTE *)(a2 + 2824);
      swift_bridgeObjectRetain(v102);
    }
    v103 = *(_QWORD *)(a2 + 2832);
    if (v103 == 1)
    {
      *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
      *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
    }
    else
    {
      *(_QWORD *)(a1 + 2832) = v103;
      *(_BYTE *)(a1 + 2840) = *(_BYTE *)(a2 + 2840);
      *(_QWORD *)(a1 + 2848) = *(_QWORD *)(a2 + 2848);
      *(_BYTE *)(a1 + 2856) = *(_BYTE *)(a2 + 2856);
      swift_bridgeObjectRetain(v103);
    }
    v104 = *(_QWORD *)(a2 + 2864);
    if (v104 == 1)
    {
      *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
      *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
    }
    else
    {
      *(_QWORD *)(a1 + 2864) = v104;
      *(_BYTE *)(a1 + 2872) = *(_BYTE *)(a2 + 2872);
      *(_QWORD *)(a1 + 2880) = *(_QWORD *)(a2 + 2880);
      *(_BYTE *)(a1 + 2888) = *(_BYTE *)(a2 + 2888);
      swift_bridgeObjectRetain(v104);
    }
    v105 = *(_QWORD *)(a2 + 2896);
    if (v105 == 1)
    {
      *(_OWORD *)(a1 + 2896) = *(_OWORD *)(a2 + 2896);
      *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
    }
    else
    {
      *(_QWORD *)(a1 + 2896) = v105;
      *(_BYTE *)(a1 + 2904) = *(_BYTE *)(a2 + 2904);
      *(_QWORD *)(a1 + 2912) = *(_QWORD *)(a2 + 2912);
      *(_BYTE *)(a1 + 2920) = *(_BYTE *)(a2 + 2920);
      swift_bridgeObjectRetain(v105);
    }
    v106 = *(_QWORD *)(a2 + 2928);
    if (v106 == 1)
    {
      *(_OWORD *)(a1 + 2928) = *(_OWORD *)(a2 + 2928);
      *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
    }
    else
    {
      *(_QWORD *)(a1 + 2928) = v106;
      *(_BYTE *)(a1 + 2936) = *(_BYTE *)(a2 + 2936);
      *(_QWORD *)(a1 + 2944) = *(_QWORD *)(a2 + 2944);
      *(_BYTE *)(a1 + 2952) = *(_BYTE *)(a2 + 2952);
      swift_bridgeObjectRetain(v106);
    }
    v107 = *(_QWORD *)(a2 + 2960);
    if (v107 == 1)
    {
      *(_OWORD *)(a1 + 2960) = *(_OWORD *)(a2 + 2960);
      *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
    }
    else
    {
      *(_QWORD *)(a1 + 2960) = v107;
      *(_BYTE *)(a1 + 2968) = *(_BYTE *)(a2 + 2968);
      *(_QWORD *)(a1 + 2976) = *(_QWORD *)(a2 + 2976);
      *(_BYTE *)(a1 + 2984) = *(_BYTE *)(a2 + 2984);
      swift_bridgeObjectRetain(v107);
    }
    v108 = *(_QWORD *)(a2 + 2992);
    if (v108 == 1)
    {
      *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
      *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
    }
    else
    {
      *(_QWORD *)(a1 + 2992) = v108;
      *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
      *(_QWORD *)(a1 + 3008) = *(_QWORD *)(a2 + 3008);
      *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
      swift_bridgeObjectRetain(v108);
    }
    v109 = *(_QWORD *)(a2 + 3024);
    if (v109 == 1)
    {
      *(_OWORD *)(a1 + 3024) = *(_OWORD *)(a2 + 3024);
      *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
    }
    else
    {
      *(_QWORD *)(a1 + 3024) = v109;
      *(_BYTE *)(a1 + 3032) = *(_BYTE *)(a2 + 3032);
      *(_QWORD *)(a1 + 3040) = *(_QWORD *)(a2 + 3040);
      *(_BYTE *)(a1 + 3048) = *(_BYTE *)(a2 + 3048);
      swift_bridgeObjectRetain(v109);
    }
    v110 = *(_QWORD *)(a2 + 3056);
    if (v110 == 1)
    {
      *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a2 + 3056);
      *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
    }
    else
    {
      *(_QWORD *)(a1 + 3056) = v110;
      *(_BYTE *)(a1 + 3064) = *(_BYTE *)(a2 + 3064);
      *(_QWORD *)(a1 + 3072) = *(_QWORD *)(a2 + 3072);
      *(_BYTE *)(a1 + 3080) = *(_BYTE *)(a2 + 3080);
      swift_bridgeObjectRetain(v110);
    }
    v111 = *(_QWORD *)(a2 + 3088);
    if (v111 == 1)
    {
      *(_OWORD *)(a1 + 3088) = *(_OWORD *)(a2 + 3088);
      *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
    }
    else
    {
      *(_QWORD *)(a1 + 3088) = v111;
      *(_BYTE *)(a1 + 3096) = *(_BYTE *)(a2 + 3096);
      *(_QWORD *)(a1 + 3104) = *(_QWORD *)(a2 + 3104);
      *(_BYTE *)(a1 + 3112) = *(_BYTE *)(a2 + 3112);
      swift_bridgeObjectRetain(v111);
    }
    v112 = *(_QWORD *)(a2 + 3120);
    if (v112 == 1)
    {
      *(_OWORD *)(a1 + 3120) = *(_OWORD *)(a2 + 3120);
      *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
    }
    else
    {
      *(_QWORD *)(a1 + 3120) = v112;
      *(_BYTE *)(a1 + 3128) = *(_BYTE *)(a2 + 3128);
      *(_QWORD *)(a1 + 3136) = *(_QWORD *)(a2 + 3136);
      *(_BYTE *)(a1 + 3144) = *(_BYTE *)(a2 + 3144);
      swift_bridgeObjectRetain(v112);
    }
    v113 = *(_QWORD *)(a2 + 3152);
    if (v113 == 1)
    {
      *(_OWORD *)(a1 + 3152) = *(_OWORD *)(a2 + 3152);
      *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
    }
    else
    {
      *(_QWORD *)(a1 + 3152) = v113;
      *(_BYTE *)(a1 + 3160) = *(_BYTE *)(a2 + 3160);
      *(_QWORD *)(a1 + 3168) = *(_QWORD *)(a2 + 3168);
      *(_BYTE *)(a1 + 3176) = *(_BYTE *)(a2 + 3176);
      swift_bridgeObjectRetain(v113);
    }
    v114 = *(_QWORD *)(a2 + 3184);
    if (v114 == 1)
    {
      *(_OWORD *)(a1 + 3184) = *(_OWORD *)(a2 + 3184);
      *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
    }
    else
    {
      *(_QWORD *)(a1 + 3184) = v114;
      *(_BYTE *)(a1 + 3192) = *(_BYTE *)(a2 + 3192);
      *(_QWORD *)(a1 + 3200) = *(_QWORD *)(a2 + 3200);
      *(_BYTE *)(a1 + 3208) = *(_BYTE *)(a2 + 3208);
      swift_bridgeObjectRetain(v114);
    }
    v115 = *(_QWORD *)(a2 + 3216);
    if (v115 == 1)
    {
      *(_OWORD *)(a1 + 3216) = *(_OWORD *)(a2 + 3216);
      *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
    }
    else
    {
      *(_QWORD *)(a1 + 3216) = v115;
      *(_BYTE *)(a1 + 3224) = *(_BYTE *)(a2 + 3224);
      *(_QWORD *)(a1 + 3232) = *(_QWORD *)(a2 + 3232);
      *(_BYTE *)(a1 + 3240) = *(_BYTE *)(a2 + 3240);
      swift_bridgeObjectRetain(v115);
    }
    v116 = *(_QWORD *)(a2 + 3248);
    if (v116 == 1)
    {
      *(_OWORD *)(a1 + 3248) = *(_OWORD *)(a2 + 3248);
      *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
    }
    else
    {
      *(_QWORD *)(a1 + 3248) = v116;
      *(_BYTE *)(a1 + 3256) = *(_BYTE *)(a2 + 3256);
      *(_QWORD *)(a1 + 3264) = *(_QWORD *)(a2 + 3264);
      *(_BYTE *)(a1 + 3272) = *(_BYTE *)(a2 + 3272);
      swift_bridgeObjectRetain(v116);
    }
    *(_OWORD *)(a1 + 3280) = *(_OWORD *)(a2 + 3280);
    *(_BYTE *)(a1 + 3296) = *(_BYTE *)(a2 + 3296);
    *(_BYTE *)(a1 + 3320) = *(_BYTE *)(a2 + 3320);
    *(_OWORD *)(a1 + 3304) = *(_OWORD *)(a2 + 3304);
    *(_DWORD *)(v4 + 2496) = *(_DWORD *)(v5 + 2496);
    *(_WORD *)(a1 + 3325) = *(_WORD *)(a2 + 3325);
    *(_BYTE *)(a1 + 3327) = *(_BYTE *)(a2 + 3327);
    *(_QWORD *)(a1 + 3328) = v92;
    v117 = *(_QWORD *)(a2 + 3336);
    *(_QWORD *)(a1 + 3336) = v117;
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v117);
  }
  v118 = (_OWORD *)(a1 + 3344);
  v119 = (uint64_t *)(a2 + 3344);
  v120 = *(_QWORD *)(a2 + 4160);
  if (v120 == 1)
  {
    memcpy(v118, v119, 0x340uLL);
  }
  else
  {
    v121 = *v119;
    if (*v119 == 1)
    {
      *v118 = *(_OWORD *)v119;
      *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
    }
    else
    {
      *(_QWORD *)(a1 + 3344) = v121;
      *(_BYTE *)(a1 + 3352) = *(_BYTE *)(a2 + 3352);
      *(_QWORD *)(a1 + 3360) = *(_QWORD *)(a2 + 3360);
      *(_BYTE *)(a1 + 3368) = *(_BYTE *)(a2 + 3368);
      swift_bridgeObjectRetain(v121);
    }
    v122 = *(_QWORD *)(a2 + 3376);
    if (v122 == 1)
    {
      *(_OWORD *)(a1 + 3376) = *(_OWORD *)(a2 + 3376);
      *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
    }
    else
    {
      *(_QWORD *)(a1 + 3376) = v122;
      *(_BYTE *)(a1 + 3384) = *(_BYTE *)(a2 + 3384);
      *(_QWORD *)(a1 + 3392) = *(_QWORD *)(a2 + 3392);
      *(_BYTE *)(a1 + 3400) = *(_BYTE *)(a2 + 3400);
      swift_bridgeObjectRetain(v122);
    }
    v123 = *(_QWORD *)(a2 + 3408);
    if (v123 == 1)
    {
      *(_OWORD *)(a1 + 3408) = *(_OWORD *)(a2 + 3408);
      *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
    }
    else
    {
      *(_QWORD *)(a1 + 3408) = v123;
      *(_BYTE *)(a1 + 3416) = *(_BYTE *)(a2 + 3416);
      *(_QWORD *)(a1 + 3424) = *(_QWORD *)(a2 + 3424);
      *(_BYTE *)(a1 + 3432) = *(_BYTE *)(a2 + 3432);
      swift_bridgeObjectRetain(v123);
    }
    v124 = *(_QWORD *)(a2 + 3440);
    if (v124 == 1)
    {
      *(_OWORD *)(a1 + 3440) = *(_OWORD *)(a2 + 3440);
      *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
    }
    else
    {
      *(_QWORD *)(a1 + 3440) = v124;
      *(_BYTE *)(a1 + 3448) = *(_BYTE *)(a2 + 3448);
      *(_QWORD *)(a1 + 3456) = *(_QWORD *)(a2 + 3456);
      *(_BYTE *)(a1 + 3464) = *(_BYTE *)(a2 + 3464);
      swift_bridgeObjectRetain(v124);
    }
    v125 = *(_QWORD *)(a2 + 3472);
    if (v125 == 1)
    {
      *(_OWORD *)(a1 + 3472) = *(_OWORD *)(a2 + 3472);
      *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
    }
    else
    {
      *(_QWORD *)(a1 + 3472) = v125;
      *(_BYTE *)(a1 + 3480) = *(_BYTE *)(a2 + 3480);
      *(_QWORD *)(a1 + 3488) = *(_QWORD *)(a2 + 3488);
      *(_BYTE *)(a1 + 3496) = *(_BYTE *)(a2 + 3496);
      swift_bridgeObjectRetain(v125);
    }
    v126 = *(_QWORD *)(a2 + 3504);
    if (v126 == 1)
    {
      *(_OWORD *)(a1 + 3504) = *(_OWORD *)(a2 + 3504);
      *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
    }
    else
    {
      *(_QWORD *)(a1 + 3504) = v126;
      *(_BYTE *)(a1 + 3512) = *(_BYTE *)(a2 + 3512);
      *(_QWORD *)(a1 + 3520) = *(_QWORD *)(a2 + 3520);
      *(_BYTE *)(a1 + 3528) = *(_BYTE *)(a2 + 3528);
      swift_bridgeObjectRetain(v126);
    }
    v127 = *(_QWORD *)(a2 + 3536);
    if (v127 == 1)
    {
      *(_OWORD *)(a1 + 3536) = *(_OWORD *)(a2 + 3536);
      *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
    }
    else
    {
      *(_QWORD *)(a1 + 3536) = v127;
      *(_BYTE *)(a1 + 3544) = *(_BYTE *)(a2 + 3544);
      *(_QWORD *)(a1 + 3552) = *(_QWORD *)(a2 + 3552);
      *(_BYTE *)(a1 + 3560) = *(_BYTE *)(a2 + 3560);
      swift_bridgeObjectRetain(v127);
    }
    v128 = *(_QWORD *)(a2 + 3568);
    if (v128 == 1)
    {
      *(_OWORD *)(a1 + 3568) = *(_OWORD *)(a2 + 3568);
      *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
    }
    else
    {
      *(_QWORD *)(a1 + 3568) = v128;
      *(_BYTE *)(a1 + 3576) = *(_BYTE *)(a2 + 3576);
      *(_QWORD *)(a1 + 3584) = *(_QWORD *)(a2 + 3584);
      *(_BYTE *)(a1 + 3592) = *(_BYTE *)(a2 + 3592);
      swift_bridgeObjectRetain(v128);
    }
    v129 = *(_QWORD *)(a2 + 3600);
    if (v129 == 1)
    {
      *(_OWORD *)(a1 + 3600) = *(_OWORD *)(a2 + 3600);
      *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
    }
    else
    {
      *(_QWORD *)(a1 + 3600) = v129;
      *(_BYTE *)(a1 + 3608) = *(_BYTE *)(a2 + 3608);
      *(_QWORD *)(a1 + 3616) = *(_QWORD *)(a2 + 3616);
      *(_BYTE *)(a1 + 3624) = *(_BYTE *)(a2 + 3624);
      swift_bridgeObjectRetain(v129);
    }
    v130 = *(_QWORD *)(a2 + 3632);
    if (v130 == 1)
    {
      *(_OWORD *)(a1 + 3632) = *(_OWORD *)(a2 + 3632);
      *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
    }
    else
    {
      *(_QWORD *)(a1 + 3632) = v130;
      *(_BYTE *)(a1 + 3640) = *(_BYTE *)(a2 + 3640);
      *(_QWORD *)(a1 + 3648) = *(_QWORD *)(a2 + 3648);
      *(_BYTE *)(a1 + 3656) = *(_BYTE *)(a2 + 3656);
      swift_bridgeObjectRetain(v130);
    }
    v131 = *(_QWORD *)(a2 + 3664);
    if (v131 == 1)
    {
      *(_OWORD *)(a1 + 3664) = *(_OWORD *)(a2 + 3664);
      *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
    }
    else
    {
      *(_QWORD *)(a1 + 3664) = v131;
      *(_BYTE *)(a1 + 3672) = *(_BYTE *)(a2 + 3672);
      *(_QWORD *)(a1 + 3680) = *(_QWORD *)(a2 + 3680);
      *(_BYTE *)(a1 + 3688) = *(_BYTE *)(a2 + 3688);
      swift_bridgeObjectRetain(v131);
    }
    v132 = *(_QWORD *)(a2 + 3696);
    if (v132 == 1)
    {
      *(_OWORD *)(a1 + 3696) = *(_OWORD *)(a2 + 3696);
      *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
    }
    else
    {
      *(_QWORD *)(a1 + 3696) = v132;
      *(_BYTE *)(a1 + 3704) = *(_BYTE *)(a2 + 3704);
      *(_QWORD *)(a1 + 3712) = *(_QWORD *)(a2 + 3712);
      *(_BYTE *)(a1 + 3720) = *(_BYTE *)(a2 + 3720);
      swift_bridgeObjectRetain(v132);
    }
    v133 = *(_QWORD *)(a2 + 3728);
    if (v133 == 1)
    {
      *(_OWORD *)(a1 + 3728) = *(_OWORD *)(a2 + 3728);
      *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
    }
    else
    {
      *(_QWORD *)(a1 + 3728) = v133;
      *(_BYTE *)(a1 + 3736) = *(_BYTE *)(a2 + 3736);
      *(_QWORD *)(a1 + 3744) = *(_QWORD *)(a2 + 3744);
      *(_BYTE *)(a1 + 3752) = *(_BYTE *)(a2 + 3752);
      swift_bridgeObjectRetain(v133);
    }
    v134 = *(_QWORD *)(a2 + 3760);
    if (v134 == 1)
    {
      *(_OWORD *)(a1 + 3760) = *(_OWORD *)(a2 + 3760);
      *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
    }
    else
    {
      *(_QWORD *)(a1 + 3760) = v134;
      *(_BYTE *)(a1 + 3768) = *(_BYTE *)(a2 + 3768);
      *(_QWORD *)(a1 + 3776) = *(_QWORD *)(a2 + 3776);
      *(_BYTE *)(a1 + 3784) = *(_BYTE *)(a2 + 3784);
      swift_bridgeObjectRetain(v134);
    }
    v135 = *(_QWORD *)(a2 + 3792);
    if (v135 == 1)
    {
      *(_OWORD *)(a1 + 3792) = *(_OWORD *)(a2 + 3792);
      *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
    }
    else
    {
      *(_QWORD *)(a1 + 3792) = v135;
      *(_BYTE *)(a1 + 3800) = *(_BYTE *)(a2 + 3800);
      *(_QWORD *)(a1 + 3808) = *(_QWORD *)(a2 + 3808);
      *(_BYTE *)(a1 + 3816) = *(_BYTE *)(a2 + 3816);
      swift_bridgeObjectRetain(v135);
    }
    v136 = *(_QWORD *)(a2 + 3824);
    if (v136 == 1)
    {
      *(_OWORD *)(a1 + 3824) = *(_OWORD *)(a2 + 3824);
      *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
    }
    else
    {
      *(_QWORD *)(a1 + 3824) = v136;
      *(_BYTE *)(a1 + 3832) = *(_BYTE *)(a2 + 3832);
      *(_QWORD *)(a1 + 3840) = *(_QWORD *)(a2 + 3840);
      *(_BYTE *)(a1 + 3848) = *(_BYTE *)(a2 + 3848);
      swift_bridgeObjectRetain(v136);
    }
    v137 = *(_QWORD *)(a2 + 3856);
    if (v137 == 1)
    {
      *(_OWORD *)(a1 + 3856) = *(_OWORD *)(a2 + 3856);
      *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
    }
    else
    {
      *(_QWORD *)(a1 + 3856) = v137;
      *(_BYTE *)(a1 + 3864) = *(_BYTE *)(a2 + 3864);
      *(_QWORD *)(a1 + 3872) = *(_QWORD *)(a2 + 3872);
      *(_BYTE *)(a1 + 3880) = *(_BYTE *)(a2 + 3880);
      swift_bridgeObjectRetain(v137);
    }
    v138 = *(_QWORD *)(a2 + 3888);
    if (v138 == 1)
    {
      *(_OWORD *)(a1 + 3888) = *(_OWORD *)(a2 + 3888);
      *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
    }
    else
    {
      *(_QWORD *)(a1 + 3888) = v138;
      *(_BYTE *)(a1 + 3896) = *(_BYTE *)(a2 + 3896);
      *(_QWORD *)(a1 + 3904) = *(_QWORD *)(a2 + 3904);
      *(_BYTE *)(a1 + 3912) = *(_BYTE *)(a2 + 3912);
      swift_bridgeObjectRetain(v138);
    }
    v139 = *(_QWORD *)(a2 + 3920);
    if (v139 == 1)
    {
      *(_OWORD *)(a1 + 3920) = *(_OWORD *)(a2 + 3920);
      *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
    }
    else
    {
      *(_QWORD *)(a1 + 3920) = v139;
      *(_BYTE *)(a1 + 3928) = *(_BYTE *)(a2 + 3928);
      *(_QWORD *)(a1 + 3936) = *(_QWORD *)(a2 + 3936);
      *(_BYTE *)(a1 + 3944) = *(_BYTE *)(a2 + 3944);
      swift_bridgeObjectRetain(v139);
    }
    v140 = *(_QWORD *)(a2 + 3952);
    if (v140 == 1)
    {
      *(_OWORD *)(a1 + 3952) = *(_OWORD *)(a2 + 3952);
      *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
    }
    else
    {
      *(_QWORD *)(a1 + 3952) = v140;
      *(_BYTE *)(a1 + 3960) = *(_BYTE *)(a2 + 3960);
      *(_QWORD *)(a1 + 3968) = *(_QWORD *)(a2 + 3968);
      *(_BYTE *)(a1 + 3976) = *(_BYTE *)(a2 + 3976);
      swift_bridgeObjectRetain(v140);
    }
    v141 = *(_QWORD *)(a2 + 3984);
    if (v141 == 1)
    {
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)(a2 + 3984);
      *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
    }
    else
    {
      *(_QWORD *)(a1 + 3984) = v141;
      *(_BYTE *)(a1 + 3992) = *(_BYTE *)(a2 + 3992);
      *(_QWORD *)(a1 + 4000) = *(_QWORD *)(a2 + 4000);
      *(_BYTE *)(a1 + 4008) = *(_BYTE *)(a2 + 4008);
      swift_bridgeObjectRetain(v141);
    }
    v142 = *(_QWORD *)(a2 + 4016);
    if (v142 == 1)
    {
      *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a2 + 4016);
      *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
    }
    else
    {
      *(_QWORD *)(a1 + 4016) = v142;
      *(_BYTE *)(a1 + 4024) = *(_BYTE *)(a2 + 4024);
      *(_QWORD *)(a1 + 4032) = *(_QWORD *)(a2 + 4032);
      *(_BYTE *)(a1 + 4040) = *(_BYTE *)(a2 + 4040);
      swift_bridgeObjectRetain(v142);
    }
    v143 = *(_QWORD *)(a2 + 4048);
    if (v143 == 1)
    {
      *(_OWORD *)(a1 + 4048) = *(_OWORD *)(a2 + 4048);
      *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
    }
    else
    {
      *(_QWORD *)(a1 + 4048) = v143;
      *(_BYTE *)(a1 + 4056) = *(_BYTE *)(a2 + 4056);
      *(_QWORD *)(a1 + 4064) = *(_QWORD *)(a2 + 4064);
      *(_BYTE *)(a1 + 4072) = *(_BYTE *)(a2 + 4072);
      swift_bridgeObjectRetain(v143);
    }
    v144 = *(_QWORD *)(a2 + 4080);
    if (v144 == 1)
    {
      *(_OWORD *)(a1 + 4080) = *(_OWORD *)(a2 + 4080);
      *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
    }
    else
    {
      *(_QWORD *)(a1 + 4080) = v144;
      *(_BYTE *)(a1 + 4088) = *(_BYTE *)(a2 + 4088);
      *(_BYTE *)(a1 + 4104) = *(_BYTE *)(a2 + 4104);
      *(_QWORD *)(a1 + 4096) = *(_QWORD *)(a2 + 4096);
      swift_bridgeObjectRetain(v144);
    }
    *(_OWORD *)(a1 + 4112) = *(_OWORD *)(a2 + 4112);
    *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
    *(_BYTE *)(a1 + 4128) = *(_BYTE *)(a2 + 4128);
    *(_BYTE *)(a1 + 4152) = *(_BYTE *)(a2 + 4152);
    *(_DWORD *)(v4 + 3328) = *(_DWORD *)(v5 + 3328);
    *(_WORD *)(v4 + 3332) = *(_WORD *)(v5 + 3332);
    *(_BYTE *)(v4 + 3334) = *(_BYTE *)(v5 + 3334);
    *(_QWORD *)(a1 + 4160) = v120;
    v145 = *(_QWORD *)(a2 + 4168);
    *(_QWORD *)(a1 + 4168) = v145;
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v145);
  }
  v146 = (_OWORD *)(a1 + 4176);
  v147 = (uint64_t *)(a2 + 4176);
  v148 = *(_QWORD *)(a2 + 4992);
  if (v148 == 1)
  {
    memcpy(v146, v147, 0x340uLL);
  }
  else
  {
    v149 = *v147;
    if (*v147 == 1)
    {
      *v146 = *(_OWORD *)v147;
      *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
    }
    else
    {
      *(_QWORD *)(a1 + 4176) = v149;
      *(_BYTE *)(v4 + 3359) = *(_BYTE *)(v5 + 3359);
      *(_QWORD *)(a1 + 4192) = *(_QWORD *)(a2 + 4192);
      *(_BYTE *)(a1 + 4200) = *(_BYTE *)(a2 + 4200);
      swift_bridgeObjectRetain(v149);
    }
    v150 = *(_QWORD *)(a2 + 4208);
    if (v150 == 1)
    {
      *(_OWORD *)(a1 + 4208) = *(_OWORD *)(a2 + 4208);
      *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
    }
    else
    {
      *(_QWORD *)(a1 + 4208) = v150;
      *(_BYTE *)(v4 + 3391) = *(_BYTE *)(v5 + 3391);
      *(_BYTE *)(a1 + 4232) = *(_BYTE *)(a2 + 4232);
      *(_QWORD *)(a1 + 4224) = *(_QWORD *)(a2 + 4224);
      swift_bridgeObjectRetain(v150);
    }
    v151 = *(_QWORD *)(a2 + 4240);
    if (v151 == 1)
    {
      *(_OWORD *)(a1 + 4240) = *(_OWORD *)(a2 + 4240);
      *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
    }
    else
    {
      *(_QWORD *)(a1 + 4240) = v151;
      *(_BYTE *)(v4 + 3423) = *(_BYTE *)(v5 + 3423);
      *(_BYTE *)(a1 + 4264) = *(_BYTE *)(a2 + 4264);
      *(_QWORD *)(a1 + 4256) = *(_QWORD *)(a2 + 4256);
      swift_bridgeObjectRetain(v151);
    }
    v152 = *(_QWORD *)(a2 + 4272);
    if (v152 == 1)
    {
      *(_OWORD *)(a1 + 4272) = *(_OWORD *)(a2 + 4272);
      *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
    }
    else
    {
      *(_QWORD *)(a1 + 4272) = v152;
      *(_BYTE *)(v4 + 3455) = *(_BYTE *)(v5 + 3455);
      *(_BYTE *)(a1 + 4296) = *(_BYTE *)(a2 + 4296);
      *(_QWORD *)(a1 + 4288) = *(_QWORD *)(a2 + 4288);
      swift_bridgeObjectRetain(v152);
    }
    v153 = *(_QWORD *)(a2 + 4304);
    if (v153 == 1)
    {
      *(_OWORD *)(a1 + 4304) = *(_OWORD *)(a2 + 4304);
      *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
    }
    else
    {
      *(_QWORD *)(a1 + 4304) = v153;
      *(_BYTE *)(v4 + 3487) = *(_BYTE *)(v5 + 3487);
      *(_BYTE *)(a1 + 4328) = *(_BYTE *)(a2 + 4328);
      *(_QWORD *)(a1 + 4320) = *(_QWORD *)(a2 + 4320);
      swift_bridgeObjectRetain(v153);
    }
    v154 = *(_QWORD *)(a2 + 4336);
    if (v154 == 1)
    {
      *(_OWORD *)(a1 + 4336) = *(_OWORD *)(a2 + 4336);
      *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
    }
    else
    {
      *(_QWORD *)(a1 + 4336) = v154;
      *(_BYTE *)(v4 + 3519) = *(_BYTE *)(v5 + 3519);
      *(_BYTE *)(a1 + 4360) = *(_BYTE *)(a2 + 4360);
      *(_QWORD *)(a1 + 4352) = *(_QWORD *)(a2 + 4352);
      swift_bridgeObjectRetain(v154);
    }
    v155 = *(_QWORD *)(a2 + 4368);
    if (v155 == 1)
    {
      *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
      *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
    }
    else
    {
      *(_QWORD *)(a1 + 4368) = v155;
      *(_BYTE *)(v4 + 3551) = *(_BYTE *)(v5 + 3551);
      *(_BYTE *)(a1 + 4392) = *(_BYTE *)(a2 + 4392);
      *(_QWORD *)(a1 + 4384) = *(_QWORD *)(a2 + 4384);
      swift_bridgeObjectRetain(v155);
    }
    v156 = *(_QWORD *)(a2 + 4400);
    if (v156 == 1)
    {
      *(_OWORD *)(a1 + 4400) = *(_OWORD *)(a2 + 4400);
      *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
    }
    else
    {
      *(_QWORD *)(a1 + 4400) = v156;
      *(_BYTE *)(v4 + 3583) = *(_BYTE *)(v5 + 3583);
      *(_BYTE *)(a1 + 4424) = *(_BYTE *)(a2 + 4424);
      *(_QWORD *)(a1 + 4416) = *(_QWORD *)(a2 + 4416);
      swift_bridgeObjectRetain(v156);
    }
    v157 = *(_QWORD *)(a2 + 4432);
    if (v157 == 1)
    {
      *(_OWORD *)(a1 + 4432) = *(_OWORD *)(a2 + 4432);
      *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
    }
    else
    {
      *(_QWORD *)(a1 + 4432) = v157;
      *(_BYTE *)(v4 + 3615) = *(_BYTE *)(v5 + 3615);
      *(_BYTE *)(a1 + 4456) = *(_BYTE *)(a2 + 4456);
      *(_QWORD *)(a1 + 4448) = *(_QWORD *)(a2 + 4448);
      swift_bridgeObjectRetain(v157);
    }
    v158 = *(_QWORD *)(a2 + 4464);
    if (v158 == 1)
    {
      *(_OWORD *)(a1 + 4464) = *(_OWORD *)(a2 + 4464);
      *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
    }
    else
    {
      *(_QWORD *)(a1 + 4464) = v158;
      *(_BYTE *)(v4 + 3647) = *(_BYTE *)(v5 + 3647);
      *(_BYTE *)(a1 + 4488) = *(_BYTE *)(a2 + 4488);
      *(_QWORD *)(a1 + 4480) = *(_QWORD *)(a2 + 4480);
      swift_bridgeObjectRetain(v158);
    }
    v159 = *(_QWORD *)(a2 + 4496);
    if (v159 == 1)
    {
      *(_OWORD *)(a1 + 4496) = *(_OWORD *)(a2 + 4496);
      *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
    }
    else
    {
      *(_QWORD *)(a1 + 4496) = v159;
      *(_BYTE *)(v4 + 3679) = *(_BYTE *)(v5 + 3679);
      *(_BYTE *)(a1 + 4520) = *(_BYTE *)(a2 + 4520);
      *(_QWORD *)(a1 + 4512) = *(_QWORD *)(a2 + 4512);
      swift_bridgeObjectRetain(v159);
    }
    v160 = *(_QWORD *)(a2 + 4528);
    if (v160 == 1)
    {
      *(_OWORD *)(a1 + 4528) = *(_OWORD *)(a2 + 4528);
      *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
    }
    else
    {
      *(_QWORD *)(a1 + 4528) = v160;
      *(_BYTE *)(v4 + 3711) = *(_BYTE *)(v5 + 3711);
      *(_BYTE *)(a1 + 4552) = *(_BYTE *)(a2 + 4552);
      *(_QWORD *)(a1 + 4544) = *(_QWORD *)(a2 + 4544);
      swift_bridgeObjectRetain(v160);
    }
    v161 = *(_QWORD *)(a2 + 4560);
    if (v161 == 1)
    {
      *(_OWORD *)(a1 + 4560) = *(_OWORD *)(a2 + 4560);
      *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
    }
    else
    {
      *(_QWORD *)(a1 + 4560) = v161;
      *(_BYTE *)(v4 + 3743) = *(_BYTE *)(v5 + 3743);
      *(_BYTE *)(a1 + 4584) = *(_BYTE *)(a2 + 4584);
      *(_QWORD *)(a1 + 4576) = *(_QWORD *)(a2 + 4576);
      swift_bridgeObjectRetain(v161);
    }
    v162 = *(_QWORD *)(a2 + 4592);
    if (v162 == 1)
    {
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)(a2 + 4592);
      *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
    }
    else
    {
      *(_QWORD *)(a1 + 4592) = v162;
      *(_BYTE *)(v4 + 3775) = *(_BYTE *)(v5 + 3775);
      *(_BYTE *)(a1 + 4616) = *(_BYTE *)(a2 + 4616);
      *(_QWORD *)(a1 + 4608) = *(_QWORD *)(a2 + 4608);
      swift_bridgeObjectRetain(v162);
    }
    v163 = *(_QWORD *)(a2 + 4624);
    if (v163 == 1)
    {
      *(_OWORD *)(a1 + 4624) = *(_OWORD *)(a2 + 4624);
      *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
    }
    else
    {
      *(_QWORD *)(a1 + 4624) = v163;
      *(_BYTE *)(v4 + 3807) = *(_BYTE *)(v5 + 3807);
      *(_BYTE *)(a1 + 4648) = *(_BYTE *)(a2 + 4648);
      *(_QWORD *)(a1 + 4640) = *(_QWORD *)(a2 + 4640);
      swift_bridgeObjectRetain(v163);
    }
    v164 = *(_QWORD *)(a2 + 4656);
    if (v164 == 1)
    {
      *(_OWORD *)(a1 + 4656) = *(_OWORD *)(a2 + 4656);
      *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
    }
    else
    {
      *(_QWORD *)(a1 + 4656) = v164;
      *(_BYTE *)(v4 + 3839) = *(_BYTE *)(v5 + 3839);
      *(_BYTE *)(a1 + 4680) = *(_BYTE *)(a2 + 4680);
      *(_QWORD *)(a1 + 4672) = *(_QWORD *)(a2 + 4672);
      swift_bridgeObjectRetain(v164);
    }
    v165 = *(_QWORD *)(a2 + 4688);
    if (v165 == 1)
    {
      *(_OWORD *)(a1 + 4688) = *(_OWORD *)(a2 + 4688);
      *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
    }
    else
    {
      *(_QWORD *)(a1 + 4688) = v165;
      *(_BYTE *)(v4 + 3871) = *(_BYTE *)(v5 + 3871);
      *(_BYTE *)(a1 + 4712) = *(_BYTE *)(a2 + 4712);
      *(_QWORD *)(a1 + 4704) = *(_QWORD *)(a2 + 4704);
      swift_bridgeObjectRetain(v165);
    }
    v166 = *(_QWORD *)(a2 + 4720);
    if (v166 == 1)
    {
      *(_OWORD *)(a1 + 4720) = *(_OWORD *)(a2 + 4720);
      *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
    }
    else
    {
      *(_QWORD *)(a1 + 4720) = v166;
      *(_BYTE *)(v4 + 3903) = *(_BYTE *)(v5 + 3903);
      *(_BYTE *)(a1 + 4744) = *(_BYTE *)(a2 + 4744);
      *(_QWORD *)(a1 + 4736) = *(_QWORD *)(a2 + 4736);
      swift_bridgeObjectRetain(v166);
    }
    v167 = *(_QWORD *)(a2 + 4752);
    if (v167 == 1)
    {
      *(_OWORD *)(a1 + 4752) = *(_OWORD *)(a2 + 4752);
      *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
    }
    else
    {
      *(_QWORD *)(a1 + 4752) = v167;
      *(_BYTE *)(v4 + 3935) = *(_BYTE *)(v5 + 3935);
      *(_BYTE *)(a1 + 4776) = *(_BYTE *)(a2 + 4776);
      *(_QWORD *)(a1 + 4768) = *(_QWORD *)(a2 + 4768);
      swift_bridgeObjectRetain(v167);
    }
    v168 = *(_QWORD *)(a2 + 4784);
    if (v168 == 1)
    {
      *(_OWORD *)(a1 + 4784) = *(_OWORD *)(a2 + 4784);
      *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
    }
    else
    {
      *(_QWORD *)(a1 + 4784) = v168;
      *(_BYTE *)(v4 + 3967) = *(_BYTE *)(v5 + 3967);
      *(_BYTE *)(a1 + 4808) = *(_BYTE *)(a2 + 4808);
      *(_QWORD *)(a1 + 4800) = *(_QWORD *)(a2 + 4800);
      swift_bridgeObjectRetain(v168);
    }
    v169 = *(_QWORD *)(a2 + 4816);
    if (v169 == 1)
    {
      *(_OWORD *)(a1 + 4816) = *(_OWORD *)(a2 + 4816);
      *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
    }
    else
    {
      *(_QWORD *)(a1 + 4816) = v169;
      *(_BYTE *)(v4 + 3999) = *(_BYTE *)(v5 + 3999);
      *(_BYTE *)(a1 + 4840) = *(_BYTE *)(a2 + 4840);
      *(_QWORD *)(a1 + 4832) = *(_QWORD *)(a2 + 4832);
      swift_bridgeObjectRetain(v169);
    }
    v170 = *(_QWORD *)(a2 + 4848);
    if (v170 == 1)
    {
      *(_OWORD *)(a1 + 4848) = *(_OWORD *)(a2 + 4848);
      *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
    }
    else
    {
      *(_QWORD *)(a1 + 4848) = v170;
      *(_BYTE *)(v4 + 4031) = *(_BYTE *)(v5 + 4031);
      *(_BYTE *)(a1 + 4872) = *(_BYTE *)(a2 + 4872);
      *(_QWORD *)(a1 + 4864) = *(_QWORD *)(a2 + 4864);
      swift_bridgeObjectRetain(v170);
    }
    v171 = *(_QWORD *)(a2 + 4880);
    if (v171 == 1)
    {
      *(_OWORD *)(a1 + 4880) = *(_OWORD *)(a2 + 4880);
      *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
    }
    else
    {
      *(_QWORD *)(a1 + 4880) = v171;
      *(_BYTE *)(v4 + 4063) = *(_BYTE *)(v5 + 4063);
      *(_BYTE *)(a1 + 4904) = *(_BYTE *)(a2 + 4904);
      *(_QWORD *)(a1 + 4896) = *(_QWORD *)(a2 + 4896);
      swift_bridgeObjectRetain(v171);
    }
    v172 = *(_QWORD *)(a2 + 4912);
    if (v172 == 1)
    {
      *(_OWORD *)(a1 + 4912) = *(_OWORD *)(a2 + 4912);
      *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
    }
    else
    {
      *(_QWORD *)(a1 + 4912) = v172;
      *(_BYTE *)(v4 + 4095) = *(_BYTE *)(v5 + 4095);
      *(_BYTE *)(a1 + 4936) = *(_BYTE *)(a2 + 4936);
      *(_QWORD *)(a1 + 4928) = *(_QWORD *)(a2 + 4928);
      swift_bridgeObjectRetain(v172);
    }
    *(_OWORD *)(a1 + 4944) = *(_OWORD *)(a2 + 4944);
    *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
    *(_BYTE *)(a1 + 4960) = *(_BYTE *)(a2 + 4960);
    *(_BYTE *)(a1 + 4984) = *(_BYTE *)(a2 + 4984);
    *(_DWORD *)(a1 + 4985) = *(_DWORD *)(a2 + 4985);
    *(_WORD *)(a1 + 4989) = *(_WORD *)(a2 + 4989);
    *(_BYTE *)(a1 + 4991) = *(_BYTE *)(a2 + 4991);
    *(_QWORD *)(a1 + 4992) = v148;
    v173 = *(_QWORD *)(a2 + 5000);
    *(_QWORD *)(a1 + 5000) = v173;
    swift_bridgeObjectRetain(v148);
    swift_bridgeObjectRetain(v173);
  }
  v174 = (_OWORD *)(a1 + 5008);
  v175 = (uint64_t *)(a2 + 5008);
  v176 = *(_QWORD *)(a2 + 5824);
  if (v176 == 1)
  {
    memcpy(v174, v175, 0x340uLL);
  }
  else
  {
    v177 = *v175;
    if (*v175 == 1)
    {
      *v174 = *(_OWORD *)v175;
      *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
    }
    else
    {
      *(_QWORD *)(a1 + 5008) = v177;
      *(_BYTE *)(a1 + 5016) = *(_BYTE *)(a2 + 5016);
      *(_QWORD *)(a1 + 5024) = *(_QWORD *)(a2 + 5024);
      *(_BYTE *)(a1 + 5032) = *(_BYTE *)(a2 + 5032);
      swift_bridgeObjectRetain(v177);
    }
    v178 = *(_QWORD *)(a2 + 5040);
    if (v178 == 1)
    {
      *(_OWORD *)(a1 + 5040) = *(_OWORD *)(a2 + 5040);
      *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
    }
    else
    {
      *(_QWORD *)(a1 + 5040) = v178;
      *(_BYTE *)(a1 + 5048) = *(_BYTE *)(a2 + 5048);
      *(_BYTE *)(a1 + 5064) = *(_BYTE *)(a2 + 5064);
      *(_QWORD *)(a1 + 5056) = *(_QWORD *)(a2 + 5056);
      swift_bridgeObjectRetain(v178);
    }
    v179 = *(_QWORD *)(a2 + 5072);
    if (v179 == 1)
    {
      *(_OWORD *)(a1 + 5072) = *(_OWORD *)(a2 + 5072);
      *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
    }
    else
    {
      *(_QWORD *)(a1 + 5072) = v179;
      *(_BYTE *)(a1 + 5080) = *(_BYTE *)(a2 + 5080);
      *(_BYTE *)(a1 + 5096) = *(_BYTE *)(a2 + 5096);
      *(_QWORD *)(a1 + 5088) = *(_QWORD *)(a2 + 5088);
      swift_bridgeObjectRetain(v179);
    }
    v180 = *(_QWORD *)(a2 + 5104);
    if (v180 == 1)
    {
      *(_OWORD *)(a1 + 5104) = *(_OWORD *)(a2 + 5104);
      *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
    }
    else
    {
      *(_QWORD *)(a1 + 5104) = v180;
      *(_BYTE *)(a1 + 5112) = *(_BYTE *)(a2 + 5112);
      *(_BYTE *)(a1 + 5128) = *(_BYTE *)(a2 + 5128);
      *(_QWORD *)(a1 + 5120) = *(_QWORD *)(a2 + 5120);
      swift_bridgeObjectRetain(v180);
    }
    v181 = *(_QWORD *)(a2 + 5136);
    if (v181 == 1)
    {
      *(_OWORD *)(a1 + 5136) = *(_OWORD *)(a2 + 5136);
      *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
    }
    else
    {
      *(_QWORD *)(a1 + 5136) = v181;
      *(_BYTE *)(a1 + 5144) = *(_BYTE *)(a2 + 5144);
      *(_BYTE *)(a1 + 5160) = *(_BYTE *)(a2 + 5160);
      *(_QWORD *)(a1 + 5152) = *(_QWORD *)(a2 + 5152);
      swift_bridgeObjectRetain(v181);
    }
    v182 = *(_QWORD *)(a2 + 5168);
    if (v182 == 1)
    {
      *(_OWORD *)(a1 + 5168) = *(_OWORD *)(a2 + 5168);
      *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
    }
    else
    {
      *(_QWORD *)(a1 + 5168) = v182;
      *(_BYTE *)(a1 + 5176) = *(_BYTE *)(a2 + 5176);
      *(_BYTE *)(a1 + 5192) = *(_BYTE *)(a2 + 5192);
      *(_QWORD *)(a1 + 5184) = *(_QWORD *)(a2 + 5184);
      swift_bridgeObjectRetain(v182);
    }
    v183 = *(_QWORD *)(a2 + 5200);
    if (v183 == 1)
    {
      *(_OWORD *)(a1 + 5200) = *(_OWORD *)(a2 + 5200);
      *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
    }
    else
    {
      *(_QWORD *)(a1 + 5200) = v183;
      *(_BYTE *)(a1 + 5208) = *(_BYTE *)(a2 + 5208);
      *(_BYTE *)(a1 + 5224) = *(_BYTE *)(a2 + 5224);
      *(_QWORD *)(a1 + 5216) = *(_QWORD *)(a2 + 5216);
      swift_bridgeObjectRetain(v183);
    }
    v184 = *(_QWORD *)(a2 + 5232);
    if (v184 == 1)
    {
      *(_OWORD *)(a1 + 5232) = *(_OWORD *)(a2 + 5232);
      *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
    }
    else
    {
      *(_QWORD *)(a1 + 5232) = v184;
      *(_BYTE *)(a1 + 5240) = *(_BYTE *)(a2 + 5240);
      *(_BYTE *)(a1 + 5256) = *(_BYTE *)(a2 + 5256);
      *(_QWORD *)(a1 + 5248) = *(_QWORD *)(a2 + 5248);
      swift_bridgeObjectRetain(v184);
    }
    v185 = *(_QWORD *)(a2 + 5264);
    if (v185 == 1)
    {
      *(_OWORD *)(a1 + 5264) = *(_OWORD *)(a2 + 5264);
      *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
    }
    else
    {
      *(_QWORD *)(a1 + 5264) = v185;
      *(_BYTE *)(a1 + 5272) = *(_BYTE *)(a2 + 5272);
      *(_BYTE *)(a1 + 5288) = *(_BYTE *)(a2 + 5288);
      *(_QWORD *)(a1 + 5280) = *(_QWORD *)(a2 + 5280);
      swift_bridgeObjectRetain(v185);
    }
    v186 = *(_QWORD *)(a2 + 5296);
    if (v186 == 1)
    {
      *(_OWORD *)(a1 + 5296) = *(_OWORD *)(a2 + 5296);
      *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
    }
    else
    {
      *(_QWORD *)(a1 + 5296) = v186;
      *(_BYTE *)(a1 + 5304) = *(_BYTE *)(a2 + 5304);
      *(_BYTE *)(a1 + 5320) = *(_BYTE *)(a2 + 5320);
      *(_QWORD *)(a1 + 5312) = *(_QWORD *)(a2 + 5312);
      swift_bridgeObjectRetain(v186);
    }
    v187 = *(_QWORD *)(a2 + 5328);
    if (v187 == 1)
    {
      *(_OWORD *)(a1 + 5328) = *(_OWORD *)(a2 + 5328);
      *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
    }
    else
    {
      *(_QWORD *)(a1 + 5328) = v187;
      *(_BYTE *)(a1 + 5336) = *(_BYTE *)(a2 + 5336);
      *(_BYTE *)(a1 + 5352) = *(_BYTE *)(a2 + 5352);
      *(_QWORD *)(a1 + 5344) = *(_QWORD *)(a2 + 5344);
      swift_bridgeObjectRetain(v187);
    }
    v188 = *(_QWORD *)(a2 + 5360);
    if (v188 == 1)
    {
      *(_OWORD *)(a1 + 5360) = *(_OWORD *)(a2 + 5360);
      *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
    }
    else
    {
      *(_QWORD *)(a1 + 5360) = v188;
      *(_BYTE *)(a1 + 5368) = *(_BYTE *)(a2 + 5368);
      *(_BYTE *)(a1 + 5384) = *(_BYTE *)(a2 + 5384);
      *(_QWORD *)(a1 + 5376) = *(_QWORD *)(a2 + 5376);
      swift_bridgeObjectRetain(v188);
    }
    v189 = *(_QWORD *)(a2 + 5392);
    if (v189 == 1)
    {
      *(_OWORD *)(a1 + 5392) = *(_OWORD *)(a2 + 5392);
      *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
    }
    else
    {
      *(_QWORD *)(a1 + 5392) = v189;
      *(_BYTE *)(a1 + 5400) = *(_BYTE *)(a2 + 5400);
      *(_BYTE *)(a1 + 5416) = *(_BYTE *)(a2 + 5416);
      *(_QWORD *)(a1 + 5408) = *(_QWORD *)(a2 + 5408);
      swift_bridgeObjectRetain(v189);
    }
    v190 = *(_QWORD *)(a2 + 5424);
    if (v190 == 1)
    {
      *(_OWORD *)(a1 + 5424) = *(_OWORD *)(a2 + 5424);
      *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
    }
    else
    {
      *(_QWORD *)(a1 + 5424) = v190;
      *(_BYTE *)(a1 + 5432) = *(_BYTE *)(a2 + 5432);
      *(_BYTE *)(a1 + 5448) = *(_BYTE *)(a2 + 5448);
      *(_QWORD *)(a1 + 5440) = *(_QWORD *)(a2 + 5440);
      swift_bridgeObjectRetain(v190);
    }
    v191 = *(_QWORD *)(a2 + 5456);
    if (v191 == 1)
    {
      *(_OWORD *)(a1 + 5456) = *(_OWORD *)(a2 + 5456);
      *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
    }
    else
    {
      *(_QWORD *)(a1 + 5456) = v191;
      *(_BYTE *)(a1 + 5464) = *(_BYTE *)(a2 + 5464);
      *(_BYTE *)(a1 + 5480) = *(_BYTE *)(a2 + 5480);
      *(_QWORD *)(a1 + 5472) = *(_QWORD *)(a2 + 5472);
      swift_bridgeObjectRetain(v191);
    }
    v192 = *(_QWORD *)(a2 + 5488);
    if (v192 == 1)
    {
      *(_OWORD *)(a1 + 5488) = *(_OWORD *)(a2 + 5488);
      *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
    }
    else
    {
      *(_QWORD *)(a1 + 5488) = v192;
      *(_BYTE *)(a1 + 5496) = *(_BYTE *)(a2 + 5496);
      *(_BYTE *)(a1 + 5512) = *(_BYTE *)(a2 + 5512);
      *(_QWORD *)(a1 + 5504) = *(_QWORD *)(a2 + 5504);
      swift_bridgeObjectRetain(v192);
    }
    v193 = *(_QWORD *)(a2 + 5520);
    if (v193 == 1)
    {
      *(_OWORD *)(a1 + 5520) = *(_OWORD *)(a2 + 5520);
      *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
    }
    else
    {
      *(_QWORD *)(a1 + 5520) = v193;
      *(_BYTE *)(a1 + 5528) = *(_BYTE *)(a2 + 5528);
      *(_BYTE *)(a1 + 5544) = *(_BYTE *)(a2 + 5544);
      *(_QWORD *)(a1 + 5536) = *(_QWORD *)(a2 + 5536);
      swift_bridgeObjectRetain(v193);
    }
    v194 = *(_QWORD *)(a2 + 5552);
    if (v194 == 1)
    {
      *(_OWORD *)(a1 + 5552) = *(_OWORD *)(a2 + 5552);
      *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
    }
    else
    {
      *(_QWORD *)(a1 + 5552) = v194;
      *(_BYTE *)(a1 + 5560) = *(_BYTE *)(a2 + 5560);
      *(_BYTE *)(a1 + 5576) = *(_BYTE *)(a2 + 5576);
      *(_QWORD *)(a1 + 5568) = *(_QWORD *)(a2 + 5568);
      swift_bridgeObjectRetain(v194);
    }
    v195 = *(_QWORD *)(a2 + 5584);
    if (v195 == 1)
    {
      *(_OWORD *)(a1 + 5584) = *(_OWORD *)(a2 + 5584);
      *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
    }
    else
    {
      *(_QWORD *)(a1 + 5584) = v195;
      *(_BYTE *)(a1 + 5592) = *(_BYTE *)(a2 + 5592);
      *(_BYTE *)(a1 + 5608) = *(_BYTE *)(a2 + 5608);
      *(_QWORD *)(a1 + 5600) = *(_QWORD *)(a2 + 5600);
      swift_bridgeObjectRetain(v195);
    }
    v196 = *(_QWORD *)(a2 + 5616);
    if (v196 == 1)
    {
      *(_OWORD *)(a1 + 5616) = *(_OWORD *)(a2 + 5616);
      *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
    }
    else
    {
      *(_QWORD *)(a1 + 5616) = v196;
      *(_BYTE *)(a1 + 5624) = *(_BYTE *)(a2 + 5624);
      *(_BYTE *)(a1 + 5640) = *(_BYTE *)(a2 + 5640);
      *(_QWORD *)(a1 + 5632) = *(_QWORD *)(a2 + 5632);
      swift_bridgeObjectRetain(v196);
    }
    v197 = *(_QWORD *)(a2 + 5648);
    if (v197 == 1)
    {
      *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a2 + 5648);
      *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
    }
    else
    {
      *(_QWORD *)(a1 + 5648) = v197;
      *(_BYTE *)(a1 + 5656) = *(_BYTE *)(a2 + 5656);
      *(_BYTE *)(a1 + 5672) = *(_BYTE *)(a2 + 5672);
      *(_QWORD *)(a1 + 5664) = *(_QWORD *)(a2 + 5664);
      swift_bridgeObjectRetain(v197);
    }
    v198 = *(_QWORD *)(a2 + 5680);
    if (v198 == 1)
    {
      *(_OWORD *)(a1 + 5680) = *(_OWORD *)(a2 + 5680);
      *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
    }
    else
    {
      *(_QWORD *)(a1 + 5680) = v198;
      *(_BYTE *)(a1 + 5688) = *(_BYTE *)(a2 + 5688);
      *(_BYTE *)(a1 + 5704) = *(_BYTE *)(a2 + 5704);
      *(_QWORD *)(a1 + 5696) = *(_QWORD *)(a2 + 5696);
      swift_bridgeObjectRetain(v198);
    }
    v199 = *(_QWORD *)(a2 + 5712);
    if (v199 == 1)
    {
      *(_OWORD *)(a1 + 5712) = *(_OWORD *)(a2 + 5712);
      *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
    }
    else
    {
      *(_QWORD *)(a1 + 5712) = v199;
      *(_BYTE *)(a1 + 5720) = *(_BYTE *)(a2 + 5720);
      *(_BYTE *)(a1 + 5736) = *(_BYTE *)(a2 + 5736);
      *(_QWORD *)(a1 + 5728) = *(_QWORD *)(a2 + 5728);
      swift_bridgeObjectRetain(v199);
    }
    v200 = *(_QWORD *)(a2 + 5744);
    if (v200 == 1)
    {
      *(_OWORD *)(a1 + 5744) = *(_OWORD *)(a2 + 5744);
      *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
    }
    else
    {
      *(_QWORD *)(a1 + 5744) = v200;
      *(_BYTE *)(a1 + 5752) = *(_BYTE *)(a2 + 5752);
      *(_BYTE *)(a1 + 5768) = *(_BYTE *)(a2 + 5768);
      *(_QWORD *)(a1 + 5760) = *(_QWORD *)(a2 + 5760);
      swift_bridgeObjectRetain(v200);
    }
    *(_OWORD *)(a1 + 5776) = *(_OWORD *)(a2 + 5776);
    *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
    *(_BYTE *)(a1 + 5792) = *(_BYTE *)(a2 + 5792);
    *(_BYTE *)(a1 + 5816) = *(_BYTE *)(a2 + 5816);
    *(_DWORD *)(a1 + 5817) = *(_DWORD *)(a2 + 5817);
    *(_WORD *)(a1 + 5821) = *(_WORD *)(a2 + 5821);
    *(_BYTE *)(a1 + 5823) = *(_BYTE *)(a2 + 5823);
    *(_QWORD *)(a1 + 5824) = v176;
    v201 = *(_QWORD *)(a2 + 5832);
    *(_QWORD *)(a1 + 5832) = v201;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRetain(v201);
  }
  v202 = *(_QWORD *)(a2 + 5840);
  *(_QWORD *)(a1 + 5840) = v202;
  *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a2 + 5848);
  *(_BYTE *)(a1 + 5852) = *(_BYTE *)(a2 + 5852);
  *(_QWORD *)(a1 + 5856) = *(_QWORD *)(a2 + 5856);
  *(_BYTE *)(a1 + 5864) = *(_BYTE *)(a2 + 5864);
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a2 + 5872);
  *(_BYTE *)(a1 + 5880) = *(_BYTE *)(a2 + 5880);
  *(_QWORD *)(a1 + 5888) = *(_QWORD *)(a2 + 5888);
  *(_BYTE *)(a1 + 5896) = *(_BYTE *)(a2 + 5896);
  *(_BYTE *)(a1 + 5912) = *(_BYTE *)(a2 + 5912);
  *(_QWORD *)(a1 + 5904) = *(_QWORD *)(a2 + 5904);
  swift_bridgeObjectRetain(v202);
  return a1;
}

uint64_t assignWithCopy for IQModel(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 *v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  __int128 *v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  __int128 *v164;
  __int128 *v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 *v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  __int128 *v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  __int128 *v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  __int128 *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 *v204;
  __int128 *v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  __int128 *v220;
  __int128 *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  __int128 *v228;
  __int128 *v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  __int128 *v236;
  __int128 *v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  __int128 *v244;
  __int128 *v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  __int128 *v252;
  __int128 *v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  __int128 *v260;
  __int128 *v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  __int128 *v268;
  __int128 *v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _OWORD *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  uint64_t v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  uint64_t v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  __int128 *v367;
  __int128 *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  uint64_t v374;
  __int128 *v375;
  __int128 *v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  uint64_t v381;
  uint64_t v382;
  __int128 *v383;
  __int128 *v384;
  uint64_t v385;
  uint64_t v386;
  __int128 v387;
  __int128 v388;
  uint64_t v389;
  uint64_t v390;
  __int128 *v391;
  __int128 *v392;
  uint64_t v393;
  uint64_t v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  __int128 *v399;
  __int128 *v400;
  uint64_t v401;
  uint64_t v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  uint64_t v406;
  __int128 *v407;
  __int128 *v408;
  uint64_t v409;
  uint64_t v410;
  __int128 v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  __int128 *v415;
  __int128 *v416;
  uint64_t v417;
  uint64_t v418;
  __int128 v419;
  __int128 v420;
  uint64_t v421;
  uint64_t v422;
  __int128 *v423;
  __int128 *v424;
  uint64_t v425;
  uint64_t v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  uint64_t v430;
  __int128 *v431;
  __int128 *v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  uint64_t v437;
  uint64_t v438;
  __int128 *v439;
  __int128 *v440;
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  __int128 *v447;
  __int128 *v448;
  uint64_t v449;
  uint64_t v450;
  __int128 v451;
  __int128 v452;
  uint64_t v453;
  uint64_t v454;
  __int128 *v455;
  __int128 *v456;
  uint64_t v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  uint64_t v461;
  uint64_t v462;
  __int128 *v463;
  __int128 *v464;
  uint64_t v465;
  uint64_t v466;
  __int128 v467;
  __int128 v468;
  uint64_t v469;
  uint64_t v470;
  __int128 *v471;
  __int128 *v472;
  uint64_t v473;
  uint64_t v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;
  uint64_t v478;
  __int128 *v479;
  __int128 *v480;
  uint64_t v481;
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  uint64_t v485;
  uint64_t v486;
  __int128 *v487;
  __int128 *v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  __int128 v492;
  uint64_t v493;
  uint64_t v494;
  __int128 *v495;
  __int128 *v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  uint64_t v501;
  uint64_t v502;
  __int128 *v503;
  __int128 *v504;
  uint64_t v505;
  uint64_t v506;
  __int128 v507;
  __int128 v508;
  uint64_t v509;
  uint64_t v510;
  __int128 *v511;
  __int128 *v512;
  uint64_t v513;
  uint64_t v514;
  __int128 v515;
  __int128 v516;
  uint64_t v517;
  uint64_t v518;
  __int128 *v519;
  __int128 *v520;
  uint64_t v521;
  uint64_t v522;
  __int128 v523;
  __int128 v524;
  uint64_t v525;
  uint64_t v526;
  __int128 *v527;
  __int128 *v528;
  uint64_t v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  __int128 *v535;
  __int128 *v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  __int128 *v543;
  __int128 *v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  __int128 v548;
  uint64_t v549;
  uint64_t v550;
  __int128 v551;
  __int128 v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  _OWORD *v557;
  uint64_t *v558;
  uint64_t v559;
  uint64_t v560;
  __int128 v561;
  uint64_t v562;
  uint64_t v563;
  __int128 v564;
  uint64_t v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  uint64_t v576;
  __int128 v577;
  uint64_t v578;
  uint64_t v579;
  __int128 v580;
  uint64_t v581;
  uint64_t v582;
  __int128 v583;
  uint64_t v584;
  uint64_t v585;
  __int128 v586;
  uint64_t v587;
  uint64_t v588;
  __int128 v589;
  uint64_t v590;
  uint64_t v591;
  __int128 v592;
  uint64_t v593;
  uint64_t v594;
  __int128 v595;
  uint64_t v596;
  uint64_t v597;
  __int128 v598;
  uint64_t v599;
  uint64_t v600;
  __int128 v601;
  uint64_t v602;
  uint64_t v603;
  __int128 v604;
  uint64_t v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  uint64_t v609;
  __int128 v610;
  uint64_t v611;
  uint64_t v612;
  __int128 v613;
  uint64_t v614;
  uint64_t v615;
  __int128 v616;
  uint64_t v617;
  uint64_t v618;
  __int128 v619;
  uint64_t v620;
  uint64_t v621;
  __int128 v622;
  uint64_t v623;
  uint64_t v624;
  __int128 v625;
  uint64_t v626;
  uint64_t v627;
  __int128 v628;
  uint64_t v629;
  uint64_t v630;
  __int128 v631;
  uint64_t v632;
  uint64_t v633;
  __int128 v634;
  uint64_t v635;
  __int128 v636;
  __int128 v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  __int128 *v642;
  __int128 *v643;
  uint64_t v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  uint64_t v648;
  uint64_t v649;
  __int128 *v650;
  __int128 *v651;
  uint64_t v652;
  uint64_t v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;
  uint64_t v657;
  __int128 *v658;
  __int128 *v659;
  uint64_t v660;
  uint64_t v661;
  __int128 v662;
  __int128 v663;
  uint64_t v664;
  uint64_t v665;
  __int128 *v666;
  __int128 *v667;
  uint64_t v668;
  uint64_t v669;
  __int128 v670;
  __int128 v671;
  uint64_t v672;
  uint64_t v673;
  __int128 *v674;
  __int128 *v675;
  uint64_t v676;
  uint64_t v677;
  __int128 v678;
  __int128 v679;
  uint64_t v680;
  uint64_t v681;
  __int128 *v682;
  __int128 *v683;
  uint64_t v684;
  uint64_t v685;
  __int128 v686;
  __int128 v687;
  uint64_t v688;
  uint64_t v689;
  __int128 *v690;
  __int128 *v691;
  uint64_t v692;
  uint64_t v693;
  __int128 v694;
  __int128 v695;
  uint64_t v696;
  uint64_t v697;
  __int128 *v698;
  __int128 *v699;
  uint64_t v700;
  uint64_t v701;
  __int128 v702;
  __int128 v703;
  uint64_t v704;
  uint64_t v705;
  __int128 *v706;
  __int128 *v707;
  uint64_t v708;
  uint64_t v709;
  __int128 v710;
  __int128 v711;
  uint64_t v712;
  uint64_t v713;
  __int128 *v714;
  __int128 *v715;
  uint64_t v716;
  uint64_t v717;
  __int128 v718;
  __int128 v719;
  uint64_t v720;
  uint64_t v721;
  __int128 *v722;
  __int128 *v723;
  uint64_t v724;
  uint64_t v725;
  __int128 v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  __int128 *v730;
  __int128 *v731;
  uint64_t v732;
  uint64_t v733;
  __int128 v734;
  __int128 v735;
  uint64_t v736;
  uint64_t v737;
  __int128 *v738;
  __int128 *v739;
  uint64_t v740;
  uint64_t v741;
  __int128 v742;
  __int128 v743;
  uint64_t v744;
  uint64_t v745;
  __int128 *v746;
  __int128 *v747;
  uint64_t v748;
  uint64_t v749;
  __int128 v750;
  __int128 v751;
  uint64_t v752;
  uint64_t v753;
  __int128 *v754;
  __int128 *v755;
  uint64_t v756;
  uint64_t v757;
  __int128 v758;
  __int128 v759;
  uint64_t v760;
  uint64_t v761;
  __int128 *v762;
  __int128 *v763;
  uint64_t v764;
  uint64_t v765;
  __int128 v766;
  __int128 v767;
  uint64_t v768;
  uint64_t v769;
  __int128 *v770;
  __int128 *v771;
  uint64_t v772;
  uint64_t v773;
  __int128 v774;
  __int128 v775;
  uint64_t v776;
  uint64_t v777;
  __int128 *v778;
  __int128 *v779;
  uint64_t v780;
  uint64_t v781;
  __int128 v782;
  __int128 v783;
  uint64_t v784;
  uint64_t v785;
  __int128 *v786;
  __int128 *v787;
  uint64_t v788;
  uint64_t v789;
  __int128 v790;
  __int128 v791;
  uint64_t v792;
  uint64_t v793;
  __int128 *v794;
  __int128 *v795;
  uint64_t v796;
  uint64_t v797;
  __int128 v798;
  __int128 v799;
  uint64_t v800;
  uint64_t v801;
  __int128 *v802;
  __int128 *v803;
  uint64_t v804;
  uint64_t v805;
  __int128 v806;
  __int128 v807;
  uint64_t v808;
  uint64_t v809;
  __int128 *v810;
  __int128 *v811;
  uint64_t v812;
  uint64_t v813;
  __int128 v814;
  __int128 v815;
  uint64_t v816;
  uint64_t v817;
  __int128 *v818;
  __int128 *v819;
  uint64_t v820;
  uint64_t v821;
  __int128 v822;
  __int128 v823;
  uint64_t v824;
  uint64_t v825;
  __int128 v826;
  __int128 v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  _BYTE *v832;
  _OWORD *v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  __int128 v837;
  uint64_t v838;
  uint64_t v839;
  __int128 v840;
  uint64_t v841;
  uint64_t v842;
  __int128 v843;
  __int128 v844;
  uint64_t v845;
  uint64_t v846;
  __int128 v847;
  uint64_t v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  uint64_t v852;
  __int128 v853;
  uint64_t v854;
  uint64_t v855;
  __int128 v856;
  uint64_t v857;
  uint64_t v858;
  __int128 v859;
  uint64_t v860;
  uint64_t v861;
  __int128 v862;
  uint64_t v863;
  uint64_t v864;
  __int128 v865;
  uint64_t v866;
  uint64_t v867;
  __int128 v868;
  uint64_t v869;
  uint64_t v870;
  __int128 v871;
  uint64_t v872;
  uint64_t v873;
  __int128 v874;
  uint64_t v875;
  uint64_t v876;
  __int128 v877;
  uint64_t v878;
  uint64_t v879;
  __int128 v880;
  uint64_t v881;
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  uint64_t v885;
  __int128 v886;
  uint64_t v887;
  uint64_t v888;
  __int128 v889;
  uint64_t v890;
  uint64_t v891;
  __int128 v892;
  uint64_t v893;
  uint64_t v894;
  __int128 v895;
  uint64_t v896;
  uint64_t v897;
  __int128 v898;
  uint64_t v899;
  uint64_t v900;
  __int128 v901;
  uint64_t v902;
  uint64_t v903;
  __int128 v904;
  uint64_t v905;
  uint64_t v906;
  __int128 v907;
  uint64_t v908;
  uint64_t v909;
  __int128 v910;
  uint64_t v911;
  __int128 v912;
  __int128 v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  __int128 *v918;
  __int128 *v919;
  uint64_t v920;
  uint64_t v921;
  __int128 v922;
  __int128 v923;
  uint64_t v924;
  uint64_t v925;
  __int128 *v926;
  __int128 *v927;
  uint64_t v928;
  uint64_t v929;
  __int128 v930;
  __int128 v931;
  uint64_t v932;
  uint64_t v933;
  __int128 *v934;
  __int128 *v935;
  uint64_t v936;
  uint64_t v937;
  __int128 v938;
  __int128 v939;
  uint64_t v940;
  uint64_t v941;
  __int128 *v942;
  __int128 *v943;
  uint64_t v944;
  uint64_t v945;
  __int128 v946;
  __int128 v947;
  uint64_t v948;
  uint64_t v949;
  __int128 *v950;
  __int128 *v951;
  uint64_t v952;
  uint64_t v953;
  __int128 v954;
  __int128 v955;
  uint64_t v956;
  uint64_t v957;
  __int128 *v958;
  __int128 *v959;
  uint64_t v960;
  uint64_t v961;
  __int128 v962;
  __int128 v963;
  uint64_t v964;
  uint64_t v965;
  __int128 *v966;
  __int128 *v967;
  uint64_t v968;
  uint64_t v969;
  __int128 v970;
  __int128 v971;
  uint64_t v972;
  uint64_t v973;
  __int128 *v974;
  __int128 *v975;
  uint64_t v976;
  uint64_t v977;
  __int128 v978;
  __int128 v979;
  uint64_t v980;
  uint64_t v981;
  __int128 *v982;
  __int128 *v983;
  uint64_t v984;
  uint64_t v985;
  __int128 v986;
  __int128 v987;
  uint64_t v988;
  uint64_t v989;
  __int128 *v990;
  __int128 *v991;
  uint64_t v992;
  uint64_t v993;
  __int128 v994;
  __int128 v995;
  uint64_t v996;
  uint64_t v997;
  __int128 *v998;
  __int128 *v999;
  uint64_t v1000;
  uint64_t v1001;
  __int128 v1002;
  __int128 v1003;
  uint64_t v1004;
  uint64_t v1005;
  __int128 *v1006;
  __int128 *v1007;
  uint64_t v1008;
  uint64_t v1009;
  __int128 v1010;
  __int128 v1011;
  uint64_t v1012;
  uint64_t v1013;
  __int128 *v1014;
  __int128 *v1015;
  uint64_t v1016;
  uint64_t v1017;
  __int128 v1018;
  __int128 v1019;
  uint64_t v1020;
  uint64_t v1021;
  __int128 *v1022;
  __int128 *v1023;
  uint64_t v1024;
  uint64_t v1025;
  __int128 v1026;
  __int128 v1027;
  uint64_t v1028;
  uint64_t v1029;
  __int128 *v1030;
  __int128 *v1031;
  uint64_t v1032;
  uint64_t v1033;
  __int128 v1034;
  __int128 v1035;
  uint64_t v1036;
  uint64_t v1037;
  __int128 *v1038;
  __int128 *v1039;
  uint64_t v1040;
  uint64_t v1041;
  __int128 v1042;
  __int128 v1043;
  uint64_t v1044;
  uint64_t v1045;
  __int128 *v1046;
  __int128 *v1047;
  uint64_t v1048;
  uint64_t v1049;
  __int128 v1050;
  __int128 v1051;
  uint64_t v1052;
  uint64_t v1053;
  __int128 *v1054;
  __int128 *v1055;
  uint64_t v1056;
  uint64_t v1057;
  __int128 v1058;
  __int128 v1059;
  uint64_t v1060;
  uint64_t v1061;
  __int128 *v1062;
  __int128 *v1063;
  uint64_t v1064;
  uint64_t v1065;
  __int128 v1066;
  __int128 v1067;
  uint64_t v1068;
  uint64_t v1069;
  __int128 *v1070;
  __int128 *v1071;
  uint64_t v1072;
  uint64_t v1073;
  __int128 v1074;
  __int128 v1075;
  uint64_t v1076;
  uint64_t v1077;
  __int128 *v1078;
  __int128 *v1079;
  uint64_t v1080;
  uint64_t v1081;
  __int128 v1082;
  __int128 v1083;
  uint64_t v1084;
  uint64_t v1085;
  __int128 *v1086;
  __int128 *v1087;
  uint64_t v1088;
  uint64_t v1089;
  __int128 v1090;
  __int128 v1091;
  uint64_t v1092;
  uint64_t v1093;
  __int128 *v1094;
  __int128 *v1095;
  uint64_t v1096;
  uint64_t v1097;
  __int128 v1098;
  __int128 v1099;
  uint64_t v1100;
  uint64_t v1101;
  __int128 v1102;
  __int128 v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  _BYTE *v1108;
  _OWORD *v1109;
  uint64_t *v1110;
  uint64_t v1111;
  uint64_t v1112;
  __int128 v1113;
  uint64_t v1114;
  uint64_t v1115;
  __int128 v1116;
  uint64_t v1117;
  uint64_t v1118;
  __int128 v1119;
  __int128 v1120;
  uint64_t v1121;
  uint64_t v1122;
  __int128 v1123;
  uint64_t v1124;
  uint64_t v1125;
  __int128 v1126;
  uint64_t v1127;
  uint64_t v1128;
  __int128 v1129;
  uint64_t v1130;
  uint64_t v1131;
  __int128 v1132;
  uint64_t v1133;
  uint64_t v1134;
  __int128 v1135;
  uint64_t v1136;
  uint64_t v1137;
  __int128 v1138;
  uint64_t v1139;
  uint64_t v1140;
  __int128 v1141;
  uint64_t v1142;
  uint64_t v1143;
  __int128 v1144;
  uint64_t v1145;
  uint64_t v1146;
  __int128 v1147;
  uint64_t v1148;
  uint64_t v1149;
  __int128 v1150;
  uint64_t v1151;
  uint64_t v1152;
  __int128 v1153;
  uint64_t v1154;
  uint64_t v1155;
  __int128 v1156;
  uint64_t v1157;
  uint64_t v1158;
  __int128 v1159;
  uint64_t v1160;
  uint64_t v1161;
  __int128 v1162;
  uint64_t v1163;
  uint64_t v1164;
  __int128 v1165;
  uint64_t v1166;
  uint64_t v1167;
  __int128 v1168;
  uint64_t v1169;
  uint64_t v1170;
  __int128 v1171;
  uint64_t v1172;
  uint64_t v1173;
  __int128 v1174;
  uint64_t v1175;
  uint64_t v1176;
  __int128 v1177;
  uint64_t v1178;
  uint64_t v1179;
  __int128 v1180;
  uint64_t v1181;
  uint64_t v1182;
  __int128 v1183;
  uint64_t v1184;
  uint64_t v1185;
  __int128 v1186;
  uint64_t v1187;
  __int128 v1188;
  char v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  __int128 *v1194;
  __int128 *v1195;
  uint64_t v1196;
  uint64_t v1197;
  __int128 v1198;
  __int128 v1199;
  uint64_t v1200;
  uint64_t v1201;
  __int128 *v1202;
  __int128 *v1203;
  uint64_t v1204;
  uint64_t v1205;
  __int128 v1206;
  __int128 v1207;
  uint64_t v1208;
  uint64_t v1209;
  __int128 *v1210;
  __int128 *v1211;
  uint64_t v1212;
  uint64_t v1213;
  __int128 v1214;
  __int128 v1215;
  uint64_t v1216;
  uint64_t v1217;
  __int128 *v1218;
  __int128 *v1219;
  uint64_t v1220;
  uint64_t v1221;
  __int128 v1222;
  __int128 v1223;
  uint64_t v1224;
  uint64_t v1225;
  __int128 *v1226;
  __int128 *v1227;
  uint64_t v1228;
  uint64_t v1229;
  __int128 v1230;
  __int128 v1231;
  uint64_t v1232;
  uint64_t v1233;
  __int128 *v1234;
  __int128 *v1235;
  uint64_t v1236;
  uint64_t v1237;
  __int128 v1238;
  __int128 v1239;
  uint64_t v1240;
  uint64_t v1241;
  __int128 *v1242;
  __int128 *v1243;
  uint64_t v1244;
  uint64_t v1245;
  __int128 v1246;
  __int128 v1247;
  uint64_t v1248;
  uint64_t v1249;
  __int128 *v1250;
  __int128 *v1251;
  uint64_t v1252;
  uint64_t v1253;
  __int128 v1254;
  __int128 v1255;
  uint64_t v1256;
  uint64_t v1257;
  __int128 *v1258;
  __int128 *v1259;
  uint64_t v1260;
  uint64_t v1261;
  __int128 v1262;
  __int128 v1263;
  uint64_t v1264;
  uint64_t v1265;
  __int128 *v1266;
  __int128 *v1267;
  uint64_t v1268;
  uint64_t v1269;
  __int128 v1270;
  __int128 v1271;
  uint64_t v1272;
  uint64_t v1273;
  __int128 *v1274;
  __int128 *v1275;
  uint64_t v1276;
  uint64_t v1277;
  __int128 v1278;
  __int128 v1279;
  uint64_t v1280;
  uint64_t v1281;
  __int128 *v1282;
  __int128 *v1283;
  uint64_t v1284;
  uint64_t v1285;
  __int128 v1286;
  __int128 v1287;
  uint64_t v1288;
  uint64_t v1289;
  __int128 *v1290;
  __int128 *v1291;
  uint64_t v1292;
  uint64_t v1293;
  __int128 v1294;
  __int128 v1295;
  uint64_t v1296;
  uint64_t v1297;
  __int128 *v1298;
  __int128 *v1299;
  uint64_t v1300;
  uint64_t v1301;
  __int128 v1302;
  __int128 v1303;
  uint64_t v1304;
  uint64_t v1305;
  __int128 *v1306;
  __int128 *v1307;
  uint64_t v1308;
  uint64_t v1309;
  __int128 v1310;
  __int128 v1311;
  uint64_t v1312;
  uint64_t v1313;
  __int128 *v1314;
  __int128 *v1315;
  uint64_t v1316;
  uint64_t v1317;
  __int128 v1318;
  __int128 v1319;
  uint64_t v1320;
  uint64_t v1321;
  __int128 *v1322;
  __int128 *v1323;
  uint64_t v1324;
  uint64_t v1325;
  __int128 v1326;
  __int128 v1327;
  uint64_t v1328;
  uint64_t v1329;
  __int128 *v1330;
  __int128 *v1331;
  uint64_t v1332;
  uint64_t v1333;
  __int128 v1334;
  __int128 v1335;
  uint64_t v1336;
  uint64_t v1337;
  __int128 *v1338;
  __int128 *v1339;
  uint64_t v1340;
  uint64_t v1341;
  __int128 v1342;
  __int128 v1343;
  uint64_t v1344;
  uint64_t v1345;
  __int128 *v1346;
  __int128 *v1347;
  uint64_t v1348;
  uint64_t v1349;
  __int128 v1350;
  __int128 v1351;
  uint64_t v1352;
  uint64_t v1353;
  __int128 *v1354;
  __int128 *v1355;
  uint64_t v1356;
  uint64_t v1357;
  __int128 v1358;
  __int128 v1359;
  uint64_t v1360;
  uint64_t v1361;
  __int128 *v1362;
  __int128 *v1363;
  uint64_t v1364;
  uint64_t v1365;
  __int128 v1366;
  __int128 v1367;
  uint64_t v1368;
  uint64_t v1369;
  __int128 *v1370;
  __int128 *v1371;
  uint64_t v1372;
  uint64_t v1373;
  __int128 v1374;
  __int128 v1375;
  uint64_t v1376;
  uint64_t v1377;
  __int128 v1378;
  char v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  _OWORD *v1384;
  uint64_t *v1385;
  uint64_t v1386;
  uint64_t v1387;
  __int128 v1388;
  uint64_t v1389;
  uint64_t v1390;
  __int128 v1391;
  uint64_t v1392;
  uint64_t v1393;
  __int128 v1394;
  __int128 v1395;
  uint64_t v1396;
  uint64_t v1397;
  __int128 v1398;
  uint64_t v1399;
  uint64_t v1400;
  __int128 v1401;
  uint64_t v1402;
  uint64_t v1403;
  __int128 v1404;
  uint64_t v1405;
  uint64_t v1406;
  __int128 v1407;
  uint64_t v1408;
  uint64_t v1409;
  __int128 v1410;
  uint64_t v1411;
  uint64_t v1412;
  __int128 v1413;
  uint64_t v1414;
  uint64_t v1415;
  __int128 v1416;
  uint64_t v1417;
  uint64_t v1418;
  __int128 v1419;
  uint64_t v1420;
  uint64_t v1421;
  __int128 v1422;
  uint64_t v1423;
  uint64_t v1424;
  __int128 v1425;
  uint64_t v1426;
  uint64_t v1427;
  __int128 v1428;
  uint64_t v1429;
  uint64_t v1430;
  __int128 v1431;
  uint64_t v1432;
  uint64_t v1433;
  __int128 v1434;
  uint64_t v1435;
  uint64_t v1436;
  __int128 v1437;
  uint64_t v1438;
  uint64_t v1439;
  __int128 v1440;
  uint64_t v1441;
  uint64_t v1442;
  __int128 v1443;
  uint64_t v1444;
  uint64_t v1445;
  __int128 v1446;
  uint64_t v1447;
  uint64_t v1448;
  __int128 v1449;
  uint64_t v1450;
  uint64_t v1451;
  __int128 v1452;
  uint64_t v1453;
  uint64_t v1454;
  __int128 v1455;
  uint64_t v1456;
  uint64_t v1457;
  __int128 v1458;
  uint64_t v1459;
  uint64_t v1460;
  __int128 v1461;
  uint64_t v1462;
  __int128 v1463;
  char v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  __int128 *v1469;
  __int128 *v1470;
  uint64_t v1471;
  uint64_t v1472;
  __int128 v1473;
  __int128 v1474;
  uint64_t v1475;
  uint64_t v1476;
  __int128 *v1477;
  __int128 *v1478;
  uint64_t v1479;
  uint64_t v1480;
  __int128 v1481;
  __int128 v1482;
  uint64_t v1483;
  uint64_t v1484;
  __int128 *v1485;
  __int128 *v1486;
  uint64_t v1487;
  uint64_t v1488;
  __int128 v1489;
  __int128 v1490;
  uint64_t v1491;
  uint64_t v1492;
  __int128 *v1493;
  __int128 *v1494;
  uint64_t v1495;
  uint64_t v1496;
  __int128 v1497;
  __int128 v1498;
  uint64_t v1499;
  uint64_t v1500;
  __int128 *v1501;
  __int128 *v1502;
  uint64_t v1503;
  uint64_t v1504;
  __int128 v1505;
  __int128 v1506;
  uint64_t v1507;
  uint64_t v1508;
  __int128 *v1509;
  __int128 *v1510;
  uint64_t v1511;
  uint64_t v1512;
  __int128 v1513;
  __int128 v1514;
  uint64_t v1515;
  uint64_t v1516;
  __int128 *v1517;
  __int128 *v1518;
  uint64_t v1519;
  uint64_t v1520;
  __int128 v1521;
  __int128 v1522;
  uint64_t v1523;
  uint64_t v1524;
  __int128 *v1525;
  __int128 *v1526;
  uint64_t v1527;
  uint64_t v1528;
  __int128 v1529;
  __int128 v1530;
  uint64_t v1531;
  uint64_t v1532;
  __int128 *v1533;
  __int128 *v1534;
  uint64_t v1535;
  uint64_t v1536;
  __int128 v1537;
  __int128 v1538;
  uint64_t v1539;
  uint64_t v1540;
  __int128 *v1541;
  __int128 *v1542;
  uint64_t v1543;
  uint64_t v1544;
  __int128 v1545;
  __int128 v1546;
  uint64_t v1547;
  uint64_t v1548;
  __int128 *v1549;
  __int128 *v1550;
  uint64_t v1551;
  uint64_t v1552;
  __int128 v1553;
  __int128 v1554;
  uint64_t v1555;
  uint64_t v1556;
  __int128 *v1557;
  __int128 *v1558;
  uint64_t v1559;
  uint64_t v1560;
  __int128 v1561;
  __int128 v1562;
  uint64_t v1563;
  uint64_t v1564;
  __int128 *v1565;
  __int128 *v1566;
  uint64_t v1567;
  uint64_t v1568;
  __int128 v1569;
  __int128 v1570;
  uint64_t v1571;
  uint64_t v1572;
  __int128 *v1573;
  __int128 *v1574;
  uint64_t v1575;
  uint64_t v1576;
  __int128 v1577;
  __int128 v1578;
  uint64_t v1579;
  uint64_t v1580;
  __int128 *v1581;
  __int128 *v1582;
  uint64_t v1583;
  uint64_t v1584;
  __int128 v1585;
  __int128 v1586;
  uint64_t v1587;
  uint64_t v1588;
  __int128 *v1589;
  __int128 *v1590;
  uint64_t v1591;
  uint64_t v1592;
  __int128 v1593;
  __int128 v1594;
  uint64_t v1595;
  uint64_t v1596;
  __int128 *v1597;
  __int128 *v1598;
  uint64_t v1599;
  uint64_t v1600;
  __int128 v1601;
  __int128 v1602;
  uint64_t v1603;
  uint64_t v1604;
  __int128 *v1605;
  __int128 *v1606;
  uint64_t v1607;
  uint64_t v1608;
  __int128 v1609;
  __int128 v1610;
  uint64_t v1611;
  uint64_t v1612;
  __int128 *v1613;
  __int128 *v1614;
  uint64_t v1615;
  uint64_t v1616;
  __int128 v1617;
  __int128 v1618;
  uint64_t v1619;
  uint64_t v1620;
  __int128 *v1621;
  __int128 *v1622;
  uint64_t v1623;
  uint64_t v1624;
  __int128 v1625;
  __int128 v1626;
  uint64_t v1627;
  uint64_t v1628;
  __int128 *v1629;
  __int128 *v1630;
  uint64_t v1631;
  uint64_t v1632;
  __int128 v1633;
  __int128 v1634;
  uint64_t v1635;
  uint64_t v1636;
  __int128 *v1637;
  __int128 *v1638;
  uint64_t v1639;
  uint64_t v1640;
  __int128 v1641;
  __int128 v1642;
  uint64_t v1643;
  uint64_t v1644;
  __int128 *v1645;
  __int128 *v1646;
  uint64_t v1647;
  uint64_t v1648;
  __int128 v1649;
  __int128 v1650;
  uint64_t v1651;
  uint64_t v1652;
  __int128 v1653;
  char v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  _OWORD *v1659;
  uint64_t *v1660;
  uint64_t v1661;
  uint64_t v1662;
  __int128 v1663;
  uint64_t v1664;
  uint64_t v1665;
  __int128 v1666;
  uint64_t v1667;
  uint64_t v1668;
  __int128 v1669;
  __int128 v1670;
  uint64_t v1671;
  uint64_t v1672;
  __int128 v1673;
  uint64_t v1674;
  uint64_t v1675;
  __int128 v1676;
  uint64_t v1677;
  uint64_t v1678;
  __int128 v1679;
  uint64_t v1680;
  uint64_t v1681;
  __int128 v1682;
  uint64_t v1683;
  uint64_t v1684;
  __int128 v1685;
  uint64_t v1686;
  uint64_t v1687;
  __int128 v1688;
  uint64_t v1689;
  uint64_t v1690;
  __int128 v1691;
  uint64_t v1692;
  uint64_t v1693;
  __int128 v1694;
  uint64_t v1695;
  uint64_t v1696;
  __int128 v1697;
  uint64_t v1698;
  uint64_t v1699;
  __int128 v1700;
  uint64_t v1701;
  uint64_t v1702;
  __int128 v1703;
  uint64_t v1704;
  uint64_t v1705;
  __int128 v1706;
  uint64_t v1707;
  uint64_t v1708;
  __int128 v1709;
  uint64_t v1710;
  uint64_t v1711;
  __int128 v1712;
  uint64_t v1713;
  uint64_t v1714;
  __int128 v1715;
  uint64_t v1716;
  uint64_t v1717;
  __int128 v1718;
  uint64_t v1719;
  uint64_t v1720;
  __int128 v1721;
  uint64_t v1722;
  uint64_t v1723;
  __int128 v1724;
  uint64_t v1725;
  uint64_t v1726;
  __int128 v1727;
  uint64_t v1728;
  uint64_t v1729;
  __int128 v1730;
  uint64_t v1731;
  uint64_t v1732;
  __int128 v1733;
  uint64_t v1734;
  uint64_t v1735;
  __int128 v1736;
  uint64_t v1737;
  __int128 v1738;
  char v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  __int128 *v1744;
  __int128 *v1745;
  uint64_t v1746;
  uint64_t v1747;
  __int128 v1748;
  __int128 v1749;
  uint64_t v1750;
  uint64_t v1751;
  __int128 *v1752;
  __int128 *v1753;
  uint64_t v1754;
  uint64_t v1755;
  __int128 v1756;
  __int128 v1757;
  uint64_t v1758;
  uint64_t v1759;
  __int128 *v1760;
  __int128 *v1761;
  uint64_t v1762;
  uint64_t v1763;
  __int128 v1764;
  __int128 v1765;
  uint64_t v1766;
  uint64_t v1767;
  __int128 *v1768;
  __int128 *v1769;
  uint64_t v1770;
  uint64_t v1771;
  __int128 v1772;
  __int128 v1773;
  uint64_t v1774;
  uint64_t v1775;
  __int128 *v1776;
  __int128 *v1777;
  uint64_t v1778;
  uint64_t v1779;
  __int128 v1780;
  __int128 v1781;
  uint64_t v1782;
  uint64_t v1783;
  __int128 *v1784;
  __int128 *v1785;
  uint64_t v1786;
  uint64_t v1787;
  __int128 v1788;
  __int128 v1789;
  uint64_t v1790;
  uint64_t v1791;
  __int128 *v1792;
  __int128 *v1793;
  uint64_t v1794;
  uint64_t v1795;
  __int128 v1796;
  __int128 v1797;
  uint64_t v1798;
  uint64_t v1799;
  __int128 *v1800;
  __int128 *v1801;
  uint64_t v1802;
  uint64_t v1803;
  __int128 v1804;
  __int128 v1805;
  uint64_t v1806;
  uint64_t v1807;
  __int128 *v1808;
  __int128 *v1809;
  uint64_t v1810;
  uint64_t v1811;
  __int128 v1812;
  __int128 v1813;
  uint64_t v1814;
  uint64_t v1815;
  __int128 *v1816;
  __int128 *v1817;
  uint64_t v1818;
  uint64_t v1819;
  __int128 v1820;
  __int128 v1821;
  uint64_t v1822;
  uint64_t v1823;
  __int128 *v1824;
  __int128 *v1825;
  uint64_t v1826;
  uint64_t v1827;
  __int128 v1828;
  __int128 v1829;
  uint64_t v1830;
  uint64_t v1831;
  __int128 *v1832;
  __int128 *v1833;
  uint64_t v1834;
  uint64_t v1835;
  __int128 v1836;
  __int128 v1837;
  uint64_t v1838;
  uint64_t v1839;
  __int128 *v1840;
  __int128 *v1841;
  uint64_t v1842;
  uint64_t v1843;
  __int128 v1844;
  __int128 v1845;
  uint64_t v1846;
  uint64_t v1847;
  __int128 *v1848;
  __int128 *v1849;
  uint64_t v1850;
  uint64_t v1851;
  __int128 v1852;
  __int128 v1853;
  uint64_t v1854;
  uint64_t v1855;
  __int128 *v1856;
  __int128 *v1857;
  uint64_t v1858;
  uint64_t v1859;
  __int128 v1860;
  __int128 v1861;
  uint64_t v1862;
  uint64_t v1863;
  __int128 *v1864;
  __int128 *v1865;
  uint64_t v1866;
  uint64_t v1867;
  __int128 v1868;
  __int128 v1869;
  uint64_t v1870;
  uint64_t v1871;
  __int128 *v1872;
  __int128 *v1873;
  uint64_t v1874;
  uint64_t v1875;
  __int128 v1876;
  __int128 v1877;
  uint64_t v1878;
  uint64_t v1879;
  __int128 *v1880;
  __int128 *v1881;
  uint64_t v1882;
  uint64_t v1883;
  __int128 v1884;
  __int128 v1885;
  uint64_t v1886;
  uint64_t v1887;
  __int128 *v1888;
  __int128 *v1889;
  uint64_t v1890;
  uint64_t v1891;
  __int128 v1892;
  __int128 v1893;
  uint64_t v1894;
  uint64_t v1895;
  __int128 *v1896;
  __int128 *v1897;
  uint64_t v1898;
  uint64_t v1899;
  __int128 v1900;
  __int128 v1901;
  uint64_t v1902;
  uint64_t v1903;
  __int128 *v1904;
  __int128 *v1905;
  uint64_t v1906;
  uint64_t v1907;
  __int128 v1908;
  __int128 v1909;
  uint64_t v1910;
  uint64_t v1911;
  __int128 *v1912;
  __int128 *v1913;
  uint64_t v1914;
  uint64_t v1915;
  __int128 v1916;
  __int128 v1917;
  uint64_t v1918;
  uint64_t v1919;
  __int128 *v1920;
  __int128 *v1921;
  uint64_t v1922;
  uint64_t v1923;
  __int128 v1924;
  __int128 v1925;
  uint64_t v1926;
  uint64_t v1927;
  __int128 v1928;
  char v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  char v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;

  v4 = (_BYTE *)(a2 + 280);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = (_OWORD *)(a1 + 16);
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 832);
  if (*(_QWORD *)(a1 + 832) == 1)
  {
    if (v9 != 1)
    {
      v10 = *v8;
      if (*v8 == 1)
      {
        v11 = *(_OWORD *)v8;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        *v7 = v11;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v10;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        v15 = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
        *(_QWORD *)(a1 + 32) = v15;
        swift_bridgeObjectRetain(v10);
      }
      v16 = *(_QWORD *)(a2 + 48);
      if (v16 == 1)
      {
        v17 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 48) = v17;
      }
      else
      {
        *(_QWORD *)(a1 + 48) = v16;
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        v19 = *(_QWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v19;
        swift_bridgeObjectRetain(v16);
      }
      v20 = *(_QWORD *)(a2 + 80);
      if (v20 == 1)
      {
        v21 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        *(_OWORD *)(a1 + 80) = v21;
      }
      else
      {
        *(_QWORD *)(a1 + 80) = v20;
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        v22 = *(_QWORD *)(a2 + 96);
        *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
        *(_QWORD *)(a1 + 96) = v22;
        swift_bridgeObjectRetain(v20);
      }
      v23 = *(_QWORD *)(a2 + 112);
      if (v23 == 1)
      {
        v24 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
        *(_OWORD *)(a1 + 112) = v24;
      }
      else
      {
        *(_QWORD *)(a1 + 112) = v23;
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        v25 = *(_QWORD *)(a2 + 128);
        *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
        *(_QWORD *)(a1 + 128) = v25;
        swift_bridgeObjectRetain(v23);
      }
      v26 = *(_QWORD *)(a2 + 144);
      if (v26 == 1)
      {
        v27 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
        *(_OWORD *)(a1 + 144) = v27;
      }
      else
      {
        *(_QWORD *)(a1 + 144) = v26;
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        v28 = *(_QWORD *)(a2 + 160);
        *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = v28;
        swift_bridgeObjectRetain(v26);
      }
      v29 = *(_QWORD *)(a2 + 176);
      if (v29 == 1)
      {
        v30 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
        *(_OWORD *)(a1 + 176) = v30;
      }
      else
      {
        *(_QWORD *)(a1 + 176) = v29;
        *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
        v31 = *(_QWORD *)(a2 + 192);
        *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
        *(_QWORD *)(a1 + 192) = v31;
        swift_bridgeObjectRetain(v29);
      }
      v32 = *(_QWORD *)(a2 + 208);
      if (v32 == 1)
      {
        v33 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
        *(_OWORD *)(a1 + 208) = v33;
      }
      else
      {
        *(_QWORD *)(a1 + 208) = v32;
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        v34 = *(_QWORD *)(a2 + 224);
        *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
        *(_QWORD *)(a1 + 224) = v34;
        swift_bridgeObjectRetain(v32);
      }
      v35 = *(_QWORD *)(a2 + 240);
      if (v35 == 1)
      {
        v36 = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
        *(_OWORD *)(a1 + 240) = v36;
      }
      else
      {
        *(_QWORD *)(a1 + 240) = v35;
        *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
        v37 = *(_QWORD *)(a2 + 256);
        *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
        *(_QWORD *)(a1 + 256) = v37;
        swift_bridgeObjectRetain(v35);
      }
      v38 = *(_QWORD *)(a2 + 272);
      if (v38 == 1)
      {
        v39 = *(_OWORD *)(a2 + 272);
        *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
        *(_OWORD *)(a1 + 272) = v39;
      }
      else
      {
        *(_QWORD *)(a1 + 272) = v38;
        *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
        v40 = *(_QWORD *)(a2 + 288);
        *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
        *(_QWORD *)(a1 + 288) = v40;
        swift_bridgeObjectRetain(v38);
      }
      v41 = *(_QWORD *)(a2 + 304);
      if (v41 == 1)
      {
        v42 = *(_OWORD *)(a2 + 304);
        *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
        *(_OWORD *)(a1 + 304) = v42;
      }
      else
      {
        *(_QWORD *)(a1 + 304) = v41;
        *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
        v43 = *(_QWORD *)(a2 + 320);
        *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
        *(_QWORD *)(a1 + 320) = v43;
        swift_bridgeObjectRetain(v41);
      }
      v44 = *(_QWORD *)(a2 + 336);
      if (v44 == 1)
      {
        v45 = *(_OWORD *)(a2 + 336);
        *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
        *(_OWORD *)(a1 + 336) = v45;
      }
      else
      {
        *(_QWORD *)(a1 + 336) = v44;
        *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
        v46 = *(_QWORD *)(a2 + 352);
        *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
        *(_QWORD *)(a1 + 352) = v46;
        swift_bridgeObjectRetain(v44);
      }
      v47 = *(_QWORD *)(a2 + 368);
      if (v47 == 1)
      {
        v48 = *(_OWORD *)(a2 + 368);
        *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
        *(_OWORD *)(a1 + 368) = v48;
      }
      else
      {
        *(_QWORD *)(a1 + 368) = v47;
        *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
        v49 = *(_QWORD *)(a2 + 384);
        *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
        *(_QWORD *)(a1 + 384) = v49;
        swift_bridgeObjectRetain(v47);
      }
      v50 = *(_QWORD *)(a2 + 400);
      if (v50 == 1)
      {
        v51 = *(_OWORD *)(a2 + 400);
        *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
        *(_OWORD *)(a1 + 400) = v51;
      }
      else
      {
        *(_QWORD *)(a1 + 400) = v50;
        *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
        v52 = *(_QWORD *)(a2 + 416);
        *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
        *(_QWORD *)(a1 + 416) = v52;
        swift_bridgeObjectRetain(v50);
      }
      v53 = *(_QWORD *)(a2 + 432);
      if (v53 == 1)
      {
        v54 = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
        *(_OWORD *)(a1 + 432) = v54;
      }
      else
      {
        *(_QWORD *)(a1 + 432) = v53;
        *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
        v55 = *(_QWORD *)(a2 + 448);
        *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
        *(_QWORD *)(a1 + 448) = v55;
        swift_bridgeObjectRetain(v53);
      }
      v56 = *(_QWORD *)(a2 + 464);
      if (v56 == 1)
      {
        v57 = *(_OWORD *)(a2 + 464);
        *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
        *(_OWORD *)(a1 + 464) = v57;
      }
      else
      {
        *(_QWORD *)(a1 + 464) = v56;
        *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
        v58 = *(_QWORD *)(a2 + 480);
        *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
        *(_QWORD *)(a1 + 480) = v58;
        swift_bridgeObjectRetain(v56);
      }
      v59 = *(_QWORD *)(a2 + 496);
      if (v59 == 1)
      {
        v60 = *(_OWORD *)(a2 + 496);
        *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
        *(_OWORD *)(a1 + 496) = v60;
      }
      else
      {
        *(_QWORD *)(a1 + 496) = v59;
        *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
        v61 = *(_QWORD *)(a2 + 512);
        *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
        *(_QWORD *)(a1 + 512) = v61;
        swift_bridgeObjectRetain(v59);
      }
      v62 = *(_QWORD *)(a2 + 528);
      if (v62 == 1)
      {
        v63 = *(_OWORD *)(a2 + 528);
        *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
        *(_OWORD *)(a1 + 528) = v63;
      }
      else
      {
        *(_QWORD *)(a1 + 528) = v62;
        *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
        v64 = *(_QWORD *)(a2 + 544);
        *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
        *(_QWORD *)(a1 + 544) = v64;
        swift_bridgeObjectRetain(v62);
      }
      v65 = *(_QWORD *)(a2 + 560);
      if (v65 == 1)
      {
        v66 = *(_OWORD *)(a2 + 560);
        *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
        *(_OWORD *)(a1 + 560) = v66;
      }
      else
      {
        *(_QWORD *)(a1 + 560) = v65;
        *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
        v67 = *(_QWORD *)(a2 + 576);
        *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
        *(_QWORD *)(a1 + 576) = v67;
        swift_bridgeObjectRetain(v65);
      }
      v68 = *(_QWORD *)(a2 + 592);
      if (v68 == 1)
      {
        v69 = *(_OWORD *)(a2 + 592);
        *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
        *(_OWORD *)(a1 + 592) = v69;
      }
      else
      {
        *(_QWORD *)(a1 + 592) = v68;
        *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
        v70 = *(_QWORD *)(a2 + 608);
        *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
        *(_QWORD *)(a1 + 608) = v70;
        swift_bridgeObjectRetain(v68);
      }
      v71 = *(_QWORD *)(a2 + 624);
      if (v71 == 1)
      {
        v72 = *(_OWORD *)(a2 + 624);
        *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
        *(_OWORD *)(a1 + 624) = v72;
      }
      else
      {
        *(_QWORD *)(a1 + 624) = v71;
        *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
        v73 = *(_QWORD *)(a2 + 640);
        *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
        *(_QWORD *)(a1 + 640) = v73;
        swift_bridgeObjectRetain(v71);
      }
      v74 = *(_QWORD *)(a2 + 656);
      if (v74 == 1)
      {
        v75 = *(_OWORD *)(a2 + 656);
        *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
        *(_OWORD *)(a1 + 656) = v75;
      }
      else
      {
        *(_QWORD *)(a1 + 656) = v74;
        *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
        v76 = *(_QWORD *)(a2 + 672);
        *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
        *(_QWORD *)(a1 + 672) = v76;
        swift_bridgeObjectRetain(v74);
      }
      v77 = *(_QWORD *)(a2 + 688);
      if (v77 == 1)
      {
        v78 = *(_OWORD *)(a2 + 688);
        *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
        *(_OWORD *)(a1 + 688) = v78;
      }
      else
      {
        *(_QWORD *)(a1 + 688) = v77;
        *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
        v79 = *(_QWORD *)(a2 + 704);
        *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
        *(_QWORD *)(a1 + 704) = v79;
        swift_bridgeObjectRetain(v77);
      }
      v80 = *(_QWORD *)(a2 + 720);
      if (v80 == 1)
      {
        v81 = *(_OWORD *)(a2 + 720);
        *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
        *(_OWORD *)(a1 + 720) = v81;
      }
      else
      {
        *(_QWORD *)(a1 + 720) = v80;
        *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
        v82 = *(_QWORD *)(a2 + 736);
        *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
        *(_QWORD *)(a1 + 736) = v82;
        swift_bridgeObjectRetain(v80);
      }
      v83 = *(_QWORD *)(a2 + 752);
      if (v83 == 1)
      {
        v84 = *(_OWORD *)(a2 + 752);
        *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
        *(_OWORD *)(a1 + 752) = v84;
      }
      else
      {
        *(_QWORD *)(a1 + 752) = v83;
        *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
        v85 = *(_QWORD *)(a2 + 768);
        *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
        *(_QWORD *)(a1 + 768) = v85;
        swift_bridgeObjectRetain(v83);
      }
      v86 = *(_OWORD *)(a2 + 784);
      *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
      *(_OWORD *)(a1 + 784) = v86;
      v87 = *(_OWORD *)(a2 + 808);
      *(_BYTE *)(a1 + 824) = *(_BYTE *)(a2 + 824);
      *(_OWORD *)(a1 + 808) = v87;
      *(_BYTE *)(a1 + 825) = *(_BYTE *)(a2 + 825);
      *(_BYTE *)(a1 + 826) = *(_BYTE *)(a2 + 826);
      *(_BYTE *)(a1 + 827) = *(_BYTE *)(a2 + 827);
      *(_BYTE *)(a1 + 828) = *(_BYTE *)(a2 + 828);
      *(_BYTE *)(a1 + 829) = *(_BYTE *)(a2 + 829);
      *(_BYTE *)(a1 + 830) = *(_BYTE *)(a2 + 830);
      *(_BYTE *)(a1 + 831) = *(_BYTE *)(a2 + 831);
      v88 = *(_QWORD *)(a2 + 832);
      *(_QWORD *)(a1 + 832) = v88;
      v89 = *(_QWORD *)(a2 + 840);
      *(_QWORD *)(a1 + 840) = v89;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v89);
      goto LABEL_248;
    }
LABEL_7:
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x340uLL);
    goto LABEL_248;
  }
  if (v9 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 16));
    goto LABEL_7;
  }
  v12 = *(_QWORD *)v7;
  v13 = *v8;
  if (*(_QWORD *)v7 == 1)
  {
    if (v13 == 1)
    {
      v14 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *v7 = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v13;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v90 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v90;
      swift_bridgeObjectRetain(v13);
    }
  }
  else if (v13 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 16));
    v18 = *(_OWORD *)(a2 + 25);
    *v7 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 25) = v18;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v12);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v91 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v91;
  }
  v92 = (__int128 *)(a1 + 48);
  v93 = *(_QWORD *)(a1 + 48);
  v95 = (__int128 *)(a2 + 48);
  v94 = *(_QWORD *)(a2 + 48);
  if (v93 == 1)
  {
    if (v94 == 1)
    {
      v96 = *v95;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *v92 = v96;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v94;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v98 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v98;
      swift_bridgeObjectRetain(v94);
    }
  }
  else if (v94 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 48));
    v97 = *(_OWORD *)(a2 + 57);
    *v92 = *v95;
    *(_OWORD *)(a1 + 57) = v97;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v94;
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRelease(v93);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v99 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v99;
  }
  v100 = (__int128 *)(a1 + 80);
  v101 = *(_QWORD *)(a1 + 80);
  v103 = (__int128 *)(a2 + 80);
  v102 = *(_QWORD *)(a2 + 80);
  if (v101 == 1)
  {
    if (v102 == 1)
    {
      v104 = *v103;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
      *v100 = v104;
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v102;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      v106 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v106;
      swift_bridgeObjectRetain(v102);
    }
  }
  else if (v102 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 80));
    v105 = *(_OWORD *)(a2 + 89);
    *v100 = *v103;
    *(_OWORD *)(a1 + 89) = v105;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v102;
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRelease(v101);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v107 = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v107;
  }
  v108 = (__int128 *)(a1 + 112);
  v109 = *(_QWORD *)(a1 + 112);
  v111 = (__int128 *)(a2 + 112);
  v110 = *(_QWORD *)(a2 + 112);
  if (v109 == 1)
  {
    if (v110 == 1)
    {
      v112 = *v111;
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *v108 = v112;
    }
    else
    {
      *(_QWORD *)(a1 + 112) = v110;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      v114 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v114;
      swift_bridgeObjectRetain(v110);
    }
  }
  else if (v110 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 112));
    v113 = *(_OWORD *)(a2 + 121);
    *v108 = *v111;
    *(_OWORD *)(a1 + 121) = v113;
  }
  else
  {
    *(_QWORD *)(a1 + 112) = v110;
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRelease(v109);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v115 = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v115;
  }
  v116 = (__int128 *)(a1 + 144);
  v117 = *(_QWORD *)(a1 + 144);
  v119 = (__int128 *)(a2 + 144);
  v118 = *(_QWORD *)(a2 + 144);
  if (v117 == 1)
  {
    if (v118 == 1)
    {
      v120 = *v119;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
      *v116 = v120;
    }
    else
    {
      *(_QWORD *)(a1 + 144) = v118;
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      v122 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v122;
      swift_bridgeObjectRetain(v118);
    }
  }
  else if (v118 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 144));
    v121 = *(_OWORD *)(a2 + 153);
    *v116 = *v119;
    *(_OWORD *)(a1 + 153) = v121;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = v118;
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRelease(v117);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    v123 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v123;
  }
  v124 = (__int128 *)(a1 + 176);
  v125 = *(_QWORD *)(a1 + 176);
  v127 = (__int128 *)(a2 + 176);
  v126 = *(_QWORD *)(a2 + 176);
  if (v125 == 1)
  {
    if (v126 == 1)
    {
      v128 = *v127;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *v124 = v128;
    }
    else
    {
      *(_QWORD *)(a1 + 176) = v126;
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      v130 = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v130;
      swift_bridgeObjectRetain(v126);
    }
  }
  else if (v126 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 176));
    v129 = *(_OWORD *)(a2 + 185);
    *v124 = *v127;
    *(_OWORD *)(a1 + 185) = v129;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = v126;
    swift_bridgeObjectRetain(v126);
    swift_bridgeObjectRelease(v125);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v131 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v131;
  }
  v132 = (__int128 *)(a1 + 208);
  v133 = *(_QWORD *)(a1 + 208);
  v135 = (__int128 *)(a2 + 208);
  v134 = *(_QWORD *)(a2 + 208);
  if (v133 == 1)
  {
    if (v134 == 1)
    {
      v136 = *v135;
      *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
      *v132 = v136;
    }
    else
    {
      *(_QWORD *)(a1 + 208) = v134;
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      v138 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v138;
      swift_bridgeObjectRetain(v134);
    }
  }
  else if (v134 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 208));
    v137 = *(_OWORD *)(a2 + 217);
    *v132 = *v135;
    *(_OWORD *)(a1 + 217) = v137;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v134;
    swift_bridgeObjectRetain(v134);
    swift_bridgeObjectRelease(v133);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v139 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v139;
  }
  v140 = (__int128 *)(a1 + 240);
  v141 = *(_QWORD *)(a1 + 240);
  v143 = (__int128 *)(a2 + 240);
  v142 = *(_QWORD *)(a2 + 240);
  if (v141 == 1)
  {
    if (v142 == 1)
    {
      v144 = *v143;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
      *v140 = v144;
    }
    else
    {
      *(_QWORD *)(a1 + 240) = v142;
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      v146 = *(_QWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = v146;
      swift_bridgeObjectRetain(v142);
    }
  }
  else if (v142 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 240));
    v145 = *(_OWORD *)(a2 + 249);
    *v140 = *v143;
    *(_OWORD *)(a1 + 249) = v145;
  }
  else
  {
    *(_QWORD *)(a1 + 240) = v142;
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRelease(v141);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    v147 = *(_QWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v147;
  }
  v148 = (__int128 *)(a1 + 272);
  v149 = (__int128 *)(a2 + 272);
  v150 = *(_QWORD *)(a1 + 272);
  v151 = *(_QWORD *)(a2 + 272);
  if (v150 == 1)
  {
    if (v151 == 1)
    {
      v152 = *v149;
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
      *v148 = v152;
    }
    else
    {
      *(_QWORD *)(a1 + 272) = v151;
      *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
      v154 = *(_QWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = v154;
      swift_bridgeObjectRetain(v151);
    }
  }
  else if (v151 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 272));
    v153 = *(_OWORD *)(a2 + 281);
    *v148 = *v149;
    *(_OWORD *)(a1 + 281) = v153;
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v151;
    swift_bridgeObjectRetain(v151);
    swift_bridgeObjectRelease(v150);
    *(_BYTE *)(a1 + 280) = *v4;
    v155 = *(_QWORD *)(a2 + 288);
    *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v155;
  }
  v156 = (__int128 *)(a1 + 304);
  v157 = (__int128 *)(a2 + 304);
  v158 = *(_QWORD *)(a1 + 304);
  v159 = *(_QWORD *)(a2 + 304);
  if (v158 == 1)
  {
    if (v159 == 1)
    {
      v160 = *v157;
      *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
      *v156 = v160;
    }
    else
    {
      *(_QWORD *)(a1 + 304) = v159;
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      v162 = *(_QWORD *)(a2 + 320);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v162;
      swift_bridgeObjectRetain(v159);
    }
  }
  else if (v159 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 304));
    v161 = *(_OWORD *)(a2 + 313);
    *v156 = *v157;
    *(_OWORD *)(a1 + 313) = v161;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v159;
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRelease(v158);
    *(_BYTE *)(a1 + 312) = v4[32];
    v163 = *(_QWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v163;
  }
  v164 = (__int128 *)(a1 + 336);
  v165 = (__int128 *)(a2 + 336);
  v166 = *(_QWORD *)(a1 + 336);
  v167 = *(_QWORD *)(a2 + 336);
  if (v166 == 1)
  {
    if (v167 == 1)
    {
      v168 = *v165;
      *(_OWORD *)(a1 + 345) = *(_OWORD *)(a2 + 345);
      *v164 = v168;
    }
    else
    {
      *(_QWORD *)(a1 + 336) = v167;
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      v170 = *(_QWORD *)(a2 + 352);
      *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v170;
      swift_bridgeObjectRetain(v167);
    }
  }
  else if (v167 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 336));
    v169 = *(_OWORD *)(a2 + 345);
    *v164 = *v165;
    *(_OWORD *)(a1 + 345) = v169;
  }
  else
  {
    *(_QWORD *)(a1 + 336) = v167;
    swift_bridgeObjectRetain(v167);
    swift_bridgeObjectRelease(v166);
    *(_BYTE *)(a1 + 344) = v4[64];
    v171 = *(_QWORD *)(a2 + 352);
    *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = v171;
  }
  v172 = (__int128 *)(a1 + 368);
  v173 = (__int128 *)(a2 + 368);
  v174 = *(_QWORD *)(a1 + 368);
  v175 = *(_QWORD *)(a2 + 368);
  if (v174 == 1)
  {
    if (v175 == 1)
    {
      v176 = *v173;
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
      *v172 = v176;
    }
    else
    {
      *(_QWORD *)(a1 + 368) = v175;
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
      v178 = *(_QWORD *)(a2 + 384);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      *(_QWORD *)(a1 + 384) = v178;
      swift_bridgeObjectRetain(v175);
    }
  }
  else if (v175 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 368));
    v177 = *(_OWORD *)(a2 + 377);
    *v172 = *v173;
    *(_OWORD *)(a1 + 377) = v177;
  }
  else
  {
    *(_QWORD *)(a1 + 368) = v175;
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRelease(v174);
    *(_BYTE *)(a1 + 376) = v4[96];
    v179 = *(_QWORD *)(a2 + 384);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = v179;
  }
  v180 = (__int128 *)(a1 + 400);
  v181 = (__int128 *)(a2 + 400);
  v182 = *(_QWORD *)(a1 + 400);
  v183 = *(_QWORD *)(a2 + 400);
  if (v182 == 1)
  {
    if (v183 == 1)
    {
      v184 = *v181;
      *(_OWORD *)(a1 + 409) = *(_OWORD *)(a2 + 409);
      *v180 = v184;
    }
    else
    {
      *(_QWORD *)(a1 + 400) = v183;
      *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
      v186 = *(_QWORD *)(a2 + 416);
      *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
      *(_QWORD *)(a1 + 416) = v186;
      swift_bridgeObjectRetain(v183);
    }
  }
  else if (v183 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 400));
    v185 = *(_OWORD *)(a2 + 409);
    *v180 = *v181;
    *(_OWORD *)(a1 + 409) = v185;
  }
  else
  {
    *(_QWORD *)(a1 + 400) = v183;
    swift_bridgeObjectRetain(v183);
    swift_bridgeObjectRelease(v182);
    *(_BYTE *)(a1 + 408) = v4[128];
    v187 = *(_QWORD *)(a2 + 416);
    *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = v187;
  }
  v188 = (__int128 *)(a1 + 432);
  v189 = (__int128 *)(a2 + 432);
  v190 = *(_QWORD *)(a1 + 432);
  v191 = *(_QWORD *)(a2 + 432);
  if (v190 == 1)
  {
    if (v191 == 1)
    {
      v192 = *v189;
      *(_OWORD *)(a1 + 441) = *(_OWORD *)(a2 + 441);
      *v188 = v192;
    }
    else
    {
      *(_QWORD *)(a1 + 432) = v191;
      *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
      v194 = *(_QWORD *)(a2 + 448);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_QWORD *)(a1 + 448) = v194;
      swift_bridgeObjectRetain(v191);
    }
  }
  else if (v191 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 432));
    v193 = *(_OWORD *)(a2 + 441);
    *v188 = *v189;
    *(_OWORD *)(a1 + 441) = v193;
  }
  else
  {
    *(_QWORD *)(a1 + 432) = v191;
    swift_bridgeObjectRetain(v191);
    swift_bridgeObjectRelease(v190);
    *(_BYTE *)(a1 + 440) = v4[160];
    v195 = *(_QWORD *)(a2 + 448);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_QWORD *)(a1 + 448) = v195;
  }
  v196 = (__int128 *)(a1 + 464);
  v197 = (__int128 *)(a2 + 464);
  v198 = *(_QWORD *)(a1 + 464);
  v199 = *(_QWORD *)(a2 + 464);
  if (v198 == 1)
  {
    if (v199 == 1)
    {
      v200 = *v197;
      *(_OWORD *)(a1 + 473) = *(_OWORD *)(a2 + 473);
      *v196 = v200;
    }
    else
    {
      *(_QWORD *)(a1 + 464) = v199;
      *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
      v202 = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      *(_QWORD *)(a1 + 480) = v202;
      swift_bridgeObjectRetain(v199);
    }
  }
  else if (v199 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 464));
    v201 = *(_OWORD *)(a2 + 473);
    *v196 = *v197;
    *(_OWORD *)(a1 + 473) = v201;
  }
  else
  {
    *(_QWORD *)(a1 + 464) = v199;
    swift_bridgeObjectRetain(v199);
    swift_bridgeObjectRelease(v198);
    *(_BYTE *)(a1 + 472) = v4[192];
    v203 = *(_QWORD *)(a2 + 480);
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    *(_QWORD *)(a1 + 480) = v203;
  }
  v204 = (__int128 *)(a1 + 496);
  v205 = (__int128 *)(a2 + 496);
  v206 = *(_QWORD *)(a1 + 496);
  v207 = *(_QWORD *)(a2 + 496);
  if (v206 == 1)
  {
    if (v207 == 1)
    {
      v208 = *v205;
      *(_OWORD *)(a1 + 505) = *(_OWORD *)(a2 + 505);
      *v204 = v208;
    }
    else
    {
      *(_QWORD *)(a1 + 496) = v207;
      *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
      v210 = *(_QWORD *)(a2 + 512);
      *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
      *(_QWORD *)(a1 + 512) = v210;
      swift_bridgeObjectRetain(v207);
    }
  }
  else if (v207 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 496));
    v209 = *(_OWORD *)(a2 + 505);
    *v204 = *v205;
    *(_OWORD *)(a1 + 505) = v209;
  }
  else
  {
    *(_QWORD *)(a1 + 496) = v207;
    swift_bridgeObjectRetain(v207);
    swift_bridgeObjectRelease(v206);
    *(_BYTE *)(a1 + 504) = v4[224];
    v211 = *(_QWORD *)(a2 + 512);
    *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
    *(_QWORD *)(a1 + 512) = v211;
  }
  v212 = (__int128 *)(a1 + 528);
  v213 = (__int128 *)(a2 + 528);
  v214 = *(_QWORD *)(a1 + 528);
  v215 = *(_QWORD *)(a2 + 528);
  if (v214 == 1)
  {
    if (v215 == 1)
    {
      v216 = *v213;
      *(_OWORD *)(a1 + 537) = *(_OWORD *)(a2 + 537);
      *v212 = v216;
    }
    else
    {
      *(_QWORD *)(a1 + 528) = v215;
      *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
      v218 = *(_QWORD *)(a2 + 544);
      *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
      *(_QWORD *)(a1 + 544) = v218;
      swift_bridgeObjectRetain(v215);
    }
  }
  else if (v215 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 528));
    v217 = *(_OWORD *)(a2 + 537);
    *v212 = *v213;
    *(_OWORD *)(a1 + 537) = v217;
  }
  else
  {
    *(_QWORD *)(a1 + 528) = v215;
    swift_bridgeObjectRetain(v215);
    swift_bridgeObjectRelease(v214);
    *(_BYTE *)(a1 + 536) = v4[256];
    v219 = *(_QWORD *)(a2 + 544);
    *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
    *(_QWORD *)(a1 + 544) = v219;
  }
  v220 = (__int128 *)(a1 + 560);
  v221 = (__int128 *)(a2 + 560);
  v222 = *(_QWORD *)(a1 + 560);
  v223 = *(_QWORD *)(a2 + 560);
  if (v222 == 1)
  {
    if (v223 == 1)
    {
      v224 = *v221;
      *(_OWORD *)(a1 + 569) = *(_OWORD *)(a2 + 569);
      *v220 = v224;
    }
    else
    {
      *(_QWORD *)(a1 + 560) = v223;
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      v226 = *(_QWORD *)(a2 + 576);
      *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
      *(_QWORD *)(a1 + 576) = v226;
      swift_bridgeObjectRetain(v223);
    }
  }
  else if (v223 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 560));
    v225 = *(_OWORD *)(a2 + 569);
    *v220 = *v221;
    *(_OWORD *)(a1 + 569) = v225;
  }
  else
  {
    *(_QWORD *)(a1 + 560) = v223;
    swift_bridgeObjectRetain(v223);
    swift_bridgeObjectRelease(v222);
    *(_BYTE *)(a1 + 568) = v4[288];
    v227 = *(_QWORD *)(a2 + 576);
    *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
    *(_QWORD *)(a1 + 576) = v227;
  }
  v228 = (__int128 *)(a1 + 592);
  v229 = (__int128 *)(a2 + 592);
  v230 = *(_QWORD *)(a1 + 592);
  v231 = *(_QWORD *)(a2 + 592);
  if (v230 == 1)
  {
    if (v231 == 1)
    {
      v232 = *v229;
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
      *v228 = v232;
    }
    else
    {
      *(_QWORD *)(a1 + 592) = v231;
      *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
      v234 = *(_QWORD *)(a2 + 608);
      *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
      *(_QWORD *)(a1 + 608) = v234;
      swift_bridgeObjectRetain(v231);
    }
  }
  else if (v231 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 592));
    v233 = *(_OWORD *)(a2 + 601);
    *v228 = *v229;
    *(_OWORD *)(a1 + 601) = v233;
  }
  else
  {
    *(_QWORD *)(a1 + 592) = v231;
    swift_bridgeObjectRetain(v231);
    swift_bridgeObjectRelease(v230);
    *(_BYTE *)(a1 + 600) = v4[320];
    v235 = *(_QWORD *)(a2 + 608);
    *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
    *(_QWORD *)(a1 + 608) = v235;
  }
  v236 = (__int128 *)(a1 + 624);
  v237 = (__int128 *)(a2 + 624);
  v238 = *(_QWORD *)(a1 + 624);
  v239 = *(_QWORD *)(a2 + 624);
  if (v238 == 1)
  {
    if (v239 == 1)
    {
      v240 = *v237;
      *(_OWORD *)(a1 + 633) = *(_OWORD *)(a2 + 633);
      *v236 = v240;
    }
    else
    {
      *(_QWORD *)(a1 + 624) = v239;
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      v242 = *(_QWORD *)(a2 + 640);
      *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
      *(_QWORD *)(a1 + 640) = v242;
      swift_bridgeObjectRetain(v239);
    }
  }
  else if (v239 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 624));
    v241 = *(_OWORD *)(a2 + 633);
    *v236 = *v237;
    *(_OWORD *)(a1 + 633) = v241;
  }
  else
  {
    *(_QWORD *)(a1 + 624) = v239;
    swift_bridgeObjectRetain(v239);
    swift_bridgeObjectRelease(v238);
    *(_BYTE *)(a1 + 632) = v4[352];
    v243 = *(_QWORD *)(a2 + 640);
    *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
    *(_QWORD *)(a1 + 640) = v243;
  }
  v244 = (__int128 *)(a1 + 656);
  v245 = (__int128 *)(a2 + 656);
  v246 = *(_QWORD *)(a1 + 656);
  v247 = *(_QWORD *)(a2 + 656);
  if (v246 == 1)
  {
    if (v247 == 1)
    {
      v248 = *v245;
      *(_OWORD *)(a1 + 665) = *(_OWORD *)(a2 + 665);
      *v244 = v248;
    }
    else
    {
      *(_QWORD *)(a1 + 656) = v247;
      *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
      v250 = *(_QWORD *)(a2 + 672);
      *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
      *(_QWORD *)(a1 + 672) = v250;
      swift_bridgeObjectRetain(v247);
    }
  }
  else if (v247 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 656));
    v249 = *(_OWORD *)(a2 + 665);
    *v244 = *v245;
    *(_OWORD *)(a1 + 665) = v249;
  }
  else
  {
    *(_QWORD *)(a1 + 656) = v247;
    swift_bridgeObjectRetain(v247);
    swift_bridgeObjectRelease(v246);
    *(_BYTE *)(a1 + 664) = v4[384];
    v251 = *(_QWORD *)(a2 + 672);
    *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
    *(_QWORD *)(a1 + 672) = v251;
  }
  v252 = (__int128 *)(a1 + 688);
  v253 = (__int128 *)(a2 + 688);
  v254 = *(_QWORD *)(a1 + 688);
  v255 = *(_QWORD *)(a2 + 688);
  if (v254 == 1)
  {
    if (v255 == 1)
    {
      v256 = *v253;
      *(_OWORD *)(a1 + 697) = *(_OWORD *)(a2 + 697);
      *v252 = v256;
    }
    else
    {
      *(_QWORD *)(a1 + 688) = v255;
      *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
      v258 = *(_QWORD *)(a2 + 704);
      *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
      *(_QWORD *)(a1 + 704) = v258;
      swift_bridgeObjectRetain(v255);
    }
  }
  else if (v255 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 688));
    v257 = *(_OWORD *)(a2 + 697);
    *v252 = *v253;
    *(_OWORD *)(a1 + 697) = v257;
  }
  else
  {
    *(_QWORD *)(a1 + 688) = v255;
    swift_bridgeObjectRetain(v255);
    swift_bridgeObjectRelease(v254);
    *(_BYTE *)(a1 + 696) = v4[416];
    v259 = *(_QWORD *)(a2 + 704);
    *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
    *(_QWORD *)(a1 + 704) = v259;
  }
  v260 = (__int128 *)(a1 + 720);
  v261 = (__int128 *)(a2 + 720);
  v262 = *(_QWORD *)(a1 + 720);
  v263 = *(_QWORD *)(a2 + 720);
  if (v262 == 1)
  {
    if (v263 == 1)
    {
      v264 = *v261;
      *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
      *v260 = v264;
    }
    else
    {
      *(_QWORD *)(a1 + 720) = v263;
      *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
      v266 = *(_QWORD *)(a2 + 736);
      *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
      *(_QWORD *)(a1 + 736) = v266;
      swift_bridgeObjectRetain(v263);
    }
  }
  else if (v263 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 720));
    v265 = *(_OWORD *)(a2 + 729);
    *v260 = *v261;
    *(_OWORD *)(a1 + 729) = v265;
  }
  else
  {
    *(_QWORD *)(a1 + 720) = v263;
    swift_bridgeObjectRetain(v263);
    swift_bridgeObjectRelease(v262);
    *(_BYTE *)(a1 + 728) = v4[448];
    v267 = *(_QWORD *)(a2 + 736);
    *(_BYTE *)(a1 + 744) = *(_BYTE *)(a2 + 744);
    *(_QWORD *)(a1 + 736) = v267;
  }
  v268 = (__int128 *)(a1 + 752);
  v269 = (__int128 *)(a2 + 752);
  v270 = *(_QWORD *)(a1 + 752);
  v271 = *(_QWORD *)(a2 + 752);
  if (v270 == 1)
  {
    if (v271 == 1)
    {
      v272 = *v269;
      *(_OWORD *)(a1 + 761) = *(_OWORD *)(a2 + 761);
      *v268 = v272;
    }
    else
    {
      *(_QWORD *)(a1 + 752) = v271;
      *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
      v274 = *(_QWORD *)(a2 + 768);
      *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
      *(_QWORD *)(a1 + 768) = v274;
      swift_bridgeObjectRetain(v271);
    }
  }
  else if (v271 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 752));
    v273 = *(_OWORD *)(a2 + 761);
    *v268 = *v269;
    *(_OWORD *)(a1 + 761) = v273;
  }
  else
  {
    *(_QWORD *)(a1 + 752) = v271;
    swift_bridgeObjectRetain(v271);
    swift_bridgeObjectRelease(v270);
    *(_BYTE *)(a1 + 760) = v4[480];
    v275 = *(_QWORD *)(a2 + 768);
    *(_BYTE *)(a1 + 776) = *(_BYTE *)(a2 + 776);
    *(_QWORD *)(a1 + 768) = v275;
  }
  v276 = *(_OWORD *)(a2 + 784);
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v276;
  v277 = *(_OWORD *)(a2 + 808);
  *(_BYTE *)(a1 + 824) = *(_BYTE *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v277;
  *(_BYTE *)(a1 + 825) = *(_BYTE *)(a2 + 825);
  *(_BYTE *)(a1 + 826) = *(_BYTE *)(a2 + 826);
  *(_BYTE *)(a1 + 827) = *(_BYTE *)(a2 + 827);
  *(_BYTE *)(a1 + 828) = *(_BYTE *)(a2 + 828);
  *(_BYTE *)(a1 + 829) = *(_BYTE *)(a2 + 829);
  *(_BYTE *)(a1 + 830) = *(_BYTE *)(a2 + 830);
  *(_BYTE *)(a1 + 831) = *(_BYTE *)(a2 + 831);
  v278 = *(_QWORD *)(a1 + 832);
  v279 = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a1 + 832) = v279;
  swift_bridgeObjectRetain(v279);
  swift_bridgeObjectRelease(v278);
  v280 = *(_QWORD *)(a1 + 840);
  v281 = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a1 + 840) = v281;
  swift_bridgeObjectRetain(v281);
  swift_bridgeObjectRelease(v280);
LABEL_248:
  v282 = (_OWORD *)(a1 + 848);
  v283 = (uint64_t *)(a2 + 848);
  v284 = *(_QWORD *)(a2 + 1664);
  if (*(_QWORD *)(a1 + 1664) == 1)
  {
    if (v284 != 1)
    {
      v285 = *v283;
      if (*v283 == 1)
      {
        v286 = *(_OWORD *)v283;
        *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
        *v282 = v286;
      }
      else
      {
        *(_QWORD *)(a1 + 848) = v285;
        *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
        v290 = *(_QWORD *)(a2 + 864);
        *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 872);
        *(_QWORD *)(a1 + 864) = v290;
        swift_bridgeObjectRetain(v285);
      }
      v291 = *(_QWORD *)(a2 + 880);
      if (v291 == 1)
      {
        v292 = *(_OWORD *)(a2 + 880);
        *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
        *(_OWORD *)(a1 + 880) = v292;
      }
      else
      {
        *(_QWORD *)(a1 + 880) = v291;
        *(_BYTE *)(a1 + 888) = *(_BYTE *)(a2 + 888);
        v294 = *(_QWORD *)(a2 + 896);
        *(_BYTE *)(a1 + 904) = *(_BYTE *)(a2 + 904);
        *(_QWORD *)(a1 + 896) = v294;
        swift_bridgeObjectRetain(v291);
      }
      v295 = *(_QWORD *)(a2 + 912);
      if (v295 == 1)
      {
        v296 = *(_OWORD *)(a2 + 912);
        *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
        *(_OWORD *)(a1 + 912) = v296;
      }
      else
      {
        *(_QWORD *)(a1 + 912) = v295;
        *(_BYTE *)(a1 + 920) = *(_BYTE *)(a2 + 920);
        v297 = *(_QWORD *)(a2 + 928);
        *(_BYTE *)(a1 + 936) = *(_BYTE *)(a2 + 936);
        *(_QWORD *)(a1 + 928) = v297;
        swift_bridgeObjectRetain(v295);
      }
      v298 = *(_QWORD *)(a2 + 944);
      if (v298 == 1)
      {
        v299 = *(_OWORD *)(a2 + 944);
        *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
        *(_OWORD *)(a1 + 944) = v299;
      }
      else
      {
        *(_QWORD *)(a1 + 944) = v298;
        *(_BYTE *)(a1 + 952) = *(_BYTE *)(a2 + 952);
        v300 = *(_QWORD *)(a2 + 960);
        *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
        *(_QWORD *)(a1 + 960) = v300;
        swift_bridgeObjectRetain(v298);
      }
      v301 = *(_QWORD *)(a2 + 976);
      if (v301 == 1)
      {
        v302 = *(_OWORD *)(a2 + 976);
        *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
        *(_OWORD *)(a1 + 976) = v302;
      }
      else
      {
        *(_QWORD *)(a1 + 976) = v301;
        *(_BYTE *)(a1 + 984) = *(_BYTE *)(a2 + 984);
        v303 = *(_QWORD *)(a2 + 992);
        *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a2 + 1000);
        *(_QWORD *)(a1 + 992) = v303;
        swift_bridgeObjectRetain(v301);
      }
      v304 = *(_QWORD *)(a2 + 1008);
      if (v304 == 1)
      {
        v305 = *(_OWORD *)(a2 + 1008);
        *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
        *(_OWORD *)(a1 + 1008) = v305;
      }
      else
      {
        *(_QWORD *)(a1 + 1008) = v304;
        *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 1016);
        v306 = *(_QWORD *)(a2 + 1024);
        *(_BYTE *)(a1 + 1032) = *(_BYTE *)(a2 + 1032);
        *(_QWORD *)(a1 + 1024) = v306;
        swift_bridgeObjectRetain(v304);
      }
      v307 = *(_QWORD *)(a2 + 1040);
      if (v307 == 1)
      {
        v308 = *(_OWORD *)(a2 + 1040);
        *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
        *(_OWORD *)(a1 + 1040) = v308;
      }
      else
      {
        *(_QWORD *)(a1 + 1040) = v307;
        *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
        v309 = *(_QWORD *)(a2 + 1056);
        *(_BYTE *)(a1 + 1064) = *(_BYTE *)(a2 + 1064);
        *(_QWORD *)(a1 + 1056) = v309;
        swift_bridgeObjectRetain(v307);
      }
      v310 = *(_QWORD *)(a2 + 1072);
      if (v310 == 1)
      {
        v311 = *(_OWORD *)(a2 + 1072);
        *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
        *(_OWORD *)(a1 + 1072) = v311;
      }
      else
      {
        *(_QWORD *)(a1 + 1072) = v310;
        *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a2 + 1080);
        v312 = *(_QWORD *)(a2 + 1088);
        *(_BYTE *)(a1 + 1096) = *(_BYTE *)(a2 + 1096);
        *(_QWORD *)(a1 + 1088) = v312;
        swift_bridgeObjectRetain(v310);
      }
      v313 = *(_QWORD *)(a2 + 1104);
      if (v313 == 1)
      {
        v314 = *(_OWORD *)(a2 + 1104);
        *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
        *(_OWORD *)(a1 + 1104) = v314;
      }
      else
      {
        *(_QWORD *)(a1 + 1104) = v313;
        *(_BYTE *)(a1 + 1112) = *(_BYTE *)(a2 + 1112);
        v315 = *(_QWORD *)(a2 + 1120);
        *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
        *(_QWORD *)(a1 + 1120) = v315;
        swift_bridgeObjectRetain(v313);
      }
      v316 = *(_QWORD *)(a2 + 1136);
      if (v316 == 1)
      {
        v317 = *(_OWORD *)(a2 + 1136);
        *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
        *(_OWORD *)(a1 + 1136) = v317;
      }
      else
      {
        *(_QWORD *)(a1 + 1136) = v316;
        *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
        v318 = *(_QWORD *)(a2 + 1152);
        *(_BYTE *)(a1 + 1160) = *(_BYTE *)(a2 + 1160);
        *(_QWORD *)(a1 + 1152) = v318;
        swift_bridgeObjectRetain(v316);
      }
      v319 = *(_QWORD *)(a2 + 1168);
      if (v319 == 1)
      {
        v320 = *(_OWORD *)(a2 + 1168);
        *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
        *(_OWORD *)(a1 + 1168) = v320;
      }
      else
      {
        *(_QWORD *)(a1 + 1168) = v319;
        *(_BYTE *)(a1 + 1176) = *(_BYTE *)(a2 + 1176);
        v321 = *(_QWORD *)(a2 + 1184);
        *(_BYTE *)(a1 + 1192) = *(_BYTE *)(a2 + 1192);
        *(_QWORD *)(a1 + 1184) = v321;
        swift_bridgeObjectRetain(v319);
      }
      v322 = *(_QWORD *)(a2 + 1200);
      if (v322 == 1)
      {
        v323 = *(_OWORD *)(a2 + 1200);
        *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
        *(_OWORD *)(a1 + 1200) = v323;
      }
      else
      {
        *(_QWORD *)(a1 + 1200) = v322;
        *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 1208);
        v324 = *(_QWORD *)(a2 + 1216);
        *(_BYTE *)(a1 + 1224) = *(_BYTE *)(a2 + 1224);
        *(_QWORD *)(a1 + 1216) = v324;
        swift_bridgeObjectRetain(v322);
      }
      v325 = *(_QWORD *)(a2 + 1232);
      if (v325 == 1)
      {
        v326 = *(_OWORD *)(a2 + 1232);
        *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
        *(_OWORD *)(a1 + 1232) = v326;
      }
      else
      {
        *(_QWORD *)(a1 + 1232) = v325;
        *(_BYTE *)(a1 + 1240) = *(_BYTE *)(a2 + 1240);
        v327 = *(_QWORD *)(a2 + 1248);
        *(_BYTE *)(a1 + 1256) = *(_BYTE *)(a2 + 1256);
        *(_QWORD *)(a1 + 1248) = v327;
        swift_bridgeObjectRetain(v325);
      }
      v328 = *(_QWORD *)(a2 + 1264);
      if (v328 == 1)
      {
        v329 = *(_OWORD *)(a2 + 1264);
        *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
        *(_OWORD *)(a1 + 1264) = v329;
      }
      else
      {
        *(_QWORD *)(a1 + 1264) = v328;
        *(_BYTE *)(a1 + 1272) = *(_BYTE *)(a2 + 1272);
        v330 = *(_QWORD *)(a2 + 1280);
        *(_BYTE *)(a1 + 1288) = *(_BYTE *)(a2 + 1288);
        *(_QWORD *)(a1 + 1280) = v330;
        swift_bridgeObjectRetain(v328);
      }
      v331 = *(_QWORD *)(a2 + 1296);
      if (v331 == 1)
      {
        v332 = *(_OWORD *)(a2 + 1296);
        *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
        *(_OWORD *)(a1 + 1296) = v332;
      }
      else
      {
        *(_QWORD *)(a1 + 1296) = v331;
        *(_BYTE *)(a1 + 1304) = *(_BYTE *)(a2 + 1304);
        v333 = *(_QWORD *)(a2 + 1312);
        *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
        *(_QWORD *)(a1 + 1312) = v333;
        swift_bridgeObjectRetain(v331);
      }
      v334 = *(_QWORD *)(a2 + 1328);
      if (v334 == 1)
      {
        v335 = *(_OWORD *)(a2 + 1328);
        *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
        *(_OWORD *)(a1 + 1328) = v335;
      }
      else
      {
        *(_QWORD *)(a1 + 1328) = v334;
        *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
        v336 = *(_QWORD *)(a2 + 1344);
        *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
        *(_QWORD *)(a1 + 1344) = v336;
        swift_bridgeObjectRetain(v334);
      }
      v337 = *(_QWORD *)(a2 + 1360);
      if (v337 == 1)
      {
        v338 = *(_OWORD *)(a2 + 1360);
        *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
        *(_OWORD *)(a1 + 1360) = v338;
      }
      else
      {
        *(_QWORD *)(a1 + 1360) = v337;
        *(_BYTE *)(a1 + 1368) = *(_BYTE *)(a2 + 1368);
        v339 = *(_QWORD *)(a2 + 1376);
        *(_BYTE *)(a1 + 1384) = *(_BYTE *)(a2 + 1384);
        *(_QWORD *)(a1 + 1376) = v339;
        swift_bridgeObjectRetain(v337);
      }
      v340 = *(_QWORD *)(a2 + 1392);
      if (v340 == 1)
      {
        v341 = *(_OWORD *)(a2 + 1392);
        *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
        *(_OWORD *)(a1 + 1392) = v341;
      }
      else
      {
        *(_QWORD *)(a1 + 1392) = v340;
        *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
        v342 = *(_QWORD *)(a2 + 1408);
        *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
        *(_QWORD *)(a1 + 1408) = v342;
        swift_bridgeObjectRetain(v340);
      }
      v343 = *(_QWORD *)(a2 + 1424);
      if (v343 == 1)
      {
        v344 = *(_OWORD *)(a2 + 1424);
        *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
        *(_OWORD *)(a1 + 1424) = v344;
      }
      else
      {
        *(_QWORD *)(a1 + 1424) = v343;
        *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
        v345 = *(_QWORD *)(a2 + 1440);
        *(_BYTE *)(a1 + 1448) = *(_BYTE *)(a2 + 1448);
        *(_QWORD *)(a1 + 1440) = v345;
        swift_bridgeObjectRetain(v343);
      }
      v346 = *(_QWORD *)(a2 + 1456);
      if (v346 == 1)
      {
        v347 = *(_OWORD *)(a2 + 1456);
        *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
        *(_OWORD *)(a1 + 1456) = v347;
      }
      else
      {
        *(_QWORD *)(a1 + 1456) = v346;
        *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
        v348 = *(_QWORD *)(a2 + 1472);
        *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
        *(_QWORD *)(a1 + 1472) = v348;
        swift_bridgeObjectRetain(v346);
      }
      v349 = *(_QWORD *)(a2 + 1488);
      if (v349 == 1)
      {
        v350 = *(_OWORD *)(a2 + 1488);
        *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
        *(_OWORD *)(a1 + 1488) = v350;
      }
      else
      {
        *(_QWORD *)(a1 + 1488) = v349;
        *(_BYTE *)(a1 + 1496) = *(_BYTE *)(a2 + 1496);
        v351 = *(_QWORD *)(a2 + 1504);
        *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
        *(_QWORD *)(a1 + 1504) = v351;
        swift_bridgeObjectRetain(v349);
      }
      v352 = *(_QWORD *)(a2 + 1520);
      if (v352 == 1)
      {
        v353 = *(_OWORD *)(a2 + 1520);
        *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
        *(_OWORD *)(a1 + 1520) = v353;
      }
      else
      {
        *(_QWORD *)(a1 + 1520) = v352;
        *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
        v354 = *(_QWORD *)(a2 + 1536);
        *(_BYTE *)(a1 + 1544) = *(_BYTE *)(a2 + 1544);
        *(_QWORD *)(a1 + 1536) = v354;
        swift_bridgeObjectRetain(v352);
      }
      v355 = *(_QWORD *)(a2 + 1552);
      if (v355 == 1)
      {
        v356 = *(_OWORD *)(a2 + 1552);
        *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
        *(_OWORD *)(a1 + 1552) = v356;
      }
      else
      {
        *(_QWORD *)(a1 + 1552) = v355;
        *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a2 + 1560);
        v357 = *(_QWORD *)(a2 + 1568);
        *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
        *(_QWORD *)(a1 + 1568) = v357;
        swift_bridgeObjectRetain(v355);
      }
      v358 = *(_QWORD *)(a2 + 1584);
      if (v358 == 1)
      {
        v359 = *(_OWORD *)(a2 + 1584);
        *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
        *(_OWORD *)(a1 + 1584) = v359;
      }
      else
      {
        *(_QWORD *)(a1 + 1584) = v358;
        *(_BYTE *)(a1 + 1592) = *(_BYTE *)(a2 + 1592);
        v360 = *(_QWORD *)(a2 + 1600);
        *(_BYTE *)(a1 + 1608) = *(_BYTE *)(a2 + 1608);
        *(_QWORD *)(a1 + 1600) = v360;
        swift_bridgeObjectRetain(v358);
      }
      v361 = *(_OWORD *)(a2 + 1616);
      *(_BYTE *)(a1 + 1632) = *(_BYTE *)(a2 + 1632);
      *(_OWORD *)(a1 + 1616) = v361;
      v362 = *(_OWORD *)(a2 + 1640);
      *(_BYTE *)(a1 + 1656) = *(_BYTE *)(a2 + 1656);
      *(_OWORD *)(a1 + 1640) = v362;
      *(_BYTE *)(a1 + 1657) = *(_BYTE *)(a2 + 1657);
      *(_BYTE *)(a1 + 1658) = *(_BYTE *)(a2 + 1658);
      *(_BYTE *)(a1 + 1659) = *(_BYTE *)(a2 + 1659);
      *(_BYTE *)(a1 + 1660) = *(_BYTE *)(a2 + 1660);
      *(_BYTE *)(a1 + 1661) = *(_BYTE *)(a2 + 1661);
      *(_BYTE *)(a1 + 1662) = *(_BYTE *)(a2 + 1662);
      *(_BYTE *)(a1 + 1663) = *(_BYTE *)(a2 + 1663);
      v363 = *(_QWORD *)(a2 + 1664);
      *(_QWORD *)(a1 + 1664) = v363;
      v364 = *(_QWORD *)(a2 + 1672);
      *(_QWORD *)(a1 + 1672) = v364;
      swift_bridgeObjectRetain(v363);
      swift_bridgeObjectRetain(v364);
      goto LABEL_495;
    }
LABEL_254:
    memcpy((void *)(a1 + 848), (const void *)(a2 + 848), 0x340uLL);
    goto LABEL_495;
  }
  if (v284 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 848));
    goto LABEL_254;
  }
  v287 = *(_QWORD *)v282;
  v288 = *v283;
  if (*(_QWORD *)v282 == 1)
  {
    if (v288 == 1)
    {
      v289 = *(_OWORD *)v283;
      *(_OWORD *)(a1 + 857) = *(_OWORD *)(a2 + 857);
      *v282 = v289;
    }
    else
    {
      *(_QWORD *)(a1 + 848) = v288;
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
      v365 = *(_QWORD *)(a2 + 864);
      *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 872);
      *(_QWORD *)(a1 + 864) = v365;
      swift_bridgeObjectRetain(v288);
    }
  }
  else if (v288 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 848));
    v293 = *(_OWORD *)(a2 + 857);
    *v282 = *(_OWORD *)v283;
    *(_OWORD *)(a1 + 857) = v293;
  }
  else
  {
    *(_QWORD *)(a1 + 848) = v288;
    swift_bridgeObjectRetain(v288);
    swift_bridgeObjectRelease(v287);
    *(_BYTE *)(a1 + 856) = v4[576];
    v366 = *(_QWORD *)(a2 + 864);
    *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 872);
    *(_QWORD *)(a1 + 864) = v366;
  }
  v367 = (__int128 *)(a1 + 880);
  v368 = (__int128 *)(a2 + 880);
  v369 = *(_QWORD *)(a1 + 880);
  v370 = *(_QWORD *)(a2 + 880);
  if (v369 == 1)
  {
    if (v370 == 1)
    {
      v371 = *v368;
      *(_OWORD *)(a1 + 889) = *(_OWORD *)(a2 + 889);
      *v367 = v371;
    }
    else
    {
      *(_QWORD *)(a1 + 880) = v370;
      *(_BYTE *)(a1 + 888) = *(_BYTE *)(a2 + 888);
      v373 = *(_QWORD *)(a2 + 896);
      *(_BYTE *)(a1 + 904) = *(_BYTE *)(a2 + 904);
      *(_QWORD *)(a1 + 896) = v373;
      swift_bridgeObjectRetain(v370);
    }
  }
  else if (v370 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 880));
    v372 = *(_OWORD *)(a2 + 889);
    *v367 = *v368;
    *(_OWORD *)(a1 + 889) = v372;
  }
  else
  {
    *(_QWORD *)(a1 + 880) = v370;
    swift_bridgeObjectRetain(v370);
    swift_bridgeObjectRelease(v369);
    *(_BYTE *)(a1 + 888) = v4[608];
    v374 = *(_QWORD *)(a2 + 896);
    *(_BYTE *)(a1 + 904) = *(_BYTE *)(a2 + 904);
    *(_QWORD *)(a1 + 896) = v374;
  }
  v375 = (__int128 *)(a1 + 912);
  v376 = (__int128 *)(a2 + 912);
  v377 = *(_QWORD *)(a1 + 912);
  v378 = *(_QWORD *)(a2 + 912);
  if (v377 == 1)
  {
    if (v378 == 1)
    {
      v379 = *v376;
      *(_OWORD *)(a1 + 921) = *(_OWORD *)(a2 + 921);
      *v375 = v379;
    }
    else
    {
      *(_QWORD *)(a1 + 912) = v378;
      *(_BYTE *)(a1 + 920) = *(_BYTE *)(a2 + 920);
      v381 = *(_QWORD *)(a2 + 928);
      *(_BYTE *)(a1 + 936) = *(_BYTE *)(a2 + 936);
      *(_QWORD *)(a1 + 928) = v381;
      swift_bridgeObjectRetain(v378);
    }
  }
  else if (v378 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 912));
    v380 = *(_OWORD *)(a2 + 921);
    *v375 = *v376;
    *(_OWORD *)(a1 + 921) = v380;
  }
  else
  {
    *(_QWORD *)(a1 + 912) = v378;
    swift_bridgeObjectRetain(v378);
    swift_bridgeObjectRelease(v377);
    *(_BYTE *)(a1 + 920) = v4[640];
    v382 = *(_QWORD *)(a2 + 928);
    *(_BYTE *)(a1 + 936) = *(_BYTE *)(a2 + 936);
    *(_QWORD *)(a1 + 928) = v382;
  }
  v383 = (__int128 *)(a1 + 944);
  v384 = (__int128 *)(a2 + 944);
  v385 = *(_QWORD *)(a1 + 944);
  v386 = *(_QWORD *)(a2 + 944);
  if (v385 == 1)
  {
    if (v386 == 1)
    {
      v387 = *v384;
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
      *v383 = v387;
    }
    else
    {
      *(_QWORD *)(a1 + 944) = v386;
      *(_BYTE *)(a1 + 952) = *(_BYTE *)(a2 + 952);
      v389 = *(_QWORD *)(a2 + 960);
      *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
      *(_QWORD *)(a1 + 960) = v389;
      swift_bridgeObjectRetain(v386);
    }
  }
  else if (v386 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 944));
    v388 = *(_OWORD *)(a2 + 953);
    *v383 = *v384;
    *(_OWORD *)(a1 + 953) = v388;
  }
  else
  {
    *(_QWORD *)(a1 + 944) = v386;
    swift_bridgeObjectRetain(v386);
    swift_bridgeObjectRelease(v385);
    *(_BYTE *)(a1 + 952) = v4[672];
    v390 = *(_QWORD *)(a2 + 960);
    *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
    *(_QWORD *)(a1 + 960) = v390;
  }
  v391 = (__int128 *)(a1 + 976);
  v392 = (__int128 *)(a2 + 976);
  v393 = *(_QWORD *)(a1 + 976);
  v394 = *(_QWORD *)(a2 + 976);
  if (v393 == 1)
  {
    if (v394 == 1)
    {
      v395 = *v392;
      *(_OWORD *)(a1 + 985) = *(_OWORD *)(a2 + 985);
      *v391 = v395;
    }
    else
    {
      *(_QWORD *)(a1 + 976) = v394;
      *(_BYTE *)(a1 + 984) = *(_BYTE *)(a2 + 984);
      v397 = *(_QWORD *)(a2 + 992);
      *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a2 + 1000);
      *(_QWORD *)(a1 + 992) = v397;
      swift_bridgeObjectRetain(v394);
    }
  }
  else if (v394 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 976));
    v396 = *(_OWORD *)(a2 + 985);
    *v391 = *v392;
    *(_OWORD *)(a1 + 985) = v396;
  }
  else
  {
    *(_QWORD *)(a1 + 976) = v394;
    swift_bridgeObjectRetain(v394);
    swift_bridgeObjectRelease(v393);
    *(_BYTE *)(a1 + 984) = v4[704];
    v398 = *(_QWORD *)(a2 + 992);
    *(_BYTE *)(a1 + 1000) = *(_BYTE *)(a2 + 1000);
    *(_QWORD *)(a1 + 992) = v398;
  }
  v399 = (__int128 *)(a1 + 1008);
  v400 = (__int128 *)(a2 + 1008);
  v401 = *(_QWORD *)(a1 + 1008);
  v402 = *(_QWORD *)(a2 + 1008);
  if (v401 == 1)
  {
    if (v402 == 1)
    {
      v403 = *v400;
      *(_OWORD *)(a1 + 1017) = *(_OWORD *)(a2 + 1017);
      *v399 = v403;
    }
    else
    {
      *(_QWORD *)(a1 + 1008) = v402;
      *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 1016);
      v405 = *(_QWORD *)(a2 + 1024);
      *(_BYTE *)(a1 + 1032) = *(_BYTE *)(a2 + 1032);
      *(_QWORD *)(a1 + 1024) = v405;
      swift_bridgeObjectRetain(v402);
    }
  }
  else if (v402 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1008));
    v404 = *(_OWORD *)(a2 + 1017);
    *v399 = *v400;
    *(_OWORD *)(a1 + 1017) = v404;
  }
  else
  {
    *(_QWORD *)(a1 + 1008) = v402;
    swift_bridgeObjectRetain(v402);
    swift_bridgeObjectRelease(v401);
    *(_BYTE *)(a1 + 1016) = v4[736];
    v406 = *(_QWORD *)(a2 + 1024);
    *(_BYTE *)(a1 + 1032) = *(_BYTE *)(a2 + 1032);
    *(_QWORD *)(a1 + 1024) = v406;
  }
  v407 = (__int128 *)(a1 + 1040);
  v408 = (__int128 *)(a2 + 1040);
  v409 = *(_QWORD *)(a1 + 1040);
  v410 = *(_QWORD *)(a2 + 1040);
  if (v409 == 1)
  {
    if (v410 == 1)
    {
      v411 = *v408;
      *(_OWORD *)(a1 + 1049) = *(_OWORD *)(a2 + 1049);
      *v407 = v411;
    }
    else
    {
      *(_QWORD *)(a1 + 1040) = v410;
      *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
      v413 = *(_QWORD *)(a2 + 1056);
      *(_BYTE *)(a1 + 1064) = *(_BYTE *)(a2 + 1064);
      *(_QWORD *)(a1 + 1056) = v413;
      swift_bridgeObjectRetain(v410);
    }
  }
  else if (v410 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1040));
    v412 = *(_OWORD *)(a2 + 1049);
    *v407 = *v408;
    *(_OWORD *)(a1 + 1049) = v412;
  }
  else
  {
    *(_QWORD *)(a1 + 1040) = v410;
    swift_bridgeObjectRetain(v410);
    swift_bridgeObjectRelease(v409);
    *(_BYTE *)(a1 + 1048) = v4[768];
    v414 = *(_QWORD *)(a2 + 1056);
    *(_BYTE *)(a1 + 1064) = *(_BYTE *)(a2 + 1064);
    *(_QWORD *)(a1 + 1056) = v414;
  }
  v415 = (__int128 *)(a1 + 1072);
  v416 = (__int128 *)(a2 + 1072);
  v417 = *(_QWORD *)(a1 + 1072);
  v418 = *(_QWORD *)(a2 + 1072);
  if (v417 == 1)
  {
    if (v418 == 1)
    {
      v419 = *v416;
      *(_OWORD *)(a1 + 1081) = *(_OWORD *)(a2 + 1081);
      *v415 = v419;
    }
    else
    {
      *(_QWORD *)(a1 + 1072) = v418;
      *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a2 + 1080);
      v421 = *(_QWORD *)(a2 + 1088);
      *(_BYTE *)(a1 + 1096) = *(_BYTE *)(a2 + 1096);
      *(_QWORD *)(a1 + 1088) = v421;
      swift_bridgeObjectRetain(v418);
    }
  }
  else if (v418 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1072));
    v420 = *(_OWORD *)(a2 + 1081);
    *v415 = *v416;
    *(_OWORD *)(a1 + 1081) = v420;
  }
  else
  {
    *(_QWORD *)(a1 + 1072) = v418;
    swift_bridgeObjectRetain(v418);
    swift_bridgeObjectRelease(v417);
    *(_BYTE *)(a1 + 1080) = v4[800];
    v422 = *(_QWORD *)(a2 + 1088);
    *(_BYTE *)(a1 + 1096) = *(_BYTE *)(a2 + 1096);
    *(_QWORD *)(a1 + 1088) = v422;
  }
  v423 = (__int128 *)(a1 + 1104);
  v424 = (__int128 *)(a2 + 1104);
  v425 = *(_QWORD *)(a1 + 1104);
  v426 = *(_QWORD *)(a2 + 1104);
  if (v425 == 1)
  {
    if (v426 == 1)
    {
      v427 = *v424;
      *(_OWORD *)(a1 + 1113) = *(_OWORD *)(a2 + 1113);
      *v423 = v427;
    }
    else
    {
      *(_QWORD *)(a1 + 1104) = v426;
      *(_BYTE *)(a1 + 1112) = *(_BYTE *)(a2 + 1112);
      v429 = *(_QWORD *)(a2 + 1120);
      *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
      *(_QWORD *)(a1 + 1120) = v429;
      swift_bridgeObjectRetain(v426);
    }
  }
  else if (v426 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1104));
    v428 = *(_OWORD *)(a2 + 1113);
    *v423 = *v424;
    *(_OWORD *)(a1 + 1113) = v428;
  }
  else
  {
    *(_QWORD *)(a1 + 1104) = v426;
    swift_bridgeObjectRetain(v426);
    swift_bridgeObjectRelease(v425);
    *(_BYTE *)(a1 + 1112) = v4[832];
    v430 = *(_QWORD *)(a2 + 1120);
    *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
    *(_QWORD *)(a1 + 1120) = v430;
  }
  v431 = (__int128 *)(a1 + 1136);
  v432 = (__int128 *)(a2 + 1136);
  v433 = *(_QWORD *)(a1 + 1136);
  v434 = *(_QWORD *)(a2 + 1136);
  if (v433 == 1)
  {
    if (v434 == 1)
    {
      v435 = *v432;
      *(_OWORD *)(a1 + 1145) = *(_OWORD *)(a2 + 1145);
      *v431 = v435;
    }
    else
    {
      *(_QWORD *)(a1 + 1136) = v434;
      *(_BYTE *)(a1 + 1144) = *(_BYTE *)(a2 + 1144);
      v437 = *(_QWORD *)(a2 + 1152);
      *(_BYTE *)(a1 + 1160) = *(_BYTE *)(a2 + 1160);
      *(_QWORD *)(a1 + 1152) = v437;
      swift_bridgeObjectRetain(v434);
    }
  }
  else if (v434 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1136));
    v436 = *(_OWORD *)(a2 + 1145);
    *v431 = *v432;
    *(_OWORD *)(a1 + 1145) = v436;
  }
  else
  {
    *(_QWORD *)(a1 + 1136) = v434;
    swift_bridgeObjectRetain(v434);
    swift_bridgeObjectRelease(v433);
    *(_BYTE *)(a1 + 1144) = v4[864];
    v438 = *(_QWORD *)(a2 + 1152);
    *(_BYTE *)(a1 + 1160) = *(_BYTE *)(a2 + 1160);
    *(_QWORD *)(a1 + 1152) = v438;
  }
  v439 = (__int128 *)(a1 + 1168);
  v440 = (__int128 *)(a2 + 1168);
  v441 = *(_QWORD *)(a1 + 1168);
  v442 = *(_QWORD *)(a2 + 1168);
  if (v441 == 1)
  {
    if (v442 == 1)
    {
      v443 = *v440;
      *(_OWORD *)(a1 + 1177) = *(_OWORD *)(a2 + 1177);
      *v439 = v443;
    }
    else
    {
      *(_QWORD *)(a1 + 1168) = v442;
      *(_BYTE *)(a1 + 1176) = *(_BYTE *)(a2 + 1176);
      v445 = *(_QWORD *)(a2 + 1184);
      *(_BYTE *)(a1 + 1192) = *(_BYTE *)(a2 + 1192);
      *(_QWORD *)(a1 + 1184) = v445;
      swift_bridgeObjectRetain(v442);
    }
  }
  else if (v442 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1168));
    v444 = *(_OWORD *)(a2 + 1177);
    *v439 = *v440;
    *(_OWORD *)(a1 + 1177) = v444;
  }
  else
  {
    *(_QWORD *)(a1 + 1168) = v442;
    swift_bridgeObjectRetain(v442);
    swift_bridgeObjectRelease(v441);
    *(_BYTE *)(a1 + 1176) = v4[896];
    v446 = *(_QWORD *)(a2 + 1184);
    *(_BYTE *)(a1 + 1192) = *(_BYTE *)(a2 + 1192);
    *(_QWORD *)(a1 + 1184) = v446;
  }
  v447 = (__int128 *)(a1 + 1200);
  v448 = (__int128 *)(a2 + 1200);
  v449 = *(_QWORD *)(a1 + 1200);
  v450 = *(_QWORD *)(a2 + 1200);
  if (v449 == 1)
  {
    if (v450 == 1)
    {
      v451 = *v448;
      *(_OWORD *)(a1 + 1209) = *(_OWORD *)(a2 + 1209);
      *v447 = v451;
    }
    else
    {
      *(_QWORD *)(a1 + 1200) = v450;
      *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 1208);
      v453 = *(_QWORD *)(a2 + 1216);
      *(_BYTE *)(a1 + 1224) = *(_BYTE *)(a2 + 1224);
      *(_QWORD *)(a1 + 1216) = v453;
      swift_bridgeObjectRetain(v450);
    }
  }
  else if (v450 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1200));
    v452 = *(_OWORD *)(a2 + 1209);
    *v447 = *v448;
    *(_OWORD *)(a1 + 1209) = v452;
  }
  else
  {
    *(_QWORD *)(a1 + 1200) = v450;
    swift_bridgeObjectRetain(v450);
    swift_bridgeObjectRelease(v449);
    *(_BYTE *)(a1 + 1208) = v4[928];
    v454 = *(_QWORD *)(a2 + 1216);
    *(_BYTE *)(a1 + 1224) = *(_BYTE *)(a2 + 1224);
    *(_QWORD *)(a1 + 1216) = v454;
  }
  v455 = (__int128 *)(a1 + 1232);
  v456 = (__int128 *)(a2 + 1232);
  v457 = *(_QWORD *)(a1 + 1232);
  v458 = *(_QWORD *)(a2 + 1232);
  if (v457 == 1)
  {
    if (v458 == 1)
    {
      v459 = *v456;
      *(_OWORD *)(a1 + 1241) = *(_OWORD *)(a2 + 1241);
      *v455 = v459;
    }
    else
    {
      *(_QWORD *)(a1 + 1232) = v458;
      *(_BYTE *)(a1 + 1240) = *(_BYTE *)(a2 + 1240);
      v461 = *(_QWORD *)(a2 + 1248);
      *(_BYTE *)(a1 + 1256) = *(_BYTE *)(a2 + 1256);
      *(_QWORD *)(a1 + 1248) = v461;
      swift_bridgeObjectRetain(v458);
    }
  }
  else if (v458 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1232));
    v460 = *(_OWORD *)(a2 + 1241);
    *v455 = *v456;
    *(_OWORD *)(a1 + 1241) = v460;
  }
  else
  {
    *(_QWORD *)(a1 + 1232) = v458;
    swift_bridgeObjectRetain(v458);
    swift_bridgeObjectRelease(v457);
    *(_BYTE *)(a1 + 1240) = v4[960];
    v462 = *(_QWORD *)(a2 + 1248);
    *(_BYTE *)(a1 + 1256) = *(_BYTE *)(a2 + 1256);
    *(_QWORD *)(a1 + 1248) = v462;
  }
  v463 = (__int128 *)(a1 + 1264);
  v464 = (__int128 *)(a2 + 1264);
  v465 = *(_QWORD *)(a1 + 1264);
  v466 = *(_QWORD *)(a2 + 1264);
  if (v465 == 1)
  {
    if (v466 == 1)
    {
      v467 = *v464;
      *(_OWORD *)(a1 + 1273) = *(_OWORD *)(a2 + 1273);
      *v463 = v467;
    }
    else
    {
      *(_QWORD *)(a1 + 1264) = v466;
      *(_BYTE *)(a1 + 1272) = *(_BYTE *)(a2 + 1272);
      v469 = *(_QWORD *)(a2 + 1280);
      *(_BYTE *)(a1 + 1288) = *(_BYTE *)(a2 + 1288);
      *(_QWORD *)(a1 + 1280) = v469;
      swift_bridgeObjectRetain(v466);
    }
  }
  else if (v466 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1264));
    v468 = *(_OWORD *)(a2 + 1273);
    *v463 = *v464;
    *(_OWORD *)(a1 + 1273) = v468;
  }
  else
  {
    *(_QWORD *)(a1 + 1264) = v466;
    swift_bridgeObjectRetain(v466);
    swift_bridgeObjectRelease(v465);
    *(_BYTE *)(a1 + 1272) = v4[992];
    v470 = *(_QWORD *)(a2 + 1280);
    *(_BYTE *)(a1 + 1288) = *(_BYTE *)(a2 + 1288);
    *(_QWORD *)(a1 + 1280) = v470;
  }
  v471 = (__int128 *)(a1 + 1296);
  v472 = (__int128 *)(a2 + 1296);
  v473 = *(_QWORD *)(a1 + 1296);
  v474 = *(_QWORD *)(a2 + 1296);
  if (v473 == 1)
  {
    if (v474 == 1)
    {
      v475 = *v472;
      *(_OWORD *)(a1 + 1305) = *(_OWORD *)(a2 + 1305);
      *v471 = v475;
    }
    else
    {
      *(_QWORD *)(a1 + 1296) = v474;
      *(_BYTE *)(a1 + 1304) = *(_BYTE *)(a2 + 1304);
      v477 = *(_QWORD *)(a2 + 1312);
      *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
      *(_QWORD *)(a1 + 1312) = v477;
      swift_bridgeObjectRetain(v474);
    }
  }
  else if (v474 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1296));
    v476 = *(_OWORD *)(a2 + 1305);
    *v471 = *v472;
    *(_OWORD *)(a1 + 1305) = v476;
  }
  else
  {
    *(_QWORD *)(a1 + 1296) = v474;
    swift_bridgeObjectRetain(v474);
    swift_bridgeObjectRelease(v473);
    *(_BYTE *)(a1 + 1304) = v4[1024];
    v478 = *(_QWORD *)(a2 + 1312);
    *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a2 + 1320);
    *(_QWORD *)(a1 + 1312) = v478;
  }
  v479 = (__int128 *)(a1 + 1328);
  v480 = (__int128 *)(a2 + 1328);
  v481 = *(_QWORD *)(a1 + 1328);
  v482 = *(_QWORD *)(a2 + 1328);
  if (v481 == 1)
  {
    if (v482 == 1)
    {
      v483 = *v480;
      *(_OWORD *)(a1 + 1337) = *(_OWORD *)(a2 + 1337);
      *v479 = v483;
    }
    else
    {
      *(_QWORD *)(a1 + 1328) = v482;
      *(_BYTE *)(a1 + 1336) = *(_BYTE *)(a2 + 1336);
      v485 = *(_QWORD *)(a2 + 1344);
      *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
      *(_QWORD *)(a1 + 1344) = v485;
      swift_bridgeObjectRetain(v482);
    }
  }
  else if (v482 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1328));
    v484 = *(_OWORD *)(a2 + 1337);
    *v479 = *v480;
    *(_OWORD *)(a1 + 1337) = v484;
  }
  else
  {
    *(_QWORD *)(a1 + 1328) = v482;
    swift_bridgeObjectRetain(v482);
    swift_bridgeObjectRelease(v481);
    *(_BYTE *)(a1 + 1336) = v4[1056];
    v486 = *(_QWORD *)(a2 + 1344);
    *(_BYTE *)(a1 + 1352) = *(_BYTE *)(a2 + 1352);
    *(_QWORD *)(a1 + 1344) = v486;
  }
  v487 = (__int128 *)(a1 + 1360);
  v488 = (__int128 *)(a2 + 1360);
  v489 = *(_QWORD *)(a1 + 1360);
  v490 = *(_QWORD *)(a2 + 1360);
  if (v489 == 1)
  {
    if (v490 == 1)
    {
      v491 = *v488;
      *(_OWORD *)(a1 + 1369) = *(_OWORD *)(a2 + 1369);
      *v487 = v491;
    }
    else
    {
      *(_QWORD *)(a1 + 1360) = v490;
      *(_BYTE *)(a1 + 1368) = *(_BYTE *)(a2 + 1368);
      v493 = *(_QWORD *)(a2 + 1376);
      *(_BYTE *)(a1 + 1384) = *(_BYTE *)(a2 + 1384);
      *(_QWORD *)(a1 + 1376) = v493;
      swift_bridgeObjectRetain(v490);
    }
  }
  else if (v490 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1360));
    v492 = *(_OWORD *)(a2 + 1369);
    *v487 = *v488;
    *(_OWORD *)(a1 + 1369) = v492;
  }
  else
  {
    *(_QWORD *)(a1 + 1360) = v490;
    swift_bridgeObjectRetain(v490);
    swift_bridgeObjectRelease(v489);
    *(_BYTE *)(a1 + 1368) = v4[1088];
    v494 = *(_QWORD *)(a2 + 1376);
    *(_BYTE *)(a1 + 1384) = *(_BYTE *)(a2 + 1384);
    *(_QWORD *)(a1 + 1376) = v494;
  }
  v495 = (__int128 *)(a1 + 1392);
  v496 = (__int128 *)(a2 + 1392);
  v497 = *(_QWORD *)(a1 + 1392);
  v498 = *(_QWORD *)(a2 + 1392);
  if (v497 == 1)
  {
    if (v498 == 1)
    {
      v499 = *v496;
      *(_OWORD *)(a1 + 1401) = *(_OWORD *)(a2 + 1401);
      *v495 = v499;
    }
    else
    {
      *(_QWORD *)(a1 + 1392) = v498;
      *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 1400);
      v501 = *(_QWORD *)(a2 + 1408);
      *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
      *(_QWORD *)(a1 + 1408) = v501;
      swift_bridgeObjectRetain(v498);
    }
  }
  else if (v498 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1392));
    v500 = *(_OWORD *)(a2 + 1401);
    *v495 = *v496;
    *(_OWORD *)(a1 + 1401) = v500;
  }
  else
  {
    *(_QWORD *)(a1 + 1392) = v498;
    swift_bridgeObjectRetain(v498);
    swift_bridgeObjectRelease(v497);
    *(_BYTE *)(a1 + 1400) = v4[1120];
    v502 = *(_QWORD *)(a2 + 1408);
    *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
    *(_QWORD *)(a1 + 1408) = v502;
  }
  v503 = (__int128 *)(a1 + 1424);
  v504 = (__int128 *)(a2 + 1424);
  v505 = *(_QWORD *)(a1 + 1424);
  v506 = *(_QWORD *)(a2 + 1424);
  if (v505 == 1)
  {
    if (v506 == 1)
    {
      v507 = *v504;
      *(_OWORD *)(a1 + 1433) = *(_OWORD *)(a2 + 1433);
      *v503 = v507;
    }
    else
    {
      *(_QWORD *)(a1 + 1424) = v506;
      *(_BYTE *)(a1 + 1432) = *(_BYTE *)(a2 + 1432);
      v509 = *(_QWORD *)(a2 + 1440);
      *(_BYTE *)(a1 + 1448) = *(_BYTE *)(a2 + 1448);
      *(_QWORD *)(a1 + 1440) = v509;
      swift_bridgeObjectRetain(v506);
    }
  }
  else if (v506 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1424));
    v508 = *(_OWORD *)(a2 + 1433);
    *v503 = *v504;
    *(_OWORD *)(a1 + 1433) = v508;
  }
  else
  {
    *(_QWORD *)(a1 + 1424) = v506;
    swift_bridgeObjectRetain(v506);
    swift_bridgeObjectRelease(v505);
    *(_BYTE *)(a1 + 1432) = v4[1152];
    v510 = *(_QWORD *)(a2 + 1440);
    *(_BYTE *)(a1 + 1448) = *(_BYTE *)(a2 + 1448);
    *(_QWORD *)(a1 + 1440) = v510;
  }
  v511 = (__int128 *)(a1 + 1456);
  v512 = (__int128 *)(a2 + 1456);
  v513 = *(_QWORD *)(a1 + 1456);
  v514 = *(_QWORD *)(a2 + 1456);
  if (v513 == 1)
  {
    if (v514 == 1)
    {
      v515 = *v512;
      *(_OWORD *)(a1 + 1465) = *(_OWORD *)(a2 + 1465);
      *v511 = v515;
    }
    else
    {
      *(_QWORD *)(a1 + 1456) = v514;
      *(_BYTE *)(a1 + 1464) = *(_BYTE *)(a2 + 1464);
      v517 = *(_QWORD *)(a2 + 1472);
      *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
      *(_QWORD *)(a1 + 1472) = v517;
      swift_bridgeObjectRetain(v514);
    }
  }
  else if (v514 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1456));
    v516 = *(_OWORD *)(a2 + 1465);
    *v511 = *v512;
    *(_OWORD *)(a1 + 1465) = v516;
  }
  else
  {
    *(_QWORD *)(a1 + 1456) = v514;
    swift_bridgeObjectRetain(v514);
    swift_bridgeObjectRelease(v513);
    *(_BYTE *)(a1 + 1464) = v4[1184];
    v518 = *(_QWORD *)(a2 + 1472);
    *(_BYTE *)(a1 + 1480) = *(_BYTE *)(a2 + 1480);
    *(_QWORD *)(a1 + 1472) = v518;
  }
  v519 = (__int128 *)(a1 + 1488);
  v520 = (__int128 *)(a2 + 1488);
  v521 = *(_QWORD *)(a1 + 1488);
  v522 = *(_QWORD *)(a2 + 1488);
  if (v521 == 1)
  {
    if (v522 == 1)
    {
      v523 = *v520;
      *(_OWORD *)(a1 + 1497) = *(_OWORD *)(a2 + 1497);
      *v519 = v523;
    }
    else
    {
      *(_QWORD *)(a1 + 1488) = v522;
      *(_BYTE *)(a1 + 1496) = *(_BYTE *)(a2 + 1496);
      v525 = *(_QWORD *)(a2 + 1504);
      *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
      *(_QWORD *)(a1 + 1504) = v525;
      swift_bridgeObjectRetain(v522);
    }
  }
  else if (v522 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1488));
    v524 = *(_OWORD *)(a2 + 1497);
    *v519 = *v520;
    *(_OWORD *)(a1 + 1497) = v524;
  }
  else
  {
    *(_QWORD *)(a1 + 1488) = v522;
    swift_bridgeObjectRetain(v522);
    swift_bridgeObjectRelease(v521);
    *(_BYTE *)(a1 + 1496) = v4[1216];
    v526 = *(_QWORD *)(a2 + 1504);
    *(_BYTE *)(a1 + 1512) = *(_BYTE *)(a2 + 1512);
    *(_QWORD *)(a1 + 1504) = v526;
  }
  v527 = (__int128 *)(a1 + 1520);
  v528 = (__int128 *)(a2 + 1520);
  v529 = *(_QWORD *)(a1 + 1520);
  v530 = *(_QWORD *)(a2 + 1520);
  if (v529 == 1)
  {
    if (v530 == 1)
    {
      v531 = *v528;
      *(_OWORD *)(a1 + 1529) = *(_OWORD *)(a2 + 1529);
      *v527 = v531;
    }
    else
    {
      *(_QWORD *)(a1 + 1520) = v530;
      *(_BYTE *)(a1 + 1528) = *(_BYTE *)(a2 + 1528);
      v533 = *(_QWORD *)(a2 + 1536);
      *(_BYTE *)(a1 + 1544) = *(_BYTE *)(a2 + 1544);
      *(_QWORD *)(a1 + 1536) = v533;
      swift_bridgeObjectRetain(v530);
    }
  }
  else if (v530 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1520));
    v532 = *(_OWORD *)(a2 + 1529);
    *v527 = *v528;
    *(_OWORD *)(a1 + 1529) = v532;
  }
  else
  {
    *(_QWORD *)(a1 + 1520) = v530;
    swift_bridgeObjectRetain(v530);
    swift_bridgeObjectRelease(v529);
    *(_BYTE *)(a1 + 1528) = v4[1248];
    v534 = *(_QWORD *)(a2 + 1536);
    *(_BYTE *)(a1 + 1544) = *(_BYTE *)(a2 + 1544);
    *(_QWORD *)(a1 + 1536) = v534;
  }
  v535 = (__int128 *)(a1 + 1552);
  v536 = (__int128 *)(a2 + 1552);
  v537 = *(_QWORD *)(a1 + 1552);
  v538 = *(_QWORD *)(a2 + 1552);
  if (v537 == 1)
  {
    if (v538 == 1)
    {
      v539 = *v536;
      *(_OWORD *)(a1 + 1561) = *(_OWORD *)(a2 + 1561);
      *v535 = v539;
    }
    else
    {
      *(_QWORD *)(a1 + 1552) = v538;
      *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a2 + 1560);
      v541 = *(_QWORD *)(a2 + 1568);
      *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
      *(_QWORD *)(a1 + 1568) = v541;
      swift_bridgeObjectRetain(v538);
    }
  }
  else if (v538 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1552));
    v540 = *(_OWORD *)(a2 + 1561);
    *v535 = *v536;
    *(_OWORD *)(a1 + 1561) = v540;
  }
  else
  {
    *(_QWORD *)(a1 + 1552) = v538;
    swift_bridgeObjectRetain(v538);
    swift_bridgeObjectRelease(v537);
    *(_BYTE *)(a1 + 1560) = v4[1280];
    v542 = *(_QWORD *)(a2 + 1568);
    *(_BYTE *)(a1 + 1576) = *(_BYTE *)(a2 + 1576);
    *(_QWORD *)(a1 + 1568) = v542;
  }
  v543 = (__int128 *)(a1 + 1584);
  v544 = (__int128 *)(a2 + 1584);
  v545 = *(_QWORD *)(a1 + 1584);
  v546 = *(_QWORD *)(a2 + 1584);
  if (v545 == 1)
  {
    if (v546 == 1)
    {
      v547 = *v544;
      *(_OWORD *)(a1 + 1593) = *(_OWORD *)(a2 + 1593);
      *v543 = v547;
    }
    else
    {
      *(_QWORD *)(a1 + 1584) = v546;
      *(_BYTE *)(a1 + 1592) = *(_BYTE *)(a2 + 1592);
      v549 = *(_QWORD *)(a2 + 1600);
      *(_BYTE *)(a1 + 1608) = *(_BYTE *)(a2 + 1608);
      *(_QWORD *)(a1 + 1600) = v549;
      swift_bridgeObjectRetain(v546);
    }
  }
  else if (v546 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1584));
    v548 = *(_OWORD *)(a2 + 1593);
    *v543 = *v544;
    *(_OWORD *)(a1 + 1593) = v548;
  }
  else
  {
    *(_QWORD *)(a1 + 1584) = v546;
    swift_bridgeObjectRetain(v546);
    swift_bridgeObjectRelease(v545);
    *(_BYTE *)(a1 + 1592) = v4[1312];
    v550 = *(_QWORD *)(a2 + 1600);
    *(_BYTE *)(a1 + 1608) = *(_BYTE *)(a2 + 1608);
    *(_QWORD *)(a1 + 1600) = v550;
  }
  v551 = *(_OWORD *)(a2 + 1616);
  *(_BYTE *)(a1 + 1632) = *(_BYTE *)(a2 + 1632);
  *(_OWORD *)(a1 + 1616) = v551;
  v552 = *(_OWORD *)(a2 + 1640);
  *(_BYTE *)(a1 + 1656) = *(_BYTE *)(a2 + 1656);
  *(_OWORD *)(a1 + 1640) = v552;
  *(_BYTE *)(a1 + 1657) = *(_BYTE *)(a2 + 1657);
  *(_BYTE *)(a1 + 1658) = *(_BYTE *)(a2 + 1658);
  *(_BYTE *)(a1 + 1659) = *(_BYTE *)(a2 + 1659);
  *(_BYTE *)(a1 + 1660) = *(_BYTE *)(a2 + 1660);
  *(_BYTE *)(a1 + 1661) = *(_BYTE *)(a2 + 1661);
  *(_BYTE *)(a1 + 1662) = *(_BYTE *)(a2 + 1662);
  *(_BYTE *)(a1 + 1663) = *(_BYTE *)(a2 + 1663);
  v553 = *(_QWORD *)(a1 + 1664);
  v554 = *(_QWORD *)(a2 + 1664);
  *(_QWORD *)(a1 + 1664) = v554;
  swift_bridgeObjectRetain(v554);
  swift_bridgeObjectRelease(v553);
  v555 = *(_QWORD *)(a1 + 1672);
  v556 = *(_QWORD *)(a2 + 1672);
  *(_QWORD *)(a1 + 1672) = v556;
  swift_bridgeObjectRetain(v556);
  swift_bridgeObjectRelease(v555);
LABEL_495:
  v557 = (_OWORD *)(a1 + 1680);
  v558 = (uint64_t *)(a2 + 1680);
  v559 = *(_QWORD *)(a2 + 2496);
  if (*(_QWORD *)(a1 + 2496) == 1)
  {
    if (v559 != 1)
    {
      v560 = *v558;
      if (*v558 == 1)
      {
        v561 = *(_OWORD *)v558;
        *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
        *v557 = v561;
      }
      else
      {
        *(_QWORD *)(a1 + 1680) = v560;
        *(_BYTE *)(a1 + 1688) = *(_BYTE *)(a2 + 1688);
        v565 = *(_QWORD *)(a2 + 1696);
        *(_BYTE *)(a1 + 1704) = *(_BYTE *)(a2 + 1704);
        *(_QWORD *)(a1 + 1696) = v565;
        swift_bridgeObjectRetain(v560);
      }
      v566 = *(_QWORD *)(a2 + 1712);
      if (v566 == 1)
      {
        v567 = *(_OWORD *)(a2 + 1712);
        *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
        *(_OWORD *)(a1 + 1712) = v567;
      }
      else
      {
        *(_QWORD *)(a1 + 1712) = v566;
        *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 1720);
        v569 = *(_QWORD *)(a2 + 1728);
        *(_BYTE *)(a1 + 1736) = *(_BYTE *)(a2 + 1736);
        *(_QWORD *)(a1 + 1728) = v569;
        swift_bridgeObjectRetain(v566);
      }
      v570 = *(_QWORD *)(a2 + 1744);
      if (v570 == 1)
      {
        v571 = *(_OWORD *)(a2 + 1744);
        *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
        *(_OWORD *)(a1 + 1744) = v571;
      }
      else
      {
        *(_QWORD *)(a1 + 1744) = v570;
        *(_BYTE *)(a1 + 1752) = *(_BYTE *)(a2 + 1752);
        v572 = *(_QWORD *)(a2 + 1760);
        *(_BYTE *)(a1 + 1768) = *(_BYTE *)(a2 + 1768);
        *(_QWORD *)(a1 + 1760) = v572;
        swift_bridgeObjectRetain(v570);
      }
      v573 = *(_QWORD *)(a2 + 1776);
      if (v573 == 1)
      {
        v574 = *(_OWORD *)(a2 + 1776);
        *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
        *(_OWORD *)(a1 + 1776) = v574;
      }
      else
      {
        *(_QWORD *)(a1 + 1776) = v573;
        *(_BYTE *)(a1 + 1784) = *(_BYTE *)(a2 + 1784);
        v575 = *(_QWORD *)(a2 + 1792);
        *(_BYTE *)(a1 + 1800) = *(_BYTE *)(a2 + 1800);
        *(_QWORD *)(a1 + 1792) = v575;
        swift_bridgeObjectRetain(v573);
      }
      v576 = *(_QWORD *)(a2 + 1808);
      if (v576 == 1)
      {
        v577 = *(_OWORD *)(a2 + 1808);
        *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
        *(_OWORD *)(a1 + 1808) = v577;
      }
      else
      {
        *(_QWORD *)(a1 + 1808) = v576;
        *(_BYTE *)(a1 + 1816) = *(_BYTE *)(a2 + 1816);
        v578 = *(_QWORD *)(a2 + 1824);
        *(_BYTE *)(a1 + 1832) = *(_BYTE *)(a2 + 1832);
        *(_QWORD *)(a1 + 1824) = v578;
        swift_bridgeObjectRetain(v576);
      }
      v579 = *(_QWORD *)(a2 + 1840);
      if (v579 == 1)
      {
        v580 = *(_OWORD *)(a2 + 1840);
        *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
        *(_OWORD *)(a1 + 1840) = v580;
      }
      else
      {
        *(_QWORD *)(a1 + 1840) = v579;
        *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a2 + 1848);
        v581 = *(_QWORD *)(a2 + 1856);
        *(_BYTE *)(a1 + 1864) = *(_BYTE *)(a2 + 1864);
        *(_QWORD *)(a1 + 1856) = v581;
        swift_bridgeObjectRetain(v579);
      }
      v582 = *(_QWORD *)(a2 + 1872);
      if (v582 == 1)
      {
        v583 = *(_OWORD *)(a2 + 1872);
        *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
        *(_OWORD *)(a1 + 1872) = v583;
      }
      else
      {
        *(_QWORD *)(a1 + 1872) = v582;
        *(_BYTE *)(a1 + 1880) = *(_BYTE *)(a2 + 1880);
        v584 = *(_QWORD *)(a2 + 1888);
        *(_BYTE *)(a1 + 1896) = *(_BYTE *)(a2 + 1896);
        *(_QWORD *)(a1 + 1888) = v584;
        swift_bridgeObjectRetain(v582);
      }
      v585 = *(_QWORD *)(a2 + 1904);
      if (v585 == 1)
      {
        v586 = *(_OWORD *)(a2 + 1904);
        *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
        *(_OWORD *)(a1 + 1904) = v586;
      }
      else
      {
        *(_QWORD *)(a1 + 1904) = v585;
        *(_BYTE *)(a1 + 1912) = *(_BYTE *)(a2 + 1912);
        v587 = *(_QWORD *)(a2 + 1920);
        *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
        *(_QWORD *)(a1 + 1920) = v587;
        swift_bridgeObjectRetain(v585);
      }
      v588 = *(_QWORD *)(a2 + 1936);
      if (v588 == 1)
      {
        v589 = *(_OWORD *)(a2 + 1936);
        *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
        *(_OWORD *)(a1 + 1936) = v589;
      }
      else
      {
        *(_QWORD *)(a1 + 1936) = v588;
        *(_BYTE *)(a1 + 1944) = *(_BYTE *)(a2 + 1944);
        v590 = *(_QWORD *)(a2 + 1952);
        *(_BYTE *)(a1 + 1960) = *(_BYTE *)(a2 + 1960);
        *(_QWORD *)(a1 + 1952) = v590;
        swift_bridgeObjectRetain(v588);
      }
      v591 = *(_QWORD *)(a2 + 1968);
      if (v591 == 1)
      {
        v592 = *(_OWORD *)(a2 + 1968);
        *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
        *(_OWORD *)(a1 + 1968) = v592;
      }
      else
      {
        *(_QWORD *)(a1 + 1968) = v591;
        *(_BYTE *)(a1 + 1976) = *(_BYTE *)(a2 + 1976);
        v593 = *(_QWORD *)(a2 + 1984);
        *(_BYTE *)(a1 + 1992) = *(_BYTE *)(a2 + 1992);
        *(_QWORD *)(a1 + 1984) = v593;
        swift_bridgeObjectRetain(v591);
      }
      v594 = *(_QWORD *)(a2 + 2000);
      if (v594 == 1)
      {
        v595 = *(_OWORD *)(a2 + 2000);
        *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
        *(_OWORD *)(a1 + 2000) = v595;
      }
      else
      {
        *(_QWORD *)(a1 + 2000) = v594;
        *(_BYTE *)(a1 + 2008) = *(_BYTE *)(a2 + 2008);
        v596 = *(_QWORD *)(a2 + 2016);
        *(_BYTE *)(a1 + 2024) = *(_BYTE *)(a2 + 2024);
        *(_QWORD *)(a1 + 2016) = v596;
        swift_bridgeObjectRetain(v594);
      }
      v597 = *(_QWORD *)(a2 + 2032);
      if (v597 == 1)
      {
        v598 = *(_OWORD *)(a2 + 2032);
        *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
        *(_OWORD *)(a1 + 2032) = v598;
      }
      else
      {
        *(_QWORD *)(a1 + 2032) = v597;
        *(_BYTE *)(a1 + 2040) = *(_BYTE *)(a2 + 2040);
        v599 = *(_QWORD *)(a2 + 2048);
        *(_BYTE *)(a1 + 2056) = *(_BYTE *)(a2 + 2056);
        *(_QWORD *)(a1 + 2048) = v599;
        swift_bridgeObjectRetain(v597);
      }
      v600 = *(_QWORD *)(a2 + 2064);
      if (v600 == 1)
      {
        v601 = *(_OWORD *)(a2 + 2064);
        *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
        *(_OWORD *)(a1 + 2064) = v601;
      }
      else
      {
        *(_QWORD *)(a1 + 2064) = v600;
        *(_BYTE *)(a1 + 2072) = *(_BYTE *)(a2 + 2072);
        v602 = *(_QWORD *)(a2 + 2080);
        *(_BYTE *)(a1 + 2088) = *(_BYTE *)(a2 + 2088);
        *(_QWORD *)(a1 + 2080) = v602;
        swift_bridgeObjectRetain(v600);
      }
      v603 = *(_QWORD *)(a2 + 2096);
      if (v603 == 1)
      {
        v604 = *(_OWORD *)(a2 + 2096);
        *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
        *(_OWORD *)(a1 + 2096) = v604;
      }
      else
      {
        *(_QWORD *)(a1 + 2096) = v603;
        *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
        v605 = *(_QWORD *)(a2 + 2112);
        *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
        *(_QWORD *)(a1 + 2112) = v605;
        swift_bridgeObjectRetain(v603);
      }
      v606 = *(_QWORD *)(a2 + 2128);
      if (v606 == 1)
      {
        v607 = *(_OWORD *)(a2 + 2128);
        *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
        *(_OWORD *)(a1 + 2128) = v607;
      }
      else
      {
        *(_QWORD *)(a1 + 2128) = v606;
        *(_BYTE *)(a1 + 2136) = *(_BYTE *)(a2 + 2136);
        v608 = *(_QWORD *)(a2 + 2144);
        *(_BYTE *)(a1 + 2152) = *(_BYTE *)(a2 + 2152);
        *(_QWORD *)(a1 + 2144) = v608;
        swift_bridgeObjectRetain(v606);
      }
      v609 = *(_QWORD *)(a2 + 2160);
      if (v609 == 1)
      {
        v610 = *(_OWORD *)(a2 + 2160);
        *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
        *(_OWORD *)(a1 + 2160) = v610;
      }
      else
      {
        *(_QWORD *)(a1 + 2160) = v609;
        *(_BYTE *)(a1 + 2168) = *(_BYTE *)(a2 + 2168);
        v611 = *(_QWORD *)(a2 + 2176);
        *(_BYTE *)(a1 + 2184) = *(_BYTE *)(a2 + 2184);
        *(_QWORD *)(a1 + 2176) = v611;
        swift_bridgeObjectRetain(v609);
      }
      v612 = *(_QWORD *)(a2 + 2192);
      if (v612 == 1)
      {
        v613 = *(_OWORD *)(a2 + 2192);
        *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
        *(_OWORD *)(a1 + 2192) = v613;
      }
      else
      {
        *(_QWORD *)(a1 + 2192) = v612;
        *(_BYTE *)(a1 + 2200) = *(_BYTE *)(a2 + 2200);
        v614 = *(_QWORD *)(a2 + 2208);
        *(_BYTE *)(a1 + 2216) = *(_BYTE *)(a2 + 2216);
        *(_QWORD *)(a1 + 2208) = v614;
        swift_bridgeObjectRetain(v612);
      }
      v615 = *(_QWORD *)(a2 + 2224);
      if (v615 == 1)
      {
        v616 = *(_OWORD *)(a2 + 2224);
        *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
        *(_OWORD *)(a1 + 2224) = v616;
      }
      else
      {
        *(_QWORD *)(a1 + 2224) = v615;
        *(_BYTE *)(a1 + 2232) = *(_BYTE *)(a2 + 2232);
        v617 = *(_QWORD *)(a2 + 2240);
        *(_BYTE *)(a1 + 2248) = *(_BYTE *)(a2 + 2248);
        *(_QWORD *)(a1 + 2240) = v617;
        swift_bridgeObjectRetain(v615);
      }
      v618 = *(_QWORD *)(a2 + 2256);
      if (v618 == 1)
      {
        v619 = *(_OWORD *)(a2 + 2256);
        *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
        *(_OWORD *)(a1 + 2256) = v619;
      }
      else
      {
        *(_QWORD *)(a1 + 2256) = v618;
        *(_BYTE *)(a1 + 2264) = *(_BYTE *)(a2 + 2264);
        v620 = *(_QWORD *)(a2 + 2272);
        *(_BYTE *)(a1 + 2280) = *(_BYTE *)(a2 + 2280);
        *(_QWORD *)(a1 + 2272) = v620;
        swift_bridgeObjectRetain(v618);
      }
      v621 = *(_QWORD *)(a2 + 2288);
      if (v621 == 1)
      {
        v622 = *(_OWORD *)(a2 + 2288);
        *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
        *(_OWORD *)(a1 + 2288) = v622;
      }
      else
      {
        *(_QWORD *)(a1 + 2288) = v621;
        *(_BYTE *)(a1 + 2296) = *(_BYTE *)(a2 + 2296);
        v623 = *(_QWORD *)(a2 + 2304);
        *(_BYTE *)(a1 + 2312) = *(_BYTE *)(a2 + 2312);
        *(_QWORD *)(a1 + 2304) = v623;
        swift_bridgeObjectRetain(v621);
      }
      v624 = *(_QWORD *)(a2 + 2320);
      if (v624 == 1)
      {
        v625 = *(_OWORD *)(a2 + 2320);
        *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
        *(_OWORD *)(a1 + 2320) = v625;
      }
      else
      {
        *(_QWORD *)(a1 + 2320) = v624;
        *(_BYTE *)(a1 + 2328) = *(_BYTE *)(a2 + 2328);
        v626 = *(_QWORD *)(a2 + 2336);
        *(_BYTE *)(a1 + 2344) = *(_BYTE *)(a2 + 2344);
        *(_QWORD *)(a1 + 2336) = v626;
        swift_bridgeObjectRetain(v624);
      }
      v627 = *(_QWORD *)(a2 + 2352);
      if (v627 == 1)
      {
        v628 = *(_OWORD *)(a2 + 2352);
        *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
        *(_OWORD *)(a1 + 2352) = v628;
      }
      else
      {
        *(_QWORD *)(a1 + 2352) = v627;
        *(_BYTE *)(a1 + 2360) = *(_BYTE *)(a2 + 2360);
        v629 = *(_QWORD *)(a2 + 2368);
        *(_BYTE *)(a1 + 2376) = *(_BYTE *)(a2 + 2376);
        *(_QWORD *)(a1 + 2368) = v629;
        swift_bridgeObjectRetain(v627);
      }
      v630 = *(_QWORD *)(a2 + 2384);
      if (v630 == 1)
      {
        v631 = *(_OWORD *)(a2 + 2384);
        *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
        *(_OWORD *)(a1 + 2384) = v631;
      }
      else
      {
        *(_QWORD *)(a1 + 2384) = v630;
        *(_BYTE *)(a1 + 2392) = *(_BYTE *)(a2 + 2392);
        v632 = *(_QWORD *)(a2 + 2400);
        *(_BYTE *)(a1 + 2408) = *(_BYTE *)(a2 + 2408);
        *(_QWORD *)(a1 + 2400) = v632;
        swift_bridgeObjectRetain(v630);
      }
      v633 = *(_QWORD *)(a2 + 2416);
      if (v633 == 1)
      {
        v634 = *(_OWORD *)(a2 + 2416);
        *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
        *(_OWORD *)(a1 + 2416) = v634;
      }
      else
      {
        *(_QWORD *)(a1 + 2416) = v633;
        *(_BYTE *)(a1 + 2424) = *(_BYTE *)(a2 + 2424);
        v635 = *(_QWORD *)(a2 + 2432);
        *(_BYTE *)(a1 + 2440) = *(_BYTE *)(a2 + 2440);
        *(_QWORD *)(a1 + 2432) = v635;
        swift_bridgeObjectRetain(v633);
      }
      v636 = *(_OWORD *)(a2 + 2448);
      *(_BYTE *)(a1 + 2464) = *(_BYTE *)(a2 + 2464);
      *(_OWORD *)(a1 + 2448) = v636;
      v637 = *(_OWORD *)(a2 + 2472);
      *(_BYTE *)(a1 + 2488) = *(_BYTE *)(a2 + 2488);
      *(_OWORD *)(a1 + 2472) = v637;
      *(_BYTE *)(a1 + 2489) = *(_BYTE *)(a2 + 2489);
      *(_BYTE *)(a1 + 2490) = *(_BYTE *)(a2 + 2490);
      *(_BYTE *)(a1 + 2491) = *(_BYTE *)(a2 + 2491);
      *(_BYTE *)(a1 + 2492) = *(_BYTE *)(a2 + 2492);
      *(_BYTE *)(a1 + 2493) = *(_BYTE *)(a2 + 2493);
      *(_BYTE *)(a1 + 2494) = *(_BYTE *)(a2 + 2494);
      *(_BYTE *)(a1 + 2495) = *(_BYTE *)(a2 + 2495);
      v638 = *(_QWORD *)(a2 + 2496);
      *(_QWORD *)(a1 + 2496) = v638;
      v639 = *(_QWORD *)(a2 + 2504);
      *(_QWORD *)(a1 + 2504) = v639;
      swift_bridgeObjectRetain(v638);
      swift_bridgeObjectRetain(v639);
      goto LABEL_742;
    }
LABEL_501:
    memcpy((void *)(a1 + 1680), (const void *)(a2 + 1680), 0x340uLL);
    goto LABEL_742;
  }
  if (v559 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 1680));
    goto LABEL_501;
  }
  v562 = *(_QWORD *)v557;
  v563 = *v558;
  if (*(_QWORD *)v557 == 1)
  {
    if (v563 == 1)
    {
      v564 = *(_OWORD *)v558;
      *(_OWORD *)(a1 + 1689) = *(_OWORD *)(a2 + 1689);
      *v557 = v564;
    }
    else
    {
      *(_QWORD *)(a1 + 1680) = v563;
      *(_BYTE *)(a1 + 1688) = *(_BYTE *)(a2 + 1688);
      v640 = *(_QWORD *)(a2 + 1696);
      *(_BYTE *)(a1 + 1704) = *(_BYTE *)(a2 + 1704);
      *(_QWORD *)(a1 + 1696) = v640;
      swift_bridgeObjectRetain(v563);
    }
  }
  else if (v563 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1680));
    v568 = *(_OWORD *)(a2 + 1689);
    *v557 = *(_OWORD *)v558;
    *(_OWORD *)(a1 + 1689) = v568;
  }
  else
  {
    *(_QWORD *)(a1 + 1680) = v563;
    swift_bridgeObjectRetain(v563);
    swift_bridgeObjectRelease(v562);
    *(_BYTE *)(a1 + 1688) = v4[1408];
    v641 = *(_QWORD *)(a2 + 1696);
    *(_BYTE *)(a1 + 1704) = *(_BYTE *)(a2 + 1704);
    *(_QWORD *)(a1 + 1696) = v641;
  }
  v642 = (__int128 *)(a1 + 1712);
  v643 = (__int128 *)(a2 + 1712);
  v644 = *(_QWORD *)(a1 + 1712);
  v645 = *(_QWORD *)(a2 + 1712);
  if (v644 == 1)
  {
    if (v645 == 1)
    {
      v646 = *v643;
      *(_OWORD *)(a1 + 1721) = *(_OWORD *)(a2 + 1721);
      *v642 = v646;
    }
    else
    {
      *(_QWORD *)(a1 + 1712) = v645;
      *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 1720);
      v648 = *(_QWORD *)(a2 + 1728);
      *(_BYTE *)(a1 + 1736) = *(_BYTE *)(a2 + 1736);
      *(_QWORD *)(a1 + 1728) = v648;
      swift_bridgeObjectRetain(v645);
    }
  }
  else if (v645 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1712));
    v647 = *(_OWORD *)(a2 + 1721);
    *v642 = *v643;
    *(_OWORD *)(a1 + 1721) = v647;
  }
  else
  {
    *(_QWORD *)(a1 + 1712) = v645;
    swift_bridgeObjectRetain(v645);
    swift_bridgeObjectRelease(v644);
    *(_BYTE *)(a1 + 1720) = v4[1440];
    v649 = *(_QWORD *)(a2 + 1728);
    *(_BYTE *)(a1 + 1736) = *(_BYTE *)(a2 + 1736);
    *(_QWORD *)(a1 + 1728) = v649;
  }
  v650 = (__int128 *)(a1 + 1744);
  v651 = (__int128 *)(a2 + 1744);
  v652 = *(_QWORD *)(a1 + 1744);
  v653 = *(_QWORD *)(a2 + 1744);
  if (v652 == 1)
  {
    if (v653 == 1)
    {
      v654 = *v651;
      *(_OWORD *)(a1 + 1753) = *(_OWORD *)(a2 + 1753);
      *v650 = v654;
    }
    else
    {
      *(_QWORD *)(a1 + 1744) = v653;
      *(_BYTE *)(a1 + 1752) = *(_BYTE *)(a2 + 1752);
      v656 = *(_QWORD *)(a2 + 1760);
      *(_BYTE *)(a1 + 1768) = *(_BYTE *)(a2 + 1768);
      *(_QWORD *)(a1 + 1760) = v656;
      swift_bridgeObjectRetain(v653);
    }
  }
  else if (v653 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1744));
    v655 = *(_OWORD *)(a2 + 1753);
    *v650 = *v651;
    *(_OWORD *)(a1 + 1753) = v655;
  }
  else
  {
    *(_QWORD *)(a1 + 1744) = v653;
    swift_bridgeObjectRetain(v653);
    swift_bridgeObjectRelease(v652);
    *(_BYTE *)(a1 + 1752) = v4[1472];
    v657 = *(_QWORD *)(a2 + 1760);
    *(_BYTE *)(a1 + 1768) = *(_BYTE *)(a2 + 1768);
    *(_QWORD *)(a1 + 1760) = v657;
  }
  v658 = (__int128 *)(a1 + 1776);
  v659 = (__int128 *)(a2 + 1776);
  v660 = *(_QWORD *)(a1 + 1776);
  v661 = *(_QWORD *)(a2 + 1776);
  if (v660 == 1)
  {
    if (v661 == 1)
    {
      v662 = *v659;
      *(_OWORD *)(a1 + 1785) = *(_OWORD *)(a2 + 1785);
      *v658 = v662;
    }
    else
    {
      *(_QWORD *)(a1 + 1776) = v661;
      *(_BYTE *)(a1 + 1784) = *(_BYTE *)(a2 + 1784);
      v664 = *(_QWORD *)(a2 + 1792);
      *(_BYTE *)(a1 + 1800) = *(_BYTE *)(a2 + 1800);
      *(_QWORD *)(a1 + 1792) = v664;
      swift_bridgeObjectRetain(v661);
    }
  }
  else if (v661 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1776));
    v663 = *(_OWORD *)(a2 + 1785);
    *v658 = *v659;
    *(_OWORD *)(a1 + 1785) = v663;
  }
  else
  {
    *(_QWORD *)(a1 + 1776) = v661;
    swift_bridgeObjectRetain(v661);
    swift_bridgeObjectRelease(v660);
    *(_BYTE *)(a1 + 1784) = v4[1504];
    v665 = *(_QWORD *)(a2 + 1792);
    *(_BYTE *)(a1 + 1800) = *(_BYTE *)(a2 + 1800);
    *(_QWORD *)(a1 + 1792) = v665;
  }
  v666 = (__int128 *)(a1 + 1808);
  v667 = (__int128 *)(a2 + 1808);
  v668 = *(_QWORD *)(a1 + 1808);
  v669 = *(_QWORD *)(a2 + 1808);
  if (v668 == 1)
  {
    if (v669 == 1)
    {
      v670 = *v667;
      *(_OWORD *)(a1 + 1817) = *(_OWORD *)(a2 + 1817);
      *v666 = v670;
    }
    else
    {
      *(_QWORD *)(a1 + 1808) = v669;
      *(_BYTE *)(a1 + 1816) = *(_BYTE *)(a2 + 1816);
      v672 = *(_QWORD *)(a2 + 1824);
      *(_BYTE *)(a1 + 1832) = *(_BYTE *)(a2 + 1832);
      *(_QWORD *)(a1 + 1824) = v672;
      swift_bridgeObjectRetain(v669);
    }
  }
  else if (v669 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1808));
    v671 = *(_OWORD *)(a2 + 1817);
    *v666 = *v667;
    *(_OWORD *)(a1 + 1817) = v671;
  }
  else
  {
    *(_QWORD *)(a1 + 1808) = v669;
    swift_bridgeObjectRetain(v669);
    swift_bridgeObjectRelease(v668);
    *(_BYTE *)(a1 + 1816) = v4[1536];
    v673 = *(_QWORD *)(a2 + 1824);
    *(_BYTE *)(a1 + 1832) = *(_BYTE *)(a2 + 1832);
    *(_QWORD *)(a1 + 1824) = v673;
  }
  v674 = (__int128 *)(a1 + 1840);
  v675 = (__int128 *)(a2 + 1840);
  v676 = *(_QWORD *)(a1 + 1840);
  v677 = *(_QWORD *)(a2 + 1840);
  if (v676 == 1)
  {
    if (v677 == 1)
    {
      v678 = *v675;
      *(_OWORD *)(a1 + 1849) = *(_OWORD *)(a2 + 1849);
      *v674 = v678;
    }
    else
    {
      *(_QWORD *)(a1 + 1840) = v677;
      *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a2 + 1848);
      v680 = *(_QWORD *)(a2 + 1856);
      *(_BYTE *)(a1 + 1864) = *(_BYTE *)(a2 + 1864);
      *(_QWORD *)(a1 + 1856) = v680;
      swift_bridgeObjectRetain(v677);
    }
  }
  else if (v677 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1840));
    v679 = *(_OWORD *)(a2 + 1849);
    *v674 = *v675;
    *(_OWORD *)(a1 + 1849) = v679;
  }
  else
  {
    *(_QWORD *)(a1 + 1840) = v677;
    swift_bridgeObjectRetain(v677);
    swift_bridgeObjectRelease(v676);
    *(_BYTE *)(a1 + 1848) = v4[1568];
    v681 = *(_QWORD *)(a2 + 1856);
    *(_BYTE *)(a1 + 1864) = *(_BYTE *)(a2 + 1864);
    *(_QWORD *)(a1 + 1856) = v681;
  }
  v682 = (__int128 *)(a1 + 1872);
  v683 = (__int128 *)(a2 + 1872);
  v684 = *(_QWORD *)(a1 + 1872);
  v685 = *(_QWORD *)(a2 + 1872);
  if (v684 == 1)
  {
    if (v685 == 1)
    {
      v686 = *v683;
      *(_OWORD *)(a1 + 1881) = *(_OWORD *)(a2 + 1881);
      *v682 = v686;
    }
    else
    {
      *(_QWORD *)(a1 + 1872) = v685;
      *(_BYTE *)(a1 + 1880) = *(_BYTE *)(a2 + 1880);
      v688 = *(_QWORD *)(a2 + 1888);
      *(_BYTE *)(a1 + 1896) = *(_BYTE *)(a2 + 1896);
      *(_QWORD *)(a1 + 1888) = v688;
      swift_bridgeObjectRetain(v685);
    }
  }
  else if (v685 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1872));
    v687 = *(_OWORD *)(a2 + 1881);
    *v682 = *v683;
    *(_OWORD *)(a1 + 1881) = v687;
  }
  else
  {
    *(_QWORD *)(a1 + 1872) = v685;
    swift_bridgeObjectRetain(v685);
    swift_bridgeObjectRelease(v684);
    *(_BYTE *)(a1 + 1880) = v4[1600];
    v689 = *(_QWORD *)(a2 + 1888);
    *(_BYTE *)(a1 + 1896) = *(_BYTE *)(a2 + 1896);
    *(_QWORD *)(a1 + 1888) = v689;
  }
  v690 = (__int128 *)(a1 + 1904);
  v691 = (__int128 *)(a2 + 1904);
  v692 = *(_QWORD *)(a1 + 1904);
  v693 = *(_QWORD *)(a2 + 1904);
  if (v692 == 1)
  {
    if (v693 == 1)
    {
      v694 = *v691;
      *(_OWORD *)(a1 + 1913) = *(_OWORD *)(a2 + 1913);
      *v690 = v694;
    }
    else
    {
      *(_QWORD *)(a1 + 1904) = v693;
      *(_BYTE *)(a1 + 1912) = *(_BYTE *)(a2 + 1912);
      v696 = *(_QWORD *)(a2 + 1920);
      *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
      *(_QWORD *)(a1 + 1920) = v696;
      swift_bridgeObjectRetain(v693);
    }
  }
  else if (v693 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1904));
    v695 = *(_OWORD *)(a2 + 1913);
    *v690 = *v691;
    *(_OWORD *)(a1 + 1913) = v695;
  }
  else
  {
    *(_QWORD *)(a1 + 1904) = v693;
    swift_bridgeObjectRetain(v693);
    swift_bridgeObjectRelease(v692);
    *(_BYTE *)(a1 + 1912) = v4[1632];
    v697 = *(_QWORD *)(a2 + 1920);
    *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
    *(_QWORD *)(a1 + 1920) = v697;
  }
  v698 = (__int128 *)(a1 + 1936);
  v699 = (__int128 *)(a2 + 1936);
  v700 = *(_QWORD *)(a1 + 1936);
  v701 = *(_QWORD *)(a2 + 1936);
  if (v700 == 1)
  {
    if (v701 == 1)
    {
      v702 = *v699;
      *(_OWORD *)(a1 + 1945) = *(_OWORD *)(a2 + 1945);
      *v698 = v702;
    }
    else
    {
      *(_QWORD *)(a1 + 1936) = v701;
      *(_BYTE *)(a1 + 1944) = *(_BYTE *)(a2 + 1944);
      v704 = *(_QWORD *)(a2 + 1952);
      *(_BYTE *)(a1 + 1960) = *(_BYTE *)(a2 + 1960);
      *(_QWORD *)(a1 + 1952) = v704;
      swift_bridgeObjectRetain(v701);
    }
  }
  else if (v701 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1936));
    v703 = *(_OWORD *)(a2 + 1945);
    *v698 = *v699;
    *(_OWORD *)(a1 + 1945) = v703;
  }
  else
  {
    *(_QWORD *)(a1 + 1936) = v701;
    swift_bridgeObjectRetain(v701);
    swift_bridgeObjectRelease(v700);
    *(_BYTE *)(a1 + 1944) = v4[1664];
    v705 = *(_QWORD *)(a2 + 1952);
    *(_BYTE *)(a1 + 1960) = *(_BYTE *)(a2 + 1960);
    *(_QWORD *)(a1 + 1952) = v705;
  }
  v706 = (__int128 *)(a1 + 1968);
  v707 = (__int128 *)(a2 + 1968);
  v708 = *(_QWORD *)(a1 + 1968);
  v709 = *(_QWORD *)(a2 + 1968);
  if (v708 == 1)
  {
    if (v709 == 1)
    {
      v710 = *v707;
      *(_OWORD *)(a1 + 1977) = *(_OWORD *)(a2 + 1977);
      *v706 = v710;
    }
    else
    {
      *(_QWORD *)(a1 + 1968) = v709;
      *(_BYTE *)(a1 + 1976) = *(_BYTE *)(a2 + 1976);
      v712 = *(_QWORD *)(a2 + 1984);
      *(_BYTE *)(a1 + 1992) = *(_BYTE *)(a2 + 1992);
      *(_QWORD *)(a1 + 1984) = v712;
      swift_bridgeObjectRetain(v709);
    }
  }
  else if (v709 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 1968));
    v711 = *(_OWORD *)(a2 + 1977);
    *v706 = *v707;
    *(_OWORD *)(a1 + 1977) = v711;
  }
  else
  {
    *(_QWORD *)(a1 + 1968) = v709;
    swift_bridgeObjectRetain(v709);
    swift_bridgeObjectRelease(v708);
    *(_BYTE *)(a1 + 1976) = v4[1696];
    v713 = *(_QWORD *)(a2 + 1984);
    *(_BYTE *)(a1 + 1992) = *(_BYTE *)(a2 + 1992);
    *(_QWORD *)(a1 + 1984) = v713;
  }
  v714 = (__int128 *)(a1 + 2000);
  v715 = (__int128 *)(a2 + 2000);
  v716 = *(_QWORD *)(a1 + 2000);
  v717 = *(_QWORD *)(a2 + 2000);
  if (v716 == 1)
  {
    if (v717 == 1)
    {
      v718 = *v715;
      *(_OWORD *)(a1 + 2009) = *(_OWORD *)(a2 + 2009);
      *v714 = v718;
    }
    else
    {
      *(_QWORD *)(a1 + 2000) = v717;
      *(_BYTE *)(a1 + 2008) = *(_BYTE *)(a2 + 2008);
      v720 = *(_QWORD *)(a2 + 2016);
      *(_BYTE *)(a1 + 2024) = *(_BYTE *)(a2 + 2024);
      *(_QWORD *)(a1 + 2016) = v720;
      swift_bridgeObjectRetain(v717);
    }
  }
  else if (v717 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2000));
    v719 = *(_OWORD *)(a2 + 2009);
    *v714 = *v715;
    *(_OWORD *)(a1 + 2009) = v719;
  }
  else
  {
    *(_QWORD *)(a1 + 2000) = v717;
    swift_bridgeObjectRetain(v717);
    swift_bridgeObjectRelease(v716);
    *(_BYTE *)(a1 + 2008) = v4[1728];
    v721 = *(_QWORD *)(a2 + 2016);
    *(_BYTE *)(a1 + 2024) = *(_BYTE *)(a2 + 2024);
    *(_QWORD *)(a1 + 2016) = v721;
  }
  v722 = (__int128 *)(a1 + 2032);
  v723 = (__int128 *)(a2 + 2032);
  v724 = *(_QWORD *)(a1 + 2032);
  v725 = *(_QWORD *)(a2 + 2032);
  if (v724 == 1)
  {
    if (v725 == 1)
    {
      v726 = *v723;
      *(_OWORD *)(a1 + 2041) = *(_OWORD *)(a2 + 2041);
      *v722 = v726;
    }
    else
    {
      *(_QWORD *)(a1 + 2032) = v725;
      *(_BYTE *)(a1 + 2040) = *(_BYTE *)(a2 + 2040);
      v728 = *(_QWORD *)(a2 + 2048);
      *(_BYTE *)(a1 + 2056) = *(_BYTE *)(a2 + 2056);
      *(_QWORD *)(a1 + 2048) = v728;
      swift_bridgeObjectRetain(v725);
    }
  }
  else if (v725 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2032));
    v727 = *(_OWORD *)(a2 + 2041);
    *v722 = *v723;
    *(_OWORD *)(a1 + 2041) = v727;
  }
  else
  {
    *(_QWORD *)(a1 + 2032) = v725;
    swift_bridgeObjectRetain(v725);
    swift_bridgeObjectRelease(v724);
    *(_BYTE *)(a1 + 2040) = v4[1760];
    v729 = *(_QWORD *)(a2 + 2048);
    *(_BYTE *)(a1 + 2056) = *(_BYTE *)(a2 + 2056);
    *(_QWORD *)(a1 + 2048) = v729;
  }
  v730 = (__int128 *)(a1 + 2064);
  v731 = (__int128 *)(a2 + 2064);
  v732 = *(_QWORD *)(a1 + 2064);
  v733 = *(_QWORD *)(a2 + 2064);
  if (v732 == 1)
  {
    if (v733 == 1)
    {
      v734 = *v731;
      *(_OWORD *)(a1 + 2073) = *(_OWORD *)(a2 + 2073);
      *v730 = v734;
    }
    else
    {
      *(_QWORD *)(a1 + 2064) = v733;
      *(_BYTE *)(a1 + 2072) = *(_BYTE *)(a2 + 2072);
      v736 = *(_QWORD *)(a2 + 2080);
      *(_BYTE *)(a1 + 2088) = *(_BYTE *)(a2 + 2088);
      *(_QWORD *)(a1 + 2080) = v736;
      swift_bridgeObjectRetain(v733);
    }
  }
  else if (v733 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2064));
    v735 = *(_OWORD *)(a2 + 2073);
    *v730 = *v731;
    *(_OWORD *)(a1 + 2073) = v735;
  }
  else
  {
    *(_QWORD *)(a1 + 2064) = v733;
    swift_bridgeObjectRetain(v733);
    swift_bridgeObjectRelease(v732);
    *(_BYTE *)(a1 + 2072) = v4[1792];
    v737 = *(_QWORD *)(a2 + 2080);
    *(_BYTE *)(a1 + 2088) = *(_BYTE *)(a2 + 2088);
    *(_QWORD *)(a1 + 2080) = v737;
  }
  v738 = (__int128 *)(a1 + 2096);
  v739 = (__int128 *)(a2 + 2096);
  v740 = *(_QWORD *)(a1 + 2096);
  v741 = *(_QWORD *)(a2 + 2096);
  if (v740 == 1)
  {
    if (v741 == 1)
    {
      v742 = *v739;
      *(_OWORD *)(a1 + 2105) = *(_OWORD *)(a2 + 2105);
      *v738 = v742;
    }
    else
    {
      *(_QWORD *)(a1 + 2096) = v741;
      *(_BYTE *)(a1 + 2104) = *(_BYTE *)(a2 + 2104);
      v744 = *(_QWORD *)(a2 + 2112);
      *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
      *(_QWORD *)(a1 + 2112) = v744;
      swift_bridgeObjectRetain(v741);
    }
  }
  else if (v741 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2096));
    v743 = *(_OWORD *)(a2 + 2105);
    *v738 = *v739;
    *(_OWORD *)(a1 + 2105) = v743;
  }
  else
  {
    *(_QWORD *)(a1 + 2096) = v741;
    swift_bridgeObjectRetain(v741);
    swift_bridgeObjectRelease(v740);
    *(_BYTE *)(a1 + 2104) = v4[1824];
    v745 = *(_QWORD *)(a2 + 2112);
    *(_BYTE *)(a1 + 2120) = *(_BYTE *)(a2 + 2120);
    *(_QWORD *)(a1 + 2112) = v745;
  }
  v746 = (__int128 *)(a1 + 2128);
  v747 = (__int128 *)(a2 + 2128);
  v748 = *(_QWORD *)(a1 + 2128);
  v749 = *(_QWORD *)(a2 + 2128);
  if (v748 == 1)
  {
    if (v749 == 1)
    {
      v750 = *v747;
      *(_OWORD *)(a1 + 2137) = *(_OWORD *)(a2 + 2137);
      *v746 = v750;
    }
    else
    {
      *(_QWORD *)(a1 + 2128) = v749;
      *(_BYTE *)(a1 + 2136) = *(_BYTE *)(a2 + 2136);
      v752 = *(_QWORD *)(a2 + 2144);
      *(_BYTE *)(a1 + 2152) = *(_BYTE *)(a2 + 2152);
      *(_QWORD *)(a1 + 2144) = v752;
      swift_bridgeObjectRetain(v749);
    }
  }
  else if (v749 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2128));
    v751 = *(_OWORD *)(a2 + 2137);
    *v746 = *v747;
    *(_OWORD *)(a1 + 2137) = v751;
  }
  else
  {
    *(_QWORD *)(a1 + 2128) = v749;
    swift_bridgeObjectRetain(v749);
    swift_bridgeObjectRelease(v748);
    *(_BYTE *)(a1 + 2136) = v4[1856];
    v753 = *(_QWORD *)(a2 + 2144);
    *(_BYTE *)(a1 + 2152) = *(_BYTE *)(a2 + 2152);
    *(_QWORD *)(a1 + 2144) = v753;
  }
  v754 = (__int128 *)(a1 + 2160);
  v755 = (__int128 *)(a2 + 2160);
  v756 = *(_QWORD *)(a1 + 2160);
  v757 = *(_QWORD *)(a2 + 2160);
  if (v756 == 1)
  {
    if (v757 == 1)
    {
      v758 = *v755;
      *(_OWORD *)(a1 + 2169) = *(_OWORD *)(a2 + 2169);
      *v754 = v758;
    }
    else
    {
      *(_QWORD *)(a1 + 2160) = v757;
      *(_BYTE *)(a1 + 2168) = *(_BYTE *)(a2 + 2168);
      v760 = *(_QWORD *)(a2 + 2176);
      *(_BYTE *)(a1 + 2184) = *(_BYTE *)(a2 + 2184);
      *(_QWORD *)(a1 + 2176) = v760;
      swift_bridgeObjectRetain(v757);
    }
  }
  else if (v757 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2160));
    v759 = *(_OWORD *)(a2 + 2169);
    *v754 = *v755;
    *(_OWORD *)(a1 + 2169) = v759;
  }
  else
  {
    *(_QWORD *)(a1 + 2160) = v757;
    swift_bridgeObjectRetain(v757);
    swift_bridgeObjectRelease(v756);
    *(_BYTE *)(a1 + 2168) = v4[1888];
    v761 = *(_QWORD *)(a2 + 2176);
    *(_BYTE *)(a1 + 2184) = *(_BYTE *)(a2 + 2184);
    *(_QWORD *)(a1 + 2176) = v761;
  }
  v762 = (__int128 *)(a1 + 2192);
  v763 = (__int128 *)(a2 + 2192);
  v764 = *(_QWORD *)(a1 + 2192);
  v765 = *(_QWORD *)(a2 + 2192);
  if (v764 == 1)
  {
    if (v765 == 1)
    {
      v766 = *v763;
      *(_OWORD *)(a1 + 2201) = *(_OWORD *)(a2 + 2201);
      *v762 = v766;
    }
    else
    {
      *(_QWORD *)(a1 + 2192) = v765;
      *(_BYTE *)(a1 + 2200) = *(_BYTE *)(a2 + 2200);
      v768 = *(_QWORD *)(a2 + 2208);
      *(_BYTE *)(a1 + 2216) = *(_BYTE *)(a2 + 2216);
      *(_QWORD *)(a1 + 2208) = v768;
      swift_bridgeObjectRetain(v765);
    }
  }
  else if (v765 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2192));
    v767 = *(_OWORD *)(a2 + 2201);
    *v762 = *v763;
    *(_OWORD *)(a1 + 2201) = v767;
  }
  else
  {
    *(_QWORD *)(a1 + 2192) = v765;
    swift_bridgeObjectRetain(v765);
    swift_bridgeObjectRelease(v764);
    *(_BYTE *)(a1 + 2200) = v4[1920];
    v769 = *(_QWORD *)(a2 + 2208);
    *(_BYTE *)(a1 + 2216) = *(_BYTE *)(a2 + 2216);
    *(_QWORD *)(a1 + 2208) = v769;
  }
  v770 = (__int128 *)(a1 + 2224);
  v771 = (__int128 *)(a2 + 2224);
  v772 = *(_QWORD *)(a1 + 2224);
  v773 = *(_QWORD *)(a2 + 2224);
  if (v772 == 1)
  {
    if (v773 == 1)
    {
      v774 = *v771;
      *(_OWORD *)(a1 + 2233) = *(_OWORD *)(a2 + 2233);
      *v770 = v774;
    }
    else
    {
      *(_QWORD *)(a1 + 2224) = v773;
      *(_BYTE *)(a1 + 2232) = *(_BYTE *)(a2 + 2232);
      v776 = *(_QWORD *)(a2 + 2240);
      *(_BYTE *)(a1 + 2248) = *(_BYTE *)(a2 + 2248);
      *(_QWORD *)(a1 + 2240) = v776;
      swift_bridgeObjectRetain(v773);
    }
  }
  else if (v773 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2224));
    v775 = *(_OWORD *)(a2 + 2233);
    *v770 = *v771;
    *(_OWORD *)(a1 + 2233) = v775;
  }
  else
  {
    *(_QWORD *)(a1 + 2224) = v773;
    swift_bridgeObjectRetain(v773);
    swift_bridgeObjectRelease(v772);
    *(_BYTE *)(a1 + 2232) = v4[1952];
    v777 = *(_QWORD *)(a2 + 2240);
    *(_BYTE *)(a1 + 2248) = *(_BYTE *)(a2 + 2248);
    *(_QWORD *)(a1 + 2240) = v777;
  }
  v778 = (__int128 *)(a1 + 2256);
  v779 = (__int128 *)(a2 + 2256);
  v780 = *(_QWORD *)(a1 + 2256);
  v781 = *(_QWORD *)(a2 + 2256);
  if (v780 == 1)
  {
    if (v781 == 1)
    {
      v782 = *v779;
      *(_OWORD *)(a1 + 2265) = *(_OWORD *)(a2 + 2265);
      *v778 = v782;
    }
    else
    {
      *(_QWORD *)(a1 + 2256) = v781;
      *(_BYTE *)(a1 + 2264) = *(_BYTE *)(a2 + 2264);
      v784 = *(_QWORD *)(a2 + 2272);
      *(_BYTE *)(a1 + 2280) = *(_BYTE *)(a2 + 2280);
      *(_QWORD *)(a1 + 2272) = v784;
      swift_bridgeObjectRetain(v781);
    }
  }
  else if (v781 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2256));
    v783 = *(_OWORD *)(a2 + 2265);
    *v778 = *v779;
    *(_OWORD *)(a1 + 2265) = v783;
  }
  else
  {
    *(_QWORD *)(a1 + 2256) = v781;
    swift_bridgeObjectRetain(v781);
    swift_bridgeObjectRelease(v780);
    *(_BYTE *)(a1 + 2264) = v4[1984];
    v785 = *(_QWORD *)(a2 + 2272);
    *(_BYTE *)(a1 + 2280) = *(_BYTE *)(a2 + 2280);
    *(_QWORD *)(a1 + 2272) = v785;
  }
  v786 = (__int128 *)(a1 + 2288);
  v787 = (__int128 *)(a2 + 2288);
  v788 = *(_QWORD *)(a1 + 2288);
  v789 = *(_QWORD *)(a2 + 2288);
  if (v788 == 1)
  {
    if (v789 == 1)
    {
      v790 = *v787;
      *(_OWORD *)(a1 + 2297) = *(_OWORD *)(a2 + 2297);
      *v786 = v790;
    }
    else
    {
      *(_QWORD *)(a1 + 2288) = v789;
      *(_BYTE *)(a1 + 2296) = *(_BYTE *)(a2 + 2296);
      v792 = *(_QWORD *)(a2 + 2304);
      *(_BYTE *)(a1 + 2312) = *(_BYTE *)(a2 + 2312);
      *(_QWORD *)(a1 + 2304) = v792;
      swift_bridgeObjectRetain(v789);
    }
  }
  else if (v789 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2288));
    v791 = *(_OWORD *)(a2 + 2297);
    *v786 = *v787;
    *(_OWORD *)(a1 + 2297) = v791;
  }
  else
  {
    *(_QWORD *)(a1 + 2288) = v789;
    swift_bridgeObjectRetain(v789);
    swift_bridgeObjectRelease(v788);
    *(_BYTE *)(a1 + 2296) = v4[2016];
    v793 = *(_QWORD *)(a2 + 2304);
    *(_BYTE *)(a1 + 2312) = *(_BYTE *)(a2 + 2312);
    *(_QWORD *)(a1 + 2304) = v793;
  }
  v794 = (__int128 *)(a1 + 2320);
  v795 = (__int128 *)(a2 + 2320);
  v796 = *(_QWORD *)(a1 + 2320);
  v797 = *(_QWORD *)(a2 + 2320);
  if (v796 == 1)
  {
    if (v797 == 1)
    {
      v798 = *v795;
      *(_OWORD *)(a1 + 2329) = *(_OWORD *)(a2 + 2329);
      *v794 = v798;
    }
    else
    {
      *(_QWORD *)(a1 + 2320) = v797;
      *(_BYTE *)(a1 + 2328) = *(_BYTE *)(a2 + 2328);
      v800 = *(_QWORD *)(a2 + 2336);
      *(_BYTE *)(a1 + 2344) = *(_BYTE *)(a2 + 2344);
      *(_QWORD *)(a1 + 2336) = v800;
      swift_bridgeObjectRetain(v797);
    }
  }
  else if (v797 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2320));
    v799 = *(_OWORD *)(a2 + 2329);
    *v794 = *v795;
    *(_OWORD *)(a1 + 2329) = v799;
  }
  else
  {
    *(_QWORD *)(a1 + 2320) = v797;
    swift_bridgeObjectRetain(v797);
    swift_bridgeObjectRelease(v796);
    *(_BYTE *)(a1 + 2328) = v4[2048];
    v801 = *(_QWORD *)(a2 + 2336);
    *(_BYTE *)(a1 + 2344) = *(_BYTE *)(a2 + 2344);
    *(_QWORD *)(a1 + 2336) = v801;
  }
  v802 = (__int128 *)(a1 + 2352);
  v803 = (__int128 *)(a2 + 2352);
  v804 = *(_QWORD *)(a1 + 2352);
  v805 = *(_QWORD *)(a2 + 2352);
  if (v804 == 1)
  {
    if (v805 == 1)
    {
      v806 = *v803;
      *(_OWORD *)(a1 + 2361) = *(_OWORD *)(a2 + 2361);
      *v802 = v806;
    }
    else
    {
      *(_QWORD *)(a1 + 2352) = v805;
      *(_BYTE *)(a1 + 2360) = *(_BYTE *)(a2 + 2360);
      v808 = *(_QWORD *)(a2 + 2368);
      *(_BYTE *)(a1 + 2376) = *(_BYTE *)(a2 + 2376);
      *(_QWORD *)(a1 + 2368) = v808;
      swift_bridgeObjectRetain(v805);
    }
  }
  else if (v805 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2352));
    v807 = *(_OWORD *)(a2 + 2361);
    *v802 = *v803;
    *(_OWORD *)(a1 + 2361) = v807;
  }
  else
  {
    *(_QWORD *)(a1 + 2352) = v805;
    swift_bridgeObjectRetain(v805);
    swift_bridgeObjectRelease(v804);
    *(_BYTE *)(a1 + 2360) = v4[2080];
    v809 = *(_QWORD *)(a2 + 2368);
    *(_BYTE *)(a1 + 2376) = *(_BYTE *)(a2 + 2376);
    *(_QWORD *)(a1 + 2368) = v809;
  }
  v810 = (__int128 *)(a1 + 2384);
  v811 = (__int128 *)(a2 + 2384);
  v812 = *(_QWORD *)(a1 + 2384);
  v813 = *(_QWORD *)(a2 + 2384);
  if (v812 == 1)
  {
    if (v813 == 1)
    {
      v814 = *v811;
      *(_OWORD *)(a1 + 2393) = *(_OWORD *)(a2 + 2393);
      *v810 = v814;
    }
    else
    {
      *(_QWORD *)(a1 + 2384) = v813;
      *(_BYTE *)(a1 + 2392) = *(_BYTE *)(a2 + 2392);
      v816 = *(_QWORD *)(a2 + 2400);
      *(_BYTE *)(a1 + 2408) = *(_BYTE *)(a2 + 2408);
      *(_QWORD *)(a1 + 2400) = v816;
      swift_bridgeObjectRetain(v813);
    }
  }
  else if (v813 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2384));
    v815 = *(_OWORD *)(a2 + 2393);
    *v810 = *v811;
    *(_OWORD *)(a1 + 2393) = v815;
  }
  else
  {
    *(_QWORD *)(a1 + 2384) = v813;
    swift_bridgeObjectRetain(v813);
    swift_bridgeObjectRelease(v812);
    *(_BYTE *)(a1 + 2392) = v4[2112];
    v817 = *(_QWORD *)(a2 + 2400);
    *(_BYTE *)(a1 + 2408) = *(_BYTE *)(a2 + 2408);
    *(_QWORD *)(a1 + 2400) = v817;
  }
  v818 = (__int128 *)(a1 + 2416);
  v819 = (__int128 *)(a2 + 2416);
  v820 = *(_QWORD *)(a1 + 2416);
  v821 = *(_QWORD *)(a2 + 2416);
  if (v820 == 1)
  {
    if (v821 == 1)
    {
      v822 = *v819;
      *(_OWORD *)(a1 + 2425) = *(_OWORD *)(a2 + 2425);
      *v818 = v822;
    }
    else
    {
      *(_QWORD *)(a1 + 2416) = v821;
      *(_BYTE *)(a1 + 2424) = *(_BYTE *)(a2 + 2424);
      v824 = *(_QWORD *)(a2 + 2432);
      *(_BYTE *)(a1 + 2440) = *(_BYTE *)(a2 + 2440);
      *(_QWORD *)(a1 + 2432) = v824;
      swift_bridgeObjectRetain(v821);
    }
  }
  else if (v821 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2416));
    v823 = *(_OWORD *)(a2 + 2425);
    *v818 = *v819;
    *(_OWORD *)(a1 + 2425) = v823;
  }
  else
  {
    *(_QWORD *)(a1 + 2416) = v821;
    swift_bridgeObjectRetain(v821);
    swift_bridgeObjectRelease(v820);
    *(_BYTE *)(a1 + 2424) = v4[2144];
    v825 = *(_QWORD *)(a2 + 2432);
    *(_BYTE *)(a1 + 2440) = *(_BYTE *)(a2 + 2440);
    *(_QWORD *)(a1 + 2432) = v825;
  }
  v826 = *(_OWORD *)(a2 + 2448);
  *(_BYTE *)(a1 + 2464) = *(_BYTE *)(a2 + 2464);
  *(_OWORD *)(a1 + 2448) = v826;
  v827 = *(_OWORD *)(a2 + 2472);
  *(_BYTE *)(a1 + 2488) = *(_BYTE *)(a2 + 2488);
  *(_OWORD *)(a1 + 2472) = v827;
  *(_BYTE *)(a1 + 2489) = *(_BYTE *)(a2 + 2489);
  *(_BYTE *)(a1 + 2490) = *(_BYTE *)(a2 + 2490);
  *(_BYTE *)(a1 + 2491) = *(_BYTE *)(a2 + 2491);
  *(_BYTE *)(a1 + 2492) = *(_BYTE *)(a2 + 2492);
  *(_BYTE *)(a1 + 2493) = *(_BYTE *)(a2 + 2493);
  *(_BYTE *)(a1 + 2494) = *(_BYTE *)(a2 + 2494);
  *(_BYTE *)(a1 + 2495) = *(_BYTE *)(a2 + 2495);
  v828 = *(_QWORD *)(a1 + 2496);
  v829 = *(_QWORD *)(a2 + 2496);
  *(_QWORD *)(a1 + 2496) = v829;
  swift_bridgeObjectRetain(v829);
  swift_bridgeObjectRelease(v828);
  v830 = *(_QWORD *)(a1 + 2504);
  v831 = *(_QWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2504) = v831;
  swift_bridgeObjectRetain(v831);
  swift_bridgeObjectRelease(v830);
LABEL_742:
  v832 = (_BYTE *)(a1 + 4153);
  v833 = (_OWORD *)(a1 + 2512);
  v834 = (uint64_t *)(a2 + 2512);
  v835 = *(_QWORD *)(a2 + 3328);
  if (*(_QWORD *)(a1 + 3328) == 1)
  {
    if (v835 != 1)
    {
      v836 = *v834;
      if (*v834 == 1)
      {
        v837 = *(_OWORD *)v834;
        *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
        *v833 = v837;
      }
      else
      {
        *(_QWORD *)(a1 + 2512) = v836;
        *(_BYTE *)(a1 + 2520) = *(_BYTE *)(a2 + 2520);
        v841 = *(_QWORD *)(a2 + 2528);
        *(_BYTE *)(a1 + 2536) = *(_BYTE *)(a2 + 2536);
        *(_QWORD *)(a1 + 2528) = v841;
        swift_bridgeObjectRetain(v836);
      }
      v842 = *(_QWORD *)(a2 + 2544);
      if (v842 == 1)
      {
        v843 = *(_OWORD *)(a2 + 2544);
        *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
        *(_OWORD *)(a1 + 2544) = v843;
      }
      else
      {
        *(_QWORD *)(a1 + 2544) = v842;
        *(_BYTE *)(a1 + 2552) = *(_BYTE *)(a2 + 2552);
        v845 = *(_QWORD *)(a2 + 2560);
        *(_BYTE *)(a1 + 2568) = *(_BYTE *)(a2 + 2568);
        *(_QWORD *)(a1 + 2560) = v845;
        swift_bridgeObjectRetain(v842);
      }
      v846 = *(_QWORD *)(a2 + 2576);
      if (v846 == 1)
      {
        v847 = *(_OWORD *)(a2 + 2576);
        *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
        *(_OWORD *)(a1 + 2576) = v847;
      }
      else
      {
        *(_QWORD *)(a1 + 2576) = v846;
        *(_BYTE *)(a1 + 2584) = *(_BYTE *)(a2 + 2584);
        v848 = *(_QWORD *)(a2 + 2592);
        *(_BYTE *)(a1 + 2600) = *(_BYTE *)(a2 + 2600);
        *(_QWORD *)(a1 + 2592) = v848;
        swift_bridgeObjectRetain(v846);
      }
      v849 = *(_QWORD *)(a2 + 2608);
      if (v849 == 1)
      {
        v850 = *(_OWORD *)(a2 + 2608);
        *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
        *(_OWORD *)(a1 + 2608) = v850;
      }
      else
      {
        *(_QWORD *)(a1 + 2608) = v849;
        *(_BYTE *)(a1 + 2616) = *(_BYTE *)(a2 + 2616);
        v851 = *(_QWORD *)(a2 + 2624);
        *(_BYTE *)(a1 + 2632) = *(_BYTE *)(a2 + 2632);
        *(_QWORD *)(a1 + 2624) = v851;
        swift_bridgeObjectRetain(v849);
      }
      v852 = *(_QWORD *)(a2 + 2640);
      if (v852 == 1)
      {
        v853 = *(_OWORD *)(a2 + 2640);
        *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
        *(_OWORD *)(a1 + 2640) = v853;
      }
      else
      {
        *(_QWORD *)(a1 + 2640) = v852;
        *(_BYTE *)(a1 + 2648) = *(_BYTE *)(a2 + 2648);
        v854 = *(_QWORD *)(a2 + 2656);
        *(_BYTE *)(a1 + 2664) = *(_BYTE *)(a2 + 2664);
        *(_QWORD *)(a1 + 2656) = v854;
        swift_bridgeObjectRetain(v852);
      }
      v855 = *(_QWORD *)(a2 + 2672);
      if (v855 == 1)
      {
        v856 = *(_OWORD *)(a2 + 2672);
        *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
        *(_OWORD *)(a1 + 2672) = v856;
      }
      else
      {
        *(_QWORD *)(a1 + 2672) = v855;
        *(_BYTE *)(a1 + 2680) = *(_BYTE *)(a2 + 2680);
        v857 = *(_QWORD *)(a2 + 2688);
        *(_BYTE *)(a1 + 2696) = *(_BYTE *)(a2 + 2696);
        *(_QWORD *)(a1 + 2688) = v857;
        swift_bridgeObjectRetain(v855);
      }
      v858 = *(_QWORD *)(a2 + 2704);
      if (v858 == 1)
      {
        v859 = *(_OWORD *)(a2 + 2704);
        *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
        *(_OWORD *)(a1 + 2704) = v859;
      }
      else
      {
        *(_QWORD *)(a1 + 2704) = v858;
        *(_BYTE *)(a1 + 2712) = *(_BYTE *)(a2 + 2712);
        v860 = *(_QWORD *)(a2 + 2720);
        *(_BYTE *)(a1 + 2728) = *(_BYTE *)(a2 + 2728);
        *(_QWORD *)(a1 + 2720) = v860;
        swift_bridgeObjectRetain(v858);
      }
      v861 = *(_QWORD *)(a2 + 2736);
      if (v861 == 1)
      {
        v862 = *(_OWORD *)(a2 + 2736);
        *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
        *(_OWORD *)(a1 + 2736) = v862;
      }
      else
      {
        *(_QWORD *)(a1 + 2736) = v861;
        *(_BYTE *)(a1 + 2744) = *(_BYTE *)(a2 + 2744);
        v863 = *(_QWORD *)(a2 + 2752);
        *(_BYTE *)(a1 + 2760) = *(_BYTE *)(a2 + 2760);
        *(_QWORD *)(a1 + 2752) = v863;
        swift_bridgeObjectRetain(v861);
      }
      v864 = *(_QWORD *)(a2 + 2768);
      if (v864 == 1)
      {
        v865 = *(_OWORD *)(a2 + 2768);
        *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
        *(_OWORD *)(a1 + 2768) = v865;
      }
      else
      {
        *(_QWORD *)(a1 + 2768) = v864;
        *(_BYTE *)(a1 + 2776) = *(_BYTE *)(a2 + 2776);
        v866 = *(_QWORD *)(a2 + 2784);
        *(_BYTE *)(a1 + 2792) = *(_BYTE *)(a2 + 2792);
        *(_QWORD *)(a1 + 2784) = v866;
        swift_bridgeObjectRetain(v864);
      }
      v867 = *(_QWORD *)(a2 + 2800);
      if (v867 == 1)
      {
        v868 = *(_OWORD *)(a2 + 2800);
        *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
        *(_OWORD *)(a1 + 2800) = v868;
      }
      else
      {
        *(_QWORD *)(a1 + 2800) = v867;
        *(_BYTE *)(a1 + 2808) = *(_BYTE *)(a2 + 2808);
        v869 = *(_QWORD *)(a2 + 2816);
        *(_BYTE *)(a1 + 2824) = *(_BYTE *)(a2 + 2824);
        *(_QWORD *)(a1 + 2816) = v869;
        swift_bridgeObjectRetain(v867);
      }
      v870 = *(_QWORD *)(a2 + 2832);
      if (v870 == 1)
      {
        v871 = *(_OWORD *)(a2 + 2832);
        *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
        *(_OWORD *)(a1 + 2832) = v871;
      }
      else
      {
        *(_QWORD *)(a1 + 2832) = v870;
        *(_BYTE *)(a1 + 2840) = *(_BYTE *)(a2 + 2840);
        v872 = *(_QWORD *)(a2 + 2848);
        *(_BYTE *)(a1 + 2856) = *(_BYTE *)(a2 + 2856);
        *(_QWORD *)(a1 + 2848) = v872;
        swift_bridgeObjectRetain(v870);
      }
      v873 = *(_QWORD *)(a2 + 2864);
      if (v873 == 1)
      {
        v874 = *(_OWORD *)(a2 + 2864);
        *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
        *(_OWORD *)(a1 + 2864) = v874;
      }
      else
      {
        *(_QWORD *)(a1 + 2864) = v873;
        *(_BYTE *)(a1 + 2872) = *(_BYTE *)(a2 + 2872);
        v875 = *(_QWORD *)(a2 + 2880);
        *(_BYTE *)(a1 + 2888) = *(_BYTE *)(a2 + 2888);
        *(_QWORD *)(a1 + 2880) = v875;
        swift_bridgeObjectRetain(v873);
      }
      v876 = *(_QWORD *)(a2 + 2896);
      if (v876 == 1)
      {
        v877 = *(_OWORD *)(a2 + 2896);
        *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
        *(_OWORD *)(a1 + 2896) = v877;
      }
      else
      {
        *(_QWORD *)(a1 + 2896) = v876;
        *(_BYTE *)(a1 + 2904) = *(_BYTE *)(a2 + 2904);
        v878 = *(_QWORD *)(a2 + 2912);
        *(_BYTE *)(a1 + 2920) = *(_BYTE *)(a2 + 2920);
        *(_QWORD *)(a1 + 2912) = v878;
        swift_bridgeObjectRetain(v876);
      }
      v879 = *(_QWORD *)(a2 + 2928);
      if (v879 == 1)
      {
        v880 = *(_OWORD *)(a2 + 2928);
        *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
        *(_OWORD *)(a1 + 2928) = v880;
      }
      else
      {
        *(_QWORD *)(a1 + 2928) = v879;
        *(_BYTE *)(a1 + 2936) = *(_BYTE *)(a2 + 2936);
        v881 = *(_QWORD *)(a2 + 2944);
        *(_BYTE *)(a1 + 2952) = *(_BYTE *)(a2 + 2952);
        *(_QWORD *)(a1 + 2944) = v881;
        swift_bridgeObjectRetain(v879);
      }
      v882 = *(_QWORD *)(a2 + 2960);
      if (v882 == 1)
      {
        v883 = *(_OWORD *)(a2 + 2960);
        *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
        *(_OWORD *)(a1 + 2960) = v883;
      }
      else
      {
        *(_QWORD *)(a1 + 2960) = v882;
        *(_BYTE *)(a1 + 2968) = *(_BYTE *)(a2 + 2968);
        v884 = *(_QWORD *)(a2 + 2976);
        *(_BYTE *)(a1 + 2984) = *(_BYTE *)(a2 + 2984);
        *(_QWORD *)(a1 + 2976) = v884;
        swift_bridgeObjectRetain(v882);
      }
      v885 = *(_QWORD *)(a2 + 2992);
      if (v885 == 1)
      {
        v886 = *(_OWORD *)(a2 + 2992);
        *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
        *(_OWORD *)(a1 + 2992) = v886;
      }
      else
      {
        *(_QWORD *)(a1 + 2992) = v885;
        *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
        v887 = *(_QWORD *)(a2 + 3008);
        *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
        *(_QWORD *)(a1 + 3008) = v887;
        swift_bridgeObjectRetain(v885);
      }
      v888 = *(_QWORD *)(a2 + 3024);
      if (v888 == 1)
      {
        v889 = *(_OWORD *)(a2 + 3024);
        *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
        *(_OWORD *)(a1 + 3024) = v889;
      }
      else
      {
        *(_QWORD *)(a1 + 3024) = v888;
        *(_BYTE *)(a1 + 3032) = *(_BYTE *)(a2 + 3032);
        v890 = *(_QWORD *)(a2 + 3040);
        *(_BYTE *)(a1 + 3048) = *(_BYTE *)(a2 + 3048);
        *(_QWORD *)(a1 + 3040) = v890;
        swift_bridgeObjectRetain(v888);
      }
      v891 = *(_QWORD *)(a2 + 3056);
      if (v891 == 1)
      {
        v892 = *(_OWORD *)(a2 + 3056);
        *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
        *(_OWORD *)(a1 + 3056) = v892;
      }
      else
      {
        *(_QWORD *)(a1 + 3056) = v891;
        *(_BYTE *)(a1 + 3064) = *(_BYTE *)(a2 + 3064);
        v893 = *(_QWORD *)(a2 + 3072);
        *(_BYTE *)(a1 + 3080) = *(_BYTE *)(a2 + 3080);
        *(_QWORD *)(a1 + 3072) = v893;
        swift_bridgeObjectRetain(v891);
      }
      v894 = *(_QWORD *)(a2 + 3088);
      if (v894 == 1)
      {
        v895 = *(_OWORD *)(a2 + 3088);
        *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
        *(_OWORD *)(a1 + 3088) = v895;
      }
      else
      {
        *(_QWORD *)(a1 + 3088) = v894;
        *(_BYTE *)(a1 + 3096) = *(_BYTE *)(a2 + 3096);
        v896 = *(_QWORD *)(a2 + 3104);
        *(_BYTE *)(a1 + 3112) = *(_BYTE *)(a2 + 3112);
        *(_QWORD *)(a1 + 3104) = v896;
        swift_bridgeObjectRetain(v894);
      }
      v897 = *(_QWORD *)(a2 + 3120);
      if (v897 == 1)
      {
        v898 = *(_OWORD *)(a2 + 3120);
        *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
        *(_OWORD *)(a1 + 3120) = v898;
      }
      else
      {
        *(_QWORD *)(a1 + 3120) = v897;
        *(_BYTE *)(a1 + 3128) = *(_BYTE *)(a2 + 3128);
        v899 = *(_QWORD *)(a2 + 3136);
        *(_BYTE *)(a1 + 3144) = *(_BYTE *)(a2 + 3144);
        *(_QWORD *)(a1 + 3136) = v899;
        swift_bridgeObjectRetain(v897);
      }
      v900 = *(_QWORD *)(a2 + 3152);
      if (v900 == 1)
      {
        v901 = *(_OWORD *)(a2 + 3152);
        *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
        *(_OWORD *)(a1 + 3152) = v901;
      }
      else
      {
        *(_QWORD *)(a1 + 3152) = v900;
        *(_BYTE *)(a1 + 3160) = *(_BYTE *)(a2 + 3160);
        v902 = *(_QWORD *)(a2 + 3168);
        *(_BYTE *)(a1 + 3176) = *(_BYTE *)(a2 + 3176);
        *(_QWORD *)(a1 + 3168) = v902;
        swift_bridgeObjectRetain(v900);
      }
      v903 = *(_QWORD *)(a2 + 3184);
      if (v903 == 1)
      {
        v904 = *(_OWORD *)(a2 + 3184);
        *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
        *(_OWORD *)(a1 + 3184) = v904;
      }
      else
      {
        *(_QWORD *)(a1 + 3184) = v903;
        *(_BYTE *)(a1 + 3192) = *(_BYTE *)(a2 + 3192);
        v905 = *(_QWORD *)(a2 + 3200);
        *(_BYTE *)(a1 + 3208) = *(_BYTE *)(a2 + 3208);
        *(_QWORD *)(a1 + 3200) = v905;
        swift_bridgeObjectRetain(v903);
      }
      v906 = *(_QWORD *)(a2 + 3216);
      if (v906 == 1)
      {
        v907 = *(_OWORD *)(a2 + 3216);
        *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
        *(_OWORD *)(a1 + 3216) = v907;
      }
      else
      {
        *(_QWORD *)(a1 + 3216) = v906;
        *(_BYTE *)(a1 + 3224) = *(_BYTE *)(a2 + 3224);
        v908 = *(_QWORD *)(a2 + 3232);
        *(_BYTE *)(a1 + 3240) = *(_BYTE *)(a2 + 3240);
        *(_QWORD *)(a1 + 3232) = v908;
        swift_bridgeObjectRetain(v906);
      }
      v909 = *(_QWORD *)(a2 + 3248);
      if (v909 == 1)
      {
        v910 = *(_OWORD *)(a2 + 3248);
        *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
        *(_OWORD *)(a1 + 3248) = v910;
      }
      else
      {
        *(_QWORD *)(a1 + 3248) = v909;
        *(_BYTE *)(a1 + 3256) = *(_BYTE *)(a2 + 3256);
        v911 = *(_QWORD *)(a2 + 3264);
        *(_BYTE *)(a1 + 3272) = *(_BYTE *)(a2 + 3272);
        *(_QWORD *)(a1 + 3264) = v911;
        swift_bridgeObjectRetain(v909);
      }
      v912 = *(_OWORD *)(a2 + 3280);
      *(_BYTE *)(a1 + 3296) = *(_BYTE *)(a2 + 3296);
      *(_OWORD *)(a1 + 3280) = v912;
      v913 = *(_OWORD *)(a2 + 3304);
      *(_BYTE *)(a1 + 3320) = *(_BYTE *)(a2 + 3320);
      *(_OWORD *)(a1 + 3304) = v913;
      *(_BYTE *)(a1 + 3321) = *(_BYTE *)(a2 + 3321);
      *(_BYTE *)(a1 + 3322) = *(_BYTE *)(a2 + 3322);
      *(_BYTE *)(a1 + 3323) = *(_BYTE *)(a2 + 3323);
      *(_BYTE *)(a1 + 3324) = *(_BYTE *)(a2 + 3324);
      *(_BYTE *)(a1 + 3325) = *(_BYTE *)(a2 + 3325);
      *(_BYTE *)(a1 + 3326) = *(_BYTE *)(a2 + 3326);
      *(_BYTE *)(a1 + 3327) = *(_BYTE *)(a2 + 3327);
      v914 = *(_QWORD *)(a2 + 3328);
      *(_QWORD *)(a1 + 3328) = v914;
      v915 = *(_QWORD *)(a2 + 3336);
      *(_QWORD *)(a1 + 3336) = v915;
      swift_bridgeObjectRetain(v914);
      swift_bridgeObjectRetain(v915);
      goto LABEL_989;
    }
LABEL_748:
    memcpy((void *)(a1 + 2512), (const void *)(a2 + 2512), 0x340uLL);
    goto LABEL_989;
  }
  if (v835 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 2512));
    goto LABEL_748;
  }
  v838 = *(_QWORD *)v833;
  v839 = *v834;
  if (*(_QWORD *)v833 == 1)
  {
    if (v839 == 1)
    {
      v840 = *(_OWORD *)v834;
      *(_OWORD *)(a1 + 2521) = *(_OWORD *)(a2 + 2521);
      *v833 = v840;
    }
    else
    {
      *(_QWORD *)(a1 + 2512) = v839;
      *(_BYTE *)(a1 + 2520) = *(_BYTE *)(a2 + 2520);
      v916 = *(_QWORD *)(a2 + 2528);
      *(_BYTE *)(a1 + 2536) = *(_BYTE *)(a2 + 2536);
      *(_QWORD *)(a1 + 2528) = v916;
      swift_bridgeObjectRetain(v839);
    }
  }
  else if (v839 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2512));
    v844 = *(_OWORD *)(a2 + 2521);
    *v833 = *(_OWORD *)v834;
    *(_OWORD *)(a1 + 2521) = v844;
  }
  else
  {
    *(_QWORD *)(a1 + 2512) = v839;
    swift_bridgeObjectRetain(v839);
    swift_bridgeObjectRelease(v838);
    *(_BYTE *)(a1 + 2520) = v4[2240];
    v917 = *(_QWORD *)(a2 + 2528);
    *(_BYTE *)(a1 + 2536) = *(_BYTE *)(a2 + 2536);
    *(_QWORD *)(a1 + 2528) = v917;
  }
  v918 = (__int128 *)(a1 + 2544);
  v919 = (__int128 *)(a2 + 2544);
  v920 = *(_QWORD *)(a1 + 2544);
  v921 = *(_QWORD *)(a2 + 2544);
  if (v920 == 1)
  {
    if (v921 == 1)
    {
      v922 = *v919;
      *(_OWORD *)(a1 + 2553) = *(_OWORD *)(a2 + 2553);
      *v918 = v922;
    }
    else
    {
      *(_QWORD *)(a1 + 2544) = v921;
      *(_BYTE *)(a1 + 2552) = *(_BYTE *)(a2 + 2552);
      v924 = *(_QWORD *)(a2 + 2560);
      *(_BYTE *)(a1 + 2568) = *(_BYTE *)(a2 + 2568);
      *(_QWORD *)(a1 + 2560) = v924;
      swift_bridgeObjectRetain(v921);
    }
  }
  else if (v921 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2544));
    v923 = *(_OWORD *)(a2 + 2553);
    *v918 = *v919;
    *(_OWORD *)(a1 + 2553) = v923;
  }
  else
  {
    *(_QWORD *)(a1 + 2544) = v921;
    swift_bridgeObjectRetain(v921);
    swift_bridgeObjectRelease(v920);
    *(_BYTE *)(a1 + 2552) = v4[2272];
    v925 = *(_QWORD *)(a2 + 2560);
    *(_BYTE *)(a1 + 2568) = *(_BYTE *)(a2 + 2568);
    *(_QWORD *)(a1 + 2560) = v925;
  }
  v926 = (__int128 *)(a1 + 2576);
  v927 = (__int128 *)(a2 + 2576);
  v928 = *(_QWORD *)(a1 + 2576);
  v929 = *(_QWORD *)(a2 + 2576);
  if (v928 == 1)
  {
    if (v929 == 1)
    {
      v930 = *v927;
      *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a2 + 2585);
      *v926 = v930;
    }
    else
    {
      *(_QWORD *)(a1 + 2576) = v929;
      *(_BYTE *)(a1 + 2584) = *(_BYTE *)(a2 + 2584);
      v932 = *(_QWORD *)(a2 + 2592);
      *(_BYTE *)(a1 + 2600) = *(_BYTE *)(a2 + 2600);
      *(_QWORD *)(a1 + 2592) = v932;
      swift_bridgeObjectRetain(v929);
    }
  }
  else if (v929 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2576));
    v931 = *(_OWORD *)(a2 + 2585);
    *v926 = *v927;
    *(_OWORD *)(a1 + 2585) = v931;
  }
  else
  {
    *(_QWORD *)(a1 + 2576) = v929;
    swift_bridgeObjectRetain(v929);
    swift_bridgeObjectRelease(v928);
    *(_BYTE *)(a1 + 2584) = v4[2304];
    v933 = *(_QWORD *)(a2 + 2592);
    *(_BYTE *)(a1 + 2600) = *(_BYTE *)(a2 + 2600);
    *(_QWORD *)(a1 + 2592) = v933;
  }
  v934 = (__int128 *)(a1 + 2608);
  v935 = (__int128 *)(a2 + 2608);
  v936 = *(_QWORD *)(a1 + 2608);
  v937 = *(_QWORD *)(a2 + 2608);
  if (v936 == 1)
  {
    if (v937 == 1)
    {
      v938 = *v935;
      *(_OWORD *)(a1 + 2617) = *(_OWORD *)(a2 + 2617);
      *v934 = v938;
    }
    else
    {
      *(_QWORD *)(a1 + 2608) = v937;
      *(_BYTE *)(a1 + 2616) = *(_BYTE *)(a2 + 2616);
      v940 = *(_QWORD *)(a2 + 2624);
      *(_BYTE *)(a1 + 2632) = *(_BYTE *)(a2 + 2632);
      *(_QWORD *)(a1 + 2624) = v940;
      swift_bridgeObjectRetain(v937);
    }
  }
  else if (v937 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2608));
    v939 = *(_OWORD *)(a2 + 2617);
    *v934 = *v935;
    *(_OWORD *)(a1 + 2617) = v939;
  }
  else
  {
    *(_QWORD *)(a1 + 2608) = v937;
    swift_bridgeObjectRetain(v937);
    swift_bridgeObjectRelease(v936);
    *(_BYTE *)(a1 + 2616) = v4[2336];
    v941 = *(_QWORD *)(a2 + 2624);
    *(_BYTE *)(a1 + 2632) = *(_BYTE *)(a2 + 2632);
    *(_QWORD *)(a1 + 2624) = v941;
  }
  v942 = (__int128 *)(a1 + 2640);
  v943 = (__int128 *)(a2 + 2640);
  v944 = *(_QWORD *)(a1 + 2640);
  v945 = *(_QWORD *)(a2 + 2640);
  if (v944 == 1)
  {
    if (v945 == 1)
    {
      v946 = *v943;
      *(_OWORD *)(a1 + 2649) = *(_OWORD *)(a2 + 2649);
      *v942 = v946;
    }
    else
    {
      *(_QWORD *)(a1 + 2640) = v945;
      *(_BYTE *)(a1 + 2648) = *(_BYTE *)(a2 + 2648);
      v948 = *(_QWORD *)(a2 + 2656);
      *(_BYTE *)(a1 + 2664) = *(_BYTE *)(a2 + 2664);
      *(_QWORD *)(a1 + 2656) = v948;
      swift_bridgeObjectRetain(v945);
    }
  }
  else if (v945 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2640));
    v947 = *(_OWORD *)(a2 + 2649);
    *v942 = *v943;
    *(_OWORD *)(a1 + 2649) = v947;
  }
  else
  {
    *(_QWORD *)(a1 + 2640) = v945;
    swift_bridgeObjectRetain(v945);
    swift_bridgeObjectRelease(v944);
    *(_BYTE *)(a1 + 2648) = v4[2368];
    v949 = *(_QWORD *)(a2 + 2656);
    *(_BYTE *)(a1 + 2664) = *(_BYTE *)(a2 + 2664);
    *(_QWORD *)(a1 + 2656) = v949;
  }
  v950 = (__int128 *)(a1 + 2672);
  v951 = (__int128 *)(a2 + 2672);
  v952 = *(_QWORD *)(a1 + 2672);
  v953 = *(_QWORD *)(a2 + 2672);
  if (v952 == 1)
  {
    if (v953 == 1)
    {
      v954 = *v951;
      *(_OWORD *)(a1 + 2681) = *(_OWORD *)(a2 + 2681);
      *v950 = v954;
    }
    else
    {
      *(_QWORD *)(a1 + 2672) = v953;
      *(_BYTE *)(a1 + 2680) = *(_BYTE *)(a2 + 2680);
      v956 = *(_QWORD *)(a2 + 2688);
      *(_BYTE *)(a1 + 2696) = *(_BYTE *)(a2 + 2696);
      *(_QWORD *)(a1 + 2688) = v956;
      swift_bridgeObjectRetain(v953);
    }
  }
  else if (v953 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2672));
    v955 = *(_OWORD *)(a2 + 2681);
    *v950 = *v951;
    *(_OWORD *)(a1 + 2681) = v955;
  }
  else
  {
    *(_QWORD *)(a1 + 2672) = v953;
    swift_bridgeObjectRetain(v953);
    swift_bridgeObjectRelease(v952);
    *(_BYTE *)(a1 + 2680) = v4[2400];
    v957 = *(_QWORD *)(a2 + 2688);
    *(_BYTE *)(a1 + 2696) = *(_BYTE *)(a2 + 2696);
    *(_QWORD *)(a1 + 2688) = v957;
  }
  v958 = (__int128 *)(a1 + 2704);
  v959 = (__int128 *)(a2 + 2704);
  v960 = *(_QWORD *)(a1 + 2704);
  v961 = *(_QWORD *)(a2 + 2704);
  if (v960 == 1)
  {
    if (v961 == 1)
    {
      v962 = *v959;
      *(_OWORD *)(a1 + 2713) = *(_OWORD *)(a2 + 2713);
      *v958 = v962;
    }
    else
    {
      *(_QWORD *)(a1 + 2704) = v961;
      *(_BYTE *)(a1 + 2712) = *(_BYTE *)(a2 + 2712);
      v964 = *(_QWORD *)(a2 + 2720);
      *(_BYTE *)(a1 + 2728) = *(_BYTE *)(a2 + 2728);
      *(_QWORD *)(a1 + 2720) = v964;
      swift_bridgeObjectRetain(v961);
    }
  }
  else if (v961 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2704));
    v963 = *(_OWORD *)(a2 + 2713);
    *v958 = *v959;
    *(_OWORD *)(a1 + 2713) = v963;
  }
  else
  {
    *(_QWORD *)(a1 + 2704) = v961;
    swift_bridgeObjectRetain(v961);
    swift_bridgeObjectRelease(v960);
    *(_BYTE *)(a1 + 2712) = v4[2432];
    v965 = *(_QWORD *)(a2 + 2720);
    *(_BYTE *)(a1 + 2728) = *(_BYTE *)(a2 + 2728);
    *(_QWORD *)(a1 + 2720) = v965;
  }
  v966 = (__int128 *)(a1 + 2736);
  v967 = (__int128 *)(a2 + 2736);
  v968 = *(_QWORD *)(a1 + 2736);
  v969 = *(_QWORD *)(a2 + 2736);
  if (v968 == 1)
  {
    if (v969 == 1)
    {
      v970 = *v967;
      *(_OWORD *)(a1 + 2745) = *(_OWORD *)(a2 + 2745);
      *v966 = v970;
    }
    else
    {
      *(_QWORD *)(a1 + 2736) = v969;
      *(_BYTE *)(a1 + 2744) = *(_BYTE *)(a2 + 2744);
      v972 = *(_QWORD *)(a2 + 2752);
      *(_BYTE *)(a1 + 2760) = *(_BYTE *)(a2 + 2760);
      *(_QWORD *)(a1 + 2752) = v972;
      swift_bridgeObjectRetain(v969);
    }
  }
  else if (v969 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2736));
    v971 = *(_OWORD *)(a2 + 2745);
    *v966 = *v967;
    *(_OWORD *)(a1 + 2745) = v971;
  }
  else
  {
    *(_QWORD *)(a1 + 2736) = v969;
    swift_bridgeObjectRetain(v969);
    swift_bridgeObjectRelease(v968);
    *(_BYTE *)(a1 + 2744) = v4[2464];
    v973 = *(_QWORD *)(a2 + 2752);
    *(_BYTE *)(a1 + 2760) = *(_BYTE *)(a2 + 2760);
    *(_QWORD *)(a1 + 2752) = v973;
  }
  v974 = (__int128 *)(a1 + 2768);
  v975 = (__int128 *)(a2 + 2768);
  v976 = *(_QWORD *)(a1 + 2768);
  v977 = *(_QWORD *)(a2 + 2768);
  if (v976 == 1)
  {
    if (v977 == 1)
    {
      v978 = *v975;
      *(_OWORD *)(a1 + 2777) = *(_OWORD *)(a2 + 2777);
      *v974 = v978;
    }
    else
    {
      *(_QWORD *)(a1 + 2768) = v977;
      *(_BYTE *)(a1 + 2776) = *(_BYTE *)(a2 + 2776);
      v980 = *(_QWORD *)(a2 + 2784);
      *(_BYTE *)(a1 + 2792) = *(_BYTE *)(a2 + 2792);
      *(_QWORD *)(a1 + 2784) = v980;
      swift_bridgeObjectRetain(v977);
    }
  }
  else if (v977 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2768));
    v979 = *(_OWORD *)(a2 + 2777);
    *v974 = *v975;
    *(_OWORD *)(a1 + 2777) = v979;
  }
  else
  {
    *(_QWORD *)(a1 + 2768) = v977;
    swift_bridgeObjectRetain(v977);
    swift_bridgeObjectRelease(v976);
    *(_BYTE *)(a1 + 2776) = v4[2496];
    v981 = *(_QWORD *)(a2 + 2784);
    *(_BYTE *)(a1 + 2792) = *(_BYTE *)(a2 + 2792);
    *(_QWORD *)(a1 + 2784) = v981;
  }
  v982 = (__int128 *)(a1 + 2800);
  v983 = (__int128 *)(a2 + 2800);
  v984 = *(_QWORD *)(a1 + 2800);
  v985 = *(_QWORD *)(a2 + 2800);
  if (v984 == 1)
  {
    if (v985 == 1)
    {
      v986 = *v983;
      *(_OWORD *)(a1 + 2809) = *(_OWORD *)(a2 + 2809);
      *v982 = v986;
    }
    else
    {
      *(_QWORD *)(a1 + 2800) = v985;
      *(_BYTE *)(a1 + 2808) = *(_BYTE *)(a2 + 2808);
      v988 = *(_QWORD *)(a2 + 2816);
      *(_BYTE *)(a1 + 2824) = *(_BYTE *)(a2 + 2824);
      *(_QWORD *)(a1 + 2816) = v988;
      swift_bridgeObjectRetain(v985);
    }
  }
  else if (v985 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2800));
    v987 = *(_OWORD *)(a2 + 2809);
    *v982 = *v983;
    *(_OWORD *)(a1 + 2809) = v987;
  }
  else
  {
    *(_QWORD *)(a1 + 2800) = v985;
    swift_bridgeObjectRetain(v985);
    swift_bridgeObjectRelease(v984);
    *(_BYTE *)(a1 + 2808) = v4[2528];
    v989 = *(_QWORD *)(a2 + 2816);
    *(_BYTE *)(a1 + 2824) = *(_BYTE *)(a2 + 2824);
    *(_QWORD *)(a1 + 2816) = v989;
  }
  v990 = (__int128 *)(a1 + 2832);
  v991 = (__int128 *)(a2 + 2832);
  v992 = *(_QWORD *)(a1 + 2832);
  v993 = *(_QWORD *)(a2 + 2832);
  if (v992 == 1)
  {
    if (v993 == 1)
    {
      v994 = *v991;
      *(_OWORD *)(a1 + 2841) = *(_OWORD *)(a2 + 2841);
      *v990 = v994;
    }
    else
    {
      *(_QWORD *)(a1 + 2832) = v993;
      *(_BYTE *)(a1 + 2840) = *(_BYTE *)(a2 + 2840);
      v996 = *(_QWORD *)(a2 + 2848);
      *(_BYTE *)(a1 + 2856) = *(_BYTE *)(a2 + 2856);
      *(_QWORD *)(a1 + 2848) = v996;
      swift_bridgeObjectRetain(v993);
    }
  }
  else if (v993 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2832));
    v995 = *(_OWORD *)(a2 + 2841);
    *v990 = *v991;
    *(_OWORD *)(a1 + 2841) = v995;
  }
  else
  {
    *(_QWORD *)(a1 + 2832) = v993;
    swift_bridgeObjectRetain(v993);
    swift_bridgeObjectRelease(v992);
    *(_BYTE *)(a1 + 2840) = v4[2560];
    v997 = *(_QWORD *)(a2 + 2848);
    *(_BYTE *)(a1 + 2856) = *(_BYTE *)(a2 + 2856);
    *(_QWORD *)(a1 + 2848) = v997;
  }
  v998 = (__int128 *)(a1 + 2864);
  v999 = (__int128 *)(a2 + 2864);
  v1000 = *(_QWORD *)(a1 + 2864);
  v1001 = *(_QWORD *)(a2 + 2864);
  if (v1000 == 1)
  {
    if (v1001 == 1)
    {
      v1002 = *v999;
      *(_OWORD *)(a1 + 2873) = *(_OWORD *)(a2 + 2873);
      *v998 = v1002;
    }
    else
    {
      *(_QWORD *)(a1 + 2864) = v1001;
      *(_BYTE *)(a1 + 2872) = *(_BYTE *)(a2 + 2872);
      v1004 = *(_QWORD *)(a2 + 2880);
      *(_BYTE *)(a1 + 2888) = *(_BYTE *)(a2 + 2888);
      *(_QWORD *)(a1 + 2880) = v1004;
      swift_bridgeObjectRetain(v1001);
    }
  }
  else if (v1001 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2864));
    v1003 = *(_OWORD *)(a2 + 2873);
    *v998 = *v999;
    *(_OWORD *)(a1 + 2873) = v1003;
  }
  else
  {
    *(_QWORD *)(a1 + 2864) = v1001;
    swift_bridgeObjectRetain(v1001);
    swift_bridgeObjectRelease(v1000);
    *(_BYTE *)(a1 + 2872) = v4[2592];
    v1005 = *(_QWORD *)(a2 + 2880);
    *(_BYTE *)(a1 + 2888) = *(_BYTE *)(a2 + 2888);
    *(_QWORD *)(a1 + 2880) = v1005;
  }
  v1006 = (__int128 *)(a1 + 2896);
  v1007 = (__int128 *)(a2 + 2896);
  v1008 = *(_QWORD *)(a1 + 2896);
  v1009 = *(_QWORD *)(a2 + 2896);
  if (v1008 == 1)
  {
    if (v1009 == 1)
    {
      v1010 = *v1007;
      *(_OWORD *)(a1 + 2905) = *(_OWORD *)(a2 + 2905);
      *v1006 = v1010;
    }
    else
    {
      *(_QWORD *)(a1 + 2896) = v1009;
      *(_BYTE *)(a1 + 2904) = *(_BYTE *)(a2 + 2904);
      v1012 = *(_QWORD *)(a2 + 2912);
      *(_BYTE *)(a1 + 2920) = *(_BYTE *)(a2 + 2920);
      *(_QWORD *)(a1 + 2912) = v1012;
      swift_bridgeObjectRetain(v1009);
    }
  }
  else if (v1009 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2896));
    v1011 = *(_OWORD *)(a2 + 2905);
    *v1006 = *v1007;
    *(_OWORD *)(a1 + 2905) = v1011;
  }
  else
  {
    *(_QWORD *)(a1 + 2896) = v1009;
    swift_bridgeObjectRetain(v1009);
    swift_bridgeObjectRelease(v1008);
    *(_BYTE *)(a1 + 2904) = v4[2624];
    v1013 = *(_QWORD *)(a2 + 2912);
    *(_BYTE *)(a1 + 2920) = *(_BYTE *)(a2 + 2920);
    *(_QWORD *)(a1 + 2912) = v1013;
  }
  v1014 = (__int128 *)(a1 + 2928);
  v1015 = (__int128 *)(a2 + 2928);
  v1016 = *(_QWORD *)(a1 + 2928);
  v1017 = *(_QWORD *)(a2 + 2928);
  if (v1016 == 1)
  {
    if (v1017 == 1)
    {
      v1018 = *v1015;
      *(_OWORD *)(a1 + 2937) = *(_OWORD *)(a2 + 2937);
      *v1014 = v1018;
    }
    else
    {
      *(_QWORD *)(a1 + 2928) = v1017;
      *(_BYTE *)(a1 + 2936) = *(_BYTE *)(a2 + 2936);
      v1020 = *(_QWORD *)(a2 + 2944);
      *(_BYTE *)(a1 + 2952) = *(_BYTE *)(a2 + 2952);
      *(_QWORD *)(a1 + 2944) = v1020;
      swift_bridgeObjectRetain(v1017);
    }
  }
  else if (v1017 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2928));
    v1019 = *(_OWORD *)(a2 + 2937);
    *v1014 = *v1015;
    *(_OWORD *)(a1 + 2937) = v1019;
  }
  else
  {
    *(_QWORD *)(a1 + 2928) = v1017;
    swift_bridgeObjectRetain(v1017);
    swift_bridgeObjectRelease(v1016);
    *(_BYTE *)(a1 + 2936) = v4[2656];
    v1021 = *(_QWORD *)(a2 + 2944);
    *(_BYTE *)(a1 + 2952) = *(_BYTE *)(a2 + 2952);
    *(_QWORD *)(a1 + 2944) = v1021;
  }
  v1022 = (__int128 *)(a1 + 2960);
  v1023 = (__int128 *)(a2 + 2960);
  v1024 = *(_QWORD *)(a1 + 2960);
  v1025 = *(_QWORD *)(a2 + 2960);
  if (v1024 == 1)
  {
    if (v1025 == 1)
    {
      v1026 = *v1023;
      *(_OWORD *)(a1 + 2969) = *(_OWORD *)(a2 + 2969);
      *v1022 = v1026;
    }
    else
    {
      *(_QWORD *)(a1 + 2960) = v1025;
      *(_BYTE *)(a1 + 2968) = *(_BYTE *)(a2 + 2968);
      v1028 = *(_QWORD *)(a2 + 2976);
      *(_BYTE *)(a1 + 2984) = *(_BYTE *)(a2 + 2984);
      *(_QWORD *)(a1 + 2976) = v1028;
      swift_bridgeObjectRetain(v1025);
    }
  }
  else if (v1025 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2960));
    v1027 = *(_OWORD *)(a2 + 2969);
    *v1022 = *v1023;
    *(_OWORD *)(a1 + 2969) = v1027;
  }
  else
  {
    *(_QWORD *)(a1 + 2960) = v1025;
    swift_bridgeObjectRetain(v1025);
    swift_bridgeObjectRelease(v1024);
    *(_BYTE *)(a1 + 2968) = v4[2688];
    v1029 = *(_QWORD *)(a2 + 2976);
    *(_BYTE *)(a1 + 2984) = *(_BYTE *)(a2 + 2984);
    *(_QWORD *)(a1 + 2976) = v1029;
  }
  v1030 = (__int128 *)(a1 + 2992);
  v1031 = (__int128 *)(a2 + 2992);
  v1032 = *(_QWORD *)(a1 + 2992);
  v1033 = *(_QWORD *)(a2 + 2992);
  if (v1032 == 1)
  {
    if (v1033 == 1)
    {
      v1034 = *v1031;
      *(_OWORD *)(a1 + 3001) = *(_OWORD *)(a2 + 3001);
      *v1030 = v1034;
    }
    else
    {
      *(_QWORD *)(a1 + 2992) = v1033;
      *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
      v1036 = *(_QWORD *)(a2 + 3008);
      *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
      *(_QWORD *)(a1 + 3008) = v1036;
      swift_bridgeObjectRetain(v1033);
    }
  }
  else if (v1033 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 2992));
    v1035 = *(_OWORD *)(a2 + 3001);
    *v1030 = *v1031;
    *(_OWORD *)(a1 + 3001) = v1035;
  }
  else
  {
    *(_QWORD *)(a1 + 2992) = v1033;
    swift_bridgeObjectRetain(v1033);
    swift_bridgeObjectRelease(v1032);
    *(_BYTE *)(a1 + 3000) = v4[2720];
    v1037 = *(_QWORD *)(a2 + 3008);
    *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
    *(_QWORD *)(a1 + 3008) = v1037;
  }
  v1038 = (__int128 *)(a1 + 3024);
  v1039 = (__int128 *)(a2 + 3024);
  v1040 = *(_QWORD *)(a1 + 3024);
  v1041 = *(_QWORD *)(a2 + 3024);
  if (v1040 == 1)
  {
    if (v1041 == 1)
    {
      v1042 = *v1039;
      *(_OWORD *)(a1 + 3033) = *(_OWORD *)(a2 + 3033);
      *v1038 = v1042;
    }
    else
    {
      *(_QWORD *)(a1 + 3024) = v1041;
      *(_BYTE *)(a1 + 3032) = *(_BYTE *)(a2 + 3032);
      v1044 = *(_QWORD *)(a2 + 3040);
      *(_BYTE *)(a1 + 3048) = *(_BYTE *)(a2 + 3048);
      *(_QWORD *)(a1 + 3040) = v1044;
      swift_bridgeObjectRetain(v1041);
    }
  }
  else if (v1041 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3024));
    v1043 = *(_OWORD *)(a2 + 3033);
    *v1038 = *v1039;
    *(_OWORD *)(a1 + 3033) = v1043;
  }
  else
  {
    *(_QWORD *)(a1 + 3024) = v1041;
    swift_bridgeObjectRetain(v1041);
    swift_bridgeObjectRelease(v1040);
    *(_BYTE *)(a1 + 3032) = v4[2752];
    v1045 = *(_QWORD *)(a2 + 3040);
    *(_BYTE *)(a1 + 3048) = *(_BYTE *)(a2 + 3048);
    *(_QWORD *)(a1 + 3040) = v1045;
  }
  v1046 = (__int128 *)(a1 + 3056);
  v1047 = (__int128 *)(a2 + 3056);
  v1048 = *(_QWORD *)(a1 + 3056);
  v1049 = *(_QWORD *)(a2 + 3056);
  if (v1048 == 1)
  {
    if (v1049 == 1)
    {
      v1050 = *v1047;
      *(_OWORD *)(a1 + 3065) = *(_OWORD *)(a2 + 3065);
      *v1046 = v1050;
    }
    else
    {
      *(_QWORD *)(a1 + 3056) = v1049;
      *(_BYTE *)(a1 + 3064) = *(_BYTE *)(a2 + 3064);
      v1052 = *(_QWORD *)(a2 + 3072);
      *(_BYTE *)(a1 + 3080) = *(_BYTE *)(a2 + 3080);
      *(_QWORD *)(a1 + 3072) = v1052;
      swift_bridgeObjectRetain(v1049);
    }
  }
  else if (v1049 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3056));
    v1051 = *(_OWORD *)(a2 + 3065);
    *v1046 = *v1047;
    *(_OWORD *)(a1 + 3065) = v1051;
  }
  else
  {
    *(_QWORD *)(a1 + 3056) = v1049;
    swift_bridgeObjectRetain(v1049);
    swift_bridgeObjectRelease(v1048);
    *(_BYTE *)(a1 + 3064) = v4[2784];
    v1053 = *(_QWORD *)(a2 + 3072);
    *(_BYTE *)(a1 + 3080) = *(_BYTE *)(a2 + 3080);
    *(_QWORD *)(a1 + 3072) = v1053;
  }
  v1054 = (__int128 *)(a1 + 3088);
  v1055 = (__int128 *)(a2 + 3088);
  v1056 = *(_QWORD *)(a1 + 3088);
  v1057 = *(_QWORD *)(a2 + 3088);
  if (v1056 == 1)
  {
    if (v1057 == 1)
    {
      v1058 = *v1055;
      *(_OWORD *)(a1 + 3097) = *(_OWORD *)(a2 + 3097);
      *v1054 = v1058;
    }
    else
    {
      *(_QWORD *)(a1 + 3088) = v1057;
      *(_BYTE *)(a1 + 3096) = *(_BYTE *)(a2 + 3096);
      v1060 = *(_QWORD *)(a2 + 3104);
      *(_BYTE *)(a1 + 3112) = *(_BYTE *)(a2 + 3112);
      *(_QWORD *)(a1 + 3104) = v1060;
      swift_bridgeObjectRetain(v1057);
    }
  }
  else if (v1057 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3088));
    v1059 = *(_OWORD *)(a2 + 3097);
    *v1054 = *v1055;
    *(_OWORD *)(a1 + 3097) = v1059;
  }
  else
  {
    *(_QWORD *)(a1 + 3088) = v1057;
    swift_bridgeObjectRetain(v1057);
    swift_bridgeObjectRelease(v1056);
    *(_BYTE *)(a1 + 3096) = v4[2816];
    v1061 = *(_QWORD *)(a2 + 3104);
    *(_BYTE *)(a1 + 3112) = *(_BYTE *)(a2 + 3112);
    *(_QWORD *)(a1 + 3104) = v1061;
  }
  v1062 = (__int128 *)(a1 + 3120);
  v1063 = (__int128 *)(a2 + 3120);
  v1064 = *(_QWORD *)(a1 + 3120);
  v1065 = *(_QWORD *)(a2 + 3120);
  if (v1064 == 1)
  {
    if (v1065 == 1)
    {
      v1066 = *v1063;
      *(_OWORD *)(a1 + 3129) = *(_OWORD *)(a2 + 3129);
      *v1062 = v1066;
    }
    else
    {
      *(_QWORD *)(a1 + 3120) = v1065;
      *(_BYTE *)(a1 + 3128) = *(_BYTE *)(a2 + 3128);
      v1068 = *(_QWORD *)(a2 + 3136);
      *(_BYTE *)(a1 + 3144) = *(_BYTE *)(a2 + 3144);
      *(_QWORD *)(a1 + 3136) = v1068;
      swift_bridgeObjectRetain(v1065);
    }
  }
  else if (v1065 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3120));
    v1067 = *(_OWORD *)(a2 + 3129);
    *v1062 = *v1063;
    *(_OWORD *)(a1 + 3129) = v1067;
  }
  else
  {
    *(_QWORD *)(a1 + 3120) = v1065;
    swift_bridgeObjectRetain(v1065);
    swift_bridgeObjectRelease(v1064);
    *(_BYTE *)(a1 + 3128) = v4[2848];
    v1069 = *(_QWORD *)(a2 + 3136);
    *(_BYTE *)(a1 + 3144) = *(_BYTE *)(a2 + 3144);
    *(_QWORD *)(a1 + 3136) = v1069;
  }
  v1070 = (__int128 *)(a1 + 3152);
  v1071 = (__int128 *)(a2 + 3152);
  v1072 = *(_QWORD *)(a1 + 3152);
  v1073 = *(_QWORD *)(a2 + 3152);
  if (v1072 == 1)
  {
    if (v1073 == 1)
    {
      v1074 = *v1071;
      *(_OWORD *)(a1 + 3161) = *(_OWORD *)(a2 + 3161);
      *v1070 = v1074;
    }
    else
    {
      *(_QWORD *)(a1 + 3152) = v1073;
      *(_BYTE *)(a1 + 3160) = *(_BYTE *)(a2 + 3160);
      v1076 = *(_QWORD *)(a2 + 3168);
      *(_BYTE *)(a1 + 3176) = *(_BYTE *)(a2 + 3176);
      *(_QWORD *)(a1 + 3168) = v1076;
      swift_bridgeObjectRetain(v1073);
    }
  }
  else if (v1073 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3152));
    v1075 = *(_OWORD *)(a2 + 3161);
    *v1070 = *v1071;
    *(_OWORD *)(a1 + 3161) = v1075;
  }
  else
  {
    *(_QWORD *)(a1 + 3152) = v1073;
    swift_bridgeObjectRetain(v1073);
    swift_bridgeObjectRelease(v1072);
    *(_BYTE *)(a1 + 3160) = v4[2880];
    v1077 = *(_QWORD *)(a2 + 3168);
    *(_BYTE *)(a1 + 3176) = *(_BYTE *)(a2 + 3176);
    *(_QWORD *)(a1 + 3168) = v1077;
  }
  v1078 = (__int128 *)(a1 + 3184);
  v1079 = (__int128 *)(a2 + 3184);
  v1080 = *(_QWORD *)(a1 + 3184);
  v1081 = *(_QWORD *)(a2 + 3184);
  if (v1080 == 1)
  {
    if (v1081 == 1)
    {
      v1082 = *v1079;
      *(_OWORD *)(a1 + 3193) = *(_OWORD *)(a2 + 3193);
      *v1078 = v1082;
    }
    else
    {
      *(_QWORD *)(a1 + 3184) = v1081;
      *(_BYTE *)(a1 + 3192) = *(_BYTE *)(a2 + 3192);
      v1084 = *(_QWORD *)(a2 + 3200);
      *(_BYTE *)(a1 + 3208) = *(_BYTE *)(a2 + 3208);
      *(_QWORD *)(a1 + 3200) = v1084;
      swift_bridgeObjectRetain(v1081);
    }
  }
  else if (v1081 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3184));
    v1083 = *(_OWORD *)(a2 + 3193);
    *v1078 = *v1079;
    *(_OWORD *)(a1 + 3193) = v1083;
  }
  else
  {
    *(_QWORD *)(a1 + 3184) = v1081;
    swift_bridgeObjectRetain(v1081);
    swift_bridgeObjectRelease(v1080);
    *(_BYTE *)(a1 + 3192) = v4[2912];
    v1085 = *(_QWORD *)(a2 + 3200);
    *(_BYTE *)(a1 + 3208) = *(_BYTE *)(a2 + 3208);
    *(_QWORD *)(a1 + 3200) = v1085;
  }
  v1086 = (__int128 *)(a1 + 3216);
  v1087 = (__int128 *)(a2 + 3216);
  v1088 = *(_QWORD *)(a1 + 3216);
  v1089 = *(_QWORD *)(a2 + 3216);
  if (v1088 == 1)
  {
    if (v1089 == 1)
    {
      v1090 = *v1087;
      *(_OWORD *)(a1 + 3225) = *(_OWORD *)(a2 + 3225);
      *v1086 = v1090;
    }
    else
    {
      *(_QWORD *)(a1 + 3216) = v1089;
      *(_BYTE *)(a1 + 3224) = *(_BYTE *)(a2 + 3224);
      v1092 = *(_QWORD *)(a2 + 3232);
      *(_BYTE *)(a1 + 3240) = *(_BYTE *)(a2 + 3240);
      *(_QWORD *)(a1 + 3232) = v1092;
      swift_bridgeObjectRetain(v1089);
    }
  }
  else if (v1089 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3216));
    v1091 = *(_OWORD *)(a2 + 3225);
    *v1086 = *v1087;
    *(_OWORD *)(a1 + 3225) = v1091;
  }
  else
  {
    *(_QWORD *)(a1 + 3216) = v1089;
    swift_bridgeObjectRetain(v1089);
    swift_bridgeObjectRelease(v1088);
    *(_BYTE *)(a1 + 3224) = v4[2944];
    v1093 = *(_QWORD *)(a2 + 3232);
    *(_BYTE *)(a1 + 3240) = *(_BYTE *)(a2 + 3240);
    *(_QWORD *)(a1 + 3232) = v1093;
  }
  v1094 = (__int128 *)(a1 + 3248);
  v1095 = (__int128 *)(a2 + 3248);
  v1096 = *(_QWORD *)(a1 + 3248);
  v1097 = *(_QWORD *)(a2 + 3248);
  if (v1096 == 1)
  {
    if (v1097 == 1)
    {
      v1098 = *v1095;
      *(_OWORD *)(a1 + 3257) = *(_OWORD *)(a2 + 3257);
      *v1094 = v1098;
    }
    else
    {
      *(_QWORD *)(a1 + 3248) = v1097;
      *(_BYTE *)(a1 + 3256) = *(_BYTE *)(a2 + 3256);
      v1100 = *(_QWORD *)(a2 + 3264);
      *(_BYTE *)(a1 + 3272) = *(_BYTE *)(a2 + 3272);
      *(_QWORD *)(a1 + 3264) = v1100;
      swift_bridgeObjectRetain(v1097);
    }
  }
  else if (v1097 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3248));
    v1099 = *(_OWORD *)(a2 + 3257);
    *v1094 = *v1095;
    *(_OWORD *)(a1 + 3257) = v1099;
  }
  else
  {
    *(_QWORD *)(a1 + 3248) = v1097;
    swift_bridgeObjectRetain(v1097);
    swift_bridgeObjectRelease(v1096);
    *(_BYTE *)(a1 + 3256) = v4[2976];
    v1101 = *(_QWORD *)(a2 + 3264);
    *(_BYTE *)(a1 + 3272) = *(_BYTE *)(a2 + 3272);
    *(_QWORD *)(a1 + 3264) = v1101;
  }
  v1102 = *(_OWORD *)(a2 + 3280);
  *(_BYTE *)(a1 + 3296) = *(_BYTE *)(a2 + 3296);
  *(_OWORD *)(a1 + 3280) = v1102;
  v1103 = *(_OWORD *)(a2 + 3304);
  *(_BYTE *)(a1 + 3320) = *(_BYTE *)(a2 + 3320);
  *(_OWORD *)(a1 + 3304) = v1103;
  *(_BYTE *)(a1 + 3321) = *(_BYTE *)(a2 + 3321);
  *(_BYTE *)(a1 + 3322) = *(_BYTE *)(a2 + 3322);
  *(_BYTE *)(a1 + 3323) = *(_BYTE *)(a2 + 3323);
  *(_BYTE *)(a1 + 3324) = *(_BYTE *)(a2 + 3324);
  *(_BYTE *)(a1 + 3325) = *(_BYTE *)(a2 + 3325);
  *(_BYTE *)(a1 + 3326) = *(_BYTE *)(a2 + 3326);
  *(_BYTE *)(a1 + 3327) = *(_BYTE *)(a2 + 3327);
  v1104 = *(_QWORD *)(a1 + 3328);
  v1105 = *(_QWORD *)(a2 + 3328);
  *(_QWORD *)(a1 + 3328) = v1105;
  swift_bridgeObjectRetain(v1105);
  swift_bridgeObjectRelease(v1104);
  v1106 = *(_QWORD *)(a1 + 3336);
  v1107 = *(_QWORD *)(a2 + 3336);
  *(_QWORD *)(a1 + 3336) = v1107;
  swift_bridgeObjectRetain(v1107);
  swift_bridgeObjectRelease(v1106);
LABEL_989:
  v1108 = (_BYTE *)(a2 + 4376);
  v1109 = (_OWORD *)(a1 + 3344);
  v1110 = (uint64_t *)(a2 + 3344);
  v1111 = *(_QWORD *)(a2 + 4160);
  if (*(_QWORD *)(a1 + 4160) == 1)
  {
    if (v1111 != 1)
    {
      v1112 = *v1110;
      if (*v1110 == 1)
      {
        v1113 = *(_OWORD *)v1110;
        *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
        *v1109 = v1113;
      }
      else
      {
        *(_QWORD *)(a1 + 3344) = v1112;
        *(_BYTE *)(a1 + 3352) = *(_BYTE *)(a2 + 3352);
        v1117 = *(_QWORD *)(a2 + 3360);
        *(_BYTE *)(a1 + 3368) = *(_BYTE *)(a2 + 3368);
        *(_QWORD *)(a1 + 3360) = v1117;
        swift_bridgeObjectRetain(v1112);
      }
      v1118 = *(_QWORD *)(a2 + 3376);
      if (v1118 == 1)
      {
        v1119 = *(_OWORD *)(a2 + 3376);
        *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
        *(_OWORD *)(a1 + 3376) = v1119;
      }
      else
      {
        *(_QWORD *)(a1 + 3376) = v1118;
        *(_BYTE *)(a1 + 3384) = *(_BYTE *)(a2 + 3384);
        v1121 = *(_QWORD *)(a2 + 3392);
        *(_BYTE *)(a1 + 3400) = *(_BYTE *)(a2 + 3400);
        *(_QWORD *)(a1 + 3392) = v1121;
        swift_bridgeObjectRetain(v1118);
      }
      v1122 = *(_QWORD *)(a2 + 3408);
      if (v1122 == 1)
      {
        v1123 = *(_OWORD *)(a2 + 3408);
        *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
        *(_OWORD *)(a1 + 3408) = v1123;
      }
      else
      {
        *(_QWORD *)(a1 + 3408) = v1122;
        *(_BYTE *)(a1 + 3416) = *(_BYTE *)(a2 + 3416);
        v1124 = *(_QWORD *)(a2 + 3424);
        *(_BYTE *)(a1 + 3432) = *(_BYTE *)(a2 + 3432);
        *(_QWORD *)(a1 + 3424) = v1124;
        swift_bridgeObjectRetain(v1122);
      }
      v1125 = *(_QWORD *)(a2 + 3440);
      if (v1125 == 1)
      {
        v1126 = *(_OWORD *)(a2 + 3440);
        *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
        *(_OWORD *)(a1 + 3440) = v1126;
      }
      else
      {
        *(_QWORD *)(a1 + 3440) = v1125;
        *(_BYTE *)(a1 + 3448) = *(_BYTE *)(a2 + 3448);
        v1127 = *(_QWORD *)(a2 + 3456);
        *(_BYTE *)(a1 + 3464) = *(_BYTE *)(a2 + 3464);
        *(_QWORD *)(a1 + 3456) = v1127;
        swift_bridgeObjectRetain(v1125);
      }
      v1128 = *(_QWORD *)(a2 + 3472);
      if (v1128 == 1)
      {
        v1129 = *(_OWORD *)(a2 + 3472);
        *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
        *(_OWORD *)(a1 + 3472) = v1129;
      }
      else
      {
        *(_QWORD *)(a1 + 3472) = v1128;
        *(_BYTE *)(a1 + 3480) = *(_BYTE *)(a2 + 3480);
        v1130 = *(_QWORD *)(a2 + 3488);
        *(_BYTE *)(a1 + 3496) = *(_BYTE *)(a2 + 3496);
        *(_QWORD *)(a1 + 3488) = v1130;
        swift_bridgeObjectRetain(v1128);
      }
      v1131 = *(_QWORD *)(a2 + 3504);
      if (v1131 == 1)
      {
        v1132 = *(_OWORD *)(a2 + 3504);
        *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
        *(_OWORD *)(a1 + 3504) = v1132;
      }
      else
      {
        *(_QWORD *)(a1 + 3504) = v1131;
        *(_BYTE *)(a1 + 3512) = *(_BYTE *)(a2 + 3512);
        v1133 = *(_QWORD *)(a2 + 3520);
        *(_BYTE *)(a1 + 3528) = *(_BYTE *)(a2 + 3528);
        *(_QWORD *)(a1 + 3520) = v1133;
        swift_bridgeObjectRetain(v1131);
      }
      v1134 = *(_QWORD *)(a2 + 3536);
      if (v1134 == 1)
      {
        v1135 = *(_OWORD *)(a2 + 3536);
        *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
        *(_OWORD *)(a1 + 3536) = v1135;
      }
      else
      {
        *(_QWORD *)(a1 + 3536) = v1134;
        *(_BYTE *)(a1 + 3544) = *(_BYTE *)(a2 + 3544);
        v1136 = *(_QWORD *)(a2 + 3552);
        *(_BYTE *)(a1 + 3560) = *(_BYTE *)(a2 + 3560);
        *(_QWORD *)(a1 + 3552) = v1136;
        swift_bridgeObjectRetain(v1134);
      }
      v1137 = *(_QWORD *)(a2 + 3568);
      if (v1137 == 1)
      {
        v1138 = *(_OWORD *)(a2 + 3568);
        *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
        *(_OWORD *)(a1 + 3568) = v1138;
      }
      else
      {
        *(_QWORD *)(a1 + 3568) = v1137;
        *(_BYTE *)(a1 + 3576) = *(_BYTE *)(a2 + 3576);
        v1139 = *(_QWORD *)(a2 + 3584);
        *(_BYTE *)(a1 + 3592) = *(_BYTE *)(a2 + 3592);
        *(_QWORD *)(a1 + 3584) = v1139;
        swift_bridgeObjectRetain(v1137);
      }
      v1140 = *(_QWORD *)(a2 + 3600);
      if (v1140 == 1)
      {
        v1141 = *(_OWORD *)(a2 + 3600);
        *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
        *(_OWORD *)(a1 + 3600) = v1141;
      }
      else
      {
        *(_QWORD *)(a1 + 3600) = v1140;
        *(_BYTE *)(a1 + 3608) = *(_BYTE *)(a2 + 3608);
        v1142 = *(_QWORD *)(a2 + 3616);
        *(_BYTE *)(a1 + 3624) = *(_BYTE *)(a2 + 3624);
        *(_QWORD *)(a1 + 3616) = v1142;
        swift_bridgeObjectRetain(v1140);
      }
      v1143 = *(_QWORD *)(a2 + 3632);
      if (v1143 == 1)
      {
        v1144 = *(_OWORD *)(a2 + 3632);
        *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
        *(_OWORD *)(a1 + 3632) = v1144;
      }
      else
      {
        *(_QWORD *)(a1 + 3632) = v1143;
        *(_BYTE *)(a1 + 3640) = *(_BYTE *)(a2 + 3640);
        v1145 = *(_QWORD *)(a2 + 3648);
        *(_BYTE *)(a1 + 3656) = *(_BYTE *)(a2 + 3656);
        *(_QWORD *)(a1 + 3648) = v1145;
        swift_bridgeObjectRetain(v1143);
      }
      v1146 = *(_QWORD *)(a2 + 3664);
      if (v1146 == 1)
      {
        v1147 = *(_OWORD *)(a2 + 3664);
        *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
        *(_OWORD *)(a1 + 3664) = v1147;
      }
      else
      {
        *(_QWORD *)(a1 + 3664) = v1146;
        *(_BYTE *)(a1 + 3672) = *(_BYTE *)(a2 + 3672);
        v1148 = *(_QWORD *)(a2 + 3680);
        *(_BYTE *)(a1 + 3688) = *(_BYTE *)(a2 + 3688);
        *(_QWORD *)(a1 + 3680) = v1148;
        swift_bridgeObjectRetain(v1146);
      }
      v1149 = *(_QWORD *)(a2 + 3696);
      if (v1149 == 1)
      {
        v1150 = *(_OWORD *)(a2 + 3696);
        *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
        *(_OWORD *)(a1 + 3696) = v1150;
      }
      else
      {
        *(_QWORD *)(a1 + 3696) = v1149;
        *(_BYTE *)(a1 + 3704) = *(_BYTE *)(a2 + 3704);
        v1151 = *(_QWORD *)(a2 + 3712);
        *(_BYTE *)(a1 + 3720) = *(_BYTE *)(a2 + 3720);
        *(_QWORD *)(a1 + 3712) = v1151;
        swift_bridgeObjectRetain(v1149);
      }
      v1152 = *(_QWORD *)(a2 + 3728);
      if (v1152 == 1)
      {
        v1153 = *(_OWORD *)(a2 + 3728);
        *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
        *(_OWORD *)(a1 + 3728) = v1153;
      }
      else
      {
        *(_QWORD *)(a1 + 3728) = v1152;
        *(_BYTE *)(a1 + 3736) = *(_BYTE *)(a2 + 3736);
        v1154 = *(_QWORD *)(a2 + 3744);
        *(_BYTE *)(a1 + 3752) = *(_BYTE *)(a2 + 3752);
        *(_QWORD *)(a1 + 3744) = v1154;
        swift_bridgeObjectRetain(v1152);
      }
      v1155 = *(_QWORD *)(a2 + 3760);
      if (v1155 == 1)
      {
        v1156 = *(_OWORD *)(a2 + 3760);
        *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
        *(_OWORD *)(a1 + 3760) = v1156;
      }
      else
      {
        *(_QWORD *)(a1 + 3760) = v1155;
        *(_BYTE *)(a1 + 3768) = *(_BYTE *)(a2 + 3768);
        v1157 = *(_QWORD *)(a2 + 3776);
        *(_BYTE *)(a1 + 3784) = *(_BYTE *)(a2 + 3784);
        *(_QWORD *)(a1 + 3776) = v1157;
        swift_bridgeObjectRetain(v1155);
      }
      v1158 = *(_QWORD *)(a2 + 3792);
      if (v1158 == 1)
      {
        v1159 = *(_OWORD *)(a2 + 3792);
        *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
        *(_OWORD *)(a1 + 3792) = v1159;
      }
      else
      {
        *(_QWORD *)(a1 + 3792) = v1158;
        *(_BYTE *)(a1 + 3800) = *(_BYTE *)(a2 + 3800);
        v1160 = *(_QWORD *)(a2 + 3808);
        *(_BYTE *)(a1 + 3816) = *(_BYTE *)(a2 + 3816);
        *(_QWORD *)(a1 + 3808) = v1160;
        swift_bridgeObjectRetain(v1158);
      }
      v1161 = *(_QWORD *)(a2 + 3824);
      if (v1161 == 1)
      {
        v1162 = *(_OWORD *)(a2 + 3824);
        *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
        *(_OWORD *)(a1 + 3824) = v1162;
      }
      else
      {
        *(_QWORD *)(a1 + 3824) = v1161;
        *(_BYTE *)(a1 + 3832) = *(_BYTE *)(a2 + 3832);
        v1163 = *(_QWORD *)(a2 + 3840);
        *(_BYTE *)(a1 + 3848) = *(_BYTE *)(a2 + 3848);
        *(_QWORD *)(a1 + 3840) = v1163;
        swift_bridgeObjectRetain(v1161);
      }
      v1164 = *(_QWORD *)(a2 + 3856);
      if (v1164 == 1)
      {
        v1165 = *(_OWORD *)(a2 + 3856);
        *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
        *(_OWORD *)(a1 + 3856) = v1165;
      }
      else
      {
        *(_QWORD *)(a1 + 3856) = v1164;
        *(_BYTE *)(a1 + 3864) = *(_BYTE *)(a2 + 3864);
        v1166 = *(_QWORD *)(a2 + 3872);
        *(_BYTE *)(a1 + 3880) = *(_BYTE *)(a2 + 3880);
        *(_QWORD *)(a1 + 3872) = v1166;
        swift_bridgeObjectRetain(v1164);
      }
      v1167 = *(_QWORD *)(a2 + 3888);
      if (v1167 == 1)
      {
        v1168 = *(_OWORD *)(a2 + 3888);
        *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
        *(_OWORD *)(a1 + 3888) = v1168;
      }
      else
      {
        *(_QWORD *)(a1 + 3888) = v1167;
        *(_BYTE *)(a1 + 3896) = *(_BYTE *)(a2 + 3896);
        v1169 = *(_QWORD *)(a2 + 3904);
        *(_BYTE *)(a1 + 3912) = *(_BYTE *)(a2 + 3912);
        *(_QWORD *)(a1 + 3904) = v1169;
        swift_bridgeObjectRetain(v1167);
      }
      v1170 = *(_QWORD *)(a2 + 3920);
      if (v1170 == 1)
      {
        v1171 = *(_OWORD *)(a2 + 3920);
        *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
        *(_OWORD *)(a1 + 3920) = v1171;
      }
      else
      {
        *(_QWORD *)(a1 + 3920) = v1170;
        *(_BYTE *)(a1 + 3928) = *(_BYTE *)(a2 + 3928);
        v1172 = *(_QWORD *)(a2 + 3936);
        *(_BYTE *)(a1 + 3944) = *(_BYTE *)(a2 + 3944);
        *(_QWORD *)(a1 + 3936) = v1172;
        swift_bridgeObjectRetain(v1170);
      }
      v1173 = *(_QWORD *)(a2 + 3952);
      if (v1173 == 1)
      {
        v1174 = *(_OWORD *)(a2 + 3952);
        *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
        *(_OWORD *)(a1 + 3952) = v1174;
      }
      else
      {
        *(_QWORD *)(a1 + 3952) = v1173;
        *(_BYTE *)(a1 + 3960) = *(_BYTE *)(a2 + 3960);
        v1175 = *(_QWORD *)(a2 + 3968);
        *(_BYTE *)(a1 + 3976) = *(_BYTE *)(a2 + 3976);
        *(_QWORD *)(a1 + 3968) = v1175;
        swift_bridgeObjectRetain(v1173);
      }
      v1176 = *(_QWORD *)(a2 + 3984);
      if (v1176 == 1)
      {
        v1177 = *(_OWORD *)(a2 + 3984);
        *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
        *(_OWORD *)(a1 + 3984) = v1177;
      }
      else
      {
        *(_QWORD *)(a1 + 3984) = v1176;
        *(_BYTE *)(a1 + 3992) = *(_BYTE *)(a2 + 3992);
        v1178 = *(_QWORD *)(a2 + 4000);
        *(_BYTE *)(a1 + 4008) = *(_BYTE *)(a2 + 4008);
        *(_QWORD *)(a1 + 4000) = v1178;
        swift_bridgeObjectRetain(v1176);
      }
      v1179 = *(_QWORD *)(a2 + 4016);
      if (v1179 == 1)
      {
        v1180 = *(_OWORD *)(a2 + 4016);
        *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
        *(_OWORD *)(a1 + 4016) = v1180;
      }
      else
      {
        *(_QWORD *)(a1 + 4016) = v1179;
        *(_BYTE *)(a1 + 4024) = *(_BYTE *)(a2 + 4024);
        v1181 = *(_QWORD *)(a2 + 4032);
        *(_BYTE *)(a1 + 4040) = *(_BYTE *)(a2 + 4040);
        *(_QWORD *)(a1 + 4032) = v1181;
        swift_bridgeObjectRetain(v1179);
      }
      v1182 = *(_QWORD *)(a2 + 4048);
      if (v1182 == 1)
      {
        v1183 = *(_OWORD *)(a2 + 4048);
        *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
        *(_OWORD *)(a1 + 4048) = v1183;
      }
      else
      {
        *(_QWORD *)(a1 + 4048) = v1182;
        *(_BYTE *)(a1 + 4056) = *(_BYTE *)(a2 + 4056);
        v1184 = *(_QWORD *)(a2 + 4064);
        *(_BYTE *)(a1 + 4072) = *(_BYTE *)(a2 + 4072);
        *(_QWORD *)(a1 + 4064) = v1184;
        swift_bridgeObjectRetain(v1182);
      }
      v1185 = *(_QWORD *)(a2 + 4080);
      if (v1185 == 1)
      {
        v1186 = *(_OWORD *)(a2 + 4080);
        *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
        *(_OWORD *)(a1 + 4080) = v1186;
      }
      else
      {
        *(_QWORD *)(a1 + 4080) = v1185;
        *(_BYTE *)(a1 + 4088) = *(_BYTE *)(a2 + 4088);
        v1187 = *(_QWORD *)(a2 + 4096);
        *(_BYTE *)(a1 + 4104) = *(_BYTE *)(a2 + 4104);
        *(_QWORD *)(a1 + 4096) = v1187;
        swift_bridgeObjectRetain(v1185);
      }
      v1188 = *(_OWORD *)(a2 + 4112);
      *(_BYTE *)(a1 + 4128) = *(_BYTE *)(a2 + 4128);
      *(_OWORD *)(a1 + 4112) = v1188;
      v1189 = *(_BYTE *)(a2 + 4152);
      *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
      *(_BYTE *)(a1 + 4152) = v1189;
      *v832 = v4[3873];
      *(_BYTE *)(a1 + 4154) = v4[3874];
      *(_BYTE *)(a1 + 4155) = v4[3875];
      *(_BYTE *)(a1 + 4156) = v4[3876];
      *(_BYTE *)(a1 + 4157) = v4[3877];
      *(_BYTE *)(a1 + 4158) = v4[3878];
      *(_BYTE *)(a1 + 4159) = v4[3879];
      v1190 = *(_QWORD *)(a2 + 4160);
      *(_QWORD *)(a1 + 4160) = v1190;
      v1191 = *(_QWORD *)(a2 + 4168);
      *(_QWORD *)(a1 + 4168) = v1191;
      swift_bridgeObjectRetain(v1190);
      swift_bridgeObjectRetain(v1191);
      goto LABEL_1236;
    }
LABEL_995:
    memcpy((void *)(a1 + 3344), (const void *)(a2 + 3344), 0x340uLL);
    goto LABEL_1236;
  }
  if (v1111 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 3344));
    goto LABEL_995;
  }
  v1114 = *(_QWORD *)v1109;
  v1115 = *v1110;
  if (*(_QWORD *)v1109 == 1)
  {
    if (v1115 == 1)
    {
      v1116 = *(_OWORD *)v1110;
      *(_OWORD *)(a1 + 3353) = *(_OWORD *)(a2 + 3353);
      *v1109 = v1116;
    }
    else
    {
      *(_QWORD *)(a1 + 3344) = v1115;
      *(_BYTE *)(a1 + 3352) = *(_BYTE *)(a2 + 3352);
      v1192 = *(_QWORD *)(a2 + 3360);
      *(_BYTE *)(a1 + 3368) = *(_BYTE *)(a2 + 3368);
      *(_QWORD *)(a1 + 3360) = v1192;
      swift_bridgeObjectRetain(v1115);
    }
  }
  else if (v1115 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3344));
    v1120 = *(_OWORD *)(a2 + 3353);
    *v1109 = *(_OWORD *)v1110;
    *(_OWORD *)(a1 + 3353) = v1120;
  }
  else
  {
    *(_QWORD *)(a1 + 3344) = v1115;
    swift_bridgeObjectRetain(v1115);
    swift_bridgeObjectRelease(v1114);
    *(_BYTE *)(a1 + 3352) = v4[3072];
    v1193 = *(_QWORD *)(a2 + 3360);
    *(_BYTE *)(a1 + 3368) = *(_BYTE *)(a2 + 3368);
    *(_QWORD *)(a1 + 3360) = v1193;
  }
  v1194 = (__int128 *)(a1 + 3376);
  v1195 = (__int128 *)(a2 + 3376);
  v1196 = *(_QWORD *)(a1 + 3376);
  v1197 = *(_QWORD *)(a2 + 3376);
  if (v1196 == 1)
  {
    if (v1197 == 1)
    {
      v1198 = *v1195;
      *(_OWORD *)(a1 + 3385) = *(_OWORD *)(a2 + 3385);
      *v1194 = v1198;
    }
    else
    {
      *(_QWORD *)(a1 + 3376) = v1197;
      *(_BYTE *)(a1 + 3384) = *(_BYTE *)(a2 + 3384);
      v1200 = *(_QWORD *)(a2 + 3392);
      *(_BYTE *)(a1 + 3400) = *(_BYTE *)(a2 + 3400);
      *(_QWORD *)(a1 + 3392) = v1200;
      swift_bridgeObjectRetain(v1197);
    }
  }
  else if (v1197 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3376));
    v1199 = *(_OWORD *)(a2 + 3385);
    *v1194 = *v1195;
    *(_OWORD *)(a1 + 3385) = v1199;
  }
  else
  {
    *(_QWORD *)(a1 + 3376) = v1197;
    swift_bridgeObjectRetain(v1197);
    swift_bridgeObjectRelease(v1196);
    *(_BYTE *)(a1 + 3384) = v4[3104];
    v1201 = *(_QWORD *)(a2 + 3392);
    *(_BYTE *)(a1 + 3400) = *(_BYTE *)(a2 + 3400);
    *(_QWORD *)(a1 + 3392) = v1201;
  }
  v1202 = (__int128 *)(a1 + 3408);
  v1203 = (__int128 *)(a2 + 3408);
  v1204 = *(_QWORD *)(a1 + 3408);
  v1205 = *(_QWORD *)(a2 + 3408);
  if (v1204 == 1)
  {
    if (v1205 == 1)
    {
      v1206 = *v1203;
      *(_OWORD *)(a1 + 3417) = *(_OWORD *)(a2 + 3417);
      *v1202 = v1206;
    }
    else
    {
      *(_QWORD *)(a1 + 3408) = v1205;
      *(_BYTE *)(a1 + 3416) = *(_BYTE *)(a2 + 3416);
      v1208 = *(_QWORD *)(a2 + 3424);
      *(_BYTE *)(a1 + 3432) = *(_BYTE *)(a2 + 3432);
      *(_QWORD *)(a1 + 3424) = v1208;
      swift_bridgeObjectRetain(v1205);
    }
  }
  else if (v1205 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3408));
    v1207 = *(_OWORD *)(a2 + 3417);
    *v1202 = *v1203;
    *(_OWORD *)(a1 + 3417) = v1207;
  }
  else
  {
    *(_QWORD *)(a1 + 3408) = v1205;
    swift_bridgeObjectRetain(v1205);
    swift_bridgeObjectRelease(v1204);
    *(_BYTE *)(a1 + 3416) = v4[3136];
    v1209 = *(_QWORD *)(a2 + 3424);
    *(_BYTE *)(a1 + 3432) = *(_BYTE *)(a2 + 3432);
    *(_QWORD *)(a1 + 3424) = v1209;
  }
  v1210 = (__int128 *)(a1 + 3440);
  v1211 = (__int128 *)(a2 + 3440);
  v1212 = *(_QWORD *)(a1 + 3440);
  v1213 = *(_QWORD *)(a2 + 3440);
  if (v1212 == 1)
  {
    if (v1213 == 1)
    {
      v1214 = *v1211;
      *(_OWORD *)(a1 + 3449) = *(_OWORD *)(a2 + 3449);
      *v1210 = v1214;
    }
    else
    {
      *(_QWORD *)(a1 + 3440) = v1213;
      *(_BYTE *)(a1 + 3448) = *(_BYTE *)(a2 + 3448);
      v1216 = *(_QWORD *)(a2 + 3456);
      *(_BYTE *)(a1 + 3464) = *(_BYTE *)(a2 + 3464);
      *(_QWORD *)(a1 + 3456) = v1216;
      swift_bridgeObjectRetain(v1213);
    }
  }
  else if (v1213 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3440));
    v1215 = *(_OWORD *)(a2 + 3449);
    *v1210 = *v1211;
    *(_OWORD *)(a1 + 3449) = v1215;
  }
  else
  {
    *(_QWORD *)(a1 + 3440) = v1213;
    swift_bridgeObjectRetain(v1213);
    swift_bridgeObjectRelease(v1212);
    *(_BYTE *)(a1 + 3448) = v4[3168];
    v1217 = *(_QWORD *)(a2 + 3456);
    *(_BYTE *)(a1 + 3464) = *(_BYTE *)(a2 + 3464);
    *(_QWORD *)(a1 + 3456) = v1217;
  }
  v1218 = (__int128 *)(a1 + 3472);
  v1219 = (__int128 *)(a2 + 3472);
  v1220 = *(_QWORD *)(a1 + 3472);
  v1221 = *(_QWORD *)(a2 + 3472);
  if (v1220 == 1)
  {
    if (v1221 == 1)
    {
      v1222 = *v1219;
      *(_OWORD *)(a1 + 3481) = *(_OWORD *)(a2 + 3481);
      *v1218 = v1222;
    }
    else
    {
      *(_QWORD *)(a1 + 3472) = v1221;
      *(_BYTE *)(a1 + 3480) = *(_BYTE *)(a2 + 3480);
      v1224 = *(_QWORD *)(a2 + 3488);
      *(_BYTE *)(a1 + 3496) = *(_BYTE *)(a2 + 3496);
      *(_QWORD *)(a1 + 3488) = v1224;
      swift_bridgeObjectRetain(v1221);
    }
  }
  else if (v1221 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3472));
    v1223 = *(_OWORD *)(a2 + 3481);
    *v1218 = *v1219;
    *(_OWORD *)(a1 + 3481) = v1223;
  }
  else
  {
    *(_QWORD *)(a1 + 3472) = v1221;
    swift_bridgeObjectRetain(v1221);
    swift_bridgeObjectRelease(v1220);
    *(_BYTE *)(a1 + 3480) = v4[3200];
    v1225 = *(_QWORD *)(a2 + 3488);
    *(_BYTE *)(a1 + 3496) = *(_BYTE *)(a2 + 3496);
    *(_QWORD *)(a1 + 3488) = v1225;
  }
  v1226 = (__int128 *)(a1 + 3504);
  v1227 = (__int128 *)(a2 + 3504);
  v1228 = *(_QWORD *)(a1 + 3504);
  v1229 = *(_QWORD *)(a2 + 3504);
  if (v1228 == 1)
  {
    if (v1229 == 1)
    {
      v1230 = *v1227;
      *(_OWORD *)(a1 + 3513) = *(_OWORD *)(a2 + 3513);
      *v1226 = v1230;
    }
    else
    {
      *(_QWORD *)(a1 + 3504) = v1229;
      *(_BYTE *)(a1 + 3512) = *(_BYTE *)(a2 + 3512);
      v1232 = *(_QWORD *)(a2 + 3520);
      *(_BYTE *)(a1 + 3528) = *(_BYTE *)(a2 + 3528);
      *(_QWORD *)(a1 + 3520) = v1232;
      swift_bridgeObjectRetain(v1229);
    }
  }
  else if (v1229 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3504));
    v1231 = *(_OWORD *)(a2 + 3513);
    *v1226 = *v1227;
    *(_OWORD *)(a1 + 3513) = v1231;
  }
  else
  {
    *(_QWORD *)(a1 + 3504) = v1229;
    swift_bridgeObjectRetain(v1229);
    swift_bridgeObjectRelease(v1228);
    *(_BYTE *)(a1 + 3512) = v4[3232];
    v1233 = *(_QWORD *)(a2 + 3520);
    *(_BYTE *)(a1 + 3528) = *(_BYTE *)(a2 + 3528);
    *(_QWORD *)(a1 + 3520) = v1233;
  }
  v1234 = (__int128 *)(a1 + 3536);
  v1235 = (__int128 *)(a2 + 3536);
  v1236 = *(_QWORD *)(a1 + 3536);
  v1237 = *(_QWORD *)(a2 + 3536);
  if (v1236 == 1)
  {
    if (v1237 == 1)
    {
      v1238 = *v1235;
      *(_OWORD *)(a1 + 3545) = *(_OWORD *)(a2 + 3545);
      *v1234 = v1238;
    }
    else
    {
      *(_QWORD *)(a1 + 3536) = v1237;
      *(_BYTE *)(a1 + 3544) = *(_BYTE *)(a2 + 3544);
      v1240 = *(_QWORD *)(a2 + 3552);
      *(_BYTE *)(a1 + 3560) = *(_BYTE *)(a2 + 3560);
      *(_QWORD *)(a1 + 3552) = v1240;
      swift_bridgeObjectRetain(v1237);
    }
  }
  else if (v1237 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3536));
    v1239 = *(_OWORD *)(a2 + 3545);
    *v1234 = *v1235;
    *(_OWORD *)(a1 + 3545) = v1239;
  }
  else
  {
    *(_QWORD *)(a1 + 3536) = v1237;
    swift_bridgeObjectRetain(v1237);
    swift_bridgeObjectRelease(v1236);
    *(_BYTE *)(a1 + 3544) = v4[3264];
    v1241 = *(_QWORD *)(a2 + 3552);
    *(_BYTE *)(a1 + 3560) = *(_BYTE *)(a2 + 3560);
    *(_QWORD *)(a1 + 3552) = v1241;
  }
  v1242 = (__int128 *)(a1 + 3568);
  v1243 = (__int128 *)(a2 + 3568);
  v1244 = *(_QWORD *)(a1 + 3568);
  v1245 = *(_QWORD *)(a2 + 3568);
  if (v1244 == 1)
  {
    if (v1245 == 1)
    {
      v1246 = *v1243;
      *(_OWORD *)(a1 + 3577) = *(_OWORD *)(a2 + 3577);
      *v1242 = v1246;
    }
    else
    {
      *(_QWORD *)(a1 + 3568) = v1245;
      *(_BYTE *)(a1 + 3576) = *(_BYTE *)(a2 + 3576);
      v1248 = *(_QWORD *)(a2 + 3584);
      *(_BYTE *)(a1 + 3592) = *(_BYTE *)(a2 + 3592);
      *(_QWORD *)(a1 + 3584) = v1248;
      swift_bridgeObjectRetain(v1245);
    }
  }
  else if (v1245 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3568));
    v1247 = *(_OWORD *)(a2 + 3577);
    *v1242 = *v1243;
    *(_OWORD *)(a1 + 3577) = v1247;
  }
  else
  {
    *(_QWORD *)(a1 + 3568) = v1245;
    swift_bridgeObjectRetain(v1245);
    swift_bridgeObjectRelease(v1244);
    *(_BYTE *)(a1 + 3576) = v4[3296];
    v1249 = *(_QWORD *)(a2 + 3584);
    *(_BYTE *)(a1 + 3592) = *(_BYTE *)(a2 + 3592);
    *(_QWORD *)(a1 + 3584) = v1249;
  }
  v1250 = (__int128 *)(a1 + 3600);
  v1251 = (__int128 *)(a2 + 3600);
  v1252 = *(_QWORD *)(a1 + 3600);
  v1253 = *(_QWORD *)(a2 + 3600);
  if (v1252 == 1)
  {
    if (v1253 == 1)
    {
      v1254 = *v1251;
      *(_OWORD *)(a1 + 3609) = *(_OWORD *)(a2 + 3609);
      *v1250 = v1254;
    }
    else
    {
      *(_QWORD *)(a1 + 3600) = v1253;
      *(_BYTE *)(a1 + 3608) = *(_BYTE *)(a2 + 3608);
      v1256 = *(_QWORD *)(a2 + 3616);
      *(_BYTE *)(a1 + 3624) = *(_BYTE *)(a2 + 3624);
      *(_QWORD *)(a1 + 3616) = v1256;
      swift_bridgeObjectRetain(v1253);
    }
  }
  else if (v1253 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3600));
    v1255 = *(_OWORD *)(a2 + 3609);
    *v1250 = *v1251;
    *(_OWORD *)(a1 + 3609) = v1255;
  }
  else
  {
    *(_QWORD *)(a1 + 3600) = v1253;
    swift_bridgeObjectRetain(v1253);
    swift_bridgeObjectRelease(v1252);
    *(_BYTE *)(a1 + 3608) = v4[3328];
    v1257 = *(_QWORD *)(a2 + 3616);
    *(_BYTE *)(a1 + 3624) = *(_BYTE *)(a2 + 3624);
    *(_QWORD *)(a1 + 3616) = v1257;
  }
  v1258 = (__int128 *)(a1 + 3632);
  v1259 = (__int128 *)(a2 + 3632);
  v1260 = *(_QWORD *)(a1 + 3632);
  v1261 = *(_QWORD *)(a2 + 3632);
  if (v1260 == 1)
  {
    if (v1261 == 1)
    {
      v1262 = *v1259;
      *(_OWORD *)(a1 + 3641) = *(_OWORD *)(a2 + 3641);
      *v1258 = v1262;
    }
    else
    {
      *(_QWORD *)(a1 + 3632) = v1261;
      *(_BYTE *)(a1 + 3640) = *(_BYTE *)(a2 + 3640);
      v1264 = *(_QWORD *)(a2 + 3648);
      *(_BYTE *)(a1 + 3656) = *(_BYTE *)(a2 + 3656);
      *(_QWORD *)(a1 + 3648) = v1264;
      swift_bridgeObjectRetain(v1261);
    }
  }
  else if (v1261 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3632));
    v1263 = *(_OWORD *)(a2 + 3641);
    *v1258 = *v1259;
    *(_OWORD *)(a1 + 3641) = v1263;
  }
  else
  {
    *(_QWORD *)(a1 + 3632) = v1261;
    swift_bridgeObjectRetain(v1261);
    swift_bridgeObjectRelease(v1260);
    *(_BYTE *)(a1 + 3640) = v4[3360];
    v1265 = *(_QWORD *)(a2 + 3648);
    *(_BYTE *)(a1 + 3656) = *(_BYTE *)(a2 + 3656);
    *(_QWORD *)(a1 + 3648) = v1265;
  }
  v1266 = (__int128 *)(a1 + 3664);
  v1267 = (__int128 *)(a2 + 3664);
  v1268 = *(_QWORD *)(a1 + 3664);
  v1269 = *(_QWORD *)(a2 + 3664);
  if (v1268 == 1)
  {
    if (v1269 == 1)
    {
      v1270 = *v1267;
      *(_OWORD *)(a1 + 3673) = *(_OWORD *)(a2 + 3673);
      *v1266 = v1270;
    }
    else
    {
      *(_QWORD *)(a1 + 3664) = v1269;
      *(_BYTE *)(a1 + 3672) = *(_BYTE *)(a2 + 3672);
      v1272 = *(_QWORD *)(a2 + 3680);
      *(_BYTE *)(a1 + 3688) = *(_BYTE *)(a2 + 3688);
      *(_QWORD *)(a1 + 3680) = v1272;
      swift_bridgeObjectRetain(v1269);
    }
  }
  else if (v1269 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3664));
    v1271 = *(_OWORD *)(a2 + 3673);
    *v1266 = *v1267;
    *(_OWORD *)(a1 + 3673) = v1271;
  }
  else
  {
    *(_QWORD *)(a1 + 3664) = v1269;
    swift_bridgeObjectRetain(v1269);
    swift_bridgeObjectRelease(v1268);
    *(_BYTE *)(a1 + 3672) = v4[3392];
    v1273 = *(_QWORD *)(a2 + 3680);
    *(_BYTE *)(a1 + 3688) = *(_BYTE *)(a2 + 3688);
    *(_QWORD *)(a1 + 3680) = v1273;
  }
  v1274 = (__int128 *)(a1 + 3696);
  v1275 = (__int128 *)(a2 + 3696);
  v1276 = *(_QWORD *)(a1 + 3696);
  v1277 = *(_QWORD *)(a2 + 3696);
  if (v1276 == 1)
  {
    if (v1277 == 1)
    {
      v1278 = *v1275;
      *(_OWORD *)(a1 + 3705) = *(_OWORD *)(a2 + 3705);
      *v1274 = v1278;
    }
    else
    {
      *(_QWORD *)(a1 + 3696) = v1277;
      *(_BYTE *)(a1 + 3704) = *(_BYTE *)(a2 + 3704);
      v1280 = *(_QWORD *)(a2 + 3712);
      *(_BYTE *)(a1 + 3720) = *(_BYTE *)(a2 + 3720);
      *(_QWORD *)(a1 + 3712) = v1280;
      swift_bridgeObjectRetain(v1277);
    }
  }
  else if (v1277 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3696));
    v1279 = *(_OWORD *)(a2 + 3705);
    *v1274 = *v1275;
    *(_OWORD *)(a1 + 3705) = v1279;
  }
  else
  {
    *(_QWORD *)(a1 + 3696) = v1277;
    swift_bridgeObjectRetain(v1277);
    swift_bridgeObjectRelease(v1276);
    *(_BYTE *)(a1 + 3704) = v4[3424];
    v1281 = *(_QWORD *)(a2 + 3712);
    *(_BYTE *)(a1 + 3720) = *(_BYTE *)(a2 + 3720);
    *(_QWORD *)(a1 + 3712) = v1281;
  }
  v1282 = (__int128 *)(a1 + 3728);
  v1283 = (__int128 *)(a2 + 3728);
  v1284 = *(_QWORD *)(a1 + 3728);
  v1285 = *(_QWORD *)(a2 + 3728);
  if (v1284 == 1)
  {
    if (v1285 == 1)
    {
      v1286 = *v1283;
      *(_OWORD *)(a1 + 3737) = *(_OWORD *)(a2 + 3737);
      *v1282 = v1286;
    }
    else
    {
      *(_QWORD *)(a1 + 3728) = v1285;
      *(_BYTE *)(a1 + 3736) = *(_BYTE *)(a2 + 3736);
      v1288 = *(_QWORD *)(a2 + 3744);
      *(_BYTE *)(a1 + 3752) = *(_BYTE *)(a2 + 3752);
      *(_QWORD *)(a1 + 3744) = v1288;
      swift_bridgeObjectRetain(v1285);
    }
  }
  else if (v1285 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3728));
    v1287 = *(_OWORD *)(a2 + 3737);
    *v1282 = *v1283;
    *(_OWORD *)(a1 + 3737) = v1287;
  }
  else
  {
    *(_QWORD *)(a1 + 3728) = v1285;
    swift_bridgeObjectRetain(v1285);
    swift_bridgeObjectRelease(v1284);
    *(_BYTE *)(a1 + 3736) = v4[3456];
    v1289 = *(_QWORD *)(a2 + 3744);
    *(_BYTE *)(a1 + 3752) = *(_BYTE *)(a2 + 3752);
    *(_QWORD *)(a1 + 3744) = v1289;
  }
  v1290 = (__int128 *)(a1 + 3760);
  v1291 = (__int128 *)(a2 + 3760);
  v1292 = *(_QWORD *)(a1 + 3760);
  v1293 = *(_QWORD *)(a2 + 3760);
  if (v1292 == 1)
  {
    if (v1293 == 1)
    {
      v1294 = *v1291;
      *(_OWORD *)(a1 + 3769) = *(_OWORD *)(a2 + 3769);
      *v1290 = v1294;
    }
    else
    {
      *(_QWORD *)(a1 + 3760) = v1293;
      *(_BYTE *)(a1 + 3768) = *(_BYTE *)(a2 + 3768);
      v1296 = *(_QWORD *)(a2 + 3776);
      *(_BYTE *)(a1 + 3784) = *(_BYTE *)(a2 + 3784);
      *(_QWORD *)(a1 + 3776) = v1296;
      swift_bridgeObjectRetain(v1293);
    }
  }
  else if (v1293 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3760));
    v1295 = *(_OWORD *)(a2 + 3769);
    *v1290 = *v1291;
    *(_OWORD *)(a1 + 3769) = v1295;
  }
  else
  {
    *(_QWORD *)(a1 + 3760) = v1293;
    swift_bridgeObjectRetain(v1293);
    swift_bridgeObjectRelease(v1292);
    *(_BYTE *)(a1 + 3768) = v4[3488];
    v1297 = *(_QWORD *)(a2 + 3776);
    *(_BYTE *)(a1 + 3784) = *(_BYTE *)(a2 + 3784);
    *(_QWORD *)(a1 + 3776) = v1297;
  }
  v1298 = (__int128 *)(a1 + 3792);
  v1299 = (__int128 *)(a2 + 3792);
  v1300 = *(_QWORD *)(a1 + 3792);
  v1301 = *(_QWORD *)(a2 + 3792);
  if (v1300 == 1)
  {
    if (v1301 == 1)
    {
      v1302 = *v1299;
      *(_OWORD *)(a1 + 3801) = *(_OWORD *)(a2 + 3801);
      *v1298 = v1302;
    }
    else
    {
      *(_QWORD *)(a1 + 3792) = v1301;
      *(_BYTE *)(a1 + 3800) = *(_BYTE *)(a2 + 3800);
      v1304 = *(_QWORD *)(a2 + 3808);
      *(_BYTE *)(a1 + 3816) = *(_BYTE *)(a2 + 3816);
      *(_QWORD *)(a1 + 3808) = v1304;
      swift_bridgeObjectRetain(v1301);
    }
  }
  else if (v1301 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3792));
    v1303 = *(_OWORD *)(a2 + 3801);
    *v1298 = *v1299;
    *(_OWORD *)(a1 + 3801) = v1303;
  }
  else
  {
    *(_QWORD *)(a1 + 3792) = v1301;
    swift_bridgeObjectRetain(v1301);
    swift_bridgeObjectRelease(v1300);
    *(_BYTE *)(a1 + 3800) = v4[3520];
    v1305 = *(_QWORD *)(a2 + 3808);
    *(_BYTE *)(a1 + 3816) = *(_BYTE *)(a2 + 3816);
    *(_QWORD *)(a1 + 3808) = v1305;
  }
  v1306 = (__int128 *)(a1 + 3824);
  v1307 = (__int128 *)(a2 + 3824);
  v1308 = *(_QWORD *)(a1 + 3824);
  v1309 = *(_QWORD *)(a2 + 3824);
  if (v1308 == 1)
  {
    if (v1309 == 1)
    {
      v1310 = *v1307;
      *(_OWORD *)(a1 + 3833) = *(_OWORD *)(a2 + 3833);
      *v1306 = v1310;
    }
    else
    {
      *(_QWORD *)(a1 + 3824) = v1309;
      *(_BYTE *)(a1 + 3832) = *(_BYTE *)(a2 + 3832);
      v1312 = *(_QWORD *)(a2 + 3840);
      *(_BYTE *)(a1 + 3848) = *(_BYTE *)(a2 + 3848);
      *(_QWORD *)(a1 + 3840) = v1312;
      swift_bridgeObjectRetain(v1309);
    }
  }
  else if (v1309 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3824));
    v1311 = *(_OWORD *)(a2 + 3833);
    *v1306 = *v1307;
    *(_OWORD *)(a1 + 3833) = v1311;
  }
  else
  {
    *(_QWORD *)(a1 + 3824) = v1309;
    swift_bridgeObjectRetain(v1309);
    swift_bridgeObjectRelease(v1308);
    *(_BYTE *)(a1 + 3832) = v4[3552];
    v1313 = *(_QWORD *)(a2 + 3840);
    *(_BYTE *)(a1 + 3848) = *(_BYTE *)(a2 + 3848);
    *(_QWORD *)(a1 + 3840) = v1313;
  }
  v1314 = (__int128 *)(a1 + 3856);
  v1315 = (__int128 *)(a2 + 3856);
  v1316 = *(_QWORD *)(a1 + 3856);
  v1317 = *(_QWORD *)(a2 + 3856);
  if (v1316 == 1)
  {
    if (v1317 == 1)
    {
      v1318 = *v1315;
      *(_OWORD *)(a1 + 3865) = *(_OWORD *)(a2 + 3865);
      *v1314 = v1318;
    }
    else
    {
      *(_QWORD *)(a1 + 3856) = v1317;
      *(_BYTE *)(a1 + 3864) = *(_BYTE *)(a2 + 3864);
      v1320 = *(_QWORD *)(a2 + 3872);
      *(_BYTE *)(a1 + 3880) = *(_BYTE *)(a2 + 3880);
      *(_QWORD *)(a1 + 3872) = v1320;
      swift_bridgeObjectRetain(v1317);
    }
  }
  else if (v1317 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3856));
    v1319 = *(_OWORD *)(a2 + 3865);
    *v1314 = *v1315;
    *(_OWORD *)(a1 + 3865) = v1319;
  }
  else
  {
    *(_QWORD *)(a1 + 3856) = v1317;
    swift_bridgeObjectRetain(v1317);
    swift_bridgeObjectRelease(v1316);
    *(_BYTE *)(a1 + 3864) = v4[3584];
    v1321 = *(_QWORD *)(a2 + 3872);
    *(_BYTE *)(a1 + 3880) = *(_BYTE *)(a2 + 3880);
    *(_QWORD *)(a1 + 3872) = v1321;
  }
  v1322 = (__int128 *)(a1 + 3888);
  v1323 = (__int128 *)(a2 + 3888);
  v1324 = *(_QWORD *)(a1 + 3888);
  v1325 = *(_QWORD *)(a2 + 3888);
  if (v1324 == 1)
  {
    if (v1325 == 1)
    {
      v1326 = *v1323;
      *(_OWORD *)(a1 + 3897) = *(_OWORD *)(a2 + 3897);
      *v1322 = v1326;
    }
    else
    {
      *(_QWORD *)(a1 + 3888) = v1325;
      *(_BYTE *)(a1 + 3896) = *(_BYTE *)(a2 + 3896);
      v1328 = *(_QWORD *)(a2 + 3904);
      *(_BYTE *)(a1 + 3912) = *(_BYTE *)(a2 + 3912);
      *(_QWORD *)(a1 + 3904) = v1328;
      swift_bridgeObjectRetain(v1325);
    }
  }
  else if (v1325 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3888));
    v1327 = *(_OWORD *)(a2 + 3897);
    *v1322 = *v1323;
    *(_OWORD *)(a1 + 3897) = v1327;
  }
  else
  {
    *(_QWORD *)(a1 + 3888) = v1325;
    swift_bridgeObjectRetain(v1325);
    swift_bridgeObjectRelease(v1324);
    *(_BYTE *)(a1 + 3896) = v4[3616];
    v1329 = *(_QWORD *)(a2 + 3904);
    *(_BYTE *)(a1 + 3912) = *(_BYTE *)(a2 + 3912);
    *(_QWORD *)(a1 + 3904) = v1329;
  }
  v1330 = (__int128 *)(a1 + 3920);
  v1331 = (__int128 *)(a2 + 3920);
  v1332 = *(_QWORD *)(a1 + 3920);
  v1333 = *(_QWORD *)(a2 + 3920);
  if (v1332 == 1)
  {
    if (v1333 == 1)
    {
      v1334 = *v1331;
      *(_OWORD *)(a1 + 3929) = *(_OWORD *)(a2 + 3929);
      *v1330 = v1334;
    }
    else
    {
      *(_QWORD *)(a1 + 3920) = v1333;
      *(_BYTE *)(a1 + 3928) = *(_BYTE *)(a2 + 3928);
      v1336 = *(_QWORD *)(a2 + 3936);
      *(_BYTE *)(a1 + 3944) = *(_BYTE *)(a2 + 3944);
      *(_QWORD *)(a1 + 3936) = v1336;
      swift_bridgeObjectRetain(v1333);
    }
  }
  else if (v1333 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3920));
    v1335 = *(_OWORD *)(a2 + 3929);
    *v1330 = *v1331;
    *(_OWORD *)(a1 + 3929) = v1335;
  }
  else
  {
    *(_QWORD *)(a1 + 3920) = v1333;
    swift_bridgeObjectRetain(v1333);
    swift_bridgeObjectRelease(v1332);
    *(_BYTE *)(a1 + 3928) = v4[3648];
    v1337 = *(_QWORD *)(a2 + 3936);
    *(_BYTE *)(a1 + 3944) = *(_BYTE *)(a2 + 3944);
    *(_QWORD *)(a1 + 3936) = v1337;
  }
  v1338 = (__int128 *)(a1 + 3952);
  v1339 = (__int128 *)(a2 + 3952);
  v1340 = *(_QWORD *)(a1 + 3952);
  v1341 = *(_QWORD *)(a2 + 3952);
  if (v1340 == 1)
  {
    if (v1341 == 1)
    {
      v1342 = *v1339;
      *(_OWORD *)(a1 + 3961) = *(_OWORD *)(a2 + 3961);
      *v1338 = v1342;
    }
    else
    {
      *(_QWORD *)(a1 + 3952) = v1341;
      *(_BYTE *)(a1 + 3960) = *(_BYTE *)(a2 + 3960);
      v1344 = *(_QWORD *)(a2 + 3968);
      *(_BYTE *)(a1 + 3976) = *(_BYTE *)(a2 + 3976);
      *(_QWORD *)(a1 + 3968) = v1344;
      swift_bridgeObjectRetain(v1341);
    }
  }
  else if (v1341 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3952));
    v1343 = *(_OWORD *)(a2 + 3961);
    *v1338 = *v1339;
    *(_OWORD *)(a1 + 3961) = v1343;
  }
  else
  {
    *(_QWORD *)(a1 + 3952) = v1341;
    swift_bridgeObjectRetain(v1341);
    swift_bridgeObjectRelease(v1340);
    *(_BYTE *)(a1 + 3960) = v4[3680];
    v1345 = *(_QWORD *)(a2 + 3968);
    *(_BYTE *)(a1 + 3976) = *(_BYTE *)(a2 + 3976);
    *(_QWORD *)(a1 + 3968) = v1345;
  }
  v1346 = (__int128 *)(a1 + 3984);
  v1347 = (__int128 *)(a2 + 3984);
  v1348 = *(_QWORD *)(a1 + 3984);
  v1349 = *(_QWORD *)(a2 + 3984);
  if (v1348 == 1)
  {
    if (v1349 == 1)
    {
      v1350 = *v1347;
      *(_OWORD *)(a1 + 3993) = *(_OWORD *)(a2 + 3993);
      *v1346 = v1350;
    }
    else
    {
      *(_QWORD *)(a1 + 3984) = v1349;
      *(_BYTE *)(a1 + 3992) = *(_BYTE *)(a2 + 3992);
      v1352 = *(_QWORD *)(a2 + 4000);
      *(_BYTE *)(a1 + 4008) = *(_BYTE *)(a2 + 4008);
      *(_QWORD *)(a1 + 4000) = v1352;
      swift_bridgeObjectRetain(v1349);
    }
  }
  else if (v1349 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 3984));
    v1351 = *(_OWORD *)(a2 + 3993);
    *v1346 = *v1347;
    *(_OWORD *)(a1 + 3993) = v1351;
  }
  else
  {
    *(_QWORD *)(a1 + 3984) = v1349;
    swift_bridgeObjectRetain(v1349);
    swift_bridgeObjectRelease(v1348);
    *(_BYTE *)(a1 + 3992) = v4[3712];
    v1353 = *(_QWORD *)(a2 + 4000);
    *(_BYTE *)(a1 + 4008) = *(_BYTE *)(a2 + 4008);
    *(_QWORD *)(a1 + 4000) = v1353;
  }
  v1354 = (__int128 *)(a1 + 4016);
  v1355 = (__int128 *)(a2 + 4016);
  v1356 = *(_QWORD *)(a1 + 4016);
  v1357 = *(_QWORD *)(a2 + 4016);
  if (v1356 == 1)
  {
    if (v1357 == 1)
    {
      v1358 = *v1355;
      *(_OWORD *)(a1 + 4025) = *(_OWORD *)(a2 + 4025);
      *v1354 = v1358;
    }
    else
    {
      *(_QWORD *)(a1 + 4016) = v1357;
      *(_BYTE *)(a1 + 4024) = *(_BYTE *)(a2 + 4024);
      v1360 = *(_QWORD *)(a2 + 4032);
      *(_BYTE *)(a1 + 4040) = *(_BYTE *)(a2 + 4040);
      *(_QWORD *)(a1 + 4032) = v1360;
      swift_bridgeObjectRetain(v1357);
    }
  }
  else if (v1357 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4016));
    v1359 = *(_OWORD *)(a2 + 4025);
    *v1354 = *v1355;
    *(_OWORD *)(a1 + 4025) = v1359;
  }
  else
  {
    *(_QWORD *)(a1 + 4016) = v1357;
    swift_bridgeObjectRetain(v1357);
    swift_bridgeObjectRelease(v1356);
    *(_BYTE *)(a1 + 4024) = v4[3744];
    v1361 = *(_QWORD *)(a2 + 4032);
    *(_BYTE *)(a1 + 4040) = *(_BYTE *)(a2 + 4040);
    *(_QWORD *)(a1 + 4032) = v1361;
  }
  v1362 = (__int128 *)(a1 + 4048);
  v1363 = (__int128 *)(a2 + 4048);
  v1364 = *(_QWORD *)(a1 + 4048);
  v1365 = *(_QWORD *)(a2 + 4048);
  if (v1364 == 1)
  {
    if (v1365 == 1)
    {
      v1366 = *v1363;
      *(_OWORD *)(a1 + 4057) = *(_OWORD *)(a2 + 4057);
      *v1362 = v1366;
    }
    else
    {
      *(_QWORD *)(a1 + 4048) = v1365;
      *(_BYTE *)(a1 + 4056) = *(_BYTE *)(a2 + 4056);
      v1368 = *(_QWORD *)(a2 + 4064);
      *(_BYTE *)(a1 + 4072) = *(_BYTE *)(a2 + 4072);
      *(_QWORD *)(a1 + 4064) = v1368;
      swift_bridgeObjectRetain(v1365);
    }
  }
  else if (v1365 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4048));
    v1367 = *(_OWORD *)(a2 + 4057);
    *v1362 = *v1363;
    *(_OWORD *)(a1 + 4057) = v1367;
  }
  else
  {
    *(_QWORD *)(a1 + 4048) = v1365;
    swift_bridgeObjectRetain(v1365);
    swift_bridgeObjectRelease(v1364);
    *(_BYTE *)(a1 + 4056) = v4[3776];
    v1369 = *(_QWORD *)(a2 + 4064);
    *(_BYTE *)(a1 + 4072) = *(_BYTE *)(a2 + 4072);
    *(_QWORD *)(a1 + 4064) = v1369;
  }
  v1370 = (__int128 *)(a1 + 4080);
  v1371 = (__int128 *)(a2 + 4080);
  v1372 = *(_QWORD *)(a1 + 4080);
  v1373 = *(_QWORD *)(a2 + 4080);
  if (v1372 == 1)
  {
    if (v1373 == 1)
    {
      v1374 = *v1371;
      *(_OWORD *)(a1 + 4089) = *(_OWORD *)(a2 + 4089);
      *v1370 = v1374;
    }
    else
    {
      *(_QWORD *)(a1 + 4080) = v1373;
      *(_BYTE *)(a1 + 4088) = *(_BYTE *)(a2 + 4088);
      v1376 = *(_QWORD *)(a2 + 4096);
      *(_BYTE *)(a1 + 4104) = *(_BYTE *)(a2 + 4104);
      *(_QWORD *)(a1 + 4096) = v1376;
      swift_bridgeObjectRetain(v1373);
    }
  }
  else if (v1373 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4080));
    v1375 = *(_OWORD *)(a2 + 4089);
    *v1370 = *v1371;
    *(_OWORD *)(a1 + 4089) = v1375;
  }
  else
  {
    *(_QWORD *)(a1 + 4080) = v1373;
    swift_bridgeObjectRetain(v1373);
    swift_bridgeObjectRelease(v1372);
    *(_BYTE *)(a1 + 4088) = v4[3808];
    v1377 = *(_QWORD *)(a2 + 4096);
    *(_BYTE *)(a1 + 4104) = *(_BYTE *)(a2 + 4104);
    *(_QWORD *)(a1 + 4096) = v1377;
  }
  v1378 = *(_OWORD *)(a2 + 4112);
  *(_BYTE *)(a1 + 4128) = *(_BYTE *)(a2 + 4128);
  *(_OWORD *)(a1 + 4112) = v1378;
  v1379 = *(_BYTE *)(a2 + 4152);
  *(_OWORD *)(a1 + 4136) = *(_OWORD *)(a2 + 4136);
  *(_BYTE *)(a1 + 4152) = v1379;
  *v832 = v4[3873];
  *(_BYTE *)(a1 + 4154) = v4[3874];
  *(_BYTE *)(a1 + 4155) = v4[3875];
  *(_BYTE *)(a1 + 4156) = v4[3876];
  *(_BYTE *)(a1 + 4157) = v4[3877];
  *(_BYTE *)(a1 + 4158) = v4[3878];
  *(_BYTE *)(a1 + 4159) = v4[3879];
  v1380 = *(_QWORD *)(a1 + 4160);
  v1381 = *(_QWORD *)(a2 + 4160);
  *(_QWORD *)(a1 + 4160) = v1381;
  swift_bridgeObjectRetain(v1381);
  swift_bridgeObjectRelease(v1380);
  v1382 = *(_QWORD *)(a1 + 4168);
  v1383 = *(_QWORD *)(a2 + 4168);
  *(_QWORD *)(a1 + 4168) = v1383;
  swift_bridgeObjectRetain(v1383);
  swift_bridgeObjectRelease(v1382);
LABEL_1236:
  v1384 = (_OWORD *)(a1 + 4176);
  v1385 = (uint64_t *)(a2 + 4176);
  v1386 = *(_QWORD *)(a2 + 4992);
  if (*(_QWORD *)(a1 + 4992) == 1)
  {
    if (v1386 != 1)
    {
      v1387 = *v1385;
      if (*v1385 == 1)
      {
        v1388 = *(_OWORD *)v1385;
        *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
        *v1384 = v1388;
      }
      else
      {
        *(_QWORD *)(a1 + 4176) = v1387;
        *(_BYTE *)(a1 + 4184) = v4[3904];
        v1392 = *(_QWORD *)(a2 + 4192);
        *(_BYTE *)(a1 + 4200) = *(_BYTE *)(a2 + 4200);
        *(_QWORD *)(a1 + 4192) = v1392;
        swift_bridgeObjectRetain(v1387);
      }
      v1393 = *(_QWORD *)(a2 + 4208);
      if (v1393 == 1)
      {
        v1394 = *(_OWORD *)(a2 + 4208);
        *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
        *(_OWORD *)(a1 + 4208) = v1394;
      }
      else
      {
        *(_QWORD *)(a1 + 4208) = v1393;
        *(_BYTE *)(a1 + 4216) = v4[3936];
        v1396 = *(_QWORD *)(a2 + 4224);
        *(_BYTE *)(a1 + 4232) = *(_BYTE *)(a2 + 4232);
        *(_QWORD *)(a1 + 4224) = v1396;
        swift_bridgeObjectRetain(v1393);
      }
      v1397 = *(_QWORD *)(a2 + 4240);
      if (v1397 == 1)
      {
        v1398 = *(_OWORD *)(a2 + 4240);
        *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
        *(_OWORD *)(a1 + 4240) = v1398;
      }
      else
      {
        *(_QWORD *)(a1 + 4240) = v1397;
        *(_BYTE *)(a1 + 4248) = v4[3968];
        v1399 = *(_QWORD *)(a2 + 4256);
        *(_BYTE *)(a1 + 4264) = *(_BYTE *)(a2 + 4264);
        *(_QWORD *)(a1 + 4256) = v1399;
        swift_bridgeObjectRetain(v1397);
      }
      v1400 = *(_QWORD *)(a2 + 4272);
      if (v1400 == 1)
      {
        v1401 = *(_OWORD *)(a2 + 4272);
        *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
        *(_OWORD *)(a1 + 4272) = v1401;
      }
      else
      {
        *(_QWORD *)(a1 + 4272) = v1400;
        *(_BYTE *)(a1 + 4280) = v4[4000];
        v1402 = *(_QWORD *)(a2 + 4288);
        *(_BYTE *)(a1 + 4296) = *(_BYTE *)(a2 + 4296);
        *(_QWORD *)(a1 + 4288) = v1402;
        swift_bridgeObjectRetain(v1400);
      }
      v1403 = *(_QWORD *)(a2 + 4304);
      if (v1403 == 1)
      {
        v1404 = *(_OWORD *)(a2 + 4304);
        *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
        *(_OWORD *)(a1 + 4304) = v1404;
      }
      else
      {
        *(_QWORD *)(a1 + 4304) = v1403;
        *(_BYTE *)(a1 + 4312) = v4[4032];
        v1405 = *(_QWORD *)(a2 + 4320);
        *(_BYTE *)(a1 + 4328) = *(_BYTE *)(a2 + 4328);
        *(_QWORD *)(a1 + 4320) = v1405;
        swift_bridgeObjectRetain(v1403);
      }
      v1406 = *(_QWORD *)(a2 + 4336);
      if (v1406 == 1)
      {
        v1407 = *(_OWORD *)(a2 + 4336);
        *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
        *(_OWORD *)(a1 + 4336) = v1407;
      }
      else
      {
        *(_QWORD *)(a1 + 4336) = v1406;
        *(_BYTE *)(a1 + 4344) = v4[4064];
        v1408 = *(_QWORD *)(a2 + 4352);
        *(_BYTE *)(a1 + 4360) = *(_BYTE *)(a2 + 4360);
        *(_QWORD *)(a1 + 4352) = v1408;
        swift_bridgeObjectRetain(v1406);
      }
      v1409 = *(_QWORD *)(a2 + 4368);
      if (v1409 == 1)
      {
        v1410 = *(_OWORD *)(a2 + 4368);
        *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
        *(_OWORD *)(a1 + 4368) = v1410;
      }
      else
      {
        *(_QWORD *)(a1 + 4368) = v1409;
        *(_BYTE *)(a1 + 4376) = *v1108;
        v1411 = *(_QWORD *)(a2 + 4384);
        *(_BYTE *)(a1 + 4392) = *(_BYTE *)(a2 + 4392);
        *(_QWORD *)(a1 + 4384) = v1411;
        swift_bridgeObjectRetain(v1409);
      }
      v1412 = *(_QWORD *)(a2 + 4400);
      if (v1412 == 1)
      {
        v1413 = *(_OWORD *)(a2 + 4400);
        *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
        *(_OWORD *)(a1 + 4400) = v1413;
      }
      else
      {
        *(_QWORD *)(a1 + 4400) = v1412;
        *(_BYTE *)(a1 + 4408) = *(_BYTE *)(a2 + 4408);
        v1414 = *(_QWORD *)(a2 + 4416);
        *(_BYTE *)(a1 + 4424) = *(_BYTE *)(a2 + 4424);
        *(_QWORD *)(a1 + 4416) = v1414;
        swift_bridgeObjectRetain(v1412);
      }
      v1415 = *(_QWORD *)(a2 + 4432);
      if (v1415 == 1)
      {
        v1416 = *(_OWORD *)(a2 + 4432);
        *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
        *(_OWORD *)(a1 + 4432) = v1416;
      }
      else
      {
        *(_QWORD *)(a1 + 4432) = v1415;
        *(_BYTE *)(a1 + 4440) = *(_BYTE *)(a2 + 4440);
        v1417 = *(_QWORD *)(a2 + 4448);
        *(_BYTE *)(a1 + 4456) = *(_BYTE *)(a2 + 4456);
        *(_QWORD *)(a1 + 4448) = v1417;
        swift_bridgeObjectRetain(v1415);
      }
      v1418 = *(_QWORD *)(a2 + 4464);
      if (v1418 == 1)
      {
        v1419 = *(_OWORD *)(a2 + 4464);
        *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
        *(_OWORD *)(a1 + 4464) = v1419;
      }
      else
      {
        *(_QWORD *)(a1 + 4464) = v1418;
        *(_BYTE *)(a1 + 4472) = *(_BYTE *)(a2 + 4472);
        v1420 = *(_QWORD *)(a2 + 4480);
        *(_BYTE *)(a1 + 4488) = *(_BYTE *)(a2 + 4488);
        *(_QWORD *)(a1 + 4480) = v1420;
        swift_bridgeObjectRetain(v1418);
      }
      v1421 = *(_QWORD *)(a2 + 4496);
      if (v1421 == 1)
      {
        v1422 = *(_OWORD *)(a2 + 4496);
        *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
        *(_OWORD *)(a1 + 4496) = v1422;
      }
      else
      {
        *(_QWORD *)(a1 + 4496) = v1421;
        *(_BYTE *)(a1 + 4504) = *(_BYTE *)(a2 + 4504);
        v1423 = *(_QWORD *)(a2 + 4512);
        *(_BYTE *)(a1 + 4520) = *(_BYTE *)(a2 + 4520);
        *(_QWORD *)(a1 + 4512) = v1423;
        swift_bridgeObjectRetain(v1421);
      }
      v1424 = *(_QWORD *)(a2 + 4528);
      if (v1424 == 1)
      {
        v1425 = *(_OWORD *)(a2 + 4528);
        *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
        *(_OWORD *)(a1 + 4528) = v1425;
      }
      else
      {
        *(_QWORD *)(a1 + 4528) = v1424;
        *(_BYTE *)(a1 + 4536) = *(_BYTE *)(a2 + 4536);
        v1426 = *(_QWORD *)(a2 + 4544);
        *(_BYTE *)(a1 + 4552) = *(_BYTE *)(a2 + 4552);
        *(_QWORD *)(a1 + 4544) = v1426;
        swift_bridgeObjectRetain(v1424);
      }
      v1427 = *(_QWORD *)(a2 + 4560);
      if (v1427 == 1)
      {
        v1428 = *(_OWORD *)(a2 + 4560);
        *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
        *(_OWORD *)(a1 + 4560) = v1428;
      }
      else
      {
        *(_QWORD *)(a1 + 4560) = v1427;
        *(_BYTE *)(a1 + 4568) = *(_BYTE *)(a2 + 4568);
        v1429 = *(_QWORD *)(a2 + 4576);
        *(_BYTE *)(a1 + 4584) = *(_BYTE *)(a2 + 4584);
        *(_QWORD *)(a1 + 4576) = v1429;
        swift_bridgeObjectRetain(v1427);
      }
      v1430 = *(_QWORD *)(a2 + 4592);
      if (v1430 == 1)
      {
        v1431 = *(_OWORD *)(a2 + 4592);
        *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
        *(_OWORD *)(a1 + 4592) = v1431;
      }
      else
      {
        *(_QWORD *)(a1 + 4592) = v1430;
        *(_BYTE *)(a1 + 4600) = *(_BYTE *)(a2 + 4600);
        v1432 = *(_QWORD *)(a2 + 4608);
        *(_BYTE *)(a1 + 4616) = *(_BYTE *)(a2 + 4616);
        *(_QWORD *)(a1 + 4608) = v1432;
        swift_bridgeObjectRetain(v1430);
      }
      v1433 = *(_QWORD *)(a2 + 4624);
      if (v1433 == 1)
      {
        v1434 = *(_OWORD *)(a2 + 4624);
        *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
        *(_OWORD *)(a1 + 4624) = v1434;
      }
      else
      {
        *(_QWORD *)(a1 + 4624) = v1433;
        *(_BYTE *)(a1 + 4632) = *(_BYTE *)(a2 + 4632);
        v1435 = *(_QWORD *)(a2 + 4640);
        *(_BYTE *)(a1 + 4648) = *(_BYTE *)(a2 + 4648);
        *(_QWORD *)(a1 + 4640) = v1435;
        swift_bridgeObjectRetain(v1433);
      }
      v1436 = *(_QWORD *)(a2 + 4656);
      if (v1436 == 1)
      {
        v1437 = *(_OWORD *)(a2 + 4656);
        *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
        *(_OWORD *)(a1 + 4656) = v1437;
      }
      else
      {
        *(_QWORD *)(a1 + 4656) = v1436;
        *(_BYTE *)(a1 + 4664) = *(_BYTE *)(a2 + 4664);
        v1438 = *(_QWORD *)(a2 + 4672);
        *(_BYTE *)(a1 + 4680) = *(_BYTE *)(a2 + 4680);
        *(_QWORD *)(a1 + 4672) = v1438;
        swift_bridgeObjectRetain(v1436);
      }
      v1439 = *(_QWORD *)(a2 + 4688);
      if (v1439 == 1)
      {
        v1440 = *(_OWORD *)(a2 + 4688);
        *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
        *(_OWORD *)(a1 + 4688) = v1440;
      }
      else
      {
        *(_QWORD *)(a1 + 4688) = v1439;
        *(_BYTE *)(a1 + 4696) = *(_BYTE *)(a2 + 4696);
        v1441 = *(_QWORD *)(a2 + 4704);
        *(_BYTE *)(a1 + 4712) = *(_BYTE *)(a2 + 4712);
        *(_QWORD *)(a1 + 4704) = v1441;
        swift_bridgeObjectRetain(v1439);
      }
      v1442 = *(_QWORD *)(a2 + 4720);
      if (v1442 == 1)
      {
        v1443 = *(_OWORD *)(a2 + 4720);
        *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
        *(_OWORD *)(a1 + 4720) = v1443;
      }
      else
      {
        *(_QWORD *)(a1 + 4720) = v1442;
        *(_BYTE *)(a1 + 4728) = *(_BYTE *)(a2 + 4728);
        v1444 = *(_QWORD *)(a2 + 4736);
        *(_BYTE *)(a1 + 4744) = *(_BYTE *)(a2 + 4744);
        *(_QWORD *)(a1 + 4736) = v1444;
        swift_bridgeObjectRetain(v1442);
      }
      v1445 = *(_QWORD *)(a2 + 4752);
      if (v1445 == 1)
      {
        v1446 = *(_OWORD *)(a2 + 4752);
        *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
        *(_OWORD *)(a1 + 4752) = v1446;
      }
      else
      {
        *(_QWORD *)(a1 + 4752) = v1445;
        *(_BYTE *)(a1 + 4760) = *(_BYTE *)(a2 + 4760);
        v1447 = *(_QWORD *)(a2 + 4768);
        *(_BYTE *)(a1 + 4776) = *(_BYTE *)(a2 + 4776);
        *(_QWORD *)(a1 + 4768) = v1447;
        swift_bridgeObjectRetain(v1445);
      }
      v1448 = *(_QWORD *)(a2 + 4784);
      if (v1448 == 1)
      {
        v1449 = *(_OWORD *)(a2 + 4784);
        *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
        *(_OWORD *)(a1 + 4784) = v1449;
      }
      else
      {
        *(_QWORD *)(a1 + 4784) = v1448;
        *(_BYTE *)(a1 + 4792) = *(_BYTE *)(a2 + 4792);
        v1450 = *(_QWORD *)(a2 + 4800);
        *(_BYTE *)(a1 + 4808) = *(_BYTE *)(a2 + 4808);
        *(_QWORD *)(a1 + 4800) = v1450;
        swift_bridgeObjectRetain(v1448);
      }
      v1451 = *(_QWORD *)(a2 + 4816);
      if (v1451 == 1)
      {
        v1452 = *(_OWORD *)(a2 + 4816);
        *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
        *(_OWORD *)(a1 + 4816) = v1452;
      }
      else
      {
        *(_QWORD *)(a1 + 4816) = v1451;
        *(_BYTE *)(a1 + 4824) = *(_BYTE *)(a2 + 4824);
        v1453 = *(_QWORD *)(a2 + 4832);
        *(_BYTE *)(a1 + 4840) = *(_BYTE *)(a2 + 4840);
        *(_QWORD *)(a1 + 4832) = v1453;
        swift_bridgeObjectRetain(v1451);
      }
      v1454 = *(_QWORD *)(a2 + 4848);
      if (v1454 == 1)
      {
        v1455 = *(_OWORD *)(a2 + 4848);
        *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
        *(_OWORD *)(a1 + 4848) = v1455;
      }
      else
      {
        *(_QWORD *)(a1 + 4848) = v1454;
        *(_BYTE *)(a1 + 4856) = *(_BYTE *)(a2 + 4856);
        v1456 = *(_QWORD *)(a2 + 4864);
        *(_BYTE *)(a1 + 4872) = *(_BYTE *)(a2 + 4872);
        *(_QWORD *)(a1 + 4864) = v1456;
        swift_bridgeObjectRetain(v1454);
      }
      v1457 = *(_QWORD *)(a2 + 4880);
      if (v1457 == 1)
      {
        v1458 = *(_OWORD *)(a2 + 4880);
        *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
        *(_OWORD *)(a1 + 4880) = v1458;
      }
      else
      {
        *(_QWORD *)(a1 + 4880) = v1457;
        *(_BYTE *)(a1 + 4888) = *(_BYTE *)(a2 + 4888);
        v1459 = *(_QWORD *)(a2 + 4896);
        *(_BYTE *)(a1 + 4904) = *(_BYTE *)(a2 + 4904);
        *(_QWORD *)(a1 + 4896) = v1459;
        swift_bridgeObjectRetain(v1457);
      }
      v1460 = *(_QWORD *)(a2 + 4912);
      if (v1460 == 1)
      {
        v1461 = *(_OWORD *)(a2 + 4912);
        *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
        *(_OWORD *)(a1 + 4912) = v1461;
      }
      else
      {
        *(_QWORD *)(a1 + 4912) = v1460;
        *(_BYTE *)(a1 + 4920) = *(_BYTE *)(a2 + 4920);
        v1462 = *(_QWORD *)(a2 + 4928);
        *(_BYTE *)(a1 + 4936) = *(_BYTE *)(a2 + 4936);
        *(_QWORD *)(a1 + 4928) = v1462;
        swift_bridgeObjectRetain(v1460);
      }
      v1463 = *(_OWORD *)(a2 + 4944);
      *(_BYTE *)(a1 + 4960) = *(_BYTE *)(a2 + 4960);
      *(_OWORD *)(a1 + 4944) = v1463;
      v1464 = *(_BYTE *)(a2 + 4984);
      *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
      *(_BYTE *)(a1 + 4984) = v1464;
      *(_BYTE *)(a1 + 4985) = *(_BYTE *)(a2 + 4985);
      *(_BYTE *)(a1 + 4986) = *(_BYTE *)(a2 + 4986);
      *(_BYTE *)(a1 + 4987) = *(_BYTE *)(a2 + 4987);
      *(_BYTE *)(a1 + 4988) = *(_BYTE *)(a2 + 4988);
      *(_BYTE *)(a1 + 4989) = *(_BYTE *)(a2 + 4989);
      *(_BYTE *)(a1 + 4990) = *(_BYTE *)(a2 + 4990);
      *(_BYTE *)(a1 + 4991) = *(_BYTE *)(a2 + 4991);
      v1465 = *(_QWORD *)(a2 + 4992);
      *(_QWORD *)(a1 + 4992) = v1465;
      v1466 = *(_QWORD *)(a2 + 5000);
      *(_QWORD *)(a1 + 5000) = v1466;
      swift_bridgeObjectRetain(v1465);
      swift_bridgeObjectRetain(v1466);
      goto LABEL_1483;
    }
LABEL_1242:
    memcpy((void *)(a1 + 4176), (const void *)(a2 + 4176), 0x340uLL);
    goto LABEL_1483;
  }
  if (v1386 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 4176));
    goto LABEL_1242;
  }
  v1389 = *(_QWORD *)v1384;
  v1390 = *v1385;
  if (*(_QWORD *)v1384 == 1)
  {
    if (v1390 == 1)
    {
      v1391 = *(_OWORD *)v1385;
      *(_OWORD *)(a1 + 4185) = *(_OWORD *)(a2 + 4185);
      *v1384 = v1391;
    }
    else
    {
      *(_QWORD *)(a1 + 4176) = v1390;
      *(_BYTE *)(a1 + 4184) = v4[3904];
      v1467 = *(_QWORD *)(a2 + 4192);
      *(_BYTE *)(a1 + 4200) = *(_BYTE *)(a2 + 4200);
      *(_QWORD *)(a1 + 4192) = v1467;
      swift_bridgeObjectRetain(v1390);
    }
  }
  else if (v1390 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4176));
    v1395 = *(_OWORD *)(a2 + 4185);
    *v1384 = *(_OWORD *)v1385;
    *(_OWORD *)(a1 + 4185) = v1395;
  }
  else
  {
    *(_QWORD *)(a1 + 4176) = v1390;
    swift_bridgeObjectRetain(v1390);
    swift_bridgeObjectRelease(v1389);
    *(_BYTE *)(a1 + 4184) = v4[3904];
    v1468 = *(_QWORD *)(a2 + 4192);
    *(_BYTE *)(a1 + 4200) = *(_BYTE *)(a2 + 4200);
    *(_QWORD *)(a1 + 4192) = v1468;
  }
  v1469 = (__int128 *)(a1 + 4208);
  v1470 = (__int128 *)(a2 + 4208);
  v1471 = *(_QWORD *)(a1 + 4208);
  v1472 = *(_QWORD *)(a2 + 4208);
  if (v1471 == 1)
  {
    if (v1472 == 1)
    {
      v1473 = *v1470;
      *(_OWORD *)(a1 + 4217) = *(_OWORD *)(a2 + 4217);
      *v1469 = v1473;
    }
    else
    {
      *(_QWORD *)(a1 + 4208) = v1472;
      *(_BYTE *)(a1 + 4216) = v4[3936];
      v1475 = *(_QWORD *)(a2 + 4224);
      *(_BYTE *)(a1 + 4232) = *(_BYTE *)(a2 + 4232);
      *(_QWORD *)(a1 + 4224) = v1475;
      swift_bridgeObjectRetain(v1472);
    }
  }
  else if (v1472 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4208));
    v1474 = *(_OWORD *)(a2 + 4217);
    *v1469 = *v1470;
    *(_OWORD *)(a1 + 4217) = v1474;
  }
  else
  {
    *(_QWORD *)(a1 + 4208) = v1472;
    swift_bridgeObjectRetain(v1472);
    swift_bridgeObjectRelease(v1471);
    *(_BYTE *)(a1 + 4216) = v4[3936];
    v1476 = *(_QWORD *)(a2 + 4224);
    *(_BYTE *)(a1 + 4232) = *(_BYTE *)(a2 + 4232);
    *(_QWORD *)(a1 + 4224) = v1476;
  }
  v1477 = (__int128 *)(a1 + 4240);
  v1478 = (__int128 *)(a2 + 4240);
  v1479 = *(_QWORD *)(a1 + 4240);
  v1480 = *(_QWORD *)(a2 + 4240);
  if (v1479 == 1)
  {
    if (v1480 == 1)
    {
      v1481 = *v1478;
      *(_OWORD *)(a1 + 4249) = *(_OWORD *)(a2 + 4249);
      *v1477 = v1481;
    }
    else
    {
      *(_QWORD *)(a1 + 4240) = v1480;
      *(_BYTE *)(a1 + 4248) = v4[3968];
      v1483 = *(_QWORD *)(a2 + 4256);
      *(_BYTE *)(a1 + 4264) = *(_BYTE *)(a2 + 4264);
      *(_QWORD *)(a1 + 4256) = v1483;
      swift_bridgeObjectRetain(v1480);
    }
  }
  else if (v1480 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4240));
    v1482 = *(_OWORD *)(a2 + 4249);
    *v1477 = *v1478;
    *(_OWORD *)(a1 + 4249) = v1482;
  }
  else
  {
    *(_QWORD *)(a1 + 4240) = v1480;
    swift_bridgeObjectRetain(v1480);
    swift_bridgeObjectRelease(v1479);
    *(_BYTE *)(a1 + 4248) = v4[3968];
    v1484 = *(_QWORD *)(a2 + 4256);
    *(_BYTE *)(a1 + 4264) = *(_BYTE *)(a2 + 4264);
    *(_QWORD *)(a1 + 4256) = v1484;
  }
  v1485 = (__int128 *)(a1 + 4272);
  v1486 = (__int128 *)(a2 + 4272);
  v1487 = *(_QWORD *)(a1 + 4272);
  v1488 = *(_QWORD *)(a2 + 4272);
  if (v1487 == 1)
  {
    if (v1488 == 1)
    {
      v1489 = *v1486;
      *(_OWORD *)(a1 + 4281) = *(_OWORD *)(a2 + 4281);
      *v1485 = v1489;
    }
    else
    {
      *(_QWORD *)(a1 + 4272) = v1488;
      *(_BYTE *)(a1 + 4280) = v4[4000];
      v1491 = *(_QWORD *)(a2 + 4288);
      *(_BYTE *)(a1 + 4296) = *(_BYTE *)(a2 + 4296);
      *(_QWORD *)(a1 + 4288) = v1491;
      swift_bridgeObjectRetain(v1488);
    }
  }
  else if (v1488 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4272));
    v1490 = *(_OWORD *)(a2 + 4281);
    *v1485 = *v1486;
    *(_OWORD *)(a1 + 4281) = v1490;
  }
  else
  {
    *(_QWORD *)(a1 + 4272) = v1488;
    swift_bridgeObjectRetain(v1488);
    swift_bridgeObjectRelease(v1487);
    *(_BYTE *)(a1 + 4280) = v4[4000];
    v1492 = *(_QWORD *)(a2 + 4288);
    *(_BYTE *)(a1 + 4296) = *(_BYTE *)(a2 + 4296);
    *(_QWORD *)(a1 + 4288) = v1492;
  }
  v1493 = (__int128 *)(a1 + 4304);
  v1494 = (__int128 *)(a2 + 4304);
  v1495 = *(_QWORD *)(a1 + 4304);
  v1496 = *(_QWORD *)(a2 + 4304);
  if (v1495 == 1)
  {
    if (v1496 == 1)
    {
      v1497 = *v1494;
      *(_OWORD *)(a1 + 4313) = *(_OWORD *)(a2 + 4313);
      *v1493 = v1497;
    }
    else
    {
      *(_QWORD *)(a1 + 4304) = v1496;
      *(_BYTE *)(a1 + 4312) = v4[4032];
      v1499 = *(_QWORD *)(a2 + 4320);
      *(_BYTE *)(a1 + 4328) = *(_BYTE *)(a2 + 4328);
      *(_QWORD *)(a1 + 4320) = v1499;
      swift_bridgeObjectRetain(v1496);
    }
  }
  else if (v1496 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4304));
    v1498 = *(_OWORD *)(a2 + 4313);
    *v1493 = *v1494;
    *(_OWORD *)(a1 + 4313) = v1498;
  }
  else
  {
    *(_QWORD *)(a1 + 4304) = v1496;
    swift_bridgeObjectRetain(v1496);
    swift_bridgeObjectRelease(v1495);
    *(_BYTE *)(a1 + 4312) = v4[4032];
    v1500 = *(_QWORD *)(a2 + 4320);
    *(_BYTE *)(a1 + 4328) = *(_BYTE *)(a2 + 4328);
    *(_QWORD *)(a1 + 4320) = v1500;
  }
  v1501 = (__int128 *)(a1 + 4336);
  v1502 = (__int128 *)(a2 + 4336);
  v1503 = *(_QWORD *)(a1 + 4336);
  v1504 = *(_QWORD *)(a2 + 4336);
  if (v1503 == 1)
  {
    if (v1504 == 1)
    {
      v1505 = *v1502;
      *(_OWORD *)(a1 + 4345) = *(_OWORD *)(a2 + 4345);
      *v1501 = v1505;
    }
    else
    {
      *(_QWORD *)(a1 + 4336) = v1504;
      *(_BYTE *)(a1 + 4344) = v4[4064];
      v1507 = *(_QWORD *)(a2 + 4352);
      *(_BYTE *)(a1 + 4360) = *(_BYTE *)(a2 + 4360);
      *(_QWORD *)(a1 + 4352) = v1507;
      swift_bridgeObjectRetain(v1504);
    }
  }
  else if (v1504 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4336));
    v1506 = *(_OWORD *)(a2 + 4345);
    *v1501 = *v1502;
    *(_OWORD *)(a1 + 4345) = v1506;
  }
  else
  {
    *(_QWORD *)(a1 + 4336) = v1504;
    swift_bridgeObjectRetain(v1504);
    swift_bridgeObjectRelease(v1503);
    *(_BYTE *)(a1 + 4344) = v4[4064];
    v1508 = *(_QWORD *)(a2 + 4352);
    *(_BYTE *)(a1 + 4360) = *(_BYTE *)(a2 + 4360);
    *(_QWORD *)(a1 + 4352) = v1508;
  }
  v1509 = (__int128 *)(a1 + 4368);
  v1510 = (__int128 *)(a2 + 4368);
  v1511 = *(_QWORD *)(a1 + 4368);
  v1512 = *(_QWORD *)(a2 + 4368);
  if (v1511 == 1)
  {
    if (v1512 == 1)
    {
      v1513 = *v1510;
      *(_OWORD *)(a1 + 4377) = *(_OWORD *)(a2 + 4377);
      *v1509 = v1513;
    }
    else
    {
      *(_QWORD *)(a1 + 4368) = v1512;
      *(_BYTE *)(a1 + 4376) = *v1108;
      v1515 = *(_QWORD *)(a2 + 4384);
      *(_BYTE *)(a1 + 4392) = *(_BYTE *)(a2 + 4392);
      *(_QWORD *)(a1 + 4384) = v1515;
      swift_bridgeObjectRetain(v1512);
    }
  }
  else if (v1512 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4368));
    v1514 = *(_OWORD *)(a2 + 4377);
    *v1509 = *v1510;
    *(_OWORD *)(a1 + 4377) = v1514;
  }
  else
  {
    *(_QWORD *)(a1 + 4368) = v1512;
    swift_bridgeObjectRetain(v1512);
    swift_bridgeObjectRelease(v1511);
    *(_BYTE *)(a1 + 4376) = *v1108;
    v1516 = *(_QWORD *)(a2 + 4384);
    *(_BYTE *)(a1 + 4392) = *(_BYTE *)(a2 + 4392);
    *(_QWORD *)(a1 + 4384) = v1516;
  }
  v1517 = (__int128 *)(a1 + 4400);
  v1518 = (__int128 *)(a2 + 4400);
  v1519 = *(_QWORD *)(a1 + 4400);
  v1520 = *(_QWORD *)(a2 + 4400);
  if (v1519 == 1)
  {
    if (v1520 == 1)
    {
      v1521 = *v1518;
      *(_OWORD *)(a1 + 4409) = *(_OWORD *)(a2 + 4409);
      *v1517 = v1521;
    }
    else
    {
      *(_QWORD *)(a1 + 4400) = v1520;
      *(_BYTE *)(a1 + 4408) = *(_BYTE *)(a2 + 4408);
      v1523 = *(_QWORD *)(a2 + 4416);
      *(_BYTE *)(a1 + 4424) = *(_BYTE *)(a2 + 4424);
      *(_QWORD *)(a1 + 4416) = v1523;
      swift_bridgeObjectRetain(v1520);
    }
  }
  else if (v1520 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4400));
    v1522 = *(_OWORD *)(a2 + 4409);
    *v1517 = *v1518;
    *(_OWORD *)(a1 + 4409) = v1522;
  }
  else
  {
    *(_QWORD *)(a1 + 4400) = v1520;
    swift_bridgeObjectRetain(v1520);
    swift_bridgeObjectRelease(v1519);
    *(_BYTE *)(a1 + 4408) = *(_BYTE *)(a2 + 4408);
    v1524 = *(_QWORD *)(a2 + 4416);
    *(_BYTE *)(a1 + 4424) = *(_BYTE *)(a2 + 4424);
    *(_QWORD *)(a1 + 4416) = v1524;
  }
  v1525 = (__int128 *)(a1 + 4432);
  v1526 = (__int128 *)(a2 + 4432);
  v1527 = *(_QWORD *)(a1 + 4432);
  v1528 = *(_QWORD *)(a2 + 4432);
  if (v1527 == 1)
  {
    if (v1528 == 1)
    {
      v1529 = *v1526;
      *(_OWORD *)(a1 + 4441) = *(_OWORD *)(a2 + 4441);
      *v1525 = v1529;
    }
    else
    {
      *(_QWORD *)(a1 + 4432) = v1528;
      *(_BYTE *)(a1 + 4440) = *(_BYTE *)(a2 + 4440);
      v1531 = *(_QWORD *)(a2 + 4448);
      *(_BYTE *)(a1 + 4456) = *(_BYTE *)(a2 + 4456);
      *(_QWORD *)(a1 + 4448) = v1531;
      swift_bridgeObjectRetain(v1528);
    }
  }
  else if (v1528 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4432));
    v1530 = *(_OWORD *)(a2 + 4441);
    *v1525 = *v1526;
    *(_OWORD *)(a1 + 4441) = v1530;
  }
  else
  {
    *(_QWORD *)(a1 + 4432) = v1528;
    swift_bridgeObjectRetain(v1528);
    swift_bridgeObjectRelease(v1527);
    *(_BYTE *)(a1 + 4440) = *(_BYTE *)(a2 + 4440);
    v1532 = *(_QWORD *)(a2 + 4448);
    *(_BYTE *)(a1 + 4456) = *(_BYTE *)(a2 + 4456);
    *(_QWORD *)(a1 + 4448) = v1532;
  }
  v1533 = (__int128 *)(a1 + 4464);
  v1534 = (__int128 *)(a2 + 4464);
  v1535 = *(_QWORD *)(a1 + 4464);
  v1536 = *(_QWORD *)(a2 + 4464);
  if (v1535 == 1)
  {
    if (v1536 == 1)
    {
      v1537 = *v1534;
      *(_OWORD *)(a1 + 4473) = *(_OWORD *)(a2 + 4473);
      *v1533 = v1537;
    }
    else
    {
      *(_QWORD *)(a1 + 4464) = v1536;
      *(_BYTE *)(a1 + 4472) = *(_BYTE *)(a2 + 4472);
      v1539 = *(_QWORD *)(a2 + 4480);
      *(_BYTE *)(a1 + 4488) = *(_BYTE *)(a2 + 4488);
      *(_QWORD *)(a1 + 4480) = v1539;
      swift_bridgeObjectRetain(v1536);
    }
  }
  else if (v1536 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4464));
    v1538 = *(_OWORD *)(a2 + 4473);
    *v1533 = *v1534;
    *(_OWORD *)(a1 + 4473) = v1538;
  }
  else
  {
    *(_QWORD *)(a1 + 4464) = v1536;
    swift_bridgeObjectRetain(v1536);
    swift_bridgeObjectRelease(v1535);
    *(_BYTE *)(a1 + 4472) = *(_BYTE *)(a2 + 4472);
    v1540 = *(_QWORD *)(a2 + 4480);
    *(_BYTE *)(a1 + 4488) = *(_BYTE *)(a2 + 4488);
    *(_QWORD *)(a1 + 4480) = v1540;
  }
  v1541 = (__int128 *)(a1 + 4496);
  v1542 = (__int128 *)(a2 + 4496);
  v1543 = *(_QWORD *)(a1 + 4496);
  v1544 = *(_QWORD *)(a2 + 4496);
  if (v1543 == 1)
  {
    if (v1544 == 1)
    {
      v1545 = *v1542;
      *(_OWORD *)(a1 + 4505) = *(_OWORD *)(a2 + 4505);
      *v1541 = v1545;
    }
    else
    {
      *(_QWORD *)(a1 + 4496) = v1544;
      *(_BYTE *)(a1 + 4504) = *(_BYTE *)(a2 + 4504);
      v1547 = *(_QWORD *)(a2 + 4512);
      *(_BYTE *)(a1 + 4520) = *(_BYTE *)(a2 + 4520);
      *(_QWORD *)(a1 + 4512) = v1547;
      swift_bridgeObjectRetain(v1544);
    }
  }
  else if (v1544 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4496));
    v1546 = *(_OWORD *)(a2 + 4505);
    *v1541 = *v1542;
    *(_OWORD *)(a1 + 4505) = v1546;
  }
  else
  {
    *(_QWORD *)(a1 + 4496) = v1544;
    swift_bridgeObjectRetain(v1544);
    swift_bridgeObjectRelease(v1543);
    *(_BYTE *)(a1 + 4504) = *(_BYTE *)(a2 + 4504);
    v1548 = *(_QWORD *)(a2 + 4512);
    *(_BYTE *)(a1 + 4520) = *(_BYTE *)(a2 + 4520);
    *(_QWORD *)(a1 + 4512) = v1548;
  }
  v1549 = (__int128 *)(a1 + 4528);
  v1550 = (__int128 *)(a2 + 4528);
  v1551 = *(_QWORD *)(a1 + 4528);
  v1552 = *(_QWORD *)(a2 + 4528);
  if (v1551 == 1)
  {
    if (v1552 == 1)
    {
      v1553 = *v1550;
      *(_OWORD *)(a1 + 4537) = *(_OWORD *)(a2 + 4537);
      *v1549 = v1553;
    }
    else
    {
      *(_QWORD *)(a1 + 4528) = v1552;
      *(_BYTE *)(a1 + 4536) = *(_BYTE *)(a2 + 4536);
      v1555 = *(_QWORD *)(a2 + 4544);
      *(_BYTE *)(a1 + 4552) = *(_BYTE *)(a2 + 4552);
      *(_QWORD *)(a1 + 4544) = v1555;
      swift_bridgeObjectRetain(v1552);
    }
  }
  else if (v1552 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4528));
    v1554 = *(_OWORD *)(a2 + 4537);
    *v1549 = *v1550;
    *(_OWORD *)(a1 + 4537) = v1554;
  }
  else
  {
    *(_QWORD *)(a1 + 4528) = v1552;
    swift_bridgeObjectRetain(v1552);
    swift_bridgeObjectRelease(v1551);
    *(_BYTE *)(a1 + 4536) = *(_BYTE *)(a2 + 4536);
    v1556 = *(_QWORD *)(a2 + 4544);
    *(_BYTE *)(a1 + 4552) = *(_BYTE *)(a2 + 4552);
    *(_QWORD *)(a1 + 4544) = v1556;
  }
  v1557 = (__int128 *)(a1 + 4560);
  v1558 = (__int128 *)(a2 + 4560);
  v1559 = *(_QWORD *)(a1 + 4560);
  v1560 = *(_QWORD *)(a2 + 4560);
  if (v1559 == 1)
  {
    if (v1560 == 1)
    {
      v1561 = *v1558;
      *(_OWORD *)(a1 + 4569) = *(_OWORD *)(a2 + 4569);
      *v1557 = v1561;
    }
    else
    {
      *(_QWORD *)(a1 + 4560) = v1560;
      *(_BYTE *)(a1 + 4568) = *(_BYTE *)(a2 + 4568);
      v1563 = *(_QWORD *)(a2 + 4576);
      *(_BYTE *)(a1 + 4584) = *(_BYTE *)(a2 + 4584);
      *(_QWORD *)(a1 + 4576) = v1563;
      swift_bridgeObjectRetain(v1560);
    }
  }
  else if (v1560 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4560));
    v1562 = *(_OWORD *)(a2 + 4569);
    *v1557 = *v1558;
    *(_OWORD *)(a1 + 4569) = v1562;
  }
  else
  {
    *(_QWORD *)(a1 + 4560) = v1560;
    swift_bridgeObjectRetain(v1560);
    swift_bridgeObjectRelease(v1559);
    *(_BYTE *)(a1 + 4568) = *(_BYTE *)(a2 + 4568);
    v1564 = *(_QWORD *)(a2 + 4576);
    *(_BYTE *)(a1 + 4584) = *(_BYTE *)(a2 + 4584);
    *(_QWORD *)(a1 + 4576) = v1564;
  }
  v1565 = (__int128 *)(a1 + 4592);
  v1566 = (__int128 *)(a2 + 4592);
  v1567 = *(_QWORD *)(a1 + 4592);
  v1568 = *(_QWORD *)(a2 + 4592);
  if (v1567 == 1)
  {
    if (v1568 == 1)
    {
      v1569 = *v1566;
      *(_OWORD *)(a1 + 4601) = *(_OWORD *)(a2 + 4601);
      *v1565 = v1569;
    }
    else
    {
      *(_QWORD *)(a1 + 4592) = v1568;
      *(_BYTE *)(a1 + 4600) = *(_BYTE *)(a2 + 4600);
      v1571 = *(_QWORD *)(a2 + 4608);
      *(_BYTE *)(a1 + 4616) = *(_BYTE *)(a2 + 4616);
      *(_QWORD *)(a1 + 4608) = v1571;
      swift_bridgeObjectRetain(v1568);
    }
  }
  else if (v1568 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4592));
    v1570 = *(_OWORD *)(a2 + 4601);
    *v1565 = *v1566;
    *(_OWORD *)(a1 + 4601) = v1570;
  }
  else
  {
    *(_QWORD *)(a1 + 4592) = v1568;
    swift_bridgeObjectRetain(v1568);
    swift_bridgeObjectRelease(v1567);
    *(_BYTE *)(a1 + 4600) = *(_BYTE *)(a2 + 4600);
    v1572 = *(_QWORD *)(a2 + 4608);
    *(_BYTE *)(a1 + 4616) = *(_BYTE *)(a2 + 4616);
    *(_QWORD *)(a1 + 4608) = v1572;
  }
  v1573 = (__int128 *)(a1 + 4624);
  v1574 = (__int128 *)(a2 + 4624);
  v1575 = *(_QWORD *)(a1 + 4624);
  v1576 = *(_QWORD *)(a2 + 4624);
  if (v1575 == 1)
  {
    if (v1576 == 1)
    {
      v1577 = *v1574;
      *(_OWORD *)(a1 + 4633) = *(_OWORD *)(a2 + 4633);
      *v1573 = v1577;
    }
    else
    {
      *(_QWORD *)(a1 + 4624) = v1576;
      *(_BYTE *)(a1 + 4632) = *(_BYTE *)(a2 + 4632);
      v1579 = *(_QWORD *)(a2 + 4640);
      *(_BYTE *)(a1 + 4648) = *(_BYTE *)(a2 + 4648);
      *(_QWORD *)(a1 + 4640) = v1579;
      swift_bridgeObjectRetain(v1576);
    }
  }
  else if (v1576 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4624));
    v1578 = *(_OWORD *)(a2 + 4633);
    *v1573 = *v1574;
    *(_OWORD *)(a1 + 4633) = v1578;
  }
  else
  {
    *(_QWORD *)(a1 + 4624) = v1576;
    swift_bridgeObjectRetain(v1576);
    swift_bridgeObjectRelease(v1575);
    *(_BYTE *)(a1 + 4632) = *(_BYTE *)(a2 + 4632);
    v1580 = *(_QWORD *)(a2 + 4640);
    *(_BYTE *)(a1 + 4648) = *(_BYTE *)(a2 + 4648);
    *(_QWORD *)(a1 + 4640) = v1580;
  }
  v1581 = (__int128 *)(a1 + 4656);
  v1582 = (__int128 *)(a2 + 4656);
  v1583 = *(_QWORD *)(a1 + 4656);
  v1584 = *(_QWORD *)(a2 + 4656);
  if (v1583 == 1)
  {
    if (v1584 == 1)
    {
      v1585 = *v1582;
      *(_OWORD *)(a1 + 4665) = *(_OWORD *)(a2 + 4665);
      *v1581 = v1585;
    }
    else
    {
      *(_QWORD *)(a1 + 4656) = v1584;
      *(_BYTE *)(a1 + 4664) = *(_BYTE *)(a2 + 4664);
      v1587 = *(_QWORD *)(a2 + 4672);
      *(_BYTE *)(a1 + 4680) = *(_BYTE *)(a2 + 4680);
      *(_QWORD *)(a1 + 4672) = v1587;
      swift_bridgeObjectRetain(v1584);
    }
  }
  else if (v1584 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4656));
    v1586 = *(_OWORD *)(a2 + 4665);
    *v1581 = *v1582;
    *(_OWORD *)(a1 + 4665) = v1586;
  }
  else
  {
    *(_QWORD *)(a1 + 4656) = v1584;
    swift_bridgeObjectRetain(v1584);
    swift_bridgeObjectRelease(v1583);
    *(_BYTE *)(a1 + 4664) = *(_BYTE *)(a2 + 4664);
    v1588 = *(_QWORD *)(a2 + 4672);
    *(_BYTE *)(a1 + 4680) = *(_BYTE *)(a2 + 4680);
    *(_QWORD *)(a1 + 4672) = v1588;
  }
  v1589 = (__int128 *)(a1 + 4688);
  v1590 = (__int128 *)(a2 + 4688);
  v1591 = *(_QWORD *)(a1 + 4688);
  v1592 = *(_QWORD *)(a2 + 4688);
  if (v1591 == 1)
  {
    if (v1592 == 1)
    {
      v1593 = *v1590;
      *(_OWORD *)(a1 + 4697) = *(_OWORD *)(a2 + 4697);
      *v1589 = v1593;
    }
    else
    {
      *(_QWORD *)(a1 + 4688) = v1592;
      *(_BYTE *)(a1 + 4696) = *(_BYTE *)(a2 + 4696);
      v1595 = *(_QWORD *)(a2 + 4704);
      *(_BYTE *)(a1 + 4712) = *(_BYTE *)(a2 + 4712);
      *(_QWORD *)(a1 + 4704) = v1595;
      swift_bridgeObjectRetain(v1592);
    }
  }
  else if (v1592 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4688));
    v1594 = *(_OWORD *)(a2 + 4697);
    *v1589 = *v1590;
    *(_OWORD *)(a1 + 4697) = v1594;
  }
  else
  {
    *(_QWORD *)(a1 + 4688) = v1592;
    swift_bridgeObjectRetain(v1592);
    swift_bridgeObjectRelease(v1591);
    *(_BYTE *)(a1 + 4696) = *(_BYTE *)(a2 + 4696);
    v1596 = *(_QWORD *)(a2 + 4704);
    *(_BYTE *)(a1 + 4712) = *(_BYTE *)(a2 + 4712);
    *(_QWORD *)(a1 + 4704) = v1596;
  }
  v1597 = (__int128 *)(a1 + 4720);
  v1598 = (__int128 *)(a2 + 4720);
  v1599 = *(_QWORD *)(a1 + 4720);
  v1600 = *(_QWORD *)(a2 + 4720);
  if (v1599 == 1)
  {
    if (v1600 == 1)
    {
      v1601 = *v1598;
      *(_OWORD *)(a1 + 4729) = *(_OWORD *)(a2 + 4729);
      *v1597 = v1601;
    }
    else
    {
      *(_QWORD *)(a1 + 4720) = v1600;
      *(_BYTE *)(a1 + 4728) = *(_BYTE *)(a2 + 4728);
      v1603 = *(_QWORD *)(a2 + 4736);
      *(_BYTE *)(a1 + 4744) = *(_BYTE *)(a2 + 4744);
      *(_QWORD *)(a1 + 4736) = v1603;
      swift_bridgeObjectRetain(v1600);
    }
  }
  else if (v1600 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4720));
    v1602 = *(_OWORD *)(a2 + 4729);
    *v1597 = *v1598;
    *(_OWORD *)(a1 + 4729) = v1602;
  }
  else
  {
    *(_QWORD *)(a1 + 4720) = v1600;
    swift_bridgeObjectRetain(v1600);
    swift_bridgeObjectRelease(v1599);
    *(_BYTE *)(a1 + 4728) = *(_BYTE *)(a2 + 4728);
    v1604 = *(_QWORD *)(a2 + 4736);
    *(_BYTE *)(a1 + 4744) = *(_BYTE *)(a2 + 4744);
    *(_QWORD *)(a1 + 4736) = v1604;
  }
  v1605 = (__int128 *)(a1 + 4752);
  v1606 = (__int128 *)(a2 + 4752);
  v1607 = *(_QWORD *)(a1 + 4752);
  v1608 = *(_QWORD *)(a2 + 4752);
  if (v1607 == 1)
  {
    if (v1608 == 1)
    {
      v1609 = *v1606;
      *(_OWORD *)(a1 + 4761) = *(_OWORD *)(a2 + 4761);
      *v1605 = v1609;
    }
    else
    {
      *(_QWORD *)(a1 + 4752) = v1608;
      *(_BYTE *)(a1 + 4760) = *(_BYTE *)(a2 + 4760);
      v1611 = *(_QWORD *)(a2 + 4768);
      *(_BYTE *)(a1 + 4776) = *(_BYTE *)(a2 + 4776);
      *(_QWORD *)(a1 + 4768) = v1611;
      swift_bridgeObjectRetain(v1608);
    }
  }
  else if (v1608 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4752));
    v1610 = *(_OWORD *)(a2 + 4761);
    *v1605 = *v1606;
    *(_OWORD *)(a1 + 4761) = v1610;
  }
  else
  {
    *(_QWORD *)(a1 + 4752) = v1608;
    swift_bridgeObjectRetain(v1608);
    swift_bridgeObjectRelease(v1607);
    *(_BYTE *)(a1 + 4760) = *(_BYTE *)(a2 + 4760);
    v1612 = *(_QWORD *)(a2 + 4768);
    *(_BYTE *)(a1 + 4776) = *(_BYTE *)(a2 + 4776);
    *(_QWORD *)(a1 + 4768) = v1612;
  }
  v1613 = (__int128 *)(a1 + 4784);
  v1614 = (__int128 *)(a2 + 4784);
  v1615 = *(_QWORD *)(a1 + 4784);
  v1616 = *(_QWORD *)(a2 + 4784);
  if (v1615 == 1)
  {
    if (v1616 == 1)
    {
      v1617 = *v1614;
      *(_OWORD *)(a1 + 4793) = *(_OWORD *)(a2 + 4793);
      *v1613 = v1617;
    }
    else
    {
      *(_QWORD *)(a1 + 4784) = v1616;
      *(_BYTE *)(a1 + 4792) = *(_BYTE *)(a2 + 4792);
      v1619 = *(_QWORD *)(a2 + 4800);
      *(_BYTE *)(a1 + 4808) = *(_BYTE *)(a2 + 4808);
      *(_QWORD *)(a1 + 4800) = v1619;
      swift_bridgeObjectRetain(v1616);
    }
  }
  else if (v1616 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4784));
    v1618 = *(_OWORD *)(a2 + 4793);
    *v1613 = *v1614;
    *(_OWORD *)(a1 + 4793) = v1618;
  }
  else
  {
    *(_QWORD *)(a1 + 4784) = v1616;
    swift_bridgeObjectRetain(v1616);
    swift_bridgeObjectRelease(v1615);
    *(_BYTE *)(a1 + 4792) = *(_BYTE *)(a2 + 4792);
    v1620 = *(_QWORD *)(a2 + 4800);
    *(_BYTE *)(a1 + 4808) = *(_BYTE *)(a2 + 4808);
    *(_QWORD *)(a1 + 4800) = v1620;
  }
  v1621 = (__int128 *)(a1 + 4816);
  v1622 = (__int128 *)(a2 + 4816);
  v1623 = *(_QWORD *)(a1 + 4816);
  v1624 = *(_QWORD *)(a2 + 4816);
  if (v1623 == 1)
  {
    if (v1624 == 1)
    {
      v1625 = *v1622;
      *(_OWORD *)(a1 + 4825) = *(_OWORD *)(a2 + 4825);
      *v1621 = v1625;
    }
    else
    {
      *(_QWORD *)(a1 + 4816) = v1624;
      *(_BYTE *)(a1 + 4824) = *(_BYTE *)(a2 + 4824);
      v1627 = *(_QWORD *)(a2 + 4832);
      *(_BYTE *)(a1 + 4840) = *(_BYTE *)(a2 + 4840);
      *(_QWORD *)(a1 + 4832) = v1627;
      swift_bridgeObjectRetain(v1624);
    }
  }
  else if (v1624 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4816));
    v1626 = *(_OWORD *)(a2 + 4825);
    *v1621 = *v1622;
    *(_OWORD *)(a1 + 4825) = v1626;
  }
  else
  {
    *(_QWORD *)(a1 + 4816) = v1624;
    swift_bridgeObjectRetain(v1624);
    swift_bridgeObjectRelease(v1623);
    *(_BYTE *)(a1 + 4824) = *(_BYTE *)(a2 + 4824);
    v1628 = *(_QWORD *)(a2 + 4832);
    *(_BYTE *)(a1 + 4840) = *(_BYTE *)(a2 + 4840);
    *(_QWORD *)(a1 + 4832) = v1628;
  }
  v1629 = (__int128 *)(a1 + 4848);
  v1630 = (__int128 *)(a2 + 4848);
  v1631 = *(_QWORD *)(a1 + 4848);
  v1632 = *(_QWORD *)(a2 + 4848);
  if (v1631 == 1)
  {
    if (v1632 == 1)
    {
      v1633 = *v1630;
      *(_OWORD *)(a1 + 4857) = *(_OWORD *)(a2 + 4857);
      *v1629 = v1633;
    }
    else
    {
      *(_QWORD *)(a1 + 4848) = v1632;
      *(_BYTE *)(a1 + 4856) = *(_BYTE *)(a2 + 4856);
      v1635 = *(_QWORD *)(a2 + 4864);
      *(_BYTE *)(a1 + 4872) = *(_BYTE *)(a2 + 4872);
      *(_QWORD *)(a1 + 4864) = v1635;
      swift_bridgeObjectRetain(v1632);
    }
  }
  else if (v1632 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4848));
    v1634 = *(_OWORD *)(a2 + 4857);
    *v1629 = *v1630;
    *(_OWORD *)(a1 + 4857) = v1634;
  }
  else
  {
    *(_QWORD *)(a1 + 4848) = v1632;
    swift_bridgeObjectRetain(v1632);
    swift_bridgeObjectRelease(v1631);
    *(_BYTE *)(a1 + 4856) = *(_BYTE *)(a2 + 4856);
    v1636 = *(_QWORD *)(a2 + 4864);
    *(_BYTE *)(a1 + 4872) = *(_BYTE *)(a2 + 4872);
    *(_QWORD *)(a1 + 4864) = v1636;
  }
  v1637 = (__int128 *)(a1 + 4880);
  v1638 = (__int128 *)(a2 + 4880);
  v1639 = *(_QWORD *)(a1 + 4880);
  v1640 = *(_QWORD *)(a2 + 4880);
  if (v1639 == 1)
  {
    if (v1640 == 1)
    {
      v1641 = *v1638;
      *(_OWORD *)(a1 + 4889) = *(_OWORD *)(a2 + 4889);
      *v1637 = v1641;
    }
    else
    {
      *(_QWORD *)(a1 + 4880) = v1640;
      *(_BYTE *)(a1 + 4888) = *(_BYTE *)(a2 + 4888);
      v1643 = *(_QWORD *)(a2 + 4896);
      *(_BYTE *)(a1 + 4904) = *(_BYTE *)(a2 + 4904);
      *(_QWORD *)(a1 + 4896) = v1643;
      swift_bridgeObjectRetain(v1640);
    }
  }
  else if (v1640 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4880));
    v1642 = *(_OWORD *)(a2 + 4889);
    *v1637 = *v1638;
    *(_OWORD *)(a1 + 4889) = v1642;
  }
  else
  {
    *(_QWORD *)(a1 + 4880) = v1640;
    swift_bridgeObjectRetain(v1640);
    swift_bridgeObjectRelease(v1639);
    *(_BYTE *)(a1 + 4888) = *(_BYTE *)(a2 + 4888);
    v1644 = *(_QWORD *)(a2 + 4896);
    *(_BYTE *)(a1 + 4904) = *(_BYTE *)(a2 + 4904);
    *(_QWORD *)(a1 + 4896) = v1644;
  }
  v1645 = (__int128 *)(a1 + 4912);
  v1646 = (__int128 *)(a2 + 4912);
  v1647 = *(_QWORD *)(a1 + 4912);
  v1648 = *(_QWORD *)(a2 + 4912);
  if (v1647 == 1)
  {
    if (v1648 == 1)
    {
      v1649 = *v1646;
      *(_OWORD *)(a1 + 4921) = *(_OWORD *)(a2 + 4921);
      *v1645 = v1649;
    }
    else
    {
      *(_QWORD *)(a1 + 4912) = v1648;
      *(_BYTE *)(a1 + 4920) = *(_BYTE *)(a2 + 4920);
      v1651 = *(_QWORD *)(a2 + 4928);
      *(_BYTE *)(a1 + 4936) = *(_BYTE *)(a2 + 4936);
      *(_QWORD *)(a1 + 4928) = v1651;
      swift_bridgeObjectRetain(v1648);
    }
  }
  else if (v1648 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 4912));
    v1650 = *(_OWORD *)(a2 + 4921);
    *v1645 = *v1646;
    *(_OWORD *)(a1 + 4921) = v1650;
  }
  else
  {
    *(_QWORD *)(a1 + 4912) = v1648;
    swift_bridgeObjectRetain(v1648);
    swift_bridgeObjectRelease(v1647);
    *(_BYTE *)(a1 + 4920) = *(_BYTE *)(a2 + 4920);
    v1652 = *(_QWORD *)(a2 + 4928);
    *(_BYTE *)(a1 + 4936) = *(_BYTE *)(a2 + 4936);
    *(_QWORD *)(a1 + 4928) = v1652;
  }
  v1653 = *(_OWORD *)(a2 + 4944);
  *(_BYTE *)(a1 + 4960) = *(_BYTE *)(a2 + 4960);
  *(_OWORD *)(a1 + 4944) = v1653;
  v1654 = *(_BYTE *)(a2 + 4984);
  *(_OWORD *)(a1 + 4968) = *(_OWORD *)(a2 + 4968);
  *(_BYTE *)(a1 + 4984) = v1654;
  *(_BYTE *)(a1 + 4985) = *(_BYTE *)(a2 + 4985);
  *(_BYTE *)(a1 + 4986) = *(_BYTE *)(a2 + 4986);
  *(_BYTE *)(a1 + 4987) = *(_BYTE *)(a2 + 4987);
  *(_BYTE *)(a1 + 4988) = *(_BYTE *)(a2 + 4988);
  *(_BYTE *)(a1 + 4989) = *(_BYTE *)(a2 + 4989);
  *(_BYTE *)(a1 + 4990) = *(_BYTE *)(a2 + 4990);
  *(_BYTE *)(a1 + 4991) = *(_BYTE *)(a2 + 4991);
  v1655 = *(_QWORD *)(a1 + 4992);
  v1656 = *(_QWORD *)(a2 + 4992);
  *(_QWORD *)(a1 + 4992) = v1656;
  swift_bridgeObjectRetain(v1656);
  swift_bridgeObjectRelease(v1655);
  v1657 = *(_QWORD *)(a1 + 5000);
  v1658 = *(_QWORD *)(a2 + 5000);
  *(_QWORD *)(a1 + 5000) = v1658;
  swift_bridgeObjectRetain(v1658);
  swift_bridgeObjectRelease(v1657);
LABEL_1483:
  v1659 = (_OWORD *)(a1 + 5008);
  v1660 = (uint64_t *)(a2 + 5008);
  v1661 = *(_QWORD *)(a2 + 5824);
  if (*(_QWORD *)(a1 + 5824) == 1)
  {
    if (v1661 != 1)
    {
      v1662 = *v1660;
      if (*v1660 == 1)
      {
        v1663 = *(_OWORD *)v1660;
        *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
        *v1659 = v1663;
      }
      else
      {
        *(_QWORD *)(a1 + 5008) = v1662;
        *(_BYTE *)(a1 + 5016) = *(_BYTE *)(a2 + 5016);
        v1667 = *(_QWORD *)(a2 + 5024);
        *(_BYTE *)(a1 + 5032) = *(_BYTE *)(a2 + 5032);
        *(_QWORD *)(a1 + 5024) = v1667;
        swift_bridgeObjectRetain(v1662);
      }
      v1668 = *(_QWORD *)(a2 + 5040);
      if (v1668 == 1)
      {
        v1669 = *(_OWORD *)(a2 + 5040);
        *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
        *(_OWORD *)(a1 + 5040) = v1669;
      }
      else
      {
        *(_QWORD *)(a1 + 5040) = v1668;
        *(_BYTE *)(a1 + 5048) = *(_BYTE *)(a2 + 5048);
        v1671 = *(_QWORD *)(a2 + 5056);
        *(_BYTE *)(a1 + 5064) = *(_BYTE *)(a2 + 5064);
        *(_QWORD *)(a1 + 5056) = v1671;
        swift_bridgeObjectRetain(v1668);
      }
      v1672 = *(_QWORD *)(a2 + 5072);
      if (v1672 == 1)
      {
        v1673 = *(_OWORD *)(a2 + 5072);
        *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
        *(_OWORD *)(a1 + 5072) = v1673;
      }
      else
      {
        *(_QWORD *)(a1 + 5072) = v1672;
        *(_BYTE *)(a1 + 5080) = *(_BYTE *)(a2 + 5080);
        v1674 = *(_QWORD *)(a2 + 5088);
        *(_BYTE *)(a1 + 5096) = *(_BYTE *)(a2 + 5096);
        *(_QWORD *)(a1 + 5088) = v1674;
        swift_bridgeObjectRetain(v1672);
      }
      v1675 = *(_QWORD *)(a2 + 5104);
      if (v1675 == 1)
      {
        v1676 = *(_OWORD *)(a2 + 5104);
        *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
        *(_OWORD *)(a1 + 5104) = v1676;
      }
      else
      {
        *(_QWORD *)(a1 + 5104) = v1675;
        *(_BYTE *)(a1 + 5112) = *(_BYTE *)(a2 + 5112);
        v1677 = *(_QWORD *)(a2 + 5120);
        *(_BYTE *)(a1 + 5128) = *(_BYTE *)(a2 + 5128);
        *(_QWORD *)(a1 + 5120) = v1677;
        swift_bridgeObjectRetain(v1675);
      }
      v1678 = *(_QWORD *)(a2 + 5136);
      if (v1678 == 1)
      {
        v1679 = *(_OWORD *)(a2 + 5136);
        *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
        *(_OWORD *)(a1 + 5136) = v1679;
      }
      else
      {
        *(_QWORD *)(a1 + 5136) = v1678;
        *(_BYTE *)(a1 + 5144) = *(_BYTE *)(a2 + 5144);
        v1680 = *(_QWORD *)(a2 + 5152);
        *(_BYTE *)(a1 + 5160) = *(_BYTE *)(a2 + 5160);
        *(_QWORD *)(a1 + 5152) = v1680;
        swift_bridgeObjectRetain(v1678);
      }
      v1681 = *(_QWORD *)(a2 + 5168);
      if (v1681 == 1)
      {
        v1682 = *(_OWORD *)(a2 + 5168);
        *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
        *(_OWORD *)(a1 + 5168) = v1682;
      }
      else
      {
        *(_QWORD *)(a1 + 5168) = v1681;
        *(_BYTE *)(a1 + 5176) = *(_BYTE *)(a2 + 5176);
        v1683 = *(_QWORD *)(a2 + 5184);
        *(_BYTE *)(a1 + 5192) = *(_BYTE *)(a2 + 5192);
        *(_QWORD *)(a1 + 5184) = v1683;
        swift_bridgeObjectRetain(v1681);
      }
      v1684 = *(_QWORD *)(a2 + 5200);
      if (v1684 == 1)
      {
        v1685 = *(_OWORD *)(a2 + 5200);
        *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
        *(_OWORD *)(a1 + 5200) = v1685;
      }
      else
      {
        *(_QWORD *)(a1 + 5200) = v1684;
        *(_BYTE *)(a1 + 5208) = *(_BYTE *)(a2 + 5208);
        v1686 = *(_QWORD *)(a2 + 5216);
        *(_BYTE *)(a1 + 5224) = *(_BYTE *)(a2 + 5224);
        *(_QWORD *)(a1 + 5216) = v1686;
        swift_bridgeObjectRetain(v1684);
      }
      v1687 = *(_QWORD *)(a2 + 5232);
      if (v1687 == 1)
      {
        v1688 = *(_OWORD *)(a2 + 5232);
        *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
        *(_OWORD *)(a1 + 5232) = v1688;
      }
      else
      {
        *(_QWORD *)(a1 + 5232) = v1687;
        *(_BYTE *)(a1 + 5240) = *(_BYTE *)(a2 + 5240);
        v1689 = *(_QWORD *)(a2 + 5248);
        *(_BYTE *)(a1 + 5256) = *(_BYTE *)(a2 + 5256);
        *(_QWORD *)(a1 + 5248) = v1689;
        swift_bridgeObjectRetain(v1687);
      }
      v1690 = *(_QWORD *)(a2 + 5264);
      if (v1690 == 1)
      {
        v1691 = *(_OWORD *)(a2 + 5264);
        *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
        *(_OWORD *)(a1 + 5264) = v1691;
      }
      else
      {
        *(_QWORD *)(a1 + 5264) = v1690;
        *(_BYTE *)(a1 + 5272) = *(_BYTE *)(a2 + 5272);
        v1692 = *(_QWORD *)(a2 + 5280);
        *(_BYTE *)(a1 + 5288) = *(_BYTE *)(a2 + 5288);
        *(_QWORD *)(a1 + 5280) = v1692;
        swift_bridgeObjectRetain(v1690);
      }
      v1693 = *(_QWORD *)(a2 + 5296);
      if (v1693 == 1)
      {
        v1694 = *(_OWORD *)(a2 + 5296);
        *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
        *(_OWORD *)(a1 + 5296) = v1694;
      }
      else
      {
        *(_QWORD *)(a1 + 5296) = v1693;
        *(_BYTE *)(a1 + 5304) = *(_BYTE *)(a2 + 5304);
        v1695 = *(_QWORD *)(a2 + 5312);
        *(_BYTE *)(a1 + 5320) = *(_BYTE *)(a2 + 5320);
        *(_QWORD *)(a1 + 5312) = v1695;
        swift_bridgeObjectRetain(v1693);
      }
      v1696 = *(_QWORD *)(a2 + 5328);
      if (v1696 == 1)
      {
        v1697 = *(_OWORD *)(a2 + 5328);
        *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
        *(_OWORD *)(a1 + 5328) = v1697;
      }
      else
      {
        *(_QWORD *)(a1 + 5328) = v1696;
        *(_BYTE *)(a1 + 5336) = *(_BYTE *)(a2 + 5336);
        v1698 = *(_QWORD *)(a2 + 5344);
        *(_BYTE *)(a1 + 5352) = *(_BYTE *)(a2 + 5352);
        *(_QWORD *)(a1 + 5344) = v1698;
        swift_bridgeObjectRetain(v1696);
      }
      v1699 = *(_QWORD *)(a2 + 5360);
      if (v1699 == 1)
      {
        v1700 = *(_OWORD *)(a2 + 5360);
        *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
        *(_OWORD *)(a1 + 5360) = v1700;
      }
      else
      {
        *(_QWORD *)(a1 + 5360) = v1699;
        *(_BYTE *)(a1 + 5368) = *(_BYTE *)(a2 + 5368);
        v1701 = *(_QWORD *)(a2 + 5376);
        *(_BYTE *)(a1 + 5384) = *(_BYTE *)(a2 + 5384);
        *(_QWORD *)(a1 + 5376) = v1701;
        swift_bridgeObjectRetain(v1699);
      }
      v1702 = *(_QWORD *)(a2 + 5392);
      if (v1702 == 1)
      {
        v1703 = *(_OWORD *)(a2 + 5392);
        *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
        *(_OWORD *)(a1 + 5392) = v1703;
      }
      else
      {
        *(_QWORD *)(a1 + 5392) = v1702;
        *(_BYTE *)(a1 + 5400) = *(_BYTE *)(a2 + 5400);
        v1704 = *(_QWORD *)(a2 + 5408);
        *(_BYTE *)(a1 + 5416) = *(_BYTE *)(a2 + 5416);
        *(_QWORD *)(a1 + 5408) = v1704;
        swift_bridgeObjectRetain(v1702);
      }
      v1705 = *(_QWORD *)(a2 + 5424);
      if (v1705 == 1)
      {
        v1706 = *(_OWORD *)(a2 + 5424);
        *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
        *(_OWORD *)(a1 + 5424) = v1706;
      }
      else
      {
        *(_QWORD *)(a1 + 5424) = v1705;
        *(_BYTE *)(a1 + 5432) = *(_BYTE *)(a2 + 5432);
        v1707 = *(_QWORD *)(a2 + 5440);
        *(_BYTE *)(a1 + 5448) = *(_BYTE *)(a2 + 5448);
        *(_QWORD *)(a1 + 5440) = v1707;
        swift_bridgeObjectRetain(v1705);
      }
      v1708 = *(_QWORD *)(a2 + 5456);
      if (v1708 == 1)
      {
        v1709 = *(_OWORD *)(a2 + 5456);
        *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
        *(_OWORD *)(a1 + 5456) = v1709;
      }
      else
      {
        *(_QWORD *)(a1 + 5456) = v1708;
        *(_BYTE *)(a1 + 5464) = *(_BYTE *)(a2 + 5464);
        v1710 = *(_QWORD *)(a2 + 5472);
        *(_BYTE *)(a1 + 5480) = *(_BYTE *)(a2 + 5480);
        *(_QWORD *)(a1 + 5472) = v1710;
        swift_bridgeObjectRetain(v1708);
      }
      v1711 = *(_QWORD *)(a2 + 5488);
      if (v1711 == 1)
      {
        v1712 = *(_OWORD *)(a2 + 5488);
        *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
        *(_OWORD *)(a1 + 5488) = v1712;
      }
      else
      {
        *(_QWORD *)(a1 + 5488) = v1711;
        *(_BYTE *)(a1 + 5496) = *(_BYTE *)(a2 + 5496);
        v1713 = *(_QWORD *)(a2 + 5504);
        *(_BYTE *)(a1 + 5512) = *(_BYTE *)(a2 + 5512);
        *(_QWORD *)(a1 + 5504) = v1713;
        swift_bridgeObjectRetain(v1711);
      }
      v1714 = *(_QWORD *)(a2 + 5520);
      if (v1714 == 1)
      {
        v1715 = *(_OWORD *)(a2 + 5520);
        *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
        *(_OWORD *)(a1 + 5520) = v1715;
      }
      else
      {
        *(_QWORD *)(a1 + 5520) = v1714;
        *(_BYTE *)(a1 + 5528) = *(_BYTE *)(a2 + 5528);
        v1716 = *(_QWORD *)(a2 + 5536);
        *(_BYTE *)(a1 + 5544) = *(_BYTE *)(a2 + 5544);
        *(_QWORD *)(a1 + 5536) = v1716;
        swift_bridgeObjectRetain(v1714);
      }
      v1717 = *(_QWORD *)(a2 + 5552);
      if (v1717 == 1)
      {
        v1718 = *(_OWORD *)(a2 + 5552);
        *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
        *(_OWORD *)(a1 + 5552) = v1718;
      }
      else
      {
        *(_QWORD *)(a1 + 5552) = v1717;
        *(_BYTE *)(a1 + 5560) = *(_BYTE *)(a2 + 5560);
        v1719 = *(_QWORD *)(a2 + 5568);
        *(_BYTE *)(a1 + 5576) = *(_BYTE *)(a2 + 5576);
        *(_QWORD *)(a1 + 5568) = v1719;
        swift_bridgeObjectRetain(v1717);
      }
      v1720 = *(_QWORD *)(a2 + 5584);
      if (v1720 == 1)
      {
        v1721 = *(_OWORD *)(a2 + 5584);
        *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
        *(_OWORD *)(a1 + 5584) = v1721;
      }
      else
      {
        *(_QWORD *)(a1 + 5584) = v1720;
        *(_BYTE *)(a1 + 5592) = *(_BYTE *)(a2 + 5592);
        v1722 = *(_QWORD *)(a2 + 5600);
        *(_BYTE *)(a1 + 5608) = *(_BYTE *)(a2 + 5608);
        *(_QWORD *)(a1 + 5600) = v1722;
        swift_bridgeObjectRetain(v1720);
      }
      v1723 = *(_QWORD *)(a2 + 5616);
      if (v1723 == 1)
      {
        v1724 = *(_OWORD *)(a2 + 5616);
        *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
        *(_OWORD *)(a1 + 5616) = v1724;
      }
      else
      {
        *(_QWORD *)(a1 + 5616) = v1723;
        *(_BYTE *)(a1 + 5624) = *(_BYTE *)(a2 + 5624);
        v1725 = *(_QWORD *)(a2 + 5632);
        *(_BYTE *)(a1 + 5640) = *(_BYTE *)(a2 + 5640);
        *(_QWORD *)(a1 + 5632) = v1725;
        swift_bridgeObjectRetain(v1723);
      }
      v1726 = *(_QWORD *)(a2 + 5648);
      if (v1726 == 1)
      {
        v1727 = *(_OWORD *)(a2 + 5648);
        *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
        *(_OWORD *)(a1 + 5648) = v1727;
      }
      else
      {
        *(_QWORD *)(a1 + 5648) = v1726;
        *(_BYTE *)(a1 + 5656) = *(_BYTE *)(a2 + 5656);
        v1728 = *(_QWORD *)(a2 + 5664);
        *(_BYTE *)(a1 + 5672) = *(_BYTE *)(a2 + 5672);
        *(_QWORD *)(a1 + 5664) = v1728;
        swift_bridgeObjectRetain(v1726);
      }
      v1729 = *(_QWORD *)(a2 + 5680);
      if (v1729 == 1)
      {
        v1730 = *(_OWORD *)(a2 + 5680);
        *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
        *(_OWORD *)(a1 + 5680) = v1730;
      }
      else
      {
        *(_QWORD *)(a1 + 5680) = v1729;
        *(_BYTE *)(a1 + 5688) = *(_BYTE *)(a2 + 5688);
        v1731 = *(_QWORD *)(a2 + 5696);
        *(_BYTE *)(a1 + 5704) = *(_BYTE *)(a2 + 5704);
        *(_QWORD *)(a1 + 5696) = v1731;
        swift_bridgeObjectRetain(v1729);
      }
      v1732 = *(_QWORD *)(a2 + 5712);
      if (v1732 == 1)
      {
        v1733 = *(_OWORD *)(a2 + 5712);
        *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
        *(_OWORD *)(a1 + 5712) = v1733;
      }
      else
      {
        *(_QWORD *)(a1 + 5712) = v1732;
        *(_BYTE *)(a1 + 5720) = *(_BYTE *)(a2 + 5720);
        v1734 = *(_QWORD *)(a2 + 5728);
        *(_BYTE *)(a1 + 5736) = *(_BYTE *)(a2 + 5736);
        *(_QWORD *)(a1 + 5728) = v1734;
        swift_bridgeObjectRetain(v1732);
      }
      v1735 = *(_QWORD *)(a2 + 5744);
      if (v1735 == 1)
      {
        v1736 = *(_OWORD *)(a2 + 5744);
        *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
        *(_OWORD *)(a1 + 5744) = v1736;
      }
      else
      {
        *(_QWORD *)(a1 + 5744) = v1735;
        *(_BYTE *)(a1 + 5752) = *(_BYTE *)(a2 + 5752);
        v1737 = *(_QWORD *)(a2 + 5760);
        *(_BYTE *)(a1 + 5768) = *(_BYTE *)(a2 + 5768);
        *(_QWORD *)(a1 + 5760) = v1737;
        swift_bridgeObjectRetain(v1735);
      }
      v1738 = *(_OWORD *)(a2 + 5776);
      *(_BYTE *)(a1 + 5792) = *(_BYTE *)(a2 + 5792);
      *(_OWORD *)(a1 + 5776) = v1738;
      v1739 = *(_BYTE *)(a2 + 5816);
      *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
      *(_BYTE *)(a1 + 5816) = v1739;
      *(_BYTE *)(a1 + 5817) = *(_BYTE *)(a2 + 5817);
      *(_BYTE *)(a1 + 5818) = *(_BYTE *)(a2 + 5818);
      *(_BYTE *)(a1 + 5819) = *(_BYTE *)(a2 + 5819);
      *(_BYTE *)(a1 + 5820) = *(_BYTE *)(a2 + 5820);
      *(_BYTE *)(a1 + 5821) = *(_BYTE *)(a2 + 5821);
      *(_BYTE *)(a1 + 5822) = *(_BYTE *)(a2 + 5822);
      *(_BYTE *)(a1 + 5823) = *(_BYTE *)(a2 + 5823);
      v1740 = *(_QWORD *)(a2 + 5824);
      *(_QWORD *)(a1 + 5824) = v1740;
      v1741 = *(_QWORD *)(a2 + 5832);
      *(_QWORD *)(a1 + 5832) = v1741;
      swift_bridgeObjectRetain(v1740);
      swift_bridgeObjectRetain(v1741);
      goto LABEL_1730;
    }
LABEL_1489:
    memcpy((void *)(a1 + 5008), (const void *)(a2 + 5008), 0x340uLL);
    goto LABEL_1730;
  }
  if (v1661 == 1)
  {
    sub_100083F28((uint64_t *)(a1 + 5008));
    goto LABEL_1489;
  }
  v1664 = *(_QWORD *)v1659;
  v1665 = *v1660;
  if (*(_QWORD *)v1659 == 1)
  {
    if (v1665 == 1)
    {
      v1666 = *(_OWORD *)v1660;
      *(_OWORD *)(a1 + 5017) = *(_OWORD *)(a2 + 5017);
      *v1659 = v1666;
    }
    else
    {
      *(_QWORD *)(a1 + 5008) = v1665;
      *(_BYTE *)(a1 + 5016) = *(_BYTE *)(a2 + 5016);
      v1742 = *(_QWORD *)(a2 + 5024);
      *(_BYTE *)(a1 + 5032) = *(_BYTE *)(a2 + 5032);
      *(_QWORD *)(a1 + 5024) = v1742;
      swift_bridgeObjectRetain(v1665);
    }
  }
  else if (v1665 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5008));
    v1670 = *(_OWORD *)(a2 + 5017);
    *v1659 = *(_OWORD *)v1660;
    *(_OWORD *)(a1 + 5017) = v1670;
  }
  else
  {
    *(_QWORD *)(a1 + 5008) = v1665;
    swift_bridgeObjectRetain(v1665);
    swift_bridgeObjectRelease(v1664);
    *(_BYTE *)(a1 + 5016) = *(_BYTE *)(a2 + 5016);
    v1743 = *(_QWORD *)(a2 + 5024);
    *(_BYTE *)(a1 + 5032) = *(_BYTE *)(a2 + 5032);
    *(_QWORD *)(a1 + 5024) = v1743;
  }
  v1744 = (__int128 *)(a1 + 5040);
  v1745 = (__int128 *)(a2 + 5040);
  v1746 = *(_QWORD *)(a1 + 5040);
  v1747 = *(_QWORD *)(a2 + 5040);
  if (v1746 == 1)
  {
    if (v1747 == 1)
    {
      v1748 = *v1745;
      *(_OWORD *)(a1 + 5049) = *(_OWORD *)(a2 + 5049);
      *v1744 = v1748;
    }
    else
    {
      *(_QWORD *)(a1 + 5040) = v1747;
      *(_BYTE *)(a1 + 5048) = *(_BYTE *)(a2 + 5048);
      v1750 = *(_QWORD *)(a2 + 5056);
      *(_BYTE *)(a1 + 5064) = *(_BYTE *)(a2 + 5064);
      *(_QWORD *)(a1 + 5056) = v1750;
      swift_bridgeObjectRetain(v1747);
    }
  }
  else if (v1747 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5040));
    v1749 = *(_OWORD *)(a2 + 5049);
    *v1744 = *v1745;
    *(_OWORD *)(a1 + 5049) = v1749;
  }
  else
  {
    *(_QWORD *)(a1 + 5040) = v1747;
    swift_bridgeObjectRetain(v1747);
    swift_bridgeObjectRelease(v1746);
    *(_BYTE *)(a1 + 5048) = *(_BYTE *)(a2 + 5048);
    v1751 = *(_QWORD *)(a2 + 5056);
    *(_BYTE *)(a1 + 5064) = *(_BYTE *)(a2 + 5064);
    *(_QWORD *)(a1 + 5056) = v1751;
  }
  v1752 = (__int128 *)(a1 + 5072);
  v1753 = (__int128 *)(a2 + 5072);
  v1754 = *(_QWORD *)(a1 + 5072);
  v1755 = *(_QWORD *)(a2 + 5072);
  if (v1754 == 1)
  {
    if (v1755 == 1)
    {
      v1756 = *v1753;
      *(_OWORD *)(a1 + 5081) = *(_OWORD *)(a2 + 5081);
      *v1752 = v1756;
    }
    else
    {
      *(_QWORD *)(a1 + 5072) = v1755;
      *(_BYTE *)(a1 + 5080) = *(_BYTE *)(a2 + 5080);
      v1758 = *(_QWORD *)(a2 + 5088);
      *(_BYTE *)(a1 + 5096) = *(_BYTE *)(a2 + 5096);
      *(_QWORD *)(a1 + 5088) = v1758;
      swift_bridgeObjectRetain(v1755);
    }
  }
  else if (v1755 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5072));
    v1757 = *(_OWORD *)(a2 + 5081);
    *v1752 = *v1753;
    *(_OWORD *)(a1 + 5081) = v1757;
  }
  else
  {
    *(_QWORD *)(a1 + 5072) = v1755;
    swift_bridgeObjectRetain(v1755);
    swift_bridgeObjectRelease(v1754);
    *(_BYTE *)(a1 + 5080) = *(_BYTE *)(a2 + 5080);
    v1759 = *(_QWORD *)(a2 + 5088);
    *(_BYTE *)(a1 + 5096) = *(_BYTE *)(a2 + 5096);
    *(_QWORD *)(a1 + 5088) = v1759;
  }
  v1760 = (__int128 *)(a1 + 5104);
  v1761 = (__int128 *)(a2 + 5104);
  v1762 = *(_QWORD *)(a1 + 5104);
  v1763 = *(_QWORD *)(a2 + 5104);
  if (v1762 == 1)
  {
    if (v1763 == 1)
    {
      v1764 = *v1761;
      *(_OWORD *)(a1 + 5113) = *(_OWORD *)(a2 + 5113);
      *v1760 = v1764;
    }
    else
    {
      *(_QWORD *)(a1 + 5104) = v1763;
      *(_BYTE *)(a1 + 5112) = *(_BYTE *)(a2 + 5112);
      v1766 = *(_QWORD *)(a2 + 5120);
      *(_BYTE *)(a1 + 5128) = *(_BYTE *)(a2 + 5128);
      *(_QWORD *)(a1 + 5120) = v1766;
      swift_bridgeObjectRetain(v1763);
    }
  }
  else if (v1763 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5104));
    v1765 = *(_OWORD *)(a2 + 5113);
    *v1760 = *v1761;
    *(_OWORD *)(a1 + 5113) = v1765;
  }
  else
  {
    *(_QWORD *)(a1 + 5104) = v1763;
    swift_bridgeObjectRetain(v1763);
    swift_bridgeObjectRelease(v1762);
    *(_BYTE *)(a1 + 5112) = *(_BYTE *)(a2 + 5112);
    v1767 = *(_QWORD *)(a2 + 5120);
    *(_BYTE *)(a1 + 5128) = *(_BYTE *)(a2 + 5128);
    *(_QWORD *)(a1 + 5120) = v1767;
  }
  v1768 = (__int128 *)(a1 + 5136);
  v1769 = (__int128 *)(a2 + 5136);
  v1770 = *(_QWORD *)(a1 + 5136);
  v1771 = *(_QWORD *)(a2 + 5136);
  if (v1770 == 1)
  {
    if (v1771 == 1)
    {
      v1772 = *v1769;
      *(_OWORD *)(a1 + 5145) = *(_OWORD *)(a2 + 5145);
      *v1768 = v1772;
    }
    else
    {
      *(_QWORD *)(a1 + 5136) = v1771;
      *(_BYTE *)(a1 + 5144) = *(_BYTE *)(a2 + 5144);
      v1774 = *(_QWORD *)(a2 + 5152);
      *(_BYTE *)(a1 + 5160) = *(_BYTE *)(a2 + 5160);
      *(_QWORD *)(a1 + 5152) = v1774;
      swift_bridgeObjectRetain(v1771);
    }
  }
  else if (v1771 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5136));
    v1773 = *(_OWORD *)(a2 + 5145);
    *v1768 = *v1769;
    *(_OWORD *)(a1 + 5145) = v1773;
  }
  else
  {
    *(_QWORD *)(a1 + 5136) = v1771;
    swift_bridgeObjectRetain(v1771);
    swift_bridgeObjectRelease(v1770);
    *(_BYTE *)(a1 + 5144) = *(_BYTE *)(a2 + 5144);
    v1775 = *(_QWORD *)(a2 + 5152);
    *(_BYTE *)(a1 + 5160) = *(_BYTE *)(a2 + 5160);
    *(_QWORD *)(a1 + 5152) = v1775;
  }
  v1776 = (__int128 *)(a1 + 5168);
  v1777 = (__int128 *)(a2 + 5168);
  v1778 = *(_QWORD *)(a1 + 5168);
  v1779 = *(_QWORD *)(a2 + 5168);
  if (v1778 == 1)
  {
    if (v1779 == 1)
    {
      v1780 = *v1777;
      *(_OWORD *)(a1 + 5177) = *(_OWORD *)(a2 + 5177);
      *v1776 = v1780;
    }
    else
    {
      *(_QWORD *)(a1 + 5168) = v1779;
      *(_BYTE *)(a1 + 5176) = *(_BYTE *)(a2 + 5176);
      v1782 = *(_QWORD *)(a2 + 5184);
      *(_BYTE *)(a1 + 5192) = *(_BYTE *)(a2 + 5192);
      *(_QWORD *)(a1 + 5184) = v1782;
      swift_bridgeObjectRetain(v1779);
    }
  }
  else if (v1779 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5168));
    v1781 = *(_OWORD *)(a2 + 5177);
    *v1776 = *v1777;
    *(_OWORD *)(a1 + 5177) = v1781;
  }
  else
  {
    *(_QWORD *)(a1 + 5168) = v1779;
    swift_bridgeObjectRetain(v1779);
    swift_bridgeObjectRelease(v1778);
    *(_BYTE *)(a1 + 5176) = *(_BYTE *)(a2 + 5176);
    v1783 = *(_QWORD *)(a2 + 5184);
    *(_BYTE *)(a1 + 5192) = *(_BYTE *)(a2 + 5192);
    *(_QWORD *)(a1 + 5184) = v1783;
  }
  v1784 = (__int128 *)(a1 + 5200);
  v1785 = (__int128 *)(a2 + 5200);
  v1786 = *(_QWORD *)(a1 + 5200);
  v1787 = *(_QWORD *)(a2 + 5200);
  if (v1786 == 1)
  {
    if (v1787 == 1)
    {
      v1788 = *v1785;
      *(_OWORD *)(a1 + 5209) = *(_OWORD *)(a2 + 5209);
      *v1784 = v1788;
    }
    else
    {
      *(_QWORD *)(a1 + 5200) = v1787;
      *(_BYTE *)(a1 + 5208) = *(_BYTE *)(a2 + 5208);
      v1790 = *(_QWORD *)(a2 + 5216);
      *(_BYTE *)(a1 + 5224) = *(_BYTE *)(a2 + 5224);
      *(_QWORD *)(a1 + 5216) = v1790;
      swift_bridgeObjectRetain(v1787);
    }
  }
  else if (v1787 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5200));
    v1789 = *(_OWORD *)(a2 + 5209);
    *v1784 = *v1785;
    *(_OWORD *)(a1 + 5209) = v1789;
  }
  else
  {
    *(_QWORD *)(a1 + 5200) = v1787;
    swift_bridgeObjectRetain(v1787);
    swift_bridgeObjectRelease(v1786);
    *(_BYTE *)(a1 + 5208) = *(_BYTE *)(a2 + 5208);
    v1791 = *(_QWORD *)(a2 + 5216);
    *(_BYTE *)(a1 + 5224) = *(_BYTE *)(a2 + 5224);
    *(_QWORD *)(a1 + 5216) = v1791;
  }
  v1792 = (__int128 *)(a1 + 5232);
  v1793 = (__int128 *)(a2 + 5232);
  v1794 = *(_QWORD *)(a1 + 5232);
  v1795 = *(_QWORD *)(a2 + 5232);
  if (v1794 == 1)
  {
    if (v1795 == 1)
    {
      v1796 = *v1793;
      *(_OWORD *)(a1 + 5241) = *(_OWORD *)(a2 + 5241);
      *v1792 = v1796;
    }
    else
    {
      *(_QWORD *)(a1 + 5232) = v1795;
      *(_BYTE *)(a1 + 5240) = *(_BYTE *)(a2 + 5240);
      v1798 = *(_QWORD *)(a2 + 5248);
      *(_BYTE *)(a1 + 5256) = *(_BYTE *)(a2 + 5256);
      *(_QWORD *)(a1 + 5248) = v1798;
      swift_bridgeObjectRetain(v1795);
    }
  }
  else if (v1795 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5232));
    v1797 = *(_OWORD *)(a2 + 5241);
    *v1792 = *v1793;
    *(_OWORD *)(a1 + 5241) = v1797;
  }
  else
  {
    *(_QWORD *)(a1 + 5232) = v1795;
    swift_bridgeObjectRetain(v1795);
    swift_bridgeObjectRelease(v1794);
    *(_BYTE *)(a1 + 5240) = *(_BYTE *)(a2 + 5240);
    v1799 = *(_QWORD *)(a2 + 5248);
    *(_BYTE *)(a1 + 5256) = *(_BYTE *)(a2 + 5256);
    *(_QWORD *)(a1 + 5248) = v1799;
  }
  v1800 = (__int128 *)(a1 + 5264);
  v1801 = (__int128 *)(a2 + 5264);
  v1802 = *(_QWORD *)(a1 + 5264);
  v1803 = *(_QWORD *)(a2 + 5264);
  if (v1802 == 1)
  {
    if (v1803 == 1)
    {
      v1804 = *v1801;
      *(_OWORD *)(a1 + 5273) = *(_OWORD *)(a2 + 5273);
      *v1800 = v1804;
    }
    else
    {
      *(_QWORD *)(a1 + 5264) = v1803;
      *(_BYTE *)(a1 + 5272) = *(_BYTE *)(a2 + 5272);
      v1806 = *(_QWORD *)(a2 + 5280);
      *(_BYTE *)(a1 + 5288) = *(_BYTE *)(a2 + 5288);
      *(_QWORD *)(a1 + 5280) = v1806;
      swift_bridgeObjectRetain(v1803);
    }
  }
  else if (v1803 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5264));
    v1805 = *(_OWORD *)(a2 + 5273);
    *v1800 = *v1801;
    *(_OWORD *)(a1 + 5273) = v1805;
  }
  else
  {
    *(_QWORD *)(a1 + 5264) = v1803;
    swift_bridgeObjectRetain(v1803);
    swift_bridgeObjectRelease(v1802);
    *(_BYTE *)(a1 + 5272) = *(_BYTE *)(a2 + 5272);
    v1807 = *(_QWORD *)(a2 + 5280);
    *(_BYTE *)(a1 + 5288) = *(_BYTE *)(a2 + 5288);
    *(_QWORD *)(a1 + 5280) = v1807;
  }
  v1808 = (__int128 *)(a1 + 5296);
  v1809 = (__int128 *)(a2 + 5296);
  v1810 = *(_QWORD *)(a1 + 5296);
  v1811 = *(_QWORD *)(a2 + 5296);
  if (v1810 == 1)
  {
    if (v1811 == 1)
    {
      v1812 = *v1809;
      *(_OWORD *)(a1 + 5305) = *(_OWORD *)(a2 + 5305);
      *v1808 = v1812;
    }
    else
    {
      *(_QWORD *)(a1 + 5296) = v1811;
      *(_BYTE *)(a1 + 5304) = *(_BYTE *)(a2 + 5304);
      v1814 = *(_QWORD *)(a2 + 5312);
      *(_BYTE *)(a1 + 5320) = *(_BYTE *)(a2 + 5320);
      *(_QWORD *)(a1 + 5312) = v1814;
      swift_bridgeObjectRetain(v1811);
    }
  }
  else if (v1811 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5296));
    v1813 = *(_OWORD *)(a2 + 5305);
    *v1808 = *v1809;
    *(_OWORD *)(a1 + 5305) = v1813;
  }
  else
  {
    *(_QWORD *)(a1 + 5296) = v1811;
    swift_bridgeObjectRetain(v1811);
    swift_bridgeObjectRelease(v1810);
    *(_BYTE *)(a1 + 5304) = *(_BYTE *)(a2 + 5304);
    v1815 = *(_QWORD *)(a2 + 5312);
    *(_BYTE *)(a1 + 5320) = *(_BYTE *)(a2 + 5320);
    *(_QWORD *)(a1 + 5312) = v1815;
  }
  v1816 = (__int128 *)(a1 + 5328);
  v1817 = (__int128 *)(a2 + 5328);
  v1818 = *(_QWORD *)(a1 + 5328);
  v1819 = *(_QWORD *)(a2 + 5328);
  if (v1818 == 1)
  {
    if (v1819 == 1)
    {
      v1820 = *v1817;
      *(_OWORD *)(a1 + 5337) = *(_OWORD *)(a2 + 5337);
      *v1816 = v1820;
    }
    else
    {
      *(_QWORD *)(a1 + 5328) = v1819;
      *(_BYTE *)(a1 + 5336) = *(_BYTE *)(a2 + 5336);
      v1822 = *(_QWORD *)(a2 + 5344);
      *(_BYTE *)(a1 + 5352) = *(_BYTE *)(a2 + 5352);
      *(_QWORD *)(a1 + 5344) = v1822;
      swift_bridgeObjectRetain(v1819);
    }
  }
  else if (v1819 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5328));
    v1821 = *(_OWORD *)(a2 + 5337);
    *v1816 = *v1817;
    *(_OWORD *)(a1 + 5337) = v1821;
  }
  else
  {
    *(_QWORD *)(a1 + 5328) = v1819;
    swift_bridgeObjectRetain(v1819);
    swift_bridgeObjectRelease(v1818);
    *(_BYTE *)(a1 + 5336) = *(_BYTE *)(a2 + 5336);
    v1823 = *(_QWORD *)(a2 + 5344);
    *(_BYTE *)(a1 + 5352) = *(_BYTE *)(a2 + 5352);
    *(_QWORD *)(a1 + 5344) = v1823;
  }
  v1824 = (__int128 *)(a1 + 5360);
  v1825 = (__int128 *)(a2 + 5360);
  v1826 = *(_QWORD *)(a1 + 5360);
  v1827 = *(_QWORD *)(a2 + 5360);
  if (v1826 == 1)
  {
    if (v1827 == 1)
    {
      v1828 = *v1825;
      *(_OWORD *)(a1 + 5369) = *(_OWORD *)(a2 + 5369);
      *v1824 = v1828;
    }
    else
    {
      *(_QWORD *)(a1 + 5360) = v1827;
      *(_BYTE *)(a1 + 5368) = *(_BYTE *)(a2 + 5368);
      v1830 = *(_QWORD *)(a2 + 5376);
      *(_BYTE *)(a1 + 5384) = *(_BYTE *)(a2 + 5384);
      *(_QWORD *)(a1 + 5376) = v1830;
      swift_bridgeObjectRetain(v1827);
    }
  }
  else if (v1827 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5360));
    v1829 = *(_OWORD *)(a2 + 5369);
    *v1824 = *v1825;
    *(_OWORD *)(a1 + 5369) = v1829;
  }
  else
  {
    *(_QWORD *)(a1 + 5360) = v1827;
    swift_bridgeObjectRetain(v1827);
    swift_bridgeObjectRelease(v1826);
    *(_BYTE *)(a1 + 5368) = *(_BYTE *)(a2 + 5368);
    v1831 = *(_QWORD *)(a2 + 5376);
    *(_BYTE *)(a1 + 5384) = *(_BYTE *)(a2 + 5384);
    *(_QWORD *)(a1 + 5376) = v1831;
  }
  v1832 = (__int128 *)(a1 + 5392);
  v1833 = (__int128 *)(a2 + 5392);
  v1834 = *(_QWORD *)(a1 + 5392);
  v1835 = *(_QWORD *)(a2 + 5392);
  if (v1834 == 1)
  {
    if (v1835 == 1)
    {
      v1836 = *v1833;
      *(_OWORD *)(a1 + 5401) = *(_OWORD *)(a2 + 5401);
      *v1832 = v1836;
    }
    else
    {
      *(_QWORD *)(a1 + 5392) = v1835;
      *(_BYTE *)(a1 + 5400) = *(_BYTE *)(a2 + 5400);
      v1838 = *(_QWORD *)(a2 + 5408);
      *(_BYTE *)(a1 + 5416) = *(_BYTE *)(a2 + 5416);
      *(_QWORD *)(a1 + 5408) = v1838;
      swift_bridgeObjectRetain(v1835);
    }
  }
  else if (v1835 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5392));
    v1837 = *(_OWORD *)(a2 + 5401);
    *v1832 = *v1833;
    *(_OWORD *)(a1 + 5401) = v1837;
  }
  else
  {
    *(_QWORD *)(a1 + 5392) = v1835;
    swift_bridgeObjectRetain(v1835);
    swift_bridgeObjectRelease(v1834);
    *(_BYTE *)(a1 + 5400) = *(_BYTE *)(a2 + 5400);
    v1839 = *(_QWORD *)(a2 + 5408);
    *(_BYTE *)(a1 + 5416) = *(_BYTE *)(a2 + 5416);
    *(_QWORD *)(a1 + 5408) = v1839;
  }
  v1840 = (__int128 *)(a1 + 5424);
  v1841 = (__int128 *)(a2 + 5424);
  v1842 = *(_QWORD *)(a1 + 5424);
  v1843 = *(_QWORD *)(a2 + 5424);
  if (v1842 == 1)
  {
    if (v1843 == 1)
    {
      v1844 = *v1841;
      *(_OWORD *)(a1 + 5433) = *(_OWORD *)(a2 + 5433);
      *v1840 = v1844;
    }
    else
    {
      *(_QWORD *)(a1 + 5424) = v1843;
      *(_BYTE *)(a1 + 5432) = *(_BYTE *)(a2 + 5432);
      v1846 = *(_QWORD *)(a2 + 5440);
      *(_BYTE *)(a1 + 5448) = *(_BYTE *)(a2 + 5448);
      *(_QWORD *)(a1 + 5440) = v1846;
      swift_bridgeObjectRetain(v1843);
    }
  }
  else if (v1843 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5424));
    v1845 = *(_OWORD *)(a2 + 5433);
    *v1840 = *v1841;
    *(_OWORD *)(a1 + 5433) = v1845;
  }
  else
  {
    *(_QWORD *)(a1 + 5424) = v1843;
    swift_bridgeObjectRetain(v1843);
    swift_bridgeObjectRelease(v1842);
    *(_BYTE *)(a1 + 5432) = *(_BYTE *)(a2 + 5432);
    v1847 = *(_QWORD *)(a2 + 5440);
    *(_BYTE *)(a1 + 5448) = *(_BYTE *)(a2 + 5448);
    *(_QWORD *)(a1 + 5440) = v1847;
  }
  v1848 = (__int128 *)(a1 + 5456);
  v1849 = (__int128 *)(a2 + 5456);
  v1850 = *(_QWORD *)(a1 + 5456);
  v1851 = *(_QWORD *)(a2 + 5456);
  if (v1850 == 1)
  {
    if (v1851 == 1)
    {
      v1852 = *v1849;
      *(_OWORD *)(a1 + 5465) = *(_OWORD *)(a2 + 5465);
      *v1848 = v1852;
    }
    else
    {
      *(_QWORD *)(a1 + 5456) = v1851;
      *(_BYTE *)(a1 + 5464) = *(_BYTE *)(a2 + 5464);
      v1854 = *(_QWORD *)(a2 + 5472);
      *(_BYTE *)(a1 + 5480) = *(_BYTE *)(a2 + 5480);
      *(_QWORD *)(a1 + 5472) = v1854;
      swift_bridgeObjectRetain(v1851);
    }
  }
  else if (v1851 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5456));
    v1853 = *(_OWORD *)(a2 + 5465);
    *v1848 = *v1849;
    *(_OWORD *)(a1 + 5465) = v1853;
  }
  else
  {
    *(_QWORD *)(a1 + 5456) = v1851;
    swift_bridgeObjectRetain(v1851);
    swift_bridgeObjectRelease(v1850);
    *(_BYTE *)(a1 + 5464) = *(_BYTE *)(a2 + 5464);
    v1855 = *(_QWORD *)(a2 + 5472);
    *(_BYTE *)(a1 + 5480) = *(_BYTE *)(a2 + 5480);
    *(_QWORD *)(a1 + 5472) = v1855;
  }
  v1856 = (__int128 *)(a1 + 5488);
  v1857 = (__int128 *)(a2 + 5488);
  v1858 = *(_QWORD *)(a1 + 5488);
  v1859 = *(_QWORD *)(a2 + 5488);
  if (v1858 == 1)
  {
    if (v1859 == 1)
    {
      v1860 = *v1857;
      *(_OWORD *)(a1 + 5497) = *(_OWORD *)(a2 + 5497);
      *v1856 = v1860;
    }
    else
    {
      *(_QWORD *)(a1 + 5488) = v1859;
      *(_BYTE *)(a1 + 5496) = *(_BYTE *)(a2 + 5496);
      v1862 = *(_QWORD *)(a2 + 5504);
      *(_BYTE *)(a1 + 5512) = *(_BYTE *)(a2 + 5512);
      *(_QWORD *)(a1 + 5504) = v1862;
      swift_bridgeObjectRetain(v1859);
    }
  }
  else if (v1859 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5488));
    v1861 = *(_OWORD *)(a2 + 5497);
    *v1856 = *v1857;
    *(_OWORD *)(a1 + 5497) = v1861;
  }
  else
  {
    *(_QWORD *)(a1 + 5488) = v1859;
    swift_bridgeObjectRetain(v1859);
    swift_bridgeObjectRelease(v1858);
    *(_BYTE *)(a1 + 5496) = *(_BYTE *)(a2 + 5496);
    v1863 = *(_QWORD *)(a2 + 5504);
    *(_BYTE *)(a1 + 5512) = *(_BYTE *)(a2 + 5512);
    *(_QWORD *)(a1 + 5504) = v1863;
  }
  v1864 = (__int128 *)(a1 + 5520);
  v1865 = (__int128 *)(a2 + 5520);
  v1866 = *(_QWORD *)(a1 + 5520);
  v1867 = *(_QWORD *)(a2 + 5520);
  if (v1866 == 1)
  {
    if (v1867 == 1)
    {
      v1868 = *v1865;
      *(_OWORD *)(a1 + 5529) = *(_OWORD *)(a2 + 5529);
      *v1864 = v1868;
    }
    else
    {
      *(_QWORD *)(a1 + 5520) = v1867;
      *(_BYTE *)(a1 + 5528) = *(_BYTE *)(a2 + 5528);
      v1870 = *(_QWORD *)(a2 + 5536);
      *(_BYTE *)(a1 + 5544) = *(_BYTE *)(a2 + 5544);
      *(_QWORD *)(a1 + 5536) = v1870;
      swift_bridgeObjectRetain(v1867);
    }
  }
  else if (v1867 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5520));
    v1869 = *(_OWORD *)(a2 + 5529);
    *v1864 = *v1865;
    *(_OWORD *)(a1 + 5529) = v1869;
  }
  else
  {
    *(_QWORD *)(a1 + 5520) = v1867;
    swift_bridgeObjectRetain(v1867);
    swift_bridgeObjectRelease(v1866);
    *(_BYTE *)(a1 + 5528) = *(_BYTE *)(a2 + 5528);
    v1871 = *(_QWORD *)(a2 + 5536);
    *(_BYTE *)(a1 + 5544) = *(_BYTE *)(a2 + 5544);
    *(_QWORD *)(a1 + 5536) = v1871;
  }
  v1872 = (__int128 *)(a1 + 5552);
  v1873 = (__int128 *)(a2 + 5552);
  v1874 = *(_QWORD *)(a1 + 5552);
  v1875 = *(_QWORD *)(a2 + 5552);
  if (v1874 == 1)
  {
    if (v1875 == 1)
    {
      v1876 = *v1873;
      *(_OWORD *)(a1 + 5561) = *(_OWORD *)(a2 + 5561);
      *v1872 = v1876;
    }
    else
    {
      *(_QWORD *)(a1 + 5552) = v1875;
      *(_BYTE *)(a1 + 5560) = *(_BYTE *)(a2 + 5560);
      v1878 = *(_QWORD *)(a2 + 5568);
      *(_BYTE *)(a1 + 5576) = *(_BYTE *)(a2 + 5576);
      *(_QWORD *)(a1 + 5568) = v1878;
      swift_bridgeObjectRetain(v1875);
    }
  }
  else if (v1875 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5552));
    v1877 = *(_OWORD *)(a2 + 5561);
    *v1872 = *v1873;
    *(_OWORD *)(a1 + 5561) = v1877;
  }
  else
  {
    *(_QWORD *)(a1 + 5552) = v1875;
    swift_bridgeObjectRetain(v1875);
    swift_bridgeObjectRelease(v1874);
    *(_BYTE *)(a1 + 5560) = *(_BYTE *)(a2 + 5560);
    v1879 = *(_QWORD *)(a2 + 5568);
    *(_BYTE *)(a1 + 5576) = *(_BYTE *)(a2 + 5576);
    *(_QWORD *)(a1 + 5568) = v1879;
  }
  v1880 = (__int128 *)(a1 + 5584);
  v1881 = (__int128 *)(a2 + 5584);
  v1882 = *(_QWORD *)(a1 + 5584);
  v1883 = *(_QWORD *)(a2 + 5584);
  if (v1882 == 1)
  {
    if (v1883 == 1)
    {
      v1884 = *v1881;
      *(_OWORD *)(a1 + 5593) = *(_OWORD *)(a2 + 5593);
      *v1880 = v1884;
    }
    else
    {
      *(_QWORD *)(a1 + 5584) = v1883;
      *(_BYTE *)(a1 + 5592) = *(_BYTE *)(a2 + 5592);
      v1886 = *(_QWORD *)(a2 + 5600);
      *(_BYTE *)(a1 + 5608) = *(_BYTE *)(a2 + 5608);
      *(_QWORD *)(a1 + 5600) = v1886;
      swift_bridgeObjectRetain(v1883);
    }
  }
  else if (v1883 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5584));
    v1885 = *(_OWORD *)(a2 + 5593);
    *v1880 = *v1881;
    *(_OWORD *)(a1 + 5593) = v1885;
  }
  else
  {
    *(_QWORD *)(a1 + 5584) = v1883;
    swift_bridgeObjectRetain(v1883);
    swift_bridgeObjectRelease(v1882);
    *(_BYTE *)(a1 + 5592) = *(_BYTE *)(a2 + 5592);
    v1887 = *(_QWORD *)(a2 + 5600);
    *(_BYTE *)(a1 + 5608) = *(_BYTE *)(a2 + 5608);
    *(_QWORD *)(a1 + 5600) = v1887;
  }
  v1888 = (__int128 *)(a1 + 5616);
  v1889 = (__int128 *)(a2 + 5616);
  v1890 = *(_QWORD *)(a1 + 5616);
  v1891 = *(_QWORD *)(a2 + 5616);
  if (v1890 == 1)
  {
    if (v1891 == 1)
    {
      v1892 = *v1889;
      *(_OWORD *)(a1 + 5625) = *(_OWORD *)(a2 + 5625);
      *v1888 = v1892;
    }
    else
    {
      *(_QWORD *)(a1 + 5616) = v1891;
      *(_BYTE *)(a1 + 5624) = *(_BYTE *)(a2 + 5624);
      v1894 = *(_QWORD *)(a2 + 5632);
      *(_BYTE *)(a1 + 5640) = *(_BYTE *)(a2 + 5640);
      *(_QWORD *)(a1 + 5632) = v1894;
      swift_bridgeObjectRetain(v1891);
    }
  }
  else if (v1891 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5616));
    v1893 = *(_OWORD *)(a2 + 5625);
    *v1888 = *v1889;
    *(_OWORD *)(a1 + 5625) = v1893;
  }
  else
  {
    *(_QWORD *)(a1 + 5616) = v1891;
    swift_bridgeObjectRetain(v1891);
    swift_bridgeObjectRelease(v1890);
    *(_BYTE *)(a1 + 5624) = *(_BYTE *)(a2 + 5624);
    v1895 = *(_QWORD *)(a2 + 5632);
    *(_BYTE *)(a1 + 5640) = *(_BYTE *)(a2 + 5640);
    *(_QWORD *)(a1 + 5632) = v1895;
  }
  v1896 = (__int128 *)(a1 + 5648);
  v1897 = (__int128 *)(a2 + 5648);
  v1898 = *(_QWORD *)(a1 + 5648);
  v1899 = *(_QWORD *)(a2 + 5648);
  if (v1898 == 1)
  {
    if (v1899 == 1)
    {
      v1900 = *v1897;
      *(_OWORD *)(a1 + 5657) = *(_OWORD *)(a2 + 5657);
      *v1896 = v1900;
    }
    else
    {
      *(_QWORD *)(a1 + 5648) = v1899;
      *(_BYTE *)(a1 + 5656) = *(_BYTE *)(a2 + 5656);
      v1902 = *(_QWORD *)(a2 + 5664);
      *(_BYTE *)(a1 + 5672) = *(_BYTE *)(a2 + 5672);
      *(_QWORD *)(a1 + 5664) = v1902;
      swift_bridgeObjectRetain(v1899);
    }
  }
  else if (v1899 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5648));
    v1901 = *(_OWORD *)(a2 + 5657);
    *v1896 = *v1897;
    *(_OWORD *)(a1 + 5657) = v1901;
  }
  else
  {
    *(_QWORD *)(a1 + 5648) = v1899;
    swift_bridgeObjectRetain(v1899);
    swift_bridgeObjectRelease(v1898);
    *(_BYTE *)(a1 + 5656) = *(_BYTE *)(a2 + 5656);
    v1903 = *(_QWORD *)(a2 + 5664);
    *(_BYTE *)(a1 + 5672) = *(_BYTE *)(a2 + 5672);
    *(_QWORD *)(a1 + 5664) = v1903;
  }
  v1904 = (__int128 *)(a1 + 5680);
  v1905 = (__int128 *)(a2 + 5680);
  v1906 = *(_QWORD *)(a1 + 5680);
  v1907 = *(_QWORD *)(a2 + 5680);
  if (v1906 == 1)
  {
    if (v1907 == 1)
    {
      v1908 = *v1905;
      *(_OWORD *)(a1 + 5689) = *(_OWORD *)(a2 + 5689);
      *v1904 = v1908;
    }
    else
    {
      *(_QWORD *)(a1 + 5680) = v1907;
      *(_BYTE *)(a1 + 5688) = *(_BYTE *)(a2 + 5688);
      v1910 = *(_QWORD *)(a2 + 5696);
      *(_BYTE *)(a1 + 5704) = *(_BYTE *)(a2 + 5704);
      *(_QWORD *)(a1 + 5696) = v1910;
      swift_bridgeObjectRetain(v1907);
    }
  }
  else if (v1907 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5680));
    v1909 = *(_OWORD *)(a2 + 5689);
    *v1904 = *v1905;
    *(_OWORD *)(a1 + 5689) = v1909;
  }
  else
  {
    *(_QWORD *)(a1 + 5680) = v1907;
    swift_bridgeObjectRetain(v1907);
    swift_bridgeObjectRelease(v1906);
    *(_BYTE *)(a1 + 5688) = *(_BYTE *)(a2 + 5688);
    v1911 = *(_QWORD *)(a2 + 5696);
    *(_BYTE *)(a1 + 5704) = *(_BYTE *)(a2 + 5704);
    *(_QWORD *)(a1 + 5696) = v1911;
  }
  v1912 = (__int128 *)(a1 + 5712);
  v1913 = (__int128 *)(a2 + 5712);
  v1914 = *(_QWORD *)(a1 + 5712);
  v1915 = *(_QWORD *)(a2 + 5712);
  if (v1914 == 1)
  {
    if (v1915 == 1)
    {
      v1916 = *v1913;
      *(_OWORD *)(a1 + 5721) = *(_OWORD *)(a2 + 5721);
      *v1912 = v1916;
    }
    else
    {
      *(_QWORD *)(a1 + 5712) = v1915;
      *(_BYTE *)(a1 + 5720) = *(_BYTE *)(a2 + 5720);
      v1918 = *(_QWORD *)(a2 + 5728);
      *(_BYTE *)(a1 + 5736) = *(_BYTE *)(a2 + 5736);
      *(_QWORD *)(a1 + 5728) = v1918;
      swift_bridgeObjectRetain(v1915);
    }
  }
  else if (v1915 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5712));
    v1917 = *(_OWORD *)(a2 + 5721);
    *v1912 = *v1913;
    *(_OWORD *)(a1 + 5721) = v1917;
  }
  else
  {
    *(_QWORD *)(a1 + 5712) = v1915;
    swift_bridgeObjectRetain(v1915);
    swift_bridgeObjectRelease(v1914);
    *(_BYTE *)(a1 + 5720) = *(_BYTE *)(a2 + 5720);
    v1919 = *(_QWORD *)(a2 + 5728);
    *(_BYTE *)(a1 + 5736) = *(_BYTE *)(a2 + 5736);
    *(_QWORD *)(a1 + 5728) = v1919;
  }
  v1920 = (__int128 *)(a1 + 5744);
  v1921 = (__int128 *)(a2 + 5744);
  v1922 = *(_QWORD *)(a1 + 5744);
  v1923 = *(_QWORD *)(a2 + 5744);
  if (v1922 == 1)
  {
    if (v1923 == 1)
    {
      v1924 = *v1921;
      *(_OWORD *)(a1 + 5753) = *(_OWORD *)(a2 + 5753);
      *v1920 = v1924;
    }
    else
    {
      *(_QWORD *)(a1 + 5744) = v1923;
      *(_BYTE *)(a1 + 5752) = *(_BYTE *)(a2 + 5752);
      v1926 = *(_QWORD *)(a2 + 5760);
      *(_BYTE *)(a1 + 5768) = *(_BYTE *)(a2 + 5768);
      *(_QWORD *)(a1 + 5760) = v1926;
      swift_bridgeObjectRetain(v1923);
    }
  }
  else if (v1923 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 5744));
    v1925 = *(_OWORD *)(a2 + 5753);
    *v1920 = *v1921;
    *(_OWORD *)(a1 + 5753) = v1925;
  }
  else
  {
    *(_QWORD *)(a1 + 5744) = v1923;
    swift_bridgeObjectRetain(v1923);
    swift_bridgeObjectRelease(v1922);
    *(_BYTE *)(a1 + 5752) = *(_BYTE *)(a2 + 5752);
    v1927 = *(_QWORD *)(a2 + 5760);
    *(_BYTE *)(a1 + 5768) = *(_BYTE *)(a2 + 5768);
    *(_QWORD *)(a1 + 5760) = v1927;
  }
  v1928 = *(_OWORD *)(a2 + 5776);
  *(_BYTE *)(a1 + 5792) = *(_BYTE *)(a2 + 5792);
  *(_OWORD *)(a1 + 5776) = v1928;
  v1929 = *(_BYTE *)(a2 + 5816);
  *(_OWORD *)(a1 + 5800) = *(_OWORD *)(a2 + 5800);
  *(_BYTE *)(a1 + 5816) = v1929;
  *(_BYTE *)(a1 + 5817) = *(_BYTE *)(a2 + 5817);
  *(_BYTE *)(a1 + 5818) = *(_BYTE *)(a2 + 5818);
  *(_BYTE *)(a1 + 5819) = *(_BYTE *)(a2 + 5819);
  *(_BYTE *)(a1 + 5820) = *(_BYTE *)(a2 + 5820);
  *(_BYTE *)(a1 + 5821) = *(_BYTE *)(a2 + 5821);
  *(_BYTE *)(a1 + 5822) = *(_BYTE *)(a2 + 5822);
  *(_BYTE *)(a1 + 5823) = *(_BYTE *)(a2 + 5823);
  v1930 = *(_QWORD *)(a1 + 5824);
  v1931 = *(_QWORD *)(a2 + 5824);
  *(_QWORD *)(a1 + 5824) = v1931;
  swift_bridgeObjectRetain(v1931);
  swift_bridgeObjectRelease(v1930);
  v1932 = *(_QWORD *)(a1 + 5832);
  v1933 = *(_QWORD *)(a2 + 5832);
  *(_QWORD *)(a1 + 5832) = v1933;
  swift_bridgeObjectRetain(v1933);
  swift_bridgeObjectRelease(v1932);
LABEL_1730:
  v1934 = *(_QWORD *)(a1 + 5840);
  v1935 = *(_QWORD *)(a2 + 5840);
  *(_QWORD *)(a1 + 5840) = v1935;
  swift_bridgeObjectRetain(v1935);
  swift_bridgeObjectRelease(v1934);
  v1936 = *(_BYTE *)(a2 + 5852);
  *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a2 + 5848);
  *(_BYTE *)(a1 + 5852) = v1936;
  v1937 = *(_QWORD *)(a2 + 5856);
  *(_BYTE *)(a1 + 5864) = *(_BYTE *)(a2 + 5864);
  *(_QWORD *)(a1 + 5856) = v1937;
  v1938 = *(_QWORD *)(a2 + 5872);
  *(_BYTE *)(a1 + 5880) = *(_BYTE *)(a2 + 5880);
  *(_QWORD *)(a1 + 5872) = v1938;
  v1939 = *(_QWORD *)(a2 + 5888);
  *(_BYTE *)(a1 + 5896) = *(_BYTE *)(a2 + 5896);
  *(_QWORD *)(a1 + 5888) = v1939;
  v1940 = *(_QWORD *)(a2 + 5904);
  *(_BYTE *)(a1 + 5912) = *(_BYTE *)(a2 + 5912);
  *(_QWORD *)(a1 + 5904) = v1940;
  return a1;
}

_QWORD *sub_100083F00(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t *sub_100083F28(uint64_t *a1)
{
  destroy for IQCriteria(a1);
  return a1;
}

void *initializeWithTake for IQModel(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1719uLL);
}

_QWORD *assignWithTake for IQModel(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  _OWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  _OWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  _OWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;

  v4 = (char *)a1 + 825;
  v5 = a2 + 280;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1 + 2;
  v9 = (_OWORD *)(a2 + 16);
  if (a1[104] == 1)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 832) == 1)
  {
    sub_100083F28(a1 + 2);
LABEL_4:
    memcpy(a1 + 2, (const void *)(a2 + 16), 0x340uLL);
    goto LABEL_126;
  }
  v10 = *v8;
  if (*v8 == 1)
    goto LABEL_8;
  if (*(_QWORD *)v9 == 1)
  {
    sub_100083F00(a1 + 2);
LABEL_8:
    *(_OWORD *)v8 = *v9;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_10;
  }
  a1[2] = *(_QWORD *)v9;
  swift_bridgeObjectRelease(v10);
  *((_BYTE *)a1 + 24) = *(_BYTE *)(a2 + 24);
  a1[4] = *(_QWORD *)(a2 + 32);
  *((_BYTE *)a1 + 40) = *(_BYTE *)(a2 + 40);
LABEL_10:
  v11 = a1[6];
  v12 = *(_QWORD *)(a2 + 48);
  if (v11 == 1)
  {
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)(a2 + 57);
    goto LABEL_15;
  }
  if (v12 == 1)
  {
    sub_100083F00(a1 + 6);
    goto LABEL_13;
  }
  a1[6] = v12;
  swift_bridgeObjectRelease(v11);
  *((_BYTE *)a1 + 56) = *(_BYTE *)(a2 + 56);
  a1[8] = *(_QWORD *)(a2 + 64);
  *((_BYTE *)a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_15:
  v13 = a1[10];
  v14 = *(_QWORD *)(a2 + 80);
  if (v13 == 1)
  {
LABEL_18:
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_20;
  }
  if (v14 == 1)
  {
    sub_100083F00(a1 + 10);
    goto LABEL_18;
  }
  a1[10] = v14;
  swift_bridgeObjectRelease(v13);
  *((_BYTE *)a1 + 88) = *(_BYTE *)(a2 + 88);
  a1[12] = *(_QWORD *)(a2 + 96);
  *((_BYTE *)a1 + 104) = *(_BYTE *)(a2 + 104);
LABEL_20:
  v15 = a1[14];
  v16 = *(_QWORD *)(a2 + 112);
  if (v15 == 1)
  {
LABEL_23:
    *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)((char *)a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_25;
  }
  if (v16 == 1)
  {
    sub_100083F00(a1 + 14);
    goto LABEL_23;
  }
  a1[14] = v16;
  swift_bridgeObjectRelease(v15);
  *((_BYTE *)a1 + 120) = *(_BYTE *)(a2 + 120);
  a1[16] = *(_QWORD *)(a2 + 128);
  *((_BYTE *)a1 + 136) = *(_BYTE *)(a2 + 136);
LABEL_25:
  v17 = a1[18];
  v18 = *(_QWORD *)(a2 + 144);
  if (v17 == 1)
  {
LABEL_28:
    *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)((char *)a1 + 153) = *(_OWORD *)(a2 + 153);
    goto LABEL_30;
  }
  if (v18 == 1)
  {
    sub_100083F00(a1 + 18);
    goto LABEL_28;
  }
  a1[18] = v18;
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + 152) = *(_BYTE *)(a2 + 152);
  a1[20] = *(_QWORD *)(a2 + 160);
  *((_BYTE *)a1 + 168) = *(_BYTE *)(a2 + 168);
LABEL_30:
  v19 = a1[22];
  v20 = *(_QWORD *)(a2 + 176);
  if (v19 == 1)
  {
LABEL_33:
    *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)(a2 + 185);
    goto LABEL_35;
  }
  if (v20 == 1)
  {
    sub_100083F00(a1 + 22);
    goto LABEL_33;
  }
  a1[22] = v20;
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + 184) = *(_BYTE *)(a2 + 184);
  a1[24] = *(_QWORD *)(a2 + 192);
  *((_BYTE *)a1 + 200) = *(_BYTE *)(a2 + 200);
LABEL_35:
  v21 = a1[26];
  v22 = *(_QWORD *)(a2 + 208);
  if (v21 == 1)
  {
LABEL_38:
    *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)((char *)a1 + 217) = *(_OWORD *)(a2 + 217);
    goto LABEL_40;
  }
  if (v22 == 1)
  {
    sub_100083F00(a1 + 26);
    goto LABEL_38;
  }
  a1[26] = v22;
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + 216) = *(_BYTE *)(a2 + 216);
  a1[28] = *(_QWORD *)(a2 + 224);
  *((_BYTE *)a1 + 232) = *(_BYTE *)(a2 + 232);
LABEL_40:
  v23 = a1[30];
  v24 = *(_QWORD *)(a2 + 240);
  if (v23 == 1)
  {
LABEL_43:
    *((_OWORD *)a1 + 15) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)((char *)a1 + 249) = *(_OWORD *)(a2 + 249);
    goto LABEL_45;
  }
  if (v24 == 1)
  {
    sub_100083F00(a1 + 30);
    goto LABEL_43;
  }
  a1[30] = v24;
  swift_bridgeObjectRelease(v23);
  *((_BYTE *)a1 + 248) = *(_BYTE *)(a2 + 248);
  a1[32] = *(_QWORD *)(a2 + 256);
  *((_BYTE *)a1 + 264) = *(_BYTE *)(a2 + 264);
LABEL_45:
  v25 = a1[34];
  if (v25 == 1)
  {
LABEL_48:
    *((_OWORD *)a1 + 17) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)((char *)a1 + 281) = *(_OWORD *)(a2 + 281);
    goto LABEL_50;
  }
  v26 = *(_QWORD *)(a2 + 272);
  if (v26 == 1)
  {
    sub_100083F00(a1 + 34);
    goto LABEL_48;
  }
  a1[34] = v26;
  swift_bridgeObjectRelease(v25);
  *((_BYTE *)a1 + 280) = *(_BYTE *)v5;
  a1[36] = *(_QWORD *)(a2 + 288);
  *((_BYTE *)a1 + 296) = *(_BYTE *)(a2 + 296);
LABEL_50:
  v27 = a1[38];
  if (v27 == 1)
  {
LABEL_53:
    *((_OWORD *)a1 + 19) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)((char *)a1 + 313) = *(_OWORD *)(a2 + 313);
    goto LABEL_55;
  }
  v28 = *(_QWORD *)(a2 + 304);
  if (v28 == 1)
  {
    sub_100083F00(a1 + 38);
    goto LABEL_53;
  }
  a1[38] = v28;
  swift_bridgeObjectRelease(v27);
  *((_BYTE *)a1 + 312) = *(_BYTE *)(v5 + 32);
  a1[40] = *(_QWORD *)(a2 + 320);
  *((_BYTE *)a1 + 328) = *(_BYTE *)(a2 + 328);
LABEL_55:
  v29 = a1[42];
  if (v29 == 1)
  {
LABEL_58:
    *((_OWORD *)a1 + 21) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)((char *)a1 + 345) = *(_OWORD *)(a2 + 345);
    goto LABEL_60;
  }
  v30 = *(_QWORD *)(a2 + 336);
  if (v30 == 1)
  {
    sub_100083F00(a1 + 42);
    goto LABEL_58;
  }
  a1[42] = v30;
  swift_bridgeObjectRelease(v29);
  *((_BYTE *)a1 + 344) = *(_BYTE *)(v5 + 64);
  a1[44] = *(_QWORD *)(a2 + 352);
  *((_BYTE *)a1 + 360) = *(_BYTE *)(a2 + 360);
LABEL_60:
  v31 = a1[46];
  if (v31 == 1)
  {
LABEL_63:
    *((_OWORD *)a1 + 23) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)((char *)a1 + 377) = *(_OWORD *)(a2 + 377);
    goto LABEL_65;
  }
  v32 = *(_QWORD *)(a2 + 368);
  if (v32 == 1)
  {
    sub_100083F00(a1 + 46);
    goto LABEL_63;
  }
  a1[46] = v32;
  swift_bridgeObjectRelease(v31);
  *((_BYTE *)a1 + 376) = *(_BYTE *)(v5 + 96);
  a1[48] = *(_QWORD *)(a2 + 384);
  *((_BYTE *)a1 + 392) = *(_BYTE *)(a2 + 392);
LABEL_65:
  v33 = a1[50];
  if (v33 == 1)
  {
LABEL_68:
    *((_OWORD *)a1 + 25) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)((char *)a1 + 409) = *(_OWORD *)(a2 + 409);
    goto LABEL_70;
  }
  v34 = *(_QWORD *)(a2 + 400);
  if (v34 == 1)
  {
    sub_100083F00(a1 + 50);
    goto LABEL_68;
  }
  a1[50] = v34;
  swift_bridgeObjectRelease(v33);
  *((_BYTE *)a1 + 408) = *(_BYTE *)(v5 + 128);
  a1[52] = *(_QWORD *)(a2 + 416);
  *((_BYTE *)a1 + 424) = *(_BYTE *)(a2 + 424);
LABEL_70:
  v35 = a1[54];
  if (v35 == 1)
  {
LABEL_73:
    *((_OWORD *)a1 + 27) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)((char *)a1 + 441) = *(_OWORD *)(a2 + 441);
    goto LABEL_75;
  }
  v36 = *(_QWORD *)(a2 + 432);
  if (v36 == 1)
  {
    sub_100083F00(a1 + 54);
    goto LABEL_73;
  }
  a1[54] = v36;
  swift_bridgeObjectRelease(v35);
  *((_BYTE *)a1 + 440) = *(_BYTE *)(v5 + 160);
  a1[56] = *(_QWORD *)(a2 + 448);
  *((_BYTE *)a1 + 456) = *(_BYTE *)(a2 + 456);
LABEL_75:
  v37 = a1[58];
  if (v37 == 1)
  {
LABEL_78:
    *((_OWORD *)a1 + 29) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)((char *)a1 + 473) = *(_OWORD *)(a2 + 473);
    goto LABEL_80;
  }
  v38 = *(_QWORD *)(a2 + 464);
  if (v38 == 1)
  {
    sub_100083F00(a1 + 58);
    goto LABEL_78;
  }
  a1[58] = v38;
  swift_bridgeObjectRelease(v37);
  *((_BYTE *)a1 + 472) = *(_BYTE *)(v5 + 192);
  a1[60] = *(_QWORD *)(a2 + 480);
  *((_BYTE *)a1 + 488) = *(_BYTE *)(a2 + 488);
LABEL_80:
  v39 = a1[62];
  if (v39 == 1)
  {
LABEL_83:
    *((_OWORD *)a1 + 31) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)((char *)a1 + 505) = *(_OWORD *)(a2 + 505);
    goto LABEL_85;
  }
  v40 = *(_QWORD *)(a2 + 496);
  if (v40 == 1)
  {
    sub_100083F00(a1 + 62);
    goto LABEL_83;
  }
  a1[62] = v40;
  swift_bridgeObjectRelease(v39);
  *((_BYTE *)a1 + 504) = *(_BYTE *)(v5 + 224);
  a1[64] = *(_QWORD *)(a2 + 512);
  *((_BYTE *)a1 + 520) = *(_BYTE *)(a2 + 520);
LABEL_85:
  v41 = a1[66];
  if (v41 == 1)
  {
LABEL_88:
    *((_OWORD *)a1 + 33) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)((char *)a1 + 537) = *(_OWORD *)(a2 + 537);
    goto LABEL_90;
  }
  v42 = *(_QWORD *)(a2 + 528);
  if (v42 == 1)
  {
    sub_100083F00(a1 + 66);
    goto LABEL_88;
  }
  a1[66] = v42;
  swift_bridgeObjectRelease(v41);
  *((_BYTE *)a1 + 536) = *(_BYTE *)(v5 + 256);
  a1[68] = *(_QWORD *)(a2 + 544);
  *((_BYTE *)a1 + 552) = *(_BYTE *)(a2 + 552);
LABEL_90:
  v43 = a1[70];
  if (v43 == 1)
  {
LABEL_93:
    *((_OWORD *)a1 + 35) = *(_OWORD *)(a2 + 560);
    *(_OWORD *)((char *)a1 + 569) = *(_OWORD *)(a2 + 569);
    goto LABEL_95;
  }
  v44 = *(_QWORD *)(a2 + 560);
  if (v44 == 1)
  {
    sub_100083F00(a1 + 70);
    goto LABEL_93;
  }
  a1[70] = v44;
  swift_bridgeObjectRelease(v43);
  *((_BYTE *)a1 + 568) = *(_BYTE *)(v5 + 288);
  a1[72] = *(_QWORD *)(a2 + 576);
  *((_BYTE *)a1 + 584) = *(_BYTE *)(a2 + 584);
LABEL_95:
  v45 = a1[74];
  if (v45 == 1)
  {
LABEL_98:
    *((_OWORD *)a1 + 37) = *(_OWORD *)(a2 + 592);
    *(_OWORD *)((char *)a1 + 601) = *(_OWORD *)(a2 + 601);
    goto LABEL_100;
  }
  v46 = *(_QWORD *)(a2 + 592);
  if (v46 == 1)
  {
    sub_100083F00(a1 + 74);
    goto LABEL_98;
  }
  a1[74] = v46;
  swift_bridgeObjectRelease(v45);
  *((_BYTE *)a1 + 600) = *(_BYTE *)(v5 + 320);
  a1[76] = *(_QWORD *)(a2 + 608);
  *((_BYTE *)a1 + 616) = *(_BYTE *)(a2 + 616);
LABEL_100:
  v47 = a1[78];
  if (v47 == 1)
  {
LABEL_103:
    *((_OWORD *)a1 + 39) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)((char *)a1 + 633) = *(_OWORD *)(a2 + 633);
    goto LABEL_105;
  }
  v48 = *(_QWORD *)(a2 + 624);
  if (v48 == 1)
  {
    sub_100083F00(a1 + 78);
    goto LABEL_103;
  }
  a1[78] = v48;
  swift_bridgeObjectRelease(v47);
  *((_BYTE *)a1 + 632) = *(_BYTE *)(v5 + 352);
  a1[80] = *(_QWORD *)(a2 + 640);
  *((_BYTE *)a1 + 648) = *(_BYTE *)(a2 + 648);
LABEL_105:
  v49 = a1[82];
  if (v49 == 1)
  {
LABEL_108:
    *((_OWORD *)a1 + 41) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)((char *)a1 + 665) = *(_OWORD *)(a2 + 665);
    goto LABEL_110;
  }
  v50 = *(_QWORD *)(a2 + 656);
  if (v50 == 1)
  {
    sub_100083F00(a1 + 82);
    goto LABEL_108;
  }
  a1[82] = v50;
  swift_bridgeObjectRelease(v49);
  *((_BYTE *)a1 + 664) = *(_BYTE *)(v5 + 384);
  a1[84] = *(_QWORD *)(a2 + 672);
  *((_BYTE *)a1 + 680) = *(_BYTE *)(a2 + 680);
LABEL_110:
  v51 = a1[86];
  if (v51 == 1)
  {
LABEL_113:
    *((_OWORD *)a1 + 43) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)((char *)a1 + 697) = *(_OWORD *)(a2 + 697);
    goto LABEL_115;
  }
  v52 = *(_QWORD *)(a2 + 688);
  if (v52 == 1)
  {
    sub_100083F00(a1 + 86);
    goto LABEL_113;
  }
  a1[86] = v52;
  swift_bridgeObjectRelease(v51);
  *((_BYTE *)a1 + 696) = *(_BYTE *)(v5 + 416);
  a1[88] = *(_QWORD *)(a2 + 704);
  *((_BYTE *)a1 + 712) = *(_BYTE *)(a2 + 712);
LABEL_115:
  v53 = a1[90];
  if (v53 == 1)
  {
LABEL_118:
    *((_OWORD *)a1 + 45) = *(_OWORD *)(a2 + 720);
    *(_OWORD *)((char *)a1 + 729) = *(_OWORD *)(a2 + 729);
    goto LABEL_120;
  }
  v54 = *(_QWORD *)(a2 + 720);
  if (v54 == 1)
  {
    sub_100083F00(a1 + 90);
    goto LABEL_118;
  }
  a1[90] = v54;
  swift_bridgeObjectRelease(v53);
  *((_BYTE *)a1 + 728) = *(_BYTE *)(v5 + 448);
  a1[92] = *(_QWORD *)(a2 + 736);
  *((_BYTE *)a1 + 744) = *(_BYTE *)(a2 + 744);
LABEL_120:
  v55 = a1[94];
  if (v55 != 1)
  {
    v56 = *(_QWORD *)(a2 + 752);
    if (v56 != 1)
    {
      a1[94] = v56;
      swift_bridgeObjectRelease(v55);
      *((_BYTE *)a1 + 760) = *(_BYTE *)(v5 + 480);
      a1[96] = *(_QWORD *)(a2 + 768);
      *((_BYTE *)a1 + 776) = *(_BYTE *)(a2 + 776);
      goto LABEL_125;
    }
    sub_100083F00(a1 + 94);
  }
  *((_OWORD *)a1 + 47) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)((char *)a1 + 761) = *(_OWORD *)(a2 + 761);
LABEL_125:
  *((_OWORD *)a1 + 49) = *(_OWORD *)(a2 + 784);
  *((_BYTE *)a1 + 800) = *(_BYTE *)(a2 + 800);
  *((_BYTE *)a1 + 824) = *(_BYTE *)(a2 + 824);
  *(_OWORD *)(a1 + 101) = *(_OWORD *)(a2 + 808);
  *(_DWORD *)v4 = *(_DWORD *)(v5 + 545);
  *(_WORD *)((char *)a1 + 829) = *(_WORD *)(a2 + 829);
  *((_BYTE *)a1 + 831) = *(_BYTE *)(a2 + 831);
  v57 = a1[104];
  a1[104] = *(_QWORD *)(a2 + 832);
  swift_bridgeObjectRelease(v57);
  v58 = a1[105];
  a1[105] = *(_QWORD *)(a2 + 840);
  swift_bridgeObjectRelease(v58);
LABEL_126:
  v59 = a1 + 106;
  v60 = (_OWORD *)(a2 + 848);
  if (a1[208] == 1)
  {
LABEL_129:
    memcpy(a1 + 106, (const void *)(a2 + 848), 0x340uLL);
    goto LABEL_251;
  }
  if (*(_QWORD *)(a2 + 1664) == 1)
  {
    sub_100083F28(a1 + 106);
    goto LABEL_129;
  }
  v61 = *v59;
  if (*v59 == 1)
    goto LABEL_133;
  if (*(_QWORD *)v60 == 1)
  {
    sub_100083F00(a1 + 106);
LABEL_133:
    *(_OWORD *)v59 = *v60;
    *(_OWORD *)((char *)a1 + 857) = *(_OWORD *)(a2 + 857);
    goto LABEL_135;
  }
  a1[106] = *(_QWORD *)v60;
  swift_bridgeObjectRelease(v61);
  *((_BYTE *)a1 + 856) = *(_BYTE *)(v5 + 576);
  a1[108] = *(_QWORD *)(a2 + 864);
  *((_BYTE *)a1 + 872) = *(_BYTE *)(a2 + 872);
LABEL_135:
  v62 = a1[110];
  if (v62 == 1)
  {
LABEL_138:
    *((_OWORD *)a1 + 55) = *(_OWORD *)(a2 + 880);
    *(_OWORD *)((char *)a1 + 889) = *(_OWORD *)(a2 + 889);
    goto LABEL_140;
  }
  v63 = *(_QWORD *)(a2 + 880);
  if (v63 == 1)
  {
    sub_100083F00(a1 + 110);
    goto LABEL_138;
  }
  a1[110] = v63;
  swift_bridgeObjectRelease(v62);
  *((_BYTE *)a1 + 888) = *(_BYTE *)(v5 + 608);
  a1[112] = *(_QWORD *)(a2 + 896);
  *((_BYTE *)a1 + 904) = *(_BYTE *)(a2 + 904);
LABEL_140:
  v64 = a1[114];
  if (v64 == 1)
  {
LABEL_143:
    *((_OWORD *)a1 + 57) = *(_OWORD *)(a2 + 912);
    *(_OWORD *)((char *)a1 + 921) = *(_OWORD *)(a2 + 921);
    goto LABEL_145;
  }
  v65 = *(_QWORD *)(a2 + 912);
  if (v65 == 1)
  {
    sub_100083F00(a1 + 114);
    goto LABEL_143;
  }
  a1[114] = v65;
  swift_bridgeObjectRelease(v64);
  *((_BYTE *)a1 + 920) = *(_BYTE *)(v5 + 640);
  a1[116] = *(_QWORD *)(a2 + 928);
  *((_BYTE *)a1 + 936) = *(_BYTE *)(a2 + 936);
LABEL_145:
  v66 = a1[118];
  if (v66 == 1)
  {
LABEL_148:
    *((_OWORD *)a1 + 59) = *(_OWORD *)(a2 + 944);
    *(_OWORD *)((char *)a1 + 953) = *(_OWORD *)(a2 + 953);
    goto LABEL_150;
  }
  v67 = *(_QWORD *)(a2 + 944);
  if (v67 == 1)
  {
    sub_100083F00(a1 + 118);
    goto LABEL_148;
  }
  a1[118] = v67;
  swift_bridgeObjectRelease(v66);
  *((_BYTE *)a1 + 952) = *(_BYTE *)(v5 + 672);
  a1[120] = *(_QWORD *)(a2 + 960);
  *((_BYTE *)a1 + 968) = *(_BYTE *)(a2 + 968);
LABEL_150:
  v68 = a1[122];
  if (v68 == 1)
  {
LABEL_153:
    *((_OWORD *)a1 + 61) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)((char *)a1 + 985) = *(_OWORD *)(a2 + 985);
    goto LABEL_155;
  }
  v69 = *(_QWORD *)(a2 + 976);
  if (v69 == 1)
  {
    sub_100083F00(a1 + 122);
    goto LABEL_153;
  }
  a1[122] = v69;
  swift_bridgeObjectRelease(v68);
  *((_BYTE *)a1 + 984) = *(_BYTE *)(v5 + 704);
  a1[124] = *(_QWORD *)(a2 + 992);
  *((_BYTE *)a1 + 1000) = *(_BYTE *)(a2 + 1000);
LABEL_155:
  v70 = a1[126];
  if (v70 == 1)
  {
LABEL_158:
    *((_OWORD *)a1 + 63) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)((char *)a1 + 1017) = *(_OWORD *)(a2 + 1017);
    goto LABEL_160;
  }
  v71 = *(_QWORD *)(a2 + 1008);
  if (v71 == 1)
  {
    sub_100083F00(a1 + 126);
    goto LABEL_158;
  }
  a1[126] = v71;
  swift_bridgeObjectRelease(v70);
  *((_BYTE *)a1 + 1016) = *(_BYTE *)(v5 + 736);
  a1[128] = *(_QWORD *)(a2 + 1024);
  *((_BYTE *)a1 + 1032) = *(_BYTE *)(a2 + 1032);
LABEL_160:
  v72 = a1[130];
  if (v72 == 1)
  {
LABEL_163:
    *((_OWORD *)a1 + 65) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)((char *)a1 + 1049) = *(_OWORD *)(a2 + 1049);
    goto LABEL_165;
  }
  v73 = *(_QWORD *)(a2 + 1040);
  if (v73 == 1)
  {
    sub_100083F00(a1 + 130);
    goto LABEL_163;
  }
  a1[130] = v73;
  swift_bridgeObjectRelease(v72);
  *((_BYTE *)a1 + 1048) = *(_BYTE *)(v5 + 768);
  a1[132] = *(_QWORD *)(a2 + 1056);
  *((_BYTE *)a1 + 1064) = *(_BYTE *)(a2 + 1064);
LABEL_165:
  v74 = a1[134];
  if (v74 == 1)
  {
LABEL_168:
    *((_OWORD *)a1 + 67) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)((char *)a1 + 1081) = *(_OWORD *)(a2 + 1081);
    goto LABEL_170;
  }
  v75 = *(_QWORD *)(a2 + 1072);
  if (v75 == 1)
  {
    sub_100083F00(a1 + 134);
    goto LABEL_168;
  }
  a1[134] = v75;
  swift_bridgeObjectRelease(v74);
  *((_BYTE *)a1 + 1080) = *(_BYTE *)(v5 + 800);
  a1[136] = *(_QWORD *)(a2 + 1088);
  *((_BYTE *)a1 + 1096) = *(_BYTE *)(a2 + 1096);
LABEL_170:
  v76 = a1[138];
  if (v76 == 1)
  {
LABEL_173:
    *((_OWORD *)a1 + 69) = *(_OWORD *)(a2 + 1104);
    *(_OWORD *)((char *)a1 + 1113) = *(_OWORD *)(a2 + 1113);
    goto LABEL_175;
  }
  v77 = *(_QWORD *)(a2 + 1104);
  if (v77 == 1)
  {
    sub_100083F00(a1 + 138);
    goto LABEL_173;
  }
  a1[138] = v77;
  swift_bridgeObjectRelease(v76);
  *((_BYTE *)a1 + 1112) = *(_BYTE *)(v5 + 832);
  a1[140] = *(_QWORD *)(a2 + 1120);
  *((_BYTE *)a1 + 1128) = *(_BYTE *)(a2 + 1128);
LABEL_175:
  v78 = a1[142];
  if (v78 == 1)
  {
LABEL_178:
    *((_OWORD *)a1 + 71) = *(_OWORD *)(a2 + 1136);
    *(_OWORD *)((char *)a1 + 1145) = *(_OWORD *)(a2 + 1145);
    goto LABEL_180;
  }
  v79 = *(_QWORD *)(a2 + 1136);
  if (v79 == 1)
  {
    sub_100083F00(a1 + 142);
    goto LABEL_178;
  }
  a1[142] = v79;
  swift_bridgeObjectRelease(v78);
  *((_BYTE *)a1 + 1144) = *(_BYTE *)(v5 + 864);
  a1[144] = *(_QWORD *)(a2 + 1152);
  *((_BYTE *)a1 + 1160) = *(_BYTE *)(a2 + 1160);
LABEL_180:
  v80 = a1[146];
  if (v80 == 1)
  {
LABEL_183:
    *((_OWORD *)a1 + 73) = *(_OWORD *)(a2 + 1168);
    *(_OWORD *)((char *)a1 + 1177) = *(_OWORD *)(a2 + 1177);
    goto LABEL_185;
  }
  v81 = *(_QWORD *)(a2 + 1168);
  if (v81 == 1)
  {
    sub_100083F00(a1 + 146);
    goto LABEL_183;
  }
  a1[146] = v81;
  swift_bridgeObjectRelease(v80);
  *((_BYTE *)a1 + 1176) = *(_BYTE *)(v5 + 896);
  a1[148] = *(_QWORD *)(a2 + 1184);
  *((_BYTE *)a1 + 1192) = *(_BYTE *)(a2 + 1192);
LABEL_185:
  v82 = a1[150];
  if (v82 == 1)
  {
LABEL_188:
    *((_OWORD *)a1 + 75) = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)((char *)a1 + 1209) = *(_OWORD *)(a2 + 1209);
    goto LABEL_190;
  }
  v83 = *(_QWORD *)(a2 + 1200);
  if (v83 == 1)
  {
    sub_100083F00(a1 + 150);
    goto LABEL_188;
  }
  a1[150] = v83;
  swift_bridgeObjectRelease(v82);
  *((_BYTE *)a1 + 1208) = *(_BYTE *)(v5 + 928);
  a1[152] = *(_QWORD *)(a2 + 1216);
  *((_BYTE *)a1 + 1224) = *(_BYTE *)(a2 + 1224);
LABEL_190:
  v84 = a1[154];
  if (v84 == 1)
  {
LABEL_193:
    *((_OWORD *)a1 + 77) = *(_OWORD *)(a2 + 1232);
    *(_OWORD *)((char *)a1 + 1241) = *(_OWORD *)(a2 + 1241);
    goto LABEL_195;
  }
  v85 = *(_QWORD *)(a2 + 1232);
  if (v85 == 1)
  {
    sub_100083F00(a1 + 154);
    goto LABEL_193;
  }
  a1[154] = v85;
  swift_bridgeObjectRelease(v84);
  *((_BYTE *)a1 + 1240) = *(_BYTE *)(v5 + 960);
  a1[156] = *(_QWORD *)(a2 + 1248);
  *((_BYTE *)a1 + 1256) = *(_BYTE *)(a2 + 1256);
LABEL_195:
  v86 = a1[158];
  if (v86 == 1)
  {
LABEL_198:
    *((_OWORD *)a1 + 79) = *(_OWORD *)(a2 + 1264);
    *(_OWORD *)((char *)a1 + 1273) = *(_OWORD *)(a2 + 1273);
    goto LABEL_200;
  }
  v87 = *(_QWORD *)(a2 + 1264);
  if (v87 == 1)
  {
    sub_100083F00(a1 + 158);
    goto LABEL_198;
  }
  a1[158] = v87;
  swift_bridgeObjectRelease(v86);
  *((_BYTE *)a1 + 1272) = *(_BYTE *)(v5 + 992);
  a1[160] = *(_QWORD *)(a2 + 1280);
  *((_BYTE *)a1 + 1288) = *(_BYTE *)(a2 + 1288);
LABEL_200:
  v88 = a1[162];
  if (v88 == 1)
  {
LABEL_203:
    *((_OWORD *)a1 + 81) = *(_OWORD *)(a2 + 1296);
    *(_OWORD *)((char *)a1 + 1305) = *(_OWORD *)(a2 + 1305);
    goto LABEL_205;
  }
  v89 = *(_QWORD *)(a2 + 1296);
  if (v89 == 1)
  {
    sub_100083F00(a1 + 162);
    goto LABEL_203;
  }
  a1[162] = v89;
  swift_bridgeObjectRelease(v88);
  *((_BYTE *)a1 + 1304) = *(_BYTE *)(v5 + 1024);
  a1[164] = *(_QWORD *)(a2 + 1312);
  *((_BYTE *)a1 + 1320) = *(_BYTE *)(a2 + 1320);
LABEL_205:
  v90 = a1[166];
  if (v90 == 1)
  {
LABEL_208:
    *((_OWORD *)a1 + 83) = *(_OWORD *)(a2 + 1328);
    *(_OWORD *)((char *)a1 + 1337) = *(_OWORD *)(a2 + 1337);
    goto LABEL_210;
  }
  v91 = *(_QWORD *)(a2 + 1328);
  if (v91 == 1)
  {
    sub_100083F00(a1 + 166);
    goto LABEL_208;
  }
  a1[166] = v91;
  swift_bridgeObjectRelease(v90);
  *((_BYTE *)a1 + 1336) = *(_BYTE *)(v5 + 1056);
  a1[168] = *(_QWORD *)(a2 + 1344);
  *((_BYTE *)a1 + 1352) = *(_BYTE *)(a2 + 1352);
LABEL_210:
  v92 = a1[170];
  if (v92 == 1)
  {
LABEL_213:
    *((_OWORD *)a1 + 85) = *(_OWORD *)(a2 + 1360);
    *(_OWORD *)((char *)a1 + 1369) = *(_OWORD *)(a2 + 1369);
    goto LABEL_215;
  }
  v93 = *(_QWORD *)(a2 + 1360);
  if (v93 == 1)
  {
    sub_100083F00(a1 + 170);
    goto LABEL_213;
  }
  a1[170] = v93;
  swift_bridgeObjectRelease(v92);
  *((_BYTE *)a1 + 1368) = *(_BYTE *)(v5 + 1088);
  a1[172] = *(_QWORD *)(a2 + 1376);
  *((_BYTE *)a1 + 1384) = *(_BYTE *)(a2 + 1384);
LABEL_215:
  v94 = a1[174];
  if (v94 == 1)
  {
LABEL_218:
    *((_OWORD *)a1 + 87) = *(_OWORD *)(a2 + 1392);
    *(_OWORD *)((char *)a1 + 1401) = *(_OWORD *)(a2 + 1401);
    goto LABEL_220;
  }
  v95 = *(_QWORD *)(a2 + 1392);
  if (v95 == 1)
  {
    sub_100083F00(a1 + 174);
    goto LABEL_218;
  }
  a1[174] = v95;
  swift_bridgeObjectRelease(v94);
  *((_BYTE *)a1 + 1400) = *(_BYTE *)(v5 + 1120);
  a1[176] = *(_QWORD *)(a2 + 1408);
  *((_BYTE *)a1 + 1416) = *(_BYTE *)(a2 + 1416);
LABEL_220:
  v96 = a1[178];
  if (v96 == 1)
  {
LABEL_223:
    *((_OWORD *)a1 + 89) = *(_OWORD *)(a2 + 1424);
    *(_OWORD *)((char *)a1 + 1433) = *(_OWORD *)(a2 + 1433);
    goto LABEL_225;
  }
  v97 = *(_QWORD *)(a2 + 1424);
  if (v97 == 1)
  {
    sub_100083F00(a1 + 178);
    goto LABEL_223;
  }
  a1[178] = v97;
  swift_bridgeObjectRelease(v96);
  *((_BYTE *)a1 + 1432) = *(_BYTE *)(v5 + 1152);
  a1[180] = *(_QWORD *)(a2 + 1440);
  *((_BYTE *)a1 + 1448) = *(_BYTE *)(a2 + 1448);
LABEL_225:
  v98 = a1[182];
  if (v98 == 1)
  {
LABEL_228:
    *((_OWORD *)a1 + 91) = *(_OWORD *)(a2 + 1456);
    *(_OWORD *)((char *)a1 + 1465) = *(_OWORD *)(a2 + 1465);
    goto LABEL_230;
  }
  v99 = *(_QWORD *)(a2 + 1456);
  if (v99 == 1)
  {
    sub_100083F00(a1 + 182);
    goto LABEL_228;
  }
  a1[182] = v99;
  swift_bridgeObjectRelease(v98);
  *((_BYTE *)a1 + 1464) = *(_BYTE *)(v5 + 1184);
  a1[184] = *(_QWORD *)(a2 + 1472);
  *((_BYTE *)a1 + 1480) = *(_BYTE *)(a2 + 1480);
LABEL_230:
  v100 = a1[186];
  if (v100 == 1)
  {
LABEL_233:
    *((_OWORD *)a1 + 93) = *(_OWORD *)(a2 + 1488);
    *(_OWORD *)((char *)a1 + 1497) = *(_OWORD *)(a2 + 1497);
    goto LABEL_235;
  }
  v101 = *(_QWORD *)(a2 + 1488);
  if (v101 == 1)
  {
    sub_100083F00(a1 + 186);
    goto LABEL_233;
  }
  a1[186] = v101;
  swift_bridgeObjectRelease(v100);
  *((_BYTE *)a1 + 1496) = *(_BYTE *)(v5 + 1216);
  a1[188] = *(_QWORD *)(a2 + 1504);
  *((_BYTE *)a1 + 1512) = *(_BYTE *)(a2 + 1512);
LABEL_235:
  v102 = a1[190];
  if (v102 == 1)
  {
LABEL_238:
    *((_OWORD *)a1 + 95) = *(_OWORD *)(a2 + 1520);
    *(_OWORD *)((char *)a1 + 1529) = *(_OWORD *)(a2 + 1529);
    goto LABEL_240;
  }
  v103 = *(_QWORD *)(a2 + 1520);
  if (v103 == 1)
  {
    sub_100083F00(a1 + 190);
    goto LABEL_238;
  }
  a1[190] = v103;
  swift_bridgeObjectRelease(v102);
  *((_BYTE *)a1 + 1528) = *(_BYTE *)(v5 + 1248);
  a1[192] = *(_QWORD *)(a2 + 1536);
  *((_BYTE *)a1 + 1544) = *(_BYTE *)(a2 + 1544);
LABEL_240:
  v104 = a1[194];
  if (v104 == 1)
  {
LABEL_243:
    *((_OWORD *)a1 + 97) = *(_OWORD *)(a2 + 1552);
    *(_OWORD *)((char *)a1 + 1561) = *(_OWORD *)(a2 + 1561);
    goto LABEL_245;
  }
  v105 = *(_QWORD *)(a2 + 1552);
  if (v105 == 1)
  {
    sub_100083F00(a1 + 194);
    goto LABEL_243;
  }
  a1[194] = v105;
  swift_bridgeObjectRelease(v104);
  *((_BYTE *)a1 + 1560) = *(_BYTE *)(v5 + 1280);
  a1[196] = *(_QWORD *)(a2 + 1568);
  *((_BYTE *)a1 + 1576) = *(_BYTE *)(a2 + 1576);
LABEL_245:
  v106 = a1[198];
  if (v106 != 1)
  {
    v107 = *(_QWORD *)(a2 + 1584);
    if (v107 != 1)
    {
      a1[198] = v107;
      swift_bridgeObjectRelease(v106);
      *((_BYTE *)a1 + 1592) = *(_BYTE *)(v5 + 1312);
      a1[200] = *(_QWORD *)(a2 + 1600);
      *((_BYTE *)a1 + 1608) = *(_BYTE *)(a2 + 1608);
      goto LABEL_250;
    }
    sub_100083F00(a1 + 198);
  }
  *((_OWORD *)a1 + 99) = *(_OWORD *)(a2 + 1584);
  *(_OWORD *)((char *)a1 + 1593) = *(_OWORD *)(a2 + 1593);
LABEL_250:
  *((_OWORD *)a1 + 101) = *(_OWORD *)(a2 + 1616);
  *((_BYTE *)a1 + 1632) = *(_BYTE *)(a2 + 1632);
  *((_BYTE *)a1 + 1656) = *(_BYTE *)(a2 + 1656);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 1640);
  *((_DWORD *)v4 + 208) = *(_DWORD *)(v5 + 1377);
  *(_WORD *)((char *)a1 + 1661) = *(_WORD *)(a2 + 1661);
  *((_BYTE *)a1 + 1663) = *(_BYTE *)(a2 + 1663);
  v108 = a1[208];
  a1[208] = *(_QWORD *)(a2 + 1664);
  swift_bridgeObjectRelease(v108);
  v109 = a1[209];
  a1[209] = *(_QWORD *)(a2 + 1672);
  swift_bridgeObjectRelease(v109);
LABEL_251:
  v110 = a1 + 210;
  v111 = (_OWORD *)(a2 + 1680);
  if (a1[312] == 1)
  {
LABEL_254:
    memcpy(a1 + 210, (const void *)(a2 + 1680), 0x340uLL);
    goto LABEL_376;
  }
  if (*(_QWORD *)(a2 + 2496) == 1)
  {
    sub_100083F28(a1 + 210);
    goto LABEL_254;
  }
  v112 = *v110;
  if (*v110 == 1)
    goto LABEL_258;
  if (*(_QWORD *)v111 == 1)
  {
    sub_100083F00(a1 + 210);
LABEL_258:
    *(_OWORD *)v110 = *v111;
    *(_OWORD *)((char *)a1 + 1689) = *(_OWORD *)(a2 + 1689);
    goto LABEL_260;
  }
  a1[210] = *(_QWORD *)v111;
  swift_bridgeObjectRelease(v112);
  *((_BYTE *)a1 + 1688) = *(_BYTE *)(v5 + 1408);
  a1[212] = *(_QWORD *)(a2 + 1696);
  *((_BYTE *)a1 + 1704) = *(_BYTE *)(a2 + 1704);
LABEL_260:
  v113 = a1[214];
  if (v113 == 1)
  {
LABEL_263:
    *((_OWORD *)a1 + 107) = *(_OWORD *)(a2 + 1712);
    *(_OWORD *)((char *)a1 + 1721) = *(_OWORD *)(a2 + 1721);
    goto LABEL_265;
  }
  v114 = *(_QWORD *)(a2 + 1712);
  if (v114 == 1)
  {
    sub_100083F00(a1 + 214);
    goto LABEL_263;
  }
  a1[214] = v114;
  swift_bridgeObjectRelease(v113);
  *((_BYTE *)a1 + 1720) = *(_BYTE *)(v5 + 1440);
  a1[216] = *(_QWORD *)(a2 + 1728);
  *((_BYTE *)a1 + 1736) = *(_BYTE *)(a2 + 1736);
LABEL_265:
  v115 = a1[218];
  if (v115 == 1)
  {
LABEL_268:
    *((_OWORD *)a1 + 109) = *(_OWORD *)(a2 + 1744);
    *(_OWORD *)((char *)a1 + 1753) = *(_OWORD *)(a2 + 1753);
    goto LABEL_270;
  }
  v116 = *(_QWORD *)(a2 + 1744);
  if (v116 == 1)
  {
    sub_100083F00(a1 + 218);
    goto LABEL_268;
  }
  a1[218] = v116;
  swift_bridgeObjectRelease(v115);
  *((_BYTE *)a1 + 1752) = *(_BYTE *)(v5 + 1472);
  a1[220] = *(_QWORD *)(a2 + 1760);
  *((_BYTE *)a1 + 1768) = *(_BYTE *)(a2 + 1768);
LABEL_270:
  v117 = a1[222];
  if (v117 == 1)
  {
LABEL_273:
    *((_OWORD *)a1 + 111) = *(_OWORD *)(a2 + 1776);
    *(_OWORD *)((char *)a1 + 1785) = *(_OWORD *)(a2 + 1785);
    goto LABEL_275;
  }
  v118 = *(_QWORD *)(a2 + 1776);
  if (v118 == 1)
  {
    sub_100083F00(a1 + 222);
    goto LABEL_273;
  }
  a1[222] = v118;
  swift_bridgeObjectRelease(v117);
  *((_BYTE *)a1 + 1784) = *(_BYTE *)(v5 + 1504);
  a1[224] = *(_QWORD *)(a2 + 1792);
  *((_BYTE *)a1 + 1800) = *(_BYTE *)(a2 + 1800);
LABEL_275:
  v119 = a1[226];
  if (v119 == 1)
  {
LABEL_278:
    *((_OWORD *)a1 + 113) = *(_OWORD *)(a2 + 1808);
    *(_OWORD *)((char *)a1 + 1817) = *(_OWORD *)(a2 + 1817);
    goto LABEL_280;
  }
  v120 = *(_QWORD *)(a2 + 1808);
  if (v120 == 1)
  {
    sub_100083F00(a1 + 226);
    goto LABEL_278;
  }
  a1[226] = v120;
  swift_bridgeObjectRelease(v119);
  *((_BYTE *)a1 + 1816) = *(_BYTE *)(v5 + 1536);
  a1[228] = *(_QWORD *)(a2 + 1824);
  *((_BYTE *)a1 + 1832) = *(_BYTE *)(a2 + 1832);
LABEL_280:
  v121 = a1[230];
  if (v121 == 1)
  {
LABEL_283:
    *((_OWORD *)a1 + 115) = *(_OWORD *)(a2 + 1840);
    *(_OWORD *)((char *)a1 + 1849) = *(_OWORD *)(a2 + 1849);
    goto LABEL_285;
  }
  v122 = *(_QWORD *)(a2 + 1840);
  if (v122 == 1)
  {
    sub_100083F00(a1 + 230);
    goto LABEL_283;
  }
  a1[230] = v122;
  swift_bridgeObjectRelease(v121);
  *((_BYTE *)a1 + 1848) = *(_BYTE *)(v5 + 1568);
  a1[232] = *(_QWORD *)(a2 + 1856);
  *((_BYTE *)a1 + 1864) = *(_BYTE *)(a2 + 1864);
LABEL_285:
  v123 = a1[234];
  if (v123 == 1)
  {
LABEL_288:
    *((_OWORD *)a1 + 117) = *(_OWORD *)(a2 + 1872);
    *(_OWORD *)((char *)a1 + 1881) = *(_OWORD *)(a2 + 1881);
    goto LABEL_290;
  }
  v124 = *(_QWORD *)(a2 + 1872);
  if (v124 == 1)
  {
    sub_100083F00(a1 + 234);
    goto LABEL_288;
  }
  a1[234] = v124;
  swift_bridgeObjectRelease(v123);
  *((_BYTE *)a1 + 1880) = *(_BYTE *)(v5 + 1600);
  a1[236] = *(_QWORD *)(a2 + 1888);
  *((_BYTE *)a1 + 1896) = *(_BYTE *)(a2 + 1896);
LABEL_290:
  v125 = a1[238];
  if (v125 == 1)
  {
LABEL_293:
    *((_OWORD *)a1 + 119) = *(_OWORD *)(a2 + 1904);
    *(_OWORD *)((char *)a1 + 1913) = *(_OWORD *)(a2 + 1913);
    goto LABEL_295;
  }
  v126 = *(_QWORD *)(a2 + 1904);
  if (v126 == 1)
  {
    sub_100083F00(a1 + 238);
    goto LABEL_293;
  }
  a1[238] = v126;
  swift_bridgeObjectRelease(v125);
  *((_BYTE *)a1 + 1912) = *(_BYTE *)(v5 + 1632);
  a1[240] = *(_QWORD *)(a2 + 1920);
  *((_BYTE *)a1 + 1928) = *(_BYTE *)(a2 + 1928);
LABEL_295:
  v127 = a1[242];
  if (v127 == 1)
  {
LABEL_298:
    *((_OWORD *)a1 + 121) = *(_OWORD *)(a2 + 1936);
    *(_OWORD *)((char *)a1 + 1945) = *(_OWORD *)(a2 + 1945);
    goto LABEL_300;
  }
  v128 = *(_QWORD *)(a2 + 1936);
  if (v128 == 1)
  {
    sub_100083F00(a1 + 242);
    goto LABEL_298;
  }
  a1[242] = v128;
  swift_bridgeObjectRelease(v127);
  *((_BYTE *)a1 + 1944) = *(_BYTE *)(v5 + 1664);
  a1[244] = *(_QWORD *)(a2 + 1952);
  *((_BYTE *)a1 + 1960) = *(_BYTE *)(a2 + 1960);
LABEL_300:
  v129 = a1[246];
  if (v129 == 1)
  {
LABEL_303:
    *((_OWORD *)a1 + 123) = *(_OWORD *)(a2 + 1968);
    *(_OWORD *)((char *)a1 + 1977) = *(_OWORD *)(a2 + 1977);
    goto LABEL_305;
  }
  v130 = *(_QWORD *)(a2 + 1968);
  if (v130 == 1)
  {
    sub_100083F00(a1 + 246);
    goto LABEL_303;
  }
  a1[246] = v130;
  swift_bridgeObjectRelease(v129);
  *((_BYTE *)a1 + 1976) = *(_BYTE *)(v5 + 1696);
  a1[248] = *(_QWORD *)(a2 + 1984);
  *((_BYTE *)a1 + 1992) = *(_BYTE *)(a2 + 1992);
LABEL_305:
  v131 = a1[250];
  if (v131 == 1)
  {
LABEL_308:
    *((_OWORD *)a1 + 125) = *(_OWORD *)(a2 + 2000);
    *(_OWORD *)((char *)a1 + 2009) = *(_OWORD *)(a2 + 2009);
    goto LABEL_310;
  }
  v132 = *(_QWORD *)(a2 + 2000);
  if (v132 == 1)
  {
    sub_100083F00(a1 + 250);
    goto LABEL_308;
  }
  a1[250] = v132;
  swift_bridgeObjectRelease(v131);
  *((_BYTE *)a1 + 2008) = *(_BYTE *)(v5 + 1728);
  a1[252] = *(_QWORD *)(a2 + 2016);
  *((_BYTE *)a1 + 2024) = *(_BYTE *)(a2 + 2024);
LABEL_310:
  v133 = a1[254];
  if (v133 == 1)
  {
LABEL_313:
    *((_OWORD *)a1 + 127) = *(_OWORD *)(a2 + 2032);
    *(_OWORD *)((char *)a1 + 2041) = *(_OWORD *)(a2 + 2041);
    goto LABEL_315;
  }
  v134 = *(_QWORD *)(a2 + 2032);
  if (v134 == 1)
  {
    sub_100083F00(a1 + 254);
    goto LABEL_313;
  }
  a1[254] = v134;
  swift_bridgeObjectRelease(v133);
  *((_BYTE *)a1 + 2040) = *(_BYTE *)(v5 + 1760);
  a1[256] = *(_QWORD *)(a2 + 2048);
  *((_BYTE *)a1 + 2056) = *(_BYTE *)(a2 + 2056);
LABEL_315:
  v135 = a1[258];
  if (v135 == 1)
  {
LABEL_318:
    *((_OWORD *)a1 + 129) = *(_OWORD *)(a2 + 2064);
    *(_OWORD *)((char *)a1 + 2073) = *(_OWORD *)(a2 + 2073);
    goto LABEL_320;
  }
  v136 = *(_QWORD *)(a2 + 2064);
  if (v136 == 1)
  {
    sub_100083F00(a1 + 258);
    goto LABEL_318;
  }
  a1[258] = v136;
  swift_bridgeObjectRelease(v135);
  *((_BYTE *)a1 + 2072) = *(_BYTE *)(v5 + 1792);
  a1[260] = *(_QWORD *)(a2 + 2080);
  *((_BYTE *)a1 + 2088) = *(_BYTE *)(a2 + 2088);
LABEL_320:
  v137 = a1[262];
  if (v137 == 1)
  {
LABEL_323:
    *((_OWORD *)a1 + 131) = *(_OWORD *)(a2 + 2096);
    *(_OWORD *)((char *)a1 + 2105) = *(_OWORD *)(a2 + 2105);
    goto LABEL_325;
  }
  v138 = *(_QWORD *)(a2 + 2096);
  if (v138 == 1)
  {
    sub_100083F00(a1 + 262);
    goto LABEL_323;
  }
  a1[262] = v138;
  swift_bridgeObjectRelease(v137);
  *((_BYTE *)a1 + 2104) = *(_BYTE *)(v5 + 1824);
  a1[264] = *(_QWORD *)(a2 + 2112);
  *((_BYTE *)a1 + 2120) = *(_BYTE *)(a2 + 2120);
LABEL_325:
  v139 = a1[266];
  if (v139 == 1)
  {
LABEL_328:
    *((_OWORD *)a1 + 133) = *(_OWORD *)(a2 + 2128);
    *(_OWORD *)((char *)a1 + 2137) = *(_OWORD *)(a2 + 2137);
    goto LABEL_330;
  }
  v140 = *(_QWORD *)(a2 + 2128);
  if (v140 == 1)
  {
    sub_100083F00(a1 + 266);
    goto LABEL_328;
  }
  a1[266] = v140;
  swift_bridgeObjectRelease(v139);
  *((_BYTE *)a1 + 2136) = *(_BYTE *)(v5 + 1856);
  a1[268] = *(_QWORD *)(a2 + 2144);
  *((_BYTE *)a1 + 2152) = *(_BYTE *)(a2 + 2152);
LABEL_330:
  v141 = a1[270];
  if (v141 == 1)
  {
LABEL_333:
    *((_OWORD *)a1 + 135) = *(_OWORD *)(a2 + 2160);
    *(_OWORD *)((char *)a1 + 2169) = *(_OWORD *)(a2 + 2169);
    goto LABEL_335;
  }
  v142 = *(_QWORD *)(a2 + 2160);
  if (v142 == 1)
  {
    sub_100083F00(a1 + 270);
    goto LABEL_333;
  }
  a1[270] = v142;
  swift_bridgeObjectRelease(v141);
  *((_BYTE *)a1 + 2168) = *(_BYTE *)(v5 + 1888);
  a1[272] = *(_QWORD *)(a2 + 2176);
  *((_BYTE *)a1 + 2184) = *(_BYTE *)(a2 + 2184);
LABEL_335:
  v143 = a1[274];
  if (v143 == 1)
  {
LABEL_338:
    *((_OWORD *)a1 + 137) = *(_OWORD *)(a2 + 2192);
    *(_OWORD *)((char *)a1 + 2201) = *(_OWORD *)(a2 + 2201);
    goto LABEL_340;
  }
  v144 = *(_QWORD *)(a2 + 2192);
  if (v144 == 1)
  {
    sub_100083F00(a1 + 274);
    goto LABEL_338;
  }
  a1[274] = v144;
  swift_bridgeObjectRelease(v143);
  *((_BYTE *)a1 + 2200) = *(_BYTE *)(v5 + 1920);
  a1[276] = *(_QWORD *)(a2 + 2208);
  *((_BYTE *)a1 + 2216) = *(_BYTE *)(a2 + 2216);
LABEL_340:
  v145 = a1[278];
  if (v145 == 1)
  {
LABEL_343:
    *((_OWORD *)a1 + 139) = *(_OWORD *)(a2 + 2224);
    *(_OWORD *)((char *)a1 + 2233) = *(_OWORD *)(a2 + 2233);
    goto LABEL_345;
  }
  v146 = *(_QWORD *)(a2 + 2224);
  if (v146 == 1)
  {
    sub_100083F00(a1 + 278);
    goto LABEL_343;
  }
  a1[278] = v146;
  swift_bridgeObjectRelease(v145);
  *((_BYTE *)a1 + 2232) = *(_BYTE *)(v5 + 1952);
  a1[280] = *(_QWORD *)(a2 + 2240);
  *((_BYTE *)a1 + 2248) = *(_BYTE *)(a2 + 2248);
LABEL_345:
  v147 = a1[282];
  if (v147 == 1)
  {
LABEL_348:
    *((_OWORD *)a1 + 141) = *(_OWORD *)(a2 + 2256);
    *(_OWORD *)((char *)a1 + 2265) = *(_OWORD *)(a2 + 2265);
    goto LABEL_350;
  }
  v148 = *(_QWORD *)(a2 + 2256);
  if (v148 == 1)
  {
    sub_100083F00(a1 + 282);
    goto LABEL_348;
  }
  a1[282] = v148;
  swift_bridgeObjectRelease(v147);
  *((_BYTE *)a1 + 2264) = *(_BYTE *)(v5 + 1984);
  a1[284] = *(_QWORD *)(a2 + 2272);
  *((_BYTE *)a1 + 2280) = *(_BYTE *)(a2 + 2280);
LABEL_350:
  v149 = a1[286];
  if (v149 == 1)
  {
LABEL_353:
    *((_OWORD *)a1 + 143) = *(_OWORD *)(a2 + 2288);
    *(_OWORD *)((char *)a1 + 2297) = *(_OWORD *)(a2 + 2297);
    goto LABEL_355;
  }
  v150 = *(_QWORD *)(a2 + 2288);
  if (v150 == 1)
  {
    sub_100083F00(a1 + 286);
    goto LABEL_353;
  }
  a1[286] = v150;
  swift_bridgeObjectRelease(v149);
  *((_BYTE *)a1 + 2296) = *(_BYTE *)(v5 + 2016);
  a1[288] = *(_QWORD *)(a2 + 2304);
  *((_BYTE *)a1 + 2312) = *(_BYTE *)(a2 + 2312);
LABEL_355:
  v151 = a1[290];
  if (v151 == 1)
  {
LABEL_358:
    *((_OWORD *)a1 + 145) = *(_OWORD *)(a2 + 2320);
    *(_OWORD *)((char *)a1 + 2329) = *(_OWORD *)(a2 + 2329);
    goto LABEL_360;
  }
  v152 = *(_QWORD *)(a2 + 2320);
  if (v152 == 1)
  {
    sub_100083F00(a1 + 290);
    goto LABEL_358;
  }
  a1[290] = v152;
  swift_bridgeObjectRelease(v151);
  *((_BYTE *)a1 + 2328) = *(_BYTE *)(v5 + 2048);
  a1[292] = *(_QWORD *)(a2 + 2336);
  *((_BYTE *)a1 + 2344) = *(_BYTE *)(a2 + 2344);
LABEL_360:
  v153 = a1[294];
  if (v153 == 1)
  {
LABEL_363:
    *((_OWORD *)a1 + 147) = *(_OWORD *)(a2 + 2352);
    *(_OWORD *)((char *)a1 + 2361) = *(_OWORD *)(a2 + 2361);
    goto LABEL_365;
  }
  v154 = *(_QWORD *)(a2 + 2352);
  if (v154 == 1)
  {
    sub_100083F00(a1 + 294);
    goto LABEL_363;
  }
  a1[294] = v154;
  swift_bridgeObjectRelease(v153);
  *((_BYTE *)a1 + 2360) = *(_BYTE *)(v5 + 2080);
  a1[296] = *(_QWORD *)(a2 + 2368);
  *((_BYTE *)a1 + 2376) = *(_BYTE *)(a2 + 2376);
LABEL_365:
  v155 = a1[298];
  if (v155 == 1)
  {
LABEL_368:
    *((_OWORD *)a1 + 149) = *(_OWORD *)(a2 + 2384);
    *(_OWORD *)((char *)a1 + 2393) = *(_OWORD *)(a2 + 2393);
    goto LABEL_370;
  }
  v156 = *(_QWORD *)(a2 + 2384);
  if (v156 == 1)
  {
    sub_100083F00(a1 + 298);
    goto LABEL_368;
  }
  a1[298] = v156;
  swift_bridgeObjectRelease(v155);
  *((_BYTE *)a1 + 2392) = *(_BYTE *)(v5 + 2112);
  a1[300] = *(_QWORD *)(a2 + 2400);
  *((_BYTE *)a1 + 2408) = *(_BYTE *)(a2 + 2408);
LABEL_370:
  v157 = a1[302];
  if (v157 != 1)
  {
    v158 = *(_QWORD *)(a2 + 2416);
    if (v158 != 1)
    {
      a1[302] = v158;
      swift_bridgeObjectRelease(v157);
      *((_BYTE *)a1 + 2424) = *(_BYTE *)(v5 + 2144);
      a1[304] = *(_QWORD *)(a2 + 2432);
      *((_BYTE *)a1 + 2440) = *(_BYTE *)(a2 + 2440);
      goto LABEL_375;
    }
    sub_100083F00(a1 + 302);
  }
  *((_OWORD *)a1 + 151) = *(_OWORD *)(a2 + 2416);
  *(_OWORD *)((char *)a1 + 2425) = *(_OWORD *)(a2 + 2425);
LABEL_375:
  *((_OWORD *)a1 + 153) = *(_OWORD *)(a2 + 2448);
  *((_BYTE *)a1 + 2464) = *(_BYTE *)(a2 + 2464);
  *((_BYTE *)a1 + 2488) = *(_BYTE *)(a2 + 2488);
  *(_OWORD *)(a1 + 309) = *(_OWORD *)(a2 + 2472);
  *((_DWORD *)v4 + 416) = *(_DWORD *)(v5 + 2209);
  *(_WORD *)((char *)a1 + 2493) = *(_WORD *)(a2 + 2493);
  *((_BYTE *)a1 + 2495) = *(_BYTE *)(a2 + 2495);
  v159 = a1[312];
  a1[312] = *(_QWORD *)(a2 + 2496);
  swift_bridgeObjectRelease(v159);
  v160 = a1[313];
  a1[313] = *(_QWORD *)(a2 + 2504);
  swift_bridgeObjectRelease(v160);
LABEL_376:
  v161 = a1 + 314;
  v162 = (_OWORD *)(a2 + 2512);
  if (a1[416] == 1)
  {
LABEL_379:
    memcpy(a1 + 314, (const void *)(a2 + 2512), 0x340uLL);
    goto LABEL_501;
  }
  if (*(_QWORD *)(a2 + 3328) == 1)
  {
    sub_100083F28(a1 + 314);
    goto LABEL_379;
  }
  v163 = *v161;
  if (*v161 == 1)
    goto LABEL_383;
  if (*(_QWORD *)v162 == 1)
  {
    sub_100083F00(a1 + 314);
LABEL_383:
    *(_OWORD *)v161 = *v162;
    *(_OWORD *)((char *)a1 + 2521) = *(_OWORD *)(a2 + 2521);
    goto LABEL_385;
  }
  a1[314] = *(_QWORD *)v162;
  swift_bridgeObjectRelease(v163);
  *((_BYTE *)a1 + 2520) = *(_BYTE *)(v5 + 2240);
  a1[316] = *(_QWORD *)(a2 + 2528);
  *((_BYTE *)a1 + 2536) = *(_BYTE *)(a2 + 2536);
LABEL_385:
  v164 = a1[318];
  if (v164 == 1)
  {
LABEL_388:
    *((_OWORD *)a1 + 159) = *(_OWORD *)(a2 + 2544);
    *(_OWORD *)((char *)a1 + 2553) = *(_OWORD *)(a2 + 2553);
    goto LABEL_390;
  }
  v165 = *(_QWORD *)(a2 + 2544);
  if (v165 == 1)
  {
    sub_100083F00(a1 + 318);
    goto LABEL_388;
  }
  a1[318] = v165;
  swift_bridgeObjectRelease(v164);
  *((_BYTE *)a1 + 2552) = *(_BYTE *)(v5 + 2272);
  a1[320] = *(_QWORD *)(a2 + 2560);
  *((_BYTE *)a1 + 2568) = *(_BYTE *)(a2 + 2568);
LABEL_390:
  v166 = a1[322];
  if (v166 == 1)
  {
LABEL_393:
    *((_OWORD *)a1 + 161) = *(_OWORD *)(a2 + 2576);
    *(_OWORD *)((char *)a1 + 2585) = *(_OWORD *)(a2 + 2585);
    goto LABEL_395;
  }
  v167 = *(_QWORD *)(a2 + 2576);
  if (v167 == 1)
  {
    sub_100083F00(a1 + 322);
    goto LABEL_393;
  }
  a1[322] = v167;
  swift_bridgeObjectRelease(v166);
  *((_BYTE *)a1 + 2584) = *(_BYTE *)(v5 + 2304);
  a1[324] = *(_QWORD *)(a2 + 2592);
  *((_BYTE *)a1 + 2600) = *(_BYTE *)(a2 + 2600);
LABEL_395:
  v168 = a1[326];
  if (v168 == 1)
  {
LABEL_398:
    *((_OWORD *)a1 + 163) = *(_OWORD *)(a2 + 2608);
    *(_OWORD *)((char *)a1 + 2617) = *(_OWORD *)(a2 + 2617);
    goto LABEL_400;
  }
  v169 = *(_QWORD *)(a2 + 2608);
  if (v169 == 1)
  {
    sub_100083F00(a1 + 326);
    goto LABEL_398;
  }
  a1[326] = v169;
  swift_bridgeObjectRelease(v168);
  *((_BYTE *)a1 + 2616) = *(_BYTE *)(v5 + 2336);
  a1[328] = *(_QWORD *)(a2 + 2624);
  *((_BYTE *)a1 + 2632) = *(_BYTE *)(a2 + 2632);
LABEL_400:
  v170 = a1[330];
  if (v170 == 1)
  {
LABEL_403:
    *((_OWORD *)a1 + 165) = *(_OWORD *)(a2 + 2640);
    *(_OWORD *)((char *)a1 + 2649) = *(_OWORD *)(a2 + 2649);
    goto LABEL_405;
  }
  v171 = *(_QWORD *)(a2 + 2640);
  if (v171 == 1)
  {
    sub_100083F00(a1 + 330);
    goto LABEL_403;
  }
  a1[330] = v171;
  swift_bridgeObjectRelease(v170);
  *((_BYTE *)a1 + 2648) = *(_BYTE *)(v5 + 2368);
  a1[332] = *(_QWORD *)(a2 + 2656);
  *((_BYTE *)a1 + 2664) = *(_BYTE *)(a2 + 2664);
LABEL_405:
  v172 = a1[334];
  if (v172 == 1)
  {
LABEL_408:
    *((_OWORD *)a1 + 167) = *(_OWORD *)(a2 + 2672);
    *(_OWORD *)((char *)a1 + 2681) = *(_OWORD *)(a2 + 2681);
    goto LABEL_410;
  }
  v173 = *(_QWORD *)(a2 + 2672);
  if (v173 == 1)
  {
    sub_100083F00(a1 + 334);
    goto LABEL_408;
  }
  a1[334] = v173;
  swift_bridgeObjectRelease(v172);
  *((_BYTE *)a1 + 2680) = *(_BYTE *)(v5 + 2400);
  a1[336] = *(_QWORD *)(a2 + 2688);
  *((_BYTE *)a1 + 2696) = *(_BYTE *)(a2 + 2696);
LABEL_410:
  v174 = a1[338];
  if (v174 == 1)
  {
LABEL_413:
    *((_OWORD *)a1 + 169) = *(_OWORD *)(a2 + 2704);
    *(_OWORD *)((char *)a1 + 2713) = *(_OWORD *)(a2 + 2713);
    goto LABEL_415;
  }
  v175 = *(_QWORD *)(a2 + 2704);
  if (v175 == 1)
  {
    sub_100083F00(a1 + 338);
    goto LABEL_413;
  }
  a1[338] = v175;
  swift_bridgeObjectRelease(v174);
  *((_BYTE *)a1 + 2712) = *(_BYTE *)(v5 + 2432);
  a1[340] = *(_QWORD *)(a2 + 2720);
  *((_BYTE *)a1 + 2728) = *(_BYTE *)(a2 + 2728);
LABEL_415:
  v176 = a1[342];
  if (v176 == 1)
  {
LABEL_418:
    *((_OWORD *)a1 + 171) = *(_OWORD *)(a2 + 2736);
    *(_OWORD *)((char *)a1 + 2745) = *(_OWORD *)(a2 + 2745);
    goto LABEL_420;
  }
  v177 = *(_QWORD *)(a2 + 2736);
  if (v177 == 1)
  {
    sub_100083F00(a1 + 342);
    goto LABEL_418;
  }
  a1[342] = v177;
  swift_bridgeObjectRelease(v176);
  *((_BYTE *)a1 + 2744) = *(_BYTE *)(v5 + 2464);
  a1[344] = *(_QWORD *)(a2 + 2752);
  *((_BYTE *)a1 + 2760) = *(_BYTE *)(a2 + 2760);
LABEL_420:
  v178 = a1[346];
  if (v178 == 1)
  {
LABEL_423:
    *((_OWORD *)a1 + 173) = *(_OWORD *)(a2 + 2768);
    *(_OWORD *)((char *)a1 + 2777) = *(_OWORD *)(a2 + 2777);
    goto LABEL_425;
  }
  v179 = *(_QWORD *)(a2 + 2768);
  if (v179 == 1)
  {
    sub_100083F00(a1 + 346);
    goto LABEL_423;
  }
  a1[346] = v179;
  swift_bridgeObjectRelease(v178);
  *((_BYTE *)a1 + 2776) = *(_BYTE *)(v5 + 2496);
  a1[348] = *(_QWORD *)(a2 + 2784);
  *((_BYTE *)a1 + 2792) = *(_BYTE *)(a2 + 2792);
LABEL_425:
  v180 = a1[350];
  if (v180 == 1)
  {
LABEL_428:
    *((_OWORD *)a1 + 175) = *(_OWORD *)(a2 + 2800);
    *(_OWORD *)((char *)a1 + 2809) = *(_OWORD *)(a2 + 2809);
    goto LABEL_430;
  }
  v181 = *(_QWORD *)(a2 + 2800);
  if (v181 == 1)
  {
    sub_100083F00(a1 + 350);
    goto LABEL_428;
  }
  a1[350] = v181;
  swift_bridgeObjectRelease(v180);
  *((_BYTE *)a1 + 2808) = *(_BYTE *)(v5 + 2528);
  a1[352] = *(_QWORD *)(a2 + 2816);
  *((_BYTE *)a1 + 2824) = *(_BYTE *)(a2 + 2824);
LABEL_430:
  v182 = a1[354];
  if (v182 == 1)
  {
LABEL_433:
    *((_OWORD *)a1 + 177) = *(_OWORD *)(a2 + 2832);
    *(_OWORD *)((char *)a1 + 2841) = *(_OWORD *)(a2 + 2841);
    goto LABEL_435;
  }
  v183 = *(_QWORD *)(a2 + 2832);
  if (v183 == 1)
  {
    sub_100083F00(a1 + 354);
    goto LABEL_433;
  }
  a1[354] = v183;
  swift_bridgeObjectRelease(v182);
  *((_BYTE *)a1 + 2840) = *(_BYTE *)(v5 + 2560);
  a1[356] = *(_QWORD *)(a2 + 2848);
  *((_BYTE *)a1 + 2856) = *(_BYTE *)(a2 + 2856);
LABEL_435:
  v184 = a1[358];
  if (v184 == 1)
  {
LABEL_438:
    *((_OWORD *)a1 + 179) = *(_OWORD *)(a2 + 2864);
    *(_OWORD *)((char *)a1 + 2873) = *(_OWORD *)(a2 + 2873);
    goto LABEL_440;
  }
  v185 = *(_QWORD *)(a2 + 2864);
  if (v185 == 1)
  {
    sub_100083F00(a1 + 358);
    goto LABEL_438;
  }
  a1[358] = v185;
  swift_bridgeObjectRelease(v184);
  *((_BYTE *)a1 + 2872) = *(_BYTE *)(v5 + 2592);
  a1[360] = *(_QWORD *)(a2 + 2880);
  *((_BYTE *)a1 + 2888) = *(_BYTE *)(a2 + 2888);
LABEL_440:
  v186 = a1[362];
  if (v186 == 1)
  {
LABEL_443:
    *((_OWORD *)a1 + 181) = *(_OWORD *)(a2 + 2896);
    *(_OWORD *)((char *)a1 + 2905) = *(_OWORD *)(a2 + 2905);
    goto LABEL_445;
  }
  v187 = *(_QWORD *)(a2 + 2896);
  if (v187 == 1)
  {
    sub_100083F00(a1 + 362);
    goto LABEL_443;
  }
  a1[362] = v187;
  swift_bridgeObjectRelease(v186);
  *((_BYTE *)a1 + 2904) = *(_BYTE *)(v5 + 2624);
  a1[364] = *(_QWORD *)(a2 + 2912);
  *((_BYTE *)a1 + 2920) = *(_BYTE *)(a2 + 2920);
LABEL_445:
  v188 = a1[366];
  if (v188 == 1)
  {
LABEL_448:
    *((_OWORD *)a1 + 183) = *(_OWORD *)(a2 + 2928);
    *(_OWORD *)((char *)a1 + 2937) = *(_OWORD *)(a2 + 2937);
    goto LABEL_450;
  }
  v189 = *(_QWORD *)(a2 + 2928);
  if (v189 == 1)
  {
    sub_100083F00(a1 + 366);
    goto LABEL_448;
  }
  a1[366] = v189;
  swift_bridgeObjectRelease(v188);
  *((_BYTE *)a1 + 2936) = *(_BYTE *)(v5 + 2656);
  a1[368] = *(_QWORD *)(a2 + 2944);
  *((_BYTE *)a1 + 2952) = *(_BYTE *)(a2 + 2952);
LABEL_450:
  v190 = a1[370];
  if (v190 == 1)
  {
LABEL_453:
    *((_OWORD *)a1 + 185) = *(_OWORD *)(a2 + 2960);
    *(_OWORD *)((char *)a1 + 2969) = *(_OWORD *)(a2 + 2969);
    goto LABEL_455;
  }
  v191 = *(_QWORD *)(a2 + 2960);
  if (v191 == 1)
  {
    sub_100083F00(a1 + 370);
    goto LABEL_453;
  }
  a1[370] = v191;
  swift_bridgeObjectRelease(v190);
  *((_BYTE *)a1 + 2968) = *(_BYTE *)(v5 + 2688);
  a1[372] = *(_QWORD *)(a2 + 2976);
  *((_BYTE *)a1 + 2984) = *(_BYTE *)(a2 + 2984);
LABEL_455:
  v192 = a1[374];
  if (v192 == 1)
  {
LABEL_458:
    *((_OWORD *)a1 + 187) = *(_OWORD *)(a2 + 2992);
    *(_OWORD *)((char *)a1 + 3001) = *(_OWORD *)(a2 + 3001);
    goto LABEL_460;
  }
  v193 = *(_QWORD *)(a2 + 2992);
  if (v193 == 1)
  {
    sub_100083F00(a1 + 374);
    goto LABEL_458;
  }
  a1[374] = v193;
  swift_bridgeObjectRelease(v192);
  *((_BYTE *)a1 + 3000) = *(_BYTE *)(v5 + 2720);
  a1[376] = *(_QWORD *)(a2 + 3008);
  *((_BYTE *)a1 + 3016) = *(_BYTE *)(a2 + 3016);
LABEL_460:
  v194 = a1[378];
  if (v194 == 1)
  {
LABEL_463:
    *((_OWORD *)a1 + 189) = *(_OWORD *)(a2 + 3024);
    *(_OWORD *)((char *)a1 + 3033) = *(_OWORD *)(a2 + 3033);
    goto LABEL_465;
  }
  v195 = *(_QWORD *)(a2 + 3024);
  if (v195 == 1)
  {
    sub_100083F00(a1 + 378);
    goto LABEL_463;
  }
  a1[378] = v195;
  swift_bridgeObjectRelease(v194);
  *((_BYTE *)a1 + 3032) = *(_BYTE *)(v5 + 2752);
  a1[380] = *(_QWORD *)(a2 + 3040);
  *((_BYTE *)a1 + 3048) = *(_BYTE *)(a2 + 3048);
LABEL_465:
  v196 = a1[382];
  if (v196 == 1)
  {
LABEL_468:
    *((_OWORD *)a1 + 191) = *(_OWORD *)(a2 + 3056);
    *(_OWORD *)((char *)a1 + 3065) = *(_OWORD *)(a2 + 3065);
    goto LABEL_470;
  }
  v197 = *(_QWORD *)(a2 + 3056);
  if (v197 == 1)
  {
    sub_100083F00(a1 + 382);
    goto LABEL_468;
  }
  a1[382] = v197;
  swift_bridgeObjectRelease(v196);
  *((_BYTE *)a1 + 3064) = *(_BYTE *)(v5 + 2784);
  a1[384] = *(_QWORD *)(a2 + 3072);
  *((_BYTE *)a1 + 3080) = *(_BYTE *)(a2 + 3080);
LABEL_470:
  v198 = a1[386];
  if (v198 == 1)
  {
LABEL_473:
    *((_OWORD *)a1 + 193) = *(_OWORD *)(a2 + 3088);
    *(_OWORD *)((char *)a1 + 3097) = *(_OWORD *)(a2 + 3097);
    goto LABEL_475;
  }
  v199 = *(_QWORD *)(a2 + 3088);
  if (v199 == 1)
  {
    sub_100083F00(a1 + 386);
    goto LABEL_473;
  }
  a1[386] = v199;
  swift_bridgeObjectRelease(v198);
  *((_BYTE *)a1 + 3096) = *(_BYTE *)(v5 + 2816);
  a1[388] = *(_QWORD *)(a2 + 3104);
  *((_BYTE *)a1 + 3112) = *(_BYTE *)(a2 + 3112);
LABEL_475:
  v200 = a1[390];
  if (v200 == 1)
  {
LABEL_478:
    *((_OWORD *)a1 + 195) = *(_OWORD *)(a2 + 3120);
    *(_OWORD *)((char *)a1 + 3129) = *(_OWORD *)(a2 + 3129);
    goto LABEL_480;
  }
  v201 = *(_QWORD *)(a2 + 3120);
  if (v201 == 1)
  {
    sub_100083F00(a1 + 390);
    goto LABEL_478;
  }
  a1[390] = v201;
  swift_bridgeObjectRelease(v200);
  *((_BYTE *)a1 + 3128) = *(_BYTE *)(v5 + 2848);
  a1[392] = *(_QWORD *)(a2 + 3136);
  *((_BYTE *)a1 + 3144) = *(_BYTE *)(a2 + 3144);
LABEL_480:
  v202 = a1[394];
  if (v202 == 1)
  {
LABEL_483:
    *((_OWORD *)a1 + 197) = *(_OWORD *)(a2 + 3152);
    *(_OWORD *)((char *)a1 + 3161) = *(_OWORD *)(a2 + 3161);
    goto LABEL_485;
  }
  v203 = *(_QWORD *)(a2 + 3152);
  if (v203 == 1)
  {
    sub_100083F00(a1 + 394);
    goto LABEL_483;
  }
  a1[394] = v203;
  swift_bridgeObjectRelease(v202);
  *((_BYTE *)a1 + 3160) = *(_BYTE *)(v5 + 2880);
  a1[396] = *(_QWORD *)(a2 + 3168);
  *((_BYTE *)a1 + 3176) = *(_BYTE *)(a2 + 3176);
LABEL_485:
  v204 = a1[398];
  if (v204 == 1)
  {
LABEL_488:
    *((_OWORD *)a1 + 199) = *(_OWORD *)(a2 + 3184);
    *(_OWORD *)((char *)a1 + 3193) = *(_OWORD *)(a2 + 3193);
    goto LABEL_490;
  }
  v205 = *(_QWORD *)(a2 + 3184);
  if (v205 == 1)
  {
    sub_100083F00(a1 + 398);
    goto LABEL_488;
  }
  a1[398] = v205;
  swift_bridgeObjectRelease(v204);
  *((_BYTE *)a1 + 3192) = *(_BYTE *)(v5 + 2912);
  a1[400] = *(_QWORD *)(a2 + 3200);
  *((_BYTE *)a1 + 3208) = *(_BYTE *)(a2 + 3208);
LABEL_490:
  v206 = a1[402];
  if (v206 == 1)
  {
LABEL_493:
    *((_OWORD *)a1 + 201) = *(_OWORD *)(a2 + 3216);
    *(_OWORD *)((char *)a1 + 3225) = *(_OWORD *)(a2 + 3225);
    goto LABEL_495;
  }
  v207 = *(_QWORD *)(a2 + 3216);
  if (v207 == 1)
  {
    sub_100083F00(a1 + 402);
    goto LABEL_493;
  }
  a1[402] = v207;
  swift_bridgeObjectRelease(v206);
  *((_BYTE *)a1 + 3224) = *(_BYTE *)(v5 + 2944);
  a1[404] = *(_QWORD *)(a2 + 3232);
  *((_BYTE *)a1 + 3240) = *(_BYTE *)(a2 + 3240);
LABEL_495:
  v208 = a1[406];
  if (v208 != 1)
  {
    v209 = *(_QWORD *)(a2 + 3248);
    if (v209 != 1)
    {
      a1[406] = v209;
      swift_bridgeObjectRelease(v208);
      *((_BYTE *)a1 + 3256) = *(_BYTE *)(v5 + 2976);
      a1[408] = *(_QWORD *)(a2 + 3264);
      *((_BYTE *)a1 + 3272) = *(_BYTE *)(a2 + 3272);
      goto LABEL_500;
    }
    sub_100083F00(a1 + 406);
  }
  *((_OWORD *)a1 + 203) = *(_OWORD *)(a2 + 3248);
  *(_OWORD *)((char *)a1 + 3257) = *(_OWORD *)(a2 + 3257);
LABEL_500:
  *((_OWORD *)a1 + 205) = *(_OWORD *)(a2 + 3280);
  *((_BYTE *)a1 + 3296) = *(_BYTE *)(a2 + 3296);
  *((_BYTE *)a1 + 3320) = *(_BYTE *)(a2 + 3320);
  *(_OWORD *)(a1 + 413) = *(_OWORD *)(a2 + 3304);
  *((_DWORD *)v4 + 624) = *(_DWORD *)(v5 + 3041);
  *(_WORD *)((char *)a1 + 3325) = *(_WORD *)(a2 + 3325);
  *((_BYTE *)a1 + 3327) = *(_BYTE *)(a2 + 3327);
  v210 = a1[416];
  a1[416] = *(_QWORD *)(a2 + 3328);
  swift_bridgeObjectRelease(v210);
  v211 = a1[417];
  a1[417] = *(_QWORD *)(a2 + 3336);
  swift_bridgeObjectRelease(v211);
LABEL_501:
  v212 = a1 + 418;
  v213 = (_OWORD *)(a2 + 3344);
  if (a1[520] == 1)
  {
LABEL_504:
    memcpy(a1 + 418, (const void *)(a2 + 3344), 0x340uLL);
    goto LABEL_626;
  }
  if (*(_QWORD *)(a2 + 4160) == 1)
  {
    sub_100083F28(a1 + 418);
    goto LABEL_504;
  }
  v214 = *v212;
  if (*v212 == 1)
    goto LABEL_508;
  if (*(_QWORD *)v213 == 1)
  {
    sub_100083F00(a1 + 418);
LABEL_508:
    *(_OWORD *)v212 = *v213;
    *(_OWORD *)((char *)a1 + 3353) = *(_OWORD *)(a2 + 3353);
    goto LABEL_510;
  }
  a1[418] = *(_QWORD *)v213;
  swift_bridgeObjectRelease(v214);
  *((_BYTE *)a1 + 3352) = *(_BYTE *)(v5 + 3072);
  a1[420] = *(_QWORD *)(a2 + 3360);
  *((_BYTE *)a1 + 3368) = *(_BYTE *)(a2 + 3368);
LABEL_510:
  v215 = a1[422];
  if (v215 == 1)
  {
LABEL_513:
    *((_OWORD *)a1 + 211) = *(_OWORD *)(a2 + 3376);
    *(_OWORD *)((char *)a1 + 3385) = *(_OWORD *)(a2 + 3385);
    goto LABEL_515;
  }
  v216 = *(_QWORD *)(a2 + 3376);
  if (v216 == 1)
  {
    sub_100083F00(a1 + 422);
    goto LABEL_513;
  }
  a1[422] = v216;
  swift_bridgeObjectRelease(v215);
  *((_BYTE *)a1 + 3384) = *(_BYTE *)(v5 + 3104);
  a1[424] = *(_QWORD *)(a2 + 3392);
  *((_BYTE *)a1 + 3400) = *(_BYTE *)(a2 + 3400);
LABEL_515:
  v217 = a1[426];
  if (v217 == 1)
  {
LABEL_518:
    *((_OWORD *)a1 + 213) = *(_OWORD *)(a2 + 3408);
    *(_OWORD *)((char *)a1 + 3417) = *(_OWORD *)(a2 + 3417);
    goto LABEL_520;
  }
  v218 = *(_QWORD *)(a2 + 3408);
  if (v218 == 1)
  {
    sub_100083F00(a1 + 426);
    goto LABEL_518;
  }
  a1[426] = v218;
  swift_bridgeObjectRelease(v217);
  *((_BYTE *)a1 + 3416) = *(_BYTE *)(v5 + 3136);
  a1[428] = *(_QWORD *)(a2 + 3424);
  *((_BYTE *)a1 + 3432) = *(_BYTE *)(a2 + 3432);
LABEL_520:
  v219 = a1[430];
  if (v219 == 1)
  {
LABEL_523:
    *((_OWORD *)a1 + 215) = *(_OWORD *)(a2 + 3440);
    *(_OWORD *)((char *)a1 + 3449) = *(_OWORD *)(a2 + 3449);
    goto LABEL_525;
  }
  v220 = *(_QWORD *)(a2 + 3440);
  if (v220 == 1)
  {
    sub_100083F00(a1 + 430);
    goto LABEL_523;
  }
  a1[430] = v220;
  swift_bridgeObjectRelease(v219);
  *((_BYTE *)a1 + 3448) = *(_BYTE *)(v5 + 3168);
  a1[432] = *(_QWORD *)(a2 + 3456);
  *((_BYTE *)a1 + 3464) = *(_BYTE *)(a2 + 3464);
LABEL_525:
  v221 = a1[434];
  if (v221 == 1)
  {
LABEL_528:
    *((_OWORD *)a1 + 217) = *(_OWORD *)(a2 + 3472);
    *(_OWORD *)((char *)a1 + 3481) = *(_OWORD *)(a2 + 3481);
    goto LABEL_530;
  }
  v222 = *(_QWORD *)(a2 + 3472);
  if (v222 == 1)
  {
    sub_100083F00(a1 + 434);
    goto LABEL_528;
  }
  a1[434] = v222;
  swift_bridgeObjectRelease(v221);
  *((_BYTE *)a1 + 3480) = *(_BYTE *)(v5 + 3200);
  a1[436] = *(_QWORD *)(a2 + 3488);
  *((_BYTE *)a1 + 3496) = *(_BYTE *)(a2 + 3496);
LABEL_530:
  v223 = a1[438];
  if (v223 == 1)
  {
LABEL_533:
    *((_OWORD *)a1 + 219) = *(_OWORD *)(a2 + 3504);
    *(_OWORD *)((char *)a1 + 3513) = *(_OWORD *)(a2 + 3513);
    goto LABEL_535;
  }
  v224 = *(_QWORD *)(a2 + 3504);
  if (v224 == 1)
  {
    sub_100083F00(a1 + 438);
    goto LABEL_533;
  }
  a1[438] = v224;
  swift_bridgeObjectRelease(v223);
  *((_BYTE *)a1 + 3512) = *(_BYTE *)(v5 + 3232);
  a1[440] = *(_QWORD *)(a2 + 3520);
  *((_BYTE *)a1 + 3528) = *(_BYTE *)(a2 + 3528);
LABEL_535:
  v225 = a1[442];
  if (v225 == 1)
  {
LABEL_538:
    *((_OWORD *)a1 + 221) = *(_OWORD *)(a2 + 3536);
    *(_OWORD *)((char *)a1 + 3545) = *(_OWORD *)(a2 + 3545);
    goto LABEL_540;
  }
  v226 = *(_QWORD *)(a2 + 3536);
  if (v226 == 1)
  {
    sub_100083F00(a1 + 442);
    goto LABEL_538;
  }
  a1[442] = v226;
  swift_bridgeObjectRelease(v225);
  *((_BYTE *)a1 + 3544) = *(_BYTE *)(v5 + 3264);
  a1[444] = *(_QWORD *)(a2 + 3552);
  *((_BYTE *)a1 + 3560) = *(_BYTE *)(a2 + 3560);
LABEL_540:
  v227 = a1[446];
  if (v227 == 1)
  {
LABEL_543:
    *((_OWORD *)a1 + 223) = *(_OWORD *)(a2 + 3568);
    *(_OWORD *)((char *)a1 + 3577) = *(_OWORD *)(a2 + 3577);
    goto LABEL_545;
  }
  v228 = *(_QWORD *)(a2 + 3568);
  if (v228 == 1)
  {
    sub_100083F00(a1 + 446);
    goto LABEL_543;
  }
  a1[446] = v228;
  swift_bridgeObjectRelease(v227);
  *((_BYTE *)a1 + 3576) = *(_BYTE *)(v5 + 3296);
  a1[448] = *(_QWORD *)(a2 + 3584);
  *((_BYTE *)a1 + 3592) = *(_BYTE *)(a2 + 3592);
LABEL_545:
  v229 = a1[450];
  if (v229 == 1)
  {
LABEL_548:
    *((_OWORD *)a1 + 225) = *(_OWORD *)(a2 + 3600);
    *(_OWORD *)((char *)a1 + 3609) = *(_OWORD *)(a2 + 3609);
    goto LABEL_550;
  }
  v230 = *(_QWORD *)(a2 + 3600);
  if (v230 == 1)
  {
    sub_100083F00(a1 + 450);
    goto LABEL_548;
  }
  a1[450] = v230;
  swift_bridgeObjectRelease(v229);
  *((_BYTE *)a1 + 3608) = *(_BYTE *)(v5 + 3328);
  a1[452] = *(_QWORD *)(a2 + 3616);
  *((_BYTE *)a1 + 3624) = *(_BYTE *)(a2 + 3624);
LABEL_550:
  v231 = a1[454];
  if (v231 == 1)
  {
LABEL_553:
    *((_OWORD *)a1 + 227) = *(_OWORD *)(a2 + 3632);
    *(_OWORD *)((char *)a1 + 3641) = *(_OWORD *)(a2 + 3641);
    goto LABEL_555;
  }
  v232 = *(_QWORD *)(a2 + 3632);
  if (v232 == 1)
  {
    sub_100083F00(a1 + 454);
    goto LABEL_553;
  }
  a1[454] = v232;
  swift_bridgeObjectRelease(v231);
  *((_BYTE *)a1 + 3640) = *(_BYTE *)(v5 + 3360);
  a1[456] = *(_QWORD *)(a2 + 3648);
  *((_BYTE *)a1 + 3656) = *(_BYTE *)(a2 + 3656);
LABEL_555:
  v233 = a1[458];
  if (v233 == 1)
  {
LABEL_558:
    *((_OWORD *)a1 + 229) = *(_OWORD *)(a2 + 3664);
    *(_OWORD *)((char *)a1 + 3673) = *(_OWORD *)(a2 + 3673);
    goto LABEL_560;
  }
  v234 = *(_QWORD *)(a2 + 3664);
  if (v234 == 1)
  {
    sub_100083F00(a1 + 458);
    goto LABEL_558;
  }
  a1[458] = v234;
  swift_bridgeObjectRelease(v233);
  *((_BYTE *)a1 + 3672) = *(_BYTE *)(v5 + 3392);
  a1[460] = *(_QWORD *)(a2 + 3680);
  *((_BYTE *)a1 + 3688) = *(_BYTE *)(a2 + 3688);
LABEL_560:
  v235 = a1[462];
  if (v235 == 1)
  {
LABEL_563:
    *((_OWORD *)a1 + 231) = *(_OWORD *)(a2 + 3696);
    *(_OWORD *)((char *)a1 + 3705) = *(_OWORD *)(a2 + 3705);
    goto LABEL_565;
  }
  v236 = *(_QWORD *)(a2 + 3696);
  if (v236 == 1)
  {
    sub_100083F00(a1 + 462);
    goto LABEL_563;
  }
  a1[462] = v236;
  swift_bridgeObjectRelease(v235);
  *((_BYTE *)a1 + 3704) = *(_BYTE *)(v5 + 3424);
  a1[464] = *(_QWORD *)(a2 + 3712);
  *((_BYTE *)a1 + 3720) = *(_BYTE *)(a2 + 3720);
LABEL_565:
  v237 = a1[466];
  if (v237 == 1)
  {
LABEL_568:
    *((_OWORD *)a1 + 233) = *(_OWORD *)(a2 + 3728);
    *(_OWORD *)((char *)a1 + 3737) = *(_OWORD *)(a2 + 3737);
    goto LABEL_570;
  }
  v238 = *(_QWORD *)(a2 + 3728);
  if (v238 == 1)
  {
    sub_100083F00(a1 + 466);
    goto LABEL_568;
  }
  a1[466] = v238;
  swift_bridgeObjectRelease(v237);
  *((_BYTE *)a1 + 3736) = *(_BYTE *)(v5 + 3456);
  a1[468] = *(_QWORD *)(a2 + 3744);
  *((_BYTE *)a1 + 3752) = *(_BYTE *)(a2 + 3752);
LABEL_570:
  v239 = a1[470];
  if (v239 == 1)
  {
LABEL_573:
    *((_OWORD *)a1 + 235) = *(_OWORD *)(a2 + 3760);
    *(_OWORD *)((char *)a1 + 3769) = *(_OWORD *)(a2 + 3769);
    goto LABEL_575;
  }
  v240 = *(_QWORD *)(a2 + 3760);
  if (v240 == 1)
  {
    sub_100083F00(a1 + 470);
    goto LABEL_573;
  }
  a1[470] = v240;
  swift_bridgeObjectRelease(v239);
  *((_BYTE *)a1 + 3768) = *(_BYTE *)(v5 + 3488);
  a1[472] = *(_QWORD *)(a2 + 3776);
  *((_BYTE *)a1 + 3784) = *(_BYTE *)(a2 + 3784);
LABEL_575:
  v241 = a1[474];
  if (v241 == 1)
  {
LABEL_578:
    *((_OWORD *)a1 + 237) = *(_OWORD *)(a2 + 3792);
    *(_OWORD *)((char *)a1 + 3801) = *(_OWORD *)(a2 + 3801);
    goto LABEL_580;
  }
  v242 = *(_QWORD *)(a2 + 3792);
  if (v242 == 1)
  {
    sub_100083F00(a1 + 474);
    goto LABEL_578;
  }
  a1[474] = v242;
  swift_bridgeObjectRelease(v241);
  *((_BYTE *)a1 + 3800) = *(_BYTE *)(v5 + 3520);
  a1[476] = *(_QWORD *)(a2 + 3808);
  *((_BYTE *)a1 + 3816) = *(_BYTE *)(a2 + 3816);
LABEL_580:
  v243 = a1[478];
  if (v243 == 1)
  {
LABEL_583:
    *((_OWORD *)a1 + 239) = *(_OWORD *)(a2 + 3824);
    *(_OWORD *)((char *)a1 + 3833) = *(_OWORD *)(a2 + 3833);
    goto LABEL_585;
  }
  v244 = *(_QWORD *)(a2 + 3824);
  if (v244 == 1)
  {
    sub_100083F00(a1 + 478);
    goto LABEL_583;
  }
  a1[478] = v244;
  swift_bridgeObjectRelease(v243);
  *((_BYTE *)a1 + 3832) = *(_BYTE *)(v5 + 3552);
  a1[480] = *(_QWORD *)(a2 + 3840);
  *((_BYTE *)a1 + 3848) = *(_BYTE *)(a2 + 3848);
LABEL_585:
  v245 = a1[482];
  if (v245 == 1)
  {
LABEL_588:
    *((_OWORD *)a1 + 241) = *(_OWORD *)(a2 + 3856);
    *(_OWORD *)((char *)a1 + 3865) = *(_OWORD *)(a2 + 3865);
    goto LABEL_590;
  }
  v246 = *(_QWORD *)(a2 + 3856);
  if (v246 == 1)
  {
    sub_100083F00(a1 + 482);
    goto LABEL_588;
  }
  a1[482] = v246;
  swift_bridgeObjectRelease(v245);
  *((_BYTE *)a1 + 3864) = *(_BYTE *)(v5 + 3584);
  a1[484] = *(_QWORD *)(a2 + 3872);
  *((_BYTE *)a1 + 3880) = *(_BYTE *)(a2 + 3880);
LABEL_590:
  v247 = a1[486];
  if (v247 == 1)
  {
LABEL_593:
    *((_OWORD *)a1 + 243) = *(_OWORD *)(a2 + 3888);
    *(_OWORD *)((char *)a1 + 3897) = *(_OWORD *)(a2 + 3897);
    goto LABEL_595;
  }
  v248 = *(_QWORD *)(a2 + 3888);
  if (v248 == 1)
  {
    sub_100083F00(a1 + 486);
    goto LABEL_593;
  }
  a1[486] = v248;
  swift_bridgeObjectRelease(v247);
  *((_BYTE *)a1 + 3896) = *(_BYTE *)(v5 + 3616);
  a1[488] = *(_QWORD *)(a2 + 3904);
  *((_BYTE *)a1 + 3912) = *(_BYTE *)(a2 + 3912);
LABEL_595:
  v249 = a1[490];
  if (v249 == 1)
  {
LABEL_598:
    *((_OWORD *)a1 + 245) = *(_OWORD *)(a2 + 3920);
    *(_OWORD *)((char *)a1 + 3929) = *(_OWORD *)(a2 + 3929);
    goto LABEL_600;
  }
  v250 = *(_QWORD *)(a2 + 3920);
  if (v250 == 1)
  {
    sub_100083F00(a1 + 490);
    goto LABEL_598;
  }
  a1[490] = v250;
  swift_bridgeObjectRelease(v249);
  *((_BYTE *)a1 + 3928) = *(_BYTE *)(v5 + 3648);
  a1[492] = *(_QWORD *)(a2 + 3936);
  *((_BYTE *)a1 + 3944) = *(_BYTE *)(a2 + 3944);
LABEL_600:
  v251 = a1[494];
  if (v251 == 1)
  {
LABEL_603:
    *((_OWORD *)a1 + 247) = *(_OWORD *)(a2 + 3952);
    *(_OWORD *)((char *)a1 + 3961) = *(_OWORD *)(a2 + 3961);
    goto LABEL_605;
  }
  v252 = *(_QWORD *)(a2 + 3952);
  if (v252 == 1)
  {
    sub_100083F00(a1 + 494);
    goto LABEL_603;
  }
  a1[494] = v252;
  swift_bridgeObjectRelease(v251);
  *((_BYTE *)a1 + 3960) = *(_BYTE *)(v5 + 3680);
  a1[496] = *(_QWORD *)(a2 + 3968);
  *((_BYTE *)a1 + 3976) = *(_BYTE *)(a2 + 3976);
LABEL_605:
  v253 = a1[498];
  if (v253 == 1)
  {
LABEL_608:
    *((_OWORD *)a1 + 249) = *(_OWORD *)(a2 + 3984);
    *(_OWORD *)((char *)a1 + 3993) = *(_OWORD *)(a2 + 3993);
    goto LABEL_610;
  }
  v254 = *(_QWORD *)(a2 + 3984);
  if (v254 == 1)
  {
    sub_100083F00(a1 + 498);
    goto LABEL_608;
  }
  a1[498] = v254;
  swift_bridgeObjectRelease(v253);
  *((_BYTE *)a1 + 3992) = *(_BYTE *)(v5 + 3712);
  a1[500] = *(_QWORD *)(a2 + 4000);
  *((_BYTE *)a1 + 4008) = *(_BYTE *)(a2 + 4008);
LABEL_610:
  v255 = a1[502];
  if (v255 == 1)
  {
LABEL_613:
    *((_OWORD *)a1 + 251) = *(_OWORD *)(a2 + 4016);
    *(_OWORD *)((char *)a1 + 4025) = *(_OWORD *)(a2 + 4025);
    goto LABEL_615;
  }
  v256 = *(_QWORD *)(a2 + 4016);
  if (v256 == 1)
  {
    sub_100083F00(a1 + 502);
    goto LABEL_613;
  }
  a1[502] = v256;
  swift_bridgeObjectRelease(v255);
  *((_BYTE *)a1 + 4024) = *(_BYTE *)(v5 + 3744);
  a1[504] = *(_QWORD *)(a2 + 4032);
  *((_BYTE *)a1 + 4040) = *(_BYTE *)(a2 + 4040);
LABEL_615:
  v257 = a1[506];
  if (v257 == 1)
  {
LABEL_618:
    *((_OWORD *)a1 + 253) = *(_OWORD *)(a2 + 4048);
    *(_OWORD *)((char *)a1 + 4057) = *(_OWORD *)(a2 + 4057);
    goto LABEL_620;
  }
  v258 = *(_QWORD *)(a2 + 4048);
  if (v258 == 1)
  {
    sub_100083F00(a1 + 506);
    goto LABEL_618;
  }
  a1[506] = v258;
  swift_bridgeObjectRelease(v257);
  *((_BYTE *)a1 + 4056) = *(_BYTE *)(v5 + 3776);
  a1[508] = *(_QWORD *)(a2 + 4064);
  *((_BYTE *)a1 + 4072) = *(_BYTE *)(a2 + 4072);
LABEL_620:
  v259 = a1[510];
  if (v259 != 1)
  {
    v260 = *(_QWORD *)(a2 + 4080);
    if (v260 != 1)
    {
      a1[510] = v260;
      swift_bridgeObjectRelease(v259);
      *((_BYTE *)a1 + 4088) = *(_BYTE *)(v5 + 3808);
      *((_BYTE *)a1 + 4104) = *(_BYTE *)(a2 + 4104);
      a1[512] = *(_QWORD *)(a2 + 4096);
      goto LABEL_625;
    }
    sub_100083F00(a1 + 510);
  }
  *((_OWORD *)a1 + 255) = *(_OWORD *)(a2 + 4080);
  *(_OWORD *)((char *)a1 + 4089) = *(_OWORD *)(a2 + 4089);
LABEL_625:
  *((_OWORD *)a1 + 257) = *(_OWORD *)(a2 + 4112);
  *((_BYTE *)a1 + 4128) = *(_BYTE *)(a2 + 4128);
  *(_OWORD *)(a1 + 517) = *(_OWORD *)(a2 + 4136);
  *((_BYTE *)a1 + 4152) = *(_BYTE *)(a2 + 4152);
  *((_DWORD *)v4 + 832) = *(_DWORD *)(v5 + 3873);
  *((_WORD *)v4 + 1666) = *(_WORD *)(v5 + 3877);
  v4[3334] = *(_BYTE *)(v5 + 3879);
  v261 = a1[520];
  a1[520] = *(_QWORD *)(a2 + 4160);
  swift_bridgeObjectRelease(v261);
  v262 = a1[521];
  a1[521] = *(_QWORD *)(a2 + 4168);
  swift_bridgeObjectRelease(v262);
LABEL_626:
  v263 = a1 + 522;
  v264 = (_OWORD *)(a2 + 4176);
  if (a1[624] == 1)
  {
LABEL_629:
    memcpy(a1 + 522, (const void *)(a2 + 4176), 0x340uLL);
    goto LABEL_751;
  }
  if (*(_QWORD *)(a2 + 4992) == 1)
  {
    sub_100083F28(a1 + 522);
    goto LABEL_629;
  }
  v265 = *v263;
  if (*v263 == 1)
    goto LABEL_633;
  if (*(_QWORD *)v264 == 1)
  {
    sub_100083F00(a1 + 522);
LABEL_633:
    *(_OWORD *)v263 = *v264;
    *(_OWORD *)((char *)a1 + 4185) = *(_OWORD *)(a2 + 4185);
    goto LABEL_635;
  }
  a1[522] = *(_QWORD *)v264;
  swift_bridgeObjectRelease(v265);
  v4[3359] = *(_BYTE *)(v5 + 3904);
  a1[524] = *(_QWORD *)(a2 + 4192);
  *((_BYTE *)a1 + 4200) = *(_BYTE *)(a2 + 4200);
LABEL_635:
  v266 = a1[526];
  if (v266 == 1)
  {
LABEL_638:
    *((_OWORD *)a1 + 263) = *(_OWORD *)(a2 + 4208);
    *(_OWORD *)((char *)a1 + 4217) = *(_OWORD *)(a2 + 4217);
    goto LABEL_640;
  }
  v267 = *(_QWORD *)(a2 + 4208);
  if (v267 == 1)
  {
    sub_100083F00(a1 + 526);
    goto LABEL_638;
  }
  a1[526] = v267;
  swift_bridgeObjectRelease(v266);
  v4[3391] = *(_BYTE *)(v5 + 3936);
  *((_BYTE *)a1 + 4232) = *(_BYTE *)(a2 + 4232);
  a1[528] = *(_QWORD *)(a2 + 4224);
LABEL_640:
  v268 = a1[530];
  if (v268 == 1)
  {
LABEL_643:
    *((_OWORD *)a1 + 265) = *(_OWORD *)(a2 + 4240);
    *(_OWORD *)((char *)a1 + 4249) = *(_OWORD *)(a2 + 4249);
    goto LABEL_645;
  }
  v269 = *(_QWORD *)(a2 + 4240);
  if (v269 == 1)
  {
    sub_100083F00(a1 + 530);
    goto LABEL_643;
  }
  a1[530] = v269;
  swift_bridgeObjectRelease(v268);
  v4[3423] = *(_BYTE *)(v5 + 3968);
  *((_BYTE *)a1 + 4264) = *(_BYTE *)(a2 + 4264);
  a1[532] = *(_QWORD *)(a2 + 4256);
LABEL_645:
  v270 = a1[534];
  if (v270 == 1)
  {
LABEL_648:
    *((_OWORD *)a1 + 267) = *(_OWORD *)(a2 + 4272);
    *(_OWORD *)((char *)a1 + 4281) = *(_OWORD *)(a2 + 4281);
    goto LABEL_650;
  }
  v271 = *(_QWORD *)(a2 + 4272);
  if (v271 == 1)
  {
    sub_100083F00(a1 + 534);
    goto LABEL_648;
  }
  a1[534] = v271;
  swift_bridgeObjectRelease(v270);
  v4[3455] = *(_BYTE *)(v5 + 4000);
  *((_BYTE *)a1 + 4296) = *(_BYTE *)(a2 + 4296);
  a1[536] = *(_QWORD *)(a2 + 4288);
LABEL_650:
  v272 = a1[538];
  if (v272 == 1)
  {
LABEL_653:
    *((_OWORD *)a1 + 269) = *(_OWORD *)(a2 + 4304);
    *(_OWORD *)((char *)a1 + 4313) = *(_OWORD *)(a2 + 4313);
    goto LABEL_655;
  }
  v273 = *(_QWORD *)(a2 + 4304);
  if (v273 == 1)
  {
    sub_100083F00(a1 + 538);
    goto LABEL_653;
  }
  a1[538] = v273;
  swift_bridgeObjectRelease(v272);
  v4[3487] = *(_BYTE *)(v5 + 4032);
  *((_BYTE *)a1 + 4328) = *(_BYTE *)(a2 + 4328);
  a1[540] = *(_QWORD *)(a2 + 4320);
LABEL_655:
  v274 = a1[542];
  if (v274 == 1)
  {
LABEL_658:
    *((_OWORD *)a1 + 271) = *(_OWORD *)(a2 + 4336);
    *(_OWORD *)((char *)a1 + 4345) = *(_OWORD *)(a2 + 4345);
    goto LABEL_660;
  }
  v275 = *(_QWORD *)(a2 + 4336);
  if (v275 == 1)
  {
    sub_100083F00(a1 + 542);
    goto LABEL_658;
  }
  a1[542] = v275;
  swift_bridgeObjectRelease(v274);
  v4[3519] = *(_BYTE *)(v5 + 4064);
  *((_BYTE *)a1 + 4360) = *(_BYTE *)(a2 + 4360);
  a1[544] = *(_QWORD *)(a2 + 4352);
LABEL_660:
  v276 = a1[546];
  if (v276 == 1)
  {
LABEL_663:
    *((_OWORD *)a1 + 273) = *(_OWORD *)(a2 + 4368);
    *(_OWORD *)((char *)a1 + 4377) = *(_OWORD *)(a2 + 4377);
    goto LABEL_665;
  }
  v277 = *(_QWORD *)(a2 + 4368);
  if (v277 == 1)
  {
    sub_100083F00(a1 + 546);
    goto LABEL_663;
  }
  a1[546] = v277;
  swift_bridgeObjectRelease(v276);
  v4[3551] = *(_BYTE *)(a2 + 4376);
  *((_BYTE *)a1 + 4392) = *(_BYTE *)(a2 + 4392);
  a1[548] = *(_QWORD *)(a2 + 4384);
LABEL_665:
  v278 = a1[550];
  if (v278 == 1)
  {
LABEL_668:
    *((_OWORD *)a1 + 275) = *(_OWORD *)(a2 + 4400);
    *(_OWORD *)((char *)a1 + 4409) = *(_OWORD *)(a2 + 4409);
    goto LABEL_670;
  }
  v279 = *(_QWORD *)(a2 + 4400);
  if (v279 == 1)
  {
    sub_100083F00(a1 + 550);
    goto LABEL_668;
  }
  a1[550] = v279;
  swift_bridgeObjectRelease(v278);
  v4[3583] = *(_BYTE *)(a2 + 4408);
  *((_BYTE *)a1 + 4424) = *(_BYTE *)(a2 + 4424);
  a1[552] = *(_QWORD *)(a2 + 4416);
LABEL_670:
  v280 = a1[554];
  if (v280 == 1)
  {
LABEL_673:
    *((_OWORD *)a1 + 277) = *(_OWORD *)(a2 + 4432);
    *(_OWORD *)((char *)a1 + 4441) = *(_OWORD *)(a2 + 4441);
    goto LABEL_675;
  }
  v281 = *(_QWORD *)(a2 + 4432);
  if (v281 == 1)
  {
    sub_100083F00(a1 + 554);
    goto LABEL_673;
  }
  a1[554] = v281;
  swift_bridgeObjectRelease(v280);
  v4[3615] = *(_BYTE *)(a2 + 4440);
  *((_BYTE *)a1 + 4456) = *(_BYTE *)(a2 + 4456);
  a1[556] = *(_QWORD *)(a2 + 4448);
LABEL_675:
  v282 = a1[558];
  if (v282 == 1)
  {
LABEL_678:
    *((_OWORD *)a1 + 279) = *(_OWORD *)(a2 + 4464);
    *(_OWORD *)((char *)a1 + 4473) = *(_OWORD *)(a2 + 4473);
    goto LABEL_680;
  }
  v283 = *(_QWORD *)(a2 + 4464);
  if (v283 == 1)
  {
    sub_100083F00(a1 + 558);
    goto LABEL_678;
  }
  a1[558] = v283;
  swift_bridgeObjectRelease(v282);
  v4[3647] = *(_BYTE *)(a2 + 4472);
  *((_BYTE *)a1 + 4488) = *(_BYTE *)(a2 + 4488);
  a1[560] = *(_QWORD *)(a2 + 4480);
LABEL_680:
  v284 = a1[562];
  if (v284 == 1)
  {
LABEL_683:
    *((_OWORD *)a1 + 281) = *(_OWORD *)(a2 + 4496);
    *(_OWORD *)((char *)a1 + 4505) = *(_OWORD *)(a2 + 4505);
    goto LABEL_685;
  }
  v285 = *(_QWORD *)(a2 + 4496);
  if (v285 == 1)
  {
    sub_100083F00(a1 + 562);
    goto LABEL_683;
  }
  a1[562] = v285;
  swift_bridgeObjectRelease(v284);
  v4[3679] = *(_BYTE *)(a2 + 4504);
  *((_BYTE *)a1 + 4520) = *(_BYTE *)(a2 + 4520);
  a1[564] = *(_QWORD *)(a2 + 4512);
LABEL_685:
  v286 = a1[566];
  if (v286 == 1)
  {
LABEL_688:
    *((_OWORD *)a1 + 283) = *(_OWORD *)(a2 + 4528);
    *(_OWORD *)((char *)a1 + 4537) = *(_OWORD *)(a2 + 4537);
    goto LABEL_690;
  }
  v287 = *(_QWORD *)(a2 + 4528);
  if (v287 == 1)
  {
    sub_100083F00(a1 + 566);
    goto LABEL_688;
  }
  a1[566] = v287;
  swift_bridgeObjectRelease(v286);
  v4[3711] = *(_BYTE *)(a2 + 4536);
  *((_BYTE *)a1 + 4552) = *(_BYTE *)(a2 + 4552);
  a1[568] = *(_QWORD *)(a2 + 4544);
LABEL_690:
  v288 = a1[570];
  if (v288 == 1)
  {
LABEL_693:
    *((_OWORD *)a1 + 285) = *(_OWORD *)(a2 + 4560);
    *(_OWORD *)((char *)a1 + 4569) = *(_OWORD *)(a2 + 4569);
    goto LABEL_695;
  }
  v289 = *(_QWORD *)(a2 + 4560);
  if (v289 == 1)
  {
    sub_100083F00(a1 + 570);
    goto LABEL_693;
  }
  a1[570] = v289;
  swift_bridgeObjectRelease(v288);
  v4[3743] = *(_BYTE *)(a2 + 4568);
  *((_BYTE *)a1 + 4584) = *(_BYTE *)(a2 + 4584);
  a1[572] = *(_QWORD *)(a2 + 4576);
LABEL_695:
  v290 = a1[574];
  if (v290 == 1)
  {
LABEL_698:
    *((_OWORD *)a1 + 287) = *(_OWORD *)(a2 + 4592);
    *(_OWORD *)((char *)a1 + 4601) = *(_OWORD *)(a2 + 4601);
    goto LABEL_700;
  }
  v291 = *(_QWORD *)(a2 + 4592);
  if (v291 == 1)
  {
    sub_100083F00(a1 + 574);
    goto LABEL_698;
  }
  a1[574] = v291;
  swift_bridgeObjectRelease(v290);
  v4[3775] = *(_BYTE *)(a2 + 4600);
  *((_BYTE *)a1 + 4616) = *(_BYTE *)(a2 + 4616);
  a1[576] = *(_QWORD *)(a2 + 4608);
LABEL_700:
  v292 = a1[578];
  if (v292 == 1)
  {
LABEL_703:
    *((_OWORD *)a1 + 289) = *(_OWORD *)(a2 + 4624);
    *(_OWORD *)((char *)a1 + 4633) = *(_OWORD *)(a2 + 4633);
    goto LABEL_705;
  }
  v293 = *(_QWORD *)(a2 + 4624);
  if (v293 == 1)
  {
    sub_100083F00(a1 + 578);
    goto LABEL_703;
  }
  a1[578] = v293;
  swift_bridgeObjectRelease(v292);
  v4[3807] = *(_BYTE *)(a2 + 4632);
  *((_BYTE *)a1 + 4648) = *(_BYTE *)(a2 + 4648);
  a1[580] = *(_QWORD *)(a2 + 4640);
LABEL_705:
  v294 = a1[582];
  if (v294 == 1)
  {
LABEL_708:
    *((_OWORD *)a1 + 291) = *(_OWORD *)(a2 + 4656);
    *(_OWORD *)((char *)a1 + 4665) = *(_OWORD *)(a2 + 4665);
    goto LABEL_710;
  }
  v295 = *(_QWORD *)(a2 + 4656);
  if (v295 == 1)
  {
    sub_100083F00(a1 + 582);
    goto LABEL_708;
  }
  a1[582] = v295;
  swift_bridgeObjectRelease(v294);
  v4[3839] = *(_BYTE *)(a2 + 4664);
  *((_BYTE *)a1 + 4680) = *(_BYTE *)(a2 + 4680);
  a1[584] = *(_QWORD *)(a2 + 4672);
LABEL_710:
  v296 = a1[586];
  if (v296 == 1)
  {
LABEL_713:
    *((_OWORD *)a1 + 293) = *(_OWORD *)(a2 + 4688);
    *(_OWORD *)((char *)a1 + 4697) = *(_OWORD *)(a2 + 4697);
    goto LABEL_715;
  }
  v297 = *(_QWORD *)(a2 + 4688);
  if (v297 == 1)
  {
    sub_100083F00(a1 + 586);
    goto LABEL_713;
  }
  a1[586] = v297;
  swift_bridgeObjectRelease(v296);
  v4[3871] = *(_BYTE *)(a2 + 4696);
  *((_BYTE *)a1 + 4712) = *(_BYTE *)(a2 + 4712);
  a1[588] = *(_QWORD *)(a2 + 4704);
LABEL_715:
  v298 = a1[590];
  if (v298 == 1)
  {
LABEL_718:
    *((_OWORD *)a1 + 295) = *(_OWORD *)(a2 + 4720);
    *(_OWORD *)((char *)a1 + 4729) = *(_OWORD *)(a2 + 4729);
    goto LABEL_720;
  }
  v299 = *(_QWORD *)(a2 + 4720);
  if (v299 == 1)
  {
    sub_100083F00(a1 + 590);
    goto LABEL_718;
  }
  a1[590] = v299;
  swift_bridgeObjectRelease(v298);
  v4[3903] = *(_BYTE *)(a2 + 4728);
  *((_BYTE *)a1 + 4744) = *(_BYTE *)(a2 + 4744);
  a1[592] = *(_QWORD *)(a2 + 4736);
LABEL_720:
  v300 = a1[594];
  if (v300 == 1)
  {
LABEL_723:
    *((_OWORD *)a1 + 297) = *(_OWORD *)(a2 + 4752);
    *(_OWORD *)((char *)a1 + 4761) = *(_OWORD *)(a2 + 4761);
    goto LABEL_725;
  }
  v301 = *(_QWORD *)(a2 + 4752);
  if (v301 == 1)
  {
    sub_100083F00(a1 + 594);
    goto LABEL_723;
  }
  a1[594] = v301;
  swift_bridgeObjectRelease(v300);
  v4[3935] = *(_BYTE *)(a2 + 4760);
  *((_BYTE *)a1 + 4776) = *(_BYTE *)(a2 + 4776);
  a1[596] = *(_QWORD *)(a2 + 4768);
LABEL_725:
  v302 = a1[598];
  if (v302 == 1)
  {
LABEL_728:
    *((_OWORD *)a1 + 299) = *(_OWORD *)(a2 + 4784);
    *(_OWORD *)((char *)a1 + 4793) = *(_OWORD *)(a2 + 4793);
    goto LABEL_730;
  }
  v303 = *(_QWORD *)(a2 + 4784);
  if (v303 == 1)
  {
    sub_100083F00(a1 + 598);
    goto LABEL_728;
  }
  a1[598] = v303;
  swift_bridgeObjectRelease(v302);
  v4[3967] = *(_BYTE *)(a2 + 4792);
  *((_BYTE *)a1 + 4808) = *(_BYTE *)(a2 + 4808);
  a1[600] = *(_QWORD *)(a2 + 4800);
LABEL_730:
  v304 = a1[602];
  if (v304 == 1)
  {
LABEL_733:
    *((_OWORD *)a1 + 301) = *(_OWORD *)(a2 + 4816);
    *(_OWORD *)((char *)a1 + 4825) = *(_OWORD *)(a2 + 4825);
    goto LABEL_735;
  }
  v305 = *(_QWORD *)(a2 + 4816);
  if (v305 == 1)
  {
    sub_100083F00(a1 + 602);
    goto LABEL_733;
  }
  a1[602] = v305;
  swift_bridgeObjectRelease(v304);
  v4[3999] = *(_BYTE *)(a2 + 4824);
  *((_BYTE *)a1 + 4840) = *(_BYTE *)(a2 + 4840);
  a1[604] = *(_QWORD *)(a2 + 4832);
LABEL_735:
  v306 = a1[606];
  if (v306 == 1)
  {
LABEL_738:
    *((_OWORD *)a1 + 303) = *(_OWORD *)(a2 + 4848);
    *(_OWORD *)((char *)a1 + 4857) = *(_OWORD *)(a2 + 4857);
    goto LABEL_740;
  }
  v307 = *(_QWORD *)(a2 + 4848);
  if (v307 == 1)
  {
    sub_100083F00(a1 + 606);
    goto LABEL_738;
  }
  a1[606] = v307;
  swift_bridgeObjectRelease(v306);
  v4[4031] = *(_BYTE *)(a2 + 4856);
  *((_BYTE *)a1 + 4872) = *(_BYTE *)(a2 + 4872);
  a1[608] = *(_QWORD *)(a2 + 4864);
LABEL_740:
  v308 = a1[610];
  if (v308 == 1)
  {
LABEL_743:
    *((_OWORD *)a1 + 305) = *(_OWORD *)(a2 + 4880);
    *(_OWORD *)((char *)a1 + 4889) = *(_OWORD *)(a2 + 4889);
    goto LABEL_745;
  }
  v309 = *(_QWORD *)(a2 + 4880);
  if (v309 == 1)
  {
    sub_100083F00(a1 + 610);
    goto LABEL_743;
  }
  a1[610] = v309;
  swift_bridgeObjectRelease(v308);
  v4[4063] = *(_BYTE *)(a2 + 4888);
  *((_BYTE *)a1 + 4904) = *(_BYTE *)(a2 + 4904);
  a1[612] = *(_QWORD *)(a2 + 4896);
LABEL_745:
  v310 = a1[614];
  if (v310 != 1)
  {
    v311 = *(_QWORD *)(a2 + 4912);
    if (v311 != 1)
    {
      a1[614] = v311;
      swift_bridgeObjectRelease(v310);
      v4[4095] = *(_BYTE *)(a2 + 4920);
      *((_BYTE *)a1 + 4936) = *(_BYTE *)(a2 + 4936);
      a1[616] = *(_QWORD *)(a2 + 4928);
      goto LABEL_750;
    }
    sub_100083F00(a1 + 614);
  }
  *((_OWORD *)a1 + 307) = *(_OWORD *)(a2 + 4912);
  *(_OWORD *)((char *)a1 + 4921) = *(_OWORD *)(a2 + 4921);
LABEL_750:
  *((_OWORD *)a1 + 309) = *(_OWORD *)(a2 + 4944);
  *((_BYTE *)a1 + 4960) = *(_BYTE *)(a2 + 4960);
  *(_OWORD *)(a1 + 621) = *(_OWORD *)(a2 + 4968);
  *((_BYTE *)a1 + 4984) = *(_BYTE *)(a2 + 4984);
  *(_DWORD *)((char *)a1 + 4985) = *(_DWORD *)(a2 + 4985);
  *(_WORD *)((char *)a1 + 4989) = *(_WORD *)(a2 + 4989);
  *((_BYTE *)a1 + 4991) = *(_BYTE *)(a2 + 4991);
  v312 = a1[624];
  a1[624] = *(_QWORD *)(a2 + 4992);
  swift_bridgeObjectRelease(v312);
  v313 = a1[625];
  a1[625] = *(_QWORD *)(a2 + 5000);
  swift_bridgeObjectRelease(v313);
LABEL_751:
  v314 = a1 + 626;
  v315 = (_QWORD *)(a2 + 5008);
  if (a1[728] != 1)
  {
    if (*(_QWORD *)(a2 + 5824) == 1)
    {
      sub_100083F28(a1 + 626);
      goto LABEL_754;
    }
    v316 = *v314;
    if (*v314 != 1)
    {
      if (*v315 != 1)
      {
        a1[626] = *v315;
        swift_bridgeObjectRelease(v316);
        *((_BYTE *)a1 + 5016) = *(_BYTE *)(a2 + 5016);
        a1[628] = *(_QWORD *)(a2 + 5024);
        *((_BYTE *)a1 + 5032) = *(_BYTE *)(a2 + 5032);
LABEL_760:
        v317 = a1[630];
        if (v317 != 1)
        {
          v318 = *(_QWORD *)(a2 + 5040);
          if (v318 != 1)
          {
            a1[630] = v318;
            swift_bridgeObjectRelease(v317);
            *((_BYTE *)a1 + 5048) = *(_BYTE *)(a2 + 5048);
            *((_BYTE *)a1 + 5064) = *(_BYTE *)(a2 + 5064);
            a1[632] = *(_QWORD *)(a2 + 5056);
LABEL_765:
            v319 = a1[634];
            if (v319 != 1)
            {
              v320 = *(_QWORD *)(a2 + 5072);
              if (v320 != 1)
              {
                a1[634] = v320;
                swift_bridgeObjectRelease(v319);
                *((_BYTE *)a1 + 5080) = *(_BYTE *)(a2 + 5080);
                *((_BYTE *)a1 + 5096) = *(_BYTE *)(a2 + 5096);
                a1[636] = *(_QWORD *)(a2 + 5088);
LABEL_770:
                v321 = a1[638];
                if (v321 != 1)
                {
                  v322 = *(_QWORD *)(a2 + 5104);
                  if (v322 != 1)
                  {
                    a1[638] = v322;
                    swift_bridgeObjectRelease(v321);
                    *((_BYTE *)a1 + 5112) = *(_BYTE *)(a2 + 5112);
                    *((_BYTE *)a1 + 5128) = *(_BYTE *)(a2 + 5128);
                    a1[640] = *(_QWORD *)(a2 + 5120);
LABEL_775:
                    v323 = a1[642];
                    if (v323 != 1)
                    {
                      v324 = *(_QWORD *)(a2 + 5136);
                      if (v324 != 1)
                      {
                        a1[642] = v324;
                        swift_bridgeObjectRelease(v323);
                        *((_BYTE *)a1 + 5144) = *(_BYTE *)(a2 + 5144);
                        *((_BYTE *)a1 + 5160) = *(_BYTE *)(a2 + 5160);
                        a1[644] = *(_QWORD *)(a2 + 5152);
LABEL_780:
                        v325 = a1[646];
                        if (v325 != 1)
                        {
                          v326 = *(_QWORD *)(a2 + 5168);
                          if (v326 != 1)
                          {
                            a1[646] = v326;
                            swift_bridgeObjectRelease(v325);
                            *((_BYTE *)a1 + 5176) = *(_BYTE *)(a2 + 5176);
                            *((_BYTE *)a1 + 5192) = *(_BYTE *)(a2 + 5192);
                            a1[648] = *(_QWORD *)(a2 + 5184);
LABEL_785:
                            v327 = a1[650];
                            if (v327 != 1)
                            {
                              v328 = *(_QWORD *)(a2 + 5200);
                              if (v328 != 1)
                              {
                                a1[650] = v328;
                                swift_bridgeObjectRelease(v327);
                                *((_BYTE *)a1 + 5208) = *(_BYTE *)(a2 + 5208);
                                *((_BYTE *)a1 + 5224) = *(_BYTE *)(a2 + 5224);
                                a1[652] = *(_QWORD *)(a2 + 5216);
LABEL_790:
                                v329 = a1[654];
                                if (v329 != 1)
                                {
                                  v330 = *(_QWORD *)(a2 + 5232);
                                  if (v330 != 1)
                                  {
                                    a1[654] = v330;
                                    swift_bridgeObjectRelease(v329);
                                    *((_BYTE *)a1 + 5240) = *(_BYTE *)(a2 + 5240);
                                    *((_BYTE *)a1 + 5256) = *(_BYTE *)(a2 + 5256);
                                    a1[656] = *(_QWORD *)(a2 + 5248);
LABEL_795:
                                    v331 = a1[658];
                                    if (v331 != 1)
                                    {
                                      v332 = *(_QWORD *)(a2 + 5264);
                                      if (v332 != 1)
                                      {
                                        a1[658] = v332;
                                        swift_bridgeObjectRelease(v331);
                                        *((_BYTE *)a1 + 5272) = *(_BYTE *)(a2 + 5272);
                                        *((_BYTE *)a1 + 5288) = *(_BYTE *)(a2 + 5288);
                                        a1[660] = *(_QWORD *)(a2 + 5280);
LABEL_800:
                                        v333 = a1[662];
                                        if (v333 != 1)
                                        {
                                          v334 = *(_QWORD *)(a2 + 5296);
                                          if (v334 != 1)
                                          {
                                            a1[662] = v334;
                                            swift_bridgeObjectRelease(v333);
                                            *((_BYTE *)a1 + 5304) = *(_BYTE *)(a2 + 5304);
                                            *((_BYTE *)a1 + 5320) = *(_BYTE *)(a2 + 5320);
                                            a1[664] = *(_QWORD *)(a2 + 5312);
LABEL_805:
                                            v335 = a1[666];
                                            if (v335 != 1)
                                            {
                                              v336 = *(_QWORD *)(a2 + 5328);
                                              if (v336 != 1)
                                              {
                                                a1[666] = v336;
                                                swift_bridgeObjectRelease(v335);
                                                *((_BYTE *)a1 + 5336) = *(_BYTE *)(a2 + 5336);
                                                *((_BYTE *)a1 + 5352) = *(_BYTE *)(a2 + 5352);
                                                a1[668] = *(_QWORD *)(a2 + 5344);
LABEL_810:
                                                v337 = a1[670];
                                                if (v337 != 1)
                                                {
                                                  v338 = *(_QWORD *)(a2 + 5360);
                                                  if (v338 != 1)
                                                  {
                                                    a1[670] = v338;
                                                    swift_bridgeObjectRelease(v337);
                                                    *((_BYTE *)a1 + 5368) = *(_BYTE *)(a2 + 5368);
                                                    *((_BYTE *)a1 + 5384) = *(_BYTE *)(a2 + 5384);
                                                    a1[672] = *(_QWORD *)(a2 + 5376);
LABEL_815:
                                                    v339 = a1[674];
                                                    if (v339 != 1)
                                                    {
                                                      v340 = *(_QWORD *)(a2 + 5392);
                                                      if (v340 != 1)
                                                      {
                                                        a1[674] = v340;
                                                        swift_bridgeObjectRelease(v339);
                                                        *((_BYTE *)a1 + 5400) = *(_BYTE *)(a2 + 5400);
                                                        *((_BYTE *)a1 + 5416) = *(_BYTE *)(a2 + 5416);
                                                        a1[676] = *(_QWORD *)(a2 + 5408);
LABEL_820:
                                                        v341 = a1[678];
                                                        if (v341 != 1)
                                                        {
                                                          v342 = *(_QWORD *)(a2 + 5424);
                                                          if (v342 != 1)
                                                          {
                                                            a1[678] = v342;
                                                            swift_bridgeObjectRelease(v341);
                                                            *((_BYTE *)a1 + 5432) = *(_BYTE *)(a2 + 5432);
                                                            *((_BYTE *)a1 + 5448) = *(_BYTE *)(a2 + 5448);
                                                            a1[680] = *(_QWORD *)(a2 + 5440);
LABEL_825:
                                                            v343 = a1[682];
                                                            if (v343 != 1)
                                                            {
                                                              v344 = *(_QWORD *)(a2 + 5456);
                                                              if (v344 != 1)
                                                              {
                                                                a1[682] = v344;
                                                                swift_bridgeObjectRelease(v343);
                                                                *((_BYTE *)a1 + 5464) = *(_BYTE *)(a2 + 5464);
                                                                *((_BYTE *)a1 + 5480) = *(_BYTE *)(a2 + 5480);
                                                                a1[684] = *(_QWORD *)(a2 + 5472);
LABEL_830:
                                                                v345 = a1[686];
                                                                if (v345 != 1)
                                                                {
                                                                  v346 = *(_QWORD *)(a2 + 5488);
                                                                  if (v346 != 1)
                                                                  {
                                                                    a1[686] = v346;
                                                                    swift_bridgeObjectRelease(v345);
                                                                    *((_BYTE *)a1 + 5496) = *(_BYTE *)(a2 + 5496);
                                                                    *((_BYTE *)a1 + 5512) = *(_BYTE *)(a2 + 5512);
                                                                    a1[688] = *(_QWORD *)(a2 + 5504);
LABEL_835:
                                                                    v347 = a1[690];
                                                                    if (v347 != 1)
                                                                    {
                                                                      v348 = *(_QWORD *)(a2 + 5520);
                                                                      if (v348 != 1)
                                                                      {
                                                                        a1[690] = v348;
                                                                        swift_bridgeObjectRelease(v347);
                                                                        *((_BYTE *)a1 + 5528) = *(_BYTE *)(a2 + 5528);
                                                                        *((_BYTE *)a1 + 5544) = *(_BYTE *)(a2 + 5544);
                                                                        a1[692] = *(_QWORD *)(a2 + 5536);
LABEL_840:
                                                                        v349 = a1[694];
                                                                        if (v349 != 1)
                                                                        {
                                                                          v350 = *(_QWORD *)(a2 + 5552);
                                                                          if (v350 != 1)
                                                                          {
                                                                            a1[694] = v350;
                                                                            swift_bridgeObjectRelease(v349);
                                                                            *((_BYTE *)a1 + 5560) = *(_BYTE *)(a2 + 5560);
                                                                            *((_BYTE *)a1 + 5576) = *(_BYTE *)(a2 + 5576);
                                                                            a1[696] = *(_QWORD *)(a2 + 5568);
LABEL_845:
                                                                            v351 = a1[698];
                                                                            if (v351 != 1)
                                                                            {
                                                                              v352 = *(_QWORD *)(a2 + 5584);
                                                                              if (v352 != 1)
                                                                              {
                                                                                a1[698] = v352;
                                                                                swift_bridgeObjectRelease(v351);
                                                                                *((_BYTE *)a1 + 5592) = *(_BYTE *)(a2 + 5592);
                                                                                *((_BYTE *)a1 + 5608) = *(_BYTE *)(a2 + 5608);
                                                                                a1[700] = *(_QWORD *)(a2 + 5600);
LABEL_850:
                                                                                v353 = a1[702];
                                                                                if (v353 != 1)
                                                                                {
                                                                                  v354 = *(_QWORD *)(a2 + 5616);
                                                                                  if (v354 != 1)
                                                                                  {
                                                                                    a1[702] = v354;
                                                                                    swift_bridgeObjectRelease(v353);
                                                                                    *((_BYTE *)a1 + 5624) = *(_BYTE *)(a2 + 5624);
                                                                                    *((_BYTE *)a1 + 5640) = *(_BYTE *)(a2 + 5640);
                                                                                    a1[704] = *(_QWORD *)(a2 + 5632);
LABEL_855:
                                                                                    v355 = a1[706];
                                                                                    if (v355 != 1)
                                                                                    {
                                                                                      v356 = *(_QWORD *)(a2 + 5648);
                                                                                      if (v356 != 1)
                                                                                      {
                                                                                        a1[706] = v356;
                                                                                        swift_bridgeObjectRelease(v355);
                                                                                        *((_BYTE *)a1 + 5656) = *(_BYTE *)(a2 + 5656);
                                                                                        *((_BYTE *)a1 + 5672) = *(_BYTE *)(a2 + 5672);
                                                                                        a1[708] = *(_QWORD *)(a2 + 5664);
LABEL_860:
                                                                                        v357 = a1[710];
                                                                                        if (v357 != 1)
                                                                                        {
                                                                                          v358 = *(_QWORD *)(a2 + 5680);
                                                                                          if (v358 != 1)
                                                                                          {
                                                                                            a1[710] = v358;
                                                                                            swift_bridgeObjectRelease(v357);
                                                                                            *((_BYTE *)a1 + 5688) = *(_BYTE *)(a2 + 5688);
                                                                                            *((_BYTE *)a1 + 5704) = *(_BYTE *)(a2 + 5704);
                                                                                            a1[712] = *(_QWORD *)(a2 + 5696);
LABEL_865:
                                                                                            v359 = a1[714];
                                                                                            if (v359 != 1)
                                                                                            {
                                                                                              v360 = *(_QWORD *)(a2 + 5712);
                                                                                              if (v360 != 1)
                                                                                              {
                                                                                                a1[714] = v360;
                                                                                                swift_bridgeObjectRelease(v359);
                                                                                                *((_BYTE *)a1 + 5720) = *(_BYTE *)(a2 + 5720);
                                                                                                *((_BYTE *)a1 + 5736) = *(_BYTE *)(a2 + 5736);
                                                                                                a1[716] = *(_QWORD *)(a2 + 5728);
LABEL_870:
                                                                                                v361 = a1[718];
                                                                                                if (v361 != 1)
                                                                                                {
                                                                                                  v362 = *(_QWORD *)(a2 + 5744);
                                                                                                  if (v362 != 1)
                                                                                                  {
                                                                                                    a1[718] = v362;
                                                                                                    swift_bridgeObjectRelease(v361);
                                                                                                    *((_BYTE *)a1 + 5752) = *(_BYTE *)(a2 + 5752);
                                                                                                    *((_BYTE *)a1 + 5768) = *(_BYTE *)(a2 + 5768);
                                                                                                    a1[720] = *(_QWORD *)(a2 + 5760);
                                                                                                    goto LABEL_875;
                                                                                                  }
                                                                                                  sub_100083F00(a1 + 718);
                                                                                                }
                                                                                                *((_OWORD *)a1 + 359) = *(_OWORD *)(a2 + 5744);
                                                                                                *(_OWORD *)((char *)a1 + 5753) = *(_OWORD *)(a2 + 5753);
LABEL_875:
                                                                                                *((_OWORD *)a1 + 361) = *(_OWORD *)(a2 + 5776);
                                                                                                *((_BYTE *)a1 + 5792) = *(_BYTE *)(a2 + 5792);
                                                                                                *(_OWORD *)(a1 + 725) = *(_OWORD *)(a2 + 5800);
                                                                                                *((_BYTE *)a1 + 5816) = *(_BYTE *)(a2 + 5816);
                                                                                                *(_DWORD *)((char *)a1 + 5817) = *(_DWORD *)(a2 + 5817);
                                                                                                *(_WORD *)((char *)a1 + 5821) = *(_WORD *)(a2 + 5821);
                                                                                                *((_BYTE *)a1 + 5823) = *(_BYTE *)(a2 + 5823);
                                                                                                v363 = a1[728];
                                                                                                a1[728] = *(_QWORD *)(a2 + 5824);
                                                                                                swift_bridgeObjectRelease(v363);
                                                                                                v364 = a1[729];
                                                                                                a1[729] = *(_QWORD *)(a2 + 5832);
                                                                                                swift_bridgeObjectRelease(v364);
                                                                                                goto LABEL_876;
                                                                                              }
                                                                                              sub_100083F00(a1 + 714);
                                                                                            }
                                                                                            *((_OWORD *)a1 + 357) = *(_OWORD *)(a2 + 5712);
                                                                                            *(_OWORD *)((char *)a1 + 5721) = *(_OWORD *)(a2 + 5721);
                                                                                            goto LABEL_870;
                                                                                          }
                                                                                          sub_100083F00(a1 + 710);
                                                                                        }
                                                                                        *((_OWORD *)a1 + 355) = *(_OWORD *)(a2 + 5680);
                                                                                        *(_OWORD *)((char *)a1 + 5689) = *(_OWORD *)(a2 + 5689);
                                                                                        goto LABEL_865;
                                                                                      }
                                                                                      sub_100083F00(a1 + 706);
                                                                                    }
                                                                                    *((_OWORD *)a1 + 353) = *(_OWORD *)(a2 + 5648);
                                                                                    *(_OWORD *)((char *)a1 + 5657) = *(_OWORD *)(a2 + 5657);
                                                                                    goto LABEL_860;
                                                                                  }
                                                                                  sub_100083F00(a1 + 702);
                                                                                }
                                                                                *((_OWORD *)a1 + 351) = *(_OWORD *)(a2 + 5616);
                                                                                *(_OWORD *)((char *)a1 + 5625) = *(_OWORD *)(a2 + 5625);
                                                                                goto LABEL_855;
                                                                              }
                                                                              sub_100083F00(a1 + 698);
                                                                            }
                                                                            *((_OWORD *)a1 + 349) = *(_OWORD *)(a2 + 5584);
                                                                            *(_OWORD *)((char *)a1 + 5593) = *(_OWORD *)(a2 + 5593);
                                                                            goto LABEL_850;
                                                                          }
                                                                          sub_100083F00(a1 + 694);
                                                                        }
                                                                        *((_OWORD *)a1 + 347) = *(_OWORD *)(a2 + 5552);
                                                                        *(_OWORD *)((char *)a1 + 5561) = *(_OWORD *)(a2 + 5561);
                                                                        goto LABEL_845;
                                                                      }
                                                                      sub_100083F00(a1 + 690);
                                                                    }
                                                                    *((_OWORD *)a1 + 345) = *(_OWORD *)(a2 + 5520);
                                                                    *(_OWORD *)((char *)a1 + 5529) = *(_OWORD *)(a2 + 5529);
                                                                    goto LABEL_840;
                                                                  }
                                                                  sub_100083F00(a1 + 686);
                                                                }
                                                                *((_OWORD *)a1 + 343) = *(_OWORD *)(a2 + 5488);
                                                                *(_OWORD *)((char *)a1 + 5497) = *(_OWORD *)(a2 + 5497);
                                                                goto LABEL_835;
                                                              }
                                                              sub_100083F00(a1 + 682);
                                                            }
                                                            *((_OWORD *)a1 + 341) = *(_OWORD *)(a2 + 5456);
                                                            *(_OWORD *)((char *)a1 + 5465) = *(_OWORD *)(a2 + 5465);
                                                            goto LABEL_830;
                                                          }
                                                          sub_100083F00(a1 + 678);
                                                        }
                                                        *((_OWORD *)a1 + 339) = *(_OWORD *)(a2 + 5424);
                                                        *(_OWORD *)((char *)a1 + 5433) = *(_OWORD *)(a2 + 5433);
                                                        goto LABEL_825;
                                                      }
                                                      sub_100083F00(a1 + 674);
                                                    }
                                                    *((_OWORD *)a1 + 337) = *(_OWORD *)(a2 + 5392);
                                                    *(_OWORD *)((char *)a1 + 5401) = *(_OWORD *)(a2 + 5401);
                                                    goto LABEL_820;
                                                  }
                                                  sub_100083F00(a1 + 670);
                                                }
                                                *((_OWORD *)a1 + 335) = *(_OWORD *)(a2 + 5360);
                                                *(_OWORD *)((char *)a1 + 5369) = *(_OWORD *)(a2 + 5369);
                                                goto LABEL_815;
                                              }
                                              sub_100083F00(a1 + 666);
                                            }
                                            *((_OWORD *)a1 + 333) = *(_OWORD *)(a2 + 5328);
                                            *(_OWORD *)((char *)a1 + 5337) = *(_OWORD *)(a2 + 5337);
                                            goto LABEL_810;
                                          }
                                          sub_100083F00(a1 + 662);
                                        }
                                        *((_OWORD *)a1 + 331) = *(_OWORD *)(a2 + 5296);
                                        *(_OWORD *)((char *)a1 + 5305) = *(_OWORD *)(a2 + 5305);
                                        goto LABEL_805;
                                      }
                                      sub_100083F00(a1 + 658);
                                    }
                                    *((_OWORD *)a1 + 329) = *(_OWORD *)(a2 + 5264);
                                    *(_OWORD *)((char *)a1 + 5273) = *(_OWORD *)(a2 + 5273);
                                    goto LABEL_800;
                                  }
                                  sub_100083F00(a1 + 654);
                                }
                                *((_OWORD *)a1 + 327) = *(_OWORD *)(a2 + 5232);
                                *(_OWORD *)((char *)a1 + 5241) = *(_OWORD *)(a2 + 5241);
                                goto LABEL_795;
                              }
                              sub_100083F00(a1 + 650);
                            }
                            *((_OWORD *)a1 + 325) = *(_OWORD *)(a2 + 5200);
                            *(_OWORD *)((char *)a1 + 5209) = *(_OWORD *)(a2 + 5209);
                            goto LABEL_790;
                          }
                          sub_100083F00(a1 + 646);
                        }
                        *((_OWORD *)a1 + 323) = *(_OWORD *)(a2 + 5168);
                        *(_OWORD *)((char *)a1 + 5177) = *(_OWORD *)(a2 + 5177);
                        goto LABEL_785;
                      }
                      sub_100083F00(a1 + 642);
                    }
                    *((_OWORD *)a1 + 321) = *(_OWORD *)(a2 + 5136);
                    *(_OWORD *)((char *)a1 + 5145) = *(_OWORD *)(a2 + 5145);
                    goto LABEL_780;
                  }
                  sub_100083F00(a1 + 638);
                }
                *((_OWORD *)a1 + 319) = *(_OWORD *)(a2 + 5104);
                *(_OWORD *)((char *)a1 + 5113) = *(_OWORD *)(a2 + 5113);
                goto LABEL_775;
              }
              sub_100083F00(a1 + 634);
            }
            *((_OWORD *)a1 + 317) = *(_OWORD *)(a2 + 5072);
            *(_OWORD *)((char *)a1 + 5081) = *(_OWORD *)(a2 + 5081);
            goto LABEL_770;
          }
          sub_100083F00(a1 + 630);
        }
        *((_OWORD *)a1 + 315) = *(_OWORD *)(a2 + 5040);
        *(_OWORD *)((char *)a1 + 5049) = *(_OWORD *)(a2 + 5049);
        goto LABEL_765;
      }
      sub_100083F00(a1 + 626);
    }
    *(_OWORD *)v314 = *(_OWORD *)v315;
    *(_OWORD *)((char *)a1 + 5017) = *(_OWORD *)(a2 + 5017);
    goto LABEL_760;
  }
LABEL_754:
  memcpy(a1 + 626, (const void *)(a2 + 5008), 0x340uLL);
LABEL_876:
  v365 = a1[730];
  a1[730] = *(_QWORD *)(a2 + 5840);
  swift_bridgeObjectRelease(v365);
  *((_DWORD *)a1 + 1462) = *(_DWORD *)(a2 + 5848);
  *((_BYTE *)a1 + 5852) = *(_BYTE *)(a2 + 5852);
  a1[732] = *(_QWORD *)(a2 + 5856);
  *((_BYTE *)a1 + 5864) = *(_BYTE *)(a2 + 5864);
  a1[734] = *(_QWORD *)(a2 + 5872);
  *((_BYTE *)a1 + 5880) = *(_BYTE *)(a2 + 5880);
  *((_BYTE *)a1 + 5896) = *(_BYTE *)(a2 + 5896);
  a1[736] = *(_QWORD *)(a2 + 5888);
  v366 = *(_QWORD *)(a2 + 5904);
  *((_BYTE *)a1 + 5912) = *(_BYTE *)(a2 + 5912);
  a1[738] = v366;
  return a1;
}

