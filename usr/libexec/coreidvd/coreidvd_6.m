uint64_t sub_10035C4B8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[5];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
  }
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[14]);
  v5 = (_QWORD *)((char *)a1 + a2[9]);
  v6 = type metadata accessor for TiberiusWrappedAssessment(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(v5[1]);
    v7 = v5[3];
    if (v7)
    {
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v5[5]);
      swift_bridgeObjectRelease(v5[7]);
      swift_bridgeObjectRelease(v5[9]);
    }
    v8 = v5[14];
    if (v8 != 1)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v5[16]);
    }
    swift_bridgeObjectRelease(v5[19]);
    v9 = (char *)v5 + *(int *)(v6 + 32);
    v10 = type metadata accessor for AssessmentAdditionalInfo(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      v11 = &v9[*(int *)(v10 + 28)];
      v12 = sub_100004828(&qword_1006385E0);
      v13 = *(_QWORD *)(v12 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
        (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[12]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13] + 8));
  v14 = (char *)a1 + a2[14];
  v15 = type metadata accessor for LivenessDataV2(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = sub_100004828(&qword_100633968);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
    v17 = &v14[*(int *)(v15 + 20)];
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 2));
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 9));
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 11));
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 12));
    swift_bridgeObjectRelease(*((_QWORD *)v17 + 13));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16] + 8));
}

_QWORD *sub_10035C6F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t, __n128);
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  _QWORD *__dst;
  _QWORD *__dsta;
  int *v96;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v11;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  v12 = a2[11];
  a1[10] = a2[10];
  a1[11] = v12;
  v13 = a2[13];
  a1[12] = a2[12];
  a1[13] = v13;
  v14 = a2[14];
  v15 = a3[9];
  __dst = (_QWORD *)((char *)a1 + v15);
  v16 = (_QWORD *)((char *)a2 + v15);
  a1[14] = v14;
  v17 = type metadata accessor for TiberiusWrappedAssessment(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v18 + 48);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v20 = swift_bridgeObjectRetain(v14);
  v96 = a3;
  if (v19(v16, 1, v17, v20))
  {
    v21 = sub_100004828(&qword_1006384F0);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v93 = v18;
    v22 = v16[1];
    *__dst = *v16;
    __dst[1] = v22;
    v23 = v16[3];
    swift_bridgeObjectRetain(v22);
    if (v23)
    {
      __dst[2] = v16[2];
      __dst[3] = v23;
      v24 = v16[5];
      __dst[4] = v16[4];
      __dst[5] = v24;
      v25 = v16[7];
      __dst[6] = v16[6];
      __dst[7] = v25;
      v26 = v16[9];
      __dst[8] = v16[8];
      __dst[9] = v26;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      v27 = *((_OWORD *)v16 + 2);
      *((_OWORD *)__dst + 1) = *((_OWORD *)v16 + 1);
      *((_OWORD *)__dst + 2) = v27;
      v28 = *((_OWORD *)v16 + 4);
      *((_OWORD *)__dst + 3) = *((_OWORD *)v16 + 3);
      *((_OWORD *)__dst + 4) = v28;
    }
    v29 = v17;
    v30 = v16[14];
    if (v30 == 1)
    {
      v31 = *((_OWORD *)v16 + 6);
      *((_OWORD *)__dst + 5) = *((_OWORD *)v16 + 5);
      *((_OWORD *)__dst + 6) = v31;
      *((_OWORD *)__dst + 7) = *((_OWORD *)v16 + 7);
      *(_OWORD *)((char *)__dst + 121) = *(_OWORD *)((char *)v16 + 121);
    }
    else
    {
      v32 = v16[11];
      __dst[10] = v16[10];
      __dst[11] = v32;
      *((_BYTE *)__dst + 96) = *((_BYTE *)v16 + 96);
      __dst[13] = v16[13];
      __dst[14] = v30;
      v33 = v16[16];
      __dst[15] = v16[15];
      __dst[16] = v33;
      *((_BYTE *)__dst + 136) = *((_BYTE *)v16 + 136);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v33);
    }
    v34 = v16[19];
    __dst[18] = v16[18];
    __dst[19] = v34;
    v35 = *(int *)(v17 + 32);
    v36 = (_QWORD *)((char *)__dst + v35);
    v37 = (_QWORD *)((char *)v16 + v35);
    v38 = type metadata accessor for AssessmentAdditionalInfo(0);
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v39 + 48);
    v41 = swift_bridgeObjectRetain(v34);
    if (v40(v37, 1, v38, v41))
    {
      v42 = sub_100004828(&qword_100636698);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      v43 = v93;
    }
    else
    {
      v44 = v37[1];
      *v36 = *v37;
      v36[1] = v44;
      *((_BYTE *)v36 + 16) = *((_BYTE *)v37 + 16);
      v36[3] = v37[3];
      *((_BYTE *)v36 + 32) = *((_BYTE *)v37 + 32);
      v45 = *(int *)(v38 + 28);
      v92 = (char *)v36 + v45;
      v46 = (char *)v37 + v45;
      swift_bridgeObjectRetain(v44);
      v47 = sub_100004828(&qword_1006385E0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = sub_100004828(&qword_10063A6C8);
        memcpy(v92, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v92, v46, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v92, 0, 1, v47);
      }
      v43 = v93;
      v50 = *(int *)(v38 + 32);
      v51 = (char *)v36 + v50;
      v52 = (char *)v37 + v50;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v29);
    a3 = v96;
  }
  v53 = a3[10];
  v54 = a3[11];
  v55 = *(_QWORD *)((char *)a2 + v53);
  *(_QWORD *)((char *)a1 + v53) = v55;
  v56 = *(_QWORD *)((char *)a2 + v54);
  *(_QWORD *)((char *)a1 + v54) = v56;
  v57 = a3[12];
  v58 = a3[13];
  v59 = *(_QWORD *)((char *)a2 + v57);
  *(_QWORD *)((char *)a1 + v57) = v59;
  v60 = (_QWORD *)((char *)a1 + v58);
  v61 = (_QWORD *)((char *)a2 + v58);
  v62 = a3;
  v63 = v61[1];
  *v60 = *v61;
  v60[1] = v63;
  v64 = v62[14];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = type metadata accessor for LivenessDataV2(0);
  __dsta = *(_QWORD **)(v67 - 8);
  v68 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))__dsta[6];
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v59);
  v69 = swift_bridgeObjectRetain(v63);
  if (v68(v66, 1, v67, v69))
  {
    v70 = sub_100004828(&qword_1006384E8);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v71 = sub_100004828(&qword_100633968);
    v72 = v65;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v65, v66, v71);
    v73 = *(int *)(v67 + 20);
    v74 = &v65[v73];
    v75 = &v66[v73];
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v74[8] = v75[8];
    v76 = *((_QWORD *)v75 + 2);
    v77 = *((_QWORD *)v75 + 3);
    *((_QWORD *)v74 + 2) = v76;
    *((_QWORD *)v74 + 3) = v77;
    *((_DWORD *)v74 + 8) = *((_DWORD *)v75 + 8);
    v74[36] = v75[36];
    *((_DWORD *)v74 + 10) = *((_DWORD *)v75 + 10);
    v74[44] = v75[44];
    v78 = *((_DWORD *)v75 + 12);
    v74[52] = v75[52];
    *((_DWORD *)v74 + 12) = v78;
    v74[64] = v75[64];
    *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
    v79 = *((_QWORD *)v75 + 9);
    *((_QWORD *)v74 + 9) = v79;
    v74[84] = v75[84];
    *((_DWORD *)v74 + 20) = *((_DWORD *)v75 + 20);
    v80 = *((_QWORD *)v75 + 11);
    v81 = *((_QWORD *)v75 + 12);
    *((_QWORD *)v74 + 11) = v80;
    *((_QWORD *)v74 + 12) = v81;
    v82 = *((_QWORD *)v75 + 13);
    *((_QWORD *)v74 + 13) = v82;
    v83 = (void (*)(char *, _QWORD, uint64_t, uint64_t, __n128))__dsta[7];
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    v84 = swift_bridgeObjectRetain(v82);
    v83(v72, 0, 1, v67, v84);
  }
  v85 = v96[15];
  v86 = v96[16];
  v87 = *(_QWORD *)((char *)a2 + v85);
  *(_QWORD *)((char *)a1 + v85) = v87;
  v88 = (_QWORD *)((char *)a1 + v86);
  v89 = (_QWORD *)((char *)a2 + v86);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v90);
  return a1;
}

_QWORD *sub_10035CC74(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(char *, uint64_t, uint64_t);
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD *v175;
  __int128 *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t, uint64_t);
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(void *, uint64_t, uint64_t);
  int v218;
  size_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  void *v231;
  void (**__src)(uint64_t, _QWORD, uint64_t, uint64_t);
  int *v233;
  int *v234;
  int *v235;
  int *v236;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1 + 4;
  v11 = a2 + 4;
  v12 = a1[5];
  v13 = a2[5];
  if (v12)
  {
    if (v13)
    {
      a1[4] = a2[4];
      v14 = a2[5];
      a1[5] = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      a1[6] = a2[6];
      v15 = a2[7];
      v16 = a1[7];
      a1[7] = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      a1[8] = a2[8];
      v17 = a2[9];
      v18 = a1[9];
      a1[9] = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      sub_1002D4B24((uint64_t)(a1 + 4));
      v23 = *((_OWORD *)a2 + 3);
      v22 = *((_OWORD *)a2 + 4);
      *v10 = *v11;
      *((_OWORD *)a1 + 3) = v23;
      *((_OWORD *)a1 + 4) = v22;
    }
  }
  else if (v13)
  {
    a1[4] = a2[4];
    v19 = a2[5];
    a1[5] = v19;
    a1[6] = a2[6];
    v20 = a2[7];
    a1[7] = v20;
    a1[8] = a2[8];
    v21 = a2[9];
    a1[9] = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v24 = *v11;
    v25 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v25;
    *v10 = v24;
  }
  a1[10] = a2[10];
  v26 = a2[11];
  v27 = a1[11];
  a1[11] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[12] = a2[12];
  v28 = a2[13];
  v29 = a1[13];
  a1[13] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a2[14];
  v31 = a1[14];
  a1[14] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[9];
  v33 = (uint64_t)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for TiberiusWrappedAssessment(0);
  v36 = *(_QWORD **)(v35 - 8);
  v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6];
  v38 = v37(v33, 1, v35);
  v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v40 = *((_QWORD *)v34 + 1);
      *(_QWORD *)(v33 + 8) = v40;
      v41 = *((_QWORD *)v34 + 3);
      swift_bridgeObjectRetain(v40);
      __src = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v36;
      v233 = a3;
      if (v41)
      {
        *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
        v42 = *((_QWORD *)v34 + 3);
        *(_QWORD *)(v33 + 24) = v42;
        *(_QWORD *)(v33 + 32) = *((_QWORD *)v34 + 4);
        v43 = *((_QWORD *)v34 + 5);
        *(_QWORD *)(v33 + 40) = v43;
        *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
        v44 = *((_QWORD *)v34 + 7);
        *(_QWORD *)(v33 + 56) = v44;
        *(_QWORD *)(v33 + 64) = *((_QWORD *)v34 + 8);
        v45 = *((_QWORD *)v34 + 9);
        *(_QWORD *)(v33 + 72) = v45;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
      }
      else
      {
        v62 = *((_OWORD *)v34 + 1);
        v63 = *((_OWORD *)v34 + 2);
        v64 = *((_OWORD *)v34 + 4);
        *(_OWORD *)(v33 + 48) = *((_OWORD *)v34 + 3);
        *(_OWORD *)(v33 + 64) = v64;
        *(_OWORD *)(v33 + 16) = v62;
        *(_OWORD *)(v33 + 32) = v63;
      }
      if (*((_QWORD *)v34 + 14) == 1)
      {
        v65 = *((_OWORD *)v34 + 5);
        v66 = *((_OWORD *)v34 + 6);
        v67 = *((_OWORD *)v34 + 7);
        *(_OWORD *)(v33 + 121) = *(_OWORD *)(v34 + 121);
        *(_OWORD *)(v33 + 96) = v66;
        *(_OWORD *)(v33 + 112) = v67;
        *(_OWORD *)(v33 + 80) = v65;
      }
      else
      {
        *(_QWORD *)(v33 + 80) = *((_QWORD *)v34 + 10);
        v68 = *((_QWORD *)v34 + 11);
        *(_BYTE *)(v33 + 96) = v34[96];
        *(_QWORD *)(v33 + 88) = v68;
        *(_QWORD *)(v33 + 104) = *((_QWORD *)v34 + 13);
        v69 = *((_QWORD *)v34 + 14);
        *(_QWORD *)(v33 + 112) = v69;
        *(_QWORD *)(v33 + 120) = *((_QWORD *)v34 + 15);
        v70 = *((_QWORD *)v34 + 16);
        *(_QWORD *)(v33 + 128) = v70;
        *(_BYTE *)(v33 + 136) = v34[136];
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v70);
      }
      *(_QWORD *)(v33 + 144) = *((_QWORD *)v34 + 18);
      v71 = *((_QWORD *)v34 + 19);
      *(_QWORD *)(v33 + 152) = v71;
      v72 = *(int *)(v35 + 32);
      v73 = (_QWORD *)(v33 + v72);
      v74 = &v34[v72];
      v75 = type metadata accessor for AssessmentAdditionalInfo(0);
      v76 = *(_QWORD *)(v75 - 8);
      v77 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v76 + 48);
      v78 = swift_bridgeObjectRetain(v71);
      if (v77(v74, 1, v75, v78))
      {
        v79 = sub_100004828(&qword_100636698);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        a3 = v233;
      }
      else
      {
        *v73 = *(_QWORD *)v74;
        v80 = *((_QWORD *)v74 + 1);
        v73[1] = v80;
        *((_BYTE *)v73 + 16) = v74[16];
        v81 = *((_QWORD *)v74 + 3);
        *((_BYTE *)v73 + 32) = v74[32];
        v73[3] = v81;
        v82 = *(int *)(v75 + 28);
        v229 = v76;
        v230 = (char *)v73 + v82;
        v83 = &v74[v82];
        swift_bridgeObjectRetain(v80);
        v84 = sub_100004828(&qword_1006385E0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = sub_100004828(&qword_10063A6C8);
          memcpy(v230, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v230, v83, v84);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v230, 0, 1, v84);
        }
        a3 = v233;
        v96 = *(int *)(v75 + 32);
        v97 = (char *)v73 + v96;
        v98 = &v74[v96];
        v99 = *(_QWORD *)v98;
        v97[8] = v98[8];
        *(_QWORD *)v97 = v99;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v229 + 56))(v73, 0, 1, v75);
      }
      __src[7](v33, 0, 1, v35);
      goto LABEL_33;
    }
    goto LABEL_14;
  }
  if (v39)
  {
    sub_100035DAC(v33, type metadata accessor for TiberiusWrappedAssessment);
LABEL_14:
    v46 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006384F0) - 8) + 64);
    v47 = (void *)v33;
    v48 = v34;
LABEL_15:
    memcpy(v47, v48, v46);
    goto LABEL_33;
  }
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v49 = *((_QWORD *)v34 + 1);
  v50 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = (_OWORD *)(v33 + 16);
  v52 = (__int128 *)(v34 + 16);
  v53 = *(_QWORD *)(v33 + 24);
  v54 = *((_QWORD *)v34 + 3);
  if (v53)
  {
    if (v54)
    {
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
      v55 = *((_QWORD *)v34 + 3);
      *(_QWORD *)(v33 + 24) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v53);
      *(_QWORD *)(v33 + 32) = *((_QWORD *)v34 + 4);
      v56 = *((_QWORD *)v34 + 5);
      v57 = *(_QWORD *)(v33 + 40);
      *(_QWORD *)(v33 + 40) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57);
      *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
      v58 = *((_QWORD *)v34 + 7);
      v59 = *(_QWORD *)(v33 + 56);
      *(_QWORD *)(v33 + 56) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
      *(_QWORD *)(v33 + 64) = *((_QWORD *)v34 + 8);
      v60 = *((_QWORD *)v34 + 9);
      v61 = *(_QWORD *)(v33 + 72);
      *(_QWORD *)(v33 + 72) = v60;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRelease(v61);
    }
    else
    {
      sub_100276710((_QWORD *)(v33 + 16));
      v93 = *((_OWORD *)v34 + 4);
      v95 = *v52;
      v94 = *((_OWORD *)v34 + 2);
      *(_OWORD *)(v33 + 48) = *((_OWORD *)v34 + 3);
      *(_OWORD *)(v33 + 64) = v93;
      *v51 = v95;
      *(_OWORD *)(v33 + 32) = v94;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
    v87 = *((_QWORD *)v34 + 3);
    *(_QWORD *)(v33 + 24) = v87;
    *(_QWORD *)(v33 + 32) = *((_QWORD *)v34 + 4);
    v88 = *((_QWORD *)v34 + 5);
    *(_QWORD *)(v33 + 40) = v88;
    *(_QWORD *)(v33 + 48) = *((_QWORD *)v34 + 6);
    v89 = *((_QWORD *)v34 + 7);
    *(_QWORD *)(v33 + 56) = v89;
    *(_QWORD *)(v33 + 64) = *((_QWORD *)v34 + 8);
    v90 = a3;
    v91 = *((_QWORD *)v34 + 9);
    *(_QWORD *)(v33 + 72) = v91;
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v89);
    v92 = v91;
    a3 = v90;
    swift_bridgeObjectRetain(v92);
  }
  else
  {
    v172 = *v52;
    v173 = *((_OWORD *)v34 + 2);
    v174 = *((_OWORD *)v34 + 4);
    *(_OWORD *)(v33 + 48) = *((_OWORD *)v34 + 3);
    *(_OWORD *)(v33 + 64) = v174;
    *v51 = v172;
    *(_OWORD *)(v33 + 32) = v173;
  }
  v175 = (_OWORD *)(v33 + 80);
  v176 = (__int128 *)(v34 + 80);
  v177 = *(_QWORD *)(v33 + 112);
  v178 = *((_QWORD *)v34 + 14);
  if (v177 == 1)
  {
    if (v178 == 1)
    {
      v179 = *v176;
      v180 = *((_OWORD *)v34 + 6);
      v181 = *((_OWORD *)v34 + 7);
      *(_OWORD *)(v33 + 121) = *(_OWORD *)(v34 + 121);
      *(_OWORD *)(v33 + 96) = v180;
      *(_OWORD *)(v33 + 112) = v181;
      *v175 = v179;
    }
    else
    {
      *(_QWORD *)(v33 + 80) = *((_QWORD *)v34 + 10);
      v185 = *((_QWORD *)v34 + 11);
      *(_BYTE *)(v33 + 96) = v34[96];
      *(_QWORD *)(v33 + 88) = v185;
      *(_QWORD *)(v33 + 104) = *((_QWORD *)v34 + 13);
      v186 = *((_QWORD *)v34 + 14);
      *(_QWORD *)(v33 + 112) = v186;
      *(_QWORD *)(v33 + 120) = *((_QWORD *)v34 + 15);
      v187 = *((_QWORD *)v34 + 16);
      *(_QWORD *)(v33 + 128) = v187;
      *(_BYTE *)(v33 + 136) = v34[136];
      swift_bridgeObjectRetain(v186);
      swift_bridgeObjectRetain(v187);
    }
  }
  else if (v178 == 1)
  {
    sub_1002766DC(v33 + 80);
    v183 = *((_OWORD *)v34 + 6);
    v182 = *((_OWORD *)v34 + 7);
    v184 = *v176;
    *(_OWORD *)(v33 + 121) = *(_OWORD *)(v34 + 121);
    *(_OWORD *)(v33 + 96) = v183;
    *(_OWORD *)(v33 + 112) = v182;
    *v175 = v184;
  }
  else
  {
    *(_QWORD *)(v33 + 80) = *((_QWORD *)v34 + 10);
    v188 = *((_QWORD *)v34 + 11);
    *(_BYTE *)(v33 + 96) = v34[96];
    *(_QWORD *)(v33 + 88) = v188;
    *(_QWORD *)(v33 + 104) = *((_QWORD *)v34 + 13);
    v189 = *((_QWORD *)v34 + 14);
    *(_QWORD *)(v33 + 112) = v189;
    swift_bridgeObjectRetain(v189);
    swift_bridgeObjectRelease(v177);
    *(_QWORD *)(v33 + 120) = *((_QWORD *)v34 + 15);
    v190 = *((_QWORD *)v34 + 16);
    v191 = *(_QWORD *)(v33 + 128);
    *(_QWORD *)(v33 + 128) = v190;
    swift_bridgeObjectRetain(v190);
    swift_bridgeObjectRelease(v191);
    *(_BYTE *)(v33 + 136) = v34[136];
  }
  *(_QWORD *)(v33 + 144) = *((_QWORD *)v34 + 18);
  v192 = *((_QWORD *)v34 + 19);
  v193 = *(_QWORD *)(v33 + 152);
  *(_QWORD *)(v33 + 152) = v192;
  swift_bridgeObjectRetain(v192);
  swift_bridgeObjectRelease(v193);
  v194 = *(int *)(v35 + 32);
  v195 = v33 + v194;
  v196 = &v34[v194];
  v197 = type metadata accessor for AssessmentAdditionalInfo(0);
  v198 = *(_QWORD *)(v197 - 8);
  v199 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  LODWORD(v193) = v199(v195, 1, v197);
  v200 = v199((uint64_t)v196, 1, v197);
  if (!(_DWORD)v193)
  {
    if (v200)
    {
      sub_100035DAC(v195, type metadata accessor for AssessmentAdditionalInfo);
      goto LABEL_55;
    }
    v236 = a3;
    *(_QWORD *)v195 = *(_QWORD *)v196;
    v209 = *((_QWORD *)v196 + 1);
    v210 = *(_QWORD *)(v195 + 8);
    *(_QWORD *)(v195 + 8) = v209;
    swift_bridgeObjectRetain(v209);
    swift_bridgeObjectRelease(v210);
    *(_BYTE *)(v195 + 16) = v196[16];
    v211 = *((_QWORD *)v196 + 3);
    *(_BYTE *)(v195 + 32) = v196[32];
    *(_QWORD *)(v195 + 24) = v211;
    v212 = *(int *)(v197 + 28);
    v213 = (void *)(v195 + v212);
    v214 = &v196[v212];
    v215 = sub_100004828(&qword_1006385E0);
    v216 = *(_QWORD *)(v215 - 8);
    v217 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v216 + 48);
    v231 = v213;
    LODWORD(v213) = v217(v213, 1, v215);
    v218 = v217(v214, 1, v215);
    if ((_DWORD)v213)
    {
      if (!v218)
      {
        (*(void (**)(void *, char *, uint64_t))(v216 + 16))(v231, v214, v215);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v231, 0, 1, v215);
        goto LABEL_66;
      }
      v219 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8) + 64);
      v220 = v231;
    }
    else
    {
      if (!v218)
      {
        (*(void (**)(void *, char *, uint64_t))(v216 + 24))(v231, v214, v215);
        goto LABEL_66;
      }
      (*(void (**)(void *, uint64_t))(v216 + 8))(v231, v215);
      v219 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8) + 64);
      v220 = v231;
    }
    memcpy(v220, v214, v219);
LABEL_66:
    a3 = v236;
    v225 = *(int *)(v197 + 32);
    v226 = v195 + v225;
    v227 = &v196[v225];
    v228 = *(_QWORD *)v227;
    *(_BYTE *)(v226 + 8) = v227[8];
    *(_QWORD *)v226 = v228;
    goto LABEL_33;
  }
  if (v200)
  {
LABEL_55:
    v46 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100636698) - 8) + 64);
    v47 = (void *)v195;
    v48 = v196;
    goto LABEL_15;
  }
  v235 = a3;
  *(_QWORD *)v195 = *(_QWORD *)v196;
  v201 = *((_QWORD *)v196 + 1);
  *(_QWORD *)(v195 + 8) = v201;
  *(_BYTE *)(v195 + 16) = v196[16];
  v202 = *((_QWORD *)v196 + 3);
  *(_BYTE *)(v195 + 32) = v196[32];
  *(_QWORD *)(v195 + 24) = v202;
  v203 = *(int *)(v197 + 28);
  v204 = (void *)(v195 + v203);
  v205 = &v196[v203];
  swift_bridgeObjectRetain(v201);
  v206 = sub_100004828(&qword_1006385E0);
  v207 = *(_QWORD *)(v206 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
  {
    v208 = sub_100004828(&qword_10063A6C8);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v207 + 16))(v204, v205, v206);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
  }
  a3 = v235;
  v221 = *(int *)(v197 + 32);
  v222 = v195 + v221;
  v223 = &v196[v221];
  v224 = *(_QWORD *)v223;
  *(_BYTE *)(v222 + 8) = v223[8];
  *(_QWORD *)v222 = v224;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
LABEL_33:
  v100 = a3[10];
  v101 = *(_QWORD *)((char *)a1 + v100);
  v102 = *(_QWORD *)((char *)a2 + v100);
  *(_QWORD *)((char *)a1 + v100) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v101);
  v103 = a3[11];
  v104 = *(_QWORD *)((char *)a1 + v103);
  v105 = *(_QWORD *)((char *)a2 + v103);
  *(_QWORD *)((char *)a1 + v103) = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease(v104);
  v106 = a3[12];
  v107 = *(_QWORD *)((char *)a2 + v106);
  v108 = *(_QWORD *)((char *)a1 + v106);
  *(_QWORD *)((char *)a1 + v106) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  v109 = a3[13];
  v110 = (_QWORD *)((char *)a1 + v109);
  v111 = (_QWORD *)((char *)a2 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  v114 = a3[14];
  v115 = (char *)a1 + v114;
  v116 = (char *)a2 + v114;
  v117 = type metadata accessor for LivenessDataV2(0);
  v118 = *(_QWORD *)(v117 - 8);
  v119 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v118 + 48);
  v120 = v119(v115, 1, v117);
  v121 = v119(v116, 1, v117);
  if (!v120)
  {
    if (!v121)
    {
      v150 = sub_100004828(&qword_100633968);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 24))(v115, v116, v150);
      v151 = *(int *)(v117 + 20);
      v152 = &v115[v151];
      v153 = &v116[v151];
      v154 = *(_QWORD *)v153;
      v152[8] = v153[8];
      *(_QWORD *)v152 = v154;
      v155 = *((_QWORD *)v152 + 2);
      v156 = *((_QWORD *)v153 + 2);
      *((_QWORD *)v152 + 2) = v156;
      swift_bridgeObjectRetain(v156);
      swift_bridgeObjectRelease(v155);
      v157 = *((_QWORD *)v152 + 3);
      v158 = *((_QWORD *)v153 + 3);
      *((_QWORD *)v152 + 3) = v158;
      swift_bridgeObjectRetain(v158);
      swift_bridgeObjectRelease(v157);
      v159 = *((_DWORD *)v153 + 8);
      v152[36] = v153[36];
      *((_DWORD *)v152 + 8) = v159;
      v160 = *((_DWORD *)v153 + 10);
      v152[44] = v153[44];
      *((_DWORD *)v152 + 10) = v160;
      v161 = *((_DWORD *)v153 + 12);
      v152[52] = v153[52];
      *((_DWORD *)v152 + 12) = v161;
      v162 = *((_QWORD *)v153 + 7);
      v152[64] = v153[64];
      *((_QWORD *)v152 + 7) = v162;
      v163 = *((_QWORD *)v152 + 9);
      v164 = *((_QWORD *)v153 + 9);
      *((_QWORD *)v152 + 9) = v164;
      swift_bridgeObjectRetain(v164);
      swift_bridgeObjectRelease(v163);
      v165 = *((_DWORD *)v153 + 20);
      v152[84] = v153[84];
      *((_DWORD *)v152 + 20) = v165;
      v166 = *((_QWORD *)v152 + 11);
      v167 = *((_QWORD *)v153 + 11);
      *((_QWORD *)v152 + 11) = v167;
      swift_bridgeObjectRetain(v167);
      swift_bridgeObjectRelease(v166);
      v168 = *((_QWORD *)v152 + 12);
      v169 = *((_QWORD *)v153 + 12);
      *((_QWORD *)v152 + 12) = v169;
      swift_bridgeObjectRetain(v169);
      swift_bridgeObjectRelease(v168);
      v170 = *((_QWORD *)v152 + 13);
      v171 = *((_QWORD *)v153 + 13);
      *((_QWORD *)v152 + 13) = v171;
      swift_bridgeObjectRetain(v171);
      swift_bridgeObjectRelease(v170);
      goto LABEL_39;
    }
    sub_100035DAC((uint64_t)v115, type metadata accessor for LivenessDataV2);
    goto LABEL_38;
  }
  if (v121)
  {
LABEL_38:
    v140 = sub_100004828(&qword_1006384E8);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    goto LABEL_39;
  }
  v122 = sub_100004828(&qword_100633968);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v115, v116, v122);
  v123 = *(int *)(v117 + 20);
  v124 = &v115[v123];
  v125 = &v116[v123];
  v126 = v125[8];
  *(_QWORD *)v124 = *(_QWORD *)v125;
  v124[8] = v126;
  v127 = *((_QWORD *)v125 + 2);
  *((_QWORD *)v124 + 2) = v127;
  v128 = *((_QWORD *)v125 + 3);
  *((_QWORD *)v124 + 3) = v128;
  v129 = v125[36];
  *((_DWORD *)v124 + 8) = *((_DWORD *)v125 + 8);
  v124[36] = v129;
  v130 = v125[44];
  *((_DWORD *)v124 + 10) = *((_DWORD *)v125 + 10);
  v124[44] = v130;
  v131 = v125[52];
  *((_DWORD *)v124 + 12) = *((_DWORD *)v125 + 12);
  v124[52] = v131;
  v132 = *((_QWORD *)v125 + 7);
  v124[64] = v125[64];
  *((_QWORD *)v124 + 7) = v132;
  v133 = *((_QWORD *)v125 + 9);
  *((_QWORD *)v124 + 9) = v133;
  LODWORD(v132) = *((_DWORD *)v125 + 20);
  v124[84] = v125[84];
  *((_DWORD *)v124 + 20) = v132;
  v134 = *((_QWORD *)v125 + 11);
  *((_QWORD *)v124 + 11) = v134;
  v234 = a3;
  v135 = *((_QWORD *)v125 + 12);
  *((_QWORD *)v124 + 12) = v135;
  v136 = *((_QWORD *)v125 + 13);
  *((_QWORD *)v124 + 13) = v136;
  v137 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v118 + 56);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v128);
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRetain(v134);
  v138 = v135;
  a3 = v234;
  swift_bridgeObjectRetain(v138);
  v139 = swift_bridgeObjectRetain(v136);
  v137(v115, 0, 1, v117, v139);
LABEL_39:
  v141 = a3[15];
  v142 = *(_QWORD *)((char *)a1 + v141);
  v143 = *(_QWORD *)((char *)a2 + v141);
  *(_QWORD *)((char *)a1 + v141) = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v142);
  v144 = a3[16];
  v145 = (_QWORD *)((char *)a1 + v144);
  v146 = (_QWORD *)((char *)a2 + v144);
  *v145 = *v146;
  v147 = v146[1];
  v148 = v145[1];
  v145[1] = v147;
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRelease(v148);
  return a1;
}

uint64_t sub_10035DA28(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v52;
  void *__src;
  uint64_t v54;
  char *__dst;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v10 = a3[9];
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  *(_OWORD *)(a1 + 96) = v9;
  v13 = type metadata accessor for TiberiusWrappedAssessment(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100004828(&qword_1006384F0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v12[1];
    *v11 = *v12;
    v11[1] = v16;
    v17 = v12[3];
    v11[2] = v12[2];
    v11[3] = v17;
    v18 = v12[5];
    v11[4] = v12[4];
    v11[5] = v18;
    v19 = v12[7];
    v11[6] = v12[6];
    v11[7] = v19;
    *(_OWORD *)((char *)v11 + 121) = *(_OWORD *)((char *)v12 + 121);
    v11[9] = v12[9];
    v20 = *(int *)(v13 + 32);
    v21 = (_OWORD *)((char *)v11 + v20);
    v22 = (_OWORD *)((char *)v12 + v20);
    v23 = type metadata accessor for AssessmentAdditionalInfo(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_100004828(&qword_100636698);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v21 = *v22;
      *((_BYTE *)v21 + 16) = *((_BYTE *)v22 + 16);
      *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
      *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
      v26 = *(int *)(v23 + 28);
      v54 = v24;
      __dst = (char *)v21 + v26;
      v27 = (char *)v22 + v26;
      v28 = sub_100004828(&qword_1006385E0);
      v52 = *(_QWORD *)(v28 - 8);
      __src = v27;
      v29 = v27;
      v30 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v29, 1, v28))
      {
        v31 = sub_100004828(&qword_10063A6C8);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v52 + 32))(__dst, __src, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v30);
      }
      v32 = *(int *)(v23 + 32);
      v33 = (char *)v21 + v32;
      v34 = (char *)v22 + v32;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v35 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  v36 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  v37 = a3[14];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for LivenessDataV2(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_100004828(&qword_1006384E8);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = sub_100004828(&qword_100633968);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v38, v39, v43);
    v44 = *(int *)(v40 + 20);
    v45 = &v38[v44];
    v46 = &v39[v44];
    v47 = *((_OWORD *)v46 + 5);
    *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
    *((_OWORD *)v45 + 5) = v47;
    *((_OWORD *)v45 + 6) = *((_OWORD *)v46 + 6);
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v48;
    v49 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v49;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v50 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v50) = *(_OWORD *)(a2 + v50);
  return a1;
}

_QWORD *sub_10035DD84(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(char *, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t (*v138)(void *, uint64_t, uint64_t);
  int v139;
  size_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *__src;
  char *__dst;
  void *__dsta;
  void *__dstb;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a1[5];
  if (v10)
  {
    v11 = a2[5];
    if (v11)
    {
      a1[4] = a2[4];
      a1[5] = v11;
      swift_bridgeObjectRelease(v10);
      v12 = a2[7];
      v13 = a1[7];
      a1[6] = a2[6];
      a1[7] = v12;
      swift_bridgeObjectRelease(v13);
      v14 = a2[9];
      v15 = a1[9];
      a1[8] = a2[8];
      a1[9] = v14;
      swift_bridgeObjectRelease(v15);
      goto LABEL_6;
    }
    sub_1002D4B24((uint64_t)(a1 + 4));
  }
  v16 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v16;
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_6:
  v17 = a2[11];
  v18 = a1[11];
  a1[10] = a2[10];
  a1[11] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = a2[13];
  v20 = a1[13];
  a1[12] = a2[12];
  a1[13] = v19;
  swift_bridgeObjectRelease(v20);
  v21 = a1[14];
  a1[14] = a2[14];
  swift_bridgeObjectRelease(v21);
  v22 = a3[9];
  v23 = (uint64_t)a1 + v22;
  v24 = (_OWORD *)((char *)a2 + v22);
  v25 = type metadata accessor for TiberiusWrappedAssessment(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27((uint64_t)v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      sub_100035DAC(v23, type metadata accessor for TiberiusWrappedAssessment);
      goto LABEL_12;
    }
    v43 = *((_QWORD *)v24 + 1);
    v44 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = v43;
    swift_bridgeObjectRelease(v44);
    v45 = *(_QWORD *)(v23 + 24);
    if (v45)
    {
      v46 = *((_QWORD *)v24 + 3);
      if (v46)
      {
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
        *(_QWORD *)(v23 + 24) = v46;
        swift_bridgeObjectRelease(v45);
        v47 = *((_QWORD *)v24 + 5);
        v48 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
        *(_QWORD *)(v23 + 40) = v47;
        swift_bridgeObjectRelease(v48);
        v49 = *((_QWORD *)v24 + 7);
        v50 = *(_QWORD *)(v23 + 56);
        *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
        *(_QWORD *)(v23 + 56) = v49;
        swift_bridgeObjectRelease(v50);
        v51 = *((_QWORD *)v24 + 9);
        v52 = *(_QWORD *)(v23 + 72);
        *(_QWORD *)(v23 + 64) = *((_QWORD *)v24 + 8);
        *(_QWORD *)(v23 + 72) = v51;
        swift_bridgeObjectRelease(v52);
        goto LABEL_21;
      }
      sub_100276710((_QWORD *)(v23 + 16));
    }
    v59 = v24[2];
    *(_OWORD *)(v23 + 16) = v24[1];
    *(_OWORD *)(v23 + 32) = v59;
    v60 = v24[4];
    *(_OWORD *)(v23 + 48) = v24[3];
    *(_OWORD *)(v23 + 64) = v60;
LABEL_21:
    v61 = *(_QWORD *)(v23 + 112);
    if (v61 != 1)
    {
      v62 = *((_QWORD *)v24 + 14);
      if (v62 != 1)
      {
        v64 = *((_QWORD *)v24 + 11);
        *(_QWORD *)(v23 + 80) = *((_QWORD *)v24 + 10);
        *(_QWORD *)(v23 + 88) = v64;
        *(_BYTE *)(v23 + 96) = *((_BYTE *)v24 + 96);
        *(_QWORD *)(v23 + 104) = *((_QWORD *)v24 + 13);
        *(_QWORD *)(v23 + 112) = v62;
        swift_bridgeObjectRelease(v61);
        v65 = *((_QWORD *)v24 + 16);
        v66 = *(_QWORD *)(v23 + 128);
        *(_QWORD *)(v23 + 120) = *((_QWORD *)v24 + 15);
        *(_QWORD *)(v23 + 128) = v65;
        swift_bridgeObjectRelease(v66);
        *(_BYTE *)(v23 + 136) = *((_BYTE *)v24 + 136);
LABEL_26:
        v67 = *((_QWORD *)v24 + 19);
        v68 = *(_QWORD *)(v23 + 152);
        *(_QWORD *)(v23 + 144) = *((_QWORD *)v24 + 18);
        *(_QWORD *)(v23 + 152) = v67;
        swift_bridgeObjectRelease(v68);
        v69 = *(int *)(v25 + 32);
        v70 = v23 + v69;
        v71 = (char *)v24 + v69;
        v72 = type metadata accessor for AssessmentAdditionalInfo(0);
        v73 = *(_QWORD *)(v72 - 8);
        v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
        v75 = v74(v70, 1, v72);
        v76 = v74((uint64_t)v71, 1, v72);
        if (v75)
        {
          if (!v76)
          {
            *(_OWORD *)v70 = *(_OWORD *)v71;
            *(_BYTE *)(v70 + 16) = v71[16];
            *(_QWORD *)(v70 + 24) = *((_QWORD *)v71 + 3);
            *(_BYTE *)(v70 + 32) = v71[32];
            v77 = *(int *)(v72 + 28);
            __dsta = (void *)(v70 + v77);
            v78 = &v71[v77];
            v79 = sub_100004828(&qword_1006385E0);
            v80 = *(_QWORD *)(v79 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
            {
              v81 = sub_100004828(&qword_10063A6C8);
              memcpy(__dsta, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v80 + 32))(__dsta, v78, v79);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v80 + 56))(__dsta, 0, 1, v79);
            }
            v142 = *(int *)(v72 + 32);
            v143 = v70 + v142;
            v144 = &v71[v142];
            *(_QWORD *)v143 = *(_QWORD *)v144;
            *(_BYTE *)(v143 + 8) = v144[8];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
            goto LABEL_36;
          }
          goto LABEL_32;
        }
        if (v76)
        {
          sub_100035DAC(v70, type metadata accessor for AssessmentAdditionalInfo);
LABEL_32:
          v40 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100636698) - 8) + 64);
          v41 = (void *)v70;
          v42 = v71;
          goto LABEL_13;
        }
        v132 = *((_QWORD *)v71 + 1);
        v133 = *(_QWORD *)(v70 + 8);
        *(_QWORD *)v70 = *(_QWORD *)v71;
        *(_QWORD *)(v70 + 8) = v132;
        swift_bridgeObjectRelease(v133);
        *(_BYTE *)(v70 + 16) = v71[16];
        *(_QWORD *)(v70 + 24) = *((_QWORD *)v71 + 3);
        *(_BYTE *)(v70 + 32) = v71[32];
        v134 = *(int *)(v72 + 28);
        v135 = (void *)(v70 + v134);
        v136 = &v71[v134];
        v137 = sub_100004828(&qword_1006385E0);
        v150 = *(_QWORD *)(v137 - 8);
        v138 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v150 + 48);
        __dstb = v135;
        LODWORD(v135) = v138(v135, 1, v137);
        v139 = v138(v136, 1, v137);
        if ((_DWORD)v135)
        {
          if (!v139)
          {
            (*(void (**)(void *, char *, uint64_t))(v150 + 32))(__dstb, v136, v137);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v150 + 56))(__dstb, 0, 1, v137);
            goto LABEL_54;
          }
          v140 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8) + 64);
          v141 = __dstb;
        }
        else
        {
          if (!v139)
          {
            (*(void (**)(void *, char *, uint64_t))(v150 + 40))(__dstb, v136, v137);
            goto LABEL_54;
          }
          (*(void (**)(void *, uint64_t))(v150 + 8))(__dstb, v137);
          v140 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063A6C8) - 8) + 64);
          v141 = __dstb;
        }
        memcpy(v141, v136, v140);
LABEL_54:
        v145 = *(int *)(v72 + 32);
        v146 = v70 + v145;
        v147 = &v71[v145];
        *(_QWORD *)v146 = *(_QWORD *)v147;
        *(_BYTE *)(v146 + 8) = v147[8];
        goto LABEL_36;
      }
      sub_1002766DC(v23 + 80);
    }
    v63 = v24[6];
    *(_OWORD *)(v23 + 80) = v24[5];
    *(_OWORD *)(v23 + 96) = v63;
    *(_OWORD *)(v23 + 112) = v24[7];
    *(_OWORD *)(v23 + 121) = *(_OWORD *)((char *)v24 + 121);
    goto LABEL_26;
  }
  if (v29)
  {
LABEL_12:
    v40 = *(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006384F0) - 8) + 64);
    v41 = (void *)v23;
    v42 = v24;
LABEL_13:
    memcpy(v41, v42, v40);
    goto LABEL_36;
  }
  v30 = v24[1];
  *(_OWORD *)v23 = *v24;
  *(_OWORD *)(v23 + 16) = v30;
  v31 = v24[3];
  *(_OWORD *)(v23 + 32) = v24[2];
  *(_OWORD *)(v23 + 48) = v31;
  v32 = v24[5];
  *(_OWORD *)(v23 + 64) = v24[4];
  *(_OWORD *)(v23 + 80) = v32;
  v33 = v24[7];
  *(_OWORD *)(v23 + 96) = v24[6];
  *(_OWORD *)(v23 + 112) = v33;
  *(_OWORD *)(v23 + 121) = *(_OWORD *)((char *)v24 + 121);
  *(_OWORD *)(v23 + 144) = v24[9];
  v34 = *(int *)(v25 + 32);
  v35 = (_OWORD *)(v23 + v34);
  v36 = (_OWORD *)((char *)v24 + v34);
  v37 = type metadata accessor for AssessmentAdditionalInfo(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = sub_100004828(&qword_100636698);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v149 = v38;
    *v35 = *v36;
    *((_BYTE *)v35 + 16) = *((_BYTE *)v36 + 16);
    *((_QWORD *)v35 + 3) = *((_QWORD *)v36 + 3);
    *((_BYTE *)v35 + 32) = *((_BYTE *)v36 + 32);
    v53 = *(int *)(v37 + 28);
    __dst = (char *)v35 + v53;
    v54 = (char *)v36 + v53;
    v55 = sub_100004828(&qword_1006385E0);
    v148 = *(_QWORD *)(v55 - 8);
    __src = v54;
    v56 = v54;
    v57 = v55;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v56, 1, v55))
    {
      v58 = sub_100004828(&qword_10063A6C8);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v148 + 32))(__dst, __src, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(__dst, 0, 1, v57);
    }
    v82 = *(int *)(v37 + 32);
    v83 = (char *)v35 + v82;
    v84 = (char *)v36 + v82;
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v83[8] = v84[8];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v35, 0, 1, v37);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_36:
  v85 = a3[10];
  v86 = *(_QWORD *)((char *)a1 + v85);
  *(_QWORD *)((char *)a1 + v85) = *(_QWORD *)((char *)a2 + v85);
  swift_bridgeObjectRelease(v86);
  v87 = a3[11];
  v88 = *(_QWORD *)((char *)a1 + v87);
  *(_QWORD *)((char *)a1 + v87) = *(_QWORD *)((char *)a2 + v87);
  swift_bridgeObjectRelease(v88);
  v89 = a3[12];
  v90 = *(_QWORD *)((char *)a1 + v89);
  *(_QWORD *)((char *)a1 + v89) = *(_QWORD *)((char *)a2 + v89);
  swift_bridgeObjectRelease(v90);
  v91 = a3[13];
  v92 = (_QWORD *)((char *)a1 + v91);
  v93 = (_QWORD *)((char *)a2 + v91);
  v95 = *v93;
  v94 = v93[1];
  v96 = v92[1];
  *v92 = v95;
  v92[1] = v94;
  swift_bridgeObjectRelease(v96);
  v97 = a3[14];
  v98 = (char *)a1 + v97;
  v99 = (char *)a2 + v97;
  v100 = type metadata accessor for LivenessDataV2(0);
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48);
  v103 = v102(v98, 1, v100);
  v104 = v102(v99, 1, v100);
  if (!v103)
  {
    if (!v104)
    {
      v122 = sub_100004828(&qword_100633968);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 40))(v98, v99, v122);
      v123 = *(int *)(v100 + 20);
      v124 = &v98[v123];
      v125 = &v99[v123];
      *(_QWORD *)v124 = *(_QWORD *)v125;
      v124[8] = v125[8];
      v126 = *((_QWORD *)v124 + 2);
      *((_QWORD *)v124 + 2) = *((_QWORD *)v125 + 2);
      swift_bridgeObjectRelease(v126);
      v127 = *((_QWORD *)v124 + 3);
      *((_QWORD *)v124 + 3) = *((_QWORD *)v125 + 3);
      swift_bridgeObjectRelease(v127);
      *((_DWORD *)v124 + 8) = *((_DWORD *)v125 + 8);
      v124[36] = v125[36];
      *((_DWORD *)v124 + 10) = *((_DWORD *)v125 + 10);
      v124[44] = v125[44];
      *((_DWORD *)v124 + 12) = *((_DWORD *)v125 + 12);
      v124[52] = v125[52];
      v124[64] = v125[64];
      *((_QWORD *)v124 + 7) = *((_QWORD *)v125 + 7);
      v128 = *((_QWORD *)v124 + 9);
      *((_QWORD *)v124 + 9) = *((_QWORD *)v125 + 9);
      swift_bridgeObjectRelease(v128);
      *((_DWORD *)v124 + 20) = *((_DWORD *)v125 + 20);
      v124[84] = v125[84];
      v129 = *((_QWORD *)v124 + 11);
      *((_QWORD *)v124 + 11) = *((_QWORD *)v125 + 11);
      swift_bridgeObjectRelease(v129);
      v130 = *((_QWORD *)v124 + 12);
      *((_QWORD *)v124 + 12) = *((_QWORD *)v125 + 12);
      swift_bridgeObjectRelease(v130);
      v131 = *((_QWORD *)v124 + 13);
      *((_QWORD *)v124 + 13) = *((_QWORD *)v125 + 13);
      swift_bridgeObjectRelease(v131);
      goto LABEL_42;
    }
    sub_100035DAC((uint64_t)v98, type metadata accessor for LivenessDataV2);
    goto LABEL_41;
  }
  if (v104)
  {
LABEL_41:
    v112 = sub_100004828(&qword_1006384E8);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    goto LABEL_42;
  }
  v105 = sub_100004828(&qword_100633968);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32))(v98, v99, v105);
  v106 = *(int *)(v100 + 20);
  v107 = &v98[v106];
  v108 = &v99[v106];
  v109 = *((_OWORD *)v108 + 5);
  *((_OWORD *)v107 + 4) = *((_OWORD *)v108 + 4);
  *((_OWORD *)v107 + 5) = v109;
  *((_OWORD *)v107 + 6) = *((_OWORD *)v108 + 6);
  v110 = *((_OWORD *)v108 + 1);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *((_OWORD *)v107 + 1) = v110;
  v111 = *((_OWORD *)v108 + 3);
  *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
  *((_OWORD *)v107 + 3) = v111;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
LABEL_42:
  v113 = a3[15];
  v114 = *(_QWORD *)((char *)a1 + v113);
  *(_QWORD *)((char *)a1 + v113) = *(_QWORD *)((char *)a2 + v113);
  swift_bridgeObjectRelease(v114);
  v115 = a3[16];
  v116 = (_QWORD *)((char *)a1 + v115);
  v117 = (_QWORD *)((char *)a2 + v115);
  v119 = *v117;
  v118 = v117[1];
  v120 = v116[1];
  *v116 = v119;
  v116[1] = v118;
  swift_bridgeObjectRelease(v120);
  return a1;
}

uint64_t sub_10035E6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035E6C0);
}

uint64_t sub_10035E6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004828(&qword_1006384F0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = sub_100004828(&qword_1006384E8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10035E768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035E774);
}

uint64_t sub_10035E774(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100004828(&qword_1006384F0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = sub_100004828(&qword_1006384E8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingRequestV2(uint64_t a1)
{
  return sub_100038B7C(a1, (uint64_t *)&unk_10063BF20, (uint64_t)&nominal type descriptor for IdentityProofingRequestV2);
}

void sub_10035E82C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = " ";
  v6[1] = "0";
  v6[2] = &unk_100527590;
  v6[3] = &unk_100527488;
  v6[4] = &value witness table for Builtin.BridgeObject[8];
  sub_10003B6E4(319, (unint64_t *)&unk_10063B678, type metadata accessor for TiberiusWrappedAssessment);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = &unk_1005274A0;
    v6[7] = &unk_1005274A0;
    v6[8] = &value witness table for Builtin.BridgeObject[8];
    v6[9] = &unk_100527488;
    sub_10003B6E4(319, (unint64_t *)&unk_10063BF30, type metadata accessor for LivenessDataV2);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      v6[11] = &unk_1005274A0;
      v6[12] = &unk_100527488;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for GetSTSResponse()
{
  return &type metadata for GetSTSResponse;
}

ValueMetadata *type metadata accessor for GetProfileResponse()
{
  return &type metadata for GetProfileResponse;
}

ValueMetadata *type metadata accessor for PersoDataElement.CodingKeys()
{
  return &type metadata for PersoDataElement.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSPACData.CodingKeys()
{
  return &type metadata for IDSPACData.CodingKeys;
}

ValueMetadata *type metadata accessor for IdVDataElement.CodingKeys()
{
  return &type metadata for IdVDataElement.CodingKeys;
}

ValueMetadata *type metadata accessor for AssessmentServerDestinations.CodingKeys()
{
  return &type metadata for AssessmentServerDestinations.CodingKeys;
}

ValueMetadata *type metadata accessor for AssessmentConfig.CodingKeys()
{
  return &type metadata for AssessmentConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for AugmentedProfile.CodingKeys()
{
  return &type metadata for AugmentedProfile.CodingKeys;
}

ValueMetadata *type metadata accessor for AccountAssessmentDeviceData.CodingKeys()
{
  return &type metadata for AccountAssessmentDeviceData.CodingKeys;
}

ValueMetadata *type metadata accessor for GlobalConfig.CodingKeys()
{
  return &type metadata for GlobalConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for ORDRequest.CodingKeys()
{
  return &type metadata for ORDRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for AssessmentGUIDContainer.CodingKeys()
{
  return &type metadata for AssessmentGUIDContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for OTDRequest.CodingKeys()
{
  return &type metadata for OTDRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for AssessmentAdditionalInfo.CodingKeys()
{
  return &type metadata for AssessmentAdditionalInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for TrainingSignalId.CodingKeys()
{
  return &type metadata for TrainingSignalId.CodingKeys;
}

ValueMetadata *type metadata accessor for ODNErrorInfo.CodingKeys()
{
  return &type metadata for ODNErrorInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ActiveLivenessConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveLivenessConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_10035EB1C + 4 * byte_100527364[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_10035EB50 + 4 * byte_10052735F[v4]))();
}

uint64_t sub_10035EB50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035EB58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10035EB60);
  return result;
}

uint64_t sub_10035EB6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10035EB74);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_10035EB78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035EB80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActiveLivenessConfig.CodingKeys()
{
  return &type metadata for ActiveLivenessConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for PassiveLivenessConfig.CodingKeys()
{
  return &type metadata for PassiveLivenessConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for LivenessConfigV2.CodingKeys()
{
  return &type metadata for LivenessConfigV2.CodingKeys;
}

ValueMetadata *type metadata accessor for ResponseHeader.CodingKeys()
{
  return &type metadata for ResponseHeader.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticWorkflow.CodingKeys()
{
  return &type metadata for IdentityProofingStaticWorkflow.CodingKeys;
}

uint64_t destroy for AttributeConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for AttributeConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for AttributeConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for AttributeConfig(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeConfig(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeConfig()
{
  return &type metadata for AttributeConfig;
}

ValueMetadata *type metadata accessor for LegacyWorkflowPackage.CodingKeys()
{
  return &type metadata for LegacyWorkflowPackage.CodingKeys;
}

uint64_t destroy for IDVData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  return swift_bridgeObjectRelease(a1[35]);
}

uint64_t initializeWithCopy for IDVData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v9 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  v11 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v10;
  v13 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v12;
  v15 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v14;
  v17 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v16;
  v19 = *(_QWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v18;
  v21 = *(_QWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  v22 = *(_QWORD *)(a2 + 176);
  v36 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v36;
  *(_QWORD *)(a1 + 176) = v22;
  v23 = *(_QWORD *)(a2 + 192);
  v35 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v35;
  *(_QWORD *)(a1 + 192) = v23;
  v24 = *(_QWORD *)(a2 + 208);
  v34 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v34;
  *(_QWORD *)(a1 + 208) = v24;
  v25 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = v33;
  *(_QWORD *)(a1 + 224) = v25;
  v26 = *(_QWORD *)(a2 + 240);
  v32 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v32;
  *(_QWORD *)(a1 + 240) = v26;
  v27 = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v31;
  *(_QWORD *)(a1 + 256) = v27;
  v28 = *(_QWORD *)(a2 + 272);
  v30 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v30;
  *(_QWORD *)(a1 + 272) = v28;
  v37 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v37;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v37);
  return a1;
}

uint64_t assignWithCopy for IDVData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 168);
  v25 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v30 = *(_QWORD *)(a2 + 216);
  v31 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v32 = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v34 = *(_QWORD *)(a2 + 248);
  v35 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v36 = *(_QWORD *)(a2 + 264);
  v37 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v38 = *(_QWORD *)(a2 + 280);
  v39 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

void *initializeWithTake for IDVData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for IDVData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 168);
  v22 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 184);
  v24 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 200);
  v26 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 216);
  v28 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 232);
  v30 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a2 + 248);
  v32 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(a2 + 264);
  v34 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(a2 + 280);
  v36 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v35;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDVData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 288))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDVData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 288) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDVData()
{
  return &type metadata for IDVData;
}

uint64_t destroy for ProofingDataContainer(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[32]);
  return swift_bridgeObjectRelease(a1[34]);
}

_QWORD *initializeWithCopy for ProofingDataContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v7 = a2[4];
  v6 = a2[5];
  a1[4] = v7;
  a1[5] = v6;
  v9 = a2[6];
  v8 = a2[7];
  a1[6] = v9;
  a1[7] = v8;
  v11 = a2[8];
  v10 = a2[9];
  a1[8] = v11;
  a1[9] = v10;
  v13 = a2[10];
  v12 = a2[11];
  a1[10] = v13;
  a1[11] = v12;
  v15 = a2[12];
  v14 = a2[13];
  a1[12] = v15;
  a1[13] = v14;
  v17 = a2[14];
  v16 = a2[15];
  a1[14] = v17;
  a1[15] = v16;
  v19 = a2[16];
  v18 = a2[17];
  a1[16] = v19;
  a1[17] = v18;
  v21 = a2[18];
  v20 = a2[19];
  a1[18] = v21;
  a1[19] = v20;
  v22 = a2[21];
  v36 = a2[20];
  a1[20] = v36;
  a1[21] = v22;
  v23 = a2[23];
  v35 = a2[22];
  a1[22] = v35;
  a1[23] = v23;
  v24 = a2[25];
  v34 = a2[24];
  a1[24] = v34;
  a1[25] = v24;
  v25 = a2[27];
  v33 = a2[26];
  a1[26] = v33;
  a1[27] = v25;
  v26 = a2[29];
  v32 = a2[28];
  a1[28] = v32;
  a1[29] = v26;
  v27 = a2[31];
  v31 = a2[30];
  a1[30] = v31;
  a1[31] = v27;
  v28 = a2[33];
  v30 = a2[32];
  a1[32] = v30;
  a1[33] = v28;
  v37 = a2[34];
  a1[34] = v37;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v37);
  return a1;
}

_QWORD *assignWithCopy for ProofingDataContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[9] = a2[9];
  v14 = a2[10];
  v15 = a1[10];
  a1[10] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[11] = a2[11];
  v16 = a2[12];
  v17 = a1[12];
  a1[12] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[13] = a2[13];
  v18 = a2[14];
  v19 = a1[14];
  a1[14] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[15] = a2[15];
  v20 = a2[16];
  v21 = a1[16];
  a1[16] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[17] = a2[17];
  v22 = a2[18];
  v23 = a1[18];
  a1[18] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[19] = a2[19];
  v24 = a2[20];
  v25 = a1[20];
  a1[20] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[21] = a2[21];
  v26 = a2[22];
  v27 = a1[22];
  a1[22] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[23] = a2[23];
  v28 = a2[24];
  v29 = a1[24];
  a1[24] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  a1[25] = a2[25];
  v30 = a2[26];
  v31 = a1[26];
  a1[26] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  a1[27] = a2[27];
  v32 = a2[28];
  v33 = a1[28];
  a1[28] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  a1[29] = a2[29];
  v34 = a2[30];
  v35 = a1[30];
  a1[30] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  a1[31] = a2[31];
  v36 = a2[32];
  v37 = a1[32];
  a1[32] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  a1[33] = a2[33];
  v38 = a2[34];
  v39 = a1[34];
  a1[34] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

void *initializeWithTake for ProofingDataContainer(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

_QWORD *assignWithTake for ProofingDataContainer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = a1[6];
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = a1[8];
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = a1[10];
  a1[9] = *(_QWORD *)(a2 + 72);
  a1[10] = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = a1[12];
  a1[11] = *(_QWORD *)(a2 + 88);
  a1[12] = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = a1[14];
  a1[13] = *(_QWORD *)(a2 + 104);
  a1[14] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = a1[16];
  a1[15] = *(_QWORD *)(a2 + 120);
  a1[16] = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = a1[18];
  a1[17] = *(_QWORD *)(a2 + 136);
  a1[18] = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 160);
  v22 = a1[20];
  a1[19] = *(_QWORD *)(a2 + 152);
  a1[20] = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = a1[22];
  a1[21] = *(_QWORD *)(a2 + 168);
  a1[22] = v23;
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 192);
  v26 = a1[24];
  a1[23] = *(_QWORD *)(a2 + 184);
  a1[24] = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 208);
  v28 = a1[26];
  a1[25] = *(_QWORD *)(a2 + 200);
  a1[26] = v27;
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 224);
  v30 = a1[28];
  a1[27] = *(_QWORD *)(a2 + 216);
  a1[28] = v29;
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a2 + 240);
  v32 = a1[30];
  a1[29] = *(_QWORD *)(a2 + 232);
  a1[30] = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(a2 + 256);
  v34 = a1[32];
  a1[31] = *(_QWORD *)(a2 + 248);
  a1[32] = v33;
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(a2 + 272);
  v36 = a1[34];
  a1[33] = *(_QWORD *)(a2 + 264);
  a1[34] = v35;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProofingDataContainer(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 280))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProofingDataContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProofingDataContainer()
{
  return &type metadata for ProofingDataContainer;
}

ValueMetadata *type metadata accessor for PRDResults()
{
  return &type metadata for PRDResults;
}

ValueMetadata *type metadata accessor for ExecuteWorkflowType()
{
  return &type metadata for ExecuteWorkflowType;
}

_QWORD *sub_10035FC10(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for IdentityProofingStaticWorkflow.DefaultPagination(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for IdentityProofingStaticWorkflow.DefaultPagination(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticWorkflow.DefaultPagination()
{
  return &type metadata for IdentityProofingStaticWorkflow.DefaultPagination;
}

uint64_t destroy for IdentityProofingStaticWorkflow.SubRegionSpecifics(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v2 = a1[4];
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for IdentityProofingStaticWorkflow.SubRegionSpecifics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6 == 1)
  {
    v8 = v7[1];
    *(_OWORD *)(a1 + 32) = *v7;
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)v7 + 25);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    swift_bridgeObjectRetain(v6);
  }
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for IdentityProofingStaticWorkflow.SubRegionSpecifics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (__int128 *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  v11 = (__int128 *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  if (v9 == 1)
  {
    if (v10 == 1)
    {
      v12 = *v11;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *v8 = v12;
      *(_OWORD *)(a1 + 48) = v13;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v10;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
      *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
      v16 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v16;
      v17 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v17;
      swift_bridgeObjectRetain(v10);
    }
  }
  else if (v10 == 1)
  {
    sub_100083F00((_QWORD *)(a1 + 32));
    v14 = *(_OWORD *)(a2 + 57);
    v15 = *(_OWORD *)(a2 + 48);
    *v8 = *v11;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 57) = v14;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease(v9);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    v18 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v18;
    v19 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v19;
  }
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v20);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t assignWithTake for IdentityProofingStaticWorkflow.SubRegionSpecifics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (v8 != 1)
  {
    if (v9 != 1)
    {
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRelease(v8);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      goto LABEL_6;
    }
    sub_100083F00((_QWORD *)(a1 + 32));
  }
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
LABEL_6:
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v12);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticWorkflow.SubRegionSpecifics()
{
  return &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics;
}

ValueMetadata *type metadata accessor for Gesture()
{
  return &type metadata for Gesture;
}

_QWORD *assignWithCopy for TSIDContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for TSIDContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for TSIDContainer()
{
  return &type metadata for TSIDContainer;
}

uint64_t destroy for AttributeSettings(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[14]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t initializeWithCopy for AttributeSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for AttributeSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 144);
  v17 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t assignWithTake for AttributeSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  v14 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeSettings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeSettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeSettings()
{
  return &type metadata for AttributeSettings;
}

uint64_t initializeBufferWithCopyOfBuffer for RegionFeatureConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RegionFeatureConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RegionFeatureConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for RegionFeatureConfigs()
{
  return &type metadata for RegionFeatureConfigs;
}

uint64_t destroy for RegionConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  return swift_bridgeObjectRelease(a1[35]);
}

uint64_t initializeWithCopy for RegionConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v11 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v11;
  v12 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v12;
  v13 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v13;
  v14 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v14;
  *(_BYTE *)(a1 + 297) = *(_BYTE *)(a2 + 297);
  v15 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v15;
  v16 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v16;
  v17 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v17;
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  v18 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v18;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for RegionConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v16 = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v18;
  v19 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v19;
  v20 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v20;
  v21 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v21;
  v22 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v22;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v23 = *(_QWORD *)(a2 + 248);
  v24 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v25 = *(_QWORD *)(a2 + 264);
  v26 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v27 = *(_QWORD *)(a2 + 280);
  v28 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v29;
  *(_BYTE *)(a1 + 297) = *(_BYTE *)(a2 + 297);
  v30 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v30;
  v31 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v31;
  v32 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v32;
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  v33 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v33;
  return a1;
}

void *initializeWithTake for RegionConfig(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x169uLL);
}

uint64_t assignWithTake for RegionConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v14 = *(_QWORD *)(a2 + 152);
  v15 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v16 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  v18 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 264);
  v20 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 280);
  v22 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v21;
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 344);
  v23 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v23;
  return a1;
}

uint64_t getEnumTagSinglePayload for RegionConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 361))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegionConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 360) = 0;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 361) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 361) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RegionConfig()
{
  return &type metadata for RegionConfig;
}

ValueMetadata *type metadata accessor for ProfileConfigType()
{
  return &type metadata for ProfileConfigType;
}

ValueMetadata *type metadata accessor for AssessmentConfig.DsidType()
{
  return &type metadata for AssessmentConfig.DsidType;
}

ValueMetadata *type metadata accessor for AssessmentConfig.FallbackType()
{
  return &type metadata for AssessmentConfig.FallbackType;
}

ValueMetadata *type metadata accessor for AssessmentConfig.Sources()
{
  return &type metadata for AssessmentConfig.Sources;
}

ValueMetadata *type metadata accessor for AssessmentConfig.Triggers()
{
  return &type metadata for AssessmentConfig.Triggers;
}

unint64_t sub_100360D68()
{
  unint64_t result;

  result = qword_10063BF90;
  if (!qword_10063BF90)
  {
    result = swift_getWitnessTable(&unk_100528B54, &type metadata for AssessmentConfig.Triggers);
    atomic_store(result, (unint64_t *)&qword_10063BF90);
  }
  return result;
}

unint64_t sub_100360DB0()
{
  unint64_t result;

  result = qword_10063BF98;
  if (!qword_10063BF98)
  {
    result = swift_getWitnessTable(&unk_100528C1C, &type metadata for AssessmentConfig.Sources);
    atomic_store(result, (unint64_t *)&qword_10063BF98);
  }
  return result;
}

unint64_t sub_100360DF8()
{
  unint64_t result;

  result = qword_10063BFA0;
  if (!qword_10063BFA0)
  {
    result = swift_getWitnessTable(&unk_100528CE4, &type metadata for AssessmentConfig.FallbackType);
    atomic_store(result, (unint64_t *)&qword_10063BFA0);
  }
  return result;
}

unint64_t sub_100360E40()
{
  unint64_t result;

  result = qword_10063BFA8;
  if (!qword_10063BFA8)
  {
    result = swift_getWitnessTable(&unk_100528DAC, &type metadata for AssessmentConfig.DsidType);
    atomic_store(result, (unint64_t *)&qword_10063BFA8);
  }
  return result;
}

unint64_t sub_100360E88()
{
  unint64_t result;

  result = qword_10063BFB0;
  if (!qword_10063BFB0)
  {
    result = swift_getWitnessTable(&unk_100528E74, &type metadata for ProfileConfigType);
    atomic_store(result, (unint64_t *)&qword_10063BFB0);
  }
  return result;
}

unint64_t sub_100360ED0()
{
  unint64_t result;

  result = qword_10063BFB8;
  if (!qword_10063BFB8)
  {
    result = swift_getWitnessTable(&unk_100529004, &type metadata for ExecuteWorkflowType);
    atomic_store(result, (unint64_t *)&qword_10063BFB8);
  }
  return result;
}

unint64_t sub_100360F18()
{
  unint64_t result;

  result = qword_10063BFC0;
  if (!qword_10063BFC0)
  {
    result = swift_getWitnessTable(&unk_100529194, &type metadata for LegacyWorkflowPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFC0);
  }
  return result;
}

unint64_t sub_100360F60()
{
  unint64_t result;

  result = qword_10063BFC8;
  if (!qword_10063BFC8)
  {
    result = swift_getWitnessTable(&unk_1005292D4, &type metadata for IdentityProofingStaticWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFC8);
  }
  return result;
}

unint64_t sub_100360FA8()
{
  unint64_t result;

  result = qword_10063BFD0;
  if (!qword_10063BFD0)
  {
    result = swift_getWitnessTable(&unk_10052938C, &type metadata for ResponseHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFD0);
  }
  return result;
}

unint64_t sub_100360FF0()
{
  unint64_t result;

  result = qword_10063BFD8;
  if (!qword_10063BFD8)
  {
    result = swift_getWitnessTable(&unk_100529444, &type metadata for LivenessConfigV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFD8);
  }
  return result;
}

unint64_t sub_100361038()
{
  unint64_t result;

  result = qword_10063BFE0;
  if (!qword_10063BFE0)
  {
    result = swift_getWitnessTable(&unk_1005294FC, &type metadata for PassiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFE0);
  }
  return result;
}

unint64_t sub_100361080()
{
  unint64_t result;

  result = qword_10063BFE8;
  if (!qword_10063BFE8)
  {
    result = swift_getWitnessTable(&unk_1005295B4, &type metadata for ActiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFE8);
  }
  return result;
}

unint64_t sub_1003610C8()
{
  unint64_t result;

  result = qword_10063BFF0;
  if (!qword_10063BFF0)
  {
    result = swift_getWitnessTable(&unk_10052966C, &type metadata for ODNErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFF0);
  }
  return result;
}

unint64_t sub_100361110()
{
  unint64_t result;

  result = qword_10063BFF8;
  if (!qword_10063BFF8)
  {
    result = swift_getWitnessTable(&unk_100529724, &type metadata for TrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063BFF8);
  }
  return result;
}

unint64_t sub_100361158()
{
  unint64_t result;

  result = qword_10063C000;
  if (!qword_10063C000)
  {
    result = swift_getWitnessTable(&unk_1005297DC, &type metadata for AssessmentAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C000);
  }
  return result;
}

unint64_t sub_1003611A0()
{
  unint64_t result;

  result = qword_10063C008;
  if (!qword_10063C008)
  {
    result = swift_getWitnessTable(&unk_100529894, &type metadata for OTDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C008);
  }
  return result;
}

unint64_t sub_1003611E8()
{
  unint64_t result;

  result = qword_10063C010;
  if (!qword_10063C010)
  {
    result = swift_getWitnessTable(&unk_10052994C, &type metadata for AssessmentGUIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C010);
  }
  return result;
}

unint64_t sub_100361230()
{
  unint64_t result;

  result = qword_10063C018;
  if (!qword_10063C018)
  {
    result = swift_getWitnessTable(&unk_100529A04, &type metadata for ORDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C018);
  }
  return result;
}

unint64_t sub_100361278()
{
  unint64_t result;

  result = qword_10063C020;
  if (!qword_10063C020)
  {
    result = swift_getWitnessTable(&unk_100529ABC, &type metadata for GlobalConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C020);
  }
  return result;
}

unint64_t sub_1003612C0()
{
  unint64_t result;

  result = qword_10063C028;
  if (!qword_10063C028)
  {
    result = swift_getWitnessTable(&unk_100529B74, &type metadata for AccountAssessmentDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C028);
  }
  return result;
}

unint64_t sub_100361308()
{
  unint64_t result;

  result = qword_10063C030;
  if (!qword_10063C030)
  {
    result = swift_getWitnessTable(&unk_100529C2C, &type metadata for AugmentedProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C030);
  }
  return result;
}

unint64_t sub_100361350()
{
  unint64_t result;

  result = qword_10063C038;
  if (!qword_10063C038)
  {
    result = swift_getWitnessTable(&unk_100529D1C, &type metadata for AssessmentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C038);
  }
  return result;
}

unint64_t sub_100361398()
{
  unint64_t result;

  result = qword_10063C040;
  if (!qword_10063C040)
  {
    result = swift_getWitnessTable(&unk_100529DD4, &type metadata for AssessmentServerDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C040);
  }
  return result;
}

unint64_t sub_1003613E0()
{
  unint64_t result;

  result = qword_10063C048;
  if (!qword_10063C048)
  {
    result = swift_getWitnessTable(&unk_100529E8C, &type metadata for IdVDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C048);
  }
  return result;
}

unint64_t sub_100361428()
{
  unint64_t result;

  result = qword_10063C050;
  if (!qword_10063C050)
  {
    result = swift_getWitnessTable(&unk_100529F44, &type metadata for IDSPACData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C050);
  }
  return result;
}

unint64_t sub_100361470()
{
  unint64_t result;

  result = qword_10063C058;
  if (!qword_10063C058)
  {
    result = swift_getWitnessTable(&unk_100529FFC, &type metadata for PersoDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C058);
  }
  return result;
}

uint64_t sub_1003614B4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_1006384F8, type metadata accessor for IdentityProofingRequestV2, (uint64_t)&unk_10052BB8C);
  result = sub_100004790(&qword_100638500, type metadata accessor for IdentityProofingRequestV2, (uint64_t)&unk_10052BB64);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100361510(uint64_t a1)
{
  uint64_t result;

  result = sub_100004790(&qword_10063C060, type metadata accessor for IdentityProofingRequestV2, (uint64_t)&unk_10052A074);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10036154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361560, (uint64_t (*)(void))sub_1003615A4);
}

unint64_t sub_100361560()
{
  unint64_t result;

  result = qword_10063C068;
  if (!qword_10063C068)
  {
    result = swift_getWitnessTable(&unk_10052A174, &type metadata for IdentityProofingPendingActionsResponse);
    atomic_store(result, (unint64_t *)&qword_10063C068);
  }
  return result;
}

unint64_t sub_1003615A4()
{
  unint64_t result;

  result = qword_10063C070;
  if (!qword_10063C070)
  {
    result = swift_getWitnessTable(&unk_10052A14C, &type metadata for IdentityProofingPendingActionsResponse);
    atomic_store(result, (unint64_t *)&qword_10063C070);
  }
  return result;
}

uint64_t sub_1003615E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_1003615FC, (uint64_t (*)(void))sub_100361640);
}

unint64_t sub_1003615FC()
{
  unint64_t result;

  result = qword_10063C078;
  if (!qword_10063C078)
  {
    result = swift_getWitnessTable(&unk_10052BB3C, &type metadata for IdentityProofingPendingActionsRequest);
    atomic_store(result, (unint64_t *)&qword_10063C078);
  }
  return result;
}

unint64_t sub_100361640()
{
  unint64_t result;

  result = qword_10063C080;
  if (!qword_10063C080)
  {
    result = swift_getWitnessTable(&unk_10052BB14, &type metadata for IdentityProofingPendingActionsRequest);
    atomic_store(result, (unint64_t *)&qword_10063C080);
  }
  return result;
}

unint64_t sub_100361684(uint64_t a1)
{
  unint64_t result;

  result = sub_1003616A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003616A8()
{
  unint64_t result;

  result = qword_10063C088;
  if (!qword_10063C088)
  {
    result = swift_getWitnessTable(&unk_10052A1B8, &type metadata for IdentityProofingPendingActionsRequest);
    atomic_store(result, (unint64_t *)&qword_10063C088);
  }
  return result;
}

uint64_t sub_1003616EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361700, (uint64_t (*)(void))sub_100255F50);
}

unint64_t sub_100361700()
{
  unint64_t result;

  result = qword_10063C090;
  if (!qword_10063C090)
  {
    result = swift_getWitnessTable(&unk_10052A240, &type metadata for ClaimValidityRequest);
    atomic_store(result, (unint64_t *)&qword_10063C090);
  }
  return result;
}

unint64_t sub_100361744(uint64_t a1)
{
  unint64_t result;

  result = sub_100361768();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100361768()
{
  unint64_t result;

  result = qword_10063C098;
  if (!qword_10063C098)
  {
    result = swift_getWitnessTable(&unk_10052A268, &type metadata for ClaimValidityRequest);
    atomic_store(result, (unint64_t *)&qword_10063C098);
  }
  return result;
}

unint64_t sub_1003617B0()
{
  unint64_t result;

  result = qword_10063C0A0;
  if (!qword_10063C0A0)
  {
    result = swift_getWitnessTable(&unk_10052A700, &type metadata for IdentityConfigurationSubType);
    atomic_store(result, (unint64_t *)&qword_10063C0A0);
  }
  return result;
}

uint64_t sub_1003617F4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_100639C10, type metadata accessor for IdentityProofingLivenessConfigResponseV2, (uint64_t)&unk_10052B7F4);
  result = sub_100004790(&qword_10063C0A8, type metadata accessor for IdentityProofingLivenessConfigResponseV2, (uint64_t)&unk_10052A728);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100361854()
{
  unint64_t result;

  result = qword_10063C0B0;
  if (!qword_10063C0B0)
  {
    result = swift_getWitnessTable(&unk_10052A8D4, &type metadata for CredentialValidityCWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C0B0);
  }
  return result;
}

unint64_t sub_10036189C()
{
  unint64_t result;

  result = qword_10063C0B8;
  if (!qword_10063C0B8)
  {
    result = swift_getWitnessTable(&unk_10052A9C4, &type metadata for CWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C0B8);
  }
  return result;
}

uint64_t sub_1003618E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_1003618F4, (uint64_t (*)(void))sub_100361938);
}

unint64_t sub_1003618F4()
{
  unint64_t result;

  result = qword_10063C0C0;
  if (!qword_10063C0C0)
  {
    result = swift_getWitnessTable(&unk_10052B4C4, &type metadata for RegisterTerminalRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0C0);
  }
  return result;
}

unint64_t sub_100361938()
{
  unint64_t result;

  result = qword_10063C0C8;
  if (!qword_10063C0C8)
  {
    result = swift_getWitnessTable(&unk_10052B49C, &type metadata for RegisterTerminalRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0C8);
  }
  return result;
}

unint64_t sub_10036197C(uint64_t a1)
{
  unint64_t result;

  result = sub_1003619A0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003619A0()
{
  unint64_t result;

  result = qword_10063C0D0;
  if (!qword_10063C0D0)
  {
    result = swift_getWitnessTable(&unk_10052AA64, &type metadata for RegisterTerminalRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0D0);
  }
  return result;
}

uint64_t sub_1003619E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_1001A48E4, (uint64_t (*)(void))sub_1001A4928);
}

unint64_t sub_1003619F8(uint64_t a1)
{
  unint64_t result;

  result = sub_100361A1C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100361A1C()
{
  unint64_t result;

  result = qword_10063C0D8;
  if (!qword_10063C0D8)
  {
    result = swift_getWitnessTable(&unk_10052AA9C, &type metadata for IdentityProofingActionNotificationRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0D8);
  }
  return result;
}

uint64_t sub_100361A60(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_100636630, type metadata accessor for SharingRegistrationRequest, (uint64_t)&unk_10052B63C);
  result = sub_100004790(&qword_100636638, type metadata accessor for SharingRegistrationRequest, (uint64_t)&unk_10052B614);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100361ABC(uint64_t a1)
{
  uint64_t result;

  result = sub_100004790(&qword_10063C0E0, type metadata accessor for SharingRegistrationRequest, (uint64_t)&unk_10052AAD4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100361AF8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_100636778, type metadata accessor for IdentityProofingRequest, (uint64_t)&unk_10052B59C);
  result = sub_100004790(&qword_100636780, type metadata accessor for IdentityProofingRequest, (uint64_t)&unk_10052B574);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100361B54(uint64_t a1)
{
  uint64_t result;

  result = sub_100004790(&qword_10063C0E8, type metadata accessor for IdentityProofingRequest, (uint64_t)&unk_10052AB0C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100361B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361BA4, (uint64_t (*)(void))sub_100255FD8);
}

unint64_t sub_100361BA4()
{
  unint64_t result;

  result = qword_10063C0F0;
  if (!qword_10063C0F0)
  {
    result = swift_getWitnessTable(&unk_10052AB44, &type metadata for IdentityProofingLivenessConfigRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0F0);
  }
  return result;
}

unint64_t sub_100361BE8(uint64_t a1)
{
  unint64_t result;

  result = sub_100361C0C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100361C0C()
{
  unint64_t result;

  result = qword_10063C0F8;
  if (!qword_10063C0F8)
  {
    result = swift_getWitnessTable(&unk_10052AB6C, &type metadata for IdentityProofingLivenessConfigRequest);
    atomic_store(result, (unint64_t *)&qword_10063C0F8);
  }
  return result;
}

uint64_t sub_100361C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361C64, (uint64_t (*)(void))sub_10025601C);
}

unint64_t sub_100361C64()
{
  unint64_t result;

  result = qword_10063C100;
  if (!qword_10063C100)
  {
    result = swift_getWitnessTable(&unk_10052ABA4, &type metadata for WorkflowRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_10063C100);
  }
  return result;
}

unint64_t sub_100361CA8(uint64_t a1)
{
  unint64_t result;

  result = sub_100361CCC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100361CCC()
{
  unint64_t result;

  result = qword_10063C108;
  if (!qword_10063C108)
  {
    result = swift_getWitnessTable(&unk_10052ABCC, &type metadata for WorkflowRecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_10063C108);
  }
  return result;
}

uint64_t sub_100361D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361D24, (uint64_t (*)(void))sub_1001393B8);
}

unint64_t sub_100361D24()
{
  unint64_t result;

  result = qword_10063C110;
  if (!qword_10063C110)
  {
    result = swift_getWitnessTable(&unk_10052AC04, &type metadata for NonceRequest);
    atomic_store(result, (unint64_t *)&qword_10063C110);
  }
  return result;
}

uint64_t sub_100361D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361D7C, (uint64_t (*)(void))sub_100255F94);
}

unint64_t sub_100361D7C()
{
  unint64_t result;

  result = qword_10063C118;
  if (!qword_10063C118)
  {
    result = swift_getWitnessTable(&unk_10052AC48, &type metadata for GetRPEncryptionCertificateRequest);
    atomic_store(result, (unint64_t *)&qword_10063C118);
  }
  return result;
}

uint64_t sub_100361DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100256060, (uint64_t (*)(void))sub_100361DD4);
}

unint64_t sub_100361DD4()
{
  unint64_t result;

  result = qword_10063C120;
  if (!qword_10063C120)
  {
    result = swift_getWitnessTable(&unk_10052AC8C, &type metadata for RegisterTerminalResponse);
    atomic_store(result, (unint64_t *)&qword_10063C120);
  }
  return result;
}

uint64_t sub_100361E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_1002560E0, (uint64_t (*)(void))sub_100361E2C);
}

unint64_t sub_100361E2C()
{
  unint64_t result;

  result = qword_10063C128;
  if (!qword_10063C128)
  {
    result = swift_getWitnessTable(&unk_10052ACD0, &type metadata for GetRPEncryptionCertificateResponse);
    atomic_store(result, (unint64_t *)&qword_10063C128);
  }
  return result;
}

uint64_t sub_100361E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100361E84, (uint64_t (*)(void))sub_100361EC8);
}

unint64_t sub_100361E84()
{
  unint64_t result;

  result = qword_10063C130;
  if (!qword_10063C130)
  {
    result = swift_getWitnessTable(&unk_10052AD3C, &type metadata for IdentityProofingResponseV2);
    atomic_store(result, (unint64_t *)&qword_10063C130);
  }
  return result;
}

unint64_t sub_100361EC8()
{
  unint64_t result;

  result = qword_10063C138;
  if (!qword_10063C138)
  {
    result = swift_getWitnessTable(&unk_10052AD14, &type metadata for IdentityProofingResponseV2);
    atomic_store(result, (unint64_t *)&qword_10063C138);
  }
  return result;
}

uint64_t sub_100361F0C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_10063C140, type metadata accessor for SharingRegistrationResponse, (uint64_t)&unk_10052ADA8);
  result = sub_100004790(&qword_10063C148, type metadata accessor for SharingRegistrationResponse, (uint64_t)&unk_10052AD80);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100361F68(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_10063C150, type metadata accessor for IdentityProofingResponse, (uint64_t)&unk_10052AE14);
  result = sub_100004790(&qword_10063C158, type metadata accessor for IdentityProofingResponse, (uint64_t)&unk_10052ADEC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100361FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100139500, (uint64_t (*)(void))sub_100361FD8);
}

unint64_t sub_100361FD8()
{
  unint64_t result;

  result = qword_10063C160;
  if (!qword_10063C160)
  {
    result = swift_getWitnessTable(&unk_10052AE58, &type metadata for NonceResponse);
    atomic_store(result, (unint64_t *)&qword_10063C160);
  }
  return result;
}

uint64_t sub_10036201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100362030(a1, a2, a3, (uint64_t (*)(void))sub_100256534, (uint64_t (*)(void))sub_100362060);
}

uint64_t sub_100362030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100362060()
{
  unint64_t result;

  result = qword_10063C168;
  if (!qword_10063C168)
  {
    result = swift_getWitnessTable(&unk_10052AEEC, &type metadata for LegacyWorkflowRecommendationResponse);
    atomic_store(result, (unint64_t *)&qword_10063C168);
  }
  return result;
}

uint64_t sub_1003620A4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_100636570, type metadata accessor for IdentitySharingRequest, (uint64_t)&unk_10052B6DC);
  result = sub_100004790(&qword_100636578, type metadata accessor for IdentitySharingRequest, (uint64_t)&unk_10052B6B4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100362100(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_10063C170, type metadata accessor for InputValidationRequestV3, (uint64_t)&unk_10052B384);
  result = sub_100004790(&qword_10063C178, type metadata accessor for InputValidationRequestV3, (uint64_t)&unk_10052B35C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10036215C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100004790(&qword_10063C180, type metadata accessor for InputValidationRequestV1, (uint64_t)&unk_10052B30C);
  result = sub_100004790(&qword_10063C188, type metadata accessor for InputValidationRequestV1, (uint64_t)&unk_10052B2E4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003621BC()
{
  unint64_t result;

  result = qword_10063C190;
  if (!qword_10063C190)
  {
    result = swift_getWitnessTable(&unk_10052A8FC, &type metadata for CWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C190);
  }
  return result;
}

unint64_t sub_100362204()
{
  unint64_t result;

  result = qword_10063C198;
  if (!qword_10063C198)
  {
    result = swift_getWitnessTable(&unk_10052A924, &type metadata for CWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C198);
  }
  return result;
}

unint64_t sub_10036224C()
{
  unint64_t result;

  result = qword_10063C1A0;
  if (!qword_10063C1A0)
  {
    result = swift_getWitnessTable(&unk_10052A80C, &type metadata for CredentialValidityCWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1A0);
  }
  return result;
}

unint64_t sub_100362294()
{
  unint64_t result;

  result = qword_10063C1A8;
  if (!qword_10063C1A8)
  {
    result = swift_getWitnessTable(&unk_10052A834, &type metadata for CredentialValidityCWTPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1A8);
  }
  return result;
}

unint64_t sub_1003622DC()
{
  unint64_t result;

  result = qword_10063C1B0;
  if (!qword_10063C1B0)
  {
    result = swift_getWitnessTable(&unk_100529F6C, &type metadata for PersoDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1B0);
  }
  return result;
}

unint64_t sub_100362324()
{
  unint64_t result;

  result = qword_10063C1B8;
  if (!qword_10063C1B8)
  {
    result = swift_getWitnessTable(&unk_100529F94, &type metadata for PersoDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1B8);
  }
  return result;
}

unint64_t sub_10036236C()
{
  unint64_t result;

  result = qword_10063C1C0;
  if (!qword_10063C1C0)
  {
    result = swift_getWitnessTable(&unk_100529EB4, &type metadata for IDSPACData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1C0);
  }
  return result;
}

unint64_t sub_1003623B4()
{
  unint64_t result;

  result = qword_10063C1C8;
  if (!qword_10063C1C8)
  {
    result = swift_getWitnessTable(&unk_100529EDC, &type metadata for IDSPACData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1C8);
  }
  return result;
}

unint64_t sub_1003623FC()
{
  unint64_t result;

  result = qword_10063C1D0;
  if (!qword_10063C1D0)
  {
    result = swift_getWitnessTable(&unk_100529DFC, &type metadata for IdVDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1D0);
  }
  return result;
}

unint64_t sub_100362444()
{
  unint64_t result;

  result = qword_10063C1D8;
  if (!qword_10063C1D8)
  {
    result = swift_getWitnessTable(&unk_100529E24, &type metadata for IdVDataElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1D8);
  }
  return result;
}

unint64_t sub_10036248C()
{
  unint64_t result;

  result = qword_10063C1E0;
  if (!qword_10063C1E0)
  {
    result = swift_getWitnessTable(&unk_100529D44, &type metadata for AssessmentServerDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1E0);
  }
  return result;
}

unint64_t sub_1003624D4()
{
  unint64_t result;

  result = qword_10063C1E8;
  if (!qword_10063C1E8)
  {
    result = swift_getWitnessTable(&unk_100529D6C, &type metadata for AssessmentServerDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1E8);
  }
  return result;
}

unint64_t sub_10036251C()
{
  unint64_t result;

  result = qword_10063C1F0;
  if (!qword_10063C1F0)
  {
    result = swift_getWitnessTable(&unk_100529C54, &type metadata for AssessmentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1F0);
  }
  return result;
}

unint64_t sub_100362564()
{
  unint64_t result;

  result = qword_10063C1F8;
  if (!qword_10063C1F8)
  {
    result = swift_getWitnessTable(&unk_100529C7C, &type metadata for AssessmentConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C1F8);
  }
  return result;
}

unint64_t sub_1003625AC()
{
  unint64_t result;

  result = qword_10063C200;
  if (!qword_10063C200)
  {
    result = swift_getWitnessTable(&unk_100529B9C, &type metadata for AugmentedProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C200);
  }
  return result;
}

unint64_t sub_1003625F4()
{
  unint64_t result;

  result = qword_10063C208;
  if (!qword_10063C208)
  {
    result = swift_getWitnessTable(&unk_100529BC4, &type metadata for AugmentedProfile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C208);
  }
  return result;
}

unint64_t sub_10036263C()
{
  unint64_t result;

  result = qword_10063C210;
  if (!qword_10063C210)
  {
    result = swift_getWitnessTable(&unk_100529AE4, &type metadata for AccountAssessmentDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C210);
  }
  return result;
}

unint64_t sub_100362684()
{
  unint64_t result;

  result = qword_10063C218;
  if (!qword_10063C218)
  {
    result = swift_getWitnessTable(&unk_100529B0C, &type metadata for AccountAssessmentDeviceData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C218);
  }
  return result;
}

unint64_t sub_1003626CC()
{
  unint64_t result;

  result = qword_10063C220;
  if (!qword_10063C220)
  {
    result = swift_getWitnessTable(&unk_100529A2C, &type metadata for GlobalConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C220);
  }
  return result;
}

unint64_t sub_100362714()
{
  unint64_t result;

  result = qword_10063C228;
  if (!qword_10063C228)
  {
    result = swift_getWitnessTable(&unk_100529A54, &type metadata for GlobalConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C228);
  }
  return result;
}

unint64_t sub_10036275C()
{
  unint64_t result;

  result = qword_10063C230;
  if (!qword_10063C230)
  {
    result = swift_getWitnessTable(&unk_100529974, &type metadata for ORDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C230);
  }
  return result;
}

unint64_t sub_1003627A4()
{
  unint64_t result;

  result = qword_10063C238;
  if (!qword_10063C238)
  {
    result = swift_getWitnessTable(&unk_10052999C, &type metadata for ORDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C238);
  }
  return result;
}

unint64_t sub_1003627EC()
{
  unint64_t result;

  result = qword_10063C240;
  if (!qword_10063C240)
  {
    result = swift_getWitnessTable(&unk_1005298BC, &type metadata for AssessmentGUIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C240);
  }
  return result;
}

unint64_t sub_100362834()
{
  unint64_t result;

  result = qword_10063C248;
  if (!qword_10063C248)
  {
    result = swift_getWitnessTable(&unk_1005298E4, &type metadata for AssessmentGUIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C248);
  }
  return result;
}

unint64_t sub_10036287C()
{
  unint64_t result;

  result = qword_10063C250;
  if (!qword_10063C250)
  {
    result = swift_getWitnessTable(&unk_100529804, &type metadata for OTDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C250);
  }
  return result;
}

unint64_t sub_1003628C4()
{
  unint64_t result;

  result = qword_10063C258;
  if (!qword_10063C258)
  {
    result = swift_getWitnessTable(&unk_10052982C, &type metadata for OTDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C258);
  }
  return result;
}

unint64_t sub_10036290C()
{
  unint64_t result;

  result = qword_10063C260;
  if (!qword_10063C260)
  {
    result = swift_getWitnessTable(&unk_10052974C, &type metadata for AssessmentAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C260);
  }
  return result;
}

unint64_t sub_100362954()
{
  unint64_t result;

  result = qword_10063C268;
  if (!qword_10063C268)
  {
    result = swift_getWitnessTable(&unk_100529774, &type metadata for AssessmentAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C268);
  }
  return result;
}

unint64_t sub_10036299C()
{
  unint64_t result;

  result = qword_10063C270;
  if (!qword_10063C270)
  {
    result = swift_getWitnessTable(&unk_100529694, &type metadata for TrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C270);
  }
  return result;
}

unint64_t sub_1003629E4()
{
  unint64_t result;

  result = qword_10063C278;
  if (!qword_10063C278)
  {
    result = swift_getWitnessTable(&unk_1005296BC, &type metadata for TrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C278);
  }
  return result;
}

unint64_t sub_100362A2C()
{
  unint64_t result;

  result = qword_10063C280;
  if (!qword_10063C280)
  {
    result = swift_getWitnessTable(&unk_1005295DC, &type metadata for ODNErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C280);
  }
  return result;
}

unint64_t sub_100362A74()
{
  unint64_t result;

  result = qword_10063C288;
  if (!qword_10063C288)
  {
    result = swift_getWitnessTable(&unk_100529604, &type metadata for ODNErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C288);
  }
  return result;
}

unint64_t sub_100362ABC()
{
  unint64_t result;

  result = qword_10063C290;
  if (!qword_10063C290)
  {
    result = swift_getWitnessTable(&unk_100529524, &type metadata for ActiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C290);
  }
  return result;
}

unint64_t sub_100362B04()
{
  unint64_t result;

  result = qword_10063C298;
  if (!qword_10063C298)
  {
    result = swift_getWitnessTable(&unk_10052954C, &type metadata for ActiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C298);
  }
  return result;
}

unint64_t sub_100362B4C()
{
  unint64_t result;

  result = qword_10063C2A0;
  if (!qword_10063C2A0)
  {
    result = swift_getWitnessTable(&unk_10052946C, &type metadata for PassiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2A0);
  }
  return result;
}

unint64_t sub_100362B94()
{
  unint64_t result;

  result = qword_10063C2A8;
  if (!qword_10063C2A8)
  {
    result = swift_getWitnessTable(&unk_100529494, &type metadata for PassiveLivenessConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2A8);
  }
  return result;
}

unint64_t sub_100362BDC()
{
  unint64_t result;

  result = qword_10063C2B0;
  if (!qword_10063C2B0)
  {
    result = swift_getWitnessTable(&unk_1005293B4, &type metadata for LivenessConfigV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2B0);
  }
  return result;
}

unint64_t sub_100362C24()
{
  unint64_t result;

  result = qword_10063C2B8;
  if (!qword_10063C2B8)
  {
    result = swift_getWitnessTable(&unk_1005293DC, &type metadata for LivenessConfigV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2B8);
  }
  return result;
}

unint64_t sub_100362C6C()
{
  unint64_t result;

  result = qword_10063C2C0;
  if (!qword_10063C2C0)
  {
    result = swift_getWitnessTable(&unk_1005292FC, &type metadata for ResponseHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2C0);
  }
  return result;
}

unint64_t sub_100362CB4()
{
  unint64_t result;

  result = qword_10063C2C8;
  if (!qword_10063C2C8)
  {
    result = swift_getWitnessTable(&unk_100529324, &type metadata for ResponseHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2C8);
  }
  return result;
}

unint64_t sub_100362CFC()
{
  unint64_t result;

  result = qword_10063C2D0;
  if (!qword_10063C2D0)
  {
    result = swift_getWitnessTable(&unk_10052920C, &type metadata for IdentityProofingStaticWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2D0);
  }
  return result;
}

unint64_t sub_100362D44()
{
  unint64_t result;

  result = qword_10063C2D8;
  if (!qword_10063C2D8)
  {
    result = swift_getWitnessTable(&unk_100529234, &type metadata for IdentityProofingStaticWorkflow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2D8);
  }
  return result;
}

unint64_t sub_100362D8C()
{
  unint64_t result;

  result = qword_10063C2E0;
  if (!qword_10063C2E0)
  {
    result = swift_getWitnessTable(&unk_1005290CC, &type metadata for LegacyWorkflowPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2E0);
  }
  return result;
}

unint64_t sub_100362DD4()
{
  unint64_t result;

  result = qword_10063C2E8;
  if (!qword_10063C2E8)
  {
    result = swift_getWitnessTable(&unk_1005290F4, &type metadata for LegacyWorkflowPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2E8);
  }
  return result;
}

unint64_t sub_100362E18()
{
  unint64_t result;

  result = qword_10063C2F8;
  if (!qword_10063C2F8)
  {
    result = swift_getWitnessTable(&unk_100531C00, &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C2F8);
  }
  return result;
}

unint64_t sub_100362E5C()
{
  unint64_t result;

  result = qword_10063C300;
  if (!qword_10063C300)
  {
    result = swift_getWitnessTable(&unk_10052AF58, &type metadata for DocScanConfig);
    atomic_store(result, (unint64_t *)&qword_10063C300);
  }
  return result;
}

unint64_t sub_100362EA0()
{
  unint64_t result;

  result = qword_10063C310;
  if (!qword_10063C310)
  {
    result = swift_getWitnessTable(&unk_100531BB0, &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C310);
  }
  return result;
}

unint64_t sub_100362EE4()
{
  unint64_t result;

  result = qword_10063C320;
  if (!qword_10063C320)
  {
    result = swift_getWitnessTable(&unk_100531B60, &type metadata for Gesture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C320);
  }
  return result;
}

unint64_t sub_100362F28()
{
  unint64_t result;

  result = qword_10063C338;
  if (!qword_10063C338)
  {
    result = swift_getWitnessTable(&unk_100531B10, &type metadata for TSIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C338);
  }
  return result;
}

unint64_t sub_100362F6C()
{
  unint64_t result;

  result = qword_10063C350;
  if (!qword_10063C350)
  {
    result = swift_getWitnessTable(&unk_100531AC0, &type metadata for RegionConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C350);
  }
  return result;
}

unint64_t sub_100362FB0()
{
  unint64_t result;

  result = qword_10063C360;
  if (!qword_10063C360)
  {
    result = swift_getWitnessTable(&unk_100531A70, &type metadata for RegionFeatureConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C360);
  }
  return result;
}

unint64_t sub_100362FF4()
{
  unint64_t result;

  result = qword_10063C368;
  if (!qword_10063C368)
  {
    result = swift_getWitnessTable(&unk_100531A48, &type metadata for FeatureConfig);
    atomic_store(result, (unint64_t *)&qword_10063C368);
  }
  return result;
}

unint64_t sub_100363038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C378;
  if (!qword_10063C378)
  {
    v1 = sub_100013E24(&qword_10063C370);
    sub_100362FF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C378);
  }
  return result;
}

unint64_t sub_1003630A4()
{
  unint64_t result;

  result = qword_10063C390;
  if (!qword_10063C390)
  {
    result = swift_getWitnessTable(&unk_100531A20, &type metadata for FeatureConfig);
    atomic_store(result, (unint64_t *)&qword_10063C390);
  }
  return result;
}

unint64_t sub_1003630E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C398;
  if (!qword_10063C398)
  {
    v1 = sub_100013E24(&qword_10063C370);
    sub_1003630A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C398);
  }
  return result;
}

unint64_t sub_100363154()
{
  unint64_t result;

  result = qword_10063C3A8;
  if (!qword_10063C3A8)
  {
    result = swift_getWitnessTable(&unk_1005319D0, &type metadata for GetProfileResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C3A8);
  }
  return result;
}

unint64_t sub_100363198()
{
  unint64_t result;

  result = qword_10063C3B8;
  if (!qword_10063C3B8)
  {
    result = swift_getWitnessTable(&unk_100531980, &type metadata for GetSTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C3B8);
  }
  return result;
}

unint64_t sub_1003631DC()
{
  unint64_t result;

  result = qword_10063C3C8;
  if (!qword_10063C3C8)
  {
    result = swift_getWitnessTable(&unk_100531930, &type metadata for IdentityProofingRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C3C8);
  }
  return result;
}

unint64_t sub_100363220()
{
  unint64_t result;

  result = qword_10063C3D0;
  if (!qword_10063C3D0)
  {
    result = swift_getWitnessTable(&unk_100531908, &type metadata for RequestHeader);
    atomic_store(result, (unint64_t *)&qword_10063C3D0);
  }
  return result;
}

unint64_t sub_100363264()
{
  unint64_t result;

  result = qword_10063C3D8;
  if (!qword_10063C3D8)
  {
    result = swift_getWitnessTable(&unk_10052AEC4, &type metadata for AppleCredentials);
    atomic_store(result, (unint64_t *)&qword_10063C3D8);
  }
  return result;
}

unint64_t sub_1003632A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C3E8;
  if (!qword_10063C3E8)
  {
    v1 = sub_100013E24(&qword_10063C3E0);
    sub_100099FFC(&qword_100630358, &qword_100630278, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageWithKeyWrap<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C3E8);
  }
  return result;
}

unint64_t sub_100363324()
{
  unint64_t result;

  result = qword_10063C3F8;
  if (!qword_10063C3F8)
  {
    result = swift_getWitnessTable(&unk_1005318E0, &type metadata for ImageQualityMetricData);
    atomic_store(result, (unint64_t *)&qword_10063C3F8);
  }
  return result;
}

unint64_t sub_100363368()
{
  unint64_t result;

  result = qword_10063C408;
  if (!qword_10063C408)
  {
    result = swift_getWitnessTable(&unk_10052AFA8, &type metadata for KeyAuthorization);
    atomic_store(result, (unint64_t *)&qword_10063C408);
  }
  return result;
}

unint64_t sub_1003633AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C420;
  if (!qword_10063C420)
  {
    v1 = sub_100013E24(&qword_10063C418);
    sub_100363418();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C420);
  }
  return result;
}

unint64_t sub_100363418()
{
  unint64_t result;

  result = qword_10063C428;
  if (!qword_10063C428)
  {
    result = swift_getWitnessTable(&unk_10052A794, &type metadata for CASDAttestationData);
    atomic_store(result, (unint64_t *)&qword_10063C428);
  }
  return result;
}

unint64_t sub_10036345C()
{
  unint64_t result;

  result = qword_10063C438;
  if (!qword_10063C438)
  {
    result = swift_getWitnessTable(&unk_1005318B8, &type metadata for RequestHeader);
    atomic_store(result, (unint64_t *)&qword_10063C438);
  }
  return result;
}

unint64_t sub_1003634A0()
{
  unint64_t result;

  result = qword_10063C440;
  if (!qword_10063C440)
  {
    result = swift_getWitnessTable(&unk_10052AE9C, &type metadata for AppleCredentials);
    atomic_store(result, (unint64_t *)&qword_10063C440);
  }
  return result;
}

unint64_t sub_1003634E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C448;
  if (!qword_10063C448)
  {
    v1 = sub_100013E24(&qword_10063C3E0);
    sub_100099FFC(&qword_100630348, &qword_100630278, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageWithKeyWrap<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C448);
  }
  return result;
}

unint64_t sub_100363560()
{
  unint64_t result;

  result = qword_10063C458;
  if (!qword_10063C458)
  {
    result = swift_getWitnessTable(&unk_100531890, &type metadata for ImageQualityMetricData);
    atomic_store(result, (unint64_t *)&qword_10063C458);
  }
  return result;
}

unint64_t sub_1003635A4()
{
  unint64_t result;

  result = qword_10063C468;
  if (!qword_10063C468)
  {
    result = swift_getWitnessTable(&unk_10052AF80, &type metadata for KeyAuthorization);
    atomic_store(result, (unint64_t *)&qword_10063C468);
  }
  return result;
}

unint64_t sub_1003635E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C478;
  if (!qword_10063C478)
  {
    v1 = sub_100013E24(&qword_10063C418);
    sub_100363654();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C478);
  }
  return result;
}

unint64_t sub_100363654()
{
  unint64_t result;

  result = qword_10063C480;
  if (!qword_10063C480)
  {
    result = swift_getWitnessTable(&unk_10052A76C, &type metadata for CASDAttestationData);
    atomic_store(result, (unint64_t *)&qword_10063C480);
  }
  return result;
}

unint64_t sub_100363698()
{
  unint64_t result;

  result = qword_10063C490;
  if (!qword_10063C490)
  {
    result = swift_getWitnessTable(&unk_100531840, &type metadata for IdentityProofingPendingActionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C490);
  }
  return result;
}

_QWORD *sub_1003636DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[15];
  v10 = a1[17];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100363794(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4874736575716572 && a2 == 0xED00007265646165)
  {
    v5 = 0xED00007265646165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4874736575716572, 0xED00007265646165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69746E6564497072 && a2 == 0xEC00000072656966)
  {
    v7 = 0xEC00000072656966;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6564497072, 0xEC00000072656966, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x72656469766F7270 && a2 == 0xEA00000000006449)
  {
    swift_bridgeObjectRelease(0xEA00000000006449);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656469766F7270, 0xEA00000000006449, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100363930@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v36 = a2;
  v4 = sub_100004828(&qword_10063CCA8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = UUID.init()(v10);
  UUID.uuidString.getter(v13);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v16 = a1[3];
  v17 = a1[4];
  sub_10000806C(a1, v16);
  v18 = sub_1003653C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GetRPEncryptionCertificateRequest.CodingKeys, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys, v18, v16, v17);
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(0xE000000000000000);
    return swift_bridgeObjectRelease(0xE700000000000000);
  }
  else
  {
    v41 = 0;
    v19 = sub_100363220();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for RequestHeader, &v41, v4, &type metadata for RequestHeader, v19);
    v20 = v38;
    v21 = v40;
    v34 = v39;
    v35 = v37;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v15);
    LOBYTE(v37) = 1;
    v33 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v4);
    LOBYTE(v37) = 2;
    v23 = v22;
    swift_bridgeObjectRetain(v22);
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v4);
    v26 = v25;
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v32 = v24;
    v27(v7, v4);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(0xE700000000000000);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v28);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v21);
    result = swift_bridgeObjectRelease(v20);
    v30 = v36;
    *v36 = v35;
    v30[1] = v20;
    v30[2] = v34;
    v30[3] = v21;
    v30[4] = v33;
    v30[5] = v23;
    v30[6] = v32;
    v30[7] = v26;
  }
  return result;
}

uint64_t sub_100363C30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548)
  {
    v5 = 0xEE00726564616548;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572, 0xEE00726564616548, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272)
  {
    v7 = 0xEC000000726F7272;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45656D69746E7572, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010055A6E0)
  {
    swift_bridgeObjectRelease(0x800000010055A6E0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010055A6E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100363DBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[11];
  uint64_t v49;
  char v50;

  v5 = sub_100004828(&qword_10063C5F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100366F20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GetRPEncryptionCertificateResponse.CodingKeys, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v50 = 0;
    v12 = sub_1001D98D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, &type metadata for ResponseHeader, &v50, v5, &type metadata for ResponseHeader, v12);
    v13 = v48[1];
    v41 = v48[0];
    v42 = a2;
    v14 = v48[3];
    v15 = v48[5];
    v39 = v48[4];
    v40 = v48[2];
    v16 = v48[7];
    v38 = v48[6];
    v17 = v48[9];
    v37 = v48[8];
    v36 = v48[10];
    LOBYTE(v48[0]) = 1;
    v44 = v49;
    swift_bridgeObjectRetain(v49);
    v47 = v13;
    swift_bridgeObjectRetain(v13);
    v46 = v14;
    swift_bridgeObjectRetain(v14);
    v43 = v15;
    swift_bridgeObjectRetain(v15);
    v45 = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v48, v5);
    v20 = v19;
    v34 = v18;
    v35 = v17;
    v21 = v43;
    v22 = sub_100004828(&qword_1006368D0);
    v50 = 2;
    v23 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v48, v22, &v50, v5, v22, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = v48[0];
    v33 = v48[0];
    v25 = v47;
    swift_bridgeObjectRetain(v47);
    v26 = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v21);
    v27 = v45;
    swift_bridgeObjectRetain(v45);
    v28 = v35;
    swift_bridgeObjectRetain(v35);
    v29 = v44;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    v30 = v33;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v26);
    result = swift_bridgeObjectRelease(v25);
    v32 = v42;
    *v42 = v41;
    v32[1] = v25;
    v32[2] = v40;
    v32[3] = v26;
    v32[4] = v39;
    v32[5] = v21;
    v32[6] = v38;
    v32[7] = v27;
    v32[8] = v37;
    v32[9] = v28;
    v32[10] = v36;
    v32[11] = v29;
    v32[12] = v34;
    v32[13] = v20;
    v32[14] = v30;
  }
  return result;
}

uint64_t sub_100364248(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x4874736575716572 && a2 == 0xED00007265646165)
  {
    v5 = 0xED00007265646165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4874736575716572, 0xED00007265646165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000010055A590;
    if (a2 == 0x800000010055A590)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010055A590, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6D746E6573657270 && a2 == 0xEE0079654B746E65)
  {
    v8 = 0xEE0079654B746E65;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D746E6573657270, 0xEE0079654B746E65, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000010053AA80)
  {
    swift_bridgeObjectRelease(0x800000010053AA80);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010053AA80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

_QWORD *sub_100364498@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;

  v70 = sub_100004828(&qword_10063CF00);
  v5 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = UUID.init()(v10);
  UUID.uuidString.getter(v13);
  v74 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = a1[3];
  v16 = a1[4];
  v72 = a1;
  sub_10000806C(a1, v15);
  v17 = sub_100365384();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClaimValidityRequest.CodingKeys, &type metadata for ClaimValidityRequest.CodingKeys, v17, v15, v16);
  if (v2)
  {
    v71 = v2;
    v73 = 0;
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v72);
    swift_bridgeObjectRelease(v74);
    swift_bridgeObjectRelease(0xE000000000000000);
    return (_QWORD *)sub_10008EF5C(0, 0, v73, 0, 0, 0);
  }
  else
  {
    v18 = v5;
    v71 = a2;
    LOBYTE(v75) = 0;
    v19 = sub_100363220();
    v20 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v83, &type metadata for RequestHeader, &v75, v70, &type metadata for RequestHeader, v19);
    v22 = v83;
    v23 = v84;
    v25 = v85;
    v24 = v86;
    swift_bridgeObjectRetain(v84);
    v68 = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v74);
    LOBYTE(v75) = 1;
    v26 = sub_100363264();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v83, &type metadata for AppleCredentials, &v75, v20, &type metadata for AppleCredentials, v26, v27);
    v64 = v25;
    v28 = v83;
    LOBYTE(v83) = 2;
    v66 = v23;
    v67 = v28;
    v29 = v84;
    v73 = v85;
    v74 = v22;
    v30 = v86;
    v31 = v87;
    v65 = v88;
    sub_10008F020(v28, v84, v85, v86, v87, v88);
    v61 = KeyedDecodingContainer.decode(_:forKey:)(&v83, v20);
    v62 = v30;
    v63 = v29;
    LOBYTE(v83) = 3;
    v33 = v32;
    swift_bridgeObjectRetain(v32);
    v34 = KeyedDecodingContainer.decode(_:forKey:)(&v83, v20);
    v69 = v33;
    v35 = v34;
    v36 = v20;
    v99 = 4;
    v38 = v37;
    swift_bridgeObjectRetain(v37);
    v39 = KeyedDecodingContainer.decode(_:forKey:)(&v99, v36);
    v40 = *(void (**)(char *, uint64_t))(v18 + 8);
    v41 = v39;
    v58 = v42;
    v59 = v39;
    v43 = v42;
    v40(v7, v70);
    v44 = v65;
    *(_QWORD *)&v75 = v74;
    *((_QWORD *)&v75 + 1) = v66;
    *(_QWORD *)&v76 = v64;
    *((_QWORD *)&v76 + 1) = v68;
    v45 = v62;
    *(_QWORD *)&v77 = v67;
    *((_QWORD *)&v77 + 1) = v63;
    *(_QWORD *)&v78 = v73;
    *((_QWORD *)&v78 + 1) = v62;
    v60 = v35;
    v57 = v31;
    *(_QWORD *)&v79 = v31;
    *((_QWORD *)&v79 + 1) = v65;
    v46 = v69;
    *(_QWORD *)&v80 = v61;
    *((_QWORD *)&v80 + 1) = v69;
    *(_QWORD *)&v81 = v35;
    *((_QWORD *)&v81 + 1) = v38;
    *(_QWORD *)&v82 = v41;
    *((_QWORD *)&v82 + 1) = v43;
    sub_100281AFC(&v75);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v38);
    v47 = v63;
    v48 = v57;
    sub_10008EF5C(v67, v63, v73, v45, v57, v44);
    v49 = v68;
    swift_bridgeObjectRelease(v68);
    v50 = v66;
    swift_bridgeObjectRelease(v66);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v72);
    v83 = v74;
    v84 = v50;
    v85 = v64;
    v86 = v49;
    v87 = v67;
    v88 = v47;
    v89 = v73;
    v90 = v45;
    v91 = v48;
    v92 = v44;
    v93 = v61;
    v94 = v69;
    v95 = v60;
    v96 = v38;
    v97 = v59;
    v98 = v58;
    result = sub_1002552C4(&v83);
    v51 = v80;
    v52 = v71;
    v71[4] = v79;
    v52[5] = v51;
    v53 = v82;
    v52[6] = v81;
    v52[7] = v53;
    v54 = v76;
    *v52 = v75;
    v52[1] = v54;
    v55 = v78;
    v52[2] = v77;
    v52[3] = v55;
  }
  return result;
}

unint64_t sub_100364A98(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 7)
    return 7;
  else
    return v5;
}

unint64_t sub_100364ADC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100602558, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100364B24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  v40 = v3;
  __chkstk_darwin(v2);
  v45 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DIPCertUsage(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DIPOIDVerifier(0);
  v6 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828(&qword_10063C4A0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000806C(a1, v14);
  v15 = sub_100365010();
  v16 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClaimValidityResponse.CodingKeys, &type metadata for ClaimValidityResponse.CodingKeys, v15, v14, v13);
  if (v16)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  }
  else
  {
    v17 = v8;
    v46 = v6;
    v18 = v44;
    v49 = 0;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v9);
    v22 = v20;
    v38 = v10;
    if (v20)
    {
      v36 = Data.init(base64Encoded:options:)(v19, v20, 1);
      v37 = v23;
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      v36 = 0;
      v37 = 0xF000000000000000;
    }
    v24 = v17;
    v25 = sub_100004828(&qword_1006368D0);
    v48 = 1;
    v26 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v47, v25, &v48, v9, v25, v26, v27);
    v45 = (char *)v9;
    v28 = v47;
    if (v47)
    {
      swift_bridgeObjectRetain(v47);
      DIPOIDVerifier.init()(v29);
      v30 = v42;
      v31 = v24;
      v32 = v41;
      (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for DIPCertUsage.topekaServerSigning(_:), v18);
      v35 = 0;

      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v18);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v43);
      v33 = v28;
    }
    else
    {
      v33 = 0;
    }
    (*(void (**)(char *, char *))(v38 + 8))(v12, v45);
    v9 = v36;
    v34 = v37;
    sub_100028034(v36, v37);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
    sub_100007F78(v9, v34);
    swift_bridgeObjectRelease(v33);
  }
  return v9;
}

unint64_t sub_100365010()
{
  unint64_t result;

  result = qword_10063C4A8;
  if (!qword_10063C4A8)
  {
    result = swift_getWitnessTable(&unk_1005317F0, &type metadata for ClaimValidityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C4A8);
  }
  return result;
}

unint64_t sub_100365054()
{
  unint64_t result;

  result = qword_10063C4B8;
  if (!qword_10063C4B8)
  {
    result = swift_getWitnessTable(&unk_1005317A0, &type metadata for TSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C4B8);
  }
  return result;
}

unint64_t sub_100365098()
{
  unint64_t result;

  result = qword_10063C4C8;
  if (!qword_10063C4C8)
  {
    result = swift_getWitnessTable(&unk_100531750, &type metadata for DUADataAug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C4C8);
  }
  return result;
}

unint64_t sub_1003650DC()
{
  unint64_t result;

  result = qword_10063C4D0;
  if (!qword_10063C4D0)
  {
    result = swift_getWitnessTable(&unk_100531728, &type metadata for DUATaskType);
    atomic_store(result, (unint64_t *)&qword_10063C4D0);
  }
  return result;
}

unint64_t sub_100365120()
{
  unint64_t result;

  result = qword_10063C4E0;
  if (!qword_10063C4E0)
  {
    result = swift_getWitnessTable(&unk_1005316D8, &type metadata for ProofingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C4E0);
  }
  return result;
}

unint64_t sub_100365164()
{
  unint64_t result;

  result = qword_10063C500;
  if (!qword_10063C500)
  {
    result = swift_getWitnessTable(&unk_10052A7E4, &type metadata for UploadedData);
    atomic_store(result, (unint64_t *)&qword_10063C500);
  }
  return result;
}

unint64_t sub_1003651A8()
{
  unint64_t result;

  result = qword_10063C520;
  if (!qword_10063C520)
  {
    result = swift_getWitnessTable(&unk_10052A7BC, &type metadata for UploadedData);
    atomic_store(result, (unint64_t *)&qword_10063C520);
  }
  return result;
}

unint64_t sub_1003651EC()
{
  unint64_t result;

  result = qword_10063C530;
  if (!qword_10063C530)
  {
    result = swift_getWitnessTable(&unk_100531688, &type metadata for IDVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C530);
  }
  return result;
}

unint64_t sub_100365230()
{
  unint64_t result;

  result = qword_10063C538;
  if (!qword_10063C538)
  {
    result = swift_getWitnessTable(&unk_100531660, &type metadata for IDVDataSource);
    atomic_store(result, (unint64_t *)&qword_10063C538);
  }
  return result;
}

unint64_t sub_100365274()
{
  unint64_t result;

  result = qword_10063C540;
  if (!qword_10063C540)
  {
    result = swift_getWitnessTable(&unk_1005290A4, &type metadata for ProofingDataContainer);
    atomic_store(result, (unint64_t *)&qword_10063C540);
  }
  return result;
}

unint64_t sub_1003652B8()
{
  unint64_t result;

  result = qword_10063C550;
  if (!qword_10063C550)
  {
    result = swift_getWitnessTable(&unk_100531638, &type metadata for IDVDataSource);
    atomic_store(result, (unint64_t *)&qword_10063C550);
  }
  return result;
}

unint64_t sub_1003652FC()
{
  unint64_t result;

  result = qword_10063C558;
  if (!qword_10063C558)
  {
    result = swift_getWitnessTable(&unk_10052907C, &type metadata for ProofingDataContainer);
    atomic_store(result, (unint64_t *)&qword_10063C558);
  }
  return result;
}

unint64_t sub_100365340()
{
  unint64_t result;

  result = qword_10063C568;
  if (!qword_10063C568)
  {
    result = swift_getWitnessTable(&unk_100531610, &type metadata for DUATaskType);
    atomic_store(result, (unint64_t *)&qword_10063C568);
  }
  return result;
}

unint64_t sub_100365384()
{
  unint64_t result;

  result = qword_10063C578;
  if (!qword_10063C578)
  {
    result = swift_getWitnessTable(&unk_1005315C0, &type metadata for ClaimValidityRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C578);
  }
  return result;
}

unint64_t sub_1003653C8()
{
  unint64_t result;

  result = qword_10063C588;
  if (!qword_10063C588)
  {
    result = swift_getWitnessTable(&unk_100531570, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C588);
  }
  return result;
}

unint64_t sub_10036540C()
{
  unint64_t result;

  result = qword_10063C598;
  if (!qword_10063C598)
  {
    result = swift_getWitnessTable(&unk_100531520, &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C598);
  }
  return result;
}

unint64_t sub_100365450()
{
  unint64_t result;

  result = qword_10063C5A8;
  if (!qword_10063C5A8)
  {
    result = swift_getWitnessTable(&unk_1005314D0, &type metadata for NonceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C5A8);
  }
  return result;
}

unint64_t sub_100365494()
{
  unint64_t result;

  result = qword_10063C5B8;
  if (!qword_10063C5B8)
  {
    result = swift_getWitnessTable(&unk_100531480, &type metadata for WorkflowRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C5B8);
  }
  return result;
}

unint64_t sub_1003654D8()
{
  unint64_t result;

  result = qword_10063C5D8;
  if (!qword_10063C5D8)
  {
    result = swift_getWitnessTable(&unk_100531458, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&qword_10063C5D8);
  }
  return result;
}

unint64_t sub_10036551C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C5E0;
  if (!qword_10063C5E0)
  {
    v1 = sub_100013E24(&qword_100632378);
    sub_1001846A0(&qword_1006367F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10063C5E0);
  }
  return result;
}

uint64_t sub_100365598(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000010055A670;
    if (a2 == 0x800000010055A670)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010055A670, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 6501752 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(6501752, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100365674(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C796170, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10036575C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;

  v3 = type metadata accessor for DIPError.Code(0);
  v32 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_10063CCC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_100368CC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FairPlayProvisioningInfo.CodingKeys, &type metadata for FairPlayProvisioningInfo.CodingKeys, v11, v9, v10);
  v12 = v1;
  if (!v1)
  {
    v29 = v3;
    v30 = v6;
    v35 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
    v14 = v13;
    v34 = 0;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
    v23 = v22;
    v12 = Data.init(base64Encoded:options:)(v15, v22, 0);
    v25 = v24;
    swift_bridgeObjectRelease(v23);
    if (v25 >> 60 != 15)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v5);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
      return v12;
    }
    swift_bridgeObjectRelease(v14);
    v33 = 0;
    v26 = type metadata accessor for DecodingError(0);
    v12 = swift_allocError(v26, &protocol witness table for DecodingError, 0, 0);
    v27 = sub_100099FFC(&qword_10063CCD8, &qword_10063CCC8, (uint64_t)&protocol conformance descriptor for KeyedDecodingContainer<A>);
    v28 = static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(&v33, v8, 0xD000000000000030, 0x800000010055A4E0, v5, v27);
    swift_willThrow(v28);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v5);
    v3 = v29;
  }
  v16 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v31, enum case for DIPError.Code.jsonDecodingFailed(_:), v3);
  swift_errorRetain(v12);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v18, v19, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010055A4B0, v12, v16, 0, v17, 0xD000000000000054, 0x8000000100559CF0, 0x6F72662874696E69, 0xEB00000000293A6DLL, 2114);
  swift_willThrow(v20);
  swift_errorRelease(v12);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  return v12;
}

uint64_t sub_100365AE8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x4874736575716572 && a2 == 0xED00007265646165)
  {
    v5 = 0xED00007265646165;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4874736575716572, 0xED00007265646165, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000010055A590;
    if (a2 == 0x800000010055A590)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010055A590, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010055A870)
  {
    v8 = 0x800000010055A870;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010055A870, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x800000010055A890;
    if (a2 == 0x800000010055A890)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010055A890, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6E6564496D616574 && a2 == 0xEE00726569666974)
  {
    v10 = 0xEE00726569666974;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564496D616574, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x6F54737365636361 && a2 == 0xEB000000006E656BLL)
  {
    v11 = 0xEB000000006E656BLL;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F54737365636361, 0xEB000000006E656BLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x800000010055A8B0)
  {
    v12 = 0x800000010055A8B0;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x800000010055A8B0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x800000010055A8D0;
    if (a2 == 0x800000010055A8D0)
      goto LABEL_47;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010055A8D0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000010055A8F0)
  {
    swift_bridgeObjectRelease(0x800000010055A8F0);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010055A8F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

_QWORD *sub_100365EB0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *result;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  int v57;
  int v58;
  unint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  _BYTE v144[7];
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  _DWORD v151[3];
  uint64_t v152;

  v107 = sub_100004828(&qword_10063C918);
  v5 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = UUID.init()(v10);
  UUID.uuidString.getter(v13);
  v152 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v15 = a1[3];
  v16 = a1[4];
  v109 = a1;
  sub_10000806C(a1, v15);
  v17 = sub_100367CE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RegisterTerminalRequest.CodingKeys, &type metadata for RegisterTerminalRequest.CodingKeys, v17, v15, v16);
  if (v2)
  {
    v111 = v2;
    v112 = 0;
    v113 = 0uLL;
    v20 = 0;
    v107 = 0;
    v108 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v114 = 0;
    v110 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0xE000000000000000;
  }
  else
  {
    v106 = v5;
    v102 = a2;
    LOBYTE(v115) = 0;
    v18 = sub_100363220();
    v19 = v107;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v126, &type metadata for RequestHeader, &v115, v107, &type metadata for RequestHeader, v18);
    v32 = v127;
    v101 = v126;
    v34 = v128;
    v33 = v129;
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease(v152);
    LOBYTE(v115) = 1;
    v35 = sub_100363264();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v126, &type metadata for AppleCredentials, &v115, v19, &type metadata for AppleCredentials, v35, v36);
    v98 = v34;
    v152 = v33;
    v100 = v32;
    v37 = v126;
    v38 = v129;
    v39 = v19;
    v40 = v130;
    LOBYTE(v126) = 2;
    *((_QWORD *)&v113 + 1) = v127;
    v114 = v128;
    v41 = *((_QWORD *)&v130 + 1);
    sub_10008F020(v37, v127, v128, v129, v130, *((uint64_t *)&v130 + 1));
    v42 = KeyedDecodingContainer.decode(_:forKey:)(&v126, v39);
    *(_QWORD *)&v113 = v37;
    v99 = v41;
    v43 = v42;
    LOBYTE(v126) = 3;
    v45 = v44;
    swift_bridgeObjectRetain(v44);
    v46 = KeyedDecodingContainer.decode(_:forKey:)(&v126, v107);
    v105 = v45;
    v96 = v46;
    LOBYTE(v126) = 4;
    v48 = v47;
    swift_bridgeObjectRetain(v47);
    v49 = KeyedDecodingContainer.decode(_:forKey:)(&v126, v107);
    v50 = v106;
    v104 = v48;
    v95 = v49;
    LOBYTE(v126) = 5;
    v52 = v51;
    swift_bridgeObjectRetain(v51);
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v126, v107);
    v103 = v52;
    v94 = v53;
    LOBYTE(v126) = 6;
    v55 = v54;
    v56 = swift_bridgeObjectRetain(v54);
    v57 = KeyedDecodingContainer.decode(_:forKey:)(&v126, v107, v56);
    v112 = v55;
    v58 = v57;
    LOBYTE(v115) = 7;
    v59 = sub_100367D2C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v126, &type metadata for FairPlayProvisioningInfo, &v115, v107, &type metadata for FairPlayProvisioningInfo, v59, v60);
    v111 = 0;
    v91 = v58;
    v92 = v43;
    v93 = v40;
    v62 = v126;
    v61 = v127;
    v150 = 8;
    v63 = v128;
    v110 = v129;
    v64.n128_f64[0] = sub_100367D70(v126, v127, v128, v129);
    v65 = v111;
    v66 = KeyedDecodingContainer.decode(_:forKey:)(&v150, v107, v64);
    v111 = v65;
    v108 = v63;
    if (!v65)
    {
      v70 = v66;
      v91 &= 1u;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v107);
      LODWORD(v107) = v70 & 1;
      *(_QWORD *)&v115 = v101;
      *((_QWORD *)&v115 + 1) = v100;
      *(_QWORD *)&v116 = v98;
      *((_QWORD *)&v116 + 1) = v152;
      v117 = v113;
      *(_QWORD *)&v118 = v114;
      *((_QWORD *)&v118 + 1) = v38;
      v97 = v38;
      *(_QWORD *)&v119 = v93;
      *((_QWORD *)&v119 + 1) = v99;
      v71 = v62;
      v73 = v104;
      v72 = v105;
      *(_QWORD *)&v120 = v92;
      *((_QWORD *)&v120 + 1) = v105;
      *(_QWORD *)&v121 = v96;
      *((_QWORD *)&v121 + 1) = v104;
      v74 = v103;
      *(_QWORD *)&v122 = v95;
      *((_QWORD *)&v122 + 1) = v103;
      v75 = v112;
      *(_QWORD *)&v123 = v94;
      *((_QWORD *)&v123 + 1) = v112;
      LOBYTE(v124) = v91;
      *((_QWORD *)&v124 + 1) = v71;
      *(_QWORD *)&v125[0] = v61;
      v90 = v71;
      v76 = v63;
      *((_QWORD *)&v125[0] + 1) = v63;
      v77 = v110;
      *(_QWORD *)&v125[1] = v110;
      BYTE8(v125[1]) = v107;
      sub_100367D9C(&v115);
      sub_1000B52B0(v71, v61, v76, v77);
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(v73);
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v75);
      v78 = v113;
      v79 = v114;
      v80 = v97;
      v81 = v99;
      sub_10008EF5C(v113, *((uint64_t *)&v113 + 1), v114, v97, v93, v99);
      v82 = v152;
      swift_bridgeObjectRelease(v152);
      v83 = v100;
      swift_bridgeObjectRelease(v100);
      _s8coreidvd24DigitalPresentmentHelperVwxx_0(v109);
      v126 = v101;
      v127 = v83;
      v128 = v98;
      v129 = v82;
      v130 = v78;
      v131 = v79;
      v132 = v80;
      v133 = v93;
      v134 = v81;
      v135 = v92;
      v136 = v105;
      v137 = v96;
      v138 = v104;
      v139 = v95;
      v140 = v103;
      v141 = v94;
      v142 = v112;
      v143 = v91;
      *(_DWORD *)&v144[3] = *(_DWORD *)((char *)v151 + 3);
      *(_DWORD *)v144 = v151[0];
      v145 = v90;
      v146 = v61;
      v147 = v108;
      v148 = v110;
      v149 = v107;
      result = sub_1002551E8(&v126);
      v84 = v124;
      v85 = v102;
      v102[8] = v123;
      v85[9] = v84;
      v85[10] = v125[0];
      *(_OWORD *)((char *)v85 + 169) = *(_OWORD *)((char *)v125 + 9);
      v86 = v120;
      v85[4] = v119;
      v85[5] = v86;
      v87 = v122;
      v85[6] = v121;
      v85[7] = v87;
      v88 = v116;
      *v85 = v115;
      v85[1] = v88;
      v89 = v118;
      v85[2] = v117;
      v85[3] = v89;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v107);
    v20 = v62;
    v107 = v61;
    sub_1000B52B0(v62, v61, v63, v110);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(v112);
    v67 = v38;
    v68 = v38;
    v22 = v93;
    v21 = v99;
    sub_10008EF5C(v113, *((uint64_t *)&v113 + 1), v114, v68, v93, v99);
    v69 = v152;
    swift_bridgeObjectRelease(v152);
    v27 = v100;
    swift_bridgeObjectRelease(v100);
    v24 = 1;
    v152 = v69;
    v23 = v67;
    v25 = 1;
    v26 = 1;
  }
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v109);
  swift_bridgeObjectRelease(v152);
  swift_bridgeObjectRelease(v27);
  sub_10008EF5C(v113, *((uint64_t *)&v113 + 1), v114, v23, v22, v21);
  if (v24)
    swift_bridgeObjectRelease(v105);
  v28 = v110;
  v29 = v107;
  v30 = v108;
  if (v25)
    swift_bridgeObjectRelease(v104);
  if (v26)
    swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v112);
  return (_QWORD *)sub_1000B52B0(v20, v29, v30, v28);
}

uint64_t sub_1003668B8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65736E6F70736572 && a2 == 0xEE00726564616548)
  {
    v5 = 0xEE00726564616548;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572, 0xEE00726564616548, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x45656D69746E7572 && a2 == 0xEC000000726F7272)
  {
    v7 = 0xEC000000726F7272;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45656D69746E7572, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000026 && a2 == 0x800000010055A6B0)
  {
    swift_bridgeObjectRelease(0x800000010055A6B0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x800000010055A6B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100366A44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[11];
  uint64_t v56;
  char v57;

  v53 = sub_100004828(a2);
  v10 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v54 = a1;
  sub_10000806C(a1, v13);
  v15 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v15, v13, v14);
  if (v5)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v54);
    swift_bridgeObjectRelease(0);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v16 = v10;
    v52 = a5;
    v57 = 0;
    v17 = sub_1001D98D0();
    v18 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v55, &type metadata for ResponseHeader, &v57, v53, &type metadata for ResponseHeader, v17);
    v19 = v55[1];
    v20 = v55[3];
    v47 = v55[2];
    v48 = v55[0];
    v21 = v55[5];
    v46 = v55[4];
    v22 = v55[7];
    v45 = v55[6];
    v23 = v55[9];
    v44 = v55[8];
    v24 = v56;
    v43 = v55[10];
    LOBYTE(v55[0]) = 1;
    swift_bridgeObjectRetain(v56);
    v51 = v19;
    swift_bridgeObjectRetain(v19);
    v50 = v20;
    swift_bridgeObjectRetain(v20);
    v49 = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v18);
    v26 = v25;
    v40 = v23;
    v41 = v22;
    v27 = v49;
    v28 = sub_100004828(&qword_1006368D0);
    v57 = 2;
    v29 = sub_10008F400((unint64_t *)&qword_1006322A8, &qword_1006368D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v30 = swift_bridgeObjectRetain(v26);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v55, v28, &v57, v53, v28, v29, v30);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v53);
    v31 = v55[0];
    v53 = v55[0];
    swift_bridgeObjectRetain(v55[0]);
    swift_bridgeObjectRelease(0);
    v32 = v51;
    swift_bridgeObjectRetain(v51);
    v33 = v50;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v27);
    v34 = v41;
    swift_bridgeObjectRetain(v41);
    v35 = v40;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v54);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v26);
    v37 = v24;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v33);
    result = swift_bridgeObjectRelease(v32);
    v39 = v52;
    *v52 = v48;
    v39[1] = v32;
    v39[2] = v47;
    v39[3] = v33;
    v39[4] = v46;
    v39[5] = v27;
    v39[6] = v45;
    v39[7] = v34;
    v39[8] = v44;
    v39[9] = v35;
    v39[10] = v43;
    v39[11] = v37;
    v39[12] = v42;
    v39[13] = v26;
    v39[14] = v53;
  }
  return result;
}

unint64_t sub_100366EDC()
{
  unint64_t result;

  result = qword_10063C5F0;
  if (!qword_10063C5F0)
  {
    result = swift_getWitnessTable(&unk_100531408, &type metadata for RegisterTerminalResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C5F0);
  }
  return result;
}

unint64_t sub_100366F20()
{
  unint64_t result;

  result = qword_10063C600;
  if (!qword_10063C600)
  {
    result = swift_getWitnessTable(&unk_1005313B8, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C600);
  }
  return result;
}

unint64_t sub_100366F64()
{
  unint64_t result;

  result = qword_10063C610;
  if (!qword_10063C610)
  {
    result = swift_getWitnessTable(&unk_100531368, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C610);
  }
  return result;
}

unint64_t sub_100366FA8()
{
  unint64_t result;

  result = qword_10063C628;
  if (!qword_10063C628)
  {
    result = swift_getWitnessTable(&unk_100531318, &type metadata for NonceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C628);
  }
  return result;
}

unint64_t sub_100366FEC()
{
  unint64_t result;

  result = qword_10063C638;
  if (!qword_10063C638)
  {
    result = swift_getWitnessTable(&unk_1005312C8, &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C638);
  }
  return result;
}

unint64_t sub_100367030()
{
  unint64_t result;

  result = qword_10063C648;
  if (!qword_10063C648)
  {
    result = swift_getWitnessTable(&unk_100531278, &type metadata for IdentityProofingActionNotificationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C648);
  }
  return result;
}

unint64_t sub_100367074()
{
  unint64_t result;

  result = qword_10063C660;
  if (!qword_10063C660)
  {
    result = swift_getWitnessTable(&unk_10052A340, &type metadata for ActionResult);
    atomic_store(result, (unint64_t *)&qword_10063C660);
  }
  return result;
}

_QWORD *sub_1003670B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v10 = a1[13];
  v12 = a1[14];
  v13 = a1[16];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

unint64_t sub_10036716C()
{
  unint64_t result;

  result = qword_10063C678;
  if (!qword_10063C678)
  {
    result = swift_getWitnessTable(&unk_10052A318, &type metadata for ActionResult);
    atomic_store(result, (unint64_t *)&qword_10063C678);
  }
  return result;
}

unint64_t sub_1003671B0()
{
  unint64_t result;

  result = qword_10063C688;
  if (!qword_10063C688)
  {
    result = swift_getWitnessTable(&unk_100531228, &type metadata for DataSharingAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C688);
  }
  return result;
}

unint64_t sub_1003671F4()
{
  unint64_t result;

  result = qword_10063C690;
  if (!qword_10063C690)
  {
    result = swift_getWitnessTable(&unk_100531200, &type metadata for ProviderWorkflowInfo);
    atomic_store(result, (unint64_t *)&qword_10063C690);
  }
  return result;
}

unint64_t sub_100367238()
{
  unint64_t result;

  result = qword_10063C6A8;
  if (!qword_10063C6A8)
  {
    result = swift_getWitnessTable(&unk_10052B1F4, &type metadata for DataSharingArtifact);
    atomic_store(result, (unint64_t *)&qword_10063C6A8);
  }
  return result;
}

unint64_t sub_10036727C()
{
  unint64_t result;

  result = qword_10063C6B8;
  if (!qword_10063C6B8)
  {
    result = swift_getWitnessTable(&unk_1005311D8, &type metadata for ProviderWorkflowInfo);
    atomic_store(result, (unint64_t *)&qword_10063C6B8);
  }
  return result;
}

unint64_t sub_1003672C0()
{
  unint64_t result;

  result = qword_10063C6C8;
  if (!qword_10063C6C8)
  {
    result = swift_getWitnessTable(&unk_10052B1CC, &type metadata for DataSharingArtifact);
    atomic_store(result, (unint64_t *)&qword_10063C6C8);
  }
  return result;
}

unint64_t sub_100367304()
{
  unint64_t result;

  result = qword_10063C6D8;
  if (!qword_10063C6D8)
  {
    result = swift_getWitnessTable(&unk_100531188, &type metadata for IdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C6D8);
  }
  return result;
}

unint64_t sub_100367348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C6F0;
  if (!qword_10063C6F0)
  {
    v1 = sub_100013E24(&qword_10063C6E8);
    sub_100004790(&qword_10063C6F8, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization, (uint64_t)&unk_100534CD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C6F0);
  }
  return result;
}

unint64_t sub_1003673C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C708;
  if (!qword_10063C708)
  {
    v1 = sub_100013E24(&qword_10063C700);
    sub_100099FFC(&qword_10063C710, &qword_100634158, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C708);
  }
  return result;
}

unint64_t sub_100367440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C720;
  if (!qword_10063C720)
  {
    v1 = sub_100013E24(&qword_10063C718);
    sub_100099FFC(&qword_10063C728, &qword_100636540, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C720);
  }
  return result;
}

unint64_t sub_1003674BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C740;
  if (!qword_10063C740)
  {
    v1 = sub_100013E24(&qword_10063C6E8);
    sub_100004790(&qword_10063C748, type metadata accessor for VerifiedClaimPresentmentWithDSDAuthorization, (uint64_t)&unk_100534CA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C740);
  }
  return result;
}

unint64_t sub_100367538()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C750;
  if (!qword_10063C750)
  {
    v1 = sub_100013E24(&qword_10063C700);
    sub_100099FFC(&qword_10063C758, &qword_100634158, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C750);
  }
  return result;
}

unint64_t sub_1003675B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C760;
  if (!qword_10063C760)
  {
    v1 = sub_100013E24(&qword_10063C718);
    sub_100099FFC(&qword_10063C768, &qword_100636540, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C760);
  }
  return result;
}

unint64_t sub_100367630()
{
  unint64_t result;

  result = qword_10063C778;
  if (!qword_10063C778)
  {
    result = swift_getWitnessTable(&unk_100531138, &type metadata for SharingIdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C778);
  }
  return result;
}

unint64_t sub_100367674()
{
  unint64_t result;

  result = qword_10063C780;
  if (!qword_10063C780)
  {
    result = swift_getWitnessTable(&unk_10052B104, &type metadata for DeviceAssessmentTrainingSignalId);
    atomic_store(result, (unint64_t *)&qword_10063C780);
  }
  return result;
}

unint64_t sub_1003676B8()
{
  unint64_t result;

  result = qword_10063C798;
  if (!qword_10063C798)
  {
    result = swift_getWitnessTable(&unk_10052B0DC, &type metadata for DeviceAssessmentTrainingSignalId);
    atomic_store(result, (unint64_t *)&qword_10063C798);
  }
  return result;
}

unint64_t sub_1003676FC()
{
  unint64_t result;

  result = qword_10063C7A8;
  if (!qword_10063C7A8)
  {
    result = swift_getWitnessTable(&unk_1005310E8, &type metadata for SharingRegistrationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C7A8);
  }
  return result;
}

unint64_t sub_100367740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C7B8;
  if (!qword_10063C7B8)
  {
    v1 = sub_100013E24(&qword_10063C7B0);
    sub_100004790(&qword_10063C7C0, type metadata accessor for VerifiedClaimPresentment, (uint64_t)&unk_100534C80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C7B8);
  }
  return result;
}

unint64_t sub_1003677BC()
{
  unint64_t result;

  result = qword_10063C7C8;
  if (!qword_10063C7C8)
  {
    result = swift_getWitnessTable(&unk_100527A4C, &type metadata for IDSPACData);
    atomic_store(result, (unint64_t *)&qword_10063C7C8);
  }
  return result;
}

unint64_t sub_100367800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C7F0;
  if (!qword_10063C7F0)
  {
    v1 = sub_100013E24(&qword_10063C7B0);
    sub_100004790(&qword_10063C7F8, type metadata accessor for VerifiedClaimPresentment, (uint64_t)&unk_100534C58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C7F0);
  }
  return result;
}

unint64_t sub_10036787C()
{
  unint64_t result;

  result = qword_10063C800;
  if (!qword_10063C800)
  {
    result = swift_getWitnessTable(&unk_100527A24, &type metadata for IDSPACData);
    atomic_store(result, (unint64_t *)&qword_10063C800);
  }
  return result;
}

unint64_t sub_1003678C0()
{
  unint64_t result;

  result = qword_10063C820;
  if (!qword_10063C820)
  {
    result = swift_getWitnessTable(&unk_100531098, &type metadata for IdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C820);
  }
  return result;
}

unint64_t sub_100367904()
{
  unint64_t result;

  result = qword_10063C838;
  if (!qword_10063C838)
  {
    result = swift_getWitnessTable(&unk_100527AC4, &type metadata for IdVDataElement);
    atomic_store(result, (unint64_t *)&qword_10063C838);
  }
  return result;
}

unint64_t sub_100367948()
{
  unint64_t result;

  result = qword_10063C850;
  if (!qword_10063C850)
  {
    result = swift_getWitnessTable(&unk_100527A9C, &type metadata for IdVDataElement);
    atomic_store(result, (unint64_t *)&qword_10063C850);
  }
  return result;
}

unint64_t sub_10036798C()
{
  unint64_t result;

  result = qword_10063C860;
  if (!qword_10063C860)
  {
    result = swift_getWitnessTable(&unk_100531048, &type metadata for IdentityProofingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C860);
  }
  return result;
}

unint64_t sub_1003679D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C870;
  if (!qword_10063C870)
  {
    v1 = sub_100013E24(&qword_10063C868);
    sub_100099FFC(&qword_10063C878, &qword_100636740, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C870);
  }
  return result;
}

unint64_t sub_100367A4C()
{
  unint64_t result;

  result = qword_10063C890;
  if (!qword_10063C890)
  {
    result = swift_getWitnessTable(&unk_10052B26C, &type metadata for DataNodeProof);
    atomic_store(result, (unint64_t *)&qword_10063C890);
  }
  return result;
}

unint64_t sub_100367A90()
{
  unint64_t result;

  result = qword_10063C8A8;
  if (!qword_10063C8A8)
  {
    result = swift_getWitnessTable(&unk_10052B2BC, &type metadata for AppleIdAttributeProof);
    atomic_store(result, (unint64_t *)&qword_10063C8A8);
  }
  return result;
}

unint64_t sub_100367AD4()
{
  unint64_t result;

  result = qword_10063C8B8;
  if (!qword_10063C8B8)
  {
    result = swift_getWitnessTable(&unk_100531020, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&qword_10063C8B8);
  }
  return result;
}

unint64_t sub_100367B18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C8C8;
  if (!qword_10063C8C8)
  {
    v1 = sub_100013E24(&qword_10063C868);
    sub_100099FFC(&qword_10063C8D0, &qword_100636740, (uint64_t)&protocol conformance descriptor for JWSSignedJSON<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063C8C8);
  }
  return result;
}

unint64_t sub_100367B94()
{
  unint64_t result;

  result = qword_10063C8E0;
  if (!qword_10063C8E0)
  {
    result = swift_getWitnessTable(&unk_10052B244, &type metadata for DataNodeProof);
    atomic_store(result, (unint64_t *)&qword_10063C8E0);
  }
  return result;
}

unint64_t sub_100367BD8()
{
  unint64_t result;

  result = qword_10063C8F0;
  if (!qword_10063C8F0)
  {
    result = swift_getWitnessTable(&unk_10052B294, &type metadata for AppleIdAttributeProof);
    atomic_store(result, (unint64_t *)&qword_10063C8F0);
  }
  return result;
}

unint64_t sub_100367C1C()
{
  unint64_t result;

  result = qword_10063C900;
  if (!qword_10063C900)
  {
    result = swift_getWitnessTable(&unk_100530FD0, &type metadata for TiberiusIdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C900);
  }
  return result;
}

uint64_t sub_100367C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TiberiusWrappedAssessment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100367CA4()
{
  unint64_t result;

  result = qword_10063C910;
  if (!qword_10063C910)
  {
    result = swift_getWitnessTable(&unk_100530F80, &type metadata for InputValidationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C910);
  }
  return result;
}

unint64_t sub_100367CE8()
{
  unint64_t result;

  result = qword_10063C920;
  if (!qword_10063C920)
  {
    result = swift_getWitnessTable(&unk_100530F30, &type metadata for RegisterTerminalRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C920);
  }
  return result;
}

unint64_t sub_100367D2C()
{
  unint64_t result;

  result = qword_10063C928;
  if (!qword_10063C928)
  {
    result = swift_getWitnessTable(&unk_10052AA3C, &type metadata for FairPlayProvisioningInfo);
    atomic_store(result, (unint64_t *)&qword_10063C928);
  }
  return result;
}

double sub_100367D70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_100022948(a1, a2);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

_QWORD *sub_100367D9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[11];
  v12 = a1[13];
  v13 = a1[15];
  v10 = a1[17];
  v16 = a1[20];
  v17 = a1[19];
  v14 = a1[22];
  v15 = a1[21];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_10008F020(v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_100367D70(v17, v16, v15, v14);
  return a1;
}

unint64_t sub_100367E78()
{
  unint64_t result;

  result = qword_10063C940;
  if (!qword_10063C940)
  {
    result = swift_getWitnessTable(&unk_10052AA14, &type metadata for FairPlayProvisioningInfo);
    atomic_store(result, (unint64_t *)&qword_10063C940);
  }
  return result;
}

unint64_t sub_100367EBC()
{
  unint64_t result;

  result = qword_10063C950;
  if (!qword_10063C950)
  {
    result = swift_getWitnessTable(&unk_100530EE0, &type metadata for OLDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C950);
  }
  return result;
}

unint64_t sub_100367F00()
{
  unint64_t result;

  result = qword_10063C968;
  if (!qword_10063C968)
  {
    result = swift_getWitnessTable(&unk_100530E90, &type metadata for IdentityProofingStaticAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C968);
  }
  return result;
}

unint64_t sub_100367F44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C978;
  if (!qword_10063C978)
  {
    v1 = sub_100013E24(&qword_10063C970);
    sub_100367FB0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C978);
  }
  return result;
}

unint64_t sub_100367FB0()
{
  unint64_t result;

  result = qword_10063C980;
  if (!qword_10063C980)
  {
    result = swift_getWitnessTable(&unk_100530E68, &type metadata for IdentityProofingImageAsset);
    atomic_store(result, (unint64_t *)&qword_10063C980);
  }
  return result;
}

unint64_t sub_100367FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063C990;
  if (!qword_10063C990)
  {
    v1 = sub_100013E24(&qword_10063C970);
    sub_100368060();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063C990);
  }
  return result;
}

unint64_t sub_100368060()
{
  unint64_t result;

  result = qword_10063C998;
  if (!qword_10063C998)
  {
    result = swift_getWitnessTable(&unk_100530E40, &type metadata for IdentityProofingImageAsset);
    atomic_store(result, (unint64_t *)&qword_10063C998);
  }
  return result;
}

unint64_t sub_1003680A4()
{
  unint64_t result;

  result = qword_10063C9A8;
  if (!qword_10063C9A8)
  {
    result = swift_getWitnessTable(&unk_100530DF0, &type metadata for SharingRegistrationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C9A8);
  }
  return result;
}

unint64_t sub_1003680E8()
{
  unint64_t result;

  result = qword_10063C9C0;
  if (!qword_10063C9C0)
  {
    result = swift_getWitnessTable(&unk_100530DA0, &type metadata for InputValidationRequestV3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C9C0);
  }
  return result;
}

unint64_t sub_10036812C()
{
  unint64_t result;

  result = qword_10063C9F0;
  if (!qword_10063C9F0)
  {
    result = swift_getWitnessTable(&unk_100530D50, &type metadata for InputValidationRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063C9F0);
  }
  return result;
}

unint64_t sub_100368170()
{
  unint64_t result;

  result = qword_10063CA08;
  if (!qword_10063CA08)
  {
    result = swift_getWitnessTable(&unk_100530D00, &type metadata for AppleIdAttributeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA08);
  }
  return result;
}

unint64_t sub_1003681B4()
{
  unint64_t result;

  result = qword_10063CA20;
  if (!qword_10063CA20)
  {
    result = swift_getWitnessTable(&unk_100530CB0, &type metadata for DataNodeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA20);
  }
  return result;
}

unint64_t sub_1003681F8()
{
  unint64_t result;

  result = qword_10063CA40;
  if (!qword_10063CA40)
  {
    result = swift_getWitnessTable(&unk_100530C60, &type metadata for DataSharingArtifact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA40);
  }
  return result;
}

unint64_t sub_10036823C()
{
  unint64_t result;

  result = qword_10063CA50;
  if (!qword_10063CA50)
  {
    result = swift_getWitnessTable(&unk_100527844, &type metadata for ArtifactId);
    atomic_store(result, (unint64_t *)&qword_10063CA50);
  }
  return result;
}

unint64_t sub_100368280()
{
  unint64_t result;

  result = qword_10063CA60;
  if (!qword_10063CA60)
  {
    result = swift_getWitnessTable(&unk_100530C10, &type metadata for IdentityStatusAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA60);
  }
  return result;
}

_QWORD *sub_1003682C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[9];
  v8 = a1[11];
  v9 = a1[13];
  swift_bridgeObjectRetain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

unint64_t sub_100368364()
{
  unint64_t result;

  result = qword_10063CA78;
  if (!qword_10063CA78)
  {
    result = swift_getWitnessTable(&unk_100530BC0, &type metadata for SharingCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA78);
  }
  return result;
}

unint64_t sub_1003683A8()
{
  unint64_t result;

  result = qword_10063CA90;
  if (!qword_10063CA90)
  {
    result = swift_getWitnessTable(&unk_100530B70, &type metadata for DeviceAssessmentTrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CA90);
  }
  return result;
}

unint64_t sub_1003683EC()
{
  unint64_t result;

  result = qword_10063CAA8;
  if (!qword_10063CAA8)
  {
    result = swift_getWitnessTable(&unk_100530B20, &type metadata for IdentitySharingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CAA8);
  }
  return result;
}

_QWORD *sub_100368430(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  v10 = a1[17];
  swift_bridgeObjectRetain(a1[19]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

unint64_t sub_1003684E4()
{
  unint64_t result;

  result = qword_10063CAB8;
  if (!qword_10063CAB8)
  {
    result = swift_getWitnessTable(&unk_100527F4C, &type metadata for ResponseHeader);
    atomic_store(result, (unint64_t *)&qword_10063CAB8);
  }
  return result;
}

unint64_t sub_100368528()
{
  unint64_t result;

  result = qword_10063CAC8;
  if (!qword_10063CAC8)
  {
    result = swift_getWitnessTable(&unk_100530AD0, &type metadata for IQMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CAC8);
  }
  return result;
}

unint64_t sub_10036856C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CAD8;
  if (!qword_10063CAD8)
  {
    v1 = sub_100013E24(&qword_10063CAD0);
    sub_100004790(&qword_10063CAE0, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CAD8);
  }
  return result;
}

unint64_t sub_1003685E8()
{
  unint64_t result;

  result = qword_10063CAE8;
  if (!qword_10063CAE8)
  {
    result = swift_getWitnessTable(&unk_100530AA8, &type metadata for FuzzyMatchData);
    atomic_store(result, (unint64_t *)&qword_10063CAE8);
  }
  return result;
}

_QWORD *sub_10036862C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[22];
  v3 = a1[23];
  v4 = a1[29];
  v5 = a1[31];
  v6 = a1[32];
  v7 = a1[33];
  v8 = a1[34];
  v9 = a1[35];
  v10 = a1[50];
  v12 = a1[52];
  v13 = a1[54];
  swift_bridgeObjectRetain(a1[59]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

_QWORD *sub_1003686F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[23];
  v3 = a1[29];
  v4 = a1[31];
  v5 = a1[32];
  v6 = a1[33];
  v7 = a1[34];
  v8 = a1[35];
  v9 = a1[50];
  v10 = a1[52];
  v12 = a1[54];
  v13 = a1[59];
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

unint64_t sub_1003687C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CB18;
  if (!qword_10063CB18)
  {
    v1 = sub_100013E24(&qword_10063CAD0);
    sub_100004790(&qword_10063CB20, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CB18);
  }
  return result;
}

unint64_t sub_100368844()
{
  unint64_t result;

  result = qword_10063CB30;
  if (!qword_10063CB30)
  {
    result = swift_getWitnessTable(&unk_100530A80, &type metadata for FuzzyMatchData);
    atomic_store(result, (unint64_t *)&qword_10063CB30);
  }
  return result;
}

unint64_t sub_100368888()
{
  unint64_t result;

  result = qword_10063CB50;
  if (!qword_10063CB50)
  {
    result = swift_getWitnessTable(&unk_100530A30, &type metadata for MetricsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CB50);
  }
  return result;
}

uint64_t sub_1003688CC()
{
  return sub_1000A1F98(&qword_10063CB58, &qword_100634110, (void (*)(void))sub_1003688F0, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_1003688F0()
{
  unint64_t result;

  result = qword_10063CB60;
  if (!qword_10063CB60)
  {
    result = swift_getWitnessTable(&unk_10052B048, &type metadata for IQMetrics);
    atomic_store(result, (unint64_t *)&qword_10063CB60);
  }
  return result;
}

uint64_t sub_100368934()
{
  return sub_1000A1F98(&qword_10063CB80, &qword_100634110, (void (*)(void))sub_100368958, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_100368958()
{
  unint64_t result;

  result = qword_10063CB88;
  if (!qword_10063CB88)
  {
    result = swift_getWitnessTable(&unk_10052B020, &type metadata for IQMetrics);
    atomic_store(result, (unint64_t *)&qword_10063CB88);
  }
  return result;
}

unint64_t sub_10036899C()
{
  unint64_t result;

  result = qword_10063CBA0;
  if (!qword_10063CBA0)
  {
    result = swift_getWitnessTable(&unk_1005309E0, &type metadata for KeyAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CBA0);
  }
  return result;
}

unint64_t sub_1003689E0()
{
  unint64_t result;

  result = qword_10063CBB8;
  if (!qword_10063CBB8)
  {
    result = swift_getWitnessTable(&unk_100530990, &type metadata for DocScanConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CBB8);
  }
  return result;
}

unint64_t sub_100368A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CBC8;
  if (!qword_10063CBC8)
  {
    v1 = sub_100013E24(&qword_10063CBC0);
    sub_100004790(&qword_10063CBD0, (uint64_t (*)(uint64_t))&type metadata accessor for PDF417ParsingConfig, (uint64_t)&protocol conformance descriptor for PDF417ParsingConfig);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CBC8);
  }
  return result;
}

unint64_t sub_100368AA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CBE8;
  if (!qword_10063CBE8)
  {
    v1 = sub_100013E24(&qword_10063CBC0);
    sub_100004790(&qword_10063CBF0, (uint64_t (*)(uint64_t))&type metadata accessor for PDF417ParsingConfig, (uint64_t)&protocol conformance descriptor for PDF417ParsingConfig);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CBE8);
  }
  return result;
}

unint64_t sub_100368B1C()
{
  unint64_t result;

  result = qword_10063CC10;
  if (!qword_10063CC10)
  {
    result = swift_getWitnessTable(&unk_100530940, &type metadata for AppleCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CC10);
  }
  return result;
}

unint64_t sub_100368B60()
{
  unint64_t result;

  result = qword_10063CC30;
  if (!qword_10063CC30)
  {
    result = swift_getWitnessTable(&unk_1005308F0, &type metadata for IdentityProofingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CC30);
  }
  return result;
}

unint64_t sub_100368BA4()
{
  unint64_t result;

  result = qword_10063CC60;
  if (!qword_10063CC60)
  {
    result = swift_getWitnessTable(&unk_1005308A0, &type metadata for SharingRegistrationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CC60);
  }
  return result;
}

unint64_t sub_100368BE8()
{
  unint64_t result;

  result = qword_10063CC88;
  if (!qword_10063CC88)
  {
    result = swift_getWitnessTable(&unk_100530850, &type metadata for IdentityProofingResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CC88);
  }
  return result;
}

_QWORD *sub_100368C2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  swift_bridgeObjectRetain(a1[17]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

unint64_t sub_100368CC0()
{
  unint64_t result;

  result = qword_10063CCD0;
  if (!qword_10063CCD0)
  {
    result = swift_getWitnessTable(&unk_100530800, &type metadata for FairPlayProvisioningInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CCD0);
  }
  return result;
}

unint64_t sub_100368D04()
{
  unint64_t result;

  result = qword_10063CCF0;
  if (!qword_10063CCF0)
  {
    result = swift_getWitnessTable(&unk_1005307B0, &type metadata for UploadedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CCF0);
  }
  return result;
}

unint64_t sub_100368D48()
{
  unint64_t result;

  result = qword_10063CCF8;
  if (!qword_10063CCF8)
  {
    result = swift_getWitnessTable(&unk_100530788, &type metadata for UploadedDataInfo);
    atomic_store(result, (unint64_t *)&qword_10063CCF8);
  }
  return result;
}

unint64_t sub_100368D8C()
{
  unint64_t result;

  result = qword_10063CD08;
  if (!qword_10063CD08)
  {
    result = swift_getWitnessTable(&unk_100530760, &type metadata for UploadedDataInfo);
    atomic_store(result, (unint64_t *)&qword_10063CD08);
  }
  return result;
}

unint64_t sub_100368DD0()
{
  unint64_t result;

  result = qword_10063CD18;
  if (!qword_10063CD18)
  {
    result = swift_getWitnessTable(&unk_100530710, &type metadata for CASDAttestationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CD18);
  }
  return result;
}

unint64_t sub_100368E14()
{
  unint64_t result;

  result = qword_10063CD38;
  if (!qword_10063CD38)
  {
    result = swift_getWitnessTable(&unk_10052A688, &type metadata for IdentityConfigurationSubType);
    atomic_store(result, (unint64_t *)&qword_10063CD38);
  }
  return result;
}

unint64_t sub_100368E58()
{
  unint64_t result;

  result = qword_10063CD48;
  if (!qword_10063CD48)
  {
    result = swift_getWitnessTable(&unk_1005306C0, &type metadata for IdentityProofingPendingActionsContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CD48);
  }
  return result;
}

unint64_t sub_100368E9C()
{
  unint64_t result;

  result = qword_10063CD50;
  if (!qword_10063CD50)
  {
    result = swift_getWitnessTable(&unk_10052A660, &type metadata for IdentityConfigurationSubType);
    atomic_store(result, (unint64_t *)&qword_10063CD50);
  }
  return result;
}

unint64_t sub_100368EE0()
{
  unint64_t result;

  result = qword_10063CD60;
  if (!qword_10063CD60)
  {
    result = swift_getWitnessTable(&unk_10052A638, &type metadata for IdentityConfigurationSubType);
    atomic_store(result, (unint64_t *)&qword_10063CD60);
  }
  return result;
}

unint64_t sub_100368F24()
{
  unint64_t result;

  result = qword_10063CD70;
  if (!qword_10063CD70)
  {
    result = swift_getWitnessTable(&unk_100530670, &type metadata for PendingActionLivenessVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CD70);
  }
  return result;
}

unint64_t sub_100368F68()
{
  unint64_t result;

  result = qword_10063CD88;
  if (!qword_10063CD88)
  {
    result = swift_getWitnessTable(&unk_100530620, &type metadata for DisplayMessageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CD88);
  }
  return result;
}

unint64_t sub_100368FAC()
{
  unint64_t result;

  result = qword_10063CD90;
  if (!qword_10063CD90)
  {
    result = swift_getWitnessTable(&unk_10052A520, &type metadata for DisplayMessageActionButton);
    atomic_store(result, (unint64_t *)&qword_10063CD90);
  }
  return result;
}

uint64_t sub_100368FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t sub_100369024()
{
  unint64_t result;

  result = qword_10063CDA8;
  if (!qword_10063CDA8)
  {
    result = swift_getWitnessTable(&unk_10052A4F8, &type metadata for DisplayMessageActionButton);
    atomic_store(result, (unint64_t *)&qword_10063CDA8);
  }
  return result;
}

unint64_t sub_100369068()
{
  unint64_t result;

  result = qword_10063CDB8;
  if (!qword_10063CDB8)
  {
    result = swift_getWitnessTable(&unk_1005305D0, &type metadata for DisplayMessageActionButton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CDB8);
  }
  return result;
}

unint64_t sub_1003690AC()
{
  unint64_t result;

  result = qword_10063CDD0;
  if (!qword_10063CDD0)
  {
    result = swift_getWitnessTable(&unk_100530580, &type metadata for ActionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CDD0);
  }
  return result;
}

unint64_t sub_1003690F0()
{
  unint64_t result;

  result = qword_10063CDF8;
  if (!qword_10063CDF8)
  {
    result = swift_getWitnessTable(&unk_100530530, &type metadata for DisplayNotificationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CDF8);
  }
  return result;
}

unint64_t sub_100369134()
{
  unint64_t result;

  result = qword_10063CE10;
  if (!qword_10063CE10)
  {
    result = swift_getWitnessTable(&unk_1005304E0, &type metadata for DisplayMessageContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CE10);
  }
  return result;
}

unint64_t sub_100369178()
{
  unint64_t result;

  result = qword_10063CE28;
  if (!qword_10063CE28)
  {
    result = swift_getWitnessTable(&unk_100530490, &type metadata for PendingActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CE28);
  }
  return result;
}

uint64_t sub_1003691BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1003691F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != 2)
  {
    sub_1003691BC(result, a2, a3, a4);
    return sub_1003691BC(a5, a6, a7, a8);
  }
  return result;
}

unint64_t sub_100369240()
{
  unint64_t result;

  result = qword_10063CE30;
  if (!qword_10063CE30)
  {
    result = swift_getWitnessTable(&unk_10052A570, &type metadata for DisplayMessageAction);
    atomic_store(result, (unint64_t *)&qword_10063CE30);
  }
  return result;
}

unint64_t sub_100369284()
{
  unint64_t result;

  result = qword_10063CE38;
  if (!qword_10063CE38)
  {
    result = swift_getWitnessTable(&unk_10052A430, &type metadata for DisplayMessageContext);
    atomic_store(result, (unint64_t *)&qword_10063CE38);
  }
  return result;
}

unint64_t sub_1003692C8()
{
  unint64_t result;

  result = qword_10063CE40;
  if (!qword_10063CE40)
  {
    result = swift_getWitnessTable(&unk_10052A480, &type metadata for DisplayNotificationContext);
    atomic_store(result, (unint64_t *)&qword_10063CE40);
  }
  return result;
}

unint64_t sub_10036930C()
{
  unint64_t result;

  result = qword_10063CE48;
  if (!qword_10063CE48)
  {
    result = swift_getWitnessTable(&unk_100528F64, &type metadata for ExecuteWorkflowType);
    atomic_store(result, (unint64_t *)&qword_10063CE48);
  }
  return result;
}

unint64_t sub_100369350()
{
  unint64_t result;

  result = qword_10063CE50;
  if (!qword_10063CE50)
  {
    result = swift_getWitnessTable(&unk_100530468, &type metadata for IdentityProvisioningContext);
    atomic_store(result, (unint64_t *)&qword_10063CE50);
  }
  return result;
}

unint64_t sub_100369394()
{
  unint64_t result;

  result = qword_10063CE58;
  if (!qword_10063CE58)
  {
    result = swift_getWitnessTable(&unk_10052A5C0, &type metadata for PendingActionLivenessVersions);
    atomic_store(result, (unint64_t *)&qword_10063CE58);
  }
  return result;
}

unint64_t sub_1003693D8()
{
  unint64_t result;

  result = qword_10063CE68;
  if (!qword_10063CE68)
  {
    result = swift_getWitnessTable(&unk_10052A548, &type metadata for DisplayMessageAction);
    atomic_store(result, (unint64_t *)&qword_10063CE68);
  }
  return result;
}

unint64_t sub_10036941C()
{
  unint64_t result;

  result = qword_10063CE70;
  if (!qword_10063CE70)
  {
    result = swift_getWitnessTable(&unk_10052A408, &type metadata for DisplayMessageContext);
    atomic_store(result, (unint64_t *)&qword_10063CE70);
  }
  return result;
}

unint64_t sub_100369460()
{
  unint64_t result;

  result = qword_10063CE78;
  if (!qword_10063CE78)
  {
    result = swift_getWitnessTable(&unk_10052A458, &type metadata for DisplayNotificationContext);
    atomic_store(result, (unint64_t *)&qword_10063CE78);
  }
  return result;
}

unint64_t sub_1003694A4()
{
  unint64_t result;

  result = qword_10063CE88;
  if (!qword_10063CE88)
  {
    result = swift_getWitnessTable(&unk_100528F3C, &type metadata for ExecuteWorkflowType);
    atomic_store(result, (unint64_t *)&qword_10063CE88);
  }
  return result;
}

unint64_t sub_1003694E8()
{
  unint64_t result;

  result = qword_10063CE90;
  if (!qword_10063CE90)
  {
    result = swift_getWitnessTable(&unk_100530440, &type metadata for IdentityProvisioningContext);
    atomic_store(result, (unint64_t *)&qword_10063CE90);
  }
  return result;
}

unint64_t sub_10036952C()
{
  unint64_t result;

  result = qword_10063CE98;
  if (!qword_10063CE98)
  {
    result = swift_getWitnessTable(&unk_10052A598, &type metadata for PendingActionLivenessVersions);
    atomic_store(result, (unint64_t *)&qword_10063CE98);
  }
  return result;
}

unint64_t sub_100369570()
{
  unint64_t result;

  result = qword_10063CEA0;
  if (!qword_10063CEA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IQModel, &type metadata for IQModel);
    atomic_store(result, (unint64_t *)&qword_10063CEA0);
  }
  return result;
}

unint64_t sub_1003695B4()
{
  unint64_t result;

  result = qword_10063CEB8;
  if (!qword_10063CEB8)
  {
    result = swift_getWitnessTable(&unk_1005303F0, &type metadata for ActionResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CEB8);
  }
  return result;
}

unint64_t sub_1003695F8()
{
  unint64_t result;

  result = qword_10063CEC0;
  if (!qword_10063CEC0)
  {
    result = swift_getWitnessTable(&unk_10052A2F0, &type metadata for ActionContext);
    atomic_store(result, (unint64_t *)&qword_10063CEC0);
  }
  return result;
}

uint64_t sub_10036963C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (result != 1)
  {
    v3 = result;
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(v3);
  }
  return result;
}

uint64_t sub_100369670(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

unint64_t sub_1003696A0()
{
  unint64_t result;

  result = qword_10063CED8;
  if (!qword_10063CED8)
  {
    result = swift_getWitnessTable(&unk_10052A2C8, &type metadata for ActionContext);
    atomic_store(result, (unint64_t *)&qword_10063CED8);
  }
  return result;
}

unint64_t sub_1003696E4()
{
  unint64_t result;

  result = qword_10063CEE8;
  if (!qword_10063CEE8)
  {
    result = swift_getWitnessTable(&unk_1005303A0, &type metadata for ActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CEE8);
  }
  return result;
}

unint64_t sub_100369728()
{
  unint64_t result;

  result = qword_10063CF10;
  if (!qword_10063CF10)
  {
    result = swift_getWitnessTable(&unk_100530350, &type metadata for IdentityProofingStaticTC.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CF10);
  }
  return result;
}

unint64_t sub_10036976C()
{
  unint64_t result;

  result = qword_10063CF28;
  if (!qword_10063CF28)
  {
    result = swift_getWitnessTable(&unk_100530300, &type metadata for IdentityProofingPendingActionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CF28);
  }
  return result;
}

unint64_t sub_1003697B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CF38;
  if (!qword_10063CF38)
  {
    v1 = sub_100013E24(&qword_10063CF30);
    sub_100004790(&qword_10063CF40, type metadata accessor for ActionRequest, (uint64_t)&unk_10052A4D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CF38);
  }
  return result;
}

unint64_t sub_10036982C()
{
  unint64_t result;

  result = qword_10063CF48;
  if (!qword_10063CF48)
  {
    result = swift_getWitnessTable(&unk_10052A610, &type metadata for IdentityProofingPendingActionsContext);
    atomic_store(result, (unint64_t *)&qword_10063CF48);
  }
  return result;
}

uint64_t sub_100369870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRetain(a3);
  return result;
}

_QWORD *sub_100369884(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[16];
  v9 = a1[17];
  v10 = a1[18];
  v12 = a1[19];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_100369870(v9, v10, v12);
  return a1;
}

unint64_t sub_100369940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063CF58;
  if (!qword_10063CF58)
  {
    v1 = sub_100013E24(&qword_10063CF30);
    sub_100004790(&qword_10063CF60, type metadata accessor for ActionRequest, (uint64_t)&unk_10052A4A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063CF58);
  }
  return result;
}

unint64_t sub_1003699BC()
{
  unint64_t result;

  result = qword_10063CF70;
  if (!qword_10063CF70)
  {
    result = swift_getWitnessTable(&unk_10052A5E8, &type metadata for IdentityProofingPendingActionsContext);
    atomic_store(result, (unint64_t *)&qword_10063CF70);
  }
  return result;
}

unint64_t sub_100369A00()
{
  unint64_t result;

  result = qword_10063CF80;
  if (!qword_10063CF80)
  {
    result = swift_getWitnessTable(&unk_1005302B0, &type metadata for TiberiusWrappedAssessment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CF80);
  }
  return result;
}

unint64_t sub_100369A44()
{
  unint64_t result;

  result = qword_10063CFA8;
  if (!qword_10063CFA8)
  {
    result = swift_getWitnessTable(&unk_100530260, &type metadata for LivenessDataV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CFA8);
  }
  return result;
}

unint64_t sub_100369A88()
{
  unint64_t result;

  result = qword_10063CFB0;
  if (!qword_10063CFB0)
  {
    result = swift_getWitnessTable(&unk_100530238, &type metadata for LivenessAttestation);
    atomic_store(result, (unint64_t *)&qword_10063CFB0);
  }
  return result;
}

unint64_t sub_100369ACC()
{
  unint64_t result;

  result = qword_10063CFC0;
  if (!qword_10063CFC0)
  {
    result = swift_getWitnessTable(&unk_100530210, &type metadata for LivenessAttestation);
    atomic_store(result, (unint64_t *)&qword_10063CFC0);
  }
  return result;
}

unint64_t sub_100369B10()
{
  unint64_t result;

  result = qword_10063CFE0;
  if (!qword_10063CFE0)
  {
    result = swift_getWitnessTable(&unk_1005301C0, &type metadata for AttributeConfig.AttributeKey);
    atomic_store(result, (unint64_t *)&qword_10063CFE0);
  }
  return result;
}

unint64_t sub_100369B54()
{
  unint64_t result;

  result = qword_10063CFE8;
  if (!qword_10063CFE8)
  {
    result = swift_getWitnessTable(&unk_100528EC4, &type metadata for AttributeSettings);
    atomic_store(result, (unint64_t *)&qword_10063CFE8);
  }
  return result;
}

unint64_t sub_100369B98()
{
  unint64_t result;

  result = qword_10063CFF8;
  if (!qword_10063CFF8)
  {
    result = swift_getWitnessTable(&unk_100530170, &type metadata for AttributeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063CFF8);
  }
  return result;
}

unint64_t sub_100369BDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063D008;
  if (!qword_10063D008)
  {
    v1 = sub_100013E24(&qword_10063D000);
    sub_100369C48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063D008);
  }
  return result;
}

unint64_t sub_100369C48()
{
  unint64_t result;

  result = qword_10063D010;
  if (!qword_10063D010)
  {
    result = swift_getWitnessTable(&unk_100528E9C, &type metadata for AttributeSettings);
    atomic_store(result, (unint64_t *)&qword_10063D010);
  }
  return result;
}

unint64_t sub_100369C8C()
{
  unint64_t result;

  result = qword_10063D020;
  if (!qword_10063D020)
  {
    result = swift_getWitnessTable(&unk_100530120, &type metadata for ProofingDataContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D020);
  }
  return result;
}

_QWORD *sub_100369CD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[14];
  v10 = a1[16];
  v12 = a1[18];
  v13 = a1[20];
  v14 = a1[22];
  v15 = a1[24];
  v16 = a1[26];
  v17 = a1[28];
  v18 = a1[30];
  v19 = a1[32];
  swift_bridgeObjectRetain(a1[34]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

unint64_t sub_100369DF8()
{
  unint64_t result;

  result = qword_10063D038;
  if (!qword_10063D038)
  {
    result = swift_getWitnessTable(&unk_1005300D0, &type metadata for PRDResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D038);
  }
  return result;
}

unint64_t sub_100369E3C()
{
  unint64_t result;

  result = qword_10063D048;
  if (!qword_10063D048)
  {
    result = swift_getWitnessTable(&unk_100528F8C, &type metadata for ExecuteWorkflowType);
    atomic_store(result, (unint64_t *)&qword_10063D048);
  }
  return result;
}

unint64_t sub_100369E80()
{
  unint64_t result;

  result = qword_10063D060;
  if (!qword_10063D060)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Page, &type metadata for Page);
    atomic_store(result, (unint64_t *)&qword_10063D060);
  }
  return result;
}

unint64_t sub_100369EC4()
{
  unint64_t result;

  result = qword_10063D070;
  if (!qword_10063D070)
  {
    result = swift_getWitnessTable(&unk_10052AF30, &type metadata for DocScanConfig);
    atomic_store(result, (unint64_t *)&qword_10063D070);
  }
  return result;
}

unint64_t sub_100369F08()
{
  unint64_t result;

  result = qword_10063D088;
  if (!qword_10063D088)
  {
    result = swift_getWitnessTable(&unk_100530080, &type metadata for AttributeSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D088);
  }
  return result;
}

unint64_t sub_100369F4C()
{
  unint64_t result;

  result = qword_10063D090;
  if (!qword_10063D090)
  {
    result = swift_getWitnessTable(&unk_100530058, &type metadata for AttributeSettings.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10063D090);
  }
  return result;
}

unint64_t sub_100369F90()
{
  unint64_t result;

  result = qword_10063D0A8;
  if (!qword_10063D0A8)
  {
    result = swift_getWitnessTable(&unk_100530030, &type metadata for AttributeSettingsPickerItem);
    atomic_store(result, (unint64_t *)&qword_10063D0A8);
  }
  return result;
}

unint64_t sub_100369FD4()
{
  unint64_t result;

  result = qword_10063D0B8;
  if (!qword_10063D0B8)
  {
    result = swift_getWitnessTable(&unk_100530008, &type metadata for AttributeSettings.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10063D0B8);
  }
  return result;
}

unint64_t sub_10036A018()
{
  unint64_t result;

  result = qword_10063D0C8;
  if (!qword_10063D0C8)
  {
    result = swift_getWitnessTable(&unk_10052FFE0, &type metadata for AttributeSettingsPickerItem);
    atomic_store(result, (unint64_t *)&qword_10063D0C8);
  }
  return result;
}

unint64_t sub_10036A05C()
{
  unint64_t result;

  result = qword_10063D0D0;
  if (!qword_10063D0D0)
  {
    result = swift_getWitnessTable(&unk_100528DFC, &type metadata for ProfileConfigType);
    atomic_store(result, (unint64_t *)&qword_10063D0D0);
  }
  return result;
}

unint64_t sub_10036A0A0()
{
  unint64_t result;

  result = qword_10063D0D8;
  if (!qword_10063D0D8)
  {
    result = swift_getWitnessTable(&unk_100528D34, &type metadata for AssessmentConfig.DsidType);
    atomic_store(result, (unint64_t *)&qword_10063D0D8);
  }
  return result;
}

unint64_t sub_10036A0E4()
{
  unint64_t result;

  result = qword_10063D0E0;
  if (!qword_10063D0E0)
  {
    result = swift_getWitnessTable(&unk_100528C6C, &type metadata for AssessmentConfig.FallbackType);
    atomic_store(result, (unint64_t *)&qword_10063D0E0);
  }
  return result;
}

unint64_t sub_10036A128()
{
  unint64_t result;

  result = qword_10063D0E8;
  if (!qword_10063D0E8)
  {
    result = swift_getWitnessTable(&unk_100528BA4, &type metadata for AssessmentConfig.Sources);
    atomic_store(result, (unint64_t *)&qword_10063D0E8);
  }
  return result;
}

unint64_t sub_10036A16C()
{
  unint64_t result;

  result = qword_10063D0F0;
  if (!qword_10063D0F0)
  {
    result = swift_getWitnessTable(&unk_100528ADC, &type metadata for AssessmentConfig.Triggers);
    atomic_store(result, (unint64_t *)&qword_10063D0F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttributeSettings.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeSettings.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10036A28C + 4 * byte_10052736E[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10036A2C0 + 4 * byte_100527369[v4]))();
}

uint64_t sub_10036A2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036A2D0);
  return result;
}

uint64_t sub_10036A2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036A2E4);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_10036A2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeSettings.CodingKeys()
{
  return &type metadata for AttributeSettings.CodingKeys;
}

ValueMetadata *type metadata accessor for PRDResults.CodingKeys()
{
  return &type metadata for PRDResults.CodingKeys;
}

uint64_t _s8coreidvd30IdentityProofingStaticWorkflowV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10036A368 + 4 * byte_100527378[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_10036A39C + 4 * byte_100527373[v4]))();
}

uint64_t sub_10036A39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036A3ACLL);
  return result;
}

uint64_t sub_10036A3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036A3C0);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_10036A3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProofingDataContainer.CodingKeys()
{
  return &type metadata for ProofingDataContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeConfig.CodingKeys()
{
  return &type metadata for AttributeConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeConfig.AttributeKey()
{
  return &type metadata for AttributeConfig.AttributeKey;
}

ValueMetadata *type metadata accessor for LivenessDataV2.CodingKeys()
{
  return &type metadata for LivenessDataV2.CodingKeys;
}

ValueMetadata *type metadata accessor for TiberiusWrappedAssessment.CodingKeys()
{
  return &type metadata for TiberiusWrappedAssessment.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingPendingActionsResponse.CodingKeys()
{
  return &type metadata for IdentityProofingPendingActionsResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticTC.CodingKeys()
{
  return &type metadata for IdentityProofingStaticTC.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionContext.CodingKeys()
{
  return &type metadata for ActionContext.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionResult.CodingKeys()
{
  return &type metadata for ActionResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PendingActionContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_10036A4B4 + 4 * byte_100527382[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_10036A4E8 + 4 * byte_10052737D[v4]))();
}

uint64_t sub_10036A4E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A4F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036A4F8);
  return result;
}

uint64_t sub_10036A504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036A50CLL);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_10036A510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PendingActionContext.CodingKeys()
{
  return &type metadata for PendingActionContext.CodingKeys;
}

ValueMetadata *type metadata accessor for DisplayMessageContext.CodingKeys()
{
  return &type metadata for DisplayMessageContext.CodingKeys;
}

ValueMetadata *type metadata accessor for DisplayNotificationContext.CodingKeys()
{
  return &type metadata for DisplayNotificationContext.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionRequest.CodingKeys()
{
  return &type metadata for ActionRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for DisplayMessageActionButton.CodingKeys()
{
  return &type metadata for DisplayMessageActionButton.CodingKeys;
}

ValueMetadata *type metadata accessor for DisplayMessageAction.CodingKeys()
{
  return &type metadata for DisplayMessageAction.CodingKeys;
}

ValueMetadata *type metadata accessor for PendingActionLivenessVersions.CodingKeys()
{
  return &type metadata for PendingActionLivenessVersions.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingPendingActionsContext.CodingKeys()
{
  return &type metadata for IdentityProofingPendingActionsContext.CodingKeys;
}

ValueMetadata *type metadata accessor for CASDAttestationData.CodingKeys()
{
  return &type metadata for CASDAttestationData.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadedData.CodingKeys()
{
  return &type metadata for UploadedData.CodingKeys;
}

ValueMetadata *type metadata accessor for FairPlayProvisioningInfo.CodingKeys()
{
  return &type metadata for FairPlayProvisioningInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingResponseV2.CodingKeys()
{
  return &type metadata for IdentityProofingResponseV2.CodingKeys;
}

ValueMetadata *type metadata accessor for SharingRegistrationResponse.CodingKeys()
{
  return &type metadata for SharingRegistrationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingResponse.CodingKeys()
{
  return &type metadata for IdentityProofingResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for AppleCredentials.CodingKeys()
{
  return &type metadata for AppleCredentials.CodingKeys;
}

ValueMetadata *type metadata accessor for DocScanConfig.CodingKeys()
{
  return &type metadata for DocScanConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyAuthorization.CodingKeys()
{
  return &type metadata for KeyAuthorization.CodingKeys;
}

ValueMetadata *type metadata accessor for MetricsData.CodingKeys()
{
  return &type metadata for MetricsData.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IQMetrics.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD5)
    goto LABEL_17;
  if (a2 + 43 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 43) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 43;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 43;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 43;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2C;
  v8 = v6 - 44;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IQMetrics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 43 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 43) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD4)
    return ((uint64_t (*)(void))((char *)&loc_10036A720 + 4 * byte_10052738C[v4]))();
  *a1 = a2 + 43;
  return ((uint64_t (*)(void))((char *)sub_10036A754 + 4 * byte_100527387[v4]))();
}

uint64_t sub_10036A754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A75C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036A764);
  return result;
}

uint64_t sub_10036A770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036A778);
  *(_BYTE *)result = a2 + 43;
  return result;
}

uint64_t sub_10036A77C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQMetrics.CodingKeys()
{
  return &type metadata for IQMetrics.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentitySharingResponse.CodingKeys()
{
  return &type metadata for IdentitySharingResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceAssessmentTrainingSignalId.CodingKeys()
{
  return &type metadata for DeviceAssessmentTrainingSignalId.CodingKeys;
}

ValueMetadata *type metadata accessor for SharingCredentials.CodingKeys()
{
  return &type metadata for SharingCredentials.CodingKeys;
}

uint64_t _s8coreidvd21LegacyWorkflowPackageC10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8coreidvd21LegacyWorkflowPackageC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10036A8AC + 4 * byte_100527396[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10036A8E0 + 4 * byte_100527391[v4]))();
}

uint64_t sub_10036A8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036A8F0);
  return result;
}

uint64_t sub_10036A8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036A904);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10036A908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036A910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityStatusAttestation.CodingKeys()
{
  return &type metadata for IdentityStatusAttestation.CodingKeys;
}

ValueMetadata *type metadata accessor for DataSharingArtifact.CodingKeys()
{
  return &type metadata for DataSharingArtifact.CodingKeys;
}

ValueMetadata *type metadata accessor for DataNodeProof.CodingKeys()
{
  return &type metadata for DataNodeProof.CodingKeys;
}

ValueMetadata *type metadata accessor for AppleIdAttributeProof.CodingKeys()
{
  return &type metadata for AppleIdAttributeProof.CodingKeys;
}

ValueMetadata *type metadata accessor for InputValidationRequestV1.CodingKeys()
{
  return &type metadata for InputValidationRequestV1.CodingKeys;
}

ValueMetadata *type metadata accessor for InputValidationRequestV3.CodingKeys()
{
  return &type metadata for InputValidationRequestV3.CodingKeys;
}

ValueMetadata *type metadata accessor for SharingRegistrationInfo.CodingKeys()
{
  return &type metadata for SharingRegistrationInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticAsset.CodingKeys()
{
  return &type metadata for IdentityProofingStaticAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for OLDRequest.CodingKeys()
{
  return &type metadata for OLDRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RegisterTerminalRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10036A9F8 + 4 * byte_1005273A0[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10036AA2C + 4 * byte_10052739B[v4]))();
}

uint64_t sub_10036AA2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AA34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036AA3CLL);
  return result;
}

uint64_t sub_10036AA48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036AA50);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10036AA54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AA5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RegisterTerminalRequest.CodingKeys()
{
  return &type metadata for RegisterTerminalRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for InputValidationResponse.CodingKeys()
{
  return &type metadata for InputValidationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for TiberiusIdentitySharingRequest.CodingKeys()
{
  return &type metadata for TiberiusIdentitySharingRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingRequest.CodingKeys()
{
  return &type metadata for IdentityProofingRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for IdVData.CodingKeys()
{
  return &type metadata for IdVData.CodingKeys;
}

uint64_t _s8coreidvd16AssessmentConfigV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10036AB0C + 4 * byte_1005273AA[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10036AB40 + 4 * byte_1005273A5[v4]))();
}

uint64_t sub_10036AB40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AB48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036AB50);
  return result;
}

uint64_t sub_10036AB5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036AB64);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10036AB68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AB70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingRegistrationRequest.CodingKeys()
{
  return &type metadata for SharingRegistrationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for SharingIdVData.CodingKeys()
{
  return &type metadata for SharingIdVData.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentitySharingRequest.CodingKeys()
{
  return &type metadata for IdentitySharingRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for DataSharingAuthorization.CodingKeys()
{
  return &type metadata for DataSharingAuthorization.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingActionNotificationRequest.CodingKeys()
{
  return &type metadata for IdentityProofingActionNotificationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for LegacyWorkflowRecommendationResponse.CodingKeys()
{
  return &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for NonceResponse.CodingKeys()
{
  return &type metadata for NonceResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingLivenessConfigResponseV2.CodingKeys()
{
  return &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys;
}

ValueMetadata *type metadata accessor for GetRPEncryptionCertificateResponse.CodingKeys()
{
  return &type metadata for GetRPEncryptionCertificateResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for RegisterTerminalResponse.CodingKeys()
{
  return &type metadata for RegisterTerminalResponse.CodingKeys;
}

uint64_t _s8coreidvd10ORDRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10036AC68 + 4 * byte_1005273B4[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10036AC9C + 4 * byte_1005273AF[v4]))();
}

uint64_t sub_10036AC9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036ACA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036ACACLL);
  return result;
}

uint64_t sub_10036ACB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036ACC0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10036ACC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036ACCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WorkflowRecommendationRequest.CodingKeys()
{
  return &type metadata for WorkflowRecommendationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for NonceRequest.CodingKeys()
{
  return &type metadata for NonceRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingLivenessConfigRequest.CodingKeys()
{
  return &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetRPEncryptionCertificateRequest.CodingKeys()
{
  return &type metadata for GetRPEncryptionCertificateRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ClaimValidityRequest.CodingKeys()
{
  return &type metadata for ClaimValidityRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for IDVData.CodingKeys()
{
  return &type metadata for IDVData.CodingKeys;
}

ValueMetadata *type metadata accessor for ProofingData.CodingKeys()
{
  return &type metadata for ProofingData.CodingKeys;
}

uint64_t _s8coreidvd28CredentialValidityCWTPayloadC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10036AD94 + 4 * byte_1005273BE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10036ADC8 + 4 * byte_1005273B9[v4]))();
}

uint64_t sub_10036ADC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036ADD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036ADD8);
  return result;
}

uint64_t sub_10036ADE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036ADECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10036ADF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036ADF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DUADataAug.CodingKeys()
{
  return &type metadata for DUADataAug.CodingKeys;
}

ValueMetadata *type metadata accessor for TSID.CodingKeys()
{
  return &type metadata for TSID.CodingKeys;
}

ValueMetadata *type metadata accessor for ClaimValidityResponse.CodingKeys()
{
  return &type metadata for ClaimValidityResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingPendingActionsRequest.CodingKeys()
{
  return &type metadata for IdentityProofingPendingActionsRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IdentityProofingRequestV2.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityProofingRequestV2.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_10036AF20 + 4 * byte_1005273C8[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10036AF54 + 4 * byte_1005273C3[v4]))();
}

uint64_t sub_10036AF54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AF5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036AF64);
  return result;
}

uint64_t sub_10036AF70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036AF78);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_10036AF7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036AF84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingRequestV2.CodingKeys()
{
  return &type metadata for IdentityProofingRequestV2.CodingKeys;
}

ValueMetadata *type metadata accessor for GetSTSResponse.CodingKeys()
{
  return &type metadata for GetSTSResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetProfileResponse.CodingKeys()
{
  return &type metadata for GetProfileResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for RegionFeatureConfigs.CodingKeys()
{
  return &type metadata for RegionFeatureConfigs.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RegionConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RegionConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_10036B0AC + 4 * byte_1005273D2[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10036B0E0 + 4 * byte_1005273CD[v4]))();
}

uint64_t sub_10036B0E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B0E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036B0F0);
  return result;
}

uint64_t sub_10036B0FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036B104);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_10036B108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RegionConfig.CodingKeys()
{
  return &type metadata for RegionConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for TSIDContainer.CodingKeys()
{
  return &type metadata for TSIDContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for Gesture.CodingKeys()
{
  return &type metadata for Gesture.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys()
{
  return &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys;
}

uint64_t _s8coreidvd14ResponseHeaderV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10036B1A8 + 4 * byte_1005273DC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10036B1DC + 4 * byte_1005273D7[v4]))();
}

uint64_t sub_10036B1DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B1E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036B1ECLL);
  return result;
}

uint64_t sub_10036B1F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036B200);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10036B204(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B20C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys()
{
  return &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageQualityMetricData()
{
  return &type metadata for ImageQualityMetricData;
}

ValueMetadata *type metadata accessor for IdentityProvisioningContext()
{
  return &type metadata for IdentityProvisioningContext;
}

uint64_t destroy for LivenessAttestation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for LivenessAttestation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  v5 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for LivenessAttestation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = a2[3];
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  v9 = *((_DWORD *)a2 + 8);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_DWORD *)(a1 + 32) = v9;
  v10 = *((_DWORD *)a2 + 10);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(a1 + 40) = v10;
  v11 = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v11;
  v12 = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = a2[9];
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = *((_DWORD *)a2 + 20);
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
  *(_DWORD *)(a1 + 80) = v15;
  v16 = *(_QWORD *)(a1 + 88);
  v17 = a2[11];
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = a2[12];
  *(_QWORD *)(a1 + 96) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = a2[13];
  *(_QWORD *)(a1 + 104) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t assignWithTake for LivenessAttestation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v6 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LivenessAttestation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LivenessAttestation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LivenessAttestation()
{
  return &type metadata for LivenessAttestation;
}

ValueMetadata *type metadata accessor for Capabilities()
{
  return &type metadata for Capabilities;
}

ValueMetadata *type metadata accessor for IdentityProofingImageAsset()
{
  return &type metadata for IdentityProofingImageAsset;
}

ValueMetadata *type metadata accessor for ProviderWorkflowInfo()
{
  return &type metadata for ProviderWorkflowInfo;
}

__n128 initializeWithCopy for FuzzyMatchData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FuzzyMatchData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FuzzyMatchData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FuzzyMatchData()
{
  return &type metadata for FuzzyMatchData;
}

uint64_t destroy for UploadedDataInfo(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for UploadedDataInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for UploadedDataInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for UploadedDataInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t _s8coreidvd16UploadedDataInfoVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10036B880(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadedDataInfo()
{
  return &type metadata for UploadedDataInfo;
}

ValueMetadata *type metadata accessor for DUATaskType()
{
  return &type metadata for DUATaskType;
}

ValueMetadata *type metadata accessor for RequestHeader()
{
  return &type metadata for RequestHeader;
}

uint64_t _s8coreidvd13IDVDataSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10036B944 + 4 * byte_1005273E6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10036B978 + 4 * byte_1005273E1[v4]))();
}

uint64_t sub_10036B978(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036B988);
  return result;
}

uint64_t sub_10036B994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036B99CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10036B9A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036B9A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDVDataSource()
{
  return &type metadata for IDVDataSource;
}

ValueMetadata *type metadata accessor for AttributeSettingsPickerItem()
{
  return &type metadata for AttributeSettingsPickerItem;
}

ValueMetadata *type metadata accessor for AttributeSettings.AttributeType()
{
  return &type metadata for AttributeSettings.AttributeType;
}

uint64_t getEnumTagSinglePayload for FeatureConfig(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureConfig(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10036BADC + 4 * byte_1005273F0[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10036BB10 + 4 * byte_1005273EB[v4]))();
}

uint64_t sub_10036BB10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036BB18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036BB20);
  return result;
}

uint64_t sub_10036BB2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036BB34);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10036BB38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036BB40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureConfig()
{
  return &type metadata for FeatureConfig;
}

unint64_t sub_10036BB60()
{
  unint64_t result;

  result = qword_10063D0F8;
  if (!qword_10063D0F8)
  {
    result = swift_getWitnessTable(&unk_10052C640, &type metadata for AttributeSettings.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10063D0F8);
  }
  return result;
}

unint64_t sub_10036BBA8()
{
  unint64_t result;

  result = qword_10063D100;
  if (!qword_10063D100)
  {
    result = swift_getWitnessTable(&unk_10052C6E0, &type metadata for IDVDataSource);
    atomic_store(result, (unint64_t *)&qword_10063D100);
  }
  return result;
}

unint64_t sub_10036BBF0()
{
  unint64_t result;

  result = qword_10063D108;
  if (!qword_10063D108)
  {
    result = swift_getWitnessTable(&unk_10052C780, &type metadata for DUATaskType);
    atomic_store(result, (unint64_t *)&qword_10063D108);
  }
  return result;
}

unint64_t sub_10036BC38()
{
  unint64_t result;

  result = qword_10063D110;
  if (!qword_10063D110)
  {
    result = swift_getWitnessTable(&unk_10052C820, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&qword_10063D110);
  }
  return result;
}

unint64_t sub_10036BC80()
{
  unint64_t result;

  result = qword_10063D118;
  if (!qword_10063D118)
  {
    result = swift_getWitnessTable(&unk_10052C8D8, &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D118);
  }
  return result;
}

unint64_t sub_10036BCC8()
{
  unint64_t result;

  result = qword_10063D120;
  if (!qword_10063D120)
  {
    result = swift_getWitnessTable(&unk_10052C990, &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D120);
  }
  return result;
}

unint64_t sub_10036BD10()
{
  unint64_t result;

  result = qword_10063D128;
  if (!qword_10063D128)
  {
    result = swift_getWitnessTable(&unk_10052CA48, &type metadata for Gesture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D128);
  }
  return result;
}

unint64_t sub_10036BD58()
{
  unint64_t result;

  result = qword_10063D130;
  if (!qword_10063D130)
  {
    result = swift_getWitnessTable(&unk_10052CB00, &type metadata for TSIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D130);
  }
  return result;
}

unint64_t sub_10036BDA0()
{
  unint64_t result;

  result = qword_10063D138;
  if (!qword_10063D138)
  {
    result = swift_getWitnessTable(&unk_10052CBF0, &type metadata for RegionConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D138);
  }
  return result;
}

unint64_t sub_10036BDE8()
{
  unint64_t result;

  result = qword_10063D140;
  if (!qword_10063D140)
  {
    result = swift_getWitnessTable(&unk_10052CCE0, &type metadata for RegionFeatureConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D140);
  }
  return result;
}

unint64_t sub_10036BE30()
{
  unint64_t result;

  result = qword_10063D148;
  if (!qword_10063D148)
  {
    result = swift_getWitnessTable(&unk_10052CD98, &type metadata for GetProfileResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D148);
  }
  return result;
}

unint64_t sub_10036BE78()
{
  unint64_t result;

  result = qword_10063D150;
  if (!qword_10063D150)
  {
    result = swift_getWitnessTable(&unk_10052CE50, &type metadata for GetSTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D150);
  }
  return result;
}

unint64_t sub_10036BEC0()
{
  unint64_t result;

  result = qword_10063D158;
  if (!qword_10063D158)
  {
    result = swift_getWitnessTable(&unk_10052CF08, &type metadata for IdentityProofingRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D158);
  }
  return result;
}

unint64_t sub_10036BF08()
{
  unint64_t result;

  result = qword_10063D160;
  if (!qword_10063D160)
  {
    result = swift_getWitnessTable(&unk_10052CFC0, &type metadata for IdentityProofingPendingActionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D160);
  }
  return result;
}

unint64_t sub_10036BF50()
{
  unint64_t result;

  result = qword_10063D168;
  if (!qword_10063D168)
  {
    result = swift_getWitnessTable(&unk_10052D078, &type metadata for ClaimValidityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D168);
  }
  return result;
}

unint64_t sub_10036BF98()
{
  unint64_t result;

  result = qword_10063D170;
  if (!qword_10063D170)
  {
    result = swift_getWitnessTable(&unk_10052D130, &type metadata for TSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D170);
  }
  return result;
}

unint64_t sub_10036BFE0()
{
  unint64_t result;

  result = qword_10063D178;
  if (!qword_10063D178)
  {
    result = swift_getWitnessTable(&unk_10052D1E8, &type metadata for DUADataAug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D178);
  }
  return result;
}

unint64_t sub_10036C028()
{
  unint64_t result;

  result = qword_10063D180;
  if (!qword_10063D180)
  {
    result = swift_getWitnessTable(&unk_10052D2A0, &type metadata for ProofingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D180);
  }
  return result;
}

unint64_t sub_10036C070()
{
  unint64_t result;

  result = qword_10063D188;
  if (!qword_10063D188)
  {
    result = swift_getWitnessTable(&unk_10052D358, &type metadata for IDVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D188);
  }
  return result;
}

unint64_t sub_10036C0B8()
{
  unint64_t result;

  result = qword_10063D190;
  if (!qword_10063D190)
  {
    result = swift_getWitnessTable(&unk_10052D410, &type metadata for ClaimValidityRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D190);
  }
  return result;
}

unint64_t sub_10036C100()
{
  unint64_t result;

  result = qword_10063D198;
  if (!qword_10063D198)
  {
    result = swift_getWitnessTable(&unk_10052D4C8, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D198);
  }
  return result;
}

unint64_t sub_10036C148()
{
  unint64_t result;

  result = qword_10063D1A0;
  if (!qword_10063D1A0)
  {
    result = swift_getWitnessTable(&unk_10052D580, &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1A0);
  }
  return result;
}

unint64_t sub_10036C190()
{
  unint64_t result;

  result = qword_10063D1A8;
  if (!qword_10063D1A8)
  {
    result = swift_getWitnessTable(&unk_10052D638, &type metadata for NonceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1A8);
  }
  return result;
}

unint64_t sub_10036C1D8()
{
  unint64_t result;

  result = qword_10063D1B0;
  if (!qword_10063D1B0)
  {
    result = swift_getWitnessTable(&unk_10052D6F0, &type metadata for WorkflowRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1B0);
  }
  return result;
}

unint64_t sub_10036C220()
{
  unint64_t result;

  result = qword_10063D1B8;
  if (!qword_10063D1B8)
  {
    result = swift_getWitnessTable(&unk_10052D7A8, &type metadata for RegisterTerminalResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1B8);
  }
  return result;
}

unint64_t sub_10036C268()
{
  unint64_t result;

  result = qword_10063D1C0;
  if (!qword_10063D1C0)
  {
    result = swift_getWitnessTable(&unk_10052D860, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1C0);
  }
  return result;
}

unint64_t sub_10036C2B0()
{
  unint64_t result;

  result = qword_10063D1C8;
  if (!qword_10063D1C8)
  {
    result = swift_getWitnessTable(&unk_10052D918, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1C8);
  }
  return result;
}

unint64_t sub_10036C2F8()
{
  unint64_t result;

  result = qword_10063D1D0;
  if (!qword_10063D1D0)
  {
    result = swift_getWitnessTable(&unk_10052D9D0, &type metadata for NonceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1D0);
  }
  return result;
}

unint64_t sub_10036C340()
{
  unint64_t result;

  result = qword_10063D1D8;
  if (!qword_10063D1D8)
  {
    result = swift_getWitnessTable(&unk_10052DA88, &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1D8);
  }
  return result;
}

unint64_t sub_10036C388()
{
  unint64_t result;

  result = qword_10063D1E0;
  if (!qword_10063D1E0)
  {
    result = swift_getWitnessTable(&unk_10052DB40, &type metadata for IdentityProofingActionNotificationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1E0);
  }
  return result;
}

unint64_t sub_10036C3D0()
{
  unint64_t result;

  result = qword_10063D1E8;
  if (!qword_10063D1E8)
  {
    result = swift_getWitnessTable(&unk_10052DBF8, &type metadata for DataSharingAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1E8);
  }
  return result;
}

unint64_t sub_10036C418()
{
  unint64_t result;

  result = qword_10063D1F0;
  if (!qword_10063D1F0)
  {
    result = swift_getWitnessTable(&unk_10052DCB0, &type metadata for IdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1F0);
  }
  return result;
}

unint64_t sub_10036C460()
{
  unint64_t result;

  result = qword_10063D1F8;
  if (!qword_10063D1F8)
  {
    result = swift_getWitnessTable(&unk_10052DD68, &type metadata for SharingIdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D1F8);
  }
  return result;
}

unint64_t sub_10036C4A8()
{
  unint64_t result;

  result = qword_10063D200;
  if (!qword_10063D200)
  {
    result = swift_getWitnessTable(&unk_10052DE20, &type metadata for SharingRegistrationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D200);
  }
  return result;
}

unint64_t sub_10036C4F0()
{
  unint64_t result;

  result = qword_10063D208;
  if (!qword_10063D208)
  {
    result = swift_getWitnessTable(&unk_10052DED8, &type metadata for IdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D208);
  }
  return result;
}

unint64_t sub_10036C538()
{
  unint64_t result;

  result = qword_10063D210;
  if (!qword_10063D210)
  {
    result = swift_getWitnessTable(&unk_10052DF90, &type metadata for IdentityProofingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D210);
  }
  return result;
}

unint64_t sub_10036C580()
{
  unint64_t result;

  result = qword_10063D218;
  if (!qword_10063D218)
  {
    result = swift_getWitnessTable(&unk_10052E048, &type metadata for TiberiusIdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D218);
  }
  return result;
}

unint64_t sub_10036C5C8()
{
  unint64_t result;

  result = qword_10063D220;
  if (!qword_10063D220)
  {
    result = swift_getWitnessTable(&unk_10052E100, &type metadata for InputValidationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D220);
  }
  return result;
}

unint64_t sub_10036C610()
{
  unint64_t result;

  result = qword_10063D228;
  if (!qword_10063D228)
  {
    result = swift_getWitnessTable(&unk_10052E1B8, &type metadata for RegisterTerminalRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D228);
  }
  return result;
}

unint64_t sub_10036C658()
{
  unint64_t result;

  result = qword_10063D230;
  if (!qword_10063D230)
  {
    result = swift_getWitnessTable(&unk_10052E270, &type metadata for OLDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D230);
  }
  return result;
}

unint64_t sub_10036C6A0()
{
  unint64_t result;

  result = qword_10063D238;
  if (!qword_10063D238)
  {
    result = swift_getWitnessTable(&unk_10052E328, &type metadata for IdentityProofingStaticAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D238);
  }
  return result;
}

unint64_t sub_10036C6E8()
{
  unint64_t result;

  result = qword_10063D240;
  if (!qword_10063D240)
  {
    result = swift_getWitnessTable(&unk_10052E3E0, &type metadata for SharingRegistrationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D240);
  }
  return result;
}

unint64_t sub_10036C730()
{
  unint64_t result;

  result = qword_10063D248;
  if (!qword_10063D248)
  {
    result = swift_getWitnessTable(&unk_10052E498, &type metadata for InputValidationRequestV3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D248);
  }
  return result;
}

unint64_t sub_10036C778()
{
  unint64_t result;

  result = qword_10063D250;
  if (!qword_10063D250)
  {
    result = swift_getWitnessTable(&unk_10052E550, &type metadata for InputValidationRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D250);
  }
  return result;
}

unint64_t sub_10036C7C0()
{
  unint64_t result;

  result = qword_10063D258;
  if (!qword_10063D258)
  {
    result = swift_getWitnessTable(&unk_10052E608, &type metadata for AppleIdAttributeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D258);
  }
  return result;
}

unint64_t sub_10036C808()
{
  unint64_t result;

  result = qword_10063D260;
  if (!qword_10063D260)
  {
    result = swift_getWitnessTable(&unk_10052E6C0, &type metadata for DataNodeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D260);
  }
  return result;
}

unint64_t sub_10036C850()
{
  unint64_t result;

  result = qword_10063D268;
  if (!qword_10063D268)
  {
    result = swift_getWitnessTable(&unk_10052E778, &type metadata for DataSharingArtifact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D268);
  }
  return result;
}

unint64_t sub_10036C898()
{
  unint64_t result;

  result = qword_10063D270;
  if (!qword_10063D270)
  {
    result = swift_getWitnessTable(&unk_10052E830, &type metadata for IdentityStatusAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D270);
  }
  return result;
}

unint64_t sub_10036C8E0()
{
  unint64_t result;

  result = qword_10063D278;
  if (!qword_10063D278)
  {
    result = swift_getWitnessTable(&unk_10052E8E8, &type metadata for SharingCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D278);
  }
  return result;
}

unint64_t sub_10036C928()
{
  unint64_t result;

  result = qword_10063D280;
  if (!qword_10063D280)
  {
    result = swift_getWitnessTable(&unk_10052E9A0, &type metadata for DeviceAssessmentTrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D280);
  }
  return result;
}

unint64_t sub_10036C970()
{
  unint64_t result;

  result = qword_10063D288;
  if (!qword_10063D288)
  {
    result = swift_getWitnessTable(&unk_10052EA58, &type metadata for IdentitySharingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D288);
  }
  return result;
}

unint64_t sub_10036C9B8()
{
  unint64_t result;

  result = qword_10063D290;
  if (!qword_10063D290)
  {
    result = swift_getWitnessTable(&unk_10052EB10, &type metadata for IQMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D290);
  }
  return result;
}

unint64_t sub_10036CA00()
{
  unint64_t result;

  result = qword_10063D298;
  if (!qword_10063D298)
  {
    result = swift_getWitnessTable(&unk_10052EBC8, &type metadata for MetricsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D298);
  }
  return result;
}

unint64_t sub_10036CA48()
{
  unint64_t result;

  result = qword_10063D2A0;
  if (!qword_10063D2A0)
  {
    result = swift_getWitnessTable(&unk_10052EC80, &type metadata for KeyAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2A0);
  }
  return result;
}

unint64_t sub_10036CA90()
{
  unint64_t result;

  result = qword_10063D2A8;
  if (!qword_10063D2A8)
  {
    result = swift_getWitnessTable(&unk_10052ED38, &type metadata for DocScanConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2A8);
  }
  return result;
}

unint64_t sub_10036CAD8()
{
  unint64_t result;

  result = qword_10063D2B0;
  if (!qword_10063D2B0)
  {
    result = swift_getWitnessTable(&unk_10052EDF0, &type metadata for AppleCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2B0);
  }
  return result;
}

unint64_t sub_10036CB20()
{
  unint64_t result;

  result = qword_10063D2B8;
  if (!qword_10063D2B8)
  {
    result = swift_getWitnessTable(&unk_10052EEA8, &type metadata for IdentityProofingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2B8);
  }
  return result;
}

unint64_t sub_10036CB68()
{
  unint64_t result;

  result = qword_10063D2C0;
  if (!qword_10063D2C0)
  {
    result = swift_getWitnessTable(&unk_10052EF60, &type metadata for SharingRegistrationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2C0);
  }
  return result;
}

unint64_t sub_10036CBB0()
{
  unint64_t result;

  result = qword_10063D2C8;
  if (!qword_10063D2C8)
  {
    result = swift_getWitnessTable(&unk_10052F018, &type metadata for IdentityProofingResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2C8);
  }
  return result;
}

unint64_t sub_10036CBF8()
{
  unint64_t result;

  result = qword_10063D2D0;
  if (!qword_10063D2D0)
  {
    result = swift_getWitnessTable(&unk_10052F0D0, &type metadata for FairPlayProvisioningInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2D0);
  }
  return result;
}

unint64_t sub_10036CC40()
{
  unint64_t result;

  result = qword_10063D2D8;
  if (!qword_10063D2D8)
  {
    result = swift_getWitnessTable(&unk_10052F188, &type metadata for UploadedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2D8);
  }
  return result;
}

unint64_t sub_10036CC88()
{
  unint64_t result;

  result = qword_10063D2E0;
  if (!qword_10063D2E0)
  {
    result = swift_getWitnessTable(&unk_10052F240, &type metadata for CASDAttestationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2E0);
  }
  return result;
}

unint64_t sub_10036CCD0()
{
  unint64_t result;

  result = qword_10063D2E8;
  if (!qword_10063D2E8)
  {
    result = swift_getWitnessTable(&unk_10052F2F8, &type metadata for IdentityProofingPendingActionsContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2E8);
  }
  return result;
}

unint64_t sub_10036CD18()
{
  unint64_t result;

  result = qword_10063D2F0;
  if (!qword_10063D2F0)
  {
    result = swift_getWitnessTable(&unk_10052F3B0, &type metadata for PendingActionLivenessVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2F0);
  }
  return result;
}

unint64_t sub_10036CD60()
{
  unint64_t result;

  result = qword_10063D2F8;
  if (!qword_10063D2F8)
  {
    result = swift_getWitnessTable(&unk_10052F468, &type metadata for DisplayMessageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D2F8);
  }
  return result;
}

unint64_t sub_10036CDA8()
{
  unint64_t result;

  result = qword_10063D300;
  if (!qword_10063D300)
  {
    result = swift_getWitnessTable(&unk_10052F520, &type metadata for DisplayMessageActionButton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D300);
  }
  return result;
}

unint64_t sub_10036CDF0()
{
  unint64_t result;

  result = qword_10063D308;
  if (!qword_10063D308)
  {
    result = swift_getWitnessTable(&unk_10052F5D8, &type metadata for ActionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D308);
  }
  return result;
}

unint64_t sub_10036CE38()
{
  unint64_t result;

  result = qword_10063D310;
  if (!qword_10063D310)
  {
    result = swift_getWitnessTable(&unk_10052F690, &type metadata for DisplayNotificationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D310);
  }
  return result;
}

unint64_t sub_10036CE80()
{
  unint64_t result;

  result = qword_10063D318;
  if (!qword_10063D318)
  {
    result = swift_getWitnessTable(&unk_10052F748, &type metadata for DisplayMessageContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D318);
  }
  return result;
}

unint64_t sub_10036CEC8()
{
  unint64_t result;

  result = qword_10063D320;
  if (!qword_10063D320)
  {
    result = swift_getWitnessTable(&unk_10052F800, &type metadata for PendingActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D320);
  }
  return result;
}

unint64_t sub_10036CF10()
{
  unint64_t result;

  result = qword_10063D328;
  if (!qword_10063D328)
  {
    result = swift_getWitnessTable(&unk_10052F8B8, &type metadata for ActionResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D328);
  }
  return result;
}

unint64_t sub_10036CF58()
{
  unint64_t result;

  result = qword_10063D330;
  if (!qword_10063D330)
  {
    result = swift_getWitnessTable(&unk_10052F970, &type metadata for ActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D330);
  }
  return result;
}

unint64_t sub_10036CFA0()
{
  unint64_t result;

  result = qword_10063D338;
  if (!qword_10063D338)
  {
    result = swift_getWitnessTable(&unk_10052FA28, &type metadata for IdentityProofingStaticTC.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D338);
  }
  return result;
}

unint64_t sub_10036CFE8()
{
  unint64_t result;

  result = qword_10063D340;
  if (!qword_10063D340)
  {
    result = swift_getWitnessTable(&unk_10052FAE0, &type metadata for IdentityProofingPendingActionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D340);
  }
  return result;
}

unint64_t sub_10036D030()
{
  unint64_t result;

  result = qword_10063D348;
  if (!qword_10063D348)
  {
    result = swift_getWitnessTable(&unk_10052FB98, &type metadata for TiberiusWrappedAssessment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D348);
  }
  return result;
}

unint64_t sub_10036D078()
{
  unint64_t result;

  result = qword_10063D350;
  if (!qword_10063D350)
  {
    result = swift_getWitnessTable(&unk_10052FC50, &type metadata for LivenessDataV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D350);
  }
  return result;
}

unint64_t sub_10036D0C0()
{
  unint64_t result;

  result = qword_10063D358;
  if (!qword_10063D358)
  {
    result = swift_getWitnessTable(&unk_10052FD58, &type metadata for AttributeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D358);
  }
  return result;
}

unint64_t sub_10036D108()
{
  unint64_t result;

  result = qword_10063D360;
  if (!qword_10063D360)
  {
    result = swift_getWitnessTable(&unk_10052FE48, &type metadata for ProofingDataContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D360);
  }
  return result;
}

unint64_t sub_10036D150()
{
  unint64_t result;

  result = qword_10063D368;
  if (!qword_10063D368)
  {
    result = swift_getWitnessTable(&unk_10052FF00, &type metadata for PRDResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D368);
  }
  return result;
}

unint64_t sub_10036D198()
{
  unint64_t result;

  result = qword_10063D370;
  if (!qword_10063D370)
  {
    result = swift_getWitnessTable(&unk_10052FFB8, &type metadata for AttributeSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D370);
  }
  return result;
}

unint64_t sub_10036D1E0()
{
  unint64_t result;

  result = qword_10063D378;
  if (!qword_10063D378)
  {
    result = swift_getWitnessTable(&unk_10052FF28, &type metadata for AttributeSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D378);
  }
  return result;
}

unint64_t sub_10036D228()
{
  unint64_t result;

  result = qword_10063D380;
  if (!qword_10063D380)
  {
    result = swift_getWitnessTable(&unk_10052FF50, &type metadata for AttributeSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D380);
  }
  return result;
}

unint64_t sub_10036D270()
{
  unint64_t result;

  result = qword_10063D388;
  if (!qword_10063D388)
  {
    result = swift_getWitnessTable(&unk_10052FE70, &type metadata for PRDResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D388);
  }
  return result;
}

unint64_t sub_10036D2B8()
{
  unint64_t result;

  result = qword_10063D390;
  if (!qword_10063D390)
  {
    result = swift_getWitnessTable(&unk_10052FE98, &type metadata for PRDResults.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D390);
  }
  return result;
}

unint64_t sub_10036D300()
{
  unint64_t result;

  result = qword_10063D398;
  if (!qword_10063D398)
  {
    result = swift_getWitnessTable(&unk_10052FD80, &type metadata for ProofingDataContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D398);
  }
  return result;
}

unint64_t sub_10036D348()
{
  unint64_t result;

  result = qword_10063D3A0;
  if (!qword_10063D3A0)
  {
    result = swift_getWitnessTable(&unk_10052FDA8, &type metadata for ProofingDataContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3A0);
  }
  return result;
}

unint64_t sub_10036D390()
{
  unint64_t result;

  result = qword_10063D3A8;
  if (!qword_10063D3A8)
  {
    result = swift_getWitnessTable(&unk_10052FCC8, &type metadata for AttributeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3A8);
  }
  return result;
}

unint64_t sub_10036D3D8()
{
  unint64_t result;

  result = qword_10063D3B0;
  if (!qword_10063D3B0)
  {
    result = swift_getWitnessTable(&unk_10052FCF0, &type metadata for AttributeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3B0);
  }
  return result;
}

unint64_t sub_10036D420()
{
  unint64_t result;

  result = qword_10063D3B8;
  if (!qword_10063D3B8)
  {
    result = swift_getWitnessTable(&unk_10052FC78, &type metadata for AttributeConfig.AttributeKey);
    atomic_store(result, (unint64_t *)&qword_10063D3B8);
  }
  return result;
}

unint64_t sub_10036D468()
{
  unint64_t result;

  result = qword_10063D3C0;
  if (!qword_10063D3C0)
  {
    result = swift_getWitnessTable(&unk_10052FCA0, &type metadata for AttributeConfig.AttributeKey);
    atomic_store(result, (unint64_t *)&qword_10063D3C0);
  }
  return result;
}

unint64_t sub_10036D4B0()
{
  unint64_t result;

  result = qword_10063D3C8;
  if (!qword_10063D3C8)
  {
    result = swift_getWitnessTable(&unk_10052FBC0, &type metadata for LivenessDataV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3C8);
  }
  return result;
}

unint64_t sub_10036D4F8()
{
  unint64_t result;

  result = qword_10063D3D0;
  if (!qword_10063D3D0)
  {
    result = swift_getWitnessTable(&unk_10052FBE8, &type metadata for LivenessDataV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3D0);
  }
  return result;
}

unint64_t sub_10036D540()
{
  unint64_t result;

  result = qword_10063D3D8;
  if (!qword_10063D3D8)
  {
    result = swift_getWitnessTable(&unk_10052FB08, &type metadata for TiberiusWrappedAssessment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3D8);
  }
  return result;
}

unint64_t sub_10036D588()
{
  unint64_t result;

  result = qword_10063D3E0;
  if (!qword_10063D3E0)
  {
    result = swift_getWitnessTable(&unk_10052FB30, &type metadata for TiberiusWrappedAssessment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3E0);
  }
  return result;
}

unint64_t sub_10036D5D0()
{
  unint64_t result;

  result = qword_10063D3E8;
  if (!qword_10063D3E8)
  {
    result = swift_getWitnessTable(&unk_10052FA50, &type metadata for IdentityProofingPendingActionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3E8);
  }
  return result;
}

unint64_t sub_10036D618()
{
  unint64_t result;

  result = qword_10063D3F0;
  if (!qword_10063D3F0)
  {
    result = swift_getWitnessTable(&unk_10052FA78, &type metadata for IdentityProofingPendingActionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3F0);
  }
  return result;
}

unint64_t sub_10036D660()
{
  unint64_t result;

  result = qword_10063D3F8;
  if (!qword_10063D3F8)
  {
    result = swift_getWitnessTable(&unk_10052F998, &type metadata for IdentityProofingStaticTC.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D3F8);
  }
  return result;
}

unint64_t sub_10036D6A8()
{
  unint64_t result;

  result = qword_10063D400;
  if (!qword_10063D400)
  {
    result = swift_getWitnessTable(&unk_10052F9C0, &type metadata for IdentityProofingStaticTC.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D400);
  }
  return result;
}

unint64_t sub_10036D6F0()
{
  unint64_t result;

  result = qword_10063D408;
  if (!qword_10063D408)
  {
    result = swift_getWitnessTable(&unk_10052F8E0, &type metadata for ActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D408);
  }
  return result;
}

unint64_t sub_10036D738()
{
  unint64_t result;

  result = qword_10063D410;
  if (!qword_10063D410)
  {
    result = swift_getWitnessTable(&unk_10052F908, &type metadata for ActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D410);
  }
  return result;
}

unint64_t sub_10036D780()
{
  unint64_t result;

  result = qword_10063D418;
  if (!qword_10063D418)
  {
    result = swift_getWitnessTable(&unk_10052F828, &type metadata for ActionResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D418);
  }
  return result;
}

unint64_t sub_10036D7C8()
{
  unint64_t result;

  result = qword_10063D420;
  if (!qword_10063D420)
  {
    result = swift_getWitnessTable(&unk_10052F850, &type metadata for ActionResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D420);
  }
  return result;
}

unint64_t sub_10036D810()
{
  unint64_t result;

  result = qword_10063D428;
  if (!qword_10063D428)
  {
    result = swift_getWitnessTable(&unk_10052F770, &type metadata for PendingActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D428);
  }
  return result;
}

unint64_t sub_10036D858()
{
  unint64_t result;

  result = qword_10063D430;
  if (!qword_10063D430)
  {
    result = swift_getWitnessTable(&unk_10052F798, &type metadata for PendingActionContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D430);
  }
  return result;
}

unint64_t sub_10036D8A0()
{
  unint64_t result;

  result = qword_10063D438;
  if (!qword_10063D438)
  {
    result = swift_getWitnessTable(&unk_10052F6B8, &type metadata for DisplayMessageContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D438);
  }
  return result;
}

unint64_t sub_10036D8E8()
{
  unint64_t result;

  result = qword_10063D440;
  if (!qword_10063D440)
  {
    result = swift_getWitnessTable(&unk_10052F6E0, &type metadata for DisplayMessageContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D440);
  }
  return result;
}

unint64_t sub_10036D930()
{
  unint64_t result;

  result = qword_10063D448;
  if (!qword_10063D448)
  {
    result = swift_getWitnessTable(&unk_10052F600, &type metadata for DisplayNotificationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D448);
  }
  return result;
}

unint64_t sub_10036D978()
{
  unint64_t result;

  result = qword_10063D450;
  if (!qword_10063D450)
  {
    result = swift_getWitnessTable(&unk_10052F628, &type metadata for DisplayNotificationContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D450);
  }
  return result;
}

unint64_t sub_10036D9C0()
{
  unint64_t result;

  result = qword_10063D458;
  if (!qword_10063D458)
  {
    result = swift_getWitnessTable(&unk_10052F548, &type metadata for ActionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D458);
  }
  return result;
}

unint64_t sub_10036DA08()
{
  unint64_t result;

  result = qword_10063D460;
  if (!qword_10063D460)
  {
    result = swift_getWitnessTable(&unk_10052F570, &type metadata for ActionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D460);
  }
  return result;
}

unint64_t sub_10036DA50()
{
  unint64_t result;

  result = qword_10063D468;
  if (!qword_10063D468)
  {
    result = swift_getWitnessTable(&unk_10052F490, &type metadata for DisplayMessageActionButton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D468);
  }
  return result;
}

unint64_t sub_10036DA98()
{
  unint64_t result;

  result = qword_10063D470;
  if (!qword_10063D470)
  {
    result = swift_getWitnessTable(&unk_10052F4B8, &type metadata for DisplayMessageActionButton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D470);
  }
  return result;
}

unint64_t sub_10036DAE0()
{
  unint64_t result;

  result = qword_10063D478;
  if (!qword_10063D478)
  {
    result = swift_getWitnessTable(&unk_10052F3D8, &type metadata for DisplayMessageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D478);
  }
  return result;
}

unint64_t sub_10036DB28()
{
  unint64_t result;

  result = qword_10063D480;
  if (!qword_10063D480)
  {
    result = swift_getWitnessTable(&unk_10052F400, &type metadata for DisplayMessageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D480);
  }
  return result;
}

unint64_t sub_10036DB70()
{
  unint64_t result;

  result = qword_10063D488;
  if (!qword_10063D488)
  {
    result = swift_getWitnessTable(&unk_10052F320, &type metadata for PendingActionLivenessVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D488);
  }
  return result;
}

unint64_t sub_10036DBB8()
{
  unint64_t result;

  result = qword_10063D490;
  if (!qword_10063D490)
  {
    result = swift_getWitnessTable(&unk_10052F348, &type metadata for PendingActionLivenessVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D490);
  }
  return result;
}

unint64_t sub_10036DC00()
{
  unint64_t result;

  result = qword_10063D498;
  if (!qword_10063D498)
  {
    result = swift_getWitnessTable(&unk_10052F268, &type metadata for IdentityProofingPendingActionsContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D498);
  }
  return result;
}

unint64_t sub_10036DC48()
{
  unint64_t result;

  result = qword_10063D4A0;
  if (!qword_10063D4A0)
  {
    result = swift_getWitnessTable(&unk_10052F290, &type metadata for IdentityProofingPendingActionsContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4A0);
  }
  return result;
}

unint64_t sub_10036DC90()
{
  unint64_t result;

  result = qword_10063D4A8;
  if (!qword_10063D4A8)
  {
    result = swift_getWitnessTable(&unk_10052F1B0, &type metadata for CASDAttestationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4A8);
  }
  return result;
}

unint64_t sub_10036DCD8()
{
  unint64_t result;

  result = qword_10063D4B0;
  if (!qword_10063D4B0)
  {
    result = swift_getWitnessTable(&unk_10052F1D8, &type metadata for CASDAttestationData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4B0);
  }
  return result;
}

unint64_t sub_10036DD20()
{
  unint64_t result;

  result = qword_10063D4B8;
  if (!qword_10063D4B8)
  {
    result = swift_getWitnessTable(&unk_10052F0F8, &type metadata for UploadedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4B8);
  }
  return result;
}

unint64_t sub_10036DD68()
{
  unint64_t result;

  result = qword_10063D4C0;
  if (!qword_10063D4C0)
  {
    result = swift_getWitnessTable(&unk_10052F120, &type metadata for UploadedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4C0);
  }
  return result;
}

unint64_t sub_10036DDB0()
{
  unint64_t result;

  result = qword_10063D4C8;
  if (!qword_10063D4C8)
  {
    result = swift_getWitnessTable(&unk_10052F040, &type metadata for FairPlayProvisioningInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4C8);
  }
  return result;
}

unint64_t sub_10036DDF8()
{
  unint64_t result;

  result = qword_10063D4D0;
  if (!qword_10063D4D0)
  {
    result = swift_getWitnessTable(&unk_10052F068, &type metadata for FairPlayProvisioningInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4D0);
  }
  return result;
}

unint64_t sub_10036DE40()
{
  unint64_t result;

  result = qword_10063D4D8;
  if (!qword_10063D4D8)
  {
    result = swift_getWitnessTable(&unk_10052EF88, &type metadata for IdentityProofingResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4D8);
  }
  return result;
}

unint64_t sub_10036DE88()
{
  unint64_t result;

  result = qword_10063D4E0;
  if (!qword_10063D4E0)
  {
    result = swift_getWitnessTable(&unk_10052EFB0, &type metadata for IdentityProofingResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4E0);
  }
  return result;
}

unint64_t sub_10036DED0()
{
  unint64_t result;

  result = qword_10063D4E8;
  if (!qword_10063D4E8)
  {
    result = swift_getWitnessTable(&unk_10052EED0, &type metadata for SharingRegistrationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4E8);
  }
  return result;
}

unint64_t sub_10036DF18()
{
  unint64_t result;

  result = qword_10063D4F0;
  if (!qword_10063D4F0)
  {
    result = swift_getWitnessTable(&unk_10052EEF8, &type metadata for SharingRegistrationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4F0);
  }
  return result;
}

unint64_t sub_10036DF60()
{
  unint64_t result;

  result = qword_10063D4F8;
  if (!qword_10063D4F8)
  {
    result = swift_getWitnessTable(&unk_10052EE18, &type metadata for IdentityProofingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D4F8);
  }
  return result;
}

unint64_t sub_10036DFA8()
{
  unint64_t result;

  result = qword_10063D500;
  if (!qword_10063D500)
  {
    result = swift_getWitnessTable(&unk_10052EE40, &type metadata for IdentityProofingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D500);
  }
  return result;
}

unint64_t sub_10036DFF0()
{
  unint64_t result;

  result = qword_10063D508;
  if (!qword_10063D508)
  {
    result = swift_getWitnessTable(&unk_10052ED60, &type metadata for AppleCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D508);
  }
  return result;
}

unint64_t sub_10036E038()
{
  unint64_t result;

  result = qword_10063D510;
  if (!qword_10063D510)
  {
    result = swift_getWitnessTable(&unk_10052ED88, &type metadata for AppleCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D510);
  }
  return result;
}

unint64_t sub_10036E080()
{
  unint64_t result;

  result = qword_10063D518;
  if (!qword_10063D518)
  {
    result = swift_getWitnessTable(&unk_10052ECA8, &type metadata for DocScanConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D518);
  }
  return result;
}

unint64_t sub_10036E0C8()
{
  unint64_t result;

  result = qword_10063D520;
  if (!qword_10063D520)
  {
    result = swift_getWitnessTable(&unk_10052ECD0, &type metadata for DocScanConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D520);
  }
  return result;
}

unint64_t sub_10036E110()
{
  unint64_t result;

  result = qword_10063D528;
  if (!qword_10063D528)
  {
    result = swift_getWitnessTable(&unk_10052EBF0, &type metadata for KeyAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D528);
  }
  return result;
}

unint64_t sub_10036E158()
{
  unint64_t result;

  result = qword_10063D530;
  if (!qword_10063D530)
  {
    result = swift_getWitnessTable(&unk_10052EC18, &type metadata for KeyAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D530);
  }
  return result;
}

unint64_t sub_10036E1A0()
{
  unint64_t result;

  result = qword_10063D538;
  if (!qword_10063D538)
  {
    result = swift_getWitnessTable(&unk_10052EB38, &type metadata for MetricsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D538);
  }
  return result;
}

unint64_t sub_10036E1E8()
{
  unint64_t result;

  result = qword_10063D540;
  if (!qword_10063D540)
  {
    result = swift_getWitnessTable(&unk_10052EB60, &type metadata for MetricsData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D540);
  }
  return result;
}

unint64_t sub_10036E230()
{
  unint64_t result;

  result = qword_10063D548;
  if (!qword_10063D548)
  {
    result = swift_getWitnessTable(&unk_10052EA80, &type metadata for IQMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D548);
  }
  return result;
}

unint64_t sub_10036E278()
{
  unint64_t result;

  result = qword_10063D550;
  if (!qword_10063D550)
  {
    result = swift_getWitnessTable(&unk_10052EAA8, &type metadata for IQMetrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D550);
  }
  return result;
}

unint64_t sub_10036E2C0()
{
  unint64_t result;

  result = qword_10063D558;
  if (!qword_10063D558)
  {
    result = swift_getWitnessTable(&unk_10052E9C8, &type metadata for IdentitySharingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D558);
  }
  return result;
}

unint64_t sub_10036E308()
{
  unint64_t result;

  result = qword_10063D560;
  if (!qword_10063D560)
  {
    result = swift_getWitnessTable(&unk_10052E9F0, &type metadata for IdentitySharingResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D560);
  }
  return result;
}

unint64_t sub_10036E350()
{
  unint64_t result;

  result = qword_10063D568;
  if (!qword_10063D568)
  {
    result = swift_getWitnessTable(&unk_10052E910, &type metadata for DeviceAssessmentTrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D568);
  }
  return result;
}

unint64_t sub_10036E398()
{
  unint64_t result;

  result = qword_10063D570;
  if (!qword_10063D570)
  {
    result = swift_getWitnessTable(&unk_10052E938, &type metadata for DeviceAssessmentTrainingSignalId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D570);
  }
  return result;
}

unint64_t sub_10036E3E0()
{
  unint64_t result;

  result = qword_10063D578;
  if (!qword_10063D578)
  {
    result = swift_getWitnessTable(&unk_10052E858, &type metadata for SharingCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D578);
  }
  return result;
}

unint64_t sub_10036E428()
{
  unint64_t result;

  result = qword_10063D580;
  if (!qword_10063D580)
  {
    result = swift_getWitnessTable(&unk_10052E880, &type metadata for SharingCredentials.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D580);
  }
  return result;
}

unint64_t sub_10036E470()
{
  unint64_t result;

  result = qword_10063D588;
  if (!qword_10063D588)
  {
    result = swift_getWitnessTable(&unk_10052E7A0, &type metadata for IdentityStatusAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D588);
  }
  return result;
}

unint64_t sub_10036E4B8()
{
  unint64_t result;

  result = qword_10063D590;
  if (!qword_10063D590)
  {
    result = swift_getWitnessTable(&unk_10052E7C8, &type metadata for IdentityStatusAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D590);
  }
  return result;
}

unint64_t sub_10036E500()
{
  unint64_t result;

  result = qword_10063D598;
  if (!qword_10063D598)
  {
    result = swift_getWitnessTable(&unk_10052E6E8, &type metadata for DataSharingArtifact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D598);
  }
  return result;
}

unint64_t sub_10036E548()
{
  unint64_t result;

  result = qword_10063D5A0;
  if (!qword_10063D5A0)
  {
    result = swift_getWitnessTable(&unk_10052E710, &type metadata for DataSharingArtifact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5A0);
  }
  return result;
}

unint64_t sub_10036E590()
{
  unint64_t result;

  result = qword_10063D5A8;
  if (!qword_10063D5A8)
  {
    result = swift_getWitnessTable(&unk_10052E630, &type metadata for DataNodeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5A8);
  }
  return result;
}

unint64_t sub_10036E5D8()
{
  unint64_t result;

  result = qword_10063D5B0;
  if (!qword_10063D5B0)
  {
    result = swift_getWitnessTable(&unk_10052E658, &type metadata for DataNodeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5B0);
  }
  return result;
}

unint64_t sub_10036E620()
{
  unint64_t result;

  result = qword_10063D5B8;
  if (!qword_10063D5B8)
  {
    result = swift_getWitnessTable(&unk_10052E578, &type metadata for AppleIdAttributeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5B8);
  }
  return result;
}

unint64_t sub_10036E668()
{
  unint64_t result;

  result = qword_10063D5C0;
  if (!qword_10063D5C0)
  {
    result = swift_getWitnessTable(&unk_10052E5A0, &type metadata for AppleIdAttributeProof.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5C0);
  }
  return result;
}

unint64_t sub_10036E6B0()
{
  unint64_t result;

  result = qword_10063D5C8;
  if (!qword_10063D5C8)
  {
    result = swift_getWitnessTable(&unk_10052E4C0, &type metadata for InputValidationRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5C8);
  }
  return result;
}

unint64_t sub_10036E6F8()
{
  unint64_t result;

  result = qword_10063D5D0;
  if (!qword_10063D5D0)
  {
    result = swift_getWitnessTable(&unk_10052E4E8, &type metadata for InputValidationRequestV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5D0);
  }
  return result;
}

unint64_t sub_10036E740()
{
  unint64_t result;

  result = qword_10063D5D8;
  if (!qword_10063D5D8)
  {
    result = swift_getWitnessTable(&unk_10052E408, &type metadata for InputValidationRequestV3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5D8);
  }
  return result;
}

unint64_t sub_10036E788()
{
  unint64_t result;

  result = qword_10063D5E0;
  if (!qword_10063D5E0)
  {
    result = swift_getWitnessTable(&unk_10052E430, &type metadata for InputValidationRequestV3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5E0);
  }
  return result;
}

unint64_t sub_10036E7D0()
{
  unint64_t result;

  result = qword_10063D5E8;
  if (!qword_10063D5E8)
  {
    result = swift_getWitnessTable(&unk_10052E350, &type metadata for SharingRegistrationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5E8);
  }
  return result;
}

unint64_t sub_10036E818()
{
  unint64_t result;

  result = qword_10063D5F0;
  if (!qword_10063D5F0)
  {
    result = swift_getWitnessTable(&unk_10052E378, &type metadata for SharingRegistrationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5F0);
  }
  return result;
}

unint64_t sub_10036E860()
{
  unint64_t result;

  result = qword_10063D5F8;
  if (!qword_10063D5F8)
  {
    result = swift_getWitnessTable(&unk_10052E298, &type metadata for IdentityProofingStaticAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D5F8);
  }
  return result;
}

unint64_t sub_10036E8A8()
{
  unint64_t result;

  result = qword_10063D600;
  if (!qword_10063D600)
  {
    result = swift_getWitnessTable(&unk_10052E2C0, &type metadata for IdentityProofingStaticAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D600);
  }
  return result;
}

unint64_t sub_10036E8F0()
{
  unint64_t result;

  result = qword_10063D608;
  if (!qword_10063D608)
  {
    result = swift_getWitnessTable(&unk_10052E1E0, &type metadata for OLDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D608);
  }
  return result;
}

unint64_t sub_10036E938()
{
  unint64_t result;

  result = qword_10063D610;
  if (!qword_10063D610)
  {
    result = swift_getWitnessTable(&unk_10052E208, &type metadata for OLDRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D610);
  }
  return result;
}

unint64_t sub_10036E980()
{
  unint64_t result;

  result = qword_10063D618;
  if (!qword_10063D618)
  {
    result = swift_getWitnessTable(&unk_10052E128, &type metadata for RegisterTerminalRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D618);
  }
  return result;
}

unint64_t sub_10036E9C8()
{
  unint64_t result;

  result = qword_10063D620;
  if (!qword_10063D620)
  {
    result = swift_getWitnessTable(&unk_10052E150, &type metadata for RegisterTerminalRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D620);
  }
  return result;
}

unint64_t sub_10036EA10()
{
  unint64_t result;

  result = qword_10063D628;
  if (!qword_10063D628)
  {
    result = swift_getWitnessTable(&unk_10052E070, &type metadata for InputValidationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D628);
  }
  return result;
}

unint64_t sub_10036EA58()
{
  unint64_t result;

  result = qword_10063D630;
  if (!qword_10063D630)
  {
    result = swift_getWitnessTable(&unk_10052E098, &type metadata for InputValidationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D630);
  }
  return result;
}

unint64_t sub_10036EAA0()
{
  unint64_t result;

  result = qword_10063D638;
  if (!qword_10063D638)
  {
    result = swift_getWitnessTable(&unk_10052DFB8, &type metadata for TiberiusIdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D638);
  }
  return result;
}

unint64_t sub_10036EAE8()
{
  unint64_t result;

  result = qword_10063D640;
  if (!qword_10063D640)
  {
    result = swift_getWitnessTable(&unk_10052DFE0, &type metadata for TiberiusIdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D640);
  }
  return result;
}

unint64_t sub_10036EB30()
{
  unint64_t result;

  result = qword_10063D648;
  if (!qword_10063D648)
  {
    result = swift_getWitnessTable(&unk_10052DF00, &type metadata for IdentityProofingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D648);
  }
  return result;
}

unint64_t sub_10036EB78()
{
  unint64_t result;

  result = qword_10063D650;
  if (!qword_10063D650)
  {
    result = swift_getWitnessTable(&unk_10052DF28, &type metadata for IdentityProofingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D650);
  }
  return result;
}

unint64_t sub_10036EBC0()
{
  unint64_t result;

  result = qword_10063D658;
  if (!qword_10063D658)
  {
    result = swift_getWitnessTable(&unk_10052DE48, &type metadata for IdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D658);
  }
  return result;
}

unint64_t sub_10036EC08()
{
  unint64_t result;

  result = qword_10063D660;
  if (!qword_10063D660)
  {
    result = swift_getWitnessTable(&unk_10052DE70, &type metadata for IdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D660);
  }
  return result;
}

unint64_t sub_10036EC50()
{
  unint64_t result;

  result = qword_10063D668;
  if (!qword_10063D668)
  {
    result = swift_getWitnessTable(&unk_10052DD90, &type metadata for SharingRegistrationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D668);
  }
  return result;
}

unint64_t sub_10036EC98()
{
  unint64_t result;

  result = qword_10063D670;
  if (!qword_10063D670)
  {
    result = swift_getWitnessTable(&unk_10052DDB8, &type metadata for SharingRegistrationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D670);
  }
  return result;
}

unint64_t sub_10036ECE0()
{
  unint64_t result;

  result = qword_10063D678;
  if (!qword_10063D678)
  {
    result = swift_getWitnessTable(&unk_10052DCD8, &type metadata for SharingIdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D678);
  }
  return result;
}

unint64_t sub_10036ED28()
{
  unint64_t result;

  result = qword_10063D680;
  if (!qword_10063D680)
  {
    result = swift_getWitnessTable(&unk_10052DD00, &type metadata for SharingIdVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D680);
  }
  return result;
}

unint64_t sub_10036ED70()
{
  unint64_t result;

  result = qword_10063D688;
  if (!qword_10063D688)
  {
    result = swift_getWitnessTable(&unk_10052DC20, &type metadata for IdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D688);
  }
  return result;
}

unint64_t sub_10036EDB8()
{
  unint64_t result;

  result = qword_10063D690;
  if (!qword_10063D690)
  {
    result = swift_getWitnessTable(&unk_10052DC48, &type metadata for IdentitySharingRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D690);
  }
  return result;
}

unint64_t sub_10036EE00()
{
  unint64_t result;

  result = qword_10063D698;
  if (!qword_10063D698)
  {
    result = swift_getWitnessTable(&unk_10052DB68, &type metadata for DataSharingAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D698);
  }
  return result;
}

unint64_t sub_10036EE48()
{
  unint64_t result;

  result = qword_10063D6A0;
  if (!qword_10063D6A0)
  {
    result = swift_getWitnessTable(&unk_10052DB90, &type metadata for DataSharingAuthorization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6A0);
  }
  return result;
}

unint64_t sub_10036EE90()
{
  unint64_t result;

  result = qword_10063D6A8;
  if (!qword_10063D6A8)
  {
    result = swift_getWitnessTable(&unk_10052DAB0, &type metadata for IdentityProofingActionNotificationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6A8);
  }
  return result;
}

unint64_t sub_10036EED8()
{
  unint64_t result;

  result = qword_10063D6B0;
  if (!qword_10063D6B0)
  {
    result = swift_getWitnessTable(&unk_10052DAD8, &type metadata for IdentityProofingActionNotificationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6B0);
  }
  return result;
}

unint64_t sub_10036EF20()
{
  unint64_t result;

  result = qword_10063D6B8;
  if (!qword_10063D6B8)
  {
    result = swift_getWitnessTable(&unk_10052D9F8, &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6B8);
  }
  return result;
}

unint64_t sub_10036EF68()
{
  unint64_t result;

  result = qword_10063D6C0;
  if (!qword_10063D6C0)
  {
    result = swift_getWitnessTable(&unk_10052DA20, &type metadata for LegacyWorkflowRecommendationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6C0);
  }
  return result;
}

unint64_t sub_10036EFB0()
{
  unint64_t result;

  result = qword_10063D6C8;
  if (!qword_10063D6C8)
  {
    result = swift_getWitnessTable(&unk_10052D940, &type metadata for NonceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6C8);
  }
  return result;
}

unint64_t sub_10036EFF8()
{
  unint64_t result;

  result = qword_10063D6D0;
  if (!qword_10063D6D0)
  {
    result = swift_getWitnessTable(&unk_10052D968, &type metadata for NonceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6D0);
  }
  return result;
}

unint64_t sub_10036F040()
{
  unint64_t result;

  result = qword_10063D6D8;
  if (!qword_10063D6D8)
  {
    result = swift_getWitnessTable(&unk_10052D888, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6D8);
  }
  return result;
}

unint64_t sub_10036F088()
{
  unint64_t result;

  result = qword_10063D6E0;
  if (!qword_10063D6E0)
  {
    result = swift_getWitnessTable(&unk_10052D8B0, &type metadata for IdentityProofingLivenessConfigResponseV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6E0);
  }
  return result;
}

unint64_t sub_10036F0D0()
{
  unint64_t result;

  result = qword_10063D6E8;
  if (!qword_10063D6E8)
  {
    result = swift_getWitnessTable(&unk_10052D7D0, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6E8);
  }
  return result;
}

unint64_t sub_10036F118()
{
  unint64_t result;

  result = qword_10063D6F0;
  if (!qword_10063D6F0)
  {
    result = swift_getWitnessTable(&unk_10052D7F8, &type metadata for GetRPEncryptionCertificateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6F0);
  }
  return result;
}

unint64_t sub_10036F160()
{
  unint64_t result;

  result = qword_10063D6F8;
  if (!qword_10063D6F8)
  {
    result = swift_getWitnessTable(&unk_10052D718, &type metadata for RegisterTerminalResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D6F8);
  }
  return result;
}

unint64_t sub_10036F1A8()
{
  unint64_t result;

  result = qword_10063D700;
  if (!qword_10063D700)
  {
    result = swift_getWitnessTable(&unk_10052D740, &type metadata for RegisterTerminalResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D700);
  }
  return result;
}

unint64_t sub_10036F1F0()
{
  unint64_t result;

  result = qword_10063D708;
  if (!qword_10063D708)
  {
    result = swift_getWitnessTable(&unk_10052D660, &type metadata for WorkflowRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D708);
  }
  return result;
}

unint64_t sub_10036F238()
{
  unint64_t result;

  result = qword_10063D710;
  if (!qword_10063D710)
  {
    result = swift_getWitnessTable(&unk_10052D688, &type metadata for WorkflowRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D710);
  }
  return result;
}

unint64_t sub_10036F280()
{
  unint64_t result;

  result = qword_10063D718;
  if (!qword_10063D718)
  {
    result = swift_getWitnessTable(&unk_10052D5A8, &type metadata for NonceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D718);
  }
  return result;
}

unint64_t sub_10036F2C8()
{
  unint64_t result;

  result = qword_10063D720;
  if (!qword_10063D720)
  {
    result = swift_getWitnessTable(&unk_10052D5D0, &type metadata for NonceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D720);
  }
  return result;
}

unint64_t sub_10036F310()
{
  unint64_t result;

  result = qword_10063D728;
  if (!qword_10063D728)
  {
    result = swift_getWitnessTable(&unk_10052D4F0, &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D728);
  }
  return result;
}

unint64_t sub_10036F358()
{
  unint64_t result;

  result = qword_10063D730;
  if (!qword_10063D730)
  {
    result = swift_getWitnessTable(&unk_10052D518, &type metadata for IdentityProofingLivenessConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D730);
  }
  return result;
}

unint64_t sub_10036F3A0()
{
  unint64_t result;

  result = qword_10063D738;
  if (!qword_10063D738)
  {
    result = swift_getWitnessTable(&unk_10052D438, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D738);
  }
  return result;
}

unint64_t sub_10036F3E8()
{
  unint64_t result;

  result = qword_10063D740;
  if (!qword_10063D740)
  {
    result = swift_getWitnessTable(&unk_10052D460, &type metadata for GetRPEncryptionCertificateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D740);
  }
  return result;
}

unint64_t sub_10036F430()
{
  unint64_t result;

  result = qword_10063D748;
  if (!qword_10063D748)
  {
    result = swift_getWitnessTable(&unk_10052D380, &type metadata for ClaimValidityRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D748);
  }
  return result;
}

unint64_t sub_10036F478()
{
  unint64_t result;

  result = qword_10063D750;
  if (!qword_10063D750)
  {
    result = swift_getWitnessTable(&unk_10052D3A8, &type metadata for ClaimValidityRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D750);
  }
  return result;
}

unint64_t sub_10036F4C0()
{
  unint64_t result;

  result = qword_10063D758;
  if (!qword_10063D758)
  {
    result = swift_getWitnessTable(&unk_10052D2C8, &type metadata for IDVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D758);
  }
  return result;
}

unint64_t sub_10036F508()
{
  unint64_t result;

  result = qword_10063D760;
  if (!qword_10063D760)
  {
    result = swift_getWitnessTable(&unk_10052D2F0, &type metadata for IDVData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D760);
  }
  return result;
}

unint64_t sub_10036F550()
{
  unint64_t result;

  result = qword_10063D768;
  if (!qword_10063D768)
  {
    result = swift_getWitnessTable(&unk_10052D210, &type metadata for ProofingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D768);
  }
  return result;
}

unint64_t sub_10036F598()
{
  unint64_t result;

  result = qword_10063D770;
  if (!qword_10063D770)
  {
    result = swift_getWitnessTable(&unk_10052D238, &type metadata for ProofingData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D770);
  }
  return result;
}

unint64_t sub_10036F5E0()
{
  unint64_t result;

  result = qword_10063D778;
  if (!qword_10063D778)
  {
    result = swift_getWitnessTable(&unk_10052D158, &type metadata for DUADataAug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D778);
  }
  return result;
}

unint64_t sub_10036F628()
{
  unint64_t result;

  result = qword_10063D780;
  if (!qword_10063D780)
  {
    result = swift_getWitnessTable(&unk_10052D180, &type metadata for DUADataAug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D780);
  }
  return result;
}

unint64_t sub_10036F670()
{
  unint64_t result;

  result = qword_10063D788;
  if (!qword_10063D788)
  {
    result = swift_getWitnessTable(&unk_10052D0A0, &type metadata for TSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D788);
  }
  return result;
}

unint64_t sub_10036F6B8()
{
  unint64_t result;

  result = qword_10063D790;
  if (!qword_10063D790)
  {
    result = swift_getWitnessTable(&unk_10052D0C8, &type metadata for TSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D790);
  }
  return result;
}

unint64_t sub_10036F700()
{
  unint64_t result;

  result = qword_10063D798;
  if (!qword_10063D798)
  {
    result = swift_getWitnessTable(&unk_10052CFE8, &type metadata for ClaimValidityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D798);
  }
  return result;
}

unint64_t sub_10036F748()
{
  unint64_t result;

  result = qword_10063D7A0;
  if (!qword_10063D7A0)
  {
    result = swift_getWitnessTable(&unk_10052D010, &type metadata for ClaimValidityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7A0);
  }
  return result;
}

unint64_t sub_10036F790()
{
  unint64_t result;

  result = qword_10063D7A8;
  if (!qword_10063D7A8)
  {
    result = swift_getWitnessTable(&unk_10052CF30, &type metadata for IdentityProofingPendingActionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7A8);
  }
  return result;
}

unint64_t sub_10036F7D8()
{
  unint64_t result;

  result = qword_10063D7B0;
  if (!qword_10063D7B0)
  {
    result = swift_getWitnessTable(&unk_10052CF58, &type metadata for IdentityProofingPendingActionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7B0);
  }
  return result;
}

unint64_t sub_10036F820()
{
  unint64_t result;

  result = qword_10063D7B8;
  if (!qword_10063D7B8)
  {
    result = swift_getWitnessTable(&unk_10052CE78, &type metadata for IdentityProofingRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7B8);
  }
  return result;
}

unint64_t sub_10036F868()
{
  unint64_t result;

  result = qword_10063D7C0;
  if (!qword_10063D7C0)
  {
    result = swift_getWitnessTable(&unk_10052CEA0, &type metadata for IdentityProofingRequestV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7C0);
  }
  return result;
}

unint64_t sub_10036F8B0()
{
  unint64_t result;

  result = qword_10063D7C8;
  if (!qword_10063D7C8)
  {
    result = swift_getWitnessTable(&unk_10052CDC0, &type metadata for GetSTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7C8);
  }
  return result;
}

unint64_t sub_10036F8F8()
{
  unint64_t result;

  result = qword_10063D7D0;
  if (!qword_10063D7D0)
  {
    result = swift_getWitnessTable(&unk_10052CDE8, &type metadata for GetSTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7D0);
  }
  return result;
}

unint64_t sub_10036F940()
{
  unint64_t result;

  result = qword_10063D7D8;
  if (!qword_10063D7D8)
  {
    result = swift_getWitnessTable(&unk_10052CD08, &type metadata for GetProfileResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7D8);
  }
  return result;
}

unint64_t sub_10036F988()
{
  unint64_t result;

  result = qword_10063D7E0;
  if (!qword_10063D7E0)
  {
    result = swift_getWitnessTable(&unk_10052CD30, &type metadata for GetProfileResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7E0);
  }
  return result;
}

unint64_t sub_10036F9D0()
{
  unint64_t result;

  result = qword_10063D7E8;
  if (!qword_10063D7E8)
  {
    result = swift_getWitnessTable(&unk_10052CC18, &type metadata for RegionFeatureConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7E8);
  }
  return result;
}

unint64_t sub_10036FA18()
{
  unint64_t result;

  result = qword_10063D7F0;
  if (!qword_10063D7F0)
  {
    result = swift_getWitnessTable(&unk_10052CC40, &type metadata for RegionFeatureConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7F0);
  }
  return result;
}

unint64_t sub_10036FA60()
{
  unint64_t result;

  result = qword_10063D7F8;
  if (!qword_10063D7F8)
  {
    result = swift_getWitnessTable(&unk_10052CB28, &type metadata for RegionConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D7F8);
  }
  return result;
}

unint64_t sub_10036FAA8()
{
  unint64_t result;

  result = qword_10063D800;
  if (!qword_10063D800)
  {
    result = swift_getWitnessTable(&unk_10052CB50, &type metadata for RegionConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D800);
  }
  return result;
}

unint64_t sub_10036FAF0()
{
  unint64_t result;

  result = qword_10063D808;
  if (!qword_10063D808)
  {
    result = swift_getWitnessTable(&unk_10052CA70, &type metadata for TSIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D808);
  }
  return result;
}

unint64_t sub_10036FB38()
{
  unint64_t result;

  result = qword_10063D810;
  if (!qword_10063D810)
  {
    result = swift_getWitnessTable(&unk_10052CA98, &type metadata for TSIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D810);
  }
  return result;
}

unint64_t sub_10036FB80()
{
  unint64_t result;

  result = qword_10063D818;
  if (!qword_10063D818)
  {
    result = swift_getWitnessTable(&unk_10052C9B8, &type metadata for Gesture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D818);
  }
  return result;
}

unint64_t sub_10036FBC8()
{
  unint64_t result;

  result = qword_10063D820;
  if (!qword_10063D820)
  {
    result = swift_getWitnessTable(&unk_10052C9E0, &type metadata for Gesture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D820);
  }
  return result;
}

unint64_t sub_10036FC10()
{
  unint64_t result;

  result = qword_10063D828;
  if (!qword_10063D828)
  {
    result = swift_getWitnessTable(&unk_10052C900, &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D828);
  }
  return result;
}

unint64_t sub_10036FC58()
{
  unint64_t result;

  result = qword_10063D830;
  if (!qword_10063D830)
  {
    result = swift_getWitnessTable(&unk_10052C928, &type metadata for IdentityProofingStaticWorkflow.DefaultPagination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D830);
  }
  return result;
}

unint64_t sub_10036FCA0()
{
  unint64_t result;

  result = qword_10063D838;
  if (!qword_10063D838)
  {
    result = swift_getWitnessTable(&unk_10052C848, &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D838);
  }
  return result;
}

unint64_t sub_10036FCE8()
{
  unint64_t result;

  result = qword_10063D840;
  if (!qword_10063D840)
  {
    result = swift_getWitnessTable(&unk_10052C870, &type metadata for IdentityProofingStaticWorkflow.SubRegionSpecifics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D840);
  }
  return result;
}

unint64_t sub_10036FD2C()
{
  unint64_t result;

  result = qword_10063D850;
  if (!qword_10063D850)
  {
    result = swift_getWitnessTable(&unk_10053267C, &type metadata for FeatureConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D850);
  }
  return result;
}

unint64_t sub_10036FD70()
{
  unint64_t result;

  result = qword_10063D868;
  if (!qword_10063D868)
  {
    result = swift_getWitnessTable(&unk_10053262C, &type metadata for RequestHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D868);
  }
  return result;
}

unint64_t sub_10036FDB4()
{
  unint64_t result;

  result = qword_10063D878;
  if (!qword_10063D878)
  {
    result = swift_getWitnessTable(&unk_1005325DC, &type metadata for ImageQualityMetricData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D878);
  }
  return result;
}

unint64_t sub_10036FDF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063D888;
  if (!qword_10063D888)
  {
    v1 = sub_100013E24(&qword_10063D880);
    sub_10036FE64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063D888);
  }
  return result;
}

unint64_t sub_10036FE64()
{
  unint64_t result;

  result = qword_10063D890;
  if (!qword_10063D890)
  {
    result = swift_getWitnessTable(&unk_10052AFF8, &type metadata for MetricsData);
    atomic_store(result, (unint64_t *)&qword_10063D890);
  }
  return result;
}

unint64_t sub_10036FEA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063D8A8;
  if (!qword_10063D8A8)
  {
    v1 = sub_100013E24(&qword_10063D880);
    sub_10036FF14();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10063D8A8);
  }
  return result;
}

unint64_t sub_10036FF14()
{
  unint64_t result;

  result = qword_10063D8B0;
  if (!qword_10063D8B0)
  {
    result = swift_getWitnessTable(&unk_10052AFD0, &type metadata for MetricsData);
    atomic_store(result, (unint64_t *)&qword_10063D8B0);
  }
  return result;
}

unint64_t sub_10036FF58()
{
  unint64_t result;

  result = qword_10063D8B8;
  if (!qword_10063D8B8)
  {
    result = swift_getWitnessTable(&unk_10052C708, &type metadata for DUATaskType);
    atomic_store(result, (unint64_t *)&qword_10063D8B8);
  }
  return result;
}

unint64_t sub_10036FF9C()
{
  unint64_t result;

  result = qword_10063D8C0;
  if (!qword_10063D8C0)
  {
    result = swift_getWitnessTable(&unk_10052C668, &type metadata for IDVDataSource);
    atomic_store(result, (unint64_t *)&qword_10063D8C0);
  }
  return result;
}

unint64_t sub_10036FFE0()
{
  unint64_t result;

  result = qword_10063D8C8;
  if (!qword_10063D8C8)
  {
    result = swift_getWitnessTable(&unk_10052C7A8, &type metadata for Capabilities);
    atomic_store(result, (unint64_t *)&qword_10063D8C8);
  }
  return result;
}

unint64_t sub_100370024()
{
  unint64_t result;

  result = qword_10063D8D8;
  if (!qword_10063D8D8)
  {
    result = swift_getWitnessTable(&unk_10053258C, &type metadata for ProviderWorkflowInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D8D8);
  }
  return result;
}

unint64_t sub_100370068()
{
  unint64_t result;

  result = qword_10063D8F0;
  if (!qword_10063D8F0)
  {
    result = swift_getWitnessTable(&unk_10053253C, &type metadata for IdentityProofingImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D8F0);
  }
  return result;
}

unint64_t sub_1003700AC()
{
  unint64_t result;

  result = qword_10063D908;
  if (!qword_10063D908)
  {
    result = swift_getWitnessTable(&unk_1005324EC, &type metadata for FuzzyMatchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D908);
  }
  return result;
}

unint64_t sub_1003700F0()
{
  unint64_t result;

  result = qword_10063D920;
  if (!qword_10063D920)
  {
    result = swift_getWitnessTable(&unk_10053249C, &type metadata for UploadedDataInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D920);
  }
  return result;
}

unint64_t sub_100370134()
{
  unint64_t result;

  result = qword_10063D938;
  if (!qword_10063D938)
  {
    result = swift_getWitnessTable(&unk_10053244C, &type metadata for IdentityProvisioningContext.ContextKey);
    atomic_store(result, (unint64_t *)&qword_10063D938);
  }
  return result;
}

unint64_t sub_100370178()
{
  unint64_t result;

  result = qword_10063D948;
  if (!qword_10063D948)
  {
    result = swift_getWitnessTable(&unk_1005323FC, &type metadata for LivenessAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D948);
  }
  return result;
}

uint64_t sub_1003701BC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100013E24(&qword_10063D950);
    sub_10008F400(a2, &qword_1006340B8, a3, a4);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100370244()
{
  unint64_t result;

  result = qword_10063D978;
  if (!qword_10063D978)
  {
    result = swift_getWitnessTable(&unk_100529054, &type metadata for PRDResults);
    atomic_store(result, (unint64_t *)&qword_10063D978);
  }
  return result;
}

unint64_t sub_100370288()
{
  unint64_t result;

  result = qword_10063D9B0;
  if (!qword_10063D9B0)
  {
    result = swift_getWitnessTable(&unk_10052902C, &type metadata for PRDResults);
    atomic_store(result, (unint64_t *)&qword_10063D9B0);
  }
  return result;
}

unint64_t sub_1003702CC()
{
  unint64_t result;

  result = qword_10063D9C0;
  if (!qword_10063D9C0)
  {
    result = swift_getWitnessTable(&unk_10052C5C8, &type metadata for AttributeSettings.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10063D9C0);
  }
  return result;
}

unint64_t sub_100370310()
{
  unint64_t result;

  result = qword_10063D9D0;
  if (!qword_10063D9D0)
  {
    result = swift_getWitnessTable(&unk_1005323AC, &type metadata for AttributeSettingsPickerItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D9D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeSettingsPickerItem.CodingKeys()
{
  return &type metadata for AttributeSettingsPickerItem.CodingKeys;
}

uint64_t _s8coreidvd23IdentityProofingRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1003703B0 + 4 * byte_1005273FA[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1003703E4 + 4 * byte_1005273F5[v4]))();
}

uint64_t sub_1003703E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003703EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003703F4);
  return result;
}

uint64_t sub_100370400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100370408);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10037040C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100370414(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LivenessAttestation.CodingKeys()
{
  return &type metadata for LivenessAttestation.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProvisioningContext.ContextKey()
{
  return &type metadata for IdentityProvisioningContext.ContextKey;
}

uint64_t _s8coreidvd16AssessmentConfigV12FallbackTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10037048C + 4 * byte_100527404[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003704C0 + 4 * byte_1005273FF[v4]))();
}

uint64_t sub_1003704C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003704C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003704D0);
  return result;
}

uint64_t sub_1003704DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003704E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003704E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003704F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UploadedDataInfo.CodingKeys()
{
  return &type metadata for UploadedDataInfo.CodingKeys;
}

uint64_t _s8coreidvd16AssessmentConfigV7SourcesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100370558 + 4 * byte_10052740E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10037058C + 4 * byte_100527409[v4]))();
}

uint64_t sub_10037058C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100370594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10037059CLL);
  return result;
}

uint64_t sub_1003705A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003705B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1003705B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003705BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FuzzyMatchData.CodingKeys()
{
  return &type metadata for FuzzyMatchData.CodingKeys;
}

ValueMetadata *type metadata accessor for IdentityProofingImageAsset.CodingKeys()
{
  return &type metadata for IdentityProofingImageAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for ProviderWorkflowInfo.CodingKeys()
{
  return &type metadata for ProviderWorkflowInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageQualityMetricData.CodingKeys()
{
  return &type metadata for ImageQualityMetricData.CodingKeys;
}

uint64_t _s8coreidvd10ArtifactIdOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100370654 + 4 * byte_100527418[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100370688 + 4 * byte_100527413[v4]))();
}

uint64_t sub_100370688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100370690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100370698);
  return result;
}

uint64_t sub_1003706A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003706ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003706B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003706B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RequestHeader.CodingKeys()
{
  return &type metadata for RequestHeader.CodingKeys;
}

uint64_t _s8coreidvd13SharingFormatOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100370714 + 4 * byte_10052741D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100370734 + 4 * byte_100527422[v4]))();
}

_BYTE *sub_100370714(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100370734(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10037073C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100370744(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10037074C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100370754(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FeatureConfig.CodingKeys()
{
  return &type metadata for FeatureConfig.CodingKeys;
}

uint64_t destroy for IdentityProvisioningContext.ProvisioningContext(uint64_t a1)
{
  return sub_100007F8C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s8coreidvd27IdentityProvisioningContextV19ProvisioningContextVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  sub_100022948(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for IdentityProvisioningContext.ProvisioningContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  sub_100022948(v3, v4);
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_100007F8C(v5, v6);
  return a1;
}

uint64_t assignWithTake for IdentityProvisioningContext.ProvisioningContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  sub_100007F8C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityProvisioningContext.ProvisioningContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IdentityProvisioningContext.ProvisioningContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProvisioningContext.ProvisioningContext()
{
  return &type metadata for IdentityProvisioningContext.ProvisioningContext;
}

unint64_t sub_100370908()
{
  unint64_t result;

  result = qword_10063D9E0;
  if (!qword_10063D9E0)
  {
    result = swift_getWitnessTable(&unk_100531D3C, &type metadata for FeatureConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D9E0);
  }
  return result;
}

unint64_t sub_100370950()
{
  unint64_t result;

  result = qword_10063D9E8;
  if (!qword_10063D9E8)
  {
    result = swift_getWitnessTable(&unk_100531DF4, &type metadata for RequestHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D9E8);
  }
  return result;
}

unint64_t sub_100370998()
{
  unint64_t result;

  result = qword_10063D9F0;
  if (!qword_10063D9F0)
  {
    result = swift_getWitnessTable(&unk_100531EAC, &type metadata for ImageQualityMetricData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D9F0);
  }
  return result;
}

unint64_t sub_1003709E0()
{
  unint64_t result;

  result = qword_10063D9F8;
  if (!qword_10063D9F8)
  {
    result = swift_getWitnessTable(&unk_100531F64, &type metadata for ProviderWorkflowInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063D9F8);
  }
  return result;
}

unint64_t sub_100370A28()
{
  unint64_t result;

  result = qword_10063DA00;
  if (!qword_10063DA00)
  {
    result = swift_getWitnessTable(&unk_100532054, &type metadata for IdentityProofingImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA00);
  }
  return result;
}

unint64_t sub_100370A70()
{
  unint64_t result;

  result = qword_10063DA08;
  if (!qword_10063DA08)
  {
    result = swift_getWitnessTable(&unk_10053210C, &type metadata for FuzzyMatchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA08);
  }
  return result;
}

unint64_t sub_100370AB8()
{
  unint64_t result;

  result = qword_10063DA10;
  if (!qword_10063DA10)
  {
    result = swift_getWitnessTable(&unk_1005321C4, &type metadata for UploadedDataInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA10);
  }
  return result;
}

unint64_t sub_100370B00()
{
  unint64_t result;

  result = qword_10063DA18;
  if (!qword_10063DA18)
  {
    result = swift_getWitnessTable(&unk_1005322CC, &type metadata for LivenessAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA18);
  }
  return result;
}

unint64_t sub_100370B48()
{
  unint64_t result;

  result = qword_10063DA20;
  if (!qword_10063DA20)
  {
    result = swift_getWitnessTable(&unk_100532384, &type metadata for AttributeSettingsPickerItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA20);
  }
  return result;
}

unint64_t sub_100370B90()
{
  unint64_t result;

  result = qword_10063DA28;
  if (!qword_10063DA28)
  {
    result = swift_getWitnessTable(&unk_1005322F4, &type metadata for AttributeSettingsPickerItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA28);
  }
  return result;
}

unint64_t sub_100370BD8()
{
  unint64_t result;

  result = qword_10063DA30;
  if (!qword_10063DA30)
  {
    result = swift_getWitnessTable(&unk_10053231C, &type metadata for AttributeSettingsPickerItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA30);
  }
  return result;
}

unint64_t sub_100370C20()
{
  unint64_t result;

  result = qword_10063DA38;
  if (!qword_10063DA38)
  {
    result = swift_getWitnessTable(&unk_10053223C, &type metadata for LivenessAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA38);
  }
  return result;
}

unint64_t sub_100370C68()
{
  unint64_t result;

  result = qword_10063DA40;
  if (!qword_10063DA40)
  {
    result = swift_getWitnessTable(&unk_100532264, &type metadata for LivenessAttestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA40);
  }
  return result;
}

unint64_t sub_100370CB0()
{
  unint64_t result;

  result = qword_10063DA48;
  if (!qword_10063DA48)
  {
    result = swift_getWitnessTable(&unk_1005321EC, &type metadata for IdentityProvisioningContext.ContextKey);
    atomic_store(result, (unint64_t *)&qword_10063DA48);
  }
  return result;
}

unint64_t sub_100370CF8()
{
  unint64_t result;

  result = qword_10063DA50;
  if (!qword_10063DA50)
  {
    result = swift_getWitnessTable(&unk_100532214, &type metadata for IdentityProvisioningContext.ContextKey);
    atomic_store(result, (unint64_t *)&qword_10063DA50);
  }
  return result;
}

unint64_t sub_100370D40()
{
  unint64_t result;

  result = qword_10063DA58;
  if (!qword_10063DA58)
  {
    result = swift_getWitnessTable(&unk_100532134, &type metadata for UploadedDataInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA58);
  }
  return result;
}

unint64_t sub_100370D88()
{
  unint64_t result;

  result = qword_10063DA60;
  if (!qword_10063DA60)
  {
    result = swift_getWitnessTable(&unk_10053215C, &type metadata for UploadedDataInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA60);
  }
  return result;
}

unint64_t sub_100370DD0()
{
  unint64_t result;

  result = qword_10063DA68;
  if (!qword_10063DA68)
  {
    result = swift_getWitnessTable(&unk_10053207C, &type metadata for FuzzyMatchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA68);
  }
  return result;
}

unint64_t sub_100370E18()
{
  unint64_t result;

  result = qword_10063DA70;
  if (!qword_10063DA70)
  {
    result = swift_getWitnessTable(&unk_1005320A4, &type metadata for FuzzyMatchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA70);
  }
  return result;
}

unint64_t sub_100370E60()
{
  unint64_t result;

  result = qword_10063DA78;
  if (!qword_10063DA78)
  {
    result = swift_getWitnessTable(&unk_100531F8C, &type metadata for IdentityProofingImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA78);
  }
  return result;
}

unint64_t sub_100370EA8()
{
  unint64_t result;

  result = qword_10063DA80;
  if (!qword_10063DA80)
  {
    result = swift_getWitnessTable(&unk_100531FB4, &type metadata for IdentityProofingImageAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA80);
  }
  return result;
}

unint64_t sub_100370EF0()
{
  unint64_t result;

  result = qword_10063DA88;
  if (!qword_10063DA88)
  {
    result = swift_getWitnessTable(&unk_100531ED4, &type metadata for ProviderWorkflowInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA88);
  }
  return result;
}

unint64_t sub_100370F38()
{
  unint64_t result;

  result = qword_10063DA90;
  if (!qword_10063DA90)
  {
    result = swift_getWitnessTable(&unk_100531EFC, &type metadata for ProviderWorkflowInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA90);
  }
  return result;
}

unint64_t sub_100370F80()
{
  unint64_t result;

  result = qword_10063DA98;
  if (!qword_10063DA98)
  {
    result = swift_getWitnessTable(&unk_100531E1C, &type metadata for ImageQualityMetricData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DA98);
  }
  return result;
}

unint64_t sub_100370FC8()
{
  unint64_t result;

  result = qword_10063DAA0;
  if (!qword_10063DAA0)
  {
    result = swift_getWitnessTable(&unk_100531E44, &type metadata for ImageQualityMetricData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DAA0);
  }
  return result;
}

unint64_t sub_100371010()
{
  unint64_t result;

  result = qword_10063DAA8;
  if (!qword_10063DAA8)
  {
    result = swift_getWitnessTable(&unk_100531D64, &type metadata for RequestHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DAA8);
  }
  return result;
}

unint64_t sub_100371058()
{
  unint64_t result;

  result = qword_10063DAB0;
  if (!qword_10063DAB0)
  {
    result = swift_getWitnessTable(&unk_100531D8C, &type metadata for RequestHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DAB0);
  }
  return result;
}

unint64_t sub_1003710A0()
{
  unint64_t result;

  result = qword_10063DAB8;
  if (!qword_10063DAB8)
  {
    result = swift_getWitnessTable(&unk_100531C74, &type metadata for FeatureConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DAB8);
  }
  return result;
}

unint64_t sub_1003710E8()
{
  unint64_t result;

  result = qword_10063DAC0;
  if (!qword_10063DAC0)
  {
    result = swift_getWitnessTable(&unk_100531C9C, &type metadata for FeatureConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063DAC0);
  }
  return result;
}

uint64_t sub_100371148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;

  v4 = sub_100004828(&qword_10063DAE0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v41 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v41 - v11;
  v13 = sub_100004828(&qword_10063DAE8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v41 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v41 - v20;
  v22 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(a1, a2);
  if ((v23 & 1) != 0)
  {
    v25 = swift_bridgeObjectRetain(a2);
    ISO18013_5_1_ElementIdentifier.init(rawValue:)(a1, a2, v25);
    sub_100038B24((uint64_t)v21, (uint64_t)v19, &qword_10063DAE8);
    v26 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
      goto LABEL_4;
    sub_100038B24((uint64_t)v19, (uint64_t)v16, &qword_10063DAE8);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v16, v26);
    if (v31 != enum case for ISO18013_5_1_ElementIdentifier.givenName(_:)
      && v31 != enum case for ISO18013_5_1_ElementIdentifier.familyName(_:))
    {
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:))
      {
LABEL_16:
        sub_100008030((uint64_t)v19, &qword_10063DAE8);
        type metadata accessor for IdentityElementRawValueKeys(0);
        v33 = static IdentityElementRawValueKeys.dateOfBirth.getter();
        goto LABEL_17;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.issueDate(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.documentIssueDate.getter();
LABEL_49:
        a1 = v38;
        sub_100008030((uint64_t)v21, &qword_10063DAE8);
        v35 = (uint64_t)v19;
        goto LABEL_50;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.documentExpirationDate.getter();
        goto LABEL_49;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:))
      {
        goto LABEL_54;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.documentNumber.getter();
        goto LABEL_49;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.portrait(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.portrait.getter();
        goto LABEL_49;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.drivingPrivileges.getter();
        goto LABEL_49;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.unDistinguishingSign(_:))
      {
LABEL_54:
        sub_100008030((uint64_t)v19, &qword_10063DAE8);
        type metadata accessor for IdentityElementRawValueKeys(0);
        v33 = static IdentityElementRawValueKeys.issuingAuthority.getter();
        goto LABEL_17;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.administrativeNumber(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.sex(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.height(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.weight(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.eyeColour(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.hairColour(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.birthPlace(_:))
      {
        goto LABEL_4;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:))
      {
LABEL_63:
        sub_100008030((uint64_t)v19, &qword_10063DAE8);
        type metadata accessor for IdentityElementRawValueKeys(0);
        v33 = static IdentityElementRawValueKeys.address.getter();
        goto LABEL_17;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.portraitCaptureDate(_:))
        goto LABEL_4;
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:))
      {
        type metadata accessor for IdentityElementRawValueKeys(0);
        v38 = static IdentityElementRawValueKeys.age.getter();
        goto LABEL_49;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.ageBirthYear(_:))
        goto LABEL_16;
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:))
        goto LABEL_54;
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.nationality(_:))
      {
LABEL_4:
        sub_100008030((uint64_t)v19, &qword_10063DAE8);
        v28 = swift_bridgeObjectRetain(a2);
        ISO18013_AAMVA_ElementIdentifier.init(rawValue:)(a1, a2, v28);
        sub_100038B24((uint64_t)v12, (uint64_t)v10, &qword_10063DAE0);
        v29 = type metadata accessor for ISO18013_AAMVA_ElementIdentifier(0);
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v10, 1, v29) == 1)
          goto LABEL_5;
        sub_100038B24((uint64_t)v10, (uint64_t)v7, &qword_10063DAE0);
        v34 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v7, v29);
        if (v34 == enum case for ISO18013_AAMVA_ElementIdentifier.domesticDrivingPrivileges(_:))
        {
          type metadata accessor for IdentityElementRawValueKeys(0);
          a1 = static IdentityElementRawValueKeys.drivingPrivileges.getter();
          sub_100008030((uint64_t)v12, &qword_10063DAE0);
          sub_100008030((uint64_t)v21, &qword_10063DAE8);
          v35 = (uint64_t)v10;
          v36 = &qword_10063DAE0;
        }
        else
        {
          v37 = v34;
          if (v34 != enum case for ISO18013_AAMVA_ElementIdentifier.nameSuffix(_:))
          {
            if (v34 == enum case for ISO18013_AAMVA_ElementIdentifier.auditInformation(_:)
              || v34 == enum case for ISO18013_AAMVA_ElementIdentifier.organDonor(_:)
              || v34 == enum case for ISO18013_AAMVA_ElementIdentifier.veteranStatus(_:))
            {
              goto LABEL_5;
            }
            if (v34 != enum case for ISO18013_AAMVA_ElementIdentifier.familyNameTruncation(_:)
              && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.givenNameTruncation(_:)
              && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.akaFamilyName(_:)
              && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.akaGivenName(_:)
              && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.akaSuffix(_:))
            {
              if (v34 != enum case for ISO18013_AAMVA_ElementIdentifier.weightRange(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.raceEthnicity(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.dhsCompliance(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.dhsTemporaryLawfulStatus(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.edlCredential(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.residentCountry(_:)
                && v34 != enum case for ISO18013_AAMVA_ElementIdentifier.hazmatEndorsementExpirationDate(_:))
              {
                v39 = enum case for ISO18013_AAMVA_ElementIdentifier.sex(_:);
                sub_100008030((uint64_t)v12, &qword_10063DAE0);
                sub_100008030((uint64_t)v21, &qword_10063DAE8);
                if (v37 != v39)
                  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v29);
                goto LABEL_6;
              }
LABEL_5:
              sub_100008030((uint64_t)v12, &qword_10063DAE0);
              sub_100008030((uint64_t)v21, &qword_10063DAE8);
LABEL_6:
              sub_100008030((uint64_t)v10, &qword_10063DAE0);
              swift_bridgeObjectRetain(a2);
              return a1;
            }
          }
          sub_100008030((uint64_t)v10, &qword_10063DAE0);
          type metadata accessor for IdentityElementRawValueKeys(0);
          a1 = static IdentityElementRawValueKeys.givenName.getter();
          sub_100008030((uint64_t)v12, &qword_10063DAE0);
          v36 = &qword_10063DAE8;
          v35 = (uint64_t)v21;
        }
LABEL_51:
        sub_100008030(v35, v36);
        return a1;
      }
      if (v31 == enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.residentState(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:)
        || v31 == enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:))
      {
        goto LABEL_63;
      }
      if (v31 != enum case for ISO18013_5_1_ElementIdentifier.familyNameNationalCharacter(_:)
        && v31 != enum case for ISO18013_5_1_ElementIdentifier.givenNameNationalCharacter(_:))
      {
        if (v31 != enum case for ISO18013_5_1_ElementIdentifier.signatureUsualMark(_:))
          (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
        goto LABEL_4;
      }
    }
    sub_100008030((uint64_t)v19, &qword_10063DAE8);
    type metadata accessor for IdentityElementRawValueKeys(0);
    v33 = static IdentityElementRawValueKeys.givenName.getter();
LABEL_17:
    a1 = v33;
    v35 = (uint64_t)v21;
LABEL_50:
    v36 = &qword_10063DAE8;
    goto LABEL_51;
  }
  v24 = v22;
  type metadata accessor for IdentityElementRawValueKeys(0);
  return static IdentityElementRawValueKeys.ageIsOver(_:)(v24);
}

uint64_t sub_1003719E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _QWORD v80[2];
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;

  v2 = sub_100004828(&qword_100633FA8);
  __chkstk_darwin(v2);
  v81 = (_QWORD *)((char *)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10011DC20((uint64_t)_swiftEmptyArrayStorage);
  v5 = (int *)type metadata accessor for DigitalPresentmentFlow.Context(0);
  v6 = a1 + v5[6];
  v7 = (uint64_t *)(v6 + *(int *)(type metadata accessor for ValidatedDigitalPresentmentRequest(0) + 32));
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  v82 = v4;
  sub_100481050(v8, v9, 0xD000000000000012, 0x800000010055AF80, isUniquelyReferenced_nonNull_native);
  v11 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  v12 = swift_isUniquelyReferenced_nonNull_native(v11);
  v82 = v11;
  sub_100481050(0x7070416E69, 0xE500000000000000, 0x5470704174736F68, 0xEB00000000657079, v12);
  v13 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "stringForKey:", v15);

  if (v16)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    if (v18 == 0x797469746E656469 && v20 == 0xEC00000074736554)
    {
      swift_bridgeObjectRelease(0xEC00000074736554);
LABEL_6:
      v22 = swift_isUniquelyReferenced_nonNull_native(v13);
      v82 = v13;
      sub_100481050(0x4C73726576697244, 0xEE0065736E656369, 0x53746375646F7270, 0xEE00657079546275, v22);
      v23 = v82;
      swift_bridgeObjectRelease(0x8000000000000000);
      v24 = swift_isUniquelyReferenced_nonNull_native(v23);
      v82 = v23;
      sub_100481050(19277, 0xE200000000000000, 0x726575737369, 0xE600000000000000, v24);
      v13 = v82;
      v17 = swift_bridgeObjectRelease(0x8000000000000000);
      goto LABEL_9;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, 0x797469746E656469, 0xEC00000074736554, 0);
    v17 = swift_bridgeObjectRelease(v20);
    if ((v21 & 1) != 0)
      goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 8))
    __asm { BR              X10 }
LABEL_9:
  v80[1] = a1 + v5[13];
  v26 = DigitalPresentmentDisplayConfiguration.clientDisplayName.getter(v17);
  if (v27)
  {
    v28 = v26;
    v29 = v27;
    v30 = swift_isUniquelyReferenced_nonNull_native(v13);
    v82 = v13;
    sub_100481050(v28, v29, 0x746E61686372656DLL, 0xEC000000656D614ELL, v30);
    v13 = v82;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v31 = a1 + v5[12];
  LODWORD(v31) = *(unsigned __int8 *)(v31
                                    + *(int *)(type metadata accessor for DigitalPresentmentCallingClientConfig(0) + 20));
  v32 = swift_isUniquelyReferenced_nonNull_native(v13);
  v82 = v13;
  if ((_DWORD)v31 == 1)
    v33 = 0x507473726966;
  else
    v33 = 0x506472696874;
  sub_100481050(v33 & 0xFFFFFFFFFFFFLL | 0x7261000000000000, 0xEA00000000007974, 0x797469746E656469, 0xEF65736143657355, v32);
  v34 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = &_swiftEmptySetSingleton;
  v85 = &_swiftEmptySetSingleton;
  v86 = &_swiftEmptySetSingleton;
  v84 = &_swiftEmptySetSingleton;
  v36 = a1 + v5[7];
  v37 = *(_QWORD *)(v36 + 80);
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v36 + 80));
    v39 = v37 + 64;
    do
    {
      v42 = *(_QWORD *)(v39 - 24);
      v41 = *(_QWORD *)(v39 - 16);
      v43 = *(_QWORD *)(v39 - 8);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      v44 = sub_100371148(v41, v43);
      if (v45)
      {
        v46 = v44;
        v47 = v45;
        swift_bridgeObjectRetain(v45);
        sub_1004E5D2C(&v82, v46, v47);
        v48 = v83;
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v48);
        sub_1004E5D2C(&v82, v46, v47);
        v40 = v83;
      }
      else
      {
        swift_bridgeObjectRelease(v43);
        v40 = v42;
      }
      swift_bridgeObjectRelease(v40);
      v39 += 40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease(v37);
    v35 = v84;
  }
  v82 = (uint64_t)v35;
  v49 = sub_100004828(&qword_10063DAD0);
  v50 = sub_100372378();
  v51 = sub_1000994DC();
  v52 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v49, v50, v51);
  v54 = v53;
  swift_bridgeObjectRelease(v35);
  v55 = swift_isUniquelyReferenced_nonNull_native(v34);
  v82 = v34;
  sub_100481050(v52, v54, 0xD000000000000015, 0x800000010055AFA0, v55);
  v56 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  v57 = v86;
  v82 = (uint64_t)v86;
  v58 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v49, v50, v51);
  v60 = v59;
  swift_bridgeObjectRelease(v57);
  v61 = swift_isUniquelyReferenced_nonNull_native(v56);
  v82 = v56;
  sub_100481050(v58, v60, 0xD000000000000012, 0x800000010055AFC0, v61);
  v62 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  v63 = v85;
  v82 = (uint64_t)v85;
  v64 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v49, v50, v51);
  v66 = v65;
  swift_bridgeObjectRelease(v63);
  v67 = swift_isUniquelyReferenced_nonNull_native(v62);
  v82 = v62;
  sub_100481050(v64, v66, 0xD000000000000015, 0x800000010055AFE0, v67);
  v68 = v82;
  v69 = swift_bridgeObjectRelease(0x8000000000000000);
  v70 = v81;
  DigitalPresentmentDisplayConfiguration.persistedElementsStorageLifetimePeriod.getter(v69);
  v71 = type metadata accessor for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime(0);
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71) == 1)
  {
    sub_100008030((uint64_t)v70, &qword_100633FA8);
LABEL_26:
    v73 = 0;
    goto LABEL_27;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v72 + 88))(v70, v71) != enum case for DigitalPresentmentDisplayConfiguration.PersistedElementsStorageLifetime.limit(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v72 + 8))(v70, v71);
    goto LABEL_26;
  }
  (*(void (**)(uint64_t *, uint64_t))(v72 + 96))(v70, v71);
  v73 = *v70;
LABEL_27:
  v82 = v73;
  v74 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v76 = v75;
  v77 = swift_isUniquelyReferenced_nonNull_native(v68);
  v82 = v68;
  sub_100481050(v74, v76, 0xD000000000000018, 0x800000010055B000, v77);
  v78 = v82;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v78;
}

unint64_t sub_100372258(uint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_100004828(&qword_10063DAC8);
  inited = swift_initStackObject(v2, &v14);
  *(_OWORD *)(inited + 16) = xmmword_1005208B0;
  v4 = (void *)PKPaymentRequestClientAnalyticsParametersProductTypeKey;
  *(_QWORD *)(inited + 32) = PKPaymentRequestClientAnalyticsParametersProductTypeKey;
  *(_QWORD *)(inited + 40) = 0x797469746E656469;
  *(_QWORD *)(inited + 48) = 0xE800000000000000;
  v5 = (void *)PKPaymentRequestClientAnalyticsParametersPageTagKey;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  *(_QWORD *)(inited + 88) = 0x800000010055AF60;
  v6 = (void *)PKPaymentRequestClientAnalyticsParametersSubjectKey;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = v6;
  strcpy((char *)(inited + 120), "identityInApp");
  *(_WORD *)(inited + 134) = -4864;
  v7 = (void *)PKPaymentRequestClientAnalyticsParametersRemoteAuthorizationStartPayloadKey;
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = v7;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = sub_1003719E0(a1);
  *(_QWORD *)(inited + 184) = sub_100004828(&qword_1006367E8);
  *(_QWORD *)(inited + 160) = v12;
  return sub_10011DE5C(inited);
}

unint64_t sub_100372378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063DAD8;
  if (!qword_10063DAD8)
  {
    v1 = sub_100013E24(&qword_10063DAD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10063DAD8);
  }
  return result;
}

void sub_1003723C4()
{
  qword_100670388 = (uint64_t)&off_1005FFBA0;
}

id sub_1003723D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  Class isa;
  Class v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v1 = v0;
  v2 = sub_100004828(&qword_1006308F0);
  __chkstk_darwin(v2);
  v52 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Logger(0);
  v51 = *(void (**)(char *, uint64_t))(v53 - 8);
  v4 = __chkstk_darwin(v53);
  v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - v6;
  v8 = type metadata accessor for CoreIDVFeatureFlag(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v0;
  v13 = v1[1];
  v14 = objc_allocWithZone((Class)DCPresentmentRequest);
  sub_100022948(v12, v13);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v16 = Data._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v14, "initWithSessionEstablishment:sessionTranscript:", isa, v16);
  sub_100007F8C(v12, v13);

  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setRelyingPartyIdentifier:", v18);

  v19 = type metadata accessor for DigitalPresentmentSessionManager.Request(0);
  sub_100038B24((uint64_t)v1 + *(int *)(v19 + 28), (uint64_t)&v56, &qword_100639040);
  if (v57)
  {
    sub_100008018(&v56, (uint64_t)v58);
    v20 = v59;
    v21 = v60;
    sub_10000806C(v58, v59);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for CoreIDVFeatureFlag.digitalPresentmentRegionCheck(_:), v8);
    LOBYTE(v20) = dispatch thunk of FeatureFlagProviding.isEnabled(_:)(v11, v20, v21);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v20 & 1) != 0)
    {
      v23 = defaultLogger()(v22);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.debug.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "DigitalPresentmentSessionManager : feature flag digitalPresentmentRegionCheck enabled", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      v27 = (void (*)(char *, uint64_t))*((_QWORD *)v51 + 1);
      v28 = v53;
      v27(v7, v53);
      v29 = v52;
      sub_100038B24((uint64_t)v1 + *(int *)(v19 + 24), v52, &qword_1006308F0);
      v30 = type metadata accessor for Locale.Region(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
      if ((_DWORD)v32 == 1)
      {
        sub_100008030(v29, &qword_1006308F0);
        v33 = 0;
      }
      else
      {
        Locale.Region.identifier.getter(v32);
        v35 = v34;
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
        v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v35);
      }
      v36 = v54;
      objc_msgSend(v17, "setRegionCode:", v33);

      defaultLogger()(v37);
      v38 = v17;
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v56 = v42;
        *(_DWORD *)v41 = 136315138;
        v43 = objc_msgSend(v38, "regionCode");
        v51 = v27;
        if (v43)
        {
          v44 = v43;
          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v47 = v46;

        }
        else
        {
          v45 = 0;
          v47 = 0xE000000000000000;
        }
        v48 = v53;
        v55 = sub_1000E3AC8(v45, v47, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 4);
        swift_bridgeObjectRelease(v47);

        _os_log_impl((void *)&_mh_execute_header, v39, v40, "DigitalPresentmentSessionManager : Request regionCode %s", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        v51(v54, v48);
      }
      else
      {

        v27(v36, v28);
      }
    }
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v58);
  }
  else
  {
    sub_100008030((uint64_t)&v56, &qword_100639040);
  }
  return v17;
}

uint64_t sub_1003728EC()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;

  _StringGuts.grow(_:)(53);
  v1._countAndFlagsBits = 0x617073656D616E28;
  v1._object = (void *)0xEB000000003D6563;
  String.append(_:)(v1);
  v2 = *(_QWORD *)v0;
  v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x800000010055B070;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x737265507369202CLL;
  v9._object = (void *)0xEF3D746E65747369;
  String.append(_:)(v9);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

void sub_100372A40(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a3;
  if (!((unint64_t)a3 >> 62))
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v7)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return;
  }
  if (a3 < 0)
    v21 = a3;
  else
    v21 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!v7)
    goto LABEL_18;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    v22 = v5 & 0xC000000000000001;
    v23 = v7;
    v24 = v5;
    do
    {
      if (v22)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v9 = *(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, "elementIdentifier", swift_bridgeObjectRetain(a2).n128_f64[0]);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = objc_msgSend(v10, "intentToRetain");
      v16 = (_QWORD *)*a4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      *a4 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v16 = sub_1000E36E4(0, v16[2] + 1, 1, v16);
        *a4 = v16;
      }
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
      {
        v16 = sub_1000E36E4((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
        *a4 = v16;
      }
      ++v8;
      v16[2] = v19 + 1;
      v20 = &v16[5 * v19];
      v20[4] = a1;
      v20[5] = a2;
      v20[6] = v12;
      v20[7] = v14;
      *((_BYTE *)v20 + 64) = v15 != (id)2;

      v5 = v24;
    }
    while (v23 != v8);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_100372C08()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  _BYTE v29[16];
  _BYTE v30[16];
  _QWORD v31[2];
  uint64_t v32;
  unint64_t v33;

  v1 = 0x3E6C696E3CLL;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(126);
  v2._countAndFlagsBits = 0xD000000000000021;
  v2._object = (void *)0x800000010055B1F0;
  String.append(_:)(v2);
  v3 = *v0;
  v4 = (void *)v0[1];
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x800000010055B220;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7 = v0[2];
  v8 = (void *)v0[3];
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x800000010055B240;
  String.append(_:)(v10);
  sub_100373CB0((uint64_t)(v0 + 4), (uint64_t)v30);
  sub_100373CB0((uint64_t)v30, (uint64_t)v31);
  if (v31[1] >> 60 == 15)
  {
    object = (void *)0xE500000000000000;
    countAndFlagsBits = 0x3E6C696E3CLL;
  }
  else
  {
    v13 = Data.base16EncodedString()();
    countAndFlagsBits = v13._countAndFlagsBits;
    object = v13._object;
  }
  v14 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x6E656D656C65202CLL;
  v15._object = (void *)0xED0000203D207374;
  String.append(_:)(v15);
  v16 = v0[10];
  swift_bridgeObjectRetain(v16);
  v18._countAndFlagsBits = Array.description.getter(v17, &type metadata for DigitalPresentmentSessionManager.RequestedElement);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0x434168747561202CLL;
  v20._object = (void *)0xEC000000203D204CLL;
  String.append(_:)(v20);
  sub_100373CB0((uint64_t)(v0 + 6), (uint64_t)v29);
  sub_100373CB0((uint64_t)v29, (uint64_t)&v32);
  if (v33 >> 60 == 15)
  {
    v21 = (void *)0xE500000000000000;
  }
  else
  {
    v22 = Data.base16EncodedString()();
    v1 = v22._countAndFlagsBits;
    v21 = v22._object;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v21;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v21);
  v24._object = (void *)0xEC000000203D2065;
  v24._countAndFlagsBits = 0x707954636F64202CLL;
  String.append(_:)(v24);
  v26 = v0[8];
  v25 = (void *)v0[9];
  swift_bridgeObjectRetain(v25);
  v27._countAndFlagsBits = v26;
  v27._object = v25;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v25);
  return 0;
}

uint64_t sub_100372E90()
{
  return sub_100372C08();
}

id sub_100372EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  Class isa;
  Class v7;
  NSArray v8;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for SecCertificate(0);
  v3 = Array<A>.derRepresentation()(v1, v2);
  v4 = objc_msgSend(objc_allocWithZone((Class)DCPresentmentSelection), "init");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setCredentialIdentifier:", v5);

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setAuthData:", isa);

  v7 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setSessionTranscript:", v7);

  if (v3)
  {
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v8.super.isa = 0;
  }
  objc_msgSend(v4, "setResponseEncryptionCertificateChain:", v8.super.isa);

  return v4;
}

uint64_t sub_100372FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[34] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[35] = v5;
  v3[36] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10037304C, 0, 0);
}

uint64_t sub_10037304C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 2;
  v2 = v0[33];
  v3 = sub_1003723D8();
  v0[37] = v3;
  v4 = *(void **)(v2 + 16);
  v0[7] = v0 + 30;
  v0[2] = v0;
  v0[3] = sub_1003730FC;
  v5 = swift_continuation_init(v0 + 2, 1);
  v0[25] = _NSConcreteStackBlock;
  v6 = v0 + 25;
  v6[1] = 0x40000000;
  v6[2] = sub_100373430;
  v6[3] = &unk_1006147A0;
  v6[4] = v5;
  objc_msgSend(v4, "interpretRequest:completion:", v3, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_1003730FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 304) = v1;
  if (v1)
    v2 = sub_100373308;
  else
    v2 = sub_10037315C;
  return swift_task_switch(v2, 0, 0);
}

void sub_10037315C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 240);
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    v15 = *(void **)(v0 + 296);
    swift_bridgeObjectRelease(v1);

    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v5 = 0;
    v7 = 0;
    v6 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_12;
  }
  if (v1 < 0)
    v13 = *(_QWORD *)(v0 + 240);
  else
    v13 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 240));
  v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v1);
  if (!v14)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(id *)(v1 + 32);
LABEL_6:
    v3 = v2;
    v4 = *(void **)(v0 + 296);
    swift_bridgeObjectRelease(v1);
    sub_10037399C(v3, (uint64_t *)(v0 + 80));
    v22 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 192);

LABEL_12:
    v16 = *(_QWORD **)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    *v16 = v23;
    v16[1] = v22;
    v16[2] = v21;
    v16[3] = v20;
    v16[4] = v19;
    v16[5] = v18;
    v16[6] = v17;
    v16[7] = v5;
    v16[8] = v7;
    v16[9] = v6;
    v16[10] = v8;
    v16[11] = v9;
    v16[12] = v10;
    v16[13] = v11;
    v16[14] = v12;
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
}

uint64_t sub_100373308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(void **)(v1 + 296);
  v2 = *(_QWORD *)(v1 + 304);
  v5 = *(_QWORD *)(v1 + 280);
  v4 = *(_QWORD *)(v1 + 288);
  v6 = *(_QWORD *)(v1 + 272);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v2);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_100007F30();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v4, 0, v7, 0xD000000000000077, 0x800000010055B120, 0xD00000000000001ALL, 0x800000010055B1D0, 190);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100373430(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_100373C38();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1003734C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100373528, 0, 0);
}

uint64_t sub_100373528()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = *(void **)(v0[17] + 16);
  v3 = sub_100372EE0();
  v0[21] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003735D8;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1000180F8;
  v5[3] = &unk_100614788;
  v5[4] = v4;
  objc_msgSend(v2, "buildCredentialResponseForSelection:completion:", v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1003735D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_10037367C;
  else
    v2 = sub_100373638;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100373638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10037367C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(void **)(v1 + 168);
  v2 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 152);
  v4 = *(_QWORD *)(v1 + 160);
  v6 = *(_QWORD *)(v1 + 144);
  swift_willThrow(a1);

  v7._countAndFlagsBits = 0xD000000000000057;
  v7._object = (void *)0x800000010055B0C0;
  v8._countAndFlagsBits = 0x3663616363376334;
  v8._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v8, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.digitalPresentmentCannotBuildResponse(_:), v6);
  swift_errorRetain(v2);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100007F30();
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v4, 0, v9, 0xD000000000000077, 0x800000010055B120, 0xD000000000000023, 0x800000010055B1A0, 200);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for DigitalPresentmentSessionManager()
{
  return objc_opt_self(_TtC8coreidvd32DigitalPresentmentSessionManager);
}

ValueMetadata *type metadata accessor for DigitalPresentmentSessionManager.RequestedElement()
{
  return &type metadata for DigitalPresentmentSessionManager.RequestedElement;
}

uint64_t sub_100373804(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release(a1);
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release(a1);
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release(a1);
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    a2(v14, v15, v16);
    swift_bridgeObjectRelease(v16);
    result = swift_bridgeObjectRelease(v15);
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release(a1);
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10037399C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = objc_msgSend(a1, "credentialIdentifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v42 = v6;
  v43 = v5;

  v7 = objc_msgSend(a1, "presentmentKeyIdentifier");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v40 = v9;
  v41 = v8;

  v10 = objc_msgSend(a1, "presentmentPublicKey");
  if (v10)
  {
    v11 = v10;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v38 = v13;
    v39 = v12;

  }
  else
  {
    v38 = 0xF000000000000000;
    v39 = 0;
  }
  v14 = objc_msgSend(a1, "docType");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v36 = v16;
  v37 = v15;

  v17 = objc_msgSend(a1, "authACL");
  if (v17)
  {
    v18 = v17;
    v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

  }
  else
  {
    v35 = 0;
    v20 = 0xF000000000000000;
  }
  v21 = objc_msgSend(a1, "region");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v26 = objc_msgSend(a1, "issuingJurisdiction");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v31 = objc_msgSend(a1, "elements");
  v32 = sub_100004828(&qword_10063DBB0);
  v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String, v32, &protocol witness table for String);

  __chkstk_darwin(v34);
  sub_100373804(v33, sub_100373C30);
  swift_bridgeObjectRelease(v33);

  *a2 = v43;
  a2[1] = v42;
  a2[2] = v41;
  a2[3] = v40;
  a2[4] = v39;
  a2[5] = v38;
  a2[6] = v35;
  a2[7] = v20;
  a2[8] = v37;
  a2[9] = v36;
  a2[10] = (uint64_t)_swiftEmptyArrayStorage;
  a2[11] = v23;
  a2[12] = v25;
  a2[13] = v28;
  a2[14] = v30;
}

void sub_100373C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100372A40(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

unint64_t sub_100373C38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063DBB8;
  if (!qword_10063DBB8)
  {
    v1 = objc_opt_self(DCPresentmentProposal);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10063DBB8);
  }
  return result;
}

uint64_t type metadata accessor for DigitalPresentmentSessionManager.Request(uint64_t a1)
{
  uint64_t result;

  result = qword_10063DC18;
  if (!qword_10063DC18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentSessionManager.Request);
  return result;
}

uint64_t sub_100373CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100638678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100373CF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_100022948(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Locale.Region(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
    v16 = swift_bridgeObjectRetain(v9);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_100004828(&qword_1006308F0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v19 = *(int *)(a3 + 28);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(uint64_t *)((char *)a2 + v19 + 24);
    if (v22)
    {
      v23 = *((_QWORD *)v21 + 4);
      *((_QWORD *)v20 + 3) = v22;
      *((_QWORD *)v20 + 4) = v23;
      (**(void (***)(void))(v22 - 8))();
    }
    else
    {
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v24;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    }
  }
  return a1;
}

_QWORD *sub_100373E50(uint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  sub_100007F8C(*a1, a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Locale.Region(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  result = (uint64_t *)((char *)a1 + *(int *)(a2 + 28));
  if (result[3])
    return (_QWORD *)_s8coreidvd24DigitalPresentmentHelperVwxx_0(result);
  return result;
}

uint64_t *sub_100373EF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v6 = *a2;
  v7 = a2[1];
  sub_100022948(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Locale.Region(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
  v15 = swift_bridgeObjectRetain(v8);
  if (v14(v11, 1, v12, v15))
  {
    v16 = sub_100004828(&qword_1006308F0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v17 = *(int *)(a3 + 28);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(uint64_t *)((char *)a2 + v17 + 24);
  if (v20)
  {
    v21 = *((_QWORD *)v19 + 4);
    *((_QWORD *)v18 + 3) = v20;
    *((_QWORD *)v18 + 4) = v21;
    (**(void (***)(void))(v20 - 8))();
  }
  else
  {
    v22 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v22;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  }
  return a1;
}

uint64_t *sub_100374024(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v6 = *a2;
  v7 = a2[1];
  sub_100022948(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100007F8C(v8, v9);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Locale.Region(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100004828(&qword_1006308F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = *(int *)(a3 + 28);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *((_QWORD *)v23 + 3);
  if (!*(uint64_t *)((char *)a1 + v21 + 24))
  {
    if (v24)
    {
      *((_QWORD *)v22 + 3) = v24;
      *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      return a1;
    }
LABEL_13:
    v25 = *(_OWORD *)v23;
    v26 = *((_OWORD *)v23 + 1);
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
    *(_OWORD *)v22 = v25;
    *((_OWORD *)v22 + 1) = v26;
    return a1;
  }
  if (!v24)
  {
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v22);
    goto LABEL_13;
  }
  sub_10000660C(v22, v23);
  return a1;
}

_OWORD *sub_1003741DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale.Region(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004828(&qword_1006308F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  return a1;
}

uint64_t *sub_1003742C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100007F8C(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for Locale.Region(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100004828(&qword_1006308F0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = *(int *)(a3 + 28);
  v20 = (char *)a1 + v19;
  if (*(uint64_t *)((char *)a1 + v19 + 24))
    _s8coreidvd24DigitalPresentmentHelperVwxx_0((uint64_t *)((char *)a1 + v19));
  v21 = *(_OWORD *)(a2 + v19 + 16);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + v19);
  *((_OWORD *)v20 + 1) = v21;
  *((_QWORD *)v20 + 4) = *(_QWORD *)(a2 + v19 + 32);
  return a1;
}

uint64_t sub_100374424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100374430);
}

uint64_t sub_100374430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004828(&qword_1006308F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1003744B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003744BC);
}

uint64_t sub_1003744BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004828(&qword_1006308F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_100374534(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100532758;
  v4[1] = &unk_100532770;
  sub_1003745B8(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100532788;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_1003745B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10063DC28)
  {
    v2 = type metadata accessor for Locale.Region(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10063DC28);
  }
}

uint64_t destroy for DigitalPresentmentSessionManager.Proposal(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_100007F8C(a1[4], v2);
  v3 = a1[7];
  if (v3 >> 60 != 15)
    sub_100007F8C(a1[6], v3);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for DigitalPresentmentSessionManager.Proposal(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 4;
  v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_100022948(*v6, v7);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
  }
  v9 = a2 + 6;
  v10 = a2[7];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_100022948(*v9, a2[7]);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v10;
  }
  v12 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v12;
  v14 = a2[10];
  v13 = a2[11];
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v13;
  v16 = a2[12];
  v15 = a2[13];
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v15;
  v17 = a2[14];
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  return a1;
}

_QWORD *assignWithCopy for DigitalPresentmentSessionManager.Proposal(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2 + 4;
  v9 = a2[5];
  if (a1[5] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_100022948(*v8, a2[5]);
      a1[4] = v10;
      a1[5] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(a1 + 4));
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_100022948(*v8, a2[5]);
  v12 = a1[4];
  v13 = a1[5];
  a1[4] = v11;
  a1[5] = v9;
  sub_100007F8C(v12, v13);
LABEL_8:
  v14 = a2 + 6;
  v15 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      v17 = *v14;
      sub_100022948(*v14, a2[7]);
      v18 = a1[6];
      v19 = a1[7];
      a1[6] = v17;
      a1[7] = v15;
      sub_100007F8C(v18, v19);
      goto LABEL_15;
    }
    sub_10003BAAC((uint64_t)(a1 + 6));
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  v16 = *v14;
  sub_100022948(*v14, a2[7]);
  a1[6] = v16;
  a1[7] = v15;
LABEL_15:
  a1[8] = a2[8];
  v20 = a2[9];
  v21 = a1[9];
  a1[9] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[10];
  v23 = a1[10];
  a1[10] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[11] = a2[11];
  v24 = a2[12];
  v25 = a1[12];
  a1[12] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[13] = a2[13];
  v26 = a2[14];
  v27 = a1[14];
  a1[14] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  return a1;
}

_QWORD *assignWithTake for DigitalPresentmentSessionManager.Proposal(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2 + 4;
  v9 = a1[5];
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = a2[5];
  if (v10 >> 60 == 15)
  {
    sub_10003BAAC((uint64_t)(a1 + 4));
LABEL_4:
    *((_OWORD *)a1 + 2) = *v8;
    goto LABEL_6;
  }
  v11 = a1[4];
  a1[4] = *(_QWORD *)v8;
  a1[5] = v10;
  sub_100007F8C(v11, v9);
LABEL_6:
  v12 = a2 + 6;
  v13 = a1[7];
  if (v13 >> 60 != 15)
  {
    v14 = a2[7];
    if (v14 >> 60 != 15)
    {
      v15 = a1[6];
      a1[6] = *v12;
      a1[7] = v14;
      sub_100007F8C(v15, v13);
      goto LABEL_11;
    }
    sub_10003BAAC((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v12;
LABEL_11:
  v16 = a2[9];
  v17 = a1[9];
  a1[8] = a2[8];
  a1[9] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v18);
  v19 = a2[12];
  v20 = a1[12];
  a1[11] = a2[11];
  a1[12] = v19;
  swift_bridgeObjectRelease(v20);
  v21 = a2[14];
  v22 = a1[14];
  a1[13] = a2[13];
  a1[14] = v21;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentSessionManager.Proposal(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentSessionManager.Proposal(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentSessionManager.Proposal()
{
  return &type metadata for DigitalPresentmentSessionManager.Proposal;
}

uint64_t sub_100374B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[27] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v7);
  v4[29] = swift_task_alloc(v7);
  v4[30] = swift_task_alloc(v7);
  v4[31] = swift_task_alloc(v7);
  v4[32] = swift_task_alloc(v7);
  v4[33] = swift_task_alloc(v7);
  v4[34] = swift_task_alloc(v7);
  v4[35] = swift_task_alloc(v7);
  return swift_task_switch(sub_100374BF8, 0, 0);
}

uint64_t sub_100374BF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Check if there are any pending provisionings for identity type", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1 + 2;
  v7 = v1[35];
  v8 = v1[26];
  v9 = v1[27];
  v10 = v1[25];

  v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v1[36] = v11;
  v11(v7, v8);
  v12 = *(void **)(v10 + 24);
  v13 = (void *)PKPendingProvisioningTypeIdentityCredential;
  v1[37] = PKPendingProvisioningTypeIdentityCredential;
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_100374D54;
  v14 = swift_continuation_init(v1 + 2, 0);
  v1[10] = _NSConcreteStackBlock;
  v15 = v1 + 10;
  v15[1] = 0x40000000;
  v15[2] = sub_1003759AC;
  v15[3] = &unk_100614860;
  v15[4] = v14;
  objc_msgSend(v12, "retrievePendingProvisioningsWithType:completion:", v13, v15);
  return swift_continuation_await(v6);
}

uint64_t sub_100374D54()
{
  return swift_task_switch(sub_100374DA0, 0, 0);
}

uint64_t sub_100374DA0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(void **)(v0 + 296);
  *(_QWORD *)(v0 + 304) = v1;

  if (v1)
  {
    v4 = defaultLogger()(v3);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pending Provisionings exists for identity type.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 208);

    v8(v9, v10);
    v11 = (_QWORD *)swift_task_alloc(dword_10063DD24);
    *(_QWORD *)(v0 + 312) = v11;
    *v11 = v0;
    v11[1] = sub_100374FB4;
    return sub_100376470(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  }
  else
  {
    v13 = defaultLogger()(v3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "There are no pending provisionings for identity type", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v18 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 208);

    v17(v18, v19);
    v20 = *(_QWORD *)(v0 + 272);
    v22 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 248);
    v26 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100374FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 312);
  v4[40] = a1;
  v4[41] = a2;
  v4[42] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10037590C;
  else
    v6 = sub_100375024;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100375024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  unint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  _BOOL4 v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  _BOOL8 v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void (*v98)(uint64_t, uint64_t);
  void (*v99)(uint64_t, uint64_t);
  _QWORD *v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102[2];

  v2 = *(_QWORD *)(v1 + 328);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v7 = *(_QWORD *)(v1 + 320);
    v6 = *(_QWORD *)(v1 + 328);
    v96 = *(_QWORD *)(v1 + 264);
    v99 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v8 = *(_QWORD *)(v1 + 208);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v102[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 168) = sub_1000E3AC8(v7, v6, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v1 + 176, v9 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Filter the Pending Provisionings based on the credential identifier: %s of the identity credential type", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v99(v96, v8);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v12 = *(_QWORD *)(v1 + 264);
    v13 = *(_QWORD *)(v1 + 208);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 328), 2);

    v11(v12, v13);
  }
  v14 = *(_QWORD **)(v1 + 328);
  v15 = *(_QWORD *)(v1 + 320);
  v16 = *(_QWORD *)(v1 + 304);
  swift_bridgeObjectRetain(v14);
  v17 = (uint64_t)sub_1003762CC(v16, v15, v14);
  v18 = swift_bridgeObjectRelease(v14);
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v84 = v17;
    else
      v84 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v19 = _CocoaArrayWrapper.endIndex.getter(v84);
    v18 = swift_bridgeObjectRelease(v17);
  }
  else
  {
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = *(_QWORD *)(v1 + 328);
  if (v19 < 1)
  {
    v50 = swift_bridgeObjectRelease(v17);
    defaultLogger()(v50);
    swift_bridgeObjectRetain(v20);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter(v52);
    v54 = os_log_type_enabled(v52, v53);
    v55 = *(_QWORD *)(v1 + 328);
    if (v54)
    {
      v56 = *(_QWORD *)(v1 + 320);
      v94 = *(_QWORD *)(v1 + 232);
      v98 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
      v91 = *(_QWORD *)(v1 + 208);
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v102[0] = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain(v55);
      *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v56, v55, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v57 + 4);
      swift_bridgeObjectRelease_n(v55, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "PendingProvisioning doesn't exist for the credential identifier %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      v98(v94, v91);
LABEL_29:
      v72 = 0;
LABEL_30:
      v77 = *(_QWORD *)(v1 + 272);
      v79 = *(_QWORD *)(v1 + 256);
      v78 = *(_QWORD *)(v1 + 264);
      v81 = *(_QWORD *)(v1 + 240);
      v80 = *(_QWORD *)(v1 + 248);
      v83 = *(_QWORD *)(v1 + 224);
      v82 = *(_QWORD *)(v1 + 232);
      swift_task_dealloc(*(_QWORD *)(v1 + 280));
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      return (*(uint64_t (**)(_BOOL8))(v1 + 8))(v72);
    }
    v73 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v74 = *(_QWORD *)(v1 + 232);
    v75 = *(_QWORD *)(v1 + 208);
    v76 = *(_QWORD *)(v1 + 328);
LABEL_28:
    swift_bridgeObjectRelease_n(v76, 2);

    v73(v74, v75);
    goto LABEL_29;
  }
  defaultLogger()(v18);
  v21 = swift_bridgeObjectRetain_n(v20, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v1 + 328);
  v100 = (_QWORD *)(v1 + 136);
  if (v24)
  {
    v87 = *(_QWORD *)(v1 + 256);
    v89 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 288);
    v85 = *(_QWORD *)(v1 + 320);
    v86 = *(_QWORD *)(v1 + 208);
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v102[0] = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v1 + 160) = sub_1000E3AC8(v85, v25, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v26 + 4);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Pending provisionings exists for the credential Identifier %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    result = v89(v87, v86);
    v29 = v1 + 152;
    if ((unint64_t)v17 >> 62)
      goto LABEL_9;
LABEL_21:
    if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_13;
    goto LABEL_22;
  }
  v59 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 288);
  v60 = *(_QWORD *)(v1 + 256);
  v61 = *(_QWORD *)(v1 + 208);
  swift_bridgeObjectRelease_n(v25, 2);

  result = v59(v60, v61);
  v29 = v1 + 152;
  if (!((unint64_t)v17 >> 62))
    goto LABEL_21;
LABEL_9:
  if (v17 < 0)
    v30 = v17;
  else
    v30 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = swift_bridgeObjectRelease(v17);
  if (!v31)
  {
LABEL_22:
    v62 = *(_QWORD *)(v1 + 328);
    v63 = swift_bridgeObjectRelease(v17);
    defaultLogger()(v63);
    swift_bridgeObjectRetain(v62);
    v52 = Logger.logObject.getter(v64);
    v65 = static os_log_type_t.debug.getter(v52);
    v66 = os_log_type_enabled(v52, v65);
    v67 = *(_QWORD *)(v1 + 328);
    if (v66)
    {
      v68 = *(_QWORD *)(v1 + 320);
      v101 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
      v92 = *(_QWORD *)(v1 + 208);
      v95 = *(_QWORD *)(v1 + 240);
      v69 = v29;
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v102[0] = v71;
      *(_DWORD *)v70 = 136315138;
      swift_bridgeObjectRetain(v67);
      *(_QWORD *)(v1 + 152) = sub_1000E3AC8(v68, v67, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v1 + 160, v70 + 4);
      swift_bridgeObjectRelease_n(v67, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v65, "unable to retrieve the first pending provisioning for credential identifier %s", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v101(v95, v92);
      goto LABEL_29;
    }
    v73 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v74 = *(_QWORD *)(v1 + 240);
    v75 = *(_QWORD *)(v1 + 208);
    v76 = *(_QWORD *)(v1 + 328);
    goto LABEL_28;
  }
LABEL_13:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v17 + 32);
LABEL_16:
    v33 = v32;
    v34 = *(_QWORD *)(v1 + 328);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v34);
    v35 = (char *)objc_msgSend(v33, "status");
    v36 = defaultLogger()(v35);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v41 = *(_QWORD *)(v1 + 248);
    v42 = *(_QWORD *)(v1 + 208);
    if (v39)
    {
      v93 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
      v97 = v35;
      v90 = *(_QWORD *)(v1 + 208);
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = v41;
      v44 = swift_slowAlloc(32, -1);
      v102[0] = v44;
      *(_DWORD *)v43 = 136315138;
      *v100 = v35;
      type metadata accessor for PKPendingProvisioningStatus(0);
      v46 = String.init<A>(describing:)(v100, v45);
      v48 = v47;
      *(_QWORD *)(v1 + 144) = sub_1000E3AC8(v46, v47, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v29, v43 + 4);
      v49 = v48;
      v35 = v97;
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "The provisioning status of the pending provisioning is %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      v93(v88, v90);
    }
    else
    {

      v40(v41, v42);
    }
    v72 = (unint64_t)(v35 - 1) < 4;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_10037590C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1003759AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    v4 = sub_100376AB8();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  }
  else
  {
    v5 = 0;
  }
  v7 = v5;
  sub_100376A70((uint64_t)&v7, *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40));
  return swift_continuation_resume(v2);
}

uint64_t sub_100375A10(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  v16 = *a1;
  v17 = objc_opt_self(PKPendingIdentityCredential);
  v18 = swift_dynamicCastObjCClass(v16, v17);
  if (!v18)
  {
    v30 = defaultLogger()(0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PendingProvisioning is not of type PKPendingIdentityCredential.", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    return 0;
  }
  v19 = (void *)v18;
  v20 = v16;
  v21 = objc_msgSend(v19, "credentialIdentifier");
  if (!v21)
  {
    v34 = defaultLogger()(0);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Credential Identifier doesn't exist in the pending provisioning.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    return 0;
  }
  v22 = v21;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v25 = v24;

  if (v23 == a2 && v25 == a3)
  {
    v28 = swift_bridgeObjectRelease(a3);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v23, v25, 0);
    v28 = swift_bridgeObjectRelease(v25);
    if ((v27 & 1) == 0)
    {

      return 0;
    }
  }
  v38 = defaultLogger()(v28);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Found the credential identifier in the proofing session that matches the pending provisioning credential identifier", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return 1;
}

void sub_100375D24(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD v55[2];
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _BYTE v68[24];
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v65 = a3;
  v64 = a4;
  v62 = a5;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a1;
  v15 = v66;
  sub_1000D7010(a1, a2, v65);
  if (!v15)
  {
    v60 = (void *)a2;
    v61 = v12;
    v65 = v11;
    v66 = v14;
    v57 = v10;
    v58 = v8;
    if (v16)
    {
      v55[1] = 0;
      v56 = v16;
      v59 = v7;
      v17 = v64;
      v18 = v64 + 16;
      v19 = objc_msgSend(v16, "credentialIdentifier");
      v20 = v61;
      if (v19)
      {
        v21 = v19;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v24 = v23;

      }
      else
      {
        v22 = 0;
        v24 = 0;
      }
      v35 = v65;
      v34 = v66;
      swift_beginAccess(v18, &v69, 1, 0);
      v36 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 16) = v22;
      *(_QWORD *)(v17 + 24) = v24;
      swift_bridgeObjectRelease(v36);
      v37 = swift_beginAccess(v18, v68, 0, 0);
      v38 = *(_QWORD *)(v17 + 24);
      v39 = v59;
      if (v38)
      {
        v40 = *(_QWORD *)(v17 + 16);
        swift_bridgeObjectRetain(v38);
        v41 = v57;
        defaultLogger()(v42);
        swift_bridgeObjectRetain_n(v38, 2);
        v43 = (unint64_t)v60;
        v44 = swift_bridgeObjectRetain_n(v60, 2);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.debug.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22, -1);
          v48 = swift_slowAlloc(64, -1);
          v71 = v48;
          *(_DWORD *)v47 = 136315394;
          swift_bridgeObjectRetain(v38);
          v49 = sub_1000E3AC8(v40, v38, &v71);
          v66 = (char *)v40;
          v67 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v47 + 4);
          swift_bridgeObjectRelease_n(v38, 3);
          *(_WORD *)(v47 + 12) = 2080;
          swift_bridgeObjectRetain(v43);
          v67 = sub_1000E3AC8(v63, v43, &v71);
          v40 = (uint64_t)v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v47 + 14);
          swift_bridgeObjectRelease_n(v43, 3);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Credential Identifier: %s exists for the proofing session with proofingSessionID: %s", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v47, -1, -1);

          (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v59);
        }
        else
        {

          swift_bridgeObjectRelease_n(v43, 2);
          swift_bridgeObjectRelease_n(v38, 2);

          (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v39);
        }
        v54 = v62;
        *v62 = v40;
        v54[1] = v38;
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v20 + 104))(v34, enum case for DIPError.Code.credentialIdentifierDoesNotExist(_:), v35, v37);
        v50 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v51 = type metadata accessor for DIPError(0);
        v52 = sub_100007F30();
        swift_allocError(v51, v52, 0, 0);
        v53 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x800000010055B3C0, 0, v34, 0, v50, 0xD000000000000080, 0x800000010055B300, 0xD000000000000022, 0x800000010055B390, 109);
        swift_willThrow(v53);

      }
    }
    else
    {
      v69 = 0;
      v70 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v25._countAndFlagsBits = 0xD000000000000033;
      v25._object = (void *)0x800000010055B2C0;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v63;
      v26._object = v60;
      String.append(_:)(v26);
      v27 = v69;
      v28 = v70;
      v29 = v66;
      (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v66, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v65);
      v30 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v31 = type metadata accessor for DIPError(0);
      v32 = sub_100007F30();
      swift_allocError(v31, v32, 0, 0);
      v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v27, v28, 0, v29, 0, v30, 0xD000000000000080, 0x800000010055B300, 0xD000000000000022, 0x800000010055B390, 103);
      swift_willThrow(v33);
    }
  }
}

uint64_t sub_100376280()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for IdentityPendingProvisioningManager()
{
  return objc_opt_self(_TtC8coreidvd34IdentityPendingProvisioningManager);
}

_QWORD *sub_1003762CC(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;

  v6 = a1;
  v24 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v21 = v6;
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
      v20 = v7;
      while (v9)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_9:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v23 = v10;
        v13 = sub_100375A10(&v23, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease(v6);

          swift_release(v24);
          return a3;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v9;
          v15 = v24[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
          v16 = v15;
          v9 = v14;
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v11);
          specialized ContiguousArray._endMutation()(v17);
          v7 = v20;
          v6 = v21;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v24;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v18 = v6;
      else
        v18 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v7)
        goto LABEL_22;
    }
    v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return a3;
}

uint64_t sub_100376470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[12] = v7;
  v3[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003764FC, 0, 0);
}

uint64_t sub_1003764FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1[6];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v29 = v1[12];
    v30 = v1[11];
    v32 = v1[13];
    v6 = v1[6];
    v7 = v1[5];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v33 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v1[4] = sub_1000E3AC8(v7, v6, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Retrieving the credential Identifier for the proofing session with proofingSessionID: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v30);
  }
  else
  {
    v11 = v1[12];
    v10 = v1[13];
    v12 = v1[11];
    swift_bridgeObjectRelease_n(v1[6], 2);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v13 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v13, 24, 7);
  sub_1000D6044();
  v1[14] = v14;
  v15 = v1[10];
  v16 = v14;
  v17 = v1[9];
  v31 = v1[8];
  v19 = v1[6];
  v18 = v1[7];
  v20 = v1[5];
  v21 = swift_allocObject(&unk_100614888, 32, 7);
  v1[15] = v21;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  v22 = (_QWORD *)swift_allocObject(&unk_1006148B0, 56, 7);
  v1[16] = v22;
  v22[2] = v16;
  v22[3] = v20;
  v22[4] = v19;
  v22[5] = v18;
  v22[6] = v21;
  v23 = swift_allocObject(&unk_1006148D8, 32, 7);
  v1[17] = v23;
  *(_QWORD *)(v23 + 16) = sub_1003769F0;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104);
  swift_bridgeObjectRetain(v19);
  swift_retain(v16);
  swift_retain(v21);
  v25(v15, v24, v31);
  v26 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v22);
  v27 = (_QWORD *)swift_task_alloc(v26);
  v1[18] = v27;
  *v27 = v1;
  v27[1] = sub_100376828;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 2, v1[10], sub_100376A34, v23, &type metadata for String);
}

uint64_t sub_100376828()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[17];
    (*(void (**)(_QWORD, _QWORD))(v2[9] + 8))(v2[10], v2[8]);
    swift_release(v4);
    v5 = sub_10037693C;
  }
  else
  {
    v6 = v2[16];
    v7 = v2[17];
    (*(void (**)(_QWORD, _QWORD))(v2[9] + 8))(v2[10], v2[8]);
    swift_release(v7);
    swift_release(v6);
    v8 = v2[3];
    v2[20] = v2[2];
    v2[21] = v8;
    v5 = sub_1003768DC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003768DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t sub_10037693C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100376998()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003769BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1003769F0(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  sub_100375D24(v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t sub_100376A10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_100376A34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_100376A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063DD28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100376AB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063DD30;
  if (!qword_10063DD30)
  {
    v1 = objc_opt_self(PKPendingProvisioning);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10063DD30);
  }
  return result;
}

uint64_t sub_100376AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100376B00);
}

uint64_t sub_100376B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100376B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100376B48);
}

uint64_t sub_100376B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DeveloperTestMDLPayloadBuilder(uint64_t a1)
{
  uint64_t result;

  result = qword_10063DD90;
  if (!qword_10063DD90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeveloperTestMDLPayloadBuilder);
  return result;
}

uint64_t sub_100376BC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for CredentialBuilderPayloadDetails(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100376C24, 0, 0);
}

uint64_t sub_100376C24()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD);

  sub_100397368(v0[7], v0[8], v0[11]);
  v1 = v0[8];
  v0[5] = type metadata accessor for DeveloperTestMDLPayloadBuilder(0);
  v0[6] = sub_100376D7C();
  v2 = sub_100022234(v0 + 2);
  sub_100376DC4(v1, (uint64_t)v2);
  v3 = type metadata accessor for Date(0);
  v4 = objc_allocWithZone((Class)type metadata accessor for IdentityCredentialPayloadBuilder(0));
  v0[12] = IdentityCredentialPayloadBuilder.init(with:dateProvider:)(v0 + 2, v3, &protocol witness table for Date);
  v7 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)
                                      + async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)
                                  + 1));
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_10023E674;
  return v7(v0[11]);
}

uint64_t sub_100376D30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10063DDDC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10023E7EC;
  return sub_100376BC4(a1);
}

unint64_t sub_100376D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063DDE0;
  if (!qword_10063DDE0)
  {
    v1 = type metadata accessor for DeveloperTestMDLPayloadBuilder(255);
    result = swift_getWitnessTable(&unk_100532860, v1);
    atomic_store(result, &qword_10063DDE0);
  }
  return result;
}

uint64_t sub_100376DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeveloperTestMDLPayloadBuilder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100376E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t result;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t (*v70)();
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  void **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void **v83;
  id v84;
  __objc2_prop *v85;
  id v86;
  Swift::String v87;
  Swift::Bool v88;
  char *v89;
  id v90;
  Swift::String v91;
  Swift::Bool v92;
  __int128 v93;
  id v94;
  NSString v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  void **v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  id v107;
  NSString v108;
  unsigned int v109;
  uint64_t v110;
  char *v111;
  _QWORD *v112;
  NSObject *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  uint64_t v116;
  void **v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  id v126;
  char v127;
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  BOOL v141;
  char *v142;
  uint64_t v143;
  unint64_t i;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  BOOL v148;
  _QWORD *v149;
  NSObject *v150;
  os_log_type_t v151;
  _BOOL4 v152;
  uint64_t v153;
  void **v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  NSObject *v158;
  os_log_type_t v159;
  _BOOL4 v160;
  id v161;
  uint8_t *v162;
  void **v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  void **v172;
  unint64_t v173;
  os_log_type_t v174;
  uint8_t *v175;
  char *v176;
  _QWORD *v177;
  NSObject *v178;
  os_log_type_t v179;
  uint64_t v180;
  void **v181;
  unint64_t v182;
  id v183;
  NSString v184;
  uint64_t v185;
  _QWORD *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  _QWORD *v219;
  NSObject *v220;
  os_log_type_t v221;
  uint64_t v222;
  void **v223;
  unint64_t v224;
  char *v225;
  id v226;
  NSString v227;
  uint64_t v228;
  _QWORD *v229;
  os_log_type_t v230;
  uint64_t v231;
  void **v232;
  unint64_t v233;
  _QWORD *v234;
  os_log_type_t v235;
  uint64_t v236;
  void **v237;
  unint64_t v238;
  NSObject *v239;
  os_log_type_t v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  NSString v247;
  id v248;
  _QWORD *v249;
  os_log_type_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  _QWORD *v256;
  NSObject *v257;
  os_log_type_t v258;
  uint64_t v259;
  void **v260;
  unint64_t v261;
  _QWORD *v262;
  NSObject *v263;
  os_log_type_t v264;
  uint64_t v265;
  void **v266;
  unint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  NSObject *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  _QWORD *v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  char isEscapingClosureAtFileLocation;
  Swift::String v304;
  Swift::String v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v322;
  _QWORD *v323;
  void *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  char *v334;
  id v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint8_t *v341;
  char *v342;
  char *v343;
  char *v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  __int128 *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  __int128 v358;
  void *v359;
  __int128 v360;
  void *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void (*v370)(char *, uint64_t);
  uint64_t v371;
  __int128 v372;
  char v373;
  _QWORD v374[4];
  void **v375;
  uint64_t v376;
  uint64_t (*v377)(uint64_t);
  void *v378;
  uint64_t (*v379)();
  uint64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int16 v392;
  char v393[8];
  char v394[8];
  _QWORD *v395;
  _QWORD *v396;

  v2 = v1;
  v4 = type metadata accessor for WarmerUpper(0);
  v338 = *(_QWORD *)(v4 - 8);
  v339 = v4;
  __chkstk_darwin(v4);
  v345 = v5;
  v337 = (char *)&v322 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v355 = *(_QWORD *)(v6 - 8);
  v356 = v6;
  v7 = __chkstk_darwin(v6);
  v344 = (char *)&v322 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v350 = (char *)&v322 - v9;
  v10 = sub_100004828(&qword_1006308F0);
  v11 = __chkstk_darwin(v10);
  v343 = (char *)&v322 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v349 = (char *)&v322 - v13;
  v371 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v371 - 8);
  v15 = __chkstk_darwin(v371);
  v17 = (char *)&v322 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v342 = (char *)&v322 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v322 - v21;
  v23 = __chkstk_darwin(v20);
  v340 = (char *)&v322 - v24;
  v25 = __chkstk_darwin(v23);
  v332 = (char *)&v322 - v26;
  v27 = __chkstk_darwin(v25);
  v333 = (char *)&v322 - v28;
  v29 = __chkstk_darwin(v27);
  v357 = (char *)&v322 - v30;
  v31 = __chkstk_darwin(v29);
  v353 = (char *)&v322 - v32;
  v33 = __chkstk_darwin(v31);
  v346 = (char *)&v322 - v34;
  v35 = __chkstk_darwin(v33);
  v362 = (char *)&v322 - v36;
  v37 = __chkstk_darwin(v35);
  v334 = (char *)&v322 - v38;
  v39 = __chkstk_darwin(v37);
  v331 = (char *)&v322 - v40;
  v41 = __chkstk_darwin(v39);
  v348 = (char *)&v322 - v42;
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v322 - v44;
  v46 = defaultLogger()(v43);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Warmup invoked by app install", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  v370 = *(void (**)(char *, uint64_t))(v14 + 8);
  v370(v45, v371);
  result = sub_10037C108();
  v52 = *(_QWORD *)(result + 16);
  if (!v52)
    return swift_bridgeObjectRelease(result);
  v322 = v22;
  v329 = v2;
  v53 = 0;
  v54 = 0;
  v55 = result + 32;
  v323 = &v374[1];
  v351 = a1 + 32;
  v352 = &v386;
  v347 = (uint64_t)&v386 + 8;
  v330 = ACAccountTypeIdentifierIDMS;
  v326 = v345 + 7;
  v354 = a1;
  v328 = (unint64_t *)(a1 + 40);
  v361 = (void *)0x800000010055B520;
  v359 = (void *)0x800000010055B9C0;
  *(_QWORD *)&v51 = 136446210;
  v358 = v51;
  v325 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v51 = 136446466;
  v360 = v51;
  v324 = (void *)0x800000010055B9F0;
  v365 = v17;
  v367 = result + 32;
  v368 = v52;
  v369 = result;
LABEL_8:
  if (v53 >= *(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_158;
  }
  v56 = v55 + 184 * v53;
  v57 = *(_OWORD *)v56;
  v58 = *(_OWORD *)(v56 + 16);
  v59 = *(_OWORD *)(v56 + 48);
  v383 = *(_OWORD *)(v56 + 32);
  v384 = v59;
  v382 = v58;
  v381 = v57;
  v60 = *(_OWORD *)(v56 + 64);
  v61 = *(_OWORD *)(v56 + 80);
  v62 = *(_OWORD *)(v56 + 112);
  v387 = *(_OWORD *)(v56 + 96);
  v388 = v62;
  v385 = v60;
  v386 = v61;
  v63 = *(_OWORD *)(v56 + 128);
  v64 = *(_OWORD *)(v56 + 144);
  v65 = *(_OWORD *)(v56 + 160);
  v392 = *(_WORD *)(v56 + 176);
  v390 = v64;
  v391 = v65;
  v389 = v63;
  if ((BYTE8(v64) & 1) == 0)
    goto LABEL_7;
  v66 = BYTE1(v385);
  v372 = v381;
  v67 = type metadata accessor for DIPAccountManager(0);
  v68 = sub_100384C54(&v381);
  static DIPAccountManager.sharedInstance.getter(&v375, v68);
  v69 = v378;
  v70 = v379;
  sub_10000806C(&v375, (uint64_t)v378);
  dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(v66, v69, v70);
  if (v54)
  {
    v71 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v375);
    defaultLogger()(v71);
    swift_errorRetain(v54);
    sub_100384C54(&v381);
    v72 = swift_errorRetain(v54);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = swift_slowAlloc(22, -1);
      v76 = (void **)swift_slowAlloc(64, -1);
      v375 = v76;
      *(_DWORD *)v75 = v360;
      v77 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v75 + 4) = sub_1000E3AC8(v372, v77, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v77);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      *(_WORD *)(v75 + 12) = 2082;
      v374[0] = v54;
      swift_errorRetain(v54);
      v78 = sub_100004828((uint64_t *)&unk_100633430);
      v79 = String.init<A>(describing:)(v374, v78);
      v81 = v80;
      *(_QWORD *)(v75 + 14) = sub_1000E3AC8(v79, v80, (uint64_t *)&v375);
      v82 = v81;
      v55 = v367;
      swift_bridgeObjectRelease(v82);
      swift_errorRelease(v54);
      swift_errorRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Skipping warmup for %{public}s after app install due to account state: %{public}s", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      v83 = v76;
      v17 = v365;
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      swift_errorRelease(v54);
    }
    else
    {
      swift_errorRelease(v54);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      swift_errorRelease(v54);
      swift_errorRelease(v54);

    }
    v370(v17, v371);
    v54 = 0;
    v52 = v368;
    result = v369;
    goto LABEL_7;
  }
  v363 = v67;
  v366 = 0;
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v375);
  v84 = (id)objc_opt_self(NSUserDefaults);
  v85 = &stru_10062A000;
  v86 = objc_msgSend(v84, "standardUserDefaults");
  v87._countAndFlagsBits = 0xD000000000000027;
  v87._object = v361;
  v88 = NSUserDefaults.internalBool(forKey:)(v87);

  v89 = v362;
  if (v88)
    goto LABEL_14;
  v106 = *((_QWORD *)&v382 + 1);
  v107 = objc_msgSend(v84, "standardUserDefaults");
  v364 = v106;
  v108 = String._bridgeToObjectiveC()();
  v109 = objc_msgSend(v107, "BOOLForKey:", v108);

  if (v109)
  {
    v111 = v348;
    defaultLogger()(v110);
    v112 = sub_100384C54(&v381);
    v113 = Logger.logObject.getter(v112);
    v114 = static os_log_type_t.debug.getter();
    v115 = os_log_type_enabled(v113, v114);
    v17 = v365;
    v55 = v367;
    if (v115)
    {
      v116 = swift_slowAlloc(12, -1);
      v117 = (void **)swift_slowAlloc(32, -1);
      v375 = v117;
      *(_DWORD *)v116 = v358;
      v118 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v116 + 4) = sub_1000E3AC8(v372, v118, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v118);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "User already has an app with %{public}s entitlement; skipping warmup",
        (uint8_t *)v116,
        0xCu);
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1, -1);
      swift_slowDealloc(v116, -1, -1);
    }
    else
    {
      sub_100384D48(&v381);
      sub_100384D48(&v381);
    }

    v370(v111, v371);
    v52 = v368;
    result = v369;
    v54 = v366;
    goto LABEL_7;
  }
  v119 = v382;
  if (*(_QWORD *)(v382 + 16))
  {
    v335 = v84;
    v120 = v354;
    v121 = *(_QWORD *)(v354 + 16);
    if (!v121)
      goto LABEL_57;
    swift_bridgeObjectRetain(v354);
    v122 = v328;
    while (1)
    {
      v123 = *(v122 - 1);
      v124 = *v122;
      v125 = qword_10062F560;
      swift_bridgeObjectRetain(*v122);
      if (v125 != -1)
        swift_once(&qword_10062F560, sub_10041FF94);
      v126 = (id)qword_1006707A8;
      v127 = sub_100425CAC(v123, v124, v119);

      swift_bridgeObjectRelease(v124);
      if ((v127 & 1) != 0)
        break;
      v122 += 2;
      if (!--v121)
      {
        v120 = swift_bridgeObjectRelease(v354);
LABEL_57:
        v176 = v334;
        defaultLogger()(v120);
        v177 = sub_100384C54(&v381);
        v178 = Logger.logObject.getter(v177);
        v179 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v178, v179))
        {
          v180 = swift_slowAlloc(12, -1);
          v181 = (void **)swift_slowAlloc(32, -1);
          v375 = v181;
          *(_DWORD *)v180 = v358;
          v182 = *((_QWORD *)&v372 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
          *(_QWORD *)(v180 + 4) = sub_1000E3AC8(v372, v182, (uint64_t *)&v375);
          swift_bridgeObjectRelease(v182);
          sub_100384D48(&v381);
          sub_100384D48(&v381);
          _os_log_impl((void *)&_mh_execute_header, v178, v179, "No newly installed app contains %{public}s entitlement; skipping warmup",
            (uint8_t *)v180,
            0xCu);
          swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v181, -1, -1);
          swift_slowDealloc(v180, -1, -1);
        }
        else
        {
          sub_100384D48(&v381);
          sub_100384D48(&v381);
        }

        v370(v176, v371);
        v17 = v365;
LABEL_104:
        v52 = v368;
        result = v369;
LABEL_126:
        v54 = v366;
        v55 = v367;
LABEL_7:
        if (++v53 == v52)
          return swift_bridgeObjectRelease(result);
        goto LABEL_8;
      }
    }
    v166 = swift_bridgeObjectRelease(v354);
    v167 = v331;
    defaultLogger()(v166);
    v168 = sub_100384C54(&v381);
    v169 = Logger.logObject.getter(v168);
    v170 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v169, v170))
    {
      v171 = (uint8_t *)swift_slowAlloc(12, -1);
      v172 = (void **)swift_slowAlloc(32, -1);
      v375 = v172;
      v341 = v171;
      *(_DWORD *)v171 = v358;
      v173 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      v374[0] = sub_1000E3AC8(v372, v173, (uint64_t *)&v375);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v374, v323, v171 + 4);
      swift_bridgeObjectRelease(v173);
      sub_100384D48(&v381);
      v174 = v170;
      v175 = v341;
      _os_log_impl((void *)&_mh_execute_header, v169, v174, "Found new app with entitlement for %{public}s", v341, 0xCu);
      swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v172, -1, -1);
      swift_slowDealloc(v175, -1, -1);
    }
    else
    {
      sub_100384D48(&v381);
    }

    v370(v167, v371);
    v84 = v335;
    v85 = &stru_10062A000;
    v226 = objc_msgSend(v335, "standardUserDefaults");
    v227 = String._bridgeToObjectiveC()();
    objc_msgSend(v226, "setBool:forKey:", 1, v227);

    v17 = v365;
  }
  else
  {
    defaultLogger()(v110);
    v149 = sub_100384C54(&v381);
    v150 = Logger.logObject.getter(v149);
    v151 = static os_log_type_t.debug.getter();
    v152 = os_log_type_enabled(v150, v151);
    v17 = v365;
    if (v152)
    {
      v153 = swift_slowAlloc(12, -1);
      v154 = (void **)swift_slowAlloc(32, -1);
      v375 = v154;
      *(_DWORD *)v153 = v358;
      v155 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v153 + 4) = sub_1000E3AC8(v372, v155, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v155);
      sub_100384D48(&v381);
      _os_log_impl((void *)&_mh_execute_header, v150, v151, "No entitlements checking performed for %{public}s", (uint8_t *)v153, 0xCu);
      swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v154, -1, -1);
      swift_slowDealloc(v153, -1, -1);
    }
    else
    {
      sub_100384D48(&v381);
    }

    v370(v89, v371);
    v85 = &stru_10062A000;
  }
LABEL_14:
  v90 = objc_msgSend(v84, v85[130].attr, v322);
  v91._countAndFlagsBits = 0xD000000000000024;
  v91._object = v359;
  v92 = NSUserDefaults.internalBool(forKey:)(v91);

  if (v92)
    goto LABEL_65;
  v93 = v384;
  v94 = objc_msgSend(v84, v85[130].attr);
  v336 = *((_QWORD *)&v93 + 1);
  v95 = String._bridgeToObjectiveC()();
  v96 = objc_msgSend(v94, "BOOLForKey:", v95);

  if (v96)
  {
    v98 = v346;
    defaultLogger()(v97);
    v99 = sub_100384C54(&v381);
    v100 = Logger.logObject.getter(v99);
    v101 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v100, v101))
    {
      v102 = swift_slowAlloc(12, -1);
      v103 = (void **)swift_slowAlloc(32, -1);
      v375 = v103;
      *(_DWORD *)v102 = v358;
      v104 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v102 + 4) = sub_1000E3AC8(v372, v104, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v104);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "User already has an app of %{public}s ; skipping warmup",
        (uint8_t *)v102,
        0xCu);
      swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v103, -1, -1);
      swift_slowDealloc(v102, -1, -1);

      v105 = v346;
LABEL_103:
      v370(v105, v371);
      goto LABEL_104;
    }
    goto LABEL_101;
  }
  v327 = v93;
  v128 = v354;
  v129 = *(uint8_t **)(v354 + 16);
  v98 = v357;
  if (!v129)
  {
LABEL_90:
    defaultLogger()(v128);
    v234 = sub_100384C54(&v381);
    v100 = Logger.logObject.getter(v234);
    v235 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v100, v235))
    {
      v236 = swift_slowAlloc(12, -1);
      v237 = (void **)swift_slowAlloc(32, -1);
      v375 = v237;
      *(_DWORD *)v236 = v358;
      v238 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v236 + 4) = sub_1000E3AC8(v372, v238, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v238);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      v239 = v100;
      v240 = v235;
      v241 = "No newly installed app contains %{public}s bundleID; skipping warmup";
LABEL_100:
      _os_log_impl((void *)&_mh_execute_header, v239, v240, v241, (uint8_t *)v236, 0xCu);
      swift_arrayDestroy(v237, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v237, -1, -1);
      swift_slowDealloc(v236, -1, -1);
LABEL_102:

      v105 = v98;
      goto LABEL_103;
    }
LABEL_101:
    sub_100384D48(&v381);
    sub_100384D48(&v381);
    goto LABEL_102;
  }
  v335 = v84;
  v130 = *((_QWORD *)&v383 + 1);
  v364 = *((_QWORD *)&v383 + 1) + 56;
  swift_bridgeObjectRetain(v354);
  v131 = 0;
  v341 = v129;
  while (1)
  {
    if (!*(_QWORD *)(v130 + 16))
      goto LABEL_32;
    v132 = (uint64_t *)(v351 + 16 * v131);
    v134 = *v132;
    v133 = v132[1];
    Hasher.init(_seed:)(&v375, *(_QWORD *)(v130 + 40));
    swift_bridgeObjectRetain(v133);
    String.hash(into:)(&v375, v134, v133);
    v135 = Hasher._finalize()();
    v136 = -1 << *(_BYTE *)(v130 + 32);
    v137 = v135 & ~v136;
    if (((*(_QWORD *)(v364 + ((v137 >> 3) & 0xFFFFFFFFFFFFF8)) >> v137) & 1) != 0)
      break;
LABEL_31:
    swift_bridgeObjectRelease(v133);
    v17 = v365;
    v98 = v357;
    v129 = v341;
LABEL_32:
    if ((uint8_t *)++v131 == v129)
    {
      v128 = swift_bridgeObjectRelease(v354);
      goto LABEL_90;
    }
  }
  v138 = *(_QWORD *)(v130 + 48);
  v139 = (_QWORD *)(v138 + 16 * v137);
  v140 = v139[1];
  v141 = *v139 == v134 && v140 == v133;
  v142 = v353;
  if (!v141 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v139, v140, v134, v133, 0) & 1) == 0)
  {
    v143 = ~v136;
    for (i = v137 + 1; ; i = v145 + 1)
    {
      v145 = i & v143;
      if (((*(_QWORD *)(v364 + (((i & v143) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v143)) & 1) == 0)
        break;
      v146 = (_QWORD *)(v138 + 16 * v145);
      v147 = v146[1];
      v148 = *v146 == v134 && v147 == v133;
      if (v148 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v146, v147, v134, v133, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v354);
        v142 = v353;
        goto LABEL_53;
      }
    }
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(v354);
LABEL_53:
  v156 = swift_bridgeObjectRelease(v133);
  defaultLogger()(v156);
  v157 = sub_100384C54(&v381);
  v158 = Logger.logObject.getter(v157);
  v159 = static os_log_type_t.debug.getter();
  v160 = os_log_type_enabled(v158, v159);
  v161 = v335;
  if (v160)
  {
    v162 = (uint8_t *)swift_slowAlloc(12, -1);
    v163 = (void **)swift_slowAlloc(32, -1);
    v375 = v163;
    *(_DWORD *)v162 = v358;
    v164 = *((_QWORD *)&v372 + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
    v374[0] = sub_1000E3AC8(v372, v164, (uint64_t *)&v375);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v374, v323, v162 + 4);
    swift_bridgeObjectRelease(v164);
    sub_100384D48(&v381);
    _os_log_impl((void *)&_mh_execute_header, v158, v159, "Found new app with bundleID for %{public}s", v162, 0xCu);
    swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v163, -1, -1);
    swift_slowDealloc(v162, -1, -1);

    v165 = v353;
  }
  else
  {
    sub_100384D48(&v381);

    v165 = v142;
  }
  v370(v165, v371);
  v17 = v365;
  v183 = objc_msgSend(v161, "standardUserDefaults");
  v184 = String._bridgeToObjectiveC()();
  objc_msgSend(v183, "setBool:forKey:", 1, v184);

LABEL_65:
  sub_1000A1F54((uint64_t)v352, (uint64_t)v394, (uint64_t *)&unk_100631300);
  v185 = sub_1000A1F54((uint64_t)v394, (uint64_t)&v395, (uint64_t *)&unk_100631300);
  v186 = v395;
  if (!v395)
  {
LABEL_73:
    sub_1000A1F54(v347, (uint64_t)v393, (uint64_t *)&unk_100631300);
    v201 = sub_1000A1F54((uint64_t)v393, (uint64_t)&v396, (uint64_t *)&unk_100631300);
    v202 = v396;
    if (!v396)
      goto LABEL_94;
    v203 = v344;
    v204 = static Locale.current.getter(v201);
    v205 = v343;
    Locale.region.getter(v204);
    v206 = v203;
    v207 = (uint64_t)v205;
    (*(void (**)(char *, uint64_t))(v355 + 8))(v206, v356);
    v208 = type metadata accessor for Locale.Region(0);
    v209 = *(_QWORD *)(v208 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208) == 1)
    {
      sub_100008030(v207, &qword_1006308F0);
      goto LABEL_94;
    }
    v210 = v207;
    v211 = Locale.Region.identifier.getter();
    v213 = v212;
    (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v210, v208);
    v214 = v202[2];
    if (v214)
    {
      v215 = v202[4];
      v216 = v202[5];
      if (v215 == v211 && v216 == v213
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v215, v216, v211, v213, 0) & 1) != 0)
      {
LABEL_80:
        v217 = swift_bridgeObjectRelease(v213);
        v218 = v332;
        defaultLogger()(v217);
        v219 = sub_100384C54(&v381);
        v220 = Logger.logObject.getter(v219);
        v221 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v220, v221))
        {
          v222 = swift_slowAlloc(12, -1);
          v223 = (void **)swift_slowAlloc(32, -1);
          v375 = v223;
          *(_DWORD *)v222 = v358;
          v224 = *((_QWORD *)&v372 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
          *(_QWORD *)(v222 + 4) = sub_1000E3AC8(v372, v224, (uint64_t *)&v375);
          swift_bridgeObjectRelease(v224);
          sub_100384D48(&v381);
          sub_100384D48(&v381);
          _os_log_impl((void *)&_mh_execute_header, v220, v221, "Is in Denied Region for %{public}s; skipping warmup",
            (uint8_t *)v222,
            0xCu);
          swift_arrayDestroy(v223, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v223, -1, -1);
          swift_slowDealloc(v222, -1, -1);

          v225 = v332;
LABEL_88:
          v370(v225, v371);
LABEL_125:
          v52 = v368;
          result = v369;
          goto LABEL_126;
        }
LABEL_87:
        sub_100384D48(&v381);
        sub_100384D48(&v381);

        v225 = v218;
        goto LABEL_88;
      }
      if (v214 != 1)
      {
        v314 = v202[6];
        v315 = v202[7];
        if (v314 == v211 && v315 == v213)
          goto LABEL_80;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v314, v315, v211, v213, 0);
        if ((result & 1) != 0)
          goto LABEL_80;
        if (v214 != 2)
        {
          v316 = v202 + 9;
          v317 = 2;
          do
          {
            v318 = v317 + 1;
            if (__OFADD__(v317, 1))
              goto LABEL_161;
            v319 = *(v316 - 1);
            v320 = *v316;
            if (v319 == v211 && v320 == v213)
              goto LABEL_80;
            result = _stringCompareWithSmolCheck(_:_:expecting:)(v319, v320, v211, v213, 0);
            if ((result & 1) != 0)
              goto LABEL_80;
            v316 += 2;
            ++v317;
          }
          while (v318 != v214);
        }
      }
    }
    swift_bridgeObjectRelease(v213);
LABEL_94:
    v242 = sub_10037C2D4((uint64_t *)&v381);
    if ((v242 & 1) != 0)
    {
      static DIPAccountManager.sharedInstance.getter(&v375, v242);
      sub_10000806C(&v375, (uint64_t)v378);
      v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v330);
      v245 = v244;
      v246 = (void *)dispatch thunk of DIPAccountManagerProtocol.getAccount(with:)(v243);
      swift_bridgeObjectRelease(v245);
      if (v246)
      {
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v375);
        v247 = String._bridgeToObjectiveC()();
        v248 = objc_msgSend(v246, "accountPropertyForKey:", v247);

        if (v248)
        {
          _bridgeAnyObjectToAny(_:)(v374, v248);
          swift_unknownObjectRelease(v248);
        }
        else
        {
          memset(v374, 0, sizeof(v374));
        }
        sub_1000A1F54((uint64_t)v374, (uint64_t)&v375, (uint64_t *)&unk_1006371E0);
        v253 = v342;
        if (v378)
        {
          v254 = swift_dynamicCast(&v373, &v375, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
          if ((v254 & 1) != 0 && v373 == 1 && (v387 & 1) == 0)
          {
            v255 = v322;
            defaultLogger()(v254);
            v256 = sub_100384C54(&v381);
            v257 = Logger.logObject.getter(v256);
            v258 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v257, v258))
            {
              v259 = swift_slowAlloc(12, -1);
              v260 = (void **)swift_slowAlloc(32, -1);
              v375 = v260;
              *(_DWORD *)v259 = v358;
              v261 = *((_QWORD *)&v372 + 1);
              swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
              *(_QWORD *)(v259 + 4) = sub_1000E3AC8(v372, v261, (uint64_t *)&v375);
              swift_bridgeObjectRelease(v261);
              sub_100384D48(&v381);
              sub_100384D48(&v381);
              _os_log_impl((void *)&_mh_execute_header, v257, v258, "Per IDMS Account underage not allowed for %{public}s; skipping warmup",
                (uint8_t *)v259,
                0xCu);
              swift_arrayDestroy(v260, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v260, -1, -1);
              swift_slowDealloc(v259, -1, -1);

            }
            else
            {

              sub_100384D48(&v381);
              sub_100384D48(&v381);

            }
            v370(v255, v371);
            v17 = v365;
            goto LABEL_125;
          }

        }
        else
        {

          v252 = sub_100008030((uint64_t)&v375, (uint64_t *)&unk_1006371E0);
        }
      }
      else
      {
        v252 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(&v375);
        v253 = v342;
      }
      defaultLogger()(v252);
      v262 = sub_100384C54(&v381);
      v263 = Logger.logObject.getter(v262);
      v264 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v263, v264))
      {
        v265 = swift_slowAlloc(12, -1);
        v266 = (void **)swift_slowAlloc(32, -1);
        v375 = v266;
        *(_DWORD *)v265 = v358;
        v267 = *((_QWORD *)&v372 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
        *(_QWORD *)(v265 + 4) = sub_1000E3AC8(v372, v267, (uint64_t *)&v375);
        swift_bridgeObjectRelease(v267);
        sub_100384D48(&v381);
        _os_log_impl((void *)&_mh_execute_header, v263, v264, "Installed app with %{public}s entitlement, warming up", (uint8_t *)v265, 0xCu);
        swift_arrayDestroy(v266, 1, v325);
        swift_slowDealloc(v266, -1, -1);
        swift_slowDealloc(v265, -1, -1);

        v268 = v342;
      }
      else
      {
        sub_100384D48(&v381);

        v268 = v253;
      }
      v370(v268, v371);
      v269 = (uint64_t)v337;
      if (qword_10062F560 != -1)
        swift_once(&qword_10062F560, sub_10041FF94);
      v270 = (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState") - 1;
      v271 = *(NSObject **)(v329 + *(int *)(v339 + 28));
      sub_1000B6BCC(v329, v269);
      v272 = *(unsigned __int8 *)(v338 + 80);
      v273 = ~v272;
      if ((unint64_t)v270 > 1)
      {
        v288 = (v272 + 194) & v273;
        v289 = (v326 + v288) & 0xFFFFFFFFFFFFFFF8;
        v290 = swift_allocObject(&unk_100614CB0, v289 + 16, v272 | 7);
        v291 = v390;
        v292 = v391;
        v293 = v388;
        *(_OWORD *)(v290 + 144) = v389;
        *(_OWORD *)(v290 + 160) = v291;
        *(_OWORD *)(v290 + 176) = v292;
        v294 = v386;
        v295 = v387;
        v296 = v384;
        *(_OWORD *)(v290 + 80) = v385;
        *(_OWORD *)(v290 + 96) = v294;
        *(_OWORD *)(v290 + 112) = v295;
        *(_OWORD *)(v290 + 128) = v293;
        v297 = v382;
        v298 = v383;
        *(_OWORD *)(v290 + 16) = v381;
        *(_OWORD *)(v290 + 32) = v297;
        *(_WORD *)(v290 + 192) = v392;
        *(_OWORD *)(v290 + 48) = v298;
        *(_OWORD *)(v290 + 64) = v296;
        sub_100384BDC(v269, v290 + v288);
        v299 = (_QWORD *)(v290 + v289);
        *v299 = 0;
        v299[1] = 0;
        v300 = swift_allocObject(&unk_100614CD8, 32, 7);
        *(_QWORD *)(v300 + 16) = sub_100385300;
        *(_QWORD *)(v300 + 24) = v290;
        v379 = sub_1001AEFEC;
        v380 = v300;
        v375 = _NSConcreteStackBlock;
        v376 = 1107296256;
        v377 = sub_100026DC8;
        v378 = &unk_100614CF0;
        v301 = _Block_copy(&v375);
        v302 = v380;
        sub_100384C54(&v381);
        swift_retain(v300);
        swift_release(v302);
        dispatch_sync(v271, v301);
        _Block_release(v301);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v300, "", 72, 774, 26, 1);
        swift_release(v290);
        swift_release(v300);
        result = (uint64_t)sub_100384D48(&v381);
        if ((isEscapingClosureAtFileLocation & 1) == 0)
        {
          v304._countAndFlagsBits = 0x6331363836663933;
          v304._object = (void *)0xE800000000000000;
          v305._countAndFlagsBits = 0xD00000000000001BLL;
          v305._object = v324;
          logMilestone(tag:description:)(v304, v305);
          goto LABEL_125;
        }
LABEL_159:
        __break(1u);
        goto LABEL_160;
      }
      v274 = (v272 + 216) & v273;
      v275 = swift_allocObject(&unk_100614D28, v274 + v345, v272 | 7);
      v276 = v390;
      v277 = v391;
      v278 = v388;
      *(_OWORD *)(v275 + 144) = v389;
      *(_OWORD *)(v275 + 160) = v276;
      *(_OWORD *)(v275 + 176) = v277;
      v279 = v386;
      v280 = v387;
      v281 = v384;
      *(_OWORD *)(v275 + 80) = v385;
      *(_OWORD *)(v275 + 96) = v279;
      *(_OWORD *)(v275 + 112) = v280;
      *(_OWORD *)(v275 + 128) = v278;
      v282 = v382;
      v283 = v383;
      *(_OWORD *)(v275 + 16) = v381;
      *(_OWORD *)(v275 + 32) = v282;
      *(_WORD *)(v275 + 192) = v392;
      *(_OWORD *)(v275 + 48) = v283;
      *(_OWORD *)(v275 + 64) = v281;
      *(_QWORD *)(v275 + 200) = 0;
      *(_QWORD *)(v275 + 208) = 0;
      sub_100384BDC(v269, v275 + v274);
      v284 = swift_allocObject(&unk_100614D50, 32, 7);
      *(_QWORD *)(v284 + 16) = sub_100385318;
      *(_QWORD *)(v284 + 24) = v275;
      v379 = sub_1001AEFEC;
      v380 = v284;
      v375 = _NSConcreteStackBlock;
      v376 = 1107296256;
      v377 = sub_100026DC8;
      v378 = &unk_100614D68;
      v285 = _Block_copy(&v375);
      v286 = v380;
      sub_100384C54(&v381);
      swift_retain(v284);
      swift_release(v286);
      dispatch_sync(v271, v285);
      _Block_release(v285);
      v287 = swift_isEscapingClosureAtFileLocation(v284, "", 72, 749, 26, 1);
      swift_release(v275);
      swift_release(v284);
      sub_100384D48(&v381);
      v52 = v368;
      result = v369;
      v54 = v366;
      v55 = v367;
      if ((v287 & 1) == 0)
        goto LABEL_7;
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    v98 = v340;
    defaultLogger()(v242);
    v249 = sub_100384C54(&v381);
    v100 = Logger.logObject.getter(v249);
    v250 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v100, v250))
    {
      v236 = swift_slowAlloc(12, -1);
      v237 = (void **)swift_slowAlloc(32, -1);
      v375 = v237;
      *(_DWORD *)v236 = v358;
      v251 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v236 + 4) = sub_1000E3AC8(v372, v251, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v251);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      v239 = v100;
      v240 = v250;
      v241 = "User does not have a user defaults key for %{public}s; skipping warmup";
      goto LABEL_100;
    }
    goto LABEL_101;
  }
  v187 = v350;
  v188 = static Locale.current.getter(v185);
  v189 = v349;
  Locale.region.getter(v188);
  v190 = v187;
  v191 = (uint64_t)v189;
  (*(void (**)(char *, uint64_t))(v355 + 8))(v190, v356);
  v192 = type metadata accessor for Locale.Region(0);
  v193 = *(_QWORD *)(v192 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192) == 1)
  {
    sub_100008030(v191, &qword_1006308F0);
    goto LABEL_73;
  }
  v194 = v191;
  v195 = Locale.Region.identifier.getter();
  v197 = v196;
  (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v194, v192);
  v198 = v186[2];
  if (!v198)
    goto LABEL_85;
  v199 = v186[4];
  v200 = v186[5];
  if (v199 == v195 && v200 == v197
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v199, v200, v195, v197, 0) & 1) != 0)
  {
LABEL_72:
    swift_bridgeObjectRelease(v197);
    goto LABEL_73;
  }
  if (v198 == 1)
    goto LABEL_85;
  v306 = v186[6];
  v307 = v186[7];
  if (v306 == v195 && v307 == v197)
    goto LABEL_72;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v306, v307, v195, v197, 0);
  if ((result & 1) != 0)
    goto LABEL_72;
  if (v198 == 2)
  {
LABEL_85:
    v228 = swift_bridgeObjectRelease(v197);
    v218 = v333;
    defaultLogger()(v228);
    v229 = sub_100384C54(&v381);
    v220 = Logger.logObject.getter(v229);
    v230 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v220, v230))
    {
      v231 = swift_slowAlloc(12, -1);
      v232 = (void **)swift_slowAlloc(32, -1);
      v375 = v232;
      *(_DWORD *)v231 = v358;
      v233 = *((_QWORD *)&v372 + 1);
      swift_bridgeObjectRetain(*((_QWORD *)&v372 + 1));
      *(_QWORD *)(v231 + 4) = sub_1000E3AC8(v372, v233, (uint64_t *)&v375);
      swift_bridgeObjectRelease(v233);
      sub_100384D48(&v381);
      sub_100384D48(&v381);
      _os_log_impl((void *)&_mh_execute_header, v220, v230, "Not in Region for %{public}s; skipping warmup",
        (uint8_t *)v231,
        0xCu);
      swift_arrayDestroy(v232, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v232, -1, -1);
      swift_slowDealloc(v231, -1, -1);

      v225 = v333;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  v308 = v186 + 9;
  v309 = 2;
  while (1)
  {
    v310 = v309 + 1;
    if (__OFADD__(v309, 1))
      break;
    v311 = *(v308 - 1);
    v312 = *v308;
    if (v311 == v195 && v312 == v197)
      goto LABEL_72;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v311, v312, v195, v197, 0);
    if ((result & 1) != 0)
      goto LABEL_72;
    v308 += 2;
    ++v309;
    if (v310 == v198)
      goto LABEL_85;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
  return result;
}

uint64_t sub_100378E0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *inited;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  id v46;
  Swift::String v47;
  Swift::Bool v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  unint64_t i;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  NSString v79;
  _QWORD *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v88;
  uint64_t *v89;
  __int128 v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  __int128 v97;
  _QWORD *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107[9];
  _OWORD v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int16 v118;
  char v119[48];

  v98 = a1;
  v1 = type metadata accessor for DispatchQoS.QoSClass(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v94 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v91 = (char *)&v88 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v88 - v12;
  v14 = defaultLogger()(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "WarmerUpper invoked by app uninstall", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v96 = *(void (**)(char *, uint64_t))(v6 + 8);
  v96(v13, v5);
  v18 = os_transaction_create("IdentityProofingWalletDeletionManager");
  v19 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v20 = swift_allocObject(v19, 24, 7);
  *(_QWORD *)(v20 + 16) = 0;
  sub_1000257E0();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchQoS.QoSClass.default(_:), v1);
  v21 = static OS_dispatch_queue.global(qos:)(v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v22 = sub_1004F5D80(0, v20, v21);
  v23 = type metadata accessor for IdentityProofingWalletDeletionManager();
  inited = (_QWORD *)swift_initStackObject(v23, v119);
  inited[3] = 0xD000000000000012;
  inited[4] = 0x8000000100551050;
  inited[2] = v22;
  v25 = v98;
  sub_100399850(v98);
  swift_release(v22);
  swift_unknownObjectRelease(v18);
  v26 = sub_10037C108();
  v28 = v26;
  v29 = *(_QWORD *)(v26 + 16);
  if (v29)
  {
    v30 = v5;
    v31 = 0;
    v32 = v26 + 32;
    v104 = v25 + 4;
    v89 = v107;
    v101 = 0xD000000000000024;
    v100 = (void *)0x800000010055B9C0;
    *(_QWORD *)&v27 = 136446210;
    v90 = v27;
    v88 = (char *)&type metadata for Any + 8;
    v33 = v25;
    v34 = v94;
    v95 = v30;
    v92 = v29;
    v93 = v26;
    v99 = v26 + 32;
    while (1)
    {
      v35 = v32 + 184 * v31;
      v36 = *(_OWORD *)v35;
      v37 = *(_OWORD *)(v35 + 16);
      v38 = *(_OWORD *)(v35 + 48);
      v109 = *(_OWORD *)(v35 + 32);
      v110 = v38;
      v108[0] = v36;
      v108[1] = v37;
      v39 = *(_OWORD *)(v35 + 64);
      v40 = *(_OWORD *)(v35 + 80);
      v41 = *(_OWORD *)(v35 + 112);
      v113 = *(_OWORD *)(v35 + 96);
      v114 = v41;
      v111 = v39;
      v112 = v40;
      v42 = *(_OWORD *)(v35 + 128);
      v43 = *(_OWORD *)(v35 + 144);
      v44 = *(_OWORD *)(v35 + 160);
      v118 = *(_WORD *)(v35 + 176);
      v116 = v43;
      v117 = v44;
      v115 = v42;
      if ((BYTE8(v43) & 1) != 0)
      {
        v105 = v31;
        v45 = (void *)objc_opt_self(NSUserDefaults);
        sub_100384C54(v108);
        v102 = v45;
        v46 = objc_msgSend(v45, "standardUserDefaults");
        v47._object = v100;
        v47._countAndFlagsBits = v101;
        v48 = NSUserDefaults.internalBool(forKey:)(v47);

        if (v48)
        {
          sub_100384D48(v108);
          goto LABEL_36;
        }
        v97 = v108[0];
        v50 = v33[2];
        if (v50)
        {
          v51 = *((_QWORD *)&v109 + 1);
          v52 = *((_QWORD *)&v109 + 1) + 56;
          swift_bridgeObjectRetain(v33);
          v53 = 0;
          v103 = v50;
          while (1)
          {
            if (*(_QWORD *)(v51 + 16))
            {
              v54 = &v104[2 * v53];
              v55 = *v54;
              v56 = v54[1];
              Hasher.init(_seed:)(v107, *(_QWORD *)(v51 + 40));
              swift_bridgeObjectRetain(v56);
              String.hash(into:)(v107, v55, v56);
              v57 = Hasher._finalize()();
              v58 = -1 << *(_BYTE *)(v51 + 32);
              v59 = v57 & ~v58;
              if (((*(_QWORD *)(v52 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) != 0)
              {
                v60 = *(_QWORD *)(v51 + 48);
                v61 = (_QWORD *)(v60 + 16 * v59);
                v62 = v61[1];
                v63 = *v61 == v55 && v62 == v56;
                if (v63 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v61, v62, v55, v56, 0) & 1) != 0)
                {
LABEL_27:
                  swift_bridgeObjectRelease(v98);
                  v70 = v91;
                  v71 = swift_bridgeObjectRelease(v56);
                  defaultLogger()(v71);
                  v72 = sub_100384C54(v108);
                  v73 = Logger.logObject.getter(v72);
                  v74 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v73, v74))
                  {
                    v75 = (uint8_t *)swift_slowAlloc(12, -1);
                    v76 = swift_slowAlloc(32, -1);
                    v107[0] = v76;
                    *(_DWORD *)v75 = v90;
                    v77 = *((_QWORD *)&v97 + 1);
                    swift_bridgeObjectRetain(*((_QWORD *)&v97 + 1));
                    v106 = sub_1000E3AC8(v97, v77, v107);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v89, v75 + 4);
                    swift_bridgeObjectRelease(v77);
                    sub_100384D48(v108);
                    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Found uninstalling app with bundleID for %{public}s", v75, 0xCu);
                    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v76, -1, -1);
                    swift_slowDealloc(v75, -1, -1);
                  }
                  else
                  {
                    sub_100384D48(v108);
                  }

                  v30 = v95;
                  v96(v70, v95);
                  v28 = v93;
                  v34 = v94;
                  v29 = v92;
                  v78 = objc_msgSend(v102, "standardUserDefaults");
                  v79 = String._bridgeToObjectiveC()();
                  sub_100384D48(v108);
                  objc_msgSend(v78, "removeObjectForKey:", v79);

                  v33 = v98;
                  goto LABEL_36;
                }
                v64 = ~v58;
                for (i = v59 + 1; ; i = v66 + 1)
                {
                  v66 = i & v64;
                  if (((*(_QWORD *)(v52 + (((i & v64) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v64)) & 1) == 0)
                    break;
                  v67 = (_QWORD *)(v60 + 16 * v66);
                  v68 = v67[1];
                  v69 = *v67 == v55 && v68 == v56;
                  if (v69 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v67, v68, v55, v56, 0) & 1) != 0)
                    goto LABEL_27;
                }
              }
              swift_bridgeObjectRelease(v56);
              v50 = v103;
            }
            if (++v53 == v50)
            {
              v33 = v98;
              v49 = swift_bridgeObjectRelease(v98);
              v34 = v94;
              v30 = v95;
              v29 = v92;
              v28 = v93;
              break;
            }
          }
        }
        defaultLogger()(v49);
        v80 = sub_100384C54(v108);
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = swift_slowAlloc(12, -1);
          v84 = swift_slowAlloc(32, -1);
          v107[0] = v84;
          *(_DWORD *)v83 = v90;
          v85 = *((_QWORD *)&v97 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&v97 + 1));
          *(_QWORD *)(v83 + 4) = sub_1000E3AC8(v97, v85, v107);
          swift_bridgeObjectRelease(v85);
          sub_100384D48(v108);
          sub_100384D48(v108);
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Nothing done as it wasn't of interest for %{public}s", (uint8_t *)v83, 0xCu);
          swift_arrayDestroy(v84, 1, v88);
          swift_slowDealloc(v84, -1, -1);
          v86 = v83;
          v30 = v95;
          swift_slowDealloc(v86, -1, -1);
        }
        else
        {
          sub_100384D48(v108);
          sub_100384D48(v108);
        }

        v96(v34, v30);
LABEL_36:
        v31 = v105;
        v32 = v99;
      }
      if (++v31 == v29)
        break;
      if (v31 >= *(_QWORD *)(v28 + 16))
      {
        __break(1u);
        return swift_bridgeObjectRelease(v28);
      }
    }
  }
  return swift_bridgeObjectRelease(v28);
}

_QWORD *sub_1003795B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char v39;
  _QWORD *result;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char isEscapingClosureAtFileLocation;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **aBlock;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  uint64_t (*v66)();
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;

  v1 = v0;
  v2 = type metadata accessor for WarmerUpper(0);
  v61 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v60 = v3;
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = defaultLogger()(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Warmup invoked by account event", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v57 = sub_10037C108();
  v14 = *(_QWORD *)(v57 + 16);
  if (!v14)
    return (_QWORD *)swift_bridgeObjectRelease(v57);
  v15 = v57 + 32;
  v59 = v60 + 7;
  v58 = (void *)0x800000010055B860;
  while (1)
  {
    v16 = *(_OWORD *)v15;
    v17 = *(_OWORD *)(v15 + 16);
    v18 = *(_OWORD *)(v15 + 48);
    v70 = *(_OWORD *)(v15 + 32);
    v71 = v18;
    v69 = v17;
    v68 = v16;
    v19 = *(_OWORD *)(v15 + 64);
    v20 = *(_OWORD *)(v15 + 80);
    v21 = *(_OWORD *)(v15 + 112);
    v74 = *(_OWORD *)(v15 + 96);
    v75 = v21;
    v72 = v19;
    v73 = v20;
    v22 = *(_OWORD *)(v15 + 128);
    v23 = *(_OWORD *)(v15 + 144);
    v24 = *(_OWORD *)(v15 + 160);
    v79 = *(_WORD *)(v15 + 176);
    v77 = v23;
    v78 = v24;
    v76 = v22;
    sub_100384C54(&v68);
    if ((sub_10037C720((uint64_t)&v68, 1) & 1) == 0)
    {
      sub_100384D48(&v68);
      goto LABEL_6;
    }
    if (qword_10062F560 != -1)
      swift_once(&qword_10062F560, sub_10041FF94);
    v25 = (char *)objc_msgSend((id)objc_opt_self(DIPMobileKeyBag), "deviceLockState") - 1;
    v26 = *(NSObject **)(v1 + *(int *)(v2 + 28));
    sub_1000B6BCC(v1, (uint64_t)v4);
    v27 = *(unsigned __int8 *)(v61 + 80);
    v28 = ~v27;
    if ((unint64_t)v25 <= 1)
      break;
    v41 = (v27 + 194) & v28;
    v42 = (v59 + v41) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_1006149E0, v42 + 16, v27 | 7);
    v44 = v77;
    *(_OWORD *)(v43 + 144) = v76;
    *(_OWORD *)(v43 + 160) = v44;
    *(_OWORD *)(v43 + 176) = v78;
    *(_WORD *)(v43 + 192) = v79;
    v45 = v73;
    *(_OWORD *)(v43 + 80) = v72;
    *(_OWORD *)(v43 + 96) = v45;
    v46 = v75;
    *(_OWORD *)(v43 + 112) = v74;
    *(_OWORD *)(v43 + 128) = v46;
    v47 = v69;
    *(_OWORD *)(v43 + 16) = v68;
    *(_OWORD *)(v43 + 32) = v47;
    v48 = v71;
    *(_OWORD *)(v43 + 48) = v70;
    *(_OWORD *)(v43 + 64) = v48;
    sub_100384BDC((uint64_t)v4, v43 + v41);
    v49 = (_QWORD *)(v43 + v42);
    *v49 = 0;
    v49[1] = 0;
    v50 = swift_allocObject(&unk_100614A08, 32, 7);
    *(_QWORD *)(v50 + 16) = sub_100385300;
    *(_QWORD *)(v50 + 24) = v43;
    v66 = sub_1001AEFEC;
    v67 = v50;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_100026DC8;
    v65 = &unk_100614A20;
    v51 = _Block_copy(&aBlock);
    v52 = v67;
    sub_100384C54(&v68);
    swift_retain(v50);
    swift_release(v52);
    dispatch_sync(v26, v51);
    _Block_release(v51);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v50, "", 72, 774, 26, 1);
    swift_release(v43);
    swift_release(v50);
    result = sub_100384D48(&v68);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      goto LABEL_16;
    v54._countAndFlagsBits = 0x6531656436303935;
    v54._object = (void *)0xE800000000000000;
    v55._countAndFlagsBits = 0xD00000000000001DLL;
    v55._object = v58;
    logMilestone(tag:description:)(v54, v55);
LABEL_6:
    v15 += 184;
    if (!--v14)
      return (_QWORD *)swift_bridgeObjectRelease(v57);
  }
  v29 = (v27 + 216) & v28;
  v30 = swift_allocObject(&unk_100614A58, v29 + v60, v27 | 7);
  v31 = v77;
  *(_OWORD *)(v30 + 144) = v76;
  *(_OWORD *)(v30 + 160) = v31;
  *(_OWORD *)(v30 + 176) = v78;
  *(_WORD *)(v30 + 192) = v79;
  v32 = v73;
  *(_OWORD *)(v30 + 80) = v72;
  *(_OWORD *)(v30 + 96) = v32;
  v33 = v75;
  *(_OWORD *)(v30 + 112) = v74;
  *(_OWORD *)(v30 + 128) = v33;
  v34 = v69;
  *(_OWORD *)(v30 + 16) = v68;
  *(_OWORD *)(v30 + 32) = v34;
  v35 = v71;
  *(_OWORD *)(v30 + 48) = v70;
  *(_OWORD *)(v30 + 64) = v35;
  *(_QWORD *)(v30 + 200) = 0;
  *(_QWORD *)(v30 + 208) = 0;
  sub_100384BDC((uint64_t)v4, v30 + v29);
  v36 = swift_allocObject(&unk_100614A80, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_100385318;
  *(_QWORD *)(v36 + 24) = v30;
  v66 = sub_1001AEFEC;
  v67 = v36;
  aBlock = _NSConcreteStackBlock;
  v63 = 1107296256;
  v64 = sub_100026DC8;
  v65 = &unk_100614A98;
  v37 = _Block_copy(&aBlock);
  v38 = v67;
  sub_100384C54(&v68);
  swift_retain(v36);
  swift_release(v38);
  dispatch_sync(v26, v37);
  _Block_release(v37);
  v39 = swift_isEscapingClosureAtFileLocation(v36, "", 72, 749, 26, 1);
  swift_release(v30);
  swift_release(v36);
  result = sub_100384D48(&v68);
  if ((v39 & 1) == 0)
    goto LABEL_6;
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_100379B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  Swift::String v24;
  Swift::Bool v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *result;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  dispatch_queue_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  dispatch_queue_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  void *v117;
  uint64_t (*v118)();
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int16 v131;

  v104 = a1;
  v105 = a2;
  v2 = type metadata accessor for WarmerUpper(0);
  v102 = *(_QWORD *)(v2 - 8);
  v103 = v2;
  __chkstk_darwin(v2);
  v100 = (uint64_t)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v3;
  v114 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v114 - 8);
  v5 = __chkstk_darwin(v114);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v96 - v9;
  v11 = __chkstk_darwin(v8);
  v109 = (char *)&v96 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v96 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v96 - v17;
  v19 = defaultLogger()(v16);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Device locked warmup invoked", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v112 = *(void (**)(char *, uint64_t))(v4 + 8);
  v112(v18, v114);
  v23 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v24._object = (void *)0x800000010055B940;
  v24._countAndFlagsBits = 0xD000000000000023;
  v25 = NSUserDefaults.internalBool(forKey:)(v24);

  if (!v25)
  {
    v32 = sub_10037C108();
    v34 = v32;
    v35 = *(_QWORD *)(v32 + 16);
    if (!v35)
      return (_QWORD *)swift_bridgeObjectRelease(v34);
    v99 = v10;
    v108 = v7;
    v113 = 0;
    v36 = 32;
    *(_QWORD *)&v33 = 136446210;
    v106 = v33;
    v97 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v33 = 136446466;
    v98 = v33;
    v37 = v109;
    v111 = v32;
    while (1)
    {
      v38 = *(_OWORD *)(v34 + v36);
      v39 = *(_OWORD *)(v34 + v36 + 16);
      v40 = *(_OWORD *)(v34 + v36 + 48);
      v122 = *(_OWORD *)(v34 + v36 + 32);
      v123 = v40;
      v120 = v38;
      v121 = v39;
      v41 = *(_OWORD *)(v34 + v36 + 64);
      v42 = *(_OWORD *)(v34 + v36 + 80);
      v43 = *(_OWORD *)(v34 + v36 + 112);
      v126 = *(_OWORD *)(v34 + v36 + 96);
      v127 = v43;
      v124 = v41;
      v125 = v42;
      v44 = *(_OWORD *)(v34 + v36 + 128);
      v45 = *(_OWORD *)(v34 + v36 + 144);
      v46 = *(_OWORD *)(v34 + v36 + 160);
      v131 = *(_WORD *)(v34 + v36 + 176);
      v129 = v45;
      v130 = v46;
      v128 = v44;
      v47 = *((_QWORD *)&v120 + 1);
      v48 = (dispatch_queue_t)v120;
      if ((v124 & 1) != 0)
      {
        v110 = (dispatch_queue_t)v120;
        v49 = BYTE1(v124);
        type metadata accessor for DIPAccountManager(0);
        v50 = sub_100384C54(&v120);
        static DIPAccountManager.sharedInstance.getter(v116, v50);
        v51 = v117;
        v52 = v118;
        sub_10000806C(v116, (uint64_t)v117);
        v53 = v113;
        dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(v49, v51, v52);
        v54 = v53;
        if (v53)
        {
          v55 = _s8coreidvd24DigitalPresentmentHelperVwxx_0(v116);
          v56 = v108;
          defaultLogger()(v55);
          swift_errorRetain(v54);
          sub_100384C54(&v120);
          v57 = swift_errorRetain(v54);
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v58, v59))
          {
            v60 = swift_slowAlloc(22, -1);
            v61 = swift_slowAlloc(64, -1);
            v116[0] = v61;
            *(_DWORD *)v60 = v98;
            swift_bridgeObjectRetain(v47);
            *(_QWORD *)(v60 + 4) = sub_1000E3AC8((uint64_t)v110, v47, v116);
            swift_bridgeObjectRelease(v47);
            sub_100384D48(&v120);
            sub_100384D48(&v120);
            *(_WORD *)(v60 + 12) = 2082;
            v115 = v54;
            swift_errorRetain(v54);
            v62 = sub_100004828((uint64_t *)&unk_100633430);
            v63 = String.init<A>(describing:)(&v115, v62);
            v65 = v64;
            *(_QWORD *)(v60 + 14) = sub_1000E3AC8(v63, v64, v116);
            swift_bridgeObjectRelease(v65);
            swift_errorRelease(v54);
            swift_errorRelease(v54);
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Skipping device locked warmup for %{public}s due to account state: %{public}s", (uint8_t *)v60, 0x16u);
            swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v61, -1, -1);
            swift_slowDealloc(v60, -1, -1);

            swift_errorRelease(v54);
          }
          else
          {
            swift_errorRelease(v54);
            sub_100384D48(&v120);
            sub_100384D48(&v120);
            swift_errorRelease(v54);
            swift_errorRelease(v54);

          }
          v112(v56, v114);
          v113 = 0;
          v37 = v109;
          v34 = v111;
          goto LABEL_11;
        }
        v113 = 0;
        _s8coreidvd24DigitalPresentmentHelperVwxx_0(v116);
        v37 = v109;
        v48 = v110;
        v34 = v111;
      }
      else
      {
        sub_100384C54(&v120);
      }
      v66 = sub_10037DAD8((uint64_t *)&v120);
      if ((v66 & 1) != 0)
      {
        v67 = sub_10037C2D4((uint64_t *)&v120);
        if ((v67 & 1) != 0)
        {
          v110 = *(dispatch_queue_t *)(v107 + *(int *)(v103 + 28));
          v68 = v100;
          sub_1000B6BCC(v107, v100);
          v69 = *(unsigned __int8 *)(v102 + 80);
          v70 = (v69 + 216) & ~v69;
          v71 = swift_allocObject(&unk_100614B98, v70 + v101, v69 | 7);
          v72 = v129;
          *(_OWORD *)(v71 + 144) = v128;
          *(_OWORD *)(v71 + 160) = v72;
          *(_OWORD *)(v71 + 176) = v130;
          *(_WORD *)(v71 + 192) = v131;
          v73 = v125;
          *(_OWORD *)(v71 + 80) = v124;
          *(_OWORD *)(v71 + 96) = v73;
          v74 = v127;
          *(_OWORD *)(v71 + 112) = v126;
          *(_OWORD *)(v71 + 128) = v74;
          v75 = v121;
          *(_OWORD *)(v71 + 16) = v120;
          *(_OWORD *)(v71 + 32) = v75;
          v76 = v123;
          *(_OWORD *)(v71 + 48) = v122;
          *(_OWORD *)(v71 + 64) = v76;
          v77 = v104;
          v78 = v105;
          *(_QWORD *)(v71 + 200) = v104;
          *(_QWORD *)(v71 + 208) = v78;
          sub_100384BDC(v68, v71 + v70);
          v79 = swift_allocObject(&unk_100614BC0, 32, 7);
          *(_QWORD *)(v79 + 16) = sub_100385318;
          *(_QWORD *)(v79 + 24) = v71;
          v118 = sub_1001AEFEC;
          v119 = v79;
          v116[0] = (uint64_t)_NSConcreteStackBlock;
          v116[1] = 1107296256;
          v116[2] = (uint64_t)sub_100026DC8;
          v117 = &unk_100614BD8;
          v80 = _Block_copy(v116);
          v81 = v119;
          sub_100384C54(&v120);
          sub_10002EF2C(v77, v78);
          swift_retain(v79);
          swift_release(v81);
          dispatch_sync(v110, v80);
          _Block_release(v80);
          LOBYTE(v77) = swift_isEscapingClosureAtFileLocation(v79, "", 72, 749, 26, 1);
          swift_release(v71);
          v82 = v79;
          v34 = v111;
          swift_release(v82);
          result = sub_100384D48(&v120);
          if ((v77 & 1) != 0)
          {
            __break(1u);
            return result;
          }
        }
        else
        {
          v89 = v99;
          defaultLogger()(v67);
          v90 = sub_100384C54(&v120);
          v91 = Logger.logObject.getter(v90);
          v92 = static os_log_type_t.debug.getter(v91);
          if (os_log_type_enabled(v91, v92))
          {
            v93 = swift_slowAlloc(12, -1);
            v94 = swift_slowAlloc(32, -1);
            v116[0] = v94;
            *(_DWORD *)v93 = v106;
            swift_bridgeObjectRetain(v47);
            *(_QWORD *)(v93 + 4) = sub_1000E3AC8((uint64_t)v48, v47, v116);
            swift_bridgeObjectRelease(v47);
            sub_100384D48(&v120);
            sub_100384D48(&v120);
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "User does not have a user defaults key for %{public}s; skipping warmup",
              (uint8_t *)v93,
              0xCu);
            swift_arrayDestroy(v94, 1, v97);
            swift_slowDealloc(v94, -1, -1);
            v95 = v93;
            v34 = v111;
            swift_slowDealloc(v95, -1, -1);
          }
          else
          {
            sub_100384D48(&v120);
            sub_100384D48(&v120);
          }

          v112(v89, v114);
          v37 = v109;
        }
      }
      else
      {
        defaultLogger()(v66);
        v83 = sub_100384C54(&v120);
        v84 = Logger.logObject.getter(v83);
        v85 = static os_log_type_t.debug.getter(v84);
        if (os_log_type_enabled(v84, v85))
        {
          v86 = swift_slowAlloc(12, -1);
          v87 = swift_slowAlloc(32, -1);
          v116[0] = v87;
          *(_DWORD *)v86 = v106;
          swift_bridgeObjectRetain(v47);
          *(_QWORD *)(v86 + 4) = sub_1000E3AC8((uint64_t)v48, v47, v116);
          swift_bridgeObjectRelease(v47);
          sub_100384D48(&v120);
          sub_100384D48(&v120);
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Skipping device locked warmup for %{public}s because no app with the entitlement is installed", (uint8_t *)v86, 0xCu);
          swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v87, -1, -1);
          v88 = v86;
          v34 = v111;
          swift_slowDealloc(v88, -1, -1);
        }
        else
        {
          sub_100384D48(&v120);
          sub_100384D48(&v120);
        }

        v112(v37, v114);
      }
LABEL_11:
      v36 += 184;
      if (!--v35)
        return (_QWORD *)swift_bridgeObjectRelease(v34);
    }
  }
  v27 = defaultLogger()(v26);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Skipping background locked warmup due to internal defaults setting", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  return (_QWORD *)((uint64_t (*)(char *, uint64_t))v112)(v15, v114);
}

uint64_t sub_10037A4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(char *, uint64_t);
  id v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[5];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int16 v76;

  v3 = v2;
  v61 = a2;
  v62 = a1;
  v60 = type metadata accessor for WarmerUpper(0);
  v59 = *(_QWORD *)(v60 - 8);
  v4 = *(_QWORD *)(v59 + 64);
  __chkstk_darwin(v60);
  v58 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v57 - v11;
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Device unlocked warmup invoked", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v12, v5);
  v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v19._object = (void *)0x800000010055B940;
  v19._countAndFlagsBits = 0xD000000000000023;
  v20 = NSUserDefaults.internalBool(forKey:)(v19);

  if (v20)
  {
    v22 = defaultLogger()(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Skipping background unlocked warmup due to internal defaults setting", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v17)(v9, v5);
  }
  v27 = sub_10037C108();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
    return swift_bridgeObjectRelease(v27);
  v57 = v4 + 7;
  v29 = 32;
  v30 = v62;
  while (1)
  {
    v31 = *(_OWORD *)(v27 + v29);
    v32 = *(_OWORD *)(v27 + v29 + 16);
    v33 = *(_OWORD *)(v27 + v29 + 48);
    v67 = *(_OWORD *)(v27 + v29 + 32);
    v68 = v33;
    v66 = v32;
    v65 = v31;
    v34 = *(_OWORD *)(v27 + v29 + 64);
    v35 = *(_OWORD *)(v27 + v29 + 80);
    v36 = *(_OWORD *)(v27 + v29 + 112);
    v71 = *(_OWORD *)(v27 + v29 + 96);
    v72 = v36;
    v69 = v34;
    v70 = v35;
    v37 = *(_OWORD *)(v27 + v29 + 128);
    v38 = *(_OWORD *)(v27 + v29 + 144);
    v39 = *(_OWORD *)(v27 + v29 + 160);
    v76 = *(_WORD *)(v27 + v29 + 176);
    v74 = v38;
    v75 = v39;
    v73 = v37;
    sub_100384C54(&v65);
    if ((sub_10037C720((uint64_t)&v65, v30 == 0) & 1) != 0)
      break;
    sub_100384D48(&v65);
LABEL_10:
    v29 += 184;
    if (!--v28)
      return swift_bridgeObjectRelease(v27);
  }
  v40 = *(NSObject **)(v3 + *(int *)(v60 + 28));
  v41 = v58;
  sub_1000B6BCC(v3, v58);
  v42 = *(unsigned __int8 *)(v59 + 80);
  v43 = (v42 + 194) & ~v42;
  v44 = (v57 + v43) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject(&unk_100614B20, v44 + 16, v42 | 7);
  v46 = v74;
  *(_OWORD *)(v45 + 144) = v73;
  *(_OWORD *)(v45 + 160) = v46;
  *(_OWORD *)(v45 + 176) = v75;
  *(_WORD *)(v45 + 192) = v76;
  v47 = v70;
  *(_OWORD *)(v45 + 80) = v69;
  *(_OWORD *)(v45 + 96) = v47;
  v48 = v72;
  *(_OWORD *)(v45 + 112) = v71;
  *(_OWORD *)(v45 + 128) = v48;
  v49 = v66;
  *(_OWORD *)(v45 + 16) = v65;
  *(_OWORD *)(v45 + 32) = v49;
  v50 = v68;
  *(_OWORD *)(v45 + 48) = v67;
  *(_OWORD *)(v45 + 64) = v50;
  sub_100384BDC(v41, v45 + v43);
  v51 = (uint64_t *)(v45 + v44);
  v52 = v61;
  *v51 = v30;
  v51[1] = v52;
  v53 = swift_allocObject(&unk_100614B48, 32, 7);
  *(_QWORD *)(v53 + 16) = sub_100385300;
  *(_QWORD *)(v53 + 24) = v45;
  aBlock[4] = sub_1001AEFEC;
  v64 = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026DC8;
  aBlock[3] = &unk_100614B60;
  v54 = _Block_copy(aBlock);
  v55 = v64;
  sub_100384C54(&v65);
  sub_10002EF2C(v62, v52);
  swift_retain(v53);
  swift_release(v55);
  dispatch_sync(v40, v54);
  v56 = v54;
  v30 = v62;
  _Block_release(v56);
  LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v53, "", 72, 774, 26, 1);
  swift_release(v45);
  swift_release(v53);
  sub_100384D48(&v65);
  if ((v40 & 1) == 0)
    goto LABEL_10;
  __break(1u);
  return swift_bridgeObjectRelease(v27);
}

uint64_t sub_10037A9AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int16 v61;

  v2 = v1;
  v47 = type metadata accessor for WarmerUpper(0);
  v46 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v45 = v4;
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = defaultLogger()(v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    LODWORD(v44) = v13;
    v14 = (_DWORD *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v50 = v43;
    *v14 = 136446210;
    __asm { BR              X10 }
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = sub_10037C108();
  v16 = *(_QWORD *)(v15 + 16);
  v43 = v15;
  if (v16)
  {
    v44 = a1;
    v17 = 0;
    v18 = 0;
    v19 = v15 + 32;
    do
    {
      v20 = *(_OWORD *)v19;
      v21 = *(_OWORD *)(v19 + 16);
      v22 = *(_OWORD *)(v19 + 48);
      v52 = *(_OWORD *)(v19 + 32);
      v53 = v22;
      v51 = v21;
      v50 = v20;
      v23 = *(_OWORD *)(v19 + 64);
      v24 = *(_OWORD *)(v19 + 80);
      v25 = *(_OWORD *)(v19 + 112);
      v56 = *(_OWORD *)(v19 + 96);
      v57 = v25;
      v54 = v23;
      v55 = v24;
      v26 = *(_OWORD *)(v19 + 128);
      v27 = *(_OWORD *)(v19 + 144);
      v28 = *(_OWORD *)(v19 + 160);
      v61 = *(_WORD *)(v19 + 176);
      v59 = v27;
      v60 = v28;
      v58 = v26;
      if ((BYTE9(v27) & 1) != 0)
      {
        v29 = *(NSObject **)(v2 + *(int *)(v47 + 28));
        sub_1000B6BCC(v2, (uint64_t)v5);
        v30 = *(unsigned __int8 *)(v46 + 80);
        v31 = (v30 + 195) & ~v30;
        v32 = swift_allocObject(&unk_100614928, v31 + v45, v30 | 7);
        v33 = v59;
        *(_OWORD *)(v32 + 144) = v58;
        *(_OWORD *)(v32 + 160) = v33;
        *(_OWORD *)(v32 + 176) = v60;
        *(_WORD *)(v32 + 192) = v61;
        v34 = v55;
        *(_OWORD *)(v32 + 80) = v54;
        *(_OWORD *)(v32 + 96) = v34;
        v35 = v57;
        *(_OWORD *)(v32 + 112) = v56;
        *(_OWORD *)(v32 + 128) = v35;
        v36 = v51;
        *(_OWORD *)(v32 + 16) = v50;
        *(_OWORD *)(v32 + 32) = v36;
        v37 = v53;
        *(_OWORD *)(v32 + 48) = v52;
        *(_OWORD *)(v32 + 64) = v37;
        *(_BYTE *)(v32 + 194) = v44;
        sub_100384BDC((uint64_t)v5, v32 + v31);
        sub_100384C54(&v50);
        sub_10002F034((uint64_t)v17, v18);
        v38 = swift_allocObject(&unk_100614950, 32, 7);
        *(_QWORD *)(v38 + 16) = sub_100384C20;
        *(_QWORD *)(v38 + 24) = v32;
        aBlock[4] = sub_1000C00CC;
        v49 = v38;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100026DC8;
        aBlock[3] = &unk_100614968;
        v39 = _Block_copy(aBlock);
        v40 = v49;
        swift_retain(v38);
        swift_release(v40);
        dispatch_sync(v29, v39);
        _Block_release(v39);
        LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v38, "", 72, 599, 30, 1);
        swift_release(v38);
        if ((v40 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x10037AE84);
        }
        v17 = sub_100384C20;
        v18 = v32;
      }
      v19 += 184;
      --v16;
    }
    while (v16);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  swift_bridgeObjectRelease(v43);
  return sub_10002F034((uint64_t)v17, v18);
}

double sub_10037AE98()
{
  unint64_t v0;
  Swift::Int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v0 = 0xEB00000000454C42;
  v1 = sub_100404074((uint64_t)&off_100600CB0);
  swift_arrayDestroy(&unk_100600CD0, 1, &type metadata for String);
  v2 = sub_100004828(&qword_100640CA0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10051FFB0;
  v4 = sub_100456E78();
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    v7 = 0x414C494156414E55;
    v6 = 0xEB00000000454C42;
  }
  swift_release(v4);
  *(_QWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 40) = v6;
  v8 = sub_100456E78();
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 24);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    v0 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v0);
    swift_release(v9);
  }
  else
  {
    swift_release(v8);
    v11 = 0x414C494156414E55;
  }
  *(_QWORD *)&xmmword_100670390 = 0x6E6F7275626974;
  *((_QWORD *)&xmmword_100670390 + 1) = 0xE700000000000000;
  qword_1006703A0 = v1;
  unk_1006703A8 = 0xD000000000000015;
  *(_QWORD *)&xmmword_1006703B0 = 0x800000010055B550;
  *((_QWORD *)&xmmword_1006703B0 + 1) = &_swiftEmptySetSingleton;
  *(_QWORD *)&xmmword_1006703C0 = 0;
  *((_QWORD *)&xmmword_1006703C0 + 1) = 0xE000000000000000;
  LOWORD(xmmword_1006703D0) = 1;
  xmmword_1006703E0 = 0uLL;
  *((_QWORD *)&xmmword_1006703D0 + 1) = 0;
  LOWORD(xmmword_1006703F0) = 1;
  BYTE2(xmmword_1006703F0) = 0;
  *((_QWORD *)&xmmword_1006703F0 + 1) = v3;
  unk_100670400 = v11;
  qword_100670408 = v0;
  LOBYTE(xmmword_100670410) = 1;
  *(__int128 *)((char *)&xmmword_100670410 + 8) = xmmword_1005328A0;
  word_100670428 = 1;
  result = 0.0;
  xmmword_100670430 = xmmword_100520950;
  word_100670440 = 0;
  return result;
}

uint64_t sub_10037B04C()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t result;
  char v17;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "stringArrayForKey:", v2);

  if (v3)
  {
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String);

  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v0, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "integerForKey:", v6);

  v8 = objc_msgSend(v0, "standardUserDefaults");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "stringForKey:", v9);

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = (void *)0xE600000000000000;
    v11 = 0x6C616D726F6ELL;
  }
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600B08, v14);
  result = swift_bridgeObjectRelease(v13);
  v17 = 3;
  *(_QWORD *)&xmmword_100670448 = 0x6569666D6F6F6C62;
  *((_QWORD *)&xmmword_100670448 + 1) = 0xEA0000000000646CLL;
  if (v15 < 3)
    v17 = v15;
  qword_100670458 = (uint64_t)&_swiftEmptySetSingleton;
  unk_100670460 = 0;
  *(_QWORD *)&xmmword_100670468 = 0xE000000000000000;
  *((_QWORD *)&xmmword_100670468 + 1) = &_swiftEmptySetSingleton;
  *(_QWORD *)&xmmword_100670478 = 0;
  *((_QWORD *)&xmmword_100670478 + 1) = 0xE000000000000000;
  LOWORD(xmmword_100670488) = 257;
  *((_QWORD *)&xmmword_100670488 + 1) = 0;
  unk_100670498 = &off_100600B70;
  qword_1006704A0 = 0;
  LOWORD(xmmword_1006704A8) = 256;
  BYTE2(xmmword_1006704A8) = 0;
  *((_QWORD *)&xmmword_1006704A8 + 1) = &off_100600BA0;
  unk_1006704B8 = 0xD000000000000027;
  qword_1006704C0 = 0x8000000100539B00;
  LOBYTE(xmmword_1006704C8) = 0;
  *((_QWORD *)&xmmword_1006704C8 + 1) = 0xD000000000000012;
  unk_1006704D8 = 0x8000000100551050;
  word_1006704E0 = 256;
  *(_QWORD *)&xmmword_1006704E8 = v4;
  *((_QWORD *)&xmmword_1006704E8 + 1) = v7;
  LOBYTE(word_1006704F8) = 0;
  HIBYTE(word_1006704F8) = v17;
  return result;
}

uint64_t sub_10037B2D8()
{
  Swift::Int v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t result;
  char v18;

  v0 = sub_100404074((uint64_t)&off_100600CE0);
  swift_arrayDestroy(&unk_100600D00, 2, &type metadata for String);
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "stringArrayForKey:", v3);

  if (v4)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  }
  else
  {
    v5 = 0;
  }
  v6 = objc_msgSend(v1, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "integerForKey:", v7);

  v9 = objc_msgSend(v1, "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "stringForKey:", v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v12 = 0x6C616D726F6ELL;
    v14 = (void *)0xE600000000000000;
  }
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600B08, v15);
  result = swift_bridgeObjectRelease(v14);
  v18 = 3;
  *(_QWORD *)&xmmword_100670500 = 0x63616E676F63;
  *((_QWORD *)&xmmword_100670500 + 1) = 0xE600000000000000;
  if (v16 < 3)
    v18 = v16;
  qword_100670510 = (uint64_t)&_swiftEmptySetSingleton;
  unk_100670518 = 0;
  *(_QWORD *)&xmmword_100670520 = 0xE000000000000000;
  *((_QWORD *)&xmmword_100670520 + 1) = v0;
  *(_QWORD *)&xmmword_100670530 = 0xD000000000000013;
  *((_QWORD *)&xmmword_100670530 + 1) = 0x8000000100539BC0;
  LOWORD(xmmword_100670540) = 257;
  *((_QWORD *)&xmmword_100670540 + 1) = &off_100600D20;
  unk_100670550 = &off_100600D50;
  qword_100670558 = 0;
  *(_DWORD *)((char *)&qword_100670558 + 7) = 0;
  qword_100670568 = (uint64_t)&off_100600D80;
  unk_100670570 = 0xD000000000000022;
  qword_100670578 = 0x8000000100539BE0;
  LOBYTE(xmmword_100670580) = 0;
  *((_QWORD *)&xmmword_100670580 + 1) = 0xD00000000000001CLL;
  unk_100670590 = 0x8000000100539BA0;
  word_100670598 = 257;
  *(_QWORD *)&xmmword_1006705A0 = v5;
  *((_QWORD *)&xmmword_1006705A0 + 1) = v8;
  LOBYTE(word_1006705B0) = 0;
  HIBYTE(word_1006705B0) = v18;
  return result;
}

uint64_t sub_10037B598()
{
  Swift::Int v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t result;
  char v18;

  v0 = sub_100404074((uint64_t)&off_100600DB0);
  swift_arrayDestroy(&unk_100600DD0, 2, &type metadata for String);
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "stringArrayForKey:", v3);

  if (v4)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  }
  else
  {
    v5 = 0;
  }
  v6 = objc_msgSend(v1, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "integerForKey:", v7);

  v9 = objc_msgSend(v1, "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "stringForKey:", v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = (void *)0xE600000000000000;
    v12 = 0x6C616D726F6ELL;
  }
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600B08, v15);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)&xmmword_1006705B8 = 0x632D63616E676F63;
  *((_QWORD *)&xmmword_1006705B8 + 1) = 0xE90000000000006ELL;
  v18 = 3;
  if (v16 < 3)
    v18 = v16;
  qword_1006705C8 = (uint64_t)&_swiftEmptySetSingleton;
  unk_1006705D0 = 0;
  *(_QWORD *)&xmmword_1006705D8 = 0xE000000000000000;
  *((_QWORD *)&xmmword_1006705D8 + 1) = v0;
  *(_QWORD *)&xmmword_1006705E8 = 0xD000000000000013;
  *((_QWORD *)&xmmword_1006705E8 + 1) = 0x8000000100539BC0;
  LOWORD(xmmword_1006705F8) = 257;
  *((_QWORD *)&xmmword_1006705F8 + 1) = &off_100600DF0;
  unk_100670608 = &off_100600E20;
  qword_100670610 = 0;
  qword_100670620 = (uint64_t)&off_100600E50;
  unk_100670628 = 0xD000000000000025;
  *(_DWORD *)((char *)&qword_100670610 + 7) = 0;
  qword_100670630 = 0x8000000100539C10;
  LOBYTE(xmmword_100670638) = 0;
  *((_QWORD *)&xmmword_100670638 + 1) = 0xD00000000000001CLL;
  unk_100670648 = 0x8000000100539BA0;
  word_100670650 = 257;
  *(_QWORD *)&xmmword_100670658 = v5;
  *((_QWORD *)&xmmword_100670658 + 1) = v8;
  LOBYTE(word_100670668) = 0;
  HIBYTE(word_100670668) = v18;
  return result;
}

uint64_t sub_10037B864()
{
  Swift::Int v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t result;
  char v18;

  v0 = sub_100404074((uint64_t)&off_100600E80);
  swift_arrayDestroy(&unk_100600EA0, 2, &type metadata for String);
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "stringArrayForKey:", v3);

  if (v4)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  }
  else
  {
    v5 = 0;
  }
  v6 = objc_msgSend(v1, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "integerForKey:", v7);

  v9 = objc_msgSend(v1, "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "stringForKey:", v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = (void *)0xE600000000000000;
    v12 = 0x6C616D726F6ELL;
  }
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100600B08, v15);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)&xmmword_100670670 = 0x612D63616E676F63;
  *((_QWORD *)&xmmword_100670670 + 1) = 0xEA00000000006C6CLL;
  v18 = 3;
  if (v16 < 3)
    v18 = v16;
  qword_100670680 = (uint64_t)&_swiftEmptySetSingleton;
  unk_100670688 = 0;
  *(_QWORD *)&xmmword_100670690 = 0xE000000000000000;
  *((_QWORD *)&xmmword_100670690 + 1) = v0;
  *(_QWORD *)&xmmword_1006706A0 = 0xD000000000000013;
  *((_QWORD *)&xmmword_1006706A0 + 1) = 0x8000000100539BC0;
  LOWORD(xmmword_1006706B0) = 257;
  *((_QWORD *)&xmmword_1006706B0 + 1) = &off_100600EC0;
  unk_1006706C0 = 0;
  qword_1006706C8 = (uint64_t)&off_100600EF0;
  LOWORD(xmmword_1006706D0) = 0;
  *((_QWORD *)&xmmword_1006706D0 + 1) = &off_100600F30;
  unk_1006706E0 = 0xD000000000000027;
  BYTE2(xmmword_1006706D0) = 0;
  qword_1006706E8 = 0x8000000100539C40;
  LOBYTE(xmmword_1006706F0) = 0;
  *((_QWORD *)&xmmword_1006706F0 + 1) = 0xD00000000000001CLL;
  unk_100670700 = 0x8000000100539BA0;
  word_100670708 = 257;
  *(_QWORD *)&xmmword_100670710 = v5;
  *((_QWORD *)&xmmword_100670710 + 1) = v8;
  LOBYTE(word_100670720) = 0;
  HIBYTE(word_100670720) = v18;
  return result;
}

uint64_t sub_10037BB30()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for WarmerUpper(0);
  sub_1000352D8(v0, qword_100670728);
  v1 = sub_1000352C0(v0, (uint64_t)qword_100670728);
  return sub_10037BB78(v1);
}

uint64_t sub_10037BB78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t result;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  _OWORD v75[11];
  __int16 v76;
  _OWORD v77[11];
  __int16 v78;
  _OWORD v79[11];
  __int16 v80;
  _OWORD v81[11];
  __int16 v82;
  _OWORD v83[11];
  __int16 v84;

  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v71 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  __chkstk_darwin(v2);
  v73 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v70 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  FeatureFlagProvider.init()(v7);
  v10 = (int *)type metadata accessor for WarmerUpper(0);
  v69 = v10[5];
  v11 = sub_100004828(&qword_100634070);
  v12 = swift_allocObject(v11, 952, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1005208C0;
  if (qword_10062F510 != -1)
    swift_once(&qword_10062F510, sub_10037B04C);
  v13 = unk_1006704B8;
  v75[8] = xmmword_1006704C8;
  v75[9] = unk_1006704D8;
  v14 = unk_1006704D8;
  v75[10] = xmmword_1006704E8;
  v15 = xmmword_100670488;
  v16 = xmmword_100670478;
  v75[4] = xmmword_100670488;
  v75[5] = unk_100670498;
  v17 = unk_100670498;
  v18 = xmmword_1006704A8;
  v75[6] = xmmword_1006704A8;
  v75[7] = unk_1006704B8;
  v75[0] = xmmword_100670448;
  v75[1] = *(_OWORD *)&qword_100670458;
  v20 = xmmword_100670448;
  v19 = *(_OWORD *)&qword_100670458;
  v21 = xmmword_100670468;
  v75[2] = xmmword_100670468;
  v75[3] = xmmword_100670478;
  *(_OWORD *)(v12 + 160) = xmmword_1006704C8;
  *(_OWORD *)(v12 + 176) = v14;
  *(_OWORD *)(v12 + 192) = xmmword_1006704E8;
  *(_OWORD *)(v12 + 96) = v15;
  *(_OWORD *)(v12 + 112) = v17;
  *(_OWORD *)(v12 + 128) = v18;
  *(_OWORD *)(v12 + 144) = v13;
  *(_OWORD *)(v12 + 32) = v20;
  *(_OWORD *)(v12 + 48) = v19;
  v76 = word_1006704F8;
  *(_WORD *)(v12 + 208) = word_1006704F8;
  *(_OWORD *)(v12 + 64) = v21;
  *(_OWORD *)(v12 + 80) = v16;
  sub_100384C54(v75);
  if (qword_10062F508 != -1)
    swift_once(&qword_10062F508, sub_10037AE98);
  v22 = unk_100670400;
  v77[8] = xmmword_100670410;
  v77[9] = unk_100670420;
  v23 = unk_100670420;
  v77[10] = xmmword_100670430;
  v24 = xmmword_1006703D0;
  v25 = xmmword_1006703C0;
  v77[4] = xmmword_1006703D0;
  v77[5] = xmmword_1006703E0;
  v26 = xmmword_1006703E0;
  v27 = xmmword_1006703F0;
  v77[6] = xmmword_1006703F0;
  v77[7] = unk_100670400;
  v77[0] = xmmword_100670390;
  v77[1] = *(_OWORD *)&qword_1006703A0;
  v29 = xmmword_100670390;
  v28 = *(_OWORD *)&qword_1006703A0;
  v30 = xmmword_1006703B0;
  v77[2] = xmmword_1006703B0;
  v77[3] = xmmword_1006703C0;
  *(_OWORD *)(v12 + 344) = xmmword_100670410;
  *(_OWORD *)(v12 + 360) = v23;
  *(_OWORD *)(v12 + 376) = xmmword_100670430;
  *(_OWORD *)(v12 + 280) = v24;
  *(_OWORD *)(v12 + 296) = v26;
  *(_OWORD *)(v12 + 312) = v27;
  *(_OWORD *)(v12 + 328) = v22;
  *(_OWORD *)(v12 + 216) = v29;
  *(_OWORD *)(v12 + 232) = v28;
  v78 = word_100670440;
  *(_WORD *)(v12 + 392) = word_100670440;
  *(_OWORD *)(v12 + 248) = v30;
  *(_OWORD *)(v12 + 264) = v25;
  sub_100384C54(v77);
  if (qword_10062F518 != -1)
    swift_once(&qword_10062F518, sub_10037B2D8);
  v31 = unk_100670570;
  v79[8] = xmmword_100670580;
  v79[9] = unk_100670590;
  v32 = unk_100670590;
  v79[10] = xmmword_1006705A0;
  v33 = xmmword_100670540;
  v34 = xmmword_100670530;
  v79[4] = xmmword_100670540;
  v79[5] = unk_100670550;
  v35 = unk_100670550;
  v36 = unk_100670560;
  v79[6] = unk_100670560;
  v79[7] = unk_100670570;
  v79[0] = xmmword_100670500;
  v79[1] = *(_OWORD *)&qword_100670510;
  v38 = xmmword_100670500;
  v37 = *(_OWORD *)&qword_100670510;
  v39 = xmmword_100670520;
  v79[2] = xmmword_100670520;
  v79[3] = xmmword_100670530;
  *(_OWORD *)(v12 + 528) = xmmword_100670580;
  *(_OWORD *)(v12 + 544) = v32;
  *(_OWORD *)(v12 + 560) = xmmword_1006705A0;
  *(_OWORD *)(v12 + 464) = v33;
  *(_OWORD *)(v12 + 480) = v35;
  *(_OWORD *)(v12 + 496) = v36;
  *(_OWORD *)(v12 + 512) = v31;
  *(_OWORD *)(v12 + 400) = v38;
  *(_OWORD *)(v12 + 416) = v37;
  v80 = word_1006705B0;
  *(_WORD *)(v12 + 576) = word_1006705B0;
  *(_OWORD *)(v12 + 432) = v39;
  *(_OWORD *)(v12 + 448) = v34;
  sub_100384C54(v79);
  if (qword_10062F520 != -1)
    swift_once(&qword_10062F520, sub_10037B598);
  v40 = unk_100670628;
  v81[8] = xmmword_100670638;
  v81[9] = unk_100670648;
  v41 = unk_100670648;
  v81[10] = xmmword_100670658;
  v42 = xmmword_1006705F8;
  v43 = xmmword_1006705E8;
  v81[4] = xmmword_1006705F8;
  v81[5] = unk_100670608;
  v44 = unk_100670608;
  v45 = unk_100670618;
  v81[6] = unk_100670618;
  v81[7] = unk_100670628;
  v81[0] = xmmword_1006705B8;
  v81[1] = *(_OWORD *)&qword_1006705C8;
  v47 = xmmword_1006705B8;
  v46 = *(_OWORD *)&qword_1006705C8;
  v48 = xmmword_1006705D8;
  v81[2] = xmmword_1006705D8;
  v81[3] = xmmword_1006705E8;
  *(_OWORD *)(v12 + 712) = xmmword_100670638;
  *(_OWORD *)(v12 + 728) = v41;
  *(_OWORD *)(v12 + 744) = xmmword_100670658;
  *(_OWORD *)(v12 + 648) = v42;
  *(_OWORD *)(v12 + 664) = v44;
  *(_OWORD *)(v12 + 680) = v45;
  *(_OWORD *)(v12 + 696) = v40;
  *(_OWORD *)(v12 + 584) = v47;
  *(_OWORD *)(v12 + 600) = v46;
  v82 = word_100670668;
  *(_WORD *)(v12 + 760) = word_100670668;
  *(_OWORD *)(v12 + 616) = v48;
  *(_OWORD *)(v12 + 632) = v43;
  sub_100384C54(v81);
  if (qword_10062F528 != -1)
    swift_once(&qword_10062F528, sub_10037B864);
  v49 = unk_1006706E0;
  v83[8] = xmmword_1006706F0;
  v83[9] = unk_100670700;
  v50 = unk_100670700;
  v83[10] = xmmword_100670710;
  v51 = xmmword_1006706B0;
  v52 = xmmword_1006706A0;
  v83[4] = xmmword_1006706B0;
  v83[5] = unk_1006706C0;
  v53 = unk_1006706C0;
  v54 = xmmword_1006706D0;
  v83[6] = xmmword_1006706D0;
  v83[7] = unk_1006706E0;
  v83[0] = xmmword_100670670;
  v83[1] = *(_OWORD *)&qword_100670680;
  v56 = xmmword_100670670;
  v55 = *(_OWORD *)&qword_100670680;
  v57 = xmmword_100670690;
  v83[2] = xmmword_100670690;
  v83[3] = xmmword_1006706A0;
  *(_OWORD *)(v12 + 896) = xmmword_1006706F0;
  *(_OWORD *)(v12 + 912) = v50;
  *(_OWORD *)(v12 + 928) = xmmword_100670710;
  *(_OWORD *)(v12 + 832) = v51;
  *(_OWORD *)(v12 + 848) = v53;
  *(_OWORD *)(v12 + 864) = v54;
  *(_OWORD *)(v12 + 880) = v49;
  *(_OWORD *)(v12 + 768) = v56;
  *(_OWORD *)(v12 + 784) = v55;
  v84 = word_100670720;
  *(_WORD *)(v12 + 944) = word_100670720;
  *(_OWORD *)(v12 + 800) = v57;
  *(_OWORD *)(v12 + 816) = v52;
  *(_QWORD *)(a1 + v69) = v12;
  v58 = v10[6];
  v59 = sub_100004828(&qword_10063DE10);
  v60 = swift_allocObject(v59, 20, 7);
  *(_DWORD *)(v60 + 16) = 0;
  *(_QWORD *)(a1 + v58) = v60;
  v61 = v10[7];
  sub_1000257E0();
  v62 = sub_100384C54(v83);
  static DispatchQoS.unspecified.getter(v62);
  v74 = _swiftEmptyArrayStorage;
  v63 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v64 = sub_100004828((uint64_t *)&unk_100636400);
  v65 = sub_10001D030();
  v66 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v64, v65, v4, v63);
  v67 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v73, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v72);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x705572656D726157, 0xEB00000000726570, v9, v66, v67, 0);
  *(_QWORD *)(a1 + v61) = result;
  return result;
}

uint64_t sub_10037C108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  os_unfair_lock_s *v19;
  _OWORD v21[11];
  __int16 v22;

  v1 = type metadata accessor for CoreIDVFeatureFlag(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WarmerUpper(0);
  v6 = *(int *)(v5 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v0 + v6) + 16));
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for CoreIDVFeatureFlag.silenceLegacyWarmup(_:), v1);
  v7 = FeatureFlagProvider.isEnabled(_:)(v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) != 0)
  {
    v8 = sub_100004828(&qword_100634070);
    v9 = swift_allocObject(v8, 216, 7);
    *(_OWORD *)(v9 + 16) = xmmword_10051FFB0;
    if (qword_10062F508 != -1)
      swift_once(&qword_10062F508, sub_10037AE98);
    v10 = unk_100670400;
    v21[8] = xmmword_100670410;
    v21[9] = unk_100670420;
    v11 = unk_100670420;
    v21[10] = xmmword_100670430;
    v12 = xmmword_1006703D0;
    v13 = xmmword_1006703C0;
    v21[4] = xmmword_1006703D0;
    v21[5] = xmmword_1006703E0;
    v14 = xmmword_1006703E0;
    v15 = xmmword_1006703F0;
    v21[6] = xmmword_1006703F0;
    v21[7] = unk_100670400;
    v21[0] = xmmword_100670390;
    v21[1] = *(_OWORD *)&qword_1006703A0;
    v17 = xmmword_100670390;
    v16 = *(_OWORD *)&qword_1006703A0;
    v18 = xmmword_1006703B0;
    v21[2] = xmmword_1006703B0;
    v21[3] = xmmword_1006703C0;
    *(_OWORD *)(v9 + 160) = xmmword_100670410;
    *(_OWORD *)(v9 + 176) = v11;
    *(_OWORD *)(v9 + 192) = xmmword_100670430;
    *(_OWORD *)(v9 + 96) = v12;
    *(_OWORD *)(v9 + 112) = v14;
    *(_OWORD *)(v9 + 128) = v15;
    *(_OWORD *)(v9 + 144) = v10;
    *(_OWORD *)(v9 + 32) = v17;
    *(_OWORD *)(v9 + 48) = v16;
    v22 = word_100670440;
    *(_WORD *)(v9 + 208) = word_100670440;
    v19 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + v6) + 16);
    *(_OWORD *)(v9 + 64) = v18;
    *(_OWORD *)(v9 + 80) = v13;
    sub_100384C54(v21);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + *(int *)(v5 + 20));
    v19 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + v6) + 16);
    swift_bridgeObjectRetain(v9);
  }
  os_unfair_lock_unlock(v19);
  return v9;
}

uint64_t sub_10037C2D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::Bool v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  NSString v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v40 - v7;
  v9 = a1[9];
  if (!v9)
    return 1;
  v10 = (void *)objc_opt_self(NSUserDefaults);
  swift_bridgeObjectRetain(v9);
  v11 = objc_msgSend(v10, "standardUserDefaults");
  v12._object = (void *)0x800000010055B4F0;
  v12._countAndFlagsBits = 0xD000000000000028;
  v13 = NSUserDefaults.internalBool(forKey:)(v12);

  if (!v13)
  {
    v24 = *(_QWORD *)(v9 + 16);
    if (!v24)
    {
LABEL_9:
      swift_bridgeObjectRelease(v9);
      return 0;
    }
    v41 = v6;
    v42 = v3;
    v43 = v2;
    v25 = (_QWORD *)(v9 + 40);
    while (1)
    {
      v26 = *v25;
      swift_bridgeObjectRetain(*v25);
      v27 = objc_msgSend(v10, "standardUserDefaults");
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      LOBYTE(v26) = objc_msgSend(v27, "BOOLForKey:", v28);

      if ((v26 & 1) != 0)
        break;
      v25 += 2;
      if (!--v24)
        goto LABEL_9;
    }
    v29 = swift_bridgeObjectRelease(v9);
    v30 = v41;
    defaultLogger()(v29);
    v31 = sub_100384C54(a1);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v45 = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = v30;
      v37 = *a1;
      v38 = a1[1];
      swift_bridgeObjectRetain(v38);
      v44 = sub_1000E3AC8(v37, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v34 + 4);
      swift_bridgeObjectRelease(v38);
      sub_100384D48(a1);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Found defaults key required for warmup of %{public}s", v34, 0xCu);
      v23 = 1;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v36, v43);
      return v23;
    }
    sub_100384D48(a1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
    return 1;
  }
  v14 = swift_bridgeObjectRelease(v9);
  defaultLogger()(v14);
  v15 = sub_100384C54(a1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v16, v17))
  {
    sub_100384D48(a1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 1;
  }
  v43 = v2;
  v18 = swift_slowAlloc(12, -1);
  v42 = v3;
  v19 = (uint8_t *)v18;
  v20 = swift_slowAlloc(32, -1);
  v45 = v20;
  *(_DWORD *)v19 = 136446210;
  v22 = *a1;
  v21 = a1[1];
  swift_bridgeObjectRetain(v21);
  v44 = sub_1000E3AC8(v22, v21, &v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v19 + 4);
  swift_bridgeObjectRelease(v21);
  sub_100384D48(a1);
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipping warmup defaults key checks for %{public}s due to internal defaults setting", v19, 0xCu);
  v23 = 1;
  swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v20, -1, -1);
  swift_slowDealloc(v19, -1, -1);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
  return v23;
}

uint64_t sub_10037C720(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  uint64_t v44;
  id v45;
  Swift::String v46;
  char *v47;
  uint64_t v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  NSString v136;
  id v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char v169;
  _OWORD v170[2];
  uint64_t v171[3];
  uint64_t v172;
  uint64_t v173;
  char v174[8];
  char v175[8];
  _BYTE v176[16];
  uint64_t v177;
  void *v178;
  _QWORD *v179;
  _QWORD *v180;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v166 = (char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v156 - v8;
  v10 = sub_100004828(&qword_1006308F0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v156 - v14;
  v16 = type metadata accessor for Logger(0);
  v168 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v161 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v162 = (char *)&v156 - v20;
  v21 = __chkstk_darwin(v19);
  v160 = (char *)&v156 - v22;
  v23 = __chkstk_darwin(v21);
  v165 = (char *)&v156 - v24;
  v25 = __chkstk_darwin(v23);
  v167 = (char *)&v156 - v26;
  v27 = __chkstk_darwin(v25);
  v163 = (char *)&v156 - v28;
  v29 = __chkstk_darwin(v27);
  v164 = (char *)&v156 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v156 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v156 - v34;
  if ((a2 & 1) == 0)
    goto LABEL_8;
  v36 = *(_QWORD *)(a1 + 168);
  if (*(_BYTE *)(a1 + 176))
    v36 = 3;
  v159 = v36;
  sub_1000A1F54(a1 + 112, (uint64_t)v176, (uint64_t *)&unk_100632610);
  v37 = sub_1000A1F54((uint64_t)v176, (uint64_t)&v177, (uint64_t *)&unk_100632610);
  v38 = v178;
  if (v178)
  {
    v158 = v35;
    v39 = a1;
    v40 = v16;
    v41 = v177;
    v42 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v157 = v5;
    v43 = v13;
    v44 = v4;
    v45 = v42;
    strcpy((char *)v171, "warmupCount.");
    BYTE5(v171[1]) = 0;
    HIWORD(v171[1]) = -5120;
    v46._countAndFlagsBits = v41;
    v16 = v40;
    a1 = v39;
    v47 = v158;
    v46._object = v38;
    String.append(_:)(v46);
    v48 = v171[1];
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v50 = objc_msgSend(v45, "integerForKey:", v49);

    v4 = v44;
    v13 = v43;
    v5 = v157;

    v52 = v159;
    if (v159 < (uint64_t)v50)
    {
      defaultLogger()(v51);
      v53 = sub_100384C54((_QWORD *)a1);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc(22, -1);
        v57 = v52;
        v58 = swift_slowAlloc(32, -1);
        v171[0] = v58;
        *(_DWORD *)v56 = 136446466;
        v59 = (_QWORD *)a1;
        v60 = *(_QWORD *)a1;
        v61 = *(_QWORD *)(a1 + 8);
        swift_bridgeObjectRetain(v61);
        *(_QWORD *)&v170[0] = sub_1000E3AC8(v60, v61, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v56 + 4);
        swift_bridgeObjectRelease(v61);
        sub_100384D48(v59);
        *(_WORD *)(v56 + 12) = 2050;
        *(_QWORD *)&v170[0] = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v56 + 14);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Warmup rate limit exceeded for %{public}s, limit is %{public}ld; skipping warmup",
          (uint8_t *)v56,
          0x16u);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v56, -1, -1);

        v62 = *(void (**)(char *, uint64_t))(v168 + 8);
        v63 = v158;
      }
      else
      {
        sub_100384D48((_QWORD *)a1);

        v62 = *(void (**)(char *, uint64_t))(v168 + 8);
        v63 = v47;
      }
      goto LABEL_51;
    }
LABEL_8:
    sub_1000A1F54(a1 + 80, (uint64_t)v175, (uint64_t *)&unk_100631300);
    v64 = sub_1000A1F54((uint64_t)v175, (uint64_t)&v179, (uint64_t *)&unk_100631300);
    v65 = v179;
    if (v179)
    {
      v159 = a1;
      v66 = v16;
      v67 = static Locale.current.getter(v64);
      Locale.region.getter(v67);
      v68 = v5;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      v69 = type metadata accessor for Locale.Region(0);
      v70 = *(_QWORD *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v15, 1, v69) == 1)
      {
        sub_100008030((uint64_t)v15, &qword_1006308F0);
        v16 = v66;
        a1 = v159;
        v5 = v68;
      }
      else
      {
        v71 = Locale.Region.identifier.getter();
        v72 = v13;
        v73 = v4;
        v75 = v74;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v69);
        LOBYTE(v71) = sub_1001B2720(v71, v75, v65);
        v76 = v75;
        v4 = v73;
        v13 = v72;
        v77 = swift_bridgeObjectRelease(v76);
        v16 = v66;
        a1 = v159;
        v5 = v68;
        if ((v71 & 1) == 0)
        {
          v96 = v164;
          defaultLogger()(v77);
          v124 = sub_100384C54((_QWORD *)a1);
          v98 = Logger.logObject.getter(v124);
          v125 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v98, v125))
          {
            v126 = (uint8_t *)swift_slowAlloc(12, -1);
            v127 = swift_slowAlloc(32, -1);
            v171[0] = v127;
            *(_DWORD *)v126 = 136446210;
            v128 = (_QWORD *)a1;
            v129 = *(_QWORD *)a1;
            v130 = v128[1];
            swift_bridgeObjectRetain(v130);
            *(_QWORD *)&v170[0] = sub_1000E3AC8(v129, v130, v171);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v126 + 4);
            swift_bridgeObjectRelease(v130);
            sub_100384D48(v128);
            _os_log_impl((void *)&_mh_execute_header, v98, v125, "Not in Region for %{public}s; skipping warmup",
              v126,
              0xCu);
            swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v127, -1, -1);
            swift_slowDealloc(v126, -1, -1);

            v62 = *(void (**)(char *, uint64_t))(v168 + 8);
            v63 = v164;
            goto LABEL_51;
          }
          goto LABEL_50;
        }
      }
    }
    sub_1000A1F54(a1 + 88, (uint64_t)v174, (uint64_t *)&unk_100631300);
    v78 = sub_1000A1F54((uint64_t)v174, (uint64_t)&v180, (uint64_t *)&unk_100631300);
    v79 = v180;
    if (v180)
    {
      v80 = v166;
      v81 = static Locale.current.getter(v78);
      Locale.region.getter(v81);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v80, v4);
      v82 = type metadata accessor for Locale.Region(0);
      v83 = *(_QWORD *)(v82 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v13, 1, v82) == 1)
      {
        sub_100008030((uint64_t)v13, &qword_1006308F0);
      }
      else
      {
        v91 = Locale.Region.identifier.getter();
        v93 = v92;
        (*(void (**)(char *, uint64_t))(v83 + 8))(v13, v82);
        v94 = sub_1001B2720(v91, v93, v79);
        v95 = swift_bridgeObjectRelease(v93);
        if ((v94 & 1) != 0)
        {
          v96 = v163;
          defaultLogger()(v95);
          v97 = sub_100384C54((_QWORD *)a1);
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v98, v99))
          {
            v100 = (uint8_t *)swift_slowAlloc(12, -1);
            v101 = swift_slowAlloc(32, -1);
            v171[0] = v101;
            *(_DWORD *)v100 = 136446210;
            v102 = (_QWORD *)a1;
            v103 = *(_QWORD *)a1;
            v104 = v102[1];
            swift_bridgeObjectRetain(v104);
            *(_QWORD *)&v170[0] = sub_1000E3AC8(v103, v104, v171);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v100 + 4);
            swift_bridgeObjectRelease(v104);
            sub_100384D48(v102);
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Is in Denied Region for %{public}s; skipping warmup",
              v100,
              0xCu);
            swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v101, -1, -1);
            swift_slowDealloc(v100, -1, -1);

            v62 = *(void (**)(char *, uint64_t))(v168 + 8);
            v63 = v163;
            goto LABEL_51;
          }
          goto LABEL_50;
        }
      }
    }
    v105 = sub_10037DAD8((uint64_t *)a1);
    if ((v105 & 1) != 0)
    {
      v106 = sub_10037C2D4((uint64_t *)a1);
      if ((v106 & 1) != 0)
      {
        if ((*(_BYTE *)(a1 + 64) & 1) != 0)
        {
          v107 = type metadata accessor for DIPAccountManager(0);
          static DIPAccountManager.sharedInstance.getter(v171, v107);
          v108 = v172;
          v109 = v173;
          sub_10000806C(v171, v172);
          dispatch thunk of DIPAccountManagerProtocol.verifyAccountStatus(requireHSA2:)(*(unsigned __int8 *)(a1 + 65), v108, v109);
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v171);
        }
        v131 = type metadata accessor for DIPAccountManager(0);
        static DIPAccountManager.sharedInstance.getter(v171, v131);
        sub_10000806C(v171, v172);
        v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierIDMS);
        v134 = v133;
        v135 = (void *)dispatch thunk of DIPAccountManagerProtocol.getAccount(with:)(v132);
        swift_bridgeObjectRelease(v134);
        if (v135)
        {
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v171);
          v136 = String._bridgeToObjectiveC()();
          v137 = objc_msgSend(v135, "accountPropertyForKey:", v136);

          if (v137)
          {
            _bridgeAnyObjectToAny(_:)(v170, v137);
            swift_unknownObjectRelease(v137);
          }
          else
          {
            memset(v170, 0, sizeof(v170));
          }
          v96 = v162;
          v138 = v160;
          sub_1000A1F54((uint64_t)v170, (uint64_t)v171, (uint64_t *)&unk_1006371E0);
          if (v172)
          {
            v139 = swift_dynamicCast(&v169, v171, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
            if ((v139 & 1) != 0 && v169 == 1 && (*(_BYTE *)(a1 + 96) & 1) == 0)
            {
              defaultLogger()(v139);
              sub_100384C54((_QWORD *)a1);
              v140 = sub_100384C54((_QWORD *)a1);
              v141 = Logger.logObject.getter(v140);
              v142 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v141, v142))
              {
                v143 = (uint8_t *)swift_slowAlloc(12, -1);
                v144 = swift_slowAlloc(32, -1);
                v171[0] = v144;
                *(_DWORD *)v143 = 136446210;
                v166 = (char *)(v143 + 4);
                v167 = (char *)v16;
                v145 = *(_QWORD *)a1;
                v146 = *(_QWORD *)(a1 + 8);
                swift_bridgeObjectRetain(v146);
                *(_QWORD *)&v170[0] = sub_1000E3AC8(v145, v146, v171);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v166);
                swift_bridgeObjectRelease(v146);
                sub_100384D48((_QWORD *)a1);
                sub_100384D48((_QWORD *)a1);
                _os_log_impl((void *)&_mh_execute_header, v141, v142, "Per IDMS Account underage not allowed for %{public}s; skipping warmup",
                  v143,
                  0xCu);
                swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v144, -1, -1);
                swift_slowDealloc(v143, -1, -1);

                (*(void (**)(char *, char *))(v168 + 8))(v160, v167);
                return 0;
              }

              sub_100384D48((_QWORD *)a1);
              sub_100384D48((_QWORD *)a1);

              v62 = *(void (**)(char *, uint64_t))(v168 + 8);
              v63 = v138;
LABEL_51:
              v62(v63, v16);
              return 0;
            }

            if ((*(_BYTE *)(a1 + 97) & 1) == 0)
              return 1;
          }
          else
          {

            sub_100008030((uint64_t)v171, (uint64_t *)&unk_1006371E0);
            if ((*(_BYTE *)(a1 + 97) & 1) == 0)
              return 1;
          }
        }
        else
        {
          _s8coreidvd24DigitalPresentmentHelperVwxx_0(v171);
          v96 = v162;
          if ((*(_BYTE *)(a1 + 97) & 1) == 0)
            return 1;
        }
        v147 = sub_10038010C();
        if ((v147 & 1) == 0)
          return 1;
        defaultLogger()(v147);
        v148 = sub_100384C54((_QWORD *)a1);
        v98 = Logger.logObject.getter(v148);
        v149 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v98, v149))
        {
          v150 = (uint8_t *)swift_slowAlloc(12, -1);
          v151 = swift_slowAlloc(32, -1);
          v171[0] = v151;
          *(_DWORD *)v150 = 136446210;
          v152 = (_QWORD *)a1;
          v153 = *(_QWORD *)a1;
          v154 = v152[1];
          swift_bridgeObjectRetain(v154);
          *(_QWORD *)&v170[0] = sub_1000E3AC8(v153, v154, v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v150 + 4);
          swift_bridgeObjectRelease(v154);
          sub_100384D48(v152);
          _os_log_impl((void *)&_mh_execute_header, v98, v149, "Conditions for warmup not satisfied for %{public}s; skipping warmup",
            v150,
            0xCu);
          swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v151, -1, -1);
          swift_slowDealloc(v150, -1, -1);

          v62 = *(void (**)(char *, uint64_t))(v168 + 8);
          v63 = v162;
          goto LABEL_51;
        }
      }
      else
      {
        v96 = v165;
        defaultLogger()(v106);
        v117 = sub_100384C54((_QWORD *)a1);
        v98 = Logger.logObject.getter(v117);
        v118 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v98, v118))
        {
          v119 = (uint8_t *)swift_slowAlloc(12, -1);
          v120 = swift_slowAlloc(32, -1);
          v171[0] = v120;
          *(_DWORD *)v119 = 136446210;
          v121 = (_QWORD *)a1;
          v122 = *(_QWORD *)a1;
          v123 = v121[1];
          swift_bridgeObjectRetain(v123);
          *(_QWORD *)&v170[0] = sub_1000E3AC8(v122, v123, v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v119 + 4);
          swift_bridgeObjectRelease(v123);
          sub_100384D48(v121);
          _os_log_impl((void *)&_mh_execute_header, v98, v118, "User does not have a user defaults key for %{public}s; skipping warmup",
            v119,
            0xCu);
          swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v120, -1, -1);
          swift_slowDealloc(v119, -1, -1);

          v62 = *(void (**)(char *, uint64_t))(v168 + 8);
          v63 = v165;
          goto LABEL_51;
        }
      }
    }
    else
    {
      v96 = v167;
      defaultLogger()(v105);
      v110 = sub_100384C54((_QWORD *)a1);
      v98 = Logger.logObject.getter(v110);
      v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v98, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v171[0] = v113;
        *(_DWORD *)v112 = 136446210;
        v114 = (_QWORD *)a1;
        v115 = *(_QWORD *)a1;
        v116 = v114[1];
        swift_bridgeObjectRetain(v116);
        *(_QWORD *)&v170[0] = sub_1000E3AC8(v115, v116, v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v112 + 4);
        swift_bridgeObjectRelease(v116);
        sub_100384D48(v114);
        _os_log_impl((void *)&_mh_execute_header, v98, v111, "Skipping device unlocked warmup for %{public}s because no app with the entitlement is installed", v112, 0xCu);
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v112, -1, -1);

        v63 = v167;
        v62 = *(void (**)(char *, uint64_t))(v168 + 8);
        goto LABEL_51;
      }
    }
LABEL_50:
    sub_100384D48((_QWORD *)a1);

    v62 = *(void (**)(char *, uint64_t))(v168 + 8);
    v63 = v96;
    goto LABEL_51;
  }
  defaultLogger()(v37);
  v84 = sub_100384C54((_QWORD *)a1);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v85, (os_log_type_t)v86))
  {
    sub_100384D48((_QWORD *)a1);

    v62 = *(void (**)(char *, uint64_t))(v168 + 8);
    v63 = v33;
    goto LABEL_51;
  }
  v87 = (uint8_t *)swift_slowAlloc(12, -1);
  v88 = swift_slowAlloc(32, -1);
  v171[0] = v88;
  *(_DWORD *)v87 = 136446210;
  v167 = (char *)v16;
  v89 = *(_QWORD *)a1;
  v90 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain(v90);
  *(_QWORD *)&v170[0] = sub_1000E3AC8(v89, v90, v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v170, (char *)v170 + 8, v87 + 4);
  swift_bridgeObjectRelease(v90);
  sub_100384D48((_QWORD *)a1);
  _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v86, "No workflowID available for %{public}s; skipping warmup",
    v87,
    0xCu);
  swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v88, -1, -1);
  swift_slowDealloc(v87, -1, -1);

  (*(void (**)(char *, char *))(v168 + 8))(v33, v167);
  return 0;
}

uint64_t sub_10037DAD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  Swift::String v21;
  Swift::Bool v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSString v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v73 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v73 - v12;
  v14 = __chkstk_darwin(v11);
  v17 = (char *)&v73 - v16;
  v18 = a1[2];
  if (!*(_QWORD *)(v18 + 16))
  {
    defaultLogger()(v14);
    v32 = sub_100384C54(a1);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v76 = v3;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v78 = v36;
      *(_DWORD *)v35 = 136446210;
      v75 = v2;
      v38 = *a1;
      v37 = a1[1];
      swift_bridgeObjectRetain(v37);
      v77 = sub_1000E3AC8(v38, v37, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v35 + 4);
      swift_bridgeObjectRelease(v37);
      sub_100384D48(a1);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No entitlements are required for %{public}s app; skipping entitlement check",
        v35,
        0xCu);
      v31 = 1;
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v75);
      return v31;
    }
    sub_100384D48(a1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v2);
    return 1;
  }
  v74 = v15;
  v76 = v3;
  v19 = (void *)objc_opt_self(NSUserDefaults);
  v20 = objc_msgSend(v19, "standardUserDefaults");
  v21._object = (void *)0x800000010055B520;
  v21._countAndFlagsBits = 0xD000000000000027;
  v22 = NSUserDefaults.internalBool(forKey:)(v21);

  if (v22)
  {
    defaultLogger()(v23);
    v24 = sub_100384C54(a1);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v78 = v28;
      *(_DWORD *)v27 = 136446210;
      v75 = v2;
      v29 = *a1;
      v30 = a1[1];
      swift_bridgeObjectRetain(v30);
      v77 = sub_1000E3AC8(v29, v30, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v27 + 4);
      swift_bridgeObjectRelease(v30);
      sub_100384D48(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skipping warmup entitlement key checks for %{public}s due to internal defaults setting", v27, 0xCu);
      v31 = 1;
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v76 + 8))(v13, v75);
      return v31;
    }
    sub_100384D48(a1);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v13, v2);
    return 1;
  }
  v75 = v2;
  v39 = objc_msgSend(v19, "standardUserDefaults");
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v39, "BOOLForKey:", v40);

  if (v41)
  {
    defaultLogger()(v42);
    v43 = sub_100384C54(a1);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v78 = v47;
      *(_DWORD *)v46 = 136446210;
      v48 = *a1;
      v49 = a1[1];
      swift_bridgeObjectRetain(v49);
      v77 = sub_1000E3AC8(v48, v49, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v46 + 4);
      swift_bridgeObjectRelease(v49);
      sub_100384D48(a1);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "User defaults indicates %{public}s app is installed; skipping entitlement check",
        v46,
        0xCu);
      v31 = 1;
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      (*(void (**)(char *, uint64_t))(v76 + 8))(v10, v75);
      return v31;
    }
    sub_100384D48(a1);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v10, v75);
    return 1;
  }
  v50 = qword_10062F560;
  swift_bridgeObjectRetain(v18);
  if (v50 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v51 = (id)qword_1006707A8;
  v52 = sub_10042621C(v18);

  v53 = swift_bridgeObjectRelease(v18);
  v54 = v74;
  if ((v52 & 1) != 0)
  {
    v55 = objc_msgSend(v19, "standardUserDefaults");
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v55, "setBool:forKey:", 1, v56);

    defaultLogger()(v57);
    v58 = sub_100384C54(a1);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v78 = v62;
      *(_DWORD *)v61 = 136446210;
      v63 = *a1;
      v64 = a1[1];
      swift_bridgeObjectRetain(v64);
      v77 = sub_1000E3AC8(v63, v64, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v61 + 4);
      swift_bridgeObjectRelease(v64);
      sub_100384D48(a1);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Found app with %{public}s entitlement", v61, 0xCu);
      v31 = 1;
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v54, v75);
      return v31;
    }
    sub_100384D48(a1);

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v54, v75);
    return 1;
  }
  defaultLogger()(v53);
  v65 = sub_100384C54(a1);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v78 = v69;
    *(_DWORD *)v68 = 136446210;
    v70 = *a1;
    v71 = a1[1];
    swift_bridgeObjectRetain(v71);
    v77 = sub_1000E3AC8(v70, v71, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v68 + 4);
    swift_bridgeObjectRelease(v71);
    sub_100384D48(a1);
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Did not find app with %{public}s entitlement", v68, 0xCu);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);
  }
  else
  {
    sub_100384D48(a1);
  }

  (*(void (**)(char *, uint64_t))(v76 + 8))(v6, v75);
  return 0;
}

uint64_t sub_10037E3A4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[11];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;

  v6 = type metadata accessor for DIPError.Code(0);
  v15[5] = *(_QWORD *)(v6 - 8);
  v15[6] = v6;
  __chkstk_darwin(v6);
  v15[7] = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError(0);
  __chkstk_darwin(v8);
  v15[9] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WarmerUpper(0);
  v16 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v10);
  v17 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v15[10] = *(_QWORD *)(v18 - 8);
  v12 = __chkstk_darwin(v18);
  v15[8] = (char *)v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  sub_1000A1F54(a1 + 160, (uint64_t)v19, (uint64_t *)&unk_100631300);
  result = sub_1000A1F54((uint64_t)v19, (uint64_t)&v20, (uint64_t *)&unk_100631300);
  if (v20)
  {
    v15[4] = a3;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_10037EAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_10001D0A0;
  return sub_10037EB1C(a3, 0);
}

uint64_t sub_10037EB1C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v3 + 125) = a2;
  *(_QWORD *)(v3 + 440) = a1;
  *(_QWORD *)(v3 + 448) = v2;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006375E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 456) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 464) = swift_task_alloc(v4);
  *(_QWORD *)(v3 + 472) = swift_task_alloc(v4);
  v5 = type metadata accessor for AugmentedProfile(0);
  *(_QWORD *)(v3 + 480) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 488) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 496) = v7;
  *(_QWORD *)(v3 + 504) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 512) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 520) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 528) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 536) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 544) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 552) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 560) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 568) = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v3 + 576) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v3 + 584) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 592) = v13;
  *(_QWORD *)(v3 + 600) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10037EC90, 0, 0);
}

uint64_t sub_10037EC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 440);
  static DaemonSignposts.warmupAssessment.getter();
  DIPSignpost.init(_:)(v1);
  sub_1000A1F54(v2 + 112, v0 + 392, (uint64_t *)&unk_100632610);
  v3 = sub_1000A1F54(v0 + 392, v0 + 376, (uint64_t *)&unk_100632610);
  v4 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 608) = v4;
  v5 = *(_QWORD **)(v0 + 440);
  if (v4)
  {
    v65 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 616) = v65;
    defaultLogger()(v3);
    v6 = sub_100384C54(v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 568);
    v11 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 512);
    v13 = *(uint64_t **)(v0 + 440);
    if (v9)
    {
      v62 = *(_QWORD *)(v0 + 512);
      v59 = *(_QWORD *)(v0 + 520);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = swift_slowAlloc(32, -1);
      v68 = v56;
      *(_DWORD *)v14 = 136446210;
      v15 = *v13;
      v16 = v13[1];
      swift_bridgeObjectRetain(v16);
      *(_QWORD *)(v0 + 432) = sub_1000E3AC8(v15, v16, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v14 + 4);
      swift_bridgeObjectRelease(v16);
      sub_100384D48(v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s warmup: warmup assessments", v14, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8);
      v18 = v17(v10, v62);
    }
    else
    {
      sub_100384D48(*(_QWORD **)(v0 + 440));

      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      v18 = v17(v10, v12);
    }
    *(_QWORD *)(v0 + 624) = v17;
    v32 = *(_QWORD *)(v0 + 496);
    v31 = *(_QWORD *)(v0 + 504);
    v33 = *(_QWORD *)(v0 + 488);
    v34 = *(uint64_t **)(v0 + 440);
    v35 = v34[17];
    v36 = v34[18];
    v37 = UUID.init()(v18);
    v38 = UUID.uuidString.getter(v37);
    v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    v41 = sub_1000356BC(v38, v40, v35, v36);
    *(_QWORD *)(v0 + 632) = v41;
    swift_bridgeObjectRelease(v40);
    v42 = *v34;
    *(_QWORD *)(v0 + 640) = *v34;
    v43 = v34[1];
    *(_QWORD *)(v0 + 648) = v43;
    swift_retain(v41);
    *(_QWORD *)(v0 + 656) = sub_1004FDDD4(v65, v4, v42, v43, (uint64_t)v41);
    swift_release(v41);
    v44 = (_QWORD *)swift_task_alloc(dword_1006446AC);
    *(_QWORD *)(v0 + 664) = v44;
    *v44 = v0;
    v44[1] = sub_10037F1D0;
    return sub_1004F92EC();
  }
  else
  {
    defaultLogger()(v3);
    v19 = sub_100384C54(v5);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 536);
    v24 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 512);
    v26 = *(uint64_t **)(v0 + 440);
    if (v22)
    {
      v63 = *(_QWORD *)(v0 + 520);
      v66 = *(_QWORD *)(v0 + 536);
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v68 = v28;
      *(_DWORD *)v27 = 136446210;
      v60 = v25;
      v30 = *v26;
      v29 = v26[1];
      swift_bridgeObjectRetain(v29);
      *(_QWORD *)(v0 + 424) = sub_1000E3AC8(v30, v29, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v27 + 4);
      swift_bridgeObjectRelease(v29);
      sub_100384D48(v26);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No assessment workflow ID set for %{public}s; skipping assessment warmup",
        v27,
        0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v60);
    }
    else
    {
      sub_100384D48(*(_QWORD **)(v0 + 440));

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    }
    v46 = *(_QWORD *)(v0 + 600);
    v47 = *(_QWORD *)(v0 + 592);
    v48 = *(_QWORD *)(v0 + 584);
    v49 = *(_QWORD *)(v0 + 576);
    v50 = *(_QWORD *)(v0 + 568);
    v51 = *(_QWORD *)(v0 + 560);
    v52 = *(_QWORD *)(v0 + 552);
    v53 = *(_QWORD *)(v0 + 544);
    v54 = *(_QWORD *)(v0 + 536);
    v55 = *(_QWORD *)(v0 + 528);
    v57 = *(_QWORD *)(v0 + 504);
    v58 = *(_QWORD *)(v0 + 480);
    v61 = *(_QWORD *)(v0 + 472);
    v64 = *(_QWORD *)(v0 + 464);
    v67 = *(_QWORD *)(v0 + 456);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    swift_task_dealloc(v46);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    swift_task_dealloc(v67);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10037F1D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 664);
  *(_QWORD *)(v3 + 672) = a1;
  *(_QWORD *)(v3 + 680) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10037F230, 0, 0);
}

uint64_t sub_10037F230(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  if (*(_QWORD *)(v1 + 680))
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1006446B4);
    *(_QWORD *)(v1 + 688) = v2;
    *v2 = v1;
    v2[1] = sub_10037F550;
    return sub_1004FAD30();
  }
  else
  {
    v4 = *(_QWORD **)(v1 + 440);
    defaultLogger()(a1);
    sub_100384C54(v4);
    v5 = sub_100384C54(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v1 + 656);
    if (v8)
    {
      v10 = *(_QWORD *)(v1 + 648);
      v11 = *(_QWORD *)(v1 + 640);
      v34 = *(_QWORD *)(v1 + 544);
      v36 = *(void (**)(uint64_t, uint64_t))(v1 + 624);
      v30 = *(_QWORD *)(v1 + 632);
      v32 = *(_QWORD *)(v1 + 512);
      v12 = *(_QWORD **)(v1 + 440);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v38 = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v1 + 416) = sub_1000E3AC8(v11, v10, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 416, v1 + 424, v13 + 4);
      swift_bridgeObjectRelease(v10);
      sub_100384D48(v12);
      sub_100384D48(v12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Skipping pre-generation of %{public}s assessment because inputs are not available", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release(v9);

      swift_release(v30);
      v36(v34, v32);
    }
    else
    {
      v15 = *(void (**)(uint64_t, uint64_t))(v1 + 624);
      v16 = *(_QWORD *)(v1 + 544);
      v17 = *(_QWORD *)(v1 + 512);
      v18 = *(_QWORD **)(v1 + 440);
      swift_release(*(_QWORD *)(v1 + 632));
      swift_release(v9);
      sub_100384D48(v18);
      sub_100384D48(v18);

      v15(v16, v17);
    }
    v19 = *(_QWORD *)(v1 + 600);
    v20 = *(_QWORD *)(v1 + 592);
    v21 = *(_QWORD *)(v1 + 584);
    v22 = *(_QWORD *)(v1 + 576);
    v23 = *(_QWORD *)(v1 + 568);
    v24 = *(_QWORD *)(v1 + 560);
    v25 = *(_QWORD *)(v1 + 552);
    v26 = *(_QWORD *)(v1 + 544);
    v27 = *(_QWORD *)(v1 + 536);
    v28 = *(_QWORD *)(v1 + 528);
    v29 = *(_QWORD *)(v1 + 504);
    v31 = *(_QWORD *)(v1 + 480);
    v33 = *(_QWORD *)(v1 + 472);
    v35 = *(_QWORD *)(v1 + 464);
    v37 = *(_QWORD *)(v1 + 456);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    swift_task_dealloc(v19);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10037F550(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 688);
  *(_QWORD *)(v3 + 696) = a1;
  *(_QWORD *)(v3 + 704) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10037F5B0, 0, 0);
}

uint64_t sub_10037F5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  NSObject *v62;
  os_log_type_t v63;
  unint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char);
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;

  v1 = *(_QWORD *)(v0 + 704);
  if (v1)
  {
    sub_1001A5908(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680), *(uint8_t **)(v0 + 480));
    if (qword_10062F530 != -1)
      swift_once(&qword_10062F530, sub_10037BB30);
    v10 = *(_QWORD *)(v0 + 472);
    v9 = *(_QWORD *)(v0 + 480);
    v11 = type metadata accessor for WarmerUpper(0);
    v110 = sub_1000352C0(v11, (uint64_t)qword_100670728);
    sub_100038B24(v9, v10, &qword_1006375E0);
    v12 = sub_100004828(&qword_100636840);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    v15 = v14(v10, 1, v12);
    v16 = *(_QWORD *)(v0 + 472);
    v107 = v1;
    v100 = v13;
    v94 = v14;
    if (v15 == 1)
    {
      sub_100008030(v16, &qword_1006375E0);
      v103 = 0;
    }
    else
    {
      JWSSignedJSON.payload.getter(v12);
      v20 = *(_QWORD *)(v0 + 16);
      v21 = *(_QWORD *)(v0 + 24);
      v22 = *(_QWORD *)(v0 + 32);
      v23 = *(_QWORD *)(v0 + 40);
      v24 = *(_QWORD *)(v0 + 48);
      v25 = *(_QWORD *)(v0 + 56);
      v104 = *(_QWORD *)(v0 + 64);
      v26 = v13;
      v27 = *(_QWORD *)(v0 + 80);
      v90 = *(_QWORD *)(v0 + 72);
      v92 = *(_QWORD *)(v0 + 88);
      v97 = *(_QWORD *)(v0 + 96);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v16, v12);
      swift_bridgeObjectRetain(v27);
      v28 = v24;
      v14 = v94;
      sub_1001849FC(v20, v21, v22, v23, v28, v25, v104, v90);
      v103 = v27;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v97);
    }
    v98 = v0 + 352;
    v29 = *(_QWORD *)(v0 + 464);
    sub_100038B24(*(_QWORD *)(v0 + 480), v29, &qword_1006375E0);
    v30 = v14(v29, 1, v12);
    v31 = *(_QWORD *)(v0 + 464);
    v93 = v30;
    if (v30 == 1)
    {
      sub_100008030(v31, &qword_1006375E0);
      v91 = 0;
    }
    else
    {
      JWSSignedJSON.payload.getter(v12);
      v32 = *(_QWORD *)(v0 + 128);
      v33 = *(_QWORD *)(v0 + 136);
      v35 = *(_QWORD *)(v0 + 144);
      v34 = *(_QWORD *)(v0 + 152);
      v36 = *(_QWORD *)(v0 + 160);
      v37 = *(_QWORD *)(v0 + 168);
      v38 = *(_QWORD *)(v0 + 176);
      v82 = *(_QWORD *)(v0 + 184);
      v84 = *(_QWORD *)(v0 + 192);
      v86 = *(_QWORD *)(v0 + 200);
      v88 = *(_QWORD *)(v0 + 208);
      v91 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v31, v12);
      v39 = v32;
      v14 = v94;
      sub_1001849FC(v39, v33, v35, v34, v36, v37, v38, v82);
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease(v88);
    }
    v40 = *(_QWORD *)(v0 + 456);
    sub_100038B24(*(_QWORD *)(v0 + 480), v40, &qword_1006375E0);
    v41 = v14(v40, 1, v12);
    v42 = *(_QWORD *)(v0 + 456);
    if (v41 == 1)
    {
      sub_100008030(*(_QWORD *)(v0 + 456), &qword_1006375E0);
      v43 = 3;
    }
    else
    {
      JWSSignedJSON.payload.getter(v12);
      v44 = *(_QWORD *)(v0 + 240);
      v45 = *(_QWORD *)(v0 + 248);
      v46 = *(_QWORD *)(v0 + 256);
      v47 = *(_QWORD *)(v0 + 264);
      v48 = *(_QWORD *)(v0 + 272);
      v49 = *(_QWORD *)(v0 + 280);
      v83 = *(_QWORD *)(v0 + 296);
      v85 = *(_QWORD *)(v0 + 288);
      v87 = *(_QWORD *)(v0 + 304);
      v89 = *(_QWORD *)(v0 + 312);
      v95 = *(_QWORD *)(v0 + 320);
      v43 = *(unsigned __int8 *)(v0 + 348);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v42, v12);
      sub_1001849FC(v44, v45, v46, v47, v48, v49, v85, v83);
      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v95);
    }
    v50 = *(_QWORD *)(v0 + 616);
    v51 = *(void **)(v0 + 608);
    v52 = *(_QWORD *)(v0 + 480);
    swift_beginAccess(v110, v98, 33, 0);
    sub_1003806F4(v50, v51, v103, v91, v93 == 1, v43);
    swift_endAccess(v98);
    swift_bridgeObjectRelease(v103);
    sub_1001AD3B0(v52);
    if (*(_BYTE *)(v0 + 125) != 1 || sub_100383EE4(*(uint64_t **)(v0 + 440)))
    {
      v53 = *(_QWORD *)(v0 + 680);
      v54 = *(_QWORD *)(v0 + 608);
      v55 = *(_BYTE *)(*(_QWORD *)(v0 + 440) + 128);
      v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10063A7A8
                                                                                                + dword_10063A7A8);
      v56 = (_QWORD *)swift_task_alloc(unk_10063A7AC);
      *(_QWORD *)(v0 + 712) = v56;
      *v56 = v0;
      v56[1] = sub_10037FE08;
      return v111(*(_QWORD *)(v0 + 616), v54, *(_QWORD *)(v0 + 672), v53, *(_QWORD *)(v0 + 696), v107, v55);
    }
    v58 = *(_QWORD *)(v0 + 680);
    v59 = *(_QWORD **)(v0 + 440);
    swift_bridgeObjectRelease(v107);
    v60 = swift_bridgeObjectRelease(v58);
    defaultLogger()(v60);
    v61 = sub_100384C54(v59);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = *(_QWORD *)(v0 + 648);
      v65 = *(_QWORD *)(v0 + 640);
      v108 = *(_QWORD *)(v0 + 560);
      v112 = *(void (**)(uint64_t, uint64_t))(v0 + 624);
      v101 = *(_QWORD **)(v0 + 440);
      v105 = *(_QWORD *)(v0 + 512);
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v114 = v67;
      *(_DWORD *)v66 = 136446210;
      swift_bridgeObjectRetain(v64);
      *(_QWORD *)(v0 + 408) = sub_1000E3AC8(v65, v64, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v66 + 4);
      swift_bridgeObjectRelease(v64);
      sub_100384D48(v101);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Config type for profile %{public}s is disabled; skipping warmup",
        v66,
        0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);

      v112(v108, v105);
    }
    else
    {
      v68 = *(void (**)(uint64_t, uint64_t))(v0 + 624);
      v69 = *(_QWORD *)(v0 + 560);
      v70 = *(_QWORD *)(v0 + 512);
      sub_100384D48(*(_QWORD **)(v0 + 440));

      v68(v69, v70);
    }
    v71 = *(_QWORD *)(v0 + 656);
    v72 = *(_QWORD *)(v0 + 632);
    sub_1003845B0(*(_QWORD *)(v0 + 616), *(void **)(v0 + 608), 1);
    swift_release(v71);
    swift_release(v72);
  }
  else
  {
    v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
    v3 = defaultLogger()(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 632);
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not get server time seed; skipping pre-generating assessment",
        v7,
        2u);
      swift_slowDealloc(v7, -1, -1);

      swift_release(v6);
      v8 = 656;
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 656));

      v8 = 632;
    }
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 624);
    v18 = *(_QWORD *)(v0 + 552);
    v19 = *(_QWORD *)(v0 + 512);
    swift_release(*(_QWORD *)(v0 + v8));
    v17(v18, v19);
  }
  v73 = *(_QWORD *)(v0 + 600);
  v74 = *(_QWORD *)(v0 + 592);
  v75 = *(_QWORD *)(v0 + 584);
  v76 = *(_QWORD *)(v0 + 576);
  v77 = *(_QWORD *)(v0 + 568);
  v78 = *(_QWORD *)(v0 + 560);
  v79 = *(_QWORD *)(v0 + 552);
  v80 = *(_QWORD *)(v0 + 544);
  v81 = *(_QWORD *)(v0 + 536);
  v96 = *(_QWORD *)(v0 + 528);
  v99 = *(_QWORD *)(v0 + 504);
  v102 = *(_QWORD *)(v0 + 480);
  v106 = *(_QWORD *)(v0 + 472);
  v109 = *(_QWORD *)(v0 + 464);
  v113 = *(_QWORD *)(v0 + 456);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  swift_task_dealloc(v73);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v96);
  swift_task_dealloc(v99);
  swift_task_dealloc(v102);
  swift_task_dealloc(v106);
  swift_task_dealloc(v109);
  swift_task_dealloc(v113);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10037FE08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 712);
  *(_QWORD *)(*v1 + 720) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 704);
  v5 = *(_QWORD *)(v2 + 680);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if (v0)
    v6 = sub_10037FFC4;
  else
    v6 = sub_10037FE80;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10037FE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 632);
  sub_1003845B0(*(_QWORD *)(v0 + 616), *(void **)(v0 + 608), *(_BYTE *)(v0 + 125));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 504);
  v15 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 472);
  v17 = *(_QWORD *)(v0 + 464);
  v18 = *(_QWORD *)(v0 + 456);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10037FFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 504);
  v15 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 472);
  v17 = *(_QWORD *)(v0 + 464);
  v18 = *(_QWORD *)(v0 + 456);
  sub_1003845B0(*(_QWORD *)(v0 + 616), *(void **)(v0 + 608), *(_BYTE *)(v0 + 125));
  swift_release(v1);
  swift_release(v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10038010C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint8_t *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  void (*v33)(char *, char *);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v0 = type metadata accessor for TimeoutError(0);
  v33 = *(void (**)(char *, char *))(v0 - 8);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v34 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v32 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v32 - v10;
  v12 = defaultLogger()(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v1;
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Checking PassKit", v16, 2u);
    v17 = v16;
    v1 = v15;
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v18(v11, v1);
  v19 = sub_100004828(&qword_10063DE08);
  v20 = runAsyncAndBlock<A>(timeout:file:function:line:_:)(0x4010000000000000, 0, 0xD00000000000001ALL, 0x800000010055B3F0, 0x48746E756F636361, 0xEE00292857427361, 1008, &unk_10063DE00, 0, v19);
  v21 = v37;
  defaultLogger()(v20);
  v22 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v33 = (void (*)(char *, char *))v18;
    v34 = (char *)v1;
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v37 = (void *)v26;
    *(_DWORD *)v25 = 136446210;
    if (v21)
    {
      v27 = objc_msgSend(v22, "description");
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

    }
    else
    {
      v30 = 0xE300000000000000;
      v28 = 7104878;
    }
    v35 = sub_1000E3AC8(v28, v30, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v25 + 4);

    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "PKAccount is %{public}s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v33(v8, v34);
    if (v21)
      goto LABEL_10;
    return 0;
  }

  v18(v8, v1);
  if (!v21)
    return 0;
LABEL_10:

  return 1;
}

uint64_t sub_1003806F4(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  char *v93;
  id v94;
  NSArray v95;
  Swift::String v96;
  uint64_t v97;
  NSString v98;
  id v99;
  Swift::String v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v124;
  Class isa;
  Swift::String v126;
  uint64_t v127;
  NSString v128;
  id v129;
  Swift::String v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  os_log_type_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  id v158;
  Swift::String v159;
  uint64_t v160;
  NSString v161;
  char *v162;
  id v163;
  unint64_t v164;
  NSString v165;
  Swift::String v166;
  uint64_t v167;
  NSString v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  os_unfair_lock_s *v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  __int128 v206;
  uint64_t v207;
  char *v208;
  char *v209;
  int v210;
  char *v211;
  char *v212;
  void *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD v248[3];
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  char v253;
  uint64_t v254;
  __int128 v255;
  char v256;
  char v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  char v266;
  _QWORD *v267;
  uint64_t v268;
  char v269;
  char v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int16 v282;
  unsigned __int8 v283;
  char v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  char v290;
  char v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int16 v303;

  v222 = a6;
  v210 = a5;
  v216 = a4;
  v214 = a3;
  v230 = type metadata accessor for Logger(0);
  v207 = *(_QWORD *)(v230 - 8);
  v9 = __chkstk_darwin(v230);
  v11 = (char *)&v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v204 = (char *)&v197 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v197 - v15;
  v17 = __chkstk_darwin(v14);
  v212 = (char *)&v197 - v18;
  v19 = __chkstk_darwin(v17);
  v203 = (char *)&v197 - v20;
  v21 = __chkstk_darwin(v19);
  v209 = (char *)&v197 - v22;
  v23 = __chkstk_darwin(v21);
  v217 = (char *)&v197 - v24;
  v25 = __chkstk_darwin(v23);
  v205 = (char *)&v197 - v26;
  __chkstk_darwin(v25);
  v208 = (char *)&v197 - v27;
  v198 = v6;
  v28 = sub_10037C108();
  v221 = *(_QWORD *)(v28 + 16);
  if (v221)
  {
    v215 = v16;
    v211 = v11;
    v30 = 0;
    v219 = v28 + 32;
    v223 = v248;
    *(_QWORD *)&v29 = 136315138;
    v218 = v29;
    v201 = (char *)&type metadata for Any + 8;
    v202 = (unint64_t)"reidvd/WarmerUpper.swift";
    v200 = 0x800000010055B4B0;
    *(_QWORD *)&v29 = 136446210;
    v206 = v29;
    *(_QWORD *)&v29 = 136315394;
    v199 = v29;
    v236 = _swiftEmptyArrayStorage;
    v228 = a1;
    v220 = v28;
    v213 = a2;
    while (1)
    {
      v31 = v219 + 184 * v30;
      v32 = *(_OWORD *)v31;
      v33 = *(_OWORD *)(v31 + 16);
      v34 = *(_OWORD *)(v31 + 48);
      v294 = *(_OWORD *)(v31 + 32);
      v295 = v34;
      v292 = v32;
      v293 = v33;
      v35 = *(_OWORD *)(v31 + 64);
      v36 = *(_OWORD *)(v31 + 80);
      v37 = *(_OWORD *)(v31 + 112);
      v298 = *(_OWORD *)(v31 + 96);
      v299 = v37;
      v296 = v35;
      v297 = v36;
      v38 = *(_OWORD *)(v31 + 128);
      v39 = *(_OWORD *)(v31 + 144);
      v40 = *(_OWORD *)(v31 + 160);
      v303 = *(_WORD *)(v31 + 176);
      v302 = v40;
      v300 = v38;
      v301 = v39;
      v41 = v39;
      v42 = *((_QWORD *)&v37 + 1);
      v43 = *((_QWORD *)&v296 + 1);
      v44 = *((_QWORD *)&v295 + 1);
      v45 = *((_QWORD *)&v294 + 1);
      v46 = v294;
      v233 = *((_QWORD *)&v293 + 1);
      v234 = v295;
      v47 = v293;
      v48 = *((_QWORD *)&v292 + 1);
      v232 = v292;
      v290 = BYTE1(v296);
      v291 = v296;
      v288 = BYTE1(v298);
      v289 = v298;
      v287 = BYTE2(v298);
      v286 = v38;
      v284 = BYTE9(v39);
      v285 = BYTE8(v39);
      v283 = v303;
      v231 = *((_QWORD *)&v38 + 1);
      v245 = v39;
      v246 = *((_QWORD *)&v298 + 1);
      v229 = *((_QWORD *)&v37 + 1);
      v241 = v297;
      v239 = *((_QWORD *)&v295 + 1);
      v240 = *((_QWORD *)&v296 + 1);
      v238 = v294;
      v237 = v293;
      v244 = *((_QWORD *)&v292 + 1);
      v226 = (_QWORD *)v40;
      v227 = v30;
      v235 = v37;
      LODWORD(v243) = HIBYTE(v303);
      v242 = *((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v49 = v213;
        if (v37 == __PAIR128__((unint64_t)v213, v228)
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v37, *((_QWORD *)&v37 + 1), v228, v213, 0) & 1) != 0)
        {
          sub_100384C54(&v292);
          swift_bridgeObjectRetain(v41);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v244);
          swift_bridgeObjectRetain(v237);
          swift_bridgeObjectRetain(v238);
          swift_bridgeObjectRetain(*((_QWORD *)&v238 + 1));
          swift_bridgeObjectRetain(v239);
          swift_bridgeObjectRetain(v240);
          swift_bridgeObjectRetain(v241);
          swift_bridgeObjectRetain(*((_QWORD *)&v241 + 1));
          swift_bridgeObjectRetain(v246);
          v50 = v208;
          defaultLogger()(v51);
          v52 = swift_bridgeObjectRetain_n(v49, 2);
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.debug.getter(v53);
          if (os_log_type_enabled(v53, v54))
          {
            v55 = (uint8_t *)swift_slowAlloc(12, -1);
            v56 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v271 = v56;
            *(_DWORD *)v55 = v218;
            swift_bridgeObjectRetain(v49);
            v247 = sub_1000E3AC8(v228, (unint64_t)v49, (uint64_t *)&v271);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v55 + 4);
            swift_bridgeObjectRelease_n(v49, 3);
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Updating refresh triggers of warmeeuppee with workflowID %s", v55, 0xCu);
            swift_arrayDestroy(v56, 1, v201);
            swift_slowDealloc(v56, -1, -1);
            swift_slowDealloc(v55, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v49, 2);
          }
          v243 = *(void (**)(char *, uint64_t))(v207 + 8);
          v243(v50, v230);
          v71 = v214;
          v72 = v217;
          if (v214)
          {
            v73 = *(_QWORD *)(v214 + 16);
            v74 = v228;
            if (v73)
            {
              *(_QWORD *)&v271 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain(v214);
              sub_1000E419C(0, v73, 0);
              __asm { BR              X9 }
            }
            v75 = _swiftEmptyArrayStorage;
          }
          else
          {
            v75 = 0;
            v74 = v228;
          }
          swift_bridgeObjectRetain(v75);
          v77 = swift_bridgeObjectRelease(v226);
          if (v71)
          {
            v78 = v205;
            defaultLogger()(v77);
            v79 = swift_bridgeObjectRetain_n(v49, 2);
            v80 = Logger.logObject.getter(v79);
            v82 = static os_log_type_t.info.getter(v80, v81);
            if (os_log_type_enabled(v80, v82))
            {
              v83 = (uint8_t *)swift_slowAlloc(12, -1);
              v84 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v271 = v84;
              *(_DWORD *)v83 = v218;
              swift_bridgeObjectRetain(v49);
              v247 = sub_1000E3AC8(v74, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v83 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              _os_log_impl((void *)&_mh_execute_header, v80, v82, "setting defaults for assessmentRefresh.%s", v83, 0xCu);
              swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v84, -1, -1);
              swift_slowDealloc(v83, -1, -1);

              v85 = v205;
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v85 = v78;
            }
            v243(v85, v230);
            v94 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            if (v75)
            {
              v95.super.isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v75);
            }
            else
            {
              v95.super.isa = 0;
            }
            *(_QWORD *)&v271 = 0xD00000000000001ALL;
            *((_QWORD *)&v271 + 1) = v202 | 0x8000000000000000;
            v96._countAndFlagsBits = v74;
            v96._object = v49;
            String.append(_:)(v96);
            v97 = *((_QWORD *)&v271 + 1);
            v98 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v97);
            objc_msgSend(v94, "setObject:forKey:", v95.super.isa, v98);

            swift_unknownObjectRelease(v95.super.isa);
          }
          else
          {
            v86 = swift_bridgeObjectRelease(v75);
            defaultLogger()(v86);
            v87 = swift_bridgeObjectRetain_n(v49, 2);
            v88 = Logger.logObject.getter(v87);
            v90 = static os_log_type_t.info.getter(v88, v89);
            if (os_log_type_enabled(v88, v90))
            {
              v91 = (uint8_t *)swift_slowAlloc(12, -1);
              v92 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v271 = v92;
              *(_DWORD *)v91 = v218;
              swift_bridgeObjectRetain(v49);
              v247 = sub_1000E3AC8(v74, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v91 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              _os_log_impl((void *)&_mh_execute_header, v88, v90, "removing defaults for assessmentRefresh.%s", v91, 0xCu);
              swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v92, -1, -1);
              swift_slowDealloc(v91, -1, -1);

              v93 = v217;
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v93 = v72;
            }
            v243(v93, v230);
            v99 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            *(_QWORD *)&v271 = 0xD00000000000001ALL;
            *((_QWORD *)&v271 + 1) = v200;
            v100._countAndFlagsBits = v74;
            v100._object = v49;
            String.append(_:)(v100);
            v101 = *((_QWORD *)&v271 + 1);
            v98 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v101);
            objc_msgSend(v99, "removeObjectForKey:", v98);

          }
          v102 = v209;
          defaultLogger()(v103);
          v104 = swift_bridgeObjectRetain_n(v49, 2);
          v105 = Logger.logObject.getter(v104);
          v106 = static os_log_type_t.debug.getter(v105);
          if (os_log_type_enabled(v105, v106))
          {
            v107 = (uint8_t *)swift_slowAlloc(12, -1);
            v108 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v271 = v108;
            *(_DWORD *)v107 = v206;
            swift_bridgeObjectRetain(v49);
            v247 = sub_1000E3AC8(v228, (unint64_t)v49, (uint64_t *)&v271);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v107 + 4);
            swift_bridgeObjectRelease_n(v49, 3);
            _os_log_impl((void *)&_mh_execute_header, v105, v106, "Updating rateLimit for warmeeuppee with workflowID %{public}s", v107, 0xCu);
            swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v108, -1, -1);
            swift_slowDealloc(v107, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v49, 2);
          }
          v109 = ((uint64_t (*)(char *, uint64_t))v243)(v102, v230);
          v110 = v212;
          v283 = v210 & 1;
          if ((v210 & 1) != 0)
          {
            defaultLogger()(v109);
            v111 = swift_bridgeObjectRetain_n(v49, 2);
            v112 = Logger.logObject.getter(v111);
            v114 = static os_log_type_t.info.getter(v112, v113);
            if (os_log_type_enabled(v112, v114))
            {
              v115 = (uint8_t *)swift_slowAlloc(12, -1);
              v116 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v271 = v116;
              *(_DWORD *)v115 = v218;
              swift_bridgeObjectRetain(v49);
              v117 = v228;
              v247 = sub_1000E3AC8(v228, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v115 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              _os_log_impl((void *)&_mh_execute_header, v112, v114, "removing defaults for rateLimit.%s", v115, 0xCu);
              swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v116, -1, -1);
              swift_slowDealloc(v115, -1, -1);

              v243(v212, v230);
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v243(v110, v230);
              v117 = v228;
            }
            isa = (Class)objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            *(_QWORD *)&v271 = 0x696D694C65746172;
            *((_QWORD *)&v271 + 1) = 0xEA00000000002E74;
            v126._countAndFlagsBits = v117;
            v126._object = v49;
            String.append(_:)(v126);
            v127 = *((_QWORD *)&v271 + 1);
            v128 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v127);
            -[objc_class removeObjectForKey:](isa, "removeObjectForKey:", v128);
          }
          else
          {
            v118 = v203;
            defaultLogger()(v109);
            v119 = swift_bridgeObjectRetain_n(v49, 2);
            v120 = Logger.logObject.getter(v119);
            v122 = static os_log_type_t.info.getter(v120, v121);
            if (os_log_type_enabled(v120, v122))
            {
              v123 = (uint8_t *)swift_slowAlloc(12, -1);
              v124 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v271 = v124;
              *(_DWORD *)v123 = v218;
              swift_bridgeObjectRetain(v49);
              v117 = v228;
              v247 = sub_1000E3AC8(v228, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v123 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              _os_log_impl((void *)&_mh_execute_header, v120, v122, "setting defaults for rateLimit.%s", v123, 0xCu);
              swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v124, -1, -1);
              swift_slowDealloc(v123, -1, -1);

              v243(v203, v230);
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v243(v118, v230);
              v117 = v228;
            }
            v129 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            isa = Int._bridgeToObjectiveC()().super.super.isa;
            *(_QWORD *)&v271 = 0x696D694C65746172;
            *((_QWORD *)&v271 + 1) = 0xEA00000000002E74;
            v130._countAndFlagsBits = v117;
            v130._object = v49;
            String.append(_:)(v130);
            v131 = *((_QWORD *)&v271 + 1);
            v128 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v131);
            objc_msgSend(v129, "setObject:forKey:", isa, v128);

          }
          v132 = v215;
          defaultLogger()(v133);
          v134 = swift_bridgeObjectRetain_n(v49, 2);
          v135 = Logger.logObject.getter(v134);
          v136 = static os_log_type_t.debug.getter(v135);
          if (os_log_type_enabled(v135, v136))
          {
            v137 = (uint8_t *)swift_slowAlloc(12, -1);
            v138 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v271 = v138;
            *(_DWORD *)v137 = v206;
            swift_bridgeObjectRetain(v49);
            v247 = sub_1000E3AC8(v117, (unint64_t)v49, (uint64_t *)&v271);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v137 + 4);
            swift_bridgeObjectRelease_n(v49, 3);
            _os_log_impl((void *)&_mh_execute_header, v135, v136, "Updating configType for warmeeuppee with workflowID %{public}s", v137, 0xCu);
            swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v138, -1, -1);
            swift_slowDealloc(v137, -1, -1);

            v139 = v215;
          }
          else
          {

            swift_bridgeObjectRelease_n(v49, 2);
            v139 = v132;
          }
          v140 = ((uint64_t (*)(char *, uint64_t))v243)(v139, v230);
          v141 = v211;
          if (v222 == 3)
          {
            defaultLogger()(v140);
            v142 = swift_bridgeObjectRetain_n(v49, 2);
            v143 = Logger.logObject.getter(v142);
            v145 = static os_log_type_t.info.getter(v143, v144);
            if (os_log_type_enabled(v143, v145))
            {
              v146 = (uint8_t *)swift_slowAlloc(12, -1);
              v147 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v271 = v147;
              *(_DWORD *)v146 = v218;
              swift_bridgeObjectRetain(v49);
              v247 = sub_1000E3AC8(v117, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v146 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              _os_log_impl((void *)&_mh_execute_header, v143, v145, "removing defaults for configType.%s", v146, 0xCu);
              swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v147, -1, -1);
              swift_slowDealloc(v146, -1, -1);

              v148 = v211;
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v148 = v141;
            }
            v243(v148, v230);
            v158 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            *(_QWORD *)&v271 = 0x79546769666E6F63;
            *((_QWORD *)&v271 + 1) = 0xEB000000002E6570;
            v159._countAndFlagsBits = v117;
            v159._object = v49;
            String.append(_:)(v159);
            v160 = *((_QWORD *)&v271 + 1);
            v161 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v160);
            objc_msgSend(v158, "removeObjectForKey:", v161);

            v66 = 3;
            v69 = v229;
            v224 = v229;
            v65 = v216;
          }
          else
          {
            v149 = v204;
            defaultLogger()(v140);
            v150 = swift_bridgeObjectRetain_n(v49, 2);
            v151 = Logger.logObject.getter(v150);
            v153 = static os_log_type_t.info.getter(v151, v152);
            if (os_log_type_enabled(v151, v153))
            {
              v154 = swift_slowAlloc(22, -1);
              v155 = swift_slowAlloc(64, -1);
              *(_QWORD *)&v271 = v155;
              *(_DWORD *)v154 = v199;
              swift_bridgeObjectRetain(v49);
              v247 = sub_1000E3AC8(v117, (unint64_t)v49, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v154 + 4);
              swift_bridgeObjectRelease_n(v49, 3);
              *(_WORD *)(v154 + 12) = 2080;
              if ((_BYTE)v222)
              {
                v156 = v222 == 1 ? 0x7373657373416F6ELL : 0x64656C6261736964;
                v157 = v222 == 1 ? 0xEC000000746E656DLL : 0xE800000000000000;
              }
              else
              {
                v157 = 0xE600000000000000;
                v156 = 0x6C616D726F6ELL;
              }
              v247 = sub_1000E3AC8(v156, v157, (uint64_t *)&v271);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v223, v154 + 14);
              swift_bridgeObjectRelease(v157);
              _os_log_impl((void *)&_mh_execute_header, v151, v153, "setting defaults for configType.%s to %s", (uint8_t *)v154, 0x16u);
              swift_arrayDestroy(v155, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v155, -1, -1);
              swift_slowDealloc(v154, -1, -1);

              v162 = v204;
            }
            else
            {

              swift_bridgeObjectRelease_n(v49, 2);
              v162 = v149;
            }
            v243(v162, v230);
            v163 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            if ((_BYTE)v222)
              v164 = v222 == 1 ? 0xEC000000746E656DLL : 0xE800000000000000;
            else
              v164 = 0xE600000000000000;
            v165 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v164);
            *(_QWORD *)&v271 = 0x79546769666E6F63;
            *((_QWORD *)&v271 + 1) = 0xEB000000002E6570;
            v166._countAndFlagsBits = v117;
            v166._object = v49;
            String.append(_:)(v166);
            v167 = *((_QWORD *)&v271 + 1);
            v168 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v167);
            objc_msgSend(v163, "setObject:forKey:", v165, v168);

            v69 = v229;
            v224 = v229;
            v65 = v216;
            v66 = v222;
          }
          v68 = v245;
          v64 = *((_QWORD *)&v241 + 1);
          v63 = v241;
          v61 = v239;
          v62 = v240;
          v60 = *((_QWORD *)&v238 + 1);
          v59 = v238;
          v58 = v237;
          v67 = v231;
          v70 = v75;
        }
        else
        {
          sub_100384C54(&v292);
          v76 = v41;
          swift_bridgeObjectRetain(v41);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v244);
          v58 = v237;
          swift_bridgeObjectRetain(v237);
          v59 = v238;
          swift_bridgeObjectRetain(v238);
          v60 = *((_QWORD *)&v238 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&v238 + 1));
          v61 = v239;
          swift_bridgeObjectRetain(v239);
          v62 = v240;
          swift_bridgeObjectRetain(v240);
          v63 = v241;
          swift_bridgeObjectRetain(v241);
          v64 = *((_QWORD *)&v241 + 1);
          swift_bridgeObjectRetain(*((_QWORD *)&v241 + 1));
          swift_bridgeObjectRetain(v246);
          v68 = v76;
          v224 = v42;
          v69 = v42;
          v70 = v226;
          v67 = v231;
          v66 = (int)v243;
          v65 = v242;
        }
      }
      else
      {
        v57 = v297;
        sub_100384C54(&v292);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v48);
        v58 = v47;
        swift_bridgeObjectRetain(v47);
        v59 = v46;
        swift_bridgeObjectRetain(v46);
        v60 = v45;
        swift_bridgeObjectRetain(v45);
        v61 = v44;
        swift_bridgeObjectRetain(v44);
        v62 = v43;
        swift_bridgeObjectRetain(v43);
        v63 = v57;
        swift_bridgeObjectRetain(v57);
        v64 = *((_QWORD *)&v241 + 1);
        swift_bridgeObjectRetain(*((_QWORD *)&v241 + 1));
        swift_bridgeObjectRetain(v246);
        v65 = v242;
        v66 = (int)v243;
        v67 = v231;
        v68 = v245;
        v224 = 0;
        v69 = 0;
        v70 = v226;
      }
      *(_QWORD *)&v271 = v232;
      v169 = v244;
      *((_QWORD *)&v271 + 1) = v244;
      *(_QWORD *)&v272 = v58;
      *((_QWORD *)&v272 + 1) = v233;
      *(_QWORD *)&v273 = v59;
      *((_QWORD *)&v273 + 1) = v60;
      *(_QWORD *)&v274 = v234;
      *((_QWORD *)&v274 + 1) = v61;
      LOWORD(v275) = v296;
      *((_QWORD *)&v275 + 1) = v62;
      *(_QWORD *)&v276 = v63;
      *((_QWORD *)&v276 + 1) = v64;
      LOWORD(v277) = v298;
      BYTE2(v277) = BYTE2(v298);
      v170 = v246;
      *((_QWORD *)&v277 + 1) = v246;
      *(_QWORD *)&v278 = v235;
      *((_QWORD *)&v278 + 1) = v69;
      LOBYTE(v279) = v300;
      *((_QWORD *)&v279 + 1) = v67;
      *(_QWORD *)&v280 = v68;
      WORD4(v280) = WORD4(v301);
      v225 = v70;
      *(_QWORD *)&v281 = v70;
      v242 = v65;
      *((_QWORD *)&v281 + 1) = v65;
      LODWORD(v226) = v283;
      LOBYTE(v282) = v283;
      LODWORD(v243) = v66;
      HIBYTE(v282) = v66;
      sub_100384C54(&v271);
      swift_bridgeObjectRelease(v169);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v170);
      swift_bridgeObjectRelease(v224);
      swift_bridgeObjectRelease(v245);
      v171 = v236;
      if ((swift_isUniquelyReferenced_nonNull_native(v236) & 1) == 0)
        v171 = sub_1000E3800(0, v171[2] + 1, 1, v171);
      v172 = v220;
      v174 = v171[2];
      v173 = v171[3];
      v236 = v171;
      v175 = v239;
      v176 = (char)v243;
      v177 = v242;
      v178 = v225;
      if (v174 >= v173 >> 1)
      {
        v190 = sub_1000E3800((_QWORD *)(v173 > 1), v174 + 1, 1, v236);
        v177 = v242;
        v176 = (char)v243;
        v236 = v190;
      }
      v179 = v236;
      v236[2] = v174 + 1;
      v180 = &v179[23 * v174];
      v181 = v271;
      v182 = v272;
      v183 = v274;
      *((_OWORD *)v180 + 4) = v273;
      *((_OWORD *)v180 + 5) = v183;
      *((_OWORD *)v180 + 2) = v181;
      *((_OWORD *)v180 + 3) = v182;
      v184 = v275;
      v185 = v276;
      v186 = v278;
      *((_OWORD *)v180 + 8) = v277;
      *((_OWORD *)v180 + 9) = v186;
      *((_OWORD *)v180 + 6) = v184;
      *((_OWORD *)v180 + 7) = v185;
      v187 = v279;
      v188 = v280;
      v189 = v281;
      *((_WORD *)v180 + 104) = v282;
      *((_OWORD *)v180 + 11) = v188;
      *((_OWORD *)v180 + 12) = v189;
      *((_OWORD *)v180 + 10) = v187;
      v247 = v232;
      v248[0] = v244;
      v248[1] = v237;
      v248[2] = v233;
      v249 = v238;
      v250 = v234;
      v251 = v175;
      v252 = v291;
      v253 = v290;
      v254 = v240;
      v255 = v241;
      v256 = v289;
      v257 = v288;
      v258 = v287;
      v259 = v246;
      v260 = v235;
      v261 = v229;
      v262 = v286;
      v263 = v231;
      v264 = v245;
      v265 = v285;
      v266 = v284;
      v267 = v178;
      v268 = v177;
      v269 = (char)v226;
      v270 = v176;
      v30 = v227 + 1;
      sub_100384D48(&v247);
      if (v30 == v221)
        break;
      if (v30 >= *(_QWORD *)(v172 + 16))
      {
        __break(1u);
        JUMPOUT(0x1003820B4);
      }
    }
    swift_bridgeObjectRelease(v172);
    v191 = v198;
    v192 = v236;
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    v192 = _swiftEmptyArrayStorage;
    v191 = v198;
  }
  v193 = type metadata accessor for WarmerUpper(0);
  v194 = *(os_unfair_lock_s **)(v191 + *(int *)(v193 + 24));
  os_unfair_lock_lock(v194 + 4);
  v195 = *(int *)(v193 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v191 + v195));
  *(_QWORD *)(v191 + v195) = v192;
  swift_retain(v194);
  os_unfair_lock_unlock(v194 + 4);
  return swift_release(v194);
}

uint64_t sub_1003820C8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void (**v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96[2];

  v84 = a4;
  v90 = a3;
  v94 = a2;
  v5 = type metadata accessor for WarmerUpper(0);
  v82 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v83 = v6;
  v85 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v92 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v81 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_10063DE18);
  __chkstk_darwin(v8);
  v93 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004828(&qword_10063DE20);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v91 = (uint64_t)&v74 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v74 - v16;
  v18 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for DIPSignpost(0);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Logger(0);
  v86 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v24);
  v27 = sub_100384C54((_QWORD *)a1);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v80 = v22;
    v30 = swift_slowAlloc(12, -1);
    v77 = v20;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc(32, -1);
    v78 = v8;
    v33 = v32;
    v96[0] = v32;
    v76 = v23;
    *(_DWORD *)v31 = 136446210;
    v75 = v31 + 4;
    v34 = v13;
    v79 = v17;
    v36 = *(_QWORD *)a1;
    v35 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain(v35);
    v37 = v36;
    v13 = v34;
    v22 = v80;
    v95 = sub_1000E3AC8(v37, v35, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v75);
    v38 = v35;
    v17 = v79;
    swift_bridgeObjectRelease(v38);
    sub_100384D48((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Started %{public}s warmup for potentially locked device", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v39 = v33;
    v8 = v78;
    swift_slowDealloc(v39, -1, -1);
    v40 = v31;
    v20 = v77;
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v26, v76);
  }
  else
  {
    sub_100384D48((_QWORD *)a1);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v26, v23);
  }
  v86 = os_transaction_create("WarmerUpper.possiblyLocked");
  static DaemonSignposts.warmupDeviceLocked.getter();
  v41 = DIPSignpost.init(_:)(v20);
  v42 = v88;
  v43 = v92;
  if (v94)
  {
    v94(v41);
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v44(v17, 0, 1, v42);
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
    v44(v17, 1, 1, v88);
  }
  v45 = v91;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v91, enum case for DIPBackgroundDeferralStatus.shouldDefer(_:), v42);
  v44((char *)v45, 0, 1, v42);
  v46 = *(int *)(v8 + 48);
  v47 = v93;
  v48 = v93 + v46;
  sub_100038B24((uint64_t)v17, v93, &qword_10063DE20);
  sub_100038B24(v45, v48, &qword_10063DE20);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v49(v47, 1, v42) != 1)
  {
    sub_100038B24(v47, (uint64_t)v13, &qword_10063DE20);
    if (v49(v48, 1, v42) != 1)
    {
      v50 = v92;
      v51 = (uint64_t)v17;
      v52 = v13;
      v53 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v81, v48, v42);
      v54 = sub_100004790(&qword_10063DE38, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
      v55 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v53, v42, v54);
      v56 = *(void (**)(char *, uint64_t))(v50 + 8);
      v56(v53, v42);
      sub_100008030(v91, &qword_10063DE20);
      sub_100008030(v51, &qword_10063DE20);
      v56(v52, v42);
      sub_100008030(v47, &qword_10063DE20);
      if ((v55 & 1) != 0)
        goto LABEL_15;
LABEL_14:
      v57 = v85;
      sub_1000B6BCC(v84, v85);
      v58 = *(unsigned __int8 *)(v82 + 80);
      v59 = (v58 + 16) & ~v58;
      v60 = (v83 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
      v61 = v22;
      v62 = (v60 + 185) & 0xFFFFFFFFFFFFFFF8;
      v63 = swift_allocObject(&unk_100614AD0, v62 + 16, v58 | 7);
      sub_100384BDC(v57, v63 + v59);
      v64 = v63 + v60;
      v65 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(v64 + 128) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v64 + 144) = v65;
      *(_OWORD *)(v64 + 160) = *(_OWORD *)(a1 + 160);
      *(_WORD *)(v64 + 176) = *(_WORD *)(a1 + 176);
      v66 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(v64 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v64 + 80) = v66;
      v67 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v64 + 96) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(v64 + 112) = v67;
      v68 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v64 = *(_OWORD *)a1;
      *(_OWORD *)(v64 + 16) = v68;
      v69 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v64 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v64 + 48) = v69;
      v70 = (void (**)(uint64_t))(v63 + v62);
      v22 = v61;
      v71 = (uint64_t)v94;
      v72 = v90;
      *v70 = v94;
      v70[1] = (void (*)(uint64_t))v72;
      sub_100384C54((_QWORD *)a1);
      sub_10002EF2C(v71, v72);
      runAsyncAndBlock<A>(file:function:line:_:)("WarmerUpper.possiblyLocked", 0xD00000000000001ALL, 0x800000010055B3F0, 0xD000000000000036, 0x800000010055B8A0, 765, &unk_10063DE30, v63, (char *)&type metadata for () + 8);
      swift_release(v63);
      goto LABEL_15;
    }
    sub_100008030(v91, &qword_10063DE20);
    sub_100008030((uint64_t)v17, &qword_10063DE20);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v13, v42);
LABEL_12:
    sub_100008030(v93, &qword_10063DE18);
    goto LABEL_14;
  }
  sub_100008030(v45, &qword_10063DE20);
  sub_100008030((uint64_t)v17, &qword_10063DE20);
  if (v49(v48, 1, v42) != 1)
    goto LABEL_12;
  sub_100008030(v93, &qword_10063DE20);
LABEL_15:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_unknownObjectRelease(v86);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v22, v89);
}

uint64_t sub_10038280C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10063DE44);
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_10001D0A0;
  return sub_100382870(a3, a4, a5);
}

uint64_t sub_100382870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v4 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v3[23] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[24] = v5;
  v3[25] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004828(&qword_10063DE18);
  v3[26] = v6;
  v3[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063DE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v7);
  v3[29] = swift_task_alloc(v7);
  v3[30] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v3[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[32] = v9;
  v3[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100382964, 0, 0);
}

uint64_t sub_100382964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = *(_QWORD *)(v1 + 256);
  v2 = *(_QWORD *)(v1 + 264);
  v4 = *(_QWORD *)(v1 + 248);
  v5 = *(_QWORD **)(v1 + 160);
  v6 = v5[17];
  v7 = v5[18];
  v8 = UUID.init()(a1);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(_QWORD *)(v1 + 272) = sub_1000356BC(v9, v11, v6, v7);
  swift_bridgeObjectRelease(v11);
  v12 = (_QWORD *)v5[13];
  *(_QWORD *)(v1 + 280) = v12;
  if (v12 && (v13 = v12[2], (*(_QWORD *)(v1 + 288) = v13) != 0))
  {
    v14 = *(uint64_t **)(v1 + 160);
    v15 = *v14;
    *(_QWORD *)(v1 + 296) = *v14;
    v16 = v14[1];
    *(_DWORD *)(v1 + 352) = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
    *(_QWORD *)(v1 + 304) = v16;
    *(_QWORD *)(v1 + 312) = 0;
    v17 = *(_QWORD *)(v1 + 272);
    v19 = v12[4];
    v18 = v12[5];
    v20 = type metadata accessor for ProfileManager();
    swift_bridgeObjectRetain(v12);
    inited = (_QWORD *)swift_initStackObject(v20, v1 + 88);
    *(_QWORD *)(v1 + 320) = inited;
    v22 = sub_100004828((uint64_t *)&unk_100640C60);
    v23 = swift_allocObject(v22, 36, 7);
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_DWORD *)(v23 + 32) = 0;
    inited[7] = v17;
    inited[8] = v23;
    inited[2] = 0;
    inited[3] = v19;
    inited[4] = v18;
    inited[5] = v15;
    inited[6] = v16;
    v24 = dword_1006446BC;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v16);
    swift_retain(v17);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 328) = v25;
    *v25 = v1;
    v25[1] = sub_100382B70;
    return sub_1004FB548();
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 272);
    v28 = type metadata accessor for ProfileManager();
    v29 = swift_initStackObject(v28, v1 + 16);
    *(_QWORD *)(v1 + 336) = v29;
    v30 = sub_100004828((uint64_t *)&unk_100640C60);
    v31 = swift_allocObject(v30, 36, 7);
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_DWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 56) = v27;
    *(_QWORD *)(v29 + 64) = v31;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    v32 = dword_1006446C4;
    swift_retain(v27);
    v33 = (_QWORD *)swift_task_alloc(v32);
    *(_QWORD *)(v1 + 344) = v33;
    *v33 = v1;
    v33[1] = sub_100383038;
    return sub_1004FB8A0();
  }
}

uint64_t sub_100382B70()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_100382BC4, 0, 0);
}

uint64_t sub_100382BC4()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v1 = *(void (**)(void))(v0 + 168);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  if (v1)
  {
    v1();
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0, 1, v3);
  }
  else
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(*(_QWORD *)(v0 + 240), 1, 1, v3);
  }
  v7 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v7, *(unsigned int *)(v0 + 352), v10);
  v5(v7, 0, 1, v10);
  v12 = v8 + *(int *)(v9 + 48);
  sub_100038B24(v6, v8, &qword_10063DE20);
  sub_100038B24(v7, v12, &qword_10063DE20);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v13(v8, 1, v10) == 1)
  {
    v15 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 184);
    swift_release(*(_QWORD *)(v0 + 320));
    sub_100008030(v15, &qword_10063DE20);
    sub_100008030(v14, &qword_10063DE20);
    if (v13(v12, 1, v16) == 1)
    {
      v17 = *(_QWORD *)(v0 + 272);
      v18 = *(_QWORD *)(v0 + 280);
      sub_100008030(*(_QWORD *)(v0 + 216), &qword_10063DE20);
      swift_bridgeObjectRelease(v18);
      swift_release(v17);
LABEL_12:
      v35 = *(_QWORD *)(v0 + 232);
      v36 = *(_QWORD *)(v0 + 240);
      v38 = *(_QWORD *)(v0 + 216);
      v37 = *(_QWORD *)(v0 + 224);
      v39 = *(_QWORD *)(v0 + 200);
      swift_task_dealloc(*(_QWORD *)(v0 + 264));
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(v0 + 184);
  sub_100038B24(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), &qword_10063DE20);
  v20 = v13(v12, 1, v19);
  v21 = *(_QWORD *)(v0 + 320);
  v23 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 224);
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    swift_release(*(_QWORD *)(v0 + 320));
    sub_100008030(v23, &qword_10063DE20);
    sub_100008030(v22, &qword_10063DE20);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
LABEL_9:
    sub_100008030(*(_QWORD *)(v0 + 216), &qword_10063DE18);
    goto LABEL_13;
  }
  v27 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 192);
  v28 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v28, v12, v30);
  v31 = sub_100004790(&qword_10063DE38, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v28, v30, v31);
  swift_release(v21);
  v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v33(v28, v30);
  sub_100008030(v23, &qword_10063DE20);
  sub_100008030(v22, &qword_10063DE20);
  v33(v24, v30);
  sub_100008030(v27, &qword_10063DE20);
  if ((v32 & 1) != 0)
  {
    v34 = *(_QWORD *)(v0 + 280);
    swift_release(*(_QWORD *)(v0 + 272));
    swift_bridgeObjectRelease(v34);
    goto LABEL_12;
  }
LABEL_13:
  v41 = *(_QWORD *)(v0 + 312) + 1;
  if (v41 == *(_QWORD *)(v0 + 288))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    v42 = *(_QWORD *)(v0 + 272);
    v43 = type metadata accessor for ProfileManager();
    inited = swift_initStackObject(v43, v0 + 16);
    *(_QWORD *)(v0 + 336) = inited;
    v45 = sub_100004828((uint64_t *)&unk_100640C60);
    v46 = swift_allocObject(v45, 36, 7);
    *(_QWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v46 + 24) = 0;
    *(_DWORD *)(v46 + 32) = 0;
    *(_QWORD *)(inited + 16) = 0;
    *(_QWORD *)(inited + 56) = v42;
    *(_QWORD *)(inited + 64) = v46;
    *(_OWORD *)(inited + 40) = 0u;
    *(_OWORD *)(inited + 24) = 0u;
    v47 = dword_1006446C4;
    swift_retain(v42);
    v48 = (_QWORD *)swift_task_alloc(v47);
    *(_QWORD *)(v0 + 344) = v48;
    *v48 = v0;
    v48[1] = sub_100383038;
    return sub_1004FB8A0();
  }
  else
  {
    *(_QWORD *)(v0 + 312) = v41;
    v50 = *(_QWORD *)(v0 + 296);
    v49 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 272);
    v52 = *(_QWORD *)(v0 + 280) + 16 * v41;
    v54 = *(_QWORD *)(v52 + 32);
    v53 = *(_QWORD *)(v52 + 40);
    v55 = type metadata accessor for ProfileManager();
    v56 = (_QWORD *)swift_initStackObject(v55, v0 + 88);
    *(_QWORD *)(v0 + 320) = v56;
    v57 = sub_100004828((uint64_t *)&unk_100640C60);
    v58 = swift_allocObject(v57, 36, 7);
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    *(_DWORD *)(v58 + 32) = 0;
    v56[7] = v51;
    v56[8] = v58;
    v56[2] = 0;
    v56[3] = v54;
    v56[4] = v53;
    v56[5] = v50;
    v56[6] = v49;
    v59 = dword_1006446BC;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v49);
    swift_retain(v51);
    v60 = (_QWORD *)swift_task_alloc(v59);
    *(_QWORD *)(v0 + 328) = v60;
    *v60 = v0;
    v60[1] = sub_100382B70;
    return sub_1004FB548();
  }
}

uint64_t sub_100383038()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  return swift_task_switch(sub_10038308C, 0, 0);
}

uint64_t sub_10038308C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 272);
  swift_setDeallocating(v1);
  swift_release(v1[2]);
  swift_bridgeObjectRelease(v1[4]);
  swift_bridgeObjectRelease(v1[6]);
  swift_release(v1[7]);
  swift_release(v1[8]);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100383140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t *v51;
  _QWORD v53[3];
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;

  v65 = a3;
  v66 = a4;
  v64 = a2;
  v54 = type metadata accessor for DIPError.Code(0);
  v53[2] = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WarmerUpper(0);
  v62 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v63 = v12;
  v67 = (uint64_t)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v61 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v68 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v59 = *(_QWORD *)(v18 - 8);
  v60 = v18;
  v19 = __chkstk_darwin(v18);
  v53[1] = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)v53 - v22;
  defaultLogger()(v21);
  v24 = sub_100384C54((_QWORD *)a1);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v57 = v8;
  v58 = v7;
  v55 = v6;
  v56 = v10;
  v69 = v16;
  v70 = v15;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v73 = v29;
    *(_DWORD *)v28 = 136446210;
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain(v31);
    v71 = sub_1000E3AC8(v30, v31, (uint64_t *)&v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v28 + 4);
    swift_bridgeObjectRelease(v31);
    sub_100384D48((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Started %{public}s warmup for unlocked device", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_100384D48((_QWORD *)a1);
  }

  v59 = *(_QWORD *)(v59 + 8);
  ((void (*)(char *, uint64_t))v59)(v23, v60);
  v32 = v68;
  v34 = v65;
  v33 = v66;
  v36 = v63;
  v35 = v64;
  v38 = v61;
  v37 = v62;
  v68 = (char *)os_transaction_create("WarmerUpper.unlocked");
  static DaemonSignposts.warmupDeviceUnlocked.getter();
  DIPSignpost.init(_:)(v38);
  v39 = v67;
  sub_1000B6BCC(v35, v67);
  v40 = *(unsigned __int8 *)(v37 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = (v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 185) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_100614AF8, v43 + 16, v40 | 7);
  sub_100384BDC(v39, v44 + v41);
  v45 = v44 + v42;
  v46 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v45 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v45 + 144) = v46;
  *(_OWORD *)(v45 + 160) = *(_OWORD *)(a1 + 160);
  *(_WORD *)(v45 + 176) = *(_WORD *)(a1 + 176);
  v47 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v45 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v45 + 80) = v47;
  v48 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v45 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v45 + 112) = v48;
  v49 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v45 = *(_OWORD *)a1;
  *(_OWORD *)(v45 + 16) = v49;
  v50 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v45 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v45 + 48) = v50;
  v51 = (uint64_t *)(v44 + v43);
  *v51 = v34;
  v51[1] = v33;
  sub_100384C54((_QWORD *)a1);
  sub_10002EF2C(v34, v33);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ALL, 0x800000010055B3F0, 0xD000000000000030, 0x800000010055B900, 785, &unk_10063DE50, v44, (char *)&type metadata for () + 8);
  swift_release(v44);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_unknownObjectRelease(v68);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v32, v70);
}

uint64_t sub_1003837CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v6;
  _QWORD *v7;

  v6 = a4 != 0;
  v7 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_10001D0A0;
  return sub_10037EB1C(a3, v6);
}

uint64_t sub_100383834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;

  v55 = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v49[2] = *(_QWORD *)(v3 - 8);
  v49[3] = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WarmerUpper(0);
  v52 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v53 = v11;
  v54 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v12);
  v57 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v56 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v50 = *(_QWORD *)(v17 - 8);
  v51 = v17;
  v18 = __chkstk_darwin(v17);
  v49[1] = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)v49 - v21;
  defaultLogger()(v20);
  v23 = sub_100384C54((_QWORD *)a1);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v49[6] = v7;
  v49[7] = v6;
  v49[4] = v5;
  v49[5] = v9;
  v58 = v15;
  v59 = v14;
  if (v26)
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v62 = v28;
    *(_DWORD *)v27 = 136446210;
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain(v30);
    v60 = sub_1000E3AC8(v29, v30, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v27 + 4);
    swift_bridgeObjectRelease(v30);
    sub_100384D48((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Started %{public}s warmup for completed buddy flow", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_100384D48((_QWORD *)a1);
  }

  v50 = *(_QWORD *)(v50 + 8);
  ((void (*)(char *, uint64_t))v50)(v22, v51);
  v31 = v55;
  v32 = v56;
  v33 = v53;
  v34 = (uint64_t)v54;
  v35 = v52;
  v36 = os_transaction_create("WarmerUpper.buddyFlow");
  v37 = v57;
  static DaemonSignposts.warmupBuddyFlow.getter();
  DIPSignpost.init(_:)(v37);
  sub_1000B6BCC(v31, v34);
  v38 = *(unsigned __int8 *)(v35 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = (v33 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject(&unk_100614C88, v40 + 178, v38 | 7);
  sub_100384BDC(v34, v41 + v39);
  v42 = v41 + v40;
  v43 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v42 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v42 + 144) = v43;
  *(_OWORD *)(v42 + 160) = *(_OWORD *)(a1 + 160);
  *(_WORD *)(v42 + 176) = *(_WORD *)(a1 + 176);
  v44 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v42 + 80) = v44;
  v45 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v42 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v42 + 112) = v45;
  v46 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v42 = *(_OWORD *)a1;
  *(_OWORD *)(v42 + 16) = v46;
  v47 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v42 + 48) = v47;
  sub_100384C54((_QWORD *)a1);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000001ALL, 0x800000010055B3F0, 0xD00000000000002BLL, 0x800000010055B990, 808, &unk_10063DE60, v41, (char *)&type metadata for () + 8);
  swift_release(v41);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  swift_unknownObjectRelease(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v32, v59);
}

uint64_t sub_100383E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100007EE8;
  return sub_10037EB1C(a3, 0);
}

BOOL sub_100383EE4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  _QWORD v45[2];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v45 - v7;
  v9 = sub_10037C108();
  v10 = v9;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v45[0] = v6;
    v12 = *a1;
    v51 = a1[1];
    v13 = *(_OWORD *)(v9 + 176);
    v61 = *(_OWORD *)(v9 + 160);
    v62 = v13;
    v63 = *(_OWORD *)(v9 + 192);
    v64 = *(_WORD *)(v9 + 208);
    v14 = *(_OWORD *)(v9 + 112);
    v57 = *(_OWORD *)(v9 + 96);
    v58 = v14;
    v15 = *(_OWORD *)(v9 + 144);
    v59 = *(_OWORD *)(v9 + 128);
    v60 = v15;
    v16 = *(_OWORD *)(v9 + 48);
    v53 = *(_OWORD *)(v9 + 32);
    v54 = v16;
    v18 = *(_OWORD *)(v9 + 80);
    v55 = *(_OWORD *)(v9 + 64);
    *((_QWORD *)&v17 + 1) = *((_QWORD *)&v55 + 1);
    v56 = v18;
    v19 = *((_QWORD *)&v53 + 1);
    v20 = v11 - 1;
    v21 = 216;
    *(_QWORD *)&v17 = 136315394;
    v46 = v17;
    v45[1] = (char *)&type metadata for Any + 8;
    v48 = v2;
    v47 = v3;
    v50 = v9;
    v49 = v12;
    while (1)
    {
      v22 = v53;
      v23 = (_QWORD)v53 == v12 && v19 == v51;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v53, v19, v12, v51, 0) & 1) != 0)
      {
        v24 = HIBYTE(v64);
        v25 = sub_100384C54(&v53);
        defaultLogger()(v25);
        sub_100384C54(&v53);
        v26 = sub_100384C54(&v53);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.debug.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = swift_slowAlloc(22, -1);
          v52 = swift_slowAlloc(64, -1);
          *(_DWORD *)v29 = v46;
          swift_bridgeObjectRetain(v19);
          *(_QWORD *)(v29 + 4) = sub_1000E3AC8(v22, v19, &v52);
          swift_bridgeObjectRelease(v19);
          *(_WORD *)(v29 + 12) = 2080;
          __asm { BR              X8 }
        }
        sub_100384D48(&v53);
        sub_100384D48(&v53);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        sub_100384D48(&v53);
        v10 = v50;
        v12 = v49;
        if ((_DWORD)v24 != 3)
          break;
      }
      if (!v20)
      {
        v39 = swift_bridgeObjectRelease(v10);
        v6 = (char *)v45[0];
        goto LABEL_15;
      }
      v30 = *(_OWORD *)(v10 + v21);
      v31 = *(_OWORD *)(v10 + v21 + 16);
      v32 = *(_OWORD *)(v10 + v21 + 48);
      v55 = *(_OWORD *)(v10 + v21 + 32);
      v56 = v32;
      v54 = v31;
      v53 = v30;
      v33 = *(_OWORD *)(v10 + v21 + 64);
      v34 = *(_OWORD *)(v10 + v21 + 80);
      v35 = *(_OWORD *)(v10 + v21 + 112);
      v59 = *(_OWORD *)(v10 + v21 + 96);
      v60 = v35;
      v57 = v33;
      v58 = v34;
      v36 = *(_OWORD *)(v10 + v21 + 128);
      v37 = *(_OWORD *)(v10 + v21 + 144);
      v38 = *(_OWORD *)(v10 + v21 + 160);
      v64 = *(_WORD *)(v10 + v21 + 176);
      v62 = v37;
      v63 = v38;
      v61 = v36;
      v19 = *((_QWORD *)&v53 + 1);
      v21 += 184;
      --v20;
    }
    swift_bridgeObjectRelease(v50);
    return v24 < 2;
  }
  else
  {
    v39 = swift_bridgeObjectRelease(v9);
LABEL_15:
    v40 = defaultLogger()(v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Did not find a global config to look at", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return 0;
  }
}

uint64_t sub_100384390(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch(sub_1003843A8, 0, 0);
}

id sub_1003843A8()
{
  _QWORD *v0;
  id result;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  result = objc_msgSend((id)objc_opt_self(PKAccountService), "sharedInstance");
  v0[17] = result;
  if (result)
  {
    v2 = result;
    v3 = v0 + 2;
    v0[7] = v0 + 15;
    v0[2] = v0;
    v0[3] = sub_10038446C;
    v4 = swift_continuation_init(v0 + 2, 1);
    v0[10] = _NSConcreteStackBlock;
    v5 = v0 + 10;
    v5[1] = 0x40000000;
    v5[2] = sub_100384508;
    v5[3] = &unk_1006149B8;
    v5[4] = v4;
    objc_msgSend(v2, "defaultAccountForFeature:completion:", 2, v5);
    return (id)swift_continuation_await(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10038446C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 144) = v1;
  if (v1)
    v2 = sub_1000DEF04;
  else
    v2 = sub_1003844CC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003844CC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100384508(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_1000A1F54((uint64_t)&v12, v10, &qword_10063DE08);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_1003845B0(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  uint64_t v23;
  NSString v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSNumber v34;
  Swift::String v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v38 - v12;
  if ((a3 & 1) != 0)
  {
    defaultLogger()(v11);
    v14 = swift_bridgeObjectRetain_n(a2, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v40 = v6;
      v19 = v18;
      v42[0] = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain(a2);
      v41 = sub_1000E3AC8(a1, (unint64_t)a2, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Resetting warmup count for %{public}s to 1", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v40);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }
    v33 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v34.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    v42[0] = 0x6F4370756D726177;
LABEL_11:
    v42[1] = 0xEC0000002E746E75;
    v35._countAndFlagsBits = a1;
    v35._object = a2;
    String.append(_:)(v35);
    v36 = v42[1];
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v33, "setValue:forKey:", v34.super.super.isa, v37);

    return;
  }
  v40 = v6;
  v20 = (void *)objc_opt_self(NSUserDefaults);
  v21 = objc_msgSend(v20, "standardUserDefaults");
  strcpy((char *)v42, "warmupCount.");
  BYTE5(v42[1]) = 0;
  HIWORD(v42[1]) = -5120;
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  v23 = v42[1];
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v25 = (char *)objc_msgSend(v21, "integerForKey:", v24);

  v27 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    defaultLogger()(v26);
    v28 = swift_bridgeObjectRetain_n(a2, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v42[0] = v38;
      *(_DWORD *)v31 = 136446466;
      v39 = v7;
      swift_bridgeObjectRetain(a2);
      v41 = sub_1000E3AC8(a1, (unint64_t)a2, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v31 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v31 + 12) = 2050;
      v41 = (uint64_t)v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v31 + 14);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Setting warmup count for %{public}s to %{public}ld", (uint8_t *)v31, 0x16u);
      v32 = v38;
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v40);
    }
    v33 = objc_msgSend(v20, "standardUserDefaults");
    v34.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    v42[0] = 0x6F4370756D726177;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t type metadata accessor for WarmerUpper(uint64_t a1)
{
  uint64_t result;

  result = qword_10063DEC0;
  if (!qword_10063DEC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WarmerUpper);
  return result;
}

uint64_t sub_100384ADC()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 195) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  v7 = (char *)v0 + v4;
  v8 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[5]]);
  swift_release(*(_QWORD *)&v7[v1[6]]);

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100384BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WarmerUpper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100384C20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8) + 80);
  return sub_10037E3A4(v0 + 16, *(_BYTE *)(v0 + 194), v0 + ((v1 + 195) & ~v1));
}

_QWORD *sub_100384C54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[13];
  v12 = a1[15];
  v13 = a1[18];
  swift_bridgeObjectRetain(a1[20]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100384D20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100384D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100384D40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100384D48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[13];
  v10 = a1[15];
  v12 = a1[18];
  v13 = a1[20];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100384E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8);
  v3 = v0
     + ((*(_QWORD *)(v2 + 64)
       + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)swift_task_alloc(dword_10063DDEC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001D0A0;
  v5 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10001D0A0;
  return sub_10037EB1C(v3, 0);
}

uint64_t sub_100384EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD aBlock[5];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int16 v65;

  v1 = v0;
  v51 = type metadata accessor for WarmerUpper(0);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49 = v2;
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v48 - v10;
  v12 = defaultLogger()(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Buddy flow warmup invoked", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v17 = v16(v11, v4);
  v18 = BYSetupAssistantNeedsToRun(v17);
  if ((_DWORD)v18)
  {
    v19 = defaultLogger()(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Buddy flow is not completed, skipping warmup", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    return v16(v8, v4);
  }
  v24 = sub_10037C108();
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25)
    return swift_bridgeObjectRelease(v24);
  for (i = 32; ; i += 184)
  {
    v27 = *(_OWORD *)(v24 + i);
    v28 = *(_OWORD *)(v24 + i + 16);
    v29 = *(_OWORD *)(v24 + i + 48);
    v56 = *(_OWORD *)(v24 + i + 32);
    v57 = v29;
    v55 = v28;
    v54 = v27;
    v30 = *(_OWORD *)(v24 + i + 64);
    v31 = *(_OWORD *)(v24 + i + 80);
    v32 = *(_OWORD *)(v24 + i + 112);
    v60 = *(_OWORD *)(v24 + i + 96);
    v61 = v32;
    v58 = v30;
    v59 = v31;
    v33 = *(_OWORD *)(v24 + i + 128);
    v34 = *(_OWORD *)(v24 + i + 144);
    v35 = *(_OWORD *)(v24 + i + 160);
    v65 = *(_WORD *)(v24 + i + 176);
    v63 = v34;
    v64 = v35;
    v62 = v33;
    sub_100384C54(&v54);
    if ((sub_10037C720((uint64_t)&v54, 1) & 1) != 0)
      break;
    sub_100384D48(&v54);
LABEL_10:
    if (!--v25)
      return swift_bridgeObjectRelease(v24);
  }
  v36 = *(NSObject **)(v1 + *(int *)(v51 + 28));
  sub_1000B6BCC(v1, (uint64_t)v3);
  v37 = *(unsigned __int8 *)(v50 + 80);
  v38 = (v37 + 194) & ~v37;
  v39 = swift_allocObject(&unk_100614C10, v38 + v49, v37 | 7);
  v40 = v63;
  *(_OWORD *)(v39 + 144) = v62;
  *(_OWORD *)(v39 + 160) = v40;
  *(_OWORD *)(v39 + 176) = v64;
  *(_WORD *)(v39 + 192) = v65;
  v41 = v59;
  *(_OWORD *)(v39 + 80) = v58;
  *(_OWORD *)(v39 + 96) = v41;
  v42 = v61;
  *(_OWORD *)(v39 + 112) = v60;
  *(_OWORD *)(v39 + 128) = v42;
  v43 = v55;
  *(_OWORD *)(v39 + 16) = v54;
  *(_OWORD *)(v39 + 32) = v43;
  v44 = v57;
  *(_OWORD *)(v39 + 48) = v56;
  *(_OWORD *)(v39 + 64) = v44;
  sub_100384BDC((uint64_t)v3, v39 + v38);
  v45 = swift_allocObject(&unk_100614C38, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_1003856F0;
  *(_QWORD *)(v45 + 24) = v39;
  aBlock[4] = sub_1001AEFEC;
  v53 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026DC8;
  aBlock[3] = &unk_100614C50;
  v46 = _Block_copy(aBlock);
  v47 = v53;
  sub_100384C54(&v54);
  swift_retain(v45);
  swift_release(v47);
  dispatch_sync(v36, v46);
  _Block_release(v46);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation(v45, "", 72, 798, 26, 1);
  swift_release(v39);
  swift_release(v45);
  sub_100384D48(&v54);
  if ((v46 & 1) == 0)
    goto LABEL_10;
  __break(1u);
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_100385304()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10038531C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100385330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = type metadata accessor for WarmerUpper(0);
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v3;
  v5 = (uint64_t *)(v0 + ((v3 + 185) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc(dword_10063DE2C);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100007EE8;
  v9 = (_QWORD *)swift_task_alloc(dword_10063DE44);
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_10001D0A0;
  return sub_100382870(v4, v6, v7);
}

uint64_t sub_1003853E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 185) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5]));
  swift_release(*(_QWORD *)(v7 + v1[6]));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 160));
  if (*(_QWORD *)(v0 + v6))
    swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v3 | 7);
}

uint64_t sub_10038550C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8);
  v3 = (*(_QWORD *)(v2 + 64)
      + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((v3 + 185) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_10063DE4C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001D0A0;
  v7 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_10001D0A0;
  return sub_10037EB1C(v4, v5 != 0);
}

uint64_t sub_1003855CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003855E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003855F0()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 194) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  v7 = (char *)v0 + v4;
  v8 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[5]]);
  swift_release(*(_QWORD *)&v7[v1[6]]);

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003856F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8) + 80);
  return sub_100383834(v0 + 16, v0 + ((v1 + 194) & ~v1));
}

uint64_t sub_100385720()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100385734()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5]));
  swift_release(*(_QWORD *)(v7 + v1[6]));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 160));
  return swift_deallocObject(v0, v6 + 178, v5);
}

uint64_t sub_100385844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8);
  v3 = v0
     + ((*(_QWORD *)(v2 + 64)
       + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)swift_task_alloc(dword_10063DE5C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100007EE8;
  v5 = (_QWORD *)swift_task_alloc(dword_10063DDFC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100007EE8;
  return sub_10037EB1C(v3, 0);
}

uint64_t sub_1003858F0()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 194) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  v6 = (char *)v0 + v4;
  v7 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[5]]);
  swift_release(*(_QWORD *)&v6[v1[6]]);

  if (*(_QWORD *)((char *)v0 + v5))
    swift_release(*(_QWORD *)((char *)v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_100385A08()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 194) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100383140(v0 + 16, v0 + v2, *v3, v3[1]);
}

uint64_t sub_100385A50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100385A64()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for WarmerUpper(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[20]);
  swift_bridgeObjectRelease(v0[22]);
  if (v0[25])
    swift_release(v0[26]);
  v5 = v3 | 7;
  v6 = (v3 + 216) & ~v3;
  v7 = v6 + v4;
  v8 = (char *)v0 + v6;
  v9 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v1[5]]);
  swift_release(*(_QWORD *)&v8[v1[6]]);

  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_100385B74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WarmerUpper(0) - 8) + 80);
  return sub_1003820C8(v0 + 16, *(void (**)(uint64_t))(v0 + 200), *(_QWORD *)(v0 + 208), v0 + ((v1 + 216) & ~v1));
}

uint64_t sub_100385BA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for WarmeeUppee(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[18]);
  return swift_bridgeObjectRelease(a1[20]);
}

uint64_t initializeWithCopy for WarmeeUppee(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v17;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v18;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  v11 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v15 = *(_QWORD *)(a2 + 160);
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v15;
  *(_QWORD *)(a1 + 168) = v14;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for WarmeeUppee(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v22 = *(_QWORD *)(a2 + 120);
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  v25 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v26 = *(_QWORD *)(a1 + 160);
  v27 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v26);
  v28 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v28;
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

__n128 initializeWithTake for WarmeeUppee(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for WarmeeUppee(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v15 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for WarmeeUppee(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 178))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WarmeeUppee(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 178) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 178) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WarmeeUppee()
{
  return &type metadata for WarmeeUppee;
}

uint64_t *sub_100386160(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for FeatureFlagProvider(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v11;
    v12 = a3[7];
    v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    swift_bridgeObjectRetain(v10);
    swift_retain(v11);
    v14 = v13;
  }
  return a1;
}

void sub_10038620C(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[6]));

}

uint64_t sub_100386268(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a3[7];
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  v13 = v12;
  return a1;
}

uint64_t sub_1003862E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v6 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = a3[7];
  v14 = *(void **)(a2 + v13);
  v15 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  v16 = v14;

  return a1;
}

uint64_t sub_100386388(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1003863F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = type metadata accessor for FeatureFlagProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release(v10);
  v11 = a3[7];
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  return a1;
}

uint64_t sub_100386484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100386490);
}

uint64_t sub_100386490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for FeatureFlagProvider(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10038650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100386518);
}

uint64_t sub_100386518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FeatureFlagProvider(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100386590(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for FeatureFlagProvider(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100386658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  objc_class *v11;
  char *v12;
  char *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  id v25;
  char *v26;
  char *v27;
  objc_super v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  objc_class *v33;
  _UNKNOWN **v34;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v8);
  v10 = (id *)((char *)&v29.receiver - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10038852C(a1, (uint64_t)&v30);
  if (v31)
  {
    sub_100388574(a1);
    sub_100008018(&v30, (uint64_t)&v32);
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    sub_100388574((uint64_t)&v30);
    v11 = (objc_class *)type metadata accessor for IdentitySelfHealer();
    v12 = (char *)objc_allocWithZone(v11);
    v13 = &v12[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    v29.receiver = v12;
    v29.super_class = v11;
    v14 = objc_msgSendSuper2(&v29, "init");
    *(_QWORD *)(a2 + 40) = v14;
    v15 = (_QWORD *)((char *)v10 + v8[6]);
    *v15 = 0x3FE0000000000000;
    v16 = enum case for DIPBackoffStrategy.exponential(_:);
    v17 = type metadata accessor for DIPBackoffStrategy(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
    *v10 = 0x4024000000000000;
    v10[1] = 2;
    *((_BYTE *)v10 + v8[7]) = 0;
    *((_BYTE *)v10 + v8[8]) = 1;
    *((_BYTE *)v10 + v8[9]) = 0;
    v18 = (_QWORD *)((char *)v10 + v8[10]);
    *v18 = 0;
    v18[1] = 0;
    v19 = v14;
    v20 = UUID.init()(v19);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v24 = (objc_class *)type metadata accessor for DIPTopekaWebService(0);
    v25 = objc_allocWithZone(v24);
    v26 = (char *)sub_10024000C(v21, v23, (uint64_t)v10);
    v27 = &v26[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
    *((_QWORD *)v27 + 1) = &off_100618670;
    swift_unknownObjectWeakAssign(v27, v19);
    v33 = v24;
    v34 = &off_10060CCA0;

    *(_QWORD *)&v32 = v26;
    sub_100388574(a1);
  }
  return sub_100008018(&v32, a2);
}

uint64_t sub_100386898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7[45] = a6;
  v7[46] = a7;
  v7[43] = a4;
  v7[44] = a5;
  v7[41] = a2;
  v7[42] = a3;
  v7[40] = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  v7[47] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[48] = v9;
  v7[49] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v7[50] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[51] = v11;
  v7[52] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DeviceInformationProvider(0);
  v7[53] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[54] = v13;
  v7[55] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v7[56] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[57] = v15;
  v7[58] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10038697C, 0, 0);
}

uint64_t sub_10038697C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v2 = *(_QWORD *)(v0 + 456);
  v1 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 432);
  v41 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD **)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 328);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 360));
  v7 = Data.base64EncodedString(options:)(0);
  swift_bridgeObjectRetain(v6);
  v9 = UUID.init()(v8);
  v10 = UUID.uuidString.getter(v9);
  v42 = v11;
  v43 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v44 = v5;
  v12 = (uint64_t *)(*sub_10000806C(v5, v5[3]) + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  v13 = v12[1];
  v39 = *v12;
  type metadata accessor for DIPAccountManager(0);
  swift_bridgeObjectRetain(v13);
  static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 272), v14);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 304);
  sub_10000806C((_QWORD *)(v0 + 272), v15);
  v17 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)(0, 0, v15, v16);
  v37 = v18;
  v38 = v17;
  v19 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 272));
  v20 = DeviceInformationProvider.init()(v19);
  v36 = DeviceInformationProvider.uniqueDeviceID.getter(v20);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v4, v41);
  if (qword_10062F5D8 != -1)
    swift_once(&qword_10062F5D8, sub_1004E424C);
  v23 = *(_QWORD *)(v0 + 360);
  v24 = *(_QWORD **)(v0 + 368);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 328);
  v28 = qword_100670878;
  v29 = unk_100670880;
  swift_bridgeObjectRetain(unk_100670880);
  sub_10008EF5C(0, 0, 0, 0, 0, 0);
  sub_10000806C(v24, v44[3]);
  *(_QWORD *)(v0 + 16) = v39;
  *(_QWORD *)(v0 + 24) = v13;
  *(_QWORD *)(v0 + 32) = v43;
  *(_QWORD *)(v0 + 40) = v42;
  *(_QWORD *)(v0 + 48) = v38;
  *(_QWORD *)(v0 + 56) = v37;
  *(_QWORD *)(v0 + 64) = v36;
  *(_QWORD *)(v0 + 72) = v22;
  *(_QWORD *)(v0 + 80) = v28;
  *(_QWORD *)(v0 + 88) = v29;
  *(_QWORD *)(v0 + 96) = v25;
  *(_QWORD *)(v0 + 104) = v23;
  *(Swift::String *)(v0 + 112) = v7;
  *(_QWORD *)(v0 + 128) = v26;
  *(_QWORD *)(v0 + 136) = v27;
  v30 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 256) = v30;
  v31 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 224) = v31;
  v32 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 192) = v32;
  v33 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 160) = v33;
  v34 = (_QWORD *)swift_task_alloc(dword_10063A9B4);
  *(_QWORD *)(v0 + 472) = v34;
  *v34 = v0;
  v34[1] = sub_100386BCC;
  return sub_10028130C(v0 + 144);
}

uint64_t sub_100386BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 472);
  v5[60] = a1;
  v5[61] = a2;
  v5[62] = a3;
  v5[63] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = sub_100386EB8;
  }
  else
  {
    sub_1002552C4(v5 + 2);
    v7 = sub_100386C44;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100386C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(v1 + 488);
  v2 = *(_QWORD *)(v1 + 496);
  v4 = *(_QWORD *)(v1 + 480);
  defaultLogger()(a1);
  sub_100028034(v4, v3);
  swift_bridgeObjectRetain(v2);
  sub_100028034(v4, v3);
  swift_bridgeObjectRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v1 + 488);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v28 = v11;
    *(_DWORD *)v10 = 136315138;
    if (v9 >> 60 == 15)
    {
      object = (void *)0xE500000000000000;
      countAndFlagsBits = 0x5954504D45;
    }
    else
    {
      v18 = Data.base64EncodedString(options:)(0);
      countAndFlagsBits = v18._countAndFlagsBits;
      object = v18._object;
    }
    v20 = *(_QWORD *)(v1 + 480);
    v19 = *(_QWORD *)(v1 + 488);
    v25 = *(_QWORD *)(v1 + 408);
    v26 = *(_QWORD *)(v1 + 400);
    v27 = *(_QWORD *)(v1 + 416);
    *(_QWORD *)(v1 + 312) = sub_1000E3AC8(countAndFlagsBits, (unint64_t)object, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 312, v1 + 320, v10 + 4);
    swift_bridgeObjectRelease(object);
    sub_100007F78(v20, v19);
    swift_bridgeObjectRelease(v2);
    sub_100007F78(v20, v19);
    swift_bridgeObjectRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CV response is %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 480);
    v16 = *(_QWORD *)(v1 + 408);
    v15 = *(_QWORD *)(v1 + 416);
    v17 = *(_QWORD *)(v1 + 400);
    sub_100007F78(v14, *(_QWORD *)(v1 + 488));
    swift_bridgeObjectRelease(v2);
    sub_100007F78(v14, v9);
    swift_bridgeObjectRelease(v2);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  v21 = *(_QWORD *)(v1 + 440);
  v22 = *(_QWORD *)(v1 + 416);
  v23 = *(_QWORD *)(v1 + 392);
  swift_task_dealloc(*(_QWORD *)(v1 + 464));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v1 + 480), *(_QWORD *)(v1 + 488), *(_QWORD *)(v1 + 496));
}

uint64_t sub_100386EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 376);
  sub_1002552C4((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v8, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000037, 0x800000010055BD20, 92);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10038701C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  v8 = type metadata accessor for PublicKeyAlgorithm(0);
  v7[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[11] = v9;
  v7[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for COSESignatureValidator(0);
  v7[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[14] = v11;
  v7[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  v7[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[17] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[18] = swift_task_alloc(v14);
  v7[19] = swift_task_alloc(v14);
  v7[20] = swift_task_alloc(v14);
  v7[21] = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  v7[22] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v7[23] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[24] = swift_task_alloc(v17);
  v7[25] = swift_task_alloc(v17);
  v7[26] = swift_task_alloc(v17);
  v7[27] = swift_task_alloc(v17);
  v7[28] = swift_task_alloc(v17);
  v7[29] = swift_task_alloc(v17);
  v18 = type metadata accessor for COSE_Sign1(0);
  v7[30] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v7[31] = v19;
  v7[32] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100387190, 0, 0);
}

void sub_100387190()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  id v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, _QWORD, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  Swift::String v150;
  Swift::String v151;
  uint64_t v152;
  void (*v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*description_8)(uint64_t, _QWORD, uint64_t);
  uint64_t description_8a;
  void (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  v1 = v0;
  v2 = v0[4];
  v3 = v0[5];
  if (v2 >> 60 == 15 || v3 == 0)
  {
    v5 = v0[21];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[17] + 104))(v5, enum case for DIPError.Code.digitalPresentmentCredentialValidationError(_:), v0[16]);
    v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v7 = type metadata accessor for DIPError(0);
    v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v9 = swift_allocError(v7, v8, 0, 0);
    v10 = v5;
    v11 = v9;
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x800000010055BA40, 0, v10, 0, v6, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 103);
    swift_willThrow(v12);
    goto LABEL_50;
  }
  sub_100022948(v0[3], v2);
  v13 = decodeCertificateChain(fromBase64DER:)(v3);
  v14 = v13;
  if (!((unint64_t)v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (v15)
      goto LABEL_9;
LABEL_48:
    swift_bridgeObjectRelease(v14);
    goto LABEL_49;
  }
  if (v13 < 0)
    v155 = v13;
  else
    v155 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  if (!_CocoaArrayWrapper.endIndex.getter(v155))
    goto LABEL_48;
LABEL_9:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_12:
    v17 = v16;
    v18 = swift_bridgeObjectRelease(v14);
    v19 = SecCertificateRef.rawECPublicKeyData()(v18);
    v21 = v20;

    if (v21 >> 60 != 15)
    {
      v211 = v21;
      v213 = v19;
      v22 = v1[30];
      v23 = v1[3];
      v24 = v1[4];
      v25 = type metadata accessor for CBORDecoder(0);
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      v26 = CBORDecoder.init()();
      v27 = sub_100004790(&qword_100635300, (uint64_t (*)(uint64_t))&type metadata accessor for COSE_Sign1, (uint64_t)&protocol conformance descriptor for COSE_Sign1);
      v28 = dispatch thunk of CBORDecoder.decode<A>(_:from:)(v22, v23, v24, v22, v27);
      v209 = v26;
      v29 = defaultLogger()(v28);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.debug.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "server response COSE_Sign1 blob decoded, moving to validating items", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }
      v33 = v1[29];
      v34 = v1[22];
      v35 = v1[23];

      v36 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v36(v33, v34);
      v37 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v38._object = (void *)0x800000010055BB70;
      v38._countAndFlagsBits = 0xD000000000000021;
      LOBYTE(v33) = NSUserDefaults.internalBool(forKey:)(v38);

      if ((v33 & 1) != 0)
      {
        v39 = swift_bridgeObjectRelease(v14);
        v40 = defaultLogger()(v39);
        v41 = Logger.logObject.getter(v40);
        v43 = static os_log_type_t.info.getter(v41, v42);
        if (os_log_type_enabled(v41, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v43, "Skipping matching COSE_Sign1 kid with signature key due to internal settings", v44, 2u);
          swift_slowDealloc(v44, -1, -1);
        }
        v45 = v1[28];
        v46 = v1[22];

        v47 = ((uint64_t (*)(uint64_t, uint64_t))v36)(v45, v46);
        goto LABEL_19;
      }
      if ((v14 & 0xC000000000000001) != 0)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
      else
        v65 = *(id *)(v14 + 32);
      v78 = v65;
      v79 = swift_bridgeObjectRelease(v14);
      v80 = SecCertificateRef.publicKeySHA256()(v79);
      v82 = v81;

      if (v82 >> 60 != 15)
      {
        v83 = v36;
        v84 = COSE_Sign1.keyIdentifier.getter();
        if (v85 >> 60 == 15)
        {
          sub_100007F78(v80, v82);
        }
        else
        {
          v86 = v84;
          v87 = v85;
          sub_1004406E8(v80, v82);
          v89 = v88;
          sub_100007F78(v80, v82);
          v47 = sub_100007F78(v86, v87);
          v36 = v83;
          if ((v89 & 1) != 0)
          {
LABEL_19:
            v48 = v1[17];
            v49 = COSE_Sign1.payload.getter(v47);
            v51 = *(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104);
            v52 = v1[32];
            if (v50 >> 60 == 15)
            {
              v53 = v1[30];
              v54 = v1[31];
              v55 = v1[21];
              v57 = v1[3];
              v56 = v1[4];
              v51(v55, enum case for DIPError.Code.digitalPresentmentCredentialValidationError(_:), v1[16]);
              v58 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
              v59 = type metadata accessor for DIPError(0);
              v60 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              v61 = swift_allocError(v59, v60, 0, 0);
              v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x800000010055BBE0, 0, v55, 0, v58, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 129);
              swift_willThrow(v62);
              sub_100007F78(v57, v56);
              swift_release(v209);
              sub_100007F78(v213, v211);
              v63 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
              v64 = v52;
LABEL_30:
              v11 = v61;
              v63(v64, v53);
              goto LABEL_50;
            }
            v188 = v36;
            v200 = v49;
            v67 = v1[20];
            v66 = v1[21];
            v203 = v50;
            v68 = v1[18];
            v69 = v1[19];
            v70 = v1[16];
            v190 = v1[11];
            v193 = v1[12];
            v196 = v1[10];
            v71 = *(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104);
            v51(v66, enum case for DIPError.Code.digitalPresentmentCOSEUnknownSigningAlgorithm(_:), v70);
            v71(v67, enum case for DIPError.Code.digitalPresentmentCOSEMisformattedSigningKey(_:), v70);
            v71(v69, enum case for DIPError.Code.digitalPresentmentCOSEMisformattedSignature(_:), v70);
            description_8 = v71;
            v71(v68, enum case for DIPError.Code.digitalPresentmentCOSEInvalidSignature(_:), v70);
            v72 = COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(v66, v67, v69, v68);
            v73 = COSE_Sign1.signature.getter(v72);
            v75 = v74;
            v76 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v190 + 104))(v193, enum case for PublicKeyAlgorithm.EC_P256(_:), v196);
            v77 = COSE_Sign1.algorithmIdentifier.getter(v76);
            COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(v73, v75, v213, v211, v193, v77, v200, v203);
            (*(void (**)(uint64_t, uint64_t))(v1[11] + 8))(v1[12], v1[10]);
            v98 = sub_100007F8C(v73, v75);
            v99 = defaultLogger()(v98);
            v100 = Logger.logObject.getter(v99);
            v102 = static os_log_type_t.info.getter(v100, v101);
            if (os_log_type_enabled(v100, v102))
            {
              v103 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v103 = 0;
              _os_log_impl((void *)&_mh_execute_header, v100, v102, "COSE_Sign1 signature validated", v103, 2u);
              swift_slowDealloc(v103, -1, -1);
            }

            v104 = v200;
            v188(v1[27], v1[22]);
            v105 = type metadata accessor for CredentialValidityCWTPayload();
            v106 = sub_100004790(&qword_10063DF08, (uint64_t (*)(uint64_t))type metadata accessor for CredentialValidityCWTPayload, (uint64_t)&unk_100528014);
            dispatch thunk of CBORDecoder.decode<A>(_:from:)(v105, v200, v203, v105, v106);
            v107 = v1[6];
            v108 = v1[7];
            v109 = v1[2];
            v110 = *(_QWORD *)(v109 + 168);
            v111 = *(_QWORD *)(v109 + 176);
            if (v110 == v107 && v111 == v108
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v107, v108, v110, v111, 0) & 1) != 0)
            {
              v112 = v1[8];
              v113 = v1[9];
              v114 = *(_QWORD *)(v109 + 144);
              v115 = *(_QWORD *)(v109 + 152);
              sub_100022948(v114, v115);
              sub_1004406E8(v112, v113);
              LOBYTE(v112) = v116;
              v117 = sub_100007F8C(v114, v115);
              if ((v112 & 1) != 0)
              {
                defaultLogger()(v117);
                v118 = swift_retain(v109);
                v119 = Logger.logObject.getter(v118);
                v121 = static os_log_type_t.info.getter(v119, v120);
                if (os_log_type_enabled(v119, v121))
                {
                  v122 = (uint8_t *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v122 = 67109120;
                  *((_DWORD *)v1 + 66) = *(unsigned __int8 *)(v109 + 160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 33, (char *)v1 + 268, v122 + 4);
                  swift_release(v109);
                  _os_log_impl((void *)&_mh_execute_header, v119, v121, "Server returned CV result = %{BOOL}d", v122, 8u);
                  swift_slowDealloc(v122, -1, -1);
                }
                else
                {
                  swift_release(v109);
                }

                v143 = v1[32];
                v179 = v1[31];
                v180 = v1[30];
                v181 = v1[29];
                v182 = v1[28];
                v144 = v1[26];
                v183 = v1[27];
                v184 = v1[25];
                v185 = v1[24];
                description_8a = v1[21];
                v192 = v1[20];
                v195 = v1[19];
                v198 = v1[18];
                v145 = v1[14];
                v146 = v1[15];
                v147 = v1[13];
                v207 = v1[12];
                v149 = v1[3];
                v148 = v1[4];
                v188(v144, v1[22]);
                v150._object = (void *)0x800000010055BCF0;
                v151._countAndFlagsBits = 0x3038663334363861;
                v151._object = (void *)0xE800000000000000;
                v150._countAndFlagsBits = 0xD000000000000021;
                logMilestone(tag:description:)(v151, v150);
                sub_100007F78(v149, v148);
                swift_release(v209);
                sub_100007F78(v213, v211);
                sub_100007F78(v200, v203);
                (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
                (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v143, v180);
                v152 = *(unsigned __int8 *)(v109 + 160);
                swift_release(v109);
                swift_task_dealloc(v143);
                swift_task_dealloc(v181);
                swift_task_dealloc(v182);
                swift_task_dealloc(v183);
                swift_task_dealloc(v144);
                swift_task_dealloc(v184);
                swift_task_dealloc(v185);
                swift_task_dealloc(description_8a);
                swift_task_dealloc(v192);
                swift_task_dealloc(v195);
                swift_task_dealloc(v198);
                swift_task_dealloc(v146);
                swift_task_dealloc(v207);
                v153 = (void (*)(uint64_t))v1[1];
                v154 = v152;
                goto LABEL_51;
              }
              v206 = v1[32];
              v197 = v1[31];
              v201 = v1[30];
              v123 = v1[21];
              v189 = v1[14];
              v191 = v1[13];
              v194 = v1[15];
              v124 = v1[3];
              v125 = v1[4];
              description_8(v123, enum case for DIPError.Code.digitalPresentmentCredentialValidationError(_:), v1[16]);
              v126 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
              v127 = type metadata accessor for DIPError(0);
              v128 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              v129 = swift_allocError(v127, v128, 0, 0);
              v130 = v109;
              v131 = v129;
              v132 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010055BCC0, 0, v123, 0, v126, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 166);
              swift_willThrow(v132);
              v133 = v124;
              v134 = v125;
            }
            else
            {
              v206 = v1[32];
              v197 = v1[31];
              v201 = v1[30];
              v135 = v1[21];
              v189 = v1[14];
              v191 = v1[13];
              v194 = v1[15];
              v137 = v1[3];
              v136 = v1[4];
              description_8(v135, enum case for DIPError.Code.digitalPresentmentCredentialValidationError(_:), v1[16]);
              v138 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
              v139 = type metadata accessor for DIPError(0);
              v140 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
              v141 = swift_allocError(v139, v140, 0, 0);
              v130 = v109;
              v131 = v141;
              v142 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010055BC80, 0, v135, 0, v138, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 162);
              swift_willThrow(v142);
              v133 = v137;
              v134 = v136;
            }
            sub_100007F78(v133, v134);
            v11 = v131;
            swift_release(v209);
            sub_100007F78(v213, v211);
            sub_100007F78(v104, v203);
            swift_release(v130);
            (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v194, v191);
            (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v206, v201);
LABEL_50:
            v167 = v1[32];
            v168 = v1[28];
            v169 = v1[29];
            v170 = v1[26];
            v171 = v1[27];
            v172 = v1;
            v199 = v1[25];
            v202 = v1[24];
            v173 = v1[21];
            v204 = v172[20];
            v208 = v172[19];
            v210 = v172[18];
            v212 = v172[15];
            v214 = v172[12];
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v172[17] + 104))(v173, enum case for DIPError.Code.internalError(_:), v172[16]);
            swift_errorRetain(v11);
            v174 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
            v175 = v11;
            v176 = type metadata accessor for DIPError(0);
            v177 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v176, v177, 0, 0);
            v178 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v175, v173, 0, v174, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 175);
            swift_willThrow(v178);
            swift_errorRelease(v175);
            swift_task_dealloc(v167);
            swift_task_dealloc(v169);
            swift_task_dealloc(v168);
            swift_task_dealloc(v171);
            swift_task_dealloc(v170);
            swift_task_dealloc(v199);
            swift_task_dealloc(v202);
            swift_task_dealloc(v173);
            swift_task_dealloc(v204);
            swift_task_dealloc(v208);
            swift_task_dealloc(v210);
            swift_task_dealloc(v212);
            swift_task_dealloc(v214);
            v153 = (void (*)(uint64_t))v172[1];
            v154 = 0;
LABEL_51:
            v153(v154);
            return;
          }
        }
      }
      v90 = v1[31];
      v205 = v1[32];
      v53 = v1[30];
      v91 = v1[21];
      v93 = v1[3];
      v92 = v1[4];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v1[17] + 104))(v91, enum case for DIPError.Code.digitalPresentmentSigningKeyMismatch(_:), v1[16]);
      v94 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v95 = type metadata accessor for DIPError(0);
      v96 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v61 = swift_allocError(v95, v96, 0, 0);
      v97 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010055BBA0, 0, v91, 0, v94, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 124);
      swift_willThrow(v97);
      sub_100007F78(v93, v92);
      swift_release(v209);
      sub_100007F78(v213, v211);
      v63 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v64 = v205;
      goto LABEL_30;
    }
LABEL_49:
    v156 = v1[21];
    v157 = v1[16];
    v158 = v1[17];
    v160 = v1[3];
    v159 = v1[4];
    swift_bridgeObjectRelease(v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v158 + 104))(v156, enum case for DIPError.Code.digitalPresentmentCredentialValidationError(_:), v157);
    v161 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v162 = type metadata accessor for DIPError(0);
    v163 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v164 = swift_allocError(v162, v163, 0, 0);
    v165 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010055BB30, 0, v156, 0, v161, 0xD00000000000007FLL, 0x800000010055BA70, 0xD000000000000036, 0x800000010055BAF0, 108);
    swift_willThrow(v165);
    v166 = v159;
    v11 = v164;
    sub_100007F78(v160, v166);
    goto LABEL_50;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(v14 + 32);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_10038852C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063DF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100388574(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_10063DF18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *assignWithCopy for CVRequestProvider(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  sub_10000660C(a1, a2);
  v4 = (void *)a1[5];
  v5 = (void *)a2[5];
  a1[5] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for CVRequestProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;

  return a1;
}

ValueMetadata *type metadata accessor for CVRequestProvider()
{
  return &type metadata for CVRequestProvider;
}

uint64_t storeEnumTagSinglePayload for IdentityPassType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100388694 + 4 * byte_100532955[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003886C8 + 4 * byte_100532950[v4]))();
}

uint64_t sub_1003886C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003886D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003886D8);
  return result;
}

uint64_t sub_1003886E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003886ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1003886F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003886F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityPassType()
{
  return &type metadata for IdentityPassType;
}

void sub_100388714(char *a1)
{
  sub_1003C16B4(*a1);
}

void sub_100388720()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10038876C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 27748, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_1003887D0()
{
  __asm { BR              X10 }
}

uint64_t sub_10038880C(uint64_t a1)
{
  String.hash(into:)(a1, 27748, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_10038885C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1003888A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 27748, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100388908@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003889F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100388934()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100388964 + 4 * byte_100532966[*v0]))();
}

void sub_100388964(_QWORD *a1@<X8>)
{
  *a1 = 27748;
  a1[1] = 0xE200000000000000;
}

void sub_100388974(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E776F6E6B6E75;
  a1[1] = v1;
}

void sub_10038898C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616E6F6974616ELL;
  a1[1] = 0xEA00000000004449;
}

unint64_t sub_1003889B0()
{
  unint64_t result;

  result = qword_10063DF20;
  if (!qword_10063DF20)
  {
    result = swift_getWitnessTable(&unk_1005329FC, &type metadata for IdentityPassType);
    atomic_store(result, (unint64_t *)&qword_10063DF20);
  }
  return result;
}

unint64_t sub_1003889F4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006025D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_100388A3C(void (*a1)(_QWORD, _QWORD, _QWORD), int a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  _DWORD *v50;
  uint64_t (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  Swift::Bool v92;
  _QWORD *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  os_log_type_t v99;
  _DWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  int v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t (*v121)(char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;

  v4 = v3;
  v112 = a2;
  v131 = a1;
  v6 = sub_100004828(&qword_10063E0D0);
  __chkstk_darwin(v6);
  v105 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v8);
  v106 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for SHA256(0);
  v107 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v118 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for SHA256Digest(0);
  v117 = *(_QWORD *)(v130 - 8);
  v11 = __chkstk_darwin(v130);
  v116 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v122 = (char *)&v101 - v13;
  v125 = type metadata accessor for AEADKey(0);
  v124 = *(_QWORD *)(v125 - 8);
  v14 = __chkstk_darwin(v125);
  v111 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v120 = (uint64_t *)((char *)&v101 - v16);
  v17 = sub_100004828(&qword_100630F90);
  v123 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v110 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v119 = (uint64_t)&v101 - v20;
  v134 = sub_100004828(&qword_100630FA8);
  v21 = __chkstk_darwin(v134);
  v104 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v136 = (char *)&v101 - v23;
  v24 = type metadata accessor for Logger(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v109 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v113 = (char *)&v101 - v29;
  v30 = __chkstk_darwin(v28);
  v114 = (char *)&v101 - v31;
  v32 = __chkstk_darwin(v30);
  v108 = (char *)&v101 - v33;
  v34 = __chkstk_darwin(v32);
  v115 = (char *)&v101 - v35;
  v36 = __chkstk_darwin(v34);
  v102 = (char *)&v101 - v37;
  v38 = __chkstk_darwin(v36);
  v128 = (char *)&v101 - v39;
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v101 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v101 - v44;
  v46 = defaultLogger()(v43);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter(v47);
  v49 = os_log_type_enabled(v47, v48);
  v133 = v17;
  v129 = a3;
  *(_QWORD *)&v135 = v24;
  if (v49)
  {
    v121 = (uint64_t (*)(char *, uint64_t))v25;
    v126 = v4;
    v50 = (_DWORD *)swift_slowAlloc(12, -1);
    v137 = swift_slowAlloc(32, -1);
    *v50 = 136315138;
    __asm { BR              X10 }
  }

  v51 = *(uint64_t (**)(char *, uint64_t))(v25 + 8);
  v52 = v51(v45, v24);
  v53 = defaultLogger()(v52);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.debug.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "CloudKitUploadBuilder.addUploadAsset: Starting to encrypt images", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

  v51(v42, v135);
  v57 = &v136[*(int *)(v134 + 48)];
  v58 = objc_opt_self(DIFileUploadAsset);
  v59 = v131;
  v60 = swift_dynamicCastObjCClass(v131, v58);
  if (v60)
  {
    v61 = (char *)v60;
    v62 = v4;
    v63 = v59;
    v64 = v119;
    v65 = (uint64_t)v120;
    v66 = v132;
    sub_10038B460(v119, (uint64_t)v120, v61);

    if (!v66)
    {
      v131 = *(void (**)(_QWORD, _QWORD, _QWORD))(v123 + 32);
      v131(v136, v64, v17);
      v67 = *(uint64_t **)(v124 + 32);
      v68 = v57;
      v69 = v65;
      goto LABEL_12;
    }
  }
  else
  {
    v70 = objc_msgSend(v59, "data");
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    v103 = v57;
    v121 = v51;
    if ((v112 & 1) != 0)
    {
      v74 = Data.base64EncodedData(options:)(0, v71, v73);
      v76 = v75;
      sub_100007F8C(v71, v73);
      v71 = v74;
      v73 = v76;
    }
    v77 = v4[7];
    v78 = v4[8];
    v62 = v4;
    sub_10000806C(v4 + 4, v77);
    v137 = v71;
    v138 = v73;
    v79 = sub_100049540();
    v80 = sub_100049584();
    v81 = v110;
    v82 = v111;
    v83 = v132;
    dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)(v110, v111, &v137, &type metadata for Data, v79, v80, v77, v78);
    sub_100007F8C(v71, v73);
    v17 = v133;
    v51 = v121;
    if (!v83)
    {
      v131 = *(void (**)(_QWORD, _QWORD, _QWORD))(v123 + 32);
      v131(v136, v81, v133);
      v67 = *(uint64_t **)(v124 + 32);
      v57 = v103;
      v68 = v103;
      v69 = (uint64_t)v82;
LABEL_12:
      v120 = v67;
      v84 = ((uint64_t (*)(char *, uint64_t, uint64_t))v67)(v68, v69, v125);
      v85 = defaultLogger()(v84);
      v86 = Logger.logObject.getter(v85);
      v87 = static os_log_type_t.debug.getter(v86);
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "CloudKitUploadBuilder.addUploadAsset: Images encryption complete", v88, 2u);
        swift_slowDealloc(v88, -1, -1);
      }
      v126 = v62;

      v51(v128, v135);
      v89 = SealedMessage.data.getter(v17);
      v91 = v90;
      v139 = v89;
      v140 = v90;
      v92 = shouldIncludeUnencryptedData()();
      v103 = v57;
      v121 = v51;
      if (v92)
      {
        v93 = SealedMessage.unencryptedData.getter(&v137, v17);
        v94 = v138;
        if (v138 >> 60 != 15)
        {
          v89 = v137;
          v95 = v102;
          v96 = defaultLogger()(v93);
          v97 = Logger.logObject.getter(v96);
          v99 = static os_log_type_t.info.getter(v97, v98);
          if (os_log_type_enabled(v97, v99))
          {
            v132 = 0;
            v100 = (_DWORD *)swift_slowAlloc(12, -1);
            v137 = swift_slowAlloc(32, -1);
            *v100 = 136315138;
            __asm { BR              X10 }
          }

          v51(v95, v135);
          sub_100007F8C(v139, v140);
          v139 = v89;
          v140 = v94;
          v91 = v94;
        }
      }
      sub_100022948(v89, v91);
      sub_100004790(&qword_100632DD8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
      dispatch thunk of HashFunction.init()();
      __asm { BR              X9 }
    }
  }
}

uint64_t sub_10038A438@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD, _QWORD);
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  __n128 v89;
  _QWORD *v90;
  int64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  void (*v105)(_QWORD, _QWORD, _QWORD);
  void (*v106)(_QWORD, _QWORD, _QWORD);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127[2];
  char v128[8];
  char v129[8];
  uint64_t v130;
  uint64_t v131;

  v74 = a5;
  v78 = a4;
  v80 = a3;
  v79 = a2;
  v77 = a1;
  v75 = a6;
  v81 = 0xEF746E6F7246746ELL;
  v83 = type metadata accessor for DIPError.Code(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v84 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AEADKey(0);
  v119 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v99 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100004828(&qword_100630FA8);
  __chkstk_darwin(v118);
  v117 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Logger(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_10063E0D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v102 = (uint64_t)&v74 - v22;
  __chkstk_darwin(v21);
  v125 = (_QWORD **)((char *)&v74 - v23);
  swift_beginAccess(v6 + 16, v129, 0, 0);
  v24 = *(_QWORD *)(v6 + 16);
  v25 = *(_QWORD *)(v24 + 64);
  v90 = (_QWORD *)(v24 + 64);
  v26 = 1 << *(_BYTE *)(v24 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v122 = v27 & v25;
  v76 = v6;
  v101 = v24;
  swift_bridgeObjectRetain(v24);
  v100 = (uint64_t *)(v6 + 24);
  v28 = swift_beginAccess(v6 + 24, v128, 0, 0);
  v29 = 0;
  v91 = (unint64_t)(v26 + 63) >> 6;
  v92 = &v131;
  v126 = _swiftEmptyArrayStorage;
  v28.n128_u64[0] = 136315906;
  v89 = v28;
  v88 = (char *)&type metadata for Any + 8;
  v95 = "idFrontConfirmation";
  v87 = "idBackConfirmation";
  v86 = "Container for type ";
  v85 = "live_selfie_video";
  v120 = v8;
  v98 = v12;
  v97 = v15;
  v104 = v16;
  v103 = v20;
  v96 = v17;
  v121 = &_swiftEmptyDictionarySingleton;
  if (!v122)
  {
    if (v91 > 1)
    {
      v32 = v90[1];
      v29 = 1;
      if (v32)
        goto LABEL_17;
      v29 = 2;
      if (v91 <= 2)
        goto LABEL_31;
      v32 = v90[2];
      if (v32)
        goto LABEL_17;
      v29 = 3;
      if (v91 <= 3)
        goto LABEL_31;
      v32 = v90[3];
      if (v32)
      {
LABEL_17:
        v31 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v29 << 6);
        goto LABEL_18;
      }
      v33 = 4;
      if (v91 > 4)
      {
        v32 = v90[4];
        if (v32)
        {
          v29 = 4;
          goto LABEL_17;
        }
        while (1)
        {
          v29 = v33 + 1;
          if (__OFADD__(v33, 1))
          {
            __break(1u);
            JUMPOUT(0x10038B424);
          }
          if (v29 >= v91)
            break;
          v32 = v90[v29];
          ++v33;
          if (v32)
            goto LABEL_17;
        }
      }
    }
LABEL_31:
    swift_release(v101);
    sub_10000806C(v74, v74[3]);
    v70 = v126;
    sub_100397AF4((_QWORD *)(v76 + 32), v77, (uint64_t)v126, &_swiftEmptyDictionarySingleton, v79, v80, v75);
    swift_bridgeObjectRelease(v70);
    v72 = &_swiftEmptyDictionarySingleton;
    return swift_bridgeObjectRelease(v72);
  }
  v30 = __clz(__rbit64(v122));
  v31 = (v122 - 1) & v122;
LABEL_18:
  v34 = (uint64_t *)(*(_QWORD *)(v101 + 48) + 16 * v30);
  v35 = v34[1];
  v36 = *(_QWORD *)(*(_QWORD *)(v101 + 56) + 8 * v30);
  v124 = *(unsigned __int8 *)(v36 + 48);
  if ((_DWORD)v124 != 5)
  {
    v122 = v31;
    v116 = v29;
    v37 = *v100;
    if (*(_QWORD *)(*v100 + 16))
    {
      v38 = *v34;
      swift_bridgeObjectRetain_n(v35, 2);
      swift_retain(v36);
      swift_bridgeObjectRetain(v37);
      v39 = sub_1004A8604(v38, v35);
      if ((v40 & 1) != 0)
      {
        sub_10038C2B4(*(_QWORD *)(v37 + 56) + *(_QWORD *)(v17 + 72) * v39, (uint64_t)v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      }
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      swift_bridgeObjectRetain(v35);
      swift_retain(v36);
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v41 = v125;
      v42 = sub_10038C270((uint64_t)v15, (uint64_t)v125);
      defaultLogger()(v42);
      v43 = v102;
      sub_10038C2B4((uint64_t)v41, v102);
      sub_10038C2B4((uint64_t)v41, (uint64_t)v20);
      swift_bridgeObjectRetain(v35);
      v44 = swift_retain(v36);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.debug.getter(v45);
      v47 = os_log_type_enabled(v45, v46);
      v123 = v36;
      v115 = v35;
      if (v47)
      {
        v48 = swift_slowAlloc(42, -1);
        v127[0] = swift_slowAlloc(96, -1);
        *(_DWORD *)v48 = v89.n128_u32[0];
        v49 = v36;
        v50 = *(_QWORD *)(v36 + 16);
        v51 = *(_QWORD *)(v36 + 24);
        swift_bridgeObjectRetain(v51);
        v130 = sub_1000E3AC8(v50, v51, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v92, v48 + 4);
        swift_release(v49);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v51);
        *(_WORD *)(v48 + 12) = 2080;
        __asm { BR              X8 }
      }
      sub_10038C2F8(v43);
      swift_release(v36);
      swift_bridgeObjectRelease(v35);
      sub_10038C2F8((uint64_t)v20);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v12, v94);
      v52 = *(_QWORD *)(v36 + 24);
      v112 = *(_QWORD *)(v36 + 16);
      v53 = v125[1];
      v110 = v125[2];
      v109 = *v125;
      v54 = (char *)v125 + *(int *)(v16 + 24);
      v55 = v117;
      v56 = *(int *)(v118 + 48);
      v57 = &v54[v56];
      v58 = &v117[v56];
      v59 = sub_100004828(&qword_100630F90);
      v60 = *(_QWORD *)(v59 - 8);
      v61 = *(void (**)(_QWORD, _QWORD, _QWORD))(v60 + 16);
      v107 = v54;
      v106 = v61;
      v61(v55, v54, v59);
      v62 = v119;
      v63 = *(void (**)(_QWORD, _QWORD, _QWORD))(v119 + 16);
      v113 = v57;
      v64 = v120;
      v105 = v63;
      v63(v58, v57, v120);
      v111 = v52;
      swift_bridgeObjectRetain(v52);
      v108 = v53;
      swift_bridgeObjectRetain(v53);
      SealedMessage.keyID.getter(v59);
      v114 = *(void (**)(char *, uint64_t))(v60 + 8);
      v114(v55, v59);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v58, v64);
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease(v121);
    swift_bridgeObjectRelease(v126);
    sub_100008030((uint64_t)v15, &qword_10063E0D0);
    v127[0] = 0;
    v127[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v69._countAndFlagsBits = 0xD00000000000004ALL;
    v69._object = (void *)0x800000010055BEC0;
    String.append(_:)(v69);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRetain(v35);
  swift_retain(v36);
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(v126);
  v65 = v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v84, enum case for DIPError.Code.missingCloudKitAssets(_:), v83);
  v66 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v67 = type metadata accessor for DIPError(0);
  v68 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v67, v68, 0, 0);
  v71 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x8000000100554340, 0, v65, 0, v66, 0xD00000000000005BLL, 0x800000010055BDE0, 0xD000000000000058, 0x800000010055BE60, 126);
  swift_willThrow(v71);
  swift_release(v101);
  swift_release(v36);
  v72 = (void *)v35;
  return swift_bridgeObjectRelease(v72);
}

void sub_10038B460(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int128 v30;
  __int128 v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  char *v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  Swift::String v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  _OWORD v99[2];
  uint64_t v100;

  v80 = a2;
  v79 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v89 = *(_QWORD *)(v4 - 8);
  v90 = v4;
  __chkstk_darwin(v4);
  v91 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v85 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  __chkstk_darwin(v6);
  v84 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8);
  v81 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPFileUploadCryptor.Result(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  __chkstk_darwin(v10);
  v97 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for UUID(0);
  v92 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPFileUploadCryptor.Options(0);
  v95 = *(_QWORD *)(v13 - 8);
  v96 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AES.GCM.Nonce(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SymmetricKeySize(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SymmetricKey(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = a3;
  v27 = (char *)objc_msgSend(a3, "fileHandle");
  if (v27)
  {
    v91 = v27;
    static SymmetricKeySize.bits128.getter();
    SymmetricKey.init(size:)(v22);
    v28 = v93;
    SymmetricKey.withUnsafeBytes<A>(_:)(v99, sub_10004876C, 0, &type metadata for Data);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v30 = v99[0];
    AES.GCM.Nonce.init()(v29);
    AES.GCM.Nonce.withUnsafeBytes<A>(_:)(v99, sub_10004876C, 0, &type metadata for Data);
    v93 = v28;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v31 = v99[0];
    v32 = objc_msgSend(v94, "assetID");
    v33 = v98;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    v38 = v33;
    v39 = *(void (**)(char *, uint64_t))(v92 + 8);
    v39(v38, v100);
    sub_100022948(v30, *((unint64_t *)&v30 + 1));
    sub_100022948(v31, *((unint64_t *)&v31 + 1));
    DIPFileUploadCryptor.Options.init(eraseInputFileData:copyDataForInternalDiagnostics:uuid:key:nonce:publicKey:)(0, 0, v35, v37, v30, *((_QWORD *)&v30 + 1), v31, *((_QWORD *)&v31 + 1), 0, 0xF000000000000000);
    v40 = v97;
    v41 = v91;
    v42 = v93;
    v43 = static DIPFileUploadCryptor.encryptFileHandle(_:withOptions:)(v91, v15);
    v94 = v42;
    if (v42)
    {
      (*(void (**)(char *, uint64_t))(v95 + 8))(v15, v96);
      sub_100007F8C(v30, *((unint64_t *)&v30 + 1));
      sub_100007F8C(v31, *((unint64_t *)&v31 + 1));

    }
    else
    {
      v89 = v31;
      v78 = v39;
      v92 = v30 >> 64;
      v90 = v30;
      v93 = v15;
      v49 = v81;
      v50 = defaultLogger()(v43);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.debug.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = v40;
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Finished encrypting data from original FileHandle", v54, 2u);
        v55 = v54;
        v40 = v53;
        swift_slowDealloc(v55, -1, -1);
      }

      v56 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v49, v83);
      v57 = v84;
      DIPFileUploadCryptor.Result.encryptedFileURL.getter(v56);
      v58 = v94;
      v59 = Data.init(contentsOf:options:)(v57, 8);
      v61 = v78;
      if (v58)
      {

        sub_100007F8C(v89, *((unint64_t *)&v31 + 1));
        sub_100007F8C(v90, v92);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v57, v86);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v40, v88);
      }
      else
      {
        v62 = v59;
        v63 = v60;
        v64 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v57, v86);
        v65 = v98;
        v66 = UUID.init()(v64);
        v67 = UUID.uuidString.getter(v66);
        v69 = v68;
        v61(v65, v100);
        v99[0] = xmmword_100520790;
        sub_100022948(v62, v63);
        v70 = sub_100049540();
        v71 = sub_100049584();
        SealedMessage.init(keyID:data:unencryptedData:)(v67, v69, v62, v63, v99, &type metadata for Data, v70, v71);
        v72 = v90;
        v73 = v92;
        v74 = Data.base64EncodedString(options:)(0);
        v75 = v89;
        v76 = Data.base64EncodedString(options:)(0);
        AEADKey.init(secretKey:nonce:)(v74._countAndFlagsBits, v74._object, v76._countAndFlagsBits, v76._object);

        sub_100007F8C(v62, v63);
        sub_100007F8C(v75, *((unint64_t *)&v31 + 1));
        sub_100007F8C(v72, v73);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v97, v88);
      }
      (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v96);
    }
  }
  else
  {
    v44 = v91;
    (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v91, enum case for DIPError.Code.internalError(_:), v90);
    v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v46, v47, 0, 0);
    v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v44, 0, v45, 0xD00000000000005BLL, 0x800000010055BDE0, 0xD000000000000014, 0x800000010055BE40, 177);
    swift_willThrow(v48);
  }
}

uint64_t sub_10038BBA8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 4);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for CloudKitUploadBuilder()
{
  return objc_opt_self(_TtC8coreidvd21CloudKitUploadBuilder);
}

uint64_t *sub_10038BBFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain(v5);
    v9 = sub_100004828(&qword_100630F90);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    v10 = *(int *)(sub_100004828(&qword_100630FA8) + 48);
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for AEADKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_10038BCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_100004828(&qword_100630F90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v4 + *(int *)(sub_100004828(&qword_100630FA8) + 48);
  v7 = type metadata accessor for AEADKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *sub_10038BD48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain(v4);
  v8 = sub_100004828(&qword_100630F90);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  v9 = *(int *)(sub_100004828(&qword_100630FA8) + 48);
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = type metadata accessor for AEADKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

_QWORD *sub_10038BDEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100004828(&qword_100630F90);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(sub_100004828(&qword_100630FA8) + 48);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AEADKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_10038BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_100004828(&qword_100630F90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = *(int *)(sub_100004828(&qword_100630FA8) + 48);
  v9 = v5 + v8;
  v10 = v6 + v8;
  v11 = type metadata accessor for AEADKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10038BF4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100004828(&qword_100630F90);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(sub_100004828(&qword_100630FA8) + 48);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AEADKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_10038BFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10038C008);
}

uint64_t sub_10038C008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004828(&qword_100630FA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10038C088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10038C094);
}

uint64_t sub_10038C094(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004828(&qword_100630FA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10063E088;
  if (!qword_10063E088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudKitUploadBuilder.UploadAssetEncryptionInfo);
  return result;
}

uint64_t sub_10038C148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v8[32];
  _QWORD v9[3];

  v9[0] = &unk_100532A90;
  v9[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10038C20C(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = type metadata accessor for AEADKey(319);
    if (v6 > 0x3F)
    {
      return v5;
    }
    else
    {
      swift_getTupleTypeLayout2(v8, *(_QWORD *)(v3 - 8) + 64, *(_QWORD *)(v5 - 8) + 64);
      v9[2] = v8;
      swift_initStructMetadata(a1, 256, 3, v9, a1 + 16);
      return 0;
    }
  }
  return v3;
}

void sub_10038C20C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10063E098)
  {
    v2 = sub_100049540();
    v3 = sub_100049584();
    v4 = type metadata accessor for SealedMessage(a1, &type metadata for Data, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10063E098);
  }
}

uint64_t sub_10038C270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10038C2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10038C2F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudKitUploadBuilder.UploadAssetEncryptionInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10038C334()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for DIPContactsManager()
{
  return objc_opt_self(_TtC8coreidvd18DIPContactsManager);
}

void sub_10038C380()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[3];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1._object = (void *)0x800000010055BFA0;
  v1._countAndFlagsBits = 0xD000000000000037;
  v2 = NSUserDefaults.internalString(forKey:)(v1);

  if (v2.value._object)
  {
    v3 = ((unint64_t)v2.value._object >> 56) & 0xF;
    v4 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v2.value._object & 0x2000000000000000) != 0)
      v5 = ((unint64_t)v2.value._object >> 56) & 0xF;
    else
      v5 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if (((uint64_t)v2.value._object & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v2.value._object);
        sub_1004E5510(v2.value._countAndFlagsBits, (uint64_t)v2.value._object, 10);
        swift_bridgeObjectRelease_n(v2.value._object, 2);
      }
      else
      {
        if (((uint64_t)v2.value._object & 0x2000000000000000) == 0)
        {
          if ((v2.value._countAndFlagsBits & 0x1000000000000000) != 0)
            v6 = (unsigned __int8 *)(((uint64_t)v2.value._object & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2.value._countAndFlagsBits, v2.value._object);
          sub_1004E54FC(v6, v4, 10);
LABEL_44:
          swift_bridgeObjectRelease(v2.value._object);
          return;
        }
        v22[0] = v2.value._countAndFlagsBits;
        v22[1] = (uint64_t)v2.value._object & 0xFFFFFFFFFFFFFFLL;
        if (LOBYTE(v2.value._countAndFlagsBits) == 43)
        {
          if (v3)
          {
            if (v3 != 1
              && (BYTE1(v2.value._countAndFlagsBits) - 48) <= 9u
              && v3 != 2
              && (BYTE2(v2.value._countAndFlagsBits) - 48) <= 9u)
            {
              v7 = 10 * (BYTE1(v2.value._countAndFlagsBits) - 48)
                 + (BYTE2(v2.value._countAndFlagsBits) - 48);
              v8 = v3 - 3;
              if (v8)
              {
                v9 = (unsigned __int8 *)v22 + 3;
                do
                {
                  v10 = *v9 - 48;
                  if (v10 > 9)
                    break;
                  v11 = 10 * v7;
                  if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                    break;
                  v7 = v11 + v10;
                  if (__OFADD__(v11, v10))
                    break;
                  ++v9;
                  --v8;
                }
                while (v8);
              }
            }
            goto LABEL_44;
          }
        }
        else
        {
          if (LOBYTE(v2.value._countAndFlagsBits) != 45)
          {
            if (v3)
            {
              if ((LOBYTE(v2.value._countAndFlagsBits) - 48) <= 9u
                && v3 != 1
                && (BYTE1(v2.value._countAndFlagsBits) - 48) <= 9u)
              {
                v12 = 10 * (LOBYTE(v2.value._countAndFlagsBits) - 48)
                    + (BYTE1(v2.value._countAndFlagsBits) - 48);
                v13 = v3 - 2;
                if (v13)
                {
                  v14 = (unsigned __int8 *)v22 + 2;
                  do
                  {
                    v15 = *v14 - 48;
                    if (v15 > 9)
                      break;
                    v16 = 10 * v12;
                    if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63)
                      break;
                    v12 = v16 + v15;
                    if (__OFADD__(v16, v15))
                      break;
                    ++v14;
                    --v13;
                  }
                  while (v13);
                }
              }
            }
            goto LABEL_44;
          }
          if (v3)
          {
            if (v3 != 1
              && (BYTE1(v2.value._countAndFlagsBits) - 48) <= 9u
              && v3 != 2
              && (BYTE2(v2.value._countAndFlagsBits) - 48) <= 9u)
            {
              v17 = -10 * (BYTE1(v2.value._countAndFlagsBits) - 48)
                  - (BYTE2(v2.value._countAndFlagsBits) - 48);
              v18 = v3 - 3;
              if (v18)
              {
                v19 = (unsigned __int8 *)v22 + 3;
                do
                {
                  v20 = *v19 - 48;
                  if (v20 > 9)
                    break;
                  v21 = 10 * v17;
                  if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
                    break;
                  v17 = v21 - v20;
                  if (__OFSUB__(v21, v20))
                    break;
                  ++v19;
                  --v18;
                }
                while (v18);
              }
            }
            goto LABEL_44;
          }
          __break(1u);
        }
        __break(1u);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v2.value._object);
    }
  }
}

uint64_t type metadata accessor for IdentityProofingPassManager()
{
  return objc_opt_self(_TtC8coreidvd27IdentityProofingPassManager);
}

id sub_10038C6E0(uint64_t a1, uint64_t a2)
{
  id v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id result;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;

  v5 = objc_msgSend(objc_allocWithZone((Class)PKPassLibrary), "init");
  v6 = objc_msgSend(v5, "passesOfType:", 1);
  v7 = sub_10001CFF8(0, &qword_100637438, PKPass_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if (!((unint64_t)v8 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_3;
LABEL_65:

    swift_bridgeObjectRelease(v8);
    v50 = 0;
    v51 = 0;
    return (id)(v51 | v50);
  }
  if (v8 < 0)
    v52 = v8;
  else
    v52 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v10 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease(v8);
  if (!v10)
    goto LABEL_65;
LABEL_3:
  v58 = a1;
  v59 = v5;
  v11 = 0;
  v12 = 0;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        v60 = v11;
        v13 = v12;
        while (1)
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v8);
          }
          else
          {
            if (v13 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_58;
            v14 = *(id *)(v8 + 8 * v13 + 32);
          }
          v15 = v14;
          v12 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          v16 = objc_opt_self(PKSecureElementPass);
          v17 = swift_dynamicCastObjCClass(v15, v16);
          if (v17)
            break;
LABEL_5:

          ++v13;
          if (v12 == v10)
          {

            swift_bridgeObjectRelease(v8);
            v49 = 0;
            v50 = 0;
            v51 = 0;
            if ((v60 & 1) == 0)
              return (id)(v51 | v50);
            goto LABEL_56;
          }
        }
        v18 = (void *)v17;
        v2 = v15;
        if (!objc_msgSend(v18, "isIdentityPass"))
        {

          goto LABEL_5;
        }
        v19 = objc_msgSend(v18, "devicePrimaryContactlessPaymentApplication");
        if (!v19)
        {

          v11 = 1;
          if (v12 != v10)
            continue;
          goto LABEL_53;
        }
        break;
      }
      v20 = v19;
      if (objc_msgSend(v19, "state") != (id)1)
      {

        v11 = 1;
        if (v12 != v10)
          continue;
        goto LABEL_53;
      }
      break;
    }
    result = objc_msgSend(v20, "subcredentials");
    if (result)
    {
      v22 = result;
      v23 = sub_10001CFF8(0, &qword_100637450, PKAppletSubcredential_ptr);
      v24 = sub_10038CC10();
      v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v23, v24);

      v26 = v25 & 0xC000000000000001;
      v57 = v20;
      v61 = v25;
      if ((v25 & 0xC000000000000001) != 0)
      {
        if (v25 >= 0)
          v25 &= 0xFFFFFFFFFFFFFF8uLL;
        v55 = (id)v26;
        v27 = __CocoaSet.startIndex.getter(v25);
        v29 = v28;
        v30 = __CocoaSet.endIndex.getter(v25);
        v53 = static __CocoaSet.Index.== infix(_:_:)(v27, v29, v30, v31);
        swift_bridgeObjectRelease(v30);
        v32 = v27;
        v26 = (unint64_t)v55;
        v33 = v27;
        if ((v53 & 1) != 0)
          goto LABEL_52;
LABEL_29:
        v54 = v26 != 0;
        sub_1001A4A58(v33, v29, v26 != 0, v61);
        v56 = v38;
        sub_1000E6D18(v33, v29, v54);
        swift_bridgeObjectRelease(v61);
        v39 = objc_msgSend(v56, "identifier");

        if (v39)
        {
          v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v42 = v41;

          v9 = a2;
          if (v40 != v58 || v42 != a2)
          {
            v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v58, a2, 0);
            swift_bridgeObjectRelease(v42);

            if ((v44 & 1) == 0)
            {
              v11 = 1;
              if (v12 != v10)
                continue;
              goto LABEL_53;
            }
LABEL_60:
            v49 = 1;
LABEL_54:

            swift_bridgeObjectRelease(v8);
LABEL_56:
            v51 = 256;
            v50 = v49;
            return (id)(v51 | v50);
          }
LABEL_59:
          swift_bridgeObjectRelease(v9);

          goto LABEL_60;
        }

        v11 = 1;
        if (v12 != v10)
          continue;
LABEL_53:
        v49 = 0;
        goto LABEL_54;
      }
      v34 = *(_BYTE *)(v25 + 32);
      v32 = 1 << v34;
      v35 = *(_QWORD *)(v25 + 56);
      if (v35)
      {
        v36 = v25;
        v37 = 0;
LABEL_28:
        v33 = __clz(__rbit64(v35)) + (v37 << 6);
        v29 = *(unsigned int *)(v36 + 36);
        if (v33 != v32)
          goto LABEL_29;
      }
      else
      {
        v45 = v34 & 0x3F;
        if (v45 >= 7)
        {
          v35 = *(_QWORD *)(v25 + 64);
          if (v35)
          {
            v36 = v25;
            v37 = 1;
            goto LABEL_28;
          }
          if (v45 >= 8)
          {
            v35 = *(_QWORD *)(v25 + 72);
            if (v35)
            {
              v36 = v25;
              v37 = 2;
              goto LABEL_28;
            }
            v46 = 0;
            v47 = (unint64_t)(v32 + 63) >> 6;
            if (v47 <= 3)
              v47 = 3;
            v48 = v47 - 3;
            while (v48 != v46)
            {
              v35 = *(_QWORD *)(v25 + 80 + 8 * v46++);
              if (v35)
              {
                v36 = v25;
                v37 = v46 + 2;
                goto LABEL_28;
              }
            }
          }
        }
        v29 = *(unsigned int *)(v25 + 36);
      }
LABEL_52:
      sub_1000E6D18(v32, v29, v26 != 0);

      swift_bridgeObjectRelease(v61);
      v11 = 1;
      if (v12 != v10)
        continue;
      goto LABEL_53;
    }
    break;
  }
  __break(1u);
  return result;
}

unint64_t sub_10038CC10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100637458;
  if (!qword_100637458)
  {
    v1 = sub_10001CFF8(255, &qword_100637450, PKAppletSubcredential_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100637458);
  }
  return result;
}

uint64_t *sub_10038CC68(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004828(&qword_100633990);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    v16 = *(void (**)(char *, char *, uint64_t, __n128))(v8 + 16);
    v17 = swift_bridgeObjectRetain(v13);
    v16(v14, v15, v7, v17);
    ((void (*)(char *, char *, uint64_t))v16)((char *)a1 + a3[7], (char *)a2 + a3[7], v7);
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_10038CDA4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1 + a2[6], v4);
  v6(a1 + a2[7], v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

char *sub_10038CE40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *(void (**)(char *, char *, uint64_t, __n128))(v7 + 16);
  v15 = swift_bridgeObjectRetain(v11);
  v14(v12, v13, v6, v15);
  ((void (*)(char *, char *, uint64_t))v14)(&a1[a3[7]], &a2[a3[7]], v6);
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

char *sub_10038CF50(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a2[v12];
  v14 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v15(&a1[a3[6]], &a2[a3[6]], v6);
  v15(&a1[a3[7]], &a2[a3[7]], v6);
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  v20 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

char *sub_10038D0C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9(&a1[v10], &a2[v10], v6);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *sub_10038D1B0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004828(&qword_100633990);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  v14 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v14(&a1[a3[6]], &a2[a3[6]], v6);
  v14(&a1[a3[7]], &a2[a3[7]], v6);
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_10038D308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10038D314);
}

uint64_t sub_10038D314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100004828(&qword_100633990);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10038D3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10038D3CC);
}

uint64_t sub_10038D3CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100004828(&qword_100633990);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeyRevocationList(uint64_t a1)
{
  uint64_t result;

  result = qword_10063E2A0;
  if (!qword_10063E2A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyRevocationList);
  return result;
}

void sub_10038D4B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  void *v9;

  sub_100105634(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &value witness table for Builtin.BridgeObject[8];
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_100532B58;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_10038D54C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10038D588 + 4 * byte_100532B30[*v0]))(0x6465746365707865, 0xEE00657461647055);
}

uint64_t sub_10038D588()
{
  return 0x4B64656B6F766572;
}

uint64_t sub_10038D5A8()
{
  return 0x64656E676973;
}

uint64_t sub_10038D5BC()
{
  return 0x6974617269707865;
}

uint64_t sub_10038D5D8()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10038D5F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10038E1C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10038D614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10038DE30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038D63C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10038DE30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038D664@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  int64_t v39;
  _QWORD *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  void *object;
  Swift::String v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  _QWORD *v60;

  v51 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  v57 = v4;
  v5 = __chkstk_darwin(v3);
  v52 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v53 = (char *)&v48 - v7;
  v55 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v55);
  v54 = (uint64_t *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100004828(&qword_10063E2E8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeyRevocationList(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10000806C(a1, v16);
  v18 = sub_10038DE30();
  v19 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyRevocationList.CodingKeys, &type metadata for KeyRevocationList.CodingKeys, v18, v16, v17);
  if (v19)
    return _s8coreidvd24DigitalPresentmentHelperVwxx_0(a1);
  v48 = v10;
  v50 = v15;
  LOBYTE(v60) = 0;
  v21 = sub_10038DE74();
  v22 = v54;
  v58 = v12;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v55, &v60, v9, v55, v21);
  v23 = v9;
  v49 = a1;
  v24 = (uint64_t)v50;
  v25 = (uint64_t)v22;
  v26 = v56;
  v27 = v53;
  sub_100027D88(v25, (uint64_t)v50);
  LOBYTE(v60) = 2;
  v28 = sub_10038DF88(&qword_10063E300, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v26, &v60, v23, v26, v28);
  v29 = v24 + *(int *)(v13 + 24);
  v55 = v13;
  v30 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v57 + 32);
  v30(v29, v27, v26);
  LOBYTE(v60) = 3;
  v31 = v52;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v52, v26, &v60, v23, v26, v28);
  v30(v24 + *(int *)(v55 + 28), v31, v26);
  LOBYTE(v60) = 4;
  v32 = KeyedDecodingContainer.decode(_:forKey:)(&v60, v23);
  v33 = v55;
  v34 = (uint64_t *)(v24 + *(int *)(v55 + 32));
  *v34 = v32;
  v34[1] = v35;
  v36 = sub_100004828(&qword_10063E308);
  v59 = 1;
  v37 = sub_10038DEE8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v60, v36, &v59, v23, v36, v37);
  v57 = v23;
  v38 = v60;
  v39 = v60[2];
  v40 = _swiftEmptyArrayStorage;
  if (v39)
  {
    v60 = _swiftEmptyArrayStorage;
    sub_1000E419C(0, v39, 0);
    v40 = v60;
    v56 = (uint64_t)v38;
    v41 = v38 + 5;
    do
    {
      v42 = *(v41 - 1);
      v43 = *v41;
      sub_100022948(v42, *v41);
      object = Data.base16EncodedString()()._object;
      v45 = String.lowercased()();
      swift_bridgeObjectRelease(object);
      sub_100007F8C(v42, v43);
      v60 = v40;
      v47 = v40[2];
      v46 = v40[3];
      if (v47 >= v46 >> 1)
      {
        sub_1000E419C(v46 > 1, v47 + 1, 1);
        v40 = v60;
      }
      v41 += 2;
      v40[2] = v47 + 1;
      *(Swift::String *)&v40[2 * v47 + 4] = v45;
      --v39;
    }
    while (v39);
    v24 = (uint64_t)v50;
    v33 = v55;
    v38 = (_QWORD *)v56;
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v58, v57);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(v24 + *(int *)(v33 + 20)) = v40;
  sub_1000DB834(v24, v51);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v49);
  return sub_10038DF4C(v24);
}

uint64_t sub_10038DBF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[4];
  char v24;

  v3 = v1;
  v5 = sub_100004828(&qword_10063E318);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000806C(a1, v9);
  v11 = sub_10038DE30();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyRevocationList.CodingKeys, &type metadata for KeyRevocationList.CodingKeys, v11, v9, v10);
  v24 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_10038DF88(&qword_10063E320, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v24, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for KeyRevocationList(0);
    v22 = *(_QWORD *)(v3 + v14[5]);
    v23[3] = 1;
    sub_100004828(&qword_1006368D0);
    sub_10038DFC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v15 = v3 + v14[6];
    v23[2] = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15);
    v16 = v3 + v14[7];
    v23[1] = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16);
    v17 = (uint64_t *)(v3 + v14[8]);
    v18 = *v17;
    v19 = v17[1];
    v23[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10038DE08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10038D664(a1, a2);
}

uint64_t sub_10038DE1C(_QWORD *a1)
{
  return sub_10038DBF4(a1);
}

unint64_t sub_10038DE30()
{
  unint64_t result;

  result = qword_10063E2F0;
  if (!qword_10063E2F0)
  {
    result = swift_getWitnessTable(&unk_100532C84, &type metadata for KeyRevocationList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063E2F0);
  }
  return result;
}

unint64_t sub_10038DE74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063E2F8;
  if (!qword_10063E2F8)
  {
    v1 = sub_100013E24(&qword_100633990);
    sub_10038DF88(&qword_10063E300, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10063E2F8);
  }
  return result;
}

unint64_t sub_10038DEE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063E310;
  if (!qword_10063E310)
  {
    v1 = sub_100013E24(&qword_10063E308);
    sub_100049540();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10063E310);
  }
  return result;
}

uint64_t sub_10038DF4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyRevocationList(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10038DF88(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10038DFC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100631310;
  if (!qword_100631310)
  {
    v1 = sub_100013E24(&qword_1006368D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100631310);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyRevocationList.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10038E070 + 4 * byte_100532B3A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10038E0A4 + 4 * byte_100532B35[v4]))();
}

uint64_t sub_10038E0A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038E0AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10038E0B4);
  return result;
}

uint64_t sub_10038E0C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10038E0C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10038E0CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10038E0D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyRevocationList.CodingKeys()
{
  return &type metadata for KeyRevocationList.CodingKeys;
}

unint64_t sub_10038E0F4()
{
  unint64_t result;

  result = qword_10063E328;
  if (!qword_10063E328)
  {
    result = swift_getWitnessTable(&unk_100532C5C, &type metadata for KeyRevocationList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063E328);
  }
  return result;
}

unint64_t sub_10038E13C()
{
  unint64_t result;

  result = qword_10063E330;
  if (!qword_10063E330)
  {
    result = swift_getWitnessTable(&unk_100532BCC, &type metadata for KeyRevocationList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063E330);
  }
  return result;
}

unint64_t sub_10038E184()
{
  unint64_t result;

  result = qword_10063E338;
  if (!qword_10063E338)
  {
    result = swift_getWitnessTable(&unk_100532BF4, &type metadata for KeyRevocationList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10063E338);
  }
  return result;
}

uint64_t sub_10038E1C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6465746365707865 && a2 == 0xEE00657461647055)
  {
    v5 = 0xEE00657461647055;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465746365707865, 0xEE00657461647055, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4B64656B6F766572 && a2 == 0xEB00000000737965)
  {
    v7 = 0xEB00000000737965;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B64656B6F766572, 0xEB00000000737965, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64656E676973 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656E676973, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    v9 = 0xEA00000000006E6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10038E424(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for IdentityProofingCleanupProviderFactory()
{
  return objc_opt_self(_TtC8coreidvd38IdentityProofingCleanupProviderFactory);
}

void sub_10038E464(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v11 = type metadata accessor for Logger(0);
  __chkstk_darwin(v11);
  if ((a1 & 1) != 0 && a3)
  {
    v15 = a4;
    if (qword_10062F478 != -1)
      swift_once(&qword_10062F478, sub_1000DECC0);
    v12 = *(id *)(qword_100670250 + 16);
    sub_100395E74(a2, a3, v12, (uint64_t)&unk_100615198, (uint64_t)&unk_10063E528);

    a4 = v15;
  }
  if ((a1 & 2) != 0 && a5)
  {
    v13 = *(_QWORD *)(v5 + 16);
    if (v13)
    {
      v14 = objc_retain(*(id *)(v13
                              + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService));
      sub_100395E74(a4, a5, v14, (uint64_t)&unk_1006151D8, (uint64_t)&unk_10063E540);

    }
  }
}

void sub_10038E634(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25[2];

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    v18 = *(_QWORD *)(v3 + 16);
    if (!v18)
      return;
    v15 = objc_retain(*(id *)(v18
                            + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService));
    v16 = &unk_1006151D8;
    v17 = &unk_10063E540;
    goto LABEL_8;
  }
  if (a1 == 1)
  {
    if (qword_10062F478 != -1)
      swift_once(&qword_10062F478, sub_1000DECC0);
    v15 = *(id *)(qword_100670250 + 16);
    v16 = &unk_100615198;
    v17 = &unk_10063E528;
LABEL_8:
    v25[0] = v15;
    sub_100395E74(a2, a3, v15, (uint64_t)v16, (uint64_t)v17);

    return;
  }
  (*(void (**)(char *, _QWORD))(v12 + 104))(v14, enum case for DIPError.Code.targetUnavailable(_:));
  v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for DIPError(0);
  v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v22 = swift_allocError(v20, v21, 0, 0);
  v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010055C270, 0, v14, 0, v19, 0xD00000000000007ELL, 0x800000010055C080, 0xD000000000000033, 0x800000010055C2B0, 66);
  v24 = swift_willThrow(v23);
  defaultLogger()(v24);
  DIPRecordError(_:message:log:)(v22, 0, 0xE000000000000000, v10);
  swift_errorRelease(v22);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10038E8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v3, 24, 7);
  sub_1000D6044();
  v5 = v4;
  v6 = swift_allocObject(&unk_1006152F0, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v1;
  swift_retain(v5);
  swift_retain(v1);
  sub_1000D6570((uint64_t)sub_1003972D0, v6);
  swift_release(v5);
  return swift_release(v6);
}

void sub_10038EB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  v11 = objc_allocWithZone((Class)NSFetchRequest);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "initWithEntityName:", v12);

  v14 = *(void **)(a1 + 16);
  v15 = sub_100004828(&qword_1006332D0);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v13, v15);
  if (v2)
  {

    return;
  }
  v17 = v16;
  v41 = v4;
  v42 = 0;
  v40 = v8;
  v18 = (uint64_t)sub_100458ADC(v16);

  v19 = swift_bridgeObjectRelease(v17);
  if (v18)
  {
    v39 = v5;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 >= 0)
        v31 = v18 & 0xFFFFFFFFFFFFFF8;
      else
        v31 = v18;
      swift_bridgeObjectRetain(v18);
      v20 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v18);
      if (v20)
        goto LABEL_6;
    }
    else
    {
      v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v20)
      {
LABEL_6:
        if (v20 < 1)
        {
          __break(1u);
          return;
        }
        v21 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
            v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
          else
            v22 = *(id *)(v18 + 8 * v21 + 32);
          v23 = v22;
          ++v21;
          sub_10039289C(v22);
          objc_msgSend(v14, "deleteObject:", v23);

        }
        while (v20 != v21);
      }
    }
    swift_bridgeObjectRelease(v18);
    v32 = v42;
    v33 = sub_1000D6288();
    if (!v32)
    {
      v34 = v40;
      v35 = defaultLogger()(v33);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Deleted all the proofing sessions successfully", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v41);
    }
    return;
  }
  v24 = v10;
  v25 = defaultLogger()(v19);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter();
  v28 = os_log_type_enabled(v26, v27);
  v29 = v41;
  if (v28)
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "No proofing sessions to delete", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v29);
}

uint64_t sub_10038EEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = swift_allocObject(&unk_1006152A0, 24, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptySetSingleton;
  v4 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v4, 24, 7);
  sub_1000D6044();
  v6 = v5;
  v7 = (_QWORD *)swift_allocObject(&unk_1006152C8, 40, 7);
  v7[2] = v6;
  v7[3] = v3;
  v7[4] = v1;
  swift_retain(v6);
  swift_retain(v3);
  swift_retain(v1);
  sub_1000D6570((uint64_t)sub_1003972B0, (uint64_t)v7);
  swift_release(v3);
  swift_release(v6);
  return swift_release(v7);
}

void sub_10038F190(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSString v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __n128 v62;
  uint64_t *v63;
  void *v64;
  char *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74[3];
  uint64_t v75;
  uint64_t v76;
  char v77[32];
  unint64_t v78;

  v67 = a3;
  v6 = type metadata accessor for Logger(0);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v58 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithEntityName:", v16);

  v18 = *(void **)(a1 + 16);
  v19 = sub_100004828(&qword_1006332D0);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v17, v19);
  v68 = v3;
  if (v3)
  {

  }
  else
  {
    v21 = v20;
    v78 = a2;
    v64 = v18;
    v65 = v12;
    v60 = a1;
    v59 = v9;
    v22 = (uint64_t)sub_100458ADC(v20);

    v23 = swift_bridgeObjectRelease(v21);
    if (v22)
    {
      if ((unint64_t)v22 >> 62)
      {
        if (v22 >= 0)
          v57 = v22 & 0xFFFFFFFFFFFFFF8;
        else
          v57 = v22;
        swift_bridgeObjectRetain(v22);
        v24 = _CocoaArrayWrapper.endIndex.getter(v57);
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v25 = v64;
      v26 = v65;
      v27 = v78;
      if (v24)
      {
        if (v24 < 1)
        {
          __break(1u);
          return;
        }
        v78 = v22 & 0xC000000000000001;
        v73 = (uint64_t *)(v27 + 16);
        v28 = swift_beginAccess(v27 + 16, v77, 0, 0);
        v29 = 0;
        v63 = &v76;
        v28.n128_u64[0] = 136315138;
        v62 = v28;
        v61 = (char *)&type metadata for Any + 8;
        v71 = v24;
        v72 = v22;
        do
        {
          if (v78)
            v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v22);
          else
            v30 = *(id *)(v22 + 8 * v29 + 32);
          v31 = v30;
          v32 = objc_msgSend(v30, "proofingSessionID");
          if (v32)
          {
            v33 = v32;
            v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v36 = v35;

            v37 = *v73;
            swift_bridgeObjectRetain(*v73);
            v38 = sub_1004E09A8(v34, v36, v37);
            v39 = swift_bridgeObjectRelease(v37);
            if ((v38 & 1) != 0)
            {
              swift_bridgeObjectRelease(v36);
              v22 = v72;
            }
            else
            {
              defaultLogger()(v39);
              v40 = swift_bridgeObjectRetain_n(v36, 2);
              v41 = Logger.logObject.getter(v40);
              v42 = static os_log_type_t.debug.getter(v41);
              if (os_log_type_enabled(v41, v42))
              {
                v43 = (uint8_t *)swift_slowAlloc(12, -1);
                v44 = swift_slowAlloc(32, -1);
                v74[0] = v44;
                *(_DWORD *)v43 = v62.n128_u32[0];
                v66 = v43 + 4;
                swift_bridgeObjectRetain(v36);
                v75 = sub_1000E3AC8(v34, v36, v74);
                v26 = v65;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v63, v66);
                swift_bridgeObjectRelease_n(v36, 3);
                _os_log_impl((void *)&_mh_execute_header, v41, v42, "Server has not been notified of about terminal state for proofingSessionID %s", v43, 0xCu);
                swift_arrayDestroy(v44, 1, v61);
                v45 = v44;
                v25 = v64;
                swift_slowDealloc(v45, -1, -1);
                swift_slowDealloc(v43, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v36, 2);
              }
              (*(void (**)(char *, uint64_t))(v69 + 8))(v26, v70);
              v22 = v72;
              swift_beginAccess(v73, v74, 33, 0);
              sub_1004E5D2C(&v75, v34, v36);
              swift_endAccess(v74);
              swift_bridgeObjectRelease(v76);
              v46 = v31;
              sub_1003909B8(v31);

            }
            v24 = v71;
          }
          ++v29;
          sub_10039289C(v31);
          objc_msgSend(v25, "deleteObject:", v31);

        }
        while (v24 != v29);
      }
      swift_bridgeObjectRelease(v22);
      v51 = v68;
      v52 = sub_1000D6288();
      if (!v51)
      {
        v53 = defaultLogger()(v52);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.debug.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Deleted all the proofing sessions successfully", v56, 2u);
          swift_slowDealloc(v56, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v69 + 8))(v59, v70);
      }
    }
    else
    {
      v47 = defaultLogger()(v23);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "No proofing sessions to delete", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v69 + 8))(v14, v70);
    }
  }
}

void sub_10038F75C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  NSObject *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  id v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v15 = type metadata accessor for Logger(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  if (a2)
  {
    v22 = (char *)&v55 - v20;
    v23 = v21;
    v59 = v19;
    swift_bridgeObjectRetain(a2);
    v24 = (void *)sub_1000D73A8(a1, a2);
    if (!v7)
    {
      v28 = v24;
      if (v24)
      {
        v58 = a1;
        v29 = objc_msgSend(v24, "proofingSessionID");
        if (v29)
        {
          v30 = v29;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v33 = v32;

          objc_msgSend(*(id *)(a3 + 16), "deleteObject:", v28);
          v34 = sub_1000D6288();
          v57 = v31;
          v37 = v22;
          defaultLogger()(v34);
          swift_bridgeObjectRetain(a2);
          v38 = swift_bridgeObjectRetain(v33);
          v39 = Logger.logObject.getter(v38);
          v40 = static os_log_type_t.debug.getter();
          v41 = v40;
          if (os_log_type_enabled(v39, v40))
          {
            v42 = swift_slowAlloc(22, -1);
            v56 = v37;
            v43 = v42;
            v44 = swift_slowAlloc(64, -1);
            v62 = v44;
            *(_DWORD *)v43 = 136315394;
            v55 = v43 + 4;
            swift_bridgeObjectRetain(v33);
            v60 = sub_1000E3AC8((uint64_t)v57, v33, &v62);
            LODWORD(v57) = v41;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v55);
            swift_bridgeObjectRelease_n(v33, 3);
            *(_WORD *)(v43 + 12) = 2080;
            swift_bridgeObjectRetain(a2);
            v60 = sub_1000E3AC8(v58, a2, &v62);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 14);
            swift_bridgeObjectRelease_n(a2, 3);
            _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v57, "Successfully deleted proofing session for with proofingSessionID: %s and credentialIdentifier: %s", (uint8_t *)v43, 0x16u);
            swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v44, -1, -1);
            swift_slowDealloc(v43, -1, -1);

            (*(void (**)(char *, uint64_t))(v23 + 8))(v56, v59);
          }
          else
          {

            swift_bridgeObjectRelease_n(a2, 2);
            swift_bridgeObjectRelease_n(v33, 2);

            (*(void (**)(char *, uint64_t))(v23 + 8))(v37, v59);
          }
          return;
        }

      }
    }
    swift_bridgeObjectRelease(a2);
    return;
  }
  if (a5 && (a7 & 1) == 0)
  {
    v25 = v21;
    v59 = v19;
    swift_bridgeObjectRetain(a5);
    v26 = a6;
    sub_1000D7010(a4, a5, a6);
    if (v7 || (v35 = v27) == 0)
    {
      swift_bridgeObjectRelease(a5);
    }
    else
    {
      objc_msgSend(*(id *)(a3 + 16), "deleteObject:", v27);
      v36 = sub_1000D6288();
      defaultLogger()(v36);
      v45 = swift_bridgeObjectRetain(a5);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(22, -1);
        v56 = (char *)v26;
        v49 = v48;
        v58 = swift_slowAlloc(64, -1);
        v62 = v58;
        *(_DWORD *)v49 = 136315394;
        v57 = v46;
        swift_bridgeObjectRetain(a5);
        v60 = sub_1000E3AC8(a4, a5, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v49 + 4);
        swift_bridgeObjectRelease_n(a5, 3);
        *(_WORD *)(v49 + 12) = 2080;
        v50 = IdentityTarget.debugDescription.getter(v56);
        v52 = v51;
        v60 = sub_1000E3AC8(v50, v51, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v49 + 14);
        swift_bridgeObjectRelease(v52);
        v53 = v57;
        _os_log_impl((void *)&_mh_execute_header, v57, v47, "Successfully deleted proofing session for with proofingSessionID: %s and target: %s", (uint8_t *)v49, 0x16u);
        v54 = v58;
        swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a5, 2);
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v59);
    }
  }
}

uint64_t sub_10038FC94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = v4;
  v15 = type metadata accessor for Logger(0);
  __chkstk_darwin(v15);
  v10 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v10, 24, 7);
  sub_1000D6044();
  v12 = v11;
  v13 = swift_allocObject(&unk_100615278, 64, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_BYTE *)(v13 + 24) = a4 & 1;
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = a1;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = v5;
  swift_retain(v12);
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  sub_1000D6570((uint64_t)sub_100397234, v13);
  swift_release(v12);
  return swift_release(v13);
}

uint64_t sub_10038FFC0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __n128 i;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  NSString v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __n128 v91;
  uint64_t *v92;
  uint64_t v93;
  __n128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108[2];
  unint64_t v109;

  v102 = a6;
  v12 = type metadata accessor for Logger(0);
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  v13 = __chkstk_darwin(v12);
  v95 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v89 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v89 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v89 - v21;
  v109 = (unint64_t)_swiftEmptyArrayStorage;
  v106 = a5;
  if ((a2 & 1) == 0)
  {
    sub_1000D7010(a4, a5, a1);
    v105 = v6;
    if (!v6)
    {
      v101 = a3;
      if (!v23)
      {
        v62 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        defaultLogger()(v62);
        v63 = v106;
        v64 = swift_bridgeObjectRetain_n(v106, 2);
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.debug.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          v67 = swift_slowAlloc(22, -1);
          v102 = swift_slowAlloc(64, -1);
          v108[0] = v102;
          *(_DWORD *)v67 = 136315394;
          swift_bridgeObjectRetain(v63);
          v107 = sub_1000E3AC8(a4, v63, v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v67 + 4);
          swift_bridgeObjectRelease_n(v63, 3);
          *(_WORD *)(v67 + 12) = 2080;
          v68 = IdentityTarget.debugDescription.getter(a1);
          v70 = v69;
          v107 = sub_1000E3AC8(v68, v69, v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v67 + 14);
          swift_bridgeObjectRelease(v70);
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "Proofing session doesn't exist for a %s and target %s", (uint8_t *)v67, 0x16u);
          v71 = v102;
          swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v71, -1, -1);
          swift_slowDealloc(v67, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v63, 2);
        }
        return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v22, v104);
      }
      v24 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v26 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v25 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18);
      v27 = v106;
      if (v26 >= v25 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
      specialized Array._endMutation()(v28);

      goto LABEL_11;
    }
    return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  sub_1000D69B0(a4, a5);
  v105 = v6;
  if (v6)
    return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v101 = a3;
  if (!v29)
  {
    v72 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    defaultLogger()(v72);
    v73 = v106;
    v74 = swift_bridgeObjectRetain_n(v106, 2);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.debug.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = swift_slowAlloc(32, -1);
      v108[0] = v78;
      *(_DWORD *)v77 = 136315138;
      swift_bridgeObjectRetain(v73);
      v107 = sub_1000E3AC8(a4, v73, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v77 + 4);
      swift_bridgeObjectRelease_n(v73, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to delete the proofing session for the ID %s", v77, 0xCu);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v73, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v20, v104);
  }
  sub_100122D28(v29);
  v27 = v106;
LABEL_11:
  v31 = v109;
  v32 = v95;
  if (v109 >> 62)
    goto LABEL_38;
  v33 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = swift_bridgeObjectRetain(v109); v33; v33 = _CocoaArrayWrapper.endIndex.getter(v79))
  {
    v96 = a4;
    v99 = *(id *)(v101 + 16);
    v100 = v31 & 0xC000000000000001;
    v92 = v108;
    a4 = 4;
    i.n128_u64[0] = 136315394;
    v91 = i;
    v90 = (char *)&type metadata for Any + 8;
    i.n128_u64[0] = 136315138;
    v94 = i;
    v97 = v33;
    v98 = v31;
    v89 = v17;
    while (1)
    {
      v35 = v100
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, v31)
          : *(id *)(v31 + 8 * a4);
      v36 = v35;
      v37 = a4 - 3;
      if (__OFADD__(a4 - 4, 1))
        break;
      v38 = IdentityTarget.init(rawValue:)(objc_msgSend(v35, "target"));
      if ((v39 & 1) == 0)
      {
        v40 = v38;
        defaultLogger()(v38);
        v41 = swift_bridgeObjectRetain_n(v27, 2);
        v42 = Logger.logObject.getter(v41);
        v43 = v17;
        v44 = static os_log_type_t.debug.getter(v42);
        if (os_log_type_enabled(v42, v44))
        {
          v45 = swift_slowAlloc(22, -1);
          v93 = swift_slowAlloc(64, -1);
          v108[0] = v93;
          *(_DWORD *)v45 = v91.n128_u32[0];
          swift_bridgeObjectRetain(v106);
          v107 = sub_1000E3AC8(v96, v106, v108);
          v46 = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v92, v45 + 4);
          swift_bridgeObjectRelease_n(v106, 3);
          *(_WORD *)(v45 + 12) = 2080;
          v47 = IdentityTarget.debugDescription.getter(v40);
          v49 = v48;
          v107 = sub_1000E3AC8(v47, v48, v108);
          v27 = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v46, v45 + 14);
          swift_bridgeObjectRelease(v49);
          _os_log_impl((void *)&_mh_execute_header, v42, v44, "Will attempt to delete the proofing session with ID %s and target %s", (uint8_t *)v45, 0x16u);
          v50 = v93;
          swift_arrayDestroy(v93, 2, v90);
          swift_slowDealloc(v50, -1, -1);
          v51 = v45;
          v32 = v95;
          swift_slowDealloc(v51, -1, -1);

          v17 = v89;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v89, v104);
        }
        else
        {

          swift_bridgeObjectRelease_n(v27, 2);
          (*(void (**)(char *, uint64_t))(v103 + 8))(v43, v104);
          v17 = v43;
        }
      }
      sub_10039289C(v36);
      objc_msgSend(v99, "deleteObject:", v36);
      v52 = v105;
      v53 = sub_1000D6288();
      v105 = v52;
      if (v52)
      {
        swift_bridgeObjectRelease(v98);

        return swift_bridgeObjectRelease(v109);
      }
      v54 = v17;
      defaultLogger()(v53);
      v55 = swift_bridgeObjectRetain_n(v27, 2);
      v56 = Logger.logObject.getter(v55);
      v57 = v32;
      v58 = static os_log_type_t.debug.getter(v56);
      if (os_log_type_enabled(v56, v58))
      {
        v59 = swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v108[0] = v60;
        *(_DWORD *)v59 = v94.n128_u32[0];
        swift_bridgeObjectRetain(v106);
        *(_QWORD *)(v59 + 4) = sub_1000E3AC8(v96, v106, v108);
        swift_bridgeObjectRelease_n(v106, 3);
        _os_log_impl((void *)&_mh_execute_header, v56, v58, "Successfully cleared the stored proofing session with proofingSessionID: %s", (uint8_t *)v59, 0xCu);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        v61 = v59;
        v27 = v106;
        swift_slowDealloc(v61, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v27, 2);
      }
      (*(void (**)(char *, uint64_t))(v103 + 8))(v57, v104);
      v32 = v57;
      v31 = v98;
      ++a4;
      v17 = v54;
      if (v37 == v97)
      {
        result = swift_bridgeObjectRelease(v98);
        v31 = v109;
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_38:
    if (v31 < 0)
      v79 = v31;
    else
      v79 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
  }
  result = swift_bridgeObjectRelease(v31);
LABEL_43:
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v82 = v31;
    else
      v82 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v83 = _CocoaArrayWrapper.endIndex.getter(v82);
    result = swift_bridgeObjectRelease(v31);
    if (v83)
      goto LABEL_45;
LABEL_53:
    swift_bridgeObjectRelease(v31);
    v81 = 0;
    goto LABEL_54;
  }
  if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_53;
LABEL_45:
  if ((v31 & 0xC000000000000001) != 0)
  {
    v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    goto LABEL_48;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v80 = *(id *)(v31 + 32);
LABEL_48:
    v81 = v80;
    swift_bridgeObjectRelease(v31);
LABEL_54:
    sub_1003909B8(v81);

    v84 = type metadata accessor for IdentityManagementSessionDelegate();
    v85 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v86 = String._bridgeToObjectiveC()();
    v108[0] = v84;
    v87 = sub_100004828((uint64_t *)&unk_10063E570);
    v88 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v108, v87);
    objc_msgSend(v85, "postNotificationName:object:", v86, v88);

    return swift_unknownObjectRelease(v88);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003909B8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  id v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t aBlock[5];
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;

  v61 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v61 - 8);
  v4 = __chkstk_darwin(v61);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v57 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v57 - v10;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v59 = v17;
    v20 = a1;
    v21 = objc_msgSend(v20, "proofingSessionID");
    if (v21)
    {
      v22 = v21;
      v57 = v1;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      v58 = v20;
      v26 = objc_msgSend(v20, "workflowID");
      if (v26)
      {
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        v31 = v57;
        v32 = *(void **)(v57 + 64);
        v33 = (_QWORD *)swift_allocObject(&unk_100615200, 56, 7);
        v33[2] = v23;
        v33[3] = v25;
        v33[4] = v31;
        v33[5] = v28;
        v33[6] = v30;
        aBlock[4] = (uint64_t)sub_100397094;
        v63 = v33;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1004AB190;
        aBlock[3] = (uint64_t)&unk_100615218;
        v34 = _Block_copy(aBlock);
        v35 = v32;
        v36 = swift_retain(v31);
        static DispatchQoS.unspecified.getter(v36);
        v64 = _swiftEmptyArrayStorage;
        v37 = sub_100004790((unint64_t *)&unk_100632380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v38 = sub_100004828((uint64_t *)&unk_1006308D0);
        v39 = sub_100107078();
        dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v38, v39, v12, v37);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v34);
        _Block_release(v34);

        (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v12);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v59);
        return swift_release(v63);
      }
      else
      {
        v60 = v23;
        defaultLogger()(0);
        v49 = v25;
        swift_bridgeObjectRetain(v25);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.debug.getter(v51);
        v53 = os_log_type_enabled(v51, v52);
        v54 = v58;
        if (v53)
        {
          v55 = (uint8_t *)swift_slowAlloc(12, -1);
          v56 = swift_slowAlloc(32, -1);
          aBlock[0] = v56;
          *(_DWORD *)v55 = 136315138;
          swift_bridgeObjectRetain(v49);
          v64 = (_QWORD *)sub_1000E3AC8(v60, v49, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v55 + 4);
          swift_bridgeObjectRelease_n(v49, 3);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "unable to notify server of terminal state for proofingSessionID %s as workflowID doesn't exist", v55, 0xCu);
          swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v49, 2);
        }

        return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v61);
      }
    }
    else
    {
      v45 = defaultLogger()(0);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "unable to notify server of terminal state as proofingSessionID doesn't exist", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v61);
    }
  }
  else
  {
    v41 = defaultLogger()(v17);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "unable to notify server of terminal state as proofingSession doesn't exist", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v61);
  }
}

uint64_t sub_100390EE0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v32 - 8);
  v11 = __chkstk_darwin(v32);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v28 - v15;
  defaultLogger()(v14);
  v17 = swift_bridgeObjectRetain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v28 = v10;
    v20 = swift_slowAlloc(12, -1);
    v31 = v13;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v29 = a4;
    v23 = v22;
    v35 = v22;
    v30 = a3;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    v33 = sub_1000E3AC8(a1, a2, &v35);
    v24 = v32;
    a3 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v21 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Attempting to notify server of terminal state for proofingSessionID %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v25 = v23;
    a4 = v29;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v24);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v32);
  }
  v26 = (_QWORD *)swift_allocObject(&unk_100615250, 112, 7);
  v26[2] = a3;
  v26[3] = 0x4C45434E4143;
  v26[4] = 0xE600000000000000;
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 1;
  v26[8] = 0;
  v26[9] = 0;
  v26[10] = a4;
  v26[11] = a5;
  v26[12] = a1;
  v26[13] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  swift_bridgeObjectRetain(a5);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000002ELL, 0x800000010055C1B0, 0xD000000000000025, 0x800000010055C240, 252, &unk_10063E560, v26, (char *)&type metadata for () + 8);
  return swift_release(v26);
}

uint64_t sub_100391338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[2] = a2;
  v7[3] = a3;
  return swift_task_switch(sub_100391358, 0, 0);
}

uint64_t sub_100391358()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  v1 = v0[7];
  v2 = v0[5];
  v3 = (__int128 *)v0[3];
  sub_10000806C((_QWORD *)(v0[2] + 24), *(_QWORD *)(v0[2] + 48));
  v4 = sub_100004828(&qword_100630510);
  v5 = swift_allocObject(v4, 88, 7);
  v0[8] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_10051FFB0;
  v6 = *v3;
  v7 = v3[1];
  v8 = v3[2];
  *(_QWORD *)(v5 + 80) = *((_QWORD *)v3 + 6);
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)(v5 + 64) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  sub_1003971A4(v3);
  v9 = (_QWORD *)swift_task_alloc(dword_1006372CC);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_10039142C;
  return sub_1001A2B74(v5, v0[4], v2, v0[6], v1);
}

uint64_t sub_10039142C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003914A0, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003914A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003914D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = type metadata accessor for DIPError.Code(0);
  v4[2] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[3] = v8;
  v4[4] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_10062FE64);
  v4[5] = v9;
  *v9 = v4;
  v9[1] = sub_100391560;
  return sub_10001AFAC(a3, a4);
}

uint64_t sub_100391560()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003915D4, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003915D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010055C220, v1, v2, 0, v3, 0xD00000000000007ELL, 0x800000010055C080, 0xD000000000000037, 0x800000010055C1E0, 283);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100391714(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v2 + 2;
  v5 = type metadata accessor for DIPError.Code(0);
  v2[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String._bridgeToObjectiveC()();
  v2[18] = v7;
  v2[2] = v2;
  v2[3] = sub_1003917F0;
  v8 = swift_continuation_init(v2 + 2, 1);
  v2[10] = _NSConcreteStackBlock;
  v9 = v2 + 10;
  v9[1] = 0x40000000;
  v9[2] = sub_100454F88;
  v9[3] = &unk_1006151B0;
  v9[4] = v8;
  objc_msgSend(a2, "deleteCredential:completion:", v7, v9);
  return swift_continuation_await(v4);
}

uint64_t sub_1003917F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 152) = v3;
  v4 = *(void **)(v2 + 144);
  if (v3)
  {
    swift_willThrow(a1);

    return swift_task_switch(sub_100391884, 0, 0);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 136);

    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_100391884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 120));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x800000010055C220, v1, v2, 0, v3, 0xD00000000000007ELL, 0x800000010055C080, 0xD000000000000037, 0x800000010055C1E0, 283);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003919C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  char *v40;
  id v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  _BYTE v81[40];
  _QWORD *v82;

  v79 = a2;
  v3 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v64 - v11;
  v13 = objc_allocWithZone((Class)NSFetchRequest);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "initWithEntityName:", v14);

  v16 = sub_100004828(&qword_1006332D0);
  v17 = NSManagedObjectContext.fetch<A>(_:)(v15, v16);
  v67 = v2;
  if (v2)
  {

    return;
  }
  v18 = v17;
  v19 = (unint64_t)v79;
  v76 = v12;
  v74 = v10;
  v20 = (uint64_t)sub_100458ADC(v17);

  swift_bridgeObjectRelease(v18);
  if (v20)
  {
    v21 = v20 & 0xFFFFFFFFFFFFFF8;
    v68 = v20;
    v66 = v20 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v20 >> 62)
      goto LABEL_52;
    v70 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v70)
    {
LABEL_57:
      swift_bridgeObjectRelease(v68);
      return;
    }
LABEL_7:
    v20 = 0;
    v21 = v19 + 16;
    v22 = v68;
    v69 = v68 & 0xC000000000000001;
    v64 = (_QWORD *)(v19 + 16);
    v65 = v68 + 32;
    v75 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if (v69)
      {
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v22);
      }
      else
      {
        if ((unint64_t)v20 >= *(_QWORD *)(v66 + 16))
          goto LABEL_50;
        v23 = *(id *)(v65 + 8 * v20);
      }
      v24 = v23;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        if (v20 >= 0)
          v60 = v21;
        else
          v60 = v20;
        swift_bridgeObjectRetain(v20);
        v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v20);
        if (v61 < 1)
          goto LABEL_57;
        v62 = v68;
        swift_bridgeObjectRetain(v68);
        v63 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(v62);
        v70 = v63;
        if (!v63)
          goto LABEL_57;
        goto LABEL_7;
      }
      v26 = objc_msgSend(v23, "uploadAssets");
      if (v26)
      {
        v72 = v24;
        v73 = v20;
        v27 = v26;
        sub_10045A180(v27);
        v29 = v28;
        v71 = v27;

        v82 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)(v29 + 16));
        v30 = *(_QWORD *)(v29 + 16);
        if (v30)
        {
          v31 = v29 + 32;
          while (1)
          {
            sub_10002EDBC(v31, (uint64_t)v81);
            v32 = type metadata accessor for StoredUploadAsset(0);
            v33 = swift_dynamicCast(&v80, v81, v75, v32, 6);
            if (!(_DWORD)v33)
              break;
            v34 = v80;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
            v19 = v82[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
            v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v34);
            specialized ContiguousArray._endMutation()(v35);
            v31 += 32;
            if (!--v30)
              goto LABEL_20;
          }
          v80 = 0;
          swift_release(v82);
          v54 = v80;

          swift_release(v29);
          goto LABEL_47;
        }
LABEL_20:
        v19 = (unint64_t)v82;
        swift_release(v29);
        if ((v19 & 0x8000000000000000) != 0 || (v19 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain(v19);
          v56 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_release(v19);
          v57 = v56 <= 0;
          v20 = v73;
          v37 = v74;
          v38 = v72;
          if (!v57)
          {
            v58 = swift_retain(v19);
            v59 = _CocoaArrayWrapper.endIndex.getter(v58);
            if (v59)
            {
              v36 = v59;
              if (v59 < 1)
                goto LABEL_51;
LABEL_24:
              v39 = 0;
              v79 = (_QWORD *)v19;
              v77 = v19 & 0xC000000000000001;
              v40 = (char *)_swiftEmptyArrayStorage;
              v78 = v36;
              do
              {
                if (v77)
                  v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v79);
                else
                  v41 = (id)v79[v39 + 4];
                v42 = v41;
                v43 = objc_msgSend(v41, "assetFileURL", v64);
                if (v43)
                {
                  v19 = (unint64_t)v43;
                  v44 = v7;
                  v45 = v6;
                  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
                  v48 = v47;

                  v49 = v46;
                  v6 = v45;
                  v7 = v44;
                  v37 = v74;
                  URL.init(string:)(v49, v48);

                  swift_bridgeObjectRelease(v48);
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);

                }
                v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
                v51 = v76;
                if (v50 == 1)
                {
                  sub_1000DB76C((uint64_t)v5);
                }
                else
                {
                  v52 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
                  v52(v76, v5, v6);
                  v52(v37, v51, v6);
                  if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
                    v40 = (char *)sub_1000E3928(0, *((_QWORD *)v40 + 2) + 1, 1, (unint64_t)v40);
                  v19 = *((_QWORD *)v40 + 2);
                  v53 = *((_QWORD *)v40 + 3);
                  if (v19 >= v53 >> 1)
                    v40 = (char *)sub_1000E3928(v53 > 1, v19 + 1, 1, (unint64_t)v40);
                  *((_QWORD *)v40 + 2) = v19 + 1;
                  v52(&v40[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v19], v37, v6);
                }
                ++v39;
              }
              while (v78 != v39);
            }
            else
            {
              v79 = (_QWORD *)v19;
              v40 = (char *)_swiftEmptyArrayStorage;
            }
            swift_release_n(v79, 2);
            swift_beginAccess(v64, v81, 33, 0);
            sub_100122F00((uint64_t)v40);
            swift_endAccess(v81);

LABEL_47:
            v22 = v68;
            v20 = v73;
            goto LABEL_9;
          }
        }
        else
        {
          v36 = *(_QWORD *)(v19 + 16);
          v20 = v73;
          v37 = v74;
          v38 = v72;
          if (v36)
          {
            swift_retain(v19);
            goto LABEL_24;
          }
        }

        swift_release(v19);
        v22 = v68;
      }
      else
      {

      }
LABEL_9:
      if (v20 == v70)
      {
        swift_bridgeObjectRelease(v22);
        return;
      }
    }
  }
}

void sub_100391FEC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  char *v82;
  id v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::Int64_optional v100;

  v96 = a1;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v80 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v80 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v80 - v18;
  v88 = a2;
  v92 = a3;
  v20 = v95;
  sub_1000D7010(a2, a3, a4);
  if (v20)
    return;
  v94 = v11;
  v22 = a4;
  v91 = v17;
  v82 = v14;
  v84 = 0;
  if (!v21)
  {
    v47 = v19;
    defaultLogger()(0);
    v48 = v92;
    v49 = swift_bridgeObjectRetain_n(v92, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter(v50);
    v52 = v7;
    if (os_log_type_enabled(v50, v51))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(64, -1);
      v99 = v54;
      *(_DWORD *)v53 = 136315394;
      v89 = v8;
      swift_bridgeObjectRetain(v48);
      v55 = sub_1000E3AC8(v88, v48, &v99);
      v96 = v47;
      v97 = v55;
      v90 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v53 + 4);
      swift_bridgeObjectRelease_n(v48, 3);
      *(_WORD *)(v53 + 12) = 2080;
      v56 = IdentityTarget.debugDescription.getter(v22);
      v58 = v57;
      v97 = sub_1000E3AC8(v56, v57, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v53 + 14);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "proofing session for %s and %s doesn't exist", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v89 + 8))(v96, v90);
    }
    else
    {

      swift_bridgeObjectRelease_n(v48, 2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v47, v7);
    }
    return;
  }
  v83 = v21;
  v23 = objc_msgSend(v21, "uploadAssets");
  v24 = v7;
  if (!v23)
  {
LABEL_25:
    v59 = v94;
    defaultLogger()(v23);
    v60 = v92;
    v61 = swift_bridgeObjectRetain_n(v92, 2);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v99 = v65;
      *(_DWORD *)v64 = 136315394;
      v89 = v8;
      swift_bridgeObjectRetain(v60);
      v97 = sub_1000E3AC8(v88, v60, &v99);
      v90 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v64 + 4);
      swift_bridgeObjectRelease_n(v60, 3);
      *(_WORD *)(v64 + 12) = 2080;
      v66 = IdentityTarget.debugDescription.getter(a4);
      v68 = v67;
      v97 = sub_1000E3AC8(v66, v67, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v64 + 14);
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "No assets exists for proofing session %s and %s to be deleted.", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);

      (*(void (**)(id, uint64_t))(v89 + 8))(v94, v90);
    }
    else
    {

      swift_bridgeObjectRelease_n(v60, 2);
      (*(void (**)(id, uint64_t))(v8 + 8))(v59, v24);
    }
    return;
  }
  v25 = v23;
  sub_10045A180(v25);
  v27 = v26;

  v28 = (uint64_t)sub_1004589E4(v27);
  swift_release(v27);
  if (!v28)
  {

    goto LABEL_25;
  }
  v81 = v25;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 >= 0)
      v79 = v28 & 0xFFFFFFFFFFFFFF8;
    else
      v79 = v28;
    swift_bridgeObjectRetain(v28);
    v30 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v31 = v91;
  v32 = v92;
  if (v30)
  {
    if (v30 < 1)
    {
      __break(1u);
      return;
    }
    v33 = 0;
    v34 = (void *)*((_QWORD *)v96 + 2);
    v93 = v28 & 0xC000000000000001;
    v94 = v34;
    *(_QWORD *)&v29 = 136315138;
    v86 = v29;
    v85 = (char *)&type metadata for Any + 8;
    v89 = v8;
    v90 = v24;
    v87 = v28;
    v95 = v30;
    do
    {
      if (v93)
        v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v28);
      else
        v35 = *(id *)(v28 + 8 * v33 + 32);
      v36 = v35;
      defaultLogger()(objc_msgSend(v94, "deleteObject:", v35));
      v37 = v36;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.debug.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        v99 = v41;
        *(_DWORD *)v40 = v86;
        v42 = objc_msgSend(v37, "assetType");
        if (v42)
        {
          v43 = v42;
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v46 = v45;

        }
        else
        {
          v44 = 0;
          v46 = 0xE000000000000000;
        }
        *(_QWORD *)(v40 + 4) = sub_1000E3AC8(v44, v46, &v99);

        swift_bridgeObjectRelease(v46);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Delete called on StoredUploadAsset with type %s", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy(v41, 1, v85);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        v8 = v89;
        v24 = v90;
        v31 = v91;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v90);
        v28 = v87;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v24);
      }
      ++v33;
    }
    while (v95 != v33);
    swift_bridgeObjectRelease(v28);
    v32 = v92;
  }
  else
  {
    swift_bridgeObjectRelease(v28);
  }
  v69 = v83;
  StoredProofingSession.update(shouldScheduleUploads:)(0);
  v100.value = IdentityProofingActionStatus.rawValue.getter(1);
  v100.is_nil = 0;
  StoredProofingSession.update(proofingActionStatus:)(v100);
  v70 = v84;
  v71 = sub_1000D6288();
  if (v70)
  {

  }
  else
  {
    v72 = v8;
    v84 = 0;
    v73 = v82;
    defaultLogger()(v71);
    v74 = swift_bridgeObjectRetain_n(v32, 2);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.debug.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = swift_slowAlloc(32, -1);
      v99 = v78;
      *(_DWORD *)v77 = 136315138;
      swift_bridgeObjectRetain(v32);
      v97 = sub_1000E3AC8(v88, v32, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v77 + 4);
      swift_bridgeObjectRelease_n(v32, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Cleanup after uploads complete for proofingSessionID -> %s", v77, 0xCu);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      (*(void (**)(char *, uint64_t))(v72 + 8))(v82, v24);
    }
    else
    {

      swift_bridgeObjectRelease_n(v32, 2);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v24);
    }
  }
}

uint64_t sub_10039289C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v50 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v50 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v50 - v15;
  v17 = objc_msgSend(a1, "credentialIdentifier");
  if (v17)
  {
    v18 = v17;
    v50 = v3;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    v22 = IdentityTarget.init(rawValue:)(objc_msgSend(a1, "target"));
    if ((v23 & 1) != 0)
    {
      v32 = swift_bridgeObjectRelease(v21);
      v33 = defaultLogger()(v32);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "invalid target, cannot delete the session", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      v37 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      v38 = v11;
    }
    else if (v22 == 2)
    {
      v39 = *(_QWORD *)(v1 + 16);
      if (v39)
      {
        v24 = objc_retain(*(id *)(v39
                                + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService));
        v25 = &unk_1006151D8;
        v26 = &unk_10063E540;
LABEL_16:
        sub_100395E74(v19, v21, v24, (uint64_t)v25, (uint64_t)v26);

        return swift_bridgeObjectRelease(v21);
      }
      v45 = swift_bridgeObjectRelease(v21);
      v46 = defaultLogger()(v45);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "No watch connection available, ignoring deleteCredential on Watch", v49, 2u);
        swift_slowDealloc(v49, -1, -1);
      }

      v37 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      v38 = v16;
    }
    else
    {
      if (v22 == 1)
      {
        if (qword_10062F478 != -1)
          swift_once(&qword_10062F478, sub_1000DECC0);
        v24 = *(id *)(qword_100670250 + 16);
        v25 = &unk_100615198;
        v26 = &unk_10063E528;
        goto LABEL_16;
      }
      v40 = swift_bridgeObjectRelease(v21);
      v41 = defaultLogger()(v40);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unknown target, cannot delete the session", v44, 2u);
        swift_slowDealloc(v44, -1, -1);
      }

      v37 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      v38 = v14;
    }
    return v37(v38, v50);
  }
  else
  {
    v27 = defaultLogger()(0);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "credentialIdentifier doesn't exist, cannot delete the crendential", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
}

void sub_100392E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD v43[3];
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v43 - v8;
  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithEntityName:", v11);

  v13 = *(void **)(a1 + 16);
  v14 = sub_100004828(&qword_1006332D0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v12, v14);
  if (v1)
  {

    return;
  }
  v16 = v15;
  v49 = v13;
  v50 = v9;
  v17 = (unint64_t)sub_100458AE8(v15);

  v18 = swift_bridgeObjectRelease(v16);
  if (v17)
  {
    v48 = v17;
    if (v17 >> 62)
    {
      v37 = v48;
      if (v48 >= 0)
        v38 = v17 & 0xFFFFFFFFFFFFFF8;
      else
        v38 = v48;
      swift_bridgeObjectRetain(v48);
      v20 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v37);
      if (v20)
      {
LABEL_6:
        v43[1] = a1;
        v43[2] = 0;
        if (v20 < 1)
        {
          __break(1u);
        }
        else
        {
          v21 = 0;
          v23 = v48;
          v22 = v49;
          v51 = v48 & 0xC000000000000001;
          *(_QWORD *)&v19 = 136315138;
          v45 = v19;
          v44 = (char *)&type metadata for Any + 8;
          v24 = v50;
          v52 = v20;
          v46 = v4;
          v47 = v3;
          do
          {
            if (v51)
              v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v23);
            else
              v25 = *(id *)(v23 + 8 * v21 + 32);
            v26 = v25;
            defaultLogger()(objc_msgSend(v22, "deleteObject:", v25));
            v27 = v26;
            v28 = Logger.logObject.getter(v27);
            v29 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v28, v29))
            {
              v30 = swift_slowAlloc(12, -1);
              v31 = swift_slowAlloc(32, -1);
              v53 = v31;
              *(_DWORD *)v30 = v45;
              v32 = objc_msgSend(v27, "proofingSessionID");
              if (v32)
              {
                v33 = v32;
                v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
                v36 = v35;

              }
              else
              {
                v34 = 0;
                v36 = 0xE000000000000000;
              }
              *(_QWORD *)(v30 + 4) = sub_1000E3AC8(v34, v36, &v53);

              swift_bridgeObjectRelease(v36);
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted biome metadata for proofingSessionID: %s", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy(v31, 1, v44);
              swift_slowDealloc(v31, -1, -1);
              swift_slowDealloc(v30, -1, -1);

              v4 = v46;
              v3 = v47;
              v24 = v50;
              (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v47);
              v23 = v48;
              v22 = v49;
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v4 + 8))(v24, v3);
            }
            ++v21;
          }
          while (v52 != v21);
          swift_bridgeObjectRelease(v23);
          sub_1000BF588();
        }
        return;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v20)
        goto LABEL_6;
    }
    v18 = swift_bridgeObjectRelease(v48);
  }
  v39 = defaultLogger()(v18);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "No biome metadata exists in the database", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_100393270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD v43[3];
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v43 - v8;
  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithEntityName:", v11);

  v13 = *(void **)(a1 + 16);
  v14 = sub_100004828(&qword_1006332D0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v12, v14);
  if (v1)
  {

    return;
  }
  v16 = v15;
  v49 = v13;
  v50 = v9;
  v17 = (unint64_t)sub_1004589D8(v15);

  v18 = swift_bridgeObjectRelease(v16);
  if (v17)
  {
    v48 = v17;
    if (v17 >> 62)
    {
      v37 = v48;
      if (v48 >= 0)
        v38 = v17 & 0xFFFFFFFFFFFFFF8;
      else
        v38 = v48;
      swift_bridgeObjectRetain(v48);
      v20 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v37);
      if (v20)
      {
LABEL_6:
        v43[1] = a1;
        v43[2] = 0;
        if (v20 < 1)
        {
          __break(1u);
        }
        else
        {
          v21 = 0;
          v23 = v48;
          v22 = v49;
          v51 = v48 & 0xC000000000000001;
          *(_QWORD *)&v19 = 136315138;
          v45 = v19;
          v44 = (char *)&type metadata for Any + 8;
          v24 = v50;
          v52 = v20;
          v46 = v4;
          v47 = v3;
          do
          {
            if (v51)
              v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v23);
            else
              v25 = *(id *)(v23 + 8 * v21 + 32);
            v26 = v25;
            defaultLogger()(objc_msgSend(v22, "deleteObject:", v25));
            v27 = v26;
            v28 = Logger.logObject.getter(v27);
            v29 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v28, v29))
            {
              v30 = swift_slowAlloc(12, -1);
              v31 = swift_slowAlloc(32, -1);
              v53 = v31;
              *(_DWORD *)v30 = v45;
              v32 = objc_msgSend(v27, "proofingSessionID");
              if (v32)
              {
                v33 = v32;
                v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
                v36 = v35;

              }
              else
              {
                v34 = 0;
                v36 = 0xE000000000000000;
              }
              *(_QWORD *)(v30 + 4) = sub_1000E3AC8(v34, v36, &v53);

              swift_bridgeObjectRelease(v36);
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted proofing biome data for proofingSessionID: %s", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy(v31, 1, v44);
              swift_slowDealloc(v31, -1, -1);
              swift_slowDealloc(v30, -1, -1);

              v4 = v46;
              v3 = v47;
              v24 = v50;
              (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v47);
              v23 = v48;
              v22 = v49;
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v4 + 8))(v24, v3);
            }
            ++v21;
          }
          while (v52 != v21);
          swift_bridgeObjectRelease(v23);
          sub_1000D6288();
        }
        return;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v20)
        goto LABEL_6;
    }
    v18 = swift_bridgeObjectRelease(v48);
  }
  v39 = defaultLogger()(v18);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "No proofing biome data exists in the database", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_100393690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v45 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v45 - v14;
  v16 = sub_1000D828C();
  if (!v1)
  {
    if (v16)
    {
      v47 = v16;
      v17 = defaultLogger()(v16);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.debug.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        v46 = v3;
        v21 = v20;
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Proofing Biome data exists to be cleaned. Checking if it consists of a proofing decision.", v20, 2u);
        v22 = v21;
        v3 = v46;
        swift_slowDealloc(v22, -1, -1);
      }

      v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v13, v3);
      v24 = -[NSObject proofingDecision](v47, "proofingDecision");
      if (v24)
      {

      }
      else
      {
        v39 = defaultLogger()(0);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.debug.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = v3;
          v43 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Proofing decision doesn't exist for the proofing biome data. Will clear data.", v43, 2u);
          v44 = v43;
          v3 = v42;
          swift_slowDealloc(v44, -1, -1);
        }

        v23(v10, v3);
        objc_msgSend(*(id *)(a1 + 16), "deleteObject:", v47);
        v25 = sub_1000D6288();
      }
      v26 = defaultLogger()(v25);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.debug.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = v3;
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully cleared proofing biome data.", v30, 2u);
        v31 = v30;
        v3 = v29;
        swift_slowDealloc(v31, -1, -1);
        v32 = v47;
      }
      else
      {
        v32 = v27;
        v27 = v47;
      }

      v23(v7, v3);
    }
    else
    {
      v33 = defaultLogger()(0);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = v3;
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "No clearing of proofing biome data required on proofing cancellation as it doesn't exist.", v37, 2u);
        v38 = v37;
        v3 = v36;
        swift_slowDealloc(v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    }
  }
}

uint64_t sub_100393A28()
{
  uint64_t v0;

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for IdentityProofingCleanupProvider()
{
  return objc_opt_self(_TtC8coreidvd31IdentityProofingCleanupProvider);
}

uint64_t sub_100393A7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *a2;
  v9 = (_QWORD *)swift_task_alloc(dword_10063E54C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100007EE8;
  return sub_1003914D4(a1, v8, a3, a4);
}

uint64_t sub_100393AEC(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v4;
  _QWORD *v5;

  v4 = *a2;
  v5 = (_QWORD *)swift_task_alloc(dword_10063E534);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_100391714(a1, v4);
}

uint64_t sub_100393B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v21 - v10;
  v12 = defaultLogger()(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting upload assets meta data cleanup...", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v16 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v16, 24, 7);
  sub_1000D6044();
  v18 = v17;
  v19 = (_QWORD *)swift_allocObject(&unk_100615368, 48, 7);
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  swift_retain(v18);
  swift_bridgeObjectRetain(a2);
  sub_1000D6570((uint64_t)sub_100397348, (uint64_t)v19);
  swift_release(v18);
  return swift_release(v19);
}

uint64_t sub_100393E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  _QWORD *v47;

  v40 = a2;
  v3 = sub_100004828(&qword_100630A48);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v33 - v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v41 = (char *)&v33 - v14;
  result = __chkstk_darwin(v13);
  v45 = (char *)&v33 - v16;
  v47 = _swiftEmptyArrayStorage;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    v17 = 0;
    v34 = v8;
    v35 = a1;
    while (v17 < *(_QWORD *)(a1 + 16))
    {
      v19 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v20 = *(_QWORD *)(v10 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v43 = v20;
      v42(v8, a1 + v19 + v20 * v17, v9);
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v8, 0, 1, v9);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      if (v21(v8, 1, v9) == 1)
        goto LABEL_22;
      v39 = v17;
      v46 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v46(v45, v8, v9);
      v22 = *(_QWORD *)(v40 + 16);
      v38 = v19;
      if (v22)
      {
        v23 = v40 + v19;
        v24 = swift_bridgeObjectRetain(v40);
        while (1)
        {
          ((void (*)(char *, uint64_t, uint64_t, __n128))v42)(v6, v23, v9, v24);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v6, 0, 1, v9);
          if (v21(v6, 1, v9) == 1)
            break;
          v25 = v41;
          v46(v41, v6, v9);
          v26 = sub_100004790((unint64_t *)&unk_10063E580, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v45, v9, v26);
          v28 = v10;
          v29 = *(void (**)(char *, uint64_t))(v10 + 8);
          v29(v25, v9);
          if ((v27 & 1) != 0)
          {
            swift_bridgeObjectRelease(v40);
            result = ((uint64_t (*)(char *, uint64_t))v29)(v45, v9);
            v10 = v28;
            v18 = v39;
            goto LABEL_4;
          }
          v23 += v43;
          --v22;
          v10 = v28;
          if (!v22)
            goto LABEL_14;
        }
      }
      else
      {
        v24 = swift_bridgeObjectRetain(v40);
LABEL_14:
        v44(v6, 1, 1, v9, v24);
      }
      swift_bridgeObjectRelease(v40);
      v46(v37, v45, v9);
      v30 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      {
        sub_1000E41D4(0, v30[2] + 1, 1);
        v30 = v47;
      }
      v18 = v39;
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
      {
        sub_1000E41D4(v31 > 1, v32 + 1, 1);
        v30 = v47;
      }
      v30[2] = v32 + 1;
      result = ((uint64_t (*)(char *, char *, uint64_t))v46)((char *)v30 + v38 + v32 * v43, v37, v9);
      v47 = v30;
LABEL_4:
      v17 = v18 + 1;
      a1 = v35;
      v8 = v34;
      if (v17 == v36)
        goto LABEL_21;
    }
    __break(1u);
  }
  else
  {
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
LABEL_21:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v44)(v8, 1, 1, v9);
LABEL_22:
    swift_bridgeObjectRelease(a1);
    sub_1000DB76C((uint64_t)v8);
    return (uint64_t)v47;
  }
  return result;
}

uint64_t sub_100394258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41[4];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v35 - v4;
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v35 - v7;
  v9 = defaultLogger()(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "fetchAssetFilesFromDatabase called", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v8, v0);
  v14 = swift_allocObject(&unk_100615318, 24, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyArrayStorage;
  v15 = v14 + 16;
  v16 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v16, 24, 7);
  sub_1000D6044();
  v37 = v13;
  v38 = v5;
  v18 = v17;
  v19 = swift_allocObject(&unk_100615340, 32, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v14;
  swift_retain(v18);
  swift_retain(v14);
  sub_1000D6570((uint64_t)sub_100397304, v19);
  swift_release(v18);
  v34 = swift_release(v19);
  defaultLogger()(v34);
  v20 = swift_retain_n(v14, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v41[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v35 = v23 + 4;
    swift_beginAccess(v15, v40, 0, 0);
    v25 = *(_QWORD *)(v14 + 16);
    v26 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v25);
    v28 = Array.description.getter(v27, v26);
    v36 = v0;
    v30 = v29;
    v31 = v25;
    v15 = v14 + 16;
    swift_bridgeObjectRelease(v31);
    v39 = sub_1000E3AC8(v28, v30, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v35);
    swift_release_n(v14, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Asset URLs from database are %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v37(v38, v36);
  }
  else
  {

    swift_release_n(v14, 2);
    v13(v5, v0);
  }
  swift_beginAccess(v15, v41, 0, 0);
  v32 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain(v32);
  swift_release(v14);
  return v32;
}

uint64_t sub_100394798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  uint8_t *v36;
  uint8_t *v37;
  void (*v38)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  NSURL *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, unint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  void (*v91)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  __n128 v104;
  char *v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  os_unfair_lock_s *v116;
  uint64_t v117;
  os_unfair_lock_s *v118;
  os_unfair_lock_s *v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  id v122;
  NSURL *v123;
  void *v124;
  void *v125;
  unsigned int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  NSObject *v130;
  char *v131;
  os_log_type_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  char *v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint8_t *v162;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  __n128 v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  void (*v173)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v174;
  char *v175;
  char *v176;
  id v177;
  char *v178;
  char *v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  uint64_t v182;
  char *v183;
  void (*v184)(char *, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188[8];
  uint64_t v189;
  uint64_t v190;
  char v191[16];
  __int128 v192;
  uint64_t v193;

  v171 = type metadata accessor for DaemonAnalytics.GarbageCollectionEventType(0);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v164 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v1);
  v3 = (char *)&v164 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v186 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v176 = (char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v164 - v8;
  v10 = __chkstk_darwin(v7);
  v183 = (char *)&v164 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v164 - v13;
  __chkstk_darwin(v12);
  v172 = (char *)&v164 - v15;
  v182 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v182 - 8);
  v17 = __chkstk_darwin(v182);
  v166 = (char *)&v164 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v178 = (char *)&v164 - v20;
  v21 = __chkstk_darwin(v19);
  v165 = (char *)&v164 - v22;
  v23 = __chkstk_darwin(v21);
  v180 = (char *)&v164 - v24;
  v25 = __chkstk_darwin(v23);
  v175 = (char *)&v164 - v26;
  v27 = __chkstk_darwin(v25);
  v179 = (char *)&v164 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v164 - v30;
  v32 = defaultLogger()(v29);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = v9;
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "deleteStaleFiles called", v36, 2u);
    v37 = v36;
    v9 = v35;
    swift_slowDealloc(v37, -1, -1);
  }

  v181 = *(void (**)(char *, uint64_t))(v16 + 8);
  v181(v31, v182);
  v38 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100394258();
  static URL.libraryDirectory.getter(v38);
  v39 = v172;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100551170, 1);
  v40 = *(void (**)(char *, uint64_t))(v186 + 8);
  v40(v14, v4);
  v177 = (id)objc_opt_self(NSFileManager);
  v41 = objc_msgSend(v177, "defaultManager");
  URL._bridgeToObjectiveC()(v42);
  v44 = v43;
  *(_QWORD *)&v192 = 0;
  v45 = objc_msgSend(v41, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v43, 0, 4, &v192);

  v46 = (void *)v192;
  if (!v45)
  {
    v62 = (id)v192;
    swift_bridgeObjectRelease(v38);
    v63 = _convertNSErrorToError(_:)(v46);

    swift_willThrow(v64);
    v65 = ((uint64_t (*)(char *, uint64_t))v40)(v39, v4);
    v66 = 0;
    v67 = v166;
LABEL_41:
    defaultLogger()(v65);
    swift_errorRetain(v63);
    v153 = swift_errorRetain(v63);
    v154 = Logger.logObject.getter(v153);
    v155 = static os_log_type_t.debug.getter(v154);
    if (os_log_type_enabled(v154, v155))
    {
      v156 = v66;
      v157 = (uint8_t *)swift_slowAlloc(12, -1);
      v158 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v192 = v158;
      *(_DWORD *)v157 = 136315138;
      swift_getErrorValue(v63, v191, v188);
      v159 = Error.localizedDescription.getter(v189, v190);
      v161 = v160;
      v187 = sub_1000E3AC8(v159, v160, (uint64_t *)&v192);
      v150 = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v157 + 4);
      swift_bridgeObjectRelease(v161);
      swift_errorRelease(v63);
      swift_errorRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v154, v155, "Error occurred in removing stale file: %s", v157, 0xCu);
      swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v158, -1, -1);
      v162 = v157;
      v66 = v156;
      swift_slowDealloc(v162, -1, -1);

      swift_errorRelease(v63);
      v181(v166, v182);
      v142 = v170;
      v143 = v169;
      goto LABEL_48;
    }
    swift_errorRelease(v63);
    swift_errorRelease(v63);
    swift_errorRelease(v63);

    v181(v67, v182);
    v142 = v170;
    v143 = v169;
LABEL_47:
    v150 = v171;
    goto LABEL_48;
  }
  v173 = v38;
  v184 = v40;
  v174 = v9;
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v4);
  v48 = v46;

  v49 = v179;
  defaultLogger()(v50);
  v51 = swift_bridgeObjectRetain_n(v47, 2);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.debug.getter(v52);
  v54 = os_log_type_enabled(v52, v53);
  v185 = v4;
  if (v54)
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v168.n128_u64[0] = swift_slowAlloc(32, -1);
    *(_QWORD *)&v192 = v168.n128_u64[0];
    *(_DWORD *)v55 = 136315138;
    v167 = (char *)(v55 + 4);
    swift_bridgeObjectRetain(v47);
    v57 = Array.description.getter(v56, v4);
    v59 = v58;
    swift_bridgeObjectRelease(v47);
    v187 = sub_1000E3AC8(v57, v59, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v167);
    swift_bridgeObjectRelease_n(v47, 2);
    v60 = v59;
    v4 = v185;
    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Asset URLs from coreidvd/uploads are: %s", v55, 0xCu);
    v61 = v168.n128_u64[0];
    swift_arrayDestroy(v168.n128_u64[0], 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v47, 2);
  }
  v181(v49, v182);
  v68 = *(_QWORD *)(v47 + 16);
  v179 = v3;
  if (v68)
  {
    *(_QWORD *)&v192 = _swiftEmptyArrayStorage;
    sub_1000E41D4(0, v68, 0);
    v69 = (*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80);
    v168.n128_u64[0] = v47;
    v70 = v47 + v69;
    v71 = *(_QWORD *)(v186 + 72);
    v72 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v186 + 16);
    do
    {
      v73 = v72(v14, v70, v4);
      URL.resolvingSymlinksInPath()(v73);
      v184(v14, v4);
      v74 = (char *)v192;
      if ((swift_isUniquelyReferenced_nonNull_native(v192) & 1) == 0)
      {
        sub_1000E41D4(0, *((_QWORD *)v74 + 2) + 1, 1);
        v74 = (char *)v192;
      }
      v76 = *((_QWORD *)v74 + 2);
      v75 = *((_QWORD *)v74 + 3);
      v77 = v186;
      v78 = v183;
      if (v76 >= v75 >> 1)
      {
        sub_1000E41D4(v75 > 1, v76 + 1, 1);
        v78 = v183;
        v77 = v186;
        v74 = (char *)v192;
      }
      *((_QWORD *)v74 + 2) = v76 + 1;
      v4 = v185;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(&v74[v69 + v76 * v71], v78, v185);
      *(_QWORD *)&v192 = v74;
      v70 += v71;
      --v68;
    }
    while (v68);
    v79 = swift_bridgeObjectRelease(v168.n128_u64[0]);
    v3 = v179;
  }
  else
  {
    v79 = swift_bridgeObjectRelease(v47);
    v74 = (char *)_swiftEmptyArrayStorage;
  }
  v80 = v175;
  defaultLogger()(v79);
  v81 = swift_bridgeObjectRetain_n(v74, 2);
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.debug.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v192 = v85;
    *(_DWORD *)v84 = 136315138;
    v3 = v179;
    v183 = (char *)(v84 + 4);
    swift_bridgeObjectRetain(v74);
    v87 = Array.description.getter(v86, v4);
    v89 = v88;
    swift_bridgeObjectRelease(v74);
    v187 = sub_1000E3AC8(v87, v89, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v183);
    swift_bridgeObjectRelease_n(v74, 2);
    swift_bridgeObjectRelease(v89);
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Asset SymLinks resolved URLs from coreidvd/uploads are: %s", v84, 0xCu);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v74, 2);
  }
  v181(v80, v182);
  v90 = v180;
  v91 = v173;
  v92 = sub_100393E88((uint64_t)v74, (uint64_t)v173);
  v93 = swift_bridgeObjectRelease(v91);
  defaultLogger()(v93);
  v94 = swift_bridgeObjectRetain_n(v92, 2);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.debug.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v192 = v98;
    *(_DWORD *)v97 = 136315138;
    v183 = (char *)(v97 + 4);
    swift_bridgeObjectRetain(v92);
    v100 = Array.description.getter(v99, v185);
    v102 = v101;
    swift_bridgeObjectRelease(v92);
    v187 = sub_1000E3AC8(v100, v102, (uint64_t *)&v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v183);
    swift_bridgeObjectRelease_n(v92, 2);
    swift_bridgeObjectRelease(v102);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Unknown asset URLs are: %s", v97, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);

    v103 = v180;
  }
  else
  {

    swift_bridgeObjectRelease_n(v92, 2);
    v103 = v90;
  }
  v181(v103, v182);
  v105 = v172;
  v106 = v174;
  v107 = v184;
  v175 = *(char **)(v92 + 16);
  if (!v175)
  {
    v111 = v185;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v186 + 56))(v3, 1, 1, v185);
LABEL_45:
    v66 = v175;
    v142 = v170;
    v143 = v169;
LABEL_46:
    swift_bridgeObjectRelease(v92);
    v107(v105, v111);
    goto LABEL_47;
  }
  v66 = 0;
  v108 = v186;
  v109 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
  v164 = v92;
  v110 = v92 + v109;
  v174 = *(char **)(v186 + 72);
  v183 = *(char **)(v186 + 16);
  v104.n128_u64[0] = 136315138;
  v168 = v104;
  v167 = (char *)&type metadata for Any + 8;
  v111 = v185;
  v112 = v178;
  ((void (*)(char *, unint64_t, uint64_t))v183)(v3, v110, v185);
  while (1)
  {
    v173 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v108 + 56);
    v173(v3, 0, 1, v111);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v3, 1, v111) == 1)
    {
      v142 = v170;
      v143 = v169;
      v105 = v172;
      v92 = v164;
      goto LABEL_46;
    }
    v180 = v66;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v106, v3, v111);
    if (qword_10062F490 != -1)
      swift_once(&qword_10062F490, sub_100139C84);
    v113 = qword_1006702A0;
    v114 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
    v115 = (uint64_t)&v114[4];
    v116 = v114 + 52;
    os_unfair_lock_lock(v114 + 52);
    sub_100139D14(v115, v113, &v192);
    os_unfair_lock_unlock(v116);
    v117 = v193;
    swift_retain(v193);
    sub_10001D410(&v192);
    v118 = *(os_unfair_lock_s **)(v117 + 16);
    v119 = v118 + 4;
    v120 = v118 + 6;
    os_unfair_lock_lock(v118 + 6);
    sub_100003C14(v119, &v187);
    os_unfair_lock_unlock(v120);
    v121 = v187;
    swift_release(v117);
    if (v121 >= 1)
      break;
    v122 = objc_msgSend(v177, "defaultManager");
    URL._bridgeToObjectiveC()(v123);
    v125 = v124;
    *(_QWORD *)&v192 = 0;
    v126 = objc_msgSend(v122, "removeItemAtURL:error:", v124, &v192);

    v127 = v192;
    if (!v126)
    {
      v151 = (id)v192;
      swift_bridgeObjectRelease(v164);
      v63 = _convertNSErrorToError(_:)(v127);

      swift_willThrow(v152);
      v107(v106, v111);
      v65 = ((uint64_t (*)(char *, uint64_t))v107)(v172, v111);
      v67 = v166;
      v66 = v180;
      goto LABEL_41;
    }
    defaultLogger()((id)v192);
    v128 = v176;
    v129 = ((uint64_t (*)(char *, char *, uint64_t))v183)(v176, v106, v111);
    v130 = Logger.logObject.getter(v129);
    v131 = v106;
    v132 = static os_log_type_t.debug.getter(v130);
    if (os_log_type_enabled(v130, v132))
    {
      v133 = v128;
      v134 = swift_slowAlloc(12, -1);
      v135 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v192 = v135;
      v136 = v168;
      *(_DWORD *)v134 = v168.n128_u32[0];
      v137 = URL.absoluteString.getter(v136);
      v139 = v138;
      *(_QWORD *)(v134 + 4) = sub_1000E3AC8(v137, v138, (uint64_t *)&v192);
      swift_bridgeObjectRelease(v139);
      v140 = v133;
      v107 = v184;
      v184(v140, v185);
      _os_log_impl((void *)&_mh_execute_header, v130, v132, "Successfully removed stale asset file with url :%s", (uint8_t *)v134, 0xCu);
      swift_arrayDestroy(v135, 1, v167);
      v141 = v135;
      v111 = v185;
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v134, -1, -1);

    }
    else
    {

      v107(v128, v111);
    }
    v181(v112, v182);
    v107(v131, v111);
    v106 = v131;
    v108 = v186;
    v66 = v180 + 1;
    v110 += (unint64_t)v174;
    v3 = v179;
    if (v175 == v180 + 1)
    {
      v105 = v172;
      v92 = v164;
      v173(v179, 1, 1, v111);
      goto LABEL_45;
    }
    ((void (*)(char *, unint64_t, uint64_t))v183)(v179, v110, v111);
  }
  v144 = swift_bridgeObjectRelease(v164);
  v145 = v165;
  v146 = defaultLogger()(v144);
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.debug.getter(v147);
  if (os_log_type_enabled(v147, v148))
  {
    v149 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v149 = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Breaking out of gc as number of assets persisted on disk counter is non-zero", v149, 2u);
    swift_slowDealloc(v149, -1, -1);
  }

  v181(v145, v182);
  v107(v106, v111);
  v107(v172, v111);
  v142 = v170;
  v143 = v169;
  v150 = v171;
  v66 = v180;
LABEL_48:
  type metadata accessor for DaemonAnalytics(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v143, enum case for DaemonAnalytics.GarbageCollectionEventType.staleAssetFile(_:), v150);
  static DaemonAnalytics.sendGarbageCollectedEvent(eventType:count:)(v143, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v143, v150);
}

uint64_t sub_100395A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v26 = a6;
  v24 = a3;
  v25 = a5;
  v23 = a1;
  v30 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v30 - 8);
  v8 = __chkstk_darwin(v30);
  v29 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v10);
  v11 = type metadata accessor for DIPError(0);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v12 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v12, 24, 7);
  sub_1000D6044();
  v14 = v13;
  v15 = swift_allocObject(&unk_100615170, 65, 7);
  v16 = a4;
  v17 = a2;
  v18 = v15;
  *(_QWORD *)(v15 + 16) = v23;
  *(_QWORD *)(v15 + 24) = v17;
  v19 = v24;
  *(_QWORD *)(v15 + 32) = v14;
  *(_QWORD *)(v15 + 40) = v19;
  v20 = v25;
  *(_QWORD *)(v15 + 48) = v16;
  *(_QWORD *)(v15 + 56) = v20;
  *(_BYTE *)(v15 + 64) = v26 & 1;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_retain(v14);
  sub_1000D6570((uint64_t)sub_100396F20, v18);
  swift_release(v14);
  return swift_release(v18);
}

uint64_t sub_100395E74(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v10 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v11);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v30 = a5;
    v17 = swift_slowAlloc(12, -1);
    v29 = v5;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v28 = a3;
    v20 = v19;
    v35 = v19;
    v27 = v10;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain(a2);
    v33 = sub_1000E3AC8(v32, a2, &v35);
    a5 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Deleting credential %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    a3 = v28;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
  }
  v22 = (_QWORD *)swift_allocObject(a4, 40, 7);
  v23 = v32;
  v22[2] = a3;
  v22[3] = v23;
  v22[4] = a2;
  swift_bridgeObjectRetain(a2);
  v24 = a3;
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD00000000000002ELL, 0x800000010055C1B0, 0xD000000000000037, 0x800000010055C1E0, 279, a5, v22, (char *)&type metadata for () + 8);
  return swift_release(v22);
}

uint64_t sub_100396110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  unint64_t v41;
  char v42[8];

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v7;
    v17 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "clearBiomeMetadata called", v16, 2u);
    v18 = v17;
    v1 = v0;
    v7 = v35;
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v19 = type metadata accessor for IdentityBiomeDataContext();
  swift_allocObject(v19, 24, 7);
  sub_1000BF344();
  v21 = v1;
  if (v1)
  {
    v40 = 0;
    v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v23._countAndFlagsBits = 0xD000000000000036;
    v23._object = (void *)0x8000000100546540;
    String.append(_:)(v23);
    swift_getErrorValue(v1, v42, v39);
    v24._countAndFlagsBits = Error.localizedDescription.getter(v39[1], v39[2]);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26 = v40;
    v27 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v4, enum case for DIPError.Code.failedToDeleteBiomeMetadata(_:), v37);
    v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v26, v27, 0, v4, 0, v28, 0xD00000000000007ELL, 0x800000010055C080, 0xD000000000000014, 0x800000010055C100, 457);
    v29 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v5, v29, 0, 0);
    v30 = v38;
    v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 16))(v31, v7, v5);
    swift_willThrow(v32);
    swift_errorRelease(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  }
  else
  {
    v22 = v20;
    swift_retain(v20);
    sub_1000BF870((uint64_t)sub_100396474, v22);
    return swift_release_n(v22, 2);
  }
}

void sub_100396474()
{
  uint64_t v0;

  sub_100392E48(v0);
}

uint64_t sub_10039648C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - v4;
  v6 = defaultLogger()(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking if proofing biome data exists to cleaned up after proofing cancellation.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  v10 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v10, 24, 7);
  sub_1000D6044();
  v12 = v11;
  swift_retain(v11);
  sub_1000D6570((uint64_t)sub_1003972E8, v12);
  return swift_release_n(v12, 2);
}

uint64_t sub_100396774()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for DIPError.Code(0);
  v0[6] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[7] = v2;
  v0[8] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPError(0);
  v0[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[10] = v4;
  v0[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v0[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[13] = v6;
  v0[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v0[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v0[16] = v8;
  v0[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100396848, 0, 0);
}

uint64_t sub_100396848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "clearProofingBiomeData called", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[16];
  v6 = v1[17];
  v8 = v1[15];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v9, 24, 7);
  sub_1000D6044();
  v1[18] = v10;
  v11 = v10;
  v13 = v1[13];
  v12 = v1[14];
  v14 = v1[12];
  v15 = swift_allocObject(&unk_100615148, 32, 7);
  v1[19] = v15;
  *(_QWORD *)(v15 + 16) = sub_100396EDC;
  *(_QWORD *)(v15 + 24) = v11;
  v16 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104);
  swift_retain(v11);
  v17(v12, v16, v14);
  v18 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v11);
  v19 = (_QWORD *)swift_task_alloc(v18);
  v1[20] = v19;
  *v19 = v1;
  v19[1] = sub_100396BC4;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v19, v1[14], sub_1000D51E8, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_100396BC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  v4 = v2[19];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
    swift_release(v4);
    v5 = sub_100396CD8;
  }
  else
  {
    v6 = v2[18];
    (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_100396C70;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100396C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100396CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release_n(*(_QWORD *)(v0 + 144), 2);
  v1 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  _StringGuts.grow(_:)(61);
  v7._countAndFlagsBits = 0xD00000000000003BLL;
  v7._object = (void *)0x80000001005464E0;
  String.append(_:)(v7);
  swift_getErrorValue(v1, v0 + 40, v0 + 16);
  v8._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, enum case for DIPError.Code.failedToDeleteProofingBiomeData(_:), v5);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v3, 0, v10, 0xD00000000000007ELL, 0x800000010055C080, 0xD000000000000018, 0x800000010055C120, 483);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v11, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v12, v2, v4);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v4);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100396EDC()
{
  uint64_t v0;

  sub_100393270(v0);
}

uint64_t sub_100396EF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100396F18()
{
  return sub_100397054(65);
}

void sub_100396F20()
{
  uint64_t v0;

  sub_10038F75C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
}

uint64_t sub_100396F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10063E524);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001D0A0;
  return ((uint64_t (*)(uint64_t, void **))((char *)&dword_10063E520 + dword_10063E520))(a1, (void **)(v1 + 16));
}

uint64_t sub_100396FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1 + 2;
  v6 = v1[3];
  v5 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10063E53C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((char *)&dword_10063E538 + dword_10063E538))(a1, v4, v6, v5);
}

uint64_t sub_10039704C()
{
  return sub_100397054(56);
}

uint64_t sub_100397054(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[3]);
  swift_release(v1[4]);
  swift_bridgeObjectRelease(v1[6]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100397094()
{
  uint64_t v0;

  return sub_100390EE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1003970A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003970B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1003970BC()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = v0[7];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[9]);
  }
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100397118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = v0 + 24;
  v8 = *(_OWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = swift_task_alloc(dword_10063E55C);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_10001D0A0;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 56) = v4;
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v3;
  return swift_task_switch(sub_100391358, 0, 0);
}

_QWORD *sub_1003971A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  sub_10036963C(v3, v4, v5);
  return a1;
}

uint64_t sub_100397200()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100397234()
{
  uint64_t v0;

  return sub_10038FFC0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100397258()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10039727C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1003972B0()
{
  uint64_t v0;

  sub_10038F190(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1003972D0()
{
  uint64_t v0;

  sub_10038EB6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1003972E8()
{
  uint64_t v0;

  sub_100393690(v0);
}

void sub_100397304()
{
  uint64_t v0;

  sub_1003919C4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_10039731C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100397348()
{
  uint64_t v0;

  sub_100391FEC(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100397368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  NSString v33;
  id v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  id v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  id v89;
  char *v90;
  char *v91;
  char *v92;

  v71 = a2;
  v80 = a1;
  v87 = a3;
  v86 = type metadata accessor for ISO18013DigestAlgorithm(0);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v85 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CredentialBuilderTimePolicy(0);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  __chkstk_darwin(v4);
  v83 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for CredentialBuilderSignatureAlgorithm(0);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v79 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_10063E590);
  __chkstk_darwin(v7);
  v77 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for COSEKey(0);
  v73 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  __chkstk_darwin(v9);
  v75 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for CredentialBuilderPayloadFormat(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v91 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DeveloperTestJapanNationalIDCardCredentialBuilder(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ISO18013KnownDocTypes(0);
  v13 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_100633990);
  v17 = __chkstk_darwin(v16);
  v72 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v62 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v62 - v22;
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v90 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v62 - v29;
  __chkstk_darwin(v28);
  v92 = (char *)&v62 - v31;
  v32 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  v33 = String._bridgeToObjectiveC()();
  v89 = v32;
  v34 = objc_msgSend(v32, "dateFromString:", v33);

  v88 = v30;
  if (v34)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v35 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v35(v23, v30, v24);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v36(v23, 0, 1, v24);
    v37 = v25;
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24);
    if ((_DWORD)v38 != 1)
    {
      v35(v92, v23, v24);
      goto LABEL_6;
    }
  }
  else
  {
    v37 = v25;
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v38 = v36(v23, 1, 1, v24);
  }
  Date.init()(v38);
  sub_10001E5E4((uint64_t)v23);
LABEL_6:
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v89, "dateFromString:", v39);

  if (v40)
  {
    v41 = v88;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v42 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v42(v21, v41, v24);
    v36(v21, 0, 1, v24);
    v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v21, 1, v24);
    if ((_DWORD)v43 != 1)
    {
      v42(v90, v21, v24);
      goto LABEL_11;
    }
  }
  else
  {
    v43 = v36(v21, 1, 1, v24);
  }
  Date.init()(v43);
  sub_10001E5E4((uint64_t)v21);
LABEL_11:
  v44 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v71, v68);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v44);
  if ((_DWORD)v45 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    v67 = static DeveloperTestMDLCredentialBuilder.payloadElements.getter();
  }
  else if ((_DWORD)v45 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
  {
    v46 = v63;
    v47 = DeveloperTestJapanNationalIDCardCredentialBuilder.init()(v45);
    v67 = DeveloperTestJapanNationalIDCardCredentialBuilder.payloadElements.getter(v47);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v65);
  }
  else
  {
    v67 = sub_10011E1D0((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v44);
  }
  v48 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v69 + 104))(v91, enum case for CredentialBuilderPayloadFormat.ISO18013_5_1(_:), v70);
  v71 = ISO18013KnownDocTypes.rawValue.getter(v48);
  v70 = v49;
  v66 = v37;
  v50 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v51 = v72;
  v50(v72, v92, v24);
  v36(v51, 0, 1, v24);
  v52 = v88;
  v53 = v90;
  v50(v88, v90, v24);
  v54 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v75, v80, v74);
  v55 = type metadata accessor for CredentialBuilderPayloadDetails.KeyAuthorizations(0);
  v56 = v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v77, 1, 1, v55);
  v57 = v79;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v79, enum case for CredentialBuilderSignatureAlgorithm.ES256(_:), v78);
  v58 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v83, enum case for CredentialBuilderTimePolicy.notSpecified(_:), v82);
  v59 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v85, enum case for ISO18013DigestAlgorithm.sha256(_:), v86);
  CredentialBuilderPayloadDetails.init(format:docType:elements:validFrom:validUntil:timePolicy:deviceKey:deviceKeyAuthorizations:signingAlgorithm:digestAlgorithm:)(v91, v71, v70, v67, v51, v52, v58, v54, v56, v57, v59);

  v60 = *(void (**)(char *, uint64_t))(v66 + 8);
  v60(v53, v24);
  return ((uint64_t (*)(char *, uint64_t))v60)(v92, v24);
}

uint64_t sub_100397AF4@<X0>(_QWORD *a1@<X0>, void (*a2)(char *, uint64_t, uint64_t)@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint8_t *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t, uint64_t);
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::OpaquePointer v139;
  void (*v140)(char *, uint64_t, uint64_t);
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151[8];
  uint64_t v152;

  v131 = a6;
  v138 = a5;
  v139._rawValue = a4;
  v129 = a3;
  v140 = a2;
  v146 = a1;
  v120 = a7;
  v134 = type metadata accessor for EncryptedMessageEntity(0);
  v137 = *(_QWORD *)(v134 - 8);
  v7 = __chkstk_darwin(v134);
  v9 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v128 = (char *)&v114 - v11;
  __chkstk_darwin(v10);
  v127 = (char *)&v114 - v12;
  v142 = sub_100004828(&qword_100630278);
  v13 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v141 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for ProofingData(0);
  v15 = __chkstk_darwin(v126);
  v125 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v144 = (uint64_t)&v114 - v17;
  v18 = type metadata accessor for AEADKey(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v119 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v133 = (char *)&v114 - v22;
  v23 = sub_100004828(&qword_100638568);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v118 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v132 = (char *)&v114 - v27;
  v28 = type metadata accessor for Logger(0);
  v143 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v123 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v116 = (char *)&v114 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v114 - v33;
  v35 = sub_100004828(&qword_100638570);
  v36 = __chkstk_darwin(v35);
  v117 = (uint64_t)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v114 - v38;
  v40 = sub_100004828(&qword_100638578);
  __chkstk_darwin(v40);
  v135 = v24;
  v136 = v23;
  v42 = *(void (**)(void))(v24 + 56);
  v148 = (uint64_t)&v114 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = (uint64_t)v140;
  v42();
  v121 = v19;
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v147 = v39;
  v122 = v18;
  v45 = v44(v39, 1, 1, v18);
  v124 = v13;
  v130 = v9;
  v145 = v28;
  if (v43)
  {
    v115 = v44;
    v46 = defaultLogger()(v45);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "encrypt idv data with aead", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v143 + 8))(v34, v145);
    v50 = v146[3];
    v51 = v146[4];
    sub_10000806C(v146, v50);
    v152 = v43;
    v52 = sub_100004828(&qword_100638580);
    v53 = sub_1001FB90C(&qword_100638588, (void (*)(void))sub_1001FB8C8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v54 = sub_1001FB90C(&qword_100638598, (void (*)(void))sub_1001FB974, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v56 = v132;
    v55 = v133;
    v57 = v149;
    dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)(v132, v133, &v152, v52, v53, v54, v50, v51);
    v58 = (uint64_t)v147;
    sub_100008030((uint64_t)v147, &qword_100638570);
    v59 = v148;
    v149 = v57;
    if (v57)
      goto LABEL_21;
    sub_100008030(v148, &qword_100638578);
    v60 = v56;
    v61 = v136;
    (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v59, v60, v136);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v42)(v59, 0, 1, v61);
    v62 = v122;
    (*(void (**)(uint64_t, char *, uint64_t))(v121 + 32))(v58, v55, v122);
    v115((char *)v58, 0, 1, v62);
    v63 = v141;
    v64 = v134;
  }
  else
  {
    v63 = v141;
    v64 = v134;
    v59 = v148;
  }
  v65 = v144;
  sub_100038B24(v59, v144, &qword_100638578);
  v66 = v126;
  v67 = v129;
  *(_QWORD *)(v65 + *(int *)(v126 + 20)) = v129;
  v68 = v137;
  v69 = v127;
  v140 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
  v140(v127, v138, v64);
  v70 = v125;
  sub_1003985A8(v65, v125);
  v71 = *(void (**)(char *, _QWORD, uint64_t))(v68 + 104);
  v72 = v128;
  v71(v128, enum case for EncryptedMessageEntity.device(_:), v64);
  v73 = sub_1003985EC(&qword_100630300, (uint64_t)&unk_10052BA74);
  v74 = sub_1003985EC((unint64_t *)&unk_100630308, (uint64_t)&unk_10052BA4C);
  swift_bridgeObjectRetain(v67);
  HPKEEncryptedMessageWithKeyWrap.init(sender:recipient:messages:)(v72, v69, v70, v66, v73, v74);
  v76 = v135;
  v75 = v136;
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v59, 1, v136);
  v78 = v130;
  v79 = v145;
  if (!(_DWORD)v77)
  {
    v80 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v118, v148, v75);
    v81 = SealedMessage.keyID.getter(v75);
    v83 = v82;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v80, v75);
    v84 = v117;
    sub_100038B24((uint64_t)v147, v117, &qword_100638570);
    v85 = v121;
    v86 = v122;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v84, 1, v122) == 1)
    {
      swift_bridgeObjectRelease(v83);
      v77 = sub_100008030(v84, &qword_100638570);
      v63 = v141;
    }
    else
    {
      v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 32))(v119, v84, v86);
      v88 = v116;
      v89 = defaultLogger()(v87);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.debug.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        v92 = v79;
        v93 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "add idv data encryption key", v93, 2u);
        v94 = v93;
        v79 = v92;
        v86 = v122;
        swift_slowDealloc(v94, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v143 + 8))(v88, v79);
      v95 = v119;
      v96 = v141;
      HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKey(keyID:key:)(v81, v83, v119, v142);
      v97 = v83;
      v63 = v96;
      swift_bridgeObjectRelease(v97);
      v77 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v95, v86);
    }
    v64 = v134;
  }
  v98 = v146;
  if (v139._rawValue)
  {
    v99 = v123;
    defaultLogger()(v77);
    v100 = ((uint64_t (*)(char *, uint64_t, uint64_t))v140)(v78, v138, v64);
    v101 = Logger.logObject.getter(v100);
    v102 = v64;
    v103 = static os_log_type_t.debug.getter(v101);
    if (os_log_type_enabled(v101, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = swift_slowAlloc(32, -1);
      v152 = v105;
      *(_DWORD *)v104 = 136315138;
      v106 = EncryptedMessageEntity.rawValue.getter();
      v108 = v107;
      v150 = sub_1000E3AC8(v106, v107, &v152);
      v98 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v104 + 4);
      swift_bridgeObjectRelease(v108);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v78, v102);
      _os_log_impl((void *)&_mh_execute_header, v101, v103, "add uploaded data encryption keys to encryptedIDVData for %s", v104, 0xCu);
      swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1, -1);
      v109 = v104;
      v63 = v141;
      swift_slowDealloc(v109, -1, -1);

      (*(void (**)(char *, uint64_t))(v143 + 8))(v123, v145);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v137 + 8))(v78, v102);

      (*(void (**)(char *, uint64_t))(v143 + 8))(v99, v79);
    }
    HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)(v139);
  }
  v110 = v142;
  v111 = v149;
  HPKEEncryptedMessageWithKeyWrap.sealKeys(to:encryptor:)(v131, v98, v142);
  v149 = v111;
  if (!v111)
  {
    sub_10039862C(v144);
    sub_100008030((uint64_t)v147, &qword_100638570);
    (*(void (**)(uint64_t, char *, uint64_t))(v124 + 32))(v120, v63, v110);
    v112 = v148;
    return sub_100008030(v112, &qword_100638578);
  }
  (*(void (**)(char *, uint64_t))(v124 + 8))(v63, v110);
  sub_10039862C(v144);
  sub_100008030((uint64_t)v147, &qword_100638570);
  v59 = v148;
LABEL_21:
  v112 = v59;
  return sub_100008030(v112, &qword_100638578);
}

uint64_t type metadata accessor for TopekaHPKEEncryptor()
{
  return objc_opt_self(_TtC8coreidvd19TopekaHPKEEncryptor);
}

uint64_t sub_1003985A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProofingData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003985EC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ProofingData(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10039862C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ProofingData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100398668(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, unint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String_optional v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *object;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t countAndFlagsBits;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v78 = a1;
  v84 = a2;
  v85 = a5;
  v83 = a4;
  v79 = a3;
  v87 = a11;
  v88 = a7;
  v86 = a10;
  v91 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v81 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004828(&qword_100632DB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v18);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v80 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DIPError.Code(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a6 >> 62))
  {
    v27 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a6);
    v89 = a8;
    if (v27)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease_n(a6, 2);
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.documentReaderMissingReaderAuthCertificate(_:), v23);
    v67 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v68 = type metadata accessor for DIPError(0);
    v69 = sub_100007F30();
    swift_allocError(v68, v69, 0, 0);
    v70 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004DLL, 0x8000000100543CC0, 0, v26, 0, v67, 0xD000000000000083, 0x800000010055C3A0, 0xD000000000000060, 0x800000010055C430, 94);
    swift_willThrow(v70);
    goto LABEL_25;
  }
  if (a6 < 0)
    v65 = a6;
  else
    v65 = a6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a6);
  v66 = _CocoaArrayWrapper.endIndex.getter(v65);
  v89 = a8;
  if (!v66)
    goto LABEL_24;
LABEL_3:
  v76 = a9;
  if ((a6 & 0xC000000000000001) != 0)
  {
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a6);
  }
  else
  {
    if (!*(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v28 = *(id *)(a6 + 32);
  }
  v29 = v28;
  v30 = swift_bridgeObjectRelease(a6);
  SecCertificateRef.expirationDate.getter(v30);
  v31 = v82;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v82) == 1)
  {
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(a6);
    sub_100008030((uint64_t)v20, &qword_100633990);
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DIPError.Code.documentReaderCertificateValidationFailed(_:), v23);
    v32 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_100007F30();
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000039, 0x800000010055C360, 0, v26, 0, v32, 0xD000000000000083, 0x800000010055C3A0, 0xD000000000000060, 0x800000010055C430, 98);
    swift_willThrow(v35);

LABEL_25:
    sub_100007F78(v86, v87);
    sub_1000FB858(v88, v89);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v85, v91);
    return;
  }
  v36 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  v37 = v36(v80, v20, v31);
  v38 = SecCertificateRef.pseudonym.getter(v37);
  v40 = v39;
  v41 = countAndFlagsBits;
  SecCertificateRef.logotype.getter();
  v74 = (void (*)(char *, char *, uint64_t))v36;
  v75 = v40;
  v72 = v38;
  if (v41)
  {
    swift_errorRelease(v41);
    v42 = type metadata accessor for Logotype(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v17, 1, 1, v42);
    v43 = 0;
  }
  else
  {
    v44 = type metadata accessor for Logotype(0);
    v43 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v17, 1, v44) != 1
       && v40 != 0;
  }
  v46 = v76;
  sub_100008030((uint64_t)v17, &qword_100632DB0);
  v47 = v90;
  v48 = v85;
  v49 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v85, v91);
  v50 = SecCertificateRef.uid()();
  countAndFlagsBits = v50.value._countAndFlagsBits;
  object = v50.value._object;

  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
  if (v43)
  {
    v52 = v86;
    v51 = v87;
    v53 = v82;
    v54 = v75;
    v55 = v72;
  }
  else
  {
    sub_100007F78(v86, v87);
    swift_bridgeObjectRelease(v75);
    v55 = 0;
    v54 = 0;
    v52 = 0;
    v51 = 0xF000000000000000;
    v53 = v82;
  }
  v56 = (int *)type metadata accessor for MobileDocumentReaderAuthenticationSession(0);
  v74(&v46[v56[12]], v80, v53);
  v57 = v84;
  *(_QWORD *)v46 = v78;
  *((_QWORD *)v46 + 1) = v57;
  v58 = v83;
  *((_QWORD *)v46 + 2) = v79;
  *((_QWORD *)v46 + 3) = v58;
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(&v46[v56[6]], v81, v91);
  *(_QWORD *)&v46[v56[7]] = a6;
  v59 = &v46[v56[8]];
  v60 = v89;
  *(_QWORD *)v59 = v88;
  *((_QWORD *)v59 + 1) = v60;
  v61 = (uint64_t *)&v46[v56[9]];
  v62 = (uint64_t)object;
  *v61 = countAndFlagsBits;
  v61[1] = v62;
  v63 = (uint64_t *)&v46[v56[10]];
  *v63 = v52;
  v63[1] = v51;
  v64 = (uint64_t *)&v46[v56[11]];
  *v64 = v55;
  v64[1] = v54;
}

uint64_t type metadata accessor for MobileDocumentReaderAuthenticationSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10063E690;
  if (!qword_10063E690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MobileDocumentReaderAuthenticationSession);
  return result;
}

uint64_t *sub_100398CC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  __n128 v40;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = a3[7];
    v16 = a3[8];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v17;
    v18 = (uint64_t *)((char *)v4 + v16);
    v19 = *(uint64_t *)((char *)a2 + v16);
    v20 = *(uint64_t *)((char *)a2 + v16 + 8);
    swift_bridgeObjectRetain(v17);
    sub_10013E9E0(v19, v20);
    *v18 = v19;
    v18[1] = v20;
    v21 = a3[9];
    v22 = a3[10];
    v23 = (uint64_t *)((char *)v4 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (char *)v4 + v22;
    v27 = (_OWORD *)((char *)a2 + v22);
    v28 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain(v25);
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)v26 = *v27;
    }
    else
    {
      v30 = *(_QWORD *)v27;
      sub_100022948(v30, v28);
      *(_QWORD *)v26 = v30;
      *((_QWORD *)v26 + 1) = v28;
    }
    v31 = a3[11];
    v32 = a3[12];
    v33 = (uint64_t *)((char *)v4 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = (char *)v4 + v32;
    v37 = (char *)a2 + v32;
    v38 = type metadata accessor for Date(0);
    v39 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v38 - 8) + 16);
    v40 = swift_bridgeObjectRetain(v35);
    v39(v36, v37, v38, v40);
  }
  return v4;
}

uint64_t sub_100398E4C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  sub_1000FB858(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  v6 = (uint64_t *)(a1 + a2[10]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_100007F8C(*v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  v8 = a1 + a2[12];
  v9 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *sub_100398F24(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t, __n128);
  __n128 v38;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = a3[7];
  v15 = a3[8];
  v16 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = *(_QWORD *)((char *)a2 + v15);
  v19 = *(_QWORD *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain(v16);
  sub_10013E9E0(v18, v19);
  *v17 = v18;
  v17[1] = v19;
  v20 = a3[9];
  v21 = a3[10];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (char *)a1 + v21;
  v26 = (_OWORD *)((char *)a2 + v21);
  v27 = *(_QWORD *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain(v24);
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *v26;
  }
  else
  {
    v28 = *(_QWORD *)v26;
    sub_100022948(v28, v27);
    *(_QWORD *)v25 = v28;
    *((_QWORD *)v25 + 1) = v27;
  }
  v29 = a3[11];
  v30 = a3[12];
  v31 = (_QWORD *)((char *)a1 + v29);
  v32 = (_QWORD *)((char *)a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = (char *)a1 + v30;
  v35 = (char *)a2 + v30;
  v36 = type metadata accessor for Date(0);
  v37 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
  v38 = swift_bridgeObjectRetain(v33);
  v37(v34, v35, v36, v38);
  return a1;
}

_QWORD *sub_100399080(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a2 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10013E9E0(*v19, v21);
  v22 = *v18;
  v23 = v18[1];
  *v18 = v20;
  v18[1] = v21;
  sub_1000FB858(v22, v23);
  v24 = a3[9];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[10];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = *(_QWORD *)((char *)a2 + v29 + 8);
  if (*(_QWORD *)((char *)a1 + v29 + 8) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      v34 = *v31;
      sub_100022948(v34, v32);
      v35 = *v30;
      v36 = v30[1];
      *v30 = v34;
      v30[1] = v32;
      sub_100007F8C(v35, v36);
      goto LABEL_8;
    }
    sub_10003BAAC((uint64_t)v30);
    goto LABEL_6;
  }
  if (v32 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_8;
  }
  v33 = *v31;
  sub_100022948(v33, v32);
  *v30 = v33;
  v30[1] = v32;
LABEL_8:
  v37 = a3[11];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[12];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  return a1;
}

_OWORD *sub_10039926C(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

_QWORD *sub_100399334(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = *(_QWORD *)((char *)a1 + v16);
  v18 = *(_QWORD *)((char *)a1 + v16 + 8);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  sub_1000FB858(v17, v18);
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[10];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = *(_QWORD *)((char *)a1 + v25 + 8);
  if (v28 >> 60 != 15)
  {
    v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      v30 = *v26;
      *v26 = *v27;
      v26[1] = v29;
      sub_100007F8C(v30, v28);
      goto LABEL_6;
    }
    sub_10003BAAC((uint64_t)v26);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_6:
  v31 = a3[11];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[12];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  return a1;
}

uint64_t sub_100399498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003994A4);
}

uint64_t sub_1003994A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100399544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100399550);
}

uint64_t sub_100399550(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1003995EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = &unk_100532DF0;
  v5[1] = &unk_100532DF0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4] = &unk_100532E08;
    v5[5] = &unk_100532E20;
    v5[6] = &unk_100532E38;
    v5[7] = &unk_100532E20;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10013E9E0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void destroy for MobileDocumentReaderAuthenticationSession.Key(uint64_t a1)
{
  sub_1000FB858(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10013E9E0(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000FB858(v5, v6);
  return a1;
}

uint64_t *assignWithTake for MobileDocumentReaderAuthenticationSession.Key(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000FB858(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MobileDocumentReaderAuthenticationSession.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MobileDocumentReaderAuthenticationSession.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_100399808(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_100399814(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_100399824(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for MobileDocumentReaderAuthenticationSession.Key()
{
  return &type metadata for MobileDocumentReaderAuthenticationSession.Key;
}

uint64_t sub_100399850(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v31 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Checking if Wallet was deleted", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v14, v4);
  v20 = sub_1001B2720(v2[3], v2[4], a1);
  if ((v20 & 1) != 0)
  {
    v21 = defaultLogger()(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Wallet has been deleted, will clear all the proofing sessions locally", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v19(v11, v4);
    v25 = v2[2];
    swift_retain(v25);
    sub_10038E8D4();
    return swift_release(v25);
  }
  else
  {
    v27 = defaultLogger()(v20);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Wallet not deleted. Moving on...", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v19)(v8, v4);
  }
}

uint64_t sub_100399ABC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for IdentityProofingWalletDeletionManager()
{
  return objc_opt_self(_TtC8coreidvd37IdentityProofingWalletDeletionManager);
}

unint64_t sub_100399B08(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v2;
  unint64_t countAndFlagsBits;
  void *object;
  _QWORD *v5;
  Swift::String_optional v6;
  unint64_t result;
  int v8;
  unint64_t v9;
  unint64_t v10;

  swift_bridgeObjectRetain(a2);
  v2 = String.Iterator.next()();
  if (!v2.value._object)
  {
    v5 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease(a2);
    return (unint64_t)v5;
  }
  countAndFlagsBits = v2.value._countAndFlagsBits;
  object = v2.value._object;
  v5 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (countAndFlagsBits == 2573 && object == (void *)0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 2573, 0xE200000000000000, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(object);
      LOBYTE(v8) = 10;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) != 0)
        goto LABEL_14;
      goto LABEL_18;
    }
    if ((Character._isSingleScalar.getter(countAndFlagsBits, object) & 1) != 0)
    {
      result = sub_10039B18C(countAndFlagsBits, (unint64_t)object);
      if ((result & 0x100000000) != 0)
        goto LABEL_22;
      if ((result & 0xFFFFFF80) == 0)
        break;
    }
    swift_bridgeObjectRelease(object);
LABEL_4:
    v6 = String.Iterator.next()();
    countAndFlagsBits = v6.value._countAndFlagsBits;
    object = v6.value._object;
    if (!v6.value._object)
      goto LABEL_20;
  }
  result = sub_10039B18C(countAndFlagsBits, (unint64_t)object);
  if ((result & 0x100000000) != 0)
    goto LABEL_23;
  v8 = result;
  result = swift_bridgeObjectRelease(object);
  if ((v8 & 0xFFFFFF00) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) != 0)
    {
LABEL_14:
      v10 = v5[2];
      v9 = v5[3];
      if (v10 >= v9 >> 1)
        v5 = sub_1000E2478((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
      v5[2] = v10 + 1;
      *((_BYTE *)v5 + v10 + 32) = v8;
      goto LABEL_4;
    }
LABEL_18:
    v5 = sub_1000E2478(0, v5[2] + 1, 1, v5);
    goto LABEL_14;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100399CBC(size_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t countAndFlagsBits;
  uint64_t v29;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100210158(0, a1);
  if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
    v6 = sub_1000E2478(0, v6[2], 0, v6);
  v7 = SecRandomCopyBytes(kSecRandomDefault, a1, v6 + 4);
  if (v7)
  {
    v8 = v7;
    swift_bridgeObjectRelease(v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.systemSecError(_:), v2);
    v9 = sub_100004828((uint64_t *)&unk_1006325A0);
    v10 = sub_100004828((uint64_t *)&unk_100633440);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(_QWORD *)(v11 + 72);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = swift_allocObject(v9, v14 + v12, v13 | 7);
    *(_OWORD *)(v15 + 16) = xmmword_10051FFB0;
    v16 = v15 + v14;
    v17 = v16 + *(int *)(v10 + 48);
    v18 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v19 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v16, v18, v19);
    *(_QWORD *)(v17 + 24) = &type metadata for Int32;
    *(_DWORD *)v17 = v8;
    v20 = sub_10011D314(v15);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100007F30();
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010054E180, 0, v5, 0, v20, 0xD000000000000048, 0x800000010054E1A0, 0xD000000000000017, 0x800000010055C4F0, 22);
    return swift_willThrow(v23);
  }
  else
  {
    v25 = sub_100111D08((uint64_t)v6);
    v27 = v26;
    swift_bridgeObjectRelease(v6);
    countAndFlagsBits = Data.base16EncodedString()()._countAndFlagsBits;
    sub_100007F8C(v25, v27);
    return countAndFlagsBits;
  }
}

uint64_t sub_100399F3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  Swift::String v36;
  Swift::Bool v37;
  uint64_t v38;
  uint8_t *v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a3;
  v53 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v53 - 8);
  v6 = __chkstk_darwin(v53);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (uint8_t *)&v47 - v9;
  v11 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10039ABFC(a1, a2, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    v50 = v5;
    v51 = a2;
    v49 = v10;
    v20 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
    v52 = v14;
    v21 = v20(v17, v13, v14);
    v22 = URL.host.getter(v21);
    if (v23)
    {
      v24 = v23;
      v25 = v22 == 0x6F632E656C707061 && v23 == 0xE90000000000006DLL;
      if (v25
        || (v26 = a1,
            (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0x6F632E656C707061, 0xE90000000000006DLL, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(v24);
LABEL_12:
        v19 = v54;
        v14 = v52;
        v20(v54, v17, v52);
        v18 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v19, v18, 1, v14);
      }
      v36._countAndFlagsBits = 0x632E656C7070612ELL;
      v36._object = (void *)0xEA00000000006D6FLL;
      v37 = String.hasSuffix(_:)(v36);
      v38 = swift_bridgeObjectRelease(v24);
      if (v37)
        goto LABEL_12;
      v39 = v49;
      defaultLogger()(v38);
      v40 = v51;
      v41 = swift_bridgeObjectRetain_n(v51, 2);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v56 = v45;
        *(_DWORD *)v44 = 136446210;
        v48 = v44 + 4;
        swift_bridgeObjectRetain(v40);
        v55 = sub_1000E3AC8(v26, v40, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v48);
        swift_bridgeObjectRelease_n(v40, 3);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "URL %{public}s is not an Apple url", v44, 0xCu);
        v46 = v17;
        v18 = 1;
        swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v44, -1, -1);

        (*(void (**)(uint8_t *, uint64_t))(v50 + 8))(v39, v53);
        v14 = v52;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v46, v52);
        goto LABEL_4;
      }
      swift_bridgeObjectRelease_n(v40, 2);

      (*(void (**)(uint8_t *, uint64_t))(v50 + 8))(v39, v53);
    }
    else
    {
      v28 = v8;
      defaultLogger()(v22);
      v29 = v51;
      v30 = swift_bridgeObjectRetain_n(v51, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.debug.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v56 = v34;
        *(_DWORD *)v33 = 136446210;
        v49 = v33 + 4;
        swift_bridgeObjectRetain(v29);
        v55 = sub_1000E3AC8(a1, v29, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v49);
        swift_bridgeObjectRelease_n(v29, 3);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "URL %{public}s is not a valid HTTPS URL because it does not have a host", v33, 0xCu);
        v35 = v17;
        v18 = 1;
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v53);
        v14 = v52;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v35, v52);
        goto LABEL_4;
      }
      swift_bridgeObjectRelease_n(v29, 2);

      (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v53);
    }
    v14 = v52;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v52);
    goto LABEL_3;
  }
  sub_1000DB76C((uint64_t)v13);
LABEL_3:
  v18 = 1;
LABEL_4:
  v19 = v54;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v19, v18, 1, v14);
}

uint64_t sub_10039A498(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];
  uint64_t v69;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v61 - v9;
  v69 = -1;
  v11 = String.count.getter(a1, a2);
  if (v11 != 2)
  {
    defaultLogger()(v11);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v68[0] = v26;
      v66 = v4;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain(a2);
      v67 = sub_1000E3AC8(a1, a2, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v25 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to convert country code %{public}s to ASCII due to invalid length.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v66);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
LABEL_62:
    swift_beginAccess(&v69, v68, 0, 0);
    return v69;
  }
  v63 = v5;
  swift_bridgeObjectRetain(a2);
  v12 = sub_100399B08(a1, a2);
  v65 = a2;
  swift_bridgeObjectRelease(a2);
  v13 = *(_QWORD *)(v12 + 16);
  v64 = v10;
  if (v13)
  {
    v61 = 0;
    v62 = a1;
    v66 = v4;
    v68[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000E419C(0, v13, 0);
    v14 = 0;
    v15 = (_QWORD *)v68[0];
    do
    {
      LOBYTE(v67) = *(_BYTE *)(v12 + v14 + 32);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      v18 = v17;
      v68[0] = (uint64_t)v15;
      v20 = v15[2];
      v19 = v15[3];
      if (v20 >= v19 >> 1)
      {
        sub_1000E419C(v19 > 1, v20 + 1, 1);
        v15 = (_QWORD *)v68[0];
      }
      ++v14;
      v15[2] = v20 + 1;
      v21 = &v15[2 * v20];
      v21[4] = v16;
      v21[5] = v18;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease(v12);
    v4 = v66;
    a1 = v62;
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    v15 = _swiftEmptyArrayStorage;
  }
  v68[0] = (uint64_t)v15;
  v27 = sub_100004828(&qword_1006368D0);
  v28 = sub_1000DB7D4();
  v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
  v31 = v30;
  result = swift_bridgeObjectRelease(v15);
  v33 = HIBYTE(v31) & 0xF;
  v34 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v31 & 0x2000000000000000) != 0)
    v35 = HIBYTE(v31) & 0xF;
  else
    v35 = v29 & 0xFFFFFFFFFFFFLL;
  v36 = v65;
  if (!v35)
  {
    v50 = swift_bridgeObjectRelease(v31);
    v51 = -1;
    v37 = v64;
    goto LABEL_58;
  }
  v37 = v64;
  if ((v31 & 0x1000000000000000) != 0)
  {
    v39 = (uint64_t)sub_1004E5510(v29, v31, 10);
    LOBYTE(v29) = v60;
LABEL_55:
    v50 = swift_bridgeObjectRelease(v31);
    if ((v29 & 1) != 0)
      v51 = -1;
    else
      v51 = v39;
LABEL_58:
    v69 = v51;
    defaultLogger()(v50);
    v52 = swift_bridgeObjectRetain_n(v36, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = swift_slowAlloc(32, -1);
      v68[0] = v56;
      *(_DWORD *)v55 = 136446466;
      swift_bridgeObjectRetain(v36);
      v67 = sub_1000E3AC8(a1, v36, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v55 + 4);
      swift_bridgeObjectRelease_n(v36, 3);
      *(_WORD *)(v55 + 12) = 2048;
      v67 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v55 + 14);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Converted country code: %{public}s to ASCII value: %ld", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v36, 2);
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v37, v4);
    goto LABEL_62;
  }
  if ((v31 & 0x2000000000000000) == 0)
  {
    if ((v29 & 0x1000000000000000) != 0)
      v38 = (unsigned __int8 *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v38 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v29, v31);
    v39 = (uint64_t)sub_1004E54FC(v38, v34, 10);
    LOBYTE(v29) = v40 & 1;
    goto LABEL_55;
  }
  v68[0] = v29;
  v68[1] = v31 & 0xFFFFFFFFFFFFFFLL;
  if (v29 == 43)
  {
    if (!v33)
      goto LABEL_73;
    if (v33 == 1 || (BYTE1(v29) - 48) > 9u)
      goto LABEL_42;
    v39 = (BYTE1(v29) - 48);
    if (v33 != 2)
    {
      if ((BYTE2(v29) - 48) > 9u)
        goto LABEL_42;
      v39 = 10 * (BYTE1(v29) - 48) + (BYTE2(v29) - 48);
      v41 = v33 - 3;
      if (v41)
      {
        v42 = (unsigned __int8 *)v68 + 3;
        while (1)
        {
          v43 = *v42 - 48;
          if (v43 > 9)
            goto LABEL_42;
          v44 = 10 * v39;
          if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
            goto LABEL_42;
          v39 = v44 + v43;
          if (__OFADD__(v44, v43))
            goto LABEL_42;
          LOBYTE(v29) = 0;
          ++v42;
          if (!--v41)
            goto LABEL_55;
        }
      }
    }
LABEL_54:
    LOBYTE(v29) = 0;
    goto LABEL_55;
  }
  if (v29 != 45)
  {
    if (!v33 || (v29 - 48) > 9u)
      goto LABEL_42;
    v39 = (v29 - 48);
    if (v33 != 1)
    {
      if ((BYTE1(v29) - 48) > 9u)
        goto LABEL_42;
      v39 = 10 * (v29 - 48) + (BYTE1(v29) - 48);
      v45 = v33 - 2;
      if (v45)
      {
        v46 = (unsigned __int8 *)v68 + 2;
        while (1)
        {
          v47 = *v46 - 48;
          if (v47 > 9)
            goto LABEL_42;
          v48 = 10 * v39;
          if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
            goto LABEL_42;
          v39 = v48 + v47;
          if (__OFADD__(v48, v47))
            goto LABEL_42;
          LOBYTE(v29) = 0;
          ++v46;
          if (!--v45)
            goto LABEL_55;
        }
      }
    }
    goto LABEL_54;
  }
  if (v33)
  {
    if (v33 != 1 && (BYTE1(v29) - 48) <= 9u)
    {
      if (v33 == 2)
      {
        LOBYTE(v29) = 0;
        v39 = -(uint64_t)(BYTE1(v29) - 48);
        goto LABEL_55;
      }
      if ((BYTE2(v29) - 48) <= 9u)
      {
        v39 = -10 * (BYTE1(v29) - 48) - (BYTE2(v29) - 48);
        v49 = v33 - 3;
        if (!v49)
          goto LABEL_54;
        v57 = (unsigned __int8 *)v68 + 3;
        while (1)
        {
          v58 = *v57 - 48;
          if (v58 > 9)
            break;
          v59 = 10 * v39;
          if ((unsigned __int128)(v39 * (__int128)10) >> 64 != (10 * v39) >> 63)
            break;
          v39 = v59 - v58;
          if (__OFSUB__(v59, v58))
            break;
          LOBYTE(v29) = 0;
          ++v57;
          if (!--v49)
            goto LABEL_55;
        }
      }
    }
LABEL_42:
    v39 = 0;
    LOBYTE(v29) = 1;
    goto LABEL_55;
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t sub_10039ABFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  char *v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v53 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v53 - v13;
  v15 = sub_100004828(&qword_100630A48);
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v23 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    v33 = defaultLogger()(v20);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = a3;
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "URL is not a valid HTTPS URL because it is an empty string", v37, 2u);
      v38 = v37;
      a3 = v36;
      swift_slowDealloc(v38, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v9, v58);
    goto LABEL_19;
  }
  URL.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v24 = sub_1000DB76C((uint64_t)v17);
    defaultLogger()(v24);
    v25 = swift_bridgeObjectRetain_n(a2, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v56 = a3;
      v30 = v29;
      v60 = v29;
      *(_DWORD *)v28 = 136446210;
      v55 = (uint64_t)(v28 + 4);
      swift_bridgeObjectRetain(a2);
      v59 = sub_1000E3AC8(a1, a2, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v55);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "URL %{public}s is not a valid HTTPS URL because it is not a url", v28, 0xCu);
      v31 = 1;
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v32 = v30;
      a3 = v56;
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v31, 1, v18);
    }

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
LABEL_19:
    v31 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v31, 1, v18);
  }
  v56 = a3;
  v39 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 32);
  v40 = v39(v22, v17, v18);
  v41 = URL.scheme.getter(v40);
  if (v42)
  {
    v43 = v42;
    if (v41 == 0x7370747468 && v42 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(v42);
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 0x7370747468, 0xE500000000000000, 0);
      v41 = swift_bridgeObjectRelease(v43);
      if ((v45 & 1) == 0)
        goto LABEL_16;
    }
    v51 = v56;
    v39(v56, v22, v18);
    a3 = v51;
    v31 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v31, 1, v18);
  }
LABEL_16:
  defaultLogger()(v41);
  v46 = swift_bridgeObjectRetain_n(a2, 2);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v60 = v55;
    *(_DWORD *)v49 = 136446210;
    v54 = v49 + 4;
    swift_bridgeObjectRetain(a2);
    v59 = sub_1000E3AC8(a1, a2, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v54);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "URL %{public}s is not a valid HTTPS URL because it does not have the https scheme", v49, 0xCu);
    v31 = 1;
    v50 = v55;
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v58);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v58);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v31 = 1;
  }
  a3 = v56;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, v31, 1, v18);
}

unint64_t sub_10039B18C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_10039B268(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_10039B268(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_10039B304(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_10039B370(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_10039B304(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1000E3FBC(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_10039B370(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter(a2, a3);
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingImageQualityMetricsProvider()
{
  return objc_opt_self(_TtC8coreidvd43IdentityProofingImageQualityMetricsProvider);
}

uint64_t sub_10039B4A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  id v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t matched;
  void *v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  _BYTE v157[7];
  _BYTE v158[7];
  int v159;
  __int16 v160;
  __int16 v161;
  char v162;
  __int16 v163;
  char v164;
  __int16 v165;
  char v166;
  __int16 v167;
  char v168;
  __int16 v169;
  char v170;
  __int16 v171;
  char v172;
  __int16 v173;
  char v174;
  __int16 v175;
  char v176;
  __int16 v177;
  char v178;
  __int16 v179;
  char v180;
  __int16 v181;
  char v182;
  __int16 v183;
  char v184;
  __int16 v185;
  char v186;
  __int16 v187;
  char v188;
  __int16 v189;
  char v190;
  __int16 v191;
  char v192;
  __int16 v193;
  char v194;
  __int16 v195;
  char v196;
  __int16 v197;
  char v198;
  __int16 v199;
  char v200;
  __int16 v201;
  char v202;
  __int16 v203;
  char v204;
  __int16 v205;
  char v206;
  _QWORD *v207;

  v2 = dispatch thunk of ImageQualityMetrics.originalVertices.getter();
  if (!v2)
  {
    v7 = 0;
    goto LABEL_18;
  }
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    if (v4)
      goto LABEL_4;
LABEL_17:
    v2 = swift_bridgeObjectRelease(v3);
    v7 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_17;
LABEL_4:
  result = sub_1000E433C(0, v4 & ~(v4 >> 63), 0);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_92;
  }
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
    else
      v8 = *(id *)(v3 + 8 * v6 + 32);
    v9 = v8;
    v152 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.x.getter());
    v147 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.y.getter());

    v207 = _swiftEmptyArrayStorage;
    v11 = _swiftEmptyArrayStorage[2];
    v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1)
      sub_1000E433C(v10 > 1, v11 + 1, 1);
    ++v6;
    _swiftEmptyArrayStorage[2] = v11 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v11 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v147, v152));
  }
  while (v4 != v6);
  v2 = swift_bridgeObjectRelease(v3);
LABEL_18:
  v12 = dispatch thunk of ImageQualityMetrics.targetVertices.getter(v2);
  if (!v12)
  {
    v16 = 0;
    goto LABEL_35;
  }
  v13 = v12;
  if (!((unint64_t)v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_21;
LABEL_34:
    v12 = swift_bridgeObjectRelease(v13);
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_35;
  }
  if (v12 >= 0)
    v12 &= 0xFFFFFFFFFFFFFF8uLL;
  v14 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v14)
    goto LABEL_34;
LABEL_21:
  result = sub_1000E433C(0, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v15 = 0;
  v16 = _swiftEmptyArrayStorage;
  do
  {
    if ((v13 & 0xC000000000000001) != 0)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
    else
      v17 = *(id *)(v13 + 8 * v15 + 32);
    v18 = v17;
    v153 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.x.getter());
    v148 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.y.getter());

    v207 = _swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage[2];
    v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1)
      sub_1000E433C(v19 > 1, v20 + 1, 1);
    ++v15;
    _swiftEmptyArrayStorage[2] = v20 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v20 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v148, v153));
  }
  while (v14 != v15);
  v12 = swift_bridgeObjectRelease(v13);
LABEL_35:
  v21 = dispatch thunk of ImageQualityMetrics.rectangleCorners.getter(v12);
  v145 = v16;
  if (!v21)
  {
    v25 = 0;
    goto LABEL_52;
  }
  v22 = v21;
  if (!((unint64_t)v21 >> 62))
  {
    v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_38;
LABEL_51:
    v21 = swift_bridgeObjectRelease(v22);
    v25 = _swiftEmptyArrayStorage;
    goto LABEL_52;
  }
  if (v21 >= 0)
    v21 &= 0xFFFFFFFFFFFFFF8uLL;
  v23 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!v23)
    goto LABEL_51;
LABEL_38:
  result = sub_1000E433C(0, v23 & ~(v23 >> 63), 0);
  if (v23 < 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v24 = 0;
  v25 = _swiftEmptyArrayStorage;
  do
  {
    if ((v22 & 0xC000000000000001) != 0)
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
    else
      v26 = *(id *)(v22 + 8 * v24 + 32);
    v27 = v26;
    v154 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.x.getter());
    v149 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.y.getter());

    v207 = _swiftEmptyArrayStorage;
    v29 = _swiftEmptyArrayStorage[2];
    v28 = _swiftEmptyArrayStorage[3];
    if (v29 >= v28 >> 1)
      sub_1000E433C(v28 > 1, v29 + 1, 1);
    ++v24;
    _swiftEmptyArrayStorage[2] = v29 + 1;
    *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v29 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v149, v154));
    v16 = v145;
  }
  while (v23 != v24);
  v21 = swift_bridgeObjectRelease(v22);
LABEL_52:
  v30 = dispatch thunk of ImageQualityMetrics.documentCorners.getter(v21);
  if (v30)
  {
    v31 = v30;
    if ((unint64_t)v30 >> 62)
    {
      if (v30 >= 0)
        v30 &= 0xFFFFFFFFFFFFFF8uLL;
      v32 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (v32)
      {
LABEL_55:
        result = sub_1000E433C(0, v32 & ~(v32 >> 63), 0);
        if ((v32 & 0x8000000000000000) == 0)
        {
          v142 = v25;
          v33 = 0;
          v34 = _swiftEmptyArrayStorage;
          v35 = v7;
          do
          {
            if ((v31 & 0xC000000000000001) != 0)
              v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
            else
              v36 = *(id *)(v31 + 8 * v33 + 32);
            v37 = v36;
            v155 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.x.getter());
            v150 = COERCE_UNSIGNED_INT64(dispatch thunk of IQPoint.y.getter());

            v207 = _swiftEmptyArrayStorage;
            v39 = _swiftEmptyArrayStorage[2];
            v38 = _swiftEmptyArrayStorage[3];
            if (v39 >= v38 >> 1)
              sub_1000E433C(v38 > 1, v39 + 1, 1);
            ++v33;
            _swiftEmptyArrayStorage[2] = v39 + 1;
            *(float64x2_t *)&_swiftEmptyArrayStorage[2 * v39 + 4] = vcvtq_f64_f32((float32x2_t)__PAIR64__(v150, v155));
          }
          while (v32 != v33);
          v7 = v35;
          v30 = swift_bridgeObjectRelease(v31);
          v16 = v145;
          v25 = v142;
          goto LABEL_69;
        }
LABEL_94:
        __break(1u);
        return result;
      }
    }
    else
    {
      v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v32)
        goto LABEL_55;
    }
    v30 = swift_bridgeObjectRelease(v31);
    v34 = _swiftEmptyArrayStorage;
  }
  else
  {
    v34 = 0;
  }
LABEL_69:
  matched = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v30);
  if (matched)
  {
    v41 = (void *)matched;
    v104 = dispatch thunk of FuzzyMatchAssessment.firstName.getter();
    v43 = v42;

    v44 = v43 & 1;
  }
  else
  {
    v104 = 0;
    v44 = 1;
  }
  v103 = v44;
  v45 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(matched);
  if (v45)
  {
    v46 = (void *)v45;
    v102 = dispatch thunk of FuzzyMatchAssessment.lastName.getter();
    v48 = v47;

    v49 = v48 & 1;
  }
  else
  {
    v102 = 0;
    v49 = 1;
  }
  v101 = v49;
  v50 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v45);
  if (v50)
  {
    v51 = (void *)v50;
    v100 = dispatch thunk of FuzzyMatchAssessment.state.getter();
    v53 = v52;

    v54 = v53 & 1;
  }
  else
  {
    v100 = 0;
    v54 = 1;
  }
  v99 = v54;
  v55 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v50);
  if (v55)
  {
    v56 = (void *)v55;
    v98 = dispatch thunk of FuzzyMatchAssessment.houseNumber.getter();
    v58 = v57;

    v59 = v58 & 1;
  }
  else
  {
    v98 = 0;
    v59 = 1;
  }
  v97 = v59;
  v60 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v55);
  if (v60)
  {
    v61 = (void *)v60;
    v96 = dispatch thunk of FuzzyMatchAssessment.street.getter();
    v63 = v62;

    v64 = v63 & 1;
  }
  else
  {
    v96 = 0;
    v64 = 1;
  }
  v95 = v64;
  v65 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v60);
  if (v65)
  {
    v66 = (void *)v65;
    v94 = dispatch thunk of FuzzyMatchAssessment.dob.getter();
    v68 = v67;

    v69 = v68 & 1;
  }
  else
  {
    v94 = 0;
    v69 = 1;
  }
  v93 = v69;
  v70 = dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter(v65);
  if (v70)
  {
    v71 = (void *)v70;
    v92 = dispatch thunk of FuzzyMatchAssessment.postalCode.getter();
    v73 = v72;

    v74 = v73 & 1;
  }
  else
  {
    v92 = 0;
    v74 = 1;
  }
  v91 = v74;
  v146 = dispatch thunk of ImageQualityMetrics.blurriness.getter();
  v144 = dispatch thunk of ImageQualityMetrics.exposure.getter();
  v143 = dispatch thunk of ImageQualityMetrics.cardDistortion.getter();
  v141 = dispatch thunk of ImageQualityMetrics.faceToImageRatio.getter();
  v140 = dispatch thunk of ImageQualityMetrics.faceCenteredRatio.getter();
  v139 = dispatch thunk of ImageQualityMetrics.headPitch.getter();
  v138 = dispatch thunk of ImageQualityMetrics.headRoll.getter();
  v123 = dispatch thunk of ImageQualityMetrics.headYaw.getter();
  v124 = dispatch thunk of ImageQualityMetrics.blinkingConfidence.getter();
  v125 = dispatch thunk of ImageQualityMetrics.prescriptionConfidence.getter();
  v126 = dispatch thunk of ImageQualityMetrics.sunglassesConfidence.getter();
  v127 = dispatch thunk of ImageQualityMetrics.facemaskConfidence.getter();
  v128 = dispatch thunk of ImageQualityMetrics.headgearConfidence.getter();
  v129 = dispatch thunk of ImageQualityMetrics.captureTime.getter();
  v130 = dispatch thunk of ImageQualityMetrics.faceCaptureQuality.getter();
  v131 = dispatch thunk of ImageQualityMetrics.documentSize.getter();
  v132 = dispatch thunk of ImageQualityMetrics.documentRotation.getter();
  v133 = dispatch thunk of ImageQualityMetrics.documentSkew.getter();
  v134 = dispatch thunk of ImageQualityMetrics.leftDrift.getter();
  v135 = dispatch thunk of ImageQualityMetrics.rightDrift.getter();
  v136 = dispatch thunk of ImageQualityMetrics.upDrift.getter();
  v137 = dispatch thunk of ImageQualityMetrics.downDrift.getter();
  v119 = dispatch thunk of ImageQualityMetrics.faceConfidences.getter();
  v118 = dispatch thunk of ImageQualityMetrics.headgearConfidences.getter();
  v117 = dispatch thunk of ImageQualityMetrics.numFaces.getter();
  v122 = v75;
  v116 = dispatch thunk of ImageQualityMetrics.luxLevel.getter();
  v121 = v76;
  v115 = dispatch thunk of ImageQualityMetrics.pdf417Detected.getter();
  v114 = dispatch thunk of ImageQualityMetrics.isAAMVACompliant.getter();
  v113 = dispatch thunk of ImageQualityMetrics.isAutoCaptured.getter();
  v112 = dispatch thunk of ImageQualityMetrics.isFlashEnabled.getter();
  v77 = dispatch thunk of ImageQualityMetrics.issuerNumber.getter();
  v110 = v78;
  v111 = v77;
  v79 = dispatch thunk of ImageQualityMetrics.documentType.getter();
  v107 = v80;
  v108 = v79;
  v109 = dispatch thunk of ImageQualityMetrics.closestMatchAssessments.getter();
  v81 = dispatch thunk of ImageQualityMetrics.modelDecision.getter();
  v105 = v82;
  v106 = v81;
  v83 = dispatch thunk of ImageQualityMetrics.modelVersion.getter();
  v85 = v84;
  v86 = dispatch thunk of ImageQualityMetrics.exploration.getter();
  v87 = dispatch thunk of ImageQualityMetrics.rescanCount.getter();
  v120 = v88;
  v156 = dispatch thunk of ImageQualityMetrics.livenessChute.getter();
  v151 = v89;
  result = dispatch thunk of ImageQualityMetrics.errorCode.getter();
  *(_QWORD *)(a1 + 176) = v119;
  *(_QWORD *)(a1 + 184) = v118;
  *(_QWORD *)(a1 + 192) = v117;
  *(_QWORD *)(a1 + 208) = v116;
  *(_BYTE *)(a1 + 217) = v115;
  *(_BYTE *)(a1 + 218) = v114;
  *(_BYTE *)(a1 + 219) = v113;
  *(_BYTE *)(a1 + 220) = v112;
  *(_QWORD *)(a1 + 224) = v111;
  *(_QWORD *)(a1 + 232) = v110;
  *(_QWORD *)(a1 + 240) = v108;
  *(_QWORD *)(a1 + 248) = v107;
  *(_QWORD *)(a1 + 256) = v7;
  *(_QWORD *)(a1 + 264) = v16;
  *(_QWORD *)(a1 + 272) = v25;
  *(_QWORD *)(a1 + 280) = v34;
  *(_QWORD *)(a1 + 288) = v104;
  *(_QWORD *)(a1 + 296) = v103;
  *(_QWORD *)(a1 + 304) = v102;
  *(_QWORD *)(a1 + 312) = v101;
  *(_QWORD *)(a1 + 320) = v100;
  *(_QWORD *)(a1 + 328) = v99;
  *(_QWORD *)(a1 + 336) = v98;
  *(_QWORD *)(a1 + 344) = v97;
  *(_QWORD *)(a1 + 352) = v96;
  *(_QWORD *)(a1 + 360) = v95;
  *(_QWORD *)(a1 + 368) = v94;
  *(_QWORD *)(a1 + 376) = v93;
  *(_QWORD *)(a1 + 384) = v92;
  *(_BYTE *)(a1 + 392) = v91;
  *(_QWORD *)(a1 + 400) = v109;
  *(_QWORD *)(a1 + 408) = v106;
  *(_QWORD *)(a1 + 416) = v105;
  *(_QWORD *)(a1 + 424) = v83;
  *(_QWORD *)(a1 + 432) = v85;
  *(_BYTE *)(a1 + 440) = v86;
  *(_QWORD *)(a1 + 448) = v87;
  *(_DWORD *)a1 = v146;
  *(_BYTE *)(a1 + 4) = BYTE4(v146) & 1;
  *(_WORD *)(a1 + 5) = v205;
  *(_BYTE *)(a1 + 7) = v206;
  *(_DWORD *)(a1 + 8) = v144;
  *(_BYTE *)(a1 + 12) = BYTE4(v144) & 1;
  *(_WORD *)(a1 + 13) = v203;
  *(_BYTE *)(a1 + 15) = v204;
  *(_DWORD *)(a1 + 16) = v143;
  *(_BYTE *)(a1 + 20) = BYTE4(v143) & 1;
  *(_WORD *)(a1 + 21) = v201;
  *(_BYTE *)(a1 + 23) = v202;
  *(_DWORD *)(a1 + 24) = v141;
  *(_BYTE *)(a1 + 28) = BYTE4(v141) & 1;
  *(_BYTE *)(a1 + 31) = v200;
  *(_WORD *)(a1 + 29) = v199;
  *(_DWORD *)(a1 + 32) = v140;
  *(_BYTE *)(a1 + 36) = BYTE4(v140) & 1;
  *(_BYTE *)(a1 + 39) = v198;
  *(_WORD *)(a1 + 37) = v197;
  *(_DWORD *)(a1 + 40) = v139;
  *(_BYTE *)(a1 + 44) = BYTE4(v139) & 1;
  *(_BYTE *)(a1 + 47) = v196;
  *(_WORD *)(a1 + 45) = v195;
  *(_DWORD *)(a1 + 48) = v138;
  *(_BYTE *)(a1 + 52) = BYTE4(v138) & 1;
  *(_BYTE *)(a1 + 55) = v194;
  *(_WORD *)(a1 + 53) = v193;
  *(_DWORD *)(a1 + 56) = v123;
  *(_BYTE *)(a1 + 60) = BYTE4(v123) & 1;
  *(_BYTE *)(a1 + 63) = v192;
  *(_WORD *)(a1 + 61) = v191;
  *(_DWORD *)(a1 + 64) = v124;
  *(_BYTE *)(a1 + 68) = BYTE4(v124) & 1;
  *(_BYTE *)(a1 + 71) = v190;
  *(_WORD *)(a1 + 69) = v189;
  *(_DWORD *)(a1 + 72) = v125;
  *(_BYTE *)(a1 + 76) = BYTE4(v125) & 1;
  *(_BYTE *)(a1 + 79) = v188;
  *(_WORD *)(a1 + 77) = v187;
  *(_DWORD *)(a1 + 80) = v126;
  *(_BYTE *)(a1 + 84) = BYTE4(v126) & 1;
  *(_BYTE *)(a1 + 87) = v186;
  *(_WORD *)(a1 + 85) = v185;
  *(_DWORD *)(a1 + 88) = v127;
  *(_BYTE *)(a1 + 92) = BYTE4(v127) & 1;
  *(_BYTE *)(a1 + 95) = v184;
  *(_WORD *)(a1 + 93) = v183;
  *(_DWORD *)(a1 + 96) = v128;
  *(_BYTE *)(a1 + 100) = BYTE4(v128) & 1;
  *(_BYTE *)(a1 + 103) = v182;
  *(_WORD *)(a1 + 101) = v181;
  *(_DWORD *)(a1 + 104) = v129;
  *(_BYTE *)(a1 + 108) = BYTE4(v129) & 1;
  *(_BYTE *)(a1 + 111) = v180;
  *(_WORD *)(a1 + 109) = v179;
  *(_DWORD *)(a1 + 112) = v130;
  *(_BYTE *)(a1 + 116) = BYTE4(v130) & 1;
  *(_BYTE *)(a1 + 119) = v178;
  *(_WORD *)(a1 + 117) = v177;
  *(_DWORD *)(a1 + 120) = v131;
  *(_BYTE *)(a1 + 124) = BYTE4(v131) & 1;
  *(_BYTE *)(a1 + 127) = v176;
  *(_WORD *)(a1 + 125) = v175;
  *(_DWORD *)(a1 + 128) = v132;
  *(_BYTE *)(a1 + 132) = BYTE4(v132) & 1;
  *(_BYTE *)(a1 + 135) = v174;
  *(_WORD *)(a1 + 133) = v173;
  *(_DWORD *)(a1 + 136) = v133;
  *(_BYTE *)(a1 + 140) = BYTE4(v133) & 1;
  *(_BYTE *)(a1 + 143) = v172;
  *(_WORD *)(a1 + 141) = v171;
  *(_DWORD *)(a1 + 144) = v134;
  *(_BYTE *)(a1 + 148) = BYTE4(v134) & 1;
  *(_BYTE *)(a1 + 151) = v170;
  *(_WORD *)(a1 + 149) = v169;
  *(_DWORD *)(a1 + 152) = v135;
  *(_BYTE *)(a1 + 156) = BYTE4(v135) & 1;
  *(_BYTE *)(a1 + 159) = v168;
  *(_WORD *)(a1 + 157) = v167;
  *(_DWORD *)(a1 + 160) = v136;
  *(_BYTE *)(a1 + 164) = BYTE4(v136) & 1;
  *(_BYTE *)(a1 + 167) = v166;
  *(_WORD *)(a1 + 165) = v165;
  *(_DWORD *)(a1 + 168) = v137;
  *(_BYTE *)(a1 + 172) = BYTE4(v137) & 1;
  *(_BYTE *)(a1 + 175) = v164;
  *(_WORD *)(a1 + 173) = v163;
  *(_BYTE *)(a1 + 200) = v122 & 1;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)((char *)&v207 + 3);
  *(_DWORD *)(a1 + 201) = (_DWORD)v207;
  *(_BYTE *)(a1 + 216) = v121 & 1;
  *(_BYTE *)(a1 + 223) = v162;
  *(_WORD *)(a1 + 221) = v161;
  *(_BYTE *)(a1 + 393) = 0;
  *(_WORD *)(a1 + 398) = v160;
  *(_DWORD *)(a1 + 394) = v159;
  *(_DWORD *)(a1 + 441) = *(_DWORD *)v158;
  *(_DWORD *)(a1 + 444) = *(_DWORD *)&v158[3];
  *(_BYTE *)(a1 + 456) = v120 & 1;
  *(_DWORD *)(a1 + 457) = *(_DWORD *)v157;
  *(_DWORD *)(a1 + 460) = *(_DWORD *)&v157[3];
  *(_QWORD *)(a1 + 464) = v156;
  *(_QWORD *)(a1 + 472) = v151;
  *(_QWORD *)(a1 + 480) = result;
  *(_BYTE *)(a1 + 488) = v90 & 1;
  return result;
}

_QWORD *sub_10039C150(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  _QWORD *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  __int128 v114;
  _QWORD *v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _BYTE v132[496];
  _BYTE v133[496];
  uint64_t v134[63];

  v4 = type metadata accessor for IQImageType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v123 = (char *)&v106 - v10;
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v106 - v11);
  v13 = type metadata accessor for Logger(0);
  v124 = *(_QWORD *)(v13 - 8);
  v125 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v130 = (char *)&v106 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (unint64_t)&v106 - v20;
  v111 = a1;
  v22 = IdentityImageQualityMetrics.inlineMetrics.getter(v19);
  if ((unint64_t)v22 >> 62)
    goto LABEL_78;
  v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v119 = v16;
  v120 = a2;
  v126 = v4;
  v127 = v5;
  v128 = v8;
  if (v24)
  {
    v5 = 0;
    v122 = v22 & 0xC000000000000001;
    v115 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v23 = 136315650;
    v114 = v23;
    v112 = v12;
    v113 = (char *)&type metadata for Any + 8;
    v121 = v22;
    v118 = v24;
    *(_QWORD *)&v117 = v21;
    do
    {
      if (v122)
        v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v22);
      else
        v25 = (char *)*(id *)(v22 + 8 * v5 + 32);
      v8 = v25;
      if (__OFADD__(v5, 1))
        goto LABEL_74;
      v129 = (char *)(v5 + 1);
      defaultLogger()(v25);
      v26 = v127;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v127 + 16))(v12, a2, v4);
      v27 = v8;
      v28 = Logger.logObject.getter(v27);
      v29 = v12;
      v30 = static os_log_type_t.debug.getter(v28);
      if (os_log_type_enabled(v28, v30))
      {
        v31 = v4;
        v32 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v116 = swift_slowAlloc(64, -1);
        v134[0] = v116;
        *(_DWORD *)v32 = v114;
        v33 = v29;
        v34 = IQImageType.rawValue.getter();
        v36 = v35;
        *(_QWORD *)(v32 + 4) = sub_1000E3AC8(v34, v35, v134);
        swift_bridgeObjectRelease(v36);
        (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v33, v31);
        *(_WORD *)(v32 + 12) = 2048;
        *(_QWORD *)(v32 + 14) = v5;
        *(_WORD *)(v32 + 22) = 2080;
        v37 = objc_msgSend(v27, "debugDescription");
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

        v41 = v38;
        v16 = v119;
        *(_QWORD *)(v32 + 24) = sub_1000E3AC8(v41, v40, v134);

        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "%s inline %ld:\n%s", (uint8_t *)v32, 0x20u);
        v42 = v116;
        swift_arrayDestroy(v116, 2, v113);
        a2 = v120;
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        v21 = v117;
        (*(void (**)(_QWORD, uint64_t))(v124 + 8))(v117, v125);
        v12 = v112;
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v29, v4);

        v21 = v117;
        (*(void (**)(_QWORD, uint64_t))(v124 + 8))(v117, v125);
        v12 = v29;
      }
      sub_10039B4A0((uint64_t)v132);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v115);
      v8 = v128;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v115 = sub_1000E3374(0, v115[2] + 1, 1, v115);
      v45 = v115[2];
      v44 = v115[3];
      if (v45 >= v44 >> 1)
        v115 = sub_1000E3374((_QWORD *)(v44 > 1), v45 + 1, 1, v115);
      v46 = v115;
      v115[2] = v45 + 1;
      memcpy(&v46[62 * v45 + 4], v132, 0x1E9uLL);

      ++v5;
      v4 = v126;
      v22 = v121;
    }
    while (v129 != (char *)v118);
    v47 = swift_bridgeObjectRelease(v121);
    v5 = v127;
  }
  else
  {
    v47 = swift_bridgeObjectRelease(v22);
    v115 = _swiftEmptyArrayStorage;
  }
  v48 = IdentityImageQualityMetrics.captureMetrics.getter(v47);
  v22 = v48;
  if ((unint64_t)v48 >> 62)
  {
    if (v48 >= 0)
      v48 &= 0xFFFFFFFFFFFFFF8uLL;
    v50 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  else
  {
    v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v50)
  {
    v21 = 0;
    v122 = v22 & 0xC000000000000001;
    *(_QWORD *)&v114 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v49 = 136315650;
    v116 = v49;
    v113 = (char *)&type metadata for Any + 8;
    v121 = v22;
    v118 = v50;
    do
    {
      if (v122)
        v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v22);
      else
        v51 = *(id *)(v22 + 8 * v21 + 32);
      v52 = v51;
      v12 = v123;
      if (__OFADD__(v21, 1))
        goto LABEL_75;
      v129 = (char *)(v21 + 1);
      defaultLogger()(v51);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
      v53 = v52;
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.debug.getter(v54);
      v56 = v55;
      if (os_log_type_enabled(v54, v55))
      {
        v57 = swift_slowAlloc(32, -1);
        v58 = swift_slowAlloc(64, -1);
        v134[0] = v58;
        *(_DWORD *)v57 = v116;
        LODWORD(v117) = v56;
        v59 = IQImageType.rawValue.getter();
        v61 = v60;
        *(_QWORD *)(v57 + 4) = sub_1000E3AC8(v59, v60, v134);
        swift_bridgeObjectRelease(v61);
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v12, v126);
        *(_WORD *)(v57 + 12) = 2048;
        *(_QWORD *)(v57 + 14) = v21;
        *(_WORD *)(v57 + 22) = 2080;
        v62 = objc_msgSend(v53, "debugDescription");
        v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        v65 = v64;

        *(_QWORD *)(v57 + 24) = sub_1000E3AC8(v63, v65, v134);
        v66 = v65;
        v16 = v119;
        swift_bridgeObjectRelease(v66);
        _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v117, "%s captured %ld:\n%s", (uint8_t *)v57, 0x20u);
        swift_arrayDestroy(v58, 2, v113);
        v67 = v58;
        a2 = v120;
        swift_slowDealloc(v67, -1, -1);
        v68 = v57;
        v4 = v126;
        swift_slowDealloc(v68, -1, -1);

      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v12, v4);

      }
      (*(void (**)(char *, uint64_t))(v124 + 8))(v130, v125);
      sub_10039B4A0((uint64_t)v133);
      v69 = swift_isUniquelyReferenced_nonNull_native(v114);
      v8 = v128;
      if ((v69 & 1) == 0)
        *(_QWORD *)&v114 = sub_1000E3374(0, *(_QWORD *)(v114 + 16) + 1, 1, (_QWORD *)v114);
      v71 = *(_QWORD *)(v114 + 16);
      v70 = *(_QWORD *)(v114 + 24);
      if (v71 >= v70 >> 1)
        *(_QWORD *)&v114 = sub_1000E3374((_QWORD *)(v70 > 1), v71 + 1, 1, (_QWORD *)v114);
      v72 = v114;
      *(_QWORD *)(v114 + 16) = v71 + 1;
      memcpy((void *)(v72 + 496 * v71 + 32), v133, 0x1E9uLL);

      ++v21;
      v5 = v127;
      v22 = v121;
    }
    while (v129 != (char *)v118);
  }
  else
  {
    *(_QWORD *)&v114 = _swiftEmptyArrayStorage;
  }
  v73 = swift_bridgeObjectRelease(v22);
  v74 = IdentityImageQualityMetrics.videoMetrics.getter(v73);
  v76 = v74;
  if ((unint64_t)v74 >> 62)
  {
    if (v74 >= 0)
      v74 &= 0xFFFFFFFFFFFFFF8uLL;
    v22 = _CocoaArrayWrapper.endIndex.getter(v74);
  }
  else
  {
    v22 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v22)
  {
    v21 = 0;
    v110 = v76 & 0xC000000000000001;
    v107 = v76 & 0xFFFFFFFFFFFFFF8;
    v12 = _swiftEmptyArrayStorage;
    v106 = v76 + 32;
    *(_QWORD *)&v75 = 136315906;
    v117 = v75;
    *(_QWORD *)&v116 = (char *)&type metadata for Any + 8;
    v108 = v22;
    v109 = v76;
    do
    {
      if (v110)
      {
        v77 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v76);
        v78 = (char *)(v21 + 1);
        if (__OFADD__(v21, 1))
          goto LABEL_76;
      }
      else
      {
        if (v21 >= *(_QWORD *)(v107 + 16))
          goto LABEL_77;
        v77 = *(id *)(v106 + 8 * v21);
        v78 = (char *)(v21 + 1);
        if (__OFADD__(v21, 1))
          goto LABEL_76;
      }
      v111 = v78;
      v112 = v77;
      v79 = MetricsSequence.sequence.getter();
      v80 = v79;
      if ((unint64_t)v79 >> 62)
      {
        if (v79 >= 0)
          v79 &= 0xFFFFFFFFFFFFFF8uLL;
        v81 = _CocoaArrayWrapper.endIndex.getter(v79);
        v113 = (char *)v12;
        if (v81)
        {
LABEL_49:
          v118 = v21;
          v21 = 0;
          v123 = (char *)(v80 & 0xC000000000000001);
          v12 = _swiftEmptyArrayStorage;
          v121 = v81;
          v122 = v80;
          while (1)
          {
            v82 = v123
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v80)
                : *(id *)(v80 + 8 * v21 + 32);
            v83 = v82;
            if (__OFADD__(v21, 1))
              break;
            v129 = (char *)(v21 + 1);
            v130 = (char *)v12;
            defaultLogger()(v82);
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
            v22 = v83;
            v84 = v16;
            v85 = Logger.logObject.getter(v22);
            v86 = static os_log_type_t.debug.getter(v85);
            if (os_log_type_enabled(v85, v86))
            {
              v87 = swift_slowAlloc(42, -1);
              v88 = swift_slowAlloc(64, -1);
              v131 = v88;
              *(_DWORD *)v87 = v117;
              v89 = IQImageType.rawValue.getter();
              v91 = v90;
              *(_QWORD *)(v87 + 4) = sub_1000E3AC8(v89, v90, &v131);
              swift_bridgeObjectRelease(v91);
              (*(void (**)(char *, uint64_t))(v5 + 8))(v128, v126);
              *(_WORD *)(v87 + 12) = 2048;
              *(_QWORD *)(v87 + 14) = v118;
              *(_WORD *)(v87 + 22) = 2048;
              *(_QWORD *)(v87 + 24) = v21;
              *(_WORD *)(v87 + 32) = 2080;
              v92 = objc_msgSend((id)v22, "debugDescription");
              v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
              v95 = v94;

              *(_QWORD *)(v87 + 34) = sub_1000E3AC8(v93, v95, &v131);
              v96 = v95;
              a2 = v120;
              swift_bridgeObjectRelease(v96);
              _os_log_impl((void *)&_mh_execute_header, v85, v86, "%s video, sequence: %ld, metric: %ld:\n%s", (uint8_t *)v87, 0x2Au);
              swift_arrayDestroy(v88, 2, v116);
              v97 = v88;
              v8 = v128;
              swift_slowDealloc(v97, -1, -1);
              v98 = v87;
              v4 = v126;
              swift_slowDealloc(v98, -1, -1);

              v16 = v119;
              (*(void (**)(char *, uint64_t))(v124 + 8))(v119, v125);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

              (*(void (**)(char *, uint64_t))(v124 + 8))(v84, v125);
              v16 = v84;
            }
            sub_10039B4A0((uint64_t)v134);
            v12 = v130;
            if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0)
              v12 = sub_1000E3374(0, v12[2] + 1, 1, v12);
            v100 = v12[2];
            v99 = v12[3];
            if (v100 >= v99 >> 1)
              v12 = sub_1000E3374((_QWORD *)(v99 > 1), v100 + 1, 1, v12);
            v12[2] = v100 + 1;
            memcpy(&v12[62 * v100 + 4], v134, 0x1E9uLL);

            ++v21;
            v80 = v122;
            v5 = v127;
            if (v129 == (char *)v121)
              goto LABEL_67;
          }
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          if (v22 < 0)
            v105 = v22;
          else
            v105 = v22 & 0xFFFFFFFFFFFFFF8;
          v24 = _CocoaArrayWrapper.endIndex.getter(v105);
          goto LABEL_3;
        }
      }
      else
      {
        v81 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
        v113 = (char *)v12;
        if (v81)
          goto LABEL_49;
      }
      v12 = _swiftEmptyArrayStorage;
LABEL_67:
      v101 = v12;
      swift_bridgeObjectRelease(v80);
      v12 = v113;
      if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
        v12 = sub_1000E3268(0, v12[2] + 1, 1, v12);
      v22 = v108;
      v103 = v12[2];
      v102 = v12[3];
      if (v103 >= v102 >> 1)
        v12 = sub_1000E3268((_QWORD *)(v102 > 1), v103 + 1, 1, v12);
      v12[2] = v103 + 1;
      v12[v103 + 4] = v101;

      v21 = (unint64_t)v111;
      v5 = v127;
      v76 = v109;
    }
    while (v111 != (char *)v22);
  }
  swift_bridgeObjectRelease(v76);
  return v115;
}

unint64_t sub_10039CD88(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;

  v121 = (void *)a6;
  v122 = (void *)a7;
  v119 = (void *)a4;
  v120 = (void *)a5;
  v118 = (void *)a3;
  v9 = type metadata accessor for IQImageType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v115 - v14;
  v16 = sub_10011EE78((uint64_t)_swiftEmptyArrayStorage);
  v123 = v10;
  if (a1)
  {
    v17 = enum case for IQImageType.frontScan(_:);
    v117 = a2;
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v18(v15, enum case for IQImageType.frontScan(_:), v9);
    v19 = v10;
    v20 = a1;
    v116 = IQImageType.rawValue.getter();
    v22 = v21;
    v23 = *(void (**)(char *, uint64_t))(v19 + 8);
    v23(v15, v9);
    v18(v13, v17, v9);
    v24 = sub_10039C150(v20, (uint64_t)v13);
    v26 = v25;
    v28 = v27;
    v23(v13, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    v30 = v26;
    a2 = v117;
    sub_100482260((uint64_t)v24, v30, v28, v116, v22, isUniquelyReferenced_nonNull_native);
    v16 = v124;

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (a2)
  {
    v31 = enum case for IQImageType.backScan(_:);
    v32 = v123;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v33(v15, enum case for IQImageType.backScan(_:), v9);
    v34 = a2;
    v117 = (void *)IQImageType.rawValue.getter();
    v36 = v35;
    v37 = *(void (**)(char *, uint64_t))(v32 + 8);
    v37(v15, v9);
    v33(v13, v31, v9);
    v38 = sub_10039C150(v34, (uint64_t)v13);
    v40 = v39;
    v42 = v41;
    v37(v13, v9);
    v43 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v38, v40, v42, (uint64_t)v117, v36, v43);
    v16 = v124;

    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v44 = v118;
  if (v118)
  {
    v45 = enum case for IQImageType.idFront(_:);
    v46 = v123;
    v47 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v47(v15, enum case for IQImageType.idFront(_:), v9);
    v48 = v44;
    v118 = (void *)IQImageType.rawValue.getter();
    v50 = v49;
    v51 = *(void (**)(char *, uint64_t))(v46 + 8);
    v51(v15, v9);
    v47(v13, v45, v9);
    v52 = sub_10039C150(v48, (uint64_t)v13);
    v54 = v53;
    v56 = v55;
    v51(v13, v9);
    v57 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v52, v54, v56, (uint64_t)v118, v50, v57);
    v16 = v124;

    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v58 = v119;
  if (v119)
  {
    v59 = enum case for IQImageType.idBack(_:);
    v60 = v123;
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v61(v15, enum case for IQImageType.idBack(_:), v9);
    v62 = v58;
    v119 = (void *)IQImageType.rawValue.getter();
    v64 = v63;
    v65 = *(void (**)(char *, uint64_t))(v60 + 8);
    v65(v15, v9);
    v61(v13, v59, v9);
    v66 = sub_10039C150(v62, (uint64_t)v13);
    v68 = v67;
    v70 = v69;
    v65(v13, v9);
    v71 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v66, v68, v70, (uint64_t)v119, v64, v71);
    v16 = v124;

    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v72 = v120;
  if (v120)
  {
    v73 = enum case for IQImageType.selfie(_:);
    v74 = v123;
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v75(v15, enum case for IQImageType.selfie(_:), v9);
    v76 = v72;
    v120 = (void *)IQImageType.rawValue.getter();
    v78 = v77;
    v79 = *(void (**)(char *, uint64_t))(v74 + 8);
    v79(v15, v9);
    v75(v13, v73, v9);
    v80 = sub_10039C150(v76, (uint64_t)v13);
    v82 = v81;
    v84 = v83;
    v79(v13, v9);
    v85 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v80, v82, v84, (uint64_t)v120, v78, v85);
    v16 = v124;

    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v86 = v121;
  if (v121)
  {
    v87 = enum case for IQImageType.liveness(_:);
    v88 = v123;
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v89(v15, enum case for IQImageType.liveness(_:), v9);
    v90 = v86;
    v121 = (void *)IQImageType.rawValue.getter();
    v92 = v91;
    v93 = *(void (**)(char *, uint64_t))(v88 + 8);
    v93(v15, v9);
    v89(v13, v87, v9);
    v94 = sub_10039C150(v90, (uint64_t)v13);
    v96 = v95;
    v98 = v97;
    v93(v13, v9);
    v99 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v94, v96, v98, (uint64_t)v121, v92, v99);
    v16 = v124;

    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v100 = v122;
  if (v122)
  {
    v101 = enum case for IQImageType.passive(_:);
    v102 = v123;
    v103 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 104);
    v103(v15, enum case for IQImageType.passive(_:), v9);
    v104 = v100;
    v122 = (void *)IQImageType.rawValue.getter();
    v106 = v105;
    v107 = *(void (**)(char *, uint64_t))(v102 + 8);
    v107(v15, v9);
    v103(v13, v101, v9);
    v108 = sub_10039C150(v104, (uint64_t)v13);
    v110 = v109;
    v112 = v111;
    v107(v13, v9);
    v113 = swift_isUniquelyReferenced_nonNull_native(v16);
    v124 = v16;
    sub_100482260((uint64_t)v108, v110, v112, (uint64_t)v122, v106, v113);
    v16 = v124;

    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v16;
}

char *sub_10039D3D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  objc_class *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  objc_super v21;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0;
  machServiceIdentityProofingDataSharing.getter();
  v7 = v6;
  v8 = objc_allocWithZone((Class)NSXPCListener);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v10 = objc_msgSend(v8, "initWithMachServiceName:", v9);

  *(_QWORD *)&v5[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener] = v10;
  v11 = (objc_class *)type metadata accessor for IdentityProofingDataSharingListener();
  v21.receiver = v5;
  v21.super_class = v11;
  v12 = (char *)objc_msgSendSuper2(&v21, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = defaultLogger()(objc_msgSend(v13, "resume"));
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.info.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "IdentityProofingDataSharingListener has started", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

id sub_10039D5AC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  objc_class *v12;
  objc_super v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "IdentityProofingDataSharingListener is tearing down", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8coreidvd35IdentityProofingDataSharingListener_xpcListener], "invalidate");
  v12 = (objc_class *)type metadata accessor for IdentityProofingDataSharingListener();
  v14.receiver = v1;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, "dealloc");
}

uint64_t sub_10039D708()
{
  return sub_1000F06A0("coreidvd: IdentityProofingDataSharingListener connection invalidated");
}

uint64_t sub_10039D714()
{
  return sub_1000F06A0("IdentityProofingDataSharingListener connection interrupted");
}

uint64_t type metadata accessor for IdentityProofingDataSharingListener()
{
  return objc_opt_self(_TtC8coreidvd35IdentityProofingDataSharingListener);
}

uint64_t sub_10039D79C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  _DWORD *v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  uint64_t Strong;
  void *v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  uint64_t (*v64)();
  uint64_t v65;
  char v66[8];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (void **)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v4);
  v9 = (void **)((char *)&v55 - v8);
  __chkstk_darwin(v7);
  v11 = (char *)&v55 - v10;
  v12 = swift_unknownObjectWeakInit(v66, a1);
  defaultLogger()(v12);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.info.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(8, -1);
    v58 = v9;
    v18 = v2;
    v19 = v17;
    *(_DWORD *)v17 = 67109120;
    v20 = v17 + 4;
    LODWORD(aBlock) = -[NSObject processIdentifier](v13, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v20);

    _os_log_impl((void *)&_mh_execute_header, v14, v16, "IdentityProofingDataSharingListener connection received from %d", v19, 8u);
    v21 = v19;
    v2 = v18;
    v9 = v58;
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v11, v2);
  Strong = swift_unknownObjectWeakLoadStrong(v66);
  if (!Strong)
  {
    v38 = defaultLogger()(0);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.info.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "coreidvd (no description: -1):IdentityProofingDataSharingListener received", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v36 = v6;
    goto LABEL_11;
  }
  v24 = (void *)Strong;
  defaultLogger()(Strong);
  v25 = v24;
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.info.getter(v26, v27);
  if (!os_log_type_enabled(v26, v28))
  {

    v36 = v9;
LABEL_11:
    v37 = v2;
    goto LABEL_12;
  }
  v29 = swift_slowAlloc(18, -1);
  v58 = (void **)swift_slowAlloc(32, -1);
  aBlock = v58;
  *(_DWORD *)v29 = 136315394;
  v56 = v29 + 4;
  v30 = v25;
  v31 = objc_msgSend(v30, "description");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v57 = v2;
  v34 = v33;

  v59 = sub_1000E3AC8(v32, v34, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &aBlock, v56);

  swift_bridgeObjectRelease(v34);
  *(_WORD *)(v29 + 12) = 1024;
  LODWORD(v32) = objc_msgSend(v30, "processIdentifier");

  LODWORD(v59) = v32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 4, v29 + 14);

  _os_log_impl((void *)&_mh_execute_header, v26, v28, "coreidvd (%s:%d): IdentityProofingDataSharingListener connection received", (uint8_t *)v29, 0x12u);
  v35 = v58;
  swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1, -1);
  swift_slowDealloc(v29, -1, -1);

  v36 = v9;
  v37 = v57;
LABEL_12:
  v22((char *)v36, v37);
  type metadata accessor for IdentityProofingDataSharingInterface(0);
  v43 = (void *)static IdentityProofingDataSharingInterface.interface()();
  -[NSObject setExportedInterface:](v13, "setExportedInterface:", v43);

  v44 = sub_10001D4D0();
  v45 = type metadata accessor for IdentityProofingPassManager();
  v46 = swift_allocObject(v45, 16, 7);
  v47 = type metadata accessor for IdentityProofingDataSharingManager();
  v48 = (_QWORD *)swift_allocObject(v47, 40, 7);
  v48[2] = 90;
  v48[3] = v44;
  v48[4] = v46;
  v49 = type metadata accessor for IdentityProofingDataSharingSessionProxy();
  swift_allocObject(v49, 48, 7);
  v50 = v13;
  v51 = sub_1000FE298((uint64_t)v13, (uint64_t)&protocol witness table for NSXPCConnection, (uint64_t)v48);

  swift_release(v48);
  -[NSObject setExportedObject:](v50, "setExportedObject:", v51);
  swift_release(v51);
  v64 = sub_10039D708;
  v65 = 0;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_1004AB190;
  v63 = &unk_100615478;
  v52 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v50, "setInvalidationHandler:", v52);
  _Block_release(v52);
  v64 = sub_10039D714;
  v65 = 0;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_1004AB190;
  v63 = &unk_1006154A0;
  v53 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v50, "setInterruptionHandler:", v53);
  _Block_release(v53);
  -[NSObject resume](v50, "resume");
  swift_unknownObjectWeakDestroy(v66);
  return 1;
}

uint64_t sub_10039DD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10039DD48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10039DD58(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Swift::String v15;
  Swift::Bool v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  _OWORD v38[370];
  _OWORD v39[4];
  _BYTE v40[64];
  _OWORD v41[4];
  _BYTE v42[5928];

  v37 = a1;
  v1 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100632BF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ActionRequest(0);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15._object = (void *)0x800000010055C5F0;
  v15._countAndFlagsBits = 0xD000000000000021;
  v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    v35 = v7;
    v18 = defaultLogger()(v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Internal setting for Inject Liveness Assessments is enabled", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v22 = v36;
    v23 = (uint64_t)&v9[*(int *)(v36 + 20)];
    v39[0] = xmmword_100532F00;
    v24 = type metadata accessor for WorkflowRecommendationResponse(0);
    memset(&v39[1], 0, 48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
    memset(v40, 0, sizeof(v40));
    v41[0] = xmmword_100532F10;
    v41[1] = xmmword_100532F20;
    v41[2] = xmmword_100532F30;
    v41[3] = xmmword_100532F40;
    v25 = sub_100004828(&qword_100633968);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v3, 1, 1, v25);
    sub_10008FDC8(v38);
    sub_1001D9A44((uint64_t)v38, (uint64_t)v42);
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 1;
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 1;
    sub_1002938CC(0, 0, 0, 0, 0, 0, 0, 0, v23, 0, 0, 2, 0, 0, (uint64_t)v39, v32, 0, 0, 0,
      v33,
      0,
      0,
      (uint64_t)v6,
      3,
      0,
      5,
      0,
      5,
      0,
      0,
      0,
      1,
      0,
      1,
      (uint64_t)v40,
      (uint64_t)v41,
      0,
      0,
      (uint64_t)v3,
      (uint64_t)v42);
    v26 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 0, 1, v26);
    strcpy(v9, "SEND_TO_BIOME");
    *((_WORD *)v9 + 7) = -4864;
    v27 = &v9[*(int *)(v22 + 24)];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    v28 = v37;
    v29 = *v37;
    if ((swift_isUniquelyReferenced_nonNull_native(*v37) & 1) == 0)
      v29 = sub_1000E393C(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    v31 = *(_QWORD *)(v29 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    if (v31 >= v30 >> 1)
      v29 = sub_1000E393C(v30 > 1, v31 + 1, 1, v29);
    *(_QWORD *)(v29 + 16) = v31 + 1;
    sub_10039EA3C((uint64_t)v9, v29+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v31);
    *v28 = v29;
  }
}

void sub_10039E1E0(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Swift::String v15;
  Swift::Bool v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  _OWORD v38[370];
  _OWORD v39[4];
  _OWORD v40[4];
  _BYTE v41[72];
  _BYTE v42[5928];

  v37 = a1;
  v1 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100632BF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ActionRequest(0);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v15._object = (void *)0x800000010055C5B0;
  v15._countAndFlagsBits = 0xD000000000000031;
  v16 = NSUserDefaults.internalBool(forKey:)(v15);

  if (v16)
  {
    v35 = v7;
    v18 = defaultLogger()(v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Internal setting for Inject Passive Liveness step up Assessments is enabled", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v22 = v36;
    v23 = (uint64_t)&v9[*(int *)(v36 + 20)];
    v39[0] = xmmword_100532F00;
    v24 = type metadata accessor for WorkflowRecommendationResponse(0);
    memset(&v39[1], 0, 48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
    v40[0] = xmmword_100532F10;
    v40[1] = xmmword_100532F50;
    v40[2] = xmmword_100532F30;
    v40[3] = xmmword_100532F40;
    memset(v41, 0, 64);
    v25 = sub_100004828(&qword_100633968);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v3, 1, 1, v25);
    sub_10008FDC8(v38);
    sub_1001D9A44((uint64_t)v38, (uint64_t)v42);
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 1;
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 1;
    sub_1002938CC(0, 0, 0, 0, 0, 0, 0, 0, v23, 0, 0, 2, 0, 0, (uint64_t)v39, v32, 0, 0, 0,
      v33,
      0,
      0,
      (uint64_t)v6,
      3,
      0,
      5,
      0,
      1,
      0,
      1,
      3,
      0,
      3,
      0,
      (uint64_t)v40,
      (uint64_t)v41,
      0,
      0,
      (uint64_t)v3,
      (uint64_t)v42);
    v26 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 0, 1, v26);
    strcpy(v9, "SEND_TO_BIOME");
    *((_WORD *)v9 + 7) = -4864;
    v27 = &v9[*(int *)(v22 + 24)];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    v28 = v37;
    v29 = *v37;
    if ((swift_isUniquelyReferenced_nonNull_native(*v37) & 1) == 0)
      v29 = sub_1000E393C(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    v31 = *(_QWORD *)(v29 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    if (v31 >= v30 >> 1)
      v29 = sub_1000E393C(v30 > 1, v31 + 1, 1, v29);
    *(_QWORD *)(v29 + 16) = v31 + 1;
    sub_10039EA3C((uint64_t)v9, v29+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v31);
    *v28 = v29;
  }
}

void sub_10039E66C(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::Bool v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  _OWORD v32[370];
  _OWORD v33[4];
  _BYTE v34[72];
  _BYTE v35[5928];

  v30 = a1;
  v1 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004828(&qword_100632BF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionRequest(0);
  v31 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)objc_opt_self(NSUserDefaults);
  v11 = objc_msgSend(v10, "standardUserDefaults");
  v12._countAndFlagsBits = 0xD00000000000001FLL;
  v12._object = (void *)0x800000010055C590;
  v13 = NSUserDefaults.internalBool(forKey:)(v12);

  if (v13)
  {
    v29 = (uint64_t)v9 + *(int *)(v7 + 20);
    v33[0] = xmmword_100532F00;
    v14 = type metadata accessor for WorkflowRecommendationResponse(0);
    memset(&v33[1], 0, 48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    memset(v34, 0, 64);
    v15 = objc_msgSend(v10, "standardUserDefaults");
    v16._countAndFlagsBits = 0xD00000000000001FLL;
    v16._object = (void *)0x800000010055C590;
    v17 = NSUserDefaults.internalString(forKey:)(v16);

    v18 = sub_100004828(&qword_100633968);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v3, 1, 1, v18);
    sub_10008FDC8(v32);
    sub_1001D9A44((uint64_t)v32, (uint64_t)v35);
    *(_QWORD *)&v27 = 0;
    *((_QWORD *)&v27 + 1) = 1;
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = 1;
    v19 = v29;
    sub_1002938CC(0, 0, 0, 0, 0, 0, 0, 0, v29, 0, 0, 2, 0, 0, (uint64_t)v33, v26, 0, 0, 0,
      v27,
      0,
      0,
      (uint64_t)v6,
      3,
      0,
      5,
      0,
      5,
      0,
      2,
      0,
      1,
      0,
      1,
      (uint64_t)v34,
      (uint64_t)v34,
      v17.value._countAndFlagsBits,
      (uint64_t)v17.value._object,
      (uint64_t)v3,
      (uint64_t)v35);
    v20 = type metadata accessor for PendingActionContext(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
    *v9 = 0xD000000000000011;
    v9[1] = 0x800000010053AB30;
    v21 = (_QWORD *)((char *)v9 + *(int *)(v7 + 24));
    *v21 = 0;
    v21[1] = 0;
    v22 = v30;
    v23 = *v30;
    if ((swift_isUniquelyReferenced_nonNull_native(*v30) & 1) == 0)
      v23 = sub_1000E393C(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
      v23 = sub_1000E393C(v24 > 1, v25 + 1, 1, v23);
    *(_QWORD *)(v23 + 16) = v25 + 1;
    sub_10039EA3C((uint64_t)v9, v23+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v25);
    *v22 = v23;
  }
}

uint64_t sub_10039EA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10039EA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10039EB24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v4);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v18 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v22 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_getErrorValue(a1, v21, v20);
    v13 = Error.localizedDescription.getter(v20[1], v20[2]);
    v15 = v14;
    v19 = sub_1000E3AC8(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 4);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "error received while fetching proxy for the exported client %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v18);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

void sub_10039ED0C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t aBlock[5];
  uint64_t v30;

  v2 = v1;
  v3 = a1 & 1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = defaultLogger()(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v26 = v4;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v27 = v2;
    v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    if (v3)
      v16 = 0xD00000000000001DLL;
    else
      v16 = 0xD000000000000015;
    if (v3)
      v17 = 0x800000010055C6D0;
    else
      v17 = 0x800000010055C6F0;
    v28 = sub_1000E3AC8(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, aBlock, v13 + 4);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Add Observer called for %s", v13, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v18 = v15;
    v2 = v27;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v26);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  v19 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v20 = String._bridgeToObjectiveC()();
  v21 = swift_allocObject(&unk_100615500, 32, 7);
  *(_BYTE *)(v21 + 16) = v3;
  *(_QWORD *)(v21 + 24) = v2;
  aBlock[4] = (uint64_t)sub_10039F390;
  v30 = v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10039EA80;
  aBlock[3] = (uint64_t)&unk_100615518;
  v22 = _Block_copy(aBlock);
  v23 = v30;
  swift_retain(v2);
  swift_release(v23);
  v24 = objc_msgSend(v19, "addObserverForName:object:queue:usingBlock:", v20, 0, 0, v22);
  _Block_release(v22);
  swift_unknownObjectRelease(v24);

}

uint64_t sub_10039F004()
{
  return sub_10039F02C("received a request to update UI for proofing status changed event", (SEL *)&selRef_didChangeProofingStatus);
}

uint64_t sub_10039F018()
{
  return sub_10039F02C("received a request to log the event of extended review notification shown", (SEL *)&selRef_didShowExtendedReviewNotification);
}

uint64_t sub_10039F02C(const char *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = *(void **)(v2 + 16);
  if (v13)
  {
    v14 = swift_unknownObjectRetain(*(_QWORD *)(v2 + 16));
    v15 = defaultLogger()(v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, a1, v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    objc_msgSend(v13, *a2);
    return swift_unknownObjectRelease(v13);
  }
  else
  {
    v20 = defaultLogger()(v10);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "cannot connect to client proxy", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_10039F1F8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for IdentityManagementSessionDelegate()
{
  return objc_opt_self(_TtC8coreidvd33IdentityManagementSessionDelegate);
}

uint64_t sub_10039F23C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD aBlock[6];

  v2 = type metadata accessor for IdentityManagementSessionDelegate();
  v3 = swift_allocObject(v2, 24, 7);
  if (a1)
  {
    aBlock[4] = sub_10039EB24;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004AB208;
    aBlock[3] = &unk_1006154C8;
    v4 = _Block_copy(aBlock);
    v5 = a1;
    v6 = objc_msgSend(v5, "remoteObjectProxyWithErrorHandler:", v4);
    _Block_release(v4);

    _bridgeAnyObjectToAny(_:)(aBlock, v6);
    swift_unknownObjectRelease(v6);

    v7 = sub_100004828((uint64_t *)&unk_100643930);
    v8 = swift_dynamicCast(&v11, aBlock, (char *)&type metadata for Any + 8, v7, 6);
    v9 = v11;
    if (!v8)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v3 + 16) = v9;
  return v3;
}

uint64_t sub_10039F354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10039F364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10039F36C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10039F390()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return sub_10039F018();
  else
    return sub_10039F004();
}

uint64_t sub_10039F3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _BYTE v11[8];

  swift_getErrorValue(a4, v11, v10);
  v7 = v10[1];
  v8 = v10[2];
  swift_bridgeObjectRetain(a6);
  return dispatch thunk of Error._code.getter(v7, v8);
}

unint64_t sub_10039F434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004828(&qword_100635780);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1003A0254(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_10039F55C(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10000491C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10039F55C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10039F5C0(a1, a2, v5);
}

unint64_t sub_10039F5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_10039F704(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t ErrorValue;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[8];
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  char v97[8];

  v2 = sub_100004828(&qword_1006335E0);
  __chkstk_darwin(v2);
  v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v88 - v10;
  v89 = a1;
  swift_getErrorValue(a1, v97, v96);
  Error.dipErrorCode.getter(v96[1], v96[2]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
    if (v19 == enum case for DIPError.Code.missingEntitlement(_:))
    {
      type metadata accessor for DIIdentityFatalError(0);
      v21 = v20;
      v94 = 0;
      v22 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
      v23 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
      _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v22, v21, v23);
      v17 = v95;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      v12 = 0xD000000000000048;
      v24 = "This app has crashed because it called an API it is not entitled to use.";
    }
    else if (v19 == enum case for DIPError.Code.networkTimeOut(_:)
           || v19 == enum case for DIPError.Code.serverUnavailable(_:))
    {
      v12 = 0xD000000000000013;
      type metadata accessor for DIIdentityError(0);
      v27 = v26;
      v94 = 3;
      v28 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
      v29 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
      _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v28, v27, v29);
      v17 = v95;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      v24 = "Network unavailable";
    }
    else
    {
      if (v19 == enum case for DIPError.Code.digitalPresentmentNoCredentialAvailable(_:))
        goto LABEL_13;
      if (v19 == enum case for DIPError.Code.digitalPresentmentRequestAlreadyInProgress(_:))
      {
        type metadata accessor for DIIdentityError(0);
        v35 = v34;
        v94 = 5;
        v36 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v37 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v36, v35, v37);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD00000000000001BLL;
        v24 = "Request already in progress";
        goto LABEL_18;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:))
      {
        type metadata accessor for DIIdentityError(0);
        v39 = v38;
        v94 = 4;
        v40 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v41 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v40, v39, v41);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD000000000000015;
        v24 = "No elements requested";
        goto LABEL_18;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentUserCancelled(_:)
        || v19 == enum case for DIPError.Code.digitalPresentmentAppCancelled(_:))
      {
        goto LABEL_13;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentInvalidNonce(_:))
      {
        v12 = 0x2064696C61766E49;
        type metadata accessor for DIIdentityError(0);
        v55 = v54;
        v94 = 6;
        v56 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v57 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v56, v55, v57);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v18 = 0xED000065636E6F6ELL;
        goto LABEL_19;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentInvalidElement(_:))
      {
        v12 = 0x2064696C61766E49;
        type metadata accessor for DIIdentityError(0);
        v59 = v58;
        v94 = 7;
        v60 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v61 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v60, v59, v61);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v18 = 0xEF746E656D656C65;
        goto LABEL_19;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentInvalidMerchantID(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        v63 = v62;
        v94 = 1;
        v64 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v65 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v64, v63, v65);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD00000000000006FLL;
        v24 = "This app has crashed because it attempted to access privacy-sensitive data without a valid merchant identifier.";
        goto LABEL_18;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentNotAvailableOnIPad(_:))
      {
        type metadata accessor for DIIdentityError(0);
        v67 = v66;
        v94 = 1;
        v68 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v69 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v68, v67, v69);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v18 = 0xED0000646574726FLL;
        v12 = 0x7070757320746F4ELL;
        goto LABEL_19;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentBiometricsPermissionDenied(_:))
      {
LABEL_13:
        type metadata accessor for DIIdentityError(0);
        v31 = v30;
        v94 = 2;
        v32 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v33 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v32, v31, v33);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v18 = 0xE900000000000064;
        v12 = 0x656C6C65636E6143;
        goto LABEL_19;
      }
      if (v19 == enum case for DIPError.Code.digitalPresentmentInvalidUsageDescription(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        v71 = v70;
        v94 = 2;
        v72 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v73 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v72, v71, v73);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD0000000000000F2;
        v24 = "This app has crashed because it attempted to access privacy-sensitive data without a usage description. Th"
              "e app's Info.plist must contain an NSIdentityUsageDescription key with a string value explaining to the us"
              "er how the app uses this data.";
      }
      else if (v19 == enum case for DIPError.Code.digitalPresentmentInvalidFirstPartyValue(_:))
      {
        type metadata accessor for DIIdentityFatalError(0);
        v75 = v74;
        v94 = 3;
        v76 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v77 = sub_100004790(&qword_10062F948, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityFatalError, (uint64_t)&unk_10051FC6C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v76, v75, v77);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD000000000000053;
        v24 = "This app has crashed because one or more first-party values specified were invalid.";
      }
      else
      {
        if (v19 != enum case for DIPError.Code.digitalPresentmentRegionNotSupported(_:))
        {
          v82 = v9;
          v12 = 0x6E776F6E6B6E55;
          type metadata accessor for DIIdentityError(0);
          v84 = v83;
          v94 = 0;
          v85 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
          v86 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
          _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v85, v84, v86);
          v17 = v95;
          v87 = *(void (**)(char *, uint64_t))(v6 + 8);
          v87(v11, v5);
          v87(v82, v5);
          goto LABEL_3;
        }
        type metadata accessor for DIIdentityError(0);
        v79 = v78;
        v94 = 8;
        v80 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
        v81 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
        _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v80, v79, v81);
        v17 = v95;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        v12 = 0xD000000000000026;
        v24 = "The requested region is not supported.";
      }
    }
LABEL_18:
    v18 = (unint64_t)(v24 - 32) | 0x8000000000000000;
    goto LABEL_19;
  }
  v12 = 0x6E776F6E6B6E55;
  sub_100131DB4((uint64_t)v4);
  type metadata accessor for DIIdentityError(0);
  v14 = v13;
  v94 = 0;
  v15 = sub_10039F434((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_100004790(&qword_10062F980, (uint64_t (*)(uint64_t))type metadata accessor for DIIdentityError, (uint64_t)&unk_10051FD7C);
  _BridgedStoredNSError.init(_:userInfo:)(&v95, &v94, v15, v14, v16);
  v17 = v95;
LABEL_3:
  v18 = 0xE700000000000000;
LABEL_19:
  sub_1003A020C();
  ErrorValue = swift_getErrorValue(v17, v93, &v90);
  v43 = v91;
  v44 = v92;
  v45 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(ErrorValue);
  v47 = (char *)&v88 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v45 + 16))(v47);
  v48 = dispatch thunk of Error._domain.getter(v43, v44);
  v50 = v49;
  v51 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v43);
  __chkstk_darwin(v51);
  *(&v88 - 4) = v17;
  *(&v88 - 3) = v12;
  *(&v88 - 2) = v18;
  v52 = static NSError.mapFromError(_:domain:mapper:)(v89, v48, v50, sub_1003A0248, &v88 - 6);
  swift_bridgeObjectRelease(v50);
  swift_errorRelease(v17);
  swift_bridgeObjectRelease(v18);
  return v52;
}

unint64_t sub_1003A020C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1006344F0;
  if (!qword_1006344F0)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1006344F0);
  }
  return result;
}

uint64_t sub_1003A0248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10039F3C8(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1003A0254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100635788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A029C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v29[2];
  uint64_t v30;

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IdentityProofingPendingActionsWebService();
  v5 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v6 = objc_msgSend(objc_allocWithZone((Class)PKPaymentService), "init");
  v7 = type metadata accessor for IdentityProofingConfigProvider();
  v8 = swift_allocObject(v7, 16, 7);
  v9 = type metadata accessor for IdentityProofingTextReplacementProvider(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = IdentityProofingTextReplacementProvider.init()();
  v11 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  v12 = swift_allocObject(v11, 16, 7);
  v13 = type metadata accessor for IdentityProofingWorkflowProvider();
  v14 = swift_allocObject(v13, 24, 7);
  *(_QWORD *)(v14 + 16) = v12;
  v15 = type metadata accessor for IdentityProofingUserNotificationProvider(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v17 = sub_1004F5BA8((uint64_t)v6, (uint64_t)v29, v8, v10, v14, v16);
  v18 = sub_1004F2CB8();
  v19 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v20 = swift_allocObject(v19, 24, 7);
  *(_QWORD *)(v20 + 16) = 0;
  sub_1000257E0();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  v21 = static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v22 = sub_1004F5D80(0, v20, v21);
  v23 = sub_10001D4D0();
  if (qword_10062F560 != -1)
    swift_once(&qword_10062F560, sub_10041FF94);
  v24 = (void *)qword_1006707A8;
  v25 = type metadata accessor for IdentityWatchProvisioningManagerFactory();
  v26 = swift_allocObject(v25, 16, 7);
  v27 = type metadata accessor for IdentityProofingPendingActionsFlow(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  return sub_1003C35F8(1, v5, v17, v18, 0, v22, (uint64_t)v23, v24, 0, v26);
}

_QWORD *sub_1003A0510@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  __int128 v18;

  v2 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  v3 = swift_allocObject(v2, 16, 7);
  v4 = type metadata accessor for IdentityProofingWorkflowProvider();
  v5 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v5 + 16) = v3;
  v6 = type metadata accessor for IdentityProofingConfigProvider();
  v7 = swift_allocObject(v6, 16, 7);
  v8 = objc_msgSend(objc_allocWithZone((Class)PKPaymentService), "init", (unsigned __int128)0, (unsigned __int128)0, 0);
  v9 = swift_allocObject(v6, 16, 7);
  v10 = type metadata accessor for IdentityProofingTextReplacementProvider(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = IdentityProofingTextReplacementProvider.init()();
  v12 = swift_allocObject(v2, 16, 7);
  v13 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  v14 = type metadata accessor for IdentityProofingUserNotificationProvider(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = sub_1004F5BA8((uint64_t)v8, (uint64_t)&v18, v9, v11, v13, v15);
  a1[3] = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  a1[4] = &off_100615E70;
  result = (_QWORD *)swift_allocObject(&unk_100615550, 48, 7);
  *a1 = result;
  result[2] = v5;
  result[3] = v7;
  result[4] = v16;
  result[5] = 0x4024000000000000;
  return result;
}

uint64_t sub_1003A0698()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_1003A06D4();
  v1 = type metadata accessor for IdentityProofingBackgroundActivityManager();
  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = v0;
  qword_100670740 = result;
  return result;
}

_QWORD *sub_1003A06D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  ValueWitnessTable *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD v54[5];
  _QWORD v55[5];
  __int128 v56[3];

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityProofingBackgroundActivityScheduler();
  v52 = swift_allocObject(v7, 24, 7);
  *(_QWORD *)(v52 + 16) = 3600;
  v8 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
  v9 = swift_allocObject(v8, 16, 7);
  v10 = type metadata accessor for IdentityProofingWorkflowProvider();
  v11 = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(v11 + 16) = v9;
  v12 = type metadata accessor for IdentityProofingUploadsHelper();
  v13 = swift_allocObject(v12, 32, 7);
  type metadata accessor for NetworkMonitor(0);
  *(_QWORD *)(v13 + 16) = static NetworkMonitor.shared.getter();
  *(_QWORD *)(v13 + 24) = v11;
  type metadata accessor for DIPBackgroundActivityManager(0);
  v51 = static DIPBackgroundActivityManager.sharedInstance.getter();
  v14 = type metadata accessor for DIPAccountManager(0);
  v15 = static DIPAccountManager.sharedInstance.getter(v56, v14);
  v53 = v6;
  static Locale.current.getter(v15);
  v16 = swift_allocObject(v8, 16, 7);
  v50 = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(v50 + 16) = v16;
  v17 = type metadata accessor for IdentityProofingAttributeConfigHelper(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = IdentityProofingAttributeConfigHelper.init()();
  v19 = type metadata accessor for IdentityProofingAssetsProvider();
  v49 = swift_allocObject(v19, 24, 7);
  *(_QWORD *)(v49 + 16) = v18;
  if (qword_10062F440 != -1)
    swift_once(&qword_10062F440, sub_100022F80);
  v20 = qword_1006700A0;
  swift_retain(qword_1006700A0);
  v48 = sub_1003A029C();
  sub_1003A0510(v55);
  v21 = type metadata accessor for IdentityProofingDatabaseProvider();
  v22 = swift_allocObject(v21, 16, 7);
  v23 = objc_msgSend(objc_allocWithZone((Class)PKPaymentService), "init");
  v24 = type metadata accessor for IdentityPendingProvisioningManager();
  v25 = swift_allocObject(v24, 32, 7);
  *(_QWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v23;
  v26 = type metadata accessor for PassManager();
  v27 = swift_allocObject(v26, 16, 7);
  v28 = type metadata accessor for IdentityProofingActionNotificationFlow();
  v29 = swift_allocObject(v28, 24, 7);
  *(_QWORD *)(v29 + 16) = 0;
  sub_1000257E0();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  v30 = static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v31 = sub_1004F5D80(0, v29, v30);
  v32 = sub_10001E624((uint64_t)v55, v55[3]);
  __chkstk_darwin(v32);
  v34 = (char *)&v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v35 + 16))(v34);
  v36 = *((_QWORD *)v34 + 2);
  v37 = *((_QWORD *)v34 + 3);
  v54[3] = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  v54[4] = &off_100615E70;
  v38 = swift_allocObject(&unk_100615550, 48, 7);
  v54[0] = v38;
  *(_OWORD *)(v38 + 16) = *(_OWORD *)v34;
  *(_QWORD *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v37;
  v39 = type metadata accessor for IdentityProofingBackgroundActivityProvider(0);
  v40 = (_QWORD *)swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v41 = sub_10001E624((uint64_t)v54, (uint64_t)&type metadata for IdentityProofingConnectToWifiAlertProvider);
  __chkstk_darwin(v41);
  v43 = (char *)&v48 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t *, uint64_t *))v44->initializeWithCopy)((uint64_t *)v43, v45);
  v46 = sub_1003A0CB8(v52, v13, v51, v56, (uint64_t)v53, v50, v49, v20, *((double *)v43 + 3), v48, *(_OWORD *)v43, *((_QWORD *)v43 + 2), v25, v27, v31, v40);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v54);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v55);
  return v46;
}

uint64_t sub_1003A0B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10002581C(v1 + 40, (uint64_t)v7);
  v2 = v8;
  v3 = v9;
  sub_10000806C(v7, v8);
  swift_retain_n(v1, 2);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(0xD000000000000016, 0x800000010055CA20, &unk_10063EA48, v1, v2, v3);
  swift_release(v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v7);
  sub_10002581C(v1 + 40, (uint64_t)v7);
  v4 = v8;
  v5 = v9;
  sub_10000806C(v7, v8);
  swift_retain(v1);
  dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(0xD000000000000017, 0x80000001005449C0, &unk_10063EA50, v1, v4, v5);
  swift_release(v1);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v7);
  return swift_release(v1);
}

uint64_t type metadata accessor for IdentityProofingBackgroundActivityManager()
{
  return objc_opt_self(_TtC8coreidvd41IdentityProofingBackgroundActivityManager);
}

uint64_t sub_1003A0C84()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_1003A0CB8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v29;
  ValueMetadata *v30;
  _UNKNOWN **v31;
  __int128 v32;
  uint64_t v33;
  void *v34;

  v33 = type metadata accessor for DIPBackgroundActivityManager(0);
  v34 = &protocol witness table for DIPBackgroundActivityManager;
  *(_QWORD *)&v32 = a3;
  v30 = &type metadata for IdentityProofingConnectToWifiAlertProvider;
  v31 = &off_100615E70;
  v24 = swift_allocObject(&unk_100615550, 48, 7);
  *(_QWORD *)&v29 = v24;
  *(_OWORD *)(v24 + 16) = a11;
  *(_QWORD *)(v24 + 32) = a12;
  *(double *)(v24 + 40) = a9;
  a16[2] = &off_1005FFF58;
  a16[3] = a1;
  a16[4] = a2;
  sub_100008018(&v32, (uint64_t)(a16 + 5));
  sub_100008018(a4, (uint64_t)(a16 + 10));
  v25 = (char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_locale;
  v26 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a5, v26);
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_workflowProvider) = a6;
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_assetProvider) = a7;
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_proofingUpdateManager) = a8;
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingActionsFlow) = a10;
  sub_100008018(&v29, (uint64_t)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_connectToWifiAlertProvider);
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_pendingProvisioning) = a13;
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_passManager) = a14;
  *(_QWORD *)((char *)a16 + OBJC_IVAR____TtC8coreidvd42IdentityProofingBackgroundActivityProvider_cleanupProvider) = a15;
  return a16;
}

uint64_t sub_1003A0E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100633264);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1000BC3CC(a1, a2);
}

uint64_t sub_1003A0ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100633264);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100007EE8;
  return sub_1000BC3CC(a1, a2);
}

uint64_t sub_1003A0F34()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[94] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[95] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[96] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[97] = swift_task_alloc(v4);
  v1[98] = swift_task_alloc(v4);
  v1[99] = swift_task_alloc(v4);
  v5 = type metadata accessor for CoreIDVFeatureFlag(0);
  v1[100] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[101] = v6;
  v1[102] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A0FD8, 0, 0);
}

uint64_t sub_1003A0FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for CoreIDVFeatureFlag.krl(_:), v3);
  v4 = FeatureFlagProvider.isEnabled(_:)(v1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) == 0)
  {
    v10 = (uint64_t *)(v0 + 776);
    v16 = defaultLogger()(v5);
    v12 = Logger.logObject.getter(v16);
    v13 = static os_log_type_t.debug.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      v15 = "KRL FeatureFlag is disabled; KRL is disabled";
      goto LABEL_7;
    }
LABEL_8:
    v17 = *v10;
    v18 = *(_QWORD *)(v0 + 768);
    v19 = *(_QWORD *)(v0 + 760);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v20 = *(_QWORD *)(v0 + 792);
    v21 = *(_QWORD *)(v0 + 784);
    v22 = *(_QWORD *)(v0 + 776);
    swift_task_dealloc(*(_QWORD *)(v0 + 816));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7._object = (void *)0x800000010055CA40;
  v7._countAndFlagsBits = 0xD000000000000015;
  v8 = NSUserDefaults.internalBool(forKey:)(v7);

  if (v8)
  {
    v10 = (uint64_t *)(v0 + 792);
    v11 = defaultLogger()(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      v15 = "Internal settings forced disabled KRL; KRL is disabled";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
      swift_slowDealloc(v14, -1, -1);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v24 = (_QWORD *)swift_task_alloc(dword_10063EA5C);
  *(_QWORD *)(v0 + 824) = v24;
  *v24 = v0;
  v24[1] = sub_1003A1210;
  v24[377] = v0 + 384;
  return swift_task_switch(sub_1003A13B8, 0, 0);
}

uint64_t sub_1003A1210()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 824));
  return swift_task_switch(sub_1003A1264, 0, 0);
}

uint64_t sub_1003A1264()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000A1F54(v0 + 384, v0 + 16, &qword_100639938);
  if (sub_1003A165C(v0 + 16) != 1
    && (v1 = *(_BYTE *)(v0 + 361), v2 = sub_10023DD1C(v0 + 384), (v1 & 1) != 0))
  {
    v4 = defaultLogger()(v2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Active config disabled KRL; KRL is disabled", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 784);
    v9 = *(_QWORD *)(v0 + 768);
    v10 = *(_QWORD *)(v0 + 760);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v11 = *(_QWORD *)(v0 + 792);
  v12 = *(_QWORD *)(v0 + 784);
  v13 = *(_QWORD *)(v0 + 776);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1003A13A0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 3016) = a1;
  return swift_task_switch(sub_1003A13B8, 0, 0);
}

uint64_t sub_1003A13B8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;

  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v1 = qword_1006702A0;
  v2 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 52;
  os_unfair_lock_lock(v2 + 52);
  sub_100139D14(v3, v1, (_OWORD *)(v0 + 2784));
  os_unfair_lock_unlock(v4);
  sub_10002581C(v0 + 2784, v0 + 2976);
  sub_10001D410((_QWORD *)(v0 + 2784));
  sub_10000806C((_QWORD *)(v0 + 2976), *(_QWORD *)(v0 + 3000));
  v5 = (_QWORD *)swift_task_alloc(dword_10063513C);
  *(_QWORD *)(v0 + 3024) = v5;
  *v5 = v0;
  v5[1] = sub_1003A14C4;
  return sub_100108884(v0 + 880);
}

uint64_t sub_1003A14C4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3024));
  return swift_task_switch(sub_1003A1518, 0, 0);
}

uint64_t sub_1003A1518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000A1F54(v0 + 880, v0 + 448, &qword_100632330);
  if (sub_100035A5C(v0 + 448) == 1)
  {
    sub_1003A1620((_OWORD *)(v0 + 1680));
    v1 = v0 + 1680;
  }
  else
  {
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    memcpy((void *)(v0 + 2416), (const void *)(v0 + 48), 0x169uLL);
    sub_100035A74((_QWORD *)(v0 + 2416));
    sub_100035B1C(v0 + 880);
    memcpy((void *)(v0 + 2048), (const void *)(v0 + 2416), 0x169uLL);
    nullsub_7(v0 + 2048);
    v1 = v0 + 2048;
  }
  sub_1000A1F54(v1, v0 + 1312, &qword_100639938);
  v2 = *(_QWORD *)(v0 + 3016);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 2976));
  sub_1000A1F54(v0 + 1312, v2, &qword_100639938);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1003A1620(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 345) = 0u;
  return result;
}

uint64_t sub_1003A165C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1003A1674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A1680);
}

uint64_t sub_1003A1680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1003A16BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A16C8);
}

uint64_t sub_1003A16C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureFlagProvider(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for KRLConfigurationProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10063EAC0;
  if (!qword_10063EAC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KRLConfigurationProvider);
  return result;
}

uint64_t sub_1003A1744()
{
  int *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v0 = (int *)type metadata accessor for DIPHTTPSession.Configuration(0);
  sub_1000352D8((uint64_t)v0, qword_10063EAF8);
  v1 = (_QWORD *)sub_1000352C0((uint64_t)v0, (uint64_t)qword_10063EAF8);
  v2 = (_QWORD *)((char *)v1 + v0[6]);
  *v2 = 0x3FF0000000000000;
  v3 = enum case for DIPBackoffStrategy.exponential(_:);
  v4 = type metadata accessor for DIPBackoffStrategy(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  *v1 = 0x4024000000000000;
  v1[1] = 3;
  *((_BYTE *)v1 + v0[7]) = 0;
  *((_BYTE *)v1 + v0[8]) = 0;
  *((_BYTE *)v1 + v0[9]) = 1;
  v6 = (_QWORD *)((char *)v1 + v0[10]);
  *v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_1003A1800(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[6] = a1;
  v2[7] = v1;
  v3 = sub_100004828(&qword_100632D70);
  v2[8] = v3;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v4);
  v2[11] = swift_task_alloc(v4);
  v2[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for Milestone(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v2[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[17] = v8;
  v2[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for COSE_Sign1(0);
  v2[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[20] = v10;
  v2[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v2[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[23] = v12;
  v2[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URLRequest(0);
  v2[25] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[26] = v14;
  v2[27] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A1968, 0, 0);
}

uint64_t sub_1003A1968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, _QWORD, uint64_t);

  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = (void *)qword_100670810;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 16))(v3, *(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8coreidvd15VICALWebService_url, *(_QWORD *)(v0 + 176));
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v3, 0, 60.0);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "cachedResponseForRequest:", isa);
  *(_QWORD *)(v0 + 224) = v7;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  if (v7)
  {
    v9 = objc_msgSend(v7, "data");
    v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    sub_100022948(v10, v12);
    COSE_Sign1.init(fromHexData:)(v10, v12);
    v43 = *(_QWORD *)(v0 + 56);
    sub_100007F8C(v10, v12);
    v44 = (_QWORD *)(v43 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator);
    v46 = *(_QWORD *)(v43 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator + 24);
    v45 = v44[4];
    sub_10000806C(v44, v46);
    v47 = (_QWORD *)swift_task_alloc(dword_10062FC3C);
    *(_QWORD *)(v0 + 232) = v47;
    v48 = type metadata accessor for VICALDocument(0);
    v49 = sub_100004790(&qword_100635308, (uint64_t (*)(uint64_t))&type metadata accessor for VICALDocument, (uint64_t)&protocol conformance descriptor for VICALDocument);
    sub_100004790(&qword_10063EB58, (uint64_t (*)(uint64_t))&type metadata accessor for VICALDocument, (uint64_t)&protocol conformance descriptor for VICALDocument);
    *v47 = v0;
    v47[1] = sub_1003A228C;
    return sub_100006AE4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 168), v46, v48, v45, v49);
  }
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 112);
  static VICALMilestone.missingDocument.getter(v8);
  Milestone.log()();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v13, enum case for DIPError.Code.vicalMissing(_:), v16);
  v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for DIPError(0);
  v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v22 = swift_allocError(v20, v21, 0, 0);
  v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010055CAA0, 0, v13, 0, v19, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000015, 0x800000010055CB30, 90);
  swift_willThrow(v23);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 88);
  v75 = *(_QWORD *)(v0 + 96);
  v77 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 72);
  v79 = *(_QWORD *)(v0 + 64);
  swift_getErrorValue(v22, v0 + 40, v0 + 16);
  v27 = *(_QWORD *)(v0 + 16);
  v28 = *(_QWORD *)(v0 + 24);
  v29 = *(_QWORD *)(v0 + 32);
  v30 = *(_QWORD *)(v28 - 8);
  v31 = swift_task_alloc((*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v31, v27, v28);
  v81 = v22;
  swift_errorRetain(v22);
  Error.dipErrorCode.getter(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v28);
  v83 = *(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104);
  v83(v25, enum case for DIPError.Code.coseCannotParseResponse(_:), v77);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v25, 0, 1, v77);
  v32 = v26 + *(int *)(v79 + 48);
  sub_1001320A4(v75, v26);
  sub_1001320A4(v25, v32);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v34 = v33(v26, 1, v77);
  v35 = *(_QWORD *)(v0 + 128);
  if (v34 == 1)
  {
    v36 = *(_QWORD *)(v0 + 96);
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
    sub_100008030(v36, &qword_1006335E0);
    if (v33(v32, 1, v35) == 1)
    {
      sub_100008030(*(_QWORD *)(v0 + 72), &qword_1006335E0);
      swift_task_dealloc(v31);
      v37 = v22;
LABEL_12:
      v62 = *(_QWORD *)(v0 + 144);
      v83(v62, enum case for DIPError.Code.vicalCannotParseDocument(_:), *(_QWORD *)(v0 + 128));
      swift_errorRetain(v37);
      v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v64 = type metadata accessor for DIPError(0);
      v65 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v42 = swift_allocError(v64, v65, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v37, v62, 1, v63, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000015, 0x800000010055CB30, 98);
      swift_errorRelease(v37);
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  sub_1001320A4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  if (v33(v32, 1, v35) == 1)
  {
    v38 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 96);
    v41 = *(_QWORD *)(v0 + 80);
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
    sub_100008030(v40, &qword_1006335E0);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
LABEL_10:
    sub_100008030(*(_QWORD *)(v0 + 72), &qword_100632D70);
    swift_task_dealloc(v31);
    v37 = v22;
    v42 = v22;
    goto LABEL_13;
  }
  v52 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 144);
  v53 = *(_QWORD *)(v0 + 128);
  v54 = v31;
  v56 = *(_QWORD *)(v0 + 88);
  v55 = *(_QWORD *)(v0 + 96);
  v58 = *(_QWORD *)(v0 + 72);
  v57 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v51, v32, v53);
  v59 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v51, v53, v59);
  v61 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  v61(v51, v53);
  sub_100008030(v56, &qword_1006335E0);
  sub_100008030(v55, &qword_1006335E0);
  v61(v57, v53);
  sub_100008030(v58, &qword_1006335E0);
  swift_task_dealloc(v54);
  v37 = v81;
  v42 = v81;
  if ((v60 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  v66 = *(_QWORD *)(v0 + 216);
  v67 = *(_QWORD *)(v0 + 192);
  v68 = *(_QWORD *)(v0 + 168);
  v69 = *(_QWORD *)(v0 + 144);
  v70 = *(_QWORD *)(v0 + 120);
  v76 = *(_QWORD *)(v0 + 96);
  v78 = *(_QWORD *)(v0 + 88);
  v80 = *(_QWORD *)(v0 + 80);
  v82 = *(_QWORD *)(v0 + 72);
  v83(v69, enum case for DIPError.Code.vicalMissing(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v42);
  v71 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v72 = type metadata accessor for DIPError(0);
  v73 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v72, v73, 0, 0);
  v74 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010055CB50, v42, v69, 0, v71, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000015, 0x800000010055CB30, 100);
  swift_willThrow(v74);
  swift_errorRelease(v42);
  swift_errorRelease(v37);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A228C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003A23BC;
  else
    v3 = sub_1003A22F0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003A22F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A23BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 88);
  v52 = *(_QWORD *)(v0 + 96);
  v54 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 72);
  v56 = *(_QWORD *)(v0 + 64);
  swift_getErrorValue(v4, v0 + 40, v0 + 16);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v8, v9);
  v59 = v4;
  swift_errorRetain(v4);
  Error.dipErrorCode.getter(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v9);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104);
  v13(v6, enum case for DIPError.Code.coseCannotParseResponse(_:), v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v54);
  v14 = v7 + *(int *)(v56 + 48);
  sub_1001320A4(v52, v7);
  sub_1001320A4(v6, v14);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v16 = v15(v7, 1, v54);
  v17 = *(_QWORD *)(v0 + 128);
  if (v16 == 1)
  {
    v18 = *(_QWORD *)(v0 + 96);
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
    sub_100008030(v18, &qword_1006335E0);
    if (v15(v14, 1, v17) == 1)
    {
      sub_100008030(*(_QWORD *)(v0 + 72), &qword_1006335E0);
      swift_task_dealloc(v12);
      v19 = v59;
LABEL_8:
      v36 = *(_QWORD *)(v0 + 144);
      v13(v36, enum case for DIPError.Code.vicalCannotParseDocument(_:), *(_QWORD *)(v0 + 128));
      swift_errorRetain(v19);
      v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v38 = v13;
      v39 = type metadata accessor for DIPError(0);
      v40 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v41 = v39;
      v13 = v38;
      v25 = swift_allocError(v41, v40, 0, 0);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v36, 1, v37, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000015, 0x800000010055CB30, 98);
      swift_errorRelease(v19);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  v20 = v13;
  sub_1001320A4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  if (v15(v14, 1, v17) == 1)
  {
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 80);
    sub_100008030(*(_QWORD *)(v0 + 88), &qword_1006335E0);
    sub_100008030(v23, &qword_1006335E0);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    v13 = v20;
LABEL_6:
    sub_100008030(*(_QWORD *)(v0 + 72), &qword_100632D70);
    swift_task_dealloc(v12);
    v19 = v59;
    v25 = v59;
    goto LABEL_9;
  }
  v27 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 96);
  v57 = v12;
  v32 = *(_QWORD *)(v0 + 72);
  v31 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v26, v14, v28);
  v33 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
  v34 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v26, v28, v33);
  v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v35(v26, v28);
  sub_100008030(v30, &qword_1006335E0);
  sub_100008030(v29, &qword_1006335E0);
  v35(v31, v28);
  sub_100008030(v32, &qword_1006335E0);
  swift_task_dealloc(v57);
  v19 = v59;
  v25 = v59;
  v13 = v20;
  if ((v34 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v42 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 192);
  v44 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 144);
  v46 = *(_QWORD *)(v0 + 120);
  v53 = *(_QWORD *)(v0 + 96);
  v55 = *(_QWORD *)(v0 + 88);
  v58 = *(_QWORD *)(v0 + 80);
  v60 = *(_QWORD *)(v0 + 72);
  v13(v45, enum case for DIPError.Code.vicalMissing(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v25);
  v47 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v48 = type metadata accessor for DIPError(0);
  v49 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v48, v49, 0, 0);
  v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x800000010055CB50, v25, v45, 0, v47, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000015, 0x800000010055CB30, 100);
  swift_willThrow(v50);
  swift_errorRelease(v25);
  swift_errorRelease(v19);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A290C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1[11] = v0;
  v2 = sub_100004828(&qword_100632D70);
  v1[12] = v2;
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_1006335E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v3);
  v1[15] = swift_task_alloc(v3);
  v1[16] = swift_task_alloc(v3);
  v4 = type metadata accessor for VICALDocument(0);
  v1[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[18] = v5;
  v1[19] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for COSE_Sign1(0);
  v1[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[21] = v7;
  v1[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v1[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[24] = v9;
  v1[25] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v1[26] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[27] = v11;
  v1[28] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URLRequest(0);
  v1[29] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[30] = v13;
  v1[31] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost.Config(0);
  v1[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost(0);
  v1[33] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[34] = v16;
  v1[35] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Milestone(0);
  v1[36] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[37] = v18;
  v1[38] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Logger(0);
  v1[39] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v1[40] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[41] = swift_task_alloc(v21);
  v1[42] = swift_task_alloc(v21);
  v1[43] = swift_task_alloc(v21);
  return swift_task_switch(sub_1003A2B28, 0, 0);
}

uint64_t sub_1003A2B28(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, char, char);
  uint64_t v36;

  v2 = (void *)v1[11];
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v32 = v1[39];
    v33 = v1[43];
    v30 = v1[26];
    v31 = v1[40];
    v5 = (void *)v1[11];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v36 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v30, v8);
    v11 = v10;
    v1[10] = sub_1000E3AC8(v9, v10, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v1 + 11, v6 + 4);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "VICALWebService loadVICALDocument at URL %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v13 = v12(v33, v32);
  }
  else
  {
    v14 = v1[43];
    v15 = v1[39];
    v16 = v1[40];
    v17 = (void *)v1[11];

    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    v13 = v12(v14, v15);
  }
  v1[44] = v12;
  v19 = v1[37];
  v18 = v1[38];
  v20 = v1[36];
  v21 = v1[32];
  v23 = v1[27];
  v22 = v1[28];
  v34 = v1[26];
  v24 = v1[11];
  static VICALMilestone.loadDocument.getter(v13);
  Milestone.log()();
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
  v1[45] = v25;
  v26 = v25(v18, v20);
  static DaemonSignposts.VICAL.loadDocument.getter(v26);
  DIPSignpost.init(_:)(v21);
  v27 = OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  v1[46] = OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v24 + v27, v34);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v22, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v35 = (uint64_t (*)(uint64_t, uint64_t, char, char))((char *)&dword_100643F70 + dword_100643F70);
  v28 = (_QWORD *)swift_task_alloc(unk_100643F74);
  v1[47] = v28;
  *v28 = v1;
  v28[1] = sub_1003A2E08;
  return v35(v1[31], (uint64_t)_swiftEmptyArrayStorage, 0, 0);
}

uint64_t sub_1003A2E08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 376);
  *(_QWORD *)(v6 + 384) = a1;
  *(_QWORD *)(v6 + 392) = a2;
  *(_BYTE *)(v6 + 448) = a4;
  *(_QWORD *)(v6 + 400) = a3;
  *(_QWORD *)(v6 + 408) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_1003A3684;
  else
    v8 = sub_1003A2E7C;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1003A2E7C()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void (*v56)(uint64_t, uint64_t);
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, _QWORD, uint64_t);
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v1 = *(_BYTE *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(void **)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 384);
  sub_100022948(v4, v2);
  v5 = v3;
  v6 = sub_1003A4994(v4, v2);
  v8 = v7;
  *(_QWORD *)(v0 + 416) = v6;
  *(_QWORD *)(v0 + 424) = v7;
  v9 = sub_100007F8C(v4, v2);
  if ((v1 & 1) != 0)
    static VICALMilestone.cacheReturnedDocument.getter(v9);
  else
    static VICALMilestone.cdnReturnedDocument.getter(v9);
  v10 = *(_QWORD *)(v0 + 408);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  Milestone.log()();
  v11(v12, v13);
  sub_100022948(v6, v8);
  COSE_Sign1.init(fromHexData:)(v6, v8);
  if (!v10)
  {
    v37 = (_QWORD *)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator);
    v39 = v37[3];
    v38 = v37[4];
    sub_10000806C(v37, v39);
    v40 = (_QWORD *)swift_task_alloc(dword_10062FC3C);
    *(_QWORD *)(v0 + 432) = v40;
    v41 = sub_100004790(&qword_100635308, (uint64_t (*)(uint64_t))&type metadata accessor for VICALDocument, (uint64_t)&protocol conformance descriptor for VICALDocument);
    sub_100004790(&qword_10063EB58, (uint64_t (*)(uint64_t))&type metadata accessor for VICALDocument, (uint64_t)&protocol conformance descriptor for VICALDocument);
    *v40 = v0;
    v40[1] = sub_1003A39F4;
    return sub_100006AE4(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), v39, *(_QWORD *)(v0 + 136), v38, v41);
  }
  v14 = v10;
  v15 = *(void **)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 200);
  v81 = enum case for DIPError.Code.vicalCannotParseDocument(_:);
  (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 192) + 104))(v16);
  v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v95 = type metadata accessor for DIPError(0);
  v91 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v18 = swift_allocError(v95, v91, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x800000010055CB90, 0, v16, 0, v17, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000019, 0x800000010055CBC0, 185);
  v92 = v18;
  swift_willThrow(v19);
  swift_errorRelease(v14);
  sub_100007F8C(v6, v8);

  v87 = (char *)(v0 + 448);
  if ((*(_BYTE *)(v0 + 448) & 1) != 0)
  {
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v20 = (void *)qword_100670810;
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v20, "removeCachedResponseForRequest:", isa);

  }
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 96);
  v27 = *(_QWORD *)(v0 + 104);
  swift_getErrorValue(v92, v0 + 72, v0 + 16);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104);
  v28(v25, enum case for DIPError.Code.coseCannotParseResponse(_:), v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  v29 = v27 + *(int *)(v26 + 48);
  sub_1001320A4(v24, v27);
  sub_1001320A4(v25, v29);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  v31 = v30(v27, 1, v22);
  v32 = *(_QWORD *)(v0 + 184);
  v80 = v28;
  v33 = v28;
  if (v31 != 1)
  {
    sub_1001320A4(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    v36 = v95;
    if (v30(v29, 1, v32) != 1)
    {
      v49 = *(_QWORD *)(v0 + 192);
      v48 = *(_QWORD *)(v0 + 200);
      v50 = *(_QWORD *)(v0 + 184);
      v52 = *(_QWORD *)(v0 + 120);
      v51 = *(_QWORD *)(v0 + 128);
      v53 = *(_QWORD *)(v0 + 112);
      v84 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v48, v29, v50);
      v54 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
      v55 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v48, v50, v54);
      v56 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v56(v48, v50);
      sub_100008030(v52, &qword_1006335E0);
      sub_100008030(v51, &qword_1006335E0);
      v56(v53, v50);
      v47 = sub_100008030(v84, &qword_1006335E0);
      v35 = v92;
      if ((v55 & 1) != 0)
        goto LABEL_17;
LABEL_18:
      v62 = *v87;
      v63 = *(_QWORD *)(v0 + 392);
      v64 = *(void **)(v0 + 400);
      v65 = *(_QWORD *)(v0 + 384);
      swift_willThrow(v47);
      DIPSignpost.end(fromCache:)(v62);

      sub_100007F8C(v65, v63);
      goto LABEL_19;
    }
    v43 = *(_QWORD *)(v0 + 184);
    v44 = *(_QWORD *)(v0 + 192);
    v45 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 112);
    sub_100008030(*(_QWORD *)(v0 + 120), &qword_1006335E0);
    sub_100008030(v45, &qword_1006335E0);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v43);
    v35 = v92;
LABEL_15:
    v47 = sub_100008030(*(_QWORD *)(v0 + 104), &qword_100632D70);
    goto LABEL_18;
  }
  v34 = *(_QWORD *)(v0 + 128);
  sub_100008030(*(_QWORD *)(v0 + 120), &qword_1006335E0);
  sub_100008030(v34, &qword_1006335E0);
  v35 = v92;
  v36 = v95;
  if (v30(v29, 1, v32) != 1)
    goto LABEL_15;
  sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
LABEL_17:
  v57 = *v87;
  v85 = *(void **)(v0 + 400);
  v93 = *(_QWORD *)(v0 + 392);
  v88 = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 200);
  v33(v58, v81, *(_QWORD *)(v0 + 184));
  swift_errorRetain(v35);
  v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v60 = swift_allocError(v36, v91, 0, 0);
  v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v58, 1, v59, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 161);
  swift_willThrow(v61);
  swift_errorRelease(v35);
  DIPSignpost.end(fromCache:)(v57);

  sub_100007F8C(v88, v93);
  v35 = v60;
LABEL_19:
  v74 = *(_QWORD *)(v0 + 344);
  v75 = *(_QWORD *)(v0 + 336);
  v76 = *(_QWORD *)(v0 + 328);
  v77 = *(_QWORD *)(v0 + 304);
  v67 = *(_QWORD *)(v0 + 272);
  v66 = *(_QWORD *)(v0 + 280);
  v68 = *(_QWORD *)(v0 + 264);
  v69 = *(_QWORD *)(v0 + 248);
  v78 = *(_QWORD *)(v0 + 256);
  v79 = *(_QWORD *)(v0 + 224);
  v70 = *(_QWORD *)(v0 + 200);
  v71 = *(_QWORD *)(v0 + 184);
  v82 = *(_QWORD *)(v0 + 176);
  v83 = *(_QWORD *)(v0 + 152);
  v86 = *(_QWORD *)(v0 + 128);
  v89 = *(_QWORD *)(v0 + 120);
  v90 = *(_QWORD *)(v0 + 112);
  v94 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v69, *(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  v80(v70, enum case for DIPError.Code.vicalCouldNotFetch(_:), v71);
  swift_errorRetain(v35);
  v72 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v95, v91, 0, 0);
  v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v70, 0, v72, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 167);
  swift_willThrow(v73);
  swift_errorRelease(v35);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v66);
  swift_task_dealloc(v78);
  swift_task_dealloc(v69);
  swift_task_dealloc(v79);
  swift_task_dealloc(v70);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v86);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v94);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A3684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v6 = sub_100004790((unint64_t *)&qword_100633BE8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104);
  v31(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v26, v10, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x800000010055CBE0, v1, v3, 0, v9, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 124);
  swift_willThrow(v12);
  swift_errorRelease(v1);
  DIPSignpost.end(fromCache:)(0);
  v23 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 328);
  v25 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 248);
  v27 = *(_QWORD *)(v0 + 256);
  v28 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 184);
  v29 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 128);
  v33 = *(_QWORD *)(v0 + 120);
  v34 = *(_QWORD *)(v0 + 112);
  v35 = *(_QWORD *)(v0 + 104);
  (*(void (**)(void))(*(_QWORD *)(v0 + 240) + 8))();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v31(v16, enum case for DIPError.Code.vicalCouldNotFetch(_:), v17);
  swift_errorRetain(v11);
  v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v26, v10, 0, 0);
  v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v11, v16, 0, v18, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 167);
  swift_willThrow(v19);
  swift_errorRelease(v11);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v13);
  swift_task_dealloc(v27);
  swift_task_dealloc(v22);
  swift_task_dealloc(v28);
  swift_task_dealloc(v16);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A39F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {

    v4 = sub_1003A3FF4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 144) + 8))(*(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 136));
    v4 = sub_1003A3A70;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A3A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  void *object;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  Class isa;
  Class v30;
  id v31;
  void *v32;
  Class v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  Class v43;
  Class v44;
  id v45;
  void *v46;
  Class v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if ((*(_BYTE *)(v0 + 448) & 1) != 0)
  {

    v2 = defaultLogger()(v1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "VICALWebService found VICAL response in cache", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 312);
    sub_100007F8C(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));

    v6(v7, v8);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v10 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 288);
    static VICALMilestone.storeDocument.getter();
    Milestone.log()();
    v9(v10, v11);
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v13._countAndFlagsBits = 0xD000000000000022;
    v13._object = (void *)0x800000010055CC20;
    object = NSUserDefaults.internalString(forKey:)(v13).value._object;

    if (object
      && (v15 = (void *)sub_1004A773C(0xD000000000000019, 0x8000000100546D20), swift_bridgeObjectRelease(object),
                                                                                   v15))
    {

      v17 = defaultLogger()(v16);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.debug.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "VICALWebService cache control override found, overriding and caching.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }
      v21 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
      v22 = *(_QWORD *)(v0 + 336);
      v23 = *(_QWORD *)(v0 + 312);

      v21(v22, v23);
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v25 = *(_QWORD *)(v0 + 416);
      v24 = *(_QWORD *)(v0 + 424);
      v26 = qword_100670810;
      v27 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_100022948(v25, v24);
      v28 = v15;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v30 = (Class)objc_msgSend(v27, "initWithResponse:data:", v28, isa);
      sub_100007F8C(v25, v24);

      v31 = sub_10044D3C8(v30, 1);
      if (v31)
      {
        v32 = v31;
        v33 = URLRequest._bridgeToObjectiveC()().super.isa;
        v34 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 56) = v26;
        *(_QWORD *)(v0 + 64) = v34;
        objc_msgSendSuper2((objc_super *)(v0 + 56), "storeCachedResponse:forRequest:", v32, v33);

        v30 = v33;
      }
      v36 = *(_QWORD *)(v0 + 416);
      v35 = *(_QWORD *)(v0 + 424);

      sub_100007F8C(v36, v35);
    }
    else
    {
      if (qword_10062F580 != -1)
        swift_once(&qword_10062F580, sub_10044C284);
      v38 = *(_QWORD *)(v0 + 416);
      v37 = *(_QWORD *)(v0 + 424);
      v39 = *(void **)(v0 + 400);
      v40 = qword_100670810;
      v41 = objc_allocWithZone((Class)NSCachedURLResponse);
      v42 = v39;
      sub_100022948(v38, v37);
      v43 = Data._bridgeToObjectiveC()().super.isa;
      v44 = (Class)objc_msgSend(v41, "initWithResponse:data:", v42, v43);
      sub_100007F8C(v38, v37);

      v45 = sub_10044D3C8(v44, 1);
      if (v45)
      {
        v46 = v45;
        v47 = URLRequest._bridgeToObjectiveC()().super.isa;
        v48 = type metadata accessor for DIPURLCache();
        *(_QWORD *)(v0 + 40) = v40;
        *(_QWORD *)(v0 + 48) = v48;
        objc_msgSendSuper2((objc_super *)(v0 + 40), "storeCachedResponse:forRequest:", v46, v47);

        v44 = v47;
      }
      v50 = *(_QWORD *)(v0 + 416);
      v49 = *(_QWORD *)(v0 + 424);
      v51 = *(void **)(v0 + 400);

      sub_100007F8C(v50, v49);
    }
  }
  v52 = *(unsigned __int8 *)(v0 + 448);
  v54 = *(_QWORD *)(v0 + 392);
  v53 = *(void **)(v0 + 400);
  v55 = *(_QWORD *)(v0 + 384);
  v63 = *(_QWORD *)(v0 + 344);
  v64 = *(_QWORD *)(v0 + 336);
  v65 = *(_QWORD *)(v0 + 328);
  v66 = *(_QWORD *)(v0 + 304);
  v57 = *(_QWORD *)(v0 + 272);
  v56 = *(_QWORD *)(v0 + 280);
  v62 = *(_QWORD *)(v0 + 264);
  v58 = *(_QWORD *)(v0 + 248);
  v60 = *(_QWORD *)(v0 + 232);
  v59 = *(_QWORD *)(v0 + 240);
  v68 = *(_QWORD *)(v0 + 256);
  v69 = *(_QWORD *)(v0 + 224);
  v67 = *(_QWORD *)(v0 + 176);
  v70 = *(_QWORD *)(v0 + 200);
  v71 = *(_QWORD *)(v0 + 152);
  v72 = *(_QWORD *)(v0 + 128);
  v73 = *(_QWORD *)(v0 + 120);
  v74 = *(_QWORD *)(v0 + 112);
  v75 = *(_QWORD *)(v0 + 104);
  (*(void (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
  DIPSignpost.end(fromCache:)(v52);

  sub_100007F8C(v55, v54);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v56);
  swift_task_dealloc(v68);
  swift_task_dealloc(v58);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v67);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v52);
}

uint64_t sub_1003A3FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(uint64_t, uint64_t);
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD, uint64_t);

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  sub_100007F8C(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 440);
  if ((*(_BYTE *)(v0 + 448) & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 440);
    if (qword_10062F580 != -1)
      swift_once(&qword_10062F580, sub_10044C284);
    v6 = (void *)qword_100670810;
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, "removeCachedResponseForRequest:", isa);

    v4 = v5;
  }
  v69 = (char *)(v0 + 448);
  v9 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  v72 = v4;
  swift_getErrorValue(v4, v0 + 72, v0 + 16);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104);
  v14(v11, enum case for DIPError.Code.coseCannotParseResponse(_:), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v9);
  v15 = v12 + *(int *)(v13 + 48);
  sub_1001320A4(v10, v12);
  sub_1001320A4(v11, v15);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v17 = v16(v12, 1, v9);
  v18 = *(_QWORD *)(v0 + 184);
  v74 = v14;
  if (v17 != 1)
  {
    sub_1001320A4(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    if (v16(v15, 1, v18) != 1)
    {
      v25 = *(_QWORD *)(v0 + 192);
      v26 = *(_QWORD *)(v0 + 200);
      v27 = *(_QWORD *)(v0 + 184);
      v29 = *(_QWORD *)(v0 + 120);
      v28 = *(_QWORD *)(v0 + 128);
      v31 = *(_QWORD *)(v0 + 104);
      v30 = *(_QWORD *)(v0 + 112);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v26, v15, v27);
      v32 = sub_100004790(&qword_100632D80, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v26, v27, v32);
      v34 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v34(v26, v27);
      sub_100008030(v29, &qword_1006335E0);
      sub_100008030(v28, &qword_1006335E0);
      v34(v30, v27);
      v24 = sub_100008030(v31, &qword_1006335E0);
      if ((v33 & 1) != 0)
        goto LABEL_12;
LABEL_13:
      v42 = *v69;
      v44 = *(_QWORD *)(v0 + 392);
      v43 = *(void **)(v0 + 400);
      v45 = *(_QWORD *)(v0 + 384);
      v40 = v72;
      swift_willThrow(v24);
      DIPSignpost.end(fromCache:)(v42);

      sub_100007F8C(v45, v44);
      goto LABEL_14;
    }
    v21 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 112);
    sub_100008030(*(_QWORD *)(v0 + 120), &qword_1006335E0);
    sub_100008030(v22, &qword_1006335E0);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v21);
LABEL_10:
    v24 = sub_100008030(*(_QWORD *)(v0 + 104), &qword_100632D70);
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(v0 + 128);
  sub_100008030(*(_QWORD *)(v0 + 120), &qword_1006335E0);
  sub_100008030(v19, &qword_1006335E0);
  if (v16(v15, 1, v18) != 1)
    goto LABEL_10;
  sub_100008030(*(_QWORD *)(v0 + 104), &qword_1006335E0);
LABEL_12:
  v35 = *v69;
  v70 = *(_QWORD *)(v0 + 392);
  v65 = *(void **)(v0 + 400);
  v67 = *(_QWORD *)(v0 + 384);
  v36 = *(_QWORD *)(v0 + 200);
  v74(v36, enum case for DIPError.Code.vicalCannotParseDocument(_:), *(_QWORD *)(v0 + 184));
  swift_errorRetain(v72);
  v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v38 = type metadata accessor for DIPError(0);
  v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v40 = swift_allocError(v38, v39, 0, 0);
  v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v72, v36, 1, v37, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 161);
  swift_willThrow(v41);
  swift_errorRelease(v72);
  DIPSignpost.end(fromCache:)(v35);

  sub_100007F8C(v67, v70);
LABEL_14:
  v57 = *(_QWORD *)(v0 + 344);
  v58 = *(_QWORD *)(v0 + 336);
  v59 = *(_QWORD *)(v0 + 328);
  v60 = *(_QWORD *)(v0 + 304);
  v46 = *(_QWORD *)(v0 + 272);
  v47 = *(_QWORD *)(v0 + 280);
  v48 = *(_QWORD *)(v0 + 264);
  v49 = *(_QWORD *)(v0 + 248);
  v61 = *(_QWORD *)(v0 + 256);
  v62 = *(_QWORD *)(v0 + 224);
  v50 = *(_QWORD *)(v0 + 200);
  v51 = *(_QWORD *)(v0 + 184);
  v63 = *(_QWORD *)(v0 + 176);
  v64 = *(_QWORD *)(v0 + 152);
  v66 = *(_QWORD *)(v0 + 128);
  v68 = *(_QWORD *)(v0 + 120);
  v71 = *(_QWORD *)(v0 + 112);
  v73 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v49, *(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
  v74(v50, enum case for DIPError.Code.vicalCouldNotFetch(_:), v51);
  swift_errorRetain(v40);
  v52 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v53 = type metadata accessor for DIPError(0);
  v54 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v53, v54, 0, 0);
  v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v40, v50, 0, v52, 0xD000000000000050, 0x800000010055CAD0, 0xD000000000000013, 0x800000010055CC00, 167);
  swift_willThrow(v55);
  swift_errorRelease(v40);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v47);
  swift_task_dealloc(v61);
  swift_task_dealloc(v49);
  swift_task_dealloc(v62);
  swift_task_dealloc(v50);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A45F8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  void *v16;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v0 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v0 - 8);
  v21 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLRequest(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = defaultLogger()(v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    v19 = v3;
    v15 = v14;
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "VICALWebService removeCache", v14, 2u);
    v3 = v19;
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v2, v22 + OBJC_IVAR____TtC8coreidvd15VICALWebService_url, v21);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v2, 0, 60.0);
  URLRequest.cachePolicy.setter(1);
  URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  if (qword_10062F580 != -1)
    swift_once(&qword_10062F580, sub_10044C284);
  v16 = (void *)qword_100670810;
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "removeCachedResponseForRequest:", isa);

  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v3);
}

uint64_t sub_1003A4840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8coreidvd15VICALWebService_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd15VICALWebService_validator));
}

uint64_t sub_1003A48DC()
{
  return type metadata accessor for VICALWebService(0);
}

uint64_t type metadata accessor for VICALWebService(uint64_t a1)
{
  uint64_t result;

  result = qword_10063EB40;
  if (!qword_10063EB40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VICALWebService);
  return result;
}

uint64_t sub_1003A4920(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 120);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1003A4994(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  Swift::String v17;
  Swift::String_optional v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t countAndFlagsBits;
  uint64_t v55;

  v4 = type metadata accessor for String.Encoding(0);
  v55 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v53 = (char *)&v50 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v17._object = (void *)0x800000010055CC50;
  v17._countAndFlagsBits = 0xD000000000000026;
  v18 = NSUserDefaults.internalString(forKey:)(v17);
  countAndFlagsBits = v18.value._countAndFlagsBits;

  if (!v18.value._object)
  {
LABEL_8:
    sub_100022948(a1, a2);
    return a1;
  }
  v51 = v11;
  v52 = v4;
  v20 = defaultLogger()(v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = a1;
    v24 = a2;
    v25 = v7;
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "VICALWebService found override document string. Attempting to parse", v26, 2u);
    v27 = v26;
    v7 = v25;
    a2 = v24;
    a1 = v23;
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v29 = v28(v15, v7);
  static String.Encoding.utf8.getter(v29);
  v30 = String.data(using:allowLossyConversion:)(v6, 0, countAndFlagsBits, v18.value._object);
  v32 = v31;
  swift_bridgeObjectRelease(v18.value._object);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v6, v52);
  if (v32 >> 60 == 15)
  {
    v34 = v51;
    v35 = defaultLogger()(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = v7;
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "VICALWebService could not convert override string to data. Returning same data", v39, 2u);
      v40 = v39;
      v7 = v38;
      v34 = v51;
      swift_slowDealloc(v40, -1, -1);
    }

    v28(v34, v7);
    goto LABEL_8;
  }
  v41 = (void (*)(char *, uint64_t))v28;
  v42 = v53;
  v43 = defaultLogger()(v33);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = v7;
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "VICALWebService parsed override string. Using instead of returned data", v47, 2u);
    v48 = v47;
    v7 = v46;
    swift_slowDealloc(v48, -1, -1);
  }

  v41(v42, v7);
  return v30;
}

uint64_t sub_1003A4D14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004828((uint64_t *)&unk_100633430);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v11 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v11 = v10;
    v11[1] = v12;
    return swift_continuation_throwingResume(v3);
  }
}

char *sub_1003A4D9C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  objc_class *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  objc_super v36;
  _QWORD *v37;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v1 - 8);
  v34 = v1;
  __chkstk_darwin(v1);
  v35 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionTimeout] = 0x403E000000000000;
  v13 = &v0[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID];
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v0;
  v16 = defaultLogger()(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "IdentityWatchSessionManagementListener init called", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (qword_10062F588 != -1)
    swift_once(&qword_10062F588, sub_100455008);
  v20 = *(void **)(qword_100670818 + 16);
  *(_QWORD *)&v15[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore] = v20;
  sub_10001CFF8(0, (unint64_t *)&qword_1006308C0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v37 = _swiftEmptyArrayStorage;
  v21 = sub_100004790((unint64_t *)&qword_10062FF40, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100004828((uint64_t *)&unk_100636400);
  v23 = sub_10001D030();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v22, v23, v3, v21);
  v24 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v35, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x800000010055D5E0, v8, v5, v24, 0);
  *(_QWORD *)&v15[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingQueue] = v25;
  v26 = objc_msgSend(objc_allocWithZone((Class)SFAuthenticationManager), "initWithQueue:", v25);
  *(_QWORD *)&v15[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager] = v26;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_deviceLockStateMonitor] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DIPLockStateMonitor()), "init");
  *(_QWORD *)&v15[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DIPWatch()), "init");

  v27 = (objc_class *)type metadata accessor for IdentityWatchSessionManagementListener(0);
  v36.receiver = v15;
  v36.super_class = v27;
  v28 = (char *)objc_msgSendSuper2(&v36, "init");
  v29 = *(void **)&v28[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager];
  v30 = v28;
  objc_msgSend(v29, "setDelegate:", v30);
  swift_unknownObjectWeakAssign(*(_QWORD *)&v30[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_deviceLockStateMonitor]+ OBJC_IVAR____TtC8coreidvd19DIPLockStateMonitor_delegate, v30);
  v31 = *(_QWORD *)&v30[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService]
      + OBJC_IVAR____TtC8coreidvd8DIPWatch_delegate;
  *(_QWORD *)(v31 + 8) = &off_1006155D0;
  swift_unknownObjectWeakAssign(v31, v30);

  return v30;
}

void sub_1003A51D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  NSObject *v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint8_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  sub_1000D6840(2);
  if (!v3)
  {
    v16 = v15;
    v44 = v9;
    v45 = v12;
    v47 = a2;
    v42 = a1;
    if (v15)
    {
      v17 = v15 & 0xFFFFFFFFFFFFFF8;
      if (v15 >> 62)
        goto LABEL_34;
      v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v18)
      {
        v46 = v17;
        v40 = v8;
        v43 = v4;
        v41 = 0;
        v8 = 0;
        v48 = v16 & 0xC000000000000001;
LABEL_6:
        v17 = v8;
        while (1)
        {
          if (v48)
          {
            v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v16);
          }
          else
          {
            if (v17 >= *(_QWORD *)(v46 + 16))
              goto LABEL_33;
            v19 = *(id *)(v16 + 8 * v17 + 32);
          }
          v20 = v19;
          v8 = v17 + 1;
          if (__OFADD__(v17, 1))
            break;
          v21 = -[NSObject pairingID](v19, "pairingID");
          if (v21)
          {
            v4 = (uint64_t)v21;
            v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            v24 = v23;

            if (v22 == v47 && v24 == a3)
            {
              swift_bridgeObjectRelease(a3);
LABEL_21:
              objc_msgSend(*(id *)(v42 + 16), "deleteObject:", v20, v40);
              v26 = v43;
              v27 = sub_1000D6288();
              v43 = v26;
              if (v26)
              {

                swift_bridgeObjectRelease(v16);
                return;
              }
              v28 = defaultLogger()(v27);
              v29 = Logger.logObject.getter(v28);
              v30 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v29, v30))
              {
                v4 = swift_slowAlloc(2, -1);
                *(_WORD *)v4 = 0;
                _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully deleted proofing session for watch", (uint8_t *)v4, 2u);
                swift_slowDealloc(v4, -1, -1);
                v31 = v20;
              }
              else
              {
                v31 = v29;
                v29 = v20;
              }

              (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v40);
              v41 = 1;
              if (v8 == v18)
              {
                swift_bridgeObjectRelease(v16);
                v32 = 1;
                goto LABEL_40;
              }
              goto LABEL_6;
            }
            v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v47, a3, 0);
            swift_bridgeObjectRelease(v24);
            if ((v4 & 1) != 0)
              goto LABEL_21;
          }

          ++v17;
          if (v8 == v18)
          {
            swift_bridgeObjectRelease(v16);
            v32 = v41;
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        if (v16 >= 0)
          v39 = v17;
        else
          v39 = v16;
        swift_bridgeObjectRetain(v16);
        v18 = _CocoaArrayWrapper.endIndex.getter(v39);
        swift_bridgeObjectRelease(v16);
      }
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v33 = defaultLogger()(0);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      v36 = os_log_type_enabled(v34, v35);
      v37 = v44;
      if (v36)
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error occurred in retrieving proofing sessions for watch", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v8);
    }
    v32 = 0;
LABEL_40:
    type metadata accessor for DaemonAnalytics(0);
    static DaemonAnalytics.sendWatchUnpairedEvent(hasMatchingSession:)(v32 & 1);
  }
}

uint64_t sub_1003A558C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[29] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[30] = v5;
  v3[31] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A55F0, 0, 0);
}

uint64_t sub_1003A55F0()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v1 = qword_1006702A0;
  v2 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 52;
  os_unfair_lock_lock(v2 + 52);
  sub_100139D14(v3, v1, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v4);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 256) = v8;
  swift_retain(v8);
  sub_10001D410((_QWORD *)(v0 + 16));
  v9 = *(_QWORD *)(*(_QWORD *)(v5
                             + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService)
                 + OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession);
  *(_QWORD *)(v0 + 264) = v9;
  v10 = (_QWORD *)swift_allocObject(&unk_1006159D8, 48, 7);
  *(_QWORD *)(v0 + 272) = v10;
  v10[2] = v7;
  v10[3] = v6;
  v10[4] = v9;
  v10[5] = 0x403E000000000000;
  v11 = swift_allocObject(&unk_100615A00, 32, 7);
  *(_QWORD *)(v0 + 280) = v11;
  *(_QWORD *)(v11 + 16) = &unk_10063EDA8;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain_n(v9, 2);
  swift_bridgeObjectRetain(v6);
  swift_retain(v10);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 288) = v13;
  *v13 = v0;
  v13[1] = sub_1003A57A0;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_1003A57A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003A5858;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 272);
    swift_release(*(_QWORD *)(v2 + 280));
    swift_release(v5);
    v4 = sub_1003A5814;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A5814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A5858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 280));
  swift_release(v3);
  swift_release(v4);
  v8 = swift_release(v2);
  defaultLogger()(v8);
  DIPRecordError(_:message:log:)(v1, 0xD000000000000035, 0x800000010055D4A0, v5);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A5918(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(double *)(v6 + 112) = a1;
  *(_QWORD *)(v6 + 96) = a5;
  *(_QWORD *)(v6 + 104) = a6;
  *(_QWORD *)(v6 + 80) = a3;
  *(_QWORD *)(v6 + 88) = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 120) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 128) = v8;
  *(_QWORD *)(v6 + 136) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v6 + 144) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 152) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 160) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 168) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 176) = swift_task_alloc(v11);
  v12 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v6 + 184) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 192) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 200) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v14);
  return swift_task_switch(sub_1003A59FC, 0, 0);
}

uint64_t sub_1003A59FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = (_QWORD *)swift_allocObject(&unk_100615A28, 40, 7);
  *(_QWORD *)(v0 + 216) = v7;
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = v5;
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v6 + 16);
  v8 = swift_allocObject(&unk_100615A50, 32, 7);
  *(_QWORD *)(v0 + 232) = v8;
  *(_QWORD *)(v8 + 16) = sub_1003B5EA4;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 336) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 104);
  *(_QWORD *)(v0 + 240) = v10;
  swift_retain(v6);
  v11 = swift_bridgeObjectRetain(v5);
  v10(v1, v9, v3, v11);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 248) = v13;
  v14 = sub_100004828(&qword_10063EDC0);
  *v13 = v0;
  v13[1] = sub_1003A5B3C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 40, *(_QWORD *)(v0 + 208), sub_1003B5EC0, v8, v14);
}

uint64_t sub_1003A5B3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[29];
    (*(void (**)(_QWORD, _QWORD))(v2[24] + 8))(v2[26], v2[23]);
    swift_release(v4);
    v5 = sub_1003A5BF4;
  }
  else
  {
    v6 = v2[29];
    v7 = v2[26];
    v8 = v2[27];
    v9 = v2[23];
    v10 = *(void (**)(uint64_t, uint64_t))(v2[24] + 8);
    v2[33] = v10;
    v10(v7, v9);
    swift_release(v6);
    swift_release(v8);
    v2[34] = v2[5];
    v5 = sub_1003A5C74;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003A5BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A5C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v1 + 96);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 152);
    v38 = *(_QWORD *)(v1 + 144);
    v40 = *(_QWORD *)(v1 + 176);
    v8 = *(_QWORD *)(v1 + 88);
    v7 = *(_QWORD *)(v1 + 96);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v41 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 72) = sub_1000E3AC8(v8, v7, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to validate prearm trust for watch with pairingID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v40, v38);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 176);
    v13 = *(_QWORD *)(v1 + 144);
    v14 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 96), 2);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  *(_QWORD *)(v1 + 280) = v11;
  v15 = *(void **)(v1 + 272);
  if (!v15)
    goto LABEL_9;
  v16 = v15;
  v17 = objc_msgSend(v16, "requiresDeletion");
  if (!(_DWORD)v17)
  {

LABEL_9:
    v31 = *(_QWORD *)(v1 + 200);
    v33 = *(_QWORD *)(v1 + 168);
    v32 = *(_QWORD *)(v1 + 176);
    v34 = *(_QWORD *)(v1 + 160);
    v35 = *(_QWORD *)(v1 + 136);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v18 = *(_QWORD *)(v1 + 96);
  defaultLogger()(v17);
  v19 = swift_bridgeObjectRetain_n(v18, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v1 + 168);
  v24 = *(_QWORD *)(v1 + 144);
  v25 = *(_QWORD *)(v1 + 96);
  if (v22)
  {
    v26 = *(_QWORD *)(v1 + 88);
    v39 = *(_QWORD *)(v1 + 168);
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v41 = v28;
    *(_DWORD *)v27 = 136315138;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v1 + 64) = sub_1000E3AC8(v26, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v27 + 4);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to delete acl for watch with pairingID: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v29 = v39;
    v30 = v24;
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 96), 2);

    v29 = v23;
    v30 = v24;
  }
  v11(v29, v30);
  v37 = (_QWORD *)swift_task_alloc(dword_10062FE94);
  *(_QWORD *)(v1 + 288) = v37;
  *v37 = v1;
  v37[1] = sub_1003A6024;
  return sub_100015A78(*(double *)(v1 + 112));
}

uint64_t sub_1003A6024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003A6634;
  else
    v3 = sub_1003A6088;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003A6088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v2 = *(_QWORD *)(v1 + 96);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v28 = *(_QWORD *)(v1 + 160);
    v29 = *(void (**)(uint64_t, uint64_t))(v1 + 280);
    v6 = *(_QWORD *)(v1 + 144);
    v8 = *(_QWORD *)(v1 + 88);
    v7 = *(_QWORD *)(v1 + 96);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v30 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 56) = sub_1000E3AC8(v8, v7, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully deleted acl for watch with pairingID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v29(v28, v6);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v1 + 280);
    v12 = *(_QWORD *)(v1 + 160);
    v13 = *(_QWORD *)(v1 + 144);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 96), 2);

    v11(v12, v13);
  }
  v14 = *(void **)(v1 + 272);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 240);
  v16 = *(unsigned int *)(v1 + 336);
  v17 = *(_QWORD *)(v1 + 200);
  v18 = *(_QWORD *)(v1 + 184);
  v20 = *(_QWORD *)(v1 + 88);
  v19 = *(_QWORD *)(v1 + 96);
  v21 = *(_QWORD *)(v1 + 80);
  v22 = (_QWORD *)swift_allocObject(&unk_100615A78, 48, 7);
  *(_QWORD *)(v1 + 304) = v22;
  v22[2] = v21;
  v22[3] = v14;
  v22[4] = v20;
  v22[5] = v19;
  v23 = swift_allocObject(&unk_100615AA0, 32, 7);
  *(_QWORD *)(v1 + 312) = v23;
  *(_QWORD *)(v23 + 16) = sub_1003B5F30;
  *(_QWORD *)(v23 + 24) = v22;
  swift_retain(v21);
  swift_bridgeObjectRetain(v19);
  v24 = v14;
  v15(v17, v16, v18);
  v25 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v22);
  v26 = (_QWORD *)swift_task_alloc(v25);
  *(_QWORD *)(v1 + 320) = v26;
  *v26 = v1;
  v26[1] = sub_1003A630C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v26, *(_QWORD *)(v1 + 200), sub_1000D51E8, v23, (char *)&type metadata for () + 8);
}

uint64_t sub_1003A630C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 312);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 264))(*(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 184));
    swift_release(v4);
    v5 = sub_1003A643C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 304);
    (*(void (**)(_QWORD, _QWORD))(v2 + 264))(*(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 184));
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1003A63B8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003A63B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 272);

  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A643C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(void **)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_getErrorValue(v1, v0 + 48, v0 + 16);
  v6._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToDeleteACLInWatch(_:), v5);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010055D4E0, 0, v3, 0, v9, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001FLL, 0x800000010055D510, 108);
  swift_willThrow(v12);
  swift_errorRelease(v1);

  v13 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A6634()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(void **)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_getErrorValue(v1, v0 + 48, v0 + 16);
  v6._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.unableToDeleteACLInWatch(_:), v5);
  v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010055D4E0, 0, v3, 0, v9, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001FLL, 0x800000010055D510, 108);
  swift_willThrow(v12);
  swift_errorRelease(v1);

  v13 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A6824@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  os_log_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  os_log_t v21;
  uint64_t v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10020A468(a1, a2);
  if (!v3)
  {
    v12 = result;
    if (!result)
    {
      defaultLogger()(0);
      v13 = swift_bridgeObjectRetain_n(a2, 2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter();
      v24 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v27 = v22;
        v21 = v14;
        v16 = v23;
        *(_DWORD *)v23 = 136315138;
        v20 = v16 + 4;
        swift_bridgeObjectRetain(a2);
        v25 = sub_1000E3AC8(a1, (unint64_t)a2, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20);
        swift_bridgeObjectRelease_n(a2, 3);
        v17 = v21;
        v18 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v24, "validateStoredPrearmTrust called for watch with pairingID: %s but no prearm trust exsts between phone and watch", v23, 0xCu);
        v19 = v22;
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    *a3 = v12;
  }
  return result;
}

id sub_1003A6A28(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*(id *)(a1 + 16), "deleteObject:", a2);
  result = sub_100109FB8();
  if (!v4)
  {
    defaultLogger()(result);
    v14 = swift_bridgeObjectRetain_n(a4, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v21 = a3;
      v18 = (uint8_t *)v17;
      v22 = swift_slowAlloc(32, -1);
      v25 = v22;
      *(_DWORD *)v18 = 136315138;
      v20 = v18 + 4;
      swift_bridgeObjectRetain(a4);
      v23 = sub_1000E3AC8(v21, a4, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully deleted prearm trust with watch with pairingID: %s", v18, 0xCu);
      v19 = v22;
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    return (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

void sub_1003A6C24(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  unsigned __int8 v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;

  sub_1000D6840(2);
  if (v3)
    return;
  v8 = v7;
  if (!v7)
  {
    v51 = _swiftEmptyArrayStorage;
LABEL_50:
    *a3 = v51;
    return;
  }
  v53 = a3;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v52 = v7 & 0xFFFFFFFFFFFFFF8;
    else
      v52 = v7;
    swift_bridgeObjectRetain(v7);
    v9 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v8);
    if (v9)
      goto LABEL_5;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
LABEL_48:
    v67 = _swiftEmptyArrayStorage;
LABEL_49:
    swift_bridgeObjectRelease(v8);
    a3 = v53;
    v51 = v67;
    goto LABEL_50;
  }
LABEL_5:
  if (v9 >= 1)
  {
    v10 = 0;
    v66 = v8 & 0xC000000000000001;
    v67 = _swiftEmptyArrayStorage;
    v55 = v8;
    v56 = a2;
    v54 = v9;
    while (1)
    {
      if (v66)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      else
        v12 = *(id *)(v8 + 8 * v10 + 32);
      v13 = v12;
      v14 = objc_msgSend(v12, "proofingSessionID");
      if (!v14)
        goto LABEL_8;
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      if (v16 == a1 && v18 == a2)
        break;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a1, a2, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
        goto LABEL_20;
LABEL_8:
      ++v10;

      if (v9 == v10)
        goto LABEL_49;
    }
    swift_bridgeObjectRelease(a2);
LABEL_20:
    v21 = objc_msgSend(v13, "shouldShowNotificationOnWatch");
    v22 = objc_msgSend(v13, "proofingSessionID");
    if (v22)
    {
      v23 = v22;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v64 = v24;

    }
    else
    {
      v65 = 0;
      v64 = 0;
    }
    v25 = objc_msgSend(v13, "provisioningCredentialID");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v62 = v28;
      v63 = v27;

    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v29 = objc_msgSend(v13, "partnerSchemeID");
    if (v29)
    {
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v60 = v32;
      v61 = v31;

    }
    else
    {
      v60 = 0;
      v61 = 0;
    }
    v33 = objc_msgSend(v13, "provisioningTargetInstanceID");
    if (v33)
    {
      v34 = v33;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v58 = v36;
      v59 = v35;

    }
    else
    {
      v58 = 0;
      v59 = 0;
    }
    v37 = objc_msgSend(v13, "credentialIdentifier");
    if (v37)
    {
      v38 = v37;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

    }
    else
    {
      v57 = 0;
      v40 = 0;
    }
    v41 = a1;
    v42 = objc_msgSend(v13, "pairingID");
    if (v42)
    {
      v43 = v42;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

    }
    else
    {
      v44 = 0;
      v46 = 0;
    }
    v47 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) != 0)
      v48 = v67;
    else
      v48 = sub_1000E3950(0, v67[2] + 1, 1, v67);
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
      v48 = sub_1000E3950((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v48[2] = v50 + 1;
    v67 = v48;
    v11 = &v48[13 * v50];
    *((_BYTE *)v11 + 32) = v47;
    v11[5] = v65;
    v11[6] = v64;
    v11[7] = v63;
    v11[8] = v62;
    v11[9] = v61;
    v11[10] = v60;
    v11[11] = v59;
    v11[12] = v58;
    a2 = v56;
    v11[13] = v57;
    v11[14] = v40;
    v11[15] = v44;
    v11[16] = v46;
    a1 = v41;
    v9 = v54;
    v8 = v55;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1003A6FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1003A7004, 0, 0);
}

uint64_t sub_1003A7004()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = (void *)v0[17];
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = NPKIDVRemoteDeviceServiceEventsFromStringsArray(isa);

  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003A70D0;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_10001A8E0;
  v7[3] = &unk_100615B80;
  v7[4] = v6;
  objc_msgSend(v3, "registerForEvents:withSession:completion:", v5, v2, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_1003A70D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_1003A7190;
  else
    v2 = sub_1003A7130;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003A7130()
{
  uint64_t v0;
  uint64_t *v1;
  id v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 128);
  v2 = (id)stringsArrayFromNPKIDVRemoteDeviceServiceEvents(*(_QWORD *)(v0 + 120));
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  *v1 = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A7190(uint64_t a1)
{
  uint64_t v1;

  swift_willThrow(a1);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003A71CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  return swift_task_switch(sub_1003A71E8, 0, 0);
}

uint64_t sub_1003A71E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v2 = v0[19];
  v3 = (void *)v0[17];
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = NPKIDVRemoteDeviceServiceEventsFromStringsArray(isa);

  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003A72B4;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_10001A8E0;
  v7[3] = &unk_100615BC0;
  v7[4] = v6;
  objc_msgSend(v3, "unregisterFromEvents:withSession:completion:", v5, v2, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_1003A72B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_1003B6F24;
  else
    v2 = sub_1003B6F28;
  return swift_task_switch(v2, 0, 0);
}

void *sub_1003A7314(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  void (*v29)(char *, uint64_t);
  void *result;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = v4;
  v59 = a4;
  v9 = type metadata accessor for DIPError.Code(0);
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  __chkstk_darwin(v9);
  v56 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v57 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v53 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v53 - v18;
  defaultLogger()(v17);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v53 = a3;
    v23 = swift_slowAlloc(12, -1);
    v60 = v11;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v58 = v16;
    v61 = a1;
    v26 = v25;
    v63 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a2);
    v65 = sub_1000E3AC8(v61, (unint64_t)a2, &v63);
    v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v24 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Trying to retrieve prearm trust key and certificate for watch with pairingID: %s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v27 = v26;
    a1 = v61;
    v16 = v58;
    swift_slowDealloc(v27, -1, -1);
    v28 = v24;
    v11 = v60;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v29 = *(void (**)(char *, uint64_t))(v62 + 8);
  v29(v19, v11);
  result = (void *)sub_1000D7548(a1, a2);
  if (!v5)
  {
    v31 = result;

    if (v31)
    {
      defaultLogger()(v32);
      v33 = swift_bridgeObjectRetain_n(a2, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.debug.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v58 = v16;
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v61 = a1;
        v38 = v37;
        v63 = v37;
        v60 = v11;
        *(_DWORD *)v36 = 136315138;
        swift_bridgeObjectRetain(a2);
        v65 = sub_1000E3AC8(v61, (unint64_t)a2, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v36 + 4);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully retrieved prearm trust key and certificate for watch with pairingID: %s", v36, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        v39 = v38;
        a1 = v61;
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        v40 = v58;
        v41 = v60;
      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        v40 = v16;
        v41 = v11;
      }
      v29(v40, v41);
      return (void *)sub_1004FE648(a1, a2);
    }
    else
    {
      v63 = 0;
      v64 = 0xE000000000000000;
      _StringGuts.grow(_:)(103);
      v42._countAndFlagsBits = 0xD000000000000065;
      v42._object = (void *)0x800000010055D7C0;
      String.append(_:)(v42);
      v43._countAndFlagsBits = a1;
      v43._object = a2;
      String.append(_:)(v43);
      v44 = v63;
      v45 = v64;
      v46 = v56;
      (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v56, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v55);
      v47 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v48 = type metadata accessor for DIPError(0);
      v49 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v50 = swift_allocError(v48, v49, 0, 0);
      v51 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, v45, 0, v46, 0, v47, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000042, 0x800000010055D770, 251);
      v52 = v57;
      defaultLogger()(v51);
      DIPRecordError(_:message:log:)(v50, 0, 0xE000000000000000, v52);
      v29(v52, v11);
      return (void *)swift_errorRelease(v50);
    }
  }
  return result;
}

uint64_t sub_1003A7868(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  void *v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  id v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint8_t *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v60 = a4;
  v61 = a5;
  v59 = a3;
  v7 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v7);
  v58 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  v63 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v58 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v58 - v17;
  v19 = sub_100004828((uint64_t *)&unk_1006364D0);
  __chkstk_darwin(v19);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v58 - v27;
  sub_1003B14A0(a1, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v29 = sub_1003B14E8((uint64_t)v21);
    v30 = v62;
    if (a2)
    {
      v31 = swift_errorRetain(a2);
      defaultLogger()(v31);
      DIPRecordError(_:message:log:)(a2, 0, 0xE000000000000000, v16);
      swift_errorRelease(a2);
      v29 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v16, v30);
    }
    defaultLogger()(v29);
    v32 = (unint64_t)v60;
    v33 = swift_bridgeObjectRetain_n(v60, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v65 = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(v32);
      v38 = v59;
      v64 = sub_1000E3AC8(v59, v32, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v36 + 4);
      swift_bridgeObjectRelease_n(v32, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Secure ranging is not supported for watch with pairingID: %s, will continue to prearm the watch without it.", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v30);
    }
    else
    {
      swift_bridgeObjectRelease_n(v32, 2);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v30);
      v38 = v59;
    }
    v51 = type metadata accessor for TaskPriority(0);
    v52 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v58, 1, 1, v51);
    v53 = (_QWORD *)swift_allocObject(&unk_100615B40, 56, 7);
    v53[2] = 0;
    v53[3] = 0;
    v54 = v61;
    v53[4] = v61;
    v53[5] = v38;
    v53[6] = v32;
    swift_bridgeObjectRetain(v32);
    v55 = v54;
    v56 = sub_1001075D4(v52, (uint64_t)&unk_10063EDF0, (uint64_t)v53);
    return swift_release(v56);
  }
  else
  {
    v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v28, v21, v22);
    defaultLogger()(v39);
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v22);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v61 = (void *)v44;
      v65 = v44;
      *(_DWORD *)v43 = 136315138;
      v60 = v43 + 4;
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      v64 = sub_1000E3AC8(v45, v46, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v60);
      swift_bridgeObjectRelease(v47);
      v48 = *(void (**)(char *, uint64_t))(v23 + 8);
      v48(v26, v22);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Secure ranging session established with watch, sessionID: %s", v43, 0xCu);
      v49 = v61;
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v18, v62);
      return ((uint64_t (*)(char *, uint64_t))v48)(v28, v22);
    }
    else
    {

      v57 = *(void (**)(char *, uint64_t))(v23 + 8);
      v57(v26, v22);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v18, v62);
      return ((uint64_t (*)(char *, uint64_t))v57)(v28, v22);
    }
  }
}

uint64_t sub_1003A7E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v9 = type metadata accessor for Logger(0);
  v6[5] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[6] = v10;
  v6[7] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_10063EC4C);
  v6[8] = v11;
  *v11 = v6;
  v11[1] = sub_1003A7EC8;
  return sub_1003AA8F0(a5, a6);
}

uint64_t sub_1003A7EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003A7F78;
  else
    v3 = sub_1003A7F2C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003A7F2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1004FEFCC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A7F78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v3);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 + 56);
  sub_1004FEFCC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003A800C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[24] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[25] = v5;
  v3[26] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[27] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[28] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v8);
  v3[30] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003A80A8, 0, 0);
}

uint64_t sub_1003A80A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1[22];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v16 = v1[28];
    v17 = v1[27];
    v18 = v1[30];
    v6 = v1[22];
    v7 = v1[21];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v1[20] = sub_1000E3AC8(v7, v6, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 20, v1 + 21, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to establish prearm trust with watch with pairingID: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v10(v18, v17);
  }
  else
  {
    v11 = v1[30];
    v12 = v1[27];
    v13 = v1[28];
    swift_bridgeObjectRelease_n(v1[22], 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  v1[31] = v10;
  v14 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v1[32] = v14;
  *v14 = v1;
  v14[1] = sub_1003A8290;
  return sub_1000160E0();
}

uint64_t sub_1003A8290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003A82EC, 0, 0);
}

uint64_t sub_1003A82EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 264);
  if (v1)
  {
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 184)
                                      + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
    v2 = swift_allocObject(&unk_100615898, 24, 7);
    *(_QWORD *)(v0 + 280) = v2;
    *(_QWORD *)(v2 + 16) = v1;
    v3 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
    v4 = v1;
    v5 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 288) = v5;
    v6 = sub_10001CFF8(0, &qword_10063ED00, DCCredentialNonce_ptr);
    *v5 = v0;
    v5[1] = sub_1003A84E0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 136, &unk_10063ED40, v2, v6, 30.0);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(v8, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 192));
    v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010053FB00, 0, v8, 0, v9, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000029, 0x800000010055D310, 311);
    swift_willThrow(v12);
    v13 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003A84E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 280));
  if (v0)
    v4 = sub_1003A8EE0;
  else
    v4 = sub_1003A854C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A854C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (void *)v0[33];
  v1 = (void *)v0[34];
  v3 = (void *)v0[17];
  v0[38] = v3;
  v4 = (_QWORD *)swift_allocObject(&unk_1006158C0, 40, 7);
  v0[39] = v4;
  v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  v5 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v6 = v2;
  v7 = v1;
  v8 = v3;
  v9 = (_QWORD *)swift_task_alloc(v5);
  v0[40] = v9;
  v10 = sub_10001CFF8(0, &qword_10063ED58, DCCredentialTrust_ptr);
  *v9 = v0;
  v9[1] = sub_1003A861C;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 19, &unk_10063ED50, v4, v10, 30.0);
}

uint64_t sub_1003A861C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 312));
  if (v0)
    v4 = sub_1003A8F38;
  else
    v4 = sub_1003A8688;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A8688()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = (void *)v0[33];
  v2 = (void *)v0[19];
  v0[42] = v2;
  v3 = swift_allocObject(&unk_1006158E8, 32, 7);
  v0[43] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[44] = v7;
  v8 = sub_100004828(&qword_10063ED70);
  *v7 = v0;
  v7[1] = sub_1003A8744;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 18, &unk_10063ED68, v3, v8, 30.0);
}

uint64_t sub_1003A8744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 344));
  if (v0)
    v4 = sub_1003A8F98;
  else
    v4 = sub_1003A87B0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A87B0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(void **)(v0 + 144);
  *(_QWORD *)(v0 + 368) = v1;
  if (v1)
  {
    v2 = *(void **)(v0 + 264);
    v3 = objc_msgSend(v1, "attestationData");
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    *(_QWORD *)(v0 + 376) = v4;
    *(_QWORD *)(v0 + 384) = v6;
    v7 = swift_allocObject(&unk_100615910, 24, 7);
    *(_QWORD *)(v0 + 392) = v7;
    *(_QWORD *)(v7 + 16) = v2;
    v8 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
    v9 = v2;
    v10 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 400) = v10;
    *v10 = v0;
    v10[1] = sub_1003A8AA0;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 96, &unk_10063ED80, v7, &type metadata for Data, 30.0);
  }
  else
  {
    v12 = *(void **)(v0 + 264);
    defaultLogger()(0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void **)(v0 + 368);
    v17 = *(void **)(v0 + 264);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v19 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 216);
    if (v15)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
      v30 = *(void **)(v0 + 304);
      v32 = *(_QWORD *)(v0 + 232);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = v20;
      v22 = swift_slowAlloc(32, -1);
      v34 = v22;
      *(_DWORD *)v21 = 136315138;
      v29 = v16;
      v23 = objc_msgSend(v17, "deviceID");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v24, v26, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v21 + 4);
      swift_bridgeObjectRelease(v26);

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully established prearm trust with watch with pairingID: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v33(v32, v31);
    }
    else
    {

      v18(v19, v20);
    }
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 336), 0);
  }
}

uint64_t sub_1003A8AA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 400);
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003A9000;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 392));
    v4 = sub_1003A8B0C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A8B0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;

  v1 = *(void **)(v0 + 264);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 96);
  v2 = swift_allocObject(&unk_100615938, 24, 7);
  *(_QWORD *)(v0 + 432) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 440) = v5;
  *v5 = v0;
  v5[1] = sub_1003A8BB4;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 112, &unk_10063ED90, v2, &type metadata for String, 30.0);
}

uint64_t sub_1003A8BB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003A9090;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 432));
    v4 = sub_1003A8C20;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A8C20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void (*v36)(uint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = sub_100004828(&qword_10063ED98);
  inited = swift_initStackObject(v7, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v6;
  v9 = Data.base16EncodedString()();
  v10 = Data.base16EncodedString()();
  *(Swift::String *)(inited + 48) = v9;
  *(Swift::String *)(inited + 64) = v10;
  v11 = sub_10011EFC0(inited);
  sub_100007F8C(v2, v1);
  v12 = sub_100007F8C(v4, v3);
  v13 = *(void **)(v0 + 264);
  defaultLogger()(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = *(void **)(v0 + 264);
    v35 = *(void **)(v0 + 368);
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v34 = *(_QWORD *)(v0 + 232);
    v32 = *(void **)(v0 + 304);
    v33 = *(_QWORD *)(v0 + 216);
    v37 = v11;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v38 = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = objc_msgSend(v16, "deviceID");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v20, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v17 + 4);
    swift_bridgeObjectRelease(v22);

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully established prearm trust with watch with pairingID: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v23 = v17;
    v11 = v37;
    swift_slowDealloc(v23, -1, -1);

    v36(v34, v33);
  }
  else
  {
    v24 = *(void **)(v0 + 368);
    v25 = *(void **)(v0 + 264);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 216);

    v26(v27, v28);
  }
  v29 = *(_QWORD *)(v0 + 232);
  v30 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(*(_QWORD *)(v0 + 336), v11);
}

uint64_t sub_1003A8EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A8F38()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 264);

  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A8F98()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 336);
  v2 = *(void **)(v0 + 264);

  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A9000()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(void **)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(void **)(v0 + 336);
  v6 = *(void **)(v0 + 264);

  sub_100007F8C(v3, v1);
  swift_release(v2);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A9090()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(void **)(v0 + 368);
  v7 = *(void **)(v0 + 336);
  v8 = *(void **)(v0 + 264);

  sub_100007F8C(v3, v1);
  sub_100007F8C(v5, v4);
  swift_release(v2);
  v9 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A913C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[22] = a1;
  v2[23] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[25] = v4;
  v2[26] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[28] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v7);
  v2[30] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003A91D4, 0, 0);
}

uint64_t sub_1003A91D4(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (void *)v1[23];
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v22 = v1[28];
    v23 = v1[27];
    v24 = v1[30];
    v5 = (void *)v1[23];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v25 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v5, "deviceID");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v1[21] = sub_1000E3AC8(v9, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 21, v1 + 22, v6 + 4);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate nonce in watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v12(v24, v23);
  }
  else
  {
    v13 = v1[30];
    v14 = v1[27];
    v15 = v1[28];
    v16 = (void *)v1[23];

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v17 = v1 + 2;
  v1[31] = v12;
  v18 = (void *)v1[23];
  v1[7] = v1 + 17;
  v1[2] = v1;
  v1[3] = sub_1003A941C;
  v19 = swift_continuation_init(v1 + 2, 1);
  v1[10] = _NSConcreteStackBlock;
  v20 = v1 + 10;
  v20[1] = 0x40000000;
  v20[2] = sub_100016AF8;
  v20[3] = &unk_1006159B0;
  v20[4] = v19;
  objc_msgSend(v18, "nonceForAuthorizationTokenWithCompletion:", v20);
  return swift_continuation_await(v17);
}

uint64_t sub_1003A941C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 256) = v1;
  if (v1)
    v2 = sub_1003A9734;
  else
    v2 = sub_1003A947C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003A947C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v2 = *(void **)(v1 + 184);
  v3 = *(void **)(v1 + 136);
  defaultLogger()(a1);
  v4 = v2;
  v5 = v3;
  v6 = v4;
  v7 = v5;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v36 = *(_QWORD *)(v1 + 232);
    v37 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    v35 = *(_QWORD *)(v1 + 216);
    v10 = *(void **)(v1 + 184);
    v11 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v38 = v34;
    *(_DWORD *)v11 = 136315394;
    type = v9;
    v12 = objc_msgSend(v7, "credentialNonce");
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = Data.description.getter(v13, v15);
    v18 = v17;
    sub_100007F8C(v13, v15);
    *(_QWORD *)(v1 + 152) = sub_1000E3AC8(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v11 + 4);
    swift_bridgeObjectRelease(v18);

    *(_WORD *)(v11 + 12) = 2080;
    log = v8;
    v19 = v10;
    v20 = objc_msgSend(v10, "deviceID");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    *(_QWORD *)(v1 + 160) = sub_1000E3AC8(v21, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v11 + 14);
    swift_bridgeObjectRelease(v23);

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated nonce in watch: %s with pairingID: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v37(v36, v35);
  }
  else
  {
    v24 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    v25 = *(_QWORD *)(v1 + 232);
    v26 = *(_QWORD *)(v1 + 216);
    v27 = *(void **)(v1 + 184);

    v24(v25, v26);
  }
  v29 = *(_QWORD *)(v1 + 232);
  v28 = *(_QWORD *)(v1 + 240);
  v30 = *(_QWORD *)(v1 + 208);
  **(_QWORD **)(v1 + 176) = v7;
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003A9734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 256);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = *(_QWORD *)(v1 + 240);
  v6 = *(_QWORD *)(v1 + 200);
  v5 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v1 + 192);
  swift_willThrow(a1);
  _StringGuts.grow(_:)(47);
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0xE000000000000000;
  v8._countAndFlagsBits = 0xD00000000000002DLL;
  v8._object = (void *)0x800000010055D470;
  String.append(_:)(v8);
  *(_QWORD *)(v1 + 144) = v2;
  v9 = sub_100004828((uint64_t *)&unk_100633430);
  _print_unlocked<A, B>(_:_:)(v1 + 144, v1 + 120, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = *(_QWORD *)(v1 + 120);
  v11 = *(_QWORD *)(v1 + 128);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:), v7);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v10, v11, 0, v5, 0, v12, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000029, 0x800000010055D310, 328);
  swift_willThrow(v15);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003A9900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[22] = a3;
  v4[23] = a4;
  v4[20] = a1;
  v4[21] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[25] = v6;
  v4[26] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[27] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[28] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v9);
  v4[30] = swift_task_alloc(v9);
  return swift_task_switch(sub_1003A999C, 0, 0);
}

uint64_t sub_1003A999C(uint64_t a1)
{
  NSData *v1;
  objc_class *v2;
  Class isa;
  NSObject *v4;
  os_log_type_t v5;
  __objc2_prop *v6;
  Class v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  Class v17;
  Class v18;
  Class v19;
  Class v20;
  Class v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSData v26;
  objc_class *v27;
  uint64_t v28;
  uint64_t v29;
  NSData *v30;
  Class v31;
  uint64_t v32;
  NSData *v33;
  Class v35;
  Class v36;
  Class v37;
  uint64_t v38;

  v2 = (objc_class *)&v1[15];
  isa = v1[21].super.isa;
  defaultLogger()(a1);
  v4 = Logger.logObject.getter(isa);
  v5 = static os_log_type_t.default.getter();
  v6 = &stru_10062A000;
  if (os_log_type_enabled(v4, v5))
  {
    v35 = v1[28].super.isa;
    v36 = v1[27].super.isa;
    v37 = v1[30].super.isa;
    v7 = v1[21].super.isa;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v9 = v38;
    *(_DWORD *)v8 = 136315138;
    v10 = -[objc_class deviceID](v7, "deviceID");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v1[19].super.isa = (Class)sub_1000E3AC8(v11, v13, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v1[19], &v1[20], v8 + 4);
    v14 = v13;
    v6 = &stru_10062A000;
    swift_bridgeObjectRelease(v14);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to generate prearm trust key and certificate on phone for watch with pairingID: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v15 = v9;
    v2 = (objc_class *)&v1[15];
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v16 = (objc_class *)*((_QWORD *)v35 + 1);
    ((void (*)(Class, Class))v16)(v37, v36);
  }
  else
  {
    v17 = v1[30].super.isa;
    v18 = v1[27].super.isa;
    v19 = v1[28].super.isa;
    v20 = v1[21].super.isa;

    v16 = (objc_class *)*((_QWORD *)v19 + 1);
    ((void (*)(Class, Class))v16)(v17, v18);
  }
  v1[31].super.isa = v16;
  v21 = v1[21].super.isa;
  v22 = -[objc_class credentialNonce](v1[23].super.isa, "credentialNonce");
  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v1[32].super.isa = v26.super.isa;
  sub_100007F8C(v23, v25);
  v27 = (objc_class *)objc_msgSend(v21, v6[135].attr);
  if (!v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v29 = v28;
    v27 = (objc_class *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
  }
  v30 = v1 + 2;
  v1[33].super.isa = v27;
  v31 = v1[22].super.isa;
  v1[7].super.isa = v2;
  v1[2].super.isa = (Class)v1;
  v1[3].super.isa = (Class)sub_1003A9C7C;
  v32 = swift_continuation_init(&v1[2], 1);
  v1[10].super.isa = (Class)_NSConcreteStackBlock;
  v33 = v1 + 10;
  v33[1].super.isa = (Class)0x40000000;
  v33[2].super.isa = (Class)sub_100016AF8;
  v33[3].super.isa = (Class)&unk_100615998;
  v33[4].super.isa = (Class)v32;
  -[objc_class generatePrearmTrustCertificateWithNonce:pairingID:completion:](v31, "generatePrearmTrustCertificateWithNonce:pairingID:completion:", v26.super.isa, v27, v33);
  return swift_continuation_await(v30);
}

uint64_t sub_1003A9C7C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v1;
  if (v1)
    v2 = sub_1003AA060;
  else
    v2 = sub_1003A9CDC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003A9CDC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *log;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(void **)(v0 + 256);
  v2 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 120);

  defaultLogger()(v4);
  v5 = v3;
  v6 = v2;
  v7 = v5;
  v8 = v6;
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v38 = *(_QWORD *)(v0 + 224);
    v39 = *(_QWORD *)(v0 + 216);
    v40 = *(_QWORD *)(v0 + 232);
    v36 = *(id *)(v0 + 168);
    v12 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(96, -1);
    v41 = v37;
    *(_DWORD *)v12 = 136315650;
    v13 = objc_msgSend(v9, "credentialKeyBlob");
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v17 = Data.base64EncodedString(options:)(0);
    sub_100007F8C(v14, v16);
    *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v17._countAndFlagsBits, (unint64_t)v17._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4);
    swift_bridgeObjectRelease(v17._object);

    *(_WORD *)(v12 + 12) = 2080;
    v18 = objc_msgSend(v9, "credentialBAACertificate");
    log = v10;
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22 = Data.base64EncodedString(options:)(0);
    sub_100007F8C(v19, v21);
    *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v22._countAndFlagsBits, (unint64_t)v22._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v12 + 14);
    swift_bridgeObjectRelease(v22._object);

    *(_WORD *)(v12 + 22) = 2080;
    v23 = objc_msgSend(v36, "deviceID");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    *(_QWORD *)(v0 + 144) = sub_1000E3AC8(v24, v26, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v12 + 24);
    swift_bridgeObjectRelease(v26);

    _os_log_impl((void *)&_mh_execute_header, log, v11, "Successfully generated prearm trust key: %s and certificate: %s on phone for watch with pairingID: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(void **)(v0 + 168);

    v27(v28, v29);
  }
  v32 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 240);
  v33 = *(_QWORD *)(v0 + 208);
  **(_QWORD **)(v0 + 160) = v9;
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(void **)(v1 + 264);
  v2 = *(_QWORD *)(v1 + 272);
  v4 = *(void **)(v1 + 256);
  v5 = *(_QWORD *)(v1 + 232);
  v6 = *(_QWORD *)(v1 + 240);
  v8 = *(_QWORD *)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 208);
  v9 = *(_QWORD *)(v1 + 192);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.unableToGeneratePrearmTrustKeyOnPhone(_:), v9);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003CLL, 0x800000010055D430, 0, v7, 0, v10, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000029, 0x800000010055D310, 341);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AA1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return swift_task_switch(sub_1003AA1EC, 0, 0);
}

uint64_t sub_1003AA1EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v3 = (void *)v0[17];
  v2 = v0[18];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003AA28C;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100016AF8;
  v5[3] = &unk_100615980;
  v5[4] = v4;
  objc_msgSend(v3, "establishPrearmTrustV2:completion:", v2, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1003AA28C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_1003AA300;
  else
    v2 = sub_1003AA2EC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AA2EC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 152);
  swift_willThrow(a1);
  swift_errorRelease(v2);
  **(_QWORD **)(v1 + 128) = 0;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AA350(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = a1;
  v2[18] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AA3B0, 0, 0);
}

uint64_t sub_1003AA3B0()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[18];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003AA444;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1004AB644;
  v4[3] = &unk_100615968;
  v4[4] = v3;
  objc_msgSend(v2, "getCASDCertificateWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1003AA444()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_1003AA4E4;
  else
    v2 = sub_1003AA4A4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AA4A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  *(_OWORD *)*(_QWORD *)(v0 + 136) = *(_OWORD *)(v0 + 120);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA4E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 168);
  v2 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 152);
  v5 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.unableToGetCASDCertificateWithWatch(_:), v4);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000047, 0x800000010055D380, 0, v3, 0, v6, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000029, 0x800000010055D310, 354);
  swift_willThrow(v9);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AA620(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = a1;
  v2[18] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AA680, 0, 0);
}

uint64_t sub_1003AA680()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[18];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003AA714;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1003A4D14;
  v4[3] = &unk_100615950;
  v4[4] = v3;
  objc_msgSend(v2, "pairedWatchSEIDWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1003AA714()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_1003AA7B4;
  else
    v2 = sub_1003AA774;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AA774()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD **)(v0 + 136);
  *v2 = *(_QWORD *)(v0 + 120);
  v2[1] = v3;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 168);
  v2 = *(_QWORD *)(v1 + 176);
  v4 = *(_QWORD *)(v1 + 152);
  v5 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for DIPError.Code.unableToGetSEIDWithWatch(_:), v4);
  v6 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010055D340, 0, v3, 0, v6, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000029, 0x800000010055D310, 365);
  swift_willThrow(v9);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AA8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[28] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[29] = v5;
  v3[30] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[31] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[32] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v8);
  v3[34] = swift_task_alloc(v8);
  v3[35] = swift_task_alloc(v8);
  v3[36] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003AA9A4, 0, 0);
}

uint64_t sub_1003AA9A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = sub_1003AA9F8;
  return sub_1000160E0();
}

uint64_t sub_1003AA9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AAA54, 0, 0);
}

uint64_t sub_1003AAA54(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  v2 = *(void **)(v1 + 304);
  if (v2)
  {
    v3 = v1 + 136;
    *(_QWORD *)(v1 + 312) = *(_QWORD *)(*(_QWORD *)(v1 + 216)
                                      + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
    defaultLogger()(a1);
    v4 = v2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v1 + 288);
    v9 = *(_QWORD *)(v1 + 248);
    v10 = *(_QWORD *)(v1 + 256);
    if (v7)
    {
      v30 = *(_QWORD *)(v1 + 288);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v32 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = objc_msgSend(v4, "deviceID");
      v29 = v9;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v3 = v1 + 136;
      *(_QWORD *)(v1 + 192) = sub_1000E3AC8(v14, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v11 + 4);
      swift_bridgeObjectRelease(v16);

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Trying to prearm the watch with pairingID: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v17(v30, v29);
    }
    else
    {

      v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v17(v8, v9);
    }
    *(_QWORD *)(v1 + 320) = v17;
    v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10063ECE0 + dword_10063ECE0);
    v28 = (_QWORD *)swift_task_alloc(unk_10063ECE4);
    *(_QWORD *)(v1 + 328) = v28;
    *v28 = v1;
    v28[1] = sub_1003AADBC;
    return v31(v3, *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 208));
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 240);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 232) + 104))(v18, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v1 + 224));
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010053F770, 0, v18, 0, v19, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001BLL, 0x800000010055D130, 378);
    swift_willThrow(v22);
    v23 = *(_QWORD *)(v1 + 280);
    v25 = *(_QWORD *)(v1 + 264);
    v24 = *(_QWORD *)(v1 + 272);
    v26 = *(_QWORD *)(v1 + 240);
    swift_task_dealloc(*(_QWORD *)(v1 + 288));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1003AADBC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  *(_OWORD *)(v1 + 336) = *(_OWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 160);
  return swift_task_switch(sub_1003AAE1C, 0, 0);
}

uint64_t sub_1003AAE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;

  v1 = sub_1003B5804(v0 + 136, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = v0 + 16;
    v4 = *(_QWORD *)(v0 + 344);
    v3 = *(_QWORD *)(v0 + 352);
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_OWORD *)(v0 + 72);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
    *(_OWORD *)(v0 + 32) = v6;
    *(_WORD *)(v0 + 48) = *(_WORD *)(v0 + 88);
    defaultLogger()(v1);
    sub_100022948(v5, v4);
    swift_bridgeObjectRetain(v3);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(6, -1);
      *(_DWORD *)v10 = 33554688;
      *(_WORD *)(v0 + 52) = *(_WORD *)(v0 + 48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 52, v0 + 54, v10 + 4);
      sub_1003B584C(v0 + 136);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "existing prearmtrust version = %hd", v10, 6u);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1003B584C(v0 + 136);
    }
    v28 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 320);
    v29 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 248);

    v31 = v28(v29, v30);
    v32 = *(unsigned __int16 *)(v0 + 48);
    if (v32 == 1)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      v34 = *(_QWORD *)(v0 + 272);
      v35 = *(_QWORD *)(v0 + 248);
      defaultLogger()(v31);
      v36 = swift_task_alloc(32);
      *(_QWORD *)(v36 + 16) = v2;
      Logger.sensitive(_:)(sub_1003B5A44);
      swift_task_dealloc(v36);
      v33(v34, v35);
      v37 = (_QWORD *)swift_task_alloc(dword_10063EC5C);
      *(_QWORD *)(v0 + 360) = v37;
      *v37 = v0;
      v37[1] = sub_1003AB350;
      return sub_1003AD620(v0 + 96, v2);
    }
    else
    {
      v39 = *(_QWORD *)(v0 + 336);
      v38 = *(_QWORD *)(v0 + 344);
      defaultLogger()(v31);
      sub_100022948(v39, v38);
      swift_bridgeObjectRetain(v3);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.debug.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(6, -1);
        *(_DWORD *)v43 = 33554688;
        *(_WORD *)(v0 + 50) = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 50, v0 + 52, v43 + 4);
        sub_1003B584C(v0 + 136);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "using existing prearmtrust version = %hd", v43, 6u);
        swift_slowDealloc(v43, -1, -1);
      }
      else
      {
        sub_1003B584C(v0 + 136);
      }
      v45 = *(_QWORD *)(v0 + 336);
      v44 = *(_QWORD *)(v0 + 344);
      v46 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      v47 = *(_QWORD *)(v0 + 264);
      v48 = *(_QWORD *)(v0 + 248);

      v46(v47, v48);
      v49 = *(_QWORD *)(v0 + 32);
      v50 = *(_QWORD *)(v0 + 40);
      v57 = *(_OWORD *)(v0 + 16);
      sub_100022948(v45, v44);
      *(_WORD *)(v0 + 54) = v32;
      *(_QWORD *)(v0 + 392) = v49;
      *(_QWORD *)(v0 + 400) = v50;
      *(_OWORD *)(v0 + 376) = v57;
      v51 = *(void **)(v0 + 304);
      swift_bridgeObjectRetain(v3);
      v52 = swift_allocObject(&unk_100615760, 24, 7);
      *(_QWORD *)(v0 + 408) = v52;
      *(_QWORD *)(v52 + 16) = v51;
      v53 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
      v54 = v51;
      v55 = (_QWORD *)swift_task_alloc(v53);
      *(_QWORD *)(v0 + 416) = v55;
      v56 = sub_10001CFF8(0, &qword_10063ED00, DCCredentialNonce_ptr);
      *v55 = v0;
      v55[1] = sub_1003AB4E8;
      return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 176, &unk_10063ECF8, v52, v56, 30.0);
    }
  }
  else
  {
    v11 = *(void **)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 200);
    v15 = *(void **)(v0 + 208);
    _StringGuts.grow(_:)(88);
    v17._countAndFlagsBits = 0xD000000000000056;
    v17._object = (void *)0x800000010055D150;
    String.append(_:)(v17);
    v18._countAndFlagsBits = v16;
    v18._object = v15;
    String.append(_:)(v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v14);
    v19 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v12, 0, v19, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001BLL, 0x800000010055D130, 388);
    swift_willThrow(v22);

    v23 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003AB350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003AB8BC;
  else
    v3 = sub_1003AB3B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003AB3B4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = sub_1003B16B0((uint64_t *)(v0 + 96));
  defaultLogger()(v4);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v0 + 96;
  Logger.sensitive(_:)(sub_1003B5A4C);
  sub_1003B5A54((uint64_t *)(v0 + 96));
  swift_task_dealloc(v5);
  v1(v2, v3);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  *(_WORD *)(v0 + 54) = *(_WORD *)(v0 + 128);
  *(_QWORD *)(v0 + 392) = v6;
  *(_QWORD *)(v0 + 400) = v7;
  *(_OWORD *)(v0 + 376) = *(_OWORD *)(v0 + 96);
  v8 = *(void **)(v0 + 304);
  v9 = swift_allocObject(&unk_100615760, 24, 7);
  *(_QWORD *)(v0 + 408) = v9;
  *(_QWORD *)(v9 + 16) = v8;
  v10 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v11 = v8;
  v12 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 416) = v12;
  v13 = sub_10001CFF8(0, &qword_10063ED00, DCCredentialNonce_ptr);
  *v12 = v0;
  v12[1] = sub_1003AB4E8;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 176, &unk_10063ECF8, v9, v13, 30.0);
}

uint64_t sub_1003AB4E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  *(_QWORD *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 408));
  if (v0)
    v4 = sub_1003ABA38;
  else
    v4 = sub_1003AB554;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AB554()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  __int16 v18;

  v18 = *(_WORD *)(v0 + 54);
  v1 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v4 = *(void **)(v0 + 304);
  v5 = *(void **)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v8 = *(void **)(v0 + 176);
  *(_QWORD *)(v0 + 432) = v8;
  v9 = swift_allocObject(&unk_100615788, 96, 7);
  *(_QWORD *)(v0 + 440) = v9;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 40) = v3;
  *(_QWORD *)(v9 + 48) = v2;
  *(_QWORD *)(v9 + 56) = v17;
  *(_QWORD *)(v9 + 64) = v1;
  *(_WORD *)(v9 + 72) = v18;
  *(_QWORD *)(v9 + 80) = v7;
  *(_QWORD *)(v9 + 88) = v6;
  v10 = v4;
  v11 = v5;
  v12 = v8;
  sub_100022948(v3, v2);
  v13 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v6);
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 448) = v14;
  v15 = sub_10001CFF8(0, &qword_10063ED18, DCCredentialAuthorizationToken_ptr);
  *v14 = v0;
  v14[1] = sub_1003AB684;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 184, &unk_10063ED10, v9, v15, 30.0);
}

uint64_t sub_1003AB684()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_1003ABACC;
  else
    v4 = sub_1003AB6F0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AB6F0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v1 = (void *)v0[38];
  v2 = (void *)v0[23];
  v0[58] = v2;
  v3 = swift_allocObject(&unk_1006157B0, 32, 7);
  v0[59] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[60] = v7;
  *v7 = v0;
  v7[1] = sub_1003AB794;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v7, &unk_10063ED28, v3, (char *)&type metadata for () + 8, 30.0);
}

uint64_t sub_1003AB794()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 472));
  if (v0)
    v4 = sub_1003ABB68;
  else
    v4 = sub_1003AB800;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AB800()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(void **)(v0 + 464);
  v2 = *(void **)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(void **)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 240);
  sub_100007F8C(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  swift_bridgeObjectRelease(v3);

  sub_1003B584C(v0 + 136);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AB8BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(void **)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 104))(v3, enum case for DIPError.Code.watchPrearmTrustMigrationError(_:), *(_QWORD *)(v0 + 224));
  swift_errorRetain(v1);
  v4 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010055D1B0, v1, v3, 0, v4, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001BLL, 0x800000010055D130, 404);
  swift_willThrow(v7);

  sub_1003B584C(v0 + 136);
  swift_errorRelease(v1);
  v8 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ABA38()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(void **)(v0 + 304);
  sub_100007F8C(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  swift_bridgeObjectRelease(v1);

  sub_1003B584C(v0 + 136);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ABACC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(void **)(v0 + 304);
  sub_100007F8C(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  swift_bridgeObjectRelease(v2);

  sub_1003B584C(v0 + 136);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ABB68()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 464);
  v2 = *(void **)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = *(void **)(v0 + 304);
  sub_100007F8C(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  swift_bridgeObjectRelease(v3);

  sub_1003B584C(v0 + 136);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1003ABC0C()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000018;
}

unint64_t sub_1003ABC88()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000017;
}

uint64_t sub_1003ABD10(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[19] = a1;
  v2[20] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[21] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[22] = v4;
  v2[23] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[25] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v7);
  v2[27] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003ABDA8, 0, 0);
}

uint64_t sub_1003ABDA8(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (void *)v1[20];
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v22 = v1[25];
    v23 = v1[24];
    v24 = v1[27];
    v5 = (void *)v1[20];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v25 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v5, "deviceID");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v1[18] = sub_1000E3AC8(v9, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v6 + 4);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate nonce in watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v12(v24, v23);
  }
  else
  {
    v13 = v1[27];
    v14 = v1[24];
    v15 = v1[25];
    v16 = (void *)v1[20];

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v17 = v1 + 2;
  v1[28] = v12;
  v18 = (void *)v1[20];
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_1003ABFF0;
  v19 = swift_continuation_init(v1 + 2, 1);
  v1[10] = _NSConcreteStackBlock;
  v20 = v1 + 10;
  v20[1] = 0x40000000;
  v20[2] = sub_100016AF8;
  v20[3] = &unk_1006157F8;
  v20[4] = v19;
  objc_msgSend(v18, "nonceForAuthorizationTokenWithCompletion:", v20);
  return swift_continuation_await(v17);
}

uint64_t sub_1003ABFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 232) = v1;
  if (v1)
    v2 = sub_1003AC308;
  else
    v2 = sub_1003AC050;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AC050(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  v2 = *(void **)(v1 + 160);
  v3 = *(void **)(v1 + 120);
  defaultLogger()(a1);
  v4 = v2;
  v5 = v3;
  v6 = v4;
  v7 = v5;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v36 = *(_QWORD *)(v1 + 208);
    v37 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
    v35 = *(_QWORD *)(v1 + 192);
    v10 = *(void **)(v1 + 160);
    v11 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v38 = v34;
    *(_DWORD *)v11 = 136315394;
    type = v9;
    v12 = objc_msgSend(v7, "credentialNonce");
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = Data.description.getter(v13, v15);
    v18 = v17;
    sub_100007F8C(v13, v15);
    *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v11 + 4);
    swift_bridgeObjectRelease(v18);

    *(_WORD *)(v11 + 12) = 2080;
    log = v8;
    v19 = v10;
    v20 = objc_msgSend(v10, "deviceID");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v21, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v11 + 14);
    swift_bridgeObjectRelease(v23);

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated nonce in watch: %s with pairingID: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v37(v36, v35);
  }
  else
  {
    v24 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
    v25 = *(_QWORD *)(v1 + 208);
    v26 = *(_QWORD *)(v1 + 192);
    v27 = *(void **)(v1 + 160);

    v24(v25, v26);
  }
  v29 = *(_QWORD *)(v1 + 208);
  v28 = *(_QWORD *)(v1 + 216);
  v30 = *(_QWORD *)(v1 + 184);
  **(_QWORD **)(v1 + 152) = v7;
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AC308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 232);
  v3 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v7 = *(_QWORD *)(v1 + 168);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:), v7);
  v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x800000010055D2E0, 0, v5, 0, v8, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001BLL, 0x800000010055D130, 419);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AC460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  v7[19] = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  v7[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[27] = v9;
  v7[28] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v7[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[30] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[31] = swift_task_alloc(v12);
  v7[32] = swift_task_alloc(v12);
  return swift_task_switch(sub_1003AC504, 0, 0);
}

uint64_t sub_1003AC504(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  Class isa;
  NSString v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = (void *)v1[20];
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v25 = v1[30];
    v26 = v1[29];
    v27 = v1[32];
    v5 = (void *)v1[20];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v28 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v5, "deviceID");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v1[18] = sub_1000E3AC8(v9, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v6 + 4);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to generate credential authorization token in phone for watch with pairingID: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v12(v27, v26);
  }
  else
  {
    v13 = v1[32];
    v14 = v1[29];
    v15 = v1[30];
    v16 = (void *)v1[20];

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  v17 = v1 + 2;
  v1[33] = v12;
  v18 = v1[22];
  v19 = (void *)v1[21];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v1[34] = isa;
  v21 = String._bridgeToObjectiveC()();
  v1[35] = v21;
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_1003AC784;
  v22 = swift_continuation_init(v1 + 2, 1);
  v1[10] = _NSConcreteStackBlock;
  v23 = v1 + 10;
  v23[1] = 0x40000000;
  v23[2] = sub_100016AF8;
  v23[3] = &unk_1006157E0;
  v23[4] = v22;
  objc_msgSend(v19, "generatePhoneTokenWithNonce:keyBlob:pairingID:completion:", v18, isa, v21, v23);
  return swift_continuation_await(v17);
}

uint64_t sub_1003AC784()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 288) = v1;
  if (v1)
    v2 = sub_1003ACAA8;
  else
    v2 = sub_1003AC7E4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AC7E4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *log;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;

  v1 = *(void **)(v0 + 272);
  v2 = *(void **)(v0 + 160);
  v3 = *(void **)(v0 + 120);

  defaultLogger()(v4);
  v5 = v2;
  v6 = v3;
  v7 = v5;
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v37 = *(_QWORD *)(v0 + 248);
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v36 = *(_QWORD *)(v0 + 232);
    v11 = *(void **)(v0 + 160);
    v12 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v39 = v35;
    *(_DWORD *)v12 = 136315394;
    type = v10;
    v13 = objc_msgSend(v8, "credentialAuthorizationToken");
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v17 = Data.description.getter(v14, v16);
    v19 = v18;
    sub_100007F8C(v14, v16);
    *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v17, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4);
    swift_bridgeObjectRelease(v19);

    *(_WORD *)(v12 + 12) = 2080;
    log = v9;
    v20 = v11;
    v21 = objc_msgSend(v11, "deviceID");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v22, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v12 + 14);
    swift_bridgeObjectRelease(v24);

    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully generated credential authorization token in phone: %s for watch with pairingID: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v38(v37, v36);
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v26 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(void **)(v0 + 160);

    v25(v26, v27);
  }
  v30 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 256);
  v31 = *(_QWORD *)(v0 + 224);
  **(_QWORD **)(v0 + 152) = v8;
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ACAA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(void **)(v1 + 280);
  v2 = *(_QWORD *)(v1 + 288);
  v4 = *(void **)(v1 + 272);
  v5 = *(_QWORD *)(v1 + 248);
  v6 = *(_QWORD *)(v1 + 256);
  v8 = *(_QWORD *)(v1 + 216);
  v7 = *(_QWORD *)(v1 + 224);
  v9 = *(_QWORD *)(v1 + 208);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.unableToGenerateAuthorizationTokenOnPhone(_:), v9);
  v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x800000010055D260, 0, v7, 0, v10, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001BLL, 0x800000010055D130, 432);
  swift_willThrow(v13);
  swift_errorRelease(v2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003ACC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[19] = a2;
  v3[20] = a3;
  v4 = type metadata accessor for Logger(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v6);
  v3[24] = swift_task_alloc(v6);
  return swift_task_switch(sub_1003ACC84, 0, 0);
}

uint64_t sub_1003ACC84(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v29;
  _QWORD *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = (void *)v1[19];
  v3 = (void *)v1[20];
  defaultLogger()(a1);
  v4 = v2;
  v5 = v3;
  v6 = v4;
  v7 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v33 = v1[22];
    v34 = v1[21];
    v35 = v1[24];
    v29 = (id)v1[20];
    type = v8;
    v9 = (void *)v1[19];
    v10 = swift_slowAlloc(22, -1);
    v30 = (_QWORD *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v1[17] = v9;
    v36 = v32;
    *(_DWORD *)v10 = 138412546;
    v11 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v10 + 4);
    *v30 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    v12 = objc_msgSend(v29, "deviceID");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v1[18] = sub_1000E3AC8(v13, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v1 + 19, v10 + 14);
    swift_bridgeObjectRelease(v15);

    _os_log_impl((void *)&_mh_execute_header, v7, type, "Trying to prearm watch with authorization token: %@ with pairingID: %s", (uint8_t *)v10, 0x16u);
    v16 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v30, 1, v16);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v17 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v17(v35, v34);
  }
  else
  {
    v18 = v1[24];
    v19 = v1[21];
    v20 = v1[22];
    v22 = (void *)v1[19];
    v21 = (void *)v1[20];

    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  v23 = v1 + 2;
  v1[25] = v17;
  v25 = v1[19];
  v24 = (void *)v1[20];
  v1[2] = v1;
  v1[3] = sub_1003ACF7C;
  v26 = swift_continuation_init(v1 + 2, 1);
  v1[10] = _NSConcreteStackBlock;
  v27 = v1 + 10;
  v27[1] = 0x40000000;
  v27[2] = sub_100454F88;
  v27[3] = &unk_1006157C8;
  v27[4] = v26;
  objc_msgSend(v24, "prearmCredentialWithAuthorizationToken:completion:", v25, v27);
  return swift_continuation_await(v23);
}

uint64_t sub_1003ACF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_1003AD268;
  else
    v2 = sub_1003ACFDC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003ACFDC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v2 = *(void **)(v1 + 152);
  v3 = *(void **)(v1 + 160);
  defaultLogger()(a1);
  v4 = v2;
  v5 = v3;
  v6 = v4;
  v7 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v28 = *(_QWORD *)(v1 + 184);
    v29 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
    v27 = *(_QWORD *)(v1 + 168);
    v9 = *(void **)(v1 + 152);
    v24 = *(id *)(v1 + 160);
    v10 = swift_slowAlloc(22, -1);
    v25 = (_QWORD *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 + 120) = v9;
    v30 = v26;
    *(_DWORD *)v10 = 138412546;
    v11 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v10 + 4);
    *v25 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    v12 = objc_msgSend(v24, "deviceID");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v10 + 14);
    swift_bridgeObjectRelease(v15);

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully prearmed watch with token: %@ with pairingID: %s", (uint8_t *)v10, 0x16u);
    v16 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v25, 1, v16);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v29(v28, v27);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
    v18 = *(_QWORD *)(v1 + 184);
    v20 = *(void **)(v1 + 160);
    v19 = *(_QWORD *)(v1 + 168);
    v21 = *(void **)(v1 + 152);

    v17(v18, v19);
  }
  v22 = *(_QWORD *)(v1 + 184);
  swift_task_dealloc(*(_QWORD *)(v1 + 192));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AD268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 184);
  v3 = *(_QWORD *)(v1 + 192);
  swift_willThrow(a1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1003AD2B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v6 = (void *)sub_1000D7548(a2, a3);
  if (!v4 && v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v7, "keyBlob");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      v13 = objc_msgSend(v7, "pairingID");
      if (v13)
      {
        v14 = v13;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v17 = v16;

        LOWORD(v14) = (unsigned __int16)objc_msgSend(v7, "version");
        swift_beginAccess(a4 + 16, v22, 1, 0);
        v18 = *(_QWORD *)(a4 + 16);
        v19 = *(_QWORD *)(a4 + 24);
        v20 = *(_QWORD *)(a4 + 32);
        v21 = *(_QWORD *)(a4 + 40);
        *(_QWORD *)(a4 + 16) = v10;
        *(_QWORD *)(a4 + 24) = v12;
        *(_QWORD *)(a4 + 32) = v15;
        *(_QWORD *)(a4 + 40) = v17;
        *(_WORD *)(a4 + 48) = (_WORD)v14;
        sub_1000B52B0(v18, v19, v20, v21);
        return;
      }

      sub_100007F8C(v10, v12);
    }
    else
    {

    }
  }
}

uint64_t sub_1003AD3F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AD450, 0, 0);
}

uint64_t sub_1003AD450(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying to delete global auth acl in watch", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[4];
  v6 = v1[5];
  v9 = v1[2];
  v8 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9
                              + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService)
                  + OBJC_IVAR____TtC8coreidvd8DIPWatch_currentSession);
  v1[6] = v10;
  v11 = dword_10062FE94;
  swift_retain(v10);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v1[7] = v12;
  *v12 = v1;
  v12[1] = sub_1003AD564;
  return sub_100015A78(30.0);
}

uint64_t sub_1003AD564()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003AD5E4, 0, 0);
  v5 = *(_QWORD *)(v3 + 40);
  swift_release(*(_QWORD *)(v3 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003AD5E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AD620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AD684, 0, 0);
}

uint64_t sub_1003AD684(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  id v18;
  _QWORD *v19;
  uint64_t v21;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v6 = v1[12];
    v5 = v1[13];
    v7 = v1[11];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    v1[7] = sub_1000E3AC8(0xD00000000000001CLL, 0x800000010055D0D0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s called", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    v11 = v1[12];
    v10 = v1[13];
    v12 = v1[11];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v13 = (__int128 *)v1[9];
  v14 = *(void **)(v1[10] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_biometricStore);
  v15 = swift_allocObject(&unk_1006156D0, 58, 7);
  v1[14] = v15;
  *(_QWORD *)(v15 + 16) = v14;
  v17 = *v13;
  v16 = v13[1];
  *(_WORD *)(v15 + 56) = *((_WORD *)v13 + 16);
  *(_OWORD *)(v15 + 24) = v17;
  *(_OWORD *)(v15 + 40) = v16;
  v18 = v14;
  sub_1003B16B0((uint64_t *)v13);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1]);
  v1[15] = v19;
  *v19 = v1;
  v19[1] = sub_1003AD890;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v1 + 2, &unk_10063ECD8, v15, &type metadata for PrearmTrustWrapper, 30.0);
}

uint64_t sub_1003AD890()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003AD964;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 112));
    v4 = sub_1003AD8FC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AD8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 64);
  v6 = *(_OWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_WORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  *(_OWORD *)v1 = v6;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_WORD *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AD964()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AD9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[21] = v5;
  v3[22] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003ADA04, 0, 0);
}

uint64_t sub_1003ADA04()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  Class isa;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = (void *)v0[18];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[23] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003ADAB4;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1004AB644;
  v5[3] = &unk_1006156E8;
  v5[4] = v4;
  objc_msgSend(v2, "migratePrearmTrustBlob:completion:", isa, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_1003ADAB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 192) = v1;
  if (v1)
    v2 = sub_1003ADE3C;
  else
    v2 = sub_1003ADB14;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003ADB14()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = (void *)v0[23];
  v2 = v0[15];
  v3 = v0[16];
  v0[25] = v2;
  v0[26] = v3;

  v4 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v4, 24, 7);
  sub_1000D6044();
  v0[27] = v5;
  v6 = v5;
  v8 = v0[21];
  v7 = v0[22];
  v10 = (__int128 *)v0[19];
  v9 = v0[20];
  v11 = swift_allocObject(&unk_100615710, 80, 7);
  v0[28] = v11;
  *(_QWORD *)(v11 + 16) = v6;
  v13 = *v10;
  v12 = v10[1];
  *(_WORD *)(v11 + 56) = *((_WORD *)v10 + 16);
  *(_OWORD *)(v11 + 24) = v13;
  *(_OWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 64) = v2;
  *(_QWORD *)(v11 + 72) = v3;
  swift_retain(v6);
  sub_1003B16B0((uint64_t *)v10);
  sub_100022948(v2, v3);
  v14 = swift_allocObject(&unk_100615738, 32, 7);
  v0[29] = v14;
  *(_QWORD *)(v14 + 16) = sub_1003B1724;
  *(_QWORD *)(v14 + 24) = v11;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v9);
  v15 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v11);
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[30] = v16;
  *v16 = v0;
  v16[1] = sub_1003ADCC0;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v16, v0[22], sub_10001E5CC, v14, (char *)&type metadata for () + 8);
}

uint64_t sub_1003ADCC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  v4 = v2[29];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
    swift_release(v4);
    v5 = sub_1003ADDE0;
  }
  else
  {
    v6 = v2[28];
    (*(void (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[22], v2[20]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1003ADD6C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003ADD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 216));
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v1;
  *(_QWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  *(_WORD *)(v5 + 32) = 2;
  swift_bridgeObjectRetain(v6);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ADDE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 224));
  sub_100007F8C(v3, v2);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ADE3C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 184);
  swift_willThrow(a1);

  swift_task_dealloc(*(_QWORD *)(v1 + 176));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1003ADE84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a4;
  v45 = a3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  v12 = type metadata accessor for DIPError.Code(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v47;
  v17 = (void *)sub_1000D7548(*(_QWORD *)(a2 + 16), *(void **)(a2 + 24));
  if (!v16)
  {
    v47 = v11;
    v43 = v6;
    v44 = v9;
    v18 = v46;
    if (v17)
    {
      v42 = v17;
      v19 = v47;
      defaultLogger()(v17);
      v20 = v45;
      v21 = v18;
      v22 = sub_100022948(v45, v18);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.debug.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v41 = swift_slowAlloc(32, -1);
        v50 = v41;
        *(_DWORD *)v25 = 136315394;
        v48 = sub_1000E3AC8(0xD00000000000001CLL, 0x800000010055D0D0, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v25 + 4);
        *(_WORD *)(v25 + 12) = 2048;
        __asm { BR              X10 }
      }
      sub_100007F8C(v20, v18);

      v31 = *(void (**)(char *, uint64_t))(v43 + 8);
      v32 = v5;
      v31(v19, v5);
      StoredPrearmTrust.update(keyBlob:version:)(v20, v21, 2);
      v33 = sub_1000D6288();
      v34 = v44;
      v35 = defaultLogger()(v33);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.debug.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v50 = v39;
        *(_DWORD *)v38 = 136315138;
        v48 = sub_1000E3AC8(0xD00000000000001CLL, 0x800000010055D0D0, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v38 + 4);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s updated blob saved", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

        v40 = v44;
      }
      else
      {

        v40 = v34;
      }
      v31(v40, v32);
    }
    else
    {
      v26 = v15;
      (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v12);
      v27 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v28 = type metadata accessor for DIPError(0);
      v29 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v28, v29, 0, 0);
      v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x800000010055D110, 0, v26, 0, v27, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000001CLL, 0x800000010055D0D0, 480);
      swift_willThrow(v30);
    }
  }
}

uint64_t sub_1003AE3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[21] = v7;
  v5[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AE450, 0, 0);
}

uint64_t sub_1003AE450()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_1003AE4A4;
  return sub_1000160E0();
}

uint64_t sub_1003AE4A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AE500, 0, 0);
}

uint64_t sub_1003AE500()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 192);
  if (v1)
  {
    v2 = v0 + 16;
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 200) = v5;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1003AE6CC;
    v6 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_100454F88;
    v7[3] = &unk_1006156A8;
    v7[4] = v6;
    objc_msgSend(v1, "addNotificationWithType:documentType:issuerName:completion:", v4, v3, v5, v7);
    return swift_continuation_await(v2);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 104))(v9, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 160));
    v10 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v11 = type metadata accessor for DIPError(0);
    v12 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v11, v12, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010053F770, 0, v9, 0, v10, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000002ELL, 0x800000010055D0A0, 494);
    swift_willThrow(v13);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003AE6CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 208) = v1;
  if (v1)
    v2 = sub_1003AE770;
  else
    v2 = sub_1003AE72C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AE72C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AE770(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 200);
  v3 = *(void **)(v1 + 192);
  swift_willThrow(a1);

  swift_task_dealloc(*(_QWORD *)(v1 + 176));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AE7C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AE820, 0, 0);
}

uint64_t sub_1003AE820()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_1003AE874;
  return sub_1000160E0();
}

uint64_t sub_1003AE874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AE8D0, 0, 0);
}

uint64_t sub_1003AE8D0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1003AEA80;
    v4 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_100454F88;
    v5[3] = &unk_100615690;
    v5[4] = v4;
    objc_msgSend(v1, "updateProofingConfiguration:completion:", v3, v5);
    return swift_continuation_await(v2);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 104))(v7, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 136));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010053F770, 0, v7, 0, v8, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000002BLL, 0x800000010055D070, 501);
    swift_willThrow(v11);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003AEA80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_1003AEB20;
  else
    v2 = sub_1003AEAE0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AEAE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AEB20(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 168);
  swift_willThrow(a1);

  swift_task_dealloc(*(_QWORD *)(v1 + 152));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AEB68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AEBC8, 0, 0);
}

uint64_t sub_1003AEBC8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1003AEC1C;
  return sub_1000160E0();
}

uint64_t sub_1003AEC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AEC78, 0, 0);
}

uint64_t sub_1003AEC78()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = swift_allocObject(&unk_100615660, 24, 7);
    *(_QWORD *)(v0 + 80) = v2;
    *(_QWORD *)(v2 + 16) = v1;
    v3 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
    v4 = v1;
    v5 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 88) = v5;
    *v5 = v0;
    v5[1] = sub_1003AEE2C;
    return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 16, &unk_10063ECC0, v2, &type metadata for String, 30.0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v7, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 40));
    v8 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x800000010055D020, 0, v7, 0, v8, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000011, 0x800000010055D050, 508);
    swift_willThrow(v11);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003AEE2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003AEEEC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 80));
    v4 = sub_1003AEE98;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AEE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t sub_1003AEEEC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 80));

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AEF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return swift_task_switch(sub_1003AEF44, 0, 0);
}

uint64_t sub_1003AEF44()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[18];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1003AEFD8;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1003A4D14;
  v4[3] = &unk_100615678;
  v4[4] = v3;
  objc_msgSend(v2, "pairedWatchSEIDWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1003AEFD8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_1003AF050;
  else
    v2 = sub_1003AF038;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AF038()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD **)(v0 + 136);
  *v1 = *(_QWORD *)(v0 + 120);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AF050(uint64_t a1)
{
  uint64_t v1;

  swift_willThrow(a1);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003AF138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10063EC7C);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10001D0A0;
  return sub_1003AF328(a5);
}

uint64_t sub_1003AF328(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_10062FEC0);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v2[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[16] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v10);
  v2[18] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006364D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v11);
  v2[20] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v2[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[22] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v14);
  v2[24] = swift_task_alloc(v14);
  v2[25] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003AF484, 0, 0);
}

uint64_t sub_1003AF484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _QWORD *v11;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  v6 = v4 + v5;
  swift_beginAccess(v4 + v5, v0 + 16, 0, 0);
  sub_1003B14A0(v6, v3);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 216) = v7;
  if (v7(v3, 1, v1) == 1)
  {
    sub_1003B14E8(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 48);
    v10.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 32))(v8, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    if ((static UUID.== infix(_:_:)(v8, v9, v10) & 1) != 0)
    {
      v11 = (_QWORD *)swift_task_alloc(dword_10062FE44);
      *(_QWORD *)(v0 + 224) = v11;
      *v11 = v0;
      v11[1] = sub_1003AF8B4;
      return sub_1000160E0();
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168));
  }
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 208);
  _StringGuts.grow(_:)(77);
  v17._countAndFlagsBits = 0xD000000000000034;
  v17._object = (void *)0x800000010055CD90;
  String.append(_:)(v17);
  sub_1003B14A0(v16, v15);
  if (v13(v15, 1, v14))
  {
    sub_1003B14E8(*(_QWORD *)(v0 + 152));
    v18 = 0;
    v19 = (void *)0xE000000000000000;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 184);
    v22 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    v24 = sub_1003B14E8(v23);
    v18 = UUID.uuidString.getter(v24);
    v19 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 128);
  v54 = *(_QWORD *)(v0 + 120);
  v52 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 80);
  v50 = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 88);
  v30 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 72);
  v31._countAndFlagsBits = v18;
  v31._object = v19;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v19);
  v32._object = (void *)0x800000010055CDD0;
  v32._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v32);
  v33 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v33);
  object = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v30);
  v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v28, 0, v36, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000031, 0x800000010055CFE0, 551);
  v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v38 = swift_allocError(v51, v37, 0, 0);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v39, v50, v51);
  defaultLogger()(v40);
  DIPRecordError(_:message:log:)(v38, 0, 0xE000000000000000, v27);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v27, v54);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
  swift_errorRelease(v38);
  v41 = *(_QWORD *)(v0 + 192);
  v42 = *(_QWORD *)(v0 + 184);
  v44 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 160);
  v46 = *(_QWORD *)(v0 + 136);
  v45 = *(_QWORD *)(v0 + 144);
  v48 = *(_QWORD *)(v0 + 104);
  v47 = *(_QWORD *)(v0 + 112);
  v49 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AF8B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AF910, 0, 0);
}

uint64_t sub_1003AF910()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  void *object;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = objc_msgSend(*(id *)(v0 + 232), "deviceID");

    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    defaultLogger()(v10);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v4, v2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    v79 = v7;
    if (v14)
    {
      v71 = *(_QWORD *)(v0 + 176);
      v72 = *(_QWORD *)(v0 + 168);
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = v17;
      v20 = swift_slowAlloc(32, -1);
      v81 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = UUID.uuidString.getter(v20);
      v73 = v18;
      v23 = v22;
      *(_QWORD *)(v0 + 40) = sub_1000E3AC8(v21, v22, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 4);
      swift_bridgeObjectRelease(v23);
      v24 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v24(v15, v72);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Completed secure ranging with watch with sessionID: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v16, v75);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 8);
      v24(v15, *(_QWORD *)(v0 + 168));

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    v32 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 112);
    v35 = *(void **)(v0 + 56);
    v36 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v34, 1, 1, v36);
    v37 = (_QWORD *)swift_allocObject(&unk_100615638, 56, 7);
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v35;
    v37[5] = v79;
    v37[6] = v9;
    v38 = v35;
    swift_bridgeObjectRetain(v9);
    v39 = sub_1001075D4(v34, (uint64_t)&unk_10063ECB0, (uint64_t)v37);
    swift_bridgeObjectRelease(v9);
    swift_release(v39);
    v24(v32, v33);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168));
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 152);
    v28 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 208);
    v81 = 0;
    v82 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v29._countAndFlagsBits = 0xD000000000000034;
    v29._object = (void *)0x800000010055CD90;
    String.append(_:)(v29);
    sub_1003B14A0(v28, v27);
    if (v25(v27, 1, v26))
    {
      sub_1003B14E8(*(_QWORD *)(v0 + 152));
      v30 = 0;
      v31 = (void *)0xE000000000000000;
    }
    else
    {
      v41 = *(_QWORD *)(v0 + 176);
      v40 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 168);
      v43 = *(_QWORD *)(v0 + 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
      v44 = sub_1003B14E8(v43);
      v30 = UUID.uuidString.getter(v44);
      v31 = v45;
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    }
    v46 = *(_QWORD *)(v0 + 168);
    v47 = *(_QWORD *)(v0 + 136);
    v78 = *(_QWORD *)(v0 + 128);
    v80 = *(_QWORD *)(v0 + 120);
    v77 = *(_QWORD *)(v0 + 96);
    v48 = *(_QWORD *)(v0 + 80);
    v74 = *(_QWORD *)(v0 + 104);
    v76 = *(_QWORD *)(v0 + 88);
    v50 = *(_QWORD *)(v0 + 64);
    v49 = *(_QWORD *)(v0 + 72);
    v51._countAndFlagsBits = v30;
    v51._object = v31;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v31);
    v52._object = (void *)0x800000010055CDD0;
    v52._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v52);
    v53 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v46, v53);
    object = v54._object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v48, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v50);
    v56 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v81, v82, 0, v48, 0, v56, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000031, 0x800000010055CFE0, 551);
    v57 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v58 = swift_allocError(v76, v57, 0, 0);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v59, v74, v76);
    defaultLogger()(v60);
    DIPRecordError(_:message:log:)(v58, 0, 0xE000000000000000, v47);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v47, v80);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v74, v76);
    swift_errorRelease(v58);
  }
  v61 = *(_QWORD *)(v0 + 192);
  v62 = *(_QWORD *)(v0 + 184);
  v64 = *(_QWORD *)(v0 + 152);
  v63 = *(_QWORD *)(v0 + 160);
  v66 = *(_QWORD *)(v0 + 136);
  v65 = *(_QWORD *)(v0 + 144);
  v68 = *(_QWORD *)(v0 + 104);
  v67 = *(_QWORD *)(v0 + 112);
  v69 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10063EC84);
  *(_QWORD *)(v6 + 16) = v9;
  *v9 = v6;
  v9[1] = sub_10001D0A0;
  return sub_1003B0100(a5, a6);
}

uint64_t sub_1003B0100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = sub_100004828(&qword_10062FEC0);
  v3[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v3[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[18] = v6;
  v3[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError(0);
  v3[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[21] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v9);
  v3[23] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v3[24] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[25] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v12);
  v3[27] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_1006364D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v13);
  v3[29] = swift_task_alloc(v13);
  v14 = type metadata accessor for UUID(0);
  v3[30] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[31] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v16);
  v3[33] = swift_task_alloc(v16);
  return swift_task_switch(sub_1003B0264, 0, 0);
}

uint64_t sub_1003B0264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _QWORD *v11;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  *(_QWORD *)(v0 + 272) = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  v6 = v4 + v5;
  swift_beginAccess(v4 + v5, v0 + 16, 0, 0);
  sub_1003B14A0(v6, v3);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 280) = v7;
  if (v7(v3, 1, v1) == 1)
  {
    sub_1003B14E8(*(_QWORD *)(v0 + 232));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 104);
    v10.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 32))(v8, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
    if ((static UUID.== infix(_:_:)(v8, v9, v10) & 1) != 0)
    {
      v11 = (_QWORD *)swift_task_alloc(dword_10062FE44);
      *(_QWORD *)(v0 + 288) = v11;
      *v11 = v0;
      v11[1] = sub_1003B0694;
      return sub_1000160E0();
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
  }
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 120) + *(_QWORD *)(v0 + 272);
  _StringGuts.grow(_:)(77);
  v17._countAndFlagsBits = 0xD000000000000034;
  v17._object = (void *)0x800000010055CD90;
  String.append(_:)(v17);
  sub_1003B14A0(v16, v15);
  if (v13(v15, 1, v14))
  {
    sub_1003B14E8(*(_QWORD *)(v0 + 224));
    v18 = 0;
    v19 = (void *)0xE000000000000000;
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 224);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    v24 = sub_1003B14E8(v23);
    v18 = UUID.uuidString.getter(v24);
    v19 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  v26 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 208);
  v53 = *(_QWORD *)(v0 + 200);
  v54 = *(_QWORD *)(v0 + 192);
  v52 = *(_QWORD *)(v0 + 168);
  v28 = *(_QWORD *)(v0 + 152);
  v50 = *(_QWORD *)(v0 + 176);
  v51 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 136);
  v29 = *(_QWORD *)(v0 + 144);
  v31._countAndFlagsBits = v18;
  v31._object = v19;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v19);
  v32._object = (void *)0x800000010055CDD0;
  v32._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v32);
  v33 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v33);
  object = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v30);
  v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v28, 0, v36, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000033, 0x800000010055CE60, 571);
  v37 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v38 = swift_allocError(v51, v37, 0, 0);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v39, v50, v51);
  defaultLogger()(v40);
  DIPRecordError(_:message:log:)(v38, 0, 0xE000000000000000, v27);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v27, v54);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
  swift_errorRelease(v38);
  v41 = *(_QWORD *)(v0 + 256);
  v43 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 232);
  v45 = *(_QWORD *)(v0 + 208);
  v44 = *(_QWORD *)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 176);
  v46 = *(_QWORD *)(v0 + 184);
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B06F0, 0, 0);
}

uint64_t sub_1003B06F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  Class isa;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  void *v65;
  Swift::String v66;
  id v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  Swift::String v104;
  void *object;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(void **)(v0 + 296);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v56 = *(_QWORD *)(v0 + 240);
    v57 = *(_QWORD *)(v0 + 224);
    v58 = *(_QWORD *)(v0 + 120) + *(_QWORD *)(v0 + 272);
    _StringGuts.grow(_:)(77);
    v59._countAndFlagsBits = 0xD000000000000034;
    v59._object = (void *)0x800000010055CD90;
    String.append(_:)(v59);
    sub_1003B14A0(v58, v57);
    if (v55(v57, 1, v56))
    {
      sub_1003B14E8(*(_QWORD *)(v0 + 224));
      v60 = 0;
      v61 = (void *)0xE000000000000000;
    }
    else
    {
      v91 = *(_QWORD *)(v0 + 248);
      v90 = *(_QWORD *)(v0 + 256);
      v92 = *(_QWORD *)(v0 + 240);
      v93 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v93, v92);
      v94 = sub_1003B14E8(v93);
      v60 = UUID.uuidString.getter(v94);
      v61 = v95;
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
    }
    v96 = *(_QWORD *)(v0 + 240);
    v97 = *(_QWORD *)(v0 + 208);
    v137 = *(_QWORD *)(v0 + 200);
    v139 = *(_QWORD *)(v0 + 192);
    v135 = *(_QWORD *)(v0 + 168);
    v98 = *(_QWORD *)(v0 + 152);
    v131 = *(_QWORD *)(v0 + 176);
    v133 = *(_QWORD *)(v0 + 160);
    v100 = *(_QWORD *)(v0 + 136);
    v99 = *(_QWORD *)(v0 + 144);
    v101._countAndFlagsBits = v60;
    v101._object = v61;
    String.append(_:)(v101);
    swift_bridgeObjectRelease(v61);
    v102._countAndFlagsBits = 0xD000000000000015;
    v102._object = (void *)0x800000010055CDD0;
    String.append(_:)(v102);
    v103 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v96, v103);
    object = v104._object;
    String.append(_:)(v104);
    swift_bridgeObjectRelease(object);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v98, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v100);
    v106 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v98, 0, v106, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000033, 0x800000010055CE60, 571);
    v107 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v87 = swift_allocError(v133, v107, 0, 0);
    v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v108, v131, v133);
    defaultLogger()(v109);
    DIPRecordError(_:message:log:)(v87, 0, 0xE000000000000000, v97);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v97, v139);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v131, v133);
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 112);
  v3 = objc_msgSend(*(id *)(v0 + 296), "deviceID");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = (void *)_convertErrorToNSError(_:)(v2);
  v8 = (unint64_t)objc_msgSend(v7, "code");

  if ((v8 & 0x8000000000000000) != 0)
  {
    v120 = "Negative value is not representable";
    v121 = 35;
    v122 = 3451;
  }
  else
  {
    if (!HIDWORD(v8))
    {
      v126 = v6;
      v10 = defaultLogger()(v9);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v13 = 67109120;
        *(_DWORD *)(v0 + 304) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 308, v13 + 4);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, " SFError : %u", v13, 8u);
        swift_slowDealloc(v13, -1, -1);
      }
      v14 = *(_QWORD *)(v0 + 216);
      v15 = *(_QWORD *)(v0 + 192);
      v16 = *(_QWORD *)(v0 + 200);

      v128 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v128(v14, v15);
      v138 = *(_QWORD *)(v0 + 264);
      v134 = *(_QWORD *)(v0 + 248);
      v136 = *(_QWORD *)(v0 + 240);
      v17 = *(_QWORD *)(v0 + 208);
      v127 = *(_QWORD *)(v0 + 192);
      v129 = *(_QWORD *)(v0 + 168);
      v18 = *(_QWORD *)(v0 + 152);
      v130 = *(_QWORD *)(v0 + 160);
      v132 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 136);
      v19 = *(_QWORD *)(v0 + 144);
      if ((_DWORD)v8 == 15)
      {
        v125 = v4;
        v21 = *(_QWORD *)(v0 + 112);
        v123 = *(char **)(v0 + 120);
        v124 = *(_QWORD *)(v0 + 128);
        _StringGuts.grow(_:)(119);
        v22._countAndFlagsBits = 0xD000000000000062;
        v22._object = (void *)0x800000010055CF40;
        String.append(_:)(v22);
        swift_getErrorValue(v21, v0 + 96, v0 + 64);
        v23._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
        v24 = v23._object;
        String.append(_:)(v23);
        swift_bridgeObjectRelease(v24);
        v25._countAndFlagsBits = 0xD000000000000011;
        v25._object = (void *)0x800000010055CF20;
        String.append(_:)(v25);
        v26 = (id)SFAuthenticationErrorToString(15);
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v30._countAndFlagsBits = v27;
        v30._object = v29;
        String.append(_:)(v30);
        swift_bridgeObjectRelease(v29);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.failedToCompleteSecureRangingWithWatch(_:), v20);
        v31 = sub_100004828((uint64_t *)&unk_1006325A0);
        v32 = sub_100004828((uint64_t *)&unk_100633440);
        v33 = *(_QWORD *)(v32 - 8);
        v34 = *(_QWORD *)(v33 + 72);
        v35 = *(unsigned __int8 *)(v33 + 80);
        v36 = (v35 + 32) & ~v35;
        v37 = swift_allocObject(v31, v36 + v34, v35 | 7);
        *(_OWORD *)(v37 + 16) = xmmword_10051FFB0;
        v38 = v37 + v36;
        v39 = (_QWORD *)(v38 + *(int *)(v32 + 48));
        v40 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
        v41 = type metadata accessor for DIPError.PropertyKey(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v38, v40, v41);
        v42 = (void *)_convertErrorToNSError(_:)(v21);
        v43 = objc_msgSend(v42, "code");

        v39[3] = &type metadata for Int;
        *v39 = v43;
        v44 = sub_10011D314(v37);
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v18, 0, v44, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000033, 0x800000010055CE60, 585);
        v45 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v46 = swift_allocError(v130, v45, 0, 0);
        v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v47, v132, v130);
        defaultLogger()(v48);
        DIPRecordError(_:message:log:)(v46, 0, 0xE000000000000000, v17);
        v128(v17, v127);
        swift_errorRelease(v46);
        v49 = *(void **)&v123[OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager];
        isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v49, "cancelAuthenticationSessionWithID:", isa);

        v51 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v124, 1, 1, v51);
        v52 = (_QWORD *)swift_allocObject(&unk_100615610, 56, 7);
        v52[2] = 0;
        v52[3] = 0;
        v52[4] = v123;
        v52[5] = v125;
        v52[6] = v126;
        v53 = v123;
        swift_bridgeObjectRetain(v126);
        v54 = sub_1001075D4(v124, (uint64_t)&unk_10063ECA8, (uint64_t)v52);
        swift_bridgeObjectRelease(v126);
        swift_release(v54);
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v132, v130);
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v138, v136);
LABEL_14:
        v110 = *(_QWORD *)(v0 + 256);
        v112 = *(_QWORD *)(v0 + 224);
        v111 = *(_QWORD *)(v0 + 232);
        v114 = *(_QWORD *)(v0 + 208);
        v113 = *(_QWORD *)(v0 + 216);
        v116 = *(_QWORD *)(v0 + 176);
        v115 = *(_QWORD *)(v0 + 184);
        v117 = *(_QWORD *)(v0 + 152);
        v118 = *(_QWORD *)(v0 + 128);
        swift_task_dealloc(*(_QWORD *)(v0 + 264));
        swift_task_dealloc(v110);
        swift_task_dealloc(v111);
        swift_task_dealloc(v112);
        swift_task_dealloc(v113);
        swift_task_dealloc(v114);
        swift_task_dealloc(v115);
        swift_task_dealloc(v116);
        swift_task_dealloc(v117);
        swift_task_dealloc(v118);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v62 = *(_QWORD *)(v0 + 112);
      swift_bridgeObjectRelease(v126);
      _StringGuts.grow(_:)(136);
      v63._countAndFlagsBits = 0xD000000000000073;
      v63._object = (void *)0x800000010055CEA0;
      String.append(_:)(v63);
      swift_getErrorValue(v62, v0 + 88, v0 + 40);
      v64._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
      v65 = v64._object;
      String.append(_:)(v64);
      swift_bridgeObjectRelease(v65);
      v66._countAndFlagsBits = 0xD000000000000011;
      v66._object = (void *)0x800000010055CF20;
      String.append(_:)(v66);
      v67 = (id)SFAuthenticationErrorToString(v8);
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

      v71._countAndFlagsBits = v68;
      v71._object = v70;
      String.append(_:)(v71);
      swift_bridgeObjectRelease(v70);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v18, enum case for DIPError.Code.failedToCompleteSecureRangingWithWatch(_:), v20);
      v72 = sub_100004828((uint64_t *)&unk_1006325A0);
      v73 = sub_100004828((uint64_t *)&unk_100633440);
      v74 = *(_QWORD *)(v73 - 8);
      v75 = *(_QWORD *)(v74 + 72);
      v76 = *(unsigned __int8 *)(v74 + 80);
      v77 = (v76 + 32) & ~v76;
      v78 = swift_allocObject(v72, v77 + v75, v76 | 7);
      *(_OWORD *)(v78 + 16) = xmmword_10051FFB0;
      v79 = v78 + v77;
      v80 = (_QWORD *)(v78 + v77 + *(int *)(v73 + 48));
      v81 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v82 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 104))(v79, v81, v82);
      v83 = (void *)_convertErrorToNSError(_:)(v62);
      v84 = objc_msgSend(v83, "code");

      v80[3] = &type metadata for Int;
      *v80 = v84;
      v85 = sub_10011D314(v78);
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v18, 0, v85, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000033, 0x800000010055CE60, 592);
      v86 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v87 = swift_allocError(v130, v86, 0, 0);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v88, v132, v130);
      defaultLogger()(v89);
      DIPRecordError(_:message:log:)(v87, 0, 0xE000000000000000, v17);
      v128(v17, v127);
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v132, v130);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v138, v136);
LABEL_13:
      swift_errorRelease(v87);
      goto LABEL_14;
    }
    v120 = "Not enough bits to represent the passed value";
    v121 = 45;
    v122 = 3455;
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v120, v121, 2, "Swift/Integers.swift", 20, 2, v122, 0);
}

uint64_t sub_1003B1250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  return swift_task_switch(sub_1003B126C, 0, 0);
}

uint64_t sub_1003B126C()
{
  uint64_t v0;

  sub_10020A9A0(*(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  sub_100109FB8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1003B12CC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IdentityWatchSessionManagementListener(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1003B1378()
{
  return type metadata accessor for IdentityWatchSessionManagementListener(0);
}

uint64_t type metadata accessor for IdentityWatchSessionManagementListener(uint64_t a1)
{
  uint64_t result;

  result = qword_10063EC28;
  if (!qword_10063EC28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityWatchSessionManagementListener);
  return result;
}

void sub_1003B13BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1003B144C(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_1003B144C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10063EC88)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10063EC88);
  }
}

uint64_t sub_1003B14A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006364D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B14E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828((uint64_t *)&unk_1006364D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003B152C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10063ECA4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001D0A0;
  return sub_1003A7E34(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1003B15B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ECBC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  v5[17] = a1;
  v5[18] = v4;
  return swift_task_switch(sub_1003AEF44, 0, 0);
}

uint64_t sub_1003B1614()
{
  uint64_t v0;

  sub_100007F8C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 58, 7);
}

uint64_t sub_1003B1648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ECD4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1003AD9A0(a1, v4, v1 + 24);
}

uint64_t *sub_1003B16B0(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[3];
  sub_100022948(*a1, a1[1]);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1003B16E8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100007F8C(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100007F8C(v0[8], v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_1003B1724()
{
  uint64_t v0;

  sub_1003ADE84(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1003B1744(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100007EE8;
  return v8(a1, v5);
}

uint64_t sub_1003B17B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v18[1] = v3;
    v14 = swift_slowAlloc(12, -1);
    v18[0] = v6;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v20 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a2);
    v19 = sub_1000E3AC8(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Trying to unregister for phone lock notifications for watch with pairingID: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, _QWORD))(v7 + 8))(v10, v18[0]);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return sub_1004FEFCC(a1, a2);
}

uint64_t sub_1003B19A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_1003B1A18, 0, 0);
}

uint64_t sub_1003B1A18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v1[9];
    v6 = v1[6];
    v7 = v1[7];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    v1[2] = sub_1000E3AC8(0xD000000000000042, 0x800000010055D770, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s called", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  }
  else
  {
    v5 = v1[9];
    v6 = v1[6];
    v11 = v1[7];

    v10 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  }
  v10(v5, v6);
  v1[10] = v10;
  v12 = (_QWORD *)swift_task_alloc(dword_10063EC3C);
  v1[11] = v12;
  *v12 = v1;
  v12[1] = sub_1003B1BBC;
  return sub_1003A558C(v1[3], v1[4]);
}

uint64_t sub_1003B1BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003B1D34;
  else
    v3 = sub_1003B1C20;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003B1C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v2, 24, 7);
  sub_1000D6044();
  if (v1)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 80);
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);
    defaultLogger()(v3);
    DIPRecordError(_:message:log:)(v1, 0, 0xE000000000000000, v11);
    swift_errorRelease(v1);
    v10(v11, v12);
  }
  else
  {
    v4 = v3;
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(void **)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = (_QWORD *)swift_allocObject(&unk_100615BE8, 48, 7);
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v4;
    v8[5] = v6;
    swift_bridgeObjectRetain(v5);
    swift_retain(v4);
    v9 = v6;
    sub_1000D6570((uint64_t)sub_1003B6A0C, (uint64_t)v8);
    swift_release(v8);
    swift_release(v4);
  }
  v13 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B1D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(void (**)(uint64_t, uint64_t))(v1 + 80);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 48);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  swift_errorRelease(v2);
  v3(v4, v5);
  v6 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 72));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003B1DB4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v25 - v10;
  defaultLogger()(v9);
  v12 = swift_bridgeObjectRetain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v27 = a1;
  if (v15)
  {
    v26 = v4;
    v16 = swift_slowAlloc(12, -1);
    v25 = v8;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v29[0] = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain(a2);
    v28 = sub_1000E3AC8(a1, a2, v29);
    v4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Trying to remove proofing session for watch with pairingID: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  v19 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v19, 24, 7);
  sub_1000D6044();
  v21 = v20;
  v22 = (_QWORD *)swift_allocObject(&unk_100615C10, 40, 7);
  v23 = v27;
  v22[2] = v21;
  v22[3] = v23;
  v22[4] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain(v21);
  sub_1000D6570((uint64_t)sub_1003B6A2C, (uint64_t)v22);
  swift_release(v21);
  return swift_release(v22);
}

uint64_t sub_1003B2068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3[65] = v2;
  v3[63] = a1;
  v3[64] = a2;
  v6 = type metadata accessor for DIPError.Code(0);
  v3[66] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[67] = v7;
  v3[68] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v3[69] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[70] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[71] = swift_task_alloc(v10);
  v3[72] = swift_task_alloc(v10);
  v3[73] = swift_task_alloc(v10);
  v3[74] = swift_task_alloc(v10);
  v3[75] = swift_task_alloc(v10);
  v3[76] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_10063EC3C);
  v3[77] = v11;
  *v11 = v3;
  v11[1] = sub_1003B215C;
  return sub_1003A558C(a1, a2);
}

uint64_t sub_1003B215C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003B35EC;
  else
    v3 = sub_1003B21C0;
  return swift_task_switch(v3, 0, 0);
}

void sub_1003B21C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v1 = *(_QWORD *)(v0 + 624);
  v2 = qword_1006702A0;
  v3 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 52;
  os_unfair_lock_lock(v3 + 52);
  sub_100139D14(v4, v2, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v5);
  if (!v1)
  {
    v6 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 512);
    v8 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 632) = v8;
    swift_retain(v8);
    sub_10001D410((_QWORD *)(v0 + 16));
    v9 = swift_allocObject(&unk_100615C38, 32, 7);
    *(_QWORD *)(v0 + 640) = v9;
    *(_QWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = swift_allocObject(&unk_100615C60, 32, 7);
    *(_QWORD *)(v0 + 648) = v10;
    *(_QWORD *)(v10 + 16) = sub_1003B6A6C;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v7);
    swift_retain(v9);
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 656) = v12;
    v13 = sub_100004828(&qword_10063EE40);
    *v12 = v0;
    v12[1] = sub_1003B2348;
    AsyncCoreDataContainer.performRead<A>(_:)(v0 + 480, sub_1001B97B8, v10, v13);
  }
}

uint64_t sub_1003B2348()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 664) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003B2910;
  }
  else
  {
    v5 = v2[80];
    swift_release(v2[81]);
    swift_release(v5);
    v2[84] = v2[60];
    v4 = sub_1003B23C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B23C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 680) = v2;
  if (!v2)
  {
    v38 = swift_bridgeObjectRelease(v1);
    v39 = defaultLogger()(v38);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No proofing sessions exist for watch in the database, skip retryProvisioning.", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }
    v43 = *(_QWORD *)(v0 + 632);
    v44 = *(_QWORD *)(v0 + 568);
    goto LABEL_27;
  }
  *(_QWORD *)(v0 + 688) = OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService;
  *(_QWORD *)(v0 + 696) = 0;
  v4 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 704) = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 712) = v5;
  *(_QWORD *)(v0 + 720) = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 728) = v6;
  *(_QWORD *)(v0 + 736) = *(_QWORD *)(v1 + 88);
  v7 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v0 + 744) = v7;
  *(_QWORD *)(v0 + 752) = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v0 + 760) = v8;
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(unsigned __int8 *)(v1 + 32);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v11 = swift_bridgeObjectRetain(v8);
  if (v10 == 1)
  {
    v60 = v4;
    v61 = v8;
    v62 = v9;
    v12 = defaultLogger()(v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "there is a pending watch notification. Will send the notification to the watch", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 608);
    v17 = *(_QWORD *)(v0 + 560);
    v18 = *(_QWORD *)(v0 + 552);
    v19 = *(void **)(v0 + 520);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    *(_QWORD *)(v0 + 464) = type metadata accessor for IdentityWatchSessionManagementListener(0);
    *(_QWORD *)(v0 + 472) = &off_100618498;
    *(_QWORD *)(v0 + 440) = v19;
    v20 = objc_allocWithZone((Class)PKPaymentService);
    v21 = v19;
    v22 = objc_msgSend(v20, "init");
    v23 = type metadata accessor for IdentityProofingConfigProvider();
    v24 = swift_allocObject(v23, 16, 7);
    v25 = type metadata accessor for IdentityProofingTextReplacementProvider(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v26 = IdentityProofingTextReplacementProvider.init()();
    v27 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
    v28 = swift_allocObject(v27, 16, 7);
    v29 = type metadata accessor for IdentityProofingWorkflowProvider();
    v30 = swift_allocObject(v29, 24, 7);
    *(_QWORD *)(v30 + 16) = v28;
    v31 = type metadata accessor for IdentityProofingUserNotificationProvider(0);
    v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v33 = sub_1004F5BA8((uint64_t)v22, v0 + 440, v24, v26, v30, v32);
    if (v3)
      v34 = v60;
    else
      v34 = 0;
    if (v3)
      v35 = v3;
    else
      v35 = 0xE000000000000000;
    swift_bridgeObjectRetain(v3);
    sub_1004495F4(0, 0, 0, 0, v34, v35, 0);
    swift_release(v33);
    swift_bridgeObjectRelease(v35);
    v8 = v61;
    v9 = v62;
  }
  if (v5)
  {
    if (v6)
    {
      if (v7)
      {
        if (v8)
        {
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v3);
          v36 = (_QWORD *)swift_task_alloc(dword_10062FE44);
          *(_QWORD *)(v0 + 768) = v36;
          *v36 = v0;
          v36[1] = sub_1003B2A0C;
          return sub_1000160E0();
        }
        v59 = *(_QWORD *)(v0 + 672);
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(0);
        swift_bridgeObjectRelease(v59);
        v8 = v3;
        goto LABEL_24;
      }
      v45 = *(_QWORD *)(v0 + 672);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v5);
      v46 = v6;
    }
    else
    {
      v45 = *(_QWORD *)(v0 + 672);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v3);
      v46 = v5;
    }
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 672);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    v46 = v3;
  }
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(0);
  swift_bridgeObjectRelease(v45);
LABEL_24:
  swift_bridgeObjectRelease(v9);
  v47 = swift_bridgeObjectRelease(v8);
  v48 = defaultLogger()(v47);
  v40 = Logger.logObject.getter(v48);
  v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v49, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v50, 2u);
    swift_slowDealloc(v50, -1, -1);
  }
  v43 = *(_QWORD *)(v0 + 632);
  v44 = *(_QWORD *)(v0 + 576);
LABEL_27:
  v51 = *(_QWORD *)(v0 + 560);
  v52 = *(_QWORD *)(v0 + 552);
  swift_release(v43);

  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v44, v52);
  v53 = *(_QWORD *)(v0 + 600);
  v54 = *(_QWORD *)(v0 + 592);
  v55 = *(_QWORD *)(v0 + 584);
  v56 = *(_QWORD *)(v0 + 576);
  v57 = *(_QWORD *)(v0 + 568);
  v58 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B2910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 632);
  swift_release(*(_QWORD *)(v0 + 648));
  swift_release(v2);
  v3 = swift_release(v1);
  v4 = *(_QWORD *)(v0 + 664);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 552);
  defaultLogger()(v3);
  DIPRecordError(_:message:log:)(v4, 0xD00000000000002DLL, 0x800000010055D870, v5);
  swift_errorRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 592);
  v10 = *(_QWORD *)(v0 + 584);
  v11 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 568);
  v13 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B2A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B2A68, 0, 0);
}

uint64_t sub_1003B2A68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(void **)(v0 + 776);

  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 512);
    defaultLogger()(v2);
    v4 = swift_bridgeObjectRetain_n(v3, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 600);
    v9 = *(_QWORD *)(v0 + 560);
    v10 = *(_QWORD *)(v0 + 552);
    v11 = *(_QWORD *)(v0 + 512);
    if (v7)
    {
      v12 = *(_QWORD *)(v0 + 504);
      v54 = *(_QWORD *)(v0 + 600);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = v9;
      v14 = swift_slowAlloc(32, -1);
      v56 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)(v0 + 496) = sub_1000E3AC8(v12, v11, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v13 + 4);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Trying to retry provisioning for watch with pairingID: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      v15 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v15(v54, v10);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 512), 2);

      v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v15(v8, v10);
    }
    *(_QWORD *)(v0 + 784) = v15;
    v37 = *(_OWORD *)(v0 + 736);
    v39 = *(_OWORD *)(v0 + 704);
    v38 = *(_OWORD *)(v0 + 720);
    v40 = *(void **)(v0 + 520);
    v41 = *(_QWORD *)(v0 + 504);
    v42 = *(_QWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 752);
    *(_OWORD *)(v0 + 224) = v39;
    *(_OWORD *)(v0 + 240) = v38;
    *(_OWORD *)(v0 + 256) = v37;
    *(_QWORD *)(v0 + 272) = v41;
    *(_QWORD *)(v0 + 280) = v42;
    *(_QWORD *)(v0 + 288) = 0;
    *(_BYTE *)(v0 + 296) = 1;
    *(_OWORD *)(v0 + 304) = xmmword_100520790;
    *(_OWORD *)(v0 + 320) = xmmword_100520790;
    *(_QWORD *)(v0 + 336) = v40;
    *(_QWORD *)(v0 + 424) = &type metadata for IdentityWatchProvisioningProvider;
    *(_QWORD *)(v0 + 432) = &off_100604EF0;
    v43 = swift_allocObject(&unk_100615C88, 152, 7);
    v44 = *(_OWORD *)(v0 + 288);
    v45 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v43 + 112) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v43 + 128) = v45;
    v46 = *(_OWORD *)(v0 + 224);
    v47 = *(_OWORD *)(v0 + 256);
    v48 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v43 + 48) = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v43 + 64) = v47;
    *(_QWORD *)(v0 + 400) = v43;
    *(_QWORD *)(v43 + 144) = *(_QWORD *)(v0 + 336);
    *(_OWORD *)(v43 + 80) = v48;
    *(_OWORD *)(v43 + 96) = v44;
    *(_OWORD *)(v43 + 16) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v43 + 32) = v46;
    v49 = type metadata accessor for IdentityProvisioningManager();
    *(_QWORD *)(v0 + 792) = swift_initStackObject(v49, v0 + 344);
    swift_bridgeObjectRetain(v42);
    v50 = v40;
    sub_100232ACC((_QWORD *)(v0 + 208));
    *(_QWORD *)(v0 + 800) = sub_1004187E8(v0 + 400);
    v51 = (_QWORD *)swift_task_alloc(dword_1006409BC);
    *(_QWORD *)(v0 + 808) = v51;
    *v51 = v0;
    v51[1] = sub_1003B2F08;
    return sub_100418A1C();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 760);
    v17 = *(_QWORD *)(v0 + 744);
    v18 = *(_QWORD *)(v0 + 728);
    v19 = *(_QWORD *)(v0 + 712);
    v20 = *(_QWORD *)(v0 + 632);
    v21 = *(_QWORD *)(v0 + 584);
    v53 = *(_QWORD *)(v0 + 560);
    v55 = *(_QWORD *)(v0 + 552);
    v22 = *(_QWORD *)(v0 + 544);
    v23 = *(_QWORD *)(v0 + 536);
    v24 = *(_QWORD *)(v0 + 528);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), v24);
    v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v28 = swift_allocError(v26, v27, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010053FB00, 0, v22, 0, v25, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD00000000000002ELL, 0x800000010055D8A0, 178);
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v28, 0, 0xE000000000000000, v21);
    swift_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v21, v55);
    swift_errorRelease(v28);
    v30 = *(_QWORD *)(v0 + 600);
    v31 = *(_QWORD *)(v0 + 592);
    v32 = *(_QWORD *)(v0 + 584);
    v33 = *(_QWORD *)(v0 + 576);
    v34 = *(_QWORD *)(v0 + 568);
    v35 = *(_QWORD *)(v0 + 544);
    swift_task_dealloc(*(_QWORD *)(v0 + 608));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003B2F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 808);
  *(_QWORD *)(*(_QWORD *)v1 + 816) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003B36C8;
  else
    v3 = sub_1003B2F6C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003B2F6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;

  v2 = *(_QWORD *)(v1 + 512);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v73 = *(_QWORD *)(v1 + 592);
    v75 = *(void (**)(uint64_t, uint64_t))(v1 + 784);
    v70 = *(_QWORD *)(v1 + 800);
    v71 = *(_QWORD *)(v1 + 552);
    v7 = *(_QWORD *)(v1 + 504);
    v6 = *(_QWORD *)(v1 + 512);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v77 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 488) = sub_1000E3AC8(v7, v6, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 488, v1 + 496, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully provisioned watch with pairingID: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release(v70);

    sub_100232BD0((_QWORD *)(v1 + 208));
    v75(v73, v71);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 800);
    v11 = *(void (**)(uint64_t, uint64_t))(v1 + 784);
    v12 = *(_QWORD *)(v1 + 592);
    v13 = *(_QWORD *)(v1 + 552);
    v14 = *(_QWORD *)(v1 + 512);
    sub_100232BD0((_QWORD *)(v1 + 208));
    swift_bridgeObjectRelease_n(v14, 2);
    swift_release(v10);

    v11(v12, v13);
  }
  v15 = *(_QWORD *)(v1 + 696) + 1;
  if (v15 != *(_QWORD *)(v1 + 680))
  {
    *(_QWORD *)(v1 + 696) = v15;
    v17 = *(_QWORD *)(v1 + 672) + 104 * v15;
    v19 = *(_QWORD *)(v17 + 40);
    v18 = *(_QWORD *)(v17 + 48);
    *(_QWORD *)(v1 + 704) = *(_QWORD *)(v17 + 56);
    v20 = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v1 + 712) = v20;
    *(_QWORD *)(v1 + 720) = *(_QWORD *)(v17 + 72);
    v21 = *(_QWORD *)(v17 + 80);
    *(_QWORD *)(v1 + 728) = v21;
    *(_QWORD *)(v1 + 736) = *(_QWORD *)(v17 + 88);
    v22 = *(_QWORD *)(v17 + 96);
    *(_QWORD *)(v1 + 744) = v22;
    *(_QWORD *)(v1 + 752) = *(_QWORD *)(v17 + 104);
    v23 = *(_QWORD *)(v17 + 112);
    *(_QWORD *)(v1 + 760) = v23;
    v24 = *(_QWORD *)(v17 + 128);
    v25 = *(_BYTE *)(v17 + 32);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v26 = swift_bridgeObjectRetain(v23);
    if ((v25 & 1) != 0)
    {
      v72 = v19;
      v74 = v23;
      v76 = v24;
      v27 = defaultLogger()(v26);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "there is a pending watch notification. Will send the notification to the watch", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }
      v31 = *(_QWORD *)(v1 + 608);
      v32 = *(_QWORD *)(v1 + 560);
      v33 = *(_QWORD *)(v1 + 552);
      v34 = *(void **)(v1 + 520);

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      *(_QWORD *)(v1 + 464) = type metadata accessor for IdentityWatchSessionManagementListener(0);
      *(_QWORD *)(v1 + 472) = &off_100618498;
      *(_QWORD *)(v1 + 440) = v34;
      v35 = objc_allocWithZone((Class)PKPaymentService);
      v36 = v34;
      v37 = objc_msgSend(v35, "init");
      v38 = type metadata accessor for IdentityProofingConfigProvider();
      v39 = swift_allocObject(v38, 16, 7);
      v40 = type metadata accessor for IdentityProofingTextReplacementProvider(0);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      v41 = IdentityProofingTextReplacementProvider.init()();
      v42 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
      v43 = swift_allocObject(v42, 16, 7);
      v44 = type metadata accessor for IdentityProofingWorkflowProvider();
      v45 = swift_allocObject(v44, 24, 7);
      *(_QWORD *)(v45 + 16) = v43;
      v46 = type metadata accessor for IdentityProofingUserNotificationProvider(0);
      v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      v48 = sub_1004F5BA8((uint64_t)v37, v1 + 440, v39, v41, v45, v47);
      if (v18)
        v49 = v72;
      else
        v49 = 0;
      if (v18)
        v50 = v18;
      else
        v50 = 0xE000000000000000;
      swift_bridgeObjectRetain(v18);
      sub_1004495F4(0, 0, 0, 0, v49, v50, 0);
      swift_release(v48);
      swift_bridgeObjectRelease(v50);
      v23 = v74;
      v24 = v76;
    }
    if (v20)
    {
      if (v21)
      {
        if (v22)
        {
          if (v23)
          {
            swift_bridgeObjectRelease(v24);
            swift_bridgeObjectRelease(v18);
            v51 = (_QWORD *)swift_task_alloc(dword_10062FE44);
            *(_QWORD *)(v1 + 768) = v51;
            *v51 = v1;
            v51[1] = sub_1003B2A0C;
            return sub_1000160E0();
          }
          v69 = *(_QWORD *)(v1 + 672);
          swift_bridgeObjectRelease(v20);
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v69);
          v23 = v18;
          goto LABEL_25;
        }
        v53 = *(_QWORD *)(v1 + 672);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v20);
        v54 = v21;
      }
      else
      {
        v53 = *(_QWORD *)(v1 + 672);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v18);
        v54 = v20;
      }
    }
    else
    {
      v53 = *(_QWORD *)(v1 + 672);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      v54 = v18;
    }
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(v53);
LABEL_25:
    swift_bridgeObjectRelease(v24);
    v55 = swift_bridgeObjectRelease(v23);
    v56 = defaultLogger()(v55);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }
    v60 = *(_QWORD *)(v1 + 576);
    v61 = *(_QWORD *)(v1 + 560);
    v62 = *(_QWORD *)(v1 + 552);
    swift_release(*(_QWORD *)(v1 + 632));

    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    goto LABEL_28;
  }
  v16 = *(_QWORD *)(v1 + 632);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 672));
  swift_release(v16);
LABEL_28:
  v63 = *(_QWORD *)(v1 + 600);
  v64 = *(_QWORD *)(v1 + 592);
  v65 = *(_QWORD *)(v1 + 584);
  v66 = *(_QWORD *)(v1 + 576);
  v67 = *(_QWORD *)(v1 + 568);
  v68 = *(_QWORD *)(v1 + 544);
  swift_task_dealloc(*(_QWORD *)(v1 + 608));
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003B35EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 624);
  v3 = *(_QWORD *)(v1 + 584);
  v4 = *(_QWORD *)(v1 + 560);
  v5 = *(_QWORD *)(v1 + 552);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0xD00000000000002DLL, 0x800000010055D870, v3);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 + 600);
  v7 = *(_QWORD *)(v1 + 592);
  v8 = *(_QWORD *)(v1 + 584);
  v9 = *(_QWORD *)(v1 + 576);
  v10 = *(_QWORD *)(v1 + 568);
  v11 = *(_QWORD *)(v1 + 544);
  swift_task_dealloc(*(_QWORD *)(v1 + 608));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003B36C8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = swift_release(*(_QWORD *)(v0 + 800));
  defaultLogger()(v5);
  DIPRecordError(_:message:log:)(v1, 0, 0xE000000000000000, v3);
  swift_errorRelease(v1);
  sub_100232BD0((_QWORD *)(v0 + 208));
  v2(v3, v4);
  v6 = *(_QWORD *)(v0 + 696) + 1;
  if (v6 != *(_QWORD *)(v0 + 680))
  {
    *(_QWORD *)(v0 + 696) = v6;
    v8 = *(_QWORD *)(v0 + 672) + 104 * v6;
    v10 = *(_QWORD *)(v8 + 40);
    v9 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v0 + 704) = *(_QWORD *)(v8 + 56);
    v11 = *(_QWORD *)(v8 + 64);
    *(_QWORD *)(v0 + 712) = v11;
    *(_QWORD *)(v0 + 720) = *(_QWORD *)(v8 + 72);
    v12 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v0 + 728) = v12;
    *(_QWORD *)(v0 + 736) = *(_QWORD *)(v8 + 88);
    v13 = *(_QWORD *)(v8 + 96);
    *(_QWORD *)(v0 + 744) = v13;
    *(_QWORD *)(v0 + 752) = *(_QWORD *)(v8 + 104);
    v14 = *(_QWORD *)(v8 + 112);
    *(_QWORD *)(v0 + 760) = v14;
    v15 = *(_QWORD *)(v8 + 128);
    v16 = *(_BYTE *)(v8 + 32);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v17 = swift_bridgeObjectRetain(v14);
    if ((v16 & 1) != 0)
    {
      v61 = v10;
      v62 = v14;
      v63 = v15;
      v18 = defaultLogger()(v17);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.debug.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "there is a pending watch notification. Will send the notification to the watch", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }
      v22 = *(_QWORD *)(v0 + 608);
      v23 = *(_QWORD *)(v0 + 560);
      v24 = *(_QWORD *)(v0 + 552);
      v25 = *(void **)(v0 + 520);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      *(_QWORD *)(v0 + 464) = type metadata accessor for IdentityWatchSessionManagementListener(0);
      *(_QWORD *)(v0 + 472) = &off_100618498;
      *(_QWORD *)(v0 + 440) = v25;
      v26 = objc_allocWithZone((Class)PKPaymentService);
      v27 = v25;
      v28 = objc_msgSend(v26, "init");
      v29 = type metadata accessor for IdentityProofingConfigProvider();
      v30 = swift_allocObject(v29, 16, 7);
      v31 = type metadata accessor for IdentityProofingTextReplacementProvider(0);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      v32 = IdentityProofingTextReplacementProvider.init()();
      v33 = type metadata accessor for IdentityProofingDeviceMigrationManagerFactory();
      v34 = swift_allocObject(v33, 16, 7);
      v35 = type metadata accessor for IdentityProofingWorkflowProvider();
      v36 = swift_allocObject(v35, 24, 7);
      *(_QWORD *)(v36 + 16) = v34;
      v37 = type metadata accessor for IdentityProofingUserNotificationProvider(0);
      v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
      v39 = sub_1004F5BA8((uint64_t)v28, v0 + 440, v30, v32, v36, v38);
      if (v9)
        v40 = v61;
      else
        v40 = 0;
      if (v9)
        v41 = v9;
      else
        v41 = 0xE000000000000000;
      swift_bridgeObjectRetain(v9);
      sub_1004495F4(0, 0, 0, 0, v40, v41, 0);
      swift_release(v39);
      swift_bridgeObjectRelease(v41);
      v14 = v62;
      v15 = v63;
    }
    if (v11)
    {
      if (v12)
      {
        if (v13)
        {
          if (v14)
          {
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease(v9);
            v42 = (_QWORD *)swift_task_alloc(dword_10062FE44);
            *(_QWORD *)(v0 + 768) = v42;
            *v42 = v0;
            v42[1] = sub_1003B2A0C;
            return sub_1000160E0();
          }
          v60 = *(_QWORD *)(v0 + 672);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v12);
          swift_bridgeObjectRelease(v13);
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v60);
          v14 = v9;
          goto LABEL_22;
        }
        v44 = *(_QWORD *)(v0 + 672);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v11);
        v45 = v12;
      }
      else
      {
        v44 = *(_QWORD *)(v0 + 672);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v9);
        v45 = v11;
      }
    }
    else
    {
      v44 = *(_QWORD *)(v0 + 672);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v12);
      v45 = v9;
    }
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(0);
    swift_bridgeObjectRelease(v44);
LABEL_22:
    swift_bridgeObjectRelease(v15);
    v46 = swift_bridgeObjectRelease(v14);
    v47 = defaultLogger()(v46);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to fetch provisioning identifiers for watch, skip retryProvisioning", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }
    v51 = *(_QWORD *)(v0 + 576);
    v52 = *(_QWORD *)(v0 + 560);
    v53 = *(_QWORD *)(v0 + 552);
    swift_release(*(_QWORD *)(v0 + 632));

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(v0 + 632);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));
  swift_release(v7);
LABEL_25:
  v54 = *(_QWORD *)(v0 + 600);
  v55 = *(_QWORD *)(v0 + 592);
  v56 = *(_QWORD *)(v0 + 584);
  v57 = *(_QWORD *)(v0 + 576);
  v58 = *(_QWORD *)(v0 + 568);
  v59 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B3BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = a2;
  return swift_task_switch(sub_1003B3C10, 0, 0);
}

uint64_t sub_1003B3C10()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_10062F490 != -1)
    swift_once(&qword_10062F490, sub_100139C84);
  v1 = qword_1006702A0;
  v2 = *(os_unfair_lock_s **)(qword_1006702A0 + 16);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 52;
  os_unfair_lock_lock(v2 + 52);
  sub_100139D14(v3, v1, (_OWORD *)(v0 + 16));
  os_unfair_lock_unlock(v4);
  v6 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 224) = v7;
  swift_retain(v7);
  sub_10001D410((_QWORD *)(v0 + 16));
  v8 = swift_allocObject(&unk_100615CB0, 32, 7);
  *(_QWORD *)(v0 + 232) = v8;
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = swift_allocObject(&unk_100615CD8, 32, 7);
  *(_QWORD *)(v0 + 240) = v9;
  *(_QWORD *)(v9 + 16) = &unk_10063EE58;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_bridgeObjectRetain(v5);
  swift_retain(v8);
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 248) = v11;
  *v11 = v0;
  v11[1] = sub_1003B3D7C;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_1003B3D7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003B3E24;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 232);
    swift_release(*(_QWORD *)(v2 + 240));
    swift_release(v5);
    v4 = sub_1003B3DF0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B3DF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B3E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 240));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B3E6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B3ECC, 0, 0);
}

uint64_t sub_1003B3ECC()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[8] = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService);
  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v0[9] = v1;
  *v1 = v0;
  v1[1] = sub_1003B3F24;
  return sub_1000160E0();
}

uint64_t sub_1003B3F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B3F80, 0, 0);
}

uint64_t sub_1003B3F80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(void **)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
    *(_QWORD *)(v0 + 88) = v2;
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 24);
      v4 = (_QWORD *)swift_allocObject(&unk_100615B68, 40, 7);
      *(_QWORD *)(v0 + 96) = v4;
      v4[2] = v2;
      v4[3] = v3;
      v4[4] = v1;
      v5 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
      v6 = v2;
      swift_bridgeObjectRetain(v3);
      v7 = v1;
      v8 = (_QWORD *)swift_task_alloc(v5);
      *(_QWORD *)(v0 + 104) = v8;
      v9 = sub_100004828(&qword_1006368D0);
      *v8 = v0;
      v8[1] = sub_1003B426C;
      return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 16, &unk_10063EE08, v4, v9, 30.0);
    }
    v16 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v16, enum case for DIPError.Code.failedToRegisterForWatchEvents(_:), *(_QWORD *)(v0 + 40));
    v17 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x800000010055D680, 0, v16, 0, v17, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000024, 0x800000010055D650, 210);
    swift_willThrow(v20);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v11, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 40));
    v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x800000010055D600, 0, v11, 0, v12, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000024, 0x800000010055D650, 206);
    swift_willThrow(v15);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B426C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003B4324;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 96));
    v4 = sub_1003B42D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B42D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);

  v3 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1003B4324()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 88);
  v2 = *(void **)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 96));

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B436C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B43F4, 0, 0);
}

uint64_t sub_1003B43F4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[11] = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_remoteSessionService);
  v1 = (_QWORD *)swift_task_alloc(dword_10062FE44);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1003B444C;
  return sub_1000160E0();
}

uint64_t sub_1003B444C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B44A8, 0, 0);
}

uint64_t sub_1003B44A8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(void **)(v0 + 104);
  if (!v1)
  {
    v19 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v19, enum case for DIPError.Code.unableToEstablishSessionWithWatch(_:), *(_QWORD *)(v0 + 40));
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004CLL, 0x800000010055D6B0, 0, v19, 0, v20, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000027, 0x800000010055D700, 222);
    swift_willThrow(v23);
LABEL_8:
    v29 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(void **)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC8coreidvd8DIPWatch_service);
  *(_QWORD *)(v0 + 112) = v2;
  if (!v2)
  {
    v24 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v24, enum case for DIPError.Code.failedToUnregisterForWatchEvents(_:), *(_QWORD *)(v0 + 40));
    v25 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010055D730, 0, v24, 0, v25, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000027, 0x800000010055D700, 226);
    swift_willThrow(v28);

    goto LABEL_8;
  }
  v3 = v2;
  v4 = defaultLogger()(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "IdentityWatchSessionManagementListener unregisterFromEvents called", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v12 = (_QWORD *)swift_allocObject(&unk_100615BA8, 40, 7);
  *(_QWORD *)(v0 + 120) = v12;
  v12[2] = v3;
  v12[3] = v11;
  v12[4] = v1;
  v13 = async function pointer to withTaskTimeoutHandler<A>(timeout:operation:)[1];
  v14 = v3;
  swift_bridgeObjectRetain(v11);
  v15 = v1;
  v16 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 128) = v16;
  v17 = sub_100004828(&qword_1006368D0);
  *v16 = v0;
  v16[1] = sub_1003B4834;
  return withTaskTimeoutHandler<A>(timeout:operation:)(v0 + 16, &unk_10063EE28, v12, v17, 30.0);
}

uint64_t sub_1003B4834()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003B4900;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 120));
    v4 = sub_1003B48A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B48A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);

  v4 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1003B4900()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 112);
  v2 = *(void **)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 120));

  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B4954(uint64_t a1, uint64_t a2, uint8_t *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  void *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];

  v49 = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v46 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError(0);
  v48 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v47 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828((uint64_t *)&unk_1006364D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = defaultLogger()(v16);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    v43 = v13;
    v23 = v9;
    v24 = a2;
    v25 = a3;
    v26 = a4;
    v27 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to check if secure ranging is supported for watch", v22, 2u);
    v28 = v27;
    a4 = v26;
    a3 = v25;
    a2 = v24;
    v9 = v23;
    v13 = v43;
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v29 = v49;
  v30 = *(void **)(v49 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingManager);
  if (objc_msgSend(v30, "isSupportedForType:", 2)
    && objc_msgSend(v30, "isEnabledForType:", 2))
  {
    v31 = objc_msgSend(v30, "authenticateForType:", 2);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 0, 1, v32);
    v33 = v29 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
    swift_beginAccess(v29 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID, v50, 33, 0);
    sub_1003B6860((uint64_t)v13, v33);
    swift_endAccess(v50);
    sub_1003B14A0(v33, (uint64_t)v13);
    sub_1003A7868((uint64_t)v13, 0, a2, a3, a4);
    return sub_1003B14E8((uint64_t)v13);
  }
  else
  {
    v35 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v46, enum case for DIPError.Code.rangingNotSupported(_:), v45);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v37 = v47;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x800000010055D590, 0, v35, 0, v36, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000019, 0x800000010055D5C0, 525);
    v38 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v13, 1, 1, v38);
    v39 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v40 = swift_allocError(v9, v39, 0, 0);
    v41 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v42, v37, v9);
    sub_1003A7868((uint64_t)v13, v40, a2, a3, a4);
    swift_errorRelease(v40);
    sub_1003B14E8((uint64_t)v13);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v37, v9);
  }
}

uint64_t sub_1003B4D74(uint64_t a1, uint8_t *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  id v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v42 - v15;
  defaultLogger()(v14);
  v17 = swift_bridgeObjectRetain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v47 = a1;
  if (v20)
  {
    v46 = v3;
    v21 = swift_slowAlloc(12, -1);
    v43 = v10;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v45 = v8;
    v24 = v23;
    v49 = v23;
    v44 = v13;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(a2);
    v48 = sub_1000E3AC8(a1, (unint64_t)a2, &v49);
    v3 = v46;
    v13 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received unlock event from phone, trying to prearm watch with pairingID: %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    v8 = v45;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v26 = *(void (**)(char *, uint64_t))(v43 + 8);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  }
  v26(v16, v9);
  v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v28._object = (void *)0x800000010055D570;
  v28._countAndFlagsBits = 0xD00000000000001CLL;
  v29 = NSUserDefaults.internalBool(forKey:)(v28);

  if (v29)
  {
    v31 = defaultLogger()(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Secure ranging with watch is not enabled through IDV internal settings, will continue to prearm the watch without it", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v26(v13, v9);
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v8, 1, 1, v35);
    v36 = (_QWORD *)swift_allocObject(&unk_100615B18, 56, 7);
    v36[2] = 0;
    v36[3] = 0;
    v37 = v47;
    v36[4] = v3;
    v36[5] = v37;
    v36[6] = a2;
    swift_bridgeObjectRetain(a2);
    v38 = v3;
    v39 = sub_1001075D4((uint64_t)v8, (uint64_t)&unk_10063EDE8, (uint64_t)v36);
    return swift_release(v39);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v41 = v3;
    sub_1003B4954((uint64_t)v41, v47, a2, v41);

    return swift_bridgeObjectRelease(a2);
  }
}

uint64_t sub_1003B5120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003B51BC, 0, 0);
}

uint64_t sub_1003B51BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1[8];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[13];
    v31 = v1[12];
    v32 = v1[15];
    v8 = v1[7];
    v7 = v1[8];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v33 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v1[5] = sub_1000E3AC8(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to retrieve prearm trust key for watch with pairingID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v11(v32, v31);
  }
  else
  {
    v12 = v1[15];
    v13 = v1[12];
    v14 = v1[13];
    swift_bridgeObjectRelease_n(v1[8], 2);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v1[16] = v11;
  v15 = swift_allocObject(&unk_100615820, 50, 7);
  v1[17] = v15;
  v16 = type metadata accessor for IdentityProofingDataContext();
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_WORD *)(v15 + 48) = 0;
  swift_allocObject(v16, 24, 7);
  sub_1000D6044();
  v1[18] = v17;
  v18 = v17;
  v20 = v1[10];
  v19 = v1[11];
  v22 = v1[8];
  v21 = v1[9];
  v23 = v1[7];
  v24 = (_QWORD *)swift_allocObject(&unk_100615848, 48, 7);
  v1[19] = v24;
  v24[2] = v18;
  v24[3] = v23;
  v24[4] = v22;
  v24[5] = v15;
  v25 = swift_allocObject(&unk_100615870, 32, 7);
  v1[20] = v25;
  *(_QWORD *)(v25 + 16) = sub_1003B5AF4;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 104);
  swift_bridgeObjectRetain(v22);
  swift_retain(v18);
  swift_retain(v15);
  v27(v19, v26, v21);
  v28 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v24);
  v29 = (_QWORD *)swift_task_alloc(v28);
  v1[21] = v29;
  *v29 = v1;
  v29[1] = sub_1003B5578;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v29, v1[11], sub_1001057F4, v25, (char *)&type metadata for () + 8);
}

uint64_t sub_1003B5578()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v3);
  v4 = v2[20];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[10] + 8))(v2[11], v2[9]);
    swift_release(v4);
    v5 = sub_1003B56F0;
  }
  else
  {
    v6 = v2[19];
    (*(void (**)(_QWORD, _QWORD))(v2[10] + 8))(v2[11], v2[9]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_1003B5624;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B5624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(v1 + 16, v0 + 16, 0, 0);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(_WORD *)(v1 + 48);
  sub_100367D70(v5, v6, v7, v8);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v11);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 24) = v8;
  *(_WORD *)(v4 + 32) = v9;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B56F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 152));
  v2 = swift_release(v1);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  defaultLogger()(v2);
  DIPRecordError(_:message:log:)(v3, 0, 0xE000000000000000, v5);
  swift_errorRelease(v3);
  v4(v5, v6);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(v7 + 16, v0 + 16, 0, 0);
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 24);
  v13 = *(_QWORD *)(v7 + 32);
  v14 = *(_QWORD *)(v7 + 40);
  v15 = *(_WORD *)(v7 + 48);
  sub_100367D70(v11, v12, v13, v14);
  swift_release(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v17);
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v12;
  *(_QWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 24) = v14;
  *(_WORD *)(v10 + 32) = v15;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B5804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063ECE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B584C(uint64_t a1)
{
  sub_1000B52B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1003B5880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ECF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1003ABD10(a1, v4);
}

uint64_t sub_1003B58D8()
{
  uint64_t v0;

  sub_100007F8C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1003B5924(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (uint64_t)(v1 + 5);
  v9 = v1[10];
  v8 = v1[11];
  v10 = (_QWORD *)swift_task_alloc(dword_10063ED0C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001D0A0;
  return sub_1003AC460(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1003B59B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003B59E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10063ED24);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10001D0A0;
  return sub_1003ACC14(a1, v5, v4);
}

unint64_t sub_1003B5A44()
{
  return sub_1003ABC0C();
}

unint64_t sub_1003B5A4C()
{
  return sub_1003ABC88();
}

uint64_t *sub_1003B5A54(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[3];
  sub_100007F8C(*a1, a1[1]);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1003B5A8C()
{
  _QWORD *v0;

  if (v0[5])
  {
    sub_100007F8C(v0[2], v0[3]);
    swift_bridgeObjectRelease(v0[5]);
  }
  return swift_deallocObject(v0, 50, 7);
}

uint64_t sub_1003B5AC0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1003B5AF4()
{
  uint64_t v0;

  sub_1003AD2B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1003B5B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ED3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1003A913C(a1, v4);
}

uint64_t sub_1003B5B68()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003B5B9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10063ED4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D0A0;
  return sub_1003A9900(a1, v4, v5, v6);
}

uint64_t sub_1003B5C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_10063ED64);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10001D0A0;
  *(_OWORD *)(v4 + 136) = v5;
  *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch(sub_1003AA1EC, 0, 0);
}

uint64_t sub_1003B5C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ED7C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1003AA350(a1, v4);
}

uint64_t sub_1003B5CC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B5CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10063ED8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001D0A0;
  return sub_1003AA620(a1, v4);
}

uint64_t sub_1003B5D44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003B5D70(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;

  v6 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v8 = *((_QWORD *)v2 + 4);
  v9 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_10063EDA4);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10001D0A0;
  return sub_1003A5918(v9, a1, a2, v6, v7, v8);
}

uint64_t sub_1003B5DFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003B5E20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10063EDB4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D0A0;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_10063EDB0 + dword_10063EDB0))(a1, a2, v6);
}

uint64_t sub_1003B5EA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1003A6824(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

_QWORD *sub_1003B5EC0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_1003B5EFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

id sub_1003B5F30()
{
  uint64_t v0;

  return sub_1003A6A28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1003B5F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1003B5FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_10063EDCC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001D0A0;
  v7 = (_QWORD *)swift_task_alloc(dword_10063EC84);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_10001D0A0;
  return sub_1003B0100(v4, v5);
}

uint64_t sub_1003B6090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B610C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10063EDDC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001D0A0;
  v5 = (_QWORD *)swift_task_alloc(dword_10063EC7C);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10001D0A0;
  return sub_1003AF328(v3);
}

uint64_t sub_1003B61A0(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  __n128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  char *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  Swift::String v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  void *object;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85[24];

  v79 = a1;
  v2 = type metadata accessor for DIPError.Code(0);
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  __chkstk_darwin(v2);
  v77 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v73 = *(_QWORD *)(v4 - 8);
  v74 = v4;
  __chkstk_darwin(v4);
  v72 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  v7 = __chkstk_darwin(v6);
  v78 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v70 - v9;
  v11 = sub_100004828((uint64_t *)&unk_1006364D0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v70 - v15;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v71 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v70 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v70 - v24;
  v26 = v1 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8coreidvd38IdentityWatchSessionManagementListener_rangingSessionID, v85, 0, 0);
  sub_1003B14A0(v26, (uint64_t)v16);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v27(v16, 1, v17) == 1)
  {
    sub_1003B14E8((uint64_t)v16);
LABEL_7:
    v83 = 0;
    v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v44._countAndFlagsBits = 0xD000000000000034;
    v44._object = (void *)0x800000010055CD90;
    String.append(_:)(v44);
    sub_1003B14A0(v26, (uint64_t)v14);
    if (v27(v14, 1, v17))
    {
      sub_1003B14E8((uint64_t)v14);
      v45 = 0;
      v46 = (void *)0xE000000000000000;
    }
    else
    {
      v47 = v71;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v71, v14, v17);
      v48 = sub_1003B14E8((uint64_t)v14);
      v45 = UUID.uuidString.getter(v48);
      v46 = v49;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v47, v17);
    }
    v51 = v80;
    v50 = v81;
    v53 = v73;
    v52 = v74;
    v54 = v72;
    v55._countAndFlagsBits = v45;
    v55._object = v46;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v46);
    v56._object = (void *)0x800000010055CDD0;
    v56._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v56);
    v57 = sub_100004790((unint64_t *)&qword_10063EC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v57);
    object = v58._object;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(object);
    v60 = v83;
    v61 = v84;
    v62 = v77;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v77, enum case for DIPError.Code.rangingSessionIDMismatch(_:), v76);
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v60, v61, 0, v62, 0, v63, 0xD00000000000006DLL, 0x800000010055CDF0, 0xD000000000000030, 0x800000010055D530, 533);
    v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v65 = swift_allocError(v52, v64, 0, 0);
    v67 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 16))(v66, v54, v52);
    v68 = v78;
    defaultLogger()(v67);
    DIPRecordError(_:message:log:)(v65, 0, 0xE000000000000000, v68);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v68, v50);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    return swift_errorRelease(v65);
  }
  v28.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 32))(v25, v16, v17);
  v29 = v79;
  v30 = static UUID.== infix(_:_:)(v25, v79, v28);
  if ((v30 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
    goto LABEL_7;
  }
  v31 = v10;
  defaultLogger()(v30);
  v32 = v23;
  v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 16))(v23, v29, v17);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = v25;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v79 = v31;
    v39 = v38;
    v83 = v38;
    *(_DWORD *)v37 = 136315138;
    v78 = (char *)(v37 + 4);
    v40 = UUID.uuidString.getter(v38);
    v42 = v41;
    v82 = sub_1000E3AC8(v40, v41, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v78);
    swift_bridgeObjectRelease(v42);
    v43 = *(void (**)(char *, uint64_t))(v18 + 8);
    v43(v32, v17);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Initiated secure ranging with watch with sessionID: %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
  }
  else
  {

    v43 = *(void (**)(char *, uint64_t))(v18 + 8);
    v43(v32, v17);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v31, v81);
  }
  return ((uint64_t (*)(char *, uint64_t))v43)(v36, v17);
}

uint64_t sub_1003B67E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10063ECA4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100007EE8;
  return sub_1003A7E34(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1003B6860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006364D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B68B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_10063EE04);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001D0A0;
  *(_QWORD *)(v5 + 152) = v4;
  *(_OWORD *)(v5 + 136) = v6;
  *(_QWORD *)(v5 + 128) = a1;
  return swift_task_switch(sub_1003A7004, 0, 0);
}

uint64_t sub_1003B692C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003B6960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_10063EE24);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001D0A0;
  *(_QWORD *)(v5 + 152) = v4;
  *(_OWORD *)(v5 + 136) = v6;
  *(_QWORD *)(v5 + 128) = a1;
  return swift_task_switch(sub_1003A71E8, 0, 0);
}

uint64_t sub_1003B69D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void *sub_1003B6A0C()
{
  uint64_t v0;

  return sub_1003A7314(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_1003B6A2C()
{
  uint64_t *v0;

  sub_1003A51D4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1003B6A48()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1003B6A6C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1003A6C24(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1003B6A84()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 120);
  if (v1 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 112), v1);
  v2 = *(_QWORD *)(v0 + 136);
  if (v2 >> 60 != 15)
    sub_100007F8C(*(_QWORD *)(v0 + 128), v2);

  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1003B6B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = (_QWORD *)swift_task_alloc(dword_10063EE54);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001D0A0;
  v7[3] = v6;
  v7[4] = v5;
  v7[2] = a2;
  return swift_task_switch(sub_1003B126C, 0, 0);
}

uint64_t sub_1003B6B70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10063EDB4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100007EE8;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_10063EDB0 + dword_10063EDB0))(a1, a2, v6);
}

uint64_t destroy for IdentityWatchSessionManagementListener.DBProofingSession(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t assignWithTake for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityWatchSessionManagementListener.DBProofingSession(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityWatchSessionManagementListener.DBProofingSession()
{
  return &type metadata for IdentityWatchSessionManagementListener.DBProofingSession;
}

uint64_t sub_1003B6F5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v17 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    (*(void (**)(char *, _QWORD))(v18 + 104))(v20, enum case for DIPError.Code.proofingSessionIDUnavailable(_:));
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_100007F30();
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x800000010055D8D0, 0, v20, 0, v24, 0xD00000000000007FLL, 0x800000010055D920, 0xD000000000000031, 0x800000010055D9A0, 39);
    return swift_willThrow(v27);
  }
  if ((a4 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD))(v18 + 104))(v20, enum case for DIPError.Code.targetUnavailable(_:));
    v28 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_100007F30();
    swift_allocError(v29, v30, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000056, 0x800000010055D9E0, 0, v20, 0, v28, 0xD00000000000007FLL, 0x800000010055D920, 0xD000000000000031, 0x800000010055D9A0, 43);
    return swift_willThrow(v27);
  }
  v21 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v21, 24, 7);
  swift_bridgeObjectRetain(a2);
  sub_1000D6044();
  if (v8)
    return swift_bridgeObjectRelease(a2);
  v31 = v22;
  v32 = swift_allocObject(&unk_100615DA8, 80, 7);
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = a1;
  *(_QWORD *)(v32 + 32) = a2;
  *(_QWORD *)(v32 + 40) = a3;
  *(_QWORD *)(v32 + 48) = a5;
  *(_QWORD *)(v32 + 56) = a6;
  *(_QWORD *)(v32 + 64) = a7;
  *(double *)(v32 + 72) = a8;
  swift_retain(v31);
  swift_retain(a5);
  swift_retain(a6);
  swift_retain(a7);
  sub_1000D6570((uint64_t)sub_1003B7EFC, v32);
  swift_release(v31);
  return swift_release(v32);
}

void sub_1003B721C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t (*v31)(char *, uint64_t);
  void *v32;
  id v33;
  void *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  Swift::String v42;
  uint64_t v43;
  Swift::Bool v44;
  uint64_t v45;
  char v46;
  uint64_t (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  void *object;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t);
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t (*v72)(char *, uint64_t);
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  Swift::String v126;
  char *v127;
  uint64_t v128;
  uint64_t (*v129)(char *, uint64_t);
  id v130;
  uint64_t v131;
  _QWORD v132[2];

  v130 = a4;
  v124 = a7;
  v121 = a5;
  v122 = a6;
  v128 = a1;
  v11 = sub_100004828(&qword_100637F98);
  __chkstk_darwin(v11);
  v117 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for IdentityProofingUnorderedUIElement(0);
  v120 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v114 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  __chkstk_darwin(v123);
  v125 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v115 = v15;
  v116 = v16;
  __chkstk_darwin(v15);
  v119 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v18);
  v127 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v111 - v25;
  v27 = type metadata accessor for DIPError.Code(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (uint64_t (*)(char *, uint64_t))((char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126._countAndFlagsBits = a2;
  v126._object = a3;
  v31 = v129;
  sub_1000D7010(a2, (uint64_t)a3, (uint64_t)v130);
  if (v31)
    return;
  v113 = v28;
  v128 = v27;
  v129 = v30;
  v111 = v26;
  v112 = v20;
  if (!v32)
  {
    v131 = 0;
    v132[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease(v132[0]);
    v131 = 0xD000000000000023;
    v132[0] = 0x800000010055DA40;
    String.append(_:)(v126);
    v55._countAndFlagsBits = 0x20646E6120;
    v55._object = (void *)0xE500000000000000;
    String.append(_:)(v55);
    v56._countAndFlagsBits = IdentityTarget.debugDescription.getter(v130);
    object = v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(object);
    v58 = v131;
    v59 = v132[0];
    v60 = v129;
    (*(void (**)(uint64_t (*)(char *, uint64_t), _QWORD, uint64_t))(v113 + 104))(v129, enum case for DIPError.Code.internalError(_:), v128);
    v61 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v62 = type metadata accessor for DIPError(0);
    v63 = sub_100007F30();
    swift_allocError(v62, v63, 0, 0);
    v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v58, v59, 0, v60, 0, v61, 0xD00000000000007FLL, 0x800000010055D920, 0xD000000000000031, 0x800000010055D9A0, 49);
    swift_willThrow(v64);
    return;
  }
  v130 = v32;
  v33 = objc_msgSend(v32, "createdAt");
  if (!v33)
  {
    v38 = (uint64_t)v127;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v127, 1, 1, v112);
    goto LABEL_10;
  }
  v34 = v33;
  v35 = v24;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v36 = v21;
  v37 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v38 = (uint64_t)v127;
  v39 = v112;
  v37(v127, v35, v112);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v39) == 1)
  {
LABEL_10:
    sub_100008030(v38, &qword_100633990);
    v65 = v129;
    (*(void (**)(uint64_t (*)(char *, uint64_t), _QWORD, uint64_t))(v113 + 104))(v129, enum case for DIPError.Code.createdAtDateUnavailable(_:), v128);
    v66 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v67 = type metadata accessor for DIPError(0);
    v68 = sub_100007F30();
    swift_allocError(v67, v68, 0, 0);
    v69 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000058, 0x800000010055DA70, 0, v65, 0, v66, 0xD00000000000007FLL, 0x800000010055D920, 0xD000000000000031, 0x800000010055D9A0, 53);
    swift_willThrow(v69);

    return;
  }
  v40 = v111;
  v37(v111, (char *)v38, v39);
  v41 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v42._countAndFlagsBits = 0xD00000000000002CLL;
  v42._object = (void *)0x800000010055DAD0;
  v43 = v39;
  v44 = NSUserDefaults.internalBool(forKey:)(v42);

  if (v44
    || (Date.init()(v45),
        v46 = Date.isAtLeast(days:after:)(objc_msgSend(v130, "connectToWifiReminderInDays"), v40),
        v47 = *(uint64_t (**)(char *, uint64_t))(v36 + 8),
        v48 = v47(v35, v43),
        (v46 & 1) != 0))
  {
    v49 = swift_allocObject(&unk_100615DD0, 48, 7);
    v50 = v121;
    v51 = v122;
    *(_QWORD *)(v49 + 16) = v121;
    *(_QWORD *)(v49 + 24) = v51;
    v52 = v124;
    *(_QWORD *)(v49 + 32) = v124;
    *(double *)(v49 + 40) = a8;
    swift_retain(v50);
    swift_retain(v51);
    swift_retain(v52);
    v53 = v123;
    v54 = (uint64_t)v125;
    runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000039, 0x800000010055DB00, 0xD000000000000031, 0x800000010055D9A0, 65, &unk_10063EE78, v49, v123);
    swift_release(v49);
    v70 = *(_QWORD *)(v54 + *(int *)(v53 + 48));
    if (!v70 || !*(_QWORD *)(v70 + 16))
    {
      v74 = (uint64_t)v117;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))(v117, 1, 1, v118);
      v93 = v128;
      v72 = v129;
      v94 = v113;
LABEL_24:
      sub_100008030(v74, &qword_100637F98);
      (*(void (**)(uint64_t (*)(char *, uint64_t), _QWORD, uint64_t))(v94 + 104))(v72, enum case for DIPError.Code.attributeConfigUnavailable(_:), v93);
      v98 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v99 = type metadata accessor for DIPError(0);
      v100 = sub_100007F30();
      swift_allocError(v99, v100, 0, 0);
      v101 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000006DLL, 0x800000010055DB40, 0, v72, 0, v98, 0xD00000000000007FLL, 0x800000010055D920, 0xD000000000000031, 0x800000010055D9A0, 70);
      swift_willThrow(v101);

      sub_100006350(v54);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v111, v112);
      return;
    }
    swift_bridgeObjectRetain(v70);
    v71 = sub_1004A8604(0xD00000000000001BLL, 0x800000010055DBB0);
    v72 = v129;
    if ((v73 & 1) != 0)
    {
      v74 = (uint64_t)v117;
      v75 = v118;
      (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v117, *(_QWORD *)(v70 + 56) + *(_QWORD *)(v120 + 72) * v71, v118);
      v76 = 0;
    }
    else
    {
      v76 = 1;
      v74 = (uint64_t)v117;
      v75 = v118;
    }
    v95 = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v74, v76, 1, v75);
    swift_bridgeObjectRelease(v70);
    v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v74, 1, v75);
    v97 = v75;
    v93 = v128;
    v94 = v113;
    v54 = (uint64_t)v125;
    if (v96 == 1)
      goto LABEL_24;
    v102 = v120;
    v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 32))(v114, v74, v97);
    v104 = IdentityProofingUnorderedUIElement.title.getter(v103);
    v106 = v105;
    v107 = (_QWORD *)IdentityProofingUnorderedUIElement.messages.getter();
    if (v107)
    {
      v108 = v107;
      if (v107[2])
      {
        v109 = v107[4];
        v110 = v107[5];
        swift_bridgeObjectRetain(v110);
        swift_bridgeObjectRelease(v108);
LABEL_31:
        sub_1004495F4(v104, v106, v109, v110, v126._countAndFlagsBits, (uint64_t)v126._object, 0);

        swift_bridgeObjectRelease(v110);
        swift_bridgeObjectRelease(v106);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v114, v118);
        sub_100006350(v54);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v111, v112);
        return;
      }
      swift_bridgeObjectRelease(v107);
    }
    v109 = 0;
    v110 = 0;
    goto LABEL_31;
  }
  v77 = Date.init()(v48);
  v78 = Date.timeIntervalSinceReferenceDate.getter(v77);
  v129 = v47;
  v79 = v47(v35, v43);
  v81 = v78 - Date.timeIntervalSinceReferenceDate.getter(v79);
  if ((~*(_QWORD *)&v81 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v82 = v40;
  v83 = v115;
  v84 = v116;
  v85 = v119;
  if (v81 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v81 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
    return;
  }
  v86 = v43;
  v87 = defaultLogger()(v80);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.debug.getter(v88);
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint64_t)v81 % 3600;
    v128 = (__int16)(v90
                   - 60
                   * (((__int16)((34953 * (__int16)v90) >> 16) >> 5)
                    + (((v90 + ((-30583 * (__int16)v90) >> 16)) & 0x8000) >> 15)));
    v91 = (int)(((__int16)((34953 * (__int16)v90) >> 16) >> 5)
              + (((v90 + ((-30583 * (__int16)v90) >> 16)) & 0x8000) >> 15));
    v92 = swift_slowAlloc(32, -1);
    *(_DWORD *)v92 = 134218496;
    v131 = (uint64_t)v81 / 3600;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v92 + 4);
    *(_WORD *)(v92 + 12) = 2048;
    v131 = v91;
    v82 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v92 + 14);
    *(_WORD *)(v92 + 22) = 2048;
    v85 = v119;
    v131 = v128;
    v86 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v92 + 24);
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "%ld hour(s) %ld minute(s) %ld second(s) is the time left before which the connect to wifi alert can be triggered.", (uint8_t *)v92, 0x20u);
    swift_slowDealloc(v92, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v83);
  v129(v82, v86);
}

uint64_t sub_1003B7D64(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1003B7D7C, 0, 0);
}

uint64_t sub_1003B7D7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = sub_1004585BC();
  swift_release(v1);
  v0[3] = sub_1004585BC();
  v2 = (uint64_t **)swift_task_alloc(dword_10064212C);
  v0[4] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1003B7E10;
  return sub_100457E5C(v0[2], 0xD000000000000024, 0x800000010053AEF0, 0xD000000000000027, 0x800000010053AF20);
}

uint64_t sub_1003B7E10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003B7E84, 0, 0);
  swift_release(*(_QWORD *)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003B7E84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B7EB8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_1003B7EFC()
{
  uint64_t v0;

  sub_1003B721C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(double *)(v0 + 72));
}

uint64_t sub_1003B7F24()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003B7F58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10063EE74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100007EE8;
  v3[2] = a1;
  return swift_task_switch(sub_1003B7D7C, 0, 0);
}

uint64_t destroy for IdentityProofingConnectToWifiAlertProvider(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *initializeWithCopy for IdentityProofingConnectToWifiAlertProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for IdentityProofingConnectToWifiAlertProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for IdentityProofingConnectToWifiAlertProvider(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProofingConnectToWifiAlertProvider()
{
  return &type metadata for IdentityProofingConnectToWifiAlertProvider;
}

uint64_t sub_1003B8114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  objc_class *v13;
  char *v14;
  char *v15;
  id v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char *v26;
  char *v27;
  objc_super v29;
  objc_super v30;

  v1 = v0;
  v2 = type metadata accessor for DIPHTTPSession.Configuration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  v10 = sub_100004828(&qword_100633968);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2, 1, 1, v10);
  v12 = (_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureSequence) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureCount) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTimeToSkipAX) = 50;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTimeToAlertAX) = 100;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialVideoDelay) = 2000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialVideoDuration) = 2000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultFaceOutOfBoundFrames) = 30;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTutorialResumeDelay) = 1000;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultGestureDetectedSuccessDuration) = 3000;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultLastGestureExtraFrameDuration) = 1000;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultRequiresGoodLuxFlag) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnablePrintReplayFlag) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnableIDMatchingFlag) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultSelfieRequirement) = 1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultTotalFrameCount) = 150;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultMinimumValidFrameCount) = 146;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultDisplayPassiveLivenessFlag) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_defaultEnableAutoFlashFlag) = 1;
  v13 = (objc_class *)type metadata accessor for IdentitySelfHealer();
  v14 = (char *)objc_allocWithZone(v13);
  v15 = &v14[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v30.receiver = v14;
  v30.super_class = v13;
  v16 = objc_msgSendSuper2(&v30, "init");
  v17 = (char *)objc_allocWithZone(v13);
  v18 = &v17[OBJC_IVAR____TtC8coreidvd18IdentitySelfHealer_proofingSessionID];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v29.receiver = v17;
  v29.super_class = v13;
  v19 = objc_msgSendSuper2(&v29, "init");
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_selfHealer) = v19;
  v20 = UUID.init()(v19);
  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (qword_10062F5C8 != -1)
    swift_once(&qword_10062F5C8, sub_1004E0C10);
  v24 = sub_1000352C0(v2, (uint64_t)qword_100670848);
  sub_100035DE8(v24, (uint64_t)v4, type metadata accessor for DIPHTTPSession.Configuration);
  v25 = objc_allocWithZone((Class)type metadata accessor for DIPTopekaWebService(0));
  v26 = (char *)sub_10024000C(v21, v23, (uint64_t)v4);
  *(_QWORD *)(v1 + 16) = v26;
  v27 = &v26[OBJC_IVAR____TtC8coreidvd19DIPTopekaWebService_selfHealer];
  *((_QWORD *)v27 + 1) = &off_100618670;
  swift_unknownObjectWeakAssign(v27, v16);

  return v1;
}

uint64_t sub_1003B8458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9[132] = v8;
  v9[131] = a8;
  v9[130] = a7;
  v9[129] = a6;
  v9[128] = a5;
  v9[127] = a4;
  v9[126] = a3;
  v9[125] = a2;
  v9[124] = a1;
  v10 = type metadata accessor for DIPError.Code(0);
  v9[133] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[134] = v11;
  v9[135] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_10063B3E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[136] = swift_task_alloc(v12);
  v9[137] = swift_task_alloc(v12);
  v9[138] = swift_task_alloc(v12);
  v9[139] = swift_task_alloc(v12);
  v13 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  v9[140] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[141] = swift_task_alloc(v14);
  v9[142] = swift_task_alloc(v14);
  v9[143] = swift_task_alloc(v14);
  v15 = type metadata accessor for DeviceInformationProvider(0);
  v9[144] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v9[145] = v16;
  v9[146] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v9[147] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v9[148] = v18;
  v9[149] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B85B4, 0, 0);
}

uint64_t sub_1003B85B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 1192);
  v2 = *(_QWORD *)(v0 + 1184);
  v46 = *(_QWORD *)(v0 + 1176);
  v3 = *(_QWORD *)(v0 + 1168);
  v41 = *(_QWORD *)(v0 + 1160);
  v43 = *(_QWORD *)(v0 + 1152);
  v4 = *(_QWORD *)(v0 + 1056);
  v5 = *(_QWORD *)(v0 + 1048);
  v6 = *(_QWORD *)(v0 + 1032);
  v7 = *(_QWORD *)(v0 + 1016);
  v8 = *(_QWORD *)(v0 + 1000);
  v48 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  v49 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId + 8);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  v10 = UUID.init()(v9);
  v11 = UUID.uuidString.getter(v10);
  v44 = v12;
  v45 = v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v46);
  v47 = *(_QWORD *)(v4 + 16);
  v13 = *(_QWORD *)(v47 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation + 8);
  v40 = *(_QWORD *)(v47 + OBJC_IVAR____TtC8coreidvd13DIPWebService_conversation);
  type metadata accessor for DIPAccountManager(0);
  swift_bridgeObjectRetain(v13);
  static DIPAccountManager.sharedInstance.getter((_QWORD *)(v0 + 880), v14);
  v15 = *(_QWORD *)(v0 + 904);
  v16 = *(_QWORD *)(v0 + 912);
  sub_10000806C((_QWORD *)(v0 + 880), v15);
  v17 = dispatch thunk of DIPAccountManagerProtocol.appleAuthHeader(_:)(0, 0, v15, v16);
  v38 = v18;
  v39 = v17;
  v19 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 880));
  v20 = DeviceInformationProvider.init()(v19);
  v21 = DeviceInformationProvider.uniqueDeviceID.getter(v20);
  v23 = v22;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v3, v43);
  if (qword_10062F5D8 != -1)
    swift_once(&qword_10062F5D8, sub_1004E424C);
  v24 = *(_QWORD *)(v0 + 1048);
  v25 = *(_QWORD *)(v0 + 1040);
  v42 = *(_OWORD *)(v0 + 1024);
  v26 = *(_QWORD *)(v0 + 1016);
  v27 = *(_QWORD *)(v0 + 1008);
  v37 = *(_OWORD *)(v0 + 992);
  v28 = qword_100670878;
  v29 = unk_100670880;
  swift_bridgeObjectRetain(unk_100670880);
  sub_10008EF5C(0, 0, 0, 0, 0, 0);
  *(_QWORD *)(v0 + 720) = v40;
  *(_QWORD *)(v0 + 728) = v13;
  *(_QWORD *)(v0 + 736) = v45;
  *(_QWORD *)(v0 + 744) = v44;
  *(_QWORD *)(v0 + 752) = v39;
  *(_QWORD *)(v0 + 760) = v38;
  *(_QWORD *)(v0 + 768) = v21;
  *(_QWORD *)(v0 + 776) = v23;
  *(_QWORD *)(v0 + 784) = v28;
  *(_QWORD *)(v0 + 792) = v29;
  *(_OWORD *)(v0 + 800) = v37;
  *(_QWORD *)(v0 + 816) = v27;
  *(_QWORD *)(v0 + 824) = v26;
  *(_OWORD *)(v0 + 832) = v42;
  *(_QWORD *)(v0 + 848) = v25;
  *(_QWORD *)(v0 + 856) = v24;
  *(_QWORD *)(v0 + 864) = v48;
  *(_QWORD *)(v0 + 872) = v49;
  v30 = *(_OWORD *)(v0 + 800);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 784);
  *(_OWORD *)(v0 + 640) = v30;
  v31 = *(_OWORD *)(v0 + 768);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 752);
  *(_OWORD *)(v0 + 608) = v31;
  v32 = *(_OWORD *)(v0 + 864);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 848);
  *(_OWORD *)(v0 + 704) = v32;
  v33 = *(_OWORD *)(v0 + 832);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 816);
  *(_OWORD *)(v0 + 672) = v33;
  v34 = *(_OWORD *)(v0 + 736);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 720);
  *(_OWORD *)(v0 + 576) = v34;
  v35 = (_QWORD *)swift_task_alloc(dword_100639B24);
  *(_QWORD *)(v0 + 1200) = v35;
  *v35 = v0;
  v35[1] = sub_1003B8870;
  return sub_1002491AC(*(_QWORD *)(v0 + 1136), v0 + 560);
}

uint64_t sub_1003B8870()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = (_QWORD *)(*(_QWORD *)v1 + 720);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1200);
  *(_QWORD *)(*(_QWORD *)v1 + 1208) = v0;
  swift_task_dealloc(v3);
  sub_100255370(v2);
  if (v0)
    v4 = sub_1003B8CA8;
  else
    v4 = sub_1003B88E0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B88E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *__dst;
  void *__dsta;

  v42 = v0 + 944;
  v1 = *(_QWORD *)(v0 + 1144);
  v2 = *(_QWORD *)(v0 + 1128);
  v3 = *(_QWORD *)(v0 + 1104);
  v4 = *(_QWORD *)(v0 + 1056);
  sub_1003B9D64(*(_QWORD *)(v0 + 1136), v1);
  v5 = v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2;
  swift_beginAccess(v5, v0 + 968, 0, 0);
  sub_1003B9DA8(v5, v3);
  sub_100035DE8(v1, v2, type metadata accessor for IdentityProofingLivenessConfigResponseV2);
  v6 = sub_100004828(&qword_100633968);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6);
  v9 = *(_QWORD *)(v0 + 1128);
  __dst = (void *)(v0 + 288);
  v40 = v5;
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(v0 + 1104);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 16))(*(_QWORD *)(v0 + 1112), v9 + *(int *)(*(_QWORD *)(v0 + 1120) + 24), v6);
    sub_1003B9DF0(v9);
    sub_1003B9E2C(v10);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 1112);
    v12 = *(_QWORD *)(v0 + 1104);
    sub_1003B9DF0(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v12, v6);
  }
  v38 = *(_QWORD *)(v0 + 1144);
  v13 = *(_QWORD *)(v0 + 1120);
  v14 = *(_QWORD *)(v0 + 1112);
  v15 = *(_QWORD *)(v0 + 1096);
  v16 = *(_QWORD *)(v0 + 1088);
  v17 = *(_QWORD *)(v0 + 1056);
  v39 = *(_QWORD *)(v0 + 1208);
  v18 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56);
  v18(v14, 0, 1, v6);
  sub_1000A1F54(v14, v15, &qword_10063B3E0);
  v19 = v17 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess(v17 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2, v0 + 920, 33, 0);
  sub_1003B9C38(v15, v19);
  swift_endAccess(v0 + 920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v15, v38 + *(int *)(v13 + 24), v6);
  v18(v15, 0, 1, v6);
  sub_1000A1F54(v15, v16, &qword_10063B3E0);
  swift_beginAccess(v40, v42, 33, 0);
  sub_1003B9C38(v16, v40);
  swift_endAccess(v42);
  JWSSignedJSON.payload.getter(v6);
  memcpy(__dst, (const void *)(v0 + 16), 0x10AuLL);
  v20 = sub_1003B9050((uint64_t)__dst);
  if (v39)
  {
    sub_1003B9DF0(*(_QWORD *)(v0 + 1144));
    sub_1003B9C80((uint64_t *)__dst);
    v21 = *(_QWORD *)(v0 + 1168);
    v22 = *(_QWORD *)(v0 + 1144);
    v23 = *(_QWORD *)(v0 + 1136);
    v24 = *(_QWORD *)(v0 + 1128);
    v25 = *(_QWORD *)(v0 + 1112);
    v26 = *(_QWORD *)(v0 + 1104);
    v27 = *(_QWORD *)(v0 + 1096);
    v28 = *(_QWORD *)(v0 + 1088);
    __dsta = *(void **)(v0 + 1080);
    swift_task_dealloc(*(_QWORD *)(v0 + 1192));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(__dsta);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v30 = v20;
    v31 = *(_QWORD *)(v0 + 1192);
    v32 = *(_QWORD *)(v0 + 1168);
    v33 = *(_QWORD *)(v0 + 1144);
    v34 = *(_QWORD *)(v0 + 1136);
    v35 = *(_QWORD *)(v0 + 1128);
    v36 = *(_QWORD *)(v0 + 1112);
    v37 = *(_QWORD *)(v0 + 1104);
    v41 = *(_QWORD *)(v0 + 1096);
    v43 = *(_QWORD *)(v0 + 1088);
    v44 = *(_QWORD *)(v0 + 1080);
    sub_1003B9DF0(v33);
    sub_1003B9C80((uint64_t *)__dst);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v30);
  }
}

uint64_t sub_1003B8CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1080);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1072) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 1064));
  swift_errorRetain(v1);
  v3 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_100007F30();
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010055E010, v1, v2, 0, v3, 0xD000000000000085, 0x800000010055DF60, 0xD00000000000001DLL, 0x800000010055E050, 79);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  v7 = *(_QWORD *)(v0 + 1168);
  v8 = *(_QWORD *)(v0 + 1144);
  v9 = *(_QWORD *)(v0 + 1136);
  v10 = *(_QWORD *)(v0 + 1128);
  v11 = *(_QWORD *)(v0 + 1112);
  v12 = *(_QWORD *)(v0 + 1104);
  v13 = *(_QWORD *)(v0 + 1096);
  v14 = *(_QWORD *)(v0 + 1088);
  v15 = *(_QWORD *)(v0 + 1080);
  swift_task_dealloc(*(_QWORD *)(v0 + 1192));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B8E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[266];
  uint64_t v27[35];

  v4 = v3;
  v24 = a2;
  v25 = a3;
  v6 = sub_100004828(&qword_10063B3E0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100004828(&qword_100633968);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v14(v11, a1, v12);
  v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v15(v11, 0, 1, v12);
  sub_1000A1F54((uint64_t)v11, (uint64_t)v9, &qword_10063B3E0);
  v16 = v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2, v27, 33, 0);
  sub_1003B9C38((uint64_t)v9, v16);
  swift_endAccess(v27);
  v14(v11, a1, v12);
  v15(v11, 0, 1, v12);
  sub_1000A1F54((uint64_t)v11, (uint64_t)v9, &qword_10063B3E0);
  v17 = v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2;
  swift_beginAccess(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2, v27, 33, 0);
  sub_1003B9C38((uint64_t)v9, v17);
  swift_endAccess(v27);
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId);
  v19 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId + 8);
  v20 = v25;
  *v18 = v24;
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v19);
  JWSSignedJSON.payload.getter(v12);
  memcpy(v27, v26, 0x10AuLL);
  v21 = sub_1003B9050((uint64_t)v27);
  sub_1003B9C80(v27);
  return v21;
}

uint64_t sub_1003B9050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[9];
  _OWORD v30[2];
  _BYTE v31[176];
  _BYTE v32[176];
  _BYTE v33[96];
  _BYTE v34[96];
  _OWORD v35[4];
  _OWORD v36[2];
  _OWORD v37[9];
  _OWORD v38[2];
  _QWORD v39[12];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[3];

  v28 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10._countAndFlagsBits = 0xD000000000000026;
  v10._object = (void *)0x800000010055DEE0;
  v11 = NSUserDefaults.internalBool(forKey:)(v10);

  if (v11)
  {
    v13 = defaultLogger()(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Using custom liveness config from internal settings.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return sub_10001505C();
  }
  else
  {
    v18 = v2;
    v19 = v28;
    sub_1000A1F54(v28, (uint64_t)v31, &qword_10063B0E8);
    sub_1000A1F54((uint64_t)v31, (uint64_t)v32, &qword_10063B0E8);
    if (sub_1002113B4((uint64_t)v32) == 1)
    {
      sub_1000A1F54(v19 + 176, (uint64_t)v34, &qword_10063B108);
      sub_1000A1F54((uint64_t)v34, (uint64_t)v39, &qword_10063B108);
      if (!v39[3])
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v4, enum case for DIPError.Code.livenessConfigV2MissingFields(_:), v1);
        v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
        v24 = type metadata accessor for DIPError(0);
        v25 = sub_100007F30();
        swift_allocError(v24, v25, 0, 0);
        v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000041, 0x800000010055DF10, 0, v4, 0, v23, 0xD000000000000085, 0x800000010055DF60, 0xD00000000000001CLL, 0x800000010055DFF0, 107);
        return swift_willThrow(v26);
      }
      v20 = 0;
    }
    else
    {
      sub_1000A1F54((uint64_t)v31, (uint64_t)v29, &qword_10063B0E8);
      v37[8] = v29[8];
      v38[0] = v30[0];
      *(_OWORD *)((char *)v38 + 14) = *(_OWORD *)((char *)v30 + 14);
      v37[4] = v29[4];
      v37[5] = v29[5];
      v37[6] = v29[6];
      v37[7] = v29[7];
      v37[0] = v29[0];
      v37[1] = v29[1];
      v37[2] = v29[2];
      v37[3] = v29[3];
      v20 = sub_1003B9420((uint64_t)v37);
    }
    sub_1000A1F54(v19 + 176, (uint64_t)v33, &qword_10063B108);
    sub_1000A1F54((uint64_t)v33, (uint64_t)&v40, &qword_10063B108);
    if (*((_QWORD *)&v41 + 1))
    {
      v35[2] = v42;
      v35[3] = v43;
      v36[0] = v44[0];
      *(_OWORD *)((char *)v36 + 10) = *(_OWORD *)((char *)v44 + 10);
      v35[0] = v40;
      v35[1] = v41;
      v21 = sub_1003B9A48((uint64_t)v35);
    }
    else
    {
      v21 = 0;
    }
    v22 = objc_allocWithZone((Class)type metadata accessor for IdentityLivenessConfig(0));
    return IdentityLivenessConfig.init(active:passive:)(v20, v21);
  }
}

uint64_t sub_1003B9420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  objc_class *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  id v31;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;

  v62 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v62 - 8);
  v3 = __chkstk_darwin(v62);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v56 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  v66 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v65 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v8);
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    v11 = (objc_class *)type metadata accessor for IdentityGesture(0);
    v12 = (uint64_t *)(v8 + 40);
    do
    {
      v13 = *(v12 - 1);
      v14 = *v12;
      v15 = objc_allocWithZone(v11);
      v16 = IdentityGesture.init(gesture:type:)(v13, v14);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v17 = v65[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      specialized ContiguousArray._endMutation()(v18);
      v12 += 2;
      --v9;
    }
    while (v9);
    v10 = v65;
    sub_100083F00(&v66);
  }
  v64 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 80);
  v63 = (*(_BYTE *)(a1 + 173) == 2) | *(unsigned __int8 *)(a1 + 173);
  v20 = (void *)objc_opt_self(NSUserDefaults);
  v21 = objc_msgSend(v20, "standardUserDefaults");
  v22._object = (void *)0x800000010055DEC0;
  v22._countAndFlagsBits = 0xD000000000000016;
  v23 = NSUserDefaults.internalBool(forKey:)(v22);

  if (v23)
  {
    v24 = swift_bridgeObjectRelease(v10);
    v25 = defaultLogger()(v24);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = v19;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Internal settings has been set to disable liveness.", v29, 2u);
      v30 = v29;
      v19 = v28;
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v62);
    v10 = *(_QWORD **)((char *)v61
                     + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureSequence);
    swift_bridgeObjectRetain(v10);
    v64 = 0;
  }
  v61 = v10;
  v31 = objc_msgSend(v20, "standardUserDefaults");
  v32._countAndFlagsBits = 0xD000000000000021;
  v32._object = (void *)0x800000010053F1B0;
  v33 = NSUserDefaults.internalBool(forKey:)(v32);

  if (v33)
  {
    v35 = defaultLogger()(v34);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Internal settings has been set to disable auto flash.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v62);
    v63 = 0;
  }
  v62 = v19 & ~(v19 >> 63);
  if (*(_BYTE *)(a1 + 136))
    v39 = 1000;
  else
    v39 = *(_QWORD *)(a1 + 128);
  v40 = *(_QWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 152))
    v40 = 3000;
  v59 = v40;
  v60 = v39;
  if (*(_BYTE *)(a1 + 168))
    v41 = 1000;
  else
    v41 = *(_QWORD *)(a1 + 160);
  v42 = *(_BYTE *)(a1 + 169);
  v43 = *(_BYTE *)(a1 + 170);
  v44 = *(_BYTE *)(a1 + 171);
  v45 = (*(_BYTE *)(a1 + 172) == 2) | *(_BYTE *)(a1 + 172);
  v46 = *(_QWORD *)(a1 + 48);
  v47 = *(_QWORD *)(a1 + 56);
  v48 = *(_QWORD *)(a1 + 64);
  v49 = *(_QWORD *)(a1 + 72);
  v50 = *(_QWORD *)(a1 + 88);
  v57 = v41;
  v58 = v50;
  v56 = *(_OWORD *)(a1 + 96);
  v52 = *(_QWORD *)(a1 + 112);
  v51 = *(_QWORD *)(a1 + 120);
  v53 = objc_allocWithZone((Class)type metadata accessor for IdentityActiveLivenessConfig(0));
  BYTE4(v55) = v63 & 1;
  BYTE3(v55) = v45 & 1;
  BYTE2(v55) = v44 & 1;
  BYTE1(v55) = v43 & 1;
  LOBYTE(v55) = v42 & 1;
  return IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)(v61, v64, v46, v47, v48, v49, v62, v58, v56, *((_QWORD *)&v56 + 1), v52, v51, v60, v59, v57, v55);
}

uint64_t sub_1003B9860()
{
  id *v0;

  sub_1003B9E2C((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2);
  sub_1003B9E2C((uint64_t)v0 + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_livenessConfigV2);
  swift_bridgeObjectRelease(*(id *)((char *)v0
                                  + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_proofingSessionId
                                  + 8));

  swift_bridgeObjectRelease(*(id *)((char *)v0
                                  + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_disabledGestureSequence));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1003B98DC()
{
  return type metadata accessor for IdentityProofingLivenessConfigProvider(0);
}

uint64_t type metadata accessor for IdentityProofingLivenessConfigProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10063EF58;
  if (!qword_10063EF58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityProofingLivenessConfigProvider);
  return result;
}

void sub_1003B9920(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (**v9)(uint64_t *, uint64_t, ValueMetadata *);
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;

  v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1003B99F0(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1005331D8;
    v8 = &unk_1005331F0;
    v9 = &value witness table for Builtin.BridgeObject[8];
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    v11 = (char *)&value witness table for Builtin.Int64 + 64;
    v12 = (char *)&value witness table for Builtin.Int64 + 64;
    v13 = (char *)&value witness table for Builtin.Int64 + 64;
    v14 = (char *)&value witness table for Builtin.Int64 + 64;
    v15 = (char *)&value witness table for Builtin.Int64 + 64;
    v16 = (char *)&value witness table for Builtin.Int64 + 64;
    v17 = (char *)&value witness table for Builtin.Int64 + 64;
    v18 = (char *)&value witness table for Builtin.Int64 + 64;
    v19 = &unk_100533208;
    v20 = &unk_100533208;
    v21 = &unk_100533208;
    v22 = &unk_100533208;
    v23 = (char *)&value witness table for Builtin.Int64 + 64;
    v24 = (char *)&value witness table for Builtin.Int64 + 64;
    v25 = &unk_100533208;
    v26 = &unk_100533208;
    swift_updateClassMetadata2(a1, 256, 23, &v4, a1 + 80);
  }
}

void sub_1003B99F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10063BD08)
  {
    v2 = sub_100013E24(&qword_100633968);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10063BD08);
  }
}

uint64_t sub_1003B9A48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  id v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v25;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(a1 + 89);
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8._object = (void *)0x800000010053F1B0;
  v8._countAndFlagsBits = 0xD000000000000021;
  v9 = NSUserDefaults.internalBool(forKey:)(v8);

  if (v9)
  {
    v11 = defaultLogger()(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Internal settings has been set to disable auto flash.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v15 = 0;
  }
  else
  {
    v15 = (v6 == 2) | v6;
  }
  if (*(_BYTE *)(a1 + 56))
    v16 = 30;
  else
    v16 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 72))
    v17 = 150;
  else
    v17 = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 88))
    v18 = 146;
  else
    v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_BYTE *)(a1 + 57) & 1;
  v20 = *(_BYTE *)(a1 + 58) & 1;
  v22 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v23 = objc_allocWithZone((Class)type metadata accessor for IdentityPassiveLivenessConfig(0));
  return IdentityPassiveLivenessConfig.init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)(v22, v21, v16, v17, v18, v19, v20, 0, v15 & 1);
}

uint64_t sub_1003B9C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063B3E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1003B9C80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = a1[23];
  v6 = a1[22];
  v3 = a1[24];
  v4 = a1[25];
  sub_1002B7A5C(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_1002B7BB4(v6, v2, v3, v4);
  return a1;
}

uint64_t sub_1003B9D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B9DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063B3E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B9DF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IdentityProofingLivenessConfigResponseV2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003B9E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_10063B3E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1003B9E6C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  objc_class *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  objc_super v30;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1;
  machServiceDigitalPresentmentXPC.getter();
  v9 = v8;
  v10 = objc_allocWithZone((Class)NSXPCListener);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend(v10, "initWithMachServiceName:", v11);

  *(_QWORD *)&v7[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener] = v12;
  v13 = &v7[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment];
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v13 = *(_OWORD *)a1;
  *((_OWORD *)v13 + 1) = v14;
  v15 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 32);
  v16 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v13 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v13 + 5) = v15;
  *((_OWORD *)v13 + 2) = v17;
  *((_OWORD *)v13 + 3) = v16;
  v18 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 96);
  v19 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v13 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v13 + 9) = v18;
  *((_OWORD *)v13 + 6) = v20;
  *((_OWORD *)v13 + 7) = v19;
  sub_10002EE34((uint64_t *)a1);

  v21 = (objc_class *)type metadata accessor for DigitalPresentmentListener();
  v30.receiver = v7;
  v30.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v30, "init");
  v23 = *(void **)&v22[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener];
  v24 = v22;
  objc_msgSend(v23, "setDelegate:", v24);
  v25 = defaultLogger()(objc_msgSend(v23, "resume"));
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Digital presentment XPC listener is started", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  sub_10002EF3C((uint64_t *)a1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v24;
}

id sub_1003BA068()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  objc_class *v12;
  objc_super v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Digital presentment listener is tearing down", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_xpcListener], "invalidate");
  v12 = (objc_class *)type metadata accessor for DigitalPresentmentListener();
  v14.receiver = v1;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, "dealloc");
}

uint64_t sub_1003BA224()
{
  return sub_10004BFE0("digital presentment connection invalidated");
}

uint64_t sub_1003BA230()
{
  return sub_10004BFE0("digital presentment connection interrupted");
}

uint64_t type metadata accessor for DigitalPresentmentListener()
{
  return objc_opt_self(_TtC8coreidvd26DigitalPresentmentListener);
}

uint64_t sub_1003BA2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[10];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Destroying DigitalPresentmentSessionProxy", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_unknownObjectWeakDestroy(v1 + 16);
  swift_release(*(_QWORD *)(v1 + 24));
  v12 = *(_OWORD *)(v1 + 144);
  v18[6] = *(_OWORD *)(v1 + 128);
  v18[7] = v12;
  v13 = *(_OWORD *)(v1 + 176);
  v18[8] = *(_OWORD *)(v1 + 160);
  v18[9] = v13;
  v14 = *(_OWORD *)(v1 + 80);
  v18[2] = *(_OWORD *)(v1 + 64);
  v18[3] = v14;
  v15 = *(_OWORD *)(v1 + 112);
  v18[4] = *(_OWORD *)(v1 + 96);
  v18[5] = v15;
  v16 = *(_OWORD *)(v1 + 48);
  v18[0] = *(_OWORD *)(v1 + 32);
  v18[1] = v16;
  sub_10002EF3C((uint64_t *)v18);
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 192));
  return v1;
}

uint64_t sub_1003BA428()
{
  uint64_t v0;

  sub_1003BA2E4();
  return swift_deallocClassInstance(v0, 200, 7);
}

uint64_t sub_1003BA448(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityDocumentDescriptor(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v10 = type metadata accessor for DigitalPresentmentDocumentType(0);
  v2[18] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[19] = v11;
  v2[20] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v2[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[22] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v14);
  v2[24] = swift_task_alloc(v14);
  v2[25] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003BA574, 0, 0);
}

uint64_t sub_1003BA574(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (void *)v1[6];
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v26 = v1[22];
    v5 = v1[20];
    v27 = v1[21];
    v28 = v1[25];
    v6 = v1[18];
    v7 = v1[17];
    v21 = v1[15];
    v22 = v1[14];
    v23 = (void *)v1[6];
    v24 = v1[19];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v29 = v25;
    *(_DWORD *)v8 = 136315138;
    v9 = XPCIdentityDocumentDescriptor.value.getter();
    IdentityDocumentDescriptor.documentType.getter(v9);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v7, v22);
    v10 = sub_100004790(&qword_1006334F8, (uint64_t (*)(uint64_t))&type metadata accessor for DigitalPresentmentDocumentType, (uint64_t)&protocol conformance descriptor for DigitalPresentmentDocumentType);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v5, v6);
    v1[5] = sub_1000E3AC8(v11, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v8 + 4);
    swift_bridgeObjectRelease(v13);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy canRequestDocument %s", v8, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v14 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v14(v28, v27);
  }
  else
  {
    v15 = v1[25];
    v16 = v1[21];
    v17 = v1[22];
    v18 = (void *)v1[6];

    v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  v1[26] = v14;
  sub_1003BC3D4();
  XPCIdentityDocumentDescriptor.value.getter();
  v19 = (_QWORD *)swift_task_alloc(dword_100638E0C);
  v1[27] = v19;
  *v19 = v1;
  v19[1] = sub_1003BAA10;
  return sub_100213988(v1[16]);
}

uint64_t sub_1003BAA10(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = *(_QWORD *)(v3 + 216);
  *(_QWORD *)(v3 + 224) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 + 120) + 8))(*(_QWORD *)(v3 + 128), *(_QWORD *)(v3 + 112));
  if (v1)
    v5 = sub_1003BABC8;
  else
    v5 = sub_1003BAA90;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003BAA90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy canRequestDocument returning successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v17 = *(unsigned __int8 *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 200);
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 208);
  v9 = *(_QWORD *)(v1 + 184);
  v8 = *(_QWORD *)(v1 + 192);
  v11 = *(_QWORD *)(v1 + 160);
  v10 = *(_QWORD *)(v1 + 168);
  v13 = *(_QWORD *)(v1 + 128);
  v12 = *(_QWORD *)(v1 + 136);
  v15 = *(_QWORD *)(v1 + 104);
  v16 = *(_QWORD *)(v1 + 80);

  v6(v8, v10);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(v17);
}

uint64_t sub_1003BABC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v19 = v6;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000061, 0x800000010055E200, 0xD00000000000001FLL, 0x8000000100555E10, 103);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v12 = v10(v11, v3, v5);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v9, 0xD000000000000046, 0x800000010055E490, v2);
  v18(v2, v17);
  swift_errorRelease(v9);
  v13 = swift_allocError(v5, v8, 0, 0);
  v10(v14, v3, v5);
  sub_10039F704(v13);
  v15 = swift_errorRelease(v13);
  swift_willThrow(v15);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v2);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v3);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1003BAF34(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10063F174;
  v7 = a1;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1003BAFB0;
  return sub_1003BA448((uint64_t)v7);
}

uint64_t sub_1003BAFB0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD *)(*v2 + 40);
  v6 = *(void **)(*v2 + 16);
  v5 = *(_QWORD *)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc(v4);

  swift_release(v5);
  v8 = *(_QWORD *)(v7 + 32);
  if (v1)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v9);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(v7 + 32), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v7 + 32));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1003BB06C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[14] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v9);
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  return swift_task_switch(sub_1003BB138, 0, 0);
}

uint64_t sub_1003BB138(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t **v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy present (callback)", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[17];
  v7 = v1[13];
  v8 = v1[14];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[18] = (uint64_t)v9;
  v9(v6, v7);
  sub_1003BC3D4();
  v10 = (uint64_t **)swift_task_alloc(dword_100638E1C);
  v1[19] = (uint64_t)v10;
  *v10 = v1;
  v10[1] = (uint64_t *)sub_1003BB434;
  return sub_100216364(v1[5]);
}

uint64_t sub_1003BB434(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v4 = v3[19];
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1003BB5B0;
  else
    v5 = sub_1003BB4A0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003BB4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy requestDocument returning successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 136);
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 144);
  v10 = *(_QWORD *)(v1 + 120);
  v9 = *(_QWORD *)(v1 + 128);
  v12 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  v13 = *(_QWORD *)(v1 + 72);

  v8(v9, v11);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v6);
}

uint64_t sub_1003BB5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v19 = v6;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000061, 0x800000010055E200, 0xD000000000000013, 0x800000010055E420, 117);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v12 = v10(v11, v3, v5);
  defaultLogger()(v12);
  DIPRecordError(_:message:log:)(v9, 0xD000000000000043, 0x800000010055E440, v2);
  v18(v2, v17);
  swift_errorRelease(v9);
  v13 = swift_allocError(v5, v8, 0, 0);
  v10(v14, v3, v5);
  sub_10039F704(v13);
  v15 = swift_errorRelease(v13);
  swift_willThrow(v15);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BB8EC(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10063F17C;
  v7 = a1;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1003BB968;
  return sub_1003BB06C((uint64_t)v7);
}

uint64_t sub_1003BB968(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 40);
  v7 = *(void **)(*v2 + 16);
  v6 = *(_QWORD *)(*v2 + 24);
  v8 = *v2;
  swift_task_dealloc(v5);

  swift_release(v6);
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 32);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](*(_QWORD *)(v8 + 32), a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1003BBA34()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v8);
  v1[12] = swift_task_alloc(v8);
  v1[13] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003BBB00, 0, 0);
}

uint64_t sub_1003BBB00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentProxy dismiss", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[13];
  v7 = v1[9];
  v8 = v1[10];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[14] = v9;
  v9(v6, v7);
  sub_1003BC3D4();
  v10 = (_QWORD *)swift_task_alloc(dword_100638E24);
  v1[15] = v10;
  *v10 = v1;
  v10[1] = sub_1003BBE0C;
  return sub_10021F100();
}

uint64_t sub_1003BBE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003BBF70;
  else
    v3 = sub_1003BBE70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003BBE70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DigitalPresentmentSessionProxy cancelRequest returning successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
  v9 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v12 = *(_QWORD *)(v1 + 40);

  v7(v8, v10);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003BBF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  v19 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v20 = v6;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v7 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000061, 0x800000010055E200, 0x65526C65636E6163, 0xEF29287473657571, 130);
  v8 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v5, v8, 0, 0);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v11 = v4;
  v13 = v10(v12, v3, v5);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v9, 0xD000000000000041, 0x800000010055E3D0, v2);
  v19(v2, v18);
  swift_errorRelease(v9);
  v14 = swift_allocError(v5, v8, 0, 0);
  v10(v15, v3, v5);
  sub_10039F704(v14);
  v16 = swift_errorRelease(v14);
  swift_willThrow(v16);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v5);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DigitalPresentmentSessionProxy()
{
  return objc_opt_self(_TtC8coreidvd30DigitalPresentmentSessionProxy);
}

uint64_t sub_1003BC2D0(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10063F184;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1003BC330;
  return sub_1003BBA34();
}

uint64_t sub_1003BC330()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(_QWORD *)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);
  swift_release(v3);
  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_1003BC3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  Swift::String v12;
  Swift::Bool v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *Strong;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v12._countAndFlagsBits = 0xD00000000000002BLL;
  v12._object = (void *)0x800000010055E1D0;
  v13 = NSUserDefaults.internalBool(forKey:)(v12);

  if (!v13)
  {
    defaultLogger()(v14);
    v19 = swift_retain_n(v60, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v57 = v0;
      v23 = (uint8_t *)v22;
      v55 = swift_slowAlloc(32, -1);
      v63 = v55;
      *(_DWORD *)v23 = 136315138;
      v53 = v23 + 4;
      v54 = v23;
      v24 = v2;
      v25 = v1;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v60 + 16);
      v61 = (uint64_t)Strong;
      v27 = sub_100004828(&qword_10063F270);
      v28 = Optional.debugDescription.getter(v27);
      v56 = v4;
      v30 = v29;

      v1 = v25;
      v2 = v24;
      v61 = sub_1000E3AC8(v28, v30, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v53);
      swift_release_n(v60, 2);
      v31 = v30;
      v4 = v56;
      swift_bridgeObjectRelease(v31);
      v32 = v21;
      v33 = v54;
      _os_log_impl((void *)&_mh_execute_header, v20, v32, "Checking connection %s", v54, 0xCu);
      v34 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_release_n(v60, 2);
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v59);
    v35 = swift_unknownObjectWeakLoadStrong(v60 + 16);
    if (!v35)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      v45 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v46 = type metadata accessor for DIPError(0);
      v47 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v46, v47, 0, 0);
      v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x80000001005422B0, 0, v4, 0, v45, 0xD000000000000061, 0x800000010055E200, 0xD000000000000012, 0x8000000100542350, 148);
      swift_willThrow(v48);
      return;
    }
    v36 = (void *)v35;
    v37._countAndFlagsBits = 0xD00000000000002FLL;
    v37._object = (void *)0x800000010055E270;
    if (NSXPCConnection.isEntitled(_:)(v37)
      || (v38._countAndFlagsBits = 0xD000000000000026,
          v38._object = (void *)0x800000010055E2A0,
          NSXPCConnection.isEntitled(_:)(v38)))
    {
      v39._countAndFlagsBits = 0xD000000000000044;
      v39._object = (void *)0x800000010055E310;
      if (NSXPCConnection.isEntitled(_:)(v39))
        goto LABEL_17;
      v40._countAndFlagsBits = 0xD000000000000030;
      v40._object = (void *)0x800000010055E360;
      if (NSXPCConnection.isEntitled(_:)(v40))
        goto LABEL_17;
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      v41 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v42 = type metadata accessor for DIPError(0);
      v43 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v42, v43, 0, 0);
      v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010055E3A0, 0, v4, 0, v41, 0xD000000000000061, 0x800000010055E200, 0xD000000000000012, 0x8000000100542350, 166);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
      v49 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v50 = type metadata accessor for DIPError(0);
      v51 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v50, v51, 0, 0);
      v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000034, 0x800000010055E2D0, 0, v4, 0, v49, 0xD000000000000061, 0x800000010055E200, 0xD000000000000012, 0x8000000100542350, 160);
    }
    swift_willThrow(v44);
LABEL_17:

    return;
  }
  v15 = defaultLogger()(v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Forcing digital presentment entitlement due to user defaults setting", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v59);
}

uint64_t sub_1003BCA0C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003BCA38()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10063F27C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100007EE8;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_10063F278 + dword_10063F278))(v2, v3);
}

uint64_t sub_1003BCAA8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10063F28C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001D0A0;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10063F288 + dword_10063F288))(v2, v3, v4);
}

uint64_t sub_1003BCB20()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003BCB54()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10063F2AC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001D0A0;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10063F2A8 + dword_10063F2A8))(v2, v3, v4);
}

_QWORD *sub_1003BCBC8(uint8_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  char *v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v79;
  uint8_t *v80;
  uint8_t *v81;
  char *v82;
  char *v83;
  void (*v84)(char *, char *);
  uint64_t v85;
  uint64_t v86;

  v2 = type metadata accessor for Logger(0);
  v84 = *(void (**)(char *, char *))(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v79 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v79 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v79 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v79 - v15;
  v17._countAndFlagsBits = 0xD000000000000044;
  v17._object = (void *)0x800000010055E310;
  v18 = (unint64_t)NSXPCConnection.getArrayEntitlement(name:)(v17);
  v83 = v5;
  if (v18)
  {
    v19 = (_QWORD *)v18;
    defaultLogger()(v18);
    v20 = swift_bridgeObjectRetain_n(v19, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v82 = v8;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v86 = v25;
      *(_DWORD *)v24 = 136315138;
      v80 = v24 + 4;
      swift_bridgeObjectRetain(v19);
      v27 = v2;
      v28 = Array.description.getter(v26, &type metadata for String);
      v81 = a1;
      v30 = v29;
      swift_bridgeObjectRelease(v19);
      v31 = v28;
      v2 = v27;
      v85 = sub_1000E3AC8(v31, v30, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v80);
      swift_bridgeObjectRelease_n(v19, 2);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Using external merchants entitlement, values: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v32 = v25;
      v5 = v83;
      swift_slowDealloc(v32, -1, -1);
      v33 = v24;
      v8 = v82;
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
    }
    v48 = (void (*)(char *, uint64_t))*((_QWORD *)v84 + 1);
    v48(v16, v2);
  }
  else
  {
    v34._countAndFlagsBits = 0xD000000000000030;
    v34._object = (void *)0x800000010055E360;
    v35 = (unint64_t)NSXPCConnection.getArrayEntitlement(name:)(v34);
    if (v35)
    {
      v19 = (_QWORD *)v35;
      defaultLogger()(v35);
      v36 = swift_bridgeObjectRetain_n(v19, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v82 = (char *)v2;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v86 = v40;
        *(_DWORD *)v39 = 136315138;
        v80 = v39 + 4;
        swift_bridgeObjectRetain(v19);
        v42 = v8;
        v43 = Array.description.getter(v41, &type metadata for String);
        v81 = a1;
        v45 = v44;
        swift_bridgeObjectRelease(v19);
        v46 = v43;
        v8 = v42;
        v85 = sub_1000E3AC8(v46, v45, &v86);
        v2 = (uint64_t)v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v80);
        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Using internal merchants entitlement, values: %s", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        v47 = v40;
        v5 = v83;
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
      }
      v48 = (void (*)(char *, uint64_t))*((_QWORD *)v84 + 1);
      v48(v14, v2);
    }
    else
    {
      v49 = defaultLogger()(0);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "No merchants entitlement is present, defaulting to empty value", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v53 = v11;
      v48 = (void (*)(char *, uint64_t))*((_QWORD *)v84 + 1);
      v48(v53, v2);
      v19 = _swiftEmptyArrayStorage;
    }
  }
  v54._countAndFlagsBits = 0xD00000000000002FLL;
  v54._object = (void *)0x800000010055E270;
  v55 = (unint64_t)NSXPCConnection.getDictionaryOfStringArraysEntitlement(name:)(v54);
  if (v55)
  {
    v56 = v55;
    v57 = sub_1000B6040(v55, (uint64_t)v19);
    v59 = v58;
    v61 = v60;
    swift_bridgeObjectRelease(v19);
    v62 = swift_bridgeObjectRelease(v56);
    v19 = v61;
  }
  else
  {
    v63._object = (void *)0x800000010055E2A0;
    v63._countAndFlagsBits = 0xD000000000000026;
    v62 = NSXPCConnection.isEntitled(_:)(v63);
    if ((v62 & 1) != 0)
    {
      v59 = &off_100600AD8;
      v57 = &off_100600AB0;
    }
    else
    {
      v64 = swift_bridgeObjectRelease(v19);
      v65 = defaultLogger()(v64);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter(v66);
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "No digital presentment entitlement is present, defaulting to empty value", v68, 2u);
        swift_slowDealloc(v68, -1, -1);
      }

      v62 = ((uint64_t (*)(char *, uint64_t))v48)(v8, v2);
      v57 = _swiftEmptyArrayStorage;
      v59 = _swiftEmptyArrayStorage;
      v19 = _swiftEmptyArrayStorage;
    }
  }
  defaultLogger()(v62);
  swift_bridgeObjectRetain_n(v57, 2);
  swift_bridgeObjectRetain_n(v59, 2);
  v69 = swift_bridgeObjectRetain_n(v19, 2);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.debug.getter(v70);
  if (os_log_type_enabled(v70, v71))
  {
    v82 = (char *)v2;
    v72 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = swift_slowAlloc(32, -1);
    v84 = (void (*)(char *, char *))v48;
    v74 = v73;
    v86 = v73;
    *(_DWORD *)v72 = 136315138;
    v81 = v72 + 4;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v19);
    v75 = sub_1000B5E4C((uint64_t)v57, (uint64_t)v59, (uint64_t)v19);
    v77 = v76;
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v57);
    v85 = sub_1000E3AC8(v75, v77, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v81);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease_n(v57, 2);
    swift_bridgeObjectRelease(v77);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Digital presentment: calling process has entitlements: %s", v72, 0xCu);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v72, -1, -1);

    v84(v83, v82);
  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v59, 2);
    swift_bridgeObjectRelease_n(v57, 2);
    v48(v5, v2);
  }
  return v57;
}

uint64_t sub_1003BD3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  id v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char v15;
  Swift::String v16;
  _BOOL8 v17;
  uint64_t v18;
  os_log_type_t v19;
  _BYTE v21[12];
  int v22;
  uint64_t v23;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v21[-v5];
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8._object = (void *)0x800000010055E1D0;
  v8._countAndFlagsBits = 0xD00000000000002BLL;
  v9 = NSUserDefaults.internalBool(forKey:)(v8);

  if (v9)
  {
    v11 = defaultLogger()(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v13))
    {
      v15 = 1;
      goto LABEL_9;
    }
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Forcing digital presentment first party client due to user defaults setting", v14, 2u);
    v15 = 1;
  }
  else
  {
    v16._countAndFlagsBits = 0xD000000000000037;
    v16._object = (void *)0x800000010055E510;
    v17 = NSXPCConnection.isEntitled(_:)(v16);
    v15 = v17;
    v18 = defaultLogger()(v17);
    v12 = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v19))
    {
      v6 = v4;
      goto LABEL_9;
    }
    v14 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 67109120;
    v22 = v15 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v19, "DigitalPresentmentSessionProxy.hasFirstPartyClientEntitlement: result = %{BOOL}d", v14, 8u);
    v6 = v4;
  }
  swift_slowDealloc(v14, -1, -1);
LABEL_9:

  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  return v15 & 1;
}

uint64_t sub_1003BD604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _UNKNOWN **v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  _UNKNOWN **v44;
  __int128 v45;
  uint64_t v46;
  void *v47;

  v14 = type metadata accessor for FeatureFlagProvider(0);
  v46 = v14;
  v47 = &protocol witness table for FeatureFlagProvider;
  v15 = sub_100022234(&v45);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v15, a3, v14);
  v43 = type metadata accessor for DigitalPresentmentRequestValidator();
  v44 = &off_10060BD08;
  *(_QWORD *)&v42 = a4;
  swift_defaultActor_initialize(a7, v16);
  *(_QWORD *)(a7 + 312) = 0;
  *(_OWORD *)(a7 + 280) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(_BYTE *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestInProgress) = 0;
  v17 = (_QWORD *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_mockPassID);
  *v17 = 808464432;
  v17[1] = 0xE400000000000000;
  v18 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a7 + 208) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a7 + 224) = v18;
  v19 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a7 + 240) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a7 + 256) = v19;
  v20 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a7 + 144) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 160) = v20;
  v21 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a7 + 176) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a7 + 192) = v21;
  v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a7 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(a7 + 128) = v22;
  sub_10004BC18(a2, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_callingClientConfig);
  sub_10002EE34((uint64_t *)a1);
  v23 = sub_100213858();
  *(_BYTE *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_shouldPresentTestMDL) = v23 & 1;
  if ((v23 & 1) == 0)
  {
    if (qword_10062F500 != -1)
      swift_once(&qword_10062F500, sub_1003723C4);
    v24 = (_UNKNOWN **)qword_100670388;
    swift_bridgeObjectRetain(qword_100670388);
    v25 = *(uint64_t (**)(uint64_t))(a1 + 16);
    if (v25)
      goto LABEL_3;
LABEL_7:
    v29 = type metadata accessor for DigitalPresentmentSessionManager();
    v28 = swift_allocObject(v29, 24, 7);
    v30 = objc_allocWithZone((Class)DCPresentmentSessionOptions);
    sub_10002EE34((uint64_t *)a1);
    v31 = objc_msgSend(v30, "init", swift_bridgeObjectRetain(v24).n128_f64[0]);
    objc_msgSend(v31, "setSessionEncryptionMode:", 1);
    objc_msgSend(v31, "setResponseEncryptionMode:", 1);
    objc_msgSend(v31, "setReaderAuthenticationPolicy:", 0);
    objc_msgSend(v31, "setElementFallbackModes:", 1);
    v32 = objc_allocWithZone((Class)DCPresentmentSession);
    v33 = v31;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    v35 = objc_msgSend(v32, "initWithPartitions:presentmentType:options:", isa, 1, v33);

    *(_QWORD *)(v28 + 16) = v35;
    goto LABEL_8;
  }
  v24 = &off_100602658;
  v25 = *(uint64_t (**)(uint64_t))(a1 + 16);
  if (!v25)
    goto LABEL_7;
LABEL_3:
  v26 = *(_QWORD *)(a1 + 24);
  sub_10002EE34((uint64_t *)a1);
  v27 = sub_10002EF2C((uint64_t)v25, v26);
  v28 = v25(v27);
  sub_10002F034((uint64_t)v25, v26);
LABEL_8:
  swift_bridgeObjectRelease(v24);
  sub_10002EF3C((uint64_t *)a1);
  *(_QWORD *)(a7 + 272) = v28;
  v36 = type metadata accessor for BiometricsHelper(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v40 = v36;
  v41 = &protocol witness table for BiometricsHelper;
  *(_QWORD *)&v39 = BiometricsHelper.init()();
  sub_10004BC5C(a2);
  sub_100008018(&v39, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_localAuthenticationManager);
  sub_100008018(&v45, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_featureFlagProvider);
  sub_100008018(&v42, a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_requestValidator);
  v37 = (_QWORD *)(a7 + OBJC_IVAR____TtC8coreidvd22DigitalPresentmentFlow_displayConfigurationBuilder);
  *v37 = a5;
  v37[1] = a6;
  return a7;
}

uint64_t sub_1003BD964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint8_t *v24;
  uint8_t *v25;
  uint8_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint8_t *v64;
  _QWORD v65[3];
  uint64_t v66;
  _UNKNOWN **v67;

  v3 = v2;
  v64 = (uint8_t *)a1;
  v63 = type metadata accessor for FeatureFlagProvider(0);
  v5 = *(_QWORD *)(v63 - 8);
  v6 = __chkstk_darwin(v63);
  v61 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v62 = (char *)&v58 - v8;
  v59 = type metadata accessor for DigitalPresentmentCallingClientConfig(0);
  v9 = __chkstk_darwin(v59);
  v60 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (uint8_t *)&v58 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_unknownObjectWeakInit(v3 + 16, 0);
  v18 = defaultLogger()(v17);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.info.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    v58 = v5;
    v23 = v12;
    v24 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "Creating DigitalPresentmentSessionProxy", v22, 2u);
    v25 = v24;
    v12 = v23;
    v5 = v58;
    swift_slowDealloc(v25, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v26 = v64;
  swift_unknownObjectWeakAssign(v3 + 16, v64);
  v27 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v3 + 144) = v27;
  v28 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 160) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v3 + 176) = v28;
  v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 80) = v29;
  v30 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 112) = v30;
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v31;
  sub_10002EE34((uint64_t *)a2);
  result = os_transaction_create("DigitalPresentmentSessionProxy");
  if (result)
  {
    *(_QWORD *)(v3 + 192) = result;
    v33 = sub_1003BCBC8(v26);
    v35 = v34;
    v37 = v36;
    -[uint8_t auditToken](v26, "auditToken");
    AuditToken.init(auditToken:)(v65[0], v65[1], v65[2], v66);
    v38 = sub_1003BD3C8();
    v39 = v59;
    v12[*(int *)(v59 + 20)] = v38 & 1;
    v40 = (char *)&v12[*(int *)(v39 + 24)];
    *(_QWORD *)v40 = v33;
    *((_QWORD *)v40 + 1) = v35;
    *((_QWORD *)v40 + 2) = v37;
    v41 = v60;
    sub_10004BC18((uint64_t)v12, v60);
    v42 = sub_10002EE34((uint64_t *)a2);
    v64 = v12;
    v43 = v62;
    FeatureFlagProvider.init()(v42);
    v44 = type metadata accessor for DigitalPresentmentRequestValidator();
    v45 = swift_allocObject(v44, 16, 7);
    v59 = type metadata accessor for DigitalPresentmentDisplayConfigurationBuilder(0);
    v66 = v44;
    v67 = &off_10060BD08;
    v65[0] = v45;
    v46 = type metadata accessor for DigitalPresentmentFlow(0);
    v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    v48 = sub_10001E624((uint64_t)v65, v44);
    v58 = (uint64_t)&v58;
    __chkstk_darwin(v48);
    v50 = (uint64_t *)((char *)&v58 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v51 + 16))(v50);
    v52 = *v50;
    v53 = v5;
    v54 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v55 = (uint64_t)v61;
    v56 = v63;
    v54(v61, v43, v63);
    swift_retain(v45);
    v57 = sub_1003BD604(a2, v41, v55, v52, v59, (uint64_t)&off_100607C60, v47);
    sub_10002EF3C((uint64_t *)a2);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v56);
    _s8coreidvd24DigitalPresentmentHelperVwxx_0(v65);
    swift_release(v45);
    sub_10004BC5C((uint64_t)v64);
    *(_QWORD *)(v3 + 24) = v57;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003BDD5C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;
  _OWORD v31[11];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v6);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 67109120;
    LODWORD(v31[0]) = -[NSObject processIdentifier](v9, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, (char *)v31 + 4, v12 + 4);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "DigitalPresentmentListener connection received from %d", v12, 8u);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  type metadata accessor for DigitalPresentmentXPCInterface(0);
  v13 = (void *)static DigitalPresentmentXPCInterface.interface()();
  -[NSObject setExportedInterface:](v9, "setExportedInterface:", v13);

  v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 112);
  v31[6] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 96);
  v31[7] = v14;
  v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 144);
  v31[8] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 128);
  v31[9] = v15;
  v16 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 48);
  v31[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 32);
  v31[3] = v16;
  v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 80);
  v31[4] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 64);
  v31[5] = v17;
  v18 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment + 16);
  v31[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC8coreidvd26DigitalPresentmentListener_digitalPresentmentEnvironment);
  v31[1] = v18;
  v19 = type metadata accessor for DigitalPresentmentSessionProxy();
  swift_allocObject(v19, 200, 7);
  v20 = v9;
  sub_10002EE34((uint64_t *)v31);
  v21 = sub_1003BD964((uint64_t)v20, (uint64_t)v31);
  sub_10002EF3C((uint64_t *)v31);

  -[NSObject setExportedObject:](v20, "setExportedObject:", v21);
  swift_release(v21);
  v29 = sub_1003BA224;
  v30 = 0;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1004AB190;
  v28 = &unk_100615FE8;
  v22 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v20, "setInvalidationHandler:", v22);
  _Block_release(v22);
  v29 = sub_1003BA230;
  v30 = 0;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1004AB190;
  v28 = &unk_100616010;
  v23 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v20, "setInterruptionHandler:", v23);
  _Block_release(v23);
  -[NSObject resume](v20, "resume");
  return 1;
}

uint64_t sub_1003BE084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003BE094(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1003BE0A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_1000E4180(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = type metadata accessor for StoredUploadAsset(0);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_1000E4180(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000E4180(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_10000491C(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = type metadata accessor for StoredUploadAsset(0);
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_1000E4180(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000E4180(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_10000491C(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1003BE2D4(uint64_t a1)
{
  return sub_1003BE2E0(a1, &qword_10063F398);
}

_QWORD *sub_1003BE2E0(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_1000E4304(0, v2, 0);
    v6 = (uint64_t *)(a1 + 32);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v13 = *v6;
      v7 = sub_100004828(a2);
      v8 = sub_100004828(&qword_10063F378);
      swift_dynamicCast(&v14, &v13, v7, v8, 7);
      v9 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000E4304(0, v3[2] + 1, 1);
        v3 = v15;
      }
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000E4304(v10 > 1, v11 + 1, 1);
        v3 = v15;
      }
      v3[2] = v11 + 1;
      v3[v11 + 4] = v9;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

char *sub_1003BE408()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  char *v6;
  NSString v7;
  id v8;
  objc_class *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  objc_super v19;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_allocWithZone((Class)NSXPCListener);
  v6 = v0;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v5, "initWithMachServiceName:", v7);

  *(_QWORD *)&v6[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener] = v8;
  v9 = (objc_class *)type metadata accessor for IDVServiceListener();
  v19.receiver = v6;
  v19.super_class = v9;
  v10 = (char *)objc_msgSendSuper2(&v19, "init");
  v11 = *(void **)&v10[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener];
  v12 = v10;
  objc_msgSend(v11, "setDelegate:", v12);
  v13 = defaultLogger()(objc_msgSend(v11, "resume"));
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.info.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "IDV service listener is started", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

id sub_1003BE5D8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  objc_class *v12;
  objc_super v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.info.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "IDV service listener is tearing down", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8coreidvd18IDVServiceListener_listener], "invalidate");
  v12 = (objc_class *)type metadata accessor for IDVServiceListener();
  v14.receiver = v1;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, "dealloc");
}

uint64_t sub_1003BE734(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  void *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  a1 += 16;
  swift_beginAccess(a1, v39, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v14 = (void *)Strong;
    defaultLogger()(Strong);
    v15 = v14;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(18, -1);
      v19 = swift_slowAlloc(32, -1);
      v36 = v6;
      v20 = v19;
      v38 = v19;
      *(_DWORD *)v18 = 136446466;
      v34 = v18 + 4;
      v21 = v15;
      v22 = objc_msgSend(v21, "description");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v35 = a2;
      v24 = v23;
      v26 = v25;

      v37 = sub_1000E3AC8(v24, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v34);

      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v18 + 12) = 1026;
      LODWORD(v26) = objc_msgSend(v21, "processIdentifier");

      LODWORD(v37) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v18 + 14);

      _os_log_impl((void *)&_mh_execute_header, v16, v17, v35, (uint8_t *)v18, 0x12u);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v36);
    }

    v32 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v33 = v10;
  }
  else
  {
    v28 = defaultLogger()(0);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, a3, v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v33 = v12;
  }
  return v32(v33, v6);
}

uint64_t type metadata accessor for IDVServiceListener()
{
  return objc_opt_self(_TtC8coreidvd18IDVServiceListener);
}

uint64_t sub_1003BEABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100004828(&qword_10063F378);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_100640C30;
  else
    v2 = (uint64_t *)&unk_10063F390;
  return sub_100004828(v2);
}

uint64_t sub_1003BEB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100004828(&qword_10063F398);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_100640C30;
  else
    v2 = (uint64_t *)&unk_10063F3A0;
  return sub_100004828(v2);
}

uint64_t sub_1003BEB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100004828(&qword_10063F370);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_100640C30;
  else
    v2 = (uint64_t *)&unk_10063F380;
  return sub_100004828(v2);
}

uint64_t sub_1003BEBA0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  _DWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  void **v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t inited;
  id v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD v64[2];
  void **aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint64_t (*v69)();
  uint64_t v70;
  char v71[40];
  _OWORD v72[3];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v59 - v7;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "valueForEntitlement:", v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v72, v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    memset(v72, 0, 32);
  }
  sub_1003BF4D0((uint64_t)v72, (uint64_t)&aBlock);
  if (!v68)
  {
    v11 = sub_10010BDF4((uint64_t)&aBlock);
    goto LABEL_8;
  }
  v11 = swift_dynamicCast(v64, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v11 & 1) == 0)
  {
LABEL_8:
    defaultLogger()(v11);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(8, -1);
      v63 = v6;
      v18 = v17;
      *(_DWORD *)v17 = 67240192;
      v19 = v17 + 4;
      LODWORD(aBlock) = -[NSObject processIdentifier](v14, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v19);

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "coreidvd: could not find caller's application identifier, pid %{public}d", v18, 8u);
      v20 = v18;
      v6 = v63;
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      v15 = v14;
    }

    v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v13 = 0;
    v12 = 0;
    goto LABEL_12;
  }
  v13 = v64[0];
  v12 = v64[1];
LABEL_12:
  defaultLogger()(v11);
  v21 = swift_bridgeObjectRetain_n(v12, 2);
  v22 = Logger.logObject.getter(v21);
  v24 = static os_log_type_t.info.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v63 = v6;
    v26 = (uint8_t *)v25;
    v27 = (void **)swift_slowAlloc(32, -1);
    v60 = v27;
    *(_DWORD *)v26 = 136446210;
    aBlock = v27;
    v62 = v2;
    v28 = a1;
    if (v12)
      v29 = v13;
    else
      v29 = 0;
    v61 = v3;
    if (v12)
      v30 = v12;
    else
      v30 = 0xE000000000000000;
    swift_bridgeObjectRetain(v12);
    v31 = v29;
    a1 = v28;
    *(_QWORD *)&v72[0] = sub_1000E3AC8(v31, v30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 8, v26 + 4);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "IDV service listener received connection from application id = [%{public}s]", v26, 0xCu);
    v32 = v60;
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v33 = sub_1003BEABC();
  v34 = swift_allocObject(v33, ((*(unsigned int *)(v33 + 48) + 7) & 0x1FFFFFFF8) + 128, *(unsigned __int16 *)(v33 + 52) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1005332A0;
  v35 = sub_10001CFF8(0, &qword_100634500, NSArray_ptr);
  *(_QWORD *)(v34 + 32) = v35;
  v36 = sub_10001CFF8(0, &qword_1006364C0, NSString_ptr);
  *(_QWORD *)(v34 + 40) = v36;
  *(_QWORD *)(v34 + 48) = sub_10001CFF8(0, (unint64_t *)&unk_10063F308, NSData_ptr);
  *(_QWORD *)(v34 + 56) = sub_10001CFF8(0, &qword_1006323A0, DIAttribute_ptr);
  *(_QWORD *)(v34 + 64) = sub_10001CFF8(0, &qword_10063F318, DIAttributeText_ptr);
  *(_QWORD *)(v34 + 72) = sub_10001CFF8(0, &qword_10063F320, DIAttributeDate_ptr);
  *(_QWORD *)(v34 + 80) = sub_10001CFF8(0, (unint64_t *)&unk_1006368F0, DIAttributeImage_ptr);
  *(_QWORD *)(v34 + 88) = sub_10001CFF8(0, &qword_1006325C0, DIAttributeDocument_ptr);
  *(_QWORD *)(v34 + 96) = sub_10001CFF8(0, &qword_1006325D0, DIAttributeDocumentScanRequirements_ptr);
  *(_QWORD *)(v34 + 104) = sub_10001CFF8(0, (unint64_t *)&unk_100632620, DIAttributePickerItem_ptr);
  *(_QWORD *)(v34 + 112) = sub_10001CFF8(0, &qword_10063F328, DIAttributePicker_ptr);
  *(_QWORD *)(v34 + 120) = sub_10001CFF8(0, &qword_10063F330, DIAttributeCamera_ptr);
  *(_QWORD *)(v34 + 128) = sub_10001CFF8(0, &qword_10063F338, DIAttributeSMSOTP_ptr);
  *(_QWORD *)(v34 + 136) = sub_10001CFF8(0, (unint64_t *)&unk_10063F340, DIAttributeImageCaptureRequirements_ptr);
  *(_QWORD *)(v34 + 144) = sub_10001CFF8(0, &qword_100632590, DIPage_ptr);
  *(_QWORD *)(v34 + 152) = sub_10001CFF8(0, (unint64_t *)&unk_10063F350, DIAttributeCustom_ptr);
  v37 = swift_allocObject(&unk_100616048, 24, 7);
  swift_unknownObjectWeakInit(v37 + 16, a1);
  v38 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___DIVerificationServerSideProtocol);
  objc_msgSend(a1, "setExportedInterface:", v38);

  v39 = objc_msgSend(a1, "exportedInterface");
  if (v39)
  {
    v40 = v39;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v34, "performVerificationWithAttributes:completion:", 0, 0);

  }
  swift_bridgeObjectRelease(v34);
  v41 = sub_1003BEABC();
  v42 = swift_allocObject(v41, ((*(unsigned int *)(v41 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v41 + 52) | 7);
  *(_OWORD *)(v42 + 16) = xmmword_1005208B0;
  *(_QWORD *)(v42 + 32) = v36;
  *(_QWORD *)(v42 + 40) = sub_10001CFF8(0, &qword_100636CB0, NSDictionary_ptr);
  *(_QWORD *)(v42 + 48) = v35;
  *(_QWORD *)(v42 + 56) = sub_10001CFF8(0, &qword_10063F360, DIVerificationSessionContext_ptr);
  v43 = objc_msgSend(a1, "exportedInterface");
  if (v43)
  {
    v44 = v43;
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v42, "configure:completion:", 0, 0);

  }
  swift_bridgeObjectRelease(v42);
  v45 = sub_1003BEB54();
  inited = swift_initStackObject(v45, v71);
  *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
  *(_QWORD *)(inited + 32) = sub_10001CFF8(0, &qword_10063F368, DIExecutionFeedback_ptr);
  v47 = objc_msgSend(a1, "exportedInterface");
  if (v47)
  {
    v48 = v47;
    v49 = sub_1003BE2E0(inited, &qword_10063F370);
    swift_setDeallocating(inited);
    NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v49, "confirmVerificationCompletedWithFeedback:", 0, 0);

    swift_bridgeObjectRelease(v49);
  }
  else
  {
    swift_setDeallocating(inited);
  }
  if (v12)
    v50 = v13;
  else
    v50 = 0x414C494156414E55;
  if (v12)
    v51 = v12;
  else
    v51 = 0xEB00000000454C42;
  objc_allocWithZone((Class)type metadata accessor for IDVSessionProxy(0));
  v52 = a1;
  v53 = sub_1001708BC((uint64_t)a1, v50, v51);

  objc_msgSend(v52, "setExportedObject:", v53);
  v69 = sub_1003BF53C;
  v70 = v37;
  aBlock = _NSConcreteStackBlock;
  v66 = 1107296256;
  v67 = sub_1004AB190;
  v68 = &unk_100616060;
  v54 = _Block_copy(&aBlock);
  v55 = v70;
  swift_retain(v37);
  swift_release(v55);
  objc_msgSend(v52, "setInvalidationHandler:", v54);
  _Block_release(v54);
  v69 = sub_1003BF57C;
  v70 = v37;
  aBlock = _NSConcreteStackBlock;
  v66 = 1107296256;
  v67 = sub_1004AB190;
  v68 = &unk_100616088;
  v56 = _Block_copy(&aBlock);
  v57 = v70;
  swift_retain(v37);
  swift_release(v57);
  objc_msgSend(v52, "setInterruptionHandler:", v56);
  _Block_release(v56);
  objc_msgSend(v52, "resume");
  swift_release(v37);
  return 1;
}

uint64_t sub_1003BF4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828((uint64_t *)&unk_1006371E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003BF518()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003BF53C()
{
  uint64_t v0;

  return sub_1003BE734(v0, "coreidvd (%{public}s:%{public}d): connection invalidated", "coreidvd (no description: -1): connection invalidated");
}

uint64_t sub_1003BF564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003BF574(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1003BF57C()
{
  uint64_t v0;

  return sub_1003BE734(v0, "coreidvd (%{public}s:%{public}d): connection interupted", "coreidvd (no description: -1): connection interupted");
}

uint64_t sub_1003BF5AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t result;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  Swift::String v46;
  Swift::Bool v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  void *v70;
  float v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  float *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  __n128 v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, char *, uint64_t);
  uint64_t v94;
  id v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[34];
  uint64_t v104[34];
  _BYTE v105[16];
  uint64_t v106;
  _QWORD *v107;
  char v108[32];

  v5 = type metadata accessor for Logger(0);
  v99 = *(_QWORD *)(v5 - 8);
  v100 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v92 - v10;
  __chkstk_darwin(v9);
  v98 = (char *)&v92 - v12;
  v13 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v13);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004828(&qword_100633968);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v28 = defaultLogger()(v18);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Missing results for liveness attestation", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v8, v100);
    goto LABEL_9;
  }
  v21 = *(_QWORD *)(v2 + 16) + OBJC_IVAR____TtC8coreidvd38IdentityProofingLivenessConfigProvider_currentSignedConfigV2;
  swift_beginAccess(v21, v108, 0, 0);
  sub_1003B9DA8(v21, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v22 = a1;
    v23 = sub_1003B9E2C((uint64_t)v15);
    v24 = defaultLogger()(v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing signed config v2 from LivenessConfigProvider", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v11, v100);
LABEL_9:
    v32 = type metadata accessor for LivenessDataV2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  v34 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v96 = v20;
  v97 = v16;
  v93 = v34;
  v94 = a2;
  v34((uint64_t)v20, v15, v16);
  v95 = a1;
  v35 = IdentityLivenessResults.timestampsFAC.getter();
  v36 = v35;
  if ((unint64_t)v35 >> 62)
  {
    if (v35 >= 0)
      v35 &= 0xFFFFFFFFFFFFFF8uLL;
    v37 = _CocoaArrayWrapper.endIndex.getter(v35);
  }
  else
  {
    v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v37)
  {
    v104[0] = (uint64_t)_swiftEmptyArrayStorage;
    result = sub_1000E4374(0, v37 & ~(v37 >> 63), 0);
    if (v37 < 0)
    {
      __break(1u);
      goto LABEL_48;
    }
    v38 = 0;
    v39 = (_QWORD *)v104[0];
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
      else
        v40 = *(id *)(v36 + 8 * v38 + 32);
      v41 = v40;
      v42 = GestureTimestamps.timestamps.getter();

      v104[0] = (uint64_t)v39;
      v44 = v39[2];
      v43 = v39[3];
      if (v44 >= v43 >> 1)
      {
        sub_1000E4374(v43 > 1, v44 + 1, 1);
        v39 = (_QWORD *)v104[0];
      }
      ++v38;
      v39[2] = v44 + 1;
      v39[v44 + 4] = v42;
    }
    while (v37 != v38);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    swift_bridgeObjectRelease(v36);
    v39 = _swiftEmptyArrayStorage;
  }
  v107 = v39;
  v45 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v46._object = (void *)0x800000010055DEC0;
  v46._countAndFlagsBits = 0xD000000000000016;
  v47 = NSUserDefaults.internalBool(forKey:)(v46);

  v48 = v97;
  if (v47)
  {
    JWSSignedJSON.payload.getter(v97);
    memcpy(v104, v103, 0x10AuLL);
    sub_1002B79EC((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1002B796C);
    sub_1003B9C80(v104);
    sub_1003BFE4C((uint64_t)v104, (uint64_t)v105);
    v48 = sub_1002113B4((uint64_t)v105);
    if ((_DWORD)v48 != 1)
    {
      v49 = v106;
      swift_bridgeObjectRetain(v106);
      sub_1002B79EC((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1002B7A5C);
      v50 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease(v49);
      v51 = sub_100210210((uint64_t)_swiftEmptyArrayStorage, v50);
      v52 = swift_bridgeObjectRelease(v39);
      v107 = v51;
      v53 = v98;
      v54 = defaultLogger()(v52);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.debug.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        v57 = swift_slowAlloc(22, -1);
        v58 = swift_slowAlloc(32, -1);
        v102 = v58;
        v103[0] = v50;
        *(_DWORD *)v57 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, &v103[1], v57 + 4);
        *(_WORD *)(v57 + 12) = 2080;
        v92 = v57 + 14;
        swift_beginAccess(&v107, v103, 0, 0);
        v59 = v107;
        swift_bridgeObjectRetain(v107);
        v60 = sub_100004828(&qword_1006340B8);
        v61 = Array.description.getter(v59, v60);
        v63 = v62;
        swift_bridgeObjectRelease(v59);
        v101 = sub_1000E3AC8(v61, v63, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v92);
        swift_bridgeObjectRelease(v63);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "IdentityProofingLivenessDataProvider: liveness disabled. Gesture count: %ld Timestamps FAC: %s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);
      }

      v48 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v53, v100);
    }
  }
  v64 = IdentityLivenessResults.assessmentsPRD.getter(v48);
  v65 = v64;
  if (!((unint64_t)v64 >> 62))
  {
    v66 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v66)
      goto LABEL_30;
LABEL_45:
    v76 = swift_bridgeObjectRelease(v65);
    v68 = _swiftEmptyArrayStorage;
LABEL_46:
    v77 = v95;
    v100 = IdentityLivenessResults.livenessLabel.getter(v76);
    v78 = IdentityLivenessResults.assessmentsFAC.getter();
    swift_beginAccess(&v107, v104, 0, 0);
    v79 = v107;
    v80 = swift_bridgeObjectRetain(v107);
    v81 = IdentityLivenessResults.assessmentTA.getter(v80);
    v82 = IdentityLivenessResults.maxNccLow.getter();
    v83 = IdentityLivenessResults.maxNccHigh.getter();
    v84 = IdentityLivenessResults.ignoredStitches.getter();
    v85 = IdentityLivenessResults.assessmentID.getter();
    v86 = IdentityLivenessResults.timestampsID.getter();
    v87 = IdentityLivenessResults.timestampsButtonPressed.getter();
    v88 = IdentityLivenessResults.luxValues.getter();

    v89 = v94;
    v93(v94, v96, v97);
    v90 = type metadata accessor for LivenessDataV2(0);
    v91 = v89 + *(int *)(v90 + 20);
    *(_QWORD *)v91 = v100;
    *(_BYTE *)(v91 + 8) = 0;
    *(_QWORD *)(v91 + 16) = v78;
    *(_QWORD *)(v91 + 24) = v79;
    *(float *)(v91 + 32) = v81;
    *(_BYTE *)(v91 + 36) = 0;
    *(float *)(v91 + 40) = v82;
    *(_BYTE *)(v91 + 44) = 0;
    *(float *)(v91 + 48) = v83;
    *(_BYTE *)(v91 + 52) = 0;
    *(_QWORD *)(v91 + 56) = v84;
    *(_BYTE *)(v91 + 64) = 0;
    *(_QWORD *)(v91 + 72) = v68;
    *(float *)(v91 + 80) = v85;
    *(_BYTE *)(v91 + 84) = 0;
    *(_QWORD *)(v91 + 88) = v86;
    *(_QWORD *)(v91 + 96) = v87;
    *(_QWORD *)(v91 + 104) = v88;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v89, 0, 1, v90);
    return swift_bridgeObjectRelease(v79);
  }
  if (v64 >= 0)
    v64 &= 0xFFFFFFFFFFFFFF8uLL;
  v66 = _CocoaArrayWrapper.endIndex.getter(v64);
  if (!v66)
    goto LABEL_45;
LABEL_30:
  v104[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_1000E4358(0, v66 & ~(v66 >> 63), 0);
  if ((v66 & 0x8000000000000000) == 0)
  {
    v67 = 0;
    v68 = (_QWORD *)v104[0];
    do
    {
      if ((v65 & 0xC000000000000001) != 0)
        v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v67, v65);
      else
        v69 = *(id *)(v65 + 8 * v67 + 32);
      v70 = v69;
      v71 = PRDMetadata.stage2.getter();
      v72 = PRDMetadata.timestamp.getter();

      v104[0] = (uint64_t)v68;
      v74 = v68[2];
      v73 = v68[3];
      if (v74 >= v73 >> 1)
      {
        sub_1000E4358(v73 > 1, v74 + 1, 1);
        v68 = (_QWORD *)v104[0];
      }
      ++v67;
      v68[2] = v74 + 1;
      v75 = (float *)&v68[2 * v74];
      v75[8] = v71;
      *((_QWORD *)v75 + 5) = v72;
    }
    while (v66 != v67);
    v76 = swift_bridgeObjectRelease(v65);
    goto LABEL_46;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityProofingLivenessDataProvider()
{
  return objc_opt_self(_TtC8coreidvd36IdentityProofingLivenessDataProvider);
}

uint64_t sub_1003BFE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_10063B0E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1003BFE94(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003BFEE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003BFF5C + 4 * byte_100533314[a2]))(0x756F72676B636162);
}

uint64_t sub_1003BFF5C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x756F72676B636162 && v1 == 0xEA0000000000646ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x756F72676B636162, 0xEA0000000000646ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA0000000000646ELL);
  return v2 & 1;
}

void sub_1003C0018(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C0084(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C0120 + 4 * byte_10053331E[a2]))(0x776F6C666B726F77);
}

uint64_t sub_1003C0120(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x776F6C666B726F77 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x776F6C666B726F77, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_1003C01F4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000012;
  v3 = 0x80000001005399A0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000013;
    else
      v5 = 1701736302;
    if (v4 == 1)
      v6 = 0x80000001005399C0;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000012;
  v6 = 0x80000001005399A0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000013;
    else
      v2 = 1701736302;
    if (v7 == 1)
      v3 = 0x80000001005399C0;
    else
      v3 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1003C02E0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x44495F4554415453;
  else
    v3 = 0x5F474E4956495244;
  if (v2)
    v4 = 0xEF45534E4543494CLL;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x44495F4554415453;
  else
    v5 = 0x5F474E4956495244;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEF45534E4543494CLL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003C0390(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1003C03DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C043C + 4 * byte_100533328[a2]))(0x65636E6F6ELL);
}

uint64_t sub_1003C043C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65636E6F6ELL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65636E6F6ELL, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_1003C04E0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 30771;
  else
    v2 = 30770;
  if ((a2 & 1) != 0)
    v3 = 30771;
  else
    v3 = 30770;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000, v3, 0xE200000000000000, 0);
  swift_bridgeObjectRelease_n(0xE200000000000000, 2);
  return v4 & 1;
}

void sub_1003C0540(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C05A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C05F8 + 4 * byte_100533330[a2]))(0x64657669726564);
}

uint64_t sub_1003C05F8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64657669726564 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64657669726564, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

void sub_1003C0694(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C0700(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1003C07C4 + 4 * byte_10053333C[a2]))();
}

uint64_t sub_1003C07C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xE800000000000000)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v4 & 1;
}

uint64_t sub_1003C08E4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x800000010053AC10;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001CLL;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0x800000010053AC30;
    else
      v6 = 0x800000010053AC50;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x800000010053AC10;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD00000000000001CLL;
    else
      v2 = 0xD000000000000014;
    if (v7 == 1)
      v3 = 0x800000010053AC30;
    else
      v3 = 0x800000010053AC50;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1003C09E0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F436E6F69676552;
  else
    v3 = 0x43746C7561666544;
  if (v2)
    v4 = 0xEE00736769666E6FLL;
  else
    v4 = 0xED0000736769666ELL;
  if ((a2 & 1) != 0)
    v5 = 0x6F436E6F69676552;
  else
    v5 = 0x43746C7561666544;
  if ((a2 & 1) != 0)
    v6 = 0xED0000736769666ELL;
  else
    v6 = 0xEE00736769666E6FLL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003C0A9C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C0AEC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C0BC4 + 4 * byte_10053334D[a2]))(25705);
}

uint64_t sub_1003C0BC4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 25705 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 25705, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

uint64_t sub_1003C0D04(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x45444F4348545541;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x45444F4348545541;
    else
      v4 = 0xD000000000000010;
    if (v3 == 1)
      v5 = 0xEE0059525445525FLL;
    else
      v5 = 0x8000000100539200;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
      {
        v7 = 0xEE0059525445525FLL;
      }
      else
      {
        v2 = 0xD000000000000010;
        v7 = 0x8000000100539200;
      }
      if (v4 != v2)
        goto LABEL_18;
      goto LABEL_16;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x45444F4348545541;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x45444F4348545541)
  {
LABEL_18:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_19;
  }
LABEL_16:
  if (v5 != v7)
    goto LABEL_18;
  v8 = 1;
  v7 = v5;
LABEL_19:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1003C0E14(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000068;
  v3 = 0x74615070756F7267;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x7475626972747461;
    else
      v5 = 25705;
    if (v4 == 1)
      v6 = 0xEB00000000644965;
    else
      v6 = 0xE200000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x74615070756F7267;
  v6 = 0xE900000000000068;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x7475626972747461;
    else
      v3 = 25705;
    if (v7 == 1)
      v2 = 0xEB00000000644965;
    else
      v2 = 0xE200000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_1003C0F24(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C0F64(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C0FD8 + 4 * byte_10053335C[a2]))(0x70756F7267);
}

uint64_t sub_1003C0FD8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x70756F7267 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x70756F7267, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_1003C109C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C10DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C11A8 + 4 * byte_10053336B[a2]))(7890291);
}

uint64_t sub_1003C11A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 7890291 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 7890291, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1003C12DC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6C616D726F6ELL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7373657373416F6ELL;
    else
      v4 = 0x64656C6261736964;
    if (v3 == 1)
      v5 = 0xEC000000746E656DLL;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7373657373416F6ELL;
      else
        v2 = 0x64656C6261736964;
      if (v6 == 1)
        v7 = 0xEC000000746E656DLL;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x6C616D726F6ELL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x6C616D726F6ELL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1003C13FC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 5719374;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x44454C4542414CLL;
    else
      v4 = 0x44454C494146;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x44454C4542414CLL;
      else
        v2 = 0x44454C494146;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE300000000000000;
    v4 = 5719374;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v4 != 5719374)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_1003C14FC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C153C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C15CC + 4 * byte_10053337B[a2]))(0x72656B636970);
}

uint64_t sub_1003C15CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72656B636970 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x72656B636970, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_1003C16B4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C1704(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C175C + 4 * byte_100533386[a2]))(27748);
}

uint64_t sub_1003C175C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 27748 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 27748, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

void sub_1003C17F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C1840(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C18B8 + 4 * byte_10053338F[a2]))(0x73656E755469);
}

uint64_t sub_1003C18B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x73656E755469 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x73656E755469, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1003C197C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x73656E755469;
  else
    v2 = 0x64756F6C4369;
  if ((a2 & 1) != 0)
    v3 = 0x73656E755469;
  else
    v3 = 0x64756F6C4369;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE600000000000000, v3, 0xE600000000000000, 0);
  swift_bridgeObjectRelease_n(0xE600000000000000, 2);
  return v4 & 1;
}

void sub_1003C19F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C1A40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1003C1AF0 + 4 * byte_10053339B[a2]))();
}

uint64_t sub_1003C1AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xEF64756F6C43692ELL)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0xEF64756F6C43692ELL, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(0xEF64756F6C43692ELL);
  return v4 & 1;
}

uint64_t sub_1003C1BF8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x746C7561666564;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000018;
    else
      v4 = 0x6146737961776C61;
    if (v3 == 1)
      v5 = 0x800000010053A940;
    else
      v5 = 0xEE006B6361626C6CLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD000000000000018;
      else
        v2 = 0x6146737961776C61;
      if (v6 == 1)
        v7 = 0x800000010053A940;
      else
        v7 = 0xEE006B6361626C6CLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x746C7561666564;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x746C7561666564)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_1003C1D28(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C1D68(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C1DC0 + 4 * byte_1005333A6[a2]))(0x64496F6962);
}

uint64_t sub_1003C1DC0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64496F6962 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64496F6962, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_1003C1E5C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4D49536C617564;
  else
    v3 = 0x4953656C676E6973;
  if (v2)
    v4 = 0xE90000000000004DLL;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x4D49536C617564;
  else
    v5 = 0x4953656C676E6973;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE90000000000004DLL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1003C1F04(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7961506D69616C63;
  else
    v3 = 0x6165486D69616C63;
  if (v2)
    v4 = 0xEB00000000726564;
  else
    v4 = 0xEC00000064616F6CLL;
  if ((a2 & 1) != 0)
    v5 = 0x7961506D69616C63;
  else
    v5 = 0x6165486D69616C63;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000064616F6CLL;
  else
    v6 = 0xEB00000000726564;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003C1FB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C1FF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003C2068 + 4 * byte_1005333AF[a2]))(5391183);
}

uint64_t sub_1003C2068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 5391183 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 5391183, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1003C2120(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 50;
  else
    v2 = 49;
  if ((a2 & 1) != 0)
    v3 = 50;
  else
    v3 = 49;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_1003C2180(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x676E6972616873;
  else
    v3 = 0x676E69666F6F7270;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x676E6972616873;
  else
    v5 = 0x676E69666F6F7270;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003C2224(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1003C2290(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1003C2314 + 4 * byte_1005333B9[a2]))();
}

uint64_t sub_1003C2314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xEE006B636142746ELL)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0xEE006B636142746ELL, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(0xEE006B636142746ELL);
  return v4 & 1;
}

uint64_t sub_1003C23E0(unsigned __int8 a1, unsigned __int8 a2)
{
  char v2;

  if (a1 == a2)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1 + 49, 0xE100000000000000, a2 + 49, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v2 & 1;
}

uint64_t sub_1003C2440(char a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x800000010053A8A0;
  else
    v2 = 0x800000010053A880;
  if ((a2 & 1) != 0)
    v3 = 0x800000010053A8A0;
  else
    v3 = 0x800000010053A880;
  if (v2 == v3)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, v2, 0xD00000000000001ALL, v3, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

Swift::Int sub_1003C24DC(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000012;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000013;
    else
      v2 = 1701736302;
    if (a1 == 1)
      v3 = 0x80000001005399C0;
    else
      v3 = 0xE400000000000000;
  }
  else
  {
    v3 = 0x80000001005399A0;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1003C2578(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1003C25D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x776F6C666B726F77, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1003C2680(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1003C26C8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 5391183, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1003C2744(char a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  if ((a1 & 1) != 0)
    v2 = 0x800000010053A8A0;
  else
    v2 = 0x800000010053A880;
  String.hash(into:)(v4, 0xD00000000000001ALL, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void sub_1003C27C0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1003C2818()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65636E6F6ELL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_1003C288C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1003C28DC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F72676B636162, 0xEA0000000000646ELL);
  swift_bridgeObjectRelease(0xEA0000000000646ELL);
  return Hasher._finalize()();
}

void sub_1003C2960(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1003C29A8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x70756F7267, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1003C2A28(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000010;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD00000000000001CLL;
    else
      v2 = 0xD000000000000014;
    if (a1 == 1)
      v3 = 0x800000010053AC30;
    else
      v3 = 0x800000010053AC50;
  }
  else
  {
    v3 = 0x800000010053AC10;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1003C2AD0(uint64_t a1, char a2)
{
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  if ((a2 & 1) != 0)
    v3 = 0x800000010053A8A0;
  else
    v3 = 0x800000010053A880;
  String.hash(into:)(v5, 0xD00000000000001ALL, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1003C2B48(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, a2 + 49, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

void sub_1003C2B98(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C2BDC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 5391183, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1003C2C58(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C2CA8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0xEF64756F6C43692ELL);
  swift_bridgeObjectRelease(0xEF64756F6C43692ELL);
  return Hasher._finalize()();
}

void sub_1003C2D6C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C2DB0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x72656B636970, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1003C2E4C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C2E90()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x70756F7267, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1003C2F10(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000010;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD00000000000001CLL;
    else
      v3 = 0xD000000000000014;
    if (a2 == 1)
      v4 = 0x800000010053AC30;
    else
      v4 = 0x800000010053AC50;
  }
  else
  {
    v4 = 0x800000010053AC10;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1003C2FB4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C3010()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1003C30EC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C3140()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65636E6F6ELL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1003C31B4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000012;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000013;
    else
      v3 = 1701736302;
    if (a2 == 1)
      v4 = 0x80000001005399C0;
    else
      v4 = 0xE400000000000000;
  }
  else
  {
    v4 = 0x80000001005399A0;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1003C324C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C32A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x776F6C666B726F77, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1003C3350(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1003C339C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x756F72676B636162, 0xEA0000000000646ELL);
  swift_bridgeObjectRelease(0xEA0000000000646ELL);
  return Hasher._finalize()();
}

uint64_t sub_1003C3420()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for IdentityProofingMetadata()
{
  return objc_opt_self(_TtC8coreidvd24IdentityProofingMetadata);
}

void sub_1003C346C(char *a1)
{
  sub_1003BFE94(*a1);
}

void sub_1003C3478()
{
  char *v0;

  sub_1003C288C(*v0);
}

void sub_1003C3480()
{
  __asm { BR              X10 }
}

uint64_t sub_1003C34BC(uint64_t a1)
{
  String.hash(into:)(a1, 0x756F72676B636162, 0xEA0000000000646ELL);
  return swift_bridgeObjectRelease(0xEA0000000000646ELL);
}

void sub_1003C352C(uint64_t a1)
{
  char *v1;

  sub_1003C3350(a1, *v1);
}

unint64_t sub_1003C3534@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003D07B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003C3560()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1003C3590 + 4 * byte_100533419[*v0]))();
}

void sub_1003C3590(_QWORD *a1@<X8>)
{
  *a1 = 0x756F72676B636162;
  a1[1] = 0xEA0000000000646ELL;
}

void sub_1003C35B0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000010053AB50;
}

void sub_1003C35D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6974634172657375;
  a1[1] = 0xEA00000000006E6FLL;
}

uint64_t sub_1003C35F8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD v69[4];

  v11 = v10;
  v66 = a7;
  v60 = a9;
  v19 = type metadata accessor for Logger(0);
  v64 = *(_QWORD *)(v19 - 8);
  v65 = v19;
  __chkstk_darwin(v19);
  v67 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  v21 = v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  v22 = type metadata accessor for WorkflowRecommendationResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider) = 0;
  v24 = v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_staticWorkflow;
  v25 = type metadata accessor for IdentityProofingStaticWorkflow(0);
  v26 = v24;
  v27 = a5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v26, 1, 1, v25);
  v28 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener) = 0;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig) = 0;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings) = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_trigger) = a1;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_pendingActionsWebService) = a2;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider) = a3;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_expirationActionProvider) = a4;
  v29 = *(_QWORD *)(v11 + v23);
  *(_QWORD *)(v11 + v23) = v27;
  v61 = a2;
  v30 = a2;
  v31 = v66;
  swift_retain(v30);
  v62 = a3;
  swift_retain(a3);
  v63 = a4;
  v32 = a4;
  v33 = v60;
  swift_retain(v32);
  swift_retain(v27);
  swift_release(v29);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_cleanupProvider) = a6;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_biomeManager) = v31;
  v34 = a8;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo) = a8;
  if (v33)
  {
    swift_retain(a6);
    swift_retain(v31);
    v35 = a8;
    v36 = v33;
  }
  else
  {
    v37 = qword_100670080;
    if (qword_100670080)
    {
      swift_retain(a6);
      swift_retain(v31);
      v38 = a8;
      swift_retain(v37);
      v36 = (void *)sub_10002D984();
      v39 = v36;
      swift_release(v37);
    }
    else
    {
      swift_retain(a6);
      swift_retain(v31);
      v40 = a8;
      v36 = 0;
    }
  }
  v41 = *(void **)(v11 + v28);
  *(_QWORD *)(v11 + v28) = v36;
  v60 = v33;

  if (qword_10062F588 != -1)
    swift_once(&qword_10062F588, sub_100455008);
  v42 = qword_100670818;
  v69[2] = type metadata accessor for IdentityBiometricStoreHelper();
  v69[3] = &off_1006185A8;
  v68 = v42;
  v43 = type metadata accessor for IdentityProofingCredentialProvider();
  v44 = swift_allocObject(v43, 64, 7);
  *(_QWORD *)(v44 + 16) = 0;
  sub_1000A1F54((uint64_t)&v68, v44 + 24, (uint64_t *)&unk_100643650);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_credentialProvider) = v44;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_identityWatchProvisioningManagerFactory) = a10;
  swift_retain(v42);
  v45 = swift_retain(a10);
  defaultLogger()(v45);
  v46 = swift_retain_n(v11, 2);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v58 = a10;
    v59 = a6;
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v49 = 138412290;
    v51 = *(void **)(v11 + v28);
    if (v51)
    {
      v57 = v27;
      v68 = (uint64_t)v51;
      v52 = v51;
      v53 = v49 + 4;
      v27 = v57;
    }
    else
    {
      v68 = 0;
      v53 = v49 + 4;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v53);
    *v50 = v51;
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "IdentityProofingPendingActionsFlow: watchListener = %@", v49, 0xCu);
    v54 = sub_100004828(&qword_1006308B0);
    swift_arrayDestroy(v50, 1, v54);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    swift_release(v58);
    v31 = v66;
    a6 = v59;
  }
  else
  {

    swift_release(a10);
    swift_release_n(v11, 2);
  }

  swift_release(v61);
  swift_release(v62);
  swift_release(v63);
  swift_release(v27);
  swift_release(a6);
  swift_release(v31);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v67, v65);
  return v11;
}

_QWORD *sub_1003C3AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void);
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[11];
  uint64_t v89;

  v71 = a3;
  v72 = a4;
  v66 = a7;
  v75 = a5;
  v76 = (unint64_t)a6;
  v89 = a2;
  v77 = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7);
  v69 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v74 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004828(&qword_1006308F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = defaultLogger()(v17);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    v65 = v9;
    v24 = v23;
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Preparing pending actions request", v23, 2u);
    v25 = v24;
    v9 = v65;
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v27 = static Locale.current.getter(v26);
  Locale.region.getter(v27);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v11, v9);
  v28 = type metadata accessor for Locale.Region(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v28) == 1)
  {
    sub_100008030((uint64_t)v14, &qword_1006308F0);
    v30 = 0xE700000000000000;
    v31 = 0x6E776F6E6B6E55;
  }
  else
  {
    v31 = Locale.Region.identifier.getter();
    v30 = v32;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
  }
  v34 = v72;
  v33 = v73;
  v36 = v70;
  v35 = v71;
  v37 = (_QWORD *)swift_allocObject(&unk_1006165A0, 88, 7);
  v37[2] = v33;
  v37[3] = v31;
  v38 = v77;
  v37[4] = v30;
  v37[5] = v38;
  v39 = v89;
  v37[6] = v89;
  v37[7] = v35;
  v40 = v75;
  v37[8] = v34;
  v37[9] = v40;
  v41 = v76;
  v37[10] = v76;
  swift_bridgeObjectRetain(v41);
  swift_retain(v33);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v34);
  runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000031, 0x800000010055EA10, 0xD00000000000004BLL, 0x800000010055EEB0, 129, &unk_10063F988, v37, &type metadata for IdentityProofingPendingActionsResponse);
  v76 = (unint64_t)" from the server";
  if (v36)
  {
    v75 = v36;
    swift_release(v37);
    v43 = sub_100004828((uint64_t *)&unk_1006325A0);
    v44 = sub_100004828((uint64_t *)&unk_100633440);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(_QWORD *)(v45 + 72);
    v47 = *(unsigned __int8 *)(v45 + 80);
    v48 = (v47 + 32) & ~v47;
    v49 = swift_allocObject(v43, v48 + 2 * v46, v47 | 7);
    *(_OWORD *)(v49 + 16) = xmmword_1005208D0;
    v50 = v49 + v48;
    v51 = (_QWORD *)(v50 + *(int *)(v44 + 48));
    v52 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    v53 = type metadata accessor for DIPError.PropertyKey(0);
    v54 = *(void (**)(void))(*(_QWORD *)(v53 - 8) + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v50, v52, v53);
    v51[3] = &type metadata for String;
    *v51 = 0x61746E6567616DLL;
    v51[1] = 0xE700000000000000;
    v55 = (_QWORD *)(v50 + v46 + *(int *)(v44 + 48));
    v54();
    v55[3] = &type metadata for String;
    v56 = v89;
    *v55 = v77;
    v55[1] = v56;
    swift_bridgeObjectRetain(v56);
    v57 = v75;
    swift_errorRetain(v75);
    v58 = sub_10011D314(v49);
    v59 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v69, enum case for DIPError.Code.internalError(_:), v68);
    v60 = type metadata accessor for DIPError(0);
    v61 = sub_100007F30();
    swift_allocError(v60, v61, 0, 0);
    v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v57, v59, 0, v58, 0xD000000000000087, 0x8000000100543910, 0xD00000000000004BLL, v76 | 0x8000000000000000, 140);
    swift_willThrow(v62);
    return (_QWORD *)swift_errorRelease(v57);
  }
  else
  {
    swift_release(v37);
    v88[6] = v84;
    v88[7] = v85;
    v88[8] = v86;
    v88[9] = v87;
    v88[2] = v80;
    v88[3] = v81;
    v88[4] = v82;
    v88[5] = v83;
    v88[0] = v78;
    v88[1] = v79;
    v42 = v66;
    sub_1003D0AA0((uint64_t)v88, v35, v34, v66);
    sub_1003C9CF0((uint64_t)v88, v35, v34, v42);
    return sub_10025625C(v88);
  }
}

uint64_t sub_1003C4080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[30] = v10;
  v8[31] = v11;
  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[24] = a3;
  v8[25] = a4;
  v8[22] = a1;
  v8[23] = a2;
  return swift_task_switch(sub_1003C40B0, 0, 0);
}

uint64_t sub_1003C40B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0[23] + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_pendingActionsWebService);
  v0[32] = v1;
  v2 = dword_100642764;
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[33] = v3;
  *v3 = v0;
  v3[1] = sub_1003C4140;
  return sub_100466B6C((uint64_t)(v0 + 2), v0[24], v0[25], v0[26], v0[27], v0[28], v0[29], v0[30]);
}

uint64_t sub_1003C4140()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003C41E4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 256));
    v4 = sub_1003C41AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003C41AC()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_OWORD **)(v0 + 176);
  v2 = *(_OWORD *)(v0 + 32);
  *v1 = *(_OWORD *)(v0 + 16);
  v1[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v4 = *(_OWORD *)(v0 + 64);
  v5 = *(_OWORD *)(v0 + 96);
  v1[4] = *(_OWORD *)(v0 + 80);
  v1[5] = v5;
  v1[2] = v3;
  v1[3] = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v7 = *(_OWORD *)(v0 + 128);
  v8 = *(_OWORD *)(v0 + 160);
  v1[8] = *(_OWORD *)(v0 + 144);
  v1[9] = v8;
  v1[6] = v6;
  v1[7] = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C41E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 256));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003C4218(void *a1, uint64_t a2, uint64_t a3, void *a4, uint8_t *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  Swift::String v22;
  void *object;
  uint64_t v24;
  id v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a4;
  v54 = a5;
  v55 = type metadata accessor for IdentityProofingIDType(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v47 - v15;
  v17 = v57;
  sub_1000D7010(a2, a3, (uint64_t)v56);
  v57 = v17;
  if (!v17)
  {
    v56 = a1;
    v48 = a2;
    v49 = v9;
    v19 = v55;
    v50 = v14;
    v51 = v10;
    v52 = v11;
    if (v18)
    {
      v20 = v54;
      v21 = v18;
      v22._countAndFlagsBits = IdentityProofingIDType.rawValue.getter(v18);
      object = v22._object;
      StoredProofingSession.update(idType:)(v22);
      swift_bridgeObjectRelease(object);
      v24 = v57;
      v25 = sub_1000D6288();
      v57 = v24;
      if (v24)
      {

      }
      else
      {
        v56 = v21;
        v33 = v50;
        defaultLogger()(v25);
        v34 = v53;
        v35 = v49;
        v36 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v53 + 16))(v49, v20, v19);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.debug.getter(v37);
        v39 = os_log_type_enabled(v37, v38);
        v40 = v52;
        if (v39)
        {
          v41 = (uint8_t *)swift_slowAlloc(12, -1);
          v42 = swift_slowAlloc(32, -1);
          v60 = v42;
          *(_DWORD *)v41 = 136315138;
          v54 = v41 + 4;
          v43 = IdentityProofingIDType.rawValue.getter(v42);
          v45 = v44;
          v58 = sub_1000E3AC8(v43, v44, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v54);
          swift_bridgeObjectRelease(v45);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v55);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Successfully saved the idType %s", v41, 0xCu);
          swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v41, -1, -1);

          v46 = *(void (**)(char *, uint64_t))(v52 + 8);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v19);

          v46 = *(void (**)(char *, uint64_t))(v40 + 8);
        }
        v46(v33, v51);
      }
    }
    else
    {
      v26 = v16;
      defaultLogger()(0);
      v27 = a3;
      v28 = swift_bridgeObjectRetain_n(a3, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.debug.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v60 = v32;
        *(_DWORD *)v31 = 136315138;
        swift_bridgeObjectRetain(v27);
        v58 = sub_1000E3AC8(v48, v27, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v31 + 4);
        swift_bridgeObjectRelease_n(v27, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "unable to find proofing session. non fatal error %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v27, 2);
      }
      (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v51);
    }
  }
}

void sub_1003C4638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __objc2_prop *v35;
  NSObject *v36;
  NSObject *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  const void *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ObjectType;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  NSString v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  __int128 v118;
  char *v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t aBlock[5];
  uint64_t v144;
  _QWORD v145[4];
  uint64_t v146;
  char v147[8];

  v129 = a6;
  v139 = a5;
  v136 = a4;
  v9 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v9);
  v128 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v133 = *(_QWORD *)(v11 - 8);
  v134 = v11;
  __chkstk_darwin(v11);
  v138 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_100633990);
  __chkstk_darwin(v13);
  v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v141 - 8);
  v17 = __chkstk_darwin(v141);
  v19 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v116 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v116 - v23;
  v25 = v142;
  sub_1000D69B0(a2, a3);
  if (!v25)
  {
    v28 = v26;
    v122 = a2;
    v131 = a3;
    v137 = v16;
    v142 = 0;
    v29 = v139;
    v132 = v22;
    v140 = v19;
    v127 = v15;
    v126 = a1;
    if (v26)
    {
      v30 = v26 & 0xFFFFFFFFFFFFFF8;
      v125 = v26;
      if (v26 >> 62)
        goto LABEL_54;
      v31 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
      v32 = v138;
      v33 = v132;
      if (v31)
      {
        v124 = v28 & 0xC000000000000001;
        v119 = v147;
        v34 = 4;
        v35 = &stru_10062A000;
        *(_QWORD *)&v27 = 136315650;
        v118 = v27;
        v117 = (char *)&type metadata for Any + 8;
        *(_QWORD *)&v27 = 134217984;
        v121 = v27;
        v120 = (char *)&type metadata for () + 8;
        v123 = v31;
        while (1)
        {
          if (v124)
            v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v28);
          else
            v36 = *(id *)(v28 + 8 * v34);
          v37 = v36;
          if (__OFADD__(v34 - 4, 1))
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            if (v28 >= 0)
              v115 = v30;
            else
              v115 = v28;
            swift_bridgeObjectRetain(v28);
            v31 = _CocoaArrayWrapper.endIndex.getter(v115);
            swift_bridgeObjectRelease(v125);
            v28 = v125;
            goto LABEL_5;
          }
          v38 = objc_msgSend(v36, v35[244].attr);
          if (v38 == (id)IdentityProofingActionStatus.rawValue.getter(8)
            || (v39 = objc_msgSend(v37, v35[244].attr), v39 == (id)IdentityProofingActionStatus.rawValue.getter(7)))
          {

            swift_bridgeObjectRelease(v125);
            return;
          }
          v40 = -[NSObject provisioningAttemptDate](v37, "provisioningAttemptDate");
          if (!v40)
            break;
          v41 = v40;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

          v42 = v133;
          v43 = (uint64_t)v127;
          v44 = v32;
          v45 = v134;
          (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v127, v44, v134);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v45);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v45) == 1)
            goto LABEL_20;
          sub_100008030(v43, &qword_100633990);
          v46 = IdentityProofingActionStatus.rawValue.getter(v29);
          if (v46 == IdentityProofingActionStatus.rawValue.getter(2))
            goto LABEL_49;
LABEL_21:
          v135 = v34 - 3;
          v47 = IdentityTarget.init(rawValue:)(-[NSObject target](v37, "target"));
          if ((v48 & 1) == 0)
          {
            v49 = v47;
            defaultLogger()(v47);
            v50 = v131;
            v51 = swift_bridgeObjectRetain_n(v131, 2);
            v52 = Logger.logObject.getter(v51);
            v53 = static os_log_type_t.debug.getter(v52);
            if (os_log_type_enabled(v52, v53))
            {
              v54 = swift_slowAlloc(32, -1);
              v55 = swift_slowAlloc(96, -1);
              aBlock[0] = v55;
              *(_DWORD *)v54 = v118;
              swift_bridgeObjectRetain(v131);
              v146 = sub_1000E3AC8(v122, v131, aBlock);
              v130 = v34;
              v56 = v119;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v119, v54 + 4);
              swift_bridgeObjectRelease_n(v131, 3);
              *(_WORD *)(v54 + 12) = 2080;
              v57 = IdentityTarget.debugDescription.getter(v49);
              v59 = v58;
              v146 = sub_1000E3AC8(v57, v58, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v56, v54 + 14);
              swift_bridgeObjectRelease(v59);
              *(_WORD *)(v54 + 22) = 2080;
              v60 = IdentityProofingActionStatus.debugDescription.getter(v139);
              v62 = v61;
              v146 = sub_1000E3AC8(v60, v61, aBlock);
              v63 = v56;
              v34 = v130;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v63, v54 + 24);
              v64 = v139;
              swift_bridgeObjectRelease(v62);
              _os_log_impl((void *)&_mh_execute_header, v52, v53, "Storing the current proofing action status for proofingSessionID: %s and target: %s to: %s", (uint8_t *)v54, 0x20u);
              swift_arrayDestroy(v55, 3, v117);
              v65 = v55;
              v33 = v132;
              swift_slowDealloc(v65, -1, -1);
              v66 = v54;
              v29 = v64;
              swift_slowDealloc(v66, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n(v50, 2);
            }

            (*(void (**)(char *, uint64_t))(v137 + 8))(v33, v141);
          }
          v67 = v29;
          v68 = IdentityProofingActionStatus.rawValue.getter(v29);
          v69 = -[NSObject managedObjectContext](v37, "managedObjectContext");
          if (v69)
          {
            v70 = v69;
            v71 = swift_allocObject(&unk_100616218, 33, 7);
            *(_QWORD *)(v71 + 16) = v37;
            *(_QWORD *)(v71 + 24) = v68;
            *(_BYTE *)(v71 + 32) = 0;
            v29 = swift_allocObject(&unk_100616240, 32, 7);
            *(_QWORD *)(v29 + 16) = sub_1003D0A1C;
            *(_QWORD *)(v29 + 24) = v71;
            aBlock[4] = (uint64_t)sub_1000C00CC;
            v144 = v29;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_100026DC8;
            aBlock[3] = (uint64_t)&unk_100616258;
            v72 = _Block_copy(aBlock);
            v73 = v144;
            v74 = v37;
            swift_retain(v29);
            swift_release(v73);
            objc_msgSend(v70, "performBlockAndWait:", v72);

            v75 = v72;
            v33 = v132;
            _Block_release(v75);
            LOBYTE(v70) = swift_isEscapingClosureAtFileLocation(v29, "", 93, 132, 51, 1);
            swift_release(v29);
            v69 = (id)swift_release(v71);
            if ((v70 & 1) != 0)
              goto LABEL_53;
          }
          defaultLogger()(v69);
          v37 = v37;
          v76 = Logger.logObject.getter(v37);
          v77 = static os_log_type_t.debug.getter(v76);
          if (os_log_type_enabled(v76, v77))
          {
            v78 = swift_slowAlloc(12, -1);
            *(_DWORD *)v78 = v121;
            *(_QWORD *)(v78 + 4) = -[NSObject proofingActionStatus](v37, "proofingActionStatus");

            _os_log_impl((void *)&_mh_execute_header, v76, v77, "the current proofingActionStatus is %lld", (uint8_t *)v78, 0xCu);
            swift_slowDealloc(v78, -1, -1);
          }
          else
          {

            v76 = v37;
          }
          v79 = v137;

          (*(void (**)(char *, uint64_t))(v79 + 8))(v140, v141);
          v80 = v142;
          sub_1000D6288();
          v142 = v80;
          if (v80)
          {
LABEL_49:
            swift_bridgeObjectRelease(v125);
            goto LABEL_50;
          }
          v81 = IdentityTarget.rawValue.getter(v136);
          if (v81 == IdentityTarget.rawValue.getter(2))
          {
            v130 = v34;
            v82 = type metadata accessor for TaskPriority(0);
            v83 = *(_QWORD *)(v82 - 8);
            v84 = (uint64_t)v128;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v128, 1, 1, v82);
            v85 = (_QWORD *)swift_allocObject(&unk_1006161C8, 56, 7);
            v85[2] = 0;
            v86 = v67;
            v87 = v129;
            v85[3] = 0;
            v85[4] = v87;
            v85[5] = v37;
            v85[6] = v86;
            v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v82);
            v89 = v37;
            v90 = swift_retain(v87);
            if (v88 == 1)
            {
              sub_100008030(v84, &qword_10062FEC0);
              v91 = 0;
            }
            else
            {
              LOBYTE(v91) = TaskPriority.rawValue.getter(v90);
              (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v82);
              v91 = v91;
            }
            v92 = v85[2];
            v93 = v139;
            if (v92)
            {
              v94 = v85[3];
              ObjectType = swift_getObjectType(v92);
              swift_unknownObjectRetain(v92);
              v96 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v94);
              v98 = v97;
              swift_unknownObjectRelease(v92);
            }
            else
            {
              v96 = 0;
              v98 = 0;
            }
            v33 = v132;
            v34 = v130;
            v99 = swift_allocObject(&unk_1006161F0, 32, 7);
            *(_QWORD *)(v99 + 16) = &unk_10063F938;
            *(_QWORD *)(v99 + 24) = v85;
            if (v98 | v96)
            {
              v145[0] = 0;
              v145[1] = 0;
              v100 = v145;
              v145[2] = v96;
              v145[3] = v98;
            }
            else
            {
              v100 = 0;
            }
            v29 = v93;
            v35 = &stru_10062A000;
            v101 = swift_task_create(v91 | 0x1C00, v100, v120, &unk_100630270, v99);

            swift_release(v101);
          }
          else
          {

            v29 = v67;
            v35 = &stru_10062A000;
          }
          ++v34;
          v32 = v138;
          v28 = v125;
          if (v135 == v123)
            goto LABEL_45;
        }
        v43 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v127, 1, 1, v134);
LABEL_20:
        sub_100008030(v43, &qword_100633990);
        goto LABEL_21;
      }
LABEL_45:
      swift_bridgeObjectRelease(v28);
      v111 = type metadata accessor for IdentityManagementSessionDelegate();
      v37 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v112 = String._bridgeToObjectiveC()();
      aBlock[0] = v111;
      v113 = sub_100004828((uint64_t *)&unk_10063E570);
      v114 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(aBlock, v113);
      -[NSObject postNotificationName:object:](v37, "postNotificationName:object:", v112, v114);
      swift_unknownObjectRelease(v114);

LABEL_50:
    }
    else
    {
      defaultLogger()(0);
      v102 = v131;
      v103 = swift_bridgeObjectRetain_n(v131, 2);
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.debug.getter(v104);
      if (os_log_type_enabled(v104, v105))
      {
        v106 = swift_slowAlloc(22, -1);
        v107 = swift_slowAlloc(64, -1);
        aBlock[0] = v107;
        *(_DWORD *)v106 = 136315394;
        swift_bridgeObjectRetain(v102);
        v146 = sub_1000E3AC8(v122, v102, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v106 + 4);
        swift_bridgeObjectRelease_n(v102, 3);
        *(_WORD *)(v106 + 12) = 2080;
        v108 = IdentityTarget.debugDescription.getter(v136);
        v110 = v109;
        v146 = sub_1000E3AC8(v108, v109, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v106 + 14);
        swift_bridgeObjectRelease(v110);
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "Stored proofing session doesnt exist for proofingSessionID: %s and target: %s", (uint8_t *)v106, 0x16u);
        swift_arrayDestroy(v107, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1, -1);
        swift_slowDealloc(v106, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v102, 2);
      }

      (*(void (**)(char *, uint64_t))(v137 + 8))(v24, v141);
    }
  }
}

uint64_t sub_1003C52BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_10063F5BC);
  *(_QWORD *)(v6 + 16) = v9;
  *v9 = v6;
  v9[1] = sub_10001D0A0;
  return sub_1003C5320(a5, a6);
}

uint64_t sub_1003C5320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100004828(&qword_100630A48) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  v3[13] = swift_task_alloc(v4);
  v5 = type metadata accessor for Logger(0);
  v3[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v7);
  v3[17] = swift_task_alloc(v7);
  v3[18] = swift_task_alloc(v7);
  v3[19] = swift_task_alloc(v7);
  v3[20] = swift_task_alloc(v7);
  v3[21] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003C5404, 0, 0);
}

uint64_t sub_1003C5404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v54;
  void *v55;
  unint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  NSString v85;
  NSString v86;
  NSString v87;
  unint64_t v88;
  void *v89;
  NSString v90;
  int v91;
  NSURL *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  id v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111[2];

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Watch only mode - will update status on the watch", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = (id *)(v1 + 64);
  v6 = *(void **)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 168);
  v9 = *(_QWORD *)(v1 + 112);
  v10 = *(_QWORD *)(v1 + 120);

  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(_QWORD *)(v1 + 176) = v11;
  v110 = v11;
  v11(v8, v9);
  v12 = objc_msgSend(v6, "state");
  if (!v12)
  {
    v33 = (uint64_t *)(v1 + 136);
    v34 = defaultLogger()(0);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_15;
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    v38 = "unable to update status on watch as state is nil";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v35, v36, v38, v37, 2u);
    swift_slowDealloc(v37, -1, -1);
    goto LABEL_15;
  }
  v13 = v12;
  v14 = *v7;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v17 = v16;

  v18 = objc_msgSend(v14, "country");
  if (!v18)
  {
    v33 = (uint64_t *)(v1 + 144);
    v39 = swift_bridgeObjectRelease(v17);
    v40 = defaultLogger()(v39);
    v35 = Logger.logObject.getter(v40);
    v36 = static os_log_type_t.debug.getter(v35);
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_15;
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    v38 = "unable to update status on watch as country is nil";
    goto LABEL_14;
  }
  v19 = v18;
  v20 = *(_QWORD *)(v1 + 72);
  v21 = *(_QWORD *)(v1 + 80);
  v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v23 = v22;

  v24 = IdentityProofingActionStatus.rawValue.getter(v20);
  v25 = *(void **)(v21 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener);
  *(_QWORD *)(v1 + 184) = v25;
  if (!v25)
  {
    v33 = (uint64_t *)(v1 + 152);
    swift_bridgeObjectRelease(v17);
    v41 = swift_bridgeObjectRelease(v23);
    v42 = defaultLogger()(v41);
    v35 = Logger.logObject.getter(v42);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      v38 = "unable to update status on watch as listener is nil";
      goto LABEL_14;
    }
LABEL_15:
    v43 = *v33;
    v44 = *(_QWORD *)(v1 + 112);

    v110(v43, v44);
    v45 = *(_QWORD *)(v1 + 160);
    v47 = *(_QWORD *)(v1 + 144);
    v46 = *(_QWORD *)(v1 + 152);
    v49 = *(_QWORD *)(v1 + 128);
    v48 = *(_QWORD *)(v1 + 136);
    v51 = *(_QWORD *)(v1 + 96);
    v50 = *(_QWORD *)(v1 + 104);
    v52 = *(_QWORD *)(v1 + 88);
    swift_task_dealloc(*(_QWORD *)(v1 + 168));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v26 = v24;
  v27 = *v7;
  v25;
  v28 = objc_msgSend(v27, "credentialIdentifier");
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0xE000000000000000;
  }
  v54 = objc_msgSend(*v7, "productIdentifier");
  v103 = v30;
  if (v54)
  {
    v55 = v54;
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v109 = v56;

  }
  else
  {
    v100 = 0;
    v109 = 0xE000000000000000;
  }
  v57 = objc_msgSend(*v7, "idType");
  v107 = v26;
  v104 = v15;
  if (v57)
  {
    v58 = v57;
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v61 = v60;

  }
  else
  {
    v59 = 0;
    v61 = 0;
  }
  v62 = *(_QWORD *)(v1 + 104);
  v63 = *(void **)(v1 + 64);
  v106 = sub_1003D67B8(v59, v61);
  swift_bridgeObjectRelease(v61);
  v64 = type metadata accessor for URL(0);
  v101 = *(_QWORD *)(v64 - 8);
  v102 = v64;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 56))(v62, 1, 1);
  v65 = objc_msgSend(v63, "extendedReviewURLString");
  if (v65)
  {
    v66 = v65;
    v68 = *(_QWORD *)(v1 + 96);
    v67 = *(_QWORD *)(v1 + 104);
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v70 = v23;
    v72 = v71;

    URL.init(string:)(v69, v72);
    v73 = v72;
    v23 = v70;
    swift_bridgeObjectRelease(v73);
    sub_100008030(v67, &qword_100630A48);
    v65 = (id)sub_1000A1F54(v68, v67, &qword_100630A48);
  }
  defaultLogger()(v65);
  swift_bridgeObjectRetain_n(v17, 2);
  swift_bridgeObjectRetain_n(v23, 2);
  swift_bridgeObjectRetain_n(v32, 2);
  v74 = v109;
  v75 = swift_bridgeObjectRetain_n(v109, 2);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.debug.getter(v76);
  v78 = os_log_type_enabled(v76, v77);
  v79 = *(_QWORD *)(v1 + 160);
  v80 = *(_QWORD *)(v1 + 112);
  if (v78)
  {
    v99 = *(_QWORD *)(v1 + 160);
    v105 = v23;
    v81 = swift_slowAlloc(62, -1);
    v98 = swift_slowAlloc(128, -1);
    v111[0] = v98;
    *(_DWORD *)v81 = 136316418;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v1 + 16) = sub_1000E3AC8(v104, v17, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v81 + 4);
    swift_bridgeObjectRelease_n(v17, 3);
    *(_WORD *)(v81 + 12) = 2080;
    swift_bridgeObjectRetain(v105);
    *(_QWORD *)(v1 + 24) = sub_1000E3AC8(v108, v105, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v81 + 14);
    swift_bridgeObjectRelease_n(v105, 3);
    *(_WORD *)(v81 + 22) = 2048;
    *(_QWORD *)(v1 + 32) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v81 + 24);
    *(_WORD *)(v81 + 32) = 2080;
    swift_bridgeObjectRetain(v32);
    *(_QWORD *)(v1 + 40) = sub_1000E3AC8(v103, v32, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v81 + 34);
    swift_bridgeObjectRelease_n(v32, 3);
    *(_WORD *)(v81 + 42) = 2080;
    swift_bridgeObjectRetain(v109);
    *(_QWORD *)(v1 + 48) = sub_1000E3AC8(v100, v109, v111);
    v74 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v81 + 44);
    swift_bridgeObjectRelease_n(v109, 3);
    *(_WORD *)(v81 + 52) = 2048;
    *(_QWORD *)(v1 + 56) = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v81 + 54);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "state %s country %s status %ld credentialIdentifier %s productIdentifier %s idType %ld", (uint8_t *)v81, 0x3Eu);
    swift_arrayDestroy(v98, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    v82 = v81;
    v23 = v105;
    swift_slowDealloc(v82, -1, -1);

    v110(v99, v80);
  }
  else
  {
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease_n(v109, 2);

    v110(v79, v80);
  }
  v83 = *(_QWORD *)(v1 + 88);
  sub_100038B24(*(_QWORD *)(v1 + 104), v83, &qword_100630A48);
  v84 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v86 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v87 = String._bridgeToObjectiveC()();
  v88 = v74;
  v89 = v87;
  swift_bridgeObjectRelease(v88);
  v90 = String._bridgeToObjectiveC()();
  v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v83, 1, v102);
  v93 = 0;
  if (v91 != 1)
  {
    v94 = *(_QWORD *)(v1 + 88);
    URL._bridgeToObjectiveC()(v92);
    v93 = v95;
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v94, v102);
  }
  v96 = objc_msgSend(objc_allocWithZone((Class)PKIdentityProofingConfiguration), "initWithState:country:target:credentialIdentifier:status:productIdentifier:accountKeyIdentifier:idType:learnMoreURL:", v84, v85, 2, v86, v107, v89, v90, v106, v93);
  *(_QWORD *)(v1 + 192) = v96;

  v97 = (_QWORD *)swift_task_alloc(dword_10063EC6C);
  *(_QWORD *)(v1 + 200) = v97;
  *v97 = v1;
  v97[1] = sub_1003C5D34;
  return sub_1003AE7C0((uint64_t)v96);
}

uint64_t sub_1003C5D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003C5E50;
  else
    v3 = sub_1003C5D98;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003C5D98()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 104);

  sub_100008030(v2, &qword_100630A48);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C5E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 208);
  v4 = *(void **)(v1 + 184);
  v3 = *(void **)(v1 + 192);
  v5 = *(void (**)(uint64_t, uint64_t))(v1 + 176);
  v6 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 112);
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v6);

  swift_errorRelease(v2);
  v5(v6, v7);
  sub_100008030(v8, &qword_100630A48);
  v9 = *(_QWORD *)(v1 + 160);
  v11 = *(_QWORD *)(v1 + 144);
  v10 = *(_QWORD *)(v1 + 152);
  v13 = *(_QWORD *)(v1 + 128);
  v12 = *(_QWORD *)(v1 + 136);
  v15 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 104);
  v16 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003C5F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5[91] = v4;
  v5[90] = a4;
  v5[89] = a3;
  v5[88] = a2;
  v5[87] = a1;
  v6 = type metadata accessor for DIPError(0);
  v5[92] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[93] = v7;
  v5[94] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v5[95] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[96] = v9;
  v5[97] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_100633958) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[98] = swift_task_alloc(v10);
  v5[99] = swift_task_alloc(v10);
  v5[100] = swift_task_alloc(v10);
  v5[101] = swift_task_alloc(v10);
  v11 = type metadata accessor for Logger(0);
  v5[102] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[103] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[104] = swift_task_alloc(v13);
  v5[105] = swift_task_alloc(v13);
  v5[106] = swift_task_alloc(v13);
  v5[107] = swift_task_alloc(v13);
  v5[108] = swift_task_alloc(v13);
  v5[109] = swift_task_alloc(v13);
  return swift_task_switch(sub_1003C6090, 0, 0);
}

uint64_t sub_1003C6090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  _BOOL4 v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _OWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, _QWORD, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;

  v2 = *(_QWORD *)(v1 + 712);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v187 = *(_QWORD *)(v1 + 816);
    v191 = *(_QWORD *)(v1 + 872);
    v181 = *(_QWORD *)(v1 + 720);
    v183 = *(_QWORD *)(v1 + 824);
    v6 = *(_QWORD *)(v1 + 712);
    v7 = *(_QWORD *)(v1 + 704);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v194 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 680) = sub_1000E3AC8(v7, v6, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 680, v1 + 688, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = IdentityTarget.debugDescription.getter(v181);
    v12 = v11;
    *(_QWORD *)(v1 + 688) = sub_1000E3AC8(v10, v11, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 688, v1 + 696, v8 + 14);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Start provisioning called for proofingSessionID: %s and target: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
    v13(v191, v187);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 872);
    v15 = *(_QWORD *)(v1 + 824);
    v16 = *(_QWORD *)(v1 + 816);
    v17 = *(_QWORD *)(v1 + 712);

    swift_bridgeObjectRelease_n(v17, 2);
    v13 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v13(v14, v16);
  }
  *(_QWORD *)(v1 + 880) = v13;
  v18 = *(_QWORD *)(v1 + 808);
  v19 = *(_QWORD *)(v1 + 696);
  sub_1003C7974(*(_QWORD *)(v1 + 704), *(_QWORD *)(v1 + 712), v19);
  sub_100038B24(v19, v18, (uint64_t *)&unk_100633958);
  v20 = type metadata accessor for PendingActionContext(0);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
  v22 = v21(v18, 1, v20);
  v23 = *(uint64_t **)(v1 + 808);
  v192 = v13;
  if (v22 == 1)
  {
    sub_100008030((uint64_t)v23, (uint64_t *)&unk_100633958);
LABEL_9:
    v29 = *(_QWORD *)(v1 + 776);
    v30 = *(_QWORD *)(v1 + 736);
    v184 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 768) + 104);
    v184(v29, enum case for DIPError.Code.provisioningCredentialIdentifierUnavailable(_:), *(_QWORD *)(v1 + 760));
    v31 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100007F30();
    v33 = swift_allocError(v30, v32, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010055ECA0, 0, v29, 0, v31, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055ECE0, 322);
    goto LABEL_21;
  }
  v25 = *v23;
  v24 = v23[1];
  swift_bridgeObjectRetain(v24);
  sub_100035DAC((uint64_t)v23, type metadata accessor for PendingActionContext);
  if (!v24)
    goto LABEL_9;
  v26 = *(_QWORD *)(v1 + 800);
  sub_100038B24(*(_QWORD *)(v1 + 696), v26, (uint64_t *)&unk_100633958);
  v27 = v21(v26, 1, v20);
  v28 = *(_QWORD *)(v1 + 800);
  if (v27 == 1)
  {
    swift_bridgeObjectRelease(v24);
    sub_100008030(v28, (uint64_t *)&unk_100633958);
LABEL_14:
    v39 = *(_QWORD *)(v1 + 776);
    v40 = *(_QWORD *)(v1 + 736);
    v184 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 768) + 104);
    v184(v39, enum case for DIPError.Code.targetInstanceIdentifierUnavailable(_:), *(_QWORD *)(v1 + 760));
    v41 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100007F30();
    v33 = swift_allocError(v40, v42, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x800000010055ED10, 0, v39, 0, v41, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055ECE0, 326);
    goto LABEL_21;
  }
  v185 = *(_QWORD *)(v28 + 16);
  v188 = v25;
  v35 = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRetain(v35);
  sub_100035DAC(v28, type metadata accessor for PendingActionContext);
  if (!v35)
  {
    swift_bridgeObjectRelease(v24);
    goto LABEL_14;
  }
  v36 = *(_QWORD *)(v1 + 792);
  sub_100038B24(*(_QWORD *)(v1 + 696), v36, (uint64_t *)&unk_100633958);
  v37 = v21(v36, 1, v20);
  v38 = *(_QWORD *)(v1 + 792);
  if (v37 == 1)
  {
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v35);
    sub_100008030(v38, (uint64_t *)&unk_100633958);
LABEL_20:
    v49 = *(_QWORD *)(v1 + 776);
    v50 = *(_QWORD *)(v1 + 736);
    v184 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 768) + 104);
    v184(v49, enum case for DIPError.Code.parterSchemeIdentifierUnavailable(_:), *(_QWORD *)(v1 + 760));
    v51 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100007F30();
    v33 = swift_allocError(v50, v52, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x800000010055ED50, 0, v49, 0, v51, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055ECE0, 330);
    goto LABEL_21;
  }
  v180 = *(_QWORD *)(v38 + 32);
  v182 = v35;
  v43 = *(_QWORD *)(v38 + 40);
  swift_bridgeObjectRetain(v43);
  sub_100035DAC(v38, type metadata accessor for PendingActionContext);
  if (!v43)
  {
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v182);
    goto LABEL_20;
  }
  v178 = (_OWORD *)(v1 + 544);
  v44 = *(_QWORD *)(v1 + 720);
  *(_QWORD *)(v1 + 544) = v188;
  *(_QWORD *)(v1 + 552) = v24;
  *(_QWORD *)(v1 + 560) = v185;
  *(_QWORD *)(v1 + 568) = v182;
  *(_QWORD *)(v1 + 576) = v180;
  *(_QWORD *)(v1 + 584) = v43;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v182);
  swift_bridgeObjectRetain(v43);
  v45 = IdentityTarget.rawValue.getter(v44);
  v46 = IdentityTarget.rawValue.getter(1);
  v47 = *(_QWORD *)(v1 + 704);
  if (v45 != v46)
  {
    v78 = *(_QWORD *)(v1 + 712);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v24);
    sub_1003D6AB0(v47, v78, 2, v178, (uint64_t *)(v1 + 168));
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v24);
    sub_1000A1F54(v1 + 168, v1 + 248, &qword_10063F970);
    v79 = *(_QWORD *)(v1 + 256);
    if (v79 != 1)
    {
      v80 = *(_QWORD *)(v1 + 248);
      v81 = *(_QWORD *)(v1 + 272);
      v82 = *(_QWORD *)(v1 + 288);
      v83 = *(_QWORD *)(v1 + 304);
      v84 = *(_QWORD *)(v1 + 312);
      v85 = *(_QWORD *)(v1 + 320);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      sub_100028034(v84, v85);
      sub_100007F78(v84, v85);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v83);
      if (v79)
      {
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v81);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v83);
        sub_100028034(v84, v85);
        sub_100007F78(v84, v85);
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v83);
        if (v81)
        {
          swift_bridgeObjectRelease(v81);
          v86 = sub_1002328C0();
          sub_100230E84(v80, v79);
          swift_bridgeObjectRelease(v79);
          swift_release(v86);
          sub_1003D99B0((_QWORD *)(v1 + 168), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
          v68 = *(_QWORD *)(v1 + 864);
          v69 = *(_QWORD *)(v1 + 856);
          v70 = *(_QWORD *)(v1 + 848);
          v71 = *(_QWORD *)(v1 + 840);
          v72 = *(_QWORD *)(v1 + 832);
          v73 = *(_QWORD *)(v1 + 808);
          v74 = *(_QWORD *)(v1 + 800);
          v75 = *(_QWORD *)(v1 + 792);
          v76 = *(_QWORD *)(v1 + 784);
          v189 = *(_QWORD *)(v1 + 776);
          v193 = *(_QWORD *)(v1 + 752);
          swift_task_dealloc(*(_QWORD *)(v1 + 872));
          swift_task_dealloc(v68);
          swift_task_dealloc(v69);
          swift_task_dealloc(v70);
          swift_task_dealloc(v71);
          swift_task_dealloc(v72);
          swift_task_dealloc(v73);
          swift_task_dealloc(v74);
          swift_task_dealloc(v75);
          swift_task_dealloc(v76);
          swift_task_dealloc(v189);
          swift_task_dealloc(v193);
          return (*(uint64_t (**)(void))(v1 + 8))();
        }
        swift_bridgeObjectRelease(v79);
      }
      sub_1003D99B0((_QWORD *)(v1 + 168), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
    }
    v105 = *(_QWORD *)(v1 + 776);
    v106 = *(_QWORD *)(v1 + 768);
    v107 = *(_QWORD *)(v1 + 760);
    v108 = *(_QWORD *)(v1 + 736);
    v109 = *(void **)(v1 + 712);
    v110 = *(_QWORD *)(v1 + 704);
    v194 = 0;
    v195 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v111._countAndFlagsBits = 0xD000000000000032;
    v111._object = (void *)0x800000010055ED90;
    String.append(_:)(v111);
    v112._countAndFlagsBits = v110;
    v112._object = v109;
    String.append(_:)(v112);
    v113 = v194;
    v114 = v195;
    v184 = *(void (**)(uint64_t, _QWORD, uint64_t))(v106 + 104);
    v184(v105, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v107);
    v115 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v116 = sub_100007F30();
    v33 = swift_allocError(v108, v116, 0, 0);
    v117 = 385;
LABEL_41:
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v113, v114, 0, v105, 0, v115, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055ECE0, v117);
LABEL_21:
    v53 = *(_QWORD *)(v1 + 776);
    v54 = *(_QWORD *)(v1 + 760);
    v55 = *(_QWORD *)(v1 + 728);
    swift_willThrow(v34);
    v56 = sub_100004828((uint64_t *)&unk_1006325A0);
    v57 = sub_100004828((uint64_t *)&unk_100633440);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(_QWORD *)(v58 + 72);
    v60 = *(unsigned __int8 *)(v58 + 80);
    v61 = (v60 + 32) & ~v60;
    v62 = swift_allocObject(v56, v61 + v59, v60 | 7);
    *(_OWORD *)(v62 + 16) = xmmword_10051FFB0;
    v63 = v62 + v61;
    v64 = (_QWORD *)(v63 + *(int *)(v57 + 48));
    v65 = enum case for DIPError.PropertyKey.inoProviderID(_:);
    v66 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v63, v65, v66);
    v64[3] = &type metadata for String;
    *v64 = 0x61746E6567616DLL;
    v64[1] = 0xE700000000000000;
    v67 = sub_10011D314(v62);
    v184(v53, enum case for DIPError.Code.internalError(_:), v54);
    swift_errorRetain(v33);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v33, v53, 0, v67, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055ECE0, 398);
    __asm { BR              X10 }
  }
  sub_1003D6AB0(*(_QWORD *)(v1 + 704), *(_QWORD *)(v1 + 712), 1, v178, (uint64_t *)(v1 + 408));
  v170 = *(_QWORD *)(v1 + 416);
  v171 = *(_QWORD *)(v1 + 432);
  v169 = *(_QWORD *)(v1 + 464);
  v174 = *(_QWORD *)(v1 + 472);
  v172 = *(_QWORD *)(v1 + 448);
  v173 = *(_QWORD *)(v1 + 480);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v182);
  swift_bridgeObjectRelease(v24);
  v177 = (_QWORD *)(v1 + 408);
  sub_1000A1F54(v1 + 408, v1 + 328, &qword_10063F970);
  v48 = *(_QWORD *)(v1 + 336);
  if (v48 == 1)
  {
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v24);
LABEL_40:
    v105 = *(_QWORD *)(v1 + 776);
    v118 = *(_QWORD *)(v1 + 768);
    v119 = *(_QWORD *)(v1 + 760);
    v120 = *(_QWORD *)(v1 + 736);
    v121 = *(void **)(v1 + 712);
    v122 = *(_QWORD *)(v1 + 704);
    v194 = 0;
    v195 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v123._countAndFlagsBits = 0xD000000000000032;
    v123._object = (void *)0x800000010055EDD0;
    String.append(_:)(v123);
    v124._countAndFlagsBits = v122;
    v124._object = v121;
    String.append(_:)(v124);
    v113 = v194;
    v114 = v195;
    v184 = *(void (**)(uint64_t, _QWORD, uint64_t))(v118 + 104);
    v184(v105, enum case for DIPError.Code.proofingSessionDoesntExist(_:), v119);
    v115 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v125 = sub_100007F30();
    v33 = swift_allocError(v120, v125, 0, 0);
    v117 = 340;
    goto LABEL_41;
  }
  v165 = *(_QWORD *)(v1 + 328);
  v166 = v43;
  v87 = *(_QWORD *)(v1 + 352);
  v175 = *(_QWORD *)(v1 + 368);
  v88 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)(v1 + 888) = *(_QWORD *)(v1 + 376);
  v179 = v48;
  v90 = *(_QWORD *)(v1 + 392);
  v89 = *(_QWORD *)(v1 + 400);
  *(_QWORD *)(v1 + 896) = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v175);
  sub_100028034(v90, v89);
  v167 = v90;
  v168 = v89;
  sub_100007F78(v90, v89);
  v176 = v87;
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v175);
  swift_bridgeObjectRelease(v88);
  if (!v48)
  {
    swift_bridgeObjectRelease(v166);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v24);
    v104 = (_QWORD *)(v1 + 408);
LABEL_39:
    sub_1003D99B0(v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
    goto LABEL_40;
  }
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v175);
  swift_bridgeObjectRetain(v88);
  sub_100028034(v90, v89);
  sub_100007F78(v90, v89);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v175);
  v164 = v88;
  swift_bridgeObjectRelease(v88);
  v91 = (_QWORD *)(v1 + 408);
  if (!v87)
  {
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v166);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v24);
    v104 = (_QWORD *)(v1 + 408);
    goto LABEL_39;
  }
  v92 = *(_QWORD *)(v1 + 728);
  swift_bridgeObjectRelease(v176);
  v93 = *(id *)(v92 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo);
  v94 = sub_10041FFC0();
  v96 = v95;
  sub_1001070C4(v94, v95);
  if (v96 == 1)
    sub_1004218D4();
  v97 = sub_10041FFC0();
  v99 = v98;

  if (v99 < 2)
  {
    sub_1001070C4(v97, v99);
    v97 = 0;
    v99 = 0xE000000000000000;
  }
  v100 = *(_QWORD *)(v1 + 784);
  sub_100038B24(*(_QWORD *)(v1 + 696), v100, (uint64_t *)&unk_100633958);
  v101 = v21(v100, 1, v20);
  v102 = *(_QWORD *)(v1 + 784);
  if (v101 == 1)
  {
    swift_bridgeObjectRelease(v99);
    v103 = sub_100008030(v102, (uint64_t *)&unk_100633958);
LABEL_49:
    v131 = 0;
    v130 = 0;
    v132 = 0xF000000000000000;
    v163 = 1;
    goto LABEL_50;
  }
  v126 = *(_QWORD *)(v102 + *(int *)(v20 + 76));
  swift_bridgeObjectRetain(v126);
  sub_100035DAC(v102, type metadata accessor for PendingActionContext);
  if (!v126)
  {
    v133 = v99;
    goto LABEL_48;
  }
  if (!*(_QWORD *)(v126 + 16) || (v127 = sub_1004A8604(v97, v99), (v128 & 1) == 0))
  {
    swift_bridgeObjectRelease(v99);
    v133 = v126;
LABEL_48:
    v103 = swift_bridgeObjectRelease(v133);
    goto LABEL_49;
  }
  v129 = (uint64_t *)(*(_QWORD *)(v126 + 56) + 24 * v127);
  v131 = *v129;
  v130 = v129[1];
  v132 = v129[2];
  sub_100022948(v130, v132);
  swift_bridgeObjectRelease(v99);
  v103 = swift_bridgeObjectRelease(v126);
  v163 = v131;
LABEL_50:
  v134 = v132;
  *(_QWORD *)(v1 + 920) = v132;
  v135 = v130;
  *(_QWORD *)(v1 + 912) = v130;
  *(_QWORD *)(v1 + 904) = v131;
  defaultLogger()(v103);
  swift_bridgeObjectRetain(v169);
  swift_bridgeObjectRetain(v170);
  swift_bridgeObjectRetain(v171);
  swift_bridgeObjectRetain(v172);
  v136 = sub_100028034(v174, v173);
  v137 = Logger.logObject.getter(v136);
  v138 = static os_log_type_t.debug.getter(v137);
  if (os_log_type_enabled(v137, v138))
  {
    v139 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v139 = 67109120;
    v91 = (_QWORD *)(v1 + 408);
    *(_DWORD *)(v1 + 960) = v168 >> 60 != 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 960, v1 + 964, v139 + 4);
    sub_1003D99B0(v177, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
    _os_log_impl((void *)&_mh_execute_header, v137, v138, "supplementalProvisioningData for phone exists ->%{BOOL}d", v139, 8u);
    swift_slowDealloc(v139, -1, -1);
  }
  else
  {
    sub_1003D99B0(v177, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
  }
  v140 = *(_QWORD *)(v1 + 864);
  v141 = *(_QWORD *)(v1 + 816);

  v192(v140, v141);
  if (v134 >> 60 == 15)
    v142 = 0;
  else
    v142 = v135;
  if (v134 >> 60 == 15)
    v143 = 0xF000000000000000;
  else
    v143 = v134;
  sub_1003D99B0(v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D99FC);
  sub_1003D9A68(v131, v135, v134);
  swift_bridgeObjectRelease(v179);
  swift_bridgeObjectRelease(v176);
  swift_bridgeObjectRelease(v175);
  swift_bridgeObjectRelease(v164);
  if (qword_10062F478 != -1)
    swift_once(&qword_10062F478, sub_1000DECC0);
  v144 = *(_QWORD *)(v1 + 712);
  v145 = *(void **)(qword_100670250 + 16);
  *(_QWORD *)(v1 + 152) = sub_1003D9A84();
  *(_QWORD *)(v1 + 160) = &off_100616D98;
  *(_QWORD *)(v1 + 128) = v145;
  *(_QWORD *)(v1 + 16) = v165;
  *(_QWORD *)(v1 + 24) = v179;
  *(_QWORD *)(v1 + 32) = v188;
  *(_QWORD *)(v1 + 40) = v24;
  *(_QWORD *)(v1 + 48) = v180;
  *(_QWORD *)(v1 + 56) = v166;
  *(_QWORD *)(v1 + 64) = v185;
  *(_QWORD *)(v1 + 72) = v182;
  *(_QWORD *)(v1 + 80) = v163;
  *(_BYTE *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = v142;
  *(_QWORD *)(v1 + 104) = v143;
  *(_QWORD *)(v1 + 112) = v167;
  *(_QWORD *)(v1 + 120) = v168;
  *(_QWORD *)(v1 + 616) = &type metadata for IdentityPhoneProvisioningProvider;
  *(_QWORD *)(v1 + 624) = &off_1006085D0;
  v146 = swift_allocObject(&unk_100616500, 168, 7);
  *(_QWORD *)(v1 + 592) = v146;
  sub_1003D9B34(v1 + 16, v146 + 16);
  v147 = type metadata accessor for IdentityProvisioningManager();
  *(_QWORD *)(v1 + 928) = swift_initStackObject(v147, v1 + 488);
  v148 = v145;
  v149 = sub_1004187E8(v1 + 592);
  *(_QWORD *)(v1 + 936) = v149;
  defaultLogger()(v149);
  v150 = swift_bridgeObjectRetain_n(v144, 2);
  v151 = Logger.logObject.getter(v150);
  v152 = static os_log_type_t.default.getter();
  v153 = os_log_type_enabled(v151, v152);
  v154 = *(_QWORD *)(v1 + 856);
  v155 = *(_QWORD *)(v1 + 816);
  v156 = *(_QWORD *)(v1 + 712);
  if (v153)
  {
    v157 = *(_QWORD *)(v1 + 704);
    v190 = *(_QWORD *)(v1 + 816);
    v158 = (uint8_t *)swift_slowAlloc(12, -1);
    v186 = v154;
    v159 = swift_slowAlloc(32, -1);
    v194 = v159;
    *(_DWORD *)v158 = 136315138;
    swift_bridgeObjectRetain(v156);
    *(_QWORD *)(v1 + 672) = sub_1000E3AC8(v157, v156, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 672, v1 + 680, v158 + 4);
    swift_bridgeObjectRelease_n(v156, 3);
    _os_log_impl((void *)&_mh_execute_header, v151, v152, "Trying to provision phone with proofingSessionID: %s", v158, 0xCu);
    swift_arrayDestroy(v159, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v159, -1, -1);
    swift_slowDealloc(v158, -1, -1);

    v160 = v186;
    v161 = v190;
  }
  else
  {

    swift_bridgeObjectRelease_n(v156, 2);
    v160 = v154;
    v161 = v155;
  }
  v192(v160, v161);
  v162 = (_QWORD *)swift_task_alloc(dword_1006409BC);
  *(_QWORD *)(v1 + 944) = v162;
  *v162 = v1;
  v162[1] = sub_1003C7484;
  return sub_100418A1C();
}

uint64_t sub_1003C7484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 944);
  *(_QWORD *)(*(_QWORD *)v1 + 952) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003C7730;
  else
    v3 = sub_1003C74E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003C74E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 728)
                 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider);
  v2 = swift_retain(v1);
  v3 = defaultLogger()(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempting to clear the user notifications after provisioning completion", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 920);
  v25 = *(_QWORD *)(v0 + 904);
  v8 = *(_QWORD *)(v0 + 896);
  v9 = *(_QWORD *)(v0 + 888);
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
  v11 = *(_QWORD *)(v0 + 848);
  v12 = *(_QWORD *)(v0 + 816);

  v10(v11, v12);
  sub_10002581C(v1 + 16, v0 + 632);
  v13 = *(_QWORD *)(v0 + 656);
  v14 = *(_QWORD *)(v0 + 664);
  sub_10000806C((_QWORD *)(v0 + 632), v13);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)(uint64_t), _QWORD, uint64_t, uint64_t))(v14 + 8))(v9, v8, 0, 0, 0, 0, 0, sub_100449354, 0, v13, v14);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 632));
  swift_release(v1);
  swift_release(v7);
  sub_1003D9B70(v25, v26, v27);
  sub_1003D99B0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
  sub_1003D9B8C((_QWORD *)(v0 + 16));
  v15 = *(_QWORD *)(v0 + 864);
  v16 = *(_QWORD *)(v0 + 856);
  v17 = *(_QWORD *)(v0 + 848);
  v18 = *(_QWORD *)(v0 + 840);
  v19 = *(_QWORD *)(v0 + 832);
  v20 = *(_QWORD *)(v0 + 808);
  v21 = *(_QWORD *)(v0 + 800);
  v22 = *(_QWORD *)(v0 + 792);
  v23 = *(_QWORD *)(v0 + 784);
  v28 = *(_QWORD *)(v0 + 776);
  v29 = *(_QWORD *)(v0 + 752);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C7730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = swift_errorRetain(*(_QWORD *)(v0 + 952));
  v2 = defaultLogger()(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received a terminal state error from Wallet. Will clear the proofing session data", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 952);
  v28 = *(_QWORD *)(v0 + 912);
  v29 = *(_QWORD *)(v0 + 920);
  v26 = *(_QWORD *)(v0 + 936);
  v27 = *(_QWORD *)(v0 + 904);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 880);
  v8 = *(_QWORD *)(v0 + 840);
  v9 = *(_QWORD *)(v0 + 832);
  v10 = *(_QWORD *)(v0 + 816);
  v11 = *(_QWORD *)(v0 + 728);
  v12 = *(_QWORD *)(v0 + 712);
  v13 = *(_QWORD *)(v0 + 704);

  v14 = v7(v8, v10);
  defaultLogger()(v14);
  DIPRecordError(_:message:log:)(v6, 0, 0xE000000000000000, v9);
  v7(v9, v10);
  v15 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_cleanupProvider);
  swift_retain(v15);
  sub_100395A68(v13, v12, 0, 0, 0, 1);
  swift_release(v15);
  swift_errorRelease(v6);
  swift_release(v26);
  sub_1003D9B70(v27, v28, v29);
  sub_1003D99B0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9944);
  swift_errorRelease(v6);
  sub_1003D9B8C((_QWORD *)(v0 + 16));
  v16 = *(_QWORD *)(v0 + 864);
  v17 = *(_QWORD *)(v0 + 856);
  v18 = *(_QWORD *)(v0 + 848);
  v19 = *(_QWORD *)(v0 + 840);
  v20 = *(_QWORD *)(v0 + 832);
  v21 = *(_QWORD *)(v0 + 808);
  v22 = *(_QWORD *)(v0 + 800);
  v23 = *(_QWORD *)(v0 + 792);
  v24 = *(_QWORD *)(v0 + 784);
  v30 = *(_QWORD *)(v0 + 776);
  v31 = *(_QWORD *)(v0 + 752);
  swift_task_dealloc(*(_QWORD *)(v0 + 872));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C7974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a2;
  v38 = a1;
  v4 = sub_100004828((uint64_t *)&unk_100633958);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v37 - v14;
  v16 = defaultLogger()(v13);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v37[1] = v12;
    v20 = v6;
    v21 = v8;
    v22 = v7;
    v23 = v5;
    v24 = a3;
    v25 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Will attempt to store the provisioning data in case there is a provisioning failure.", v19, 2u);
    v26 = v25;
    a3 = v24;
    v5 = v23;
    v7 = v22;
    v8 = v21;
    v6 = v20;
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  v27 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v27, 24, 7);
  sub_1000D6044();
  v29 = v28;
  sub_100038B24(a3, (uint64_t)v7, (uint64_t *)&unk_100633958);
  v30 = *(unsigned __int8 *)(v5 + 80);
  v31 = (v30 + 48) & ~v30;
  v32 = (_QWORD *)swift_allocObject(&unk_100616348, v31 + v6, v30 | 7);
  v33 = v38;
  v34 = v39;
  v32[2] = v29;
  v32[3] = v33;
  v35 = v40;
  v32[4] = v34;
  v32[5] = v35;
  sub_1000A1F54((uint64_t)v7, (uint64_t)v32 + v31, (uint64_t *)&unk_100633958);
  swift_retain(v29);
  swift_bridgeObjectRetain(v34);
  swift_retain(v35);
  sub_1000D6570((uint64_t)sub_1003D6720, (uint64_t)v32);
  swift_release(v29);
  return swift_release(v32);
}

void sub_1003C7C00(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t (*v52)(char *, uint64_t);
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  void **v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint8_t *v76;
  char *v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  uint8_t *v104;
  NSObject *v105;
  uint64_t v106;
  Swift::String v107;
  Swift::String v108;
  void **v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  NSObject *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void **aBlock;
  unint64_t v162;
  uint64_t (*v163)(uint64_t);
  void *v164;
  id (*v165)();
  uint64_t v166;
  __int128 v167;
  int v168;
  char v169;

  v160 = a1;
  v153 = a5;
  v151 = a4;
  v144 = type metadata accessor for DispatchQoS(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for DispatchWorkItemFlags(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004828((uint64_t *)&unk_100633958);
  v130 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v131 = v10;
  v132 = (uint64_t)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Logger(0);
  v158 = *(_QWORD *)(v152 - 8);
  v11 = __chkstk_darwin(v152);
  v138 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v145 = (char *)&v128 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v128 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v128 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v128 - v21;
  v23 = type metadata accessor for DIPError.Code(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v159;
  sub_1000D69B0(a2, (uint64_t)a3);
  if (!v27)
  {
    v157 = v24;
    v159 = v23;
    v160 = v26;
    v129 = a3;
    v149 = v20;
    v150 = a2;
    v154 = v22;
    v148 = v17;
    if (v28)
    {
      v29 = v28;
      v30 = v28 & 0xFFFFFFFFFFFFFF8;
      v31 = v150;
      if (v28 >> 62)
        goto LABEL_49;
      v32 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        v33 = v151;
        v34 = v152;
        v35 = v158;
        v37 = v153;
        v36 = v154;
        if (!v32)
          break;
        v128 = v27;
        v136 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_deviceInfo;
        v157 = v29 & 0xC000000000000001;
        v38 = 4;
        v135 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_watchListener;
        *((_QWORD *)&v39 + 1) = 1;
        v146 = xmmword_100520950;
        *(_QWORD *)&v39 = 136315138;
        v134 = v39;
        v133 = (char *)&type metadata for Any + 8;
        v156 = v32;
        v147 = v29;
        while (1)
        {
          v40 = v38 - 4;
          v160 = (char *)v38;
          v41 = v157
              ? specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v29)
              : *(id *)(v29 + 8 * v38);
          v42 = v41;
          v30 = v40 + 1;
          if (__OFADD__(v40, 1))
            break;
          v159 = v40 + 1;
          v43 = IdentityTarget.init(rawValue:)(-[NSObject target](v41, "target"));
          if ((v44 & 1) != 0)
          {
            defaultLogger()(v43);
            v61 = v42;
            v62 = Logger.logObject.getter(v61);
            v63 = static os_log_type_t.debug.getter(v62);
            if (os_log_type_enabled(v62, v63))
            {
              v64 = swift_slowAlloc(12, -1);
              v65 = (void **)swift_slowAlloc(32, -1);
              aBlock = v65;
              *(_DWORD *)v64 = v134;
              v66 = -[NSObject proofingSessionID](v61, "proofingSessionID");
              if (v66)
              {
                v67 = v66;
                v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
                v70 = v69;

              }
              else
              {
                v68 = 0;
                v70 = 0xE000000000000000;
              }
              *(_QWORD *)(v64 + 4) = sub_1000E3AC8(v68, v70, (uint64_t *)&aBlock);
              swift_bridgeObjectRelease(v70);

              _os_log_impl((void *)&_mh_execute_header, v62, v63, "unable to retrieve the target information from the proofing session with proofingSessionID -> %s", (uint8_t *)v64, 0xCu);
              swift_arrayDestroy(v65, 1, v133);
              swift_slowDealloc(v65, -1, -1);
              swift_slowDealloc(v64, -1, -1);

              v35 = v158;
              v36 = v154;
              v34 = v152;
              (*(void (**)(char *, uint64_t))(v158 + 8))(v154, v152);
              v31 = v150;
              v33 = v151;
              v37 = v153;
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
            }
            v29 = v147;
          }
          else
          {
            v45 = IdentityTarget.rawValue.getter(v43);
            v46 = IdentityTarget.rawValue.getter(2);
            v155 = v42;
            if (v45 == v46)
            {
              v47 = defaultLogger()(v46);
              v48 = Logger.logObject.getter(v47);
              v49 = static os_log_type_t.debug.getter(v48);
              if (os_log_type_enabled(v48, v49))
              {
                v50 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v50 = 0;
                _os_log_impl((void *)&_mh_execute_header, v48, v49, "Attempting to store the provisioning information for the watch target", v50, 2u);
                v51 = v50;
                v35 = v158;
                swift_slowDealloc(v51, -1, -1);
              }

              v52 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
              v53 = v52(v149, v34);
              v54 = *(void **)(v33 + v135);
              if (v54)
              {
                v116 = v54;
                swift_bridgeObjectRelease(v29);
                v117 = v37;
                v118 = v132;
                sub_100038B24(v117, v132, (uint64_t *)&unk_100633958);
                v119 = *(unsigned __int8 *)(v130 + 80);
                v120 = (v119 + 32) & ~v119;
                v121 = (v131 + v120 + 7) & 0xFFFFFFFFFFFFFFF8;
                v122 = swift_allocObject(&unk_1006164B0, v121 + 16, v119 | 7);
                *(_QWORD *)(v122 + 16) = v116;
                *(_QWORD *)(v122 + 24) = v33;
                sub_1000A1F54(v118, v122 + v120, (uint64_t *)&unk_100633958);
                v123 = (uint64_t *)(v122 + v121);
                v124 = (uint64_t)v129;
                *v123 = v31;
                v123[1] = v124;
                v125 = v116;
                swift_retain(v33);
                swift_bridgeObjectRetain(v124);
                runAsyncAndBlock<A>(timeout:file:function:line:_:)(0, 1, 0xD000000000000031, 0x800000010055EA10, 0xD000000000000047, 0x800000010055EC50, 430, &unk_10063F968, v122, (char *)&type metadata for () + 8);

                swift_release(v122);
                return;
              }
              v55 = defaultLogger()(v53);
              v56 = Logger.logObject.getter(v55);
              v57 = static os_log_type_t.debug.getter(v56);
              if (os_log_type_enabled(v56, v57))
              {
                v58 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v58 = 0;
                _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to retrieve watch listener. Cannot Store watch provisioning data.", v58, 2u);
                v59 = v58;
                v35 = v158;
                swift_slowDealloc(v59, -1, -1);
                v60 = v155;
              }
              else
              {
                v60 = v56;
                v56 = v155;
              }

              v52(v148, v34);
            }
            else
            {
              v71 = v145;
              v72 = defaultLogger()(v46);
              v73 = Logger.logObject.getter(v72);
              v74 = static os_log_type_t.debug.getter(v73);
              if (os_log_type_enabled(v73, v74))
              {
                v75 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v75 = 0;
                _os_log_impl((void *)&_mh_execute_header, v73, v74, "Attempting to store the provisioning information for the phone target", v75, 2u);
                v76 = v75;
                v35 = v158;
                swift_slowDealloc(v76, -1, -1);
              }

              v137 = *(void (**)(char *, uint64_t))(v35 + 8);
              v137(v71, v34);
              v77 = *(char **)(v33 + v136);
              v167 = v146;
              v169 = 0;
              v168 = 0;
              v31 = OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue;
              v78 = *(NSObject **)&v77[OBJC_IVAR____TtC8coreidvd13DIPDeviceInfo_seInfoQueue];
              v79 = swift_allocObject(&unk_100616370, 32, 7);
              *(_QWORD *)(v79 + 16) = &v167;
              *(_QWORD *)(v79 + 24) = v77;
              v80 = swift_allocObject(&unk_100616398, 32, 7);
              *(_QWORD *)(v80 + 16) = sub_1003D6790;
              *(_QWORD *)(v80 + 24) = v79;
              v165 = (id (*)())sub_1001AEFEC;
              v166 = v80;
              aBlock = _NSConcreteStackBlock;
              v162 = 1107296256;
              v163 = sub_100026DC8;
              v164 = &unk_1006163B0;
              v81 = _Block_copy(&aBlock);
              v82 = v166;
              v83 = v77;
              swift_retain(v80);
              swift_release(v82);
              dispatch_sync(v78, v81);
              _Block_release(v81);
              LOBYTE(v78) = swift_isEscapingClosureAtFileLocation(v80, "", 80, 68, 26, 1);
              swift_release(v80);
              if ((v78 & 1) != 0)
                goto LABEL_47;
              v84 = v167;
              swift_release(v79);
              v85 = sub_1001070C4(v84, *((uint64_t *)&v84 + 1));
              if (*((_QWORD *)&v84 + 1) == 1)
              {
                v86 = v139;
                static DispatchWorkItemFlags.barrier.getter(v85);
                v87 = swift_allocObject(&unk_100616460, 24, 7);
                *(_QWORD *)(v87 + 16) = v83;
                v165 = sub_1003D7D3C;
                v166 = v87;
                aBlock = _NSConcreteStackBlock;
                v162 = 1107296256;
                v163 = sub_1004AB190;
                v164 = &unk_100616478;
                v88 = _Block_copy(&aBlock);
                v89 = v83;
                v90 = v142;
                static DispatchQoS.unspecified.getter(v89);
                OS_dispatch_queue.async(group:qos:flags:execute:)(0, v90, v86, v88);
                _Block_release(v88);
                (*(void (**)(char *, uint64_t))(v143 + 8))(v90, v144);
                (*(void (**)(char *, uint64_t))(v140 + 8))(v86, v141);
                swift_release(v166);
              }
              v167 = v146;
              v169 = 0;
              v168 = 0;
              v91 = *(NSObject **)&v77[v31];
              v92 = swift_allocObject(&unk_1006163E8, 32, 7);
              *(_QWORD *)(v92 + 16) = &v167;
              *(_QWORD *)(v92 + 24) = v83;
              v93 = swift_allocObject(&unk_100616410, 32, 7);
              *(_QWORD *)(v93 + 16) = sub_1003D9EBC;
              *(_QWORD *)(v93 + 24) = v92;
              v165 = (id (*)())sub_1001AEFEC;
              v166 = v93;
              aBlock = _NSConcreteStackBlock;
              v162 = 1107296256;
              v163 = sub_100026DC8;
              v164 = &unk_100616428;
              v94 = _Block_copy(&aBlock);
              v95 = v166;
              v96 = v83;
              swift_retain(v93);
              swift_release(v95);
              dispatch_sync(v91, v94);
              _Block_release(v94);
              LOBYTE(v91) = swift_isEscapingClosureAtFileLocation(v93, "", 80, 68, 26, 1);
              swift_release(v93);
              if ((v91 & 1) != 0)
                goto LABEL_48;
              v97 = v167;
              swift_release(v92);

              if (*((_QWORD *)&v97 + 1) >= 2uLL)
              {
                v106 = v153;
                v31 = v150;
                sub_1003D7444(v97, *((unint64_t *)&v97 + 1), v153, 1, v150, (uint64_t)v129);
                v37 = v106;
                sub_1001070C4(v97, *((uint64_t *)&v97 + 1));

                v33 = v151;
                v34 = v152;
                v35 = v158;
              }
              else
              {
                v99 = v138;
                v100 = defaultLogger()(v98);
                v101 = Logger.logObject.getter(v100);
                v102 = static os_log_type_t.debug.getter(v101);
                v103 = os_log_type_enabled(v101, v102);
                v34 = v152;
                v37 = v153;
                if (v103)
                {
                  v104 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v104 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v101, v102, "Unable to retrieve the seid of the phone. Cannot store the provisioning identifiers", v104, 2u);
                  swift_slowDealloc(v104, -1, -1);
                  v105 = v155;
                }
                else
                {
                  v105 = v101;
                  v101 = v155;
                }
                v31 = v150;
                v33 = v151;
                v35 = v158;

                v137(v99, v34);
              }
            }
            v36 = v154;
          }
          v38 = (uint64_t)(v160 + 1);
          if (v159 == v156)
          {
            swift_bridgeObjectRelease(v29);
            return;
          }
        }
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        v126 = v27;
        if (v29 >= 0)
          v127 = v30;
        else
          v127 = v29;
        swift_bridgeObjectRetain(v29);
        v32 = _CocoaArrayWrapper.endIndex.getter(v127);
        swift_bridgeObjectRelease(v29);
        v27 = v126;
      }
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      aBlock = 0;
      v162 = 0xE000000000000000;
      _StringGuts.grow(_:)(96);
      v107._countAndFlagsBits = 0xD00000000000005ELL;
      v107._object = (void *)0x800000010055EBF0;
      String.append(_:)(v107);
      v108._countAndFlagsBits = v150;
      v108._object = v129;
      String.append(_:)(v108);
      v109 = aBlock;
      v110 = v162;
      v111 = v160;
      (*(void (**)(char *, _QWORD, uint64_t))(v157 + 104))(v160, enum case for DIPError.Code.internalError(_:), v159);
      v112 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v113 = type metadata accessor for DIPError(0);
      v114 = sub_100007F30();
      swift_allocError(v113, v114, 0, 0);
      v115 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v109, v110, 0, v111, 0, v112, 0xD000000000000087, 0x8000000100543910, 0xD000000000000047, 0x800000010055EC50, 414);
      swift_willThrow(v115);
    }
  }
}

uint64_t sub_1003C89D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v6[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_10063EC74);
  v6[8] = v9;
  *v9 = v6;
  v9[1] = sub_1003C8A50;
  return sub_1003AEB68();
}

uint64_t sub_1003C8A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 64);
  v5 = *v3;
  *(_QWORD *)(v5 + 72) = a1;
  *(_QWORD *)(v5 + 80) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1003C8ACC, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v5 + 56));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1003C8ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 80);
  if (v2)
  {
    sub_1003D7444(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), 2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v3 = defaultLogger()(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to fetch the SEID from the watch, will not be able to save watch provisioning data", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    v9 = *(_QWORD *)(v1 + 40);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1003C8BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v60 = a7;
  v61 = a8;
  v58 = a5;
  v59 = a6;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v51 - v22;
  sub_1000D7010(a2, a3, a4);
  if (!v13)
  {
    v56 = v17;
    v57 = 0;
    v52 = v21;
    v53 = a2;
    v54 = a4;
    v55 = v18;
    if (v24)
    {
      v25 = v24;
      StoredProofingSession.update(provisioningCredentialIdentifier:targetInstanceIdentifier:partnerSchemeIdentifier:serverAttestedProvisioningData:issuerCurrentCredentialCapacity:)(v58, v59, v60, (uint64_t)v61, a9, a10, a11, a12, a13);
      v26 = v57;
      v27 = sub_1000D6288();
      if (v26)
      {

      }
      else
      {
        v61 = v25;
        v37 = v52;
        defaultLogger()(v27);
        v38 = a3;
        v39 = swift_bridgeObjectRetain_n(a3, 2);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.debug.getter(v40);
        v42 = v41;
        v43 = os_log_type_enabled(v40, v41);
        v45 = v55;
        v44 = v56;
        if (v43)
        {
          v46 = swift_slowAlloc(22, -1);
          v47 = swift_slowAlloc(64, -1);
          v64 = v47;
          *(_DWORD *)v46 = 136315394;
          LODWORD(v60) = v42;
          swift_bridgeObjectRetain(v38);
          v62 = sub_1000E3AC8(v53, v38, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v46 + 4);
          swift_bridgeObjectRelease_n(v38, 3);
          *(_WORD *)(v46 + 12) = 2080;
          v48 = IdentityTarget.debugDescription.getter(v54);
          v50 = v49;
          v62 = sub_1000E3AC8(v48, v49, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v46 + 14);
          swift_bridgeObjectRelease(v50);
          _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v60, "Successfully saved provisioning identifiers for %s and target %s", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v46, -1, -1);

          (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v56);
        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v44);
        }
      }
    }
    else
    {
      defaultLogger()(v58);
      v28 = a3;
      v29 = swift_bridgeObjectRetain_n(a3, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.debug.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v33 = swift_slowAlloc(64, -1);
        v64 = v33;
        *(_DWORD *)v32 = 136315394;
        swift_bridgeObjectRetain(v28);
        v62 = sub_1000E3AC8(v53, v28, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v32 + 4);
        swift_bridgeObjectRelease_n(v28, 3);
        *(_WORD *)(v32 + 12) = 2080;
        v34 = IdentityTarget.debugDescription.getter(v54);
        v36 = v35;
        v62 = sub_1000E3AC8(v34, v35, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v32 + 14);
        swift_bridgeObjectRelease(v36);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to find proofing session with proofingSessionID %s for target %s. Will not save provisioning identifiers", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v23, v56);
    }
  }
}

void sub_1003C9020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::String_optional *a8, _QWORD *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  _QWORD *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String_optional *v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint8_t *v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  Swift::String_optional *v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  char v177[24];
  char v178[8];
  uint64_t v179;
  char v180[8];
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184[8];
  uint64_t v185;
  uint64_t v186;

  v171 = a8;
  v172 = a7;
  v170 = a6;
  v169 = a5;
  v186 = a1;
  v165 = type metadata accessor for DIPError.Code(0);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v166 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for DIPError(0);
  v167 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v168 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v174 = *(_QWORD **)(v14 - 8);
  v175 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v148 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v148 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v148 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v148 - v27;
  v29 = a2;
  v173 = a3;
  v30 = v176;
  sub_1000D7010(a2, a3, a4);
  if (v30)
    return;
  v32 = v31;
  v162 = v23;
  v158 = v28;
  v157 = v20;
  v156 = v26;
  v161 = a4;
  v159 = v17;
  v160 = v29;
  v176 = 0;
  v33 = v173;
  v34 = v174;
  if (!v31)
  {
LABEL_9:
    v66 = v162;
    defaultLogger()(v31);
    v67 = swift_bridgeObjectRetain_n(v33, 2);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      v185 = v71;
      *(_DWORD *)v70 = 136315394;
      v72 = IdentityTarget.debugDescription.getter(v161);
      v74 = v73;
      v183 = sub_1000E3AC8(v72, v73, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v70 + 4);
      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v70 + 12) = 2080;
      swift_bridgeObjectRetain(v33);
      v183 = sub_1000E3AC8(v160, v33, &v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v70 + 14);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to retrieve proofing session for target: %s, proofingSessionID: %s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      ((void (*)(id, uint64_t))v34[1])(v162, v175);
    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 2);
      ((void (*)(id, uint64_t))v34[1])(v66, v175);
    }
    return;
  }
  v35 = objc_msgSend(v31, "credentialIdentifier");
  if (!v35)
  {

    goto LABEL_9;
  }
  v36 = v35;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v39 = v38;

  v40 = objc_msgSend(v32, "workflowID");
  if (!v40)
  {

    v31 = (void *)swift_bridgeObjectRelease(v39);
    goto LABEL_9;
  }
  v41 = v40;
  v153 = v37;
  v162 = v32;
  v42 = v169;
  v43 = v170;
  v154 = v170 + 16;
  v155 = v172 + 16;
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v46 = v45;

  swift_beginAccess(v42 + 16, &v185, 1, 0);
  v47 = *(_QWORD *)(v42 + 24);
  v152 = v44;
  *(_QWORD *)(v42 + 16) = v44;
  *(_QWORD *)(v42 + 24) = v46;
  v169 = v46;
  v48 = v46;
  v49 = v33;
  swift_bridgeObjectRetain(v48);
  v50 = swift_bridgeObjectRelease(v47);
  v51 = v158;
  defaultLogger()(v50);
  v52 = swift_bridgeObjectRetain_n(v33, 2);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter();
  v55 = v54;
  if (os_log_type_enabled(v53, v54))
  {
    v56 = swift_slowAlloc(22, -1);
    v150 = v55;
    v57 = v56;
    v58 = swift_slowAlloc(64, -1);
    v183 = v58;
    *(_DWORD *)v57 = 136315394;
    v149 = v57 + 4;
    v59 = v161;
    v60 = IdentityTarget.debugDescription.getter(v161);
    v62 = v61;
    v181 = sub_1000E3AC8(v60, v61, &v183);
    v151 = v39;
    v63 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v149);
    swift_bridgeObjectRelease(v62);
    *(_WORD *)(v57 + 12) = 2080;
    swift_bridgeObjectRetain(v49);
    v181 = sub_1000E3AC8(v160, v49, &v183);
    v64 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v57 + 14);
    swift_bridgeObjectRelease_n(v49, 3);
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v150, "Successfully fetched proofing session for target: %s, proofingSesionID: %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v57, -1, -1);

    v65 = v63;
    v39 = v151;
    v174 = (_QWORD *)v174[1];
    ((void (*)(char *, uint64_t))v174)(v65, v175);
  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
    v174 = (_QWORD *)v174[1];
    ((void (*)(char *, uint64_t))v174)(v51, v175);
    v64 = v161;
  }
  v75 = v154;
  swift_beginAccess(v154, &v183, 1, 0);
  v76 = *(_QWORD *)(v43 + 24);
  *(_QWORD *)(v43 + 16) = v153;
  *(_QWORD *)(v43 + 24) = v39;
  swift_bridgeObjectRelease(v76);
  v77 = IdentityTarget.rawValue.getter(v64);
  v78 = IdentityTarget.rawValue.getter(2);
  v79 = v155;
  v80 = v171;
  if (v77 == v78)
  {
    v81 = objc_msgSend(v162, "pairingID");
    if (v81)
    {
      v82 = v81;
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v85 = v84;

    }
    else
    {
      v83 = 0;
      v85 = 0;
    }
    swift_beginAccess(v79, v177, 1, 0);
    v86 = v172;
    v87 = *(_QWORD *)(v172 + 24);
    *(_QWORD *)(v172 + 16) = v83;
    *(_QWORD *)(v86 + 24) = v85;
    swift_bridgeObjectRelease(v87);
    v80 = v171;
  }
  StoredProofingSession.update(_:_:_:)(*v80, v80[1], v80[2]);
  v88 = v176;
  v89 = sub_1000D6288();
  if (v88)
  {
    v181 = 0;
    v182 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v90._object = (void *)0x800000010055EE60;
    v90._countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v90);
    v179 = v88;
    v91 = sub_100004828((uint64_t *)&unk_100633430);
    _print_unlocked<A, B>(_:_:)(&v179, &v181, v91, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v92 = v181;
    v93 = v182;
    v94 = v166;
    (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v166, enum case for DIPError.Code.unableToSaveProvisioningIdentifiers(_:), v165);
    v95 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v96 = v168;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v92, v93, 0, v94, 0, v95, 0xD000000000000087, 0x8000000100543910, 0xD000000000000042, 0x800000010055EE10, 544);
    v97 = sub_100007F30();
    v98 = v163;
    v99 = swift_allocError(v163, v97, 0, 0);
    v100 = v167;
    v102 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v167 + 16))(v101, v96, v98);
    v103 = v157;
    defaultLogger()(v102);
    DIPRecordError(_:message:log:)(v99, 0, 0xE000000000000000, v103);
    ((void (*)(char *, uint64_t))v174)(v103, v175);
    v104 = swift_errorRelease(v99);
    v105 = defaultLogger()(v104);
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Ignoring the error and continuing the provisioning flow", v108, 2u);
      v109 = v108;
      v96 = v168;
      swift_slowDealloc(v109, -1, -1);
    }
    swift_errorRelease(v88);

    ((void (*)(char *, uint64_t))v174)(v159, v175);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v96, v98);
    v176 = 0;
  }
  else
  {
    v176 = 0;
    v110 = v156;
    defaultLogger()(v89);
    v111 = swift_bridgeObjectRetain_n(v49, 2);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc(22, -1);
      v115 = swift_slowAlloc(64, -1);
      v181 = v115;
      *(_DWORD *)v114 = 136315394;
      v116 = IdentityTarget.debugDescription.getter(v161);
      v118 = v117;
      v179 = sub_1000E3AC8(v116, v117, &v181);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v114 + 4);
      swift_bridgeObjectRelease(v118);
      *(_WORD *)(v114 + 12) = 2080;
      swift_bridgeObjectRetain(v49);
      v179 = sub_1000E3AC8(v160, v49, &v181);
      v75 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180, v114 + 14);
      swift_bridgeObjectRelease_n(v49, 3);
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Successfully updated provisioning identifiers for target: %s, proofingSesionID: %s", (uint8_t *)v114, 0x16u);
      swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
      v43 = v170;
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v114, -1, -1);

      v119 = v156;
    }
    else
    {

      swift_bridgeObjectRelease_n(v49, 2);
      v119 = v110;
    }
    ((void (*)(char *, uint64_t))v174)(v119, v175);
  }
  v174 = a9 + 2;
  swift_beginAccess(v75, &v181, 0, 0);
  v121 = *(_QWORD *)(v43 + 16);
  v120 = *(_QWORD *)(v43 + 24);
  swift_beginAccess(v155, &v179, 0, 0);
  v123 = *(_QWORD *)(v172 + 16);
  v122 = *(_QWORD *)(v172 + 24);
  swift_bridgeObjectRetain(v122);
  *(_QWORD *)&v124 = swift_bridgeObjectRetain(v120).n128_u64[0];
  v125 = objc_msgSend(v162, "productIdentifier", v124);
  v186 = v121;
  v175 = v123;
  if (v125)
  {
    v126 = v125;
    v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
    v129 = v128;

  }
  else
  {
    v127 = 0;
    v129 = 0;
  }
  v130 = v162;
  v131 = objc_msgSend(v162, "supplementalProvisioningData");
  if (v131)
  {
    v132 = v131;
    v133 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v131);
    v135 = v134;

  }
  else
  {

    v133 = 0;
    v135 = 0xF000000000000000;
  }
  v136 = v152;
  v137 = v169;
  swift_beginAccess(v174, v178, 1, 0);
  v138 = a9[2];
  v139 = a9[3];
  v140 = a9[4];
  v141 = a9[5];
  v142 = a9[6];
  v143 = a9[7];
  v144 = a9[8];
  v145 = a9[9];
  v146 = a9[10];
  v147 = a9[11];
  a9[2] = v186;
  a9[3] = v120;
  a9[4] = v136;
  a9[5] = v137;
  a9[6] = v175;
  a9[7] = v122;
  a9[8] = v127;
  a9[9] = v129;
  a9[10] = v133;
  a9[11] = v135;
  sub_1003D9944(v138, v139, v140, v141, v142, v143, v144, v145, v146, v147);
}

uint64_t sub_1003C9CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(void);
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v111[5];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  __n128 v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  void (*v172)(void);
  char *v173;
  int v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188[2];
  uint64_t v189;
  unint64_t v190[2];
  unint64_t v191;
  Swift::String v192;

  v186 = a4;
  v187 = a1;
  v179 = a2;
  v5 = sub_100004828(&qword_10062FEC0);
  __chkstk_darwin(v5);
  v121 = (char *)v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100632BF8);
  v8 = __chkstk_darwin(v7);
  v151 = (char *)v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v170 = (char *)v111 - v10;
  v11 = sub_100004828((uint64_t *)&unk_100633958);
  v12 = __chkstk_darwin(v11);
  v150 = (char *)v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v126 = (char *)v111 - v15;
  v16 = __chkstk_darwin(v14);
  v141 = (char *)v111 - v17;
  v18 = __chkstk_darwin(v16);
  v169 = (char *)v111 - v19;
  v20 = __chkstk_darwin(v18);
  v149 = (char *)v111 - v21;
  v22 = __chkstk_darwin(v20);
  v148 = (char *)v111 - v23;
  v24 = __chkstk_darwin(v22);
  v125 = (char *)v111 - v25;
  v26 = __chkstk_darwin(v24);
  v124 = (char *)v111 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)v111 - v29;
  __chkstk_darwin(v28);
  v147 = (char *)v111 - v31;
  v32 = type metadata accessor for Logger(0);
  v184 = *(_QWORD *)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v168 = (char *)v111 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v158 = (char *)v111 - v36;
  v37 = __chkstk_darwin(v35);
  v167 = (char *)v111 - v38;
  v39 = __chkstk_darwin(v37);
  v166 = (char *)v111 - v40;
  v41 = __chkstk_darwin(v39);
  v120 = (char *)v111 - v42;
  v43 = __chkstk_darwin(v41);
  v165 = (char *)v111 - v44;
  v45 = __chkstk_darwin(v43);
  v157 = (char *)v111 - v46;
  v47 = __chkstk_darwin(v45);
  v156 = (char *)v111 - v48;
  v49 = __chkstk_darwin(v47);
  v164 = (char *)v111 - v50;
  v51 = __chkstk_darwin(v49);
  v146 = (char *)v111 - v52;
  v53 = __chkstk_darwin(v51);
  v163 = (char *)v111 - v54;
  v55 = __chkstk_darwin(v53);
  v140 = (char *)v111 - v56;
  v57 = __chkstk_darwin(v55);
  v162 = (char *)v111 - v58;
  __chkstk_darwin(v57);
  v161 = (char *)v111 - v59;
  v60 = type metadata accessor for ActionRequest(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(_QWORD *)(v61 + 64);
  v63 = __chkstk_darwin(v60);
  v114 = (uint64_t)v111 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __chkstk_darwin(v63);
  v159 = (char *)v111 - v65;
  v66 = __chkstk_darwin(v64);
  v68 = (char *)v111 - v67;
  v69 = __chkstk_darwin(v66);
  v155 = (char *)v111 - v70;
  v71 = __chkstk_darwin(v69);
  v154 = (char *)v111 - v72;
  v73 = __chkstk_darwin(v71);
  v145 = (char *)v111 - v74;
  v75 = __chkstk_darwin(v73);
  v122 = (char *)v111 - v76;
  __chkstk_darwin(v75);
  v78 = (_QWORD *)((char *)v111 - v77);
  v79 = sub_100004828(&qword_1006377F0);
  v80 = __chkstk_darwin(v79);
  v113 = (uint64_t)v111 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __chkstk_darwin(v80);
  v127 = (char *)v111 - v83;
  v84 = __chkstk_darwin(v82);
  v144 = (char *)v111 - v85;
  v86 = __chkstk_darwin(v84);
  v160 = (char *)v111 - v87;
  v88 = __chkstk_darwin(v86);
  v143 = (char *)v111 - v89;
  v90 = __chkstk_darwin(v88);
  v142 = (char *)v111 - v91;
  v92 = __chkstk_darwin(v90);
  v175 = (char *)v111 - v93;
  __chkstk_darwin(v92);
  v94 = *(void (**)(void))(v61 + 56);
  v173 = (char *)v111 - v95;
  v180 = v60;
  v172 = v94;
  v94();
  v191 = *(_QWORD *)(v187 + 128);
  v190[0] = v191;
  v190[1] = (unint64_t)&_swiftEmptySetSingleton;
  sub_1000FFB34(&v191);
  sub_10039DD58(v190);
  sub_10039E1E0(v190);
  sub_10039E66C(v190);
  if (*(_QWORD *)(v190[0] + 16))
  {
    v138 = OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_biomeManager;
    v96 = *(unsigned __int8 *)(v61 + 80);
    v123 = (v96 + 32) & ~v96;
    v182 = v190[0] + v123;
    v137 = v177 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
    v119 = &v189;
    v118 = (char *)v188 + 4;
    v152 = v96 | 7;
    v136 = (v96 + 24) & ~v96;
    v135 = (v62 + v136 + 7) & 0xFFFFFFFFFFFFFFF8;
    v134 = (v135 + 23) & 0xFFFFFFFFFFFFFFF8;
    v133 = v134 + 8;
    v112 = (v96 + 48) & ~v96;
    v111[4] = v112 + v62;
    v97 = swift_bridgeObjectRetain(v190[0]);
    v174 = 3;
    v132 = (char *)&type metadata for () + 8;
    v131 = 0x800000010055EA10;
    v130 = 0x800000010055EA50;
    v111[3] = "PENDING_WORKFLOW";
    v117 = 0x8000000100539200;
    v97.n128_u64[0] = 136315138;
    v153 = v97;
    v116 = (char *)&type metadata for Any + 8;
    v128 = 0x800000010055EA90;
    v97.n128_u64[0] = 67109120;
    v115 = v97;
    v111[2] = "EXPIRED";
    v111[1] = "ERROR_PROCESSING_REQUEST";
    v176 = a3;
    v98 = v179;
    v139 = v30;
    v178 = v32;
    v171 = v68;
    v129 = v78;
    v185 = v61;
    v181 = v99;
    if (*(_QWORD *)(v99 + 16))
    {
      v187 = 1;
      sub_1003D1458(v182, (uint64_t)v78);
      sub_1003D1024((uint64_t)v78, v98, a3, v186);
      v100 = *v78;
      v101 = (void *)v78[1];
      swift_bridgeObjectRetain(v101);
      sub_1004E5D2C(v188, v100, (uint64_t)v101);
      swift_bridgeObjectRelease(v188[1]);
      swift_bridgeObjectRetain(v101);
      v192._countAndFlagsBits = v100;
      v192._object = v101;
      v102 = (char *)&loc_1003CA6E8 + *((int *)qword_1003CC2A0 + sub_1003D076C(v192));
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1003CC2A0);
  }
  v103 = v180;
  v104 = (uint64_t)v173;
  v105 = (uint64_t)v127;
  swift_bridgeObjectRelease(v190[0]);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  sub_100038B24(v104, v105, &qword_1006377F0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v105, 1, v103) == 1)
  {
    sub_100008030(v104, &qword_1006377F0);
    v106 = v105;
  }
  else
  {
    v107 = v105;
    v108 = v114;
    sub_100038AE0(v107, v114, type metadata accessor for ActionRequest);
    v109 = v113;
    sub_1003D1458(v108, v113);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v172)(v109, 0, 1, v103);
    sub_1003CCD2C(v109, v179, a3);
    sub_100008030(v109, &qword_1006377F0);
    sub_100035DAC(v108, type metadata accessor for ActionRequest);
    v106 = v104;
  }
  return sub_100008030(v106, &qword_1006377F0);
}

uint64_t sub_1003CC2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;

  v10 = a3 + *(int *)(type metadata accessor for ActionRequest(0) + 20);
  v11 = (_QWORD *)swift_task_alloc(dword_10063F5C4);
  *(_QWORD *)(v6 + 16) = v11;
  *v11 = v6;
  v11[1] = sub_10001D0A0;
  return sub_1003C5F44(v10, a4, a5, a6);
}

uint64_t sub_1003CC380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return swift_task_switch(sub_1003CC39C, 0, 0);
}

uint64_t sub_1003CC39C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  id v5;
  NSString v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0[15] + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_credentialProvider);
  v0[18] = v1;
  v2 = qword_10062F478;
  swift_retain(v1);
  if (v2 != -1)
    swift_once(&qword_10062F478, sub_1000DECC0);
  v3 = v0 + 2;
  v4 = *(void **)(qword_100670250 + 16);
  v0[19] = v4;
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  v0[20] = v6;
  v0[2] = v0;
  v0[3] = sub_1003CC4A0;
  v7 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_100454F88;
  v8[3] = &unk_1006162F8;
  v8[4] = v7;
  objc_msgSend(v5, "deleteAccountKeySigningKeyForAccountKeyIdentifier:completion:", v6, v8);
  return swift_continuation_await(v3);
}

uint64_t sub_1003CC4A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(void **)(v2 + 152);
  v4 = *(void **)(v2 + 160);
  v5 = *(_QWORD *)(v2 + 144);
  if (*(_QWORD *)(v2 + 48))
    swift_willThrow(a1);

  swift_release(v5);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1003CC514(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  void *object;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  Swift::String_optional v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v76 = a5;
  v9 = type metadata accessor for Logger(0);
  v74 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  __chkstk_darwin(v9);
  v73 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004828((uint64_t *)&unk_100633958);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DIPError.Code(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v77;
  sub_1000D7010(a2, (uint64_t)a3, (uint64_t)a4);
  if (!v18)
  {
    v69 = a2;
    v70 = a4;
    v77 = v15;
    v71 = v14;
    v72 = v17;
    v68 = a1;
    if (!v19)
    {
      v78 = 0;
      v79 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v26._countAndFlagsBits = 0xD000000000000023;
      v26._object = (void *)0x800000010055EAE0;
      String.append(_:)(v26);
      v27._countAndFlagsBits = v69;
      v27._object = a3;
      String.append(_:)(v27);
      v28._countAndFlagsBits = 0x72617420646E6120;
      v28._object = (void *)0xEC00000020746567;
      String.append(_:)(v28);
      v29._countAndFlagsBits = IdentityTarget.debugDescription.getter(v70);
      object = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(object);
      v31 = v78;
      v32 = v79;
      v33 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v72, enum case for DIPError.Code.internalError(_:), v71);
      v34 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v35 = type metadata accessor for DIPError(0);
      v36 = sub_100007F30();
      swift_allocError(v35, v36, 0, 0);
      v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v31, v32, 0, v33, 0, v34, 0xD000000000000087, 0x8000000100543910, 0xD00000000000003FLL, 0x800000010055EB10, 692);
      swift_willThrow(v37);
      return;
    }
    v69 = 0;
    v70 = v19;
    v20 = type metadata accessor for ActionRequest(0);
    v21 = v13;
    sub_100038B24((uint64_t)v76 + *(int *)(v20 + 20), (uint64_t)v13, (uint64_t *)&unk_100633958);
    v22 = type metadata accessor for PendingActionContext(0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v13, 1, v22) == 1)
    {
      sub_100008030((uint64_t)v13, (uint64_t *)&unk_100633958);
      v24 = v71;
      v23 = v72;
      v25 = v77;
LABEL_11:
      (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v23, enum case for DIPError.Code.extendedReviewProofingError(_:), v24);
      v59 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v60 = type metadata accessor for DIPError(0);
      v61 = sub_100007F30();
      swift_allocError(v60, v61, 0, 0);
      v62 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x800000010055EB50, 0, v23, 0, v59, 0xD000000000000087, 0x8000000100543910, 0xD00000000000003FLL, 0x800000010055EB10, 696);
      swift_willThrow(v62);

      return;
    }
    v39 = v13[14];
    v38 = v13[15];
    v41 = v13[16];
    v40 = (void *)v13[17];
    v42 = v13[18];
    v43 = v13[19];
    v45 = v13[20];
    v44 = v21[21];
    v46 = v21[14];
    v47 = v21[15];
    v48 = v21[16];
    v76 = v40;
    v67 = v44;
    sub_1003D0A50(v46, v47, v48, (uint64_t)v40, v42, v43, v45, v44);
    sub_100035DAC((uint64_t)v21, type metadata accessor for PendingActionContext);
    v24 = v71;
    v23 = v72;
    v25 = v77;
    if (v38 == 2)
      goto LABEL_11;
    v49 = (uint64_t)v76;
    sub_100368FF0(v39, v38, v41, (uint64_t)v76);
    v50 = v49;
    v25 = v77;
    sub_1003691F0(v39, v38, v41, v50, v42, v43, v45, v67);
    if (v38 == 1)
      goto LABEL_11;
    v51 = swift_bridgeObjectRelease(v38);
    if (!v76)
      goto LABEL_11;
    v52 = v73;
    defaultLogger()(v51);
    v53 = swift_bridgeObjectRetain_n(v76, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.debug.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v78 = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = (unint64_t)v76;
      swift_bridgeObjectRetain(v76);
      v80 = sub_1000E3AC8(v41, v58, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v56 + 4);
      swift_bridgeObjectRelease_n(v58, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "The extended review URL string is %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v76, 2);
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v75);
    v63.value._countAndFlagsBits = v41;
    v64 = v76;
    v63.value._object = v76;
    v65 = v70;
    StoredProofingSession.update(extendedReviewURLString:)(v63);
    swift_bridgeObjectRelease(v64);
    sub_1000D6288();

  }
}

void sub_1003CCB00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v33 = a5;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D7010(a2, (uint64_t)a3, a4);
  if (!v5)
  {
    v14 = v13;
    v27._countAndFlagsBits = a2;
    v27._object = a3;
    v28 = v10;
    v29 = v9;
    v15 = v33;
    v30 = v12;
    if (v13)
    {
      v16 = *(Swift::String_optional *)(v15 + *(int *)(type metadata accessor for ActionRequest(0) + 24));
      StoredProofingSession.update(lastExecutedActionIdentifier:)(v16);
      sub_1000D6288();

    }
    else
    {
      v31 = 0;
      v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v17._object = (void *)0x800000010055EBC0;
      v17._countAndFlagsBits = 0xD000000000000027;
      String.append(_:)(v17);
      String.append(_:)(v27);
      v18._countAndFlagsBits = 0x74276E73656F6420;
      v18._object = (void *)0xEE00747369786520;
      String.append(_:)(v18);
      v19 = v31;
      v20 = v32;
      v21 = v30;
      (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for DIPError.Code.internalError(_:), v29);
      v22 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v23 = type metadata accessor for DIPError(0);
      v24 = sub_100007F30();
      swift_allocError(v23, v24, 0, 0);
      v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v19, v20, 0, v21, 0, v22, 0xD000000000000087, 0x8000000100543910, 0xD00000000000003DLL, 0x800000010055EB80, 721);
      swift_willThrow(v25);
    }
  }
}

uint64_t sub_1003CCD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a3;
  v5 = sub_100004828(&qword_1006377F0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = sub_100004828((uint64_t *)&unk_100633958);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider);
  sub_100038B24(a1, (uint64_t)v10, &qword_1006377F0);
  v18 = type metadata accessor for ActionRequest(0);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  if (v19(v10, 1, v18) == 1)
  {
    swift_retain(v17);
    v20 = &qword_1006377F0;
    v21 = (uint64_t)v10;
LABEL_5:
    sub_100008030(v21, v20);
    v23 = 0;
    v24 = 0;
    goto LABEL_7;
  }
  sub_100038B24((uint64_t)&v10[*(int *)(v18 + 20)], (uint64_t)v16, (uint64_t *)&unk_100633958);
  swift_retain(v17);
  sub_100035DAC((uint64_t)v10, type metadata accessor for ActionRequest);
  v22 = type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v16, 1, v22) == 1)
  {
    v20 = (uint64_t *)&unk_100633958;
    v21 = (uint64_t)v16;
    goto LABEL_5;
  }
  v23 = *((_QWORD *)v16 + 26);
  v24 = *((_QWORD *)v16 + 27);
  swift_bridgeObjectRetain(v24);
  sub_100035DAC((uint64_t)v16, type metadata accessor for PendingActionContext);
LABEL_7:
  sub_100038B24(a1, (uint64_t)v8, &qword_1006377F0);
  if (v19(v8, 1, v18) == 1)
  {
    v25 = &qword_1006377F0;
    v26 = (uint64_t)v8;
  }
  else
  {
    sub_100038B24((uint64_t)&v8[*(int *)(v18 + 20)], (uint64_t)v14, (uint64_t *)&unk_100633958);
    sub_100035DAC((uint64_t)v8, type metadata accessor for ActionRequest);
    v27 = type metadata accessor for PendingActionContext(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v14, 1, v27) != 1)
    {
      v28 = *((_QWORD *)v14 + 28);
      v29 = *((_QWORD *)v14 + 29);
      swift_bridgeObjectRetain(v29);
      sub_100035DAC((uint64_t)v14, type metadata accessor for PendingActionContext);
      goto LABEL_13;
    }
    v25 = (uint64_t *)&unk_100633958;
    v26 = (uint64_t)v14;
  }
  sub_100008030(v26, v25);
  v28 = 0;
  v29 = 0;
LABEL_13:
  sub_1004495F4(v23, v24, v28, v29, v31, v32, 0);
  swift_release(v17);
  swift_bridgeObjectRelease(v29);
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_1003CD014(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  char *v93;
  uint8_t *v94;
  uint8_t *v95;
  void (**v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint8_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void (**v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  _QWORD *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  unint64_t v179;
  void (**v180)(char *, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183[2];

  v2 = type metadata accessor for DIPError.Code(0);
  v176 = *(_QWORD *)(v2 - 8);
  v177 = v2;
  __chkstk_darwin(v2);
  v178 = (char *)&v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError(0);
  v179 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v180 = *(void (***)(char *, uint64_t))(v7 - 8);
  v181 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v171 = (char *)&v157 - v12;
  v13 = __chkstk_darwin(v11);
  v175 = (char *)&v157 - v14;
  v15 = __chkstk_darwin(v13);
  v174 = (char *)&v157 - v16;
  v17 = __chkstk_darwin(v15);
  v170 = (char *)&v157 - v18;
  v19 = __chkstk_darwin(v17);
  v169 = (char *)&v157 - v20;
  v21 = __chkstk_darwin(v19);
  v173 = (char *)&v157 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v157 - v23;
  v25 = sub_100004828((uint64_t *)&unk_100633958);
  v26 = __chkstk_darwin(v25);
  v168 = (uint64_t *)((char *)&v157 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __chkstk_darwin(v26);
  v167 = (char *)&v157 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v157 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v157 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v157 - v36;
  v38 = a1;
  sub_100038B24(a1, (uint64_t)&v157 - v36, (uint64_t *)&unk_100633958);
  v39 = type metadata accessor for PendingActionContext(0);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48);
  if (v40(v37, 1, v39) == 1)
  {
    v41 = (uint64_t)v37;
LABEL_9:
    sub_100008030(v41, (uint64_t *)&unk_100633958);
    goto LABEL_10;
  }
  v42 = *((_QWORD *)v37 + 11);
  v164 = v24;
  v165 = v42;
  v43 = *((_QWORD *)v37 + 12);
  swift_bridgeObjectRetain(v43);
  sub_100035DAC((uint64_t)v37, type metadata accessor for PendingActionContext);
  v166 = v43;
  if (!v43)
  {
LABEL_10:
    v46 = v178;
    (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v178, enum case for DIPError.Code.displayMessageDataUnavailable(_:), v177);
    v47 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x800000010055E9C0, 0, v46, 0, v47, 0xD000000000000087, 0x8000000100543910, 0xD00000000000001ELL, 0x800000010055E9F0, 753);
    v48 = sub_100007F30();
    v49 = swift_allocError(v4, v48, 0, 0);
    v50 = v179;
    v52 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v179 + 16))(v51, v6, v4);
    defaultLogger()(v52);
    DIPRecordError(_:message:log:)(v49, 0, 0xE000000000000000, v10);
    v180[1](v10, v181);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v4);
    return swift_errorRelease(v49);
  }
  v44 = v38;
  sub_100038B24(v38, (uint64_t)v35, (uint64_t *)&unk_100633958);
  if (v40(v35, 1, v39) == 1)
  {
    swift_bridgeObjectRelease(v166);
    v41 = (uint64_t)v35;
    goto LABEL_9;
  }
  v45 = *((_QWORD *)v35 + 13);
  swift_bridgeObjectRetain(v45);
  sub_100035DAC((uint64_t)v35, type metadata accessor for PendingActionContext);
  if (!v45)
  {
LABEL_17:
    swift_bridgeObjectRelease(v166);
    goto LABEL_10;
  }
  sub_100038B24(v38, (uint64_t)v32, (uint64_t *)&unk_100633958);
  if (v40(v32, 1, v39) == 1)
  {
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v166);
    v41 = (uint64_t)v32;
    goto LABEL_9;
  }
  v163 = v45;
  v54 = *((_QWORD *)v32 + 14);
  v55 = *((_QWORD *)v32 + 15);
  v56 = *((_QWORD *)v32 + 17);
  v57 = *((_QWORD *)v32 + 18);
  v58 = *((_QWORD *)v32 + 19);
  v59 = *((_QWORD *)v32 + 20);
  v60 = *((_QWORD *)v32 + 21);
  v162 = *((_QWORD *)v32 + 16);
  v161 = v57;
  v160 = v58;
  v159 = v59;
  v158 = v60;
  sub_1003D0A50(v54, v55, v162, v56, v57, v58, v59, v60);
  sub_100035DAC((uint64_t)v32, type metadata accessor for PendingActionContext);
  if (v55 == 2
    || (v61 = v162,
        sub_100368FF0(v54, v55, v162, v56),
        sub_1003691F0(v54, v55, v61, v56, v161, v160, v159, v158),
        v55 == 1)
    || (swift_bridgeObjectRelease(v56), !v55))
  {
    swift_bridgeObjectRelease(v163);
    goto LABEL_17;
  }
  v177 = v54;
  v179 = v55;
  v62 = v167;
  sub_100038B24(v44, (uint64_t)v167, (uint64_t *)&unk_100633958);
  v178 = (char *)v40;
  if (v40(v62, 1, v39) == 1)
  {
    sub_100008030((uint64_t)v62, (uint64_t *)&unk_100633958);
  }
  else
  {
    v63 = *((_QWORD *)v62 + 15);
    v64 = *((_QWORD *)v62 + 16);
    v65 = *((_QWORD *)v62 + 17);
    v66 = *((_QWORD *)v62 + 18);
    v67 = *((_QWORD *)v62 + 19);
    v69 = *((_QWORD *)v62 + 20);
    v68 = *((_QWORD *)v62 + 21);
    v176 = *((_QWORD *)v62 + 14);
    sub_1003D0A50(v176, v63, v64, v65, v66, v67, v69, v68);
    sub_100035DAC((uint64_t)v62, type metadata accessor for PendingActionContext);
    if (v63 != 2)
    {
      sub_100368FF0(v66, v67, v69, v68);
      sub_1003691F0(v176, v63, v64, v65, v66, v67, v69, v68);
      if (v67 != 1)
      {
        v70 = v66;
        swift_bridgeObjectRelease(v68);
        goto LABEL_21;
      }
    }
  }
  v70 = 0;
  v67 = 0;
LABEL_21:
  v71 = v181;
  v72 = v166;
  v73 = v168;
  sub_100038B24(v44, (uint64_t)v168, (uint64_t *)&unk_100633958);
  v74 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v178)(v73, 1, v39);
  v167 = (char *)v70;
  if (v74 == 1)
  {
    sub_100008030((uint64_t)v73, (uint64_t *)&unk_100633958);
    v75 = 0;
    v76 = 0;
  }
  else
  {
    v78 = v73[14];
    v77 = v73[15];
    v75 = v73[16];
    v76 = v73[17];
    v79 = v73[18];
    v80 = v73[19];
    v81 = v73[20];
    v82 = v73[21];
    sub_1003D0A50(v78, v77, v75, v76, v79, v80, v81, v82);
    sub_100035DAC((uint64_t)v73, type metadata accessor for PendingActionContext);
    if (v77 == 2
      || (sub_100368FF0(v78, v77, v75, v76), sub_1003691F0(v78, v77, v75, v76, v79, v80, v81, v82), v77 == 1))
    {
      v75 = 0;
      v76 = 0;
    }
    else
    {
      swift_bridgeObjectRelease(v77);
    }
    v71 = v181;
    v72 = v166;
    v70 = (uint64_t)v167;
  }
  v83 = type metadata accessor for IdentityProofingDisplayMessage(0);
  swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
  swift_bridgeObjectRetain(v67);
  v84 = v179;
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRetain(v72);
  v85 = v163;
  v86 = swift_bridgeObjectRetain(v163);
  v176 = v67;
  v87 = IdentityProofingDisplayMessage.init(title:messages:primaryButtonTitle:secondaryButtonTitle:url:)(v165, v72, v85, v177, v84, v70, v67, v75, v86, v76);
  v88 = v164;
  v89 = defaultLogger()(v87);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.debug.getter(v90);
  v92 = os_log_type_enabled(v90, v91);
  v93 = v173;
  if (v92)
  {
    v94 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "----BEGIN LOGGING DISPLAY MESSAGE DATA-----", v94, 2u);
    v95 = v94;
    v88 = v164;
    swift_slowDealloc(v95, -1, -1);
  }

  v96 = (void (**)(char *, uint64_t))v180[1];
  v97 = ((uint64_t (*)(char *, uint64_t))v96)(v88, v71);
  defaultLogger()(v97);
  swift_bridgeObjectRetain(v72);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.debug.getter(v99);
  v101 = os_log_type_enabled(v99, v100);
  v178 = (char *)v87;
  v180 = v96;
  if (v101)
  {
    v102 = (uint8_t *)swift_slowAlloc(12, -1);
    v103 = swift_slowAlloc(32, -1);
    v183[0] = v103;
    *(_DWORD *)v102 = 136315138;
    swift_bridgeObjectRetain(v72);
    v182 = sub_1000E3AC8(v165, v72, v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v102 + 4);
    swift_bridgeObjectRelease_n(v72, 3);
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "title: %s", v102, 0xCu);
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v103, -1, -1);
    swift_slowDealloc(v102, -1, -1);

    v104 = v173;
  }
  else
  {

    swift_bridgeObjectRelease_n(v72, 2);
    v104 = v93;
  }
  v105 = ((uint64_t (*)(char *, uint64_t))v96)(v104, v71);
  v106 = v169;
  defaultLogger()(v105);
  v107 = v163;
  swift_bridgeObjectRetain(v163);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.debug.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    v111 = (uint8_t *)swift_slowAlloc(12, -1);
    v112 = swift_slowAlloc(32, -1);
    v183[0] = v112;
    *(_DWORD *)v111 = 136315138;
    swift_bridgeObjectRetain(v107);
    v114 = Array.description.getter(v113, &type metadata for String);
    v116 = v115;
    swift_bridgeObjectRelease(v107);
    v182 = sub_1000E3AC8(v114, v116, v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v111 + 4);
    swift_bridgeObjectRelease_n(v107, 2);
    v117 = v116;
    v71 = v181;
    swift_bridgeObjectRelease(v117);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "messages: %s", v111, 0xCu);
    swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v111, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v107, 2);
  }
  v118 = v180;
  v119 = ((uint64_t (*)(char *, uint64_t))v180)(v106, v71);
  v120 = v170;
  defaultLogger()(v119);
  v121 = v179;
  swift_bridgeObjectRetain(v179);
  v123 = Logger.logObject.getter(v122);
  v124 = static os_log_type_t.debug.getter(v123);
  if (os_log_type_enabled(v123, v124))
  {
    v125 = (uint8_t *)swift_slowAlloc(12, -1);
    v126 = swift_slowAlloc(32, -1);
    v183[0] = v126;
    *(_DWORD *)v125 = 136315138;
    swift_bridgeObjectRetain(v121);
    v182 = sub_1000E3AC8(v177, v121, v183);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v125 + 4);
    swift_bridgeObjectRelease_n(v121, 3);
    _os_log_impl((void *)&_mh_execute_header, v123, v124, "primaryButtonTitle: %s", v125, 0xCu);
    swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v125, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v121, 2);
  }
  v127 = ((uint64_t (*)(char *, uint64_t))v118)(v120, v71);
  v128 = v174;
  defaultLogger()(v127);
  v129 = v176;
  swift_bridgeObjectRetain(v176);
  v131 = Logger.logObject.getter(v130);
  v132 = static os_log_type_t.debug.getter(v131);
  if (os_log_type_enabled(v131, v132))
  {
    v133 = (uint8_t *)swift_slowAlloc(12, -1);
    v134 = swift_slowAlloc(32, -1);
    *(_DWORD *)v133 = 136315138;
    v183[0] = v134;
    if (v129)
      v135 = (uint64_t)v167;
    else
      v135 = 0;
    if (v129)
      v136 = v129;
    else
      v136 = 0xE000000000000000;
    swift_bridgeObjectRetain(v129);
    v182 = sub_1000E3AC8(v135, v136, v183);
    v71 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v133 + 4);
    swift_bridgeObjectRelease_n(v129, 2);
    swift_bridgeObjectRelease(v136);
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "secondaryButtonTitle: %s", v133, 0xCu);
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v134, -1, -1);
    swift_slowDealloc(v133, -1, -1);

    v137 = v174;
  }
  else
  {

    swift_bridgeObjectRelease_n(v129, 2);
    v137 = v128;
  }
  v138 = ((uint64_t (*)(char *, uint64_t))v118)(v137, v71);
  v139 = v175;
  defaultLogger()(v138);
  v140 = v178;
  v141 = swift_retain_n(v178, 2);
  v142 = Logger.logObject.getter(v141);
  v143 = static os_log_type_t.debug.getter(v142);
  if (os_log_type_enabled(v142, v143))
  {
    v144 = (uint8_t *)swift_slowAlloc(12, -1);
    v145 = swift_slowAlloc(32, -1);
    v183[0] = v145;
    *(_DWORD *)v144 = 136315138;
    v146 = IdentityProofingDisplayMessage.url.getter();
    if (v147)
    {
      v148 = v147;
    }
    else
    {
      v146 = 0;
      v148 = 0xE000000000000000;
    }
    v182 = sub_1000E3AC8(v146, v148, v183);
    v140 = v178;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v144 + 4);
    swift_release_n(v140, 2);
    swift_bridgeObjectRelease(v148);
    _os_log_impl((void *)&_mh_execute_header, v142, v143, "url: %s", v144, 0xCu);
    swift_arrayDestroy(v145, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v145, -1, -1);
    swift_slowDealloc(v144, -1, -1);

    v149 = v175;
  }
  else
  {

    swift_release_n(v140, 2);
    v149 = v139;
  }
  v150 = ((uint64_t (*)(char *, uint64_t))v118)(v149, v71);
  v151 = v171;
  v152 = defaultLogger()(v150);
  v153 = Logger.logObject.getter(v152);
  v154 = static os_log_type_t.debug.getter(v153);
  if (os_log_type_enabled(v153, v154))
  {
    v155 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v155 = 0;
    _os_log_impl((void *)&_mh_execute_header, v153, v154, "----END LOGGING DISPLAY MESSAGE DATA-----", v155, 2u);
    swift_slowDealloc(v155, -1, -1);
  }

  ((void (*)(char *, uint64_t))v118)(v151, v71);
  v156 = *(_QWORD *)(v172 + 24);
  *(_QWORD *)(v172 + 24) = v140;
  return swift_release(v156);
}

uint64_t sub_1003CDFF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _DWORD v63[4];
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String v80;

  v72 = a3;
  v67 = a8;
  v69 = a7;
  v70 = a6;
  v13 = type metadata accessor for DIPError.Code(0);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v73 = *(_QWORD *)(v16 - 8);
  v74 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v63 - v22;
  if (a2)
  {
    v68 = a4;
    swift_bridgeObjectRetain(a2);
    v80._countAndFlagsBits = a1;
    v80._object = a2;
    v21 = sub_1003D0724(v80);
    v24 = (unint64_t)a2;
    if (v21 != 6)
    {
      v66 = v21;
      defaultLogger()(v21);
      v25 = swift_bridgeObjectRetain_n(a5, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.debug.getter(v26);
      v28 = os_log_type_enabled(v26, v27);
      v71 = v15;
      v65 = a5;
      if (v28)
      {
        v29 = swift_slowAlloc(32, -1);
        v64 = swift_slowAlloc(96, -1);
        v79 = v64;
        *(_DWORD *)v29 = 136315650;
        swift_bridgeObjectRetain(a5);
        v77 = sub_1000E3AC8(v68, a5, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v29 + 4);
        swift_bridgeObjectRelease_n(a5, 3);
        *(_WORD *)(v29 + 12) = 2080;
        v30 = IdentityTarget.debugDescription.getter(v70);
        v32 = v31;
        v77 = sub_1000E3AC8(v30, v31, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v29 + 14);
        swift_bridgeObjectRelease(v32);
        *(_WORD *)(v29 + 22) = 2080;
        __asm { BR              X10 }
      }
      swift_bridgeObjectRelease_n(a5, 2);

      v73 = *(_QWORD *)(v73 + 8);
      ((void (*)(char *, uint64_t))v73)(v23, v74);
      v46 = (char *)&loc_1003CE5EC + 4 * byte_100533427[v66];
      v63[3] = a9;
      __asm { BR              X10 }
    }
  }
  else
  {
    v24 = 0xE300000000000000;
  }
  defaultLogger()(v21);
  v33 = swift_bridgeObjectRetain_n(a2, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(12, -1);
    v71 = v15;
    v37 = (uint8_t *)v36;
    v38 = swift_slowAlloc(32, -1);
    *(_DWORD *)v37 = 136315138;
    v79 = v38;
    if (a2)
      v39 = a1;
    else
      v39 = 7104878;
    swift_bridgeObjectRetain(a2);
    v77 = sub_1000E3AC8(v39, v24, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v37 + 4);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Server sent an unknown pending status code: %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v40 = v37;
    v15 = v71;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  (*(void (**)(char *, uint64_t))(v73 + 8))(v19, v74);
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v15, enum case for DIPError.Code.invalidPendingActionsProofingStatusCode(_:), v76);
  v41 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v42 = type metadata accessor for DIPError(0);
  v43 = sub_100007F30();
  v44 = swift_allocError(v42, v43, 0, 0);
  v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x800000010055E920, 0, v15, 0, v41, 0xD000000000000087, 0x8000000100543910, 0xD00000000000006FLL, 0x800000010055E950, 788);
  swift_willThrow(v45);
  v47 = sub_100004828((uint64_t *)&unk_1006325A0);
  v48 = sub_100004828((uint64_t *)&unk_100633440);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(_QWORD *)(v49 + 72);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v51 + 32) & ~v51;
  v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
  *(_OWORD *)(v53 + 16) = xmmword_10051FFB0;
  v54 = v53 + v52;
  v55 = (_QWORD *)(v54 + *(int *)(v48 + 48));
  v56 = enum case for DIPError.PropertyKey.inoProviderID(_:);
  v57 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v54, v56, v57);
  v55[3] = &type metadata for String;
  *v55 = 0x61746E6567616DLL;
  v55[1] = 0xE700000000000000;
  swift_errorRetain(v44);
  v58 = sub_10011D314(v53);
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v15, enum case for DIPError.Code.internalError(_:), v76);
  v59 = type metadata accessor for DIPError(0);
  v60 = sub_100007F30();
  swift_allocError(v59, v60, 0, 0);
  v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v44, v15, 0, v58, 0xD000000000000087, 0x8000000100543910, 0xD00000000000006FLL, 0x800000010055E950, 849);
  swift_willThrow(v61);
  return swift_errorRelease(v44);
}

void sub_1003CEF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, _QWORD, uint64_t);
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(char *, _QWORD, uint64_t);
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[5920];
  _BYTE v63[5920];
  _QWORD v64[741];
  char *v65;

  v57 = a3;
  v56 = a2;
  v4 = type metadata accessor for Logger(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  __chkstk_darwin(v4);
  v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v65 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828((uint64_t *)&unk_100633958);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  v14 = sub_100004828(&qword_10063B3E0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004828(&qword_100633968);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v59 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a1;
  sub_100038B24(a1, (uint64_t)v13, (uint64_t *)&unk_100633958);
  v20 = type metadata accessor for PendingActionContext(0);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
  if (v21(v13, 1, v20) == 1)
  {
    sub_100008030((uint64_t)v13, (uint64_t *)&unk_100633958);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
LABEL_4:
    sub_100008030((uint64_t)v16, &qword_10063B3E0);
    v22 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
    v23 = v65;
    v22(v65, enum case for DIPError.Code.missingLivenessStepUpConfig(_:), v61);
    v24 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_100007F30();
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000044, 0x800000010055E860, 0, v23, 0, v24, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055E8B0, 864);
    swift_willThrow(v27);
    return;
  }
  sub_100038B24((uint64_t)&v13[*(int *)(v20 + 112)], (uint64_t)v16, &qword_10063B3E0);
  sub_100035DAC((uint64_t)v13, type metadata accessor for PendingActionContext);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    goto LABEL_4;
  v28 = (uint64_t)v59;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v16, v17);
  v29 = v58;
  v30 = *(_QWORD *)(v58 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider);
  v50 = v18;
  v51 = v17;
  if (v30)
  {
    swift_retain(v30);
    v31 = v60;
    v32 = sub_1003B8E4C(v28, v56, v57);
    v60 = v31;
    if (v31)
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v28, v51);
      swift_release(v30);
      return;
    }
    v33 = v32;
    swift_release(v30);
    v29 = v58;
  }
  else
  {
    v33 = 0;
  }
  v34 = *(void **)(v29 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig);
  *(_QWORD *)(v29 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpConfig) = v33;

  sub_100038B24(v55, (uint64_t)v11, (uint64_t *)&unk_100633958);
  if (v21(v11, 1, v20) == 1)
  {
    sub_100008030((uint64_t)v11, (uint64_t *)&unk_100633958);
LABEL_13:
    v35 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
    v36 = v65;
    v35(v65, enum case for DIPError.Code.missingLivenessStepUpIQModel(_:), v61);
    v37 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_100007F30();
    v40 = swift_allocError(v38, v39, 0, 0);
    v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x800000010055E8E0, 0, v36, 0, v37, 0xD000000000000087, 0x8000000100543910, 0xD00000000000002ELL, 0x800000010055E8B0, 870);
    v42 = v52;
    defaultLogger()(v41);
    DIPRecordError(_:message:log:)(v40, 0, 0xE000000000000000, v42);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v54);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v59, v51);
    swift_errorRelease(v40);
    return;
  }
  sub_1000A1F54((uint64_t)&v11[*(int *)(v20 + 116)], (uint64_t)v62, &qword_1006322D8);
  sub_100093660(v62, sub_10009637C);
  sub_100035DAC((uint64_t)v11, type metadata accessor for PendingActionContext);
  sub_1000A1F54((uint64_t)v62, (uint64_t)v63, &qword_1006322D8);
  if (sub_1000D5328((uint64_t)v63) == 1)
    goto LABEL_13;
  memcpy(v64, v63, 0x1719uLL);
  v43 = type metadata accessor for IdentityProofingImageQualitySettingsProvider();
  v44 = (int64x2_t *)swift_allocObject(v43, 48, 7);
  v44[1] = vdupq_n_s64(5uLL);
  v44[2].i64[0] = 5;
  v45 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v46 = JSONEncoder.init()();
  v44[2].i64[1] = v46;
  v47 = sub_1003F6640(v64, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  sub_100093660(v62, sub_10008FDDC);
  swift_release(v46);
  swift_setDeallocating(v44);
  swift_deallocClassInstance(v44, 48, 7);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v59, v51);
  v48 = *(void **)(v58 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings);
  *(_QWORD *)(v58 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessStepUpIQSettings) = v47;

}

uint64_t sub_1003CF620(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[24];
  uint64_t v26;

  v6 = v4;
  v11 = sub_100004828(&qword_100632BF8);
  __chkstk_darwin(v11);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = type metadata accessor for WorkflowRecommendationResponse(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v6 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse;
  swift_beginAccess(v6 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse, v25, 33, 0);
  sub_1003D07FC((uint64_t)v13, v15);
  swift_endAccess(v25);
  v16 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;
  swift_release(v16);
  v17 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v17, 24, 7);
  sub_1000D6044();
  if (!v5)
  {
    v19 = v18;
    v20 = a4;
    v21 = swift_allocObject(&unk_100616150, 24, 7);
    *(_QWORD *)(v21 + 16) = 0;
    v26 = v21 + 16;
    v22 = swift_allocObject(&unk_100616178, 72, 7);
    *(_QWORD *)(v22 + 16) = a3;
    *(_BYTE *)(v22 + 24) = v20 & 1;
    *(_QWORD *)(v22 + 32) = a1;
    *(_QWORD *)(v22 + 40) = a2;
    *(_QWORD *)(v22 + 48) = v19;
    *(_QWORD *)(v22 + 56) = v6;
    *(_QWORD *)(v22 + 64) = v21;
    swift_bridgeObjectRetain(a2);
    swift_retain(v19);
    swift_retain(v6);
    swift_retain(v21);
    sub_1000D6570((uint64_t)sub_1003D08A4, v22);
    swift_release(v19);
    swift_release(v22);
    swift_beginAccess(v26, v25, 0, 0);
    v6 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRetain(v6);
    swift_release(v21);
  }
  return v6;
}

void sub_1003CF830(uint64_t a1, char a2, uint64_t a3, void *a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  void *v47;
  unint64_t *v48;
  id v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  NSObject *v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  os_log_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t inited;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  void *object;
  void *v114;
  Swift::String v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_log_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  char v136[56];
  Swift::String v137;
  char v138[64];
  uint64_t v139;
  uint64_t v140;

  v8 = v7;
  v133 = a6;
  v134 = a5;
  v135 = a3;
  v13 = type metadata accessor for Logger(0);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v126 - v16;
  __chkstk_darwin(v15);
  v21 = (char *)&v126 - v20;
  v22 = (unint64_t *)(a7 + 16);
  if ((a2 & 1) == 0)
  {
    if (!a4)
      return;
    v132 = v19;
    swift_bridgeObjectRetain(a4);
    sub_1000D7010(v135, (uint64_t)a4, a1);
    v24 = (unint64_t)a4;
    if (!v7)
    {
      v38 = v23;
      if (v23)
      {
        v39 = objc_msgSend(v23, "workflowID");
        if (v39)
        {
          v40 = v39;
          v131 = v13;
          v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v42 = v41;

          v43 = IdentityTarget.init(rawValue:)(objc_msgSend(v38, "target"));
          if ((v44 & 1) != 0
            || (v45 = v43, (v46 = objc_msgSend(v38, "credentialIdentifier")) == 0))
          {

            swift_bridgeObjectRelease(v24);
            v25 = v42;
          }
          else
          {
            v47 = v46;
            v127 = v45;
            v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
            v129 = v48;

            v49 = objc_msgSend(v38, "lastExecutedActionIdentifier");
            if (v49)
            {
              v50 = v49;
              v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
              v130 = v52;

            }
            else
            {
              v51 = 0;
              v130 = 0;
            }
            v72 = v135;
            sub_1003C3AEC((uint64_t)v134, v42, v135, v24, v51, v130, a1);
            swift_bridgeObjectRelease(v42);
            v73 = swift_bridgeObjectRelease(v130);
            defaultLogger()(v73);
            v74 = swift_bridgeObjectRetain_n(v24, 2);
            v75 = Logger.logObject.getter(v74);
            v76 = static os_log_type_t.debug.getter(v75);
            v77 = v76;
            if (os_log_type_enabled(v75, v76))
            {
              v78 = swift_slowAlloc(22, -1);
              LODWORD(v130) = v77;
              v79 = v78;
              v133 = swift_slowAlloc(64, -1);
              v137._countAndFlagsBits = v133;
              *(_DWORD *)v79 = 136315394;
              v134 = v75;
              swift_bridgeObjectRetain(v24);
              v139 = sub_1000E3AC8(v72, v24, &v137._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v79 + 4);
              swift_bridgeObjectRelease_n(v24, 3);
              *(_WORD *)(v79 + 12) = 2080;
              v126 = (os_log_t)(v79 + 14);
              v80 = IdentityTarget.debugDescription.getter(v127);
              v82 = v81;
              v139 = sub_1000E3AC8(v80, v81, &v137._countAndFlagsBits);
              v72 = v135;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v126);
              swift_bridgeObjectRelease(v82);
              _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v130, "Successfully requested pending actions with %s for target: %s", (uint8_t *)v79, 0x16u);
              v83 = v133;
              swift_arrayDestroy(v133, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v83, -1, -1);
              swift_slowDealloc(v79, -1, -1);

            }
            else
            {
              swift_bridgeObjectRelease_n(v24, 2);

            }
            (*(void (**)(char *, uint64_t))(v132 + 8))(v21, v131);
            v103 = sub_100004828(&qword_10063F920);
            inited = swift_initStackObject(v103, v136);
            *(_OWORD *)(inited + 16) = xmmword_10051FFB0;
            *(_QWORD *)(inited + 32) = 0xD000000000000010;
            *(_QWORD *)(inited + 40) = 0x8000000100544B90;
            v105 = type metadata accessor for IdentityProofingMetadata();
            v106 = (_QWORD *)swift_allocObject(v105, 56, 7);
            v106[2] = v72;
            v106[3] = v24;
            v107 = v128;
            v106[4] = a1;
            v106[5] = v107;
            v106[6] = v129;
            *(_QWORD *)(inited + 48) = v106;
            v108 = sub_10011F4D8(inited);

            swift_beginAccess(v22, &v137, 1, 0);
            v25 = *v22;
            *v22 = v108;
          }
          goto LABEL_11;
        }

      }
    }
    v25 = v24;
LABEL_11:
    swift_bridgeObjectRelease(v25);
    return;
  }
  if (!a4)
    return;
  v132 = v19;
  v128 = v18;
  v129 = (unint64_t *)(a7 + 16);
  swift_bridgeObjectRetain(a4);
  defaultLogger()(v26);
  v27 = swift_bridgeObjectRetain_n(a4, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(12, -1);
    v130 = v7;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc(32, -1);
    v137._countAndFlagsBits = v32;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain(a4);
    v131 = v13;
    v33 = v135;
    v139 = sub_1000E3AC8(v135, (unint64_t)a4, &v137._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v31 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Requesting pending actions with proofingSessionID: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v34 = v31;
    v8 = v130;
    swift_slowDealloc(v34, -1, -1);

    v35 = *(void (**)(char *))(v132 + 8);
    v36 = v131;
    v35(v17);
  }
  else
  {
    swift_bridgeObjectRelease_n(a4, 2);

    v35 = *(void (**)(char *))(v132 + 8);
    v36 = v13;
    ((void (*)(char *, uint64_t))v35)(v17, v13);
    v33 = v135;
  }
  sub_1000D69B0(v33, (uint64_t)a4);
  if (v8 || (v53 = v37) == 0)
  {
LABEL_10:
    v25 = (unint64_t)a4;
    goto LABEL_11;
  }
  if (!((unint64_t)v37 >> 62))
  {
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_22;
LABEL_48:
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(a4);
    return;
  }
  if (v37 >= 0)
    v124 = v37 & 0xFFFFFFFFFFFFFF8;
  else
    v124 = v37;
  swift_bridgeObjectRetain(v37);
  v125 = _CocoaArrayWrapper.endIndex.getter(v124);
  swift_bridgeObjectRelease(v53);
  if (!v125)
    goto LABEL_48;
LABEL_22:
  if ((v53 & 0xC000000000000001) != 0)
  {
    v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v53);
  }
  else
  {
    if (!*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v54 = *(id *)(v53 + 32);
  }
  v55 = v54;
  swift_bridgeObjectRelease(v53);
  v56 = objc_msgSend(v55, "workflowID");
  if (!v56)
  {

    goto LABEL_10;
  }
  v57 = v56;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v60 = v59;

  v61 = IdentityTarget.init(rawValue:)(objc_msgSend(v55, "target"));
  if ((v62 & 1) != 0
    || (v63 = v61,
        (v64 = objc_msgSend(v55, "credentialIdentifier")) == 0))
  {

    swift_bridgeObjectRelease(a4);
    v25 = v60;
    goto LABEL_11;
  }
  v65 = v64;
  v131 = v58;
  v134 = v63;
  v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v132 = v66;

  v67 = objc_msgSend(v55, "lastExecutedActionIdentifier");
  if (v67)
  {
    v68 = v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v71 = v70;

  }
  else
  {
    v69 = 0;
    v71 = 0;
  }
  v84 = v69;
  v85 = v134;
  sub_1003C3AEC(v131, v60, v135, (uint64_t)a4, v84, v71, (uint64_t)v134);
  v130 = 0;
  swift_bridgeObjectRelease(v60);
  v86 = swift_bridgeObjectRelease(v71);
  v87 = v128;
  defaultLogger()(v86);
  v88 = swift_bridgeObjectRetain_n(a4, 2);
  v89 = Logger.logObject.getter(v88);
  v90 = static os_log_type_t.debug.getter(v89);
  v91 = v90;
  if (os_log_type_enabled(v89, v90))
  {
    v92 = swift_slowAlloc(22, -1);
    LODWORD(v131) = v91;
    v93 = v92;
    v133 = swift_slowAlloc(64, -1);
    v137._countAndFlagsBits = v133;
    *(_DWORD *)v93 = 136315394;
    v126 = v89;
    swift_bridgeObjectRetain(a4);
    v139 = sub_1000E3AC8(v135, (unint64_t)a4, &v137._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v93 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v93 + 12) = 2080;
    v94 = IdentityTarget.debugDescription.getter(v85);
    v95 = a4;
    v97 = v96;
    v139 = sub_1000E3AC8(v94, v96, &v137._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v93 + 14);
    v98 = v97;
    a4 = v95;
    v85 = v134;
    swift_bridgeObjectRelease(v98);
    v99 = v126;
    _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v131, "Successfully requested pending actions with %s for target: %s", (uint8_t *)v93, 0x16u);
    v100 = v133;
    swift_arrayDestroy(v133, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    v101 = v93;
    v102 = v135;
    swift_slowDealloc(v101, -1, -1);

    ((void (*)(uint64_t, uint64_t))v35)(v87, v36);
  }
  else
  {
    swift_bridgeObjectRelease_n(a4, 2);

    ((void (*)(uint64_t, uint64_t))v35)(v87, v36);
    v102 = v135;
  }
  v137._countAndFlagsBits = 0;
  v137._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v109._countAndFlagsBits = 0xD00000000000002CLL;
  v109._object = (void *)0x800000010055E830;
  String.append(_:)(v109);
  v110._countAndFlagsBits = v102;
  v110._object = a4;
  String.append(_:)(v110);
  v111._countAndFlagsBits = 0x72617420726F6620;
  v111._object = (void *)0xED0000203A746567;
  String.append(_:)(v111);
  v112._countAndFlagsBits = IdentityTarget.debugDescription.getter(v85);
  object = v112._object;
  String.append(_:)(v112);
  swift_bridgeObjectRelease(object);
  v114 = v137._object;
  v115._countAndFlagsBits = 0x3964373763333437;
  v115._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v115, v137);
  swift_bridgeObjectRelease(v114);
  v116 = sub_100004828(&qword_10063F920);
  v117 = swift_initStackObject(v116, v138);
  *(_OWORD *)(v117 + 16) = xmmword_10051FFB0;
  *(_QWORD *)(v117 + 32) = 0xD000000000000010;
  *(_QWORD *)(v117 + 40) = 0x8000000100544B90;
  v118 = type metadata accessor for IdentityProofingMetadata();
  v119 = (_QWORD *)swift_allocObject(v118, 56, 7);
  v119[2] = v102;
  v119[3] = a4;
  v120 = v127;
  v119[4] = v85;
  v119[5] = v120;
  v119[6] = v132;
  *(_QWORD *)(v117 + 48) = v119;
  v121 = sub_10011F4D8(v117);

  v122 = v129;
  swift_beginAccess(v129, &v137, 1, 0);
  v123 = *v122;
  *v122 = v121;
  swift_bridgeObjectRelease(v123);
}

uint64_t sub_1003D03A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_workflowRecommendationResponse, &qword_100632BF8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_pendingActionsWebService));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_userNotificationProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_expirationActionProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_livenessConfigProvider));
  sub_100008030(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_staticWorkflow, &qword_10063F998);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_cleanupProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_biomeManager));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_credentialProvider));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC8coreidvd34IdentityProofingPendingActionsFlow_identityWatchProvisioningManagerFactory));
  return v0;
}

uint64_t sub_1003D04B8()
{
  uint64_t v0;

  sub_1003D03A4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003D04DC()
{
  return type metadata accessor for IdentityProofingPendingActionsFlow(0);
}

uint64_t type metadata accessor for IdentityProofingPendingActionsFlow(uint64_t a1)
{
  uint64_t result;

  result = qword_10063F5A8;
  if (!qword_10063F5A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityProofingPendingActionsFlow);
  return result;
}

void sub_1003D0520(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[17];

  v6[0] = "\b";
  v6[1] = "\b";
  sub_10003B6E4(319, &qword_10063BD00, type metadata accessor for WorkflowRecommendationResponse);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_1005334E0;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = "\b";
    sub_10003B6E4(319, (unint64_t *)&qword_10063F5C8, type metadata accessor for IdentityProofingStaticWorkflow);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[12] = "\b";
      v6[13] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[14] = "\b";
      v6[15] = "\b";
      v6[16] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 17, v6, a1 + 80);
    }
  }
}

uint64_t storeEnumTagSinglePayload for IdentityProofingPendingActionsFlow.Trigger(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003D065C + 4 * byte_100533450[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003D0690 + 4 * byte_10053344B[v4]))();
}

uint64_t sub_1003D0690(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D0698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003D06A0);
  return result;
}

uint64_t sub_1003D06AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003D06B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1003D06B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D06C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingPendingActionsFlow.Trigger()
{
  return &type metadata for IdentityProofingPendingActionsFlow.Trigger;
}

unint64_t sub_1003D06E0()
{
  unint64_t result;

  result = qword_10063F918;
  if (!qword_10063F918)
  {
    result = swift_getWitnessTable(&unk_100533578, &type metadata for IdentityProofingPendingActionsFlow.Trigger);
    atomic_store(result, (unint64_t *)&qword_10063F918);
  }
  return result;
}

unint64_t sub_1003D0724(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005FFC00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_1003D076C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100602688, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t sub_1003D07B4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100602780, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1003D07FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100632BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D0844()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D0868()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_1003D08A4()
{
  uint64_t v0;

  sub_1003CF830(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(NSObject **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1003D08CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1003D0900()
{
  uint64_t *v0;

  sub_1003C4638(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1003D0920()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003D0954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc(dword_10063F934);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001D0A0;
  v5 = (_QWORD *)swift_task_alloc(dword_10063F5BC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10001D0A0;
  return sub_1003C5320(v2, v3);
}

uint64_t sub_1003D09D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D09F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

id sub_1003D0A1C()
{
  uint64_t v0;

  return sub_100027A18(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1003D0A28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D0A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003D0A48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1003D0A50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != 2)
  {
    sub_100368FF0(result, a2, a3, a4);
    return sub_100368FF0(a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1003D0AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _BYTE v55[24];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;

  v49 = a4;
  v50 = a3;
  v48 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v46[1] = *(_QWORD *)(v5 - 8);
  v46[2] = v5;
  __chkstk_darwin(v5);
  v46[3] = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityProofingIDType(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  v8 = *(_QWORD *)(v51 + 64);
  v9 = __chkstk_darwin(v7);
  v47 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v53 = (char *)v46 - v10;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v46 - v17;
  v19 = defaultLogger()(v16);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Attempting to save the ID Type sent from the server", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v18, v11);
  sub_1000A1F54(a1 + 136, (uint64_t)v55, &qword_10063CF68);
  v24 = sub_1000A1F54((uint64_t)v55, (uint64_t)&v56, &qword_10063CF68);
  if (v57 == 1
    || (v58 = v56,
        v59 = v57,
        sub_1000A1F54((uint64_t)&v58, (uint64_t)&v60, &qword_10063F990),
        v24 = sub_1000A1F54((uint64_t)&v60, (uint64_t)&v61, &qword_10063F990),
        v61 == 2))
  {
    v25 = defaultLogger()(v24);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "ID TYPE not sent from the server", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v23)(v15, v11);
  }
  else
  {
    v31 = v51;
    v30 = v52;
    if ((v61 & 1) != 0)
      v32 = (unsigned int *)&enum case for IdentityProofingIDType.stateID(_:);
    else
      v32 = (unsigned int *)&enum case for IdentityProofingIDType.dl(_:);
    v33 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v53, *v32, v52);
    v34 = type metadata accessor for IdentityProofingDataContext();
    swift_allocObject(v34, 24, 7);
    v35 = v54;
    sub_1000D6044();
    if (v35)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    }
    else
    {
      v37 = v36;
      v38 = v47;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v47, v33, v30);
      v39 = *(unsigned __int8 *)(v31 + 80);
      v40 = (v39 + 48) & ~v39;
      v41 = (char *)swift_allocObject(&unk_1006165C8, v40 + v8, v39 | 7);
      v42 = v48;
      *((_QWORD *)v41 + 2) = v37;
      *((_QWORD *)v41 + 3) = v42;
      v43 = v37;
      v44 = v49;
      v45 = v50;
      *((_QWORD *)v41 + 4) = v50;
      *((_QWORD *)v41 + 5) = v44;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v41[v40], v38, v30);
      swift_retain(v43);
      swift_bridgeObjectRetain(v45);
      sub_1000D6570((uint64_t)sub_1003D9E48, (uint64_t)v41);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      swift_release(v43);
      return swift_release(v41);
    }
  }
}

uint64_t sub_1003D1024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;

  v25 = a4;
  v26 = a3;
  v24 = a2;
  v5 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  v6 = __chkstk_darwin(v5);
  v29 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for ActionRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IdentityProofingDataContext();
  swift_allocObject(v13, 24, 7);
  sub_1000D6044();
  v15 = v14;
  sub_1003D1458(a1, (uint64_t)v12);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 48) & ~v16;
  v18 = (_QWORD *)swift_allocObject(&unk_100616320, v17 + v11, v16 | 7);
  v19 = v24;
  v18[2] = v15;
  v18[3] = v19;
  v20 = v25;
  v21 = v26;
  v18[4] = v26;
  v18[5] = v20;
  sub_100038AE0((uint64_t)v12, (uint64_t)v18 + v17, type metadata accessor for ActionRequest);
  swift_retain(v15);
  swift_bridgeObjectRetain(v21);
  sub_1000D6570((uint64_t)sub_1003D4C4C, (uint64_t)v18);
  swift_release(v18);
  return swift_release(v15);
}

uint64_t sub_1003D1458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D149C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003D14D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_10063F944);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100007EE8;
  *(_QWORD *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v5;
  return swift_task_switch(sub_1003CC39C, 0, 0);
}

uint64_t sub_1003D1540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;

  v1 = type metadata accessor for ActionRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v8 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8))
    goto LABEL_727;
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[12]);
  swift_bridgeObjectRelease(v7[13]);
  v9 = v7[15];
  if (v9 == 1)
    goto LABEL_5;
  if (v9 != 2)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7[17]);
LABEL_5:
    v10 = v7[19];
    if (v10 != 1)
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v7[21]);
    }
  }
  v11 = v7[23];
  if (v11 != 1)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v7[25]);
  }
  v374 = v5;
  swift_bridgeObjectRelease(v7[27]);
  swift_bridgeObjectRelease(v7[29]);
  v12 = v7[31];
  if (v12 != 1)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v7[33]);
  }
  v13 = (_QWORD *)((char *)v7 + v8[17]);
  v14 = type metadata accessor for WorkflowRecommendationResponse(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v372 = (v3 + 24) & ~v3;
    v373 = v0;
    v15 = v1;
    v16 = v6;
    v17 = v3;
    if (v13[3])
    {
      swift_bridgeObjectRelease(v13[1]);
      swift_bridgeObjectRelease(v13[3]);
      swift_bridgeObjectRelease(v13[5]);
      swift_bridgeObjectRelease(v13[7]);
      swift_bridgeObjectRelease(v13[9]);
      swift_bridgeObjectRelease(v13[11]);
    }
    v18 = (_QWORD *)((char *)v13 + *(int *)(v14 + 20));
    swift_bridgeObjectRelease(v18[1]);
    swift_bridgeObjectRelease(v18[3]);
    swift_bridgeObjectRelease(v18[5]);
    swift_bridgeObjectRelease(v18[7]);
    swift_bridgeObjectRelease(v18[9]);
    swift_bridgeObjectRelease(v18[11]);
    swift_bridgeObjectRelease(v18[14]);
    swift_bridgeObjectRelease(v18[16]);
    swift_bridgeObjectRelease(v18[17]);
    swift_bridgeObjectRelease(v18[19]);
    swift_bridgeObjectRelease(v18[20]);
    swift_bridgeObjectRelease(v18[22]);
    v19 = (int *)type metadata accessor for Workflow(0);
    v20 = (char *)v18 + v19[18];
    v21 = type metadata accessor for HardwareAttestationType(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[19]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[20]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[21] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[23]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[24]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[25]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[28]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[29]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[30]));
    v23 = (_QWORD *)((char *)v18 + v19[38]);
    v24 = v23[1];
    v3 = v17;
    v6 = v16;
    v1 = v15;
    v0 = v373;
    if (v24 != 1)
    {
      swift_bridgeObjectRelease(v24);
      if (v23[104] != 1)
      {
        v25 = v23[2];
        if (v25 != 1)
          swift_bridgeObjectRelease(v25);
        v26 = v23[6];
        if (v26 != 1)
          swift_bridgeObjectRelease(v26);
        v27 = v23[10];
        if (v27 != 1)
          swift_bridgeObjectRelease(v27);
        v28 = v23[14];
        if (v28 != 1)
          swift_bridgeObjectRelease(v28);
        v29 = v23[18];
        if (v29 != 1)
          swift_bridgeObjectRelease(v29);
        v30 = v23[22];
        if (v30 != 1)
          swift_bridgeObjectRelease(v30);
        v31 = v23[26];
        if (v31 != 1)
          swift_bridgeObjectRelease(v31);
        v32 = v23[30];
        if (v32 != 1)
          swift_bridgeObjectRelease(v32);
        v33 = v23[34];
        if (v33 != 1)
          swift_bridgeObjectRelease(v33);
        v34 = v23[38];
        if (v34 != 1)
          swift_bridgeObjectRelease(v34);
        v35 = v23[42];
        if (v35 != 1)
          swift_bridgeObjectRelease(v35);
        v36 = v23[46];
        if (v36 != 1)
          swift_bridgeObjectRelease(v36);
        v37 = v23[50];
        if (v37 != 1)
          swift_bridgeObjectRelease(v37);
        v38 = v23[54];
        if (v38 != 1)
          swift_bridgeObjectRelease(v38);
        v39 = v23[58];
        if (v39 != 1)
          swift_bridgeObjectRelease(v39);
        v40 = v23[62];
        if (v40 != 1)
          swift_bridgeObjectRelease(v40);
        v41 = v23[66];
        if (v41 != 1)
          swift_bridgeObjectRelease(v41);
        v42 = v23[70];
        if (v42 != 1)
          swift_bridgeObjectRelease(v42);
        v43 = v23[74];
        if (v43 != 1)
          swift_bridgeObjectRelease(v43);
        v44 = v23[78];
        if (v44 != 1)
          swift_bridgeObjectRelease(v44);
        v45 = v23[82];
        if (v45 != 1)
          swift_bridgeObjectRelease(v45);
        v46 = v23[86];
        if (v46 != 1)
          swift_bridgeObjectRelease(v46);
        v47 = v23[90];
        if (v47 != 1)
          swift_bridgeObjectRelease(v47);
        v48 = v23[94];
        if (v48 != 1)
          swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(v23[104]);
        swift_bridgeObjectRelease(v23[105]);
      }
      if (v23[208] != 1)
      {
        v49 = v23[106];
        if (v49 != 1)
          swift_bridgeObjectRelease(v49);
        v50 = v23[110];
        if (v50 != 1)
          swift_bridgeObjectRelease(v50);
        v51 = v23[114];
        if (v51 != 1)
          swift_bridgeObjectRelease(v51);
        v52 = v23[118];
        if (v52 != 1)
          swift_bridgeObjectRelease(v52);
        v53 = v23[122];
        if (v53 != 1)
          swift_bridgeObjectRelease(v53);
        v54 = v23[126];
        if (v54 != 1)
          swift_bridgeObjectRelease(v54);
        v55 = v23[130];
        if (v55 != 1)
          swift_bridgeObjectRelease(v55);
        v56 = v23[134];
        if (v56 != 1)
          swift_bridgeObjectRelease(v56);
        v57 = v23[138];
        if (v57 != 1)
          swift_bridgeObjectRelease(v57);
        v58 = v23[142];
        if (v58 != 1)
          swift_bridgeObjectRelease(v58);
        v59 = v23[146];
        if (v59 != 1)
          swift_bridgeObjectRelease(v59);
        v60 = v23[150];
        if (v60 != 1)
          swift_bridgeObjectRelease(v60);
        v61 = v23[154];
        if (v61 != 1)
          swift_bridgeObjectRelease(v61);
        v62 = v23[158];
        if (v62 != 1)
          swift_bridgeObjectRelease(v62);
        v63 = v23[162];
        if (v63 != 1)
          swift_bridgeObjectRelease(v63);
        v64 = v23[166];
        if (v64 != 1)
          swift_bridgeObjectRelease(v64);
        v65 = v23[170];
        if (v65 != 1)
          swift_bridgeObjectRelease(v65);
        v66 = v23[174];
        if (v66 != 1)
          swift_bridgeObjectRelease(v66);
        v67 = v23[178];
        if (v67 != 1)
          swift_bridgeObjectRelease(v67);
        v68 = v23[182];
        if (v68 != 1)
          swift_bridgeObjectRelease(v68);
        v69 = v23[186];
        if (v69 != 1)
          swift_bridgeObjectRelease(v69);
        v70 = v23[190];
        if (v70 != 1)
          swift_bridgeObjectRelease(v70);
        v71 = v23[194];
        if (v71 != 1)
          swift_bridgeObjectRelease(v71);
        v72 = v23[198];
        if (v72 != 1)
          swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v23[208]);
        swift_bridgeObjectRelease(v23[209]);
      }
      if (v23[312] != 1)
      {
        v73 = v23[210];
        if (v73 != 1)
          swift_bridgeObjectRelease(v73);
        v74 = v23[214];
        if (v74 != 1)
          swift_bridgeObjectRelease(v74);
        v75 = v23[218];
        if (v75 != 1)
          swift_bridgeObjectRelease(v75);
        v76 = v23[222];
        if (v76 != 1)
          swift_bridgeObjectRelease(v76);
        v77 = v23[226];
        if (v77 != 1)
          swift_bridgeObjectRelease(v77);
        v78 = v23[230];
        if (v78 != 1)
          swift_bridgeObjectRelease(v78);
        v79 = v23[234];
        if (v79 != 1)
          swift_bridgeObjectRelease(v79);
        v80 = v23[238];
        if (v80 != 1)
          swift_bridgeObjectRelease(v80);
        v81 = v23[242];
        if (v81 != 1)
          swift_bridgeObjectRelease(v81);
        v82 = v23[246];
        if (v82 != 1)
          swift_bridgeObjectRelease(v82);
        v83 = v23[250];
        if (v83 != 1)
          swift_bridgeObjectRelease(v83);
        v84 = v23[254];
        if (v84 != 1)
          swift_bridgeObjectRelease(v84);
        v85 = v23[258];
        if (v85 != 1)
          swift_bridgeObjectRelease(v85);
        v86 = v23[262];
        if (v86 != 1)
          swift_bridgeObjectRelease(v86);
        v87 = v23[266];
        if (v87 != 1)
          swift_bridgeObjectRelease(v87);
        v88 = v23[270];
        if (v88 != 1)
          swift_bridgeObjectRelease(v88);
        v89 = v23[274];
        if (v89 != 1)
          swift_bridgeObjectRelease(v89);
        v90 = v23[278];
        if (v90 != 1)
          swift_bridgeObjectRelease(v90);
        v91 = v23[282];
        if (v91 != 1)
          swift_bridgeObjectRelease(v91);
        v92 = v23[286];
        if (v92 != 1)
          swift_bridgeObjectRelease(v92);
        v93 = v23[290];
        if (v93 != 1)
          swift_bridgeObjectRelease(v93);
        v94 = v23[294];
        if (v94 != 1)
          swift_bridgeObjectRelease(v94);
        v95 = v23[298];
        if (v95 != 1)
          swift_bridgeObjectRelease(v95);
        v96 = v23[302];
        if (v96 != 1)
          swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v23[312]);
        swift_bridgeObjectRelease(v23[313]);
      }
      if (v23[416] != 1)
      {
        v97 = v23[314];
        if (v97 != 1)
          swift_bridgeObjectRelease(v97);
        v98 = v23[318];
        if (v98 != 1)
          swift_bridgeObjectRelease(v98);
        v99 = v23[322];
        if (v99 != 1)
          swift_bridgeObjectRelease(v99);
        v100 = v23[326];
        if (v100 != 1)
          swift_bridgeObjectRelease(v100);
        v101 = v23[330];
        if (v101 != 1)
          swift_bridgeObjectRelease(v101);
        v102 = v23[334];
        if (v102 != 1)
          swift_bridgeObjectRelease(v102);
        v103 = v23[338];
        if (v103 != 1)
          swift_bridgeObjectRelease(v103);
        v104 = v23[342];
        if (v104 != 1)
          swift_bridgeObjectRelease(v104);
        v105 = v23[346];
        if (v105 != 1)
          swift_bridgeObjectRelease(v105);
        v106 = v23[350];
        if (v106 != 1)
          swift_bridgeObjectRelease(v106);
        v107 = v23[354];
        if (v107 != 1)
          swift_bridgeObjectRelease(v107);
        v108 = v23[358];
        if (v108 != 1)
          swift_bridgeObjectRelease(v108);
        v109 = v23[362];
        if (v109 != 1)
          swift_bridgeObjectRelease(v109);
        v110 = v23[366];
        if (v110 != 1)
          swift_bridgeObjectRelease(v110);
        v111 = v23[370];
        if (v111 != 1)
          swift_bridgeObjectRelease(v111);
        v112 = v23[374];
        if (v112 != 1)
          swift_bridgeObjectRelease(v112);
        v113 = v23[378];
        if (v113 != 1)
          swift_bridgeObjectRelease(v113);
        v114 = v23[382];
        if (v114 != 1)
          swift_bridgeObjectRelease(v114);
        v115 = v23[386];
        if (v115 != 1)
          swift_bridgeObjectRelease(v115);
        v116 = v23[390];
        if (v116 != 1)
          swift_bridgeObjectRelease(v116);
        v117 = v23[394];
        if (v117 != 1)
          swift_bridgeObjectRelease(v117);
        v118 = v23[398];
        if (v118 != 1)
          swift_bridgeObjectRelease(v118);
        v119 = v23[402];
        if (v119 != 1)
          swift_bridgeObjectRelease(v119);
        v120 = v23[406];
        if (v120 != 1)
          swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v23[416]);
        swift_bridgeObjectRelease(v23[417]);
      }
      if (v23[520] != 1)
      {
        v121 = v23[418];
        if (v121 != 1)
          swift_bridgeObjectRelease(v121);
        v122 = v23[422];
        if (v122 != 1)
          swift_bridgeObjectRelease(v122);
        v123 = v23[426];
        if (v123 != 1)
          swift_bridgeObjectRelease(v123);
        v124 = v23[430];
        if (v124 != 1)
          swift_bridgeObjectRelease(v124);
        v125 = v23[434];
        if (v125 != 1)
          swift_bridgeObjectRelease(v125);
        v126 = v23[438];
        if (v126 != 1)
          swift_bridgeObjectRelease(v126);
        v127 = v23[442];
        if (v127 != 1)
          swift_bridgeObjectRelease(v127);
        v128 = v23[446];
        if (v128 != 1)
          swift_bridgeObjectRelease(v128);
        v129 = v23[450];
        if (v129 != 1)
          swift_bridgeObjectRelease(v129);
        v130 = v23[454];
        if (v130 != 1)
          swift_bridgeObjectRelease(v130);
        v131 = v23[458];
        if (v131 != 1)
          swift_bridgeObjectRelease(v131);
        v132 = v23[462];
        if (v132 != 1)
          swift_bridgeObjectRelease(v132);
        v133 = v23[466];
        if (v133 != 1)
          swift_bridgeObjectRelease(v133);
        v134 = v23[470];
        if (v134 != 1)
          swift_bridgeObjectRelease(v134);
        v135 = v23[474];
        if (v135 != 1)
          swift_bridgeObjectRelease(v135);
        v136 = v23[478];
        if (v136 != 1)
          swift_bridgeObjectRelease(v136);
        v137 = v23[482];
        if (v137 != 1)
          swift_bridgeObjectRelease(v137);
        v138 = v23[486];
        if (v138 != 1)
          swift_bridgeObjectRelease(v138);
        v139 = v23[490];
        if (v139 != 1)
          swift_bridgeObjectRelease(v139);
        v140 = v23[494];
        if (v140 != 1)
          swift_bridgeObjectRelease(v140);
        v141 = v23[498];
        if (v141 != 1)
          swift_bridgeObjectRelease(v141);
        v142 = v23[502];
        if (v142 != 1)
          swift_bridgeObjectRelease(v142);
        v143 = v23[506];
        if (v143 != 1)
          swift_bridgeObjectRelease(v143);
        v144 = v23[510];
        if (v144 != 1)
          swift_bridgeObjectRelease(v144);
        swift_bridgeObjectRelease(v23[520]);
        swift_bridgeObjectRelease(v23[521]);
      }
      if (v23[624] != 1)
      {
        v145 = v23[522];
        if (v145 != 1)
          swift_bridgeObjectRelease(v145);
        v146 = v23[526];
        if (v146 != 1)
          swift_bridgeObjectRelease(v146);
        v147 = v23[530];
        if (v147 != 1)
          swift_bridgeObjectRelease(v147);
        v148 = v23[534];
        if (v148 != 1)
          swift_bridgeObjectRelease(v148);
        v149 = v23[538];
        if (v149 != 1)
          swift_bridgeObjectRelease(v149);
        v150 = v23[542];
        if (v150 != 1)
          swift_bridgeObjectRelease(v150);
        v151 = v23[546];
        if (v151 != 1)
          swift_bridgeObjectRelease(v151);
        v152 = v23[550];
        if (v152 != 1)
          swift_bridgeObjectRelease(v152);
        v153 = v23[554];
        if (v153 != 1)
          swift_bridgeObjectRelease(v153);
        v154 = v23[558];
        if (v154 != 1)
          swift_bridgeObjectRelease(v154);
        v155 = v23[562];
        if (v155 != 1)
          swift_bridgeObjectRelease(v155);
        v156 = v23[566];
        if (v156 != 1)
          swift_bridgeObjectRelease(v156);
        v157 = v23[570];
        if (v157 != 1)
          swift_bridgeObjectRelease(v157);
        v158 = v23[574];
        if (v158 != 1)
          swift_bridgeObjectRelease(v158);
        v159 = v23[578];
        if (v159 != 1)
          swift_bridgeObjectRelease(v159);
        v160 = v23[582];
        if (v160 != 1)
          swift_bridgeObjectRelease(v160);
        v161 = v23[586];
        if (v161 != 1)
          swift_bridgeObjectRelease(v161);
        v162 = v23[590];
        if (v162 != 1)
          swift_bridgeObjectRelease(v162);
        v163 = v23[594];
        if (v163 != 1)
          swift_bridgeObjectRelease(v163);
        v164 = v23[598];
        if (v164 != 1)
          swift_bridgeObjectRelease(v164);
        v165 = v23[602];
        if (v165 != 1)
          swift_bridgeObjectRelease(v165);
        v166 = v23[606];
        if (v166 != 1)
          swift_bridgeObjectRelease(v166);
        v167 = v23[610];
        if (v167 != 1)
          swift_bridgeObjectRelease(v167);
        v168 = v23[614];
        if (v168 != 1)
          swift_bridgeObjectRelease(v168);
        swift_bridgeObjectRelease(v23[624]);
        swift_bridgeObjectRelease(v23[625]);
      }
      if (v23[728] != 1)
      {
        v169 = v23[626];
        if (v169 != 1)
          swift_bridgeObjectRelease(v169);
        v170 = v23[630];
        if (v170 != 1)
          swift_bridgeObjectRelease(v170);
        v171 = v23[634];
        if (v171 != 1)
          swift_bridgeObjectRelease(v171);
        v172 = v23[638];
        if (v172 != 1)
          swift_bridgeObjectRelease(v172);
        v173 = v23[642];
        if (v173 != 1)
          swift_bridgeObjectRelease(v173);
        v174 = v23[646];
        if (v174 != 1)
          swift_bridgeObjectRelease(v174);
        v175 = v23[650];
        if (v175 != 1)
          swift_bridgeObjectRelease(v175);
        v176 = v23[654];
        if (v176 != 1)
          swift_bridgeObjectRelease(v176);
        v177 = v23[658];
        if (v177 != 1)
          swift_bridgeObjectRelease(v177);
        v178 = v23[662];
        if (v178 != 1)
          swift_bridgeObjectRelease(v178);
        v179 = v23[666];
        if (v179 != 1)
          swift_bridgeObjectRelease(v179);
        v180 = v23[670];
        if (v180 != 1)
          swift_bridgeObjectRelease(v180);
        v181 = v23[674];
        if (v181 != 1)
          swift_bridgeObjectRelease(v181);
        v182 = v23[678];
        if (v182 != 1)
          swift_bridgeObjectRelease(v182);
        v183 = v23[682];
        if (v183 != 1)
          swift_bridgeObjectRelease(v183);
        v184 = v23[686];
        if (v184 != 1)
          swift_bridgeObjectRelease(v184);
        v185 = v23[690];
        if (v185 != 1)
          swift_bridgeObjectRelease(v185);
        v186 = v23[694];
        if (v186 != 1)
          swift_bridgeObjectRelease(v186);
        v187 = v23[698];
        if (v187 != 1)
          swift_bridgeObjectRelease(v187);
        v188 = v23[702];
        if (v188 != 1)
          swift_bridgeObjectRelease(v188);
        v189 = v23[706];
        if (v189 != 1)
          swift_bridgeObjectRelease(v189);
        v190 = v23[710];
        if (v190 != 1)
          swift_bridgeObjectRelease(v190);
        v191 = v23[714];
        if (v191 != 1)
          swift_bridgeObjectRelease(v191);
        v192 = v23[718];
        if (v192 != 1)
          swift_bridgeObjectRelease(v192);
        swift_bridgeObjectRelease(v23[728]);
        swift_bridgeObjectRelease(v23[729]);
      }
      swift_bridgeObjectRelease(v23[730]);
    }
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[39]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[40] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[41] + 8));
    v4 = v372;
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v8[19]));
  v193 = (_QWORD *)((char *)v7 + v8[25]);
  v194 = v193[1];
  if (v194)
  {
    swift_bridgeObjectRelease(v194);
    swift_bridgeObjectRelease(v193[3]);
    swift_bridgeObjectRelease(v193[5]);
    swift_bridgeObjectRelease(v193[7]);
  }
  v195 = (_QWORD *)((char *)v7 + v8[26]);
  v196 = v195[1];
  if (v196)
  {
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v195[3]);
    swift_bridgeObjectRelease(v195[5]);
    swift_bridgeObjectRelease(v195[7]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v8[27] + 8));
  v197 = (char *)v7 + v8[28];
  v198 = sub_100004828(&qword_100633968);
  v199 = *(_QWORD *)(v198 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v198))
    (*(void (**)(char *, uint64_t))(v199 + 8))(v197, v198);
  v200 = (_QWORD *)((char *)v7 + v8[29]);
  v201 = v200[1];
  v5 = v374;
  if (v201 != 1)
  {
    swift_bridgeObjectRelease(v201);
    if (v200[104] != 1)
    {
      v202 = v200[2];
      if (v202 != 1)
        swift_bridgeObjectRelease(v202);
      v203 = v200[6];
      if (v203 != 1)
        swift_bridgeObjectRelease(v203);
      v204 = v200[10];
      if (v204 != 1)
        swift_bridgeObjectRelease(v204);
      v205 = v200[14];
      if (v205 != 1)
        swift_bridgeObjectRelease(v205);
      v206 = v200[18];
      if (v206 != 1)
        swift_bridgeObjectRelease(v206);
      v207 = v200[22];
      if (v207 != 1)
        swift_bridgeObjectRelease(v207);
      v208 = v200[26];
      if (v208 != 1)
        swift_bridgeObjectRelease(v208);
      v209 = v200[30];
      if (v209 != 1)
        swift_bridgeObjectRelease(v209);
      v210 = v200[34];
      if (v210 != 1)
        swift_bridgeObjectRelease(v210);
      v211 = v200[38];
      if (v211 != 1)
        swift_bridgeObjectRelease(v211);
      v212 = v200[42];
      if (v212 != 1)
        swift_bridgeObjectRelease(v212);
      v213 = v200[46];
      if (v213 != 1)
        swift_bridgeObjectRelease(v213);
      v214 = v200[50];
      if (v214 != 1)
        swift_bridgeObjectRelease(v214);
      v215 = v200[54];
      if (v215 != 1)
        swift_bridgeObjectRelease(v215);
      v216 = v200[58];
      if (v216 != 1)
        swift_bridgeObjectRelease(v216);
      v217 = v200[62];
      if (v217 != 1)
        swift_bridgeObjectRelease(v217);
      v218 = v200[66];
      if (v218 != 1)
        swift_bridgeObjectRelease(v218);
      v219 = v200[70];
      if (v219 != 1)
        swift_bridgeObjectRelease(v219);
      v220 = v200[74];
      if (v220 != 1)
        swift_bridgeObjectRelease(v220);
      v221 = v200[78];
      if (v221 != 1)
        swift_bridgeObjectRelease(v221);
      v222 = v200[82];
      if (v222 != 1)
        swift_bridgeObjectRelease(v222);
      v223 = v200[86];
      if (v223 != 1)
        swift_bridgeObjectRelease(v223);
      v224 = v200[90];
      if (v224 != 1)
        swift_bridgeObjectRelease(v224);
      v225 = v200[94];
      if (v225 != 1)
        swift_bridgeObjectRelease(v225);
      swift_bridgeObjectRelease(v200[104]);
      swift_bridgeObjectRelease(v200[105]);
    }
    if (v200[208] != 1)
    {
      v226 = v200[106];
      if (v226 != 1)
        swift_bridgeObjectRelease(v226);
      v227 = v200[110];
      if (v227 != 1)
        swift_bridgeObjectRelease(v227);
      v228 = v200[114];
      if (v228 != 1)
        swift_bridgeObjectRelease(v228);
      v229 = v200[118];
      if (v229 != 1)
        swift_bridgeObjectRelease(v229);
      v230 = v200[122];
      if (v230 != 1)
        swift_bridgeObjectRelease(v230);
      v231 = v200[126];
      if (v231 != 1)
        swift_bridgeObjectRelease(v231);
      v232 = v200[130];
      if (v232 != 1)
        swift_bridgeObjectRelease(v232);
      v233 = v200[134];
      if (v233 != 1)
        swift_bridgeObjectRelease(v233);
      v234 = v200[138];
      if (v234 != 1)
        swift_bridgeObjectRelease(v234);
      v235 = v200[142];
      if (v235 != 1)
        swift_bridgeObjectRelease(v235);
      v236 = v200[146];
      if (v236 != 1)
        swift_bridgeObjectRelease(v236);
      v237 = v200[150];
      if (v237 != 1)
        swift_bridgeObjectRelease(v237);
      v238 = v200[154];
      if (v238 != 1)
        swift_bridgeObjectRelease(v238);
      v239 = v200[158];
      if (v239 != 1)
        swift_bridgeObjectRelease(v239);
      v240 = v200[162];
      if (v240 != 1)
        swift_bridgeObjectRelease(v240);
      v241 = v200[166];
      if (v241 != 1)
        swift_bridgeObjectRelease(v241);
      v242 = v200[170];
      if (v242 != 1)
        swift_bridgeObjectRelease(v242);
      v243 = v200[174];
      if (v243 != 1)
        swift_bridgeObjectRelease(v243);
      v244 = v200[178];
      if (v244 != 1)
        swift_bridgeObjectRelease(v244);
      v245 = v200[182];
      if (v245 != 1)
        swift_bridgeObjectRelease(v245);
      v246 = v200[186];
      if (v246 != 1)
        swift_bridgeObjectRelease(v246);
      v247 = v200[190];
      if (v247 != 1)
        swift_bridgeObjectRelease(v247);
      v248 = v200[194];
      if (v248 != 1)
        swift_bridgeObjectRelease(v248);
      v249 = v200[198];
      if (v249 != 1)
        swift_bridgeObjectRelease(v249);
      swift_bridgeObjectRelease(v200[208]);
      swift_bridgeObjectRelease(v200[209]);
    }
    if (v200[312] != 1)
    {
      v250 = v200[210];
      if (v250 != 1)
        swift_bridgeObjectRelease(v250);
      v251 = v200[214];
      if (v251 != 1)
        swift_bridgeObjectRelease(v251);
      v252 = v200[218];
      if (v252 != 1)
        swift_bridgeObjectRelease(v252);
      v253 = v200[222];
      if (v253 != 1)
        swift_bridgeObjectRelease(v253);
      v254 = v200[226];
      if (v254 != 1)
        swift_bridgeObjectRelease(v254);
      v255 = v200[230];
      if (v255 != 1)
        swift_bridgeObjectRelease(v255);
      v256 = v200[234];
      if (v256 != 1)
        swift_bridgeObjectRelease(v256);
      v257 = v200[238];
      if (v257 != 1)
        swift_bridgeObjectRelease(v257);
      v258 = v200[242];
      if (v258 != 1)
        swift_bridgeObjectRelease(v258);
      v259 = v200[246];
      if (v259 != 1)
        swift_bridgeObjectRelease(v259);
      v260 = v200[250];
      if (v260 != 1)
        swift_bridgeObjectRelease(v260);
      v261 = v200[254];
      if (v261 != 1)
        swift_bridgeObjectRelease(v261);
      v262 = v200[258];
      if (v262 != 1)
        swift_bridgeObjectRelease(v262);
      v263 = v200[262];
      if (v263 != 1)
        swift_bridgeObjectRelease(v263);
      v264 = v200[266];
      if (v264 != 1)
        swift_bridgeObjectRelease(v264);
      v265 = v200[270];
      if (v265 != 1)
        swift_bridgeObjectRelease(v265);
      v266 = v200[274];
      if (v266 != 1)
        swift_bridgeObjectRelease(v266);
      v267 = v200[278];
      if (v267 != 1)
        swift_bridgeObjectRelease(v267);
      v268 = v200[282];
      if (v268 != 1)
        swift_bridgeObjectRelease(v268);
      v269 = v200[286];
      if (v269 != 1)
        swift_bridgeObjectRelease(v269);
      v270 = v200[290];
      if (v270 != 1)
        swift_bridgeObjectRelease(v270);
      v271 = v200[294];
      if (v271 != 1)
        swift_bridgeObjectRelease(v271);
      v272 = v200[298];
      if (v272 != 1)
        swift_bridgeObjectRelease(v272);
      v273 = v200[302];
      if (v273 != 1)
        swift_bridgeObjectRelease(v273);
      swift_bridgeObjectRelease(v200[312]);
      swift_bridgeObjectRelease(v200[313]);
    }
    if (v200[416] != 1)
    {
      v274 = v200[314];
      if (v274 != 1)
        swift_bridgeObjectRelease(v274);
      v275 = v200[318];
      if (v275 != 1)
        swift_bridgeObjectRelease(v275);
      v276 = v200[322];
      if (v276 != 1)
        swift_bridgeObjectRelease(v276);
      v277 = v200[326];
      if (v277 != 1)
        swift_bridgeObjectRelease(v277);
      v278 = v200[330];
      if (v278 != 1)
        swift_bridgeObjectRelease(v278);
      v279 = v200[334];
      if (v279 != 1)
        swift_bridgeObjectRelease(v279);
      v280 = v200[338];
      if (v280 != 1)
        swift_bridgeObjectRelease(v280);
      v281 = v200[342];
      if (v281 != 1)
        swift_bridgeObjectRelease(v281);
      v282 = v200[346];
      if (v282 != 1)
        swift_bridgeObjectRelease(v282);
      v283 = v200[350];
      if (v283 != 1)
        swift_bridgeObjectRelease(v283);
      v284 = v200[354];
      if (v284 != 1)
        swift_bridgeObjectRelease(v284);
      v285 = v200[358];
      if (v285 != 1)
        swift_bridgeObjectRelease(v285);
      v286 = v200[362];
      if (v286 != 1)
        swift_bridgeObjectRelease(v286);
      v287 = v200[366];
      if (v287 != 1)
        swift_bridgeObjectRelease(v287);
      v288 = v200[370];
      if (v288 != 1)
        swift_bridgeObjectRelease(v288);
      v289 = v200[374];
      if (v289 != 1)
        swift_bridgeObjectRelease(v289);
      v290 = v200[378];
      if (v290 != 1)
        swift_bridgeObjectRelease(v290);
      v291 = v200[382];
      if (v291 != 1)
        swift_bridgeObjectRelease(v291);
      v292 = v200[386];
      if (v292 != 1)
        swift_bridgeObjectRelease(v292);
      v293 = v200[390];
      if (v293 != 1)
        swift_bridgeObjectRelease(v293);
      v294 = v200[394];
      if (v294 != 1)
        swift_bridgeObjectRelease(v294);
      v295 = v200[398];
      if (v295 != 1)
        swift_bridgeObjectRelease(v295);
      v296 = v200[402];
      if (v296 != 1)
        swift_bridgeObjectRelease(v296);
      v297 = v200[406];
      if (v297 != 1)
        swift_bridgeObjectRelease(v297);
      swift_bridgeObjectRelease(v200[416]);
      swift_bridgeObjectRelease(v200[417]);
    }
    if (v200[520] != 1)
    {
      v298 = v200[418];
      if (v298 != 1)
        swift_bridgeObjectRelease(v298);
      v299 = v200[422];
      if (v299 != 1)
        swift_bridgeObjectRelease(v299);
      v300 = v200[426];
      if (v300 != 1)
        swift_bridgeObjectRelease(v300);
      v301 = v200[430];
      if (v301 != 1)
        swift_bridgeObjectRelease(v301);
      v302 = v200[434];
      if (v302 != 1)
        swift_bridgeObjectRelease(v302);
      v303 = v200[438];
      if (v303 != 1)
        swift_bridgeObjectRelease(v303);
      v304 = v200[442];
      if (v304 != 1)
        swift_bridgeObjectRelease(v304);
      v305 = v200[446];
      if (v305 != 1)
        swift_bridgeObjectRelease(v305);
      v306 = v200[450];
      if (v306 != 1)
        swift_bridgeObjectRelease(v306);
      v307 = v200[454];
      if (v307 != 1)
        swift_bridgeObjectRelease(v307);
      v308 = v200[458];
      if (v308 != 1)
        swift_bridgeObjectRelease(v308);
      v309 = v200[462];
      if (v309 != 1)
        swift_bridgeObjectRelease(v309);
      v310 = v200[466];
      if (v310 != 1)
        swift_bridgeObjectRelease(v310);
      v311 = v200[470];
      if (v311 != 1)
        swift_bridgeObjectRelease(v311);
      v312 = v200[474];
      if (v312 != 1)
        swift_bridgeObjectRelease(v312);
      v313 = v200[478];
      if (v313 != 1)
        swift_bridgeObjectRelease(v313);
      v314 = v200[482];
      if (v314 != 1)
        swift_bridgeObjectRelease(v314);
      v315 = v200[486];
      if (v315 != 1)
        swift_bridgeObjectRelease(v315);
      v316 = v200[490];
      if (v316 != 1)
        swift_bridgeObjectRelease(v316);
      v317 = v200[494];
      if (v317 != 1)
        swift_bridgeObjectRelease(v317);
      v318 = v200[498];
      if (v318 != 1)
        swift_bridgeObjectRelease(v318);
      v319 = v200[502];
      if (v319 != 1)
        swift_bridgeObjectRelease(v319);
      v320 = v200[506];
      if (v320 != 1)
        swift_bridgeObjectRelease(v320);
      v321 = v200[510];
      if (v321 != 1)
        swift_bridgeObjectRelease(v321);
      swift_bridgeObjectRelease(v200[520]);
      swift_bridgeObjectRelease(v200[521]);
    }
    if (v200[624] != 1)
    {
      v322 = v200[522];
      if (v322 != 1)
        swift_bridgeObjectRelease(v322);
      v323 = v200[526];
      if (v323 != 1)
        swift_bridgeObjectRelease(v323);
      v324 = v200[530];
      if (v324 != 1)
        swift_bridgeObjectRelease(v324);
      v325 = v200[534];
      if (v325 != 1)
        swift_bridgeObjectRelease(v325);
      v326 = v200[538];
      if (v326 != 1)
        swift_bridgeObjectRelease(v326);
      v327 = v200[542];
      if (v327 != 1)
        swift_bridgeObjectRelease(v327);
      v328 = v200[546];
      if (v328 != 1)
        swift_bridgeObjectRelease(v328);
      v329 = v200[550];
      if (v329 != 1)
        swift_bridgeObjectRelease(v329);
      v330 = v200[554];
      if (v330 != 1)
        swift_bridgeObjectRelease(v330);
      v331 = v200[558];
      if (v331 != 1)
        swift_bridgeObjectRelease(v331);
      v332 = v200[562];
      if (v332 != 1)
        swift_bridgeObjectRelease(v332);
      v333 = v200[566];
      if (v333 != 1)
        swift_bridgeObjectRelease(v333);
      v334 = v200[570];
      if (v334 != 1)
        swift_bridgeObjectRelease(v334);
      v335 = v200[574];
      if (v335 != 1)
        swift_bridgeObjectRelease(v335);
      v336 = v200[578];
      if (v336 != 1)
        swift_bridgeObjectRelease(v336);
      v337 = v200[582];
      if (v337 != 1)
        swift_bridgeObjectRelease(v337);
      v338 = v200[586];
      if (v338 != 1)
        swift_bridgeObjectRelease(v338);
      v339 = v200[590];
      if (v339 != 1)
        swift_bridgeObjectRelease(v339);
      v340 = v200[594];
      if (v340 != 1)
        swift_bridgeObjectRelease(v340);
      v341 = v200[598];
      if (v341 != 1)
        swift_bridgeObjectRelease(v341);
      v342 = v200[602];
      if (v342 != 1)
        swift_bridgeObjectRelease(v342);
      v343 = v200[606];
      if (v343 != 1)
        swift_bridgeObjectRelease(v343);
      v344 = v200[610];
      if (v344 != 1)
        swift_bridgeObjectRelease(v344);
      v345 = v200[614];
      if (v345 != 1)
        swift_bridgeObjectRelease(v345);
      swift_bridgeObjectRelease(v200[624]);
      swift_bridgeObjectRelease(v200[625]);
    }
    if (v200[728] != 1)
    {
      v346 = v200[626];
      if (v346 != 1)
        swift_bridgeObjectRelease(v346);
      v347 = v200[630];
      if (v347 != 1)
        swift_bridgeObjectRelease(v347);
      v348 = v200[634];
      if (v348 != 1)
        swift_bridgeObjectRelease(v348);
      v349 = v200[638];
      if (v349 != 1)
        swift_bridgeObjectRelease(v349);
      v350 = v200[642];
      if (v350 != 1)
        swift_bridgeObjectRelease(v350);
      v351 = v200[646];
      if (v351 != 1)
        swift_bridgeObjectRelease(v351);
      v352 = v200[650];
      if (v352 != 1)
        swift_bridgeObjectRelease(v352);
      v353 = v200[654];
      if (v353 != 1)
        swift_bridgeObjectRelease(v353);
      v354 = v200[658];
      if (v354 != 1)
        swift_bridgeObjectRelease(v354);
      v355 = v200[662];
      if (v355 != 1)
        swift_bridgeObjectRelease(v355);
      v356 = v200[666];
      if (v356 != 1)
        swift_bridgeObjectRelease(v356);
      v357 = v200[670];
      if (v357 != 1)
        swift_bridgeObjectRelease(v357);
      v358 = v200[674];
      if (v358 != 1)
        swift_bridgeObjectRelease(v358);
      v359 = v200[678];
      if (v359 != 1)
        swift_bridgeObjectRelease(v359);
      v360 = v200[682];
      if (v360 != 1)
        swift_bridgeObjectRelease(v360);
      v361 = v200[686];
      if (v361 != 1)
        swift_bridgeObjectRelease(v361);
      v362 = v200[690];
      if (v362 != 1)
        swift_bridgeObjectRelease(v362);
      v363 = v200[694];
      if (v363 != 1)
        swift_bridgeObjectRelease(v363);
      v364 = v200[698];
      if (v364 != 1)
        swift_bridgeObjectRelease(v364);
      v365 = v200[702];
      if (v365 != 1)
        swift_bridgeObjectRelease(v365);
      v366 = v200[706];
      if (v366 != 1)
        swift_bridgeObjectRelease(v366);
      v367 = v200[710];
      if (v367 != 1)
        swift_bridgeObjectRelease(v367);
      v368 = v200[714];
      if (v368 != 1)
        swift_bridgeObjectRelease(v368);
      v369 = v200[718];
      if (v369 != 1)
        swift_bridgeObjectRelease(v369);
      swift_bridgeObjectRelease(v200[728]);
      swift_bridgeObjectRelease(v200[729]);
    }
    swift_bridgeObjectRelease(v200[730]);
  }
LABEL_727:
  v370 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 24) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v370 + 8));
  return swift_deallocObject(v0, ((v370 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003D303C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for ActionRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = v1 + v5;
  v10 = (uint64_t *)(v1 + v6);
  v11 = *v10;
  v12 = v10[1];
  v13 = *(_QWORD *)(v1 + v7);
  v14 = (_QWORD *)swift_task_alloc(dword_10063F954);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100007EE8;
  return sub_1003CC2F4(a1, v8, v9, v11, v12, v13);
}

uint64_t sub_1003D30F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100632BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D3140()
{
  return sub_1003D9E6C(type metadata accessor for ActionRequest, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, char *))sub_1003CC514);
}

uint64_t sub_1003D3168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;

  v1 = type metadata accessor for ActionRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v8 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8))
    goto LABEL_727;
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[12]);
  swift_bridgeObjectRelease(v7[13]);
  v9 = v7[15];
  if (v9 == 1)
    goto LABEL_5;
  if (v9 != 2)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7[17]);
LABEL_5:
    v10 = v7[19];
    if (v10 != 1)
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v7[21]);
    }
  }
  v11 = v7[23];
  if (v11 != 1)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v7[25]);
  }
  v373 = v0 + v4;
  swift_bridgeObjectRelease(v7[27]);
  swift_bridgeObjectRelease(v7[29]);
  v12 = v7[31];
  if (v12 != 1)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v7[33]);
  }
  v13 = (_QWORD *)((char *)v7 + v8[17]);
  v14 = type metadata accessor for WorkflowRecommendationResponse(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v371 = v0;
    v372 = (v3 + 48) & ~v3;
    v15 = v1;
    v16 = v5;
    v17 = v3;
    if (v13[3])
    {
      swift_bridgeObjectRelease(v13[1]);
      swift_bridgeObjectRelease(v13[3]);
      swift_bridgeObjectRelease(v13[5]);
      swift_bridgeObjectRelease(v13[7]);
      swift_bridgeObjectRelease(v13[9]);
      swift_bridgeObjectRelease(v13[11]);
    }
    v18 = (_QWORD *)((char *)v13 + *(int *)(v14 + 20));
    swift_bridgeObjectRelease(v18[1]);
    swift_bridgeObjectRelease(v18[3]);
    swift_bridgeObjectRelease(v18[5]);
    swift_bridgeObjectRelease(v18[7]);
    swift_bridgeObjectRelease(v18[9]);
    swift_bridgeObjectRelease(v18[11]);
    swift_bridgeObjectRelease(v18[14]);
    swift_bridgeObjectRelease(v18[16]);
    swift_bridgeObjectRelease(v18[17]);
    swift_bridgeObjectRelease(v18[19]);
    swift_bridgeObjectRelease(v18[20]);
    swift_bridgeObjectRelease(v18[22]);
    v19 = (int *)type metadata accessor for Workflow(0);
    v20 = (char *)v18 + v19[18];
    v21 = type metadata accessor for HardwareAttestationType(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[19]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[20]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[21] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[23]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[24]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[25]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[28]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[29]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[30]));
    v23 = (_QWORD *)((char *)v18 + v19[38]);
    v24 = v23[1];
    v3 = v17;
    v5 = v16;
    v1 = v15;
    v0 = v371;
    if (v24 != 1)
    {
      swift_bridgeObjectRelease(v24);
      if (v23[104] != 1)
      {
        v25 = v23[2];
        if (v25 != 1)
          swift_bridgeObjectRelease(v25);
        v26 = v23[6];
        if (v26 != 1)
          swift_bridgeObjectRelease(v26);
        v27 = v23[10];
        if (v27 != 1)
          swift_bridgeObjectRelease(v27);
        v28 = v23[14];
        if (v28 != 1)
          swift_bridgeObjectRelease(v28);
        v29 = v23[18];
        if (v29 != 1)
          swift_bridgeObjectRelease(v29);
        v30 = v23[22];
        if (v30 != 1)
          swift_bridgeObjectRelease(v30);
        v31 = v23[26];
        if (v31 != 1)
          swift_bridgeObjectRelease(v31);
        v32 = v23[30];
        if (v32 != 1)
          swift_bridgeObjectRelease(v32);
        v33 = v23[34];
        if (v33 != 1)
          swift_bridgeObjectRelease(v33);
        v34 = v23[38];
        if (v34 != 1)
          swift_bridgeObjectRelease(v34);
        v35 = v23[42];
        if (v35 != 1)
          swift_bridgeObjectRelease(v35);
        v36 = v23[46];
        if (v36 != 1)
          swift_bridgeObjectRelease(v36);
        v37 = v23[50];
        if (v37 != 1)
          swift_bridgeObjectRelease(v37);
        v38 = v23[54];
        if (v38 != 1)
          swift_bridgeObjectRelease(v38);
        v39 = v23[58];
        if (v39 != 1)
          swift_bridgeObjectRelease(v39);
        v40 = v23[62];
        if (v40 != 1)
          swift_bridgeObjectRelease(v40);
        v41 = v23[66];
        if (v41 != 1)
          swift_bridgeObjectRelease(v41);
        v42 = v23[70];
        if (v42 != 1)
          swift_bridgeObjectRelease(v42);
        v43 = v23[74];
        if (v43 != 1)
          swift_bridgeObjectRelease(v43);
        v44 = v23[78];
        if (v44 != 1)
          swift_bridgeObjectRelease(v44);
        v45 = v23[82];
        if (v45 != 1)
          swift_bridgeObjectRelease(v45);
        v46 = v23[86];
        if (v46 != 1)
          swift_bridgeObjectRelease(v46);
        v47 = v23[90];
        if (v47 != 1)
          swift_bridgeObjectRelease(v47);
        v48 = v23[94];
        if (v48 != 1)
          swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(v23[104]);
        swift_bridgeObjectRelease(v23[105]);
      }
      if (v23[208] != 1)
      {
        v49 = v23[106];
        if (v49 != 1)
          swift_bridgeObjectRelease(v49);
        v50 = v23[110];
        if (v50 != 1)
          swift_bridgeObjectRelease(v50);
        v51 = v23[114];
        if (v51 != 1)
          swift_bridgeObjectRelease(v51);
        v52 = v23[118];
        if (v52 != 1)
          swift_bridgeObjectRelease(v52);
        v53 = v23[122];
        if (v53 != 1)
          swift_bridgeObjectRelease(v53);
        v54 = v23[126];
        if (v54 != 1)
          swift_bridgeObjectRelease(v54);
        v55 = v23[130];
        if (v55 != 1)
          swift_bridgeObjectRelease(v55);
        v56 = v23[134];
        if (v56 != 1)
          swift_bridgeObjectRelease(v56);
        v57 = v23[138];
        if (v57 != 1)
          swift_bridgeObjectRelease(v57);
        v58 = v23[142];
        if (v58 != 1)
          swift_bridgeObjectRelease(v58);
        v59 = v23[146];
        if (v59 != 1)
          swift_bridgeObjectRelease(v59);
        v60 = v23[150];
        if (v60 != 1)
          swift_bridgeObjectRelease(v60);
        v61 = v23[154];
        if (v61 != 1)
          swift_bridgeObjectRelease(v61);
        v62 = v23[158];
        if (v62 != 1)
          swift_bridgeObjectRelease(v62);
        v63 = v23[162];
        if (v63 != 1)
          swift_bridgeObjectRelease(v63);
        v64 = v23[166];
        if (v64 != 1)
          swift_bridgeObjectRelease(v64);
        v65 = v23[170];
        if (v65 != 1)
          swift_bridgeObjectRelease(v65);
        v66 = v23[174];
        if (v66 != 1)
          swift_bridgeObjectRelease(v66);
        v67 = v23[178];
        if (v67 != 1)
          swift_bridgeObjectRelease(v67);
        v68 = v23[182];
        if (v68 != 1)
          swift_bridgeObjectRelease(v68);
        v69 = v23[186];
        if (v69 != 1)
          swift_bridgeObjectRelease(v69);
        v70 = v23[190];
        if (v70 != 1)
          swift_bridgeObjectRelease(v70);
        v71 = v23[194];
        if (v71 != 1)
          swift_bridgeObjectRelease(v71);
        v72 = v23[198];
        if (v72 != 1)
          swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v23[208]);
        swift_bridgeObjectRelease(v23[209]);
      }
      if (v23[312] != 1)
      {
        v73 = v23[210];
        if (v73 != 1)
          swift_bridgeObjectRelease(v73);
        v74 = v23[214];
        if (v74 != 1)
          swift_bridgeObjectRelease(v74);
        v75 = v23[218];
        if (v75 != 1)
          swift_bridgeObjectRelease(v75);
        v76 = v23[222];
        if (v76 != 1)
          swift_bridgeObjectRelease(v76);
        v77 = v23[226];
        if (v77 != 1)
          swift_bridgeObjectRelease(v77);
        v78 = v23[230];
        if (v78 != 1)
          swift_bridgeObjectRelease(v78);
        v79 = v23[234];
        if (v79 != 1)
          swift_bridgeObjectRelease(v79);
        v80 = v23[238];
        if (v80 != 1)
          swift_bridgeObjectRelease(v80);
        v81 = v23[242];
        if (v81 != 1)
          swift_bridgeObjectRelease(v81);
        v82 = v23[246];
        if (v82 != 1)
          swift_bridgeObjectRelease(v82);
        v83 = v23[250];
        if (v83 != 1)
          swift_bridgeObjectRelease(v83);
        v84 = v23[254];
        if (v84 != 1)
          swift_bridgeObjectRelease(v84);
        v85 = v23[258];
        if (v85 != 1)
          swift_bridgeObjectRelease(v85);
        v86 = v23[262];
        if (v86 != 1)
          swift_bridgeObjectRelease(v86);
        v87 = v23[266];
        if (v87 != 1)
          swift_bridgeObjectRelease(v87);
        v88 = v23[270];
        if (v88 != 1)
          swift_bridgeObjectRelease(v88);
        v89 = v23[274];
        if (v89 != 1)
          swift_bridgeObjectRelease(v89);
        v90 = v23[278];
        if (v90 != 1)
          swift_bridgeObjectRelease(v90);
        v91 = v23[282];
        if (v91 != 1)
          swift_bridgeObjectRelease(v91);
        v92 = v23[286];
        if (v92 != 1)
          swift_bridgeObjectRelease(v92);
        v93 = v23[290];
        if (v93 != 1)
          swift_bridgeObjectRelease(v93);
        v94 = v23[294];
        if (v94 != 1)
          swift_bridgeObjectRelease(v94);
        v95 = v23[298];
        if (v95 != 1)
          swift_bridgeObjectRelease(v95);
        v96 = v23[302];
        if (v96 != 1)
          swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v23[312]);
        swift_bridgeObjectRelease(v23[313]);
      }
      if (v23[416] != 1)
      {
        v97 = v23[314];
        if (v97 != 1)
          swift_bridgeObjectRelease(v97);
        v98 = v23[318];
        if (v98 != 1)
          swift_bridgeObjectRelease(v98);
        v99 = v23[322];
        if (v99 != 1)
          swift_bridgeObjectRelease(v99);
        v100 = v23[326];
        if (v100 != 1)
          swift_bridgeObjectRelease(v100);
        v101 = v23[330];
        if (v101 != 1)
          swift_bridgeObjectRelease(v101);
        v102 = v23[334];
        if (v102 != 1)
          swift_bridgeObjectRelease(v102);
        v103 = v23[338];
        if (v103 != 1)
          swift_bridgeObjectRelease(v103);
        v104 = v23[342];
        if (v104 != 1)
          swift_bridgeObjectRelease(v104);
        v105 = v23[346];
        if (v105 != 1)
          swift_bridgeObjectRelease(v105);
        v106 = v23[350];
        if (v106 != 1)
          swift_bridgeObjectRelease(v106);
        v107 = v23[354];
        if (v107 != 1)
          swift_bridgeObjectRelease(v107);
        v108 = v23[358];
        if (v108 != 1)
          swift_bridgeObjectRelease(v108);
        v109 = v23[362];
        if (v109 != 1)
          swift_bridgeObjectRelease(v109);
        v110 = v23[366];
        if (v110 != 1)
          swift_bridgeObjectRelease(v110);
        v111 = v23[370];
        if (v111 != 1)
          swift_bridgeObjectRelease(v111);
        v112 = v23[374];
        if (v112 != 1)
          swift_bridgeObjectRelease(v112);
        v113 = v23[378];
        if (v113 != 1)
          swift_bridgeObjectRelease(v113);
        v114 = v23[382];
        if (v114 != 1)
          swift_bridgeObjectRelease(v114);
        v115 = v23[386];
        if (v115 != 1)
          swift_bridgeObjectRelease(v115);
        v116 = v23[390];
        if (v116 != 1)
          swift_bridgeObjectRelease(v116);
        v117 = v23[394];
        if (v117 != 1)
          swift_bridgeObjectRelease(v117);
        v118 = v23[398];
        if (v118 != 1)
          swift_bridgeObjectRelease(v118);
        v119 = v23[402];
        if (v119 != 1)
          swift_bridgeObjectRelease(v119);
        v120 = v23[406];
        if (v120 != 1)
          swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v23[416]);
        swift_bridgeObjectRelease(v23[417]);
      }
      if (v23[520] != 1)
      {
        v121 = v23[418];
        if (v121 != 1)
          swift_bridgeObjectRelease(v121);
        v122 = v23[422];
        if (v122 != 1)
          swift_bridgeObjectRelease(v122);
        v123 = v23[426];
        if (v123 != 1)
          swift_bridgeObjectRelease(v123);
        v124 = v23[430];
        if (v124 != 1)
          swift_bridgeObjectRelease(v124);
        v125 = v23[434];
        if (v125 != 1)
          swift_bridgeObjectRelease(v125);
        v126 = v23[438];
        if (v126 != 1)
          swift_bridgeObjectRelease(v126);
        v127 = v23[442];
        if (v127 != 1)
          swift_bridgeObjectRelease(v127);
        v128 = v23[446];
        if (v128 != 1)
          swift_bridgeObjectRelease(v128);
        v129 = v23[450];
        if (v129 != 1)
          swift_bridgeObjectRelease(v129);
        v130 = v23[454];
        if (v130 != 1)
          swift_bridgeObjectRelease(v130);
        v131 = v23[458];
        if (v131 != 1)
          swift_bridgeObjectRelease(v131);
        v132 = v23[462];
        if (v132 != 1)
          swift_bridgeObjectRelease(v132);
        v133 = v23[466];
        if (v133 != 1)
          swift_bridgeObjectRelease(v133);
        v134 = v23[470];
        if (v134 != 1)
          swift_bridgeObjectRelease(v134);
        v135 = v23[474];
        if (v135 != 1)
          swift_bridgeObjectRelease(v135);
        v136 = v23[478];
        if (v136 != 1)
          swift_bridgeObjectRelease(v136);
        v137 = v23[482];
        if (v137 != 1)
          swift_bridgeObjectRelease(v137);
        v138 = v23[486];
        if (v138 != 1)
          swift_bridgeObjectRelease(v138);
        v139 = v23[490];
        if (v139 != 1)
          swift_bridgeObjectRelease(v139);
        v140 = v23[494];
        if (v140 != 1)
          swift_bridgeObjectRelease(v140);
        v141 = v23[498];
        if (v141 != 1)
          swift_bridgeObjectRelease(v141);
        v142 = v23[502];
        if (v142 != 1)
          swift_bridgeObjectRelease(v142);
        v143 = v23[506];
        if (v143 != 1)
          swift_bridgeObjectRelease(v143);
        v144 = v23[510];
        if (v144 != 1)
          swift_bridgeObjectRelease(v144);
        swift_bridgeObjectRelease(v23[520]);
        swift_bridgeObjectRelease(v23[521]);
      }
      if (v23[624] != 1)
      {
        v145 = v23[522];
        if (v145 != 1)
          swift_bridgeObjectRelease(v145);
        v146 = v23[526];
        if (v146 != 1)
          swift_bridgeObjectRelease(v146);
        v147 = v23[530];
        if (v147 != 1)
          swift_bridgeObjectRelease(v147);
        v148 = v23[534];
        if (v148 != 1)
          swift_bridgeObjectRelease(v148);
        v149 = v23[538];
        if (v149 != 1)
          swift_bridgeObjectRelease(v149);
        v150 = v23[542];
        if (v150 != 1)
          swift_bridgeObjectRelease(v150);
        v151 = v23[546];
        if (v151 != 1)
          swift_bridgeObjectRelease(v151);
        v152 = v23[550];
        if (v152 != 1)
          swift_bridgeObjectRelease(v152);
        v153 = v23[554];
        if (v153 != 1)
          swift_bridgeObjectRelease(v153);
        v154 = v23[558];
        if (v154 != 1)
          swift_bridgeObjectRelease(v154);
        v155 = v23[562];
        if (v155 != 1)
          swift_bridgeObjectRelease(v155);
        v156 = v23[566];
        if (v156 != 1)
          swift_bridgeObjectRelease(v156);
        v157 = v23[570];
        if (v157 != 1)
          swift_bridgeObjectRelease(v157);
        v158 = v23[574];
        if (v158 != 1)
          swift_bridgeObjectRelease(v158);
        v159 = v23[578];
        if (v159 != 1)
          swift_bridgeObjectRelease(v159);
        v160 = v23[582];
        if (v160 != 1)
          swift_bridgeObjectRelease(v160);
        v161 = v23[586];
        if (v161 != 1)
          swift_bridgeObjectRelease(v161);
        v162 = v23[590];
        if (v162 != 1)
          swift_bridgeObjectRelease(v162);
        v163 = v23[594];
        if (v163 != 1)
          swift_bridgeObjectRelease(v163);
        v164 = v23[598];
        if (v164 != 1)
          swift_bridgeObjectRelease(v164);
        v165 = v23[602];
        if (v165 != 1)
          swift_bridgeObjectRelease(v165);
        v166 = v23[606];
        if (v166 != 1)
          swift_bridgeObjectRelease(v166);
        v167 = v23[610];
        if (v167 != 1)
          swift_bridgeObjectRelease(v167);
        v168 = v23[614];
        if (v168 != 1)
          swift_bridgeObjectRelease(v168);
        swift_bridgeObjectRelease(v23[624]);
        swift_bridgeObjectRelease(v23[625]);
      }
      if (v23[728] != 1)
      {
        v169 = v23[626];
        if (v169 != 1)
          swift_bridgeObjectRelease(v169);
        v170 = v23[630];
        if (v170 != 1)
          swift_bridgeObjectRelease(v170);
        v171 = v23[634];
        if (v171 != 1)
          swift_bridgeObjectRelease(v171);
        v172 = v23[638];
        if (v172 != 1)
          swift_bridgeObjectRelease(v172);
        v173 = v23[642];
        if (v173 != 1)
          swift_bridgeObjectRelease(v173);
        v174 = v23[646];
        if (v174 != 1)
          swift_bridgeObjectRelease(v174);
        v175 = v23[650];
        if (v175 != 1)
          swift_bridgeObjectRelease(v175);
        v176 = v23[654];
        if (v176 != 1)
          swift_bridgeObjectRelease(v176);
        v177 = v23[658];
        if (v177 != 1)
          swift_bridgeObjectRelease(v177);
        v178 = v23[662];
        if (v178 != 1)
          swift_bridgeObjectRelease(v178);
        v179 = v23[666];
        if (v179 != 1)
          swift_bridgeObjectRelease(v179);
        v180 = v23[670];
        if (v180 != 1)
          swift_bridgeObjectRelease(v180);
        v181 = v23[674];
        if (v181 != 1)
          swift_bridgeObjectRelease(v181);
        v182 = v23[678];
        if (v182 != 1)
          swift_bridgeObjectRelease(v182);
        v183 = v23[682];
        if (v183 != 1)
          swift_bridgeObjectRelease(v183);
        v184 = v23[686];
        if (v184 != 1)
          swift_bridgeObjectRelease(v184);
        v185 = v23[690];
        if (v185 != 1)
          swift_bridgeObjectRelease(v185);
        v186 = v23[694];
        if (v186 != 1)
          swift_bridgeObjectRelease(v186);
        v187 = v23[698];
        if (v187 != 1)
          swift_bridgeObjectRelease(v187);
        v188 = v23[702];
        if (v188 != 1)
          swift_bridgeObjectRelease(v188);
        v189 = v23[706];
        if (v189 != 1)
          swift_bridgeObjectRelease(v189);
        v190 = v23[710];
        if (v190 != 1)
          swift_bridgeObjectRelease(v190);
        v191 = v23[714];
        if (v191 != 1)
          swift_bridgeObjectRelease(v191);
        v192 = v23[718];
        if (v192 != 1)
          swift_bridgeObjectRelease(v192);
        swift_bridgeObjectRelease(v23[728]);
        swift_bridgeObjectRelease(v23[729]);
      }
      swift_bridgeObjectRelease(v23[730]);
    }
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[39]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[40] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v18 + v19[41] + 8));
    v4 = v372;
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v8[19]));
  v193 = (_QWORD *)((char *)v7 + v8[25]);
  v194 = v193[1];
  if (v194)
  {
    swift_bridgeObjectRelease(v194);
    swift_bridgeObjectRelease(v193[3]);
    swift_bridgeObjectRelease(v193[5]);
    swift_bridgeObjectRelease(v193[7]);
  }
  v195 = (_QWORD *)((char *)v7 + v8[26]);
  v196 = v195[1];
  if (v196)
  {
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v195[3]);
    swift_bridgeObjectRelease(v195[5]);
    swift_bridgeObjectRelease(v195[7]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v8[27] + 8));
  v197 = (char *)v7 + v8[28];
  v198 = sub_100004828(&qword_100633968);
  v199 = *(_QWORD *)(v198 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v198))
    (*(void (**)(char *, uint64_t))(v199 + 8))(v197, v198);
  v200 = (_QWORD *)((char *)v7 + v8[29]);
  v201 = v200[1];
  v6 = v373;
  if (v201 != 1)
  {
    swift_bridgeObjectRelease(v201);
    if (v200[104] != 1)
    {
      v202 = v200[2];
      if (v202 != 1)
        swift_bridgeObjectRelease(v202);
      v203 = v200[6];
      if (v203 != 1)
        swift_bridgeObjectRelease(v203);
      v204 = v200[10];
      if (v204 != 1)
        swift_bridgeObjectRelease(v204);
      v205 = v200[14];
      if (v205 != 1)
        swift_bridgeObjectRelease(v205);
      v206 = v200[18];
      if (v206 != 1)
        swift_bridgeObjectRelease(v206);
      v207 = v200[22];
      if (v207 != 1)
        swift_bridgeObjectRelease(v207);
      v208 = v200[26];
      if (v208 != 1)
        swift_bridgeObjectRelease(v208);
      v209 = v200[30];
      if (v209 != 1)
        swift_bridgeObjectRelease(v209);
      v210 = v200[34];
      if (v210 != 1)
        swift_bridgeObjectRelease(v210);
      v211 = v200[38];
      if (v211 != 1)
        swift_bridgeObjectRelease(v211);
      v212 = v200[42];
      if (v212 != 1)
        swift_bridgeObjectRelease(v212);
      v213 = v200[46];
      if (v213 != 1)
        swift_bridgeObjectRelease(v213);
      v214 = v200[50];
      if (v214 != 1)
        swift_bridgeObjectRelease(v214);
      v215 = v200[54];
      if (v215 != 1)
        swift_bridgeObjectRelease(v215);
      v216 = v200[58];
      if (v216 != 1)
        swift_bridgeObjectRelease(v216);
      v217 = v200[62];
      if (v217 != 1)
        swift_bridgeObjectRelease(v217);
      v218 = v200[66];
      if (v218 != 1)
        swift_bridgeObjectRelease(v218);
      v219 = v200[70];
      if (v219 != 1)
        swift_bridgeObjectRelease(v219);
      v220 = v200[74];
      if (v220 != 1)
        swift_bridgeObjectRelease(v220);
      v221 = v200[78];
      if (v221 != 1)
        swift_bridgeObjectRelease(v221);
      v222 = v200[82];
      if (v222 != 1)
        swift_bridgeObjectRelease(v222);
      v223 = v200[86];
      if (v223 != 1)
        swift_bridgeObjectRelease(v223);
      v224 = v200[90];
      if (v224 != 1)
        swift_bridgeObjectRelease(v224);
      v225 = v200[94];
      if (v225 != 1)
        swift_bridgeObjectRelease(v225);
      swift_bridgeObjectRelease(v200[104]);
      swift_bridgeObjectRelease(v200[105]);
    }
    if (v200[208] != 1)
    {
      v226 = v200[106];
      if (v226 != 1)
        swift_bridgeObjectRelease(v226);
      v227 = v200[110];
      if (v227 != 1)
        swift_bridgeObjectRelease(v227);
      v228 = v200[114];
      if (v228 != 1)
        swift_bridgeObjectRelease(v228);
      v229 = v200[118];
      if (v229 != 1)
        swift_bridgeObjectRelease(v229);
      v230 = v200[122];
      if (v230 != 1)
        swift_bridgeObjectRelease(v230);
      v231 = v200[126];
      if (v231 != 1)
        swift_bridgeObjectRelease(v231);
      v232 = v200[130];
      if (v232 != 1)
        swift_bridgeObjectRelease(v232);
      v233 = v200[134];
      if (v233 != 1)
        swift_bridgeObjectRelease(v233);
      v234 = v200[138];
      if (v234 != 1)
        swift_bridgeObjectRelease(v234);
      v235 = v200[142];
      if (v235 != 1)
        swift_bridgeObjectRelease(v235);
      v236 = v200[146];
      if (v236 != 1)
        swift_bridgeObjectRelease(v236);
      v237 = v200[150];
      if (v237 != 1)
        swift_bridgeObjectRelease(v237);
      v238 = v200[154];
      if (v238 != 1)
        swift_bridgeObjectRelease(v238);
      v239 = v200[158];
      if (v239 != 1)
        swift_bridgeObjectRelease(v239);
      v240 = v200[162];
      if (v240 != 1)
        swift_bridgeObjectRelease(v240);
      v241 = v200[166];
      if (v241 != 1)
        swift_bridgeObjectRelease(v241);
      v242 = v200[170];
      if (v242 != 1)
        swift_bridgeObjectRelease(v242);
      v243 = v200[174];
      if (v243 != 1)
        swift_bridgeObjectRelease(v243);
      v244 = v200[178];
      if (v244 != 1)
        swift_bridgeObjectRelease(v244);
      v245 = v200[182];
      if (v245 != 1)
        swift_bridgeObjectRelease(v245);
      v246 = v200[186];
      if (v246 != 1)
        swift_bridgeObjectRelease(v246);
      v247 = v200[190];
      if (v247 != 1)
        swift_bridgeObjectRelease(v247);
      v248 = v200[194];
      if (v248 != 1)
        swift_bridgeObjectRelease(v248);
      v249 = v200[198];
      if (v249 != 1)
        swift_bridgeObjectRelease(v249);
      swift_bridgeObjectRelease(v200[208]);
      swift_bridgeObjectRelease(v200[209]);
    }
    if (v200[312] != 1)
    {
      v250 = v200[210];
      if (v250 != 1)
        swift_bridgeObjectRelease(v250);
      v251 = v200[214];
      if (v251 != 1)
        swift_bridgeObjectRelease(v251);
      v252 = v200[218];
      if (v252 != 1)
        swift_bridgeObjectRelease(v252);
      v253 = v200[222];
      if (v253 != 1)
        swift_bridgeObjectRelease(v253);
      v254 = v200[226];
      if (v254 != 1)
        swift_bridgeObjectRelease(v254);
      v255 = v200[230];
      if (v255 != 1)
        swift_bridgeObjectRelease(v255);
      v256 = v200[234];
      if (v256 != 1)
        swift_bridgeObjectRelease(v256);
      v257 = v200[238];
      if (v257 != 1)
        swift_bridgeObjectRelease(v257);
      v258 = v200[242];
      if (v258 != 1)
        swift_bridgeObjectRelease(v258);
      v259 = v200[246];
      if (v259 != 1)
        swift_bridgeObjectRelease(v259);
      v260 = v200[250];
      if (v260 != 1)
        swift_bridgeObjectRelease(v260);
      v261 = v200[254];
      if (v261 != 1)
        swift_bridgeObjectRelease(v261);
      v262 = v200[258];
      if (v262 != 1)
        swift_bridgeObjectRelease(v262);
      v263 = v200[262];
      if (v263 != 1)
        swift_bridgeObjectRelease(v263);
      v264 = v200[266];
      if (v264 != 1)
        swift_bridgeObjectRelease(v264);
      v265 = v200[270];
      if (v265 != 1)
        swift_bridgeObjectRelease(v265);
      v266 = v200[274];
      if (v266 != 1)
        swift_bridgeObjectRelease(v266);
      v267 = v200[278];
      if (v267 != 1)
        swift_bridgeObjectRelease(v267);
      v268 = v200[282];
      if (v268 != 1)
        swift_bridgeObjectRelease(v268);
      v269 = v200[286];
      if (v269 != 1)
        swift_bridgeObjectRelease(v269);
      v270 = v200[290];
      if (v270 != 1)
        swift_bridgeObjectRelease(v270);
      v271 = v200[294];
      if (v271 != 1)
        swift_bridgeObjectRelease(v271);
      v272 = v200[298];
      if (v272 != 1)
        swift_bridgeObjectRelease(v272);
      v273 = v200[302];
      if (v273 != 1)
        swift_bridgeObjectRelease(v273);
      swift_bridgeObjectRelease(v200[312]);
      swift_bridgeObjectRelease(v200[313]);
    }
    if (v200[416] != 1)
    {
      v274 = v200[314];
      if (v274 != 1)
        swift_bridgeObjectRelease(v274);
      v275 = v200[318];
      if (v275 != 1)
        swift_bridgeObjectRelease(v275);
      v276 = v200[322];
      if (v276 != 1)
        swift_bridgeObjectRelease(v276);
      v277 = v200[326];
      if (v277 != 1)
        swift_bridgeObjectRelease(v277);
      v278 = v200[330];
      if (v278 != 1)
        swift_bridgeObjectRelease(v278);
      v279 = v200[334];
      if (v279 != 1)
        swift_bridgeObjectRelease(v279);
      v280 = v200[338];
      if (v280 != 1)
        swift_bridgeObjectRelease(v280);
      v281 = v200[342];
      if (v281 != 1)
        swift_bridgeObjectRelease(v281);
      v282 = v200[346];
      if (v282 != 1)
        swift_bridgeObjectRelease(v282);
      v283 = v200[350];
      if (v283 != 1)
        swift_bridgeObjectRelease(v283);
      v284 = v200[354];
      if (v284 != 1)
        swift_bridgeObjectRelease(v284);
      v285 = v200[358];
      if (v285 != 1)
        swift_bridgeObjectRelease(v285);
      v286 = v200[362];
      if (v286 != 1)
        swift_bridgeObjectRelease(v286);
      v287 = v200[366];
      if (v287 != 1)
        swift_bridgeObjectRelease(v287);
      v288 = v200[370];
      if (v288 != 1)
        swift_bridgeObjectRelease(v288);
      v289 = v200[374];
      if (v289 != 1)
        swift_bridgeObjectRelease(v289);
      v290 = v200[378];
      if (v290 != 1)
        swift_bridgeObjectRelease(v290);
      v291 = v200[382];
      if (v291 != 1)
        swift_bridgeObjectRelease(v291);
      v292 = v200[386];
      if (v292 != 1)
        swift_bridgeObjectRelease(v292);
      v293 = v200[390];
      if (v293 != 1)
        swift_bridgeObjectRelease(v293);
      v294 = v200[394];
      if (v294 != 1)
        swift_bridgeObjectRelease(v294);
      v295 = v200[398];
      if (v295 != 1)
        swift_bridgeObjectRelease(v295);
      v296 = v200[402];
      if (v296 != 1)
        swift_bridgeObjectRelease(v296);
      v297 = v200[406];
      if (v297 != 1)
        swift_bridgeObjectRelease(v297);
      swift_bridgeObjectRelease(v200[416]);
      swift_bridgeObjectRelease(v200[417]);
    }
    if (v200[520] != 1)
    {
      v298 = v200[418];
      if (v298 != 1)
        swift_bridgeObjectRelease(v298);
      v299 = v200[422];
      if (v299 != 1)
        swift_bridgeObjectRelease(v299);
      v300 = v200[426];
      if (v300 != 1)
        swift_bridgeObjectRelease(v300);
      v301 = v200[430];
      if (v301 != 1)
        swift_bridgeObjectRelease(v301);
      v302 = v200[434];
      if (v302 != 1)
        swift_bridgeObjectRelease(v302);
      v303 = v200[438];
      if (v303 != 1)
        swift_bridgeObjectRelease(v303);
      v304 = v200[442];
      if (v304 != 1)
        swift_bridgeObjectRelease(v304);
      v305 = v200[446];
      if (v305 != 1)
        swift_bridgeObjectRelease(v305);
      v306 = v200[450];
      if (v306 != 1)
        swift_bridgeObjectRelease(v306);
      v307 = v200[454];
      if (v307 != 1)
        swift_bridgeObjectRelease(v307);
      v308 = v200[458];
      if (v308 != 1)
        swift_bridgeObjectRelease(v308);
      v309 = v200[462];
      if (v309 != 1)
        swift_bridgeObjectRelease(v309);
      v310 = v200[466];
      if (v310 != 1)
        swift_bridgeObjectRelease(v310);
      v311 = v200[470];
      if (v311 != 1)
        swift_bridgeObjectRelease(v311);
      v312 = v200[474];
      if (v312 != 1)
        swift_bridgeObjectRelease(v312);
      v313 = v200[478];
      if (v313 != 1)
        swift_bridgeObjectRelease(v313);
      v314 = v200[482];
      if (v314 != 1)
        swift_bridgeObjectRelease(v314);
      v315 = v200[486];
      if (v315 != 1)
        swift_bridgeObjectRelease(v315);
      v316 = v200[490];
      if (v316 != 1)
        swift_bridgeObjectRelease(v316);
      v317 = v200[494];
      if (v317 != 1)
        swift_bridgeObjectRelease(v317);
      v318 = v200[498];
      if (v318 != 1)
        swift_bridgeObjectRelease(v318);
      v319 = v200[502];
      if (v319 != 1)
        swift_bridgeObjectRelease(v319);
      v320 = v200[506];
      if (v320 != 1)
        swift_bridgeObjectRelease(v320);
      v321 = v200[510];
      if (v321 != 1)
        swift_bridgeObjectRelease(v321);
      swift_bridgeObjectRelease(v200[520]);
      swift_bridgeObjectRelease(v200[521]);
    }
    if (v200[624] != 1)
    {
      v322 = v200[522];
      if (v322 != 1)
        swift_bridgeObjectRelease(v322);
      v323 = v200[526];
      if (v323 != 1)
        swift_bridgeObjectRelease(v323);
      v324 = v200[530];
      if (v324 != 1)
        swift_bridgeObjectRelease(v324);
      v325 = v200[534];
      if (v325 != 1)
        swift_bridgeObjectRelease(v325);
      v326 = v200[538];
      if (v326 != 1)
        swift_bridgeObjectRelease(v326);
      v327 = v200[542];
      if (v327 != 1)
        swift_bridgeObjectRelease(v327);
      v328 = v200[546];
      if (v328 != 1)
        swift_bridgeObjectRelease(v328);
      v329 = v200[550];
      if (v329 != 1)
        swift_bridgeObjectRelease(v329);
      v330 = v200[554];
      if (v330 != 1)
        swift_bridgeObjectRelease(v330);
      v331 = v200[558];
      if (v331 != 1)
        swift_bridgeObjectRelease(v331);
      v332 = v200[562];
      if (v332 != 1)
        swift_bridgeObjectRelease(v332);
      v333 = v200[566];
      if (v333 != 1)
        swift_bridgeObjectRelease(v333);
      v334 = v200[570];
      if (v334 != 1)
        swift_bridgeObjectRelease(v334);
      v335 = v200[574];
      if (v335 != 1)
        swift_bridgeObjectRelease(v335);
      v336 = v200[578];
      if (v336 != 1)
        swift_bridgeObjectRelease(v336);
      v337 = v200[582];
      if (v337 != 1)
        swift_bridgeObjectRelease(v337);
      v338 = v200[586];
      if (v338 != 1)
        swift_bridgeObjectRelease(v338);
      v339 = v200[590];
      if (v339 != 1)
        swift_bridgeObjectRelease(v339);
      v340 = v200[594];
      if (v340 != 1)
        swift_bridgeObjectRelease(v340);
      v341 = v200[598];
      if (v341 != 1)
        swift_bridgeObjectRelease(v341);
      v342 = v200[602];
      if (v342 != 1)
        swift_bridgeObjectRelease(v342);
      v343 = v200[606];
      if (v343 != 1)
        swift_bridgeObjectRelease(v343);
      v344 = v200[610];
      if (v344 != 1)
        swift_bridgeObjectRelease(v344);
      v345 = v200[614];
      if (v345 != 1)
        swift_bridgeObjectRelease(v345);
      swift_bridgeObjectRelease(v200[624]);
      swift_bridgeObjectRelease(v200[625]);
    }
    if (v200[728] != 1)
    {
      v346 = v200[626];
      if (v346 != 1)
        swift_bridgeObjectRelease(v346);
      v347 = v200[630];
      if (v347 != 1)
        swift_bridgeObjectRelease(v347);
      v348 = v200[634];
      if (v348 != 1)
        swift_bridgeObjectRelease(v348);
      v349 = v200[638];
      if (v349 != 1)
        swift_bridgeObjectRelease(v349);
      v350 = v200[642];
      if (v350 != 1)
        swift_bridgeObjectRelease(v350);
      v351 = v200[646];
      if (v351 != 1)
        swift_bridgeObjectRelease(v351);
      v352 = v200[650];
      if (v352 != 1)
        swift_bridgeObjectRelease(v352);
      v353 = v200[654];
      if (v353 != 1)
        swift_bridgeObjectRelease(v353);
      v354 = v200[658];
      if (v354 != 1)
        swift_bridgeObjectRelease(v354);
      v355 = v200[662];
      if (v355 != 1)
        swift_bridgeObjectRelease(v355);
      v356 = v200[666];
      if (v356 != 1)
        swift_bridgeObjectRelease(v356);
      v357 = v200[670];
      if (v357 != 1)
        swift_bridgeObjectRelease(v357);
      v358 = v200[674];
      if (v358 != 1)
        swift_bridgeObjectRelease(v358);
      v359 = v200[678];
      if (v359 != 1)
        swift_bridgeObjectRelease(v359);
      v360 = v200[682];
      if (v360 != 1)
        swift_bridgeObjectRelease(v360);
      v361 = v200[686];
      if (v361 != 1)
        swift_bridgeObjectRelease(v361);
      v362 = v200[690];
      if (v362 != 1)
        swift_bridgeObjectRelease(v362);
      v363 = v200[694];
      if (v363 != 1)
        swift_bridgeObjectRelease(v363);
      v364 = v200[698];
      if (v364 != 1)
        swift_bridgeObjectRelease(v364);
      v365 = v200[702];
      if (v365 != 1)
        swift_bridgeObjectRelease(v365);
      v366 = v200[706];
      if (v366 != 1)
        swift_bridgeObjectRelease(v366);
      v367 = v200[710];
      if (v367 != 1)
        swift_bridgeObjectRelease(v367);
      v368 = v200[714];
      if (v368 != 1)
        swift_bridgeObjectRelease(v368);
      v369 = v200[718];
      if (v369 != 1)
        swift_bridgeObjectRelease(v369);
      swift_bridgeObjectRelease(v200[728]);
      swift_bridgeObjectRelease(v200[729]);
    }
    swift_bridgeObjectRelease(v200[730]);
  }
LABEL_727:
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D4C4C()
{
  return sub_1003D9E6C(type metadata accessor for ActionRequest, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, char *))sub_1003CCB00);
}

uint64_t sub_1003D4C70()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v368;

  v1 = *(_QWORD *)(sub_100004828((uint64_t *)&unk_100633958) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  v5 = &v0[v3];
  v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(&v0[v3], 1, v6))
    return swift_deallocObject(v0, v3 + v4, v2 | 7);
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 7));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 9));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 12));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 13));
  v7 = *((_QWORD *)v5 + 15);
  if (v7 == 1)
    goto LABEL_5;
  if (v7 != 2)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*((_QWORD *)v5 + 17));
LABEL_5:
    v8 = *((_QWORD *)v5 + 19);
    if (v8 != 1)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(*((_QWORD *)v5 + 21));
    }
  }
  v9 = *((_QWORD *)v5 + 23);
  if (v9 != 1)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(*((_QWORD *)v5 + 25));
  }
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 27));
  swift_bridgeObjectRelease(*((_QWORD *)v5 + 29));
  v10 = *((_QWORD *)v5 + 31);
  if (v10 != 1)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(*((_QWORD *)v5 + 33));
  }
  v11 = &v5[v6[17]];
  v12 = type metadata accessor for WorkflowRecommendationResponse(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v368 = v2;
    v13 = (v2 + 48) & ~v2;
    v14 = v4;
    if (*((_QWORD *)v11 + 3))
    {
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 5));
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 7));
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 9));
      swift_bridgeObjectRelease(*((_QWORD *)v11 + 11));
    }
    v15 = &v11[*(int *)(v12 + 20)];
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 5));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 7));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 9));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 11));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 14));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 16));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 17));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 19));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 20));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 22));
    v16 = (int *)type metadata accessor for Workflow(0);
    v17 = &v15[v16[18]];
    v18 = type metadata accessor for HardwareAttestationType(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[19]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[21] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[23]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[24]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[25]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[28]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[29]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[30]]);
    v20 = &v15[v16[38]];
    v21 = *((_QWORD *)v20 + 1);
    v4 = v14;
    v3 = v13;
    v2 = v368;
    if (v21 != 1)
    {
      swift_bridgeObjectRelease(v21);
      if (*((_QWORD *)v20 + 104) != 1)
      {
        v22 = *((_QWORD *)v20 + 2);
        if (v22 != 1)
          swift_bridgeObjectRelease(v22);
        v23 = *((_QWORD *)v20 + 6);
        if (v23 != 1)
          swift_bridgeObjectRelease(v23);
        v24 = *((_QWORD *)v20 + 10);
        if (v24 != 1)
          swift_bridgeObjectRelease(v24);
        v25 = *((_QWORD *)v20 + 14);
        if (v25 != 1)
          swift_bridgeObjectRelease(v25);
        v26 = *((_QWORD *)v20 + 18);
        if (v26 != 1)
          swift_bridgeObjectRelease(v26);
        v27 = *((_QWORD *)v20 + 22);
        if (v27 != 1)
          swift_bridgeObjectRelease(v27);
        v28 = *((_QWORD *)v20 + 26);
        if (v28 != 1)
          swift_bridgeObjectRelease(v28);
        v29 = *((_QWORD *)v20 + 30);
        if (v29 != 1)
          swift_bridgeObjectRelease(v29);
        v30 = *((_QWORD *)v20 + 34);
        if (v30 != 1)
          swift_bridgeObjectRelease(v30);
        v31 = *((_QWORD *)v20 + 38);
        if (v31 != 1)
          swift_bridgeObjectRelease(v31);
        v32 = *((_QWORD *)v20 + 42);
        if (v32 != 1)
          swift_bridgeObjectRelease(v32);
        v33 = *((_QWORD *)v20 + 46);
        if (v33 != 1)
          swift_bridgeObjectRelease(v33);
        v34 = *((_QWORD *)v20 + 50);
        if (v34 != 1)
          swift_bridgeObjectRelease(v34);
        v35 = *((_QWORD *)v20 + 54);
        if (v35 != 1)
          swift_bridgeObjectRelease(v35);
        v36 = *((_QWORD *)v20 + 58);
        if (v36 != 1)
          swift_bridgeObjectRelease(v36);
        v37 = *((_QWORD *)v20 + 62);
        if (v37 != 1)
          swift_bridgeObjectRelease(v37);
        v38 = *((_QWORD *)v20 + 66);
        if (v38 != 1)
          swift_bridgeObjectRelease(v38);
        v39 = *((_QWORD *)v20 + 70);
        if (v39 != 1)
          swift_bridgeObjectRelease(v39);
        v40 = *((_QWORD *)v20 + 74);
        if (v40 != 1)
          swift_bridgeObjectRelease(v40);
        v41 = *((_QWORD *)v20 + 78);
        if (v41 != 1)
          swift_bridgeObjectRelease(v41);
        v42 = *((_QWORD *)v20 + 82);
        if (v42 != 1)
          swift_bridgeObjectRelease(v42);
        v43 = *((_QWORD *)v20 + 86);
        if (v43 != 1)
          swift_bridgeObjectRelease(v43);
        v44 = *((_QWORD *)v20 + 90);
        if (v44 != 1)
          swift_bridgeObjectRelease(v44);
        v45 = *((_QWORD *)v20 + 94);
        if (v45 != 1)
          swift_bridgeObjectRelease(v45);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 104));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 105));
      }
      if (*((_QWORD *)v20 + 208) != 1)
      {
        v46 = *((_QWORD *)v20 + 106);
        if (v46 != 1)
          swift_bridgeObjectRelease(v46);
        v47 = *((_QWORD *)v20 + 110);
        if (v47 != 1)
          swift_bridgeObjectRelease(v47);
        v48 = *((_QWORD *)v20 + 114);
        if (v48 != 1)
          swift_bridgeObjectRelease(v48);
        v49 = *((_QWORD *)v20 + 118);
        if (v49 != 1)
          swift_bridgeObjectRelease(v49);
        v50 = *((_QWORD *)v20 + 122);
        if (v50 != 1)
          swift_bridgeObjectRelease(v50);
        v51 = *((_QWORD *)v20 + 126);
        if (v51 != 1)
          swift_bridgeObjectRelease(v51);
        v52 = *((_QWORD *)v20 + 130);
        if (v52 != 1)
          swift_bridgeObjectRelease(v52);
        v53 = *((_QWORD *)v20 + 134);
        if (v53 != 1)
          swift_bridgeObjectRelease(v53);
        v54 = *((_QWORD *)v20 + 138);
        if (v54 != 1)
          swift_bridgeObjectRelease(v54);
        v55 = *((_QWORD *)v20 + 142);
        if (v55 != 1)
          swift_bridgeObjectRelease(v55);
        v56 = *((_QWORD *)v20 + 146);
        if (v56 != 1)
          swift_bridgeObjectRelease(v56);
        v57 = *((_QWORD *)v20 + 150);
        if (v57 != 1)
          swift_bridgeObjectRelease(v57);
        v58 = *((_QWORD *)v20 + 154);
        if (v58 != 1)
          swift_bridgeObjectRelease(v58);
        v59 = *((_QWORD *)v20 + 158);
        if (v59 != 1)
          swift_bridgeObjectRelease(v59);
        v60 = *((_QWORD *)v20 + 162);
        if (v60 != 1)
          swift_bridgeObjectRelease(v60);
        v61 = *((_QWORD *)v20 + 166);
        if (v61 != 1)
          swift_bridgeObjectRelease(v61);
        v62 = *((_QWORD *)v20 + 170);
        if (v62 != 1)
          swift_bridgeObjectRelease(v62);
        v63 = *((_QWORD *)v20 + 174);
        if (v63 != 1)
          swift_bridgeObjectRelease(v63);
        v64 = *((_QWORD *)v20 + 178);
        if (v64 != 1)
          swift_bridgeObjectRelease(v64);
        v65 = *((_QWORD *)v20 + 182);
        if (v65 != 1)
          swift_bridgeObjectRelease(v65);
        v66 = *((_QWORD *)v20 + 186);
        if (v66 != 1)
          swift_bridgeObjectRelease(v66);
        v67 = *((_QWORD *)v20 + 190);
        if (v67 != 1)
          swift_bridgeObjectRelease(v67);
        v68 = *((_QWORD *)v20 + 194);
        if (v68 != 1)
          swift_bridgeObjectRelease(v68);
        v69 = *((_QWORD *)v20 + 198);
        if (v69 != 1)
          swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 208));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 209));
      }
      if (*((_QWORD *)v20 + 312) != 1)
      {
        v70 = *((_QWORD *)v20 + 210);
        if (v70 != 1)
          swift_bridgeObjectRelease(v70);
        v71 = *((_QWORD *)v20 + 214);
        if (v71 != 1)
          swift_bridgeObjectRelease(v71);
        v72 = *((_QWORD *)v20 + 218);
        if (v72 != 1)
          swift_bridgeObjectRelease(v72);
        v73 = *((_QWORD *)v20 + 222);
        if (v73 != 1)
          swift_bridgeObjectRelease(v73);
        v74 = *((_QWORD *)v20 + 226);
        if (v74 != 1)
          swift_bridgeObjectRelease(v74);
        v75 = *((_QWORD *)v20 + 230);
        if (v75 != 1)
          swift_bridgeObjectRelease(v75);
        v76 = *((_QWORD *)v20 + 234);
        if (v76 != 1)
          swift_bridgeObjectRelease(v76);
        v77 = *((_QWORD *)v20 + 238);
        if (v77 != 1)
          swift_bridgeObjectRelease(v77);
        v78 = *((_QWORD *)v20 + 242);
        if (v78 != 1)
          swift_bridgeObjectRelease(v78);
        v79 = *((_QWORD *)v20 + 246);
        if (v79 != 1)
          swift_bridgeObjectRelease(v79);
        v80 = *((_QWORD *)v20 + 250);
        if (v80 != 1)
          swift_bridgeObjectRelease(v80);
        v81 = *((_QWORD *)v20 + 254);
        if (v81 != 1)
          swift_bridgeObjectRelease(v81);
        v82 = *((_QWORD *)v20 + 258);
        if (v82 != 1)
          swift_bridgeObjectRelease(v82);
        v83 = *((_QWORD *)v20 + 262);
        if (v83 != 1)
          swift_bridgeObjectRelease(v83);
        v84 = *((_QWORD *)v20 + 266);
        if (v84 != 1)
          swift_bridgeObjectRelease(v84);
        v85 = *((_QWORD *)v20 + 270);
        if (v85 != 1)
          swift_bridgeObjectRelease(v85);
        v86 = *((_QWORD *)v20 + 274);
        if (v86 != 1)
          swift_bridgeObjectRelease(v86);
        v87 = *((_QWORD *)v20 + 278);
        if (v87 != 1)
          swift_bridgeObjectRelease(v87);
        v88 = *((_QWORD *)v20 + 282);
        if (v88 != 1)
          swift_bridgeObjectRelease(v88);
        v89 = *((_QWORD *)v20 + 286);
        if (v89 != 1)
          swift_bridgeObjectRelease(v89);
        v90 = *((_QWORD *)v20 + 290);
        if (v90 != 1)
          swift_bridgeObjectRelease(v90);
        v91 = *((_QWORD *)v20 + 294);
        if (v91 != 1)
          swift_bridgeObjectRelease(v91);
        v92 = *((_QWORD *)v20 + 298);
        if (v92 != 1)
          swift_bridgeObjectRelease(v92);
        v93 = *((_QWORD *)v20 + 302);
        if (v93 != 1)
          swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 312));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 313));
      }
      if (*((_QWORD *)v20 + 416) != 1)
      {
        v94 = *((_QWORD *)v20 + 314);
        if (v94 != 1)
          swift_bridgeObjectRelease(v94);
        v95 = *((_QWORD *)v20 + 318);
        if (v95 != 1)
          swift_bridgeObjectRelease(v95);
        v96 = *((_QWORD *)v20 + 322);
        if (v96 != 1)
          swift_bridgeObjectRelease(v96);
        v97 = *((_QWORD *)v20 + 326);
        if (v97 != 1)
          swift_bridgeObjectRelease(v97);
        v98 = *((_QWORD *)v20 + 330);
        if (v98 != 1)
          swift_bridgeObjectRelease(v98);
        v99 = *((_QWORD *)v20 + 334);
        if (v99 != 1)
          swift_bridgeObjectRelease(v99);
        v100 = *((_QWORD *)v20 + 338);
        if (v100 != 1)
          swift_bridgeObjectRelease(v100);
        v101 = *((_QWORD *)v20 + 342);
        if (v101 != 1)
          swift_bridgeObjectRelease(v101);
        v102 = *((_QWORD *)v20 + 346);
        if (v102 != 1)
          swift_bridgeObjectRelease(v102);
        v103 = *((_QWORD *)v20 + 350);
        if (v103 != 1)
          swift_bridgeObjectRelease(v103);
        v104 = *((_QWORD *)v20 + 354);
        if (v104 != 1)
          swift_bridgeObjectRelease(v104);
        v105 = *((_QWORD *)v20 + 358);
        if (v105 != 1)
          swift_bridgeObjectRelease(v105);
        v106 = *((_QWORD *)v20 + 362);
        if (v106 != 1)
          swift_bridgeObjectRelease(v106);
        v107 = *((_QWORD *)v20 + 366);
        if (v107 != 1)
          swift_bridgeObjectRelease(v107);
        v108 = *((_QWORD *)v20 + 370);
        if (v108 != 1)
          swift_bridgeObjectRelease(v108);
        v109 = *((_QWORD *)v20 + 374);
        if (v109 != 1)
          swift_bridgeObjectRelease(v109);
        v110 = *((_QWORD *)v20 + 378);
        if (v110 != 1)
          swift_bridgeObjectRelease(v110);
        v111 = *((_QWORD *)v20 + 382);
        if (v111 != 1)
          swift_bridgeObjectRelease(v111);
        v112 = *((_QWORD *)v20 + 386);
        if (v112 != 1)
          swift_bridgeObjectRelease(v112);
        v113 = *((_QWORD *)v20 + 390);
        if (v113 != 1)
          swift_bridgeObjectRelease(v113);
        v114 = *((_QWORD *)v20 + 394);
        if (v114 != 1)
          swift_bridgeObjectRelease(v114);
        v115 = *((_QWORD *)v20 + 398);
        if (v115 != 1)
          swift_bridgeObjectRelease(v115);
        v116 = *((_QWORD *)v20 + 402);
        if (v116 != 1)
          swift_bridgeObjectRelease(v116);
        v117 = *((_QWORD *)v20 + 406);
        if (v117 != 1)
          swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 416));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 417));
      }
      if (*((_QWORD *)v20 + 520) != 1)
      {
        v118 = *((_QWORD *)v20 + 418);
        if (v118 != 1)
          swift_bridgeObjectRelease(v118);
        v119 = *((_QWORD *)v20 + 422);
        if (v119 != 1)
          swift_bridgeObjectRelease(v119);
        v120 = *((_QWORD *)v20 + 426);
        if (v120 != 1)
          swift_bridgeObjectRelease(v120);
        v121 = *((_QWORD *)v20 + 430);
        if (v121 != 1)
          swift_bridgeObjectRelease(v121);
        v122 = *((_QWORD *)v20 + 434);
        if (v122 != 1)
          swift_bridgeObjectRelease(v122);
        v123 = *((_QWORD *)v20 + 438);
        if (v123 != 1)
          swift_bridgeObjectRelease(v123);
        v124 = *((_QWORD *)v20 + 442);
        if (v124 != 1)
          swift_bridgeObjectRelease(v124);
        v125 = *((_QWORD *)v20 + 446);
        if (v125 != 1)
          swift_bridgeObjectRelease(v125);
        v126 = *((_QWORD *)v20 + 450);
        if (v126 != 1)
          swift_bridgeObjectRelease(v126);
        v127 = *((_QWORD *)v20 + 454);
        if (v127 != 1)
          swift_bridgeObjectRelease(v127);
        v128 = *((_QWORD *)v20 + 458);
        if (v128 != 1)
          swift_bridgeObjectRelease(v128);
        v129 = *((_QWORD *)v20 + 462);
        if (v129 != 1)
          swift_bridgeObjectRelease(v129);
        v130 = *((_QWORD *)v20 + 466);
        if (v130 != 1)
          swift_bridgeObjectRelease(v130);
        v131 = *((_QWORD *)v20 + 470);
        if (v131 != 1)
          swift_bridgeObjectRelease(v131);
        v132 = *((_QWORD *)v20 + 474);
        if (v132 != 1)
          swift_bridgeObjectRelease(v132);
        v133 = *((_QWORD *)v20 + 478);
        if (v133 != 1)
          swift_bridgeObjectRelease(v133);
        v134 = *((_QWORD *)v20 + 482);
        if (v134 != 1)
          swift_bridgeObjectRelease(v134);
        v135 = *((_QWORD *)v20 + 486);
        if (v135 != 1)
          swift_bridgeObjectRelease(v135);
        v136 = *((_QWORD *)v20 + 490);
        if (v136 != 1)
          swift_bridgeObjectRelease(v136);
        v137 = *((_QWORD *)v20 + 494);
        if (v137 != 1)
          swift_bridgeObjectRelease(v137);
        v138 = *((_QWORD *)v20 + 498);
        if (v138 != 1)
          swift_bridgeObjectRelease(v138);
        v139 = *((_QWORD *)v20 + 502);
        if (v139 != 1)
          swift_bridgeObjectRelease(v139);
        v140 = *((_QWORD *)v20 + 506);
        if (v140 != 1)
          swift_bridgeObjectRelease(v140);
        v141 = *((_QWORD *)v20 + 510);
        if (v141 != 1)
          swift_bridgeObjectRelease(v141);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 520));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 521));
      }
      if (*((_QWORD *)v20 + 624) != 1)
      {
        v142 = *((_QWORD *)v20 + 522);
        if (v142 != 1)
          swift_bridgeObjectRelease(v142);
        v143 = *((_QWORD *)v20 + 526);
        if (v143 != 1)
          swift_bridgeObjectRelease(v143);
        v144 = *((_QWORD *)v20 + 530);
        if (v144 != 1)
          swift_bridgeObjectRelease(v144);
        v145 = *((_QWORD *)v20 + 534);
        if (v145 != 1)
          swift_bridgeObjectRelease(v145);
        v146 = *((_QWORD *)v20 + 538);
        if (v146 != 1)
          swift_bridgeObjectRelease(v146);
        v147 = *((_QWORD *)v20 + 542);
        if (v147 != 1)
          swift_bridgeObjectRelease(v147);
        v148 = *((_QWORD *)v20 + 546);
        if (v148 != 1)
          swift_bridgeObjectRelease(v148);
        v149 = *((_QWORD *)v20 + 550);
        if (v149 != 1)
          swift_bridgeObjectRelease(v149);
        v150 = *((_QWORD *)v20 + 554);
        if (v150 != 1)
          swift_bridgeObjectRelease(v150);
        v151 = *((_QWORD *)v20 + 558);
        if (v151 != 1)
          swift_bridgeObjectRelease(v151);
        v152 = *((_QWORD *)v20 + 562);
        if (v152 != 1)
          swift_bridgeObjectRelease(v152);
        v153 = *((_QWORD *)v20 + 566);
        if (v153 != 1)
          swift_bridgeObjectRelease(v153);
        v154 = *((_QWORD *)v20 + 570);
        if (v154 != 1)
          swift_bridgeObjectRelease(v154);
        v155 = *((_QWORD *)v20 + 574);
        if (v155 != 1)
          swift_bridgeObjectRelease(v155);
        v156 = *((_QWORD *)v20 + 578);
        if (v156 != 1)
          swift_bridgeObjectRelease(v156);
        v157 = *((_QWORD *)v20 + 582);
        if (v157 != 1)
          swift_bridgeObjectRelease(v157);
        v158 = *((_QWORD *)v20 + 586);
        if (v158 != 1)
          swift_bridgeObjectRelease(v158);
        v159 = *((_QWORD *)v20 + 590);
        if (v159 != 1)
          swift_bridgeObjectRelease(v159);
        v160 = *((_QWORD *)v20 + 594);
        if (v160 != 1)
          swift_bridgeObjectRelease(v160);
        v161 = *((_QWORD *)v20 + 598);
        if (v161 != 1)
          swift_bridgeObjectRelease(v161);
        v162 = *((_QWORD *)v20 + 602);
        if (v162 != 1)
          swift_bridgeObjectRelease(v162);
        v163 = *((_QWORD *)v20 + 606);
        if (v163 != 1)
          swift_bridgeObjectRelease(v163);
        v164 = *((_QWORD *)v20 + 610);
        if (v164 != 1)
          swift_bridgeObjectRelease(v164);
        v165 = *((_QWORD *)v20 + 614);
        if (v165 != 1)
          swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 624));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 625));
      }
      if (*((_QWORD *)v20 + 728) != 1)
      {
        v166 = *((_QWORD *)v20 + 626);
        if (v166 != 1)
          swift_bridgeObjectRelease(v166);
        v167 = *((_QWORD *)v20 + 630);
        if (v167 != 1)
          swift_bridgeObjectRelease(v167);
        v168 = *((_QWORD *)v20 + 634);
        if (v168 != 1)
          swift_bridgeObjectRelease(v168);
        v169 = *((_QWORD *)v20 + 638);
        if (v169 != 1)
          swift_bridgeObjectRelease(v169);
        v170 = *((_QWORD *)v20 + 642);
        if (v170 != 1)
          swift_bridgeObjectRelease(v170);
        v171 = *((_QWORD *)v20 + 646);
        if (v171 != 1)
          swift_bridgeObjectRelease(v171);
        v172 = *((_QWORD *)v20 + 650);
        if (v172 != 1)
          swift_bridgeObjectRelease(v172);
        v173 = *((_QWORD *)v20 + 654);
        if (v173 != 1)
          swift_bridgeObjectRelease(v173);
        v174 = *((_QWORD *)v20 + 658);
        if (v174 != 1)
          swift_bridgeObjectRelease(v174);
        v175 = *((_QWORD *)v20 + 662);
        if (v175 != 1)
          swift_bridgeObjectRelease(v175);
        v176 = *((_QWORD *)v20 + 666);
        if (v176 != 1)
          swift_bridgeObjectRelease(v176);
        v177 = *((_QWORD *)v20 + 670);
        if (v177 != 1)
          swift_bridgeObjectRelease(v177);
        v178 = *((_QWORD *)v20 + 674);
        if (v178 != 1)
          swift_bridgeObjectRelease(v178);
        v179 = *((_QWORD *)v20 + 678);
        if (v179 != 1)
          swift_bridgeObjectRelease(v179);
        v180 = *((_QWORD *)v20 + 682);
        if (v180 != 1)
          swift_bridgeObjectRelease(v180);
        v181 = *((_QWORD *)v20 + 686);
        if (v181 != 1)
          swift_bridgeObjectRelease(v181);
        v182 = *((_QWORD *)v20 + 690);
        if (v182 != 1)
          swift_bridgeObjectRelease(v182);
        v183 = *((_QWORD *)v20 + 694);
        if (v183 != 1)
          swift_bridgeObjectRelease(v183);
        v184 = *((_QWORD *)v20 + 698);
        if (v184 != 1)
          swift_bridgeObjectRelease(v184);
        v185 = *((_QWORD *)v20 + 702);
        if (v185 != 1)
          swift_bridgeObjectRelease(v185);
        v186 = *((_QWORD *)v20 + 706);
        if (v186 != 1)
          swift_bridgeObjectRelease(v186);
        v187 = *((_QWORD *)v20 + 710);
        if (v187 != 1)
          swift_bridgeObjectRelease(v187);
        v188 = *((_QWORD *)v20 + 714);
        if (v188 != 1)
          swift_bridgeObjectRelease(v188);
        v189 = *((_QWORD *)v20 + 718);
        if (v189 != 1)
          swift_bridgeObjectRelease(v189);
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 728));
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 729));
      }
      swift_bridgeObjectRelease(*((_QWORD *)v20 + 730));
    }
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[39]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[40] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[v16[41] + 8]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[19]]);
  v190 = &v5[v6[25]];
  v191 = *((_QWORD *)v190 + 1);
  if (v191)
  {
    swift_bridgeObjectRelease(v191);
    swift_bridgeObjectRelease(*((_QWORD *)v190 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v190 + 5));
    swift_bridgeObjectRelease(*((_QWORD *)v190 + 7));
  }
  v192 = &v5[v6[26]];
  v193 = *((_QWORD *)v192 + 1);
  if (v193)
  {
    swift_bridgeObjectRelease(v193);
    swift_bridgeObjectRelease(*((_QWORD *)v192 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v192 + 5));
    swift_bridgeObjectRelease(*((_QWORD *)v192 + 7));
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[27] + 8]);
  v194 = &v5[v6[28]];
  v195 = sub_100004828(&qword_100633968);
  v196 = *(_QWORD *)(v195 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
    (*(void (**)(char *, uint64_t))(v196 + 8))(v194, v195);
  v197 = &v5[v6[29]];
  v198 = *((_QWORD *)v197 + 1);
  if (v198 != 1)
  {
    swift_bridgeObjectRelease(v198);
    if (*((_QWORD *)v197 + 104) != 1)
    {
      v199 = *((_QWORD *)v197 + 2);
      if (v199 != 1)
        swift_bridgeObjectRelease(v199);
      v200 = *((_QWORD *)v197 + 6);
      if (v200 != 1)
        swift_bridgeObjectRelease(v200);
      v201 = *((_QWORD *)v197 + 10);
      if (v201 != 1)
        swift_bridgeObjectRelease(v201);
      v202 = *((_QWORD *)v197 + 14);
      if (v202 != 1)
        swift_bridgeObjectRelease(v202);
      v203 = *((_QWORD *)v197 + 18);
      if (v203 != 1)
        swift_bridgeObjectRelease(v203);
      v204 = *((_QWORD *)v197 + 22);
      if (v204 != 1)
        swift_bridgeObjectRelease(v204);
      v205 = *((_QWORD *)v197 + 26);
      if (v205 != 1)
        swift_bridgeObjectRelease(v205);
      v206 = *((_QWORD *)v197 + 30);
      if (v206 != 1)
        swift_bridgeObjectRelease(v206);
      v207 = *((_QWORD *)v197 + 34);
      if (v207 != 1)
        swift_bridgeObjectRelease(v207);
      v208 = *((_QWORD *)v197 + 38);
      if (v208 != 1)
        swift_bridgeObjectRelease(v208);
      v209 = *((_QWORD *)v197 + 42);
      if (v209 != 1)
        swift_bridgeObjectRelease(v209);
      v210 = *((_QWORD *)v197 + 46);
      if (v210 != 1)
        swift_bridgeObjectRelease(v210);
      v211 = *((_QWORD *)v197 + 50);
      if (v211 != 1)
        swift_bridgeObjectRelease(v211);
      v212 = *((_QWORD *)v197 + 54);
      if (v212 != 1)
        swift_bridgeObjectRelease(v212);
      v213 = *((_QWORD *)v197 + 58);
      if (v213 != 1)
        swift_bridgeObjectRelease(v213);
      v214 = *((_QWORD *)v197 + 62);
      if (v214 != 1)
        swift_bridgeObjectRelease(v214);
      v215 = *((_QWORD *)v197 + 66);
      if (v215 != 1)
        swift_bridgeObjectRelease(v215);
      v216 = *((_QWORD *)v197 + 70);
      if (v216 != 1)
        swift_bridgeObjectRelease(v216);
      v217 = *((_QWORD *)v197 + 74);
      if (v217 != 1)
        swift_bridgeObjectRelease(v217);
      v218 = *((_QWORD *)v197 + 78);
      if (v218 != 1)
        swift_bridgeObjectRelease(v218);
      v219 = *((_QWORD *)v197 + 82);
      if (v219 != 1)
        swift_bridgeObjectRelease(v219);
      v220 = *((_QWORD *)v197 + 86);
      if (v220 != 1)
        swift_bridgeObjectRelease(v220);
      v221 = *((_QWORD *)v197 + 90);
      if (v221 != 1)
        swift_bridgeObjectRelease(v221);
      v222 = *((_QWORD *)v197 + 94);
      if (v222 != 1)
        swift_bridgeObjectRelease(v222);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 104));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 105));
    }
    if (*((_QWORD *)v197 + 208) != 1)
    {
      v223 = *((_QWORD *)v197 + 106);
      if (v223 != 1)
        swift_bridgeObjectRelease(v223);
      v224 = *((_QWORD *)v197 + 110);
      if (v224 != 1)
        swift_bridgeObjectRelease(v224);
      v225 = *((_QWORD *)v197 + 114);
      if (v225 != 1)
        swift_bridgeObjectRelease(v225);
      v226 = *((_QWORD *)v197 + 118);
      if (v226 != 1)
        swift_bridgeObjectRelease(v226);
      v227 = *((_QWORD *)v197 + 122);
      if (v227 != 1)
        swift_bridgeObjectRelease(v227);
      v228 = *((_QWORD *)v197 + 126);
      if (v228 != 1)
        swift_bridgeObjectRelease(v228);
      v229 = *((_QWORD *)v197 + 130);
      if (v229 != 1)
        swift_bridgeObjectRelease(v229);
      v230 = *((_QWORD *)v197 + 134);
      if (v230 != 1)
        swift_bridgeObjectRelease(v230);
      v231 = *((_QWORD *)v197 + 138);
      if (v231 != 1)
        swift_bridgeObjectRelease(v231);
      v232 = *((_QWORD *)v197 + 142);
      if (v232 != 1)
        swift_bridgeObjectRelease(v232);
      v233 = *((_QWORD *)v197 + 146);
      if (v233 != 1)
        swift_bridgeObjectRelease(v233);
      v234 = *((_QWORD *)v197 + 150);
      if (v234 != 1)
        swift_bridgeObjectRelease(v234);
      v235 = *((_QWORD *)v197 + 154);
      if (v235 != 1)
        swift_bridgeObjectRelease(v235);
      v236 = *((_QWORD *)v197 + 158);
      if (v236 != 1)
        swift_bridgeObjectRelease(v236);
      v237 = *((_QWORD *)v197 + 162);
      if (v237 != 1)
        swift_bridgeObjectRelease(v237);
      v238 = *((_QWORD *)v197 + 166);
      if (v238 != 1)
        swift_bridgeObjectRelease(v238);
      v239 = *((_QWORD *)v197 + 170);
      if (v239 != 1)
        swift_bridgeObjectRelease(v239);
      v240 = *((_QWORD *)v197 + 174);
      if (v240 != 1)
        swift_bridgeObjectRelease(v240);
      v241 = *((_QWORD *)v197 + 178);
      if (v241 != 1)
        swift_bridgeObjectRelease(v241);
      v242 = *((_QWORD *)v197 + 182);
      if (v242 != 1)
        swift_bridgeObjectRelease(v242);
      v243 = *((_QWORD *)v197 + 186);
      if (v243 != 1)
        swift_bridgeObjectRelease(v243);
      v244 = *((_QWORD *)v197 + 190);
      if (v244 != 1)
        swift_bridgeObjectRelease(v244);
      v245 = *((_QWORD *)v197 + 194);
      if (v245 != 1)
        swift_bridgeObjectRelease(v245);
      v246 = *((_QWORD *)v197 + 198);
      if (v246 != 1)
        swift_bridgeObjectRelease(v246);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 208));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 209));
    }
    if (*((_QWORD *)v197 + 312) != 1)
    {
      v247 = *((_QWORD *)v197 + 210);
      if (v247 != 1)
        swift_bridgeObjectRelease(v247);
      v248 = *((_QWORD *)v197 + 214);
      if (v248 != 1)
        swift_bridgeObjectRelease(v248);
      v249 = *((_QWORD *)v197 + 218);
      if (v249 != 1)
        swift_bridgeObjectRelease(v249);
      v250 = *((_QWORD *)v197 + 222);
      if (v250 != 1)
        swift_bridgeObjectRelease(v250);
      v251 = *((_QWORD *)v197 + 226);
      if (v251 != 1)
        swift_bridgeObjectRelease(v251);
      v252 = *((_QWORD *)v197 + 230);
      if (v252 != 1)
        swift_bridgeObjectRelease(v252);
      v253 = *((_QWORD *)v197 + 234);
      if (v253 != 1)
        swift_bridgeObjectRelease(v253);
      v254 = *((_QWORD *)v197 + 238);
      if (v254 != 1)
        swift_bridgeObjectRelease(v254);
      v255 = *((_QWORD *)v197 + 242);
      if (v255 != 1)
        swift_bridgeObjectRelease(v255);
      v256 = *((_QWORD *)v197 + 246);
      if (v256 != 1)
        swift_bridgeObjectRelease(v256);
      v257 = *((_QWORD *)v197 + 250);
      if (v257 != 1)
        swift_bridgeObjectRelease(v257);
      v258 = *((_QWORD *)v197 + 254);
      if (v258 != 1)
        swift_bridgeObjectRelease(v258);
      v259 = *((_QWORD *)v197 + 258);
      if (v259 != 1)
        swift_bridgeObjectRelease(v259);
      v260 = *((_QWORD *)v197 + 262);
      if (v260 != 1)
        swift_bridgeObjectRelease(v260);
      v261 = *((_QWORD *)v197 + 266);
      if (v261 != 1)
        swift_bridgeObjectRelease(v261);
      v262 = *((_QWORD *)v197 + 270);
      if (v262 != 1)
        swift_bridgeObjectRelease(v262);
      v263 = *((_QWORD *)v197 + 274);
      if (v263 != 1)
        swift_bridgeObjectRelease(v263);
      v264 = *((_QWORD *)v197 + 278);
      if (v264 != 1)
        swift_bridgeObjectRelease(v264);
      v265 = *((_QWORD *)v197 + 282);
      if (v265 != 1)
        swift_bridgeObjectRelease(v265);
      v266 = *((_QWORD *)v197 + 286);
      if (v266 != 1)
        swift_bridgeObjectRelease(v266);
      v267 = *((_QWORD *)v197 + 290);
      if (v267 != 1)
        swift_bridgeObjectRelease(v267);
      v268 = *((_QWORD *)v197 + 294);
      if (v268 != 1)
        swift_bridgeObjectRelease(v268);
      v269 = *((_QWORD *)v197 + 298);
      if (v269 != 1)
        swift_bridgeObjectRelease(v269);
      v270 = *((_QWORD *)v197 + 302);
      if (v270 != 1)
        swift_bridgeObjectRelease(v270);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 312));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 313));
    }
    if (*((_QWORD *)v197 + 416) != 1)
    {
      v271 = *((_QWORD *)v197 + 314);
      if (v271 != 1)
        swift_bridgeObjectRelease(v271);
      v272 = *((_QWORD *)v197 + 318);
      if (v272 != 1)
        swift_bridgeObjectRelease(v272);
      v273 = *((_QWORD *)v197 + 322);
      if (v273 != 1)
        swift_bridgeObjectRelease(v273);
      v274 = *((_QWORD *)v197 + 326);
      if (v274 != 1)
        swift_bridgeObjectRelease(v274);
      v275 = *((_QWORD *)v197 + 330);
      if (v275 != 1)
        swift_bridgeObjectRelease(v275);
      v276 = *((_QWORD *)v197 + 334);
      if (v276 != 1)
        swift_bridgeObjectRelease(v276);
      v277 = *((_QWORD *)v197 + 338);
      if (v277 != 1)
        swift_bridgeObjectRelease(v277);
      v278 = *((_QWORD *)v197 + 342);
      if (v278 != 1)
        swift_bridgeObjectRelease(v278);
      v279 = *((_QWORD *)v197 + 346);
      if (v279 != 1)
        swift_bridgeObjectRelease(v279);
      v280 = *((_QWORD *)v197 + 350);
      if (v280 != 1)
        swift_bridgeObjectRelease(v280);
      v281 = *((_QWORD *)v197 + 354);
      if (v281 != 1)
        swift_bridgeObjectRelease(v281);
      v282 = *((_QWORD *)v197 + 358);
      if (v282 != 1)
        swift_bridgeObjectRelease(v282);
      v283 = *((_QWORD *)v197 + 362);
      if (v283 != 1)
        swift_bridgeObjectRelease(v283);
      v284 = *((_QWORD *)v197 + 366);
      if (v284 != 1)
        swift_bridgeObjectRelease(v284);
      v285 = *((_QWORD *)v197 + 370);
      if (v285 != 1)
        swift_bridgeObjectRelease(v285);
      v286 = *((_QWORD *)v197 + 374);
      if (v286 != 1)
        swift_bridgeObjectRelease(v286);
      v287 = *((_QWORD *)v197 + 378);
      if (v287 != 1)
        swift_bridgeObjectRelease(v287);
      v288 = *((_QWORD *)v197 + 382);
      if (v288 != 1)
        swift_bridgeObjectRelease(v288);
      v289 = *((_QWORD *)v197 + 386);
      if (v289 != 1)
        swift_bridgeObjectRelease(v289);
      v290 = *((_QWORD *)v197 + 390);
      if (v290 != 1)
        swift_bridgeObjectRelease(v290);
      v291 = *((_QWORD *)v197 + 394);
      if (v291 != 1)
        swift_bridgeObjectRelease(v291);
      v292 = *((_QWORD *)v197 + 398);
      if (v292 != 1)
        swift_bridgeObjectRelease(v292);
      v293 = *((_QWORD *)v197 + 402);
      if (v293 != 1)
        swift_bridgeObjectRelease(v293);
      v294 = *((_QWORD *)v197 + 406);
      if (v294 != 1)
        swift_bridgeObjectRelease(v294);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 416));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 417));
    }
    if (*((_QWORD *)v197 + 520) != 1)
    {
      v295 = *((_QWORD *)v197 + 418);
      if (v295 != 1)
        swift_bridgeObjectRelease(v295);
      v296 = *((_QWORD *)v197 + 422);
      if (v296 != 1)
        swift_bridgeObjectRelease(v296);
      v297 = *((_QWORD *)v197 + 426);
      if (v297 != 1)
        swift_bridgeObjectRelease(v297);
      v298 = *((_QWORD *)v197 + 430);
      if (v298 != 1)
        swift_bridgeObjectRelease(v298);
      v299 = *((_QWORD *)v197 + 434);
      if (v299 != 1)
        swift_bridgeObjectRelease(v299);
      v300 = *((_QWORD *)v197 + 438);
      if (v300 != 1)
        swift_bridgeObjectRelease(v300);
      v301 = *((_QWORD *)v197 + 442);
      if (v301 != 1)
        swift_bridgeObjectRelease(v301);
      v302 = *((_QWORD *)v197 + 446);
      if (v302 != 1)
        swift_bridgeObjectRelease(v302);
      v303 = *((_QWORD *)v197 + 450);
      if (v303 != 1)
        swift_bridgeObjectRelease(v303);
      v304 = *((_QWORD *)v197 + 454);
      if (v304 != 1)
        swift_bridgeObjectRelease(v304);
      v305 = *((_QWORD *)v197 + 458);
      if (v305 != 1)
        swift_bridgeObjectRelease(v305);
      v306 = *((_QWORD *)v197 + 462);
      if (v306 != 1)
        swift_bridgeObjectRelease(v306);
      v307 = *((_QWORD *)v197 + 466);
      if (v307 != 1)
        swift_bridgeObjectRelease(v307);
      v308 = *((_QWORD *)v197 + 470);
      if (v308 != 1)
        swift_bridgeObjectRelease(v308);
      v309 = *((_QWORD *)v197 + 474);
      if (v309 != 1)
        swift_bridgeObjectRelease(v309);
      v310 = *((_QWORD *)v197 + 478);
      if (v310 != 1)
        swift_bridgeObjectRelease(v310);
      v311 = *((_QWORD *)v197 + 482);
      if (v311 != 1)
        swift_bridgeObjectRelease(v311);
      v312 = *((_QWORD *)v197 + 486);
      if (v312 != 1)
        swift_bridgeObjectRelease(v312);
      v313 = *((_QWORD *)v197 + 490);
      if (v313 != 1)
        swift_bridgeObjectRelease(v313);
      v314 = *((_QWORD *)v197 + 494);
      if (v314 != 1)
        swift_bridgeObjectRelease(v314);
      v315 = *((_QWORD *)v197 + 498);
      if (v315 != 1)
        swift_bridgeObjectRelease(v315);
      v316 = *((_QWORD *)v197 + 502);
      if (v316 != 1)
        swift_bridgeObjectRelease(v316);
      v317 = *((_QWORD *)v197 + 506);
      if (v317 != 1)
        swift_bridgeObjectRelease(v317);
      v318 = *((_QWORD *)v197 + 510);
      if (v318 != 1)
        swift_bridgeObjectRelease(v318);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 520));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 521));
    }
    if (*((_QWORD *)v197 + 624) != 1)
    {
      v319 = *((_QWORD *)v197 + 522);
      if (v319 != 1)
        swift_bridgeObjectRelease(v319);
      v320 = *((_QWORD *)v197 + 526);
      if (v320 != 1)
        swift_bridgeObjectRelease(v320);
      v321 = *((_QWORD *)v197 + 530);
      if (v321 != 1)
        swift_bridgeObjectRelease(v321);
      v322 = *((_QWORD *)v197 + 534);
      if (v322 != 1)
        swift_bridgeObjectRelease(v322);
      v323 = *((_QWORD *)v197 + 538);
      if (v323 != 1)
        swift_bridgeObjectRelease(v323);
      v324 = *((_QWORD *)v197 + 542);
      if (v324 != 1)
        swift_bridgeObjectRelease(v324);
      v325 = *((_QWORD *)v197 + 546);
      if (v325 != 1)
        swift_bridgeObjectRelease(v325);
      v326 = *((_QWORD *)v197 + 550);
      if (v326 != 1)
        swift_bridgeObjectRelease(v326);
      v327 = *((_QWORD *)v197 + 554);
      if (v327 != 1)
        swift_bridgeObjectRelease(v327);
      v328 = *((_QWORD *)v197 + 558);
      if (v328 != 1)
        swift_bridgeObjectRelease(v328);
      v329 = *((_QWORD *)v197 + 562);
      if (v329 != 1)
        swift_bridgeObjectRelease(v329);
      v330 = *((_QWORD *)v197 + 566);
      if (v330 != 1)
        swift_bridgeObjectRelease(v330);
      v331 = *((_QWORD *)v197 + 570);
      if (v331 != 1)
        swift_bridgeObjectRelease(v331);
      v332 = *((_QWORD *)v197 + 574);
      if (v332 != 1)
        swift_bridgeObjectRelease(v332);
      v333 = *((_QWORD *)v197 + 578);
      if (v333 != 1)
        swift_bridgeObjectRelease(v333);
      v334 = *((_QWORD *)v197 + 582);
      if (v334 != 1)
        swift_bridgeObjectRelease(v334);
      v335 = *((_QWORD *)v197 + 586);
      if (v335 != 1)
        swift_bridgeObjectRelease(v335);
      v336 = *((_QWORD *)v197 + 590);
      if (v336 != 1)
        swift_bridgeObjectRelease(v336);
      v337 = *((_QWORD *)v197 + 594);
      if (v337 != 1)
        swift_bridgeObjectRelease(v337);
      v338 = *((_QWORD *)v197 + 598);
      if (v338 != 1)
        swift_bridgeObjectRelease(v338);
      v339 = *((_QWORD *)v197 + 602);
      if (v339 != 1)
        swift_bridgeObjectRelease(v339);
      v340 = *((_QWORD *)v197 + 606);
      if (v340 != 1)
        swift_bridgeObjectRelease(v340);
      v341 = *((_QWORD *)v197 + 610);
      if (v341 != 1)
        swift_bridgeObjectRelease(v341);
      v342 = *((_QWORD *)v197 + 614);
      if (v342 != 1)
        swift_bridgeObjectRelease(v342);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 624));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 625));
    }
    if (*((_QWORD *)v197 + 728) != 1)
    {
      v343 = *((_QWORD *)v197 + 626);
      if (v343 != 1)
        swift_bridgeObjectRelease(v343);
      v344 = *((_QWORD *)v197 + 630);
      if (v344 != 1)
        swift_bridgeObjectRelease(v344);
      v345 = *((_QWORD *)v197 + 634);
      if (v345 != 1)
        swift_bridgeObjectRelease(v345);
      v346 = *((_QWORD *)v197 + 638);
      if (v346 != 1)
        swift_bridgeObjectRelease(v346);
      v347 = *((_QWORD *)v197 + 642);
      if (v347 != 1)
        swift_bridgeObjectRelease(v347);
      v348 = *((_QWORD *)v197 + 646);
      if (v348 != 1)
        swift_bridgeObjectRelease(v348);
      v349 = *((_QWORD *)v197 + 650);
      if (v349 != 1)
        swift_bridgeObjectRelease(v349);
      v350 = *((_QWORD *)v197 + 654);
      if (v350 != 1)
        swift_bridgeObjectRelease(v350);
      v351 = *((_QWORD *)v197 + 658);
      if (v351 != 1)
        swift_bridgeObjectRelease(v351);
      v352 = *((_QWORD *)v197 + 662);
      if (v352 != 1)
        swift_bridgeObjectRelease(v352);
      v353 = *((_QWORD *)v197 + 666);
      if (v353 != 1)
        swift_bridgeObjectRelease(v353);
      v354 = *((_QWORD *)v197 + 670);
      if (v354 != 1)
        swift_bridgeObjectRelease(v354);
      v355 = *((_QWORD *)v197 + 674);
      if (v355 != 1)
        swift_bridgeObjectRelease(v355);
      v356 = *((_QWORD *)v197 + 678);
      if (v356 != 1)
        swift_bridgeObjectRelease(v356);
      v357 = *((_QWORD *)v197 + 682);
      if (v357 != 1)
        swift_bridgeObjectRelease(v357);
      v358 = *((_QWORD *)v197 + 686);
      if (v358 != 1)
        swift_bridgeObjectRelease(v358);
      v359 = *((_QWORD *)v197 + 690);
      if (v359 != 1)
        swift_bridgeObjectRelease(v359);
      v360 = *((_QWORD *)v197 + 694);
      if (v360 != 1)
        swift_bridgeObjectRelease(v360);
      v361 = *((_QWORD *)v197 + 698);
      if (v361 != 1)
        swift_bridgeObjectRelease(v361);
      v362 = *((_QWORD *)v197 + 702);
      if (v362 != 1)
        swift_bridgeObjectRelease(v362);
      v363 = *((_QWORD *)v197 + 706);
      if (v363 != 1)
        swift_bridgeObjectRelease(v363);
      v364 = *((_QWORD *)v197 + 710);
      if (v364 != 1)
        swift_bridgeObjectRelease(v364);
      v365 = *((_QWORD *)v197 + 714);
      if (v365 != 1)
        swift_bridgeObjectRelease(v365);
      v366 = *((_QWORD *)v197 + 718);
      if (v366 != 1)
        swift_bridgeObjectRelease(v366);
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 728));
      swift_bridgeObjectRelease(*((_QWORD *)v197 + 729));
    }
    swift_bridgeObjectRelease(*((_QWORD *)v197 + 730));
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1003D6720()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100004828((uint64_t *)&unk_100633958) - 8) + 80);
  sub_1003C7C00(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_1003D676C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D6790()
{
  uint64_t v0;

  return sub_10042011C(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1003D6798()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D67A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D67B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void (*v34)(char *, char *, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v37 - 8);
  v5 = __chkstk_darwin(v37);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_100004828(&qword_1006385B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IdentityProofingIDType(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v36 - v19;
  if (!a2)
  {
    v29 = defaultLogger()(v18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "identityTypeToIdentityPassType -> IDType is nil in the proofing session ", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28 = v7;
    goto LABEL_9;
  }
  v21 = swift_bridgeObjectRetain(a2);
  IdentityProofingIDType.init(rawValue:)(a1, a2, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v22 = sub_100008030((uint64_t)v12, &qword_1006385B0);
    v23 = defaultLogger()(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "identityTypeToIdentityPassType -> Invalid IDType in the proofing session", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28 = v9;
LABEL_9:
    v27(v28, v37);
    return 0;
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v34(v20, v12, v13);
  v34(v17, v20, v13);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v17, v13);
  if (v35 == enum case for IdentityProofingIDType.stateID(_:))
    return 2;
  if (v35 == enum case for IdentityProofingIDType.dl(_:))
    return 1;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return 0;
}

uint64_t sub_1003D6AB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t result;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE v84[24];
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  v69 = a4;
  v80 = a5;
  v73 = type metadata accessor for DIPError.Code(0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v75 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for DIPError(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.PropertyKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v64[1] = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v74 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v64 - v18;
  defaultLogger()(v17);
  v82 = a2;
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v81 = v13;
  v71 = v10;
  v67 = a3;
  v66 = a1;
  if (v23)
  {
    v24 = a3;
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v79 = v14;
    v27 = v26;
    v85 = v26;
    *(_DWORD *)v25 = 136315394;
    v28 = v82;
    swift_bridgeObjectRetain(v82);
    v83 = sub_1000E3AC8(a1, v28, &v85);
    v68 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v25 + 4);
    swift_bridgeObjectRelease_n(v28, 3);
    *(_WORD *)(v25 + 12) = 2080;
    v29 = IdentityTarget.debugDescription.getter(v24);
    v31 = v30;
    v83 = sub_1000E3AC8(v29, v30, &v85);
    v32 = v68;
    v33 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v25 + 14);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "fetchAndUpdateProofingSession called for proofingSessionID: %s and target: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v70 = *(void (**)(char *, uint64_t))(v79 + 8);
    v70(v19, v33);
  }
  else
  {

    swift_bridgeObjectRelease_n(v82, 2);
    v70 = *(void (**)(char *, uint64_t))(v14 + 8);
    v70(v19, v13);
    v32 = v11;
  }
  v34 = swift_allocObject(&unk_100616528, 32, 7);
  v35 = type metadata accessor for IdentityProofingDataContext();
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  swift_allocObject(v35, 24, 7);
  sub_1000D6044();
  v79 = v34;
  v37 = v36;
  v68 = v32;
  v38 = v34;
  v39 = swift_allocObject(&unk_100616550, 96, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100520950;
  v65 = v39 + 16;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  v40 = swift_allocObject(&unk_100616528, 32, 7);
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  v41 = swift_allocObject(&unk_100616528, 32, 7);
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = 0;
  v42 = v69;
  v43 = *v69;
  v87 = v69[1];
  v88 = v43;
  v86 = v69[2];
  v44 = swift_allocObject(&unk_100616578, 128, 7);
  v45 = v42[1];
  *(_OWORD *)(v44 + 72) = *v42;
  v46 = v66;
  *(_QWORD *)(v44 + 16) = v37;
  *(_QWORD *)(v44 + 24) = v46;
  v47 = v82;
  v48 = v67;
  *(_QWORD *)(v44 + 32) = v82;
  *(_QWORD *)(v44 + 40) = v48;
  *(_QWORD *)(v44 + 48) = v38;
  *(_QWORD *)(v44 + 56) = v41;
  *(_QWORD *)(v44 + 64) = v40;
  *(_OWORD *)(v44 + 88) = v45;
  v49 = v42[2];
  v50 = v40;
  *(_OWORD *)(v44 + 104) = v49;
  *(_QWORD *)(v44 + 120) = v39;
  swift_bridgeObjectRetain(v47);
  swift_retain(v37);
  swift_retain(v38);
  swift_retain(v41);
  swift_retain(v40);
  sub_1000DB7AC((uint64_t)&v88);
  sub_1000DB7AC((uint64_t)&v87);
  sub_1000DB7AC((uint64_t)&v86);
  swift_retain(v39);
  sub_1000D6570((uint64_t)sub_1003D9CA4, v44);
  swift_release(v44);
  swift_release(v37);
  swift_beginAccess(v65, &v85, 0, 0);
  v53 = *(_QWORD *)(v39 + 24);
  v78 = *(_QWORD *)(v39 + 16);
  v82 = v41;
  v54 = *(_QWORD *)(v39 + 32);
  v55 = *(_QWORD *)(v39 + 40);
  v56 = *(_QWORD *)(v39 + 48);
  v57 = *(_QWORD *)(v39 + 56);
  v81 = v50;
  v59 = *(_QWORD *)(v39 + 64);
  v58 = *(_QWORD *)(v39 + 72);
  v60 = *(_QWORD *)(v39 + 80);
  v61 = *(_QWORD *)(v39 + 88);
  sub_1003D99FC(v78, v53, v54, v55, v56, v57, v59, v58, v60, v61);
  swift_release(v79);
  v62 = v39;
  v63 = v78;
  swift_release(v62);
  swift_release(v81);
  result = swift_release(v82);
  v52 = v80;
  *v80 = v63;
  v52[1] = v53;
  v52[2] = v54;
  v52[3] = v55;
  v52[4] = v56;
  v52[5] = v57;
  v52[6] = v59;
  v52[7] = v58;
  v52[8] = v60;
  v52[9] = v61;
  return result;
}

uint64_t sub_1003D7444(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[3];

  v99 = a6;
  v96 = a5;
  v97 = a4;
  v109 = a3;
  v8 = sub_100004828((uint64_t *)&unk_100633958);
  __chkstk_darwin(v8);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for PendingActionContext(0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v12 = (uint64_t *)((char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v100 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v107 = (char *)&v95 - v18;
  v19 = __chkstk_darwin(v17);
  v106 = (char *)&v95 - v20;
  v21 = __chkstk_darwin(v19);
  v102 = (char *)&v95 - v22;
  v23 = __chkstk_darwin(v21);
  v101 = (char *)&v95 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v95 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v95 - v29;
  defaultLogger()(v28);
  v31 = swift_bridgeObjectRetain_n(a2, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v98 = v27;
  v105 = a1;
  if (v34)
  {
    v35 = swift_slowAlloc(12, -1);
    v103 = v13;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc(32, -1);
    v104 = v12;
    v38 = v37;
    v112[0] = v37;
    v95 = v14;
    *(_DWORD *)v36 = 136315138;
    swift_bridgeObjectRetain(a2);
    v111 = sub_1000E3AC8(a1, a2, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "SEID is %s", v36, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    v39 = v38;
    v12 = v104;
    swift_slowDealloc(v39, -1, -1);
    v40 = v36;
    v13 = v103;
    swift_slowDealloc(v40, -1, -1);

    v41 = *(void (**)(char *, uint64_t))(v95 + 8);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v41 = *(void (**)(char *, uint64_t))(v14 + 8);
  }
  v41(v30, v13);
  sub_100038B24(v109, (uint64_t)v10, (uint64_t *)&unk_100633958);
  v42 = v110;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v10, 1, v110) != 1)
  {
    v50 = sub_100038AE0((uint64_t)v10, (uint64_t)v12, type metadata accessor for PendingActionContext);
    v51 = *(uint64_t *)((char *)v12 + *(int *)(v42 + 76));
    if (v51 && *(_QWORD *)(v51 + 16))
    {
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v51);
      v52 = sub_1004A8604(v105, a2);
      if ((v53 & 1) != 0)
      {
        v54 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 24 * v52);
        v56 = *v54;
        v55 = v54[1];
        v57 = v54[2];
        sub_100022948(v55, v57);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v51);
        v58 = v12[1];
        if (!v58)
        {
          v72 = sub_100022948(v55, v57);
          v73 = v102;
          v74 = defaultLogger()(v72);
          v75 = Logger.logObject.getter(v74);
          v76 = static os_log_type_t.debug.getter(v75);
          if (os_log_type_enabled(v75, v76))
          {
            v77 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v77 = 0;
            _os_log_impl((void *)&_mh_execute_header, v75, v76, "provisioningCredentialIdentifier unavailable, will not be able to save watch provisioning data", v77, 2u);
            swift_slowDealloc(v77, -1, -1);
          }

          sub_100007F8C(v55, v57);
          sub_100007F8C(v55, v57);
          v71 = v73;
          goto LABEL_20;
        }
        v59 = v55;
        v60 = v12[3];
        if (v60)
        {
          v61 = v57;
          v62 = v12[5];
          if (v62)
          {
            v103 = v13;
            v104 = v12;
            v63 = *v12;
            v109 = v12[2];
            v110 = v63;
            v108 = v12[4];
            v64 = type metadata accessor for IdentityProofingDataContext();
            swift_allocObject(v64, 24, 7);
            v65 = v59;
            sub_100022948(v59, v61);
            swift_bridgeObjectRetain(v58);
            swift_bridgeObjectRetain(v60);
            swift_bridgeObjectRetain(v62);
            sub_1000D6044();
            v91 = v90;
            v92 = (_QWORD *)swift_allocObject(&unk_1006164D8, 120, 7);
            v93 = v96;
            v92[2] = v91;
            v92[3] = v93;
            v94 = v97;
            v92[4] = v99;
            v92[5] = v94;
            v92[6] = v110;
            v92[7] = v58;
            v92[8] = v109;
            v92[9] = v60;
            v92[10] = v108;
            v92[11] = v62;
            v92[12] = v65;
            v92[13] = v61;
            v92[14] = v56;
            sub_100022948(v65, v61);
            swift_retain(v91);
            swift_bridgeObjectRetain(v99);
            sub_1000D6570((uint64_t)sub_1003D9908, (uint64_t)v92);
            sub_100035DAC((uint64_t)v104, type metadata accessor for PendingActionContext);
            sub_100007F8C(v65, v61);
            swift_release(v91);
            swift_release(v92);
            return sub_100007F8C(v65, v61);
          }
          v83 = v61;
          v84 = sub_100022948(v59, v61);
          v85 = v98;
          v86 = defaultLogger()(v84);
          v87 = Logger.logObject.getter(v86);
          v88 = static os_log_type_t.debug.getter(v87);
          if (os_log_type_enabled(v87, v88))
          {
            v89 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v89 = 0;
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "partnerSchemeIdentifier unavailable, will not be able to save watch provisioning data", v89, 2u);
            swift_slowDealloc(v89, -1, -1);
          }

          sub_100007F8C(v59, v83);
          sub_100007F8C(v59, v83);
          v71 = v85;
          goto LABEL_20;
        }
        v78 = sub_100022948(v59, v57);
        v66 = v101;
        v79 = defaultLogger()(v78);
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.debug.getter(v80);
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v82 = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "targetInstanceIdentifier unavailable, will not be able to save watch provisioning data", v82, 2u);
          swift_slowDealloc(v82, -1, -1);
        }

        sub_100007F8C(v59, v57);
        sub_100007F8C(v59, v57);
LABEL_19:
        v71 = v66;
LABEL_20:
        v41(v71, v13);
        return sub_100035DAC((uint64_t)v12, type metadata accessor for PendingActionContext);
      }
      swift_bridgeObjectRelease(a2);
      v50 = swift_bridgeObjectRelease(v51);
    }
    v66 = v106;
    v67 = defaultLogger()(v50);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to fetch provisioningContext from pendingActionsContext, will not be able to save watch provisioning data", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }

    goto LABEL_19;
  }
  v43 = sub_100008030((uint64_t)v10, (uint64_t *)&unk_100633958);
  v44 = v107;
  v45 = defaultLogger()(v43);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to fetch pendingActionsContext, will not be able to save watch provisioning data", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  return ((uint64_t (*)(char *, uint64_t))v41)(v44, v13);
}

uint64_t sub_1003D7D18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003D7D3C()
{
  uint64_t v0;

  return sub_100421A48(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003D7D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v370;

  v1 = *(_QWORD *)(sub_100004828((uint64_t *)&unk_100633958) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  swift_release(*(_QWORD *)(v0 + 24));
  v5 = (_QWORD *)(v0 + v3);
  v6 = (int *)type metadata accessor for PendingActionContext(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
    goto LABEL_727;
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  swift_bridgeObjectRelease(v5[5]);
  swift_bridgeObjectRelease(v5[7]);
  swift_bridgeObjectRelease(v5[9]);
  swift_bridgeObjectRelease(v5[12]);
  swift_bridgeObjectRelease(v5[13]);
  v7 = v5[15];
  if (v7 == 1)
    goto LABEL_5;
  if (v7 != 2)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v5[17]);
LABEL_5:
    v8 = v5[19];
    if (v8 != 1)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v5[21]);
    }
  }
  v9 = v5[23];
  if (v9 != 1)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v5[25]);
  }
  swift_bridgeObjectRelease(v5[27]);
  swift_bridgeObjectRelease(v5[29]);
  v10 = v5[31];
  if (v10 != 1)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v5[33]);
  }
  v11 = (_QWORD *)((char *)v5 + v6[17]);
  v12 = type metadata accessor for WorkflowRecommendationResponse(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v370 = v2;
    v13 = (v2 + 32) & ~v2;
    v14 = v4;
    if (v11[3])
    {
      swift_bridgeObjectRelease(v11[1]);
      swift_bridgeObjectRelease(v11[3]);
      swift_bridgeObjectRelease(v11[5]);
      swift_bridgeObjectRelease(v11[7]);
      swift_bridgeObjectRelease(v11[9]);
      swift_bridgeObjectRelease(v11[11]);
    }
    v15 = (_QWORD *)((char *)v11 + *(int *)(v12 + 20));
    swift_bridgeObjectRelease(v15[1]);
    swift_bridgeObjectRelease(v15[3]);
    swift_bridgeObjectRelease(v15[5]);
    swift_bridgeObjectRelease(v15[7]);
    swift_bridgeObjectRelease(v15[9]);
    swift_bridgeObjectRelease(v15[11]);
    swift_bridgeObjectRelease(v15[14]);
    swift_bridgeObjectRelease(v15[16]);
    swift_bridgeObjectRelease(v15[17]);
    swift_bridgeObjectRelease(v15[19]);
    swift_bridgeObjectRelease(v15[20]);
    swift_bridgeObjectRelease(v15[22]);
    v16 = (int *)type metadata accessor for Workflow(0);
    v17 = (char *)v15 + v16[18];
    v18 = type metadata accessor for HardwareAttestationType(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[19]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[20]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[21] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[23]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[24]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[25]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[28]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[29]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[30]));
    v20 = (_QWORD *)((char *)v15 + v16[38]);
    v21 = v20[1];
    v4 = v14;
    v3 = v13;
    v2 = v370;
    if (v21 != 1)
    {
      swift_bridgeObjectRelease(v21);
      if (v20[104] != 1)
      {
        v22 = v20[2];
        if (v22 != 1)
          swift_bridgeObjectRelease(v22);
        v23 = v20[6];
        if (v23 != 1)
          swift_bridgeObjectRelease(v23);
        v24 = v20[10];
        if (v24 != 1)
          swift_bridgeObjectRelease(v24);
        v25 = v20[14];
        if (v25 != 1)
          swift_bridgeObjectRelease(v25);
        v26 = v20[18];
        if (v26 != 1)
          swift_bridgeObjectRelease(v26);
        v27 = v20[22];
        if (v27 != 1)
          swift_bridgeObjectRelease(v27);
        v28 = v20[26];
        if (v28 != 1)
          swift_bridgeObjectRelease(v28);
        v29 = v20[30];
        if (v29 != 1)
          swift_bridgeObjectRelease(v29);
        v30 = v20[34];
        if (v30 != 1)
          swift_bridgeObjectRelease(v30);
        v31 = v20[38];
        if (v31 != 1)
          swift_bridgeObjectRelease(v31);
        v32 = v20[42];
        if (v32 != 1)
          swift_bridgeObjectRelease(v32);
        v33 = v20[46];
        if (v33 != 1)
          swift_bridgeObjectRelease(v33);
        v34 = v20[50];
        if (v34 != 1)
          swift_bridgeObjectRelease(v34);
        v35 = v20[54];
        if (v35 != 1)
          swift_bridgeObjectRelease(v35);
        v36 = v20[58];
        if (v36 != 1)
          swift_bridgeObjectRelease(v36);
        v37 = v20[62];
        if (v37 != 1)
          swift_bridgeObjectRelease(v37);
        v38 = v20[66];
        if (v38 != 1)
          swift_bridgeObjectRelease(v38);
        v39 = v20[70];
        if (v39 != 1)
          swift_bridgeObjectRelease(v39);
        v40 = v20[74];
        if (v40 != 1)
          swift_bridgeObjectRelease(v40);
        v41 = v20[78];
        if (v41 != 1)
          swift_bridgeObjectRelease(v41);
        v42 = v20[82];
        if (v42 != 1)
          swift_bridgeObjectRelease(v42);
        v43 = v20[86];
        if (v43 != 1)
          swift_bridgeObjectRelease(v43);
        v44 = v20[90];
        if (v44 != 1)
          swift_bridgeObjectRelease(v44);
        v45 = v20[94];
        if (v45 != 1)
          swift_bridgeObjectRelease(v45);
        swift_bridgeObjectRelease(v20[104]);
        swift_bridgeObjectRelease(v20[105]);
      }
      if (v20[208] != 1)
      {
        v46 = v20[106];
        if (v46 != 1)
          swift_bridgeObjectRelease(v46);
        v47 = v20[110];
        if (v47 != 1)
          swift_bridgeObjectRelease(v47);
        v48 = v20[114];
        if (v48 != 1)
          swift_bridgeObjectRelease(v48);
        v49 = v20[118];
        if (v49 != 1)
          swift_bridgeObjectRelease(v49);
        v50 = v20[122];
        if (v50 != 1)
          swift_bridgeObjectRelease(v50);
        v51 = v20[126];
        if (v51 != 1)
          swift_bridgeObjectRelease(v51);
        v52 = v20[130];
        if (v52 != 1)
          swift_bridgeObjectRelease(v52);
        v53 = v20[134];
        if (v53 != 1)
          swift_bridgeObjectRelease(v53);
        v54 = v20[138];
        if (v54 != 1)
          swift_bridgeObjectRelease(v54);
        v55 = v20[142];
        if (v55 != 1)
          swift_bridgeObjectRelease(v55);
        v56 = v20[146];
        if (v56 != 1)
          swift_bridgeObjectRelease(v56);
        v57 = v20[150];
        if (v57 != 1)
          swift_bridgeObjectRelease(v57);
        v58 = v20[154];
        if (v58 != 1)
          swift_bridgeObjectRelease(v58);
        v59 = v20[158];
        if (v59 != 1)
          swift_bridgeObjectRelease(v59);
        v60 = v20[162];
        if (v60 != 1)
          swift_bridgeObjectRelease(v60);
        v61 = v20[166];
        if (v61 != 1)
          swift_bridgeObjectRelease(v61);
        v62 = v20[170];
        if (v62 != 1)
          swift_bridgeObjectRelease(v62);
        v63 = v20[174];
        if (v63 != 1)
          swift_bridgeObjectRelease(v63);
        v64 = v20[178];
        if (v64 != 1)
          swift_bridgeObjectRelease(v64);
        v65 = v20[182];
        if (v65 != 1)
          swift_bridgeObjectRelease(v65);
        v66 = v20[186];
        if (v66 != 1)
          swift_bridgeObjectRelease(v66);
        v67 = v20[190];
        if (v67 != 1)
          swift_bridgeObjectRelease(v67);
        v68 = v20[194];
        if (v68 != 1)
          swift_bridgeObjectRelease(v68);
        v69 = v20[198];
        if (v69 != 1)
          swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(v20[208]);
        swift_bridgeObjectRelease(v20[209]);
      }
      if (v20[312] != 1)
      {
        v70 = v20[210];
        if (v70 != 1)
          swift_bridgeObjectRelease(v70);
        v71 = v20[214];
        if (v71 != 1)
          swift_bridgeObjectRelease(v71);
        v72 = v20[218];
        if (v72 != 1)
          swift_bridgeObjectRelease(v72);
        v73 = v20[222];
        if (v73 != 1)
          swift_bridgeObjectRelease(v73);
        v74 = v20[226];
        if (v74 != 1)
          swift_bridgeObjectRelease(v74);
        v75 = v20[230];
        if (v75 != 1)
          swift_bridgeObjectRelease(v75);
        v76 = v20[234];
        if (v76 != 1)
          swift_bridgeObjectRelease(v76);
        v77 = v20[238];
        if (v77 != 1)
          swift_bridgeObjectRelease(v77);
        v78 = v20[242];
        if (v78 != 1)
          swift_bridgeObjectRelease(v78);
        v79 = v20[246];
        if (v79 != 1)
          swift_bridgeObjectRelease(v79);
        v80 = v20[250];
        if (v80 != 1)
          swift_bridgeObjectRelease(v80);
        v81 = v20[254];
        if (v81 != 1)
          swift_bridgeObjectRelease(v81);
        v82 = v20[258];
        if (v82 != 1)
          swift_bridgeObjectRelease(v82);
        v83 = v20[262];
        if (v83 != 1)
          swift_bridgeObjectRelease(v83);
        v84 = v20[266];
        if (v84 != 1)
          swift_bridgeObjectRelease(v84);
        v85 = v20[270];
        if (v85 != 1)
          swift_bridgeObjectRelease(v85);
        v86 = v20[274];
        if (v86 != 1)
          swift_bridgeObjectRelease(v86);
        v87 = v20[278];
        if (v87 != 1)
          swift_bridgeObjectRelease(v87);
        v88 = v20[282];
        if (v88 != 1)
          swift_bridgeObjectRelease(v88);
        v89 = v20[286];
        if (v89 != 1)
          swift_bridgeObjectRelease(v89);
        v90 = v20[290];
        if (v90 != 1)
          swift_bridgeObjectRelease(v90);
        v91 = v20[294];
        if (v91 != 1)
          swift_bridgeObjectRelease(v91);
        v92 = v20[298];
        if (v92 != 1)
          swift_bridgeObjectRelease(v92);
        v93 = v20[302];
        if (v93 != 1)
          swift_bridgeObjectRelease(v93);
        swift_bridgeObjectRelease(v20[312]);
        swift_bridgeObjectRelease(v20[313]);
      }
      if (v20[416] != 1)
      {
        v94 = v20[314];
        if (v94 != 1)
          swift_bridgeObjectRelease(v94);
        v95 = v20[318];
        if (v95 != 1)
          swift_bridgeObjectRelease(v95);
        v96 = v20[322];
        if (v96 != 1)
          swift_bridgeObjectRelease(v96);
        v97 = v20[326];
        if (v97 != 1)
          swift_bridgeObjectRelease(v97);
        v98 = v20[330];
        if (v98 != 1)
          swift_bridgeObjectRelease(v98);
        v99 = v20[334];
        if (v99 != 1)
          swift_bridgeObjectRelease(v99);
        v100 = v20[338];
        if (v100 != 1)
          swift_bridgeObjectRelease(v100);
        v101 = v20[342];
        if (v101 != 1)
          swift_bridgeObjectRelease(v101);
        v102 = v20[346];
        if (v102 != 1)
          swift_bridgeObjectRelease(v102);
        v103 = v20[350];
        if (v103 != 1)
          swift_bridgeObjectRelease(v103);
        v104 = v20[354];
        if (v104 != 1)
          swift_bridgeObjectRelease(v104);
        v105 = v20[358];
        if (v105 != 1)
          swift_bridgeObjectRelease(v105);
        v106 = v20[362];
        if (v106 != 1)
          swift_bridgeObjectRelease(v106);
        v107 = v20[366];
        if (v107 != 1)
          swift_bridgeObjectRelease(v107);
        v108 = v20[370];
        if (v108 != 1)
          swift_bridgeObjectRelease(v108);
        v109 = v20[374];
        if (v109 != 1)
          swift_bridgeObjectRelease(v109);
        v110 = v20[378];
        if (v110 != 1)
          swift_bridgeObjectRelease(v110);
        v111 = v20[382];
        if (v111 != 1)
          swift_bridgeObjectRelease(v111);
        v112 = v20[386];
        if (v112 != 1)
          swift_bridgeObjectRelease(v112);
        v113 = v20[390];
        if (v113 != 1)
          swift_bridgeObjectRelease(v113);
        v114 = v20[394];
        if (v114 != 1)
          swift_bridgeObjectRelease(v114);
        v115 = v20[398];
        if (v115 != 1)
          swift_bridgeObjectRelease(v115);
        v116 = v20[402];
        if (v116 != 1)
          swift_bridgeObjectRelease(v116);
        v117 = v20[406];
        if (v117 != 1)
          swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(v20[416]);
        swift_bridgeObjectRelease(v20[417]);
      }
      if (v20[520] != 1)
      {
        v118 = v20[418];
        if (v118 != 1)
          swift_bridgeObjectRelease(v118);
        v119 = v20[422];
        if (v119 != 1)
          swift_bridgeObjectRelease(v119);
        v120 = v20[426];
        if (v120 != 1)
          swift_bridgeObjectRelease(v120);
        v121 = v20[430];
        if (v121 != 1)
          swift_bridgeObjectRelease(v121);
        v122 = v20[434];
        if (v122 != 1)
          swift_bridgeObjectRelease(v122);
        v123 = v20[438];
        if (v123 != 1)
          swift_bridgeObjectRelease(v123);
        v124 = v20[442];
        if (v124 != 1)
          swift_bridgeObjectRelease(v124);
        v125 = v20[446];
        if (v125 != 1)
          swift_bridgeObjectRelease(v125);
        v126 = v20[450];
        if (v126 != 1)
          swift_bridgeObjectRelease(v126);
        v127 = v20[454];
        if (v127 != 1)
          swift_bridgeObjectRelease(v127);
        v128 = v20[458];
        if (v128 != 1)
          swift_bridgeObjectRelease(v128);
        v129 = v20[462];
        if (v129 != 1)
          swift_bridgeObjectRelease(v129);
        v130 = v20[466];
        if (v130 != 1)
          swift_bridgeObjectRelease(v130);
        v131 = v20[470];
        if (v131 != 1)
          swift_bridgeObjectRelease(v131);
        v132 = v20[474];
        if (v132 != 1)
          swift_bridgeObjectRelease(v132);
        v133 = v20[478];
        if (v133 != 1)
          swift_bridgeObjectRelease(v133);
        v134 = v20[482];
        if (v134 != 1)
          swift_bridgeObjectRelease(v134);
        v135 = v20[486];
        if (v135 != 1)
          swift_bridgeObjectRelease(v135);
        v136 = v20[490];
        if (v136 != 1)
          swift_bridgeObjectRelease(v136);
        v137 = v20[494];
        if (v137 != 1)
          swift_bridgeObjectRelease(v137);
        v138 = v20[498];
        if (v138 != 1)
          swift_bridgeObjectRelease(v138);
        v139 = v20[502];
        if (v139 != 1)
          swift_bridgeObjectRelease(v139);
        v140 = v20[506];
        if (v140 != 1)
          swift_bridgeObjectRelease(v140);
        v141 = v20[510];
        if (v141 != 1)
          swift_bridgeObjectRelease(v141);
        swift_bridgeObjectRelease(v20[520]);
        swift_bridgeObjectRelease(v20[521]);
      }
      if (v20[624] != 1)
      {
        v142 = v20[522];
        if (v142 != 1)
          swift_bridgeObjectRelease(v142);
        v143 = v20[526];
        if (v143 != 1)
          swift_bridgeObjectRelease(v143);
        v144 = v20[530];
        if (v144 != 1)
          swift_bridgeObjectRelease(v144);
        v145 = v20[534];
        if (v145 != 1)
          swift_bridgeObjectRelease(v145);
        v146 = v20[538];
        if (v146 != 1)
          swift_bridgeObjectRelease(v146);
        v147 = v20[542];
        if (v147 != 1)
          swift_bridgeObjectRelease(v147);
        v148 = v20[546];
        if (v148 != 1)
          swift_bridgeObjectRelease(v148);
        v149 = v20[550];
        if (v149 != 1)
          swift_bridgeObjectRelease(v149);
        v150 = v20[554];
        if (v150 != 1)
          swift_bridgeObjectRelease(v150);
        v151 = v20[558];
        if (v151 != 1)
          swift_bridgeObjectRelease(v151);
        v152 = v20[562];
        if (v152 != 1)
          swift_bridgeObjectRelease(v152);
        v153 = v20[566];
        if (v153 != 1)
          swift_bridgeObjectRelease(v153);
        v154 = v20[570];
        if (v154 != 1)
          swift_bridgeObjectRelease(v154);
        v155 = v20[574];
        if (v155 != 1)
          swift_bridgeObjectRelease(v155);
        v156 = v20[578];
        if (v156 != 1)
          swift_bridgeObjectRelease(v156);
        v157 = v20[582];
        if (v157 != 1)
          swift_bridgeObjectRelease(v157);
        v158 = v20[586];
        if (v158 != 1)
          swift_bridgeObjectRelease(v158);
        v159 = v20[590];
        if (v159 != 1)
          swift_bridgeObjectRelease(v159);
        v160 = v20[594];
        if (v160 != 1)
          swift_bridgeObjectRelease(v160);
        v161 = v20[598];
        if (v161 != 1)
          swift_bridgeObjectRelease(v161);
        v162 = v20[602];
        if (v162 != 1)
          swift_bridgeObjectRelease(v162);
        v163 = v20[606];
        if (v163 != 1)
          swift_bridgeObjectRelease(v163);
        v164 = v20[610];
        if (v164 != 1)
          swift_bridgeObjectRelease(v164);
        v165 = v20[614];
        if (v165 != 1)
          swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(v20[624]);
        swift_bridgeObjectRelease(v20[625]);
      }
      if (v20[728] != 1)
      {
        v166 = v20[626];
        if (v166 != 1)
          swift_bridgeObjectRelease(v166);
        v167 = v20[630];
        if (v167 != 1)
          swift_bridgeObjectRelease(v167);
        v168 = v20[634];
        if (v168 != 1)
          swift_bridgeObjectRelease(v168);
        v169 = v20[638];
        if (v169 != 1)
          swift_bridgeObjectRelease(v169);
        v170 = v20[642];
        if (v170 != 1)
          swift_bridgeObjectRelease(v170);
        v171 = v20[646];
        if (v171 != 1)
          swift_bridgeObjectRelease(v171);
        v172 = v20[650];
        if (v172 != 1)
          swift_bridgeObjectRelease(v172);
        v173 = v20[654];
        if (v173 != 1)
          swift_bridgeObjectRelease(v173);
        v174 = v20[658];
        if (v174 != 1)
          swift_bridgeObjectRelease(v174);
        v175 = v20[662];
        if (v175 != 1)
          swift_bridgeObjectRelease(v175);
        v176 = v20[666];
        if (v176 != 1)
          swift_bridgeObjectRelease(v176);
        v177 = v20[670];
        if (v177 != 1)
          swift_bridgeObjectRelease(v177);
        v178 = v20[674];
        if (v178 != 1)
          swift_bridgeObjectRelease(v178);
        v179 = v20[678];
        if (v179 != 1)
          swift_bridgeObjectRelease(v179);
        v180 = v20[682];
        if (v180 != 1)
          swift_bridgeObjectRelease(v180);
        v181 = v20[686];
        if (v181 != 1)
          swift_bridgeObjectRelease(v181);
        v182 = v20[690];
        if (v182 != 1)
          swift_bridgeObjectRelease(v182);
        v183 = v20[694];
        if (v183 != 1)
          swift_bridgeObjectRelease(v183);
        v184 = v20[698];
        if (v184 != 1)
          swift_bridgeObjectRelease(v184);
        v185 = v20[702];
        if (v185 != 1)
          swift_bridgeObjectRelease(v185);
        v186 = v20[706];
        if (v186 != 1)
          swift_bridgeObjectRelease(v186);
        v187 = v20[710];
        if (v187 != 1)
          swift_bridgeObjectRelease(v187);
        v188 = v20[714];
        if (v188 != 1)
          swift_bridgeObjectRelease(v188);
        v189 = v20[718];
        if (v189 != 1)
          swift_bridgeObjectRelease(v189);
        swift_bridgeObjectRelease(v20[728]);
        swift_bridgeObjectRelease(v20[729]);
      }
      swift_bridgeObjectRelease(v20[730]);
    }
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[39]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[40] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + v16[41] + 8));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + v6[19]));
  v190 = (_QWORD *)((char *)v5 + v6[25]);
  v191 = v190[1];
  if (v191)
  {
    swift_bridgeObjectRelease(v191);
    swift_bridgeObjectRelease(v190[3]);
    swift_bridgeObjectRelease(v190[5]);
    swift_bridgeObjectRelease(v190[7]);
  }
  v192 = (_QWORD *)((char *)v5 + v6[26]);
  v193 = v192[1];
  if (v193)
  {
    swift_bridgeObjectRelease(v193);
    swift_bridgeObjectRelease(v192[3]);
    swift_bridgeObjectRelease(v192[5]);
    swift_bridgeObjectRelease(v192[7]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + v6[27] + 8));
  v194 = (char *)v5 + v6[28];
  v195 = sub_100004828(&qword_100633968);
  v196 = *(_QWORD *)(v195 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
    (*(void (**)(char *, uint64_t))(v196 + 8))(v194, v195);
  v197 = (_QWORD *)((char *)v5 + v6[29]);
  v198 = v197[1];
  if (v198 != 1)
  {
    swift_bridgeObjectRelease(v198);
    if (v197[104] != 1)
    {
      v199 = v197[2];
      if (v199 != 1)
        swift_bridgeObjectRelease(v199);
      v200 = v197[6];
      if (v200 != 1)
        swift_bridgeObjectRelease(v200);
      v201 = v197[10];
      if (v201 != 1)
        swift_bridgeObjectRelease(v201);
      v202 = v197[14];
      if (v202 != 1)
        swift_bridgeObjectRelease(v202);
      v203 = v197[18];
      if (v203 != 1)
        swift_bridgeObjectRelease(v203);
      v204 = v197[22];
      if (v204 != 1)
        swift_bridgeObjectRelease(v204);
      v205 = v197[26];
      if (v205 != 1)
        swift_bridgeObjectRelease(v205);
      v206 = v197[30];
      if (v206 != 1)
        swift_bridgeObjectRelease(v206);
      v207 = v197[34];
      if (v207 != 1)
        swift_bridgeObjectRelease(v207);
      v208 = v197[38];
      if (v208 != 1)
        swift_bridgeObjectRelease(v208);
      v209 = v197[42];
      if (v209 != 1)
        swift_bridgeObjectRelease(v209);
      v210 = v197[46];
      if (v210 != 1)
        swift_bridgeObjectRelease(v210);
      v211 = v197[50];
      if (v211 != 1)
        swift_bridgeObjectRelease(v211);
      v212 = v197[54];
      if (v212 != 1)
        swift_bridgeObjectRelease(v212);
      v213 = v197[58];
      if (v213 != 1)
        swift_bridgeObjectRelease(v213);
      v214 = v197[62];
      if (v214 != 1)
        swift_bridgeObjectRelease(v214);
      v215 = v197[66];
      if (v215 != 1)
        swift_bridgeObjectRelease(v215);
      v216 = v197[70];
      if (v216 != 1)
        swift_bridgeObjectRelease(v216);
      v217 = v197[74];
      if (v217 != 1)
        swift_bridgeObjectRelease(v217);
      v218 = v197[78];
      if (v218 != 1)
        swift_bridgeObjectRelease(v218);
      v219 = v197[82];
      if (v219 != 1)
        swift_bridgeObjectRelease(v219);
      v220 = v197[86];
      if (v220 != 1)
        swift_bridgeObjectRelease(v220);
      v221 = v197[90];
      if (v221 != 1)
        swift_bridgeObjectRelease(v221);
      v222 = v197[94];
      if (v222 != 1)
        swift_bridgeObjectRelease(v222);
      swift_bridgeObjectRelease(v197[104]);
      swift_bridgeObjectRelease(v197[105]);
    }
    if (v197[208] != 1)
    {
      v223 = v197[106];
      if (v223 != 1)
        swift_bridgeObjectRelease(v223);
      v224 = v197[110];
      if (v224 != 1)
        swift_bridgeObjectRelease(v224);
      v225 = v197[114];
      if (v225 != 1)
        swift_bridgeObjectRelease(v225);
      v226 = v197[118];
      if (v226 != 1)
        swift_bridgeObjectRelease(v226);
      v227 = v197[122];
      if (v227 != 1)
        swift_bridgeObjectRelease(v227);
      v228 = v197[126];
      if (v228 != 1)
        swift_bridgeObjectRelease(v228);
      v229 = v197[130];
      if (v229 != 1)
        swift_bridgeObjectRelease(v229);
      v230 = v197[134];
      if (v230 != 1)
        swift_bridgeObjectRelease(v230);
      v231 = v197[138];
      if (v231 != 1)
        swift_bridgeObjectRelease(v231);
      v232 = v197[142];
      if (v232 != 1)
        swift_bridgeObjectRelease(v232);
      v233 = v197[146];
      if (v233 != 1)
        swift_bridgeObjectRelease(v233);
      v234 = v197[150];
      if (v234 != 1)
        swift_bridgeObjectRelease(v234);
      v235 = v197[154];
      if (v235 != 1)
        swift_bridgeObjectRelease(v235);
      v236 = v197[158];
      if (v236 != 1)
        swift_bridgeObjectRelease(v236);
      v237 = v197[162];
      if (v237 != 1)
        swift_bridgeObjectRelease(v237);
      v238 = v197[166];
      if (v238 != 1)
        swift_bridgeObjectRelease(v238);
      v239 = v197[170];
      if (v239 != 1)
        swift_bridgeObjectRelease(v239);
      v240 = v197[174];
      if (v240 != 1)
        swift_bridgeObjectRelease(v240);
      v241 = v197[178];
      if (v241 != 1)
        swift_bridgeObjectRelease(v241);
      v242 = v197[182];
      if (v242 != 1)
        swift_bridgeObjectRelease(v242);
      v243 = v197[186];
      if (v243 != 1)
        swift_bridgeObjectRelease(v243);
      v244 = v197[190];
      if (v244 != 1)
        swift_bridgeObjectRelease(v244);
      v245 = v197[194];
      if (v245 != 1)
        swift_bridgeObjectRelease(v245);
      v246 = v197[198];
      if (v246 != 1)
        swift_bridgeObjectRelease(v246);
      swift_bridgeObjectRelease(v197[208]);
      swift_bridgeObjectRelease(v197[209]);
    }
    if (v197[312] != 1)
    {
      v247 = v197[210];
      if (v247 != 1)
        swift_bridgeObjectRelease(v247);
      v248 = v197[214];
      if (v248 != 1)
        swift_bridgeObjectRelease(v248);
      v249 = v197[218];
      if (v249 != 1)
        swift_bridgeObjectRelease(v249);
      v250 = v197[222];
      if (v250 != 1)
        swift_bridgeObjectRelease(v250);
      v251 = v197[226];
      if (v251 != 1)
        swift_bridgeObjectRelease(v251);
      v252 = v197[230];
      if (v252 != 1)
        swift_bridgeObjectRelease(v252);
      v253 = v197[234];
      if (v253 != 1)
        swift_bridgeObjectRelease(v253);
      v254 = v197[238];
      if (v254 != 1)
        swift_bridgeObjectRelease(v254);
      v255 = v197[242];
      if (v255 != 1)
        swift_bridgeObjectRelease(v255);
      v256 = v197[246];
      if (v256 != 1)
        swift_bridgeObjectRelease(v256);
      v257 = v197[250];
      if (v257 != 1)
        swift_bridgeObjectRelease(v257);
      v258 = v197[254];
      if (v258 != 1)
        swift_bridgeObjectRelease(v258);
      v259 = v197[258];
      if (v259 != 1)
        swift_bridgeObjectRelease(v259);
      v260 = v197[262];
      if (v260 != 1)
        swift_bridgeObjectRelease(v260);
      v261 = v197[266];
      if (v261 != 1)
        swift_bridgeObjectRelease(v261);
      v262 = v197[270];
      if (v262 != 1)
        swift_bridgeObjectRelease(v262);
      v263 = v197[274];
      if (v263 != 1)
        swift_bridgeObjectRelease(v263);
      v264 = v197[278];
      if (v264 != 1)
        swift_bridgeObjectRelease(v264);
      v265 = v197[282];
      if (v265 != 1)
        swift_bridgeObjectRelease(v265);
      v266 = v197[286];
      if (v266 != 1)
        swift_bridgeObjectRelease(v266);
      v267 = v197[290];
      if (v267 != 1)
        swift_bridgeObjectRelease(v267);
      v268 = v197[294];
      if (v268 != 1)
        swift_bridgeObjectRelease(v268);
      v269 = v197[298];
      if (v269 != 1)
        swift_bridgeObjectRelease(v269);
      v270 = v197[302];
      if (v270 != 1)
        swift_bridgeObjectRelease(v270);
      swift_bridgeObjectRelease(v197[312]);
      swift_bridgeObjectRelease(v197[313]);
    }
    if (v197[416] != 1)
    {
      v271 = v197[314];
      if (v271 != 1)
        swift_bridgeObjectRelease(v271);
      v272 = v197[318];
      if (v272 != 1)
        swift_bridgeObjectRelease(v272);
      v273 = v197[322];
      if (v273 != 1)
        swift_bridgeObjectRelease(v273);
      v274 = v197[326];
      if (v274 != 1)
        swift_bridgeObjectRelease(v274);
      v275 = v197[330];
      if (v275 != 1)
        swift_bridgeObjectRelease(v275);
      v276 = v197[334];
      if (v276 != 1)
        swift_bridgeObjectRelease(v276);
      v277 = v197[338];
      if (v277 != 1)
        swift_bridgeObjectRelease(v277);
      v278 = v197[342];
      if (v278 != 1)
        swift_bridgeObjectRelease(v278);
      v279 = v197[346];
      if (v279 != 1)
        swift_bridgeObjectRelease(v279);
      v280 = v197[350];
      if (v280 != 1)
        swift_bridgeObjectRelease(v280);
      v281 = v197[354];
      if (v281 != 1)
        swift_bridgeObjectRelease(v281);
      v282 = v197[358];
      if (v282 != 1)
        swift_bridgeObjectRelease(v282);
      v283 = v197[362];
      if (v283 != 1)
        swift_bridgeObjectRelease(v283);
      v284 = v197[366];
      if (v284 != 1)
        swift_bridgeObjectRelease(v284);
      v285 = v197[370];
      if (v285 != 1)
        swift_bridgeObjectRelease(v285);
      v286 = v197[374];
      if (v286 != 1)
        swift_bridgeObjectRelease(v286);
      v287 = v197[378];
      if (v287 != 1)
        swift_bridgeObjectRelease(v287);
      v288 = v197[382];
      if (v288 != 1)
        swift_bridgeObjectRelease(v288);
      v289 = v197[386];
      if (v289 != 1)
        swift_bridgeObjectRelease(v289);
      v290 = v197[390];
      if (v290 != 1)
        swift_bridgeObjectRelease(v290);
      v291 = v197[394];
      if (v291 != 1)
        swift_bridgeObjectRelease(v291);
      v292 = v197[398];
      if (v292 != 1)
        swift_bridgeObjectRelease(v292);
      v293 = v197[402];
      if (v293 != 1)
        swift_bridgeObjectRelease(v293);
      v294 = v197[406];
      if (v294 != 1)
        swift_bridgeObjectRelease(v294);
      swift_bridgeObjectRelease(v197[416]);
      swift_bridgeObjectRelease(v197[417]);
    }
    if (v197[520] != 1)
    {
      v295 = v197[418];
      if (v295 != 1)
        swift_bridgeObjectRelease(v295);
      v296 = v197[422];
      if (v296 != 1)
        swift_bridgeObjectRelease(v296);
      v297 = v197[426];
      if (v297 != 1)
        swift_bridgeObjectRelease(v297);
      v298 = v197[430];
      if (v298 != 1)
        swift_bridgeObjectRelease(v298);
      v299 = v197[434];
      if (v299 != 1)
        swift_bridgeObjectRelease(v299);
      v300 = v197[438];
      if (v300 != 1)
        swift_bridgeObjectRelease(v300);
      v301 = v197[442];
      if (v301 != 1)
        swift_bridgeObjectRelease(v301);
      v302 = v197[446];
      if (v302 != 1)
        swift_bridgeObjectRelease(v302);
      v303 = v197[450];
      if (v303 != 1)
        swift_bridgeObjectRelease(v303);
      v304 = v197[454];
      if (v304 != 1)
        swift_bridgeObjectRelease(v304);
      v305 = v197[458];
      if (v305 != 1)
        swift_bridgeObjectRelease(v305);
      v306 = v197[462];
      if (v306 != 1)
        swift_bridgeObjectRelease(v306);
      v307 = v197[466];
      if (v307 != 1)
        swift_bridgeObjectRelease(v307);
      v308 = v197[470];
      if (v308 != 1)
        swift_bridgeObjectRelease(v308);
      v309 = v197[474];
      if (v309 != 1)
        swift_bridgeObjectRelease(v309);
      v310 = v197[478];
      if (v310 != 1)
        swift_bridgeObjectRelease(v310);
      v311 = v197[482];
      if (v311 != 1)
        swift_bridgeObjectRelease(v311);
      v312 = v197[486];
      if (v312 != 1)
        swift_bridgeObjectRelease(v312);
      v313 = v197[490];
      if (v313 != 1)
        swift_bridgeObjectRelease(v313);
      v314 = v197[494];
      if (v314 != 1)
        swift_bridgeObjectRelease(v314);
      v315 = v197[498];
      if (v315 != 1)
        swift_bridgeObjectRelease(v315);
      v316 = v197[502];
      if (v316 != 1)
        swift_bridgeObjectRelease(v316);
      v317 = v197[506];
      if (v317 != 1)
        swift_bridgeObjectRelease(v317);
      v318 = v197[510];
      if (v318 != 1)
        swift_bridgeObjectRelease(v318);
      swift_bridgeObjectRelease(v197[520]);
      swift_bridgeObjectRelease(v197[521]);
    }
    if (v197[624] != 1)
    {
      v319 = v197[522];
      if (v319 != 1)
        swift_bridgeObjectRelease(v319);
      v320 = v197[526];
      if (v320 != 1)
        swift_bridgeObjectRelease(v320);
      v321 = v197[530];
      if (v321 != 1)
        swift_bridgeObjectRelease(v321);
      v322 = v197[534];
      if (v322 != 1)
        swift_bridgeObjectRelease(v322);
      v323 = v197[538];
      if (v323 != 1)
        swift_bridgeObjectRelease(v323);
      v324 = v197[542];
      if (v324 != 1)
        swift_bridgeObjectRelease(v324);
      v325 = v197[546];
      if (v325 != 1)
        swift_bridgeObjectRelease(v325);
      v326 = v197[550];
      if (v326 != 1)
        swift_bridgeObjectRelease(v326);
      v327 = v197[554];
      if (v327 != 1)
        swift_bridgeObjectRelease(v327);
      v328 = v197[558];
      if (v328 != 1)
        swift_bridgeObjectRelease(v328);
      v329 = v197[562];
      if (v329 != 1)
        swift_bridgeObjectRelease(v329);
      v330 = v197[566];
      if (v330 != 1)
        swift_bridgeObjectRelease(v330);
      v331 = v197[570];
      if (v331 != 1)
        swift_bridgeObjectRelease(v331);
      v332 = v197[574];
      if (v332 != 1)
        swift_bridgeObjectRelease(v332);
      v333 = v197[578];
      if (v333 != 1)
        swift_bridgeObjectRelease(v333);
      v334 = v197[582];
      if (v334 != 1)
        swift_bridgeObjectRelease(v334);
      v335 = v197[586];
      if (v335 != 1)
        swift_bridgeObjectRelease(v335);
      v336 = v197[590];
      if (v336 != 1)
        swift_bridgeObjectRelease(v336);
      v337 = v197[594];
      if (v337 != 1)
        swift_bridgeObjectRelease(v337);
      v338 = v197[598];
      if (v338 != 1)
        swift_bridgeObjectRelease(v338);
      v339 = v197[602];
      if (v339 != 1)
        swift_bridgeObjectRelease(v339);
      v340 = v197[606];
      if (v340 != 1)
        swift_bridgeObjectRelease(v340);
      v341 = v197[610];
      if (v341 != 1)
        swift_bridgeObjectRelease(v341);
      v342 = v197[614];
      if (v342 != 1)
        swift_bridgeObjectRelease(v342);
      swift_bridgeObjectRelease(v197[624]);
      swift_bridgeObjectRelease(v197[625]);
    }
    if (v197[728] != 1)
    {
      v343 = v197[626];
      if (v343 != 1)
        swift_bridgeObjectRelease(v343);
      v344 = v197[630];
      if (v344 != 1)
        swift_bridgeObjectRelease(v344);
      v345 = v197[634];
      if (v345 != 1)
        swift_bridgeObjectRelease(v345);
      v346 = v197[638];
      if (v346 != 1)
        swift_bridgeObjectRelease(v346);
      v347 = v197[642];
      if (v347 != 1)
        swift_bridgeObjectRelease(v347);
      v348 = v197[646];
      if (v348 != 1)
        swift_bridgeObjectRelease(v348);
      v349 = v197[650];
      if (v349 != 1)
        swift_bridgeObjectRelease(v349);
      v350 = v197[654];
      if (v350 != 1)
        swift_bridgeObjectRelease(v350);
      v351 = v197[658];
      if (v351 != 1)
        swift_bridgeObjectRelease(v351);
      v352 = v197[662];
      if (v352 != 1)
        swift_bridgeObjectRelease(v352);
      v353 = v197[666];
      if (v353 != 1)
        swift_bridgeObjectRelease(v353);
      v354 = v197[670];
      if (v354 != 1)
        swift_bridgeObjectRelease(v354);
      v355 = v197[674];
      if (v355 != 1)
        swift_bridgeObjectRelease(v355);
      v356 = v197[678];
      if (v356 != 1)
        swift_bridgeObjectRelease(v356);
      v357 = v197[682];
      if (v357 != 1)
        swift_bridgeObjectRelease(v357);
      v358 = v197[686];
      if (v358 != 1)
        swift_bridgeObjectRelease(v358);
      v359 = v197[690];
      if (v359 != 1)
        swift_bridgeObjectRelease(v359);
      v360 = v197[694];
      if (v360 != 1)
        swift_bridgeObjectRelease(v360);
      v361 = v197[698];
      if (v361 != 1)
        swift_bridgeObjectRelease(v361);
      v362 = v197[702];
      if (v362 != 1)
        swift_bridgeObjectRelease(v362);
      v363 = v197[706];
      if (v363 != 1)
        swift_bridgeObjectRelease(v363);
      v364 = v197[710];
      if (v364 != 1)
        swift_bridgeObjectRelease(v364);
      v365 = v197[714];
      if (v365 != 1)
        swift_bridgeObjectRelease(v365);
      v366 = v197[718];
      if (v366 != 1)
        swift_bridgeObjectRelease(v366);
      swift_bridgeObjectRelease(v197[728]);
      swift_bridgeObjectRelease(v197[729]);
    }
    swift_bridgeObjectRelease(v197[730]);
  }
LABEL_727:
  v367 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v368 = v367 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v367 + 8));
  return swift_deallocObject(v0, v368, v2 | 7);
}

uint64_t sub_1003D980C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_100004828((uint64_t *)&unk_100633958) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_10063F964);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10001D0A0;
  return sub_1003C89D8(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1003D98BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  sub_100007F8C(v0[12], v0[13]);
  return swift_deallocObject(v0, 120, 7);
}

void sub_1003D9908()
{
  uint64_t v0;

  sub_1003C8BC4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_1003D9944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return sub_100007F78(a9, a10);
  }
  return result;
}

_QWORD *sub_1003D99B0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

uint64_t sub_1003D99FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return sub_100028034(a9, a10);
  }
  return result;
}

uint64_t sub_1003D9A68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_100022948(a2, a3);
  return result;
}

unint64_t sub_1003D9A84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10063F978;
  if (!qword_10063F978)
  {
    v1 = objc_opt_self(DCCredentialStore);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10063F978);
  }
  return result;
}

uint64_t sub_1003D9AC0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  v1 = v0[13];
  if (v1 >> 60 != 15)
    sub_100007F8C(v0[12], v1);
  v2 = v0[15];
  if (v2 >> 60 != 15)
    sub_100007F8C(v0[14], v2);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0(v0 + 16);
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1003D9B34(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for IdentityPhoneProvisioningProvider(a2, a1);
  return a2;
}

uint64_t sub_1003D9B70(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_100007F8C(a2, a3);
  return result;
}

_QWORD *sub_1003D9B8C(_QWORD *a1)
{
  destroy for IdentityPhoneProvisioningProvider(a1);
  return a1;
}

uint64_t sub_1003D9BC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D9BE4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = v0[3];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
    v2 = v0[11];
    if (v2 >> 60 != 15)
      sub_100007F8C(v0[10], v2);
  }
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1003D9C40()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_release(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

void sub_1003D9CA4()
{
  uint64_t v0;

  sub_1003C9020(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), (Swift::String_optional *)(v0 + 72), *(_QWORD **)(v0 + 120));
}

uint64_t sub_1003D9CDC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1003D9D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v10 = *(_OWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 32);
  v7 = *(_OWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = swift_task_alloc(dword_10063F984);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10001D0A0;
  *(_QWORD *)(v5 + 248) = v4;
  *(_OWORD *)(v5 + 232) = v7;
  *(_OWORD *)(v5 + 216) = v8;
  *(_OWORD *)(v5 + 200) = v9;
  *(_OWORD *)(v5 + 184) = v10;
  *(_QWORD *)(v5 + 176) = a1;
  return swift_task_switch(sub_1003C40B0, 0, 0);
}

uint64_t sub_1003D9DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IdentityProofingIDType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003D9E48()
{
  return sub_1003D9E6C((uint64_t (*)(_QWORD))&type metadata accessor for IdentityProofingIDType, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, char *))sub_1003C4218);
}

uint64_t sub_1003D9E6C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), *((_QWORD *)v2 + 5), &v2[(v4 + 48) & ~v4]);
}

uint64_t *sub_1003D9EDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v4 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v37);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for ISO18013KnownDocTypes(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    v10 = v6[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Locale.Region(0);
    v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    v15 = swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13, v15);
    v16 = v6[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_100022948(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = v6[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v6[9];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v6[10];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v33 + 48);
    swift_bridgeObjectRetain(v24);
    v35 = swift_bridgeObjectRetain(v28);
    if (v34(v31, 1, v32, v35))
    {
      v36 = sub_100004828(&qword_100630A48);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v38 = v6[11];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    swift_bridgeObjectRetain(v41);
  }
  return a1;
}

uint64_t sub_1003DA0B0(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v3[5]));
  v4 = a1 + v3[6];
  v5 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_100007F8C(*(_QWORD *)(a1 + v3[7]), *(_QWORD *)(a1 + v3[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v3[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v3[9] + 8));
  v6 = a1 + v3[10];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + v3[11] + 8));
}

uint64_t sub_1003DA1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v6 = v5[5];
  v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  v8 = v5[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Locale.Region(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = v5[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_100022948(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  v19 = v5[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v5[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v5[10];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v31 + 48);
  swift_bridgeObjectRetain(v22);
  v33 = swift_bridgeObjectRetain(v26);
  if (v32(v29, 1, v30, v33))
  {
    v34 = sub_100004828(&qword_100630A48);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v35 = v5[11];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  return a1;
}

uint64_t sub_1003DA358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v6 = v5[5];
  v7 = *(_QWORD *)(a2 + v6);
  v8 = *(_QWORD *)(a1 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = v5[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = v5[7];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  sub_100022948(*v15, v17);
  v18 = *v14;
  v19 = v14[1];
  *v14 = v16;
  v14[1] = v17;
  sub_100007F8C(v18, v19);
  v20 = v5[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v5[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = v5[10];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v38 = sub_100004828(&qword_100630A48);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_7:
  v39 = v5[11];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  return a1;
}

uint64_t sub_1003DA584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  *(_QWORD *)(a1 + v5[5]) = *(_QWORD *)(a2 + v5[5]);
  v6 = v5[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  *(_OWORD *)(a1 + v5[8]) = *(_OWORD *)(a2 + v5[8]);
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  v10 = v5[10];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100004828(&qword_100630A48);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(a1 + v5[11]) = *(_OWORD *)(a2 + v5[11]);
  return a1;
}

uint64_t sub_1003DA6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for ISO18013KnownDocTypes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v6 = v5[5];
  v7 = *(_QWORD *)(a1 + v6);
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);
  swift_bridgeObjectRelease(v7);
  v8 = v5[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Locale.Region(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v5[7];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_100007F8C(v13, v14);
  v15 = v5[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v5[9];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v5[10];
  v28 = (void *)(a1 + v27);
  v29 = (void *)(a2 + v27);
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 40))(v28, v29, v30);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_6;
  }
  if (v34)
  {
LABEL_6:
    v35 = sub_100004828(&qword_100630A48);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v31 + 32))(v28, v29, v30);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_7:
  v36 = v5[11];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  v41 = v37[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  return a1;
}

uint64_t sub_1003DA8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DA8C8);
}

uint64_t sub_1003DA8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1003DA904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DA910);
}

uint64_t sub_1003DA910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DigitalPresentmentISOBuilder(uint64_t a1)
{
  uint64_t result;

  result = qword_10063F9F8;
  if (!qword_10063F9F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DigitalPresentmentISOBuilder);
  return result;
}

uint64_t sub_1003DA98C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ValidatedDigitalPresentmentRequest(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1003DA9F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v11;
  Swift::String v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  unint64_t v21;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10004E8F8(a1);
  v7 = v6;
  if (*(_QWORD *)(v6 + 16))
  {
    v8 = type metadata accessor for ISO18013KnownDocTypes(0);
    v9 = sub_100004790(&qword_10063FA58, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownDocTypes, (uint64_t)&protocol conformance descriptor for ISO18013KnownDocTypes);
    dispatch thunk of RawRepresentable.rawValue.getter(v8, v9);
    return ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)(v20[0], v20[1], v7, 0);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v11._countAndFlagsBits = 0x3837316334333736;
    v11._object = (void *)0xE800000000000000;
    v12._countAndFlagsBits = 0xD000000000000037;
    v12._object = (void *)0x800000010055F060;
    logMilestone(tag:description:)(v11, v12);
    v13 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v13(v5, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v2);
    v21 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v16 = swift_allocError(v14, v15, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010055F060, 0, v5, 0, v21, 0xD000000000000090, 0x800000010055F0A0, 0x3A5F28646C697562, 0xE900000000000029, 30);
    swift_willThrow(v17);
    v13(v5, enum case for DIPError.Code.internalError(_:), v2);
    swift_errorRetain(v16);
    v18 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v14, v15, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v16, v5, 0, v18, 0xD000000000000090, 0x800000010055F0A0, 0x3A5F28646C697562, 0xE900000000000029, 38);
    swift_willThrow(v19);
    return swift_errorRelease(v16);
  }
}

uint64_t sub_1003DACBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  int64_t v52;

  v3 = v2;
  v49 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004828(&qword_100630AE8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v13 = *(int *)(type metadata accessor for ValidatedDigitalPresentmentRequest(0) + 20);
  v48 = a1;
  v14 = *(_QWORD *)(a1 + v13);
  swift_bridgeObjectRetain(v14);
  v15 = sub_10011DE50((uint64_t)_swiftEmptyArrayStorage);
  v16 = *(_QWORD *)(v14 + 64);
  v50 = v14 + 64;
  v51[0] = v15;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v52 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(v14);
  v20 = 0;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    v26 = *(_QWORD *)(v14 + 48);
    v27 = type metadata accessor for IdentityElement(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v12, v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * i, v27);
    v28 = *(_QWORD *)(v14 + 56);
    v29 = type metadata accessor for IdentityIntentToStore(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(&v12[*(int *)(v7 + 48)], v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * i, v29);
    sub_1003DC6FC((uint64_t)v12, (uint64_t)v10);
    sub_1000FBE84(v51, (uint64_t)v10);
    if (v3)
      goto LABEL_30;
    v3 = 0;
    sub_1003DC744((uint64_t)v10);
    if (v19)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRelease(v51[0]);
      sub_1003DC744((uint64_t)v10);
      result = swift_release(v14);
      __break(1u);
      return result;
    }
    if (v20 >= v52)
      goto LABEL_25;
    v24 = *(_QWORD *)(v50 + 8 * v20);
    if (!v24)
      break;
LABEL_17:
    v19 = (v24 - 1) & v24;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v52)
    goto LABEL_25;
  v24 = *(_QWORD *)(v50 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v20 + 2;
  if (v20 + 2 >= v52)
    goto LABEL_25;
  v24 = *(_QWORD *)(v50 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v20 + 3;
  if (v20 + 3 >= v52)
    goto LABEL_25;
  v24 = *(_QWORD *)(v50 + 8 * v25);
  if (v24)
  {
LABEL_16:
    v20 = v25;
    goto LABEL_17;
  }
  v25 = v20 + 4;
  if (v20 + 4 < v52)
  {
    v24 = *(_QWORD *)(v50 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        v20 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_29;
        if (v20 >= v52)
          goto LABEL_25;
        v24 = *(_QWORD *)(v50 + 8 * v20);
        ++v25;
        if (v24)
          goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
LABEL_25:
  swift_release(v14);
  swift_bridgeObjectRelease(v14);
  v30 = v51[0];
  if (*(_QWORD *)(v51[0] + 16))
  {
    v31 = type metadata accessor for ISO18013KnownDocTypes(0);
    v32 = sub_100004790(&qword_10063FA58, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013KnownDocTypes, (uint64_t)&protocol conformance descriptor for ISO18013KnownDocTypes);
    dispatch thunk of RawRepresentable.rawValue.getter(v31, v32);
    return ISO18013ReaderRequest.ItemsRequest.init(docType:namespaces:requestInfo:)(v51[0], v51[1], v30, 0);
  }
  else
  {
    swift_bridgeObjectRelease(v51[0]);
    v34._countAndFlagsBits = 0x3837316334333736;
    v34._object = (void *)0xE800000000000000;
    v35._countAndFlagsBits = 0xD000000000000037;
    v35._object = (void *)0x800000010055F060;
    logMilestone(tag:description:)(v34, v35);
    v36 = v46;
    v37 = *(void (**)(char *, _QWORD, uint64_t))(v45 + 104);
    v38 = v47;
    v37(v47, enum case for DIPError.Code.digitalPresentmentNoElementsRequested(_:), v46);
    v52 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v41 = swift_allocError(v39, v40, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000037, 0x800000010055F060, 0, v38, 0, v52, 0xD000000000000090, 0x800000010055F0A0, 0x3A5F28646C697562, 0xE900000000000029, 30);
    swift_willThrow(v42);
    v37(v38, enum case for DIPError.Code.internalError(_:), v36);
    swift_errorRetain(v41);
    v43 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v39, v40, 0, 0);
    v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v41, v38, 0, v43, 0xD000000000000090, 0x800000010055F0A0, 0x3A5F28646C697562, 0xE900000000000029, 38);
    swift_willThrow(v44);
    return swift_errorRelease(v41);
  }
}

uint64_t sub_1003DB1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  Swift::String v98;
  uint64_t v99;
  os_log_t v100;
  uint8_t *v101;
  char *v102;
  Swift::String v103;
  Swift::String v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  os_log_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v107 = type metadata accessor for Logger(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v105 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100004828(&qword_10063FA38);
  __chkstk_darwin(v1);
  v109 = (char *)&v105 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for ISO18013SessionEstablishment(0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v111 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for ISO18013ReaderRequest(0);
  v112 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004828(&qword_100635758);
  __chkstk_darwin(v5);
  v114 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for ISO18013ReaderRequest.DocRequest(0);
  v126 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v125 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004828(&qword_100635F60);
  v118 = *(_QWORD *)(v8 - 8);
  v119 = v8;
  v9 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v130 = (char *)&v105 - v11;
  v12 = type metadata accessor for DIPError.Code(0);
  v121 = *(_QWORD *)(v12 - 8);
  v122 = v12;
  __chkstk_darwin(v12);
  v123 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ISO18013KnownDocTypes(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  v128 = *(_QWORD *)(v18 - 8);
  v129 = v18;
  v19 = __chkstk_darwin(v18);
  v124 = (os_log_t)((char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v19);
  v120 = (uint64_t)&v105 - v22;
  v23 = __chkstk_darwin(v21);
  v131 = (uint64_t)&v105 - v24;
  __chkstk_darwin(v23);
  v127 = (char *)&v105 - v25;
  v26 = sub_100004828(&qword_100635F70);
  __chkstk_darwin(v26);
  v28 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CBOREncoder(0);
  v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v31 = CBOREncoder.init()(v30);
  v32 = enum case for ISO18013PresentmentType.digital(_:);
  v33 = type metadata accessor for ISO18013PresentmentType(0);
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v28, v32, v33);
  v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
  v36 = v31;
  v37 = v15;
  v38 = v14;
  v39 = v33;
  v40 = v132;
  v35(v28, 0, 1, v39);
  CBOREncoder.presentmentType.setter(v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v17, v40, v14);
  v41 = v17;
  v42 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v17, v14);
  if (v42 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
  {
    v43 = v131;
    v44 = v133;
    sub_1003DA9F4(v40);
    v45 = v44;
    if (v44)
    {
LABEL_3:
      v46 = v36;
LABEL_8:
      swift_release(v46);
      return v36;
    }
  }
  else
  {
    v47 = v133;
    if (v42 != enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      v134 = 0;
      v135 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      v58._object = (void *)0x8000000100544F50;
      v58._countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v58);
      _print_unlocked<A, B>(_:_:)(v40, &v134, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v59 = v134;
      v60 = v135;
      v61 = v123;
      (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v123, enum case for DIPError.Code.digitalPresentmentInvalidDocumentDescriptor(_:), v122);
      v62 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
      v63 = type metadata accessor for DIPError(0);
      v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v63, v64, 0, 0);
      v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v59, v60, 0, v61, 0, v62, 0xD000000000000077, 0x800000010055EF40, 0xD00000000000001BLL, 0x800000010055F000, 38);
      swift_willThrow(v65);
      swift_release(v36);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v38);
      return v36;
    }
    v43 = v120;
    sub_1003DACBC(v40, v120);
    v45 = v47;
    if (v47)
      goto LABEL_3;
  }
  v133 = v36;
  v48 = v127;
  v49 = v128;
  v50 = v129;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v127, v43, v129);
  v51 = v124;
  (*(void (**)(os_log_t, char *, uint64_t))(v49 + 16))(v124, v48, v50);
  v52 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v53 = CBOREncoder.init()(v52);
  v54 = sub_100004790(&qword_100635FA0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest.ItemsRequest);
  v55 = sub_100004790(&qword_100635FA8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest.ItemsRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest.ItemsRequest);
  v56 = v130;
  CBOREncodedCBOR.init(value:tag:encoder:)(v51, 0, v53, v50, v54, v55);
  v36 = (uint64_t)v125;
  v57 = v126;
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    v46 = v133;
    goto LABEL_8;
  }
  v66 = v113;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v113, v56, v119);
  v67 = type metadata accessor for COSE_Sign1(0);
  v68 = v114;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v114, 1, 1, v67);
  v69 = ISO18013ReaderRequest.DocRequest.init(itemsRequest:readerAuth:)(v66, v68);
  v70 = static ISO18013ReaderRequest.supportedVersion.getter(v69);
  v71 = sub_100004828((uint64_t *)&unk_100635FB0);
  v72 = *(unsigned __int8 *)(v57 + 80);
  v73 = (v72 + 32) & ~v72;
  v74 = swift_allocObject(v71, v73 + *(_QWORD *)(v57 + 72), v72 | 7);
  *(_OWORD *)(v74 + 16) = xmmword_10051FFB0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v74 + v73, v36, v116);
  v75 = v115;
  ISO18013ReaderRequest.init(version:docRequests:)(v70);
  v76 = sub_100004790(&qword_10063FA40, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest);
  v77 = v133;
  v78 = dispatch thunk of CBOREncoder.encode<A>(_:)(v75, v117, v76);
  v80 = v79;
  v81 = sub_100004828(&qword_10063FA48);
  v82 = v109;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v109, 1, 1, v81);
  sub_100022948(v78, v80);
  v83 = v111;
  ISO18013SessionEstablishment.init(readerKey:data:)(v82, v78, v80);
  v84 = sub_100004790(&qword_10063FA50, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013SessionEstablishment, (uint64_t)&protocol conformance descriptor for ISO18013SessionEstablishment);
  v132 = v80;
  v85 = v110;
  v86 = dispatch thunk of CBOREncoder.encode<A>(_:)(v83, v110, v84);
  v36 = v86;
  v89 = v87;
  v131 = v78;
  v133 = v77;
  v90 = v105;
  defaultLogger()(v86);
  sub_100022948(v36, v89);
  v91 = sub_100022948(v36, v89);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.debug.getter(v92);
  v94 = os_log_type_enabled(v92, v93);
  v95 = v107;
  if (v94)
  {
    v124 = v92;
    v96 = (uint8_t *)swift_slowAlloc(12, -1);
    v97 = swift_slowAlloc(32, -1);
    v134 = v97;
    *(_DWORD *)v96 = 136315138;
    v123 = (char *)(v96 + 4);
    v98 = Data.base16EncodedString()();
    v136 = sub_1000E3AC8(v98._countAndFlagsBits, (unint64_t)v98._object, &v134);
    v99 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v123);
    swift_bridgeObjectRelease(v98._object);
    sub_100007F8C(v36, v89);
    sub_100007F8C(v36, v89);
    v100 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, v93, "DigitalPresentmentISOBuilder built session establishment %s", v96, 0xCu);
    swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1, -1);
    v101 = v96;
    v85 = v110;
    swift_slowDealloc(v101, -1, -1);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v90, v107);
    v102 = v111;
  }
  else
  {
    sub_100007F8C(v36, v89);
    sub_100007F8C(v36, v89);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v90, v95);
    v102 = v111;
    v99 = v117;
  }
  v103._countAndFlagsBits = 0xD000000000000030;
  v103._object = (void *)0x800000010055F020;
  v104._countAndFlagsBits = 0x3936626464613939;
  v104._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v104, v103);
  swift_release(v133);
  sub_100007F8C(v131, v132);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v102, v85);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v99);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v116);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v130, v119);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v129);
  return v36;
}

uint64_t sub_1003DBDB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  Swift::String v74;
  uint64_t v75;
  _BYTE v77[4];
  int v78;
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v5 = v4;
  v86 = a4;
  v97 = a1;
  v98 = a3;
  v7 = type metadata accessor for DIPError.Code(0);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  __chkstk_darwin(v7);
  v85 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v96 = type metadata accessor for ISO18013AppleSessionTranscript(0);
  v92 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = &v77[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DigitalPresentmentISOBuilder(0);
  __chkstk_darwin(v10);
  v12 = &v77[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v95 = type metadata accessor for Logger(0);
  v89 = *(_QWORD *)(v95 - 8);
  v13 = __chkstk_darwin(v95);
  v82 = &v77[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v77[-v15];
  v17 = sub_100004828(&qword_100635F70);
  __chkstk_darwin(v17);
  v19 = &v77[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for CBOREncoder(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = CBOREncoder.init()();
  v22 = enum case for ISO18013PresentmentType.digital(_:);
  v23 = type metadata accessor for ISO18013PresentmentType(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 104))(v19, v22, v23);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v19, 0, 1, v23);
  v93 = v21;
  CBOREncoder.presentmentType.setter(v19);
  v25 = type metadata accessor for ValidatedDigitalPresentmentRequest(0);
  v26 = (uint64_t *)(v5 + *(int *)(v25 + 28));
  v27 = *v26;
  v28 = v26[1];
  defaultLogger()(v25);
  v90 = v5;
  v29 = v5;
  v30 = v86;
  v87 = v12;
  sub_1003DC67C(v29, (uint64_t)v12);
  sub_100022948(v27, v28);
  swift_bridgeObjectRetain(a2);
  v31 = v98;
  sub_100022948(v98, v30);
  sub_100022948(v27, v28);
  v99 = a2;
  swift_bridgeObjectRetain(a2);
  v32 = sub_100022948(v31, v30);
  v88 = v16;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    v36 = swift_slowAlloc(42, -1);
    v81 = v25;
    v37 = v36;
    v80 = swift_slowAlloc(128, -1);
    v102 = v80;
    *(_DWORD *)v37 = 136315906;
    v79 = v33;
    v38 = Data.base16EncodedString()();
    v100 = sub_1000E3AC8(v38._countAndFlagsBits, (unint64_t)v38._object, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v37 + 4);
    swift_bridgeObjectRelease(v38._object);
    sub_100007F8C(v27, v28);
    sub_100007F8C(v27, v28);
    *(_WORD *)(v37 + 12) = 2080;
    v39 = *(int *)(v81 + 32);
    v78 = v35;
    v40 = (uint64_t)v87;
    v41 = (uint64_t *)&v87[v39];
    v42 = *v41;
    v43 = v41[1];
    swift_bridgeObjectRetain(v43);
    v100 = sub_1000E3AC8(v42, v43, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v37 + 14);
    swift_bridgeObjectRelease(v43);
    sub_1003DC6C0(v40);
    *(_WORD *)(v37 + 22) = 2080;
    v44 = v99;
    swift_bridgeObjectRetain(v99);
    v100 = sub_1000E3AC8(v97, v44, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v37 + 24);
    swift_bridgeObjectRelease_n(v44, 3);
    *(_WORD *)(v37 + 32) = 2080;
    v45 = v98;
    v46 = Data.base16EncodedString()();
    v100 = sub_1000E3AC8(v46._countAndFlagsBits, (unint64_t)v46._object, &v102);
    v47 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v37 + 34);
    swift_bridgeObjectRelease(v46._object);
    sub_100007F8C(v45, v30);
    sub_100007F8C(v45, v30);
    v48 = v79;
    _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v78, "Building Apple session transcript with nonce %s, merchantID: %s, teamID: %s, encryption key hash: %s", (uint8_t *)v37, 0x2Au);
    v49 = v80;
    swift_arrayDestroy(v80, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    v50 = v37;
    v25 = v81;
    swift_slowDealloc(v50, -1, -1);

    v89 = *(_QWORD *)(v89 + 8);
    ((void (*)(_BYTE *, uint64_t))v89)(v88, v95);
  }
  else
  {
    sub_100007F8C(v27, v28);
    sub_100007F8C(v27, v28);
    sub_1003DC6C0((uint64_t)v87);
    swift_bridgeObjectRelease_n(v99, 2);
    v45 = v98;
    sub_100007F8C(v98, v30);
    sub_100007F8C(v45, v30);

    v89 = *(_QWORD *)(v89 + 8);
    ((void (*)(_BYTE *, uint64_t))v89)(v88, v95);
    v47 = v96;
  }
  v51 = (uint64_t *)(v90 + *(int *)(v25 + 32));
  v52 = *v51;
  v53 = v51[1];
  sub_100022948(v27, v28);
  v54 = v99;
  swift_bridgeObjectRetain(v99);
  sub_100022948(v45, v30);
  v55 = swift_bridgeObjectRetain(v53);
  v56 = v94;
  ISO18013AppleSessionTranscript.init(nonce:merchantID:teamID:encryptionKeyHash:)(v27, v28, v52, v53, v97, v54, v45, v30, v55);
  v57 = sub_100004790(&qword_10063FA30, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013AppleSessionTranscript, (uint64_t)&protocol conformance descriptor for ISO18013AppleSessionTranscript);
  v58 = v93;
  v59 = v91;
  v60 = dispatch thunk of CBOREncoder.encode<A>(_:)(v56, v47, v57);
  v61 = v60;
  v63 = v62;
  if (v59)
  {
    swift_release(v58);
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v56, v47);
    v64 = v85;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v83 + 104))(v85, enum case for DIPError.Code.internalError(_:), v84);
    swift_errorRetain(v59);
    v65 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v66 = type metadata accessor for DIPError(0);
    v67 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v66, v67, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v59, v64, 0, v65, 0xD000000000000077, 0x800000010055EF40, 0xD000000000000031, 0x800000010055EFC0, 73);
    swift_willThrow(v68);
    swift_errorRelease(v59);
  }
  else
  {
    v69 = v82;
    defaultLogger()(v60);
    sub_100022948(v61, v63);
    v70 = sub_100022948(v61, v63);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(32, -1);
      v102 = v99;
      *(_DWORD *)v73 = 136315138;
      v74 = Data.base16EncodedString()();
      v100 = sub_1000E3AC8(v74._countAndFlagsBits, (unint64_t)v74._object, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v73 + 4);
      swift_bridgeObjectRelease(v74._object);
      sub_100007F8C(v61, v63);
      sub_100007F8C(v61, v63);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "DigitalPresentmentISOBuilder built session transcript %s", v73, 0xCu);
      v75 = v99;
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      swift_release(v93);
      ((void (*)(_BYTE *, uint64_t))v89)(v82, v95);
      (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v94, v96);
    }
    else
    {

      swift_release(v58);
      sub_100007F8C(v61, v63);
      sub_100007F8C(v61, v63);
      ((void (*)(_BYTE *, uint64_t))v89)(v69, v95);
      (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v56, v96);
    }
  }
  return v61;
}

uint64_t sub_1003DC67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DigitalPresentmentISOBuilder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DC6C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DigitalPresentmentISOBuilder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003DC6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004828(&qword_100630AE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DC744(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004828(&qword_100630AE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003DC784@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE v16[24];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v3 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v1 + 256) == 1)
  {
    v7 = v1 + 152;
    swift_beginAccess(v1 + 152, v16, 0, 0);
    sub_100038B24(v1 + 152, (uint64_t)&v17, &qword_10063FB40);
    if (v18)
    {
      sub_100008018(&v17, (uint64_t)&v19);
      return sub_100008018(&v19, (uint64_t)a1);
    }
    else
    {
      sub_100008030((uint64_t)&v17, &qword_10063FB40);
      v13 = type metadata accessor for MobileDocumentReaderStorageFlow();
      swift_allocObject(v13, 40, 7);
      v14 = sub_1004F1774();
      v20 = v13;
      v21 = &off_10061A2E8;
      *(_QWORD *)&v19 = v14;
      swift_beginAccess(v7, &v17, 33, 0);
      swift_retain(v14);
      sub_100184E1C((uint64_t)&v19, v7, &qword_10063FB40);
      result = swift_endAccess(&v17);
      a1[3] = v13;
      a1[4] = &off_10061A2E8;
      *a1 = v14;
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD))(v4 + 104))(v6, enum case for DIPError.Code.missingEntitlement(_:));
    v9 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000055, 0x800000010055F570, 0, v6, 0, v9, 0xD000000000000067, 0x800000010055F1F0, 0x46656761726F7473, 0xEB00000000776F6CLL, 49);
    return swift_willThrow(v12);
  }
  return result;
}

uint64_t sub_1003DC9D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[32] = a1;
  v2[33] = v1;
  v3 = type metadata accessor for DIPError(0);
  v2[34] = v3;
  v2[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MobileDocumentReaderSession.Error(0);
  v2[36] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[37] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v6);
  v2[39] = swift_task_alloc(v6);
  v7 = type metadata accessor for DIPError.Code(0);
  v2[40] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[41] = v8;
  v2[42] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AuditToken(0);
  v2[43] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[44] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[45] = swift_task_alloc(v11);
  v2[46] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v2[47] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[48] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[49] = swift_task_alloc(v14);
  v2[50] = swift_task_alloc(v14);
  v2[51] = swift_task_alloc(v14);
  v2[52] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003DCB18, v1, 0);
}

uint64_t sub_1003DCB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  int *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v112 = *(_QWORD *)(v1 + 384);
    v117 = *(_QWORD *)(v1 + 376);
    v121 = *(_QWORD *)(v1 + 416);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v124 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v1 + 248) = sub_1000E3AC8(0xD000000000000016, 0x800000010055F510, &v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 248, v1 + 256, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v8 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
    v8(v121, v117);
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 416);
    v10 = *(_QWORD *)(v1 + 376);
    v11 = *(_QWORD *)(v1 + 384);

    v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  v122 = v8;
  *(_QWORD *)(v1 + 424) = v8;
  v12 = *(_QWORD *)(v1 + 264) + 112;
  swift_beginAccess(v12, v1 + 176, 0, 0);
  sub_100038B24(v12, v1 + 56, &qword_10063FB28);
  v13 = *(_QWORD *)(v1 + 80);
  sub_100008030(v1 + 56, &qword_10063FB28);
  if (v13)
  {
    v15 = *(_QWORD *)(v1 + 328);
    v14 = *(_QWORD *)(v1 + 336);
    v16 = *(_QWORD *)(v1 + 320);
    v17 = *(_QWORD *)(v1 + 272);
    v124 = 0;
    v125 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v18._countAndFlagsBits = 0xD00000000000001ELL;
    v18._object = (void *)0x800000010055F530;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0xD000000000000016;
    v19._object = (void *)0x800000010055F510;
    String.append(_:)(v19);
    v20._countAndFlagsBits = 0xD00000000000001BLL;
    v20._object = (void *)0x800000010055F550;
    String.append(_:)(v20);
    v21 = v124;
    v22 = v125;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v14, enum case for DIPError.Code.unexpectedDaemonState(_:), v16);
    v23 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = swift_allocError(v17, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v21, v22, 0, v14, 0, v23, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000016, 0x800000010055F510, 99);
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 368);
    v28 = *(_QWORD *)(v1 + 352);
    v109 = *(_QWORD *)(v1 + 344);
    v29 = *(_QWORD **)(v1 + 264);
    v30 = v29[28];
    v113 = v29[29];
    sub_10000806C(v29 + 25, v30);
    v31 = ((uint64_t (*)(void))XPCAuditToken.value.getter)();
    v32 = AuditToken.wrapped.getter(v31);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v39(v27, v109);
    *(_QWORD *)(v1 + 136) = v32;
    *(_QWORD *)(v1 + 144) = v34;
    *(_QWORD *)(v1 + 152) = v36;
    *(_QWORD *)(v1 + 160) = v38;
    *(_BYTE *)(v1 + 168) = 0;
    if ((dispatch thunk of MobileDocumentReaderEntitlementChecking.checkPublicEntitlements(auditToken:)(v1 + 136, v30, v113) & 1) != 0)
    {
      v40 = *(_QWORD *)(v1 + 360);
      v41 = *(_QWORD *)(v1 + 344);
      v42 = ((uint64_t (*)(void))XPCAuditToken.value.getter)();
      v43 = AuditToken.wrapped.getter(v42);
      v45 = v44;
      v47 = v46;
      v49 = v48;
      v39(v40, v41);
      v50 = sub_1003EF2B8(v43, v45, v47, v49);
      v51 = *(_QWORD *)(v1 + 368);
      v52 = *(_QWORD **)(v1 + 264);
      v53 = v52[30];
      v54 = v52[31];
      XPCAuditToken.value.getter(v50);
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 8);
      *(_QWORD *)(v1 + 40) = v53;
      *(_QWORD *)(v1 + 48) = v54;
      sub_100022234((_QWORD *)(v1 + 16));
      v55(v51, v53, v54);
      sub_10002581C(v1 + 16, v1 + 96);
      swift_beginAccess(v12, v1 + 200, 33, 0);
      sub_100184E1C(v1 + 96, v12, &qword_10063FB28);
      swift_endAccess(v1 + 200);
      v56 = swift_allocObject(&unk_100616650, 24, 7);
      *(_QWORD *)(v1 + 432) = v56;
      swift_unknownObjectWeakInit(v56 + 16, v52[24]);
      v57 = *(int **)(v54 + 16);
      v58 = v57[1];
      v118 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))((char *)v57 + *v57);
      swift_retain(v56);
      v59 = (_QWORD *)swift_task_alloc(v58);
      *(_QWORD *)(v1 + 440) = v59;
      *v59 = v1;
      v59[1] = sub_1003DD53C;
      return v118(sub_1003EF66C, v56, v53, v54);
    }
    v61 = *(_QWORD *)(v1 + 336);
    v62 = *(_QWORD *)(v1 + 272);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 328) + 104))(v61, enum case for DIPError.Code.missingEntitlement(_:), *(_QWORD *)(v1 + 320));
    v63 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = swift_allocError(v62, v64, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000032, 0x800000010055F4D0, 0, v61, 0, v63, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000016, 0x800000010055F510, 102);
  }
  swift_willThrow(v26);
  v65 = *(_QWORD *)(v1 + 400);
  v66 = *(_QWORD *)(v1 + 376);
  v67 = *(_QWORD *)(v1 + 336);
  v103 = *(_QWORD *)(v1 + 328);
  v104 = *(_QWORD *)(v1 + 312);
  v114 = *(_QWORD *)(v1 + 304);
  v119 = *(_QWORD *)(v1 + 320);
  v106 = *(_QWORD *)(v1 + 296);
  v68 = *(_QWORD *)(v1 + 280);
  v110 = *(_QWORD *)(v1 + 288);
  v124 = 0;
  v125 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v69._countAndFlagsBits = 0xD000000000000021;
  v69._object = (void *)0x800000010055F2E0;
  String.append(_:)(v69);
  v70._countAndFlagsBits = 0xD000000000000016;
  v70._object = (void *)0x800000010055F510;
  String.append(_:)(v70);
  v71._countAndFlagsBits = 0xD000000000000015;
  v71._object = (void *)0x800000010055F330;
  String.append(_:)(v71);
  v72 = v124;
  v73 = v125;
  defaultLogger()(v74);
  DIPRecordError(_:message:log:)(v25, v72, v73, v65);
  swift_bridgeObjectRelease(v73);
  v122(v65, v66);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v103 + 104))(v67, enum case for DIPError.Code.internalError(_:), v119);
  swift_errorRetain(v25);
  v75 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v120 = v25;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v25, v67, 0, v75, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000016, 0x800000010055F510, 113);
  v76 = sub_10010A984(v68, v104);
  defaultLogger()(v76);
  v77 = v114;
  v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 16);
  v78 = v115(v77, v104, v110);
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.error.getter(v79);
  v81 = os_log_type_enabled(v79, v80);
  v82 = *(_QWORD *)(v1 + 392);
  v83 = *(_QWORD *)(v1 + 376);
  v84 = *(_QWORD *)(v1 + 296);
  v85 = *(_QWORD *)(v1 + 304);
  v86 = *(_QWORD *)(v1 + 288);
  if (v81)
  {
    v87 = swift_slowAlloc(22, -1);
    v105 = swift_slowAlloc(64, -1);
    v124 = v105;
    *(_DWORD *)v87 = 136315394;
    *(_QWORD *)(v1 + 232) = sub_1000E3AC8(0xD000000000000016, 0x800000010055F510, &v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 232, v1 + 240, v87 + 4);
    *(_WORD *)(v87 + 12) = 2080;
    v88 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    v89 = Error.localizedDescription.getter(v86, v88);
    v91 = v90;
    *(_QWORD *)(v1 + 224) = sub_1000E3AC8(v89, v90, &v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v87 + 14);
    swift_bridgeObjectRelease(v91);
    v107 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v107(v85, v86);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "MobileDocumentReaderSessionProxy %s finished with error: %s", (uint8_t *)v87, 0x16u);
    swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v87, -1, -1);
  }
  else
  {
    v107 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v107(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 288));
  }

  v122(v82, v83);
  v92 = v115;
  v94 = *(_QWORD *)(v1 + 408);
  v93 = *(_QWORD *)(v1 + 416);
  v96 = *(_QWORD *)(v1 + 392);
  v95 = *(_QWORD *)(v1 + 400);
  v97 = *(_QWORD *)(v1 + 368);
  v108 = *(_QWORD *)(v1 + 360);
  v111 = *(_QWORD *)(v1 + 336);
  v98 = *(_QWORD *)(v1 + 312);
  v116 = *(_QWORD *)(v1 + 304);
  v99 = *(_QWORD *)(v1 + 288);
  v123 = *(_QWORD *)(v1 + 280);
  v100 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
  swift_allocError(v99, v100, 0, 0);
  v102 = v92(v101, v98, v99);
  swift_willThrow(v102);
  swift_errorRelease(v120);
  v107(v98, v99);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  swift_task_dealloc(v98);
  swift_task_dealloc(v116);
  swift_task_dealloc(v123);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003DD53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  swift_release_n(v1, 2);
  return swift_task_switch(sub_1003DD5A0, v2, 0);
}

uint64_t sub_1003DD5A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v1 + 424);
    v7 = *(_QWORD *)(v1 + 408);
    v8 = *(_QWORD *)(v1 + 376);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v25 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v1 + 240) = sub_1000E3AC8(0xD000000000000016, 0x800000010055F510, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v9 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s returning successfully", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v6(v7, v8);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v1 + 424);
    v12 = *(_QWORD *)(v1 + 408);
    v13 = *(_QWORD *)(v1 + 376);

    v11(v12, v13);
  }
  v14 = *(_QWORD *)(v1 + 408);
  v15 = *(_QWORD *)(v1 + 416);
  v17 = *(_QWORD *)(v1 + 392);
  v16 = *(_QWORD *)(v1 + 400);
  v19 = *(_QWORD *)(v1 + 360);
  v18 = *(_QWORD *)(v1 + 368);
  v20 = *(_QWORD *)(v1 + 336);
  v22 = *(_QWORD *)(v1 + 304);
  v21 = *(_QWORD *)(v1 + 312);
  v24 = *(_QWORD *)(v1 + 280);
  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v1 + 16));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003DD79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void *v9;
  id v10;
  void *v11;
  _BYTE v13[24];

  v4 = type metadata accessor for MobileDocumentReaderSession.State(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v9 = (void *)result;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v10 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderSessionState(0));
    v11 = (void *)XPCMobileDocumentReaderSessionState.init(value:)(v7);
    objc_msgSend(v9, "mobileDocumentReaderStateDidChange:", v11);

    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1003DD9BC(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10063FA8C;
  v7 = a1;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1003EFDA8;
  return sub_1003DC9D4((uint64_t)v7);
}

uint64_t sub_1003DDA38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1[24] = v0;
  v2 = type metadata accessor for DIPError(0);
  v1[25] = v2;
  v1[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MobileDocumentReaderSession.Error(0);
  v1[27] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[28] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v5);
  v1[30] = swift_task_alloc(v5);
  v1[31] = swift_task_alloc(v5);
  v6 = type metadata accessor for DIPError.Code(0);
  v1[32] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[33] = v7;
  v1[34] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v1[35] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[36] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[37] = swift_task_alloc(v10);
  v1[38] = swift_task_alloc(v10);
  v1[39] = swift_task_alloc(v10);
  v1[40] = swift_task_alloc(v10);
  return swift_task_switch(sub_1003DDB50, v0, 0);
}

uint64_t sub_1003DDB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  os_log_type_t typea[8];
  os_log_type_t type;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = *(_QWORD *)(v1 + 288);
    v81 = *(_QWORD *)(v1 + 280);
    v84 = *(_QWORD *)(v1 + 320);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v87 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v1 + 184) = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(v84, v81);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 320);
    v11 = *(_QWORD *)(v1 + 280);
    v12 = *(_QWORD *)(v1 + 288);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  *(_QWORD *)(v1 + 328) = v9;
  v13 = *(_QWORD *)(v1 + 192) + 112;
  swift_beginAccess(v13, v1 + 128, 0, 0);
  sub_100038B24(v13, v1 + 56, &qword_10063FB28);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_100008018((__int128 *)(v1 + 56), v1 + 16);
    sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v14 = (_QWORD *)swift_task_alloc(dword_10063423C);
    *(_QWORD *)(v1 + 336) = v14;
    *v14 = v1;
    v14[1] = sub_1003DE304;
    return sub_1000E928C();
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 264);
    v16 = *(_QWORD *)(v1 + 272);
    v18 = *(_QWORD *)(v1 + 256);
    v19 = *(_QWORD *)(v1 + 200);
    sub_100008030(v1 + 56, &qword_10063FB28);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.unexpectedDaemonState(_:), v18);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v19, v21, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000080, 0x800000010055F400, 0, v16, 0, v20, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000018, 0x800000010055F490, 33);
    swift_willThrow(v23);
    v24 = *(_QWORD *)(v1 + 304);
    v25 = *(_QWORD *)(v1 + 272);
    v26 = *(_QWORD *)(v1 + 280);
    v69 = *(_QWORD *)(v1 + 264);
    v70 = *(void (**)(uint64_t, uint64_t))(v1 + 328);
    v27 = *(_QWORD *)(v1 + 248);
    v79 = *(_QWORD *)(v1 + 240);
    v82 = *(_QWORD *)(v1 + 232);
    v85 = *(_QWORD *)(v1 + 256);
    v28 = *(_QWORD *)(v1 + 208);
    v71 = *(_QWORD *)(v1 + 224);
    *(_QWORD *)typea = *(_QWORD *)(v1 + 216);
    v87 = 0;
    v88 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v29._countAndFlagsBits = 0xD000000000000021;
    v29._object = (void *)0x800000010055F2E0;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0xD00000000000001ALL;
    v30._object = (void *)0x8000000100544680;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0xD000000000000015;
    v31._object = (void *)0x800000010055F330;
    String.append(_:)(v31);
    v32 = v87;
    v33 = v88;
    defaultLogger()(v34);
    DIPRecordError(_:message:log:)(v22, v32, v33, v24);
    swift_bridgeObjectRelease(v33);
    v70(v24, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v69 + 104))(v25, enum case for DIPError.Code.internalError(_:), v85);
    swift_errorRetain(v22);
    v35 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v86 = v22;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v22, v25, 0, v35, 0xD000000000000067, 0x800000010055F1F0, 0xD00000000000001ALL, 0x8000000100544680, 127);
    v36 = sub_10010A984(v28, v27);
    defaultLogger()(v36);
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v37(v79, v27, *(_QWORD *)typea);
    v38 = v82;
    v83 = v37;
    v39 = v37(v38, v27, *(_QWORD *)typea);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(void (**)(uint64_t, uint64_t))(v1 + 328);
    v44 = *(_QWORD *)(v1 + 296);
    v45 = *(_QWORD *)(v1 + 280);
    v47 = *(_QWORD *)(v1 + 232);
    v46 = *(_QWORD *)(v1 + 240);
    v48 = *(_QWORD *)(v1 + 216);
    v49 = *(_QWORD *)(v1 + 224);
    if (v42)
    {
      v77 = *(_QWORD *)(v1 + 280);
      type = v41;
      v50 = swift_slowAlloc(32, -1);
      v74 = swift_slowAlloc(96, -1);
      v87 = v74;
      *(_DWORD *)v50 = 136315650;
      *(_QWORD *)(v1 + 152) = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v50 + 4);
      *(_WORD *)(v50 + 12) = 2080;
      v51 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
      v52 = Error.localizedDescription.getter(v48, v51);
      v54 = v53;
      *(_QWORD *)(v1 + 160) = sub_1000E3AC8(v52, v53, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v50 + 14);
      swift_bridgeObjectRelease(v54);
      v55 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v56 = v55(v46, v48);
      *(_WORD *)(v50 + 22) = 2080;
      v57 = MobileDocumentReaderSession.Error.debugDescription.getter(v56);
      if (v58)
      {
        v59 = v58;
      }
      else
      {
        v57 = 7104878;
        v59 = 0xE300000000000000;
      }
      *(_QWORD *)(v1 + 168) = sub_1000E3AC8(v57, v59, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v1 + 176, v50 + 24);
      swift_bridgeObjectRelease(v59);
      v55(v47, v48);
      _os_log_impl((void *)&_mh_execute_header, v40, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy(v74, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v43(v44, v77);
    }
    else
    {
      v55 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v55(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 216));
      v55(v47, v48);

      v43(v44, v45);
    }
    v60 = *(_QWORD *)(v1 + 312);
    v61 = *(_QWORD *)(v1 + 320);
    v63 = *(_QWORD *)(v1 + 296);
    v62 = *(_QWORD *)(v1 + 304);
    v64 = *(_QWORD *)(v1 + 248);
    v75 = *(_QWORD *)(v1 + 272);
    v76 = *(_QWORD *)(v1 + 240);
    v65 = *(_QWORD *)(v1 + 216);
    v78 = *(_QWORD *)(v1 + 232);
    v80 = *(_QWORD *)(v1 + 208);
    v66 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    swift_allocError(v65, v66, 0, 0);
    v68 = v83(v67, v64, v65);
    swift_willThrow(v68);
    swift_errorRelease(v86);
    v55(v64, v65);
    swift_task_dealloc(v61);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v75);
    swift_task_dealloc(v64);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1003DE304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = (_QWORD *)*v3;
  v4[12] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  v5 = v4[42];
  v4[43] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1003DE56C;
  else
    v6 = sub_1003DE370;
  return swift_task_switch(v6, v4[24], 0);
}

uint64_t sub_1003DE370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v2 = defaultLogger()(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v7 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 280);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v25 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 176) = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v9 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s returning successfully", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v6(v7, v8);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v12 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 280);

    v11(v12, v13);
  }
  v14 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 304);
  v18 = *(_QWORD *)(v0 + 272);
  v20 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v24, v14);
}

uint64_t sub_1003DE56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t type;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v52 = *(_QWORD *)(v0 + 264);
  v54 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  v5 = *(_QWORD *)(v0 + 248);
  v64 = *(_QWORD *)(v0 + 240);
  v67 = *(_QWORD *)(v0 + 232);
  v69 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 208);
  v56 = *(_QWORD *)(v0 + 224);
  v59 = *(_QWORD *)(v0 + 216);
  v71[0] = 0;
  v71[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v7._countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010055F2E0;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  v8._object = (void *)0x8000000100544680;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x800000010055F330;
  String.append(_:)(v9);
  defaultLogger()(v10);
  DIPRecordError(_:message:log:)(v1, 0, 0xE000000000000000, v2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v54(v2, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v3, enum case for DIPError.Code.internalError(_:), v69);
  swift_errorRetain(v1);
  v11 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v70 = v1;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v11, 0xD000000000000067, 0x800000010055F1F0, 0xD00000000000001ALL, 0x8000000100544680, 127);
  v12 = sub_10010A984(v6, v5);
  defaultLogger()(v12);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v13(v64, v5, v59);
  v14 = v67;
  v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v13;
  v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v14, v5, v59);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v60 = *(_QWORD *)(v0 + 296);
    v62 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v57 = *(_QWORD *)(v0 + 280);
    type = v17;
    v18 = *(_QWORD *)(v0 + 240);
    v65 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 216);
    v53 = *(_QWORD *)(v0 + 224);
    v20 = swift_slowAlloc(32, -1);
    v55 = swift_slowAlloc(96, -1);
    v71[0] = v55;
    *(_DWORD *)v20 = 136315650;
    *(_QWORD *)(v0 + 152) = sub_1000E3AC8(0xD00000000000001ALL, 0x8000000100544680, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v20 + 4);
    *(_WORD *)(v20 + 12) = 2080;
    v21 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    v22 = v19;
    v23 = v19;
    v24 = v18;
    v25 = Error.localizedDescription.getter(v23, v21);
    v27 = v26;
    *(_QWORD *)(v0 + 160) = sub_1000E3AC8(v25, v26, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v20 + 14);
    swift_bridgeObjectRelease(v27);
    v28 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    v29 = v28(v24, v22);
    *(_WORD *)(v20 + 22) = 2080;
    v30 = v65;
    v31 = MobileDocumentReaderSession.Error.debugDescription.getter(v29);
    if (v32)
    {
      v33 = v32;
    }
    else
    {
      v31 = 7104878;
      v33 = 0xE300000000000000;
    }
    *(_QWORD *)(v0 + 168) = sub_1000E3AC8(v31, v33, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v20 + 24);
    swift_bridgeObjectRelease(v33);
    v66 = (void (*)(uint64_t, uint64_t))v28;
    v28(v30, v22);
    _os_log_impl((void *)&_mh_execute_header, v16, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v62(v60, v57);
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v35 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 216);
    v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
    v39(*(_QWORD *)(v0 + 240), v38);
    v66 = v39;
    v39(v37, v38);

    v34(v35, v36);
  }
  v40 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 320);
  v43 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 272);
  v45 = *(_QWORD *)(v0 + 248);
  v58 = *(_QWORD *)(v0 + 240);
  v61 = *(_QWORD *)(v0 + 232);
  v46 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 208);
  v47 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
  swift_allocError(v46, v47, 0, 0);
  v49 = v68(v48, v45, v46);
  swift_willThrow(v49);
  swift_errorRelease(v70);
  v66(v45, v46);
  swift_task_dealloc(v41);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003DEBB4(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10063FA94;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1003DEC14;
  return sub_1003DDA38();
}

uint64_t sub_1003DEC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 32);
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc(v7);
  swift_release(v8);
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    v11 = 0;
    v12 = (void *)v10;
  }
  else
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v10 = 0;
    v12 = v11;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  ((void (**)(_QWORD, NSString, uint64_t))v13)[2](v13, v11, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1003DECE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for DIPError(0);
  v2[23] = v3;
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MobileDocumentReaderSession.Error(0);
  v2[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[26] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v6);
  v2[28] = swift_task_alloc(v6);
  v2[29] = swift_task_alloc(v6);
  v7 = type metadata accessor for DIPError.Code(0);
  v2[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[31] = v8;
  v2[32] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MobileDocumentReaderConfiguration(0);
  v2[33] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[34] = v10;
  v2[35] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MobileDocumentReaderConfigurationResponse(0);
  v2[36] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[37] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v13);
  v2[39] = swift_task_alloc(v13);
  v2[40] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v2[41] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[42] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[43] = swift_task_alloc(v16);
  v2[44] = swift_task_alloc(v16);
  v2[45] = swift_task_alloc(v16);
  v2[46] = swift_task_alloc(v16);
  return swift_task_switch(sub_1003DEE6C, v1, 0);
}

uint64_t sub_1003DEE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*typea)(uint64_t, uint64_t);
  os_log_type_t type;
  os_log_type_t typeb[8];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = *(_QWORD *)(v1 + 336);
    v85 = *(_QWORD *)(v1 + 328);
    v88 = *(_QWORD *)(v1 + 368);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v91 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v1 + 160) = sub_1000E3AC8(0x2865726170657270, 0xEE00293A68746977, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(v88, v85);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 368);
    v11 = *(_QWORD *)(v1 + 328);
    v12 = *(_QWORD *)(v1 + 336);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  *(_QWORD *)(v1 + 376) = v9;
  v13 = *(_QWORD *)(v1 + 176) + 112;
  swift_beginAccess(v13, v1 + 96, 0, 0);
  sub_100038B24(v13, v1 + 56, &qword_10063FB28);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_100008018((__int128 *)(v1 + 56), v1 + 16);
    sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    XPCMobileDocumentReaderConfiguration.value.getter();
    v14 = (_QWORD *)swift_task_alloc(dword_100634244);
    *(_QWORD *)(v1 + 384) = v14;
    *v14 = v1;
    v14[1] = sub_1003DF6AC;
    return sub_1000E992C(*(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 280));
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 248);
    v16 = *(_QWORD *)(v1 + 256);
    v18 = *(_QWORD *)(v1 + 240);
    v19 = *(_QWORD *)(v1 + 184);
    sub_100008030(v1 + 56, &qword_10063FB28);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.unexpectedDaemonState(_:), v18);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v19, v21, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000080, 0x800000010055F400, 0, v16, 0, v20, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000018, 0x800000010055F490, 33);
    swift_willThrow(v23);
    v24 = *(_QWORD *)(v1 + 352);
    v25 = *(_QWORD *)(v1 + 328);
    v26 = *(_QWORD *)(v1 + 256);
    v72 = *(_QWORD *)(v1 + 248);
    typea = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v27 = *(_QWORD *)(v1 + 232);
    v83 = *(_QWORD *)(v1 + 224);
    v86 = *(_QWORD *)(v1 + 216);
    v89 = *(_QWORD *)(v1 + 240);
    v28 = *(_QWORD *)(v1 + 200);
    v77 = *(_QWORD *)(v1 + 208);
    v29 = *(_QWORD *)(v1 + 192);
    v91 = 0;
    v92 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v30._countAndFlagsBits = 0xD000000000000021;
    v30._object = (void *)0x800000010055F2E0;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0x2865726170657270;
    v31._object = (void *)0xEE00293A68746977;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 0xD000000000000015;
    v32._object = (void *)0x800000010055F330;
    String.append(_:)(v32);
    v33 = v91;
    v34 = v92;
    defaultLogger()(v35);
    DIPRecordError(_:message:log:)(v22, v33, v34, v24);
    swift_bridgeObjectRelease(v34);
    typea(v24, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v26, enum case for DIPError.Code.internalError(_:), v89);
    swift_errorRetain(v22);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v90 = v22;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v22, v26, 0, v36, 0xD000000000000067, 0x800000010055F1F0, 0x2865726170657270, 0xEE00293A68746977, 141);
    v37 = sub_10010A984(v29, v27);
    defaultLogger()(v37);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
    v38(v83, v27, v28);
    v39 = v86;
    v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v39, v27, v28);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v45 = *(_QWORD *)(v1 + 344);
    v46 = *(_QWORD *)(v1 + 328);
    v48 = *(_QWORD *)(v1 + 216);
    v47 = *(_QWORD *)(v1 + 224);
    v50 = *(_QWORD *)(v1 + 200);
    v49 = *(_QWORD *)(v1 + 208);
    if (v43)
    {
      v81 = *(_QWORD *)(v1 + 328);
      type = v42;
      v51 = swift_slowAlloc(32, -1);
      v78 = swift_slowAlloc(96, -1);
      v91 = v78;
      *(_DWORD *)v51 = 136315650;
      *(_QWORD *)(v1 + 120) = sub_1000E3AC8(0x2865726170657270, 0xEE00293A68746977, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v51 + 4);
      *(_WORD *)(v51 + 12) = 2080;
      v52 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
      v53 = Error.localizedDescription.getter(v50, v52);
      v55 = v54;
      *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v53, v54, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v51 + 14);
      swift_bridgeObjectRelease(v55);
      v56 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v57 = v56(v47, v50);
      *(_WORD *)(v51 + 22) = 2080;
      v58 = MobileDocumentReaderSession.Error.debugDescription.getter(v57);
      if (v59)
      {
        v60 = v59;
      }
      else
      {
        v58 = 7104878;
        v60 = 0xE300000000000000;
      }
      *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v58, v60, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v51 + 24);
      swift_bridgeObjectRelease(v60);
      v56(v48, v50);
      _os_log_impl((void *)&_mh_execute_header, v41, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v51, 0x20u);
      swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v44(v45, v81);
    }
    else
    {
      v56 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v56(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 200));
      v56(v48, v50);

      v44(v45, v46);
    }
    v61 = *(_QWORD *)(v1 + 360);
    v62 = *(_QWORD *)(v1 + 368);
    v64 = *(_QWORD *)(v1 + 344);
    v63 = *(_QWORD *)(v1 + 352);
    v70 = *(_QWORD *)(v1 + 320);
    v71 = *(_QWORD *)(v1 + 312);
    v73 = *(_QWORD *)(v1 + 304);
    *(_QWORD *)typeb = *(_QWORD *)(v1 + 280);
    v65 = *(_QWORD *)(v1 + 232);
    v79 = *(_QWORD *)(v1 + 256);
    v80 = *(_QWORD *)(v1 + 224);
    v66 = *(_QWORD *)(v1 + 200);
    v82 = *(_QWORD *)(v1 + 216);
    v84 = *(_QWORD *)(v1 + 192);
    v67 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    swift_allocError(v66, v67, 0, 0);
    v69 = v87(v68, v65, v66);
    swift_willThrow(v69);
    swift_errorRelease(v90);
    v56(v65, v66);
    swift_task_dealloc(v62);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v79);
    swift_task_dealloc(v65);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1003DF6AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  v5 = v2[34];
  v4 = v2[35];
  v6 = v2[33];
  v7 = v2[22];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_1003DFA50;
  else
    v8 = sub_1003DF724;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_1003DF724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  defaultLogger()(v5);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6 = v43(v2, v1, v3);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.info.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v37 = *(_QWORD *)(v0 + 360);
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v35 = *(_QWORD *)(v0 + 328);
    v11 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 288);
    v41 = *(_QWORD *)(v0 + 296);
    v13 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    v44 = v33;
    *(_DWORD *)v13 = 136315394;
    *(_QWORD *)(v0 + 144) = sub_1000E3AC8(0x2865726170657270, 0xEE00293A68746977, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 4);
    *(_WORD *)(v13 + 12) = 2080;
    v43(v11, v10, v12);
    v14 = String.init<A>(describing:)(v11, v12);
    v16 = v15;
    *(_QWORD *)(v0 + 152) = sub_1000E3AC8(v14, v15, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 14);
    swift_bridgeObjectRelease(v16);
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v42(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "MobileDocumentReaderSessionProxy %s returning successfully with response: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v39(v37, v35);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v18 = *(_QWORD *)(v0 + 360);
    v19 = *(_QWORD *)(v0 + 328);
    v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 8);
    v42(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 288));

    v17(v18, v19);
  }
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 368);
  v23 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 352);
  v25 = *(_QWORD *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 320);
  v26 = *(_QWORD *)(v0 + 304);
  v27 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 280);
  v32 = *(_QWORD *)(v0 + 256);
  v34 = *(_QWORD *)(v0 + 232);
  v36 = *(_QWORD *)(v0 + 224);
  v38 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 192);
  v43(v26, v24, v27);
  v28 = objc_allocWithZone((Class)type metadata accessor for XPCMobileDocumentReaderConfigurationResponse(0));
  v29 = XPCMobileDocumentReaderConfigurationResponse.init(value:)(v26);
  v42(v24, v27);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
}

uint64_t sub_1003DFA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_t log;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];

  _s8coreidvd24DigitalPresentmentHelperVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 232);
  v64 = *(_QWORD *)(v0 + 224);
  v67 = *(_QWORD *)(v0 + 216);
  v69 = *(_QWORD *)(v0 + 240);
  v53 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v56 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 192);
  v59 = *(_QWORD *)(v0 + 200);
  v71[0] = 0;
  v71[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v8._countAndFlagsBits = 0xD000000000000021;
  v8._object = (void *)0x800000010055F2E0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x2865726170657270;
  v9._object = (void *)0xEE00293A68746977;
  String.append(_:)(v9);
  v10._object = (void *)0x800000010055F330;
  v10._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v10);
  defaultLogger()(v11);
  DIPRecordError(_:message:log:)(v1, 0, 0xE000000000000000, v2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v53(v2, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, enum case for DIPError.Code.internalError(_:), v69);
  swift_errorRetain(v1);
  v12 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
  v70 = v1;
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v12, 0xD000000000000067, 0x800000010055F1F0, 0x2865726170657270, 0xEE00293A68746977, 141);
  v13 = sub_10010A984(v7, v6);
  defaultLogger()(v13);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v14(v64, v6, v59);
  v15 = v67;
  v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
  v16 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v15, v6, v59);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v60 = *(_QWORD *)(v0 + 344);
    v62 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v57 = *(_QWORD *)(v0 + 328);
    v19 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 200);
    v65 = *(_QWORD *)(v0 + 208);
    v22 = swift_slowAlloc(32, -1);
    v54 = swift_slowAlloc(96, -1);
    v71[0] = v54;
    *(_DWORD *)v22 = 136315650;
    *(_QWORD *)(v0 + 120) = sub_1000E3AC8(0x2865726170657270, 0xEE00293A68746977, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v22 + 4);
    *(_WORD *)(v22 + 12) = 2080;
    v23 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    type = v18;
    v24 = Error.localizedDescription.getter(v21, v23);
    v26 = v25;
    *(_QWORD *)(v0 + 128) = sub_1000E3AC8(v24, v25, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v22 + 14);
    swift_bridgeObjectRelease(v26);
    v27 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8);
    v28 = v27(v20, v21);
    *(_WORD *)(v22 + 22) = 2080;
    v29 = MobileDocumentReaderSession.Error.debugDescription.getter(v28);
    if (v30)
    {
      v31 = v30;
    }
    else
    {
      v29 = 7104878;
      v31 = 0xE300000000000000;
    }
    *(_QWORD *)(v0 + 136) = sub_1000E3AC8(v29, v31, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v22 + 24);
    swift_bridgeObjectRelease(v31);
    v66 = (void (*)(uint64_t, uint64_t))v27;
    v27(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v17, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v62(v60, v57);
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v33 = *(_QWORD *)(v0 + 344);
    v34 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 200);
    v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 208) + 8);
    v37(*(_QWORD *)(v0 + 224), v36);
    v66 = v37;
    v37(v35, v36);

    v32(v33, v34);
  }
  v38 = *(_QWORD *)(v0 + 360);
  v39 = *(_QWORD *)(v0 + 368);
  v40 = *(_QWORD *)(v0 + 344);
  v41 = *(_QWORD *)(v0 + 352);
  v42 = *(_QWORD *)(v0 + 320);
  v49 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 304);
  log = *(os_log_t *)(v0 + 280);
  v55 = *(_QWORD *)(v0 + 256);
  v43 = *(_QWORD *)(v0 + 232);
  v58 = *(_QWORD *)(v0 + 224);
  v61 = *(_QWORD *)(v0 + 216);
  v44 = *(_QWORD *)(v0 + 200);
  v63 = *(_QWORD *)(v0 + 192);
  v45 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
  swift_allocError(v44, v45, 0, 0);
  v47 = v68(v46, v43, v44);
  swift_willThrow(v47);
  swift_errorRelease(v70);
  v66(v43, v44);
  swift_task_dealloc(v39);
  swift_task_dealloc(v38);
  swift_task_dealloc(v41);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v49);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(log);
  swift_task_dealloc(v55);
  swift_task_dealloc(v43);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E010C(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10063FA9C;
  v7 = a1;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1003BB968;
  return sub_1003DECE8((uint64_t)v7);
}

uint64_t sub_1003E0188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for DIPError(0);
  v3[24] = v4;
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MobileDocumentReaderSession.Error(0);
  v3[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[27] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v7);
  v3[29] = swift_task_alloc(v7);
  v3[30] = swift_task_alloc(v7);
  v8 = type metadata accessor for MobileDocumentReaderMerchant(0);
  v3[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[32] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v10);
  v3[34] = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPError.Code(0);
  v3[35] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[36] = v12;
  v3[37] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004828(&qword_10063FB38);
  v3[38] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[39] = swift_task_alloc(v14);
  v3[40] = swift_task_alloc(v14);
  v3[41] = swift_task_alloc(v14);
  v3[42] = swift_task_alloc(v14);
  v15 = type metadata accessor for Logger(0);
  v3[43] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[44] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v17);
  v3[46] = swift_task_alloc(v17);
  v3[47] = swift_task_alloc(v17);
  v3[48] = swift_task_alloc(v17);
  return swift_task_switch(sub_1003E032C, v2, 0);
}

uint64_t sub_1003E032C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*typea)(uint64_t, uint64_t);
  os_log_type_t type;
  os_log_type_t typeb[8];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.info.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v90 = *(_QWORD *)(v1 + 384);
    v6 = *(_QWORD *)(v1 + 352);
    v87 = *(_QWORD *)(v1 + 344);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v93 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v1 + 160) = sub_1000E3AC8(0x746E61686372656DLL, 0xEE00293A726F6628, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "MobileDocumentReaderSessionProxy %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(v90, v87);
  }
  else
  {
    v10 = *(_QWORD *)(v1 + 384);
    v11 = *(_QWORD *)(v1 + 344);
    v12 = *(_QWORD *)(v1 + 352);

    v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  *(_QWORD *)(v1 + 392) = v9;
  v13 = *(_QWORD *)(v1 + 184) + 112;
  swift_beginAccess(v13, v1 + 96, 0, 0);
  sub_100038B24(v13, v1 + 56, &qword_10063FB28);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_100008018((__int128 *)(v1 + 56), v1 + 16);
    sub_10000806C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v14 = (_QWORD *)swift_task_alloc(dword_10063424C);
    *(_QWORD *)(v1 + 400) = v14;
    *v14 = v1;
    v14[1] = sub_1003E0B80;
    return sub_1000EA330(*(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 288);
    v16 = *(_QWORD *)(v1 + 296);
    v18 = *(_QWORD *)(v1 + 280);
    v19 = *(_QWORD *)(v1 + 192);
    sub_100008030(v1 + 56, &qword_10063FB28);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.unexpectedDaemonState(_:), v18);
    v20 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100004790((unint64_t *)&qword_10062F6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v22 = swift_allocError(v19, v21, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000080, 0x800000010055F400, 0, v16, 0, v20, 0xD000000000000067, 0x800000010055F1F0, 0xD000000000000018, 0x800000010055F490, 33);
    swift_willThrow(v23);
    v24 = *(_QWORD *)(v1 + 368);
    v25 = *(_QWORD *)(v1 + 344);
    v26 = *(_QWORD *)(v1 + 296);
    v74 = *(_QWORD *)(v1 + 288);
    typea = *(void (**)(uint64_t, uint64_t))(v1 + 392);
    v91 = *(_QWORD *)(v1 + 280);
    v93 = 0;
    v27 = *(_QWORD *)(v1 + 240);
    v85 = *(_QWORD *)(v1 + 232);
    v88 = *(_QWORD *)(v1 + 224);
    v28 = *(_QWORD *)(v1 + 208);
    v79 = *(_QWORD *)(v1 + 216);
    v29 = *(_QWORD *)(v1 + 200);
    v94 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v30._countAndFlagsBits = 0xD000000000000021;
    v30._object = (void *)0x800000010055F2E0;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 0x746E61686372656DLL;
    v31._object = (void *)0xEE00293A726F6628;
    String.append(_:)(v31);
    v32._countAndFlagsBits = 0xD000000000000015;
    v32._object = (void *)0x800000010055F330;
    String.append(_:)(v32);
    v33 = v93;
    v34 = v94;
    defaultLogger()(v35);
    DIPRecordError(_:message:log:)(v22, v33, v34, v24);
    swift_bridgeObjectRelease(v34);
    typea(v24, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v74 + 104))(v26, enum case for DIPError.Code.internalError(_:), v91);
    swift_errorRetain(v22);
    v36 = sub_100004544((uint64_t)_swiftEmptyArrayStorage);
    v92 = v22;
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v22, v26, 0, v36, 0xD000000000000067, 0x800000010055F1F0, 0x746E61686372656DLL, 0xEE00293A726F6628, 155);
    v37 = sub_10010A984(v29, v27);
    defaultLogger()(v37);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
    v38(v85, v27, v28);
    v39 = v88;
    v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
    v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v39, v27, v28);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(void (**)(uint64_t, uint64_t))(v1 + 392);
    v45 = *(_QWORD *)(v1 + 360);
    v46 = *(_QWORD *)(v1 + 344);
    v48 = *(_QWORD *)(v1 + 224);
    v47 = *(_QWORD *)(v1 + 232);
    v50 = *(_QWORD *)(v1 + 208);
    v49 = *(_QWORD *)(v1 + 216);
    if (v43)
    {
      v83 = *(_QWORD *)(v1 + 344);
      type = v42;
      v51 = swift_slowAlloc(32, -1);
      v80 = swift_slowAlloc(96, -1);
      v93 = v80;
      *(_DWORD *)v51 = 136315650;
      *(_QWORD *)(v1 + 120) = sub_1000E3AC8(0x746E61686372656DLL, 0xEE00293A726F6628, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v51 + 4);
      *(_WORD *)(v51 + 12) = 2080;
      v52 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
      v53 = Error.localizedDescription.getter(v50, v52);
      v55 = v54;
      *(_QWORD *)(v1 + 128) = sub_1000E3AC8(v53, v54, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v51 + 14);
      swift_bridgeObjectRelease(v55);
      v56 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v57 = v56(v47, v50);
      *(_WORD *)(v51 + 22) = 2080;
      v58 = MobileDocumentReaderSession.Error.debugDescription.getter(v57);
      if (v59)
      {
        v60 = v59;
      }
      else
      {
        v58 = 7104878;
        v60 = 0xE300000000000000;
      }
      *(_QWORD *)(v1 + 136) = sub_1000E3AC8(v58, v60, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v51 + 24);
      swift_bridgeObjectRelease(v60);
      v56(v48, v50);
      _os_log_impl((void *)&_mh_execute_header, v41, type, "MobileDocumentReaderSessionProxy %s finished with error: %s. Debug description: %s", (uint8_t *)v51, 0x20u);
      swift_arrayDestroy(v80, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v44(v45, v83);
    }
    else
    {
      v56 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
      v56(*(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 208));
      v56(v48, v50);

      v44(v45, v46);
    }
    v62 = *(_QWORD *)(v1 + 376);
    v61 = *(_QWORD *)(v1 + 384);
    v63 = *(_QWORD *)(v1 + 360);
    v64 = *(_QWORD *)(v1 + 368);
    v70 = *(_QWORD *)(v1 + 336);
    v71 = *(_QWORD *)(v1 + 328);
    v72 = *(_QWORD *)(v1 + 320);
    v73 = *(_QWORD *)(v1 + 312);
    v75 = *(_QWORD *)(v1 + 296);
    *(_QWORD *)typeb = *(_QWORD *)(v1 + 272);
    v65 = *(_QWORD *)(v1 + 240);
    v81 = *(_QWORD *)(v1 + 264);
    v82 = *(_QWORD *)(v1 + 232);
    v66 = *(_QWORD *)(v1 + 208);
    v84 = *(_QWORD *)(v1 + 224);
    v86 = *(_QWORD *)(v1 + 200);
    v67 = sub_100004790(&qword_10063FB30, (uint64_t (*)(uint64_t))&type metadata accessor for MobileDocumentReaderSession.Error, (uint64_t)&protocol conformance descriptor for MobileDocumentReaderSession.Error);
    swift_allocError(v66, v67, 0, 0);
    v69 = v89(v68, v65, v66);
    swift_willThrow(v69);
    swift_errorRelease(v92);
    v56(v65, v66);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v63);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v81);
    swift_task_dealloc(v65);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

